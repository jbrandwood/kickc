Fixing pointer addition (word*~) bsearch16u::$7 ← (word*) bsearch16u::items + (byte~) bsearch16u::$6
Fixing pointer addition (word*~) bsearch16u::$15 ← (word*) bsearch16u::pivot + (number) 1
Fixing pointer addition (word*~) bsearch16u::$1 ← (word*) bsearch16u::items - (number) 1
Fixing pointer array-indexing *((word*) utoa::digit_values + (byte) utoa::digit)
Fixing pointer array-indexing *((dword*) ultoa::digit_values + (byte) ultoa::digit)
Warning! Adding boolean cast to non-boolean condition *((byte*) strcpy::src)
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str_lines::str)
Warning! Adding boolean cast to non-boolean condition (byte) print_str_lines::ch
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str::str)
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str_at::str)
Warning! Adding boolean cast to non-boolean sub-expression (byte) print_str_lines::ch
Identified constant variable (byte*) HEAP_TOP
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) memset::@7
Culled Empty Block (label) memset::@6
Culled Empty Block (label) memset::@8
Culled Empty Block (label) memset::@9
Culled Empty Block (label) memset::@3
Culled Empty Block (label) @3
Culled Empty Block (label) @4
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @13
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) @16
Culled Empty Block (label) @17
Culled Empty Block (label) @18
Culled Empty Block (label) @19
Culled Empty Block (label) @20
Culled Empty Block (label) @21
Culled Empty Block (label) @22
Culled Empty Block (label) @23
Culled Empty Block (label) @24
Culled Empty Block (label) @25
Culled Empty Block (label) @26
Culled Empty Block (label) @27
Culled Empty Block (label) @28
Culled Empty Block (label) @30
Culled Empty Block (label) @31
Culled Empty Block (label) @32
Culled Empty Block (label) @33
Culled Empty Block (label) @34
Culled Empty Block (label) @35
Culled Empty Block (label) @36
Culled Empty Block (label) @37
Culled Empty Block (label) @38
Culled Empty Block (label) euclid::@6
Culled Empty Block (label) euclid::@7
Culled Empty Block (label) euclid::@5
Culled Empty Block (label) euclid::@9
Culled Empty Block (label) euclid::@10
Culled Empty Block (label) euclid::@11

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@12

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  (byte) memset::c#4 ← phi( print_cls/(byte) memset::c#0 )
  (void*) memset::str#3 ← phi( print_cls/(void*) memset::str#0 )
  (word) memset::num#1 ← phi( print_cls/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@4
  (void*) memset::str#1 ← phi( memset/(void*) memset::str#3 memset::@4/(void*) memset::str#4 )
  (void*) memset::return#0 ← (void*) memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#2 ← phi( memset/(word) memset::num#1 )
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#3 )
  (byte*~) memset::$2 ← ((byte*)) (void*) memset::str#2
  (byte*~) memset::$3 ← (byte*~) memset::$2 + (word) memset::num#2
  (byte*) memset::end#0 ← (byte*~) memset::$3
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#2
  to:memset::@4
memset::@4: scope:[memset]  from memset::@2 memset::@5
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@5/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( memset::@2/(void*) memset::str#2 memset::@5/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@5/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@5/(byte*) memset::dst#1 )
  (bool~) memset::$4 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$4) goto memset::@5
  to:memset::@1
memset::@5: scope:[memset]  from memset::@4
  (void*) memset::str#5 ← phi( memset::@4/(void*) memset::str#4 )
  (byte*) memset::end#2 ← phi( memset::@4/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@4/(byte*) memset::dst#2 )
  (byte) memset::c#1 ← phi( memset::@4/(byte) memset::c#2 )
  *((byte*) memset::dst#3) ← (byte) memset::c#1
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@4
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#3 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#3
  return 
  to:@return
@12: scope:[]  from @begin
  (byte*) print_screen#0 ← ((byte*)) (number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@29

(void()) print_ln()
print_ln: scope:[print_ln]  from print_euclid::@6
  (byte*) print_char_cursor#50 ← phi( print_euclid::@6/(byte*) print_char_cursor#22 )
  (byte*) print_line_cursor#31 ← phi( print_euclid::@6/(byte*) print_line_cursor#33 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#26 ← phi( print_ln/(byte*) print_char_cursor#50 print_ln::@1/(byte*) print_char_cursor#26 )
  (byte*) print_line_cursor#16 ← phi( print_ln/(byte*) print_line_cursor#31 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#16 + (number) $28
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#26
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#17 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#1 ← (byte*) print_line_cursor#17
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#27 ← phi( print_ln::@2/(byte*) print_char_cursor#1 )
  (byte*) print_line_cursor#18 ← phi( print_ln::@2/(byte*) print_line_cursor#17 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#18
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#27
  return 
  to:@return
@29: scope:[]  from @12
  (byte*) print_screen#5 ← phi( @12/(byte*) print_screen#0 )
  (byte*) print_char_cursor#56 ← phi( @12/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#36 ← phi( @12/(byte*) print_line_cursor#0 )
  (byte[]) print_hextab ← (const string) $0
  to:@39

(void()) print_byte((byte) print_byte::b)
print_byte: scope:[print_byte]  from print_euclid print_euclid::@2 print_euclid::@5
  (byte*) print_char_cursor#51 ← phi( print_euclid/(byte*) print_char_cursor#53 print_euclid::@2/(byte*) print_char_cursor#19 print_euclid::@5/(byte*) print_char_cursor#54 )
  (byte) print_byte::b#3 ← phi( print_euclid/(byte) print_byte::b#0 print_euclid::@2/(byte) print_byte::b#1 print_euclid::@5/(byte) print_byte::b#2 )
  (byte~) print_byte::$0 ← (byte) print_byte::b#3 >> (number) 4
  (byte) print_char::ch#0 ← *((byte[]) print_hextab + (byte~) print_byte::$0)
  call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#4 ← phi( print_byte/(byte) print_byte::b#3 )
  (byte*) print_char_cursor#28 ← phi( print_byte/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#28
  (number~) print_byte::$2 ← (byte) print_byte::b#4 & (number) $f
  (byte) print_char::ch#1 ← *((byte[]) print_hextab + (number~) print_byte::$2)
  call print_char 
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) print_char_cursor#29 ← phi( print_byte::@1/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#29
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) print_char_cursor#30 ← phi( print_byte::@2/(byte*) print_char_cursor#4 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#30
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_byte print_byte::@1 print_euclid::@1 print_euclid::@3
  (byte*) print_char_cursor#31 ← phi( print_byte/(byte*) print_char_cursor#51 print_byte::@1/(byte*) print_char_cursor#3 print_euclid::@1/(byte*) print_char_cursor#18 print_euclid::@3/(byte*) print_char_cursor#20 )
  (byte) print_char::ch#4 ← phi( print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 print_euclid::@1/(byte) print_char::ch#2 print_euclid::@3/(byte) print_char::ch#3 )
  *((byte*) print_char_cursor#31) ← (byte) print_char::ch#4
  (byte*) print_char_cursor#6 ← ++ (byte*) print_char_cursor#31
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#32 ← phi( print_char/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#32
  return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  (byte*) print_screen#1 ← phi( main/(byte*) print_screen#3 )
  (void*) memset::str#0 ← (void*)(byte*) print_screen#1
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 )
  (byte*) print_line_cursor#3 ← (byte*) print_screen#2
  (byte*) print_char_cursor#8 ← (byte*) print_line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  (byte*) print_char_cursor#33 ← phi( print_cls::@1/(byte*) print_char_cursor#8 )
  (byte*) print_line_cursor#19 ← phi( print_cls::@1/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#19
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#33
  return 
  to:@return

(void()) main()
main: scope:[main]  from @39
  (byte*) print_char_cursor#52 ← phi( @39/(byte*) print_char_cursor#55 )
  (byte*) print_line_cursor#32 ← phi( @39/(byte*) print_line_cursor#34 )
  (byte*) print_screen#3 ← phi( @39/(byte*) print_screen#4 )
  call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) print_char_cursor#34 ← phi( main/(byte*) print_char_cursor#9 )
  (byte*) print_line_cursor#20 ← phi( main/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#20
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#34
  (byte) print_euclid::a#0 ← (number) $80
  (byte) print_euclid::b#0 ← (number) 2
  call print_euclid 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) print_line_cursor#21 ← phi( main::@1/(byte*) print_line_cursor#14 )
  (byte*) print_char_cursor#35 ← phi( main::@1/(byte*) print_char_cursor#24 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#35
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#21
  (byte) print_euclid::a#1 ← (number) $a9
  (byte) print_euclid::b#1 ← (number) $45
  call print_euclid 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte*) print_line_cursor#22 ← phi( main::@2/(byte*) print_line_cursor#14 )
  (byte*) print_char_cursor#36 ← phi( main::@2/(byte*) print_char_cursor#24 )
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#36
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#22
  (byte) print_euclid::a#2 ← (number) $9b
  (byte) print_euclid::b#2 ← (number) $37
  call print_euclid 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) print_line_cursor#23 ← phi( main::@3/(byte*) print_line_cursor#14 )
  (byte*) print_char_cursor#37 ← phi( main::@3/(byte*) print_char_cursor#24 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#37
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#23
  (byte) print_euclid::a#3 ← (number) $c7
  (byte) print_euclid::b#3 ← (number) 3
  call print_euclid 
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte*) print_line_cursor#24 ← phi( main::@4/(byte*) print_line_cursor#14 )
  (byte*) print_char_cursor#38 ← phi( main::@4/(byte*) print_char_cursor#24 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#38
  (byte*) print_line_cursor#9 ← (byte*) print_line_cursor#24
  (byte) print_euclid::a#4 ← (number) $5b
  (byte) print_euclid::b#4 ← (number) $1a
  call print_euclid 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte*) print_line_cursor#25 ← phi( main::@5/(byte*) print_line_cursor#14 )
  (byte*) print_char_cursor#39 ← phi( main::@5/(byte*) print_char_cursor#24 )
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#39
  (byte*) print_line_cursor#10 ← (byte*) print_line_cursor#25
  (byte) print_euclid::a#5 ← (number) $77
  (byte) print_euclid::b#5 ← (number) $bb
  call print_euclid 
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) print_line_cursor#26 ← phi( main::@6/(byte*) print_line_cursor#14 )
  (byte*) print_char_cursor#40 ← phi( main::@6/(byte*) print_char_cursor#24 )
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#40
  (byte*) print_line_cursor#11 ← (byte*) print_line_cursor#26
  to:main::@return
main::@return: scope:[main]  from main::@7
  (byte*) print_char_cursor#41 ← phi( main::@7/(byte*) print_char_cursor#16 )
  (byte*) print_line_cursor#27 ← phi( main::@7/(byte*) print_line_cursor#11 )
  (byte*) print_line_cursor#12 ← (byte*) print_line_cursor#27
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#41
  return 
  to:@return

(void()) print_euclid((byte) print_euclid::a , (byte) print_euclid::b)
print_euclid: scope:[print_euclid]  from main::@1 main::@2 main::@3 main::@4 main::@5 main::@6
  (byte*) print_line_cursor#41 ← phi( main::@1/(byte*) print_line_cursor#5 main::@2/(byte*) print_line_cursor#6 main::@3/(byte*) print_line_cursor#7 main::@4/(byte*) print_line_cursor#8 main::@5/(byte*) print_line_cursor#9 main::@6/(byte*) print_line_cursor#10 )
  (byte) print_euclid::b#10 ← phi( main::@1/(byte) print_euclid::b#0 main::@2/(byte) print_euclid::b#1 main::@3/(byte) print_euclid::b#2 main::@4/(byte) print_euclid::b#3 main::@5/(byte) print_euclid::b#4 main::@6/(byte) print_euclid::b#5 )
  (byte*) print_char_cursor#53 ← phi( main::@1/(byte*) print_char_cursor#10 main::@2/(byte*) print_char_cursor#11 main::@3/(byte*) print_char_cursor#12 main::@4/(byte*) print_char_cursor#13 main::@5/(byte*) print_char_cursor#14 main::@6/(byte*) print_char_cursor#15 )
  (byte) print_euclid::a#6 ← phi( main::@1/(byte) print_euclid::a#0 main::@2/(byte) print_euclid::a#1 main::@3/(byte) print_euclid::a#2 main::@4/(byte) print_euclid::a#3 main::@5/(byte) print_euclid::a#4 main::@6/(byte) print_euclid::a#5 )
  (byte) print_byte::b#0 ← (byte) print_euclid::a#6
  call print_byte 
  to:print_euclid::@1
print_euclid::@1: scope:[print_euclid]  from print_euclid
  (byte*) print_line_cursor#40 ← phi( print_euclid/(byte*) print_line_cursor#41 )
  (byte) print_euclid::a#10 ← phi( print_euclid/(byte) print_euclid::a#6 )
  (byte) print_euclid::b#8 ← phi( print_euclid/(byte) print_euclid::b#10 )
  (byte*) print_char_cursor#42 ← phi( print_euclid/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#42
  (byte) print_char::ch#2 ← (byte) ' '
  call print_char 
  to:print_euclid::@2
print_euclid::@2: scope:[print_euclid]  from print_euclid::@1
  (byte*) print_line_cursor#39 ← phi( print_euclid::@1/(byte*) print_line_cursor#40 )
  (byte) print_euclid::a#9 ← phi( print_euclid::@1/(byte) print_euclid::a#10 )
  (byte) print_euclid::b#6 ← phi( print_euclid::@1/(byte) print_euclid::b#8 )
  (byte*) print_char_cursor#43 ← phi( print_euclid::@1/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#43
  (byte) print_byte::b#1 ← (byte) print_euclid::b#6
  call print_byte 
  to:print_euclid::@3
print_euclid::@3: scope:[print_euclid]  from print_euclid::@2
  (byte*) print_line_cursor#38 ← phi( print_euclid::@2/(byte*) print_line_cursor#39 )
  (byte) print_euclid::b#9 ← phi( print_euclid::@2/(byte) print_euclid::b#6 )
  (byte) print_euclid::a#8 ← phi( print_euclid::@2/(byte) print_euclid::a#9 )
  (byte*) print_char_cursor#44 ← phi( print_euclid::@2/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#44
  (byte) print_char::ch#3 ← (byte) ' '
  call print_char 
  to:print_euclid::@4
print_euclid::@4: scope:[print_euclid]  from print_euclid::@3
  (byte*) print_line_cursor#37 ← phi( print_euclid::@3/(byte*) print_line_cursor#38 )
  (byte) print_euclid::b#7 ← phi( print_euclid::@3/(byte) print_euclid::b#9 )
  (byte) print_euclid::a#7 ← phi( print_euclid::@3/(byte) print_euclid::a#8 )
  (byte*) print_char_cursor#45 ← phi( print_euclid::@3/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#21 ← (byte*) print_char_cursor#45
  (byte) euclid::a#0 ← (byte) print_euclid::a#7
  (byte) euclid::b#0 ← (byte) print_euclid::b#7
  call euclid 
  (byte) euclid::return#0 ← (byte) euclid::return#2
  to:print_euclid::@5
print_euclid::@5: scope:[print_euclid]  from print_euclid::@4
  (byte*) print_line_cursor#35 ← phi( print_euclid::@4/(byte*) print_line_cursor#37 )
  (byte*) print_char_cursor#54 ← phi( print_euclid::@4/(byte*) print_char_cursor#21 )
  (byte) euclid::return#3 ← phi( print_euclid::@4/(byte) euclid::return#0 )
  (byte~) print_euclid::$4 ← (byte) euclid::return#3
  (byte) print_byte::b#2 ← (byte~) print_euclid::$4
  call print_byte 
  to:print_euclid::@6
print_euclid::@6: scope:[print_euclid]  from print_euclid::@5
  (byte*) print_line_cursor#33 ← phi( print_euclid::@5/(byte*) print_line_cursor#35 )
  (byte*) print_char_cursor#46 ← phi( print_euclid::@5/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#22 ← (byte*) print_char_cursor#46
  call print_ln 
  to:print_euclid::@7
print_euclid::@7: scope:[print_euclid]  from print_euclid::@6
  (byte*) print_char_cursor#47 ← phi( print_euclid::@6/(byte*) print_char_cursor#2 )
  (byte*) print_line_cursor#28 ← phi( print_euclid::@6/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#13 ← (byte*) print_line_cursor#28
  (byte*) print_char_cursor#23 ← (byte*) print_char_cursor#47
  to:print_euclid::@return
print_euclid::@return: scope:[print_euclid]  from print_euclid::@7
  (byte*) print_line_cursor#29 ← phi( print_euclid::@7/(byte*) print_line_cursor#13 )
  (byte*) print_char_cursor#48 ← phi( print_euclid::@7/(byte*) print_char_cursor#23 )
  (byte*) print_char_cursor#24 ← (byte*) print_char_cursor#48
  (byte*) print_line_cursor#14 ← (byte*) print_line_cursor#29
  return 
  to:@return

(byte()) euclid((byte) euclid::a , (byte) euclid::b)
euclid: scope:[euclid]  from print_euclid::@4
  (byte) euclid::b#6 ← phi( print_euclid::@4/(byte) euclid::b#0 )
  (byte) euclid::a#7 ← phi( print_euclid::@4/(byte) euclid::a#0 )
  to:euclid::@1
euclid::@1: scope:[euclid]  from euclid euclid::@4 euclid::@8
  (byte) euclid::b#2 ← phi( euclid/(byte) euclid::b#6 euclid::@4/(byte) euclid::b#4 euclid::@8/(byte) euclid::b#1 )
  (byte) euclid::a#2 ← phi( euclid/(byte) euclid::a#7 euclid::@4/(byte) euclid::a#1 euclid::@8/(byte) euclid::a#6 )
  (bool~) euclid::$0 ← (byte) euclid::a#2 != (byte) euclid::b#2
  if((bool~) euclid::$0) goto euclid::@2
  to:euclid::@3
euclid::@2: scope:[euclid]  from euclid::@1
  (byte) euclid::b#3 ← phi( euclid::@1/(byte) euclid::b#2 )
  (byte) euclid::a#3 ← phi( euclid::@1/(byte) euclid::a#2 )
  (bool~) euclid::$1 ← (byte) euclid::a#3 > (byte) euclid::b#3
  if((bool~) euclid::$1) goto euclid::@4
  to:euclid::@8
euclid::@3: scope:[euclid]  from euclid::@1
  (byte) euclid::a#4 ← phi( euclid::@1/(byte) euclid::a#2 )
  (byte) euclid::return#1 ← (byte) euclid::a#4
  to:euclid::@return
euclid::@4: scope:[euclid]  from euclid::@2
  (byte) euclid::b#4 ← phi( euclid::@2/(byte) euclid::b#3 )
  (byte) euclid::a#5 ← phi( euclid::@2/(byte) euclid::a#3 )
  (byte~) euclid::$3 ← (byte) euclid::a#5 - (byte) euclid::b#4
  (byte) euclid::a#1 ← (byte~) euclid::$3
  to:euclid::@1
euclid::@8: scope:[euclid]  from euclid::@2
  (byte) euclid::a#6 ← phi( euclid::@2/(byte) euclid::a#3 )
  (byte) euclid::b#5 ← phi( euclid::@2/(byte) euclid::b#3 )
  (byte~) euclid::$2 ← (byte) euclid::b#5 - (byte) euclid::a#6
  (byte) euclid::b#1 ← (byte~) euclid::$2
  to:euclid::@1
euclid::@return: scope:[euclid]  from euclid::@3
  (byte) euclid::return#4 ← phi( euclid::@3/(byte) euclid::return#1 )
  (byte) euclid::return#2 ← (byte) euclid::return#4
  return 
  to:@return
@39: scope:[]  from @29
  (byte*) print_screen#4 ← phi( @29/(byte*) print_screen#5 )
  (byte*) print_char_cursor#55 ← phi( @29/(byte*) print_char_cursor#56 )
  (byte*) print_line_cursor#34 ← phi( @29/(byte*) print_line_cursor#36 )
  call main 
  to:@40
@40: scope:[]  from @39
  (byte*) print_char_cursor#49 ← phi( @39/(byte*) print_char_cursor#17 )
  (byte*) print_line_cursor#30 ← phi( @39/(byte*) print_line_cursor#12 )
  (byte*) print_line_cursor#15 ← (byte*) print_line_cursor#30
  (byte*) print_char_cursor#25 ← (byte*) print_char_cursor#49
  to:@end
@end: scope:[]  from @40

SYMBOL TABLE SSA
(const string) $0 = (string) "0123456789abcdef"z
(label) @12
(label) @29
(label) @39
(label) @40
(label) @begin
(label) @end
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(byte()) euclid((byte) euclid::a , (byte) euclid::b)
(bool~) euclid::$0
(bool~) euclid::$1
(byte~) euclid::$2
(byte~) euclid::$3
(label) euclid::@1
(label) euclid::@2
(label) euclid::@3
(label) euclid::@4
(label) euclid::@8
(label) euclid::@return
(byte) euclid::a
(byte) euclid::a#0
(byte) euclid::a#1
(byte) euclid::a#2
(byte) euclid::a#3
(byte) euclid::a#4
(byte) euclid::a#5
(byte) euclid::a#6
(byte) euclid::a#7
(byte) euclid::b
(byte) euclid::b#0
(byte) euclid::b#1
(byte) euclid::b#2
(byte) euclid::b#3
(byte) euclid::b#4
(byte) euclid::b#5
(byte) euclid::b#6
(byte) euclid::return
(byte) euclid::return#0
(byte) euclid::return#1
(byte) euclid::return#2
(byte) euclid::return#3
(byte) euclid::return#4
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@return
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(byte*~) memset::$3
(bool~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@4
(label) memset::@5
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(number~) print_byte::$2
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(byte) print_byte::b#4
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(void()) print_euclid((byte) print_euclid::a , (byte) print_euclid::b)
(byte~) print_euclid::$4
(label) print_euclid::@1
(label) print_euclid::@2
(label) print_euclid::@3
(label) print_euclid::@4
(label) print_euclid::@5
(label) print_euclid::@6
(label) print_euclid::@7
(label) print_euclid::@return
(byte) print_euclid::a
(byte) print_euclid::a#0
(byte) print_euclid::a#1
(byte) print_euclid::a#10
(byte) print_euclid::a#2
(byte) print_euclid::a#3
(byte) print_euclid::a#4
(byte) print_euclid::a#5
(byte) print_euclid::a#6
(byte) print_euclid::a#7
(byte) print_euclid::a#8
(byte) print_euclid::a#9
(byte) print_euclid::b
(byte) print_euclid::b#0
(byte) print_euclid::b#1
(byte) print_euclid::b#10
(byte) print_euclid::b#2
(byte) print_euclid::b#3
(byte) print_euclid::b#4
(byte) print_euclid::b#5
(byte) print_euclid::b#6
(byte) print_euclid::b#7
(byte) print_euclid::b#8
(byte) print_euclid::b#9
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#36
(byte*) print_line_cursor#37
(byte*) print_line_cursor#38
(byte*) print_line_cursor#39
(byte*) print_line_cursor#4
(byte*) print_line_cursor#40
(byte*) print_line_cursor#41
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#16 + (number) $28
Adding number conversion cast (unumber) 4 in (byte~) print_byte::$0 ← (byte) print_byte::b#3 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_byte::$2 ← (byte) print_byte::b#4 & (number) $f
Adding number conversion cast (unumber) print_byte::$2 in (number~) print_byte::$2 ← (byte) print_byte::b#4 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (word) memset::num#0 ← (number) $3e8
Adding number conversion cast (unumber) $80 in (byte) print_euclid::a#0 ← (number) $80
Adding number conversion cast (unumber) 2 in (byte) print_euclid::b#0 ← (number) 2
Adding number conversion cast (unumber) $a9 in (byte) print_euclid::a#1 ← (number) $a9
Adding number conversion cast (unumber) $45 in (byte) print_euclid::b#1 ← (number) $45
Adding number conversion cast (unumber) $9b in (byte) print_euclid::a#2 ← (number) $9b
Adding number conversion cast (unumber) $37 in (byte) print_euclid::b#2 ← (number) $37
Adding number conversion cast (unumber) $c7 in (byte) print_euclid::a#3 ← (number) $c7
Adding number conversion cast (unumber) 3 in (byte) print_euclid::b#3 ← (number) 3
Adding number conversion cast (unumber) $5b in (byte) print_euclid::a#4 ← (number) $5b
Adding number conversion cast (unumber) $1a in (byte) print_euclid::b#4 ← (number) $1a
Adding number conversion cast (unumber) $77 in (byte) print_euclid::a#5 ← (number) $77
Adding number conversion cast (unumber) $bb in (byte) print_euclid::b#5 ← (number) $bb
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*~) memset::$2 ← (byte*)(void*) memset::str#2
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#2
Inlining cast (byte*) print_screen#0 ← (byte*)(number) $400
Inlining cast (word) memset::num#0 ← (unumber)(number) $3e8
Inlining cast (byte) print_euclid::a#0 ← (unumber)(number) $80
Inlining cast (byte) print_euclid::b#0 ← (unumber)(number) 2
Inlining cast (byte) print_euclid::a#1 ← (unumber)(number) $a9
Inlining cast (byte) print_euclid::b#1 ← (unumber)(number) $45
Inlining cast (byte) print_euclid::a#2 ← (unumber)(number) $9b
Inlining cast (byte) print_euclid::b#2 ← (unumber)(number) $37
Inlining cast (byte) print_euclid::a#3 ← (unumber)(number) $c7
Inlining cast (byte) print_euclid::b#3 ← (unumber)(number) 3
Inlining cast (byte) print_euclid::a#4 ← (unumber)(number) $5b
Inlining cast (byte) print_euclid::b#4 ← (unumber)(number) $1a
Inlining cast (byte) print_euclid::a#5 ← (unumber)(number) $77
Inlining cast (byte) print_euclid::b#5 ← (unumber)(number) $bb
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast $80
Simplifying constant integer cast 2
Simplifying constant integer cast $a9
Simplifying constant integer cast $45
Simplifying constant integer cast $9b
Simplifying constant integer cast $37
Simplifying constant integer cast $c7
Simplifying constant integer cast 3
Simplifying constant integer cast $5b
Simplifying constant integer cast $1a
Simplifying constant integer cast $77
Simplifying constant integer cast $bb
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $a9
Finalized unsigned number type (byte) $45
Finalized unsigned number type (byte) $9b
Finalized unsigned number type (byte) $37
Finalized unsigned number type (byte) $c7
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $5b
Finalized unsigned number type (byte) $1a
Finalized unsigned number type (byte) $77
Finalized unsigned number type (byte) $bb
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_byte::$2 ← (byte) print_byte::b#4 & (byte) $f
Inversing boolean not [2] (bool~) memset::$1 ← (word) memset::num#1 <= (byte) 0 from [1] (bool~) memset::$0 ← (word) memset::num#1 > (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (void*) memset::return#0 = (void*) memset::str#1 (void*) memset::return#3 (void*) memset::return#1 
Alias (void*) memset::str#2 = (void*) memset::str#3 
Alias (word) memset::num#1 = (word) memset::num#2 
Alias (byte) memset::c#3 = (byte) memset::c#4 
Alias (byte*) memset::end#0 = (byte*~) memset::$3 
Alias (byte) memset::c#1 = (byte) memset::c#2 
Alias (byte*) memset::dst#2 = (byte*) memset::dst#3 
Alias (byte*) memset::end#1 = (byte*) memset::end#2 
Alias (void*) memset::str#4 = (void*) memset::str#5 
Alias (byte*) print_line_cursor#0 = (byte*) print_screen#0 (byte*) print_char_cursor#0 (byte*) print_line_cursor#36 (byte*) print_char_cursor#56 (byte*) print_screen#5 (byte*) print_line_cursor#34 (byte*) print_char_cursor#55 (byte*) print_screen#4 
Alias (byte*) print_line_cursor#1 = (byte*~) print_ln::$0 (byte*) print_line_cursor#17 (byte*) print_char_cursor#1 (byte*) print_line_cursor#18 (byte*) print_char_cursor#27 (byte*) print_line_cursor#2 (byte*) print_char_cursor#2 
Alias (byte) print_byte::b#3 = (byte) print_byte::b#4 
Alias (byte*) print_char_cursor#28 = (byte*) print_char_cursor#3 
Alias (byte*) print_char_cursor#29 = (byte*) print_char_cursor#4 (byte*) print_char_cursor#30 (byte*) print_char_cursor#5 
Alias (byte*) print_char_cursor#32 = (byte*) print_char_cursor#6 (byte*) print_char_cursor#7 
Alias (byte*) print_line_cursor#19 = (byte*) print_screen#2 (byte*) print_screen#1 (byte*) print_line_cursor#3 (byte*) print_char_cursor#8 (byte*) print_char_cursor#33 (byte*) print_line_cursor#4 (byte*) print_char_cursor#9 
Alias (byte*) print_line_cursor#20 = (byte*) print_line_cursor#5 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#34 
Alias (byte*) print_char_cursor#11 = (byte*) print_char_cursor#35 
Alias (byte*) print_line_cursor#21 = (byte*) print_line_cursor#6 
Alias (byte*) print_char_cursor#12 = (byte*) print_char_cursor#36 
Alias (byte*) print_line_cursor#22 = (byte*) print_line_cursor#7 
Alias (byte*) print_char_cursor#13 = (byte*) print_char_cursor#37 
Alias (byte*) print_line_cursor#23 = (byte*) print_line_cursor#8 
Alias (byte*) print_char_cursor#14 = (byte*) print_char_cursor#38 
Alias (byte*) print_line_cursor#24 = (byte*) print_line_cursor#9 
Alias (byte*) print_char_cursor#15 = (byte*) print_char_cursor#39 
Alias (byte*) print_line_cursor#10 = (byte*) print_line_cursor#25 
Alias (byte*) print_char_cursor#16 = (byte*) print_char_cursor#40 (byte*) print_char_cursor#41 (byte*) print_char_cursor#17 
Alias (byte*) print_line_cursor#11 = (byte*) print_line_cursor#26 (byte*) print_line_cursor#27 (byte*) print_line_cursor#12 
Alias (byte) print_euclid::b#10 = (byte) print_euclid::b#8 (byte) print_euclid::b#6 (byte) print_euclid::b#9 (byte) print_euclid::b#7 
Alias (byte) print_euclid::a#10 = (byte) print_euclid::a#6 (byte) print_euclid::a#9 (byte) print_euclid::a#8 (byte) print_euclid::a#7 
Alias (byte*) print_line_cursor#33 = (byte*) print_line_cursor#40 (byte*) print_line_cursor#41 (byte*) print_line_cursor#39 (byte*) print_line_cursor#38 (byte*) print_line_cursor#37 (byte*) print_line_cursor#35 
Alias (byte*) print_char_cursor#18 = (byte*) print_char_cursor#42 
Alias (byte*) print_char_cursor#19 = (byte*) print_char_cursor#43 
Alias (byte*) print_char_cursor#20 = (byte*) print_char_cursor#44 
Alias (byte*) print_char_cursor#21 = (byte*) print_char_cursor#45 (byte*) print_char_cursor#54 
Alias (byte) euclid::return#0 = (byte) euclid::return#3 
Alias (byte) print_byte::b#2 = (byte~) print_euclid::$4 
Alias (byte*) print_char_cursor#22 = (byte*) print_char_cursor#46 
Alias (byte*) print_line_cursor#13 = (byte*) print_line_cursor#28 (byte*) print_line_cursor#29 (byte*) print_line_cursor#14 
Alias (byte*) print_char_cursor#23 = (byte*) print_char_cursor#47 (byte*) print_char_cursor#48 (byte*) print_char_cursor#24 
Alias (byte) euclid::a#2 = (byte) euclid::a#3 (byte) euclid::a#4 (byte) euclid::return#1 (byte) euclid::a#5 (byte) euclid::a#6 (byte) euclid::return#4 (byte) euclid::return#2 
Alias (byte) euclid::b#2 = (byte) euclid::b#3 (byte) euclid::b#4 (byte) euclid::b#5 
Alias (byte) euclid::a#1 = (byte~) euclid::$3 
Alias (byte) euclid::b#1 = (byte~) euclid::$2 
Alias (byte*) print_line_cursor#15 = (byte*) print_line_cursor#30 
Alias (byte*) print_char_cursor#25 = (byte*) print_char_cursor#49 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) memset::num#1 (word) memset::num#0
Identical Phi Values (void*) memset::str#2 (void*) memset::str#0
Identical Phi Values (byte) memset::c#3 (byte) memset::c#0
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#4 (void*) memset::str#2
Identical Phi Values (byte) memset::c#1 (byte) memset::c#3
Identical Phi Values (byte*) print_line_cursor#31 (byte*) print_line_cursor#33
Identical Phi Values (byte*) print_char_cursor#50 (byte*) print_char_cursor#22
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#50
Identical Phi Values (byte*) print_char_cursor#28 (byte*) print_char_cursor#32
Identical Phi Values (byte*) print_char_cursor#29 (byte*) print_char_cursor#32
Identical Phi Values (byte*) print_line_cursor#19 (byte*) print_screen#3
Identical Phi Values (byte*) print_screen#3 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#32 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#52 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#20 (byte*) print_line_cursor#19
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_line_cursor#19
Identical Phi Values (byte*) print_char_cursor#11 (byte*) print_char_cursor#23
Identical Phi Values (byte*) print_line_cursor#21 (byte*) print_line_cursor#13
Identical Phi Values (byte*) print_char_cursor#12 (byte*) print_char_cursor#23
Identical Phi Values (byte*) print_line_cursor#22 (byte*) print_line_cursor#13
Identical Phi Values (byte*) print_char_cursor#13 (byte*) print_char_cursor#23
Identical Phi Values (byte*) print_line_cursor#23 (byte*) print_line_cursor#13
Identical Phi Values (byte*) print_char_cursor#14 (byte*) print_char_cursor#23
Identical Phi Values (byte*) print_line_cursor#24 (byte*) print_line_cursor#13
Identical Phi Values (byte*) print_char_cursor#15 (byte*) print_char_cursor#23
Identical Phi Values (byte*) print_line_cursor#10 (byte*) print_line_cursor#13
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_char_cursor#23
Identical Phi Values (byte*) print_line_cursor#11 (byte*) print_line_cursor#13
Identical Phi Values (byte*) print_char_cursor#18 (byte*) print_char_cursor#29
Identical Phi Values (byte*) print_char_cursor#19 (byte*) print_char_cursor#32
Identical Phi Values (byte*) print_char_cursor#20 (byte*) print_char_cursor#29
Identical Phi Values (byte*) print_char_cursor#21 (byte*) print_char_cursor#32
Identical Phi Values (byte*) print_char_cursor#22 (byte*) print_char_cursor#29
Identical Phi Values (byte*) print_line_cursor#13 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_line_cursor#1
Identical Phi Values (byte) euclid::a#7 (byte) euclid::a#0
Identical Phi Values (byte) euclid::b#6 (byte) euclid::b#0
Identical Phi Values (byte*) print_line_cursor#15 (byte*) print_line_cursor#11
Identical Phi Values (byte*) print_char_cursor#25 (byte*) print_char_cursor#16
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memset::$1 [3] if((word) memset::num#0<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$4 [13] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@5
Simple Condition (bool~) print_ln::$1 [28] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#32) goto print_ln::@1
Simple Condition (bool~) euclid::$0 [153] if((byte) euclid::a#2!=(byte) euclid::b#2) goto euclid::@2
Simple Condition (bool~) euclid::$1 [156] if((byte) euclid::a#2>(byte) euclid::b#2) goto euclid::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) print_line_cursor#0 = (byte*) 1024
Constant (const byte[]) print_hextab = $0
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $3e8
Constant (const byte) print_euclid::a#0 = $80
Constant (const byte) print_euclid::b#0 = 2
Constant (const byte) print_euclid::a#1 = $a9
Constant (const byte) print_euclid::b#1 = $45
Constant (const byte) print_euclid::a#2 = $9b
Constant (const byte) print_euclid::b#2 = $37
Constant (const byte) print_euclid::a#3 = $c7
Constant (const byte) print_euclid::b#3 = 3
Constant (const byte) print_euclid::a#4 = $5b
Constant (const byte) print_euclid::b#4 = $1a
Constant (const byte) print_euclid::a#5 = $77
Constant (const byte) print_euclid::b#5 = $bb
Constant (const byte) print_char::ch#2 = ' '
Constant (const byte) print_char::ch#3 = ' '
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (void*)print_line_cursor#0 in [58] (void*) memset::str#0 ← (void*)(const byte*) print_line_cursor#0
Successful SSA optimization Pass2ConstantValues
if() condition always false - eliminating [3] if((const word) memset::num#0<=(byte) 0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Eliminating unused variable (void*) memset::return#2 and assignment [26] (void*) memset::return#2 ← (void*) memset::str#0
Successful SSA optimization PassNEliminateUnusedVars
Constant (const void*) memset::str#0 = (void*)print_line_cursor#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte*)memset::str#0 in [0] (byte*~) memset::$2 ← (byte*)(const void*) memset::str#0
Constant value identified (byte*)memset::str#0 in [2] (byte*) memset::dst#0 ← (byte*)(const void*) memset::str#0
Successful SSA optimization Pass2ConstantValues
Constant (const byte*) memset::$2 = (byte*)memset::str#0
Constant (const byte*) memset::dst#0 = (byte*)memset::str#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [0] (byte*) memset::end#0 ← (const byte*) memset::$2 + (const word) memset::num#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memset::end#0 = memset::$2+memset::num#0
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte*) memset::dst#0
Inlining constant with var siblings (const byte) print_char::ch#2
Inlining constant with var siblings (const byte) print_char::ch#3
Inlining constant with var siblings (const byte) print_euclid::a#0
Inlining constant with var siblings (const byte) print_euclid::b#0
Inlining constant with var siblings (const byte) print_euclid::a#1
Inlining constant with var siblings (const byte) print_euclid::b#1
Inlining constant with var siblings (const byte) print_euclid::a#2
Inlining constant with var siblings (const byte) print_euclid::b#2
Inlining constant with var siblings (const byte) print_euclid::a#3
Inlining constant with var siblings (const byte) print_euclid::b#3
Inlining constant with var siblings (const byte) print_euclid::a#4
Inlining constant with var siblings (const byte) print_euclid::b#4
Inlining constant with var siblings (const byte) print_euclid::a#5
Inlining constant with var siblings (const byte) print_euclid::b#5
Inlining constant with var siblings (const byte*) print_line_cursor#0
Constant inlined print_line_cursor#0 = (byte*) 1024
Constant inlined $0 = (const byte[]) print_hextab
Constant inlined print_char::ch#3 = (byte) ' '
Constant inlined print_euclid::b#4 = (byte) $1a
Constant inlined print_euclid::a#5 = (byte) $77
Constant inlined print_char::ch#2 = (byte) ' '
Constant inlined print_euclid::b#3 = (byte) 3
Constant inlined print_euclid::a#4 = (byte) $5b
Constant inlined memset::$2 = (byte*)(const void*) memset::str#0
Constant inlined print_euclid::b#5 = (byte) $bb
Constant inlined print_euclid::b#0 = (byte) 2
Constant inlined print_euclid::a#1 = (byte) $a9
Constant inlined print_euclid::a#0 = (byte) $80
Constant inlined print_euclid::b#2 = (byte) $37
Constant inlined print_euclid::a#3 = (byte) $c7
Constant inlined print_euclid::b#1 = (byte) $45
Constant inlined print_euclid::a#2 = (byte) $9b
Constant inlined memset::dst#0 = (byte*)(const void*) memset::str#0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @12
Adding NOP phi() at start of @29
Adding NOP phi() at start of @39
Adding NOP phi() at start of @40
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of print_euclid::@6
Adding NOP phi() at start of print_euclid::@7
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_byte::@2
Adding NOP phi() at start of euclid::@3
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [] to main:4 
Calls in [main] to print_cls:8 print_euclid:10 print_euclid:13 print_euclid:16 print_euclid:19 print_euclid:22 print_euclid:25 
Calls in [print_euclid] to print_byte:32 print_char:34 print_byte:38 print_char:40 euclid:43 print_byte:48 print_ln:50 
Calls in [print_byte] to print_char:65 print_char:70 
Calls in [print_cls] to memset:91 

Created 12 initial phi equivalence classes
Not coalescing [11] print_char_cursor#64 ← print_line_cursor#1
Coalesced [12] print_line_cursor#44 ← print_line_cursor#1
Not coalescing [14] print_char_cursor#65 ← print_line_cursor#1
Coalesced (already) [15] print_line_cursor#45 ← print_line_cursor#1
Not coalescing [17] print_char_cursor#66 ← print_line_cursor#1
Coalesced (already) [18] print_line_cursor#46 ← print_line_cursor#1
Not coalescing [20] print_char_cursor#67 ← print_line_cursor#1
Coalesced (already) [21] print_line_cursor#47 ← print_line_cursor#1
Not coalescing [23] print_char_cursor#68 ← print_line_cursor#1
Coalesced (already) [24] print_line_cursor#48 ← print_line_cursor#1
Coalesced [30] print_byte::b#5 ← print_byte::b#0
Coalesced [31] print_char_cursor#57 ← print_char_cursor#53
Coalesced [33] print_char_cursor#62 ← print_char_cursor#32
Coalesced [36] print_byte::b#6 ← print_byte::b#1
Coalesced [37] print_char_cursor#58 ← print_char_cursor#32
Coalesced (already) [39] print_char_cursor#63 ← print_char_cursor#32
Coalesced [46] print_byte::b#7 ← print_byte::b#2
Coalesced (already) [47] print_char_cursor#59 ← print_char_cursor#32
Coalesced [53] print_line_cursor#42 ← print_line_cursor#33
Coalesced (already) [59] print_line_cursor#43 ← print_line_cursor#1
Coalesced [63] print_char::ch#5 ← print_char::ch#0
Coalesced (already) [64] print_char_cursor#60 ← print_char_cursor#51
Coalesced [68] print_char::ch#6 ← print_char::ch#1
Coalesced (already) [69] print_char_cursor#61 ← print_char_cursor#32
Coalesced [77] euclid::a#8 ← euclid::a#0
Coalesced [78] euclid::b#7 ← euclid::b#0
Coalesced (already) [85] euclid::a#10 ← euclid::a#2
Coalesced [86] euclid::b#9 ← euclid::b#1
Coalesced [88] euclid::a#9 ← euclid::a#1
Coalesced (already) [89] euclid::b#8 ← euclid::b#2
Coalesced [102] memset::dst#4 ← memset::dst#1
Coalesced down to 9 phi equivalence classes
Culled Empty Block (label) @12
Culled Empty Block (label) @29
Culled Empty Block (label) @40
Culled Empty Block (label) main::@7
Culled Empty Block (label) print_euclid::@7
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) euclid::@3
Culled Empty Block (label) print_cls::@1
Culled Empty Block (label) memset::@2
Culled Empty Block (label) memset::@1
Renumbering block @39 to @1
Renumbering block memset::@4 to memset::@1
Renumbering block memset::@5 to memset::@2
Renumbering block euclid::@4 to euclid::@3
Renumbering block euclid::@8 to euclid::@4
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of print_euclid::@1
Adding NOP phi() at start of print_euclid::@3
Adding NOP phi() at start of print_euclid::@6
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of euclid
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of memset

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call print_euclid 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] (byte*~) print_char_cursor#64 ← (byte*) print_line_cursor#1
  [9] call print_euclid 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] (byte*~) print_char_cursor#65 ← (byte*) print_line_cursor#1
  [11] call print_euclid 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [12] (byte*~) print_char_cursor#66 ← (byte*) print_line_cursor#1
  [13] call print_euclid 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [14] (byte*~) print_char_cursor#67 ← (byte*) print_line_cursor#1
  [15] call print_euclid 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [16] (byte*~) print_char_cursor#68 ← (byte*) print_line_cursor#1
  [17] call print_euclid 
  to:main::@return
main::@return: scope:[main]  from main::@6
  [18] return 
  to:@return

(void()) print_euclid((byte) print_euclid::a , (byte) print_euclid::b)
print_euclid: scope:[print_euclid]  from main::@1 main::@2 main::@3 main::@4 main::@5 main::@6
  [19] (byte*) print_line_cursor#33 ← phi( main::@1/(byte*) 1024 main::@2/(byte*) print_line_cursor#1 main::@3/(byte*) print_line_cursor#1 main::@4/(byte*) print_line_cursor#1 main::@5/(byte*) print_line_cursor#1 main::@6/(byte*) print_line_cursor#1 )
  [19] (byte) print_euclid::b#10 ← phi( main::@1/(byte) 2 main::@2/(byte) $45 main::@3/(byte) $37 main::@4/(byte) 3 main::@5/(byte) $1a main::@6/(byte) $bb )
  [19] (byte*) print_char_cursor#53 ← phi( main::@1/(byte*) 1024 main::@2/(byte*~) print_char_cursor#64 main::@3/(byte*~) print_char_cursor#65 main::@4/(byte*~) print_char_cursor#66 main::@5/(byte*~) print_char_cursor#67 main::@6/(byte*~) print_char_cursor#68 )
  [19] (byte) print_euclid::a#10 ← phi( main::@1/(byte) $80 main::@2/(byte) $a9 main::@3/(byte) $9b main::@4/(byte) $c7 main::@5/(byte) $5b main::@6/(byte) $77 )
  [20] (byte) print_byte::b#0 ← (byte) print_euclid::a#10
  [21] call print_byte 
  to:print_euclid::@1
print_euclid::@1: scope:[print_euclid]  from print_euclid
  [22] phi()
  [23] call print_char 
  to:print_euclid::@2
print_euclid::@2: scope:[print_euclid]  from print_euclid::@1
  [24] (byte) print_byte::b#1 ← (byte) print_euclid::b#10
  [25] call print_byte 
  to:print_euclid::@3
print_euclid::@3: scope:[print_euclid]  from print_euclid::@2
  [26] phi()
  [27] call print_char 
  to:print_euclid::@4
print_euclid::@4: scope:[print_euclid]  from print_euclid::@3
  [28] (byte) euclid::a#0 ← (byte) print_euclid::a#10
  [29] (byte) euclid::b#0 ← (byte) print_euclid::b#10
  [30] call euclid 
  [31] (byte) euclid::return#0 ← (byte) euclid::a#2
  to:print_euclid::@5
print_euclid::@5: scope:[print_euclid]  from print_euclid::@4
  [32] (byte) print_byte::b#2 ← (byte) euclid::return#0
  [33] call print_byte 
  to:print_euclid::@6
print_euclid::@6: scope:[print_euclid]  from print_euclid::@5
  [34] phi()
  [35] call print_ln 
  to:print_euclid::@return
print_euclid::@return: scope:[print_euclid]  from print_euclid::@6
  [36] return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from print_euclid::@6
  [37] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [38] (byte*) print_line_cursor#16 ← phi( print_ln/(byte*) print_line_cursor#33 print_ln::@1/(byte*) print_line_cursor#1 )
  [39] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#16 + (byte) $28
  [40] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#32) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [41] return 
  to:@return

(void()) print_byte((byte) print_byte::b)
print_byte: scope:[print_byte]  from print_euclid print_euclid::@2 print_euclid::@5
  [42] (byte*) print_char_cursor#51 ← phi( print_euclid/(byte*) print_char_cursor#53 print_euclid::@2/(byte*) print_char_cursor#32 print_euclid::@5/(byte*) print_char_cursor#32 )
  [42] (byte) print_byte::b#3 ← phi( print_euclid/(byte) print_byte::b#0 print_euclid::@2/(byte) print_byte::b#1 print_euclid::@5/(byte) print_byte::b#2 )
  [43] (byte~) print_byte::$0 ← (byte) print_byte::b#3 >> (byte) 4
  [44] (byte) print_char::ch#0 ← *((const byte[]) print_hextab + (byte~) print_byte::$0)
  [45] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [46] (byte~) print_byte::$2 ← (byte) print_byte::b#3 & (byte) $f
  [47] (byte) print_char::ch#1 ← *((const byte[]) print_hextab + (byte~) print_byte::$2)
  [48] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [49] return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_byte print_byte::@1 print_euclid::@1 print_euclid::@3
  [50] (byte*) print_char_cursor#31 ← phi( print_byte/(byte*) print_char_cursor#51 print_byte::@1/(byte*) print_char_cursor#32 print_euclid::@1/(byte*) print_char_cursor#32 print_euclid::@3/(byte*) print_char_cursor#32 )
  [50] (byte) print_char::ch#4 ← phi( print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 print_euclid::@1/(byte) ' ' print_euclid::@3/(byte) ' ' )
  [51] *((byte*) print_char_cursor#31) ← (byte) print_char::ch#4
  [52] (byte*) print_char_cursor#32 ← ++ (byte*) print_char_cursor#31
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [53] return 
  to:@return

(byte()) euclid((byte) euclid::a , (byte) euclid::b)
euclid: scope:[euclid]  from print_euclid::@4
  [54] phi()
  to:euclid::@1
euclid::@1: scope:[euclid]  from euclid euclid::@3 euclid::@4
  [55] (byte) euclid::b#2 ← phi( euclid/(byte) euclid::b#0 euclid::@3/(byte) euclid::b#2 euclid::@4/(byte) euclid::b#1 )
  [55] (byte) euclid::a#2 ← phi( euclid/(byte) euclid::a#0 euclid::@3/(byte) euclid::a#1 euclid::@4/(byte) euclid::a#2 )
  [56] if((byte) euclid::a#2!=(byte) euclid::b#2) goto euclid::@2
  to:euclid::@return
euclid::@return: scope:[euclid]  from euclid::@1
  [57] return 
  to:@return
euclid::@2: scope:[euclid]  from euclid::@1
  [58] if((byte) euclid::a#2>(byte) euclid::b#2) goto euclid::@3
  to:euclid::@4
euclid::@4: scope:[euclid]  from euclid::@2
  [59] (byte) euclid::b#1 ← (byte) euclid::b#2 - (byte) euclid::a#2
  to:euclid::@1
euclid::@3: scope:[euclid]  from euclid::@2
  [60] (byte) euclid::a#1 ← (byte) euclid::a#2 - (byte) euclid::b#2
  to:euclid::@1

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [61] phi()
  [62] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [63] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [64] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [65] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [66] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [67] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [68] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [69] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1


VARIABLE REGISTER WEIGHTS
(byte()) euclid((byte) euclid::a , (byte) euclid::b)
(byte) euclid::a
(byte) euclid::a#0 1.3333333333333333
(byte) euclid::a#1 22.0
(byte) euclid::a#2 13.5
(byte) euclid::b
(byte) euclid::b#0 2.0
(byte) euclid::b#1 22.0
(byte) euclid::b#2 19.75
(byte) euclid::return
(byte) euclid::return#0 4.0
(void()) main()
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte*) memset::dst
(byte*) memset::dst#1 22.0
(byte*) memset::dst#2 14.666666666666666
(byte*) memset::end
(word) memset::num
(void*) memset::return
(void*) memset::str
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#0 4.0
(byte) print_byte::b#1 4.0
(byte) print_byte::b#2 4.0
(byte) print_byte::b#3 2.5
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 4.0
(byte) print_char::ch#1 4.0
(byte) print_char::ch#4 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#31 6.0
(byte*) print_char_cursor#32 0.9199999999999998
(byte*) print_char_cursor#51 2.6666666666666665
(byte*) print_char_cursor#53 6.0
(byte*~) print_char_cursor#64 4.0
(byte*~) print_char_cursor#65 4.0
(byte*~) print_char_cursor#66 4.0
(byte*~) print_char_cursor#67 4.0
(byte*~) print_char_cursor#68 4.0
(void()) print_cls()
(void()) print_euclid((byte) print_euclid::a , (byte) print_euclid::b)
(byte) print_euclid::a
(byte) print_euclid::a#10 0.4444444444444444
(byte) print_euclid::b
(byte) print_euclid::b#10 0.4
(byte*) print_line_cursor
(byte*) print_line_cursor#1 3.533333333333333
(byte*) print_line_cursor#16 24.0
(byte*) print_line_cursor#33 0.7058823529411765
(void()) print_ln()
(byte*) print_screen

Initial phi equivalence classes
[ print_euclid::a#10 ]
[ print_euclid::b#10 ]
[ print_line_cursor#16 print_line_cursor#33 print_line_cursor#1 ]
[ print_byte::b#3 print_byte::b#0 print_byte::b#1 print_byte::b#2 ]
[ print_char::ch#4 print_char::ch#0 print_char::ch#1 ]
[ print_char_cursor#31 print_char_cursor#51 print_char_cursor#53 print_char_cursor#64 print_char_cursor#65 print_char_cursor#66 print_char_cursor#67 print_char_cursor#68 print_char_cursor#32 ]
[ euclid::a#2 euclid::a#0 euclid::a#1 ]
[ euclid::b#2 euclid::b#0 euclid::b#1 ]
[ memset::dst#2 memset::dst#1 ]
Added variable euclid::return#0 to zero page equivalence class [ euclid::return#0 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Complete equivalence classes
[ print_euclid::a#10 ]
[ print_euclid::b#10 ]
[ print_line_cursor#16 print_line_cursor#33 print_line_cursor#1 ]
[ print_byte::b#3 print_byte::b#0 print_byte::b#1 print_byte::b#2 ]
[ print_char::ch#4 print_char::ch#0 print_char::ch#1 ]
[ print_char_cursor#31 print_char_cursor#51 print_char_cursor#53 print_char_cursor#64 print_char_cursor#65 print_char_cursor#66 print_char_cursor#67 print_char_cursor#68 print_char_cursor#32 ]
[ euclid::a#2 euclid::a#0 euclid::a#1 ]
[ euclid::b#2 euclid::b#0 euclid::b#1 ]
[ memset::dst#2 memset::dst#1 ]
[ euclid::return#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
Allocated zp ZP_BYTE:2 [ print_euclid::a#10 ]
Allocated zp ZP_BYTE:3 [ print_euclid::b#10 ]
Allocated zp ZP_WORD:4 [ print_line_cursor#16 print_line_cursor#33 print_line_cursor#1 ]
Allocated zp ZP_BYTE:6 [ print_byte::b#3 print_byte::b#0 print_byte::b#1 print_byte::b#2 ]
Allocated zp ZP_BYTE:7 [ print_char::ch#4 print_char::ch#0 print_char::ch#1 ]
Allocated zp ZP_WORD:8 [ print_char_cursor#31 print_char_cursor#51 print_char_cursor#53 print_char_cursor#64 print_char_cursor#65 print_char_cursor#66 print_char_cursor#67 print_char_cursor#68 print_char_cursor#32 ]
Allocated zp ZP_BYTE:10 [ euclid::a#2 euclid::a#0 euclid::a#1 ]
Allocated zp ZP_BYTE:11 [ euclid::b#2 euclid::b#0 euclid::b#1 ]
Allocated zp ZP_WORD:12 [ memset::dst#2 memset::dst#1 ]
Allocated zp ZP_BYTE:14 [ euclid::return#0 ]
Allocated zp ZP_BYTE:15 [ print_byte::$0 ]
Allocated zp ZP_BYTE:16 [ print_byte::$2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
/*
 * Find greatest common denominator using subtraction-based Euclidian algorithm
 * See https://en.wikipedia.org/wiki/Euclidean_algorithm
 * Based on facebook post from
 */
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_line_cursor = 4
  .label print_char_cursor = 8
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    // [5] call print_cls 
    // [61] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
    // main::@1
  b1:
    // [7] call print_euclid 
    // [19] phi from main::@1 to print_euclid [phi:main::@1->print_euclid]
  print_euclid_from_b1:
    // [19] phi (byte*) print_line_cursor#33 = (byte*) 1024 [phi:main::@1->print_euclid#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    // [19] phi (byte) print_euclid::b#10 = (byte) 2 [phi:main::@1->print_euclid#1] -- vbuz1=vbuc1 
    lda #2
    sta.z print_euclid.b
    // [19] phi (byte*) print_char_cursor#53 = (byte*) 1024 [phi:main::@1->print_euclid#2] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [19] phi (byte) print_euclid::a#10 = (byte) $80 [phi:main::@1->print_euclid#3] -- vbuz1=vbuc1 
    lda #$80
    sta.z print_euclid.a
    jsr print_euclid
    jmp b2
    // main::@2
  b2:
    // [8] (byte*~) print_char_cursor#64 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [9] call print_euclid 
    // [19] phi from main::@2 to print_euclid [phi:main::@2->print_euclid]
  print_euclid_from_b2:
    // [19] phi (byte*) print_line_cursor#33 = (byte*) print_line_cursor#1 [phi:main::@2->print_euclid#0] -- register_copy 
    // [19] phi (byte) print_euclid::b#10 = (byte) $45 [phi:main::@2->print_euclid#1] -- vbuz1=vbuc1 
    lda #$45
    sta.z print_euclid.b
    // [19] phi (byte*) print_char_cursor#53 = (byte*~) print_char_cursor#64 [phi:main::@2->print_euclid#2] -- register_copy 
    // [19] phi (byte) print_euclid::a#10 = (byte) $a9 [phi:main::@2->print_euclid#3] -- vbuz1=vbuc1 
    lda #$a9
    sta.z print_euclid.a
    jsr print_euclid
    jmp b3
    // main::@3
  b3:
    // [10] (byte*~) print_char_cursor#65 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [11] call print_euclid 
    // [19] phi from main::@3 to print_euclid [phi:main::@3->print_euclid]
  print_euclid_from_b3:
    // [19] phi (byte*) print_line_cursor#33 = (byte*) print_line_cursor#1 [phi:main::@3->print_euclid#0] -- register_copy 
    // [19] phi (byte) print_euclid::b#10 = (byte) $37 [phi:main::@3->print_euclid#1] -- vbuz1=vbuc1 
    lda #$37
    sta.z print_euclid.b
    // [19] phi (byte*) print_char_cursor#53 = (byte*~) print_char_cursor#65 [phi:main::@3->print_euclid#2] -- register_copy 
    // [19] phi (byte) print_euclid::a#10 = (byte) $9b [phi:main::@3->print_euclid#3] -- vbuz1=vbuc1 
    lda #$9b
    sta.z print_euclid.a
    jsr print_euclid
    jmp b4
    // main::@4
  b4:
    // [12] (byte*~) print_char_cursor#66 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [13] call print_euclid 
    // [19] phi from main::@4 to print_euclid [phi:main::@4->print_euclid]
  print_euclid_from_b4:
    // [19] phi (byte*) print_line_cursor#33 = (byte*) print_line_cursor#1 [phi:main::@4->print_euclid#0] -- register_copy 
    // [19] phi (byte) print_euclid::b#10 = (byte) 3 [phi:main::@4->print_euclid#1] -- vbuz1=vbuc1 
    lda #3
    sta.z print_euclid.b
    // [19] phi (byte*) print_char_cursor#53 = (byte*~) print_char_cursor#66 [phi:main::@4->print_euclid#2] -- register_copy 
    // [19] phi (byte) print_euclid::a#10 = (byte) $c7 [phi:main::@4->print_euclid#3] -- vbuz1=vbuc1 
    lda #$c7
    sta.z print_euclid.a
    jsr print_euclid
    jmp b5
    // main::@5
  b5:
    // [14] (byte*~) print_char_cursor#67 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [15] call print_euclid 
    // [19] phi from main::@5 to print_euclid [phi:main::@5->print_euclid]
  print_euclid_from_b5:
    // [19] phi (byte*) print_line_cursor#33 = (byte*) print_line_cursor#1 [phi:main::@5->print_euclid#0] -- register_copy 
    // [19] phi (byte) print_euclid::b#10 = (byte) $1a [phi:main::@5->print_euclid#1] -- vbuz1=vbuc1 
    lda #$1a
    sta.z print_euclid.b
    // [19] phi (byte*) print_char_cursor#53 = (byte*~) print_char_cursor#67 [phi:main::@5->print_euclid#2] -- register_copy 
    // [19] phi (byte) print_euclid::a#10 = (byte) $5b [phi:main::@5->print_euclid#3] -- vbuz1=vbuc1 
    lda #$5b
    sta.z print_euclid.a
    jsr print_euclid
    jmp b6
    // main::@6
  b6:
    // [16] (byte*~) print_char_cursor#68 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [17] call print_euclid 
    // [19] phi from main::@6 to print_euclid [phi:main::@6->print_euclid]
  print_euclid_from_b6:
    // [19] phi (byte*) print_line_cursor#33 = (byte*) print_line_cursor#1 [phi:main::@6->print_euclid#0] -- register_copy 
    // [19] phi (byte) print_euclid::b#10 = (byte) $bb [phi:main::@6->print_euclid#1] -- vbuz1=vbuc1 
    lda #$bb
    sta.z print_euclid.b
    // [19] phi (byte*) print_char_cursor#53 = (byte*~) print_char_cursor#68 [phi:main::@6->print_euclid#2] -- register_copy 
    // [19] phi (byte) print_euclid::a#10 = (byte) $77 [phi:main::@6->print_euclid#3] -- vbuz1=vbuc1 
    lda #$77
    sta.z print_euclid.a
    jsr print_euclid
    jmp breturn
    // main::@return
  breturn:
    // [18] return 
    rts
}
  // print_euclid
// print_euclid(byte zeropage(2) a, byte zeropage(3) b)
print_euclid: {
    .label b = 3
    .label a = 2
    // [20] (byte) print_byte::b#0 ← (byte) print_euclid::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z print_byte.b
    // [21] call print_byte 
    // [42] phi from print_euclid to print_byte [phi:print_euclid->print_byte]
  print_byte_from_print_euclid:
    // [42] phi (byte*) print_char_cursor#51 = (byte*) print_char_cursor#53 [phi:print_euclid->print_byte#0] -- register_copy 
    // [42] phi (byte) print_byte::b#3 = (byte) print_byte::b#0 [phi:print_euclid->print_byte#1] -- register_copy 
    jsr print_byte
    // [22] phi from print_euclid to print_euclid::@1 [phi:print_euclid->print_euclid::@1]
  b1_from_print_euclid:
    jmp b1
    // print_euclid::@1
  b1:
    // [23] call print_char 
    // [50] phi from print_euclid::@1 to print_char [phi:print_euclid::@1->print_char]
  print_char_from_b1:
    // [50] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#32 [phi:print_euclid::@1->print_char#0] -- register_copy 
    // [50] phi (byte) print_char::ch#4 = (byte) ' ' [phi:print_euclid::@1->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    jmp b2
    // print_euclid::@2
  b2:
    // [24] (byte) print_byte::b#1 ← (byte) print_euclid::b#10 -- vbuz1=vbuz2 
    lda.z b
    sta.z print_byte.b
    // [25] call print_byte 
    // [42] phi from print_euclid::@2 to print_byte [phi:print_euclid::@2->print_byte]
  print_byte_from_b2:
    // [42] phi (byte*) print_char_cursor#51 = (byte*) print_char_cursor#32 [phi:print_euclid::@2->print_byte#0] -- register_copy 
    // [42] phi (byte) print_byte::b#3 = (byte) print_byte::b#1 [phi:print_euclid::@2->print_byte#1] -- register_copy 
    jsr print_byte
    // [26] phi from print_euclid::@2 to print_euclid::@3 [phi:print_euclid::@2->print_euclid::@3]
  b3_from_b2:
    jmp b3
    // print_euclid::@3
  b3:
    // [27] call print_char 
    // [50] phi from print_euclid::@3 to print_char [phi:print_euclid::@3->print_char]
  print_char_from_b3:
    // [50] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#32 [phi:print_euclid::@3->print_char#0] -- register_copy 
    // [50] phi (byte) print_char::ch#4 = (byte) ' ' [phi:print_euclid::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    jmp b4
    // print_euclid::@4
  b4:
    // [28] (byte) euclid::a#0 ← (byte) print_euclid::a#10 -- vbuz1=vbuz2 
    lda.z a
    sta.z euclid.a
    // [29] (byte) euclid::b#0 ← (byte) print_euclid::b#10 -- vbuz1=vbuz2 
    lda.z b
    sta.z euclid.b
    // [30] call euclid 
    // [54] phi from print_euclid::@4 to euclid [phi:print_euclid::@4->euclid]
  euclid_from_b4:
    jsr euclid
    // [31] (byte) euclid::return#0 ← (byte) euclid::a#2 -- vbuz1=vbuz2 
    lda.z euclid.a
    sta.z euclid.return
    jmp b5
    // print_euclid::@5
  b5:
    // [32] (byte) print_byte::b#2 ← (byte) euclid::return#0 -- vbuz1=vbuz2 
    lda.z euclid.return
    sta.z print_byte.b
    // [33] call print_byte 
    // [42] phi from print_euclid::@5 to print_byte [phi:print_euclid::@5->print_byte]
  print_byte_from_b5:
    // [42] phi (byte*) print_char_cursor#51 = (byte*) print_char_cursor#32 [phi:print_euclid::@5->print_byte#0] -- register_copy 
    // [42] phi (byte) print_byte::b#3 = (byte) print_byte::b#2 [phi:print_euclid::@5->print_byte#1] -- register_copy 
    jsr print_byte
    // [34] phi from print_euclid::@5 to print_euclid::@6 [phi:print_euclid::@5->print_euclid::@6]
  b6_from_b5:
    jmp b6
    // print_euclid::@6
  b6:
    // [35] call print_ln 
    // [37] phi from print_euclid::@6 to print_ln [phi:print_euclid::@6->print_ln]
  print_ln_from_b6:
    jsr print_ln
    jmp breturn
    // print_euclid::@return
  breturn:
    // [36] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [38] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
    // [38] phi (byte*) print_line_cursor#16 = (byte*) print_line_cursor#33 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
    // print_ln::@1
  b1:
    // [39] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#16 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [40] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#32) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
    // print_ln::@return
  breturn:
    // [41] return 
    rts
}
  // print_byte
// Print a byte as HEX
// print_byte(byte zeropage(6) b)
print_byte: {
    .label _0 = $f
    .label _2 = $10
    .label b = 6
    // [43] (byte~) print_byte::$0 ← (byte) print_byte::b#3 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    sta.z _0
    // [44] (byte) print_char::ch#0 ← *((const byte[]) print_hextab + (byte~) print_byte::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z _0
    lda print_hextab,y
    sta.z print_char.ch
    // [45] call print_char 
    // [50] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
    // [50] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#51 [phi:print_byte->print_char#0] -- register_copy 
    // [50] phi (byte) print_char::ch#4 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
    // print_byte::@1
  b1:
    // [46] (byte~) print_byte::$2 ← (byte) print_byte::b#3 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z b
    sta.z _2
    // [47] (byte) print_char::ch#1 ← *((const byte[]) print_hextab + (byte~) print_byte::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z _2
    lda print_hextab,y
    sta.z print_char.ch
    // [48] call print_char 
    // [50] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
    // [50] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#32 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [50] phi (byte) print_char::ch#4 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
    // print_byte::@return
  breturn:
    // [49] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte zeropage(7) ch)
print_char: {
    .label ch = 7
    // [51] *((byte*) print_char_cursor#31) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [52] (byte*) print_char_cursor#32 ← ++ (byte*) print_char_cursor#31 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp breturn
    // print_char::@return
  breturn:
    // [53] return 
    rts
}
  // euclid
// euclid(byte zeropage($a) a, byte zeropage($b) b)
euclid: {
    .label a = $a
    .label b = $b
    .label return = $e
    // [55] phi from euclid euclid::@3 euclid::@4 to euclid::@1 [phi:euclid/euclid::@3/euclid::@4->euclid::@1]
  b1_from_euclid:
  b1_from_b3:
  b1_from_b4:
    // [55] phi (byte) euclid::b#2 = (byte) euclid::b#0 [phi:euclid/euclid::@3/euclid::@4->euclid::@1#0] -- register_copy 
    // [55] phi (byte) euclid::a#2 = (byte) euclid::a#0 [phi:euclid/euclid::@3/euclid::@4->euclid::@1#1] -- register_copy 
    jmp b1
    // euclid::@1
  b1:
    // [56] if((byte) euclid::a#2!=(byte) euclid::b#2) goto euclid::@2 -- vbuz1_neq_vbuz2_then_la1 
    lda.z a
    cmp.z b
    bne b2
    jmp breturn
    // euclid::@return
  breturn:
    // [57] return 
    rts
    // euclid::@2
  b2:
    // [58] if((byte) euclid::a#2>(byte) euclid::b#2) goto euclid::@3 -- vbuz1_gt_vbuz2_then_la1 
    lda.z b
    cmp.z a
    bcc b3
    jmp b4
    // euclid::@4
  b4:
    // [59] (byte) euclid::b#1 ← (byte) euclid::b#2 - (byte) euclid::a#2 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z b
    sec
    sbc.z a
    sta.z b
    jmp b1_from_b4
    // euclid::@3
  b3:
    // [60] (byte) euclid::a#1 ← (byte) euclid::a#2 - (byte) euclid::b#2 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z a
    sec
    sbc.z b
    sta.z a
    jmp b1_from_b3
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [62] call memset 
    // [64] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp breturn
    // print_cls::@return
  breturn:
    // [63] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $c
    // [65] phi from memset to memset::@1 [phi:memset->memset::@1]
  b1_from_memset:
    // [65] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp b1
    // memset::@1
  b1:
    // [66] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne b2
    lda.z dst
    cmp #<end
    bne b2
    jmp breturn
    // memset::@return
  breturn:
    // [67] return 
    rts
    // memset::@2
  b2:
    // [68] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [69] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [65] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  b1_from_b2:
    // [65] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [8] (byte*~) print_char_cursor#64 ← (byte*) print_line_cursor#1 [ print_char_cursor#64 print_line_cursor#1 ] ( main:2 [ print_char_cursor#64 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [10] (byte*~) print_char_cursor#65 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_char_cursor#65 ] ( main:2 [ print_line_cursor#1 print_char_cursor#65 ] ) always clobbers reg byte a 
Statement [12] (byte*~) print_char_cursor#66 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_char_cursor#66 ] ( main:2 [ print_line_cursor#1 print_char_cursor#66 ] ) always clobbers reg byte a 
Statement [14] (byte*~) print_char_cursor#67 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_char_cursor#67 ] ( main:2 [ print_line_cursor#1 print_char_cursor#67 ] ) always clobbers reg byte a 
Statement [16] (byte*~) print_char_cursor#68 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_char_cursor#68 ] ( main:2 [ print_line_cursor#1 print_char_cursor#68 ] ) always clobbers reg byte a 
Statement [39] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#16 + (byte) $28 [ print_line_cursor#1 print_char_cursor#32 ] ( main:2::print_euclid:7::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] main:2::print_euclid:9::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] main:2::print_euclid:11::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] main:2::print_euclid:13::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] main:2::print_euclid:15::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] main:2::print_euclid:17::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] ) always clobbers reg byte a 
Statement [40] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#32) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#32 ] ( main:2::print_euclid:7::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] main:2::print_euclid:9::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] main:2::print_euclid:11::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] main:2::print_euclid:13::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] main:2::print_euclid:15::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] main:2::print_euclid:17::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] ) always clobbers reg byte a 
Statement [43] (byte~) print_byte::$0 ← (byte) print_byte::b#3 >> (byte) 4 [ print_byte::b#3 print_char_cursor#51 print_byte::$0 ] ( main:2::print_euclid:7::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:9::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:11::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:13::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:15::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:17::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:7::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:9::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:11::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:13::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:15::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:17::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:7::print_byte:33 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:9::print_byte:33 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:11::print_byte:33 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:13::print_byte:33 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:15::print_byte:33 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:17::print_byte:33 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ print_euclid::a#10 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ print_euclid::b#10 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ print_byte::b#3 print_byte::b#0 print_byte::b#1 print_byte::b#2 ]
Statement [46] (byte~) print_byte::$2 ← (byte) print_byte::b#3 & (byte) $f [ print_char_cursor#32 print_byte::$2 ] ( main:2::print_euclid:7::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:9::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:11::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:13::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:15::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:17::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:7::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:9::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:11::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:13::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:15::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:17::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:7::print_byte:33 [ print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:9::print_byte:33 [ print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:11::print_byte:33 [ print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:13::print_byte:33 [ print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:15::print_byte:33 [ print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:17::print_byte:33 [ print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] ) always clobbers reg byte a 
Statement [51] *((byte*) print_char_cursor#31) ← (byte) print_char::ch#4 [ print_char_cursor#31 ] ( main:2::print_euclid:7::print_char:23 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:9::print_char:23 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:11::print_char:23 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:13::print_char:23 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:15::print_char:23 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:17::print_char:23 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:7::print_char:27 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:9::print_char:27 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:11::print_char:27 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:13::print_char:27 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:15::print_char:27 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:17::print_char:27 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:7::print_byte:21::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:9::print_byte:21::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:11::print_byte:21::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:13::print_byte:21::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:15::print_byte:21::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:17::print_byte:21::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:7::print_byte:25::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:9::print_byte:25::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:11::print_byte:25::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:13::print_byte:25::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:15::print_byte:25::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:17::print_byte:25::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:7::print_byte:33::print_char:45 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:9::print_byte:33::print_char:45 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:11::print_byte:33::print_char:45 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:13::print_byte:33::print_char:45 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:15::print_byte:33::print_char:45 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:17::print_byte:33::print_char:45 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:7::print_byte:21::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:9::print_byte:21::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:11::print_byte:21::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:13::print_byte:21::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:15::print_byte:21::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:17::print_byte:21::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:7::print_byte:25::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:9::print_byte:25::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:11::print_byte:25::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:13::print_byte:25::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:15::print_byte:25::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:17::print_byte:25::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:7::print_byte:33::print_char:48 [ print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:9::print_byte:33::print_char:48 [ print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:11::print_byte:33::print_char:48 [ print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:13::print_byte:33::print_char:48 [ print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:15::print_byte:33::print_char:48 [ print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:17::print_byte:33::print_char:48 [ print_line_cursor#33 print_char_cursor#31 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ print_euclid::a#10 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:3 [ print_euclid::b#10 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:6 [ print_byte::b#3 print_byte::b#0 print_byte::b#1 print_byte::b#2 ]
Statement [59] (byte) euclid::b#1 ← (byte) euclid::b#2 - (byte) euclid::a#2 [ euclid::a#2 euclid::b#1 ] ( main:2::print_euclid:7::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::a#2 euclid::b#1 ] main:2::print_euclid:9::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::a#2 euclid::b#1 ] main:2::print_euclid:11::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::a#2 euclid::b#1 ] main:2::print_euclid:13::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::a#2 euclid::b#1 ] main:2::print_euclid:15::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::a#2 euclid::b#1 ] main:2::print_euclid:17::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::a#2 euclid::b#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:10 [ euclid::a#2 euclid::a#0 euclid::a#1 ]
Statement [60] (byte) euclid::a#1 ← (byte) euclid::a#2 - (byte) euclid::b#2 [ euclid::b#2 euclid::a#1 ] ( main:2::print_euclid:7::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::b#2 euclid::a#1 ] main:2::print_euclid:9::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::b#2 euclid::a#1 ] main:2::print_euclid:11::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::b#2 euclid::a#1 ] main:2::print_euclid:13::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::b#2 euclid::a#1 ] main:2::print_euclid:15::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::b#2 euclid::a#1 ] main:2::print_euclid:17::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::b#2 euclid::a#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:11 [ euclid::b#2 euclid::b#0 euclid::b#1 ]
Statement [66] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:2::print_cls:5::memset:62 [ memset::dst#2 ] ) always clobbers reg byte a 
Statement [68] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:2::print_cls:5::memset:62 [ memset::dst#2 ] ) always clobbers reg byte a reg byte y 
Statement [8] (byte*~) print_char_cursor#64 ← (byte*) print_line_cursor#1 [ print_char_cursor#64 print_line_cursor#1 ] ( main:2 [ print_char_cursor#64 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [10] (byte*~) print_char_cursor#65 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_char_cursor#65 ] ( main:2 [ print_line_cursor#1 print_char_cursor#65 ] ) always clobbers reg byte a 
Statement [12] (byte*~) print_char_cursor#66 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_char_cursor#66 ] ( main:2 [ print_line_cursor#1 print_char_cursor#66 ] ) always clobbers reg byte a 
Statement [14] (byte*~) print_char_cursor#67 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_char_cursor#67 ] ( main:2 [ print_line_cursor#1 print_char_cursor#67 ] ) always clobbers reg byte a 
Statement [16] (byte*~) print_char_cursor#68 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_char_cursor#68 ] ( main:2 [ print_line_cursor#1 print_char_cursor#68 ] ) always clobbers reg byte a 
Statement [39] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#16 + (byte) $28 [ print_line_cursor#1 print_char_cursor#32 ] ( main:2::print_euclid:7::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] main:2::print_euclid:9::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] main:2::print_euclid:11::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] main:2::print_euclid:13::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] main:2::print_euclid:15::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] main:2::print_euclid:17::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] ) always clobbers reg byte a 
Statement [40] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#32) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#32 ] ( main:2::print_euclid:7::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] main:2::print_euclid:9::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] main:2::print_euclid:11::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] main:2::print_euclid:13::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] main:2::print_euclid:15::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] main:2::print_euclid:17::print_ln:35 [ print_line_cursor#1 print_char_cursor#32 ] ) always clobbers reg byte a 
Statement [43] (byte~) print_byte::$0 ← (byte) print_byte::b#3 >> (byte) 4 [ print_byte::b#3 print_char_cursor#51 print_byte::$0 ] ( main:2::print_euclid:7::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:9::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:11::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:13::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:15::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:17::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:7::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:9::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:11::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:13::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:15::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:17::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:7::print_byte:33 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:9::print_byte:33 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:11::print_byte:33 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:13::print_byte:33 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:15::print_byte:33 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] main:2::print_euclid:17::print_byte:33 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#51 print_byte::$0 ] ) always clobbers reg byte a 
Statement [46] (byte~) print_byte::$2 ← (byte) print_byte::b#3 & (byte) $f [ print_char_cursor#32 print_byte::$2 ] ( main:2::print_euclid:7::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:9::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:11::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:13::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:15::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:17::print_byte:21 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:7::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:9::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:11::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:13::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:15::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:17::print_byte:25 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:7::print_byte:33 [ print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:9::print_byte:33 [ print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:11::print_byte:33 [ print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:13::print_byte:33 [ print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:15::print_byte:33 [ print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] main:2::print_euclid:17::print_byte:33 [ print_line_cursor#33 print_char_cursor#32 print_byte::$2 ] ) always clobbers reg byte a 
Statement [51] *((byte*) print_char_cursor#31) ← (byte) print_char::ch#4 [ print_char_cursor#31 ] ( main:2::print_euclid:7::print_char:23 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:9::print_char:23 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:11::print_char:23 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:13::print_char:23 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:15::print_char:23 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:17::print_char:23 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:7::print_char:27 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:9::print_char:27 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:11::print_char:27 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:13::print_char:27 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:15::print_char:27 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:17::print_char:27 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:7::print_byte:21::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:9::print_byte:21::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:11::print_byte:21::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:13::print_byte:21::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:15::print_byte:21::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:17::print_byte:21::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:7::print_byte:25::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:9::print_byte:25::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:11::print_byte:25::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:13::print_byte:25::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:15::print_byte:25::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:17::print_byte:25::print_char:45 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:7::print_byte:33::print_char:45 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:9::print_byte:33::print_char:45 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:11::print_byte:33::print_char:45 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:13::print_byte:33::print_char:45 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:15::print_byte:33::print_char:45 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:17::print_byte:33::print_char:45 [ print_line_cursor#33 print_byte::b#3 print_char_cursor#31 ] main:2::print_euclid:7::print_byte:21::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:9::print_byte:21::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:11::print_byte:21::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:13::print_byte:21::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:15::print_byte:21::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:17::print_byte:21::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:7::print_byte:25::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:9::print_byte:25::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:11::print_byte:25::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:13::print_byte:25::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:15::print_byte:25::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:17::print_byte:25::print_char:48 [ print_euclid::a#10 print_euclid::b#10 print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:7::print_byte:33::print_char:48 [ print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:9::print_byte:33::print_char:48 [ print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:11::print_byte:33::print_char:48 [ print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:13::print_byte:33::print_char:48 [ print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:15::print_byte:33::print_char:48 [ print_line_cursor#33 print_char_cursor#31 ] main:2::print_euclid:17::print_byte:33::print_char:48 [ print_line_cursor#33 print_char_cursor#31 ] ) always clobbers reg byte y 
Statement [59] (byte) euclid::b#1 ← (byte) euclid::b#2 - (byte) euclid::a#2 [ euclid::a#2 euclid::b#1 ] ( main:2::print_euclid:7::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::a#2 euclid::b#1 ] main:2::print_euclid:9::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::a#2 euclid::b#1 ] main:2::print_euclid:11::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::a#2 euclid::b#1 ] main:2::print_euclid:13::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::a#2 euclid::b#1 ] main:2::print_euclid:15::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::a#2 euclid::b#1 ] main:2::print_euclid:17::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::a#2 euclid::b#1 ] ) always clobbers reg byte a 
Statement [60] (byte) euclid::a#1 ← (byte) euclid::a#2 - (byte) euclid::b#2 [ euclid::b#2 euclid::a#1 ] ( main:2::print_euclid:7::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::b#2 euclid::a#1 ] main:2::print_euclid:9::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::b#2 euclid::a#1 ] main:2::print_euclid:11::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::b#2 euclid::a#1 ] main:2::print_euclid:13::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::b#2 euclid::a#1 ] main:2::print_euclid:15::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::b#2 euclid::a#1 ] main:2::print_euclid:17::euclid:30 [ print_line_cursor#33 print_char_cursor#32 euclid::b#2 euclid::a#1 ] ) always clobbers reg byte a 
Statement [66] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:2::print_cls:5::memset:62 [ memset::dst#2 ] ) always clobbers reg byte a 
Statement [68] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:2::print_cls:5::memset:62 [ memset::dst#2 ] ) always clobbers reg byte a reg byte y 
Potential registers zp ZP_BYTE:2 [ print_euclid::a#10 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_BYTE:3 [ print_euclid::b#10 ] : zp ZP_BYTE:3 , reg byte x , 
Potential registers zp ZP_WORD:4 [ print_line_cursor#16 print_line_cursor#33 print_line_cursor#1 ] : zp ZP_WORD:4 , 
Potential registers zp ZP_BYTE:6 [ print_byte::b#3 print_byte::b#0 print_byte::b#1 print_byte::b#2 ] : zp ZP_BYTE:6 , reg byte x , 
Potential registers zp ZP_BYTE:7 [ print_char::ch#4 print_char::ch#0 print_char::ch#1 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:8 [ print_char_cursor#31 print_char_cursor#51 print_char_cursor#53 print_char_cursor#64 print_char_cursor#65 print_char_cursor#66 print_char_cursor#67 print_char_cursor#68 print_char_cursor#32 ] : zp ZP_WORD:8 , 
Potential registers zp ZP_BYTE:10 [ euclid::a#2 euclid::a#0 euclid::a#1 ] : zp ZP_BYTE:10 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:11 [ euclid::b#2 euclid::b#0 euclid::b#1 ] : zp ZP_BYTE:11 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:12 [ memset::dst#2 memset::dst#1 ] : zp ZP_WORD:12 , 
Potential registers zp ZP_BYTE:14 [ euclid::return#0 ] : zp ZP_BYTE:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:15 [ print_byte::$0 ] : zp ZP_BYTE:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:16 [ print_byte::$2 ] : zp ZP_BYTE:16 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [euclid] 43.75: zp ZP_BYTE:11 [ euclid::b#2 euclid::b#0 euclid::b#1 ] 36.83: zp ZP_BYTE:10 [ euclid::a#2 euclid::a#0 euclid::a#1 ] 4: zp ZP_BYTE:14 [ euclid::return#0 ] 
Uplift Scope [] 35.59: zp ZP_WORD:8 [ print_char_cursor#31 print_char_cursor#51 print_char_cursor#53 print_char_cursor#64 print_char_cursor#65 print_char_cursor#66 print_char_cursor#67 print_char_cursor#68 print_char_cursor#32 ] 28.24: zp ZP_WORD:4 [ print_line_cursor#16 print_line_cursor#33 print_line_cursor#1 ] 
Uplift Scope [memset] 36.67: zp ZP_WORD:12 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [print_byte] 14.5: zp ZP_BYTE:6 [ print_byte::b#3 print_byte::b#0 print_byte::b#1 print_byte::b#2 ] 4: zp ZP_BYTE:15 [ print_byte::$0 ] 4: zp ZP_BYTE:16 [ print_byte::$2 ] 
Uplift Scope [print_char] 14: zp ZP_BYTE:7 [ print_char::ch#4 print_char::ch#0 print_char::ch#1 ] 
Uplift Scope [print_euclid] 0.44: zp ZP_BYTE:2 [ print_euclid::a#10 ] 0.4: zp ZP_BYTE:3 [ print_euclid::b#10 ] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 
Uplift Scope [main] 

Uplifting [euclid] best 1923 combination reg byte x [ euclid::b#2 euclid::b#0 euclid::b#1 ] zp ZP_BYTE:10 [ euclid::a#2 euclid::a#0 euclid::a#1 ] reg byte a [ euclid::return#0 ] 
Uplifting [] best 1923 combination zp ZP_WORD:8 [ print_char_cursor#31 print_char_cursor#51 print_char_cursor#53 print_char_cursor#64 print_char_cursor#65 print_char_cursor#66 print_char_cursor#67 print_char_cursor#68 print_char_cursor#32 ] zp ZP_WORD:4 [ print_line_cursor#16 print_line_cursor#33 print_line_cursor#1 ] 
Uplifting [memset] best 1923 combination zp ZP_WORD:12 [ memset::dst#2 memset::dst#1 ] 
Uplifting [print_byte] best 1904 combination reg byte x [ print_byte::b#3 print_byte::b#0 print_byte::b#1 print_byte::b#2 ] reg byte a [ print_byte::$0 ] reg byte x [ print_byte::$2 ] 
Uplifting [print_char] best 1889 combination reg byte a [ print_char::ch#4 print_char::ch#0 print_char::ch#1 ] 
Uplifting [print_euclid] best 1889 combination zp ZP_BYTE:2 [ print_euclid::a#10 ] zp ZP_BYTE:3 [ print_euclid::b#10 ] 
Uplifting [RADIX] best 1889 combination 
Uplifting [print_ln] best 1889 combination 
Uplifting [print_cls] best 1889 combination 
Uplifting [main] best 1889 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:10 [ euclid::a#2 euclid::a#0 euclid::a#1 ]
Uplifting [euclid] best 1889 combination zp ZP_BYTE:10 [ euclid::a#2 euclid::a#0 euclid::a#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ print_euclid::a#10 ]
Uplifting [print_euclid] best 1889 combination zp ZP_BYTE:2 [ print_euclid::a#10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ print_euclid::b#10 ]
Uplifting [print_euclid] best 1889 combination zp ZP_BYTE:3 [ print_euclid::b#10 ] 
Coalescing zero page register [ zp ZP_BYTE:2 [ print_euclid::a#10 ] ] with [ zp ZP_BYTE:10 [ euclid::a#2 euclid::a#0 euclid::a#1 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:12 [ memset::dst#2 memset::dst#1 ] ] with [ zp ZP_WORD:4 [ print_line_cursor#16 print_line_cursor#33 print_line_cursor#1 ] ]
Allocated (was zp ZP_WORD:8) zp ZP_WORD:4 [ print_char_cursor#31 print_char_cursor#51 print_char_cursor#53 print_char_cursor#64 print_char_cursor#65 print_char_cursor#66 print_char_cursor#67 print_char_cursor#68 print_char_cursor#32 ]
Allocated (was zp ZP_WORD:12) zp ZP_WORD:6 [ memset::dst#2 memset::dst#1 print_line_cursor#16 print_line_cursor#33 print_line_cursor#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
/*
 * Find greatest common denominator using subtraction-based Euclidian algorithm
 * See https://en.wikipedia.org/wiki/Euclidean_algorithm
 * Based on facebook post from
 */
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_line_cursor = 6
  .label print_char_cursor = 4
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    // [5] call print_cls 
    // [61] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
    // main::@1
  b1:
    // [7] call print_euclid 
    // [19] phi from main::@1 to print_euclid [phi:main::@1->print_euclid]
  print_euclid_from_b1:
    // [19] phi (byte*) print_line_cursor#33 = (byte*) 1024 [phi:main::@1->print_euclid#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    // [19] phi (byte) print_euclid::b#10 = (byte) 2 [phi:main::@1->print_euclid#1] -- vbuz1=vbuc1 
    lda #2
    sta.z print_euclid.b
    // [19] phi (byte*) print_char_cursor#53 = (byte*) 1024 [phi:main::@1->print_euclid#2] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [19] phi (byte) print_euclid::a#10 = (byte) $80 [phi:main::@1->print_euclid#3] -- vbuz1=vbuc1 
    lda #$80
    sta.z print_euclid.a
    jsr print_euclid
    jmp b2
    // main::@2
  b2:
    // [8] (byte*~) print_char_cursor#64 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [9] call print_euclid 
    // [19] phi from main::@2 to print_euclid [phi:main::@2->print_euclid]
  print_euclid_from_b2:
    // [19] phi (byte*) print_line_cursor#33 = (byte*) print_line_cursor#1 [phi:main::@2->print_euclid#0] -- register_copy 
    // [19] phi (byte) print_euclid::b#10 = (byte) $45 [phi:main::@2->print_euclid#1] -- vbuz1=vbuc1 
    lda #$45
    sta.z print_euclid.b
    // [19] phi (byte*) print_char_cursor#53 = (byte*~) print_char_cursor#64 [phi:main::@2->print_euclid#2] -- register_copy 
    // [19] phi (byte) print_euclid::a#10 = (byte) $a9 [phi:main::@2->print_euclid#3] -- vbuz1=vbuc1 
    lda #$a9
    sta.z print_euclid.a
    jsr print_euclid
    jmp b3
    // main::@3
  b3:
    // [10] (byte*~) print_char_cursor#65 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [11] call print_euclid 
    // [19] phi from main::@3 to print_euclid [phi:main::@3->print_euclid]
  print_euclid_from_b3:
    // [19] phi (byte*) print_line_cursor#33 = (byte*) print_line_cursor#1 [phi:main::@3->print_euclid#0] -- register_copy 
    // [19] phi (byte) print_euclid::b#10 = (byte) $37 [phi:main::@3->print_euclid#1] -- vbuz1=vbuc1 
    lda #$37
    sta.z print_euclid.b
    // [19] phi (byte*) print_char_cursor#53 = (byte*~) print_char_cursor#65 [phi:main::@3->print_euclid#2] -- register_copy 
    // [19] phi (byte) print_euclid::a#10 = (byte) $9b [phi:main::@3->print_euclid#3] -- vbuz1=vbuc1 
    lda #$9b
    sta.z print_euclid.a
    jsr print_euclid
    jmp b4
    // main::@4
  b4:
    // [12] (byte*~) print_char_cursor#66 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [13] call print_euclid 
    // [19] phi from main::@4 to print_euclid [phi:main::@4->print_euclid]
  print_euclid_from_b4:
    // [19] phi (byte*) print_line_cursor#33 = (byte*) print_line_cursor#1 [phi:main::@4->print_euclid#0] -- register_copy 
    // [19] phi (byte) print_euclid::b#10 = (byte) 3 [phi:main::@4->print_euclid#1] -- vbuz1=vbuc1 
    lda #3
    sta.z print_euclid.b
    // [19] phi (byte*) print_char_cursor#53 = (byte*~) print_char_cursor#66 [phi:main::@4->print_euclid#2] -- register_copy 
    // [19] phi (byte) print_euclid::a#10 = (byte) $c7 [phi:main::@4->print_euclid#3] -- vbuz1=vbuc1 
    lda #$c7
    sta.z print_euclid.a
    jsr print_euclid
    jmp b5
    // main::@5
  b5:
    // [14] (byte*~) print_char_cursor#67 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [15] call print_euclid 
    // [19] phi from main::@5 to print_euclid [phi:main::@5->print_euclid]
  print_euclid_from_b5:
    // [19] phi (byte*) print_line_cursor#33 = (byte*) print_line_cursor#1 [phi:main::@5->print_euclid#0] -- register_copy 
    // [19] phi (byte) print_euclid::b#10 = (byte) $1a [phi:main::@5->print_euclid#1] -- vbuz1=vbuc1 
    lda #$1a
    sta.z print_euclid.b
    // [19] phi (byte*) print_char_cursor#53 = (byte*~) print_char_cursor#67 [phi:main::@5->print_euclid#2] -- register_copy 
    // [19] phi (byte) print_euclid::a#10 = (byte) $5b [phi:main::@5->print_euclid#3] -- vbuz1=vbuc1 
    lda #$5b
    sta.z print_euclid.a
    jsr print_euclid
    jmp b6
    // main::@6
  b6:
    // [16] (byte*~) print_char_cursor#68 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [17] call print_euclid 
    // [19] phi from main::@6 to print_euclid [phi:main::@6->print_euclid]
  print_euclid_from_b6:
    // [19] phi (byte*) print_line_cursor#33 = (byte*) print_line_cursor#1 [phi:main::@6->print_euclid#0] -- register_copy 
    // [19] phi (byte) print_euclid::b#10 = (byte) $bb [phi:main::@6->print_euclid#1] -- vbuz1=vbuc1 
    lda #$bb
    sta.z print_euclid.b
    // [19] phi (byte*) print_char_cursor#53 = (byte*~) print_char_cursor#68 [phi:main::@6->print_euclid#2] -- register_copy 
    // [19] phi (byte) print_euclid::a#10 = (byte) $77 [phi:main::@6->print_euclid#3] -- vbuz1=vbuc1 
    lda #$77
    sta.z print_euclid.a
    jsr print_euclid
    jmp breturn
    // main::@return
  breturn:
    // [18] return 
    rts
}
  // print_euclid
// print_euclid(byte zeropage(2) a, byte zeropage(3) b)
print_euclid: {
    .label b = 3
    .label a = 2
    // [20] (byte) print_byte::b#0 ← (byte) print_euclid::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [21] call print_byte 
    // [42] phi from print_euclid to print_byte [phi:print_euclid->print_byte]
  print_byte_from_print_euclid:
    // [42] phi (byte*) print_char_cursor#51 = (byte*) print_char_cursor#53 [phi:print_euclid->print_byte#0] -- register_copy 
    // [42] phi (byte) print_byte::b#3 = (byte) print_byte::b#0 [phi:print_euclid->print_byte#1] -- register_copy 
    jsr print_byte
    // [22] phi from print_euclid to print_euclid::@1 [phi:print_euclid->print_euclid::@1]
  b1_from_print_euclid:
    jmp b1
    // print_euclid::@1
  b1:
    // [23] call print_char 
    // [50] phi from print_euclid::@1 to print_char [phi:print_euclid::@1->print_char]
  print_char_from_b1:
    // [50] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#32 [phi:print_euclid::@1->print_char#0] -- register_copy 
    // [50] phi (byte) print_char::ch#4 = (byte) ' ' [phi:print_euclid::@1->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp b2
    // print_euclid::@2
  b2:
    // [24] (byte) print_byte::b#1 ← (byte) print_euclid::b#10 -- vbuxx=vbuz1 
    ldx.z b
    // [25] call print_byte 
    // [42] phi from print_euclid::@2 to print_byte [phi:print_euclid::@2->print_byte]
  print_byte_from_b2:
    // [42] phi (byte*) print_char_cursor#51 = (byte*) print_char_cursor#32 [phi:print_euclid::@2->print_byte#0] -- register_copy 
    // [42] phi (byte) print_byte::b#3 = (byte) print_byte::b#1 [phi:print_euclid::@2->print_byte#1] -- register_copy 
    jsr print_byte
    // [26] phi from print_euclid::@2 to print_euclid::@3 [phi:print_euclid::@2->print_euclid::@3]
  b3_from_b2:
    jmp b3
    // print_euclid::@3
  b3:
    // [27] call print_char 
    // [50] phi from print_euclid::@3 to print_char [phi:print_euclid::@3->print_char]
  print_char_from_b3:
    // [50] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#32 [phi:print_euclid::@3->print_char#0] -- register_copy 
    // [50] phi (byte) print_char::ch#4 = (byte) ' ' [phi:print_euclid::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    jmp b4
    // print_euclid::@4
  b4:
    // [28] (byte) euclid::a#0 ← (byte) print_euclid::a#10
    // [29] (byte) euclid::b#0 ← (byte) print_euclid::b#10 -- vbuxx=vbuz1 
    ldx.z b
    // [30] call euclid 
    // [54] phi from print_euclid::@4 to euclid [phi:print_euclid::@4->euclid]
  euclid_from_b4:
    jsr euclid
    // [31] (byte) euclid::return#0 ← (byte) euclid::a#2 -- vbuaa=vbuz1 
    lda.z euclid.a
    jmp b5
    // print_euclid::@5
  b5:
    // [32] (byte) print_byte::b#2 ← (byte) euclid::return#0 -- vbuxx=vbuaa 
    tax
    // [33] call print_byte 
    // [42] phi from print_euclid::@5 to print_byte [phi:print_euclid::@5->print_byte]
  print_byte_from_b5:
    // [42] phi (byte*) print_char_cursor#51 = (byte*) print_char_cursor#32 [phi:print_euclid::@5->print_byte#0] -- register_copy 
    // [42] phi (byte) print_byte::b#3 = (byte) print_byte::b#2 [phi:print_euclid::@5->print_byte#1] -- register_copy 
    jsr print_byte
    // [34] phi from print_euclid::@5 to print_euclid::@6 [phi:print_euclid::@5->print_euclid::@6]
  b6_from_b5:
    jmp b6
    // print_euclid::@6
  b6:
    // [35] call print_ln 
    // [37] phi from print_euclid::@6 to print_ln [phi:print_euclid::@6->print_ln]
  print_ln_from_b6:
    jsr print_ln
    jmp breturn
    // print_euclid::@return
  breturn:
    // [36] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [38] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
    // [38] phi (byte*) print_line_cursor#16 = (byte*) print_line_cursor#33 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
    // print_ln::@1
  b1:
    // [39] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#16 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [40] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#32) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
    // print_ln::@return
  breturn:
    // [41] return 
    rts
}
  // print_byte
// Print a byte as HEX
// print_byte(byte register(X) b)
print_byte: {
    // [43] (byte~) print_byte::$0 ← (byte) print_byte::b#3 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [44] (byte) print_char::ch#0 ← *((const byte[]) print_hextab + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [45] call print_char 
    // [50] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
    // [50] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#51 [phi:print_byte->print_char#0] -- register_copy 
    // [50] phi (byte) print_char::ch#4 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
    // print_byte::@1
  b1:
    // [46] (byte~) print_byte::$2 ← (byte) print_byte::b#3 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // [47] (byte) print_char::ch#1 ← *((const byte[]) print_hextab + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [48] call print_char 
    // [50] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
    // [50] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#32 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [50] phi (byte) print_char::ch#4 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
    // print_byte::@return
  breturn:
    // [49] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [51] *((byte*) print_char_cursor#31) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [52] (byte*) print_char_cursor#32 ← ++ (byte*) print_char_cursor#31 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp breturn
    // print_char::@return
  breturn:
    // [53] return 
    rts
}
  // euclid
// euclid(byte zeropage(2) a, byte register(X) b)
euclid: {
    .label a = 2
    // [55] phi from euclid euclid::@3 euclid::@4 to euclid::@1 [phi:euclid/euclid::@3/euclid::@4->euclid::@1]
  b1_from_euclid:
  b1_from_b3:
  b1_from_b4:
    // [55] phi (byte) euclid::b#2 = (byte) euclid::b#0 [phi:euclid/euclid::@3/euclid::@4->euclid::@1#0] -- register_copy 
    // [55] phi (byte) euclid::a#2 = (byte) euclid::a#0 [phi:euclid/euclid::@3/euclid::@4->euclid::@1#1] -- register_copy 
    jmp b1
    // euclid::@1
  b1:
    // [56] if((byte) euclid::a#2!=(byte) euclid::b#2) goto euclid::@2 -- vbuz1_neq_vbuxx_then_la1 
    cpx.z a
    bne b2
    jmp breturn
    // euclid::@return
  breturn:
    // [57] return 
    rts
    // euclid::@2
  b2:
    // [58] if((byte) euclid::a#2>(byte) euclid::b#2) goto euclid::@3 -- vbuz1_gt_vbuxx_then_la1 
    cpx.z a
    bcc b3
    jmp b4
    // euclid::@4
  b4:
    // [59] (byte) euclid::b#1 ← (byte) euclid::b#2 - (byte) euclid::a#2 -- vbuxx=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z a
    tax
    jmp b1_from_b4
    // euclid::@3
  b3:
    // [60] (byte) euclid::a#1 ← (byte) euclid::a#2 - (byte) euclid::b#2 -- vbuz1=vbuz1_minus_vbuxx 
    txa
    eor #$ff
    sec
    adc.z a
    sta.z a
    jmp b1_from_b3
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [62] call memset 
    // [64] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp breturn
    // print_cls::@return
  breturn:
    // [63] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = 6
    // [65] phi from memset to memset::@1 [phi:memset->memset::@1]
  b1_from_memset:
    // [65] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp b1
    // memset::@1
  b1:
    // [66] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne b2
    lda.z dst
    cmp #<end
    bne b2
    jmp breturn
    // memset::@return
  breturn:
    // [67] return 
    rts
    // memset::@2
  b2:
    // [68] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [69] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [65] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  b1_from_b2:
    // [65] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b4 with b1
Replacing label b1_from_b3 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_main:
Removing instruction print_euclid_from_b1:
Removing instruction b1_from_print_euclid:
Removing instruction print_char_from_b1:
Removing instruction b3_from_b2:
Removing instruction print_char_from_b3:
Removing instruction b6_from_b5:
Removing instruction print_ln_from_b6:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Removing instruction b1_from_euclid:
Removing instruction b1_from_b3:
Removing instruction b1_from_b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction print_cls_from_main:
Removing instruction b1:
Removing instruction b2:
Removing instruction print_euclid_from_b2:
Removing instruction b3:
Removing instruction print_euclid_from_b3:
Removing instruction b4:
Removing instruction print_euclid_from_b4:
Removing instruction b5:
Removing instruction print_euclid_from_b5:
Removing instruction b6:
Removing instruction print_euclid_from_b6:
Removing instruction breturn:
Removing instruction print_byte_from_print_euclid:
Removing instruction b1:
Removing instruction b2:
Removing instruction print_byte_from_b2:
Removing instruction b3:
Removing instruction b4:
Removing instruction euclid_from_b4:
Removing instruction b5:
Removing instruction print_byte_from_b5:
Removing instruction b6:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b4:
Removing instruction memset_from_print_cls:
Removing instruction breturn:
Removing instruction b1_from_memset:
Removing instruction breturn:
Removing instruction b1_from_b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) RADIX::BINARY BINARY = (number) 2
(const byte) RADIX::DECIMAL DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL OCTAL = (number) 8
(byte()) euclid((byte) euclid::a , (byte) euclid::b)
(label) euclid::@1
(label) euclid::@2
(label) euclid::@3
(label) euclid::@4
(label) euclid::@return
(byte) euclid::a
(byte) euclid::a#0 a zp ZP_BYTE:2 1.3333333333333333
(byte) euclid::a#1 a zp ZP_BYTE:2 22.0
(byte) euclid::a#2 a zp ZP_BYTE:2 13.5
(byte) euclid::b
(byte) euclid::b#0 reg byte x 2.0
(byte) euclid::b#1 reg byte x 22.0
(byte) euclid::b#2 reg byte x 19.75
(byte) euclid::return
(byte) euclid::return#0 reg byte a 4.0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp ZP_WORD:6 22.0
(byte*) memset::dst#2 dst zp ZP_WORD:6 14.666666666666666
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(byte*) 1024
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte x 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 reg byte x 4.0
(byte) print_byte::b#1 reg byte x 4.0
(byte) print_byte::b#2 reg byte x 4.0
(byte) print_byte::b#3 reg byte x 2.5
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 4.0
(byte) print_char::ch#1 reg byte a 4.0
(byte) print_char::ch#4 reg byte a 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#31 print_char_cursor zp ZP_WORD:4 6.0
(byte*) print_char_cursor#32 print_char_cursor zp ZP_WORD:4 0.9199999999999998
(byte*) print_char_cursor#51 print_char_cursor zp ZP_WORD:4 2.6666666666666665
(byte*) print_char_cursor#53 print_char_cursor zp ZP_WORD:4 6.0
(byte*~) print_char_cursor#64 print_char_cursor zp ZP_WORD:4 4.0
(byte*~) print_char_cursor#65 print_char_cursor zp ZP_WORD:4 4.0
(byte*~) print_char_cursor#66 print_char_cursor zp ZP_WORD:4 4.0
(byte*~) print_char_cursor#67 print_char_cursor zp ZP_WORD:4 4.0
(byte*~) print_char_cursor#68 print_char_cursor zp ZP_WORD:4 4.0
(void()) print_cls()
(label) print_cls::@return
(void()) print_euclid((byte) print_euclid::a , (byte) print_euclid::b)
(label) print_euclid::@1
(label) print_euclid::@2
(label) print_euclid::@3
(label) print_euclid::@4
(label) print_euclid::@5
(label) print_euclid::@6
(label) print_euclid::@return
(byte) print_euclid::a
(byte) print_euclid::a#10 a zp ZP_BYTE:2 0.4444444444444444
(byte) print_euclid::b
(byte) print_euclid::b#10 b zp ZP_BYTE:3 0.4
(const byte[]) print_hextab print_hextab = (string) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp ZP_WORD:6 3.533333333333333
(byte*) print_line_cursor#16 print_line_cursor zp ZP_WORD:6 24.0
(byte*) print_line_cursor#33 print_line_cursor zp ZP_WORD:6 0.7058823529411765
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen

zp ZP_BYTE:2 [ print_euclid::a#10 euclid::a#2 euclid::a#0 euclid::a#1 ]
zp ZP_BYTE:3 [ print_euclid::b#10 ]
reg byte x [ print_byte::b#3 print_byte::b#0 print_byte::b#1 print_byte::b#2 ]
reg byte a [ print_char::ch#4 print_char::ch#0 print_char::ch#1 ]
zp ZP_WORD:4 [ print_char_cursor#31 print_char_cursor#51 print_char_cursor#53 print_char_cursor#64 print_char_cursor#65 print_char_cursor#66 print_char_cursor#67 print_char_cursor#68 print_char_cursor#32 ]
reg byte x [ euclid::b#2 euclid::b#0 euclid::b#1 ]
zp ZP_WORD:6 [ memset::dst#2 memset::dst#1 print_line_cursor#16 print_line_cursor#33 print_line_cursor#1 ]
reg byte a [ euclid::return#0 ]
reg byte a [ print_byte::$0 ]
reg byte x [ print_byte::$2 ]


FINAL ASSEMBLER
Score: 1607

  // File Comments
/*
 * Find greatest common denominator using subtraction-based Euclidian algorithm
 * See https://en.wikipedia.org/wiki/Euclidean_algorithm
 * Based on facebook post from
 */
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_line_cursor = 6
  .label print_char_cursor = 4
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // print_cls()
    // [5] call print_cls 
    // [61] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // print_euclid(128,2)
    // [7] call print_euclid 
    // [19] phi from main::@1 to print_euclid [phi:main::@1->print_euclid]
    // [19] phi (byte*) print_line_cursor#33 = (byte*) 1024 [phi:main::@1->print_euclid#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    // [19] phi (byte) print_euclid::b#10 = (byte) 2 [phi:main::@1->print_euclid#1] -- vbuz1=vbuc1 
    lda #2
    sta.z print_euclid.b
    // [19] phi (byte*) print_char_cursor#53 = (byte*) 1024 [phi:main::@1->print_euclid#2] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [19] phi (byte) print_euclid::a#10 = (byte) $80 [phi:main::@1->print_euclid#3] -- vbuz1=vbuc1 
    lda #$80
    sta.z print_euclid.a
    jsr print_euclid
    // main::@2
    // [8] (byte*~) print_char_cursor#64 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // print_euclid(169,69)
    // [9] call print_euclid 
    // [19] phi from main::@2 to print_euclid [phi:main::@2->print_euclid]
    // [19] phi (byte*) print_line_cursor#33 = (byte*) print_line_cursor#1 [phi:main::@2->print_euclid#0] -- register_copy 
    // [19] phi (byte) print_euclid::b#10 = (byte) $45 [phi:main::@2->print_euclid#1] -- vbuz1=vbuc1 
    lda #$45
    sta.z print_euclid.b
    // [19] phi (byte*) print_char_cursor#53 = (byte*~) print_char_cursor#64 [phi:main::@2->print_euclid#2] -- register_copy 
    // [19] phi (byte) print_euclid::a#10 = (byte) $a9 [phi:main::@2->print_euclid#3] -- vbuz1=vbuc1 
    lda #$a9
    sta.z print_euclid.a
    jsr print_euclid
    // main::@3
    // [10] (byte*~) print_char_cursor#65 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // print_euclid(155,55)
    // [11] call print_euclid 
    // [19] phi from main::@3 to print_euclid [phi:main::@3->print_euclid]
    // [19] phi (byte*) print_line_cursor#33 = (byte*) print_line_cursor#1 [phi:main::@3->print_euclid#0] -- register_copy 
    // [19] phi (byte) print_euclid::b#10 = (byte) $37 [phi:main::@3->print_euclid#1] -- vbuz1=vbuc1 
    lda #$37
    sta.z print_euclid.b
    // [19] phi (byte*) print_char_cursor#53 = (byte*~) print_char_cursor#65 [phi:main::@3->print_euclid#2] -- register_copy 
    // [19] phi (byte) print_euclid::a#10 = (byte) $9b [phi:main::@3->print_euclid#3] -- vbuz1=vbuc1 
    lda #$9b
    sta.z print_euclid.a
    jsr print_euclid
    // main::@4
    // [12] (byte*~) print_char_cursor#66 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // print_euclid(199,3)
    // [13] call print_euclid 
    // [19] phi from main::@4 to print_euclid [phi:main::@4->print_euclid]
    // [19] phi (byte*) print_line_cursor#33 = (byte*) print_line_cursor#1 [phi:main::@4->print_euclid#0] -- register_copy 
    // [19] phi (byte) print_euclid::b#10 = (byte) 3 [phi:main::@4->print_euclid#1] -- vbuz1=vbuc1 
    lda #3
    sta.z print_euclid.b
    // [19] phi (byte*) print_char_cursor#53 = (byte*~) print_char_cursor#66 [phi:main::@4->print_euclid#2] -- register_copy 
    // [19] phi (byte) print_euclid::a#10 = (byte) $c7 [phi:main::@4->print_euclid#3] -- vbuz1=vbuc1 
    lda #$c7
    sta.z print_euclid.a
    jsr print_euclid
    // main::@5
    // [14] (byte*~) print_char_cursor#67 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // print_euclid(91,26)
    // [15] call print_euclid 
    // [19] phi from main::@5 to print_euclid [phi:main::@5->print_euclid]
    // [19] phi (byte*) print_line_cursor#33 = (byte*) print_line_cursor#1 [phi:main::@5->print_euclid#0] -- register_copy 
    // [19] phi (byte) print_euclid::b#10 = (byte) $1a [phi:main::@5->print_euclid#1] -- vbuz1=vbuc1 
    lda #$1a
    sta.z print_euclid.b
    // [19] phi (byte*) print_char_cursor#53 = (byte*~) print_char_cursor#67 [phi:main::@5->print_euclid#2] -- register_copy 
    // [19] phi (byte) print_euclid::a#10 = (byte) $5b [phi:main::@5->print_euclid#3] -- vbuz1=vbuc1 
    lda #$5b
    sta.z print_euclid.a
    jsr print_euclid
    // main::@6
    // [16] (byte*~) print_char_cursor#68 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // print_euclid(119,187)
    // [17] call print_euclid 
    // [19] phi from main::@6 to print_euclid [phi:main::@6->print_euclid]
    // [19] phi (byte*) print_line_cursor#33 = (byte*) print_line_cursor#1 [phi:main::@6->print_euclid#0] -- register_copy 
    // [19] phi (byte) print_euclid::b#10 = (byte) $bb [phi:main::@6->print_euclid#1] -- vbuz1=vbuc1 
    lda #$bb
    sta.z print_euclid.b
    // [19] phi (byte*) print_char_cursor#53 = (byte*~) print_char_cursor#68 [phi:main::@6->print_euclid#2] -- register_copy 
    // [19] phi (byte) print_euclid::a#10 = (byte) $77 [phi:main::@6->print_euclid#3] -- vbuz1=vbuc1 
    lda #$77
    sta.z print_euclid.a
    jsr print_euclid
    // main::@return
    // }
    // [18] return 
    rts
}
  // print_euclid
// print_euclid(byte zeropage(2) a, byte zeropage(3) b)
print_euclid: {
    .label b = 3
    .label a = 2
    // print_byte(a)
    // [20] (byte) print_byte::b#0 ← (byte) print_euclid::a#10 -- vbuxx=vbuz1 
    ldx.z a
    // [21] call print_byte 
    // [42] phi from print_euclid to print_byte [phi:print_euclid->print_byte]
    // [42] phi (byte*) print_char_cursor#51 = (byte*) print_char_cursor#53 [phi:print_euclid->print_byte#0] -- register_copy 
    // [42] phi (byte) print_byte::b#3 = (byte) print_byte::b#0 [phi:print_euclid->print_byte#1] -- register_copy 
    jsr print_byte
    // [22] phi from print_euclid to print_euclid::@1 [phi:print_euclid->print_euclid::@1]
    // print_euclid::@1
    // print_char(' ')
    // [23] call print_char 
    // [50] phi from print_euclid::@1 to print_char [phi:print_euclid::@1->print_char]
    // [50] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#32 [phi:print_euclid::@1->print_char#0] -- register_copy 
    // [50] phi (byte) print_char::ch#4 = (byte) ' ' [phi:print_euclid::@1->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // print_euclid::@2
    // print_byte(b)
    // [24] (byte) print_byte::b#1 ← (byte) print_euclid::b#10 -- vbuxx=vbuz1 
    ldx.z b
    // [25] call print_byte 
    // [42] phi from print_euclid::@2 to print_byte [phi:print_euclid::@2->print_byte]
    // [42] phi (byte*) print_char_cursor#51 = (byte*) print_char_cursor#32 [phi:print_euclid::@2->print_byte#0] -- register_copy 
    // [42] phi (byte) print_byte::b#3 = (byte) print_byte::b#1 [phi:print_euclid::@2->print_byte#1] -- register_copy 
    jsr print_byte
    // [26] phi from print_euclid::@2 to print_euclid::@3 [phi:print_euclid::@2->print_euclid::@3]
    // print_euclid::@3
    // print_char(' ')
    // [27] call print_char 
    // [50] phi from print_euclid::@3 to print_char [phi:print_euclid::@3->print_char]
    // [50] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#32 [phi:print_euclid::@3->print_char#0] -- register_copy 
    // [50] phi (byte) print_char::ch#4 = (byte) ' ' [phi:print_euclid::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // print_euclid::@4
    // euclid(a,b)
    // [28] (byte) euclid::a#0 ← (byte) print_euclid::a#10
    // [29] (byte) euclid::b#0 ← (byte) print_euclid::b#10 -- vbuxx=vbuz1 
    ldx.z b
    // [30] call euclid 
    // [54] phi from print_euclid::@4 to euclid [phi:print_euclid::@4->euclid]
    jsr euclid
    // euclid(a,b)
    // [31] (byte) euclid::return#0 ← (byte) euclid::a#2 -- vbuaa=vbuz1 
    lda.z euclid.a
    // print_euclid::@5
    // print_byte(euclid(a,b))
    // [32] (byte) print_byte::b#2 ← (byte) euclid::return#0 -- vbuxx=vbuaa 
    tax
    // [33] call print_byte 
    // [42] phi from print_euclid::@5 to print_byte [phi:print_euclid::@5->print_byte]
    // [42] phi (byte*) print_char_cursor#51 = (byte*) print_char_cursor#32 [phi:print_euclid::@5->print_byte#0] -- register_copy 
    // [42] phi (byte) print_byte::b#3 = (byte) print_byte::b#2 [phi:print_euclid::@5->print_byte#1] -- register_copy 
    jsr print_byte
    // [34] phi from print_euclid::@5 to print_euclid::@6 [phi:print_euclid::@5->print_euclid::@6]
    // print_euclid::@6
    // print_ln()
    // [35] call print_ln 
    // [37] phi from print_euclid::@6 to print_ln [phi:print_euclid::@6->print_ln]
    jsr print_ln
    // print_euclid::@return
    // }
    // [36] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [38] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [38] phi (byte*) print_line_cursor#16 = (byte*) print_line_cursor#33 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  b1:
    // print_line_cursor + $28
    // [39] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#16 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [40] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#32) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc b1
  !:
    // print_ln::@return
    // }
    // [41] return 
    rts
}
  // print_byte
// Print a byte as HEX
// print_byte(byte register(X) b)
print_byte: {
    // b>>4
    // [43] (byte~) print_byte::$0 ← (byte) print_byte::b#3 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [44] (byte) print_char::ch#0 ← *((const byte[]) print_hextab + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [45] call print_char 
    // [50] phi from print_byte to print_char [phi:print_byte->print_char]
    // [50] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#51 [phi:print_byte->print_char#0] -- register_copy 
    // [50] phi (byte) print_char::ch#4 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    // print_byte::@1
    // b&$f
    // [46] (byte~) print_byte::$2 ← (byte) print_byte::b#3 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // print_char(print_hextab[b&$f])
    // [47] (byte) print_char::ch#1 ← *((const byte[]) print_hextab + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [48] call print_char 
    // [50] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
    // [50] phi (byte*) print_char_cursor#31 = (byte*) print_char_cursor#32 [phi:print_byte::@1->print_char#0] -- register_copy 
    // [50] phi (byte) print_char::ch#4 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_byte::@return
    // }
    // [49] return 
    rts
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [51] *((byte*) print_char_cursor#31) ← (byte) print_char::ch#4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [52] (byte*) print_char_cursor#32 ← ++ (byte*) print_char_cursor#31 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [53] return 
    rts
}
  // euclid
// euclid(byte zeropage(2) a, byte register(X) b)
euclid: {
    .label a = 2
    // [55] phi from euclid euclid::@3 euclid::@4 to euclid::@1 [phi:euclid/euclid::@3/euclid::@4->euclid::@1]
    // [55] phi (byte) euclid::b#2 = (byte) euclid::b#0 [phi:euclid/euclid::@3/euclid::@4->euclid::@1#0] -- register_copy 
    // [55] phi (byte) euclid::a#2 = (byte) euclid::a#0 [phi:euclid/euclid::@3/euclid::@4->euclid::@1#1] -- register_copy 
    // euclid::@1
  b1:
    // while (a!=b)
    // [56] if((byte) euclid::a#2!=(byte) euclid::b#2) goto euclid::@2 -- vbuz1_neq_vbuxx_then_la1 
    cpx.z a
    bne b2
    // euclid::@return
    // }
    // [57] return 
    rts
    // euclid::@2
  b2:
    // if(a>b)
    // [58] if((byte) euclid::a#2>(byte) euclid::b#2) goto euclid::@3 -- vbuz1_gt_vbuxx_then_la1 
    cpx.z a
    bcc b3
    // euclid::@4
    // b=b-a
    // [59] (byte) euclid::b#1 ← (byte) euclid::b#2 - (byte) euclid::a#2 -- vbuxx=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z a
    tax
    jmp b1
    // euclid::@3
  b3:
    // a=a-b
    // [60] (byte) euclid::a#1 ← (byte) euclid::a#2 - (byte) euclid::b#2 -- vbuz1=vbuz1_minus_vbuxx 
    txa
    eor #$ff
    sec
    adc.z a
    sta.z a
    jmp b1
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [62] call memset 
    // [64] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [63] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = 6
    // [65] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [65] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  b1:
    // for(char* dst = str; dst!=end; dst++)
    // [66] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne b2
    lda.z dst
    cmp #<end
    bne b2
    // memset::@return
    // }
    // [67] return 
    rts
    // memset::@2
  b2:
    // *dst = c
    // [68] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [69] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [65] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [65] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"

