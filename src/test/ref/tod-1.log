Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Eliminating unused variable with no statement (struct TIME_OF_DAY~) main::$2
Unwinding list assignment { (byte~) main::$2_TENTHS, (byte~) main::$2_SEC, (byte~) main::$2_MIN, (byte~) main::$2_HOURS } ← { (byte) tod_read::return_TENTHS, (byte) tod_read::return_SEC, (byte) tod_read::return_MIN, (byte) tod_read::return_HOURS }
Unwinding list assignment { (byte) tod_read::return_TENTHS#2, (byte) tod_read::return_SEC#2, (byte) tod_read::return_MIN#2, (byte) tod_read::return_HOURS#2 } ← { (byte) tod_read::return_TENTHS#1, (byte) tod_read::return_SEC#1, (byte) tod_read::return_MIN#1, (byte) tod_read::return_HOURS#1 }

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@3 cscroll::@4
  (word) memcpy::num#2 ← phi( cscroll::@3/(word) memcpy::num#0 cscroll::@4/(word) memcpy::num#1 )
  (void*) memcpy::destination#2 ← phi( cscroll::@3/(void*) memcpy::destination#0 cscroll::@4/(void*) memcpy::destination#1 )
  (void*) memcpy::source#2 ← phi( cscroll::@3/(void*) memcpy::source#0 cscroll::@4/(void*) memcpy::source#1 )
  (byte*) memcpy::src#0 ← ((byte*)) (void*) memcpy::source#2
  (byte*) memcpy::dst#0 ← ((byte*)) (void*) memcpy::destination#2
  (byte*~) memcpy::$2 ← (byte*)(void*) memcpy::source#2
  (byte*~) memcpy::$0 ← (byte*~) memcpy::$2 + (word) memcpy::num#2
  (byte*) memcpy::src_end#0 ← (byte*~) memcpy::$0
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  (void*) memcpy::destination#4 ← phi( memcpy/(void*) memcpy::destination#2 memcpy::@2/(void*) memcpy::destination#5 )
  (byte*) memcpy::dst#3 ← phi( memcpy/(byte*) memcpy::dst#0 memcpy::@2/(byte*) memcpy::dst#1 )
  (byte*) memcpy::src_end#1 ← phi( memcpy/(byte*) memcpy::src_end#0 memcpy::@2/(byte*) memcpy::src_end#2 )
  (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#0 memcpy::@2/(byte*) memcpy::src#1 )
  (bool~) memcpy::$1 ← (byte*) memcpy::src#2 != (byte*) memcpy::src_end#1
  if((bool~) memcpy::$1) goto memcpy::@2
  to:memcpy::@3
memcpy::@2: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#5 ← phi( memcpy::@1/(void*) memcpy::destination#4 )
  (byte*) memcpy::src_end#2 ← phi( memcpy::@1/(byte*) memcpy::src_end#1 )
  (byte*) memcpy::dst#2 ← phi( memcpy::@1/(byte*) memcpy::dst#3 )
  (byte*) memcpy::src#3 ← phi( memcpy::@1/(byte*) memcpy::src#2 )
  *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#3)
  (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#3
  to:memcpy::@1
memcpy::@3: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#3 ← phi( memcpy::@1/(void*) memcpy::destination#4 )
  (void*) memcpy::return#0 ← (void*) memcpy::destination#3
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@3
  (void*) memcpy::return#4 ← phi( memcpy::@3/(void*) memcpy::return#0 )
  (void*) memcpy::return#1 ← (void*) memcpy::return#4
  return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@5 cscroll::@6
  (byte) memset::c#5 ← phi( cscroll::@5/(byte) memset::c#0 cscroll::@6/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( cscroll::@5/(void*) memset::str#0 cscroll::@6/(void*) memset::str#1 )
  (word) memset::num#2 ← phi( cscroll::@5/(word) memset::num#0 cscroll::@6/(word) memset::num#1 )
  (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#4 memset::@3/(void*) memset::str#5 )
  (void*) memset::return#0 ← (void*) memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#4 ← phi( memset/(byte) memset::c#5 )
  (word) memset::num#3 ← phi( memset/(word) memset::num#2 )
  (void*) memset::str#3 ← phi( memset/(void*) memset::str#4 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#3
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#3
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#3
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#3 ← phi( memset::@2/(byte) memset::c#4 memset::@4/(byte) memset::c#2 )
  (void*) memset::str#5 ← phi( memset::@2/(void*) memset::str#3 memset::@4/(void*) memset::str#6 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#6 ← phi( memset::@3/(void*) memset::str#5 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#2 ← phi( memset::@3/(byte) memset::c#3 )
  *((byte*) memset::dst#3) ← (byte) memset::c#2
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#4 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#4
  return 
  to:@return
@1: scope:[]  from @begin
  (byte) conio_cursor_x ← (byte) 0
  (byte) conio_cursor_y ← (byte) 0
  (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  (byte) conio_textcolor ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  (byte) conio_scroll_enable ← (byte) 1
  to:@2

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from cscroll::@2 main::@2
  (byte) gotoxy::x#5 ← phi( cscroll::@2/(byte) gotoxy::x#1 main::@2/(byte) gotoxy::x#2 )
  (byte) gotoxy::y#3 ← phi( cscroll::@2/(byte) gotoxy::y#1 main::@2/(byte) gotoxy::y#2 )
  (bool~) gotoxy::$0 ← (byte) gotoxy::y#3 > (number) $19
  (bool~) gotoxy::$1 ← ! (bool~) gotoxy::$0
  if((bool~) gotoxy::$1) goto gotoxy::@1
  to:gotoxy::@3
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  (byte) gotoxy::y#5 ← phi( gotoxy/(byte) gotoxy::y#3 gotoxy::@3/(byte) gotoxy::y#0 )
  (byte) gotoxy::x#3 ← phi( gotoxy/(byte) gotoxy::x#5 gotoxy::@3/(byte) gotoxy::x#6 )
  (bool~) gotoxy::$2 ← (byte) gotoxy::x#3 >= (number) $28
  (bool~) gotoxy::$3 ← ! (bool~) gotoxy::$2
  if((bool~) gotoxy::$3) goto gotoxy::@2
  to:gotoxy::@4
gotoxy::@3: scope:[gotoxy]  from gotoxy
  (byte) gotoxy::x#6 ← phi( gotoxy/(byte) gotoxy::x#5 )
  (byte) gotoxy::y#0 ← (number) 0
  to:gotoxy::@1
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@4
  (byte) gotoxy::y#4 ← phi( gotoxy::@1/(byte) gotoxy::y#5 gotoxy::@4/(byte) gotoxy::y#6 )
  (byte) gotoxy::x#4 ← phi( gotoxy::@1/(byte) gotoxy::x#3 gotoxy::@4/(byte) gotoxy::x#0 )
  (byte) conio_cursor_x ← (byte) gotoxy::x#4
  (byte) conio_cursor_y ← (byte) gotoxy::y#4
  (word~) gotoxy::$8 ← (word)(byte) gotoxy::y#4
  (number~) gotoxy::$4 ← (word~) gotoxy::$8 * (number) $28
  (number~) gotoxy::$5 ← (number~) gotoxy::$4 + (byte) gotoxy::x#4
  (word) gotoxy::offset#0 ← (number~) gotoxy::$5
  (byte*~) gotoxy::$6 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (word) gotoxy::offset#0
  (byte*) conio_cursor_text ← (byte*~) gotoxy::$6
  (byte*~) gotoxy::$7 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (word) gotoxy::offset#0
  (byte*) conio_cursor_color ← (byte*~) gotoxy::$7
  to:gotoxy::@return
gotoxy::@4: scope:[gotoxy]  from gotoxy::@1
  (byte) gotoxy::y#6 ← phi( gotoxy::@1/(byte) gotoxy::y#5 )
  (byte) gotoxy::x#0 ← (number) 0
  to:gotoxy::@2
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  return 
  to:@return

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2
  (byte) cputc::c#1 ← phi( cputs::@2/(byte) cputc::c#0 )
  (bool~) cputc::$0 ← (byte) cputc::c#1 == (byte) '
'
  if((bool~) cputc::$0) goto cputc::@1
  to:cputc::@2
cputc::@1: scope:[cputc]  from cputc
  call cputln 
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@1
  to:cputc::@return
cputc::@2: scope:[cputc]  from cputc
  (byte) cputc::c#2 ← phi( cputc/(byte) cputc::c#1 )
  *((byte*) conio_cursor_text) ← (byte) cputc::c#2
  (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text
  *((byte*) conio_cursor_color) ← (byte) conio_textcolor
  (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color
  (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  (bool~) cputc::$1 ← (byte) conio_cursor_x == (number) $28
  (bool~) cputc::$2 ← ! (bool~) cputc::$1
  if((bool~) cputc::$2) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  (byte) conio_cursor_x ← (number) 0
  (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  call cscroll 
  to:cputc::@5
cputc::@5: scope:[cputc]  from cputc::@3
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@2 cputc::@4 cputc::@5
  return 
  to:@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1
  (byte*~) cputln::$0 ← (byte*) conio_cursor_text - (byte) conio_cursor_x
  (byte*~) cputln::$1 ← (byte*~) cputln::$0 + (number) $28
  (byte*) conio_cursor_text ← (byte*~) cputln::$1
  (byte*~) cputln::$2 ← (byte*) conio_cursor_color - (byte) conio_cursor_x
  (byte*~) cputln::$3 ← (byte*~) cputln::$2 + (number) $28
  (byte*) conio_cursor_color ← (byte*~) cputln::$3
  (byte) conio_cursor_x ← (number) 0
  (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  call cscroll 
  to:cputln::@1
cputln::@1: scope:[cputln]  from cputln
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln::@1
  return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputc::@3 cputln
  (bool~) cscroll::$0 ← (byte) conio_cursor_y == (number) $19
  (bool~) cscroll::$1 ← ! (bool~) cscroll::$0
  if((bool~) cscroll::$1) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  (bool~) cscroll::$9 ← (number) 0 != (byte) conio_scroll_enable
  if((bool~) cscroll::$9) goto cscroll::@3
  to:cscroll::@2
cscroll::@3: scope:[cscroll]  from cscroll::@1
  (void*) memcpy::destination#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT
  (void*) memcpy::source#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $28
  (word) memcpy::num#0 ← (number) $19*(number) $28-(number) $28
  call memcpy 
  (void*) memcpy::return#2 ← (void*) memcpy::return#1
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  (void*) memcpy::destination#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS
  (void*) memcpy::source#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $28
  (word) memcpy::num#1 ← (number) $19*(number) $28-(number) $28
  call memcpy 
  (void*) memcpy::return#3 ← (void*) memcpy::return#1
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(number) $28
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $28
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:cscroll::@6
cscroll::@6: scope:[cscroll]  from cscroll::@5
  (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(number) $28
  (byte) memset::c#1 ← (byte) conio_textcolor
  (word) memset::num#1 ← (number) $28
  call memset 
  (void*) memset::return#3 ← (void*) memset::return#1
  to:cscroll::@7
cscroll::@7: scope:[cscroll]  from cscroll::@6
  (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (number) $28
  (byte*) conio_cursor_text ← (byte*~) cscroll::$7
  (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (number) $28
  (byte*) conio_cursor_color ← (byte*~) cscroll::$8
  (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@2: scope:[cscroll]  from cscroll::@1
  (byte) gotoxy::x#1 ← (number) 0
  (byte) gotoxy::y#1 ← (number) 0
  call gotoxy 
  to:cscroll::@8
cscroll::@8: scope:[cscroll]  from cscroll::@2
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@7 cscroll::@8
  return 
  to:@return

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main::@6
  (to_nomodify byte*) cputs::s#3 ← phi( main::@6/(to_nomodify byte*) cputs::s#1 )
  (byte) cputs::c#0 ← (byte) 0
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@3
  (to_nomodify byte*) cputs::s#2 ← phi( cputs/(to_nomodify byte*) cputs::s#3 cputs::@3/(to_nomodify byte*) cputs::s#4 )
  (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2)
  (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2
  (bool~) cputs::$1 ← (number) 0 != (byte) cputs::c#1
  if((bool~) cputs::$1) goto cputs::@2
  to:cputs::@return
cputs::@2: scope:[cputs]  from cputs::@1
  (to_nomodify byte*) cputs::s#5 ← phi( cputs::@1/(to_nomodify byte*) cputs::s#0 )
  (byte) cputs::c#2 ← phi( cputs::@1/(byte) cputs::c#1 )
  (byte) cputc::c#0 ← (byte) cputs::c#2
  call cputc 
  to:cputs::@3
cputs::@3: scope:[cputs]  from cputs::@2
  (to_nomodify byte*) cputs::s#4 ← phi( cputs::@2/(to_nomodify byte*) cputs::s#5 )
  to:cputs::@1
cputs::@return: scope:[cputs]  from cputs::@1
  return 
  to:@return

(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
tod_init: scope:[tod_init]  from main
  (byte) tod_init::tod_TENTHS#1 ← phi( main/(byte) tod_init::tod_TENTHS#0 )
  (byte) tod_init::tod_SEC#1 ← phi( main/(byte) tod_init::tod_SEC#0 )
  (byte) tod_init::tod_MIN#1 ← phi( main/(byte) tod_init::tod_MIN#0 )
  (byte) tod_init::tod_HOURS#1 ← phi( main/(byte) tod_init::tod_HOURS#0 )
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (number) $80
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (number) $7f
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#1
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#1
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#1
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#1
  to:tod_init::@return
tod_init::@return: scope:[tod_init]  from tod_init
  return 
  to:@return

(struct TIME_OF_DAY()) tod_read()
tod_read: scope:[tod_read]  from main::@4
  (byte) tod_read::hours#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS)
  (byte) tod_read::mins#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN)
  (byte) tod_read::secs#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC)
  (byte) tod_read::tenths#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS)
  (byte) tod_read::tod_TENTHS#0 ← (byte) tod_read::tenths#0
  (byte) tod_read::tod_SEC#0 ← (byte) tod_read::secs#0
  (byte) tod_read::tod_MIN#0 ← (byte) tod_read::mins#0
  (byte) tod_read::tod_HOURS#0 ← (byte) tod_read::hours#0
  (byte) tod_read::return_TENTHS#0 ← (byte) tod_read::tod_TENTHS#0
  (byte) tod_read::return_SEC#0 ← (byte) tod_read::tod_SEC#0
  (byte) tod_read::return_MIN#0 ← (byte) tod_read::tod_MIN#0
  (byte) tod_read::return_HOURS#0 ← (byte) tod_read::tod_HOURS#0
  (struct TIME_OF_DAY) tod_read::return#0 ← struct-unwound {(byte) tod_read::return_TENTHS#0, (byte) tod_read::return_SEC#0, (byte) tod_read::return_MIN#0, (byte) tod_read::return_HOURS#0}
  to:tod_read::@return
tod_read::@return: scope:[tod_read]  from tod_read
  (byte) tod_read::return_HOURS#3 ← phi( tod_read/(byte) tod_read::return_HOURS#0 )
  (byte) tod_read::return_MIN#3 ← phi( tod_read/(byte) tod_read::return_MIN#0 )
  (byte) tod_read::return_SEC#3 ← phi( tod_read/(byte) tod_read::return_SEC#0 )
  (byte) tod_read::return_TENTHS#3 ← phi( tod_read/(byte) tod_read::return_TENTHS#0 )
  (byte) tod_read::return_TENTHS#1 ← (byte) tod_read::return_TENTHS#3
  (byte) tod_read::return_SEC#1 ← (byte) tod_read::return_SEC#3
  (byte) tod_read::return_MIN#1 ← (byte) tod_read::return_MIN#3
  (byte) tod_read::return_HOURS#1 ← (byte) tod_read::return_HOURS#3
  (struct TIME_OF_DAY) tod_read::return#1 ← struct-unwound {(byte) tod_read::return_TENTHS#1, (byte) tod_read::return_SEC#1, (byte) tod_read::return_MIN#1, (byte) tod_read::return_HOURS#1}
  return 
  to:@return

(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
tod_str: scope:[tod_str]  from main::@5
  (byte) tod_str::tod_TENTHS#1 ← phi( main::@5/(byte) tod_str::tod_TENTHS#0 )
  (byte) tod_str::tod_SEC#1 ← phi( main::@5/(byte) tod_str::tod_SEC#0 )
  (byte) tod_str::tod_MIN#1 ← phi( main::@5/(byte) tod_str::tod_MIN#0 )
  (byte) tod_str::tod_HOURS#1 ← phi( main::@5/(byte) tod_str::tod_HOURS#0 )
  (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#1 >> (number) 4
  (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0
  *((const byte*) tod_buffer + (number) 0) ← (byte~) tod_str::$1
  (number~) tod_str::$2 ← (byte) tod_str::tod_HOURS#1 & (number) $f
  (number~) tod_str::$3 ← (byte) '0' + (number~) tod_str::$2
  *((const byte*) tod_buffer + (number) 1) ← (number~) tod_str::$3
  (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#1 >> (number) 4
  (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4
  *((const byte*) tod_buffer + (number) 3) ← (byte~) tod_str::$5
  (number~) tod_str::$6 ← (byte) tod_str::tod_MIN#1 & (number) $f
  (number~) tod_str::$7 ← (byte) '0' + (number~) tod_str::$6
  *((const byte*) tod_buffer + (number) 4) ← (number~) tod_str::$7
  (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#1 >> (number) 4
  (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8
  *((const byte*) tod_buffer + (number) 6) ← (byte~) tod_str::$9
  (number~) tod_str::$10 ← (byte) tod_str::tod_SEC#1 & (number) $f
  (number~) tod_str::$11 ← (byte) '0' + (number~) tod_str::$10
  *((const byte*) tod_buffer + (number) 7) ← (number~) tod_str::$11
  (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#1 >> (number) 4
  (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12
  *((const byte*) tod_buffer + (number) 9) ← (byte~) tod_str::$13
  (number~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#1 & (number) $f
  (number~) tod_str::$15 ← (byte) '0' + (number~) tod_str::$14
  *((const byte*) tod_buffer + (number) $a) ← (number~) tod_str::$15
  (byte*) tod_str::return#0 ← (const byte*) tod_buffer
  to:tod_str::@return
tod_str::@return: scope:[tod_str]  from tod_str
  (byte*) tod_str::return#3 ← phi( tod_str/(byte*) tod_str::return#0 )
  (byte*) tod_str::return#1 ← (byte*) tod_str::return#3
  return 
  to:@return

(void()) main()
main: scope:[main]  from @2
  (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_TENTHS)
  (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC)
  (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN)
  (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS)
  call tod_init 
  to:main::@3
main::@3: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@7
  (bool~) main::$5 ← (number) 0 != (number) 1
  if((bool~) main::$5) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) gotoxy::x#2 ← (number) 0
  (byte) gotoxy::y#2 ← (number) 0
  call gotoxy 
  to:main::@4
main::@4: scope:[main]  from main::@2
  call tod_read 
  (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#1
  (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#1
  (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#1
  (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#1
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) tod_read::return_HOURS#4 ← phi( main::@4/(byte) tod_read::return_HOURS#2 )
  (byte) tod_read::return_MIN#4 ← phi( main::@4/(byte) tod_read::return_MIN#2 )
  (byte) tod_read::return_SEC#4 ← phi( main::@4/(byte) tod_read::return_SEC#2 )
  (byte) tod_read::return_TENTHS#4 ← phi( main::@4/(byte) tod_read::return_TENTHS#2 )
  (byte~) main::$2_TENTHS ← (byte) tod_read::return_TENTHS#4
  (byte~) main::$2_SEC ← (byte) tod_read::return_SEC#4
  (byte~) main::$2_MIN ← (byte) tod_read::return_MIN#4
  (byte~) main::$2_HOURS ← (byte) tod_read::return_HOURS#4
  (byte) tod_str::tod_TENTHS#0 ← (byte~) main::$2_TENTHS
  (byte) tod_str::tod_SEC#0 ← (byte~) main::$2_SEC
  (byte) tod_str::tod_MIN#0 ← (byte~) main::$2_MIN
  (byte) tod_str::tod_HOURS#0 ← (byte~) main::$2_HOURS
  call tod_str 
  (byte*) tod_str::return#2 ← (byte*) tod_str::return#1
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte*) tod_str::return#4 ← phi( main::@5/(byte*) tod_str::return#2 )
  (byte*~) main::$3 ← (byte*) tod_str::return#4
  (to_nomodify byte*) cputs::s#1 ← (byte*~) main::$3
  call cputs 
  to:main::@7
main::@7: scope:[main]  from main::@6
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@2: scope:[]  from @1
  call main 
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(const nomodify struct MOS6526_CIA*) CIA1 = (struct MOS6526_CIA*)(number) $dc00
(const nomodify byte*) CONIO_SCREEN_COLORS = (byte*)(number) $d800
(const nomodify byte*) CONIO_SCREEN_TEXT = (byte*)(number) $400
(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT = (byte) $e
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = (byte) $e
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = (byte) $f
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = (byte) 8
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = (byte) $b
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = (byte) $a
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = (byte) 9
(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS = (byte) 3
(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN = (byte) 2
(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC = (byte) 1
(const byte) OFFSET_STRUCT_TIME_OF_DAY_TENTHS = (byte) 0
(byte) TIME_OF_DAY::HOURS
(byte) TIME_OF_DAY::MIN
(byte) TIME_OF_DAY::SEC
(byte) TIME_OF_DAY::TENTHS
(struct TIME_OF_DAY) TOD_ZERO loadstore = { TENTHS: (byte) 0, SEC: (byte) 0, MIN: (byte) 0, HOURS: (byte) 0 }
(byte*) conio_cursor_color loadstore
(byte*) conio_cursor_text loadstore
(byte) conio_cursor_x loadstore
(byte) conio_cursor_y loadstore
(byte) conio_scroll_enable loadstore
(byte) conio_textcolor loadstore
(void()) cputc((byte) cputc::c)
(bool~) cputc::$0
(bool~) cputc::$1
(bool~) cputc::$2
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@4
(label) cputc::@5
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0
(byte) cputc::c#1
(byte) cputc::c#2
(void()) cputln()
(byte*~) cputln::$0
(byte*~) cputln::$1
(byte*~) cputln::$2
(byte*~) cputln::$3
(label) cputln::@1
(label) cputln::@return
(void()) cputs((to_nomodify byte*) cputs::s)
(bool~) cputs::$1
(label) cputs::@1
(label) cputs::@2
(label) cputs::@3
(label) cputs::@return
(byte) cputs::c
(byte) cputs::c#0
(byte) cputs::c#1
(byte) cputs::c#2
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0
(to_nomodify byte*) cputs::s#1
(to_nomodify byte*) cputs::s#2
(to_nomodify byte*) cputs::s#3
(to_nomodify byte*) cputs::s#4
(to_nomodify byte*) cputs::s#5
(void()) cscroll()
(bool~) cscroll::$0
(bool~) cscroll::$1
(byte*~) cscroll::$7
(byte*~) cscroll::$8
(bool~) cscroll::$9
(label) cscroll::@1
(label) cscroll::@2
(label) cscroll::@3
(label) cscroll::@4
(label) cscroll::@5
(label) cscroll::@6
(label) cscroll::@7
(label) cscroll::@8
(label) cscroll::@return
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(bool~) gotoxy::$0
(bool~) gotoxy::$1
(bool~) gotoxy::$2
(bool~) gotoxy::$3
(number~) gotoxy::$4
(number~) gotoxy::$5
(byte*~) gotoxy::$6
(byte*~) gotoxy::$7
(word~) gotoxy::$8
(label) gotoxy::@1
(label) gotoxy::@2
(label) gotoxy::@3
(label) gotoxy::@4
(label) gotoxy::@return
(word) gotoxy::offset
(word) gotoxy::offset#0
(byte) gotoxy::x
(byte) gotoxy::x#0
(byte) gotoxy::x#1
(byte) gotoxy::x#2
(byte) gotoxy::x#3
(byte) gotoxy::x#4
(byte) gotoxy::x#5
(byte) gotoxy::x#6
(byte) gotoxy::y
(byte) gotoxy::y#0
(byte) gotoxy::y#1
(byte) gotoxy::y#2
(byte) gotoxy::y#3
(byte) gotoxy::y#4
(byte) gotoxy::y#5
(byte) gotoxy::y#6
(void()) main()
(byte~) main::$2_HOURS
(byte~) main::$2_MIN
(byte~) main::$2_SEC
(byte~) main::$2_TENTHS
(byte*~) main::$3
(bool~) main::$5
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@return
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(byte*~) memcpy::$0
(bool~) memcpy::$1
(byte*~) memcpy::$2
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@3
(label) memcpy::@return
(void*) memcpy::destination
(void*) memcpy::destination#0
(void*) memcpy::destination#1
(void*) memcpy::destination#2
(void*) memcpy::destination#3
(void*) memcpy::destination#4
(void*) memcpy::destination#5
(byte*) memcpy::dst
(byte*) memcpy::dst#0
(byte*) memcpy::dst#1
(byte*) memcpy::dst#2
(byte*) memcpy::dst#3
(word) memcpy::num
(word) memcpy::num#0
(word) memcpy::num#1
(word) memcpy::num#2
(void*) memcpy::return
(void*) memcpy::return#0
(void*) memcpy::return#1
(void*) memcpy::return#2
(void*) memcpy::return#3
(void*) memcpy::return#4
(void*) memcpy::source
(void*) memcpy::source#0
(void*) memcpy::source#1
(void*) memcpy::source#2
(byte*) memcpy::src
(byte*) memcpy::src#0
(byte*) memcpy::src#1
(byte*) memcpy::src#2
(byte*) memcpy::src#3
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0
(byte*) memcpy::src_end#1
(byte*) memcpy::src_end#2
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte) memset::c#5
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(word) memset::num#3
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::return#4
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void*) memset::str#6
(const byte*) tod_buffer[]  = (byte*) "00:00:00:00"
(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
(label) tod_init::@return
(struct TIME_OF_DAY) tod_init::tod
(byte) tod_init::tod_HOURS
(byte) tod_init::tod_HOURS#0
(byte) tod_init::tod_HOURS#1
(byte) tod_init::tod_MIN
(byte) tod_init::tod_MIN#0
(byte) tod_init::tod_MIN#1
(byte) tod_init::tod_SEC
(byte) tod_init::tod_SEC#0
(byte) tod_init::tod_SEC#1
(byte) tod_init::tod_TENTHS
(byte) tod_init::tod_TENTHS#0
(byte) tod_init::tod_TENTHS#1
(struct TIME_OF_DAY()) tod_read()
(label) tod_read::@return
(byte) tod_read::hours
(byte) tod_read::hours#0
(byte) tod_read::mins
(byte) tod_read::mins#0
(struct TIME_OF_DAY) tod_read::return
(struct TIME_OF_DAY) tod_read::return#0
(struct TIME_OF_DAY) tod_read::return#1
(byte) tod_read::return_HOURS
(byte) tod_read::return_HOURS#0
(byte) tod_read::return_HOURS#1
(byte) tod_read::return_HOURS#2
(byte) tod_read::return_HOURS#3
(byte) tod_read::return_HOURS#4
(byte) tod_read::return_MIN
(byte) tod_read::return_MIN#0
(byte) tod_read::return_MIN#1
(byte) tod_read::return_MIN#2
(byte) tod_read::return_MIN#3
(byte) tod_read::return_MIN#4
(byte) tod_read::return_SEC
(byte) tod_read::return_SEC#0
(byte) tod_read::return_SEC#1
(byte) tod_read::return_SEC#2
(byte) tod_read::return_SEC#3
(byte) tod_read::return_SEC#4
(byte) tod_read::return_TENTHS
(byte) tod_read::return_TENTHS#0
(byte) tod_read::return_TENTHS#1
(byte) tod_read::return_TENTHS#2
(byte) tod_read::return_TENTHS#3
(byte) tod_read::return_TENTHS#4
(byte) tod_read::secs
(byte) tod_read::secs#0
(byte) tod_read::tenths
(byte) tod_read::tenths#0
(byte) tod_read::tod_HOURS
(byte) tod_read::tod_HOURS#0
(byte) tod_read::tod_MIN
(byte) tod_read::tod_MIN#0
(byte) tod_read::tod_SEC
(byte) tod_read::tod_SEC#0
(byte) tod_read::tod_TENTHS
(byte) tod_read::tod_TENTHS#0
(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
(byte~) tod_str::$0
(byte~) tod_str::$1
(number~) tod_str::$10
(number~) tod_str::$11
(byte~) tod_str::$12
(byte~) tod_str::$13
(number~) tod_str::$14
(number~) tod_str::$15
(number~) tod_str::$2
(number~) tod_str::$3
(byte~) tod_str::$4
(byte~) tod_str::$5
(number~) tod_str::$6
(number~) tod_str::$7
(byte~) tod_str::$8
(byte~) tod_str::$9
(label) tod_str::@return
(byte*) tod_str::return
(byte*) tod_str::return#0
(byte*) tod_str::return#1
(byte*) tod_str::return#2
(byte*) tod_str::return#3
(byte*) tod_str::return#4
(struct TIME_OF_DAY) tod_str::tod
(byte) tod_str::tod_HOURS
(byte) tod_str::tod_HOURS#0
(byte) tod_str::tod_HOURS#1
(byte) tod_str::tod_MIN
(byte) tod_str::tod_MIN#0
(byte) tod_str::tod_MIN#1
(byte) tod_str::tod_SEC
(byte) tod_str::tod_SEC#0
(byte) tod_str::tod_SEC#1
(byte) tod_str::tod_TENTHS
(byte) tod_str::tod_TENTHS#0
(byte) tod_str::tod_TENTHS#1

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
Adding number conversion cast (unumber) $19 in (bool~) gotoxy::$0 ← (byte) gotoxy::y#3 > (number) $19
Adding number conversion cast (unumber) $28 in (bool~) gotoxy::$2 ← (byte) gotoxy::x#3 >= (number) $28
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#0 ← (number) 0
Adding number conversion cast (unumber) $28 in (number~) gotoxy::$4 ← (word~) gotoxy::$8 * (number) $28
Adding number conversion cast (unumber) gotoxy::$4 in (number~) gotoxy::$4 ← (word~) gotoxy::$8 * (unumber)(number) $28
Adding number conversion cast (unumber) gotoxy::$5 in (number~) gotoxy::$5 ← (unumber~) gotoxy::$4 + (byte) gotoxy::x#4
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#0 ← (number) 0
Adding number conversion cast (unumber) $28 in (bool~) cputc::$1 ← (byte) conio_cursor_x == (number) $28
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x ← (number) 0
Adding number conversion cast (unumber) $28 in (byte*~) cputln::$1 ← (byte*~) cputln::$0 + (number) $28
Adding number conversion cast (unumber) $28 in (byte*~) cputln::$3 ← (byte*~) cputln::$2 + (number) $28
Adding number conversion cast (unumber) 0 in (byte) conio_cursor_x ← (number) 0
Adding number conversion cast (unumber) $19 in (bool~) cscroll::$0 ← (byte) conio_cursor_y == (number) $19
Adding number conversion cast (unumber) 0 in (bool~) cscroll::$9 ← (number) 0 != (byte) conio_scroll_enable
Adding number conversion cast (unumber) $28 in (void*) memcpy::source#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $28
Adding number conversion cast (unumber) $19*$28-$28 in (word) memcpy::num#0 ← (number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $28 in (void*) memcpy::source#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $28
Adding number conversion cast (unumber) $19*$28-$28 in (word) memcpy::num#1 ← (number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $28 in (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $19*$28 in (void*) memset::str#0 ← (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(number) $19*(number) $28-(unumber)(number) $28
Adding number conversion cast (unumber) $28 in (word) memset::num#0 ← (number) $28
Adding number conversion cast (unumber) $28 in (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(number) $28
Adding number conversion cast (unumber) $19*$28 in (void*) memset::str#1 ← (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(number) $19*(number) $28-(unumber)(number) $28
Adding number conversion cast (unumber) $28 in (word) memset::num#1 ← (number) $28
Adding number conversion cast (unumber) $28 in (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (number) $28
Adding number conversion cast (unumber) $28 in (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (number) $28
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) cputs::$1 ← (number) 0 != (byte) cputs::c#1
Adding number conversion cast (unumber) $80 in *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (number) $80
Adding number conversion cast (unumber) $7f in *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (number) $7f
Adding number conversion cast (unumber) 4 in (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#1 >> (number) 4
Adding number conversion cast (unumber) 0 in *((const byte*) tod_buffer + (number) 0) ← (byte~) tod_str::$1
Adding number conversion cast (unumber) $f in (number~) tod_str::$2 ← (byte) tod_str::tod_HOURS#1 & (number) $f
Adding number conversion cast (unumber) tod_str::$2 in (number~) tod_str::$2 ← (byte) tod_str::tod_HOURS#1 & (unumber)(number) $f
Adding number conversion cast (unumber) tod_str::$3 in (number~) tod_str::$3 ← (byte) '0' + (unumber~) tod_str::$2
Adding number conversion cast (unumber) 1 in *((const byte*) tod_buffer + (number) 1) ← (unumber~) tod_str::$3
Adding number conversion cast (unumber) 4 in (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#1 >> (number) 4
Adding number conversion cast (unumber) 3 in *((const byte*) tod_buffer + (number) 3) ← (byte~) tod_str::$5
Adding number conversion cast (unumber) $f in (number~) tod_str::$6 ← (byte) tod_str::tod_MIN#1 & (number) $f
Adding number conversion cast (unumber) tod_str::$6 in (number~) tod_str::$6 ← (byte) tod_str::tod_MIN#1 & (unumber)(number) $f
Adding number conversion cast (unumber) tod_str::$7 in (number~) tod_str::$7 ← (byte) '0' + (unumber~) tod_str::$6
Adding number conversion cast (unumber) 4 in *((const byte*) tod_buffer + (number) 4) ← (unumber~) tod_str::$7
Adding number conversion cast (unumber) 4 in (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#1 >> (number) 4
Adding number conversion cast (unumber) 6 in *((const byte*) tod_buffer + (number) 6) ← (byte~) tod_str::$9
Adding number conversion cast (unumber) $f in (number~) tod_str::$10 ← (byte) tod_str::tod_SEC#1 & (number) $f
Adding number conversion cast (unumber) tod_str::$10 in (number~) tod_str::$10 ← (byte) tod_str::tod_SEC#1 & (unumber)(number) $f
Adding number conversion cast (unumber) tod_str::$11 in (number~) tod_str::$11 ← (byte) '0' + (unumber~) tod_str::$10
Adding number conversion cast (unumber) 7 in *((const byte*) tod_buffer + (number) 7) ← (unumber~) tod_str::$11
Adding number conversion cast (unumber) 4 in (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#1 >> (number) 4
Adding number conversion cast (unumber) 9 in *((const byte*) tod_buffer + (number) 9) ← (byte~) tod_str::$13
Adding number conversion cast (unumber) $f in (number~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#1 & (number) $f
Adding number conversion cast (unumber) tod_str::$14 in (number~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#1 & (unumber)(number) $f
Adding number conversion cast (unumber) tod_str::$15 in (number~) tod_str::$15 ← (byte) '0' + (unumber~) tod_str::$14
Adding number conversion cast (unumber) $a in *((const byte*) tod_buffer + (number) $a) ← (unumber~) tod_str::$15
Adding number conversion cast (unumber) 0 in (byte) gotoxy::x#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gotoxy::y#2 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memcpy::src#0 ← (byte*)(void*) memcpy::source#2
Inlining cast (byte*) memcpy::dst#0 ← (byte*)(void*) memcpy::destination#2
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3
Inlining cast (byte) gotoxy::y#0 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::x#0 ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_x ← (unumber)(number) 0
Inlining cast (byte) conio_cursor_x ← (unumber)(number) 0
Inlining cast (word) memcpy::num#0 ← (unumber)(number) $19*(number) $28-(number) $28
Inlining cast (word) memcpy::num#1 ← (unumber)(number) $19*(number) $28-(number) $28
Inlining cast (word) memset::num#0 ← (unumber)(number) $28
Inlining cast (word) memset::num#1 ← (unumber)(number) $28
Inlining cast (byte) gotoxy::x#1 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#1 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::x#2 ← (unumber)(number) 0
Inlining cast (byte) gotoxy::y#2 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (struct MOS6526_CIA*) 56320
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast $7f
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast $f
Simplifying constant integer cast 1
Simplifying constant integer cast 4
Simplifying constant integer cast 3
Simplifying constant integer cast $f
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast $f
Simplifying constant integer cast 7
Simplifying constant integer cast 4
Simplifying constant integer cast 9
Simplifying constant integer cast $f
Simplifying constant integer cast $a
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to word in (unumber~) gotoxy::$4 ← (word~) gotoxy::$8 * (byte) $28
Inferred type updated to word in (unumber~) gotoxy::$5 ← (word~) gotoxy::$4 + (byte) gotoxy::x#4
Inferred type updated to byte in (unumber~) tod_str::$2 ← (byte) tod_str::tod_HOURS#1 & (byte) $f
Inferred type updated to byte in (unumber~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2
Inferred type updated to byte in (unumber~) tod_str::$6 ← (byte) tod_str::tod_MIN#1 & (byte) $f
Inferred type updated to byte in (unumber~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6
Inferred type updated to byte in (unumber~) tod_str::$10 ← (byte) tod_str::tod_SEC#1 & (byte) $f
Inferred type updated to byte in (unumber~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10
Inferred type updated to byte in (unumber~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#1 & (byte) $f
Inferred type updated to byte in (unumber~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14
Inversing boolean not [20] (bool~) memset::$1 ← (word) memset::num#2 <= (byte) 0 from [19] (bool~) memset::$0 ← (word) memset::num#2 > (byte) 0
Inversing boolean not [46] (bool~) gotoxy::$1 ← (byte) gotoxy::y#3 <= (byte) $19 from [45] (bool~) gotoxy::$0 ← (byte) gotoxy::y#3 > (byte) $19
Inversing boolean not [50] (bool~) gotoxy::$3 ← (byte) gotoxy::x#3 < (byte) $28 from [49] (bool~) gotoxy::$2 ← (byte) gotoxy::x#3 >= (byte) $28
Inversing boolean not [79] (bool~) cputc::$2 ← (byte) conio_cursor_x != (byte) $28 from [78] (bool~) cputc::$1 ← (byte) conio_cursor_x == (byte) $28
Inversing boolean not [96] (bool~) cscroll::$1 ← (byte) conio_cursor_y != (byte) $19 from [95] (bool~) cscroll::$0 ← (byte) conio_cursor_y == (byte) $19
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$3 cscroll::$8 
Alias memcpy::src_end#0 = memcpy::$0 
Alias memcpy::src#2 = memcpy::src#3 
Alias memcpy::dst#2 = memcpy::dst#3 
Alias memcpy::src_end#1 = memcpy::src_end#2 
Alias memcpy::destination#3 = memcpy::destination#5 memcpy::destination#4 memcpy::return#0 memcpy::return#4 memcpy::return#1 
Alias memset::return#0 = memset::str#2 memset::return#4 memset::return#1 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::end#0 = memset::$2 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias gotoxy::x#5 = gotoxy::x#6 
Alias gotoxy::offset#0 = gotoxy::$5 
Alias gotoxy::y#5 = gotoxy::y#6 
Alias cputc::c#1 = cputc::c#2 
Alias cputs::c#1 = cputs::c#2 
Alias cputs::s#0 = cputs::s#5 cputs::s#4 
Alias tod_read::return_TENTHS#0 = tod_read::tod_TENTHS#0 tod_read::tenths#0 tod_read::return_TENTHS#3 tod_read::return_TENTHS#1 
Alias tod_read::return_SEC#0 = tod_read::tod_SEC#0 tod_read::secs#0 tod_read::return_SEC#3 tod_read::return_SEC#1 
Alias tod_read::return_MIN#0 = tod_read::tod_MIN#0 tod_read::mins#0 tod_read::return_MIN#3 tod_read::return_MIN#1 
Alias tod_read::return_HOURS#0 = tod_read::tod_HOURS#0 tod_read::hours#0 tod_read::return_HOURS#3 tod_read::return_HOURS#1 
Alias tod_str::return#0 = tod_str::return#3 tod_str::return#1 
Alias tod_read::return_TENTHS#2 = tod_read::return_TENTHS#4 
Alias tod_read::return_SEC#2 = tod_read::return_SEC#4 
Alias tod_read::return_MIN#2 = tod_read::return_MIN#4 
Alias tod_read::return_HOURS#2 = tod_read::return_HOURS#4 
Alias tod_str::tod_TENTHS#0 = main::$2_TENTHS 
Alias tod_str::tod_SEC#0 = main::$2_SEC 
Alias tod_str::tod_MIN#0 = main::$2_MIN 
Alias tod_str::tod_HOURS#0 = main::$2_HOURS 
Alias tod_str::return#2 = tod_str::return#4 
Alias cputs::s#1 = main::$3 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$3 cscroll::$8 
Alias gotoxy::x#3 = gotoxy::x#5 
Alias gotoxy::y#4 = gotoxy::y#5 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$3 cscroll::$8 
Identical Phi Values (byte*) memcpy::src_end#1 (byte*) memcpy::src_end#0
Identical Phi Values (void*) memcpy::destination#3 (void*) memcpy::destination#2
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#5 (void*) memset::str#3
Identical Phi Values (byte) memset::c#2 (byte) memset::c#4
Identical Phi Values (byte) cputc::c#1 (byte) cputc::c#0
Identical Phi Values (to_nomodify byte*) cputs::s#3 (to_nomodify byte*) cputs::s#1
Identical Phi Values (byte) tod_init::tod_HOURS#1 (byte) tod_init::tod_HOURS#0
Identical Phi Values (byte) tod_init::tod_MIN#1 (byte) tod_init::tod_MIN#0
Identical Phi Values (byte) tod_init::tod_SEC#1 (byte) tod_init::tod_SEC#0
Identical Phi Values (byte) tod_init::tod_TENTHS#1 (byte) tod_init::tod_TENTHS#0
Identical Phi Values (byte) tod_str::tod_HOURS#1 (byte) tod_str::tod_HOURS#0
Identical Phi Values (byte) tod_str::tod_MIN#1 (byte) tod_str::tod_MIN#0
Identical Phi Values (byte) tod_str::tod_SEC#1 (byte) tod_str::tod_SEC#0
Identical Phi Values (byte) tod_str::tod_TENTHS#1 (byte) tod_str::tod_TENTHS#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#3
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memcpy::$1 [7] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
Simple Condition (bool~) memset::$1 [14] if((word) memset::num#2<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [21] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) gotoxy::$1 [33] if((byte) gotoxy::y#3<=(byte) $19) goto gotoxy::@1
Simple Condition (bool~) gotoxy::$3 [36] if((byte) gotoxy::x#3<(byte) $28) goto gotoxy::@2
Simple Condition (bool~) cputc::$0 [52] if((byte) cputc::c#0==(byte) '
') goto cputc::@1
Simple Condition (bool~) cputc::$2 [60] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
Simple Condition (bool~) cscroll::$1 [76] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
Simple Condition (bool~) cscroll::$9 [78] if((byte) 0!=(byte) conio_scroll_enable) goto cscroll::@3
Simple Condition (bool~) cputs::$1 [114] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
Simple Condition (bool~) main::$5 [166] if((number) 0!=(number) 1) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [81] (word) memcpy::num#0 ← (unumber)(number) $19*(number) $28-(number) $28
Constant right-side identified [86] (word) memcpy::num#1 ← (unumber)(number) $19*(number) $28-(number) $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) gotoxy::y#0 = 0
Constant (const byte) gotoxy::x#0 = 0
Constant (const void*) memcpy::destination#0 = (void*)CONIO_SCREEN_TEXT
Constant (const void*) memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
Constant (const word) memcpy::num#0 = (unumber)$19*$28-$28
Constant (const void*) memcpy::destination#1 = (void*)CONIO_SCREEN_COLORS
Constant (const void*) memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
Constant (const word) memcpy::num#1 = (unumber)$19*$28-$28
Constant (const void*) memset::str#0 = (void*)CONIO_SCREEN_TEXT+(word)$19*$28-$28
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $28
Constant (const void*) memset::str#1 = (void*)CONIO_SCREEN_COLORS+(word)$19*$28-$28
Constant (const word) memset::num#1 = $28
Constant (const byte) gotoxy::x#1 = 0
Constant (const byte) gotoxy::y#1 = 0
Constant (const byte) cputs::c#0 = 0
Constant (const byte*) tod_str::return#0 = tod_buffer
Constant (const byte) gotoxy::x#2 = 0
Constant (const byte) gotoxy::y#2 = 0
Constant (const byte) conio_textcolor = CONIO_TEXTCOLOR_DEFAULT
Constant (const byte) conio_scroll_enable = 1
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) memset::c#1 = conio_textcolor
Constant (const byte*) tod_str::return#2 = tod_str::return#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const to_nomodify byte*) cputs::s#1 = tod_str::return#2
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [78] if((byte) 0!=(const byte) conio_scroll_enable) goto cscroll::@3
if() condition always true - replacing block destination [166] if((number) 0!=(number) 1) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Rewriting conditional comparison [33] if((byte) gotoxy::y#3<=(byte) $19) goto gotoxy::@1
Simplifying expression containing zero tod_buffer in [136] *((const byte*) tod_buffer + (byte) 0) ← (byte~) tod_str::$1
Simplifying expression containing zero (byte*)&TOD_ZERO in [160] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_TENTHS)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (void*) memcpy::return#2 and assignment [64] (void*) memcpy::return#2 ← (void*) memcpy::destination#2
Eliminating unused variable (void*) memcpy::return#3 and assignment [66] (void*) memcpy::return#3 ← (void*) memcpy::destination#2
Eliminating unused variable (void*) memset::return#2 and assignment [68] (void*) memset::return#2 ← (void*) memset::str#3
Eliminating unused variable (void*) memset::return#3 and assignment [70] (void*) memset::return#3 ← (void*) memset::str#3
Eliminating unused variable (struct TIME_OF_DAY) tod_read::return#0 and assignment [96] (struct TIME_OF_DAY) tod_read::return#0 ← struct-unwound {(byte) tod_read::return_TENTHS#0, (byte) tod_read::return_SEC#0, (byte) tod_read::return_MIN#0, (byte) tod_read::return_HOURS#0}
Eliminating unused variable (struct TIME_OF_DAY) tod_read::return#1 and assignment [97] (struct TIME_OF_DAY) tod_read::return#1 ← struct-unwound {(byte) tod_read::return_TENTHS#0, (byte) tod_read::return_SEC#0, (byte) tod_read::return_MIN#0, (byte) tod_read::return_HOURS#0}
Eliminating unused constant (const byte) cputs::c#0
Eliminating unused constant (const byte) OFFSET_STRUCT_TIME_OF_DAY_TENTHS
Eliminating unused constant (const byte) conio_scroll_enable
Successful SSA optimization PassNEliminateUnusedVars
Removing PHI-reference to removed block (cscroll::@2) in block gotoxy
Removing PHI-reference to removed block (cscroll::@2) in block gotoxy
Removing unused block cscroll::@2
Removing unused block cscroll::@8
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) $19+1 in if((byte) gotoxy::y#3<(byte) $19+(number) 1) goto gotoxy::@1
Adding number conversion cast (unumber) 1 in if((byte) gotoxy::y#3<(unumber)(byte) $19+(number) 1) goto gotoxy::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast (byte) $19+(unumber)(number) 1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$3 cscroll::$8 
Identical Phi Values (byte) gotoxy::y#3 (const byte) gotoxy::y#2
Identical Phi Values (byte) gotoxy::x#3 (const byte) gotoxy::x#2
Successful SSA optimization Pass2IdenticalPhiElimination
if() condition always true - replacing block destination [26] if((const byte) gotoxy::y#2<(byte) $19+(byte) 1) goto gotoxy::@1
if() condition always true - replacing block destination [28] if((const byte) gotoxy::x#2<(byte) $28) goto gotoxy::@2
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant (const byte) gotoxy::x#1
Eliminating unused constant (const byte) gotoxy::y#1
Successful SSA optimization PassNEliminateUnusedVars
Removing PHI-reference to removed block (gotoxy::@3) in block gotoxy::@1
Removing unused block gotoxy::@3
Removing PHI-reference to removed block (gotoxy::@4) in block gotoxy::@2
Removing unused block gotoxy::@4
Successful SSA optimization Pass2EliminateUnusedBlocks
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$3 cscroll::$8 
Identical Phi Values (byte) gotoxy::y#4 (const byte) gotoxy::y#2
Identical Phi Values (byte) gotoxy::x#4 (const byte) gotoxy::x#2
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [29] (word~) gotoxy::$8 ← (word)(const byte) gotoxy::y#2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) gotoxy::$8 = (word)gotoxy::y#2
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero (word)(const byte) gotoxy::y#2 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero gotoxy::$4 in [31] (word) gotoxy::offset#0 ← (word~) gotoxy::$4 + (const byte) gotoxy::x#2
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) gotoxy::y#0
Eliminating unused constant (const byte) gotoxy::x#0
Successful SSA optimization PassNEliminateUnusedVars
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$3 cscroll::$8 
Alias gotoxy::offset#0 = gotoxy::$4 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$3 cscroll::$8 
Constant right-side identified [27] (word) gotoxy::offset#0 ← (const word) gotoxy::$8 * (byte) $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) gotoxy::offset#0 = gotoxy::$8*$28
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero (const word) gotoxy::$8*(byte) $28 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero CONIO_SCREEN_TEXT in [28] (byte*~) gotoxy::$6 ← (const nomodify byte*) CONIO_SCREEN_TEXT + (const word) gotoxy::offset#0
Simplifying expression containing zero CONIO_SCREEN_COLORS in [30] (byte*~) gotoxy::$7 ← (const nomodify byte*) CONIO_SCREEN_COLORS + (const word) gotoxy::offset#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const word) gotoxy::$8
Eliminating unused constant (const word) gotoxy::offset#0
Successful SSA optimization PassNEliminateUnusedVars
Alias candidate removed (volatile)conio_cursor_text = gotoxy::$6 cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = gotoxy::$7 cputln::$3 cscroll::$8 
Constant (const byte*) gotoxy::$6 = CONIO_SCREEN_TEXT
Constant (const byte*) gotoxy::$7 = CONIO_SCREEN_COLORS
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$3 cscroll::$8 
Inlining Noop Cast [1] (byte*) memcpy::src#0 ← (byte*)(void*) memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [2] (byte*) memcpy::dst#0 ← (byte*)(void*) memcpy::destination#2 keeping memcpy::destination#2
Inlining Noop Cast [3] (byte*~) memcpy::$2 ← (byte*)(void*) memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [13] (byte*~) memset::$4 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [15] (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings (const void*) memcpy::destination#0
Inlining constant with var siblings (const void*) memcpy::source#0
Inlining constant with var siblings (const word) memcpy::num#0
Inlining constant with var siblings (const void*) memcpy::destination#1
Inlining constant with var siblings (const void*) memcpy::source#1
Inlining constant with var siblings (const word) memcpy::num#1
Inlining constant with var siblings (const void*) memset::str#0
Inlining constant with var siblings (const byte) memset::c#0
Inlining constant with var siblings (const word) memset::num#0
Inlining constant with var siblings (const void*) memset::str#1
Inlining constant with var siblings (const word) memset::num#1
Inlining constant with var siblings (const byte) memset::c#1
Inlining constant with var siblings (const to_nomodify byte*) cputs::s#1
Constant inlined memset::str#1 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28
Constant inlined memset::str#0 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28
Constant inlined cputs::s#1 = (const byte*) tod_buffer
Constant inlined gotoxy::$6 = (const nomodify byte*) CONIO_SCREEN_TEXT
Constant inlined gotoxy::$7 = (const nomodify byte*) CONIO_SCREEN_COLORS
Constant inlined conio_textcolor = (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
Constant inlined memcpy::destination#0 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT
Constant inlined memset::num#1 = (byte) $28
Constant inlined memcpy::destination#1 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS
Constant inlined memset::num#0 = (byte) $28
Constant inlined memcpy::source#0 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28
Constant inlined memcpy::num#1 = (word)(number) $19*(number) $28-(number) $28
Constant inlined memcpy::num#0 = (word)(number) $19*(number) $28-(number) $28
Constant inlined memcpy::source#1 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28
Constant inlined memset::c#0 = (byte) ' '
Constant inlined memset::c#1 = (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
Constant inlined tod_str::return#2 = (const byte*) tod_buffer
Constant inlined tod_str::return#0 = (const byte*) tod_buffer
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(tod_buffer+1)
Consolidated array index constant in *(tod_buffer+3)
Consolidated array index constant in *(tod_buffer+4)
Consolidated array index constant in *(tod_buffer+6)
Consolidated array index constant in *(tod_buffer+7)
Consolidated array index constant in *(tod_buffer+9)
Consolidated array index constant in *(tod_buffer+$a)
Successful SSA optimization Pass2ConstantAdditionElimination
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$3 cscroll::$8 
Identical Phi Values (word) memcpy::num#2 (word)(number) $19*(number) $28-(number) $28
Identical Phi Values (word) memset::num#2 (byte) $28
Successful SSA optimization Pass2IdenticalPhiElimination
if() condition always false - eliminating [9] if((byte) $28<=(byte) 0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Alias candidate removed (volatile)conio_cursor_text = cputln::$1 cscroll::$7 
Alias candidate removed (volatile)conio_cursor_color = cputln::$3 cscroll::$8 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of cputs
Adding NOP phi() at start of cputc::@5
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cputc::@4
Adding NOP phi() at start of cputln::@1
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4
Adding NOP phi() at start of cscroll::@5
Adding NOP phi() at start of cscroll::@6
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of memcpy::@3
Adding NOP phi() at start of gotoxy
Adding NOP phi() at start of gotoxy::@1
CALL GRAPH
Calls in [] to main:6 
Calls in [main] to tod_init:13 gotoxy:17 tod_read:19 tod_str:28 cputs:30 
Calls in [cputs] to cputc:39 
Calls in [cputc] to cscroll:50 cputln:54 
Calls in [cputln] to cscroll:64 
Calls in [cscroll] to memcpy:70 memcpy:72 memset:74 memset:76 

Created 8 initial phi equivalence classes
Coalesced [40] cputs::s#6 ← cputs::s#0
Coalesced [92] memset::dst#5 ← memset::dst#1
Coalesced [104] memcpy::src#5 ← memcpy::src#1
Coalesced [105] memcpy::dst#5 ← memcpy::dst#1
Coalesced down to 8 phi equivalence classes
Culled Empty Block (label) @3
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@1
Culled Empty Block (label) main::@7
Culled Empty Block (label) cputs::@3
Culled Empty Block (label) cputc::@5
Culled Empty Block (label) cputc::@4
Culled Empty Block (label) cputln::@1
Culled Empty Block (label) cscroll::@1
Culled Empty Block (label) memset::@1
Culled Empty Block (label) memcpy::@3
Culled Empty Block (label) gotoxy::@1
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block gotoxy::@2 to gotoxy::@1
Renumbering block cscroll::@3 to cscroll::@1
Renumbering block cscroll::@4 to cscroll::@2
Renumbering block cscroll::@5 to cscroll::@3
Renumbering block cscroll::@6 to cscroll::@4
Renumbering block cscroll::@7 to cscroll::@5
Renumbering block main::@2 to main::@1
Renumbering block main::@4 to main::@2
Renumbering block main::@5 to main::@3
Renumbering block main::@6 to main::@4
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of cputs
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@2
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4
Adding NOP phi() at start of gotoxy

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:@2
@2: scope:[]  from @1
  [5] phi()
  [6] call main 
  to:@end
@end: scope:[]  from @2
  [7] phi()

(void()) main()
main: scope:[main]  from @2
  [8] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO)
  [9] (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC)
  [10] (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN)
  [11] (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS)
  [12] call tod_init 
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [13] phi()
  [14] call gotoxy 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [15] phi()
  [16] call tod_read 
  [17] (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#0
  [18] (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#0
  [19] (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#0
  [20] (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#0
  to:main::@3
main::@3: scope:[main]  from main::@2
  [21] (byte) tod_str::tod_TENTHS#0 ← (byte) tod_read::return_TENTHS#2
  [22] (byte) tod_str::tod_SEC#0 ← (byte) tod_read::return_SEC#2
  [23] (byte) tod_str::tod_MIN#0 ← (byte) tod_read::return_MIN#2
  [24] (byte) tod_str::tod_HOURS#0 ← (byte) tod_read::return_HOURS#2
  [25] call tod_str 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [26] phi()
  [27] call cputs 
  to:main::@1

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main::@4
  [28] phi()
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [29] (to_nomodify byte*) cputs::s#2 ← phi( cputs/(const byte*) tod_buffer cputs::@2/(to_nomodify byte*) cputs::s#0 )
  [30] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2)
  [31] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2
  [32] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [33] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [34] (byte) cputc::c#0 ← (byte) cputs::c#1
  [35] call cputc 
  to:cputs::@1

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2
  [36] if((byte) cputc::c#0==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [37] *((byte*) conio_cursor_text) ← (byte) cputc::c#0
  [38] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text
  [39] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT
  [40] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color
  [41] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [42] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [43] (byte) conio_cursor_x ← (byte) 0
  [44] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [45] call cscroll 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [46] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [47] phi()
  [48] call cputln 
  to:cputc::@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1
  [49] (byte*~) cputln::$0 ← (byte*) conio_cursor_text - (byte) conio_cursor_x
  [50] (byte*~) cputln::$1 ← (byte*~) cputln::$0 + (byte) $28
  [51] (byte*) conio_cursor_text ← (byte*~) cputln::$1
  [52] (byte*~) cputln::$2 ← (byte*) conio_cursor_color - (byte) conio_cursor_x
  [53] (byte*~) cputln::$3 ← (byte*~) cputln::$2 + (byte) $28
  [54] (byte*) conio_cursor_color ← (byte*~) cputln::$3
  [55] (byte) conio_cursor_x ← (byte) 0
  [56] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [57] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [58] return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputc::@3 cputln
  [59] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [60] phi()
  [61] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [62] phi()
  [63] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [64] phi()
  [65] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [66] phi()
  [67] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [68] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28
  [69] (byte*) conio_cursor_text ← (byte*~) cscroll::$7
  [70] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28
  [71] (byte*) conio_cursor_color ← (byte*~) cscroll::$8
  [72] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [73] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [74] (byte) memset::c#4 ← phi( cscroll::@3/(byte) ' ' cscroll::@4/(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT )
  [74] (void*) memset::str#3 ← phi( cscroll::@3/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 cscroll::@4/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [75] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28
  [76] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [77] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [78] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [79] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [80] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [81] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [82] (void*) memcpy::destination#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT cscroll::@2/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS )
  [82] (void*) memcpy::source#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 cscroll::@2/(void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 )
  [83] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28
  [84] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [85] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [86] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [86] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [87] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [88] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [89] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [90] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [91] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
tod_str: scope:[tod_str]  from main::@3
  [92] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4
  [93] (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0
  [94] *((const byte*) tod_buffer) ← (byte~) tod_str::$1
  [95] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f
  [96] (byte~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2
  [97] *((const byte*) tod_buffer+(byte) 1) ← (byte~) tod_str::$3
  [98] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4
  [99] (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4
  [100] *((const byte*) tod_buffer+(byte) 3) ← (byte~) tod_str::$5
  [101] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f
  [102] (byte~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6
  [103] *((const byte*) tod_buffer+(byte) 4) ← (byte~) tod_str::$7
  [104] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4
  [105] (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8
  [106] *((const byte*) tod_buffer+(byte) 6) ← (byte~) tod_str::$9
  [107] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f
  [108] (byte~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10
  [109] *((const byte*) tod_buffer+(byte) 7) ← (byte~) tod_str::$11
  [110] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4
  [111] (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12
  [112] *((const byte*) tod_buffer+(byte) 9) ← (byte~) tod_str::$13
  [113] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f
  [114] (byte~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14
  [115] *((const byte*) tod_buffer+(byte) $a) ← (byte~) tod_str::$15
  to:tod_str::@return
tod_str::@return: scope:[tod_str]  from tod_str
  [116] return 
  to:@return

(struct TIME_OF_DAY()) tod_read()
tod_read: scope:[tod_read]  from main::@2
  [117] (byte) tod_read::return_HOURS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS)
  [118] (byte) tod_read::return_MIN#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN)
  [119] (byte) tod_read::return_SEC#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC)
  [120] (byte) tod_read::return_TENTHS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS)
  to:tod_read::@return
tod_read::@return: scope:[tod_read]  from tod_read
  [121] return 
  to:@return

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from main::@1
  [122] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy
  [123] (byte) conio_cursor_x ← (const byte) gotoxy::x#2
  [124] (byte) conio_cursor_y ← (const byte) gotoxy::y#2
  [125] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT
  [126] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@1
  [127] return 
  to:@return

(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
tod_init: scope:[tod_init]  from main
  [128] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80
  [129] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f
  [130] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#0
  [131] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#0
  [132] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#0
  [133] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#0
  to:tod_init::@return
tod_init::@return: scope:[tod_init]  from tod_init
  [134] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(byte) TIME_OF_DAY::HOURS
(byte) TIME_OF_DAY::MIN
(byte) TIME_OF_DAY::SEC
(byte) TIME_OF_DAY::TENTHS
(struct TIME_OF_DAY) TOD_ZERO loadstore = { TENTHS: (byte) 0, SEC: (byte) 0, MIN: (byte) 0, HOURS: (byte) 0 }
(byte*) conio_cursor_color loadstore 3912298.4210526315
(byte*) conio_cursor_text loadstore 3844845.0
(byte) conio_cursor_x loadstore 755578.0
(byte) conio_cursor_y loadstore 5193564.677419355
(void()) cputc((byte) cputc::c)
(byte) cputc::c
(byte) cputc::c#0 1050001.5
(void()) cputln()
(byte*~) cputln::$0 2.0000002E7
(byte*~) cputln::$1 2.0000002E7
(byte*~) cputln::$2 2.0000002E7
(byte*~) cputln::$3 2.0000002E7
(void()) cputs((to_nomodify byte*) cputs::s)
(byte) cputs::c
(byte) cputs::c#1 100001.0
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0 50000.5
(to_nomodify byte*) cputs::s#2 150001.5
(void()) cscroll()
(byte*~) cscroll::$7 2.00000002E8
(byte*~) cscroll::$8 2.00000002E8
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(word) gotoxy::offset
(byte) gotoxy::x
(byte) gotoxy::y
(void()) main()
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(void*) memcpy::destination
(void*) memcpy::destination#2
(byte*) memcpy::dst
(byte*) memcpy::dst#1 1.000000000001E12
(byte*) memcpy::dst#2 1.0003333333346667E12
(byte*) memcpy::dst#4 2.000000002E9
(word) memcpy::num
(void*) memcpy::return
(void*) memcpy::source
(void*) memcpy::source#2
(byte*) memcpy::src
(byte*) memcpy::src#1 2.000000000002E12
(byte*) memcpy::src#2 1.00025000000125E12
(byte*) memcpy::src#4 1.000000001E9
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0 1.2512500000025E11
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte) memset::c#4 1.428571428572857E11
(byte*) memset::dst
(byte*) memset::dst#1 2.000000000002E12
(byte*) memset::dst#2 1.3336666666683335E12
(byte*) memset::dst#4 2.000000002E9
(byte*) memset::end
(byte*) memset::end#0 1.668333333336667E11
(word) memset::num
(void*) memset::return
(void*) memset::str
(void*) memset::str#3
(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
(struct TIME_OF_DAY) tod_init::tod
(byte) tod_init::tod_HOURS
(byte) tod_init::tod_HOURS#0 37.33333333333333
(byte) tod_init::tod_MIN
(byte) tod_init::tod_MIN#0 22.4
(byte) tod_init::tod_SEC
(byte) tod_init::tod_SEC#0 16.0
(byte) tod_init::tod_TENTHS
(byte) tod_init::tod_TENTHS#0 12.444444444444443
(struct TIME_OF_DAY()) tod_read()
(byte) tod_read::hours
(byte) tod_read::mins
(struct TIME_OF_DAY) tod_read::return
(byte) tod_read::return_HOURS
(byte) tod_read::return_HOURS#0 122.44444444444446
(byte) tod_read::return_HOURS#2 50.5
(byte) tod_read::return_MIN
(byte) tod_read::return_MIN#0 157.42857142857142
(byte) tod_read::return_MIN#2 50.5
(byte) tod_read::return_SEC
(byte) tod_read::return_SEC#0 220.39999999999998
(byte) tod_read::return_SEC#2 50.5
(byte) tod_read::return_TENTHS
(byte) tod_read::return_TENTHS#0 367.33333333333337
(byte) tod_read::return_TENTHS#2 50.5
(byte) tod_read::secs
(byte) tod_read::tenths
(byte) tod_read::tod_HOURS
(byte) tod_read::tod_MIN
(byte) tod_read::tod_SEC
(byte) tod_read::tod_TENTHS
(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
(byte~) tod_str::$0 2002.0
(byte~) tod_str::$1 2002.0
(byte~) tod_str::$10 2002.0
(byte~) tod_str::$11 2002.0
(byte~) tod_str::$12 2002.0
(byte~) tod_str::$13 2002.0
(byte~) tod_str::$14 2002.0
(byte~) tod_str::$15 2002.0
(byte~) tod_str::$2 2002.0
(byte~) tod_str::$3 2002.0
(byte~) tod_str::$4 2002.0
(byte~) tod_str::$5 2002.0
(byte~) tod_str::$6 2002.0
(byte~) tod_str::$7 2002.0
(byte~) tod_str::$8 2002.0
(byte~) tod_str::$9 2002.0
(byte*) tod_str::return
(struct TIME_OF_DAY) tod_str::tod
(byte) tod_str::tod_HOURS
(byte) tod_str::tod_HOURS#0 525.75
(byte) tod_str::tod_MIN
(byte) tod_str::tod_MIN#0 191.1818181818182
(byte) tod_str::tod_SEC
(byte) tod_str::tod_SEC#0 116.83333333333334
(byte) tod_str::tod_TENTHS
(byte) tod_str::tod_TENTHS#0 84.12

Initial phi equivalence classes
[ cputs::s#2 cputs::s#0 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Added variable conio_cursor_x to live range equivalence class [ conio_cursor_x ]
Added variable conio_cursor_y to live range equivalence class [ conio_cursor_y ]
Added variable conio_cursor_text to live range equivalence class [ conio_cursor_text ]
Added variable conio_cursor_color to live range equivalence class [ conio_cursor_color ]
Added variable tod_init::tod_TENTHS#0 to live range equivalence class [ tod_init::tod_TENTHS#0 ]
Added variable tod_init::tod_SEC#0 to live range equivalence class [ tod_init::tod_SEC#0 ]
Added variable tod_init::tod_MIN#0 to live range equivalence class [ tod_init::tod_MIN#0 ]
Added variable tod_init::tod_HOURS#0 to live range equivalence class [ tod_init::tod_HOURS#0 ]
Added variable tod_read::return_TENTHS#2 to live range equivalence class [ tod_read::return_TENTHS#2 ]
Added variable tod_read::return_SEC#2 to live range equivalence class [ tod_read::return_SEC#2 ]
Added variable tod_read::return_MIN#2 to live range equivalence class [ tod_read::return_MIN#2 ]
Added variable tod_read::return_HOURS#2 to live range equivalence class [ tod_read::return_HOURS#2 ]
Added variable tod_str::tod_TENTHS#0 to live range equivalence class [ tod_str::tod_TENTHS#0 ]
Added variable tod_str::tod_SEC#0 to live range equivalence class [ tod_str::tod_SEC#0 ]
Added variable tod_str::tod_MIN#0 to live range equivalence class [ tod_str::tod_MIN#0 ]
Added variable tod_str::tod_HOURS#0 to live range equivalence class [ tod_str::tod_HOURS#0 ]
Added variable cputs::c#1 to live range equivalence class [ cputs::c#1 ]
Added variable cputc::c#0 to live range equivalence class [ cputc::c#0 ]
Added variable cputln::$0 to live range equivalence class [ cputln::$0 ]
Added variable cputln::$1 to live range equivalence class [ cputln::$1 ]
Added variable cputln::$2 to live range equivalence class [ cputln::$2 ]
Added variable cputln::$3 to live range equivalence class [ cputln::$3 ]
Added variable cscroll::$7 to live range equivalence class [ cscroll::$7 ]
Added variable cscroll::$8 to live range equivalence class [ cscroll::$8 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable memcpy::src_end#0 to live range equivalence class [ memcpy::src_end#0 ]
Added variable tod_str::$0 to live range equivalence class [ tod_str::$0 ]
Added variable tod_str::$1 to live range equivalence class [ tod_str::$1 ]
Added variable tod_str::$2 to live range equivalence class [ tod_str::$2 ]
Added variable tod_str::$3 to live range equivalence class [ tod_str::$3 ]
Added variable tod_str::$4 to live range equivalence class [ tod_str::$4 ]
Added variable tod_str::$5 to live range equivalence class [ tod_str::$5 ]
Added variable tod_str::$6 to live range equivalence class [ tod_str::$6 ]
Added variable tod_str::$7 to live range equivalence class [ tod_str::$7 ]
Added variable tod_str::$8 to live range equivalence class [ tod_str::$8 ]
Added variable tod_str::$9 to live range equivalence class [ tod_str::$9 ]
Added variable tod_str::$10 to live range equivalence class [ tod_str::$10 ]
Added variable tod_str::$11 to live range equivalence class [ tod_str::$11 ]
Added variable tod_str::$12 to live range equivalence class [ tod_str::$12 ]
Added variable tod_str::$13 to live range equivalence class [ tod_str::$13 ]
Added variable tod_str::$14 to live range equivalence class [ tod_str::$14 ]
Added variable tod_str::$15 to live range equivalence class [ tod_str::$15 ]
Added variable tod_read::return_HOURS#0 to live range equivalence class [ tod_read::return_HOURS#0 ]
Added variable tod_read::return_MIN#0 to live range equivalence class [ tod_read::return_MIN#0 ]
Added variable tod_read::return_SEC#0 to live range equivalence class [ tod_read::return_SEC#0 ]
Added variable tod_read::return_TENTHS#0 to live range equivalence class [ tod_read::return_TENTHS#0 ]
Added variable TOD_ZERO to live range equivalence class [ TOD_ZERO ]
Complete equivalence classes
[ cputs::s#2 cputs::s#0 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ conio_cursor_x ]
[ conio_cursor_y ]
[ conio_cursor_text ]
[ conio_cursor_color ]
[ tod_init::tod_TENTHS#0 ]
[ tod_init::tod_SEC#0 ]
[ tod_init::tod_MIN#0 ]
[ tod_init::tod_HOURS#0 ]
[ tod_read::return_TENTHS#2 ]
[ tod_read::return_SEC#2 ]
[ tod_read::return_MIN#2 ]
[ tod_read::return_HOURS#2 ]
[ tod_str::tod_TENTHS#0 ]
[ tod_str::tod_SEC#0 ]
[ tod_str::tod_MIN#0 ]
[ tod_str::tod_HOURS#0 ]
[ cputs::c#1 ]
[ cputc::c#0 ]
[ cputln::$0 ]
[ cputln::$1 ]
[ cputln::$2 ]
[ cputln::$3 ]
[ cscroll::$7 ]
[ cscroll::$8 ]
[ memset::end#0 ]
[ memcpy::src_end#0 ]
[ tod_str::$0 ]
[ tod_str::$1 ]
[ tod_str::$2 ]
[ tod_str::$3 ]
[ tod_str::$4 ]
[ tod_str::$5 ]
[ tod_str::$6 ]
[ tod_str::$7 ]
[ tod_str::$8 ]
[ tod_str::$9 ]
[ tod_str::$10 ]
[ tod_str::$11 ]
[ tod_str::$12 ]
[ tod_str::$13 ]
[ tod_str::$14 ]
[ tod_str::$15 ]
[ tod_read::return_HOURS#0 ]
[ tod_read::return_MIN#0 ]
[ tod_read::return_SEC#0 ]
[ tod_read::return_TENTHS#0 ]
[ TOD_ZERO ]
Allocated zp[2]:2 [ cputs::s#2 cputs::s#0 ]
Allocated zp[2]:4 [ memset::str#3 ]
Allocated zp[1]:6 [ memset::c#4 ]
Allocated zp[2]:7 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[2]:9 [ memcpy::source#2 ]
Allocated zp[2]:11 [ memcpy::destination#2 ]
Allocated zp[2]:13 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
Allocated zp[2]:15 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated zp[1]:17 [ conio_cursor_x ]
Allocated zp[1]:18 [ conio_cursor_y ]
Allocated zp[2]:19 [ conio_cursor_text ]
Allocated zp[2]:21 [ conio_cursor_color ]
Allocated zp[1]:23 [ tod_init::tod_TENTHS#0 ]
Allocated zp[1]:24 [ tod_init::tod_SEC#0 ]
Allocated zp[1]:25 [ tod_init::tod_MIN#0 ]
Allocated zp[1]:26 [ tod_init::tod_HOURS#0 ]
Allocated zp[1]:27 [ tod_read::return_TENTHS#2 ]
Allocated zp[1]:28 [ tod_read::return_SEC#2 ]
Allocated zp[1]:29 [ tod_read::return_MIN#2 ]
Allocated zp[1]:30 [ tod_read::return_HOURS#2 ]
Allocated zp[1]:31 [ tod_str::tod_TENTHS#0 ]
Allocated zp[1]:32 [ tod_str::tod_SEC#0 ]
Allocated zp[1]:33 [ tod_str::tod_MIN#0 ]
Allocated zp[1]:34 [ tod_str::tod_HOURS#0 ]
Allocated zp[1]:35 [ cputs::c#1 ]
Allocated zp[1]:36 [ cputc::c#0 ]
Allocated zp[2]:37 [ cputln::$0 ]
Allocated zp[2]:39 [ cputln::$1 ]
Allocated zp[2]:41 [ cputln::$2 ]
Allocated zp[2]:43 [ cputln::$3 ]
Allocated zp[2]:45 [ cscroll::$7 ]
Allocated zp[2]:47 [ cscroll::$8 ]
Allocated zp[2]:49 [ memset::end#0 ]
Allocated zp[2]:51 [ memcpy::src_end#0 ]
Allocated zp[1]:53 [ tod_str::$0 ]
Allocated zp[1]:54 [ tod_str::$1 ]
Allocated zp[1]:55 [ tod_str::$2 ]
Allocated zp[1]:56 [ tod_str::$3 ]
Allocated zp[1]:57 [ tod_str::$4 ]
Allocated zp[1]:58 [ tod_str::$5 ]
Allocated zp[1]:59 [ tod_str::$6 ]
Allocated zp[1]:60 [ tod_str::$7 ]
Allocated zp[1]:61 [ tod_str::$8 ]
Allocated zp[1]:62 [ tod_str::$9 ]
Allocated zp[1]:63 [ tod_str::$10 ]
Allocated zp[1]:64 [ tod_str::$11 ]
Allocated zp[1]:65 [ tod_str::$12 ]
Allocated zp[1]:66 [ tod_str::$13 ]
Allocated zp[1]:67 [ tod_str::$14 ]
Allocated zp[1]:68 [ tod_str::$15 ]
Allocated zp[1]:69 [ tod_read::return_HOURS#0 ]
Allocated zp[1]:70 [ tod_read::return_MIN#0 ]
Allocated zp[1]:71 [ tod_read::return_SEC#0 ]
Allocated zp[1]:72 [ tod_read::return_TENTHS#0 ]
Allocated mem[4] [ TOD_ZERO ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Time of Day / RTOS test using the 6526 CIA on C64
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // The default text color
  .const CONIO_TEXTCOLOR_DEFAULT = $e
  .const OFFSET_STRUCT_TIME_OF_DAY_SEC = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_MIN = 2
  .const OFFSET_STRUCT_TIME_OF_DAY_HOURS = 3
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = $b
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = $a
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = 9
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = 8
  // The screen width
  // The screen height
  // The screen bytes
  // The text screen address
  .label CONIO_SCREEN_TEXT = $400
  // The color screen address
  .label CONIO_SCREEN_COLORS = $d800
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  .label conio_cursor_x = $11
  .label conio_cursor_y = $12
  .label conio_cursor_text = $13
  .label conio_cursor_color = $15
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor x-position
  lda #0
  sta.z conio_cursor_x
  // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor y-position
  lda #0
  sta.z conio_cursor_y
  // [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_TEXT
  sta.z conio_cursor_text
  lda #>CONIO_SCREEN_TEXT
  sta.z conio_cursor_text+1
  // [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_COLORS
  sta.z conio_cursor_color
  lda #>CONIO_SCREEN_COLORS
  sta.z conio_cursor_color+1
  // [5] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [6] call main 
  jsr main
  // [7] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [8] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO
    sta.z tod_init.tod_TENTHS
    // [9] (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC
    sta.z tod_init.tod_SEC
    // [10] (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN
    sta.z tod_init.tod_MIN
    // [11] (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS
    sta.z tod_init.tod_HOURS
    // [12] call tod_init 
    jsr tod_init
    // [13] phi from main main::@4 to main::@1 [phi:main/main::@4->main::@1]
  __b1_from_main:
  __b1_from___b4:
    jmp __b1
    // main::@1
  __b1:
    // [14] call gotoxy 
    // [122] phi from main::@1 to gotoxy [phi:main::@1->gotoxy]
  gotoxy_from___b1:
    jsr gotoxy
    // [15] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [16] call tod_read 
    jsr tod_read
    // [17] (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#0 -- vbuz1=vbuz2 
    lda.z tod_read.return_TENTHS
    sta.z tod_read.return_TENTHS_1
    // [18] (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#0 -- vbuz1=vbuz2 
    lda.z tod_read.return_SEC
    sta.z tod_read.return_SEC_1
    // [19] (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#0 -- vbuz1=vbuz2 
    lda.z tod_read.return_MIN
    sta.z tod_read.return_MIN_1
    // [20] (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#0 -- vbuz1=vbuz2 
    lda.z tod_read.return_HOURS
    sta.z tod_read.return_HOURS_1
    jmp __b3
    // main::@3
  __b3:
    // [21] (byte) tod_str::tod_TENTHS#0 ← (byte) tod_read::return_TENTHS#2 -- vbuz1=vbuz2 
    lda.z tod_read.return_TENTHS_1
    sta.z tod_str.tod_TENTHS
    // [22] (byte) tod_str::tod_SEC#0 ← (byte) tod_read::return_SEC#2 -- vbuz1=vbuz2 
    lda.z tod_read.return_SEC_1
    sta.z tod_str.tod_SEC
    // [23] (byte) tod_str::tod_MIN#0 ← (byte) tod_read::return_MIN#2 -- vbuz1=vbuz2 
    lda.z tod_read.return_MIN_1
    sta.z tod_str.tod_MIN
    // [24] (byte) tod_str::tod_HOURS#0 ← (byte) tod_read::return_HOURS#2 -- vbuz1=vbuz2 
    lda.z tod_read.return_HOURS_1
    sta.z tod_str.tod_HOURS
    // [25] call tod_str 
    jsr tod_str
    // [26] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [27] call cputs 
    // [28] phi from main::@4 to cputs [phi:main::@4->cputs]
  cputs_from___b4:
    jsr cputs
    jmp __b1_from___b4
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp(2) s)
cputs: {
    .label c = $23
    .label s = 2
    // [29] phi from cputs to cputs::@1 [phi:cputs->cputs::@1]
  __b1_from_cputs:
    // [29] phi (to_nomodify byte*) cputs::s#2 = (const byte*) tod_buffer [phi:cputs->cputs::@1#0] -- pbuz1=pbuc1 
    lda #<tod_buffer
    sta.z s
    lda #>tod_buffer
    sta.z s+1
    jmp __b1
    // cputs::@1
  __b1:
    // [30] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (s),y
    sta.z c
    // [31] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [32] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z c
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [33] return 
    rts
    // cputs::@2
  __b2:
    // [34] (byte) cputc::c#0 ← (byte) cputs::c#1 -- vbuz1=vbuz2 
    lda.z c
    sta.z cputc.c
    // [35] call cputc 
    jsr cputc
    // [29] phi from cputs::@2 to cputs::@1 [phi:cputs::@2->cputs::@1]
  __b1_from___b2:
    // [29] phi (to_nomodify byte*) cputs::s#2 = (to_nomodify byte*) cputs::s#0 [phi:cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte zp($24) c)
cputc: {
    .label c = $24
    // [36] if((byte) cputc::c#0==(byte) ' ') goto cputc::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #'\n'
    cmp.z c
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [37] *((byte*) conio_cursor_text) ← (byte) cputc::c#0 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (conio_cursor_text),y
    // [38] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_text
    bne !+
    inc.z conio_cursor_text+1
  !:
    // [39] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- _deref_pbuz1=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    ldy #0
    sta (conio_cursor_color),y
    // [40] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_color
    bne !+
    inc.z conio_cursor_color+1
  !:
    // [41] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [42] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    jmp __b3
    // cputc::@3
  __b3:
    // [43] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [44] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [45] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputc::@return
  __breturn:
    // [46] return 
    rts
    // [47] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [48] call cputln 
    jsr cputln
    jmp __breturn
}
  // cputln
// Print a newline
cputln: {
    .label __0 = $25
    .label __1 = $27
    .label __2 = $29
    .label __3 = $2b
    // [49] (byte*~) cputln::$0 ← (byte*) conio_cursor_text - (byte) conio_cursor_x -- pbuz1=pbuz2_minus_vbuz3 
    sec
    lda.z conio_cursor_text
    sbc.z conio_cursor_x
    sta.z __0
    lda.z conio_cursor_text+1
    sbc #0
    sta.z __0+1
    // [50] (byte*~) cputln::$1 ← (byte*~) cputln::$0 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z __0
    sta.z __1
    lda #0
    adc.z __0+1
    sta.z __1+1
    // [51] (byte*) conio_cursor_text ← (byte*~) cputln::$1 -- pbuz1=pbuz2 
    lda.z __1
    sta.z conio_cursor_text
    lda.z __1+1
    sta.z conio_cursor_text+1
    // [52] (byte*~) cputln::$2 ← (byte*) conio_cursor_color - (byte) conio_cursor_x -- pbuz1=pbuz2_minus_vbuz3 
    sec
    lda.z conio_cursor_color
    sbc.z conio_cursor_x
    sta.z __2
    lda.z conio_cursor_color+1
    sbc #0
    sta.z __2+1
    // [53] (byte*~) cputln::$3 ← (byte*~) cputln::$2 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z __2
    sta.z __3
    lda #0
    adc.z __2+1
    sta.z __3+1
    // [54] (byte*) conio_cursor_color ← (byte*~) cputln::$3 -- pbuz1=pbuz2 
    lda.z __3
    sta.z conio_cursor_color
    lda.z __3+1
    sta.z conio_cursor_color+1
    // [55] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [56] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [57] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [58] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    .label __7 = $2d
    .label __8 = $2f
    // [59] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [60] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    jmp __b1
    // cscroll::@1
  __b1:
    // [61] call memcpy 
    // [82] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
  memcpy_from___b1:
    // [82] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_TEXT
    sta.z memcpy.destination+1
    // [82] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [62] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [63] call memcpy 
    // [82] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
  memcpy_from___b2:
    // [82] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_COLORS
    sta.z memcpy.destination+1
    // [82] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [64] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
  __b3_from___b2:
    jmp __b3
    // cscroll::@3
  __b3:
    // [65] call memset 
    // [74] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
  memset_from___b3:
    // [74] phi (byte) memset::c#4 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [74] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [66] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
  __b4_from___b3:
    jmp __b4
    // cscroll::@4
  __b4:
    // [67] call memset 
    // [74] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
  memset_from___b4:
    // [74] phi (byte) memset::c#4 = (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [phi:cscroll::@4->memset#0] -- vbuz1=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    sta.z memset.c
    // [74] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    jmp __b5
    // cscroll::@5
  __b5:
    // [68] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 -- pbuz1=pbuz2_minus_vwuc1 
    lda.z conio_cursor_text
    sec
    sbc #<$28
    sta.z __7
    lda.z conio_cursor_text+1
    sbc #>$28
    sta.z __7+1
    // [69] (byte*) conio_cursor_text ← (byte*~) cscroll::$7 -- pbuz1=pbuz2 
    lda.z __7
    sta.z conio_cursor_text
    lda.z __7+1
    sta.z conio_cursor_text+1
    // [70] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 -- pbuz1=pbuz2_minus_vwuc1 
    lda.z conio_cursor_color
    sec
    sbc #<$28
    sta.z __8
    lda.z conio_cursor_color+1
    sbc #>$28
    sta.z __8+1
    // [71] (byte*) conio_cursor_color ← (byte*~) cscroll::$8 -- pbuz1=pbuz2 
    lda.z __8
    sta.z conio_cursor_color
    lda.z __8+1
    sta.z conio_cursor_color+1
    // [72] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [73] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp(4) str, byte zp(6) c)
memset: {
    .label end = $31
    .label dst = 7
    .label str = 4
    .label c = 6
    jmp __b1
    // memset::@1
  __b1:
    // [75] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [76] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 -- pbuz1=pbuz2 
    lda.z str
    sta.z dst
    lda.z str+1
    sta.z dst+1
    // [77] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [77] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [78] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [79] return 
    rts
    // memset::@3
  __b3:
    // [80] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (dst),y
    // [81] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($b) destination, void* zp(9) source)
memcpy: {
    .label src_end = $33
    .label dst = $f
    .label src = $d
    .label source = 9
    .label destination = $b
    // [83] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [84] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 -- pbuz1=pbuz2 
    lda.z source
    sta.z src
    lda.z source+1
    sta.z src+1
    // [85] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 -- pbuz1=pbuz2 
    lda.z destination
    sta.z dst
    lda.z destination+1
    sta.z dst+1
    // [86] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [86] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [86] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [87] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [88] return 
    rts
    // memcpy::@2
  __b2:
    // [89] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [90] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [91] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // tod_str
// Convert time of day to a human-readable string "hh:mm:ss:10"
// tod_str(byte zp($1f) tod_TENTHS, byte zp($20) tod_SEC, byte zp($21) tod_MIN, byte zp($22) tod_HOURS)
tod_str: {
    .label __0 = $35
    .label __1 = $36
    .label __2 = $37
    .label __3 = $38
    .label __4 = $39
    .label __5 = $3a
    .label __6 = $3b
    .label __7 = $3c
    .label __8 = $3d
    .label __9 = $3e
    .label __10 = $3f
    .label __11 = $40
    .label __12 = $41
    .label __13 = $42
    .label __14 = $43
    .label __15 = $44
    .label tod_TENTHS = $1f
    .label tod_SEC = $20
    .label tod_MIN = $21
    .label tod_HOURS = $22
    // [92] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_HOURS
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // [93] (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __0
    axs #-['0']
    stx.z __1
    // [94] *((const byte*) tod_buffer) ← (byte~) tod_str::$1 -- _deref_pbuc1=vbuz1 
    lda.z __1
    sta tod_buffer
    // [95] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z tod_HOURS
    sta.z __2
    // [96] (byte~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __2
    axs #-['0']
    stx.z __3
    // [97] *((const byte*) tod_buffer+(byte) 1) ← (byte~) tod_str::$3 -- _deref_pbuc1=vbuz1 
    lda.z __3
    sta tod_buffer+1
    // [98] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_MIN
    lsr
    lsr
    lsr
    lsr
    sta.z __4
    // [99] (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __4
    axs #-['0']
    stx.z __5
    // [100] *((const byte*) tod_buffer+(byte) 3) ← (byte~) tod_str::$5 -- _deref_pbuc1=vbuz1 
    lda.z __5
    sta tod_buffer+3
    // [101] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z tod_MIN
    sta.z __6
    // [102] (byte~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __6
    axs #-['0']
    stx.z __7
    // [103] *((const byte*) tod_buffer+(byte) 4) ← (byte~) tod_str::$7 -- _deref_pbuc1=vbuz1 
    lda.z __7
    sta tod_buffer+4
    // [104] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_SEC
    lsr
    lsr
    lsr
    lsr
    sta.z __8
    // [105] (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __8
    axs #-['0']
    stx.z __9
    // [106] *((const byte*) tod_buffer+(byte) 6) ← (byte~) tod_str::$9 -- _deref_pbuc1=vbuz1 
    lda.z __9
    sta tod_buffer+6
    // [107] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z tod_SEC
    sta.z __10
    // [108] (byte~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __10
    axs #-['0']
    stx.z __11
    // [109] *((const byte*) tod_buffer+(byte) 7) ← (byte~) tod_str::$11 -- _deref_pbuc1=vbuz1 
    lda.z __11
    sta tod_buffer+7
    // [110] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z tod_TENTHS
    lsr
    lsr
    lsr
    lsr
    sta.z __12
    // [111] (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __12
    axs #-['0']
    stx.z __13
    // [112] *((const byte*) tod_buffer+(byte) 9) ← (byte~) tod_str::$13 -- _deref_pbuc1=vbuz1 
    lda.z __13
    sta tod_buffer+9
    // [113] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z tod_TENTHS
    sta.z __14
    // [114] (byte~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __14
    axs #-['0']
    stx.z __15
    // [115] *((const byte*) tod_buffer+(byte) $a) ← (byte~) tod_str::$15 -- _deref_pbuc1=vbuz1 
    lda.z __15
    sta tod_buffer+$a
    jmp __breturn
    // tod_str::@return
  __breturn:
    // [116] return 
    rts
}
  // tod_read
// Read time of day
tod_read: {
    .label return_TENTHS = $48
    .label return_SEC = $47
    .label return_MIN = $46
    .label return_HOURS = $45
    .label return_TENTHS_1 = $1b
    .label return_SEC_1 = $1c
    .label return_MIN_1 = $1d
    .label return_HOURS_1 = $1e
    // [117] (byte) tod_read::return_HOURS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) -- vbuz1=_deref_pbuc1 
    // Reading sequence is important. TOD latches on reading hours until 10ths is read.
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    sta.z return_HOURS
    // [118] (byte) tod_read::return_MIN#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) -- vbuz1=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    sta.z return_MIN
    // [119] (byte) tod_read::return_SEC#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) -- vbuz1=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    sta.z return_SEC
    // [120] (byte) tod_read::return_TENTHS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) -- vbuz1=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    sta.z return_TENTHS
    jmp __breturn
    // tod_read::@return
  __breturn:
    // [121] return 
    rts
}
  // gotoxy
// Set the cursor to the specified position
gotoxy: {
    .const x = 0
    .const y = 0
    jmp __b1
    // gotoxy::@1
  __b1:
    // [123] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 -- vbuz1=vbuc1 
    lda #x
    sta.z conio_cursor_x
    // [124] (byte) conio_cursor_y ← (const byte) gotoxy::y#2 -- vbuz1=vbuc1 
    lda #y
    sta.z conio_cursor_y
    // [125] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z conio_cursor_text
    lda #>CONIO_SCREEN_TEXT
    sta.z conio_cursor_text+1
    // [126] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z conio_cursor_color
    lda #>CONIO_SCREEN_COLORS
    sta.z conio_cursor_color+1
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [127] return 
    rts
}
  // tod_init
// Initialize time-of-day clock
// This uses the MOS6526 CIA#1
// tod_init(byte zp($17) tod_TENTHS, byte zp($18) tod_SEC, byte zp($19) tod_MIN, byte zp($1a) tod_HOURS)
tod_init: {
    .label tod_TENTHS = $17
    .label tod_SEC = $18
    .label tod_MIN = $19
    .label tod_HOURS = $1a
    // [128] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set 50hz (this assumes PAL!) (bit7=1)
    lda #$80
    ora CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // [129] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Writing TOD clock (bit7=0)
    lda #$7f
    and CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // [130] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#0 -- _deref_pbuc1=vbuz1 
    // Reset TOD clock
    // Writing sequence is important. TOD stops when hours is written and starts when 10ths is written.
    lda.z tod_HOURS
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    // [131] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_MIN
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // [132] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_SEC
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // [133] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_TENTHS
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    jmp __breturn
    // tod_init::@return
  __breturn:
    // [134] return 
    rts
}
  // File Data
  // The buffer used by tod_str()
  tod_buffer: .text "00:00:00:00"
  .byte 0
  // Time of Day 00:00:00:00
  TOD_ZERO: .byte 0, 0, 0, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (byte) conio_cursor_x ← (byte) 0 [ TOD_ZERO ] (  [ TOD_ZERO ] { }  ) always clobbers reg byte a 
Statement [2] (byte) conio_cursor_y ← (byte) 0 [ TOD_ZERO ] (  [ TOD_ZERO ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT [ TOD_ZERO ] (  [ TOD_ZERO ] { }  ) always clobbers reg byte a 
Statement [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS [ TOD_ZERO ] (  [ TOD_ZERO ] { }  ) always clobbers reg byte a 
Statement [30] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2) [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#2 cputs::c#1 ] ( main:6::cputs:27 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#2 cputs::c#1 ] { }  ) always clobbers reg byte a reg byte y 
Statement [37] *((byte*) conio_cursor_text) ← (byte) cputc::c#0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:27::cputc:35 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte y 
Statement [39] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:27::cputc:35 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Statement [42] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:27::cputc:35 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [43] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:27::cputc:35 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [49] (byte*~) cputln::$0 ← (byte*) conio_cursor_text - (byte) conio_cursor_x [ conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] ( main:6::cputs:27::cputc:35::cputln:48 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [50] (byte*~) cputln::$1 ← (byte*~) cputln::$0 + (byte) $28 [ conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] ( main:6::cputs:27::cputc:35::cputln:48 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [51] (byte*) conio_cursor_text ← (byte*~) cputln::$1 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:27::cputc:35::cputln:48 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [52] (byte*~) cputln::$2 ← (byte*) conio_cursor_color - (byte) conio_cursor_x [ conio_cursor_y conio_cursor_text cputln::$2 ] ( main:6::cputs:27::cputc:35::cputln:48 [ cputs::s#0 conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [53] (byte*~) cputln::$3 ← (byte*~) cputln::$2 + (byte) $28 [ conio_cursor_y conio_cursor_text cputln::$3 ] ( main:6::cputs:27::cputc:35::cputln:48 [ cputs::s#0 conio_cursor_y conio_cursor_text cputln::$3 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [54] (byte*) conio_cursor_color ← (byte*~) cputln::$3 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:27::cputc:35::cputln:48 [ cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [55] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:27::cputc:35::cputln:48 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [59] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:27::cputc:35::cscroll:45 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [68] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 [ conio_cursor_y conio_cursor_color cscroll::$7 ] ( main:6::cputs:27::cputc:35::cscroll:45 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [69] (byte*) conio_cursor_text ← (byte*~) cscroll::$7 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:27::cputc:35::cscroll:45 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [70] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 [ conio_cursor_y conio_cursor_text cscroll::$8 ] ( main:6::cputs:27::cputc:35::cscroll:45 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [71] (byte*) conio_cursor_color ← (byte*~) cscroll::$8 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:27::cputc:35::cscroll:45 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [75] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:6::cputs:27::cputc:35::cscroll:45::memset:65 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memset:65 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cscroll:45::memset:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memset:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ memset::c#4 ]
Statement [76] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:6::cputs:27::cputc:35::cscroll:45::memset:65 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memset:65 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cscroll:45::memset:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memset:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [78] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:27::cputc:35::cscroll:45::memset:65 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memset:65 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cscroll:45::memset:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memset:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [80] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:27::cputc:35::cscroll:45::memset:65 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memset:65 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cscroll:45::memset:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memset:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:6 [ memset::c#4 ]
Statement [83] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:6::cputs:27::cputc:35::cscroll:45::memcpy:61 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memcpy:61 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cscroll:45::memcpy:63 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memcpy:63 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [84] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:6::cputs:27::cputc:35::cscroll:45::memcpy:61 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memcpy:61 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cscroll:45::memcpy:63 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memcpy:63 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [85] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:6::cputs:27::cputc:35::cscroll:45::memcpy:61 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memcpy:61 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cscroll:45::memcpy:63 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memcpy:63 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [87] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:27::cputc:35::cscroll:45::memcpy:61 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memcpy:61 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cscroll:45::memcpy:63 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memcpy:63 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [89] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:27::cputc:35::cscroll:45::memcpy:61 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memcpy:61 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cscroll:45::memcpy:63 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memcpy:63 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Statement [92] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:31 [ tod_str::tod_TENTHS#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:32 [ tod_str::tod_SEC#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:33 [ tod_str::tod_MIN#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:34 [ tod_str::tod_HOURS#0 ]
Statement [95] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [98] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [101] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [104] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [107] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::$10 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color tod_str::tod_TENTHS#0 tod_str::$10 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [110] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::$12 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color tod_str::tod_TENTHS#0 tod_str::$12 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [113] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f [ tod_str::$14 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color tod_str::$14 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [123] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 [ conio_cursor_x ] ( main:6::gotoxy:14 [ conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [124] (byte) conio_cursor_y ← (const byte) gotoxy::y#2 [ conio_cursor_x conio_cursor_y ] ( main:6::gotoxy:14 [ conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [125] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT [ conio_cursor_x conio_cursor_y conio_cursor_text ] ( main:6::gotoxy:14 [ conio_cursor_x conio_cursor_y conio_cursor_text ] { }  ) always clobbers reg byte a 
Statement [126] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::gotoxy:14 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  ) always clobbers reg byte a 
Statement [128] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80 [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:6::tod_init:12 [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:23 [ tod_init::tod_TENTHS#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:24 [ tod_init::tod_SEC#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:25 [ tod_init::tod_MIN#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:26 [ tod_init::tod_HOURS#0 ]
Statement [129] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:6::tod_init:12 [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Statement [1] (byte) conio_cursor_x ← (byte) 0 [ TOD_ZERO ] (  [ TOD_ZERO ] { }  ) always clobbers reg byte a 
Statement [2] (byte) conio_cursor_y ← (byte) 0 [ TOD_ZERO ] (  [ TOD_ZERO ] { }  ) always clobbers reg byte a 
Statement [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT [ TOD_ZERO ] (  [ TOD_ZERO ] { }  ) always clobbers reg byte a 
Statement [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS [ TOD_ZERO ] (  [ TOD_ZERO ] { }  ) always clobbers reg byte a 
Statement [30] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2) [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#2 cputs::c#1 ] ( main:6::cputs:27 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color cputs::s#2 cputs::c#1 ] { }  ) always clobbers reg byte a reg byte y 
Statement [37] *((byte*) conio_cursor_text) ← (byte) cputc::c#0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:27::cputc:35 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte y 
Statement [39] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:27::cputc:35 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Statement [42] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:27::cputc:35 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [43] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:27::cputc:35 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [49] (byte*~) cputln::$0 ← (byte*) conio_cursor_text - (byte) conio_cursor_x [ conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] ( main:6::cputs:27::cputc:35::cputln:48 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$0 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [50] (byte*~) cputln::$1 ← (byte*~) cputln::$0 + (byte) $28 [ conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] ( main:6::cputs:27::cputc:35::cputln:48 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cputln::$1 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [51] (byte*) conio_cursor_text ← (byte*~) cputln::$1 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:27::cputc:35::cputln:48 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [52] (byte*~) cputln::$2 ← (byte*) conio_cursor_color - (byte) conio_cursor_x [ conio_cursor_y conio_cursor_text cputln::$2 ] ( main:6::cputs:27::cputc:35::cputln:48 [ cputs::s#0 conio_cursor_y conio_cursor_text cputln::$2 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [53] (byte*~) cputln::$3 ← (byte*~) cputln::$2 + (byte) $28 [ conio_cursor_y conio_cursor_text cputln::$3 ] ( main:6::cputs:27::cputc:35::cputln:48 [ cputs::s#0 conio_cursor_y conio_cursor_text cputln::$3 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [54] (byte*) conio_cursor_color ← (byte*~) cputln::$3 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:27::cputc:35::cputln:48 [ cputs::s#0 conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [55] (byte) conio_cursor_x ← (byte) 0 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:27::cputc:35::cputln:48 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [59] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:27::cputc:35::cscroll:45 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [68] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 [ conio_cursor_y conio_cursor_color cscroll::$7 ] ( main:6::cputs:27::cputc:35::cscroll:45 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_color cscroll::$7 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [69] (byte*) conio_cursor_text ← (byte*~) cscroll::$7 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:27::cputc:35::cscroll:45 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [70] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 [ conio_cursor_y conio_cursor_text cscroll::$8 ] ( main:6::cputs:27::cputc:35::cscroll:45 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text cscroll::$8 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [71] (byte*) conio_cursor_color ← (byte*~) cscroll::$8 [ conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::cputs:27::cputc:35::cscroll:45 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [75] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:6::cputs:27::cputc:35::cscroll:45::memset:65 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memset:65 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cscroll:45::memset:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memset:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [76] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:6::cputs:27::cputc:35::cscroll:45::memset:65 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memset:65 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cscroll:45::memset:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memset:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [78] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:27::cputc:35::cscroll:45::memset:65 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memset:65 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cscroll:45::memset:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memset:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [80] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputs:27::cputc:35::cscroll:45::memset:65 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memset:65 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cscroll:45::memset:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memset:67 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Statement [83] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:6::cputs:27::cputc:35::cscroll:45::memcpy:61 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memcpy:61 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cscroll:45::memcpy:63 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memcpy:63 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [84] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:6::cputs:27::cputc:35::cscroll:45::memcpy:61 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memcpy:61 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cscroll:45::memcpy:63 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memcpy:63 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [85] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:6::cputs:27::cputc:35::cscroll:45::memcpy:61 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memcpy:61 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cscroll:45::memcpy:63 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memcpy:63 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [87] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:27::cputc:35::cscroll:45::memcpy:61 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memcpy:61 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cscroll:45::memcpy:63 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memcpy:63 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a 
Statement [89] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputs:27::cputc:35::cscroll:45::memcpy:61 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memcpy:61 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cscroll:45::memcpy:63 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  main:6::cputs:27::cputc:35::cputln:48::cscroll:57::memcpy:63 [ cputs::s#0 conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputs::c#1 } }  ) always clobbers reg byte a reg byte y 
Statement [92] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::tod_HOURS#0 tod_str::$0 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [95] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$2 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [98] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::tod_MIN#0 tod_str::$4 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [101] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$6 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [104] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color tod_str::tod_TENTHS#0 tod_str::tod_SEC#0 tod_str::$8 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [107] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f [ tod_str::tod_TENTHS#0 tod_str::$10 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color tod_str::tod_TENTHS#0 tod_str::$10 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [110] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4 [ tod_str::tod_TENTHS#0 tod_str::$12 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color tod_str::tod_TENTHS#0 tod_str::$12 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [113] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f [ tod_str::$14 ] ( main:6::tod_str:25 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color tod_str::$14 ] { { tod_str::tod_TENTHS#0 = tod_read::return_TENTHS#2 } { tod_str::tod_SEC#0 = tod_read::return_SEC#2 } { tod_str::tod_MIN#0 = tod_read::return_MIN#2 } { tod_str::tod_HOURS#0 = tod_read::return_HOURS#2 } }  ) always clobbers reg byte a 
Statement [123] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 [ conio_cursor_x ] ( main:6::gotoxy:14 [ conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [124] (byte) conio_cursor_y ← (const byte) gotoxy::y#2 [ conio_cursor_x conio_cursor_y ] ( main:6::gotoxy:14 [ conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [125] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT [ conio_cursor_x conio_cursor_y conio_cursor_text ] ( main:6::gotoxy:14 [ conio_cursor_x conio_cursor_y conio_cursor_text ] { }  ) always clobbers reg byte a 
Statement [126] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] ( main:6::gotoxy:14 [ conio_cursor_x conio_cursor_y conio_cursor_text conio_cursor_color ] { }  ) always clobbers reg byte a 
Statement [128] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80 [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:6::tod_init:12 [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Statement [129] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] ( main:6::tod_init:12 [ tod_init::tod_TENTHS#0 tod_init::tod_SEC#0 tod_init::tod_MIN#0 tod_init::tod_HOURS#0 ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ cputs::s#2 cputs::s#0 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ memset::str#3 ] : zp[2]:4 , 
Potential registers zp[1]:6 [ memset::c#4 ] : zp[1]:6 , reg byte x , 
Potential registers zp[2]:7 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:7 , 
Potential registers zp[2]:9 [ memcpy::source#2 ] : zp[2]:9 , 
Potential registers zp[2]:11 [ memcpy::destination#2 ] : zp[2]:11 , 
Potential registers zp[2]:13 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] : zp[2]:13 , 
Potential registers zp[2]:15 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] : zp[2]:15 , 
Potential registers zp[1]:17 [ conio_cursor_x ] : zp[1]:17 , 
Potential registers zp[1]:18 [ conio_cursor_y ] : zp[1]:18 , 
Potential registers zp[2]:19 [ conio_cursor_text ] : zp[2]:19 , 
Potential registers zp[2]:21 [ conio_cursor_color ] : zp[2]:21 , 
Potential registers zp[1]:23 [ tod_init::tod_TENTHS#0 ] : zp[1]:23 , reg byte x , reg byte y , 
Potential registers zp[1]:24 [ tod_init::tod_SEC#0 ] : zp[1]:24 , reg byte x , reg byte y , 
Potential registers zp[1]:25 [ tod_init::tod_MIN#0 ] : zp[1]:25 , reg byte x , reg byte y , 
Potential registers zp[1]:26 [ tod_init::tod_HOURS#0 ] : zp[1]:26 , reg byte x , reg byte y , 
Potential registers zp[1]:27 [ tod_read::return_TENTHS#2 ] : zp[1]:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:28 [ tod_read::return_SEC#2 ] : zp[1]:28 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:29 [ tod_read::return_MIN#2 ] : zp[1]:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:30 [ tod_read::return_HOURS#2 ] : zp[1]:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:31 [ tod_str::tod_TENTHS#0 ] : zp[1]:31 , reg byte x , reg byte y , 
Potential registers zp[1]:32 [ tod_str::tod_SEC#0 ] : zp[1]:32 , reg byte x , reg byte y , 
Potential registers zp[1]:33 [ tod_str::tod_MIN#0 ] : zp[1]:33 , reg byte x , reg byte y , 
Potential registers zp[1]:34 [ tod_str::tod_HOURS#0 ] : zp[1]:34 , reg byte x , reg byte y , 
Potential registers zp[1]:35 [ cputs::c#1 ] : zp[1]:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:36 [ cputc::c#0 ] : zp[1]:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:37 [ cputln::$0 ] : zp[2]:37 , 
Potential registers zp[2]:39 [ cputln::$1 ] : zp[2]:39 , 
Potential registers zp[2]:41 [ cputln::$2 ] : zp[2]:41 , 
Potential registers zp[2]:43 [ cputln::$3 ] : zp[2]:43 , 
Potential registers zp[2]:45 [ cscroll::$7 ] : zp[2]:45 , 
Potential registers zp[2]:47 [ cscroll::$8 ] : zp[2]:47 , 
Potential registers zp[2]:49 [ memset::end#0 ] : zp[2]:49 , 
Potential registers zp[2]:51 [ memcpy::src_end#0 ] : zp[2]:51 , 
Potential registers zp[1]:53 [ tod_str::$0 ] : zp[1]:53 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:54 [ tod_str::$1 ] : zp[1]:54 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:55 [ tod_str::$2 ] : zp[1]:55 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:56 [ tod_str::$3 ] : zp[1]:56 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:57 [ tod_str::$4 ] : zp[1]:57 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:58 [ tod_str::$5 ] : zp[1]:58 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:59 [ tod_str::$6 ] : zp[1]:59 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:60 [ tod_str::$7 ] : zp[1]:60 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:61 [ tod_str::$8 ] : zp[1]:61 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:62 [ tod_str::$9 ] : zp[1]:62 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:63 [ tod_str::$10 ] : zp[1]:63 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:64 [ tod_str::$11 ] : zp[1]:64 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:65 [ tod_str::$12 ] : zp[1]:65 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:66 [ tod_str::$13 ] : zp[1]:66 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:67 [ tod_str::$14 ] : zp[1]:67 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:68 [ tod_str::$15 ] : zp[1]:68 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:69 [ tod_read::return_HOURS#0 ] : zp[1]:69 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:70 [ tod_read::return_MIN#0 ] : zp[1]:70 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:71 [ tod_read::return_SEC#0 ] : zp[1]:71 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:72 [ tod_read::return_TENTHS#0 ] : zp[1]:72 , reg byte a , reg byte x , reg byte y , 
Potential registers mem[4] [ TOD_ZERO ] : mem[4] , 

REGISTER UPLIFT SCOPES
Uplift Scope [memcpy] 3,001,250,000,004.25: zp[2]:13 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] 2,002,333,333,337.67: zp[2]:15 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] 125,125,000,000.25: zp[2]:51 [ memcpy::src_end#0 ] 0: zp[2]:9 [ memcpy::source#2 ] 0: zp[2]:11 [ memcpy::destination#2 ] 
Uplift Scope [memset] 3,335,666,666,672.33: zp[2]:7 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 166,833,333,333.67: zp[2]:49 [ memset::end#0 ] 142,857,142,857.29: zp[1]:6 [ memset::c#4 ] 0: zp[2]:4 [ memset::str#3 ] 
Uplift Scope [cscroll] 200,000,002: zp[2]:45 [ cscroll::$7 ] 200,000,002: zp[2]:47 [ cscroll::$8 ] 
Uplift Scope [cputln] 20,000,002: zp[2]:37 [ cputln::$0 ] 20,000,002: zp[2]:39 [ cputln::$1 ] 20,000,002: zp[2]:41 [ cputln::$2 ] 20,000,002: zp[2]:43 [ cputln::$3 ] 
Uplift Scope [] 5,193,564.68: zp[1]:18 [ conio_cursor_y ] 3,912,298.42: zp[2]:21 [ conio_cursor_color ] 3,844,845: zp[2]:19 [ conio_cursor_text ] 755,578: zp[1]:17 [ conio_cursor_x ] 0: mem[4] [ TOD_ZERO ] 
Uplift Scope [cputc] 1,050,001.5: zp[1]:36 [ cputc::c#0 ] 
Uplift Scope [cputs] 200,002: zp[2]:2 [ cputs::s#2 cputs::s#0 ] 100,001: zp[1]:35 [ cputs::c#1 ] 
Uplift Scope [tod_str] 2,002: zp[1]:53 [ tod_str::$0 ] 2,002: zp[1]:54 [ tod_str::$1 ] 2,002: zp[1]:55 [ tod_str::$2 ] 2,002: zp[1]:56 [ tod_str::$3 ] 2,002: zp[1]:57 [ tod_str::$4 ] 2,002: zp[1]:58 [ tod_str::$5 ] 2,002: zp[1]:59 [ tod_str::$6 ] 2,002: zp[1]:60 [ tod_str::$7 ] 2,002: zp[1]:61 [ tod_str::$8 ] 2,002: zp[1]:62 [ tod_str::$9 ] 2,002: zp[1]:63 [ tod_str::$10 ] 2,002: zp[1]:64 [ tod_str::$11 ] 2,002: zp[1]:65 [ tod_str::$12 ] 2,002: zp[1]:66 [ tod_str::$13 ] 2,002: zp[1]:67 [ tod_str::$14 ] 2,002: zp[1]:68 [ tod_str::$15 ] 525.75: zp[1]:34 [ tod_str::tod_HOURS#0 ] 191.18: zp[1]:33 [ tod_str::tod_MIN#0 ] 116.83: zp[1]:32 [ tod_str::tod_SEC#0 ] 84.12: zp[1]:31 [ tod_str::tod_TENTHS#0 ] 
Uplift Scope [tod_read] 367.33: zp[1]:72 [ tod_read::return_TENTHS#0 ] 220.4: zp[1]:71 [ tod_read::return_SEC#0 ] 157.43: zp[1]:70 [ tod_read::return_MIN#0 ] 122.44: zp[1]:69 [ tod_read::return_HOURS#0 ] 50.5: zp[1]:27 [ tod_read::return_TENTHS#2 ] 50.5: zp[1]:28 [ tod_read::return_SEC#2 ] 50.5: zp[1]:29 [ tod_read::return_MIN#2 ] 50.5: zp[1]:30 [ tod_read::return_HOURS#2 ] 
Uplift Scope [tod_init] 37.33: zp[1]:26 [ tod_init::tod_HOURS#0 ] 22.4: zp[1]:25 [ tod_init::tod_MIN#0 ] 16: zp[1]:24 [ tod_init::tod_SEC#0 ] 12.44: zp[1]:23 [ tod_init::tod_TENTHS#0 ] 
Uplift Scope [gotoxy] 
Uplift Scope [TIME_OF_DAY] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [main] 

Uplifting [memcpy] best 123911 combination zp[2]:13 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] zp[2]:15 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] zp[2]:51 [ memcpy::src_end#0 ] zp[2]:9 [ memcpy::source#2 ] zp[2]:11 [ memcpy::destination#2 ] 
Uplifting [memset] best 122905 combination zp[2]:7 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:49 [ memset::end#0 ] reg byte x [ memset::c#4 ] zp[2]:4 [ memset::str#3 ] 
Uplifting [cscroll] best 122905 combination zp[2]:45 [ cscroll::$7 ] zp[2]:47 [ cscroll::$8 ] 
Uplifting [cputln] best 122905 combination zp[2]:37 [ cputln::$0 ] zp[2]:39 [ cputln::$1 ] zp[2]:41 [ cputln::$2 ] zp[2]:43 [ cputln::$3 ] 
Uplifting [] best 122905 combination zp[1]:18 [ conio_cursor_y ] zp[2]:21 [ conio_cursor_color ] zp[2]:19 [ conio_cursor_text ] zp[1]:17 [ conio_cursor_x ] mem[4] [ TOD_ZERO ] 
Uplifting [cputc] best 122599 combination reg byte a [ cputc::c#0 ] 
Uplifting [cputs] best 121699 combination zp[2]:2 [ cputs::s#2 cputs::s#0 ] reg byte a [ cputs::c#1 ] 
Uplifting [tod_read] best 121600 combination reg byte y [ tod_read::return_TENTHS#0 ] reg byte x [ tod_read::return_SEC#0 ] reg byte a [ tod_read::return_MIN#0 ] zp[1]:69 [ tod_read::return_HOURS#0 ] zp[1]:27 [ tod_read::return_TENTHS#2 ] zp[1]:28 [ tod_read::return_SEC#2 ] zp[1]:29 [ tod_read::return_MIN#2 ] zp[1]:30 [ tod_read::return_HOURS#2 ] 
Limited combination testing to 100 combinations of 65536 possible.
Uplifting [tod_init] best 121588 combination reg byte y [ tod_init::tod_HOURS#0 ] reg byte x [ tod_init::tod_MIN#0 ] zp[1]:24 [ tod_init::tod_SEC#0 ] zp[1]:23 [ tod_init::tod_TENTHS#0 ] 
Uplifting [gotoxy] best 121588 combination 
Uplifting [TIME_OF_DAY] best 121588 combination 
Uplifting [MOS6526_CIA] best 121588 combination 
Uplifting [MOS6569_VICII] best 121588 combination 
Uplifting [MOS6581_SID] best 121588 combination 
Uplifting [main] best 121588 combination 
Attempting to uplift remaining variables inzp[1]:18 [ conio_cursor_y ]
Uplifting [] best 121588 combination zp[1]:18 [ conio_cursor_y ] 
Attempting to uplift remaining variables inzp[1]:17 [ conio_cursor_x ]
Uplifting [] best 121588 combination zp[1]:17 [ conio_cursor_x ] 
Attempting to uplift remaining variables inzp[1]:53 [ tod_str::$0 ]
Uplifting [tod_str] best 121584 combination reg byte a [ tod_str::$0 ] 
Attempting to uplift remaining variables inzp[1]:54 [ tod_str::$1 ]
Uplifting [tod_str] best 121578 combination reg byte a [ tod_str::$1 ] 
Attempting to uplift remaining variables inzp[1]:55 [ tod_str::$2 ]
Uplifting [tod_str] best 121574 combination reg byte a [ tod_str::$2 ] 
Attempting to uplift remaining variables inzp[1]:56 [ tod_str::$3 ]
Uplifting [tod_str] best 121568 combination reg byte a [ tod_str::$3 ] 
Attempting to uplift remaining variables inzp[1]:57 [ tod_str::$4 ]
Uplifting [tod_str] best 121564 combination reg byte a [ tod_str::$4 ] 
Attempting to uplift remaining variables inzp[1]:58 [ tod_str::$5 ]
Uplifting [tod_str] best 121558 combination reg byte a [ tod_str::$5 ] 
Attempting to uplift remaining variables inzp[1]:59 [ tod_str::$6 ]
Uplifting [tod_str] best 121554 combination reg byte a [ tod_str::$6 ] 
Attempting to uplift remaining variables inzp[1]:60 [ tod_str::$7 ]
Uplifting [tod_str] best 121548 combination reg byte a [ tod_str::$7 ] 
Attempting to uplift remaining variables inzp[1]:61 [ tod_str::$8 ]
Uplifting [tod_str] best 121544 combination reg byte a [ tod_str::$8 ] 
Attempting to uplift remaining variables inzp[1]:62 [ tod_str::$9 ]
Uplifting [tod_str] best 121538 combination reg byte a [ tod_str::$9 ] 
Attempting to uplift remaining variables inzp[1]:63 [ tod_str::$10 ]
Uplifting [tod_str] best 121534 combination reg byte a [ tod_str::$10 ] 
Attempting to uplift remaining variables inzp[1]:64 [ tod_str::$11 ]
Uplifting [tod_str] best 121528 combination reg byte a [ tod_str::$11 ] 
Attempting to uplift remaining variables inzp[1]:65 [ tod_str::$12 ]
Uplifting [tod_str] best 121524 combination reg byte a [ tod_str::$12 ] 
Attempting to uplift remaining variables inzp[1]:66 [ tod_str::$13 ]
Uplifting [tod_str] best 121518 combination reg byte a [ tod_str::$13 ] 
Attempting to uplift remaining variables inzp[1]:67 [ tod_str::$14 ]
Uplifting [tod_str] best 121514 combination reg byte a [ tod_str::$14 ] 
Attempting to uplift remaining variables inzp[1]:68 [ tod_str::$15 ]
Uplifting [tod_str] best 121508 combination reg byte a [ tod_str::$15 ] 
Attempting to uplift remaining variables inzp[1]:34 [ tod_str::tod_HOURS#0 ]
Uplifting [tod_str] best 121476 combination reg byte x [ tod_str::tod_HOURS#0 ] 
Attempting to uplift remaining variables inzp[1]:33 [ tod_str::tod_MIN#0 ]
Uplifting [tod_str] best 121444 combination reg byte y [ tod_str::tod_MIN#0 ] 
Attempting to uplift remaining variables inzp[1]:69 [ tod_read::return_HOURS#0 ]
Uplifting [tod_read] best 121444 combination zp[1]:69 [ tod_read::return_HOURS#0 ] 
Attempting to uplift remaining variables inzp[1]:32 [ tod_str::tod_SEC#0 ]
Uplifting [tod_str] best 121444 combination zp[1]:32 [ tod_str::tod_SEC#0 ] 
Attempting to uplift remaining variables inzp[1]:31 [ tod_str::tod_TENTHS#0 ]
Uplifting [tod_str] best 121444 combination zp[1]:31 [ tod_str::tod_TENTHS#0 ] 
Attempting to uplift remaining variables inzp[1]:27 [ tod_read::return_TENTHS#2 ]
Uplifting [tod_read] best 121384 combination reg byte y [ tod_read::return_TENTHS#2 ] 
Attempting to uplift remaining variables inzp[1]:28 [ tod_read::return_SEC#2 ]
Uplifting [tod_read] best 121324 combination reg byte x [ tod_read::return_SEC#2 ] 
Attempting to uplift remaining variables inzp[1]:29 [ tod_read::return_MIN#2 ]
Uplifting [tod_read] best 121324 combination zp[1]:29 [ tod_read::return_MIN#2 ] 
Attempting to uplift remaining variables inzp[1]:30 [ tod_read::return_HOURS#2 ]
Uplifting [tod_read] best 121284 combination reg byte a [ tod_read::return_HOURS#2 ] 
Attempting to uplift remaining variables inzp[1]:24 [ tod_init::tod_SEC#0 ]
Uplifting [tod_init] best 121284 combination zp[1]:24 [ tod_init::tod_SEC#0 ] 
Attempting to uplift remaining variables inzp[1]:23 [ tod_init::tod_TENTHS#0 ]
Uplifting [tod_init] best 121284 combination zp[1]:23 [ tod_init::tod_TENTHS#0 ] 
Coalescing zero page register [ zp[2]:19 [ conio_cursor_text ] ] with [ zp[2]:45 [ cscroll::$7 ] ] - score: 2
Coalescing zero page register [ zp[2]:21 [ conio_cursor_color ] ] with [ zp[2]:47 [ cscroll::$8 ] ] - score: 2
Coalescing zero page register [ zp[2]:4 [ memset::str#3 ] ] with [ zp[2]:7 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:9 [ memcpy::source#2 ] ] with [ zp[2]:13 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:11 [ memcpy::destination#2 ] ] with [ zp[2]:15 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:19 [ conio_cursor_text cscroll::$7 ] ] with [ zp[2]:37 [ cputln::$0 ] ] - score: 1
Coalescing zero page register [ zp[2]:19 [ conio_cursor_text cscroll::$7 cputln::$0 ] ] with [ zp[2]:39 [ cputln::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ conio_cursor_color cscroll::$8 ] ] with [ zp[2]:41 [ cputln::$2 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ conio_cursor_color cscroll::$8 cputln::$2 ] ] with [ zp[2]:43 [ cputln::$3 ] ] - score: 1
Coalescing zero page register [ zp[2]:9 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] with [ zp[2]:4 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Coalescing zero page register [ zp[1]:29 [ tod_read::return_MIN#2 ] ] with [ zp[1]:23 [ tod_init::tod_TENTHS#0 ] ]
Coalescing zero page register [ zp[1]:31 [ tod_str::tod_TENTHS#0 ] ] with [ zp[1]:24 [ tod_init::tod_SEC#0 ] ]
Coalescing zero page register [ zp[2]:49 [ memset::end#0 ] ] with [ zp[2]:11 [ memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ]
Coalescing zero page register [ zp[1]:69 [ tod_read::return_HOURS#0 ] ] with [ zp[1]:32 [ tod_str::tod_SEC#0 ] ]
Allocated (was zp[2]:9) zp[2]:4 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated (was zp[1]:17) zp[1]:6 [ conio_cursor_x ]
Allocated (was zp[1]:18) zp[1]:7 [ conio_cursor_y ]
Allocated (was zp[2]:19) zp[2]:8 [ conio_cursor_text cscroll::$7 cputln::$0 cputln::$1 ]
Allocated (was zp[2]:21) zp[2]:10 [ conio_cursor_color cscroll::$8 cputln::$2 cputln::$3 ]
Allocated (was zp[1]:29) zp[1]:12 [ tod_read::return_MIN#2 tod_init::tod_TENTHS#0 ]
Allocated (was zp[1]:31) zp[1]:13 [ tod_str::tod_TENTHS#0 tod_init::tod_SEC#0 ]
Allocated (was zp[2]:49) zp[2]:14 [ memset::end#0 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated (was zp[2]:51) zp[2]:16 [ memcpy::src_end#0 ]
Allocated (was zp[1]:69) zp[1]:18 [ tod_read::return_HOURS#0 tod_str::tod_SEC#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Time of Day / RTOS test using the 6526 CIA on C64
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // The default text color
  .const CONIO_TEXTCOLOR_DEFAULT = $e
  .const OFFSET_STRUCT_TIME_OF_DAY_SEC = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_MIN = 2
  .const OFFSET_STRUCT_TIME_OF_DAY_HOURS = 3
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = $b
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = $a
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = 9
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = 8
  // The screen width
  // The screen height
  // The screen bytes
  // The text screen address
  .label CONIO_SCREEN_TEXT = $400
  // The color screen address
  .label CONIO_SCREEN_COLORS = $d800
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  .label conio_cursor_x = 6
  .label conio_cursor_y = 7
  .label conio_cursor_text = 8
  .label conio_cursor_color = $a
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor x-position
  lda #0
  sta.z conio_cursor_x
  // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor y-position
  lda #0
  sta.z conio_cursor_y
  // [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_TEXT
  sta.z conio_cursor_text
  lda #>CONIO_SCREEN_TEXT
  sta.z conio_cursor_text+1
  // [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_COLORS
  sta.z conio_cursor_color
  lda #>CONIO_SCREEN_COLORS
  sta.z conio_cursor_color+1
  // [5] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [6] call main 
  jsr main
  // [7] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [8] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO
    sta.z tod_init.tod_TENTHS
    // [9] (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC
    sta.z tod_init.tod_SEC
    // [10] (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN) -- vbuxx=_deref_pbuc1 
    ldx TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN
    // [11] (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS) -- vbuyy=_deref_pbuc1 
    ldy TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS
    // [12] call tod_init 
    jsr tod_init
    // [13] phi from main main::@4 to main::@1 [phi:main/main::@4->main::@1]
  __b1_from_main:
  __b1_from___b4:
    jmp __b1
    // main::@1
  __b1:
    // [14] call gotoxy 
    // [122] phi from main::@1 to gotoxy [phi:main::@1->gotoxy]
  gotoxy_from___b1:
    jsr gotoxy
    // [15] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [16] call tod_read 
    jsr tod_read
    // [17] (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#0
    // [18] (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#0
    // [19] (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#0 -- vbuz1=vbuaa 
    sta.z tod_read.return_MIN
    // [20] (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#0 -- vbuaa=vbuz1 
    lda.z tod_read.return_HOURS
    jmp __b3
    // main::@3
  __b3:
    // [21] (byte) tod_str::tod_TENTHS#0 ← (byte) tod_read::return_TENTHS#2 -- vbuz1=vbuyy 
    sty.z tod_str.tod_TENTHS
    // [22] (byte) tod_str::tod_SEC#0 ← (byte) tod_read::return_SEC#2 -- vbuz1=vbuxx 
    stx.z tod_str.tod_SEC
    // [23] (byte) tod_str::tod_MIN#0 ← (byte) tod_read::return_MIN#2 -- vbuyy=vbuz1 
    ldy.z tod_read.return_MIN
    // [24] (byte) tod_str::tod_HOURS#0 ← (byte) tod_read::return_HOURS#2 -- vbuxx=vbuaa 
    tax
    // [25] call tod_str 
    jsr tod_str
    // [26] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [27] call cputs 
    // [28] phi from main::@4 to cputs [phi:main::@4->cputs]
  cputs_from___b4:
    jsr cputs
    jmp __b1_from___b4
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp(2) s)
cputs: {
    .label s = 2
    // [29] phi from cputs to cputs::@1 [phi:cputs->cputs::@1]
  __b1_from_cputs:
    // [29] phi (to_nomodify byte*) cputs::s#2 = (const byte*) tod_buffer [phi:cputs->cputs::@1#0] -- pbuz1=pbuc1 
    lda #<tod_buffer
    sta.z s
    lda #>tod_buffer
    sta.z s+1
    jmp __b1
    // cputs::@1
  __b1:
    // [30] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // [31] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [32] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [33] return 
    rts
    // cputs::@2
  __b2:
    // [34] (byte) cputc::c#0 ← (byte) cputs::c#1
    // [35] call cputc 
    jsr cputc
    // [29] phi from cputs::@2 to cputs::@1 [phi:cputs::@2->cputs::@1]
  __b1_from___b2:
    // [29] phi (to_nomodify byte*) cputs::s#2 = (to_nomodify byte*) cputs::s#0 [phi:cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // [36] if((byte) cputc::c#0==(byte) ' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [37] *((byte*) conio_cursor_text) ← (byte) cputc::c#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (conio_cursor_text),y
    // [38] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_text
    bne !+
    inc.z conio_cursor_text+1
  !:
    // [39] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- _deref_pbuz1=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    ldy #0
    sta (conio_cursor_color),y
    // [40] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_color
    bne !+
    inc.z conio_cursor_color+1
  !:
    // [41] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [42] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    jmp __b3
    // cputc::@3
  __b3:
    // [43] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [44] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [45] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputc::@return
  __breturn:
    // [46] return 
    rts
    // [47] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [48] call cputln 
    jsr cputln
    jmp __breturn
}
  // cputln
// Print a newline
cputln: {
    .label __0 = 8
    .label __1 = 8
    .label __2 = $a
    .label __3 = $a
    // [49] (byte*~) cputln::$0 ← (byte*) conio_cursor_text - (byte) conio_cursor_x -- pbuz1=pbuz1_minus_vbuz2 
    sec
    lda.z __0
    sbc.z conio_cursor_x
    sta.z __0
    bcs !+
    dec.z __0+1
  !:
    // [50] (byte*~) cputln::$1 ← (byte*~) cputln::$0 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z __1
    sta.z __1
    bcc !+
    inc.z __1+1
  !:
    // [51] (byte*) conio_cursor_text ← (byte*~) cputln::$1
    // [52] (byte*~) cputln::$2 ← (byte*) conio_cursor_color - (byte) conio_cursor_x -- pbuz1=pbuz1_minus_vbuz2 
    sec
    lda.z __2
    sbc.z conio_cursor_x
    sta.z __2
    bcs !+
    dec.z __2+1
  !:
    // [53] (byte*~) cputln::$3 ← (byte*~) cputln::$2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z __3
    sta.z __3
    bcc !+
    inc.z __3+1
  !:
    // [54] (byte*) conio_cursor_color ← (byte*~) cputln::$3
    // [55] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [56] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [57] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [58] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    .label __7 = 8
    .label __8 = $a
    // [59] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [60] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    jmp __b1
    // cscroll::@1
  __b1:
    // [61] call memcpy 
    // [82] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
  memcpy_from___b1:
    // [82] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_TEXT
    sta.z memcpy.destination+1
    // [82] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [62] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [63] call memcpy 
    // [82] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
  memcpy_from___b2:
    // [82] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_COLORS
    sta.z memcpy.destination+1
    // [82] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [64] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
  __b3_from___b2:
    jmp __b3
    // cscroll::@3
  __b3:
    // [65] call memset 
    // [74] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
  memset_from___b3:
    // [74] phi (byte) memset::c#4 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [74] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [66] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
  __b4_from___b3:
    jmp __b4
    // cscroll::@4
  __b4:
    // [67] call memset 
    // [74] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
  memset_from___b4:
    // [74] phi (byte) memset::c#4 = (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [phi:cscroll::@4->memset#0] -- vbuxx=vbuc1 
    ldx #CONIO_TEXTCOLOR_DEFAULT
    // [74] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    jmp __b5
    // cscroll::@5
  __b5:
    // [68] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __7
    sec
    sbc #<$28
    sta.z __7
    lda.z __7+1
    sbc #>$28
    sta.z __7+1
    // [69] (byte*) conio_cursor_text ← (byte*~) cscroll::$7
    // [70] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __8
    sec
    sbc #<$28
    sta.z __8
    lda.z __8+1
    sbc #>$28
    sta.z __8+1
    // [71] (byte*) conio_cursor_color ← (byte*~) cscroll::$8
    // [72] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [73] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp(4) str, byte register(X) c)
memset: {
    .label end = $e
    .label dst = 4
    .label str = 4
    jmp __b1
    // memset::@1
  __b1:
    // [75] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [76] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [77] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [77] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [78] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [79] return 
    rts
    // memset::@3
  __b3:
    // [80] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [81] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($e) destination, void* zp(4) source)
memcpy: {
    .label src_end = $10
    .label dst = $e
    .label src = 4
    .label source = 4
    .label destination = $e
    // [83] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [84] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
    // [85] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
    // [86] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [86] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [86] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [87] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [88] return 
    rts
    // memcpy::@2
  __b2:
    // [89] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [90] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [91] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // tod_str
// Convert time of day to a human-readable string "hh:mm:ss:10"
// tod_str(byte zp($d) tod_TENTHS, byte zp($12) tod_SEC, byte register(Y) tod_MIN, byte register(X) tod_HOURS)
tod_str: {
    .label tod_TENTHS = $d
    .label tod_SEC = $12
    // [92] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [93] (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [94] *((const byte*) tod_buffer) ← (byte~) tod_str::$1 -- _deref_pbuc1=vbuaa 
    sta tod_buffer
    // [95] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // [96] (byte~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [97] *((const byte*) tod_buffer+(byte) 1) ← (byte~) tod_str::$3 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+1
    // [98] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4 -- vbuaa=vbuyy_ror_4 
    tya
    lsr
    lsr
    lsr
    lsr
    // [99] (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [100] *((const byte*) tod_buffer+(byte) 3) ← (byte~) tod_str::$5 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+3
    // [101] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f -- vbuaa=vbuyy_band_vbuc1 
    tya
    and #$f
    // [102] (byte~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [103] *((const byte*) tod_buffer+(byte) 4) ← (byte~) tod_str::$7 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+4
    // [104] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z tod_SEC
    lsr
    lsr
    lsr
    lsr
    // [105] (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [106] *((const byte*) tod_buffer+(byte) 6) ← (byte~) tod_str::$9 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+6
    // [107] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z tod_SEC
    // [108] (byte~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [109] *((const byte*) tod_buffer+(byte) 7) ← (byte~) tod_str::$11 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+7
    // [110] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z tod_TENTHS
    lsr
    lsr
    lsr
    lsr
    // [111] (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [112] *((const byte*) tod_buffer+(byte) 9) ← (byte~) tod_str::$13 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+9
    // [113] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z tod_TENTHS
    // [114] (byte~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // [115] *((const byte*) tod_buffer+(byte) $a) ← (byte~) tod_str::$15 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+$a
    jmp __breturn
    // tod_str::@return
  __breturn:
    // [116] return 
    rts
}
  // tod_read
// Read time of day
tod_read: {
    .label return_HOURS = $12
    .label return_MIN = $c
    // [117] (byte) tod_read::return_HOURS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) -- vbuz1=_deref_pbuc1 
    // Reading sequence is important. TOD latches on reading hours until 10ths is read.
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    sta.z return_HOURS
    // [118] (byte) tod_read::return_MIN#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) -- vbuaa=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // [119] (byte) tod_read::return_SEC#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) -- vbuxx=_deref_pbuc1 
    ldx CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // [120] (byte) tod_read::return_TENTHS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) -- vbuyy=_deref_pbuc1 
    ldy CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    jmp __breturn
    // tod_read::@return
  __breturn:
    // [121] return 
    rts
}
  // gotoxy
// Set the cursor to the specified position
gotoxy: {
    .const x = 0
    .const y = 0
    jmp __b1
    // gotoxy::@1
  __b1:
    // [123] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 -- vbuz1=vbuc1 
    lda #x
    sta.z conio_cursor_x
    // [124] (byte) conio_cursor_y ← (const byte) gotoxy::y#2 -- vbuz1=vbuc1 
    lda #y
    sta.z conio_cursor_y
    // [125] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z conio_cursor_text
    lda #>CONIO_SCREEN_TEXT
    sta.z conio_cursor_text+1
    // [126] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z conio_cursor_color
    lda #>CONIO_SCREEN_COLORS
    sta.z conio_cursor_color+1
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [127] return 
    rts
}
  // tod_init
// Initialize time-of-day clock
// This uses the MOS6526 CIA#1
// tod_init(byte zp($c) tod_TENTHS, byte zp($d) tod_SEC, byte register(X) tod_MIN, byte register(Y) tod_HOURS)
tod_init: {
    .label tod_TENTHS = $c
    .label tod_SEC = $d
    // [128] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set 50hz (this assumes PAL!) (bit7=1)
    lda #$80
    ora CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // [129] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Writing TOD clock (bit7=0)
    lda #$7f
    and CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // [130] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#0 -- _deref_pbuc1=vbuyy 
    // Reset TOD clock
    // Writing sequence is important. TOD stops when hours is written and starts when 10ths is written.
    sty CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    // [131] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#0 -- _deref_pbuc1=vbuxx 
    stx CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // [132] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_SEC
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // [133] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_TENTHS
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    jmp __breturn
    // tod_init::@return
  __breturn:
    // [134] return 
    rts
}
  // File Data
  // The buffer used by tod_str()
  tod_buffer: .text "00:00:00:00"
  .byte 0
  // Time of Day 00:00:00:00
  TOD_ZERO: .byte 0, 0, 0, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b4 with __b1
Replacing label __b1_from_cputc with __b1
Replacing label __b2_from___b3 with __b2
Replacing label __b1_from___b2 with __b1
Removing instruction __b1:
Removing instruction __b2_from___b1:
Removing instruction __bend_from___b2:
Removing instruction __b1_from_main:
Removing instruction __b1_from___b4:
Removing instruction gotoxy_from___b1:
Removing instruction __b2_from___b1:
Removing instruction __b4_from___b3:
Removing instruction cputs_from___b4:
Removing instruction __b1_from_cputc:
Removing instruction __b1_from_cscroll:
Removing instruction memcpy_from___b1:
Removing instruction __b2_from___b1:
Removing instruction memcpy_from___b2:
Removing instruction __b3_from___b2:
Removing instruction memset_from___b3:
Removing instruction __b4_from___b3:
Removing instruction memset_from___b4:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b1_from_memcpy:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b2:
Removing instruction __bend:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b1_from_cputs:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(const nomodify struct MOS6526_CIA*) CIA1 = (struct MOS6526_CIA*) 56320
(const nomodify byte*) CONIO_SCREEN_COLORS = (byte*) 55296
(const nomodify byte*) CONIO_SCREEN_TEXT = (byte*) 1024
(const nomodify byte) CONIO_TEXTCOLOR_DEFAULT = (byte) $e
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = (byte) $e
(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = (byte) $f
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = (byte) 8
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = (byte) $b
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = (byte) $a
(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = (byte) 9
(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS = (byte) 3
(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN = (byte) 2
(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC = (byte) 1
(byte) TIME_OF_DAY::HOURS
(byte) TIME_OF_DAY::MIN
(byte) TIME_OF_DAY::SEC
(byte) TIME_OF_DAY::TENTHS
(struct TIME_OF_DAY) TOD_ZERO loadstore mem[4] = { TENTHS: (byte) 0, SEC: (byte) 0, MIN: (byte) 0, HOURS: (byte) 0 }
(byte*) conio_cursor_color loadstore zp[2]:10 3912298.4210526315
(byte*) conio_cursor_text loadstore zp[2]:8 3844845.0
(byte) conio_cursor_x loadstore zp[1]:6 755578.0
(byte) conio_cursor_y loadstore zp[1]:7 5193564.677419355
(void()) cputc((byte) cputc::c)
(label) cputc::@1
(label) cputc::@2
(label) cputc::@3
(label) cputc::@return
(byte) cputc::c
(byte) cputc::c#0 reg byte a 1050001.5
(void()) cputln()
(byte*~) cputln::$0 zp[2]:8 2.0000002E7
(byte*~) cputln::$1 zp[2]:8 2.0000002E7
(byte*~) cputln::$2 zp[2]:10 2.0000002E7
(byte*~) cputln::$3 zp[2]:10 2.0000002E7
(label) cputln::@return
(void()) cputs((to_nomodify byte*) cputs::s)
(label) cputs::@1
(label) cputs::@2
(label) cputs::@return
(byte) cputs::c
(byte) cputs::c#1 reg byte a 100001.0
(to_nomodify byte*) cputs::s
(to_nomodify byte*) cputs::s#0 s zp[2]:2 50000.5
(to_nomodify byte*) cputs::s#2 s zp[2]:2 150001.5
(void()) cscroll()
(byte*~) cscroll::$7 zp[2]:8 2.00000002E8
(byte*~) cscroll::$8 zp[2]:10 2.00000002E8
(label) cscroll::@1
(label) cscroll::@2
(label) cscroll::@3
(label) cscroll::@4
(label) cscroll::@5
(label) cscroll::@return
(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
(label) gotoxy::@1
(label) gotoxy::@return
(word) gotoxy::offset
(byte) gotoxy::x
(const byte) gotoxy::x#2 x = (byte) 0
(byte) gotoxy::y
(const byte) gotoxy::y#2 y = (byte) 0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@return
(void*) memcpy::destination
(void*) memcpy::destination#2 destination zp[2]:14
(byte*) memcpy::dst
(byte*) memcpy::dst#1 dst zp[2]:14 1.000000000001E12
(byte*) memcpy::dst#2 dst zp[2]:14 1.0003333333346667E12
(byte*) memcpy::dst#4 dst zp[2]:14 2.000000002E9
(word) memcpy::num
(void*) memcpy::return
(void*) memcpy::source
(void*) memcpy::source#2 source zp[2]:4
(byte*) memcpy::src
(byte*) memcpy::src#1 src zp[2]:4 2.000000000002E12
(byte*) memcpy::src#2 src zp[2]:4 1.00025000000125E12
(byte*) memcpy::src#4 src zp[2]:4 1.000000001E9
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0 src_end zp[2]:16 1.2512500000025E11
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@return
(byte) memset::c
(byte) memset::c#4 reg byte x 1.428571428572857E11
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:4 2.000000000002E12
(byte*) memset::dst#2 dst zp[2]:4 1.3336666666683335E12
(byte*) memset::dst#4 dst zp[2]:4 2.000000002E9
(byte*) memset::end
(byte*) memset::end#0 end zp[2]:14 1.668333333336667E11
(word) memset::num
(void*) memset::return
(void*) memset::str
(void*) memset::str#3 str zp[2]:4
(const byte*) tod_buffer[]  = (byte*) "00:00:00:00"
(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
(label) tod_init::@return
(struct TIME_OF_DAY) tod_init::tod
(byte) tod_init::tod_HOURS
(byte) tod_init::tod_HOURS#0 reg byte y 37.33333333333333
(byte) tod_init::tod_MIN
(byte) tod_init::tod_MIN#0 reg byte x 22.4
(byte) tod_init::tod_SEC
(byte) tod_init::tod_SEC#0 tod_SEC zp[1]:13 16.0
(byte) tod_init::tod_TENTHS
(byte) tod_init::tod_TENTHS#0 tod_TENTHS zp[1]:12 12.444444444444443
(struct TIME_OF_DAY()) tod_read()
(label) tod_read::@return
(byte) tod_read::hours
(byte) tod_read::mins
(struct TIME_OF_DAY) tod_read::return
(byte) tod_read::return_HOURS
(byte) tod_read::return_HOURS#0 return_HOURS zp[1]:18 122.44444444444446
(byte) tod_read::return_HOURS#2 reg byte a 50.5
(byte) tod_read::return_MIN
(byte) tod_read::return_MIN#0 reg byte a 157.42857142857142
(byte) tod_read::return_MIN#2 return_MIN zp[1]:12 50.5
(byte) tod_read::return_SEC
(byte) tod_read::return_SEC#0 reg byte x 220.39999999999998
(byte) tod_read::return_SEC#2 reg byte x 50.5
(byte) tod_read::return_TENTHS
(byte) tod_read::return_TENTHS#0 reg byte y 367.33333333333337
(byte) tod_read::return_TENTHS#2 reg byte y 50.5
(byte) tod_read::secs
(byte) tod_read::tenths
(byte) tod_read::tod_HOURS
(byte) tod_read::tod_MIN
(byte) tod_read::tod_SEC
(byte) tod_read::tod_TENTHS
(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
(byte~) tod_str::$0 reg byte a 2002.0
(byte~) tod_str::$1 reg byte a 2002.0
(byte~) tod_str::$10 reg byte a 2002.0
(byte~) tod_str::$11 reg byte a 2002.0
(byte~) tod_str::$12 reg byte a 2002.0
(byte~) tod_str::$13 reg byte a 2002.0
(byte~) tod_str::$14 reg byte a 2002.0
(byte~) tod_str::$15 reg byte a 2002.0
(byte~) tod_str::$2 reg byte a 2002.0
(byte~) tod_str::$3 reg byte a 2002.0
(byte~) tod_str::$4 reg byte a 2002.0
(byte~) tod_str::$5 reg byte a 2002.0
(byte~) tod_str::$6 reg byte a 2002.0
(byte~) tod_str::$7 reg byte a 2002.0
(byte~) tod_str::$8 reg byte a 2002.0
(byte~) tod_str::$9 reg byte a 2002.0
(label) tod_str::@return
(byte*) tod_str::return
(struct TIME_OF_DAY) tod_str::tod
(byte) tod_str::tod_HOURS
(byte) tod_str::tod_HOURS#0 reg byte x 525.75
(byte) tod_str::tod_MIN
(byte) tod_str::tod_MIN#0 reg byte y 191.1818181818182
(byte) tod_str::tod_SEC
(byte) tod_str::tod_SEC#0 tod_SEC zp[1]:18 116.83333333333334
(byte) tod_str::tod_TENTHS
(byte) tod_str::tod_TENTHS#0 tod_TENTHS zp[1]:13 84.12

zp[2]:2 [ cputs::s#2 cputs::s#0 ]
reg byte x [ memset::c#4 ]
zp[2]:4 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
zp[1]:6 [ conio_cursor_x ]
zp[1]:7 [ conio_cursor_y ]
zp[2]:8 [ conio_cursor_text cscroll::$7 cputln::$0 cputln::$1 ]
zp[2]:10 [ conio_cursor_color cscroll::$8 cputln::$2 cputln::$3 ]
reg byte x [ tod_init::tod_MIN#0 ]
reg byte y [ tod_init::tod_HOURS#0 ]
reg byte y [ tod_read::return_TENTHS#2 ]
reg byte x [ tod_read::return_SEC#2 ]
zp[1]:12 [ tod_read::return_MIN#2 tod_init::tod_TENTHS#0 ]
reg byte a [ tod_read::return_HOURS#2 ]
zp[1]:13 [ tod_str::tod_TENTHS#0 tod_init::tod_SEC#0 ]
reg byte y [ tod_str::tod_MIN#0 ]
reg byte x [ tod_str::tod_HOURS#0 ]
reg byte a [ cputs::c#1 ]
reg byte a [ cputc::c#0 ]
zp[2]:14 [ memset::end#0 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
zp[2]:16 [ memcpy::src_end#0 ]
reg byte a [ tod_str::$0 ]
reg byte a [ tod_str::$1 ]
reg byte a [ tod_str::$2 ]
reg byte a [ tod_str::$3 ]
reg byte a [ tod_str::$4 ]
reg byte a [ tod_str::$5 ]
reg byte a [ tod_str::$6 ]
reg byte a [ tod_str::$7 ]
reg byte a [ tod_str::$8 ]
reg byte a [ tod_str::$9 ]
reg byte a [ tod_str::$10 ]
reg byte a [ tod_str::$11 ]
reg byte a [ tod_str::$12 ]
reg byte a [ tod_str::$13 ]
reg byte a [ tod_str::$14 ]
reg byte a [ tod_str::$15 ]
zp[1]:18 [ tod_read::return_HOURS#0 tod_str::tod_SEC#0 ]
reg byte a [ tod_read::return_MIN#0 ]
reg byte x [ tod_read::return_SEC#0 ]
reg byte y [ tod_read::return_TENTHS#0 ]
mem[4] [ TOD_ZERO ]


FINAL ASSEMBLER
Score: 106342

  // File Comments
// Time of Day / RTOS test using the 6526 CIA on C64
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // The default text color
  .const CONIO_TEXTCOLOR_DEFAULT = $e
  .const OFFSET_STRUCT_TIME_OF_DAY_SEC = 1
  .const OFFSET_STRUCT_TIME_OF_DAY_MIN = 2
  .const OFFSET_STRUCT_TIME_OF_DAY_HOURS = 3
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS = $b
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_MIN = $a
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_SEC = 9
  .const OFFSET_STRUCT_MOS6526_CIA_TOD_10THS = 8
  // The screen width
  // The screen height
  // The screen bytes
  // The text screen address
  .label CONIO_SCREEN_TEXT = $400
  // The color screen address
  .label CONIO_SCREEN_COLORS = $d800
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  .label conio_cursor_x = 6
  .label conio_cursor_y = 7
  .label conio_cursor_text = 8
  .label conio_cursor_color = $a
  // @begin
__bbegin:
  // @1
  // conio_cursor_x = 0
  // [1] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor x-position
  lda #0
  sta.z conio_cursor_x
  // conio_cursor_y = 0
  // [2] (byte) conio_cursor_y ← (byte) 0 -- vbuz1=vbuc1 
  // The current cursor y-position
  sta.z conio_cursor_y
  // conio_cursor_text = CONIO_SCREEN_TEXT
  // [3] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_TEXT
  sta.z conio_cursor_text
  lda #>CONIO_SCREEN_TEXT
  sta.z conio_cursor_text+1
  // conio_cursor_color = CONIO_SCREEN_COLORS
  // [4] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
  // The current cursor address
  lda #<CONIO_SCREEN_COLORS
  sta.z conio_cursor_color
  lda #>CONIO_SCREEN_COLORS
  sta.z conio_cursor_color+1
  // [5] phi from @1 to @2 [phi:@1->@2]
  // @2
  // [6] call main 
  jsr main
  rts
  // [7] phi from @2 to @end [phi:@2->@end]
  // @end
  // main
main: {
    // tod_init(TOD_ZERO)
    // [8] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO
    sta.z tod_init.tod_TENTHS
    // [9] (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC) -- vbuz1=_deref_pbuc1 
    lda TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_SEC
    sta.z tod_init.tod_SEC
    // [10] (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN) -- vbuxx=_deref_pbuc1 
    ldx TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_MIN
    // [11] (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS) -- vbuyy=_deref_pbuc1 
    ldy TOD_ZERO+OFFSET_STRUCT_TIME_OF_DAY_HOURS
    // [12] call tod_init 
    jsr tod_init
    // [13] phi from main main::@4 to main::@1 [phi:main/main::@4->main::@1]
    // main::@1
  __b1:
    // gotoxy(0,0)
    // [14] call gotoxy 
    // [122] phi from main::@1 to gotoxy [phi:main::@1->gotoxy]
    jsr gotoxy
    // [15] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // tod_read()
    // [16] call tod_read 
    jsr tod_read
    // [17] (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#0
    // [18] (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#0
    // [19] (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#0 -- vbuz1=vbuaa 
    sta.z tod_read.return_MIN
    // [20] (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#0 -- vbuaa=vbuz1 
    lda.z tod_read.return_HOURS
    // main::@3
    // tod_str(tod_read())
    // [21] (byte) tod_str::tod_TENTHS#0 ← (byte) tod_read::return_TENTHS#2 -- vbuz1=vbuyy 
    sty.z tod_str.tod_TENTHS
    // [22] (byte) tod_str::tod_SEC#0 ← (byte) tod_read::return_SEC#2 -- vbuz1=vbuxx 
    stx.z tod_str.tod_SEC
    // [23] (byte) tod_str::tod_MIN#0 ← (byte) tod_read::return_MIN#2 -- vbuyy=vbuz1 
    ldy.z tod_read.return_MIN
    // [24] (byte) tod_str::tod_HOURS#0 ← (byte) tod_read::return_HOURS#2 -- vbuxx=vbuaa 
    tax
    // [25] call tod_str 
    jsr tod_str
    // [26] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // main::@4
    // cputs(tod_str(tod_read()))
    // [27] call cputs 
    // [28] phi from main::@4 to cputs [phi:main::@4->cputs]
    jsr cputs
    jmp __b1
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(byte* zp(2) s)
cputs: {
    .label s = 2
    // [29] phi from cputs to cputs::@1 [phi:cputs->cputs::@1]
    // [29] phi (to_nomodify byte*) cputs::s#2 = (const byte*) tod_buffer [phi:cputs->cputs::@1#0] -- pbuz1=pbuc1 
    lda #<tod_buffer
    sta.z s
    lda #>tod_buffer
    sta.z s+1
    // cputs::@1
  __b1:
    // c=*s++
    // [30] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // while(c=*s++)
    // [31] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [32] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    // cputs::@return
    // }
    // [33] return 
    rts
    // cputs::@2
  __b2:
    // cputc(c)
    // [34] (byte) cputc::c#0 ← (byte) cputs::c#1
    // [35] call cputc 
    jsr cputc
    // [29] phi from cputs::@2 to cputs::@1 [phi:cputs::@2->cputs::@1]
    // [29] phi (to_nomodify byte*) cputs::s#2 = (to_nomodify byte*) cputs::s#0 [phi:cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // if(c=='\n')
    // [36] if((byte) cputc::c#0==(byte) ' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1
    // cputc::@2
    // *conio_cursor_text++ = c
    // [37] *((byte*) conio_cursor_text) ← (byte) cputc::c#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (conio_cursor_text),y
    // *conio_cursor_text++ = c;
    // [38] (byte*) conio_cursor_text ← ++ (byte*) conio_cursor_text -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_text
    bne !+
    inc.z conio_cursor_text+1
  !:
    // *conio_cursor_color++ = conio_textcolor
    // [39] *((byte*) conio_cursor_color) ← (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT -- _deref_pbuz1=vbuc1 
    lda #CONIO_TEXTCOLOR_DEFAULT
    ldy #0
    sta (conio_cursor_color),y
    // *conio_cursor_color++ = conio_textcolor;
    // [40] (byte*) conio_cursor_color ← ++ (byte*) conio_cursor_color -- pbuz1=_inc_pbuz1 
    inc.z conio_cursor_color
    bne !+
    inc.z conio_cursor_color+1
  !:
    // if(++conio_cursor_x==CONIO_WIDTH)
    // [41] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [42] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // cputc::@3
    // conio_cursor_x = 0
    // [43] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // ++conio_cursor_y;
    // [44] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // cscroll()
    // [45] call cscroll 
    jsr cscroll
    // cputc::@return
  __breturn:
    // }
    // [46] return 
    rts
    // [47] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
    // cputc::@1
  __b1:
    // cputln()
    // [48] call cputln 
    jsr cputln
    rts
}
  // cputln
// Print a newline
cputln: {
    .label __0 = 8
    .label __1 = 8
    .label __2 = $a
    .label __3 = $a
    // conio_cursor_text - conio_cursor_x
    // [49] (byte*~) cputln::$0 ← (byte*) conio_cursor_text - (byte) conio_cursor_x -- pbuz1=pbuz1_minus_vbuz2 
    sec
    lda.z __0
    sbc.z conio_cursor_x
    sta.z __0
    bcs !+
    dec.z __0+1
  !:
    // conio_cursor_text - conio_cursor_x + CONIO_WIDTH
    // [50] (byte*~) cputln::$1 ← (byte*~) cputln::$0 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z __1
    sta.z __1
    bcc !+
    inc.z __1+1
  !:
    // conio_cursor_text =  conio_cursor_text - conio_cursor_x + CONIO_WIDTH
    // [51] (byte*) conio_cursor_text ← (byte*~) cputln::$1
    // conio_cursor_color - conio_cursor_x
    // [52] (byte*~) cputln::$2 ← (byte*) conio_cursor_color - (byte) conio_cursor_x -- pbuz1=pbuz1_minus_vbuz2 
    sec
    lda.z __2
    sbc.z conio_cursor_x
    sta.z __2
    bcs !+
    dec.z __2+1
  !:
    // conio_cursor_color - conio_cursor_x + CONIO_WIDTH
    // [53] (byte*~) cputln::$3 ← (byte*~) cputln::$2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z __3
    sta.z __3
    bcc !+
    inc.z __3+1
  !:
    // conio_cursor_color = conio_cursor_color - conio_cursor_x + CONIO_WIDTH
    // [54] (byte*) conio_cursor_color ← (byte*~) cputln::$3
    // conio_cursor_x = 0
    // [55] (byte) conio_cursor_x ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y++;
    // [56] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // cscroll()
    // [57] call cscroll 
    jsr cscroll
    // cputln::@return
    // }
    // [58] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    .label __7 = 8
    .label __8 = $a
    // if(conio_cursor_y==CONIO_HEIGHT)
    // [59] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [60] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
    // cscroll::@1
    // memcpy(CONIO_SCREEN_TEXT, CONIO_SCREEN_TEXT+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [61] call memcpy 
    // [82] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
    // [82] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_TEXT
    sta.z memcpy.destination+1
    // [82] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(byte) $28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_TEXT+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [62] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
    // cscroll::@2
    // memcpy(CONIO_SCREEN_COLORS, CONIO_SCREEN_COLORS+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [63] call memcpy 
    // [82] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
    // [82] phi (void*) memcpy::destination#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z memcpy.destination
    lda #>CONIO_SCREEN_COLORS
    sta.z memcpy.destination+1
    // [82] phi (void*) memcpy::source#2 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(byte) $28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source
    lda #>CONIO_SCREEN_COLORS+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [64] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
    // cscroll::@3
    // memset(CONIO_SCREEN_TEXT+CONIO_BYTES-CONIO_WIDTH, ' ', CONIO_WIDTH)
    // [65] call memset 
    // [74] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
    // [74] phi (byte) memset::c#4 = (byte) ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [74] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_TEXT+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_TEXT+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [66] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
    // cscroll::@4
    // memset(CONIO_SCREEN_COLORS+CONIO_BYTES-CONIO_WIDTH, conio_textcolor, CONIO_WIDTH)
    // [67] call memset 
    // [74] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
    // [74] phi (byte) memset::c#4 = (const nomodify byte) CONIO_TEXTCOLOR_DEFAULT [phi:cscroll::@4->memset#0] -- vbuxx=vbuc1 
    ldx #CONIO_TEXTCOLOR_DEFAULT
    // [74] phi (void*) memset::str#3 = (void*)(const nomodify byte*) CONIO_SCREEN_COLORS+(word)(number) $19*(number) $28-(byte) $28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str
    lda #>CONIO_SCREEN_COLORS+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // cscroll::@5
    // conio_cursor_text-CONIO_WIDTH
    // [68] (byte*~) cscroll::$7 ← (byte*) conio_cursor_text - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __7
    sec
    sbc #<$28
    sta.z __7
    lda.z __7+1
    sbc #>$28
    sta.z __7+1
    // conio_cursor_text = conio_cursor_text-CONIO_WIDTH
    // [69] (byte*) conio_cursor_text ← (byte*~) cscroll::$7
    // conio_cursor_color-CONIO_WIDTH
    // [70] (byte*~) cscroll::$8 ← (byte*) conio_cursor_color - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __8
    sec
    sbc #<$28
    sta.z __8
    lda.z __8+1
    sbc #>$28
    sta.z __8+1
    // conio_cursor_color = conio_cursor_color-CONIO_WIDTH
    // [71] (byte*) conio_cursor_color ← (byte*~) cscroll::$8
    // conio_cursor_y--;
    // [72] (byte) conio_cursor_y ← -- (byte) conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    // cscroll::@return
  __breturn:
    // }
    // [73] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp(4) str, byte register(X) c)
memset: {
    .label end = $e
    .label dst = 4
    .label str = 4
    // memset::@1
    // end = (char*)str + num
    // [75] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [76] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [77] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [77] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [78] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
    // }
    // [79] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [80] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [81] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($e) destination, void* zp(4) source)
memcpy: {
    .label src_end = $10
    .label dst = $e
    .label src = 4
    .label source = 4
    .label destination = $e
    // src_end = (char*)source+num
    // [83] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [84] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
    // [85] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
    // [86] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
    // [86] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [86] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    // memcpy::@1
  __b1:
    // while(src!=src_end)
    // [87] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    // memcpy::@return
    // }
    // [88] return 
    rts
    // memcpy::@2
  __b2:
    // *dst++ = *src++
    // [89] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta (dst),y
    // *dst++ = *src++;
    // [90] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [91] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1
}
  // tod_str
// Convert time of day to a human-readable string "hh:mm:ss:10"
// tod_str(byte zp($d) tod_TENTHS, byte zp($12) tod_SEC, byte register(Y) tod_MIN, byte register(X) tod_HOURS)
tod_str: {
    .label tod_TENTHS = $d
    .label tod_SEC = $12
    // tod.HOURS>>4
    // [92] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // '0'+(tod.HOURS>>4)
    // [93] (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[0] = '0'+(tod.HOURS>>4)
    // [94] *((const byte*) tod_buffer) ← (byte~) tod_str::$1 -- _deref_pbuc1=vbuaa 
    sta tod_buffer
    // tod.HOURS&0x0f
    // [95] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // '0'+(tod.HOURS&0x0f)
    // [96] (byte~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[1] = '0'+(tod.HOURS&0x0f)
    // [97] *((const byte*) tod_buffer+(byte) 1) ← (byte~) tod_str::$3 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+1
    // tod.MIN>>4
    // [98] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4 -- vbuaa=vbuyy_ror_4 
    tya
    lsr
    lsr
    lsr
    lsr
    // '0'+(tod.MIN>>4)
    // [99] (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[3] = '0'+(tod.MIN>>4)
    // [100] *((const byte*) tod_buffer+(byte) 3) ← (byte~) tod_str::$5 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+3
    // tod.MIN&0x0f
    // [101] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f -- vbuaa=vbuyy_band_vbuc1 
    tya
    and #$f
    // '0'+(tod.MIN&0x0f)
    // [102] (byte~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[4] = '0'+(tod.MIN&0x0f)
    // [103] *((const byte*) tod_buffer+(byte) 4) ← (byte~) tod_str::$7 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+4
    // tod.SEC>>4
    // [104] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z tod_SEC
    lsr
    lsr
    lsr
    lsr
    // '0'+(tod.SEC>>4)
    // [105] (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[6] = '0'+(tod.SEC>>4)
    // [106] *((const byte*) tod_buffer+(byte) 6) ← (byte~) tod_str::$9 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+6
    // tod.SEC&0x0f
    // [107] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z tod_SEC
    // '0'+(tod.SEC&0x0f)
    // [108] (byte~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[7] = '0'+(tod.SEC&0x0f)
    // [109] *((const byte*) tod_buffer+(byte) 7) ← (byte~) tod_str::$11 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+7
    // tod.TENTHS>>4
    // [110] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda.z tod_TENTHS
    lsr
    lsr
    lsr
    lsr
    // '0'+(tod.TENTHS>>4)
    // [111] (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[9] = '0'+(tod.TENTHS>>4)
    // [112] *((const byte*) tod_buffer+(byte) 9) ← (byte~) tod_str::$13 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+9
    // tod.TENTHS&0x0f
    // [113] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z tod_TENTHS
    // '0'+(tod.TENTHS&0x0f)
    // [114] (byte~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #'0'
    // tod_buffer[10] = '0'+(tod.TENTHS&0x0f)
    // [115] *((const byte*) tod_buffer+(byte) $a) ← (byte~) tod_str::$15 -- _deref_pbuc1=vbuaa 
    sta tod_buffer+$a
    // tod_str::@return
    // }
    // [116] return 
    rts
}
  // tod_read
// Read time of day
tod_read: {
    .label return_HOURS = $12
    .label return_MIN = $c
    // hours = CIA1->TOD_HOURS
    // [117] (byte) tod_read::return_HOURS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) -- vbuz1=_deref_pbuc1 
    // Reading sequence is important. TOD latches on reading hours until 10ths is read.
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    sta.z return_HOURS
    // mins = CIA1->TOD_MIN
    // [118] (byte) tod_read::return_MIN#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) -- vbuaa=_deref_pbuc1 
    lda CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // secs = CIA1->TOD_SEC
    // [119] (byte) tod_read::return_SEC#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) -- vbuxx=_deref_pbuc1 
    ldx CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // tenths = CIA1->TOD_10THS
    // [120] (byte) tod_read::return_TENTHS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) -- vbuyy=_deref_pbuc1 
    ldy CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    // tod_read::@return
    // }
    // [121] return 
    rts
}
  // gotoxy
// Set the cursor to the specified position
gotoxy: {
    .const x = 0
    .const y = 0
    // gotoxy::@1
    // conio_cursor_x = x
    // [123] (byte) conio_cursor_x ← (const byte) gotoxy::x#2 -- vbuz1=vbuc1 
    lda #x
    sta.z conio_cursor_x
    // conio_cursor_y = y
    // [124] (byte) conio_cursor_y ← (const byte) gotoxy::y#2 -- vbuz1=vbuc1 
    lda #y
    sta.z conio_cursor_y
    // conio_cursor_text = CONIO_SCREEN_TEXT + offset
    // [125] (byte*) conio_cursor_text ← (const nomodify byte*) CONIO_SCREEN_TEXT -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_TEXT
    sta.z conio_cursor_text
    lda #>CONIO_SCREEN_TEXT
    sta.z conio_cursor_text+1
    // conio_cursor_color = CONIO_SCREEN_COLORS + offset
    // [126] (byte*) conio_cursor_color ← (const nomodify byte*) CONIO_SCREEN_COLORS -- pbuz1=pbuc1 
    lda #<CONIO_SCREEN_COLORS
    sta.z conio_cursor_color
    lda #>CONIO_SCREEN_COLORS
    sta.z conio_cursor_color+1
    // gotoxy::@return
    // }
    // [127] return 
    rts
}
  // tod_init
// Initialize time-of-day clock
// This uses the MOS6526 CIA#1
// tod_init(byte zp($c) tod_TENTHS, byte zp($d) tod_SEC, byte register(X) tod_MIN, byte register(Y) tod_HOURS)
tod_init: {
    .label tod_TENTHS = $c
    .label tod_SEC = $d
    // CIA1->TIMER_A_CONTROL |= 0x80
    // [128] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set 50hz (this assumes PAL!) (bit7=1)
    lda #$80
    ora CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // CIA1->TIMER_B_CONTROL &= 0x7f
    // [129] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Writing TOD clock (bit7=0)
    lda #$7f
    and CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // CIA1->TOD_HOURS = tod.HOURS
    // [130] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#0 -- _deref_pbuc1=vbuyy 
    // Reset TOD clock
    // Writing sequence is important. TOD stops when hours is written and starts when 10ths is written.
    sty CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS
    // CIA1->TOD_MIN = tod.MIN
    // [131] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#0 -- _deref_pbuc1=vbuxx 
    stx CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_MIN
    // CIA1->TOD_SEC = tod.SEC
    // [132] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_SEC
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_SEC
    // CIA1->TOD_10THS = tod.TENTHS
    // [133] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#0 -- _deref_pbuc1=vbuz1 
    lda.z tod_TENTHS
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_TOD_10THS
    // tod_init::@return
    // }
    // [134] return 
    rts
}
  // File Data
  // The buffer used by tod_str()
  tod_buffer: .text "00:00:00:00"
  .byte 0
  // Time of Day 00:00:00:00
  TOD_ZERO: .byte 0, 0, 0, 0

