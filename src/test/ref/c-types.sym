const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
void main()
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
const byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:6 2002.0
byte* memset::dst#2 dst zp[2]:6 1334.6666666666667
byte* memset::end
const byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
const word memset::num#0 num = $3e8
void* memset::return
void* memset::str
const void* memset::str#0 str = (void*)print_screen#0
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 2002.0
byte print_char::ch#17 reg byte a 1201004.0
byte print_char::ch#7 reg byte a 200002.0
byte print_char::ch#8 reg byte a 200002.0
byte* print_char_cursor
byte* print_char_cursor#1 print_char_cursor zp[2]:2 178.91666666666666
byte* print_char_cursor#147 print_char_cursor zp[2]:2 6063.0
byte* print_char_cursor#148 print_char_cursor zp[2]:2 556.5
byte* print_char_cursor#152 print_char_cursor zp[2]:2 40042.0
byte* print_char_cursor#159 print_char_cursor zp[2]:2 134.0
byte* print_char_cursor#163 print_char_cursor zp[2]:2 22.0
byte* print_char_cursor#164 print_char_cursor zp[2]:2 22.0
byte* print_char_cursor#165 print_char_cursor zp[2]:2 22.0
byte* print_char_cursor#25 print_char_cursor zp[2]:2 12515.876404494384
byte* print_char_cursor#95 print_char_cursor zp[2]:2 1100799.0
void print_cls()
const to_nomodify byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_line_cursor#0 print_line_cursor zp[2]:4 56.833333333333336
byte* print_line_cursor#21 print_line_cursor zp[2]:4 2103.0
byte* print_line_cursor#41 print_line_cursor zp[2]:4 134.0
void print_ln()
void print_schar(signed byte print_schar::b)
signed byte print_schar::b
const signed byte print_schar::b#0 b = -testChar::s
byte* print_screen
const byte* print_screen#0 print_screen = (byte*) 1024
void print_sint(signed word print_sint::w)
signed word print_sint::w
signed word print_sint::w#0 w zp[2]:6 202.0
signed word print_sint::w#10 w zp[2]:6 50.5
signed word print_sint::w#7 w zp[2]:6 202.0
void print_slong(signed dword print_slong::dw)
signed dword print_slong::dw
signed dword print_slong::dw#0 dw zp[4]:8 202.0
signed dword print_slong::dw#3 dw zp[4]:8 50.5
signed dword print_slong::dw#5 dw zp[4]:8 202.0
void print_str(byte* print_str::str)
byte* print_str::str
byte* print_str::str#0 str zp[2]:6 2002.0
byte* print_str::str#5 str zp[2]:6 1026.25
byte* print_str::str#8 str zp[2]:6 101.0
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 200002.0
byte~ print_uchar::$2 reg byte x 200002.0
byte print_uchar::b
byte print_uchar::b#1 reg byte x 20002.0
byte print_uchar::b#2 reg byte x 20002.0
byte print_uchar::b#5 reg byte x 55001.0
void print_uint(word print_uint::w)
word print_uint::w
word print_uint::w#0 w zp[2]:6 202.0
word print_uint::w#1 w zp[2]:6 2002.0
word print_uint::w#2 w zp[2]:6 2002.0
word print_uint::w#5 w zp[2]:6 7368.333333333333
void print_ulong(dword print_ulong::dw)
dword print_ulong::dw
dword print_ulong::dw#0 dw zp[4]:8 202.0
dword print_ulong::dw#2 dw zp[4]:8 701.0
void testChar()
const byte testChar::n = $e
const signed byte testChar::s = -$e
const byte* testChar::str[7]  = "char: "
const byte testChar::u = $e
void testInt()
const signed word testInt::n = -$578
const signed word testInt::s = -$578
const byte* testInt::str[6]  = "int: "
const word testInt::u = $578
void testLong()
const signed dword testLong::n = -$222e0
const signed dword testLong::s = -$222e0
const byte* testLong::str[7]  = "long: "
const dword testLong::u = $222e0
void testShort()
const signed word testShort::n = -$578
const signed word testShort::s = -$578
const byte* testShort::str[8]  = "short: "
const word testShort::u = $578

reg byte x [ print_uchar::b#5 print_uchar::b#1 print_uchar::b#2 ]
reg byte a [ print_char::ch#17 print_char::ch#0 print_char::ch#7 print_char::ch#8 ]
zp[2]:2 [ print_char_cursor#95 print_char_cursor#152 print_char_cursor#1 print_char_cursor#159 print_char_cursor#163 print_char_cursor#164 print_char_cursor#165 print_char_cursor#25 print_char_cursor#147 print_char_cursor#148 ]
zp[2]:4 [ print_line_cursor#21 print_line_cursor#41 print_line_cursor#0 ]
zp[2]:6 [ print_uint::w#5 print_uint::w#0 print_uint::w#1 print_uint::w#2 print_sint::w#7 print_sint::w#0 print_sint::w#10 print_str::str#5 print_str::str#8 print_str::str#0 memset::dst#2 memset::dst#1 ]
zp[4]:8 [ print_ulong::dw#2 print_ulong::dw#0 print_slong::dw#5 print_slong::dw#0 print_slong::dw#3 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
