Resolved forward reference fn1 to (void()) fn1()
Resolved forward reference fn2 to (void()) fn2()

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@3
main: scope:[main]  from @3
  (byte*) main::SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) $400
  (void()*) main::f#0 ← (void()*) 0
  (void()*~) main::$0 ← & (void()) fn1()
  (void()*) main::f#1 ← (void()*~) main::$0
  (word~) main::$1 ← ((word)) (void()*) main::f#1
  (byte~) main::$2 ← < (word~) main::$1
  *((byte*) main::SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte~) main::$2
  (word~) main::$3 ← ((word)) (void()*) main::f#1
  (byte~) main::$4 ← > (word~) main::$3
  *((byte*) main::SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte~) main::$4
  (void()*~) main::$5 ← & (void()) fn2()
  (void()*) main::f#2 ← (void()*~) main::$5
  (word~) main::$6 ← ((word)) (void()*) main::f#2
  (byte~) main::$7 ← < (word~) main::$6
  *((byte*) main::SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte~) main::$7
  (word~) main::$8 ← ((word)) (void()*) main::f#2
  (byte~) main::$9 ← > (word~) main::$8
  *((byte*) main::SCREEN#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte~) main::$9
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
fn1: scope:[fn1]  from
  (byte*) fn1::BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) $d020
  *((byte*) fn1::BORDERCOL#0) ← ++ *((byte*) fn1::BORDERCOL#0)
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1
  return 
  to:@return
fn2: scope:[fn2]  from
  (byte*) fn2::BGCOL#0 ← ((byte*)) (word/dword/signed dword) $d021
  *((byte*) fn2::BGCOL#0) ← ++ *((byte*) fn2::BGCOL#0)
  to:fn2::@return
fn2::@return: scope:[fn2]  from fn2
  return 
  to:@return
@3: scope:[]  from @begin
  call main 
  to:@4
@4: scope:[]  from @3
  to:@end
@end: scope:[]  from @4

SYMBOL TABLE SSA
(label) @3
(label) @4
(label) @begin
(label) @end
(void()) fn1()
(label) fn1::@return
(byte*) fn1::BORDERCOL
(byte*) fn1::BORDERCOL#0
(void()) fn2()
(label) fn2::@return
(byte*) fn2::BGCOL
(byte*) fn2::BGCOL#0
(void()) main()
(void()*~) main::$0
(word~) main::$1
(byte~) main::$2
(word~) main::$3
(byte~) main::$4
(void()*~) main::$5
(word~) main::$6
(byte~) main::$7
(word~) main::$8
(byte~) main::$9
(label) main::@return
(byte*) main::SCREEN
(byte*) main::SCREEN#0
(void()*) main::f
(void()*) main::f#0
(void()*) main::f#1
(void()*) main::f#2

Culled Empty Block (label) @4
Successful SSA optimization Pass2CullEmptyBlocks
Alias (void()*) main::f#1 = (void()*~) main::$0 
Alias (void()*) main::f#2 = (void()*~) main::$5 
Successful SSA optimization Pass2AliasElimination
Constant (const byte*) main::SCREEN#0 = ((byte*))$400
Constant (const void()*) main::f#0 = 0
Constant (const void()*) main::f#1 = &fn1
Constant (const void()*) main::f#2 = &fn2
Constant (const byte*) fn1::BORDERCOL#0 = ((byte*))$d020
Constant (const byte*) fn2::BGCOL#0 = ((byte*))$d021
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) main::$1 = ((word))main::f#1
Constant (const word) main::$3 = ((word))main::f#1
Constant (const word) main::$6 = ((word))main::f#2
Constant (const word) main::$8 = ((word))main::f#2
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::$2 = <main::$1
Constant (const byte) main::$4 = >main::$3
Constant (const byte) main::$7 = <main::$6
Constant (const byte) main::$9 = >main::$8
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in *(main::SCREEN#0+0)
Consolidated array index constant in *(main::SCREEN#0+1)
Consolidated array index constant in *(main::SCREEN#0+2)
Consolidated array index constant in *(main::SCREEN#0+3)
Successful SSA optimization Pass2ConstantAdditionElimination
Eliminating unused constant (const void()*) main::f#0
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with different constant siblings (const void()*) main::f#1
Inlining constant with different constant siblings (const void()*) main::f#2
Constant inlined main::$1 = ((word))&(void()) fn1()
Constant inlined main::$2 = <((word))&(void()) fn1()
Constant inlined main::$6 = ((word))&(void()) fn2()
Constant inlined main::f#2 = &(void()) fn2()
Constant inlined main::$3 = ((word))&(void()) fn1()
Constant inlined main::$4 = >((word))&(void()) fn1()
Constant inlined main::$9 = >((word))&(void()) fn2()
Constant inlined main::$7 = <((word))&(void()) fn2()
Constant inlined main::f#1 = &(void()) fn1()
Constant inlined main::$8 = ((word))&(void()) fn2()
Successful SSA optimization Pass2ConstantInlining
Simplifying constant plus zero main::SCREEN#0+0
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Renumbering block @3 to @1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] *((const byte*) main::SCREEN#0) ← <((word))&(void()) fn1()
  [5] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← >((word))&(void()) fn1()
  [6] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← <((word))&(void()) fn2()
  [7] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← >((word))&(void()) fn2()
  to:main::@return
main::@return: scope:[main]  from main
  [8] return 
  to:@return
fn2: scope:[fn2]  from
  [9] *((const byte*) fn2::BGCOL#0) ← ++ *((const byte*) fn2::BGCOL#0)
  to:fn2::@return
fn2::@return: scope:[fn2]  from fn2
  [10] return 
  to:@return
fn1: scope:[fn1]  from
  [11] *((const byte*) fn1::BORDERCOL#0) ← ++ *((const byte*) fn1::BORDERCOL#0)
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1
  [12] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) fn1()
(byte*) fn1::BORDERCOL
(void()) fn2()
(byte*) fn2::BGCOL
(void()) main()
(byte*) main::SCREEN
(void()*) main::f

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
//SEG0 File Comments
// Tests creating pointers to non-args no-return functions
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label SCREEN = $400
  //SEG10 [4] *((const byte*) main::SCREEN#0) ← <((word))&(void()) fn1() -- _deref_pbuc1=vbuc2 
    lda #<fn1
    sta SCREEN
  //SEG11 [5] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← >((word))&(void()) fn1() -- _deref_pbuc1=vbuc2 
    lda #>fn1
    sta SCREEN+1
  //SEG12 [6] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← <((word))&(void()) fn2() -- _deref_pbuc1=vbuc2 
    lda #<fn2
    sta SCREEN+2
  //SEG13 [7] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← >((word))&(void()) fn2() -- _deref_pbuc1=vbuc2 
    lda #>fn2
    sta SCREEN+3
    jmp breturn
  //SEG14 main::@return
  breturn:
  //SEG15 [8] return 
    rts
}
//SEG16 fn2
fn2: {
    .label BGCOL = $d021
  //SEG17 [9] *((const byte*) fn2::BGCOL#0) ← ++ *((const byte*) fn2::BGCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
    jmp breturn
  //SEG18 fn2::@return
  breturn:
  //SEG19 [10] return 
    rts
}
//SEG20 fn1
fn1: {
    .label BORDERCOL = $d020
  //SEG21 [11] *((const byte*) fn1::BORDERCOL#0) ← ++ *((const byte*) fn1::BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    jmp breturn
  //SEG22 fn1::@return
  breturn:
  //SEG23 [12] return 
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) main::SCREEN#0) ← <((word))&(void()) fn1() [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← >((word))&(void()) fn1() [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← <((word))&(void()) fn2() [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← >((word))&(void()) fn2() [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [fn1] 
Uplift Scope [fn2] 
Uplift Scope [] 

Uplifting [main] best 75 combination 
Uplifting [fn1] best 75 combination 
Uplifting [fn2] best 75 combination 
Uplifting [] best 75 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Tests creating pointers to non-args no-return functions
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label SCREEN = $400
  //SEG10 [4] *((const byte*) main::SCREEN#0) ← <((word))&(void()) fn1() -- _deref_pbuc1=vbuc2 
    lda #<fn1
    sta SCREEN
  //SEG11 [5] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← >((word))&(void()) fn1() -- _deref_pbuc1=vbuc2 
    lda #>fn1
    sta SCREEN+1
  //SEG12 [6] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← <((word))&(void()) fn2() -- _deref_pbuc1=vbuc2 
    lda #<fn2
    sta SCREEN+2
  //SEG13 [7] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← >((word))&(void()) fn2() -- _deref_pbuc1=vbuc2 
    lda #>fn2
    sta SCREEN+3
    jmp breturn
  //SEG14 main::@return
  breturn:
  //SEG15 [8] return 
    rts
}
//SEG16 fn2
fn2: {
    .label BGCOL = $d021
  //SEG17 [9] *((const byte*) fn2::BGCOL#0) ← ++ *((const byte*) fn2::BGCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
    jmp breturn
  //SEG18 fn2::@return
  breturn:
  //SEG19 [10] return 
    rts
}
//SEG20 fn1
fn1: {
    .label BORDERCOL = $d020
  //SEG21 [11] *((const byte*) fn1::BORDERCOL#0) ← ++ *((const byte*) fn1::BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    jmp breturn
  //SEG22 fn1::@return
  breturn:
  //SEG23 [12] return 
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) fn1()
(label) fn1::@return
(byte*) fn1::BORDERCOL
(const byte*) fn1::BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) $d020
(void()) fn2()
(label) fn2::@return
(byte*) fn2::BGCOL
(const byte*) fn2::BGCOL#0 BGCOL = ((byte*))(word/dword/signed dword) $d021
(void()) main()
(label) main::@return
(byte*) main::SCREEN
(const byte*) main::SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) $400
(void()*) main::f



FINAL ASSEMBLER
Score: 54

//SEG0 File Comments
// Tests creating pointers to non-args no-return functions
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
    .label SCREEN = $400
  //SEG10 [4] *((const byte*) main::SCREEN#0) ← <((word))&(void()) fn1() -- _deref_pbuc1=vbuc2 
    lda #<fn1
    sta SCREEN
  //SEG11 [5] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← >((word))&(void()) fn1() -- _deref_pbuc1=vbuc2 
    lda #>fn1
    sta SCREEN+1
  //SEG12 [6] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← <((word))&(void()) fn2() -- _deref_pbuc1=vbuc2 
    lda #<fn2
    sta SCREEN+2
  //SEG13 [7] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← >((word))&(void()) fn2() -- _deref_pbuc1=vbuc2 
    lda #>fn2
    sta SCREEN+3
  //SEG14 main::@return
  //SEG15 [8] return 
    rts
}
//SEG16 fn2
fn2: {
    .label BGCOL = $d021
  //SEG17 [9] *((const byte*) fn2::BGCOL#0) ← ++ *((const byte*) fn2::BGCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
  //SEG18 fn2::@return
  //SEG19 [10] return 
    rts
}
//SEG20 fn1
fn1: {
    .label BORDERCOL = $d020
  //SEG21 [11] *((const byte*) fn1::BORDERCOL#0) ← ++ *((const byte*) fn1::BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG22 fn1::@return
  //SEG23 [12] return 
    rts
}

