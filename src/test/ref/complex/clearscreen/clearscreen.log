Resolved forward reference irqTop to interrupt(HARDWARE_ALL)(void()) irqTop()
Resolved forward reference RASTER_IRQ_TOP to (byte) RASTER_IRQ_TOP
Resolved forward reference RASTER_IRQ_MIDDLE to (byte) RASTER_IRQ_MIDDLE
Resolved forward reference irqBottom to interrupt(HARDWARE_ALL)(void()) irqBottom()
Fixing pointer addition (word*~) bsearch16u::$7 ← (word*) bsearch16u::items + (byte~) bsearch16u::$6
Fixing pointer addition (word*~) bsearch16u::$15 ← (word*) bsearch16u::pivot + (number) 1
Fixing pointer addition (word*~) bsearch16u::$1 ← (word*) bsearch16u::items - (number) 1
Fixing pointer increment (word*) init_squares::squares ← ++ (word*) init_squares::squares
Fixing pointer addition (word~) sqrt::$1 ← (word*) sqrt::found - (word*) SQUARES
Fixing pointer addition (struct ProcessingSprite*~) processChars::$2 ← (struct ProcessingSprite[NUM_PROCESSING]) PROCESSING + (byte) processChars::i
Fixing pointer array-indexing *((word*) SQUARES + (byte) sqr::val)
Fixing pointer array-indexing *((struct ProcessingSprite[NUM_PROCESSING]) PROCESSING + (byte) main::i)
Fixing pointer array-indexing *((struct ProcessingSprite[NUM_PROCESSING]) PROCESSING + (byte) startProcessing::i)
Fixing pointer array-indexing *((struct ProcessingSprite[NUM_PROCESSING]) PROCESSING + (byte) startProcessing::spriteIdx)
Fixing pointer array-indexing *((word[$28]) VXSIN + (byte) processChars::xchar)
Fixing pointer array-indexing *((word[$19]) VYSIN + (byte) processChars::ychar)
Created struct value member variable (byte) main::center_x
Created struct value member variable (byte) main::center_y
Created struct value member variable (byte) main::center_dist
Converted struct value to member variables (struct ProcessingChar) main::center
Created struct value member variable (byte) main::$9_x
Created struct value member variable (byte) main::$9_y
Created struct value member variable (byte) main::$9_dist
Converted struct value to member variables (struct ProcessingChar~) main::$9
Created struct value member variable (byte) getCharToProcess::return_x
Created struct value member variable (byte) getCharToProcess::return_y
Created struct value member variable (byte) getCharToProcess::return_dist
Converted struct value to member variables (struct ProcessingChar) getCharToProcess::return
Created struct value member variable (byte) getCharToProcess::closest_x
Created struct value member variable (byte) getCharToProcess::closest_y
Created struct value member variable (byte) getCharToProcess::closest_dist
Converted struct value to member variables (struct ProcessingChar) getCharToProcess::closest
Created struct value member variable (byte) startProcessing::center_x
Created struct value member variable (byte) startProcessing::center_y
Created struct value member variable (byte) startProcessing::center_dist
Converted struct value to member variables (struct ProcessingChar) startProcessing::center
Converted procedure struct value parameter to member variables (void()) startProcessing((byte) startProcessing::center_x , (byte) startProcessing::center_y , (byte) startProcessing::center_dist)
Adding struct value list initializer *((word*) main::$17 + (byte~) main::$16) ← (number) 0
Adding struct value list initializer *((word*) main::$18 + (byte~) main::$16) ← (number) 0
Adding struct value list initializer *((word*) main::$19 + (byte~) main::$16) ← (number) 0
Adding struct value list initializer *((word*) main::$20 + (byte~) main::$16) ← (number) 0
Adding struct value list initializer *((byte*) main::$21 + (byte~) main::$16) ← (number) 0
Adding struct value list initializer *((byte*) main::$22 + (byte~) main::$16) ← (number) 0
Adding struct value list initializer *((byte*) main::$23 + (byte~) main::$16) ← (number) 0
Adding struct value list initializer *((byte*) main::$24 + (byte~) main::$16) ← (const byte) STATUS_FREE
Adding struct value list initializer *((byte**) main::$25 + (byte~) main::$16) ← (number) 0
Converted procedure call LValue to member variables { (byte) main::$9_x, (byte) main::$9_y, (byte) main::$9_dist } ← call getCharToProcess 
Adding struct value member variable copy (byte) main::center_x ← (byte) main::$9_x
Adding struct value member variable copy (byte) main::center_y ← (byte) main::$9_y
Adding struct value member variable copy (byte) main::center_dist ← (byte) main::$9_dist
Converted procedure struct value parameter to member variables in call (void~) main::$12 ← call startProcessing (byte) main::center_x (byte) main::center_y (byte) main::center_dist 
Adding struct value list initializer (byte) getCharToProcess::closest_x ← (number) 0
Adding struct value list initializer (byte) getCharToProcess::closest_y ← (number) 0
Adding struct value list initializer (byte) getCharToProcess::closest_dist ← (byte) NOT_FOUND
Adding struct value list initializer (byte) getCharToProcess::closest_x ← (byte) getCharToProcess::x
Adding struct value list initializer (byte) getCharToProcess::closest_y ← (byte) getCharToProcess::y
Adding struct value list initializer (byte) getCharToProcess::closest_dist ← (byte) getCharToProcess::dist
Adding struct value member variable copy (byte) getCharToProcess::return_x ← (byte) getCharToProcess::closest_x
Adding struct value member variable copy (byte) getCharToProcess::return_y ← (byte) getCharToProcess::closest_y
Adding struct value member variable copy (byte) getCharToProcess::return_dist ← (byte) getCharToProcess::closest_dist
Adding struct value member variable copy (byte) getCharToProcess::return_x ← (byte) getCharToProcess::return_x
Adding struct value member variable copy (byte) getCharToProcess::return_y ← (byte) getCharToProcess::return_y
Adding struct value member variable copy (byte) getCharToProcess::return_dist ← (byte) getCharToProcess::return_dist
Converted procedure struct return value to member variables return { (byte) getCharToProcess::return_x, (byte) getCharToProcess::return_y, (byte) getCharToProcess::return_dist }
Adding struct value list initializer *((word*) startProcessing::$32 + (byte~) startProcessing::$31) ← (word) startProcessing::spriteX
Adding struct value list initializer *((word*) startProcessing::$33 + (byte~) startProcessing::$31) ← (word) startProcessing::spriteY
Adding struct value list initializer *((word*) startProcessing::$34 + (byte~) startProcessing::$31) ← (word~) startProcessing::$23
Adding struct value list initializer *((word*) startProcessing::$35 + (byte~) startProcessing::$31) ← (number) $3c
Adding struct value list initializer *((byte*) startProcessing::$36 + (byte~) startProcessing::$31) ← (byte) startProcessing::spriteIdx
Adding struct value list initializer *((byte*) startProcessing::$37 + (byte~) startProcessing::$31) ← (byte) startProcessing::spritePtr
Adding struct value list initializer *((byte*) startProcessing::$38 + (byte~) startProcessing::$31) ← (byte) startProcessing::spriteCol
Adding struct value list initializer *((byte*) startProcessing::$39 + (byte~) startProcessing::$31) ← (const byte) STATUS_NEW
Adding struct value list initializer *((byte**) startProcessing::$40 + (byte~) startProcessing::$31) ← (byte*) startProcessing::screenPtr
Replacing struct member reference (struct ProcessingChar) main::center.dist with member variable reference (byte) main::center_dist
Replacing struct member reference (struct ProcessingChar) getCharToProcess::closest.dist with member variable reference (byte) getCharToProcess::closest_dist
Replacing struct member reference (struct ProcessingChar) getCharToProcess::closest.dist with member variable reference (byte) getCharToProcess::closest_dist
Replacing struct member reference (struct ProcessingChar) getCharToProcess::closest.y with member variable reference (byte) getCharToProcess::closest_y
Replacing struct member reference (struct ProcessingChar) getCharToProcess::closest.x with member variable reference (byte) getCharToProcess::closest_x
Replacing struct member reference (struct ProcessingChar) startProcessing::center.y with member variable reference (byte) startProcessing::center_y
Replacing struct member reference (struct ProcessingChar) startProcessing::center.x with member variable reference (byte) startProcessing::center_x
Replacing struct member reference (struct ProcessingChar) startProcessing::center.x with member variable reference (byte) startProcessing::center_x
Replacing struct member reference (struct ProcessingChar) startProcessing::center.y with member variable reference (byte) startProcessing::center_y
Rewriting struct pointer member access *((struct ProcessingSprite[NUM_PROCESSING]) PROCESSING + (byte~) startProcessing::$30).status
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).id
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).status
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).status
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).x
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).screenPtr
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).col
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).id
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).id
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).ptr
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).status
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).y
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).x
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).x
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).y
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).y
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).status
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).vx
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).vx
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).x
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).vx
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).x
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).vy
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).vy
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).y
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).vy
Rewriting struct pointer member access *((struct ProcessingSprite*) processChars::processing).y
Warning! Adding boolean cast to non-boolean condition (byte~) processChars::$11
Identified constant variable (byte*) HEAP_START
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Culled Empty Block (label) malloc::@1
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) bsearch16u::@11
Culled Empty Block (label) bsearch16u::@12
Culled Empty Block (label) bsearch16u::@14
Culled Empty Block (label) bsearch16u::@16
Culled Empty Block (label) bsearch16u::@17
Culled Empty Block (label) bsearch16u::@4
Culled Empty Block (label) bsearch16u::@5
Culled Empty Block (label) init_squares::@2
Culled Empty Block (label) @4
Culled Empty Block (label) sqr::@1
Culled Empty Block (label) @5
Culled Empty Block (label) sqrt::@1
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @12
Culled Empty Block (label) @13
Culled Empty Block (label) @14
Culled Empty Block (label) main::@8
Culled Empty Block (label) main::@9
Culled Empty Block (label) main::@10
Culled Empty Block (label) main::@12
Culled Empty Block (label) @16
Culled Empty Block (label) getCharToProcess::@6
Culled Empty Block (label) getCharToProcess::@2
Culled Empty Block (label) @17
Culled Empty Block (label) startProcessing::@6
Culled Empty Block (label) startProcessing::@7
Culled Empty Block (label) processChars::@10
Culled Empty Block (label) processChars::@12
Culled Empty Block (label) processChars::@1
Culled Empty Block (label) @19
Culled Empty Block (label) init_dist_screen::@13
Culled Empty Block (label) init_dist_screen::@14
Culled Empty Block (label) init_dist_screen::@9
Culled Empty Block (label) init_dist_screen::@10
Culled Empty Block (label) init_dist_screen::@12
Culled Empty Block (label) @20
Culled Empty Block (label) @21
Culled Empty Block (label) setupRasterIrq::@4
Unwinding list assignment { (byte) main::$9_x, (byte) main::$9_y, (byte) main::$9_dist } ← { (byte) getCharToProcess::return_x, (byte) getCharToProcess::return_y, (byte) getCharToProcess::return_dist }
Unwinding list assignment { (byte) getCharToProcess::return_x#0, (byte) getCharToProcess::return_y#0, (byte) getCharToProcess::return_dist#0 } ← { (byte) getCharToProcess::return_x#2, (byte) getCharToProcess::return_y#2, (byte) getCharToProcess::return_dist#2 }
Adding versioned struct unwinding for (struct ProcessingChar) getCharToProcess::return#0
Adding versioned struct unwinding for (struct ProcessingChar) getCharToProcess::return#1

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) HEAP_START#0 ← ((byte*)) (number) $c000
  (byte*) heap_head#0 ← (byte*) HEAP_START#0
  to:@3
malloc: scope:[malloc]  from @15 @25 init_squares
  (word) malloc::size#3 ← phi( @15/(word) malloc::size#1 @25/(word) malloc::size#2 init_squares/(word) malloc::size#0 )
  (byte*) heap_head#12 ← phi( @15/(byte*) heap_head#23 @25/(byte*) heap_head#5 init_squares/(byte*) heap_head#24 )
  (byte*) malloc::mem#0 ← (byte*) heap_head#12
  (byte*) heap_head#1 ← (byte*) heap_head#12 + (word) malloc::size#3
  (void*) malloc::return#0 ← ((void*)) (byte*) malloc::mem#0
  to:malloc::@return
malloc::@return: scope:[malloc]  from malloc
  (byte*) heap_head#13 ← phi( malloc/(byte*) heap_head#1 )
  (void*) malloc::return#5 ← phi( malloc/(void*) malloc::return#0 )
  (void*) malloc::return#1 ← (void*) malloc::return#5
  (byte*) heap_head#2 ← (byte*) heap_head#13
  return 
  to:@return
bsearch16u: scope:[bsearch16u]  from sqrt
  (word) bsearch16u::key#4 ← phi( sqrt/(word) bsearch16u::key#0 )
  (word*) bsearch16u::items#7 ← phi( sqrt/(word*) bsearch16u::items#1 )
  (byte) bsearch16u::num#7 ← phi( sqrt/(byte) bsearch16u::num#2 )
  to:bsearch16u::@6
bsearch16u::@6: scope:[bsearch16u]  from bsearch16u bsearch16u::@10
  (word) bsearch16u::key#3 ← phi( bsearch16u/(word) bsearch16u::key#4 bsearch16u::@10/(word) bsearch16u::key#5 )
  (word*) bsearch16u::items#6 ← phi( bsearch16u/(word*) bsearch16u::items#7 bsearch16u::@10/(word*) bsearch16u::items#8 )
  (byte) bsearch16u::num#3 ← phi( bsearch16u/(byte) bsearch16u::num#7 bsearch16u::@10/(byte) bsearch16u::num#0 )
  (bool~) bsearch16u::$5 ← (byte) bsearch16u::num#3 > (number) 0
  if((bool~) bsearch16u::$5) goto bsearch16u::@7
  to:bsearch16u::@8
bsearch16u::@7: scope:[bsearch16u]  from bsearch16u::@6
  (word) bsearch16u::key#1 ← phi( bsearch16u::@6/(word) bsearch16u::key#3 )
  (word*) bsearch16u::items#2 ← phi( bsearch16u::@6/(word*) bsearch16u::items#6 )
  (byte) bsearch16u::num#4 ← phi( bsearch16u::@6/(byte) bsearch16u::num#3 )
  (byte~) bsearch16u::$6 ← (byte) bsearch16u::num#4 >> (number) 1
  (byte~) bsearch16u::$16 ← (byte~) bsearch16u::$6 * (const byte) SIZEOF_WORD
  (word*~) bsearch16u::$7 ← (word*) bsearch16u::items#2 + (byte~) bsearch16u::$16
  (word*) bsearch16u::pivot#0 ← (word*~) bsearch16u::$7
  (signed word~) bsearch16u::$8 ← ((signed word)) (word) bsearch16u::key#1
  (signed word~) bsearch16u::$9 ← ((signed word)) *((word*) bsearch16u::pivot#0)
  (signed word~) bsearch16u::$10 ← (signed word~) bsearch16u::$8 - (signed word~) bsearch16u::$9
  (signed word) bsearch16u::result#0 ← (signed word~) bsearch16u::$10
  (bool~) bsearch16u::$11 ← (signed word) bsearch16u::result#0 == (number) 0
  (bool~) bsearch16u::$12 ← ! (bool~) bsearch16u::$11
  if((bool~) bsearch16u::$12) goto bsearch16u::@9
  to:bsearch16u::@13
bsearch16u::@8: scope:[bsearch16u]  from bsearch16u::@6
  (word) bsearch16u::key#2 ← phi( bsearch16u::@6/(word) bsearch16u::key#3 )
  (word*) bsearch16u::items#3 ← phi( bsearch16u::@6/(word*) bsearch16u::items#6 )
  (bool~) bsearch16u::$0 ← *((word*) bsearch16u::items#3) <= (word) bsearch16u::key#2
  if((bool~) bsearch16u::$0) goto bsearch16u::@1
  to:bsearch16u::@2
bsearch16u::@9: scope:[bsearch16u]  from bsearch16u::@7
  (word) bsearch16u::key#7 ← phi( bsearch16u::@7/(word) bsearch16u::key#1 )
  (word*) bsearch16u::items#9 ← phi( bsearch16u::@7/(word*) bsearch16u::items#2 )
  (word*) bsearch16u::pivot#3 ← phi( bsearch16u::@7/(word*) bsearch16u::pivot#0 )
  (byte) bsearch16u::num#8 ← phi( bsearch16u::@7/(byte) bsearch16u::num#4 )
  (signed word) bsearch16u::result#1 ← phi( bsearch16u::@7/(signed word) bsearch16u::result#0 )
  (bool~) bsearch16u::$13 ← (signed word) bsearch16u::result#1 > (number) 0
  (bool~) bsearch16u::$14 ← ! (bool~) bsearch16u::$13
  if((bool~) bsearch16u::$14) goto bsearch16u::@10
  to:bsearch16u::@15
bsearch16u::@13: scope:[bsearch16u]  from bsearch16u::@7
  (word*) bsearch16u::pivot#1 ← phi( bsearch16u::@7/(word*) bsearch16u::pivot#0 )
  (word*) bsearch16u::return#0 ← (word*) bsearch16u::pivot#1
  to:bsearch16u::@return
bsearch16u::@return: scope:[bsearch16u]  from bsearch16u::@13 bsearch16u::@3
  (word*) bsearch16u::return#4 ← phi( bsearch16u::@13/(word*) bsearch16u::return#0 bsearch16u::@3/(word*) bsearch16u::return#2 )
  (word*) bsearch16u::return#1 ← (word*) bsearch16u::return#4
  return 
  to:@return
bsearch16u::@10: scope:[bsearch16u]  from bsearch16u::@15 bsearch16u::@9
  (word) bsearch16u::key#5 ← phi( bsearch16u::@15/(word) bsearch16u::key#6 bsearch16u::@9/(word) bsearch16u::key#7 )
  (word*) bsearch16u::items#8 ← phi( bsearch16u::@15/(word*) bsearch16u::items#0 bsearch16u::@9/(word*) bsearch16u::items#9 )
  (byte) bsearch16u::num#5 ← phi( bsearch16u::@15/(byte) bsearch16u::num#1 bsearch16u::@9/(byte) bsearch16u::num#8 )
  (byte) bsearch16u::num#0 ← (byte) bsearch16u::num#5 >> (number) 1
  to:bsearch16u::@6
bsearch16u::@15: scope:[bsearch16u]  from bsearch16u::@9
  (word) bsearch16u::key#6 ← phi( bsearch16u::@9/(word) bsearch16u::key#7 )
  (byte) bsearch16u::num#6 ← phi( bsearch16u::@9/(byte) bsearch16u::num#8 )
  (word*) bsearch16u::pivot#2 ← phi( bsearch16u::@9/(word*) bsearch16u::pivot#3 )
  (number~) bsearch16u::$17 ← (number) 1 * (const byte) SIZEOF_WORD
  (word*~) bsearch16u::$15 ← (word*) bsearch16u::pivot#2 + (number~) bsearch16u::$17
  (word*) bsearch16u::items#0 ← (word*~) bsearch16u::$15
  (byte) bsearch16u::num#1 ← -- (byte) bsearch16u::num#6
  to:bsearch16u::@10
bsearch16u::@1: scope:[bsearch16u]  from bsearch16u::@8
  (word*) bsearch16u::items#4 ← phi( bsearch16u::@8/(word*) bsearch16u::items#3 )
  (word*~) bsearch16u::$3 ← (word*) bsearch16u::items#4
  to:bsearch16u::@3
bsearch16u::@2: scope:[bsearch16u]  from bsearch16u::@8
  (word*) bsearch16u::items#5 ← phi( bsearch16u::@8/(word*) bsearch16u::items#3 )
  (number~) bsearch16u::$18 ← (number) 1 * (const byte) SIZEOF_WORD
  (word*~) bsearch16u::$1 ← (word*) bsearch16u::items#5 - (number~) bsearch16u::$18
  (word*~) bsearch16u::$2 ← (word*~) bsearch16u::$1
  to:bsearch16u::@3
bsearch16u::@3: scope:[bsearch16u]  from bsearch16u::@1 bsearch16u::@2
  (word*~) bsearch16u::$4 ← phi( bsearch16u::@1/(word*~) bsearch16u::$3 bsearch16u::@2/(word*~) bsearch16u::$2 )
  (word*) bsearch16u::return#2 ← (word*~) bsearch16u::$4
  to:bsearch16u::@return
@3: scope:[]  from @begin
  (byte*) heap_head#35 ← phi( @begin/(byte*) heap_head#0 )
  (byte) NUM_SQUARES#0 ← (number) $ff
  (word*) SQUARES#0 ← (word*) 0
  to:@11
init_squares: scope:[init_squares]  from init_dist_screen
  (byte*) heap_head#24 ← phi( init_dist_screen/(byte*) heap_head#28 )
  (byte) NUM_SQUARES#6 ← phi( init_dist_screen/(byte) NUM_SQUARES#3 )
  (byte~) init_squares::$0 ← (byte) NUM_SQUARES#6 * (const byte) SIZEOF_WORD
  (word) malloc::size#0 ← (byte~) init_squares::$0
  call malloc 
  (void*) malloc::return#2 ← (void*) malloc::return#1
  to:init_squares::@3
init_squares::@3: scope:[init_squares]  from init_squares
  (byte) NUM_SQUARES#7 ← phi( init_squares/(byte) NUM_SQUARES#6 )
  (byte*) heap_head#14 ← phi( init_squares/(byte*) heap_head#2 )
  (void*) malloc::return#6 ← phi( init_squares/(void*) malloc::return#2 )
  (void*~) init_squares::$1 ← (void*) malloc::return#6
  (byte*) heap_head#3 ← (byte*) heap_head#14
  (word*) SQUARES#1 ← ((word*)) (void*~) init_squares::$1
  (word*) init_squares::squares#0 ← (word*) SQUARES#1
  (word) init_squares::sqr#0 ← (number) 0
  (number~) init_squares::$2 ← (byte) NUM_SQUARES#7 - (number) 1
  (byte) init_squares::i#0 ← (byte) 0
  to:init_squares::@1
init_squares::@1: scope:[init_squares]  from init_squares::@1 init_squares::@3
  (word*) SQUARES#17 ← phi( init_squares::@1/(word*) SQUARES#17 init_squares::@3/(word*) SQUARES#1 )
  (byte*) heap_head#25 ← phi( init_squares::@1/(byte*) heap_head#25 init_squares::@3/(byte*) heap_head#3 )
  (byte) init_squares::i#2 ← phi( init_squares::@1/(byte) init_squares::i#1 init_squares::@3/(byte) init_squares::i#0 )
  (word*) init_squares::squares#2 ← phi( init_squares::@1/(word*) init_squares::squares#1 init_squares::@3/(word*) init_squares::squares#0 )
  (word) init_squares::sqr#2 ← phi( init_squares::@1/(word) init_squares::sqr#1 init_squares::@3/(word) init_squares::sqr#0 )
  *((word*) init_squares::squares#2) ← (word) init_squares::sqr#2
  (word*) init_squares::squares#1 ← (word*) init_squares::squares#2 + (const byte) SIZEOF_WORD
  (number~) init_squares::$3 ← (byte) init_squares::i#2 * (number) 2
  (number~) init_squares::$4 ← (number~) init_squares::$3 + (number) 1
  (word) init_squares::sqr#1 ← (word) init_squares::sqr#2 + (number~) init_squares::$4
  (byte) init_squares::i#1 ← (byte) init_squares::i#2 + rangenext(0,init_squares::$2)
  (bool~) init_squares::$5 ← (byte) init_squares::i#1 != rangelast(0,init_squares::$2)
  if((bool~) init_squares::$5) goto init_squares::@1
  to:init_squares::@return
init_squares::@return: scope:[init_squares]  from init_squares::@1
  (word*) SQUARES#8 ← phi( init_squares::@1/(word*) SQUARES#17 )
  (byte*) heap_head#15 ← phi( init_squares::@1/(byte*) heap_head#25 )
  (byte*) heap_head#4 ← (byte*) heap_head#15
  (word*) SQUARES#2 ← (word*) SQUARES#8
  return 
  to:@return
sqr: scope:[sqr]  from init_dist_screen::@4 init_dist_screen::@8
  (word*) SQUARES#9 ← phi( init_dist_screen::@4/(word*) SQUARES#18 init_dist_screen::@8/(word*) SQUARES#19 )
  (byte) sqr::val#2 ← phi( init_dist_screen::@4/(byte) sqr::val#0 init_dist_screen::@8/(byte) sqr::val#1 )
  (byte~) sqr::$0 ← (byte) sqr::val#2 * (const byte) SIZEOF_WORD
  (word) sqr::return#0 ← *((word*) SQUARES#9 + (byte~) sqr::$0)
  to:sqr::@return
sqr::@return: scope:[sqr]  from sqr
  (word) sqr::return#4 ← phi( sqr/(word) sqr::return#0 )
  (word) sqr::return#1 ← (word) sqr::return#4
  return 
  to:@return
sqrt: scope:[sqrt]  from init_dist_screen::@17
  (byte) NUM_SQUARES#8 ← phi( init_dist_screen::@17/(byte) NUM_SQUARES#13 )
  (word*) SQUARES#10 ← phi( init_dist_screen::@17/(word*) SQUARES#20 )
  (word) sqrt::val#1 ← phi( init_dist_screen::@17/(word) sqrt::val#0 )
  (word) bsearch16u::key#0 ← (word) sqrt::val#1
  (word*) bsearch16u::items#1 ← (word*) SQUARES#10
  (byte) bsearch16u::num#2 ← (byte) NUM_SQUARES#8
  call bsearch16u 
  (word*) bsearch16u::return#3 ← (word*) bsearch16u::return#1
  to:sqrt::@2
sqrt::@2: scope:[sqrt]  from sqrt
  (word*) SQUARES#11 ← phi( sqrt/(word*) SQUARES#10 )
  (word*) bsearch16u::return#5 ← phi( sqrt/(word*) bsearch16u::return#3 )
  (word*~) sqrt::$0 ← (word*) bsearch16u::return#5
  (word*) sqrt::found#0 ← (word*~) sqrt::$0
  (word~) sqrt::$3 ← (word*) sqrt::found#0 - (word*) SQUARES#11
  (word~) sqrt::$1 ← (word~) sqrt::$3 / (const byte) SIZEOF_WORD
  (byte~) sqrt::$2 ← ((byte)) (word~) sqrt::$1
  (byte) sqrt::sq#0 ← (byte~) sqrt::$2
  (byte) sqrt::return#0 ← (byte) sqrt::sq#0
  to:sqrt::@return
sqrt::@return: scope:[sqrt]  from sqrt::@2
  (byte) sqrt::return#3 ← phi( sqrt::@2/(byte) sqrt::return#0 )
  (byte) sqrt::return#1 ← (byte) sqrt::return#3
  return 
  to:@return
@11: scope:[]  from @3
  (word*) SQUARES#48 ← phi( @3/(word*) SQUARES#0 )
  (byte) NUM_SQUARES#41 ← phi( @3/(byte) NUM_SQUARES#0 )
  (byte*) heap_head#31 ← phi( @3/(byte*) heap_head#35 )
  (byte*) PROCPORT_DDR#0 ← ((byte*)) (number) 0
  (byte) PROCPORT_DDR_MEMORY_MASK#0 ← (number) 7
  (byte*) PROCPORT#0 ← ((byte*)) (number) 1
  (byte) PROCPORT_RAM_IO#0 ← (number) $35
  (byte) PROCPORT_RAM_CHARROM#0 ← (number) $31
  (byte*) CHARGEN#0 ← ((byte*)) (number) $d000
  (byte) BORDER_XPOS_LEFT#0 ← (number) $18
  (word) BORDER_XPOS_RIGHT#0 ← (number) $158
  (byte) BORDER_YPOS_TOP#0 ← (number) $32
  (byte) BORDER_YPOS_BOTTOM#0 ← (number) $fa
  (word) SPRITE_PTRS#0 ← (number) $3f8
  (byte*) SPRITES_XPOS#0 ← ((byte*)) (number) $d000
  (byte*) SPRITES_YPOS#0 ← ((byte*)) (number) $d001
  (byte*) SPRITES_XMSB#0 ← ((byte*)) (number) $d010
  (byte*) RASTER#0 ← ((byte*)) (number) $d012
  (byte*) SPRITES_ENABLE#0 ← ((byte*)) (number) $d015
  (byte*) SPRITES_EXPAND_Y#0 ← ((byte*)) (number) $d017
  (byte*) SPRITES_MC#0 ← ((byte*)) (number) $d01c
  (byte*) SPRITES_EXPAND_X#0 ← ((byte*)) (number) $d01d
  (byte*) BORDERCOL#0 ← ((byte*)) (number) $d020
  (byte*) BGCOL#0 ← ((byte*)) (number) $d021
  (byte*) SPRITES_COLS#0 ← ((byte*)) (number) $d027
  (byte*) VIC_CONTROL#0 ← ((byte*)) (number) $d011
  (byte*) IRQ_STATUS#0 ← ((byte*)) (number) $d019
  (byte*) IRQ_ENABLE#0 ← ((byte*)) (number) $d01a
  (byte) IRQ_RASTER#0 ← (number) 1
  (byte*) COLS#0 ← ((byte*)) (number) $d800
  (byte*) CIA1_INTERRUPT#0 ← ((byte*)) (number) $dc0d
  (byte) CIA_INTERRUPT_CLEAR#0 ← (number) $7f
  (void()**) HARDWARE_IRQ#0 ← ((void()**)) (number) $fffe
  (byte) WHITE#0 ← (number) 1
  (byte) BLUE#0 ← (number) 6
  (byte) LIGHT_BLUE#0 ← (number) $e
  to:@15
@15: scope:[]  from @11
  (word*) SQUARES#46 ← phi( @11/(word*) SQUARES#48 )
  (byte) NUM_SQUARES#37 ← phi( @11/(byte) NUM_SQUARES#41 )
  (byte*) heap_head#23 ← phi( @11/(byte*) heap_head#31 )
  (bool) DEBUG#0 ← false
  (byte*) SCREEN#0 ← ((byte*)) (number) $400
  (byte*) SPRITE_DATA#0 ← ((byte*)) (number) $2000
  (word[$28]) VXSIN#0 ← kickasm {{ .for(var i=0; i<40; i++) {
      .word -sin(toRadians([i*360]/40))*4
    }
 }}
  (word[$19]) VYSIN#0 ← kickasm {{ .for(var i=0; i<25; i++) {
      .word -sin(toRadians([i*360]/25))*4
    }
 }}
  (word) malloc::size#1 ← (number) $3e8
  call malloc 
  (void*) malloc::return#3 ← (void*) malloc::return#1
  to:@25
@25: scope:[]  from @15
  (word*) SQUARES#44 ← phi( @15/(word*) SQUARES#46 )
  (byte) NUM_SQUARES#34 ← phi( @15/(byte) NUM_SQUARES#37 )
  (byte*) heap_head#16 ← phi( @15/(byte*) heap_head#2 )
  (void*) malloc::return#7 ← phi( @15/(void*) malloc::return#3 )
  (void*~) $0 ← (void*) malloc::return#7
  (byte*) heap_head#5 ← (byte*) heap_head#16
  (byte*) SCREEN_COPY#0 ← ((byte*)) (void*~) $0
  (word) malloc::size#2 ← (number) $3e8
  call malloc 
  (void*) malloc::return#4 ← (void*) malloc::return#1
  to:@26
@26: scope:[]  from @25
  (byte*) SCREEN_COPY#25 ← phi( @25/(byte*) SCREEN_COPY#0 )
  (word*) SQUARES#43 ← phi( @25/(word*) SQUARES#44 )
  (byte) NUM_SQUARES#32 ← phi( @25/(byte) NUM_SQUARES#34 )
  (byte*) heap_head#17 ← phi( @25/(byte*) heap_head#2 )
  (void*) malloc::return#8 ← phi( @25/(void*) malloc::return#4 )
  (void*~) $1 ← (void*) malloc::return#8
  (byte*) heap_head#6 ← (byte*) heap_head#17
  (byte*) SCREEN_DIST#0 ← ((byte*)) (void*~) $1
  (byte) NUM_PROCESSING#0 ← (number) 8
  (byte) NOT_FOUND#0 ← (number) $ff
  (struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 ← { fill( NUM_PROCESSING#0, 0) }
  to:@18
main: scope:[main]  from @24
  (byte*) SCREEN_COPY#4 ← phi( @24/(byte*) SCREEN_COPY#7 )
  (word*) SQUARES#21 ← phi( @24/(word*) SQUARES#25 )
  (byte*) heap_head#26 ← phi( @24/(byte*) heap_head#30 )
  (byte) NUM_SQUARES#14 ← phi( @24/(byte) NUM_SQUARES#17 )
  (byte*) SCREEN_DIST#1 ← phi( @24/(byte*) SCREEN_DIST#3 )
  (byte*) init_dist_screen::screen#0 ← (byte*) SCREEN_DIST#1
  call init_dist_screen 
  to:main::@13
main::@13: scope:[main]  from main
  (byte*) SCREEN_DIST#17 ← phi( main/(byte*) SCREEN_DIST#1 )
  (byte*) SCREEN_COPY#1 ← phi( main/(byte*) SCREEN_COPY#4 )
  (word*) SQUARES#12 ← phi( main/(word*) SQUARES#6 )
  (byte*) heap_head#18 ← phi( main/(byte*) heap_head#10 )
  (byte) NUM_SQUARES#9 ← phi( main/(byte) NUM_SQUARES#4 )
  (byte) NUM_SQUARES#1 ← (byte) NUM_SQUARES#9
  (byte*) heap_head#7 ← (byte*) heap_head#18
  (word*) SQUARES#3 ← (word*) SQUARES#12
  (byte*) main::src#0 ← (byte*) SCREEN#0
  (byte*) main::dst#0 ← (byte*) SCREEN_COPY#1
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@13
  (word*) SQUARES#51 ← phi( main::@1/(word*) SQUARES#51 main::@13/(word*) SQUARES#3 )
  (byte*) heap_head#56 ← phi( main::@1/(byte*) heap_head#56 main::@13/(byte*) heap_head#7 )
  (byte) NUM_SQUARES#46 ← phi( main::@1/(byte) NUM_SQUARES#46 main::@13/(byte) NUM_SQUARES#1 )
  (byte*) SCREEN_DIST#16 ← phi( main::@1/(byte*) SCREEN_DIST#16 main::@13/(byte*) SCREEN_DIST#17 )
  (byte*) SCREEN_COPY#26 ← phi( main::@1/(byte*) SCREEN_COPY#26 main::@13/(byte*) SCREEN_COPY#1 )
  (byte*) main::dst#2 ← phi( main::@1/(byte*) main::dst#1 main::@13/(byte*) main::dst#0 )
  (byte*) main::src#2 ← phi( main::@1/(byte*) main::src#1 main::@13/(byte*) main::src#0 )
  *((byte*) main::dst#2) ← *((byte*) main::src#2)
  (byte*) main::src#1 ← ++ (byte*) main::src#2
  (byte*) main::dst#1 ← ++ (byte*) main::dst#2
  (byte*~) main::$5 ← (byte*) SCREEN#0 + (number) $3e8
  (bool~) main::$6 ← (byte*) main::src#1 != (byte*~) main::$5
  if((bool~) main::$6) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (word*) SQUARES#50 ← phi( main::@1/(word*) SQUARES#51 )
  (byte*) heap_head#53 ← phi( main::@1/(byte*) heap_head#56 )
  (byte) NUM_SQUARES#44 ← phi( main::@1/(byte) NUM_SQUARES#46 )
  (byte*) SCREEN_DIST#15 ← phi( main::@1/(byte*) SCREEN_DIST#16 )
  (byte*) SCREEN_COPY#24 ← phi( main::@1/(byte*) SCREEN_COPY#26 )
  (number~) main::$7 ← (byte) NUM_PROCESSING#0 - (number) 1
  (byte) main::i#0 ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (word*) SQUARES#49 ← phi( main::@2/(word*) SQUARES#50 main::@3/(word*) SQUARES#49 )
  (byte*) heap_head#51 ← phi( main::@2/(byte*) heap_head#53 main::@3/(byte*) heap_head#51 )
  (byte) NUM_SQUARES#42 ← phi( main::@2/(byte) NUM_SQUARES#44 main::@3/(byte) NUM_SQUARES#42 )
  (byte*) SCREEN_DIST#14 ← phi( main::@2/(byte*) SCREEN_DIST#15 main::@3/(byte*) SCREEN_DIST#14 )
  (byte*) SCREEN_COPY#21 ← phi( main::@2/(byte*) SCREEN_COPY#24 main::@3/(byte*) SCREEN_COPY#21 )
  (byte) main::i#2 ← phi( main::@2/(byte) main::i#0 main::@3/(byte) main::i#1 )
  (byte~) main::$16 ← (byte) main::i#2 * (const byte) SIZEOF_STRUCT_PROCESSINGSPRITE
  (word*) main::$17 ← (word*)(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X
  *((word*) main::$17 + (byte~) main::$16) ← (number) 0
  (word*) main::$18 ← (word*)(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y
  *((word*) main::$18 + (byte~) main::$16) ← (number) 0
  (word*) main::$19 ← (word*)(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX
  *((word*) main::$19 + (byte~) main::$16) ← (number) 0
  (word*) main::$20 ← (word*)(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY
  *((word*) main::$20 + (byte~) main::$16) ← (number) 0
  (byte*) main::$21 ← (byte*)(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID
  *((byte*) main::$21 + (byte~) main::$16) ← (number) 0
  (byte*) main::$22 ← (byte*)(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR
  *((byte*) main::$22 + (byte~) main::$16) ← (number) 0
  (byte*) main::$23 ← (byte*)(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL
  *((byte*) main::$23 + (byte~) main::$16) ← (number) 0
  (byte*) main::$24 ← (byte*)(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
  *((byte*) main::$24 + (byte~) main::$16) ← (const byte) STATUS_FREE
  (byte**) main::$25 ← (byte**)(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR
  *((byte**) main::$25 + (byte~) main::$16) ← ((byte*)) (number) 0
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,main::$7)
  (bool~) main::$8 ← (byte) main::i#1 != rangelast(0,main::$7)
  if((bool~) main::$8) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  (word*) SQUARES#47 ← phi( main::@3/(word*) SQUARES#49 )
  (byte*) heap_head#49 ← phi( main::@3/(byte*) heap_head#51 )
  (byte) NUM_SQUARES#38 ← phi( main::@3/(byte) NUM_SQUARES#42 )
  (byte*) SCREEN_DIST#11 ← phi( main::@3/(byte*) SCREEN_DIST#14 )
  (byte*) SCREEN_COPY#15 ← phi( main::@3/(byte*) SCREEN_COPY#21 )
  call initSprites 
  to:main::@14
main::@14: scope:[main]  from main::@4
  (word*) SQUARES#45 ← phi( main::@4/(word*) SQUARES#47 )
  (byte*) heap_head#47 ← phi( main::@4/(byte*) heap_head#49 )
  (byte) NUM_SQUARES#35 ← phi( main::@4/(byte) NUM_SQUARES#38 )
  (byte*) SCREEN_DIST#8 ← phi( main::@4/(byte*) SCREEN_DIST#11 )
  (byte*) SCREEN_COPY#11 ← phi( main::@4/(byte*) SCREEN_COPY#15 )
  (void()*~) main::$2 ← & interrupt(HARDWARE_ALL)(void()) irqTop()
  (word) setupRasterIrq::raster#0 ← (byte) RASTER_IRQ_TOP#0
  (void()*) setupRasterIrq::irqRoutine#0 ← (void()*~) main::$2
  call setupRasterIrq 
  to:main::@15
main::@15: scope:[main]  from main::@14
  (word*) SQUARES#42 ← phi( main::@14/(word*) SQUARES#45 )
  (byte*) heap_head#44 ← phi( main::@14/(byte*) heap_head#47 )
  (byte) NUM_SQUARES#31 ← phi( main::@14/(byte) NUM_SQUARES#35 )
  (byte*) SCREEN_DIST#5 ← phi( main::@14/(byte*) SCREEN_DIST#8 )
  (byte*) SCREEN_COPY#8 ← phi( main::@14/(byte*) SCREEN_COPY#11 )
  to:main::@5
main::@5: scope:[main]  from main::@15 main::@17
  (word*) SQUARES#38 ← phi( main::@15/(word*) SQUARES#42 main::@17/(word*) SQUARES#34 )
  (byte*) heap_head#40 ← phi( main::@15/(byte*) heap_head#44 main::@17/(byte*) heap_head#37 )
  (byte) NUM_SQUARES#27 ← phi( main::@15/(byte) NUM_SQUARES#31 main::@17/(byte) NUM_SQUARES#23 )
  (byte*) SCREEN_DIST#4 ← phi( main::@15/(byte*) SCREEN_DIST#5 main::@17/(byte*) SCREEN_DIST#6 )
  (byte*) SCREEN_COPY#5 ← phi( main::@15/(byte*) SCREEN_COPY#8 main::@17/(byte*) SCREEN_COPY#9 )
  call getCharToProcess 
  (byte) getCharToProcess::return_x#0 ← (byte) getCharToProcess::return_x#2
  (byte) getCharToProcess::return_y#0 ← (byte) getCharToProcess::return_y#2
  (byte) getCharToProcess::return_dist#0 ← (byte) getCharToProcess::return_dist#2
  to:main::@16
main::@16: scope:[main]  from main::@5
  (byte*) SCREEN_DIST#12 ← phi( main::@5/(byte*) SCREEN_DIST#4 )
  (byte*) SCREEN_COPY#16 ← phi( main::@5/(byte*) SCREEN_COPY#5 )
  (word*) SQUARES#33 ← phi( main::@5/(word*) SQUARES#38 )
  (byte*) heap_head#36 ← phi( main::@5/(byte*) heap_head#40 )
  (byte) NUM_SQUARES#22 ← phi( main::@5/(byte) NUM_SQUARES#27 )
  (byte) getCharToProcess::return_dist#3 ← phi( main::@5/(byte) getCharToProcess::return_dist#0 )
  (byte) getCharToProcess::return_y#3 ← phi( main::@5/(byte) getCharToProcess::return_y#0 )
  (byte) getCharToProcess::return_x#3 ← phi( main::@5/(byte) getCharToProcess::return_x#0 )
  (byte) main::$9_x ← (byte) getCharToProcess::return_x#3
  (byte) main::$9_y ← (byte) getCharToProcess::return_y#3
  (byte) main::$9_dist ← (byte) getCharToProcess::return_dist#3
  (byte) main::center_x#0 ← (byte) main::$9_x
  (byte) main::center_y#0 ← (byte) main::$9_y
  (byte) main::center_dist#0 ← (byte) main::$9_dist
  (bool~) main::$10 ← (byte) main::center_dist#0 == (byte) NOT_FOUND#0
  (bool~) main::$11 ← ! (bool~) main::$10
  if((bool~) main::$11) goto main::@6
  to:main::@7
main::@6: scope:[main]  from main::@16
  (word*) SQUARES#39 ← phi( main::@16/(word*) SQUARES#33 )
  (byte*) heap_head#41 ← phi( main::@16/(byte*) heap_head#36 )
  (byte) NUM_SQUARES#28 ← phi( main::@16/(byte) NUM_SQUARES#22 )
  (byte*) SCREEN_DIST#9 ← phi( main::@16/(byte*) SCREEN_DIST#12 )
  (byte*) SCREEN_COPY#12 ← phi( main::@16/(byte*) SCREEN_COPY#16 )
  (byte) main::center_dist#1 ← phi( main::@16/(byte) main::center_dist#0 )
  (byte) main::center_y#1 ← phi( main::@16/(byte) main::center_y#0 )
  (byte) main::center_x#1 ← phi( main::@16/(byte) main::center_x#0 )
  (byte) startProcessing::center_x#0 ← (byte) main::center_x#1
  (byte) startProcessing::center_y#0 ← (byte) main::center_y#1
  (byte) startProcessing::center_dist#0 ← (byte) main::center_dist#1
  call startProcessing 
  to:main::@17
main::@17: scope:[main]  from main::@6
  (word*) SQUARES#34 ← phi( main::@6/(word*) SQUARES#39 )
  (byte*) heap_head#37 ← phi( main::@6/(byte*) heap_head#41 )
  (byte) NUM_SQUARES#23 ← phi( main::@6/(byte) NUM_SQUARES#28 )
  (byte*) SCREEN_DIST#6 ← phi( main::@6/(byte*) SCREEN_DIST#9 )
  (byte*) SCREEN_COPY#9 ← phi( main::@6/(byte*) SCREEN_COPY#12 )
  if(true) goto main::@5
  to:main::@7
main::@7: scope:[main]  from main::@16 main::@17
  (word*) SQUARES#26 ← phi( main::@16/(word*) SQUARES#33 main::@17/(word*) SQUARES#34 )
  (byte*) heap_head#32 ← phi( main::@16/(byte*) heap_head#36 main::@17/(byte*) heap_head#37 )
  (byte) NUM_SQUARES#18 ← phi( main::@16/(byte) NUM_SQUARES#22 main::@17/(byte) NUM_SQUARES#23 )
  (byte*~) main::$4 ← (byte*) SCREEN#0 + (number) $3e7
  *((byte*~) main::$4) ← (byte) '.'
  to:main::@11
main::@11: scope:[main]  from main::@11 main::@7
  (word*) SQUARES#22 ← phi( main::@11/(word*) SQUARES#22 main::@7/(word*) SQUARES#26 )
  (byte*) heap_head#27 ← phi( main::@11/(byte*) heap_head#27 main::@7/(byte*) heap_head#32 )
  (byte) NUM_SQUARES#15 ← phi( main::@11/(byte) NUM_SQUARES#15 main::@7/(byte) NUM_SQUARES#18 )
  (byte*~) main::$15 ← (byte*) COLS#0 + (number) $3e7
  *((byte*~) main::$15) ← ++ *((byte*~) main::$15)
  if(true) goto main::@11
  to:main::@return
main::@return: scope:[main]  from main::@11
  (word*) SQUARES#13 ← phi( main::@11/(word*) SQUARES#22 )
  (byte*) heap_head#19 ← phi( main::@11/(byte*) heap_head#27 )
  (byte) NUM_SQUARES#10 ← phi( main::@11/(byte) NUM_SQUARES#15 )
  (byte) NUM_SQUARES#2 ← (byte) NUM_SQUARES#10
  (byte*) heap_head#8 ← (byte*) heap_head#19
  (word*) SQUARES#4 ← (word*) SQUARES#13
  return 
  to:@return
getCharToProcess: scope:[getCharToProcess]  from main::@5
  (byte*) SCREEN_DIST#2 ← phi( main::@5/(byte*) SCREEN_DIST#4 )
  (byte*) SCREEN_COPY#2 ← phi( main::@5/(byte*) SCREEN_COPY#5 )
  (byte) getCharToProcess::closest_x#0 ← (number) 0
  (byte) getCharToProcess::closest_y#0 ← (number) 0
  (byte) getCharToProcess::closest_dist#0 ← (byte) NOT_FOUND#0
  (byte*) getCharToProcess::screen_line#0 ← (byte*) SCREEN_COPY#2
  (byte*) getCharToProcess::dist_line#0 ← (byte*) SCREEN_DIST#2
  (byte) getCharToProcess::y#0 ← (byte) 0
  to:getCharToProcess::@3
getCharToProcess::@3: scope:[getCharToProcess]  from getCharToProcess getCharToProcess::@9
  (byte*) SCREEN_COPY#22 ← phi( getCharToProcess/(byte*) SCREEN_COPY#2 getCharToProcess::@9/(byte*) SCREEN_COPY#10 )
  (byte) getCharToProcess::closest_y#9 ← phi( getCharToProcess/(byte) getCharToProcess::closest_y#0 getCharToProcess::@9/(byte) getCharToProcess::closest_y#5 )
  (byte) getCharToProcess::closest_x#9 ← phi( getCharToProcess/(byte) getCharToProcess::closest_x#0 getCharToProcess::@9/(byte) getCharToProcess::closest_x#5 )
  (byte) getCharToProcess::y#7 ← phi( getCharToProcess/(byte) getCharToProcess::y#0 getCharToProcess::@9/(byte) getCharToProcess::y#1 )
  (byte) getCharToProcess::closest_dist#8 ← phi( getCharToProcess/(byte) getCharToProcess::closest_dist#0 getCharToProcess::@9/(byte) getCharToProcess::closest_dist#6 )
  (byte*) getCharToProcess::dist_line#6 ← phi( getCharToProcess/(byte*) getCharToProcess::dist_line#0 getCharToProcess::@9/(byte*) getCharToProcess::dist_line#1 )
  (byte*) getCharToProcess::screen_line#4 ← phi( getCharToProcess/(byte*) getCharToProcess::screen_line#0 getCharToProcess::@9/(byte*) getCharToProcess::screen_line#1 )
  (byte) getCharToProcess::x#0 ← (byte) 0
  to:getCharToProcess::@4
getCharToProcess::@4: scope:[getCharToProcess]  from getCharToProcess::@3 getCharToProcess::@5
  (byte*) SCREEN_COPY#17 ← phi( getCharToProcess::@3/(byte*) SCREEN_COPY#22 getCharToProcess::@5/(byte*) SCREEN_COPY#13 )
  (byte) getCharToProcess::closest_y#7 ← phi( getCharToProcess::@3/(byte) getCharToProcess::closest_y#9 getCharToProcess::@5/(byte) getCharToProcess::closest_y#6 )
  (byte) getCharToProcess::closest_x#7 ← phi( getCharToProcess::@3/(byte) getCharToProcess::closest_x#9 getCharToProcess::@5/(byte) getCharToProcess::closest_x#6 )
  (byte) getCharToProcess::y#6 ← phi( getCharToProcess::@3/(byte) getCharToProcess::y#7 getCharToProcess::@5/(byte) getCharToProcess::y#5 )
  (byte) getCharToProcess::closest_dist#5 ← phi( getCharToProcess::@3/(byte) getCharToProcess::closest_dist#8 getCharToProcess::@5/(byte) getCharToProcess::closest_dist#9 )
  (byte*) getCharToProcess::dist_line#4 ← phi( getCharToProcess::@3/(byte*) getCharToProcess::dist_line#6 getCharToProcess::@5/(byte*) getCharToProcess::dist_line#5 )
  (byte) getCharToProcess::x#2 ← phi( getCharToProcess::@3/(byte) getCharToProcess::x#0 getCharToProcess::@5/(byte) getCharToProcess::x#1 )
  (byte*) getCharToProcess::screen_line#2 ← phi( getCharToProcess::@3/(byte*) getCharToProcess::screen_line#4 getCharToProcess::@5/(byte*) getCharToProcess::screen_line#5 )
  (bool~) getCharToProcess::$2 ← *((byte*) getCharToProcess::screen_line#2 + (byte) getCharToProcess::x#2) != (byte) ' '
  (bool~) getCharToProcess::$3 ← ! (bool~) getCharToProcess::$2
  if((bool~) getCharToProcess::$3) goto getCharToProcess::@5
  to:getCharToProcess::@7
getCharToProcess::@5: scope:[getCharToProcess]  from getCharToProcess::@4 getCharToProcess::@7 getCharToProcess::@8
  (byte*) SCREEN_COPY#13 ← phi( getCharToProcess::@4/(byte*) SCREEN_COPY#17 getCharToProcess::@7/(byte*) SCREEN_COPY#18 getCharToProcess::@8/(byte*) SCREEN_COPY#19 )
  (byte) getCharToProcess::closest_y#6 ← phi( getCharToProcess::@4/(byte) getCharToProcess::closest_y#7 getCharToProcess::@7/(byte) getCharToProcess::closest_y#8 getCharToProcess::@8/(byte) getCharToProcess::closest_y#1 )
  (byte) getCharToProcess::closest_x#6 ← phi( getCharToProcess::@4/(byte) getCharToProcess::closest_x#7 getCharToProcess::@7/(byte) getCharToProcess::closest_x#8 getCharToProcess::@8/(byte) getCharToProcess::closest_x#1 )
  (byte) getCharToProcess::closest_dist#9 ← phi( getCharToProcess::@4/(byte) getCharToProcess::closest_dist#5 getCharToProcess::@7/(byte) getCharToProcess::closest_dist#2 getCharToProcess::@8/(byte) getCharToProcess::closest_dist#1 )
  (byte) getCharToProcess::y#5 ← phi( getCharToProcess::@4/(byte) getCharToProcess::y#6 getCharToProcess::@7/(byte) getCharToProcess::y#4 getCharToProcess::@8/(byte) getCharToProcess::y#2 )
  (byte*) getCharToProcess::dist_line#5 ← phi( getCharToProcess::@4/(byte*) getCharToProcess::dist_line#4 getCharToProcess::@7/(byte*) getCharToProcess::dist_line#2 getCharToProcess::@8/(byte*) getCharToProcess::dist_line#7 )
  (byte*) getCharToProcess::screen_line#5 ← phi( getCharToProcess::@4/(byte*) getCharToProcess::screen_line#2 getCharToProcess::@7/(byte*) getCharToProcess::screen_line#6 getCharToProcess::@8/(byte*) getCharToProcess::screen_line#7 )
  (byte) getCharToProcess::x#3 ← phi( getCharToProcess::@4/(byte) getCharToProcess::x#2 getCharToProcess::@7/(byte) getCharToProcess::x#4 getCharToProcess::@8/(byte) getCharToProcess::x#5 )
  (byte) getCharToProcess::x#1 ← (byte) getCharToProcess::x#3 + rangenext(0,$27)
  (bool~) getCharToProcess::$6 ← (byte) getCharToProcess::x#1 != rangelast(0,$27)
  if((bool~) getCharToProcess::$6) goto getCharToProcess::@4
  to:getCharToProcess::@9
getCharToProcess::@7: scope:[getCharToProcess]  from getCharToProcess::@4
  (byte*) SCREEN_COPY#18 ← phi( getCharToProcess::@4/(byte*) SCREEN_COPY#17 )
  (byte) getCharToProcess::closest_y#8 ← phi( getCharToProcess::@4/(byte) getCharToProcess::closest_y#7 )
  (byte) getCharToProcess::closest_x#8 ← phi( getCharToProcess::@4/(byte) getCharToProcess::closest_x#7 )
  (byte*) getCharToProcess::screen_line#6 ← phi( getCharToProcess::@4/(byte*) getCharToProcess::screen_line#2 )
  (byte) getCharToProcess::y#4 ← phi( getCharToProcess::@4/(byte) getCharToProcess::y#6 )
  (byte) getCharToProcess::closest_dist#2 ← phi( getCharToProcess::@4/(byte) getCharToProcess::closest_dist#5 )
  (byte) getCharToProcess::x#4 ← phi( getCharToProcess::@4/(byte) getCharToProcess::x#2 )
  (byte*) getCharToProcess::dist_line#2 ← phi( getCharToProcess::@4/(byte*) getCharToProcess::dist_line#4 )
  (byte) getCharToProcess::dist#0 ← *((byte*) getCharToProcess::dist_line#2 + (byte) getCharToProcess::x#4)
  (bool~) getCharToProcess::$4 ← (byte) getCharToProcess::dist#0 < (byte) getCharToProcess::closest_dist#2
  (bool~) getCharToProcess::$5 ← ! (bool~) getCharToProcess::$4
  if((bool~) getCharToProcess::$5) goto getCharToProcess::@5
  to:getCharToProcess::@8
getCharToProcess::@8: scope:[getCharToProcess]  from getCharToProcess::@7
  (byte*) SCREEN_COPY#19 ← phi( getCharToProcess::@7/(byte*) SCREEN_COPY#18 )
  (byte*) getCharToProcess::dist_line#7 ← phi( getCharToProcess::@7/(byte*) getCharToProcess::dist_line#2 )
  (byte*) getCharToProcess::screen_line#7 ← phi( getCharToProcess::@7/(byte*) getCharToProcess::screen_line#6 )
  (byte) getCharToProcess::dist#1 ← phi( getCharToProcess::@7/(byte) getCharToProcess::dist#0 )
  (byte) getCharToProcess::y#2 ← phi( getCharToProcess::@7/(byte) getCharToProcess::y#4 )
  (byte) getCharToProcess::x#5 ← phi( getCharToProcess::@7/(byte) getCharToProcess::x#4 )
  (byte) getCharToProcess::closest_x#1 ← (byte) getCharToProcess::x#5
  (byte) getCharToProcess::closest_y#1 ← (byte) getCharToProcess::y#2
  (byte) getCharToProcess::closest_dist#1 ← (byte) getCharToProcess::dist#1
  to:getCharToProcess::@5
getCharToProcess::@9: scope:[getCharToProcess]  from getCharToProcess::@5
  (byte*) SCREEN_COPY#10 ← phi( getCharToProcess::@5/(byte*) SCREEN_COPY#13 )
  (byte) getCharToProcess::closest_y#5 ← phi( getCharToProcess::@5/(byte) getCharToProcess::closest_y#6 )
  (byte) getCharToProcess::closest_x#5 ← phi( getCharToProcess::@5/(byte) getCharToProcess::closest_x#6 )
  (byte) getCharToProcess::closest_dist#6 ← phi( getCharToProcess::@5/(byte) getCharToProcess::closest_dist#9 )
  (byte) getCharToProcess::y#3 ← phi( getCharToProcess::@5/(byte) getCharToProcess::y#5 )
  (byte*) getCharToProcess::dist_line#3 ← phi( getCharToProcess::@5/(byte*) getCharToProcess::dist_line#5 )
  (byte*) getCharToProcess::screen_line#3 ← phi( getCharToProcess::@5/(byte*) getCharToProcess::screen_line#5 )
  (byte*) getCharToProcess::screen_line#1 ← (byte*) getCharToProcess::screen_line#3 + (number) $28
  (byte*) getCharToProcess::dist_line#1 ← (byte*) getCharToProcess::dist_line#3 + (number) $28
  (byte) getCharToProcess::y#1 ← (byte) getCharToProcess::y#3 + rangenext(0,$18)
  (bool~) getCharToProcess::$7 ← (byte) getCharToProcess::y#1 != rangelast(0,$18)
  if((bool~) getCharToProcess::$7) goto getCharToProcess::@3
  to:getCharToProcess::@10
getCharToProcess::@10: scope:[getCharToProcess]  from getCharToProcess::@9
  (byte*) SCREEN_COPY#6 ← phi( getCharToProcess::@9/(byte*) SCREEN_COPY#10 )
  (byte) getCharToProcess::closest_y#4 ← phi( getCharToProcess::@9/(byte) getCharToProcess::closest_y#5 )
  (byte) getCharToProcess::closest_x#4 ← phi( getCharToProcess::@9/(byte) getCharToProcess::closest_x#5 )
  (byte) getCharToProcess::closest_dist#3 ← phi( getCharToProcess::@9/(byte) getCharToProcess::closest_dist#6 )
  (bool~) getCharToProcess::$0 ← (byte) getCharToProcess::closest_dist#3 != (byte) NOT_FOUND#0
  (bool~) getCharToProcess::$1 ← ! (bool~) getCharToProcess::$0
  if((bool~) getCharToProcess::$1) goto getCharToProcess::@1
  to:getCharToProcess::@11
getCharToProcess::@1: scope:[getCharToProcess]  from getCharToProcess::@10 getCharToProcess::@11
  (byte) getCharToProcess::closest_dist#4 ← phi( getCharToProcess::@10/(byte) getCharToProcess::closest_dist#3 getCharToProcess::@11/(byte) getCharToProcess::closest_dist#7 )
  (byte) getCharToProcess::closest_y#2 ← phi( getCharToProcess::@10/(byte) getCharToProcess::closest_y#4 getCharToProcess::@11/(byte) getCharToProcess::closest_y#3 )
  (byte) getCharToProcess::closest_x#2 ← phi( getCharToProcess::@10/(byte) getCharToProcess::closest_x#4 getCharToProcess::@11/(byte) getCharToProcess::closest_x#3 )
  (byte) getCharToProcess::return_x#1 ← (byte) getCharToProcess::closest_x#2
  (byte) getCharToProcess::return_y#1 ← (byte) getCharToProcess::closest_y#2
  (byte) getCharToProcess::return_dist#1 ← (byte) getCharToProcess::closest_dist#4
  (struct ProcessingChar) getCharToProcess::return#0 ← struct-unwound {(byte) getCharToProcess::return_x#1, (byte) getCharToProcess::return_y#1, (byte) getCharToProcess::return_dist#1}
  to:getCharToProcess::@return
getCharToProcess::@11: scope:[getCharToProcess]  from getCharToProcess::@10
  (byte) getCharToProcess::closest_dist#7 ← phi( getCharToProcess::@10/(byte) getCharToProcess::closest_dist#3 )
  (byte) getCharToProcess::closest_x#3 ← phi( getCharToProcess::@10/(byte) getCharToProcess::closest_x#4 )
  (byte*) SCREEN_COPY#3 ← phi( getCharToProcess::@10/(byte*) SCREEN_COPY#6 )
  (byte) getCharToProcess::closest_y#3 ← phi( getCharToProcess::@10/(byte) getCharToProcess::closest_y#4 )
  (word~) getCharToProcess::$8 ← ((word)) (byte) getCharToProcess::closest_y#3
  (number~) getCharToProcess::$9 ← (word~) getCharToProcess::$8 * (number) $28
  (byte*~) getCharToProcess::$10 ← (byte*) SCREEN_COPY#3 + (number~) getCharToProcess::$9
  (byte*~) getCharToProcess::$11 ← (byte*~) getCharToProcess::$10 + (byte) getCharToProcess::closest_x#3
  *((byte*~) getCharToProcess::$11) ← (byte) ' '
  to:getCharToProcess::@1
getCharToProcess::@return: scope:[getCharToProcess]  from getCharToProcess::@1
  (byte) getCharToProcess::return_dist#4 ← phi( getCharToProcess::@1/(byte) getCharToProcess::return_dist#1 )
  (byte) getCharToProcess::return_y#4 ← phi( getCharToProcess::@1/(byte) getCharToProcess::return_y#1 )
  (byte) getCharToProcess::return_x#4 ← phi( getCharToProcess::@1/(byte) getCharToProcess::return_x#1 )
  (byte) getCharToProcess::return_x#2 ← (byte) getCharToProcess::return_x#4
  (byte) getCharToProcess::return_y#2 ← (byte) getCharToProcess::return_y#4
  (byte) getCharToProcess::return_dist#2 ← (byte) getCharToProcess::return_dist#4
  (struct ProcessingChar) getCharToProcess::return#1 ← struct-unwound {(byte) getCharToProcess::return_x#2, (byte) getCharToProcess::return_y#2, (byte) getCharToProcess::return_dist#2}
  return 
  to:@return
startProcessing: scope:[startProcessing]  from main::@6
  (byte) startProcessing::center_x#9 ← phi( main::@6/(byte) startProcessing::center_x#0 )
  (byte) startProcessing::center_y#9 ← phi( main::@6/(byte) startProcessing::center_y#0 )
  (byte) startProcessing::freeIdx#0 ← (number) $ff
  to:startProcessing::@1
startProcessing::@1: scope:[startProcessing]  from startProcessing startProcessing::@4
  (byte) startProcessing::center_x#8 ← phi( startProcessing/(byte) startProcessing::center_x#9 startProcessing::@4/(byte) startProcessing::center_x#3 )
  (byte) startProcessing::center_y#8 ← phi( startProcessing/(byte) startProcessing::center_y#9 startProcessing::@4/(byte) startProcessing::center_y#3 )
  (byte) startProcessing::freeIdx#6 ← phi( startProcessing/(byte) startProcessing::freeIdx#0 startProcessing::@4/(byte) startProcessing::freeIdx#2 )
  (number~) startProcessing::$24 ← (byte) NUM_PROCESSING#0 - (number) 1
  (byte) startProcessing::i#0 ← (byte) 0
  to:startProcessing::@2
startProcessing::@2: scope:[startProcessing]  from startProcessing::@1 startProcessing::@3
  (byte) startProcessing::center_x#7 ← phi( startProcessing::@1/(byte) startProcessing::center_x#8 startProcessing::@3/(byte) startProcessing::center_x#5 )
  (byte) startProcessing::center_y#7 ← phi( startProcessing::@1/(byte) startProcessing::center_y#8 startProcessing::@3/(byte) startProcessing::center_y#5 )
  (byte) startProcessing::freeIdx#5 ← phi( startProcessing::@1/(byte) startProcessing::freeIdx#6 startProcessing::@3/(byte) startProcessing::freeIdx#4 )
  (byte) startProcessing::i#2 ← phi( startProcessing::@1/(byte) startProcessing::i#0 startProcessing::@3/(byte) startProcessing::i#1 )
  (byte~) startProcessing::$30 ← (byte) startProcessing::i#2 * (const byte) SIZEOF_STRUCT_PROCESSINGSPRITE
  (byte*) startProcessing::$41 ← (byte*)(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
  (bool~) startProcessing::$25 ← *((byte*) startProcessing::$41 + (byte~) startProcessing::$30) == (const byte) STATUS_FREE
  (bool~) startProcessing::$26 ← ! (bool~) startProcessing::$25
  if((bool~) startProcessing::$26) goto startProcessing::@3
  to:startProcessing::@5
startProcessing::@3: scope:[startProcessing]  from startProcessing::@2
  (byte) startProcessing::center_x#5 ← phi( startProcessing::@2/(byte) startProcessing::center_x#7 )
  (byte) startProcessing::center_y#5 ← phi( startProcessing::@2/(byte) startProcessing::center_y#7 )
  (byte) startProcessing::freeIdx#4 ← phi( startProcessing::@2/(byte) startProcessing::freeIdx#5 )
  (byte) startProcessing::i#3 ← phi( startProcessing::@2/(byte) startProcessing::i#2 )
  (byte) startProcessing::i#1 ← (byte) startProcessing::i#3 + rangenext(0,startProcessing::$24)
  (bool~) startProcessing::$27 ← (byte) startProcessing::i#1 != rangelast(0,startProcessing::$24)
  if((bool~) startProcessing::$27) goto startProcessing::@2
  to:startProcessing::@4
startProcessing::@5: scope:[startProcessing]  from startProcessing::@2
  (byte) startProcessing::center_x#6 ← phi( startProcessing::@2/(byte) startProcessing::center_x#7 )
  (byte) startProcessing::center_y#6 ← phi( startProcessing::@2/(byte) startProcessing::center_y#7 )
  (byte) startProcessing::i#4 ← phi( startProcessing::@2/(byte) startProcessing::i#2 )
  (byte) startProcessing::freeIdx#1 ← (byte) startProcessing::i#4
  to:startProcessing::@4
startProcessing::@4: scope:[startProcessing]  from startProcessing::@3 startProcessing::@5
  (byte) startProcessing::center_x#3 ← phi( startProcessing::@3/(byte) startProcessing::center_x#5 startProcessing::@5/(byte) startProcessing::center_x#6 )
  (byte) startProcessing::center_y#3 ← phi( startProcessing::@3/(byte) startProcessing::center_y#5 startProcessing::@5/(byte) startProcessing::center_y#6 )
  (byte) startProcessing::freeIdx#2 ← phi( startProcessing::@3/(byte) startProcessing::freeIdx#4 startProcessing::@5/(byte) startProcessing::freeIdx#1 )
  (bool~) startProcessing::$28 ← (byte) startProcessing::freeIdx#2 == (number) $ff
  if((bool~) startProcessing::$28) goto startProcessing::@1
  to:startProcessing::@8
startProcessing::@8: scope:[startProcessing]  from startProcessing::@4
  (byte) startProcessing::center_x#1 ← phi( startProcessing::@4/(byte) startProcessing::center_x#3 )
  (byte) startProcessing::center_y#1 ← phi( startProcessing::@4/(byte) startProcessing::center_y#3 )
  (byte) startProcessing::freeIdx#3 ← phi( startProcessing::@4/(byte) startProcessing::freeIdx#2 )
  (byte) startProcessing::spriteIdx#0 ← (byte) startProcessing::freeIdx#3
  (word~) startProcessing::$0 ← ((word)) (byte) startProcessing::center_y#1
  (number~) startProcessing::$1 ← (word~) startProcessing::$0 * (number) $28
  (number~) startProcessing::$2 ← (number~) startProcessing::$1 + (byte) startProcessing::center_x#1
  (word) startProcessing::offset#0 ← (number~) startProcessing::$2
  (byte*~) startProcessing::$3 ← (byte*) COLS#0 + (word) startProcessing::offset#0
  (byte*) startProcessing::colPtr#0 ← (byte*~) startProcessing::$3
  (byte) startProcessing::spriteCol#0 ← *((byte*) startProcessing::colPtr#0)
  (byte*~) startProcessing::$4 ← (byte*) SCREEN#0 + (word) startProcessing::offset#0
  (byte*) startProcessing::screenPtr#0 ← (byte*~) startProcessing::$4
  (word~) startProcessing::$5 ← ((word)) (byte) startProcessing::spriteIdx#0
  (number~) startProcessing::$6 ← (word~) startProcessing::$5 * (number) $40
  (byte*~) startProcessing::$7 ← (byte*) SPRITE_DATA#0 + (number~) startProcessing::$6
  (byte*) startProcessing::spriteData#0 ← (byte*~) startProcessing::$7
  (byte) startProcessing::ch#0 ← *((byte*) startProcessing::screenPtr#0)
  (word~) startProcessing::$8 ← ((word)) (byte) startProcessing::ch#0
  (number~) startProcessing::$9 ← (word~) startProcessing::$8 * (number) 8
  (byte*~) startProcessing::$10 ← (byte*) CHARGEN#0 + (number~) startProcessing::$9
  (byte*) startProcessing::chargenData#0 ← (byte*~) startProcessing::$10
  asm { sei  }
  *((byte*) PROCPORT#0) ← (byte) PROCPORT_RAM_CHARROM#0
  (byte) startProcessing::i1#0 ← (byte) 0
  to:startProcessing::@9
startProcessing::@9: scope:[startProcessing]  from startProcessing::@8 startProcessing::@9
  (byte*) startProcessing::screenPtr#2 ← phi( startProcessing::@8/(byte*) startProcessing::screenPtr#0 startProcessing::@9/(byte*) startProcessing::screenPtr#2 )
  (byte) startProcessing::spriteCol#2 ← phi( startProcessing::@8/(byte) startProcessing::spriteCol#0 startProcessing::@9/(byte) startProcessing::spriteCol#2 )
  (byte) startProcessing::spriteIdx#2 ← phi( startProcessing::@8/(byte) startProcessing::spriteIdx#0 startProcessing::@9/(byte) startProcessing::spriteIdx#2 )
  (byte) startProcessing::center_y#4 ← phi( startProcessing::@8/(byte) startProcessing::center_y#1 startProcessing::@9/(byte) startProcessing::center_y#4 )
  (byte) startProcessing::center_x#4 ← phi( startProcessing::@8/(byte) startProcessing::center_x#1 startProcessing::@9/(byte) startProcessing::center_x#4 )
  (byte) startProcessing::i1#2 ← phi( startProcessing::@8/(byte) startProcessing::i1#0 startProcessing::@9/(byte) startProcessing::i1#1 )
  (byte*) startProcessing::spriteData#2 ← phi( startProcessing::@8/(byte*) startProcessing::spriteData#0 startProcessing::@9/(byte*) startProcessing::spriteData#1 )
  (byte*) startProcessing::chargenData#2 ← phi( startProcessing::@8/(byte*) startProcessing::chargenData#0 startProcessing::@9/(byte*) startProcessing::chargenData#1 )
  *((byte*) startProcessing::spriteData#2) ← *((byte*) startProcessing::chargenData#2)
  (byte*) startProcessing::spriteData#1 ← (byte*) startProcessing::spriteData#2 + (number) 3
  (byte*) startProcessing::chargenData#1 ← ++ (byte*) startProcessing::chargenData#2
  (byte) startProcessing::i1#1 ← (byte) startProcessing::i1#2 + rangenext(0,7)
  (bool~) startProcessing::$29 ← (byte) startProcessing::i1#1 != rangelast(0,7)
  if((bool~) startProcessing::$29) goto startProcessing::@9
  to:startProcessing::@10
startProcessing::@10: scope:[startProcessing]  from startProcessing::@9
  (byte*) startProcessing::screenPtr#1 ← phi( startProcessing::@9/(byte*) startProcessing::screenPtr#2 )
  (byte) startProcessing::spriteCol#1 ← phi( startProcessing::@9/(byte) startProcessing::spriteCol#2 )
  (byte) startProcessing::spriteIdx#1 ← phi( startProcessing::@9/(byte) startProcessing::spriteIdx#2 )
  (byte) startProcessing::center_y#2 ← phi( startProcessing::@9/(byte) startProcessing::center_y#4 )
  (byte) startProcessing::center_x#2 ← phi( startProcessing::@9/(byte) startProcessing::center_x#4 )
  *((byte*) PROCPORT#0) ← (byte) PROCPORT_RAM_IO#0
  asm { cli  }
  (word~) startProcessing::$11 ← ((word)) (byte) startProcessing::center_x#2
  (number~) startProcessing::$12 ← (word~) startProcessing::$11 * (number) 8
  (number~) startProcessing::$13 ← (byte) BORDER_XPOS_LEFT#0 + (number~) startProcessing::$12
  (number~) startProcessing::$14 ← (number~) startProcessing::$13 << (number) 4
  (word) startProcessing::spriteX#0 ← (number~) startProcessing::$14
  (word~) startProcessing::$15 ← ((word)) (byte) startProcessing::center_y#2
  (number~) startProcessing::$16 ← (word~) startProcessing::$15 * (number) 8
  (number~) startProcessing::$17 ← (byte) BORDER_YPOS_TOP#0 + (number~) startProcessing::$16
  (number~) startProcessing::$18 ← (number~) startProcessing::$17 << (number) 4
  (word) startProcessing::spriteY#0 ← (number~) startProcessing::$18
  (byte*~) startProcessing::$19 ← (byte*) SPRITE_DATA#0 / (number) $40
  (byte~) startProcessing::$20 ← ((byte)) (byte*~) startProcessing::$19
  (byte~) startProcessing::$21 ← (byte~) startProcessing::$20 + (byte) startProcessing::spriteIdx#1
  (byte) startProcessing::spritePtr#0 ← (byte~) startProcessing::$21
  (number~) startProcessing::$22 ← (byte) startProcessing::spriteIdx#1 * (number) 8
  (word~) startProcessing::$23 ← ((word)) (number~) startProcessing::$22
  (byte~) startProcessing::$31 ← (byte) startProcessing::spriteIdx#1 * (const byte) SIZEOF_STRUCT_PROCESSINGSPRITE
  (word*) startProcessing::$32 ← (word*)(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X
  *((word*) startProcessing::$32 + (byte~) startProcessing::$31) ← (word) startProcessing::spriteX#0
  (word*) startProcessing::$33 ← (word*)(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y
  *((word*) startProcessing::$33 + (byte~) startProcessing::$31) ← (word) startProcessing::spriteY#0
  (word*) startProcessing::$34 ← (word*)(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX
  *((word*) startProcessing::$34 + (byte~) startProcessing::$31) ← (word~) startProcessing::$23
  (word*) startProcessing::$35 ← (word*)(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY
  *((word*) startProcessing::$35 + (byte~) startProcessing::$31) ← (number) $3c
  (byte*) startProcessing::$36 ← (byte*)(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID
  *((byte*) startProcessing::$36 + (byte~) startProcessing::$31) ← (byte) startProcessing::spriteIdx#1
  (byte*) startProcessing::$37 ← (byte*)(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR
  *((byte*) startProcessing::$37 + (byte~) startProcessing::$31) ← (byte) startProcessing::spritePtr#0
  (byte*) startProcessing::$38 ← (byte*)(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL
  *((byte*) startProcessing::$38 + (byte~) startProcessing::$31) ← (byte) startProcessing::spriteCol#1
  (byte*) startProcessing::$39 ← (byte*)(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
  *((byte*) startProcessing::$39 + (byte~) startProcessing::$31) ← (const byte) STATUS_NEW
  (byte**) startProcessing::$40 ← (byte**)(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR
  *((byte**) startProcessing::$40 + (byte~) startProcessing::$31) ← (byte*) startProcessing::screenPtr#1
  to:startProcessing::@return
startProcessing::@return: scope:[startProcessing]  from startProcessing::@10
  return 
  to:@return
@18: scope:[]  from @26
  (byte*) SCREEN_COPY#23 ← phi( @26/(byte*) SCREEN_COPY#25 )
  (word*) SQUARES#41 ← phi( @26/(word*) SQUARES#43 )
  (byte*) heap_head#43 ← phi( @26/(byte*) heap_head#6 )
  (byte) NUM_SQUARES#30 ← phi( @26/(byte) NUM_SQUARES#32 )
  (byte*) SCREEN_DIST#13 ← phi( @26/(byte*) SCREEN_DIST#0 )
  (number~) $2 ← (byte) BORDER_XPOS_LEFT#0 - (number) 8
  (word~) $3 ← ((word)) (number~) $2
  (word~) $4 ← (word~) $3 << (number) 4
  (word) XPOS_LEFTMOST#0 ← (word~) $4
  (word~) $5 ← ((word)) (word) BORDER_XPOS_RIGHT#0
  (word~) $6 ← (word~) $5 << (number) 4
  (word) XPOS_RIGHTMOST#0 ← (word~) $6
  (number~) $7 ← (byte) BORDER_YPOS_TOP#0 - (number) 8
  (word~) $8 ← ((word)) (number~) $7
  (word~) $9 ← (word~) $8 << (number) 4
  (word) YPOS_TOPMOST#0 ← (word~) $9
  (word~) $10 ← ((word)) (byte) BORDER_YPOS_BOTTOM#0
  (word~) $11 ← (word~) $10 << (number) 4
  (word) YPOS_BOTTOMMOST#0 ← (word~) $11
  to:@22
processChars: scope:[processChars]  from irqBottom::@1
  (byte) processChars::numActive#0 ← (number) 0
  (number~) processChars::$1 ← (byte) NUM_PROCESSING#0 - (number) 1
  (byte) processChars::i#0 ← (byte) 0
  to:processChars::@2
processChars::@2: scope:[processChars]  from processChars processChars::@3
  (byte) processChars::numActive#9 ← phi( processChars/(byte) processChars::numActive#0 processChars::@3/(byte) processChars::numActive#8 )
  (byte) processChars::i#2 ← phi( processChars/(byte) processChars::i#0 processChars::@3/(byte) processChars::i#1 )
  (byte~) processChars::$37 ← (byte) processChars::i#2 * (const byte) SIZEOF_STRUCT_PROCESSINGSPRITE
  (struct ProcessingSprite*~) processChars::$2 ← (struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) processChars::$37
  (struct ProcessingSprite*) processChars::processing#0 ← (struct ProcessingSprite*~) processChars::$2
  (byte*) processChars::$40 ← (byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID
  (number~) processChars::$3 ← (number) 1 << *((byte*) processChars::$40)
  (byte) processChars::bitmask#0 ← (number~) processChars::$3
  (byte*) processChars::$41 ← (byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
  (bool~) processChars::$4 ← *((byte*) processChars::$41) != (const byte) STATUS_FREE
  (bool~) processChars::$5 ← ! (bool~) processChars::$4
  if((bool~) processChars::$5) goto processChars::@3
  to:processChars::@13
processChars::@3: scope:[processChars]  from processChars::@2 processChars::@8
  (byte) processChars::numActive#8 ← phi( processChars::@2/(byte) processChars::numActive#9 processChars::@8/(byte) processChars::numActive#1 )
  (byte) processChars::i#3 ← phi( processChars::@2/(byte) processChars::i#2 processChars::@8/(byte) processChars::i#5 )
  (byte) processChars::i#1 ← (byte) processChars::i#3 + rangenext(0,processChars::$1)
  (bool~) processChars::$34 ← (byte) processChars::i#1 != rangelast(0,processChars::$1)
  if((bool~) processChars::$34) goto processChars::@2
  to:processChars::@15
processChars::@13: scope:[processChars]  from processChars::@2
  (byte) processChars::numActive#13 ← phi( processChars::@2/(byte) processChars::numActive#9 )
  (byte) processChars::i#11 ← phi( processChars::@2/(byte) processChars::i#2 )
  (byte) processChars::bitmask#5 ← phi( processChars::@2/(byte) processChars::bitmask#0 )
  (struct ProcessingSprite*) processChars::processing#1 ← phi( processChars::@2/(struct ProcessingSprite*) processChars::processing#0 )
  (byte*) processChars::$42 ← (byte*)(struct ProcessingSprite*) processChars::processing#1 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
  (bool~) processChars::$6 ← *((byte*) processChars::$42) == (const byte) STATUS_NEW
  (bool~) processChars::$7 ← ! (bool~) processChars::$6
  if((bool~) processChars::$7) goto processChars::@4
  to:processChars::@14
processChars::@4: scope:[processChars]  from processChars::@13 processChars::@14
  (byte) processChars::numActive#12 ← phi( processChars::@13/(byte) processChars::numActive#13 processChars::@14/(byte) processChars::numActive#14 )
  (byte) processChars::i#8 ← phi( processChars::@13/(byte) processChars::i#11 processChars::@14/(byte) processChars::i#12 )
  (byte) processChars::bitmask#6 ← phi( processChars::@13/(byte) processChars::bitmask#5 processChars::@14/(byte) processChars::bitmask#1 )
  (struct ProcessingSprite*) processChars::processing#2 ← phi( processChars::@13/(struct ProcessingSprite*) processChars::processing#1 processChars::@14/(struct ProcessingSprite*) processChars::processing#3 )
  (word*) processChars::$43 ← (word*)(struct ProcessingSprite*) processChars::processing#2 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X
  (word~) processChars::$10 ← *((word*) processChars::$43) >> (number) 4
  (word) processChars::xpos#0 ← (word~) processChars::$10
  (byte~) processChars::$11 ← > (word) processChars::xpos#0
  (bool~) processChars::$66 ← (number) 0 != (byte~) processChars::$11
  if((bool~) processChars::$66) goto processChars::@5
  to:processChars::@9
processChars::@14: scope:[processChars]  from processChars::@13
  (byte) processChars::numActive#14 ← phi( processChars::@13/(byte) processChars::numActive#13 )
  (byte) processChars::i#12 ← phi( processChars::@13/(byte) processChars::i#11 )
  (byte) processChars::bitmask#1 ← phi( processChars::@13/(byte) processChars::bitmask#5 )
  (struct ProcessingSprite*) processChars::processing#3 ← phi( processChars::@13/(struct ProcessingSprite*) processChars::processing#1 )
  (byte**) processChars::$44 ← (byte**)(struct ProcessingSprite*) processChars::processing#3 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR
  *(*((byte**) processChars::$44)) ← (byte) ' '
  *((byte*) SPRITES_ENABLE#0) ← *((byte*) SPRITES_ENABLE#0) | (byte) processChars::bitmask#1
  (byte*) processChars::$45 ← (byte*)(struct ProcessingSprite*) processChars::processing#3 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL
  (byte*) processChars::$46 ← (byte*)(struct ProcessingSprite*) processChars::processing#3 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID
  *((byte*) SPRITES_COLS#0 + *((byte*) processChars::$46)) ← *((byte*) processChars::$45)
  (byte*~) processChars::$8 ← (byte*) SCREEN#0 + (word) SPRITE_PTRS#0
  (byte*) processChars::$47 ← (byte*)(struct ProcessingSprite*) processChars::processing#3 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID
  (byte*~) processChars::$9 ← (byte*~) processChars::$8 + *((byte*) processChars::$47)
  (byte*) processChars::$48 ← (byte*)(struct ProcessingSprite*) processChars::processing#3 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR
  *((byte*~) processChars::$9) ← *((byte*) processChars::$48)
  (byte*) processChars::$49 ← (byte*)(struct ProcessingSprite*) processChars::processing#3 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
  *((byte*) processChars::$49) ← (const byte) STATUS_PROCESSING
  to:processChars::@4
processChars::@5: scope:[processChars]  from processChars::@4
  (byte) processChars::numActive#10 ← phi( processChars::@4/(byte) processChars::numActive#12 )
  (struct ProcessingSprite*) processChars::processing#7 ← phi( processChars::@4/(struct ProcessingSprite*) processChars::processing#2 )
  (word) processChars::xpos#3 ← phi( processChars::@4/(word) processChars::xpos#0 )
  (byte) processChars::i#6 ← phi( processChars::@4/(byte) processChars::i#8 )
  (byte) processChars::bitmask#2 ← phi( processChars::@4/(byte) processChars::bitmask#6 )
  *((byte*) SPRITES_XMSB#0) ← *((byte*) SPRITES_XMSB#0) | (byte) processChars::bitmask#2
  to:processChars::@6
processChars::@9: scope:[processChars]  from processChars::@4
  (byte) processChars::numActive#11 ← phi( processChars::@4/(byte) processChars::numActive#12 )
  (struct ProcessingSprite*) processChars::processing#8 ← phi( processChars::@4/(struct ProcessingSprite*) processChars::processing#2 )
  (word) processChars::xpos#4 ← phi( processChars::@4/(word) processChars::xpos#0 )
  (byte) processChars::i#7 ← phi( processChars::@4/(byte) processChars::i#8 )
  (byte) processChars::bitmask#3 ← phi( processChars::@4/(byte) processChars::bitmask#6 )
  (number~) processChars::$12 ← (number) $ff ^ (byte) processChars::bitmask#3
  *((byte*) SPRITES_XMSB#0) ← *((byte*) SPRITES_XMSB#0) & (number~) processChars::$12
  to:processChars::@6
processChars::@6: scope:[processChars]  from processChars::@5 processChars::@9
  (byte) processChars::numActive#7 ← phi( processChars::@5/(byte) processChars::numActive#10 processChars::@9/(byte) processChars::numActive#11 )
  (byte) processChars::bitmask#7 ← phi( processChars::@5/(byte) processChars::bitmask#2 processChars::@9/(byte) processChars::bitmask#3 )
  (struct ProcessingSprite*) processChars::processing#4 ← phi( processChars::@5/(struct ProcessingSprite*) processChars::processing#7 processChars::@9/(struct ProcessingSprite*) processChars::processing#8 )
  (word) processChars::xpos#1 ← phi( processChars::@5/(word) processChars::xpos#3 processChars::@9/(word) processChars::xpos#4 )
  (byte) processChars::i#4 ← phi( processChars::@5/(byte) processChars::i#6 processChars::@9/(byte) processChars::i#7 )
  (number~) processChars::$13 ← (byte) processChars::i#4 * (number) 2
  (byte~) processChars::$14 ← ((byte)) (word) processChars::xpos#1
  *((byte*) SPRITES_XPOS#0 + (number~) processChars::$13) ← (byte~) processChars::$14
  (word*) processChars::$50 ← (word*)(struct ProcessingSprite*) processChars::processing#4 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y
  (word~) processChars::$15 ← *((word*) processChars::$50) >> (number) 4
  (byte~) processChars::$16 ← ((byte)) (word~) processChars::$15
  (byte) processChars::ypos#0 ← (byte~) processChars::$16
  (number~) processChars::$17 ← (byte) processChars::i#4 * (number) 2
  *((byte*) SPRITES_YPOS#0 + (number~) processChars::$17) ← (byte) processChars::ypos#0
  (word*) processChars::$51 ← (word*)(struct ProcessingSprite*) processChars::processing#4 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X
  (bool~) processChars::$18 ← *((word*) processChars::$51) < (word) XPOS_LEFTMOST#0
  (word*) processChars::$52 ← (word*)(struct ProcessingSprite*) processChars::processing#4 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X
  (bool~) processChars::$19 ← *((word*) processChars::$52) > (word) XPOS_RIGHTMOST#0
  (bool~) processChars::$20 ← (bool~) processChars::$18 || (bool~) processChars::$19
  (word*) processChars::$53 ← (word*)(struct ProcessingSprite*) processChars::processing#4 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y
  (bool~) processChars::$21 ← *((word*) processChars::$53) < (word) YPOS_TOPMOST#0
  (bool~) processChars::$22 ← (bool~) processChars::$20 || (bool~) processChars::$21
  (word*) processChars::$54 ← (word*)(struct ProcessingSprite*) processChars::processing#4 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y
  (bool~) processChars::$23 ← *((word*) processChars::$54) > (word) YPOS_BOTTOMMOST#0
  (bool~) processChars::$24 ← (bool~) processChars::$22 || (bool~) processChars::$23
  if((bool~) processChars::$24) goto processChars::@7
  to:processChars::@11
processChars::@7: scope:[processChars]  from processChars::@6
  (byte) processChars::i#10 ← phi( processChars::@6/(byte) processChars::i#4 )
  (byte) processChars::numActive#5 ← phi( processChars::@6/(byte) processChars::numActive#7 )
  (byte) processChars::bitmask#4 ← phi( processChars::@6/(byte) processChars::bitmask#7 )
  (struct ProcessingSprite*) processChars::processing#5 ← phi( processChars::@6/(struct ProcessingSprite*) processChars::processing#4 )
  (byte*) processChars::$55 ← (byte*)(struct ProcessingSprite*) processChars::processing#5 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
  *((byte*) processChars::$55) ← (const byte) STATUS_FREE
  (number~) processChars::$33 ← (number) $ff ^ (byte) processChars::bitmask#4
  *((byte*) SPRITES_ENABLE#0) ← *((byte*) SPRITES_ENABLE#0) & (number~) processChars::$33
  to:processChars::@8
processChars::@11: scope:[processChars]  from processChars::@6
  (byte) processChars::i#9 ← phi( processChars::@6/(byte) processChars::i#4 )
  (byte) processChars::numActive#4 ← phi( processChars::@6/(byte) processChars::numActive#7 )
  (byte) processChars::ypos#1 ← phi( processChars::@6/(byte) processChars::ypos#0 )
  (struct ProcessingSprite*) processChars::processing#6 ← phi( processChars::@6/(struct ProcessingSprite*) processChars::processing#4 )
  (word) processChars::xpos#2 ← phi( processChars::@6/(word) processChars::xpos#1 )
  (number~) processChars::$25 ← (word) processChars::xpos#2 / (number) 8
  (byte~) processChars::$26 ← ((byte)) (number~) processChars::$25
  (number~) processChars::$27 ← (byte) BORDER_XPOS_LEFT#0 / (number) 8
  (number~) processChars::$28 ← (byte~) processChars::$26 - (number~) processChars::$27
  (byte) processChars::xchar#0 ← (number~) processChars::$28
  (byte~) processChars::$38 ← (byte) processChars::xchar#0 * (const byte) SIZEOF_WORD
  (word*) processChars::$56 ← (word*)(struct ProcessingSprite*) processChars::processing#6 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX
  (word*) processChars::$57 ← (word*)(struct ProcessingSprite*) processChars::processing#6 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX
  *((word*) processChars::$57) ← *((word*) processChars::$56) + *((word[$28]) VXSIN#0 + (byte~) processChars::$38)
  (word*) processChars::$58 ← (word*)(struct ProcessingSprite*) processChars::processing#6 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X
  (word*) processChars::$59 ← (word*)(struct ProcessingSprite*) processChars::processing#6 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX
  (word*) processChars::$60 ← (word*)(struct ProcessingSprite*) processChars::processing#6 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X
  *((word*) processChars::$60) ← *((word*) processChars::$58) + *((word*) processChars::$59)
  (number~) processChars::$29 ← (byte) processChars::ypos#1 / (number) 8
  (byte~) processChars::$30 ← ((byte)) (number~) processChars::$29
  (number~) processChars::$31 ← (byte) BORDER_YPOS_TOP#0 / (number) 8
  (number~) processChars::$32 ← (byte~) processChars::$30 - (number~) processChars::$31
  (byte) processChars::ychar#0 ← (number~) processChars::$32
  (byte~) processChars::$39 ← (byte) processChars::ychar#0 * (const byte) SIZEOF_WORD
  (word*) processChars::$61 ← (word*)(struct ProcessingSprite*) processChars::processing#6 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY
  (word*) processChars::$62 ← (word*)(struct ProcessingSprite*) processChars::processing#6 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY
  *((word*) processChars::$62) ← *((word*) processChars::$61) + *((word[$19]) VYSIN#0 + (byte~) processChars::$39)
  (word*) processChars::$63 ← (word*)(struct ProcessingSprite*) processChars::processing#6 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y
  (word*) processChars::$64 ← (word*)(struct ProcessingSprite*) processChars::processing#6 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY
  (word*) processChars::$65 ← (word*)(struct ProcessingSprite*) processChars::processing#6 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y
  *((word*) processChars::$65) ← *((word*) processChars::$63) + *((word*) processChars::$64)
  to:processChars::@8
processChars::@8: scope:[processChars]  from processChars::@11 processChars::@7
  (byte) processChars::i#5 ← phi( processChars::@11/(byte) processChars::i#9 processChars::@7/(byte) processChars::i#10 )
  (byte) processChars::numActive#2 ← phi( processChars::@11/(byte) processChars::numActive#4 processChars::@7/(byte) processChars::numActive#5 )
  (byte) processChars::numActive#1 ← ++ (byte) processChars::numActive#2
  to:processChars::@3
processChars::@15: scope:[processChars]  from processChars::@3
  (byte) processChars::numActive#6 ← phi( processChars::@3/(byte) processChars::numActive#8 )
  (bool~) processChars::$0 ← ! (bool) DEBUG#0
  if((bool~) processChars::$0) goto processChars::@return
  to:processChars::@16
processChars::@16: scope:[processChars]  from processChars::@15
  (byte) processChars::numActive#3 ← phi( processChars::@15/(byte) processChars::numActive#6 )
  (byte*~) processChars::$35 ← (byte*) SCREEN#0 + (number) $3e7
  (byte~) processChars::$36 ← (byte) '0' + (byte) processChars::numActive#3
  *((byte*~) processChars::$35) ← (byte~) processChars::$36
  to:processChars::@return
processChars::@return: scope:[processChars]  from processChars::@15 processChars::@16
  return 
  to:@return
init_dist_screen: scope:[init_dist_screen]  from main
  (byte*) init_dist_screen::screen#2 ← phi( main/(byte*) init_dist_screen::screen#0 )
  (word*) SQUARES#23 ← phi( main/(word*) SQUARES#21 )
  (byte*) heap_head#28 ← phi( main/(byte*) heap_head#26 )
  (byte) NUM_SQUARES#3 ← (number) $30
  call init_squares 
  to:init_dist_screen::@15
init_dist_screen::@15: scope:[init_dist_screen]  from init_dist_screen
  (byte) NUM_SQUARES#45 ← phi( init_dist_screen/(byte) NUM_SQUARES#3 )
  (byte*) init_dist_screen::screen#1 ← phi( init_dist_screen/(byte*) init_dist_screen::screen#2 )
  (word*) SQUARES#14 ← phi( init_dist_screen/(word*) SQUARES#2 )
  (byte*) heap_head#20 ← phi( init_dist_screen/(byte*) heap_head#4 )
  (byte*) heap_head#9 ← (byte*) heap_head#20
  (word*) SQUARES#5 ← (word*) SQUARES#14
  (byte*) init_dist_screen::screen_topline#0 ← (byte*) init_dist_screen::screen#1
  (byte*~) init_dist_screen::$1 ← (byte*) init_dist_screen::screen#1 + (number) $28*(number) $18
  (byte*) init_dist_screen::screen_bottomline#0 ← (byte*~) init_dist_screen::$1
  (byte) init_dist_screen::y#0 ← (byte) 0
  to:init_dist_screen::@1
init_dist_screen::@1: scope:[init_dist_screen]  from init_dist_screen::@11 init_dist_screen::@15
  (byte*) heap_head#57 ← phi( init_dist_screen::@11/(byte*) heap_head#29 init_dist_screen::@15/(byte*) heap_head#9 )
  (byte*) init_dist_screen::screen_bottomline#13 ← phi( init_dist_screen::@11/(byte*) init_dist_screen::screen_bottomline#1 init_dist_screen::@15/(byte*) init_dist_screen::screen_bottomline#0 )
  (byte*) init_dist_screen::screen_topline#13 ← phi( init_dist_screen::@11/(byte*) init_dist_screen::screen_topline#1 init_dist_screen::@15/(byte*) init_dist_screen::screen_topline#0 )
  (byte) NUM_SQUARES#43 ← phi( init_dist_screen::@11/(byte) NUM_SQUARES#16 init_dist_screen::@15/(byte) NUM_SQUARES#45 )
  (word*) SQUARES#35 ← phi( init_dist_screen::@11/(word*) SQUARES#24 init_dist_screen::@15/(word*) SQUARES#5 )
  (byte) init_dist_screen::y#2 ← phi( init_dist_screen::@11/(byte) init_dist_screen::y#1 init_dist_screen::@15/(byte) init_dist_screen::y#0 )
  (number~) init_dist_screen::$2 ← (byte) init_dist_screen::y#2 * (number) 2
  (byte) init_dist_screen::y2#0 ← (number~) init_dist_screen::$2
  (bool~) init_dist_screen::$3 ← (byte) init_dist_screen::y2#0 >= (number) $18
  if((bool~) init_dist_screen::$3) goto init_dist_screen::@2
  to:init_dist_screen::@3
init_dist_screen::@2: scope:[init_dist_screen]  from init_dist_screen::@1
  (byte*) heap_head#54 ← phi( init_dist_screen::@1/(byte*) heap_head#57 )
  (byte) init_dist_screen::y#12 ← phi( init_dist_screen::@1/(byte) init_dist_screen::y#2 )
  (byte*) init_dist_screen::screen_bottomline#11 ← phi( init_dist_screen::@1/(byte*) init_dist_screen::screen_bottomline#13 )
  (byte*) init_dist_screen::screen_topline#11 ← phi( init_dist_screen::@1/(byte*) init_dist_screen::screen_topline#13 )
  (byte) NUM_SQUARES#39 ← phi( init_dist_screen::@1/(byte) NUM_SQUARES#43 )
  (word*) SQUARES#27 ← phi( init_dist_screen::@1/(word*) SQUARES#35 )
  (byte) init_dist_screen::y2#1 ← phi( init_dist_screen::@1/(byte) init_dist_screen::y2#0 )
  (number~) init_dist_screen::$6 ← (byte) init_dist_screen::y2#1 - (number) $18
  (number~) init_dist_screen::$7 ← (number~) init_dist_screen::$6
  to:init_dist_screen::@4
init_dist_screen::@3: scope:[init_dist_screen]  from init_dist_screen::@1
  (byte*) heap_head#55 ← phi( init_dist_screen::@1/(byte*) heap_head#57 )
  (byte) init_dist_screen::y#13 ← phi( init_dist_screen::@1/(byte) init_dist_screen::y#2 )
  (byte*) init_dist_screen::screen_bottomline#12 ← phi( init_dist_screen::@1/(byte*) init_dist_screen::screen_bottomline#13 )
  (byte*) init_dist_screen::screen_topline#12 ← phi( init_dist_screen::@1/(byte*) init_dist_screen::screen_topline#13 )
  (byte) NUM_SQUARES#40 ← phi( init_dist_screen::@1/(byte) NUM_SQUARES#43 )
  (word*) SQUARES#28 ← phi( init_dist_screen::@1/(word*) SQUARES#35 )
  (byte) init_dist_screen::y2#2 ← phi( init_dist_screen::@1/(byte) init_dist_screen::y2#0 )
  (number~) init_dist_screen::$4 ← (number) $18 - (byte) init_dist_screen::y2#2
  (number~) init_dist_screen::$5 ← (number~) init_dist_screen::$4
  to:init_dist_screen::@4
init_dist_screen::@4: scope:[init_dist_screen]  from init_dist_screen::@2 init_dist_screen::@3
  (byte*) heap_head#52 ← phi( init_dist_screen::@2/(byte*) heap_head#54 init_dist_screen::@3/(byte*) heap_head#55 )
  (byte) init_dist_screen::y#11 ← phi( init_dist_screen::@2/(byte) init_dist_screen::y#12 init_dist_screen::@3/(byte) init_dist_screen::y#13 )
  (byte*) init_dist_screen::screen_bottomline#10 ← phi( init_dist_screen::@2/(byte*) init_dist_screen::screen_bottomline#11 init_dist_screen::@3/(byte*) init_dist_screen::screen_bottomline#12 )
  (byte*) init_dist_screen::screen_topline#10 ← phi( init_dist_screen::@2/(byte*) init_dist_screen::screen_topline#11 init_dist_screen::@3/(byte*) init_dist_screen::screen_topline#12 )
  (byte) NUM_SQUARES#36 ← phi( init_dist_screen::@2/(byte) NUM_SQUARES#39 init_dist_screen::@3/(byte) NUM_SQUARES#40 )
  (word*) SQUARES#18 ← phi( init_dist_screen::@2/(word*) SQUARES#27 init_dist_screen::@3/(word*) SQUARES#28 )
  (number~) init_dist_screen::$8 ← phi( init_dist_screen::@2/(number~) init_dist_screen::$7 init_dist_screen::@3/(number~) init_dist_screen::$5 )
  (byte) init_dist_screen::yd#0 ← (number~) init_dist_screen::$8
  (byte) sqr::val#0 ← (byte) init_dist_screen::yd#0
  call sqr 
  (word) sqr::return#2 ← (word) sqr::return#1
  to:init_dist_screen::@16
init_dist_screen::@16: scope:[init_dist_screen]  from init_dist_screen::@4
  (byte*) heap_head#50 ← phi( init_dist_screen::@4/(byte*) heap_head#52 )
  (byte) init_dist_screen::y#10 ← phi( init_dist_screen::@4/(byte) init_dist_screen::y#11 )
  (byte*) init_dist_screen::screen_bottomline#9 ← phi( init_dist_screen::@4/(byte*) init_dist_screen::screen_bottomline#10 )
  (byte*) init_dist_screen::screen_topline#9 ← phi( init_dist_screen::@4/(byte*) init_dist_screen::screen_topline#10 )
  (byte) NUM_SQUARES#33 ← phi( init_dist_screen::@4/(byte) NUM_SQUARES#36 )
  (word*) SQUARES#40 ← phi( init_dist_screen::@4/(word*) SQUARES#18 )
  (word) sqr::return#5 ← phi( init_dist_screen::@4/(word) sqr::return#2 )
  (word~) init_dist_screen::$9 ← (word) sqr::return#5
  (word) init_dist_screen::yds#0 ← (word~) init_dist_screen::$9
  (byte) init_dist_screen::x#0 ← (number) 0
  (byte) init_dist_screen::xb#0 ← (number) $27
  to:init_dist_screen::@5
init_dist_screen::@5: scope:[init_dist_screen]  from init_dist_screen::@16 init_dist_screen::@18
  (byte*) heap_head#48 ← phi( init_dist_screen::@16/(byte*) heap_head#50 init_dist_screen::@18/(byte*) heap_head#33 )
  (byte) init_dist_screen::y#9 ← phi( init_dist_screen::@16/(byte) init_dist_screen::y#10 init_dist_screen::@18/(byte) init_dist_screen::y#4 )
  (byte) init_dist_screen::xb#7 ← phi( init_dist_screen::@16/(byte) init_dist_screen::xb#0 init_dist_screen::@18/(byte) init_dist_screen::xb#1 )
  (byte*) init_dist_screen::screen_bottomline#8 ← phi( init_dist_screen::@16/(byte*) init_dist_screen::screen_bottomline#9 init_dist_screen::@18/(byte*) init_dist_screen::screen_bottomline#2 )
  (byte*) init_dist_screen::screen_topline#8 ← phi( init_dist_screen::@16/(byte*) init_dist_screen::screen_topline#9 init_dist_screen::@18/(byte*) init_dist_screen::screen_topline#2 )
  (byte) NUM_SQUARES#29 ← phi( init_dist_screen::@16/(byte) NUM_SQUARES#33 init_dist_screen::@18/(byte) NUM_SQUARES#20 )
  (word) init_dist_screen::yds#5 ← phi( init_dist_screen::@16/(word) init_dist_screen::yds#0 init_dist_screen::@18/(word) init_dist_screen::yds#6 )
  (word*) SQUARES#36 ← phi( init_dist_screen::@16/(word*) SQUARES#40 init_dist_screen::@18/(word*) SQUARES#31 )
  (byte) init_dist_screen::x#2 ← phi( init_dist_screen::@16/(byte) init_dist_screen::x#0 init_dist_screen::@18/(byte) init_dist_screen::x#1 )
  (number~) init_dist_screen::$10 ← (byte) init_dist_screen::x#2 * (number) 2
  (byte) init_dist_screen::x2#0 ← (number~) init_dist_screen::$10
  (bool~) init_dist_screen::$11 ← (byte) init_dist_screen::x2#0 >= (number) $27
  if((bool~) init_dist_screen::$11) goto init_dist_screen::@6
  to:init_dist_screen::@7
init_dist_screen::@6: scope:[init_dist_screen]  from init_dist_screen::@5
  (byte*) heap_head#45 ← phi( init_dist_screen::@5/(byte*) heap_head#48 )
  (byte) init_dist_screen::y#7 ← phi( init_dist_screen::@5/(byte) init_dist_screen::y#9 )
  (byte) init_dist_screen::xb#5 ← phi( init_dist_screen::@5/(byte) init_dist_screen::xb#7 )
  (byte*) init_dist_screen::screen_bottomline#6 ← phi( init_dist_screen::@5/(byte*) init_dist_screen::screen_bottomline#8 )
  (byte) init_dist_screen::x#6 ← phi( init_dist_screen::@5/(byte) init_dist_screen::x#2 )
  (byte*) init_dist_screen::screen_topline#6 ← phi( init_dist_screen::@5/(byte*) init_dist_screen::screen_topline#8 )
  (byte) NUM_SQUARES#24 ← phi( init_dist_screen::@5/(byte) NUM_SQUARES#29 )
  (word) init_dist_screen::yds#3 ← phi( init_dist_screen::@5/(word) init_dist_screen::yds#5 )
  (word*) SQUARES#29 ← phi( init_dist_screen::@5/(word*) SQUARES#36 )
  (byte) init_dist_screen::x2#1 ← phi( init_dist_screen::@5/(byte) init_dist_screen::x2#0 )
  (number~) init_dist_screen::$14 ← (byte) init_dist_screen::x2#1 - (number) $27
  (number~) init_dist_screen::$15 ← (number~) init_dist_screen::$14
  to:init_dist_screen::@8
init_dist_screen::@7: scope:[init_dist_screen]  from init_dist_screen::@5
  (byte*) heap_head#46 ← phi( init_dist_screen::@5/(byte*) heap_head#48 )
  (byte) init_dist_screen::y#8 ← phi( init_dist_screen::@5/(byte) init_dist_screen::y#9 )
  (byte) init_dist_screen::xb#6 ← phi( init_dist_screen::@5/(byte) init_dist_screen::xb#7 )
  (byte*) init_dist_screen::screen_bottomline#7 ← phi( init_dist_screen::@5/(byte*) init_dist_screen::screen_bottomline#8 )
  (byte) init_dist_screen::x#7 ← phi( init_dist_screen::@5/(byte) init_dist_screen::x#2 )
  (byte*) init_dist_screen::screen_topline#7 ← phi( init_dist_screen::@5/(byte*) init_dist_screen::screen_topline#8 )
  (byte) NUM_SQUARES#25 ← phi( init_dist_screen::@5/(byte) NUM_SQUARES#29 )
  (word) init_dist_screen::yds#4 ← phi( init_dist_screen::@5/(word) init_dist_screen::yds#5 )
  (word*) SQUARES#30 ← phi( init_dist_screen::@5/(word*) SQUARES#36 )
  (byte) init_dist_screen::x2#2 ← phi( init_dist_screen::@5/(byte) init_dist_screen::x2#0 )
  (number~) init_dist_screen::$12 ← (number) $27 - (byte) init_dist_screen::x2#2
  (number~) init_dist_screen::$13 ← (number~) init_dist_screen::$12
  to:init_dist_screen::@8
init_dist_screen::@8: scope:[init_dist_screen]  from init_dist_screen::@6 init_dist_screen::@7
  (byte*) heap_head#42 ← phi( init_dist_screen::@6/(byte*) heap_head#45 init_dist_screen::@7/(byte*) heap_head#46 )
  (byte) init_dist_screen::y#6 ← phi( init_dist_screen::@6/(byte) init_dist_screen::y#7 init_dist_screen::@7/(byte) init_dist_screen::y#8 )
  (byte) init_dist_screen::xb#4 ← phi( init_dist_screen::@6/(byte) init_dist_screen::xb#5 init_dist_screen::@7/(byte) init_dist_screen::xb#6 )
  (byte*) init_dist_screen::screen_bottomline#5 ← phi( init_dist_screen::@6/(byte*) init_dist_screen::screen_bottomline#6 init_dist_screen::@7/(byte*) init_dist_screen::screen_bottomline#7 )
  (byte) init_dist_screen::x#5 ← phi( init_dist_screen::@6/(byte) init_dist_screen::x#6 init_dist_screen::@7/(byte) init_dist_screen::x#7 )
  (byte*) init_dist_screen::screen_topline#5 ← phi( init_dist_screen::@6/(byte*) init_dist_screen::screen_topline#6 init_dist_screen::@7/(byte*) init_dist_screen::screen_topline#7 )
  (byte) NUM_SQUARES#19 ← phi( init_dist_screen::@6/(byte) NUM_SQUARES#24 init_dist_screen::@7/(byte) NUM_SQUARES#25 )
  (word) init_dist_screen::yds#2 ← phi( init_dist_screen::@6/(word) init_dist_screen::yds#3 init_dist_screen::@7/(word) init_dist_screen::yds#4 )
  (word*) SQUARES#19 ← phi( init_dist_screen::@6/(word*) SQUARES#29 init_dist_screen::@7/(word*) SQUARES#30 )
  (number~) init_dist_screen::$16 ← phi( init_dist_screen::@6/(number~) init_dist_screen::$15 init_dist_screen::@7/(number~) init_dist_screen::$13 )
  (byte) init_dist_screen::xd#0 ← (number~) init_dist_screen::$16
  (byte) sqr::val#1 ← (byte) init_dist_screen::xd#0
  call sqr 
  (word) sqr::return#3 ← (word) sqr::return#1
  to:init_dist_screen::@17
init_dist_screen::@17: scope:[init_dist_screen]  from init_dist_screen::@8
  (byte*) heap_head#38 ← phi( init_dist_screen::@8/(byte*) heap_head#42 )
  (byte) init_dist_screen::y#5 ← phi( init_dist_screen::@8/(byte) init_dist_screen::y#6 )
  (byte) init_dist_screen::xb#3 ← phi( init_dist_screen::@8/(byte) init_dist_screen::xb#4 )
  (byte*) init_dist_screen::screen_bottomline#4 ← phi( init_dist_screen::@8/(byte*) init_dist_screen::screen_bottomline#5 )
  (byte) init_dist_screen::x#4 ← phi( init_dist_screen::@8/(byte) init_dist_screen::x#5 )
  (byte*) init_dist_screen::screen_topline#4 ← phi( init_dist_screen::@8/(byte*) init_dist_screen::screen_topline#5 )
  (byte) NUM_SQUARES#13 ← phi( init_dist_screen::@8/(byte) NUM_SQUARES#19 )
  (word*) SQUARES#20 ← phi( init_dist_screen::@8/(word*) SQUARES#19 )
  (word) init_dist_screen::yds#1 ← phi( init_dist_screen::@8/(word) init_dist_screen::yds#2 )
  (word) sqr::return#6 ← phi( init_dist_screen::@8/(word) sqr::return#3 )
  (word~) init_dist_screen::$17 ← (word) sqr::return#6
  (word) init_dist_screen::xds#0 ← (word~) init_dist_screen::$17
  (word~) init_dist_screen::$18 ← (word) init_dist_screen::xds#0 + (word) init_dist_screen::yds#1
  (word) init_dist_screen::ds#0 ← (word~) init_dist_screen::$18
  (word) sqrt::val#0 ← (word) init_dist_screen::ds#0
  call sqrt 
  (byte) sqrt::return#2 ← (byte) sqrt::return#1
  to:init_dist_screen::@18
init_dist_screen::@18: scope:[init_dist_screen]  from init_dist_screen::@17
  (word) init_dist_screen::yds#6 ← phi( init_dist_screen::@17/(word) init_dist_screen::yds#1 )
  (word*) SQUARES#31 ← phi( init_dist_screen::@17/(word*) SQUARES#20 )
  (byte*) heap_head#33 ← phi( init_dist_screen::@17/(byte*) heap_head#38 )
  (byte) NUM_SQUARES#20 ← phi( init_dist_screen::@17/(byte) NUM_SQUARES#13 )
  (byte) init_dist_screen::y#4 ← phi( init_dist_screen::@17/(byte) init_dist_screen::y#5 )
  (byte) init_dist_screen::xb#2 ← phi( init_dist_screen::@17/(byte) init_dist_screen::xb#3 )
  (byte*) init_dist_screen::screen_bottomline#2 ← phi( init_dist_screen::@17/(byte*) init_dist_screen::screen_bottomline#4 )
  (byte) init_dist_screen::x#3 ← phi( init_dist_screen::@17/(byte) init_dist_screen::x#4 )
  (byte*) init_dist_screen::screen_topline#2 ← phi( init_dist_screen::@17/(byte*) init_dist_screen::screen_topline#4 )
  (byte) sqrt::return#4 ← phi( init_dist_screen::@17/(byte) sqrt::return#2 )
  (byte~) init_dist_screen::$19 ← (byte) sqrt::return#4
  (byte) init_dist_screen::d#0 ← (byte~) init_dist_screen::$19
  *((byte*) init_dist_screen::screen_topline#2 + (byte) init_dist_screen::x#3) ← (byte) init_dist_screen::d#0
  *((byte*) init_dist_screen::screen_bottomline#2 + (byte) init_dist_screen::x#3) ← (byte) init_dist_screen::d#0
  *((byte*) init_dist_screen::screen_topline#2 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0
  *((byte*) init_dist_screen::screen_bottomline#2 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0
  (byte) init_dist_screen::x#1 ← ++ (byte) init_dist_screen::x#3
  (byte) init_dist_screen::xb#1 ← -- (byte) init_dist_screen::xb#2
  (bool~) init_dist_screen::$20 ← (byte) init_dist_screen::x#1 <= (number) $13
  if((bool~) init_dist_screen::$20) goto init_dist_screen::@5
  to:init_dist_screen::@11
init_dist_screen::@11: scope:[init_dist_screen]  from init_dist_screen::@18
  (word*) SQUARES#24 ← phi( init_dist_screen::@18/(word*) SQUARES#31 )
  (byte*) heap_head#29 ← phi( init_dist_screen::@18/(byte*) heap_head#33 )
  (byte) NUM_SQUARES#16 ← phi( init_dist_screen::@18/(byte) NUM_SQUARES#20 )
  (byte) init_dist_screen::y#3 ← phi( init_dist_screen::@18/(byte) init_dist_screen::y#4 )
  (byte*) init_dist_screen::screen_bottomline#3 ← phi( init_dist_screen::@18/(byte*) init_dist_screen::screen_bottomline#2 )
  (byte*) init_dist_screen::screen_topline#3 ← phi( init_dist_screen::@18/(byte*) init_dist_screen::screen_topline#2 )
  (byte*) init_dist_screen::screen_topline#1 ← (byte*) init_dist_screen::screen_topline#3 + (number) $28
  (byte*) init_dist_screen::screen_bottomline#1 ← (byte*) init_dist_screen::screen_bottomline#3 - (number) $28
  (byte) init_dist_screen::y#1 ← (byte) init_dist_screen::y#3 + rangenext(0,$c)
  (bool~) init_dist_screen::$21 ← (byte) init_dist_screen::y#1 != rangelast(0,$c)
  if((bool~) init_dist_screen::$21) goto init_dist_screen::@1
  to:init_dist_screen::@return
init_dist_screen::@return: scope:[init_dist_screen]  from init_dist_screen::@11
  (word*) SQUARES#15 ← phi( init_dist_screen::@11/(word*) SQUARES#24 )
  (byte*) heap_head#21 ← phi( init_dist_screen::@11/(byte*) heap_head#29 )
  (byte) NUM_SQUARES#11 ← phi( init_dist_screen::@11/(byte) NUM_SQUARES#16 )
  (byte) NUM_SQUARES#4 ← (byte) NUM_SQUARES#11
  (byte*) heap_head#10 ← (byte*) heap_head#21
  (word*) SQUARES#6 ← (word*) SQUARES#15
  return 
  to:@return
initSprites: scope:[initSprites]  from main::@4
  (byte*) initSprites::sp#0 ← (byte*) SPRITE_DATA#0
  to:initSprites::@1
initSprites::@1: scope:[initSprites]  from initSprites initSprites::@1
  (byte*) initSprites::sp#2 ← phi( initSprites/(byte*) initSprites::sp#0 initSprites::@1/(byte*) initSprites::sp#1 )
  *((byte*) initSprites::sp#2) ← (number) 0
  (byte*) initSprites::sp#1 ← ++ (byte*) initSprites::sp#2
  (number~) initSprites::$0 ← (byte) NUM_PROCESSING#0 * (number) $40
  (byte*~) initSprites::$1 ← (byte*) SPRITE_DATA#0 + (number~) initSprites::$0
  (bool~) initSprites::$2 ← (byte*) initSprites::sp#1 < (byte*~) initSprites::$1
  if((bool~) initSprites::$2) goto initSprites::@1
  to:initSprites::@2
initSprites::@2: scope:[initSprites]  from initSprites::@1
  (byte) initSprites::i#0 ← (byte) 0
  to:initSprites::@3
initSprites::@3: scope:[initSprites]  from initSprites::@2 initSprites::@3
  (byte) initSprites::i#2 ← phi( initSprites::@2/(byte) initSprites::i#0 initSprites::@3/(byte) initSprites::i#1 )
  *((byte*) SPRITES_COLS#0 + (byte) initSprites::i#2) ← (byte) LIGHT_BLUE#0
  (byte) initSprites::i#1 ← (byte) initSprites::i#2 + rangenext(0,7)
  (bool~) initSprites::$3 ← (byte) initSprites::i#1 != rangelast(0,7)
  if((bool~) initSprites::$3) goto initSprites::@3
  to:initSprites::@4
initSprites::@4: scope:[initSprites]  from initSprites::@3
  *((byte*) SPRITES_MC#0) ← (number) 0
  *((byte*) SPRITES_EXPAND_X#0) ← (number) 0
  *((byte*) SPRITES_EXPAND_Y#0) ← (number) 0
  to:initSprites::@return
initSprites::@return: scope:[initSprites]  from initSprites::@4
  return 
  to:@return
setupRasterIrq: scope:[setupRasterIrq]  from main::@14
  (void()*) setupRasterIrq::irqRoutine#4 ← phi( main::@14/(void()*) setupRasterIrq::irqRoutine#0 )
  (word) setupRasterIrq::raster#1 ← phi( main::@14/(word) setupRasterIrq::raster#0 )
  asm { sei  }
  *((byte*) PROCPORT_DDR#0) ← (byte) PROCPORT_DDR_MEMORY_MASK#0
  *((byte*) PROCPORT#0) ← (byte) PROCPORT_RAM_IO#0
  *((byte*) CIA1_INTERRUPT#0) ← (byte) CIA_INTERRUPT_CLEAR#0
  (bool~) setupRasterIrq::$0 ← (word) setupRasterIrq::raster#1 < (number) $100
  if((bool~) setupRasterIrq::$0) goto setupRasterIrq::@1
  to:setupRasterIrq::@3
setupRasterIrq::@1: scope:[setupRasterIrq]  from setupRasterIrq
  (void()*) setupRasterIrq::irqRoutine#2 ← phi( setupRasterIrq/(void()*) setupRasterIrq::irqRoutine#4 )
  (word) setupRasterIrq::raster#3 ← phi( setupRasterIrq/(word) setupRasterIrq::raster#1 )
  *((byte*) VIC_CONTROL#0) ← *((byte*) VIC_CONTROL#0) & (number) $7f
  to:setupRasterIrq::@2
setupRasterIrq::@3: scope:[setupRasterIrq]  from setupRasterIrq
  (void()*) setupRasterIrq::irqRoutine#3 ← phi( setupRasterIrq/(void()*) setupRasterIrq::irqRoutine#4 )
  (word) setupRasterIrq::raster#4 ← phi( setupRasterIrq/(word) setupRasterIrq::raster#1 )
  *((byte*) VIC_CONTROL#0) ← *((byte*) VIC_CONTROL#0) | (number) $80
  to:setupRasterIrq::@2
setupRasterIrq::@2: scope:[setupRasterIrq]  from setupRasterIrq::@1 setupRasterIrq::@3
  (void()*) setupRasterIrq::irqRoutine#1 ← phi( setupRasterIrq::@1/(void()*) setupRasterIrq::irqRoutine#2 setupRasterIrq::@3/(void()*) setupRasterIrq::irqRoutine#3 )
  (word) setupRasterIrq::raster#2 ← phi( setupRasterIrq::@1/(word) setupRasterIrq::raster#3 setupRasterIrq::@3/(word) setupRasterIrq::raster#4 )
  (byte~) setupRasterIrq::$1 ← < (word) setupRasterIrq::raster#2
  *((byte*) RASTER#0) ← (byte~) setupRasterIrq::$1
  *((byte*) IRQ_ENABLE#0) ← (byte) IRQ_RASTER#0
  *((void()**) HARDWARE_IRQ#0) ← (void()*) setupRasterIrq::irqRoutine#1
  asm { cli  }
  to:setupRasterIrq::@return
setupRasterIrq::@return: scope:[setupRasterIrq]  from setupRasterIrq::@2
  return 
  to:@return
@22: scope:[]  from @18
  (byte*) SCREEN_COPY#20 ← phi( @18/(byte*) SCREEN_COPY#23 )
  (word*) SQUARES#37 ← phi( @18/(word*) SQUARES#41 )
  (byte*) heap_head#39 ← phi( @18/(byte*) heap_head#43 )
  (byte) NUM_SQUARES#26 ← phi( @18/(byte) NUM_SQUARES#30 )
  (byte*) SCREEN_DIST#10 ← phi( @18/(byte*) SCREEN_DIST#13 )
  (byte) RASTER_IRQ_TOP#0 ← (number) $30
  to:@23
irqTop: scope:[irqTop]  from
  (bool~) irqTop::$0 ← ! (bool) DEBUG#0
  if((bool~) irqTop::$0) goto irqTop::@1
  to:irqTop::@2
irqTop::@1: scope:[irqTop]  from irqTop irqTop::@6
  *((byte*) RASTER#0) ← (byte) RASTER_IRQ_MIDDLE#0
  (void()*~) irqTop::$1 ← & interrupt(HARDWARE_ALL)(void()) irqBottom()
  *((void()**) HARDWARE_IRQ#0) ← (void()*~) irqTop::$1
  *((byte*) IRQ_STATUS#0) ← (byte) IRQ_RASTER#0
  to:irqTop::@return
irqTop::@2: scope:[irqTop]  from irqTop
  (byte) irqTop::i#0 ← (byte) 0
  to:irqTop::@3
irqTop::@3: scope:[irqTop]  from irqTop::@2 irqTop::@3
  (byte) irqTop::i#2 ← phi( irqTop::@2/(byte) irqTop::i#0 irqTop::@3/(byte) irqTop::i#1 )
  (byte) irqTop::i#1 ← (byte) irqTop::i#2 + rangenext(0,4)
  (bool~) irqTop::$2 ← (byte) irqTop::i#1 != rangelast(0,4)
  if((bool~) irqTop::$2) goto irqTop::@3
  to:irqTop::@4
irqTop::@4: scope:[irqTop]  from irqTop::@3
  *((byte*) BORDERCOL#0) ← (byte) WHITE#0
  *((byte*) BGCOL#0) ← (byte) WHITE#0
  (byte) irqTop::i1#0 ← (byte) 0
  to:irqTop::@5
irqTop::@5: scope:[irqTop]  from irqTop::@4 irqTop::@5
  (byte) irqTop::i1#2 ← phi( irqTop::@4/(byte) irqTop::i1#0 irqTop::@5/(byte) irqTop::i1#1 )
  (byte) irqTop::i1#1 ← (byte) irqTop::i1#2 + rangenext(0,7)
  (bool~) irqTop::$3 ← (byte) irqTop::i1#1 != rangelast(0,7)
  if((bool~) irqTop::$3) goto irqTop::@5
  to:irqTop::@6
irqTop::@6: scope:[irqTop]  from irqTop::@5
  *((byte*) BORDERCOL#0) ← (byte) LIGHT_BLUE#0
  *((byte*) BGCOL#0) ← (byte) BLUE#0
  to:irqTop::@1
irqTop::@return: scope:[irqTop]  from irqTop::@1
  return 
  to:@return
@23: scope:[]  from @22
  (byte*) SCREEN_COPY#14 ← phi( @22/(byte*) SCREEN_COPY#20 )
  (word*) SQUARES#32 ← phi( @22/(word*) SQUARES#37 )
  (byte*) heap_head#34 ← phi( @22/(byte*) heap_head#39 )
  (byte) NUM_SQUARES#21 ← phi( @22/(byte) NUM_SQUARES#26 )
  (byte*) SCREEN_DIST#7 ← phi( @22/(byte*) SCREEN_DIST#10 )
  (byte) RASTER_IRQ_MIDDLE#0 ← (number) $ff
  to:@24
irqBottom: scope:[irqBottom]  from
  (bool~) irqBottom::$0 ← ! (bool) DEBUG#0
  if((bool~) irqBottom::$0) goto irqBottom::@1
  to:irqBottom::@3
irqBottom::@1: scope:[irqBottom]  from irqBottom irqBottom::@6
  call processChars 
  to:irqBottom::@7
irqBottom::@7: scope:[irqBottom]  from irqBottom::@1
  (bool~) irqBottom::$2 ← ! (bool) DEBUG#0
  if((bool~) irqBottom::$2) goto irqBottom::@2
  to:irqBottom::@4
irqBottom::@3: scope:[irqBottom]  from irqBottom
  (byte) irqBottom::i#0 ← (byte) 0
  to:irqBottom::@5
irqBottom::@5: scope:[irqBottom]  from irqBottom::@3 irqBottom::@5
  (byte) irqBottom::i#2 ← phi( irqBottom::@3/(byte) irqBottom::i#0 irqBottom::@5/(byte) irqBottom::i#1 )
  (byte) irqBottom::i#1 ← (byte) irqBottom::i#2 + rangenext(0,4)
  (bool~) irqBottom::$4 ← (byte) irqBottom::i#1 != rangelast(0,4)
  if((bool~) irqBottom::$4) goto irqBottom::@5
  to:irqBottom::@6
irqBottom::@6: scope:[irqBottom]  from irqBottom::@5
  *((byte*) BORDERCOL#0) ← (byte) WHITE#0
  *((byte*) BGCOL#0) ← (byte) WHITE#0
  to:irqBottom::@1
irqBottom::@2: scope:[irqBottom]  from irqBottom::@4 irqBottom::@7
  *((byte*) RASTER#0) ← (byte) RASTER_IRQ_TOP#0
  (void()*~) irqBottom::$3 ← & interrupt(HARDWARE_ALL)(void()) irqTop()
  *((void()**) HARDWARE_IRQ#0) ← (void()*~) irqBottom::$3
  *((byte*) IRQ_STATUS#0) ← (byte) IRQ_RASTER#0
  to:irqBottom::@return
irqBottom::@4: scope:[irqBottom]  from irqBottom::@7
  *((byte*) BORDERCOL#0) ← (byte) LIGHT_BLUE#0
  *((byte*) BGCOL#0) ← (byte) BLUE#0
  to:irqBottom::@2
irqBottom::@return: scope:[irqBottom]  from irqBottom::@2
  return 
  to:@return
@24: scope:[]  from @23
  (byte*) SCREEN_COPY#7 ← phi( @23/(byte*) SCREEN_COPY#14 )
  (word*) SQUARES#25 ← phi( @23/(word*) SQUARES#32 )
  (byte*) heap_head#30 ← phi( @23/(byte*) heap_head#34 )
  (byte) NUM_SQUARES#17 ← phi( @23/(byte) NUM_SQUARES#21 )
  (byte*) SCREEN_DIST#3 ← phi( @23/(byte*) SCREEN_DIST#7 )
  call main 
  to:@27
@27: scope:[]  from @24
  (word*) SQUARES#16 ← phi( @24/(word*) SQUARES#4 )
  (byte*) heap_head#22 ← phi( @24/(byte*) heap_head#8 )
  (byte) NUM_SQUARES#12 ← phi( @24/(byte) NUM_SQUARES#2 )
  (byte) NUM_SQUARES#5 ← (byte) NUM_SQUARES#12
  (byte*) heap_head#11 ← (byte*) heap_head#22
  (word*) SQUARES#7 ← (word*) SQUARES#16
  to:@end
@end: scope:[]  from @27

SYMBOL TABLE SSA
(void*~) $0
(void*~) $1
(word~) $10
(word~) $11
(number~) $2
(word~) $3
(word~) $4
(word~) $5
(word~) $6
(number~) $7
(word~) $8
(word~) $9
(label) @11
(label) @15
(label) @18
(label) @22
(label) @23
(label) @24
(label) @25
(label) @26
(label) @27
(label) @3
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL#0
(byte) BLUE
(byte) BLUE#0
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte) BORDER_XPOS_LEFT
(byte) BORDER_XPOS_LEFT#0
(word) BORDER_XPOS_RIGHT
(word) BORDER_XPOS_RIGHT#0
(byte) BORDER_YPOS_BOTTOM
(byte) BORDER_YPOS_BOTTOM#0
(byte) BORDER_YPOS_TOP
(byte) BORDER_YPOS_TOP#0
(byte*) CHARGEN
(byte*) CHARGEN#0
(byte*) CIA1_INTERRUPT
(byte*) CIA1_INTERRUPT#0
(byte) CIA_INTERRUPT_CLEAR
(byte) CIA_INTERRUPT_CLEAR#0
(byte*) COLS
(byte*) COLS#0
(bool) DEBUG
(bool) DEBUG#0
(void()**) HARDWARE_IRQ
(void()**) HARDWARE_IRQ#0
(byte*) HEAP_START
(byte*) HEAP_START#0
(byte*) IRQ_ENABLE
(byte*) IRQ_ENABLE#0
(byte) IRQ_RASTER
(byte) IRQ_RASTER#0
(byte*) IRQ_STATUS
(byte*) IRQ_STATUS#0
(byte) LIGHT_BLUE
(byte) LIGHT_BLUE#0
(byte) NOT_FOUND
(byte) NOT_FOUND#0
(byte) NUM_PROCESSING
(byte) NUM_PROCESSING#0
(byte) NUM_SQUARES
(byte) NUM_SQUARES#0
(byte) NUM_SQUARES#1
(byte) NUM_SQUARES#10
(byte) NUM_SQUARES#11
(byte) NUM_SQUARES#12
(byte) NUM_SQUARES#13
(byte) NUM_SQUARES#14
(byte) NUM_SQUARES#15
(byte) NUM_SQUARES#16
(byte) NUM_SQUARES#17
(byte) NUM_SQUARES#18
(byte) NUM_SQUARES#19
(byte) NUM_SQUARES#2
(byte) NUM_SQUARES#20
(byte) NUM_SQUARES#21
(byte) NUM_SQUARES#22
(byte) NUM_SQUARES#23
(byte) NUM_SQUARES#24
(byte) NUM_SQUARES#25
(byte) NUM_SQUARES#26
(byte) NUM_SQUARES#27
(byte) NUM_SQUARES#28
(byte) NUM_SQUARES#29
(byte) NUM_SQUARES#3
(byte) NUM_SQUARES#30
(byte) NUM_SQUARES#31
(byte) NUM_SQUARES#32
(byte) NUM_SQUARES#33
(byte) NUM_SQUARES#34
(byte) NUM_SQUARES#35
(byte) NUM_SQUARES#36
(byte) NUM_SQUARES#37
(byte) NUM_SQUARES#38
(byte) NUM_SQUARES#39
(byte) NUM_SQUARES#4
(byte) NUM_SQUARES#40
(byte) NUM_SQUARES#41
(byte) NUM_SQUARES#42
(byte) NUM_SQUARES#43
(byte) NUM_SQUARES#44
(byte) NUM_SQUARES#45
(byte) NUM_SQUARES#46
(byte) NUM_SQUARES#5
(byte) NUM_SQUARES#6
(byte) NUM_SQUARES#7
(byte) NUM_SQUARES#8
(byte) NUM_SQUARES#9
(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL = (byte) $a
(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID = (byte) 8
(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR = (byte) 9
(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR = (byte) $c
(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS = (byte) $b
(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX = (byte) 4
(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY = (byte) 6
(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X = (byte) 0
(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y = (byte) 2
(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING
(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0
(byte*) PROCPORT
(byte*) PROCPORT#0
(byte*) PROCPORT_DDR
(byte*) PROCPORT_DDR#0
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_DDR_MEMORY_MASK#0
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_CHARROM#0
(byte) PROCPORT_RAM_IO
(byte) PROCPORT_RAM_IO#0
(byte) ProcessingChar::dist
(byte) ProcessingChar::x
(byte) ProcessingChar::y
(const byte) ProcessingSprite::$0::STATUS_FREE = (byte) 0
(const byte) ProcessingSprite::$0::STATUS_NEW = (byte) 1
(const byte) ProcessingSprite::$0::STATUS_PROCESSING = (byte) 2
(byte) ProcessingSprite::col
(byte) ProcessingSprite::id
(byte) ProcessingSprite::ptr
(byte*) ProcessingSprite::screenPtr
(byte) ProcessingSprite::status
(word) ProcessingSprite::vx
(word) ProcessingSprite::vy
(word) ProcessingSprite::x
(word) ProcessingSprite::y
(byte*) RASTER
(byte*) RASTER#0
(byte) RASTER_IRQ_MIDDLE
(byte) RASTER_IRQ_MIDDLE#0
(byte) RASTER_IRQ_TOP
(byte) RASTER_IRQ_TOP#0
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN_COPY
(byte*) SCREEN_COPY#0
(byte*) SCREEN_COPY#1
(byte*) SCREEN_COPY#10
(byte*) SCREEN_COPY#11
(byte*) SCREEN_COPY#12
(byte*) SCREEN_COPY#13
(byte*) SCREEN_COPY#14
(byte*) SCREEN_COPY#15
(byte*) SCREEN_COPY#16
(byte*) SCREEN_COPY#17
(byte*) SCREEN_COPY#18
(byte*) SCREEN_COPY#19
(byte*) SCREEN_COPY#2
(byte*) SCREEN_COPY#20
(byte*) SCREEN_COPY#21
(byte*) SCREEN_COPY#22
(byte*) SCREEN_COPY#23
(byte*) SCREEN_COPY#24
(byte*) SCREEN_COPY#25
(byte*) SCREEN_COPY#26
(byte*) SCREEN_COPY#3
(byte*) SCREEN_COPY#4
(byte*) SCREEN_COPY#5
(byte*) SCREEN_COPY#6
(byte*) SCREEN_COPY#7
(byte*) SCREEN_COPY#8
(byte*) SCREEN_COPY#9
(byte*) SCREEN_DIST
(byte*) SCREEN_DIST#0
(byte*) SCREEN_DIST#1
(byte*) SCREEN_DIST#10
(byte*) SCREEN_DIST#11
(byte*) SCREEN_DIST#12
(byte*) SCREEN_DIST#13
(byte*) SCREEN_DIST#14
(byte*) SCREEN_DIST#15
(byte*) SCREEN_DIST#16
(byte*) SCREEN_DIST#17
(byte*) SCREEN_DIST#2
(byte*) SCREEN_DIST#3
(byte*) SCREEN_DIST#4
(byte*) SCREEN_DIST#5
(byte*) SCREEN_DIST#6
(byte*) SCREEN_DIST#7
(byte*) SCREEN_DIST#8
(byte*) SCREEN_DIST#9
(const byte) SIZEOF_STRUCT_PROCESSINGSPRITE = (byte) $e
(const byte) SIZEOF_WORD = (byte) 2
(byte*) SPRITES_COLS
(byte*) SPRITES_COLS#0
(byte*) SPRITES_ENABLE
(byte*) SPRITES_ENABLE#0
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_X#0
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_EXPAND_Y#0
(byte*) SPRITES_MC
(byte*) SPRITES_MC#0
(byte*) SPRITES_XMSB
(byte*) SPRITES_XMSB#0
(byte*) SPRITES_XPOS
(byte*) SPRITES_XPOS#0
(byte*) SPRITES_YPOS
(byte*) SPRITES_YPOS#0
(byte*) SPRITE_DATA
(byte*) SPRITE_DATA#0
(word) SPRITE_PTRS
(word) SPRITE_PTRS#0
(word*) SQUARES
(word*) SQUARES#0
(word*) SQUARES#1
(word*) SQUARES#10
(word*) SQUARES#11
(word*) SQUARES#12
(word*) SQUARES#13
(word*) SQUARES#14
(word*) SQUARES#15
(word*) SQUARES#16
(word*) SQUARES#17
(word*) SQUARES#18
(word*) SQUARES#19
(word*) SQUARES#2
(word*) SQUARES#20
(word*) SQUARES#21
(word*) SQUARES#22
(word*) SQUARES#23
(word*) SQUARES#24
(word*) SQUARES#25
(word*) SQUARES#26
(word*) SQUARES#27
(word*) SQUARES#28
(word*) SQUARES#29
(word*) SQUARES#3
(word*) SQUARES#30
(word*) SQUARES#31
(word*) SQUARES#32
(word*) SQUARES#33
(word*) SQUARES#34
(word*) SQUARES#35
(word*) SQUARES#36
(word*) SQUARES#37
(word*) SQUARES#38
(word*) SQUARES#39
(word*) SQUARES#4
(word*) SQUARES#40
(word*) SQUARES#41
(word*) SQUARES#42
(word*) SQUARES#43
(word*) SQUARES#44
(word*) SQUARES#45
(word*) SQUARES#46
(word*) SQUARES#47
(word*) SQUARES#48
(word*) SQUARES#49
(word*) SQUARES#5
(word*) SQUARES#50
(word*) SQUARES#51
(word*) SQUARES#6
(word*) SQUARES#7
(word*) SQUARES#8
(word*) SQUARES#9
(const byte) STATUS_FREE = (byte) 0
(const byte) STATUS_NEW = (byte) 1
(const byte) STATUS_PROCESSING = (byte) 2
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL#0
(word[$28]) VXSIN
(word[$28]) VXSIN#0
(word[$19]) VYSIN
(word[$19]) VYSIN#0
(byte) WHITE
(byte) WHITE#0
(word) XPOS_LEFTMOST
(word) XPOS_LEFTMOST#0
(word) XPOS_RIGHTMOST
(word) XPOS_RIGHTMOST#0
(word) YPOS_BOTTOMMOST
(word) YPOS_BOTTOMMOST#0
(word) YPOS_TOPMOST
(word) YPOS_TOPMOST#0
(word*()) bsearch16u((word) bsearch16u::key , (word*) bsearch16u::items , (byte) bsearch16u::num)
(bool~) bsearch16u::$0
(word*~) bsearch16u::$1
(signed word~) bsearch16u::$10
(bool~) bsearch16u::$11
(bool~) bsearch16u::$12
(bool~) bsearch16u::$13
(bool~) bsearch16u::$14
(word*~) bsearch16u::$15
(byte~) bsearch16u::$16
(number~) bsearch16u::$17
(number~) bsearch16u::$18
(word*~) bsearch16u::$2
(word*~) bsearch16u::$3
(word*~) bsearch16u::$4
(bool~) bsearch16u::$5
(byte~) bsearch16u::$6
(word*~) bsearch16u::$7
(signed word~) bsearch16u::$8
(signed word~) bsearch16u::$9
(label) bsearch16u::@1
(label) bsearch16u::@10
(label) bsearch16u::@13
(label) bsearch16u::@15
(label) bsearch16u::@2
(label) bsearch16u::@3
(label) bsearch16u::@6
(label) bsearch16u::@7
(label) bsearch16u::@8
(label) bsearch16u::@9
(label) bsearch16u::@return
(word*) bsearch16u::items
(word*) bsearch16u::items#0
(word*) bsearch16u::items#1
(word*) bsearch16u::items#2
(word*) bsearch16u::items#3
(word*) bsearch16u::items#4
(word*) bsearch16u::items#5
(word*) bsearch16u::items#6
(word*) bsearch16u::items#7
(word*) bsearch16u::items#8
(word*) bsearch16u::items#9
(word) bsearch16u::key
(word) bsearch16u::key#0
(word) bsearch16u::key#1
(word) bsearch16u::key#2
(word) bsearch16u::key#3
(word) bsearch16u::key#4
(word) bsearch16u::key#5
(word) bsearch16u::key#6
(word) bsearch16u::key#7
(byte) bsearch16u::num
(byte) bsearch16u::num#0
(byte) bsearch16u::num#1
(byte) bsearch16u::num#2
(byte) bsearch16u::num#3
(byte) bsearch16u::num#4
(byte) bsearch16u::num#5
(byte) bsearch16u::num#6
(byte) bsearch16u::num#7
(byte) bsearch16u::num#8
(word*) bsearch16u::pivot
(word*) bsearch16u::pivot#0
(word*) bsearch16u::pivot#1
(word*) bsearch16u::pivot#2
(word*) bsearch16u::pivot#3
(signed word) bsearch16u::result
(signed word) bsearch16u::result#0
(signed word) bsearch16u::result#1
(word*) bsearch16u::return
(word*) bsearch16u::return#0
(word*) bsearch16u::return#1
(word*) bsearch16u::return#2
(word*) bsearch16u::return#3
(word*) bsearch16u::return#4
(word*) bsearch16u::return#5
(struct ProcessingChar()) getCharToProcess()
(bool~) getCharToProcess::$0
(bool~) getCharToProcess::$1
(byte*~) getCharToProcess::$10
(byte*~) getCharToProcess::$11
(bool~) getCharToProcess::$2
(bool~) getCharToProcess::$3
(bool~) getCharToProcess::$4
(bool~) getCharToProcess::$5
(bool~) getCharToProcess::$6
(bool~) getCharToProcess::$7
(word~) getCharToProcess::$8
(number~) getCharToProcess::$9
(label) getCharToProcess::@1
(label) getCharToProcess::@10
(label) getCharToProcess::@11
(label) getCharToProcess::@3
(label) getCharToProcess::@4
(label) getCharToProcess::@5
(label) getCharToProcess::@7
(label) getCharToProcess::@8
(label) getCharToProcess::@9
(label) getCharToProcess::@return
(byte) getCharToProcess::closest_dist
(byte) getCharToProcess::closest_dist#0
(byte) getCharToProcess::closest_dist#1
(byte) getCharToProcess::closest_dist#2
(byte) getCharToProcess::closest_dist#3
(byte) getCharToProcess::closest_dist#4
(byte) getCharToProcess::closest_dist#5
(byte) getCharToProcess::closest_dist#6
(byte) getCharToProcess::closest_dist#7
(byte) getCharToProcess::closest_dist#8
(byte) getCharToProcess::closest_dist#9
(byte) getCharToProcess::closest_x
(byte) getCharToProcess::closest_x#0
(byte) getCharToProcess::closest_x#1
(byte) getCharToProcess::closest_x#2
(byte) getCharToProcess::closest_x#3
(byte) getCharToProcess::closest_x#4
(byte) getCharToProcess::closest_x#5
(byte) getCharToProcess::closest_x#6
(byte) getCharToProcess::closest_x#7
(byte) getCharToProcess::closest_x#8
(byte) getCharToProcess::closest_x#9
(byte) getCharToProcess::closest_y
(byte) getCharToProcess::closest_y#0
(byte) getCharToProcess::closest_y#1
(byte) getCharToProcess::closest_y#2
(byte) getCharToProcess::closest_y#3
(byte) getCharToProcess::closest_y#4
(byte) getCharToProcess::closest_y#5
(byte) getCharToProcess::closest_y#6
(byte) getCharToProcess::closest_y#7
(byte) getCharToProcess::closest_y#8
(byte) getCharToProcess::closest_y#9
(byte) getCharToProcess::dist
(byte) getCharToProcess::dist#0
(byte) getCharToProcess::dist#1
(byte*) getCharToProcess::dist_line
(byte*) getCharToProcess::dist_line#0
(byte*) getCharToProcess::dist_line#1
(byte*) getCharToProcess::dist_line#2
(byte*) getCharToProcess::dist_line#3
(byte*) getCharToProcess::dist_line#4
(byte*) getCharToProcess::dist_line#5
(byte*) getCharToProcess::dist_line#6
(byte*) getCharToProcess::dist_line#7
(struct ProcessingChar) getCharToProcess::return
(struct ProcessingChar) getCharToProcess::return#0
(struct ProcessingChar) getCharToProcess::return#1
(byte) getCharToProcess::return_dist
(byte) getCharToProcess::return_dist#0
(byte) getCharToProcess::return_dist#1
(byte) getCharToProcess::return_dist#2
(byte) getCharToProcess::return_dist#3
(byte) getCharToProcess::return_dist#4
(byte) getCharToProcess::return_x
(byte) getCharToProcess::return_x#0
(byte) getCharToProcess::return_x#1
(byte) getCharToProcess::return_x#2
(byte) getCharToProcess::return_x#3
(byte) getCharToProcess::return_x#4
(byte) getCharToProcess::return_y
(byte) getCharToProcess::return_y#0
(byte) getCharToProcess::return_y#1
(byte) getCharToProcess::return_y#2
(byte) getCharToProcess::return_y#3
(byte) getCharToProcess::return_y#4
(byte*) getCharToProcess::screen_line
(byte*) getCharToProcess::screen_line#0
(byte*) getCharToProcess::screen_line#1
(byte*) getCharToProcess::screen_line#2
(byte*) getCharToProcess::screen_line#3
(byte*) getCharToProcess::screen_line#4
(byte*) getCharToProcess::screen_line#5
(byte*) getCharToProcess::screen_line#6
(byte*) getCharToProcess::screen_line#7
(byte) getCharToProcess::x
(byte) getCharToProcess::x#0
(byte) getCharToProcess::x#1
(byte) getCharToProcess::x#2
(byte) getCharToProcess::x#3
(byte) getCharToProcess::x#4
(byte) getCharToProcess::x#5
(byte) getCharToProcess::y
(byte) getCharToProcess::y#0
(byte) getCharToProcess::y#1
(byte) getCharToProcess::y#2
(byte) getCharToProcess::y#3
(byte) getCharToProcess::y#4
(byte) getCharToProcess::y#5
(byte) getCharToProcess::y#6
(byte) getCharToProcess::y#7
(byte*) heap_head
(byte*) heap_head#0
(byte*) heap_head#1
(byte*) heap_head#10
(byte*) heap_head#11
(byte*) heap_head#12
(byte*) heap_head#13
(byte*) heap_head#14
(byte*) heap_head#15
(byte*) heap_head#16
(byte*) heap_head#17
(byte*) heap_head#18
(byte*) heap_head#19
(byte*) heap_head#2
(byte*) heap_head#20
(byte*) heap_head#21
(byte*) heap_head#22
(byte*) heap_head#23
(byte*) heap_head#24
(byte*) heap_head#25
(byte*) heap_head#26
(byte*) heap_head#27
(byte*) heap_head#28
(byte*) heap_head#29
(byte*) heap_head#3
(byte*) heap_head#30
(byte*) heap_head#31
(byte*) heap_head#32
(byte*) heap_head#33
(byte*) heap_head#34
(byte*) heap_head#35
(byte*) heap_head#36
(byte*) heap_head#37
(byte*) heap_head#38
(byte*) heap_head#39
(byte*) heap_head#4
(byte*) heap_head#40
(byte*) heap_head#41
(byte*) heap_head#42
(byte*) heap_head#43
(byte*) heap_head#44
(byte*) heap_head#45
(byte*) heap_head#46
(byte*) heap_head#47
(byte*) heap_head#48
(byte*) heap_head#49
(byte*) heap_head#5
(byte*) heap_head#50
(byte*) heap_head#51
(byte*) heap_head#52
(byte*) heap_head#53
(byte*) heap_head#54
(byte*) heap_head#55
(byte*) heap_head#56
(byte*) heap_head#57
(byte*) heap_head#6
(byte*) heap_head#7
(byte*) heap_head#8
(byte*) heap_head#9
(void()) initSprites()
(number~) initSprites::$0
(byte*~) initSprites::$1
(bool~) initSprites::$2
(bool~) initSprites::$3
(label) initSprites::@1
(label) initSprites::@2
(label) initSprites::@3
(label) initSprites::@4
(label) initSprites::@return
(byte) initSprites::i
(byte) initSprites::i#0
(byte) initSprites::i#1
(byte) initSprites::i#2
(byte*) initSprites::sp
(byte*) initSprites::sp#0
(byte*) initSprites::sp#1
(byte*) initSprites::sp#2
(void()) init_dist_screen((byte*) init_dist_screen::screen)
(byte*~) init_dist_screen::$1
(number~) init_dist_screen::$10
(bool~) init_dist_screen::$11
(number~) init_dist_screen::$12
(number~) init_dist_screen::$13
(number~) init_dist_screen::$14
(number~) init_dist_screen::$15
(number~) init_dist_screen::$16
(word~) init_dist_screen::$17
(word~) init_dist_screen::$18
(byte~) init_dist_screen::$19
(number~) init_dist_screen::$2
(bool~) init_dist_screen::$20
(bool~) init_dist_screen::$21
(bool~) init_dist_screen::$3
(number~) init_dist_screen::$4
(number~) init_dist_screen::$5
(number~) init_dist_screen::$6
(number~) init_dist_screen::$7
(number~) init_dist_screen::$8
(word~) init_dist_screen::$9
(label) init_dist_screen::@1
(label) init_dist_screen::@11
(label) init_dist_screen::@15
(label) init_dist_screen::@16
(label) init_dist_screen::@17
(label) init_dist_screen::@18
(label) init_dist_screen::@2
(label) init_dist_screen::@3
(label) init_dist_screen::@4
(label) init_dist_screen::@5
(label) init_dist_screen::@6
(label) init_dist_screen::@7
(label) init_dist_screen::@8
(label) init_dist_screen::@return
(byte) init_dist_screen::d
(byte) init_dist_screen::d#0
(word) init_dist_screen::ds
(word) init_dist_screen::ds#0
(byte*) init_dist_screen::screen
(byte*) init_dist_screen::screen#0
(byte*) init_dist_screen::screen#1
(byte*) init_dist_screen::screen#2
(byte*) init_dist_screen::screen_bottomline
(byte*) init_dist_screen::screen_bottomline#0
(byte*) init_dist_screen::screen_bottomline#1
(byte*) init_dist_screen::screen_bottomline#10
(byte*) init_dist_screen::screen_bottomline#11
(byte*) init_dist_screen::screen_bottomline#12
(byte*) init_dist_screen::screen_bottomline#13
(byte*) init_dist_screen::screen_bottomline#2
(byte*) init_dist_screen::screen_bottomline#3
(byte*) init_dist_screen::screen_bottomline#4
(byte*) init_dist_screen::screen_bottomline#5
(byte*) init_dist_screen::screen_bottomline#6
(byte*) init_dist_screen::screen_bottomline#7
(byte*) init_dist_screen::screen_bottomline#8
(byte*) init_dist_screen::screen_bottomline#9
(byte*) init_dist_screen::screen_topline
(byte*) init_dist_screen::screen_topline#0
(byte*) init_dist_screen::screen_topline#1
(byte*) init_dist_screen::screen_topline#10
(byte*) init_dist_screen::screen_topline#11
(byte*) init_dist_screen::screen_topline#12
(byte*) init_dist_screen::screen_topline#13
(byte*) init_dist_screen::screen_topline#2
(byte*) init_dist_screen::screen_topline#3
(byte*) init_dist_screen::screen_topline#4
(byte*) init_dist_screen::screen_topline#5
(byte*) init_dist_screen::screen_topline#6
(byte*) init_dist_screen::screen_topline#7
(byte*) init_dist_screen::screen_topline#8
(byte*) init_dist_screen::screen_topline#9
(byte) init_dist_screen::x
(byte) init_dist_screen::x#0
(byte) init_dist_screen::x#1
(byte) init_dist_screen::x#2
(byte) init_dist_screen::x#3
(byte) init_dist_screen::x#4
(byte) init_dist_screen::x#5
(byte) init_dist_screen::x#6
(byte) init_dist_screen::x#7
(byte) init_dist_screen::x2
(byte) init_dist_screen::x2#0
(byte) init_dist_screen::x2#1
(byte) init_dist_screen::x2#2
(byte) init_dist_screen::xb
(byte) init_dist_screen::xb#0
(byte) init_dist_screen::xb#1
(byte) init_dist_screen::xb#2
(byte) init_dist_screen::xb#3
(byte) init_dist_screen::xb#4
(byte) init_dist_screen::xb#5
(byte) init_dist_screen::xb#6
(byte) init_dist_screen::xb#7
(byte) init_dist_screen::xd
(byte) init_dist_screen::xd#0
(word) init_dist_screen::xds
(word) init_dist_screen::xds#0
(byte) init_dist_screen::y
(byte) init_dist_screen::y#0
(byte) init_dist_screen::y#1
(byte) init_dist_screen::y#10
(byte) init_dist_screen::y#11
(byte) init_dist_screen::y#12
(byte) init_dist_screen::y#13
(byte) init_dist_screen::y#2
(byte) init_dist_screen::y#3
(byte) init_dist_screen::y#4
(byte) init_dist_screen::y#5
(byte) init_dist_screen::y#6
(byte) init_dist_screen::y#7
(byte) init_dist_screen::y#8
(byte) init_dist_screen::y#9
(byte) init_dist_screen::y2
(byte) init_dist_screen::y2#0
(byte) init_dist_screen::y2#1
(byte) init_dist_screen::y2#2
(byte) init_dist_screen::yd
(byte) init_dist_screen::yd#0
(word) init_dist_screen::yds
(word) init_dist_screen::yds#0
(word) init_dist_screen::yds#1
(word) init_dist_screen::yds#2
(word) init_dist_screen::yds#3
(word) init_dist_screen::yds#4
(word) init_dist_screen::yds#5
(word) init_dist_screen::yds#6
(void()) init_squares()
(byte~) init_squares::$0
(void*~) init_squares::$1
(number~) init_squares::$2
(number~) init_squares::$3
(number~) init_squares::$4
(bool~) init_squares::$5
(label) init_squares::@1
(label) init_squares::@3
(label) init_squares::@return
(byte) init_squares::i
(byte) init_squares::i#0
(byte) init_squares::i#1
(byte) init_squares::i#2
(word) init_squares::sqr
(word) init_squares::sqr#0
(word) init_squares::sqr#1
(word) init_squares::sqr#2
(word*) init_squares::squares
(word*) init_squares::squares#0
(word*) init_squares::squares#1
(word*) init_squares::squares#2
interrupt(HARDWARE_ALL)(void()) irqBottom()
(bool~) irqBottom::$0
(bool~) irqBottom::$2
(void()*~) irqBottom::$3
(bool~) irqBottom::$4
(label) irqBottom::@1
(label) irqBottom::@2
(label) irqBottom::@3
(label) irqBottom::@4
(label) irqBottom::@5
(label) irqBottom::@6
(label) irqBottom::@7
(label) irqBottom::@return
(byte) irqBottom::i
(byte) irqBottom::i#0
(byte) irqBottom::i#1
(byte) irqBottom::i#2
interrupt(HARDWARE_ALL)(void()) irqTop()
(bool~) irqTop::$0
(void()*~) irqTop::$1
(bool~) irqTop::$2
(bool~) irqTop::$3
(label) irqTop::@1
(label) irqTop::@2
(label) irqTop::@3
(label) irqTop::@4
(label) irqTop::@5
(label) irqTop::@6
(label) irqTop::@return
(byte) irqTop::i
(byte) irqTop::i#0
(byte) irqTop::i#1
(byte) irqTop::i#2
(byte) irqTop::i1
(byte) irqTop::i1#0
(byte) irqTop::i1#1
(byte) irqTop::i1#2
(void()) main()
(bool~) main::$10
(bool~) main::$11
(byte*~) main::$15
(byte~) main::$16
(word*) main::$17
(word*) main::$18
(word*) main::$19
(void()*~) main::$2
(word*) main::$20
(byte*) main::$21
(byte*) main::$22
(byte*) main::$23
(byte*) main::$24
(byte**) main::$25
(byte*~) main::$4
(byte*~) main::$5
(bool~) main::$6
(number~) main::$7
(bool~) main::$8
(struct ProcessingChar~) main::$9
(byte) main::$9_dist
(byte) main::$9_x
(byte) main::$9_y
(label) main::@1
(label) main::@11
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@return
(byte) main::center_dist
(byte) main::center_dist#0
(byte) main::center_dist#1
(byte) main::center_x
(byte) main::center_x#0
(byte) main::center_x#1
(byte) main::center_y
(byte) main::center_y#0
(byte) main::center_y#1
(byte*) main::dst
(byte*) main::dst#0
(byte*) main::dst#1
(byte*) main::dst#2
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte*) main::src
(byte*) main::src#0
(byte*) main::src#1
(byte*) main::src#2
(void*()) malloc((word) malloc::size)
(label) malloc::@return
(byte*) malloc::mem
(byte*) malloc::mem#0
(void*) malloc::return
(void*) malloc::return#0
(void*) malloc::return#1
(void*) malloc::return#2
(void*) malloc::return#3
(void*) malloc::return#4
(void*) malloc::return#5
(void*) malloc::return#6
(void*) malloc::return#7
(void*) malloc::return#8
(word) malloc::size
(word) malloc::size#0
(word) malloc::size#1
(word) malloc::size#2
(word) malloc::size#3
(void()) processChars()
(bool~) processChars::$0
(number~) processChars::$1
(word~) processChars::$10
(byte~) processChars::$11
(number~) processChars::$12
(number~) processChars::$13
(byte~) processChars::$14
(word~) processChars::$15
(byte~) processChars::$16
(number~) processChars::$17
(bool~) processChars::$18
(bool~) processChars::$19
(struct ProcessingSprite*~) processChars::$2
(bool~) processChars::$20
(bool~) processChars::$21
(bool~) processChars::$22
(bool~) processChars::$23
(bool~) processChars::$24
(number~) processChars::$25
(byte~) processChars::$26
(number~) processChars::$27
(number~) processChars::$28
(number~) processChars::$29
(number~) processChars::$3
(byte~) processChars::$30
(number~) processChars::$31
(number~) processChars::$32
(number~) processChars::$33
(bool~) processChars::$34
(byte*~) processChars::$35
(byte~) processChars::$36
(byte~) processChars::$37
(byte~) processChars::$38
(byte~) processChars::$39
(bool~) processChars::$4
(byte*) processChars::$40
(byte*) processChars::$41
(byte*) processChars::$42
(word*) processChars::$43
(byte**) processChars::$44
(byte*) processChars::$45
(byte*) processChars::$46
(byte*) processChars::$47
(byte*) processChars::$48
(byte*) processChars::$49
(bool~) processChars::$5
(word*) processChars::$50
(word*) processChars::$51
(word*) processChars::$52
(word*) processChars::$53
(word*) processChars::$54
(byte*) processChars::$55
(word*) processChars::$56
(word*) processChars::$57
(word*) processChars::$58
(word*) processChars::$59
(bool~) processChars::$6
(word*) processChars::$60
(word*) processChars::$61
(word*) processChars::$62
(word*) processChars::$63
(word*) processChars::$64
(word*) processChars::$65
(bool~) processChars::$66
(bool~) processChars::$7
(byte*~) processChars::$8
(byte*~) processChars::$9
(label) processChars::@11
(label) processChars::@13
(label) processChars::@14
(label) processChars::@15
(label) processChars::@16
(label) processChars::@2
(label) processChars::@3
(label) processChars::@4
(label) processChars::@5
(label) processChars::@6
(label) processChars::@7
(label) processChars::@8
(label) processChars::@9
(label) processChars::@return
(byte) processChars::bitmask
(byte) processChars::bitmask#0
(byte) processChars::bitmask#1
(byte) processChars::bitmask#2
(byte) processChars::bitmask#3
(byte) processChars::bitmask#4
(byte) processChars::bitmask#5
(byte) processChars::bitmask#6
(byte) processChars::bitmask#7
(byte) processChars::i
(byte) processChars::i#0
(byte) processChars::i#1
(byte) processChars::i#10
(byte) processChars::i#11
(byte) processChars::i#12
(byte) processChars::i#2
(byte) processChars::i#3
(byte) processChars::i#4
(byte) processChars::i#5
(byte) processChars::i#6
(byte) processChars::i#7
(byte) processChars::i#8
(byte) processChars::i#9
(byte) processChars::numActive
(byte) processChars::numActive#0
(byte) processChars::numActive#1
(byte) processChars::numActive#10
(byte) processChars::numActive#11
(byte) processChars::numActive#12
(byte) processChars::numActive#13
(byte) processChars::numActive#14
(byte) processChars::numActive#2
(byte) processChars::numActive#3
(byte) processChars::numActive#4
(byte) processChars::numActive#5
(byte) processChars::numActive#6
(byte) processChars::numActive#7
(byte) processChars::numActive#8
(byte) processChars::numActive#9
(struct ProcessingSprite*) processChars::processing
(struct ProcessingSprite*) processChars::processing#0
(struct ProcessingSprite*) processChars::processing#1
(struct ProcessingSprite*) processChars::processing#2
(struct ProcessingSprite*) processChars::processing#3
(struct ProcessingSprite*) processChars::processing#4
(struct ProcessingSprite*) processChars::processing#5
(struct ProcessingSprite*) processChars::processing#6
(struct ProcessingSprite*) processChars::processing#7
(struct ProcessingSprite*) processChars::processing#8
(byte) processChars::xchar
(byte) processChars::xchar#0
(word) processChars::xpos
(word) processChars::xpos#0
(word) processChars::xpos#1
(word) processChars::xpos#2
(word) processChars::xpos#3
(word) processChars::xpos#4
(byte) processChars::ychar
(byte) processChars::ychar#0
(byte) processChars::ypos
(byte) processChars::ypos#0
(byte) processChars::ypos#1
(void()) setupRasterIrq((word) setupRasterIrq::raster , (void()*) setupRasterIrq::irqRoutine)
(bool~) setupRasterIrq::$0
(byte~) setupRasterIrq::$1
(label) setupRasterIrq::@1
(label) setupRasterIrq::@2
(label) setupRasterIrq::@3
(label) setupRasterIrq::@return
(void()*) setupRasterIrq::irqRoutine
(void()*) setupRasterIrq::irqRoutine#0
(void()*) setupRasterIrq::irqRoutine#1
(void()*) setupRasterIrq::irqRoutine#2
(void()*) setupRasterIrq::irqRoutine#3
(void()*) setupRasterIrq::irqRoutine#4
(word) setupRasterIrq::raster
(word) setupRasterIrq::raster#0
(word) setupRasterIrq::raster#1
(word) setupRasterIrq::raster#2
(word) setupRasterIrq::raster#3
(word) setupRasterIrq::raster#4
(word()) sqr((byte) sqr::val)
(byte~) sqr::$0
(label) sqr::@return
(word) sqr::return
(word) sqr::return#0
(word) sqr::return#1
(word) sqr::return#2
(word) sqr::return#3
(word) sqr::return#4
(word) sqr::return#5
(word) sqr::return#6
(byte) sqr::val
(byte) sqr::val#0
(byte) sqr::val#1
(byte) sqr::val#2
(byte()) sqrt((word) sqrt::val)
(word*~) sqrt::$0
(word~) sqrt::$1
(byte~) sqrt::$2
(word~) sqrt::$3
(label) sqrt::@2
(label) sqrt::@return
(word*) sqrt::found
(word*) sqrt::found#0
(byte) sqrt::return
(byte) sqrt::return#0
(byte) sqrt::return#1
(byte) sqrt::return#2
(byte) sqrt::return#3
(byte) sqrt::return#4
(byte) sqrt::sq
(byte) sqrt::sq#0
(word) sqrt::val
(word) sqrt::val#0
(word) sqrt::val#1
(void()) startProcessing((byte) startProcessing::center_x , (byte) startProcessing::center_y , (byte) startProcessing::center_dist)
(word~) startProcessing::$0
(number~) startProcessing::$1
(byte*~) startProcessing::$10
(word~) startProcessing::$11
(number~) startProcessing::$12
(number~) startProcessing::$13
(number~) startProcessing::$14
(word~) startProcessing::$15
(number~) startProcessing::$16
(number~) startProcessing::$17
(number~) startProcessing::$18
(byte*~) startProcessing::$19
(number~) startProcessing::$2
(byte~) startProcessing::$20
(byte~) startProcessing::$21
(number~) startProcessing::$22
(word~) startProcessing::$23
(number~) startProcessing::$24
(bool~) startProcessing::$25
(bool~) startProcessing::$26
(bool~) startProcessing::$27
(bool~) startProcessing::$28
(bool~) startProcessing::$29
(byte*~) startProcessing::$3
(byte~) startProcessing::$30
(byte~) startProcessing::$31
(word*) startProcessing::$32
(word*) startProcessing::$33
(word*) startProcessing::$34
(word*) startProcessing::$35
(byte*) startProcessing::$36
(byte*) startProcessing::$37
(byte*) startProcessing::$38
(byte*) startProcessing::$39
(byte*~) startProcessing::$4
(byte**) startProcessing::$40
(byte*) startProcessing::$41
(word~) startProcessing::$5
(number~) startProcessing::$6
(byte*~) startProcessing::$7
(word~) startProcessing::$8
(number~) startProcessing::$9
(label) startProcessing::@1
(label) startProcessing::@10
(label) startProcessing::@2
(label) startProcessing::@3
(label) startProcessing::@4
(label) startProcessing::@5
(label) startProcessing::@8
(label) startProcessing::@9
(label) startProcessing::@return
(struct ProcessingChar) startProcessing::center
(byte) startProcessing::center_dist
(byte) startProcessing::center_dist#0
(byte) startProcessing::center_x
(byte) startProcessing::center_x#0
(byte) startProcessing::center_x#1
(byte) startProcessing::center_x#2
(byte) startProcessing::center_x#3
(byte) startProcessing::center_x#4
(byte) startProcessing::center_x#5
(byte) startProcessing::center_x#6
(byte) startProcessing::center_x#7
(byte) startProcessing::center_x#8
(byte) startProcessing::center_x#9
(byte) startProcessing::center_y
(byte) startProcessing::center_y#0
(byte) startProcessing::center_y#1
(byte) startProcessing::center_y#2
(byte) startProcessing::center_y#3
(byte) startProcessing::center_y#4
(byte) startProcessing::center_y#5
(byte) startProcessing::center_y#6
(byte) startProcessing::center_y#7
(byte) startProcessing::center_y#8
(byte) startProcessing::center_y#9
(byte) startProcessing::ch
(byte) startProcessing::ch#0
(byte*) startProcessing::chargenData
(byte*) startProcessing::chargenData#0
(byte*) startProcessing::chargenData#1
(byte*) startProcessing::chargenData#2
(byte*) startProcessing::colPtr
(byte*) startProcessing::colPtr#0
(byte) startProcessing::freeIdx
(byte) startProcessing::freeIdx#0
(byte) startProcessing::freeIdx#1
(byte) startProcessing::freeIdx#2
(byte) startProcessing::freeIdx#3
(byte) startProcessing::freeIdx#4
(byte) startProcessing::freeIdx#5
(byte) startProcessing::freeIdx#6
(byte) startProcessing::i
(byte) startProcessing::i#0
(byte) startProcessing::i#1
(byte) startProcessing::i#2
(byte) startProcessing::i#3
(byte) startProcessing::i#4
(byte) startProcessing::i1
(byte) startProcessing::i1#0
(byte) startProcessing::i1#1
(byte) startProcessing::i1#2
(word) startProcessing::offset
(word) startProcessing::offset#0
(byte*) startProcessing::screenPtr
(byte*) startProcessing::screenPtr#0
(byte*) startProcessing::screenPtr#1
(byte*) startProcessing::screenPtr#2
(byte) startProcessing::spriteCol
(byte) startProcessing::spriteCol#0
(byte) startProcessing::spriteCol#1
(byte) startProcessing::spriteCol#2
(byte*) startProcessing::spriteData
(byte*) startProcessing::spriteData#0
(byte*) startProcessing::spriteData#1
(byte*) startProcessing::spriteData#2
(byte) startProcessing::spriteIdx
(byte) startProcessing::spriteIdx#0
(byte) startProcessing::spriteIdx#1
(byte) startProcessing::spriteIdx#2
(byte) startProcessing::spritePtr
(byte) startProcessing::spritePtr#0
(word) startProcessing::spriteX
(word) startProcessing::spriteX#0
(word) startProcessing::spriteY
(word) startProcessing::spriteY#0

Adding number conversion cast (unumber) 0 in (bool~) bsearch16u::$5 ← (byte) bsearch16u::num#3 > (number) 0
Adding number conversion cast (unumber) 1 in (byte~) bsearch16u::$6 ← (byte) bsearch16u::num#4 >> (number) 1
Adding number conversion cast (snumber) 0 in (bool~) bsearch16u::$11 ← (signed word) bsearch16u::result#0 == (number) 0
Adding number conversion cast (snumber) 0 in (bool~) bsearch16u::$13 ← (signed word) bsearch16u::result#1 > (number) 0
Adding number conversion cast (unumber) 1 in (byte) bsearch16u::num#0 ← (byte) bsearch16u::num#5 >> (number) 1
Adding number conversion cast (unumber) 1 in (number~) bsearch16u::$17 ← (number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) bsearch16u::$17 in (number~) bsearch16u::$17 ← (unumber)(number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) 1 in (number~) bsearch16u::$18 ← (number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) bsearch16u::$18 in (number~) bsearch16u::$18 ← (unumber)(number) 1 * (const byte) SIZEOF_WORD
Adding number conversion cast (unumber) $ff in (byte) NUM_SQUARES#0 ← (number) $ff
Adding number conversion cast (unumber) 0 in (word) init_squares::sqr#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) init_squares::$2 ← (byte) NUM_SQUARES#7 - (number) 1
Adding number conversion cast (unumber) init_squares::$2 in (number~) init_squares::$2 ← (byte) NUM_SQUARES#7 - (unumber)(number) 1
Adding number conversion cast (unumber) 2 in (number~) init_squares::$3 ← (byte) init_squares::i#2 * (number) 2
Adding number conversion cast (unumber) init_squares::$3 in (number~) init_squares::$3 ← (byte) init_squares::i#2 * (unumber)(number) 2
Adding number conversion cast (unumber) 1 in (number~) init_squares::$4 ← (unumber~) init_squares::$3 + (number) 1
Adding number conversion cast (unumber) init_squares::$4 in (number~) init_squares::$4 ← (unumber~) init_squares::$3 + (unumber)(number) 1
Adding number conversion cast (unumber) 7 in (byte) PROCPORT_DDR_MEMORY_MASK#0 ← (number) 7
Adding number conversion cast (unumber) $35 in (byte) PROCPORT_RAM_IO#0 ← (number) $35
Adding number conversion cast (unumber) $31 in (byte) PROCPORT_RAM_CHARROM#0 ← (number) $31
Adding number conversion cast (unumber) $18 in (byte) BORDER_XPOS_LEFT#0 ← (number) $18
Adding number conversion cast (unumber) $158 in (word) BORDER_XPOS_RIGHT#0 ← (number) $158
Adding number conversion cast (unumber) $32 in (byte) BORDER_YPOS_TOP#0 ← (number) $32
Adding number conversion cast (unumber) $fa in (byte) BORDER_YPOS_BOTTOM#0 ← (number) $fa
Adding number conversion cast (unumber) $3f8 in (word) SPRITE_PTRS#0 ← (number) $3f8
Adding number conversion cast (unumber) 1 in (byte) IRQ_RASTER#0 ← (number) 1
Adding number conversion cast (unumber) $7f in (byte) CIA_INTERRUPT_CLEAR#0 ← (number) $7f
Adding number conversion cast (unumber) 1 in (byte) WHITE#0 ← (number) 1
Adding number conversion cast (unumber) 6 in (byte) BLUE#0 ← (number) 6
Adding number conversion cast (unumber) $e in (byte) LIGHT_BLUE#0 ← (number) $e
Adding number conversion cast (unumber) $3e8 in (word) malloc::size#1 ← (number) $3e8
Adding number conversion cast (unumber) $3e8 in (word) malloc::size#2 ← (number) $3e8
Adding number conversion cast (unumber) 8 in (byte) NUM_PROCESSING#0 ← (number) 8
Adding number conversion cast (unumber) $ff in (byte) NOT_FOUND#0 ← (number) $ff
Adding number conversion cast (unumber) $3e8 in (byte*~) main::$5 ← (byte*) SCREEN#0 + (number) $3e8
Adding number conversion cast (unumber) 1 in (number~) main::$7 ← (byte) NUM_PROCESSING#0 - (number) 1
Adding number conversion cast (unumber) main::$7 in (number~) main::$7 ← (byte) NUM_PROCESSING#0 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in *((word*) main::$17 + (byte~) main::$16) ← (number) 0
Adding number conversion cast (unumber) 0 in *((word*) main::$18 + (byte~) main::$16) ← (number) 0
Adding number conversion cast (unumber) 0 in *((word*) main::$19 + (byte~) main::$16) ← (number) 0
Adding number conversion cast (unumber) 0 in *((word*) main::$20 + (byte~) main::$16) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*) main::$21 + (byte~) main::$16) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*) main::$22 + (byte~) main::$16) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*) main::$23 + (byte~) main::$16) ← (number) 0
Adding number conversion cast (unumber) $3e7 in (byte*~) main::$4 ← (byte*) SCREEN#0 + (number) $3e7
Adding number conversion cast (unumber) $3e7 in (byte*~) main::$15 ← (byte*) COLS#0 + (number) $3e7
Adding number conversion cast (unumber) 0 in (byte) getCharToProcess::closest_x#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) getCharToProcess::closest_y#0 ← (number) 0
Adding number conversion cast (unumber) $28 in (byte*) getCharToProcess::screen_line#1 ← (byte*) getCharToProcess::screen_line#3 + (number) $28
Adding number conversion cast (unumber) $28 in (byte*) getCharToProcess::dist_line#1 ← (byte*) getCharToProcess::dist_line#3 + (number) $28
Adding number conversion cast (unumber) $28 in (number~) getCharToProcess::$9 ← (word~) getCharToProcess::$8 * (number) $28
Adding number conversion cast (unumber) getCharToProcess::$9 in (number~) getCharToProcess::$9 ← (word~) getCharToProcess::$8 * (unumber)(number) $28
Adding number conversion cast (unumber) $ff in (byte) startProcessing::freeIdx#0 ← (number) $ff
Adding number conversion cast (unumber) 1 in (number~) startProcessing::$24 ← (byte) NUM_PROCESSING#0 - (number) 1
Adding number conversion cast (unumber) startProcessing::$24 in (number~) startProcessing::$24 ← (byte) NUM_PROCESSING#0 - (unumber)(number) 1
Adding number conversion cast (unumber) $ff in (bool~) startProcessing::$28 ← (byte) startProcessing::freeIdx#2 == (number) $ff
Adding number conversion cast (unumber) $28 in (number~) startProcessing::$1 ← (word~) startProcessing::$0 * (number) $28
Adding number conversion cast (unumber) startProcessing::$1 in (number~) startProcessing::$1 ← (word~) startProcessing::$0 * (unumber)(number) $28
Adding number conversion cast (unumber) startProcessing::$2 in (number~) startProcessing::$2 ← (unumber~) startProcessing::$1 + (byte) startProcessing::center_x#1
Adding number conversion cast (unumber) $40 in (number~) startProcessing::$6 ← (word~) startProcessing::$5 * (number) $40
Adding number conversion cast (unumber) startProcessing::$6 in (number~) startProcessing::$6 ← (word~) startProcessing::$5 * (unumber)(number) $40
Adding number conversion cast (unumber) 8 in (number~) startProcessing::$9 ← (word~) startProcessing::$8 * (number) 8
Adding number conversion cast (unumber) startProcessing::$9 in (number~) startProcessing::$9 ← (word~) startProcessing::$8 * (unumber)(number) 8
Adding number conversion cast (unumber) 3 in (byte*) startProcessing::spriteData#1 ← (byte*) startProcessing::spriteData#2 + (number) 3
Adding number conversion cast (unumber) 8 in (number~) startProcessing::$12 ← (word~) startProcessing::$11 * (number) 8
Adding number conversion cast (unumber) startProcessing::$12 in (number~) startProcessing::$12 ← (word~) startProcessing::$11 * (unumber)(number) 8
Adding number conversion cast (unumber) startProcessing::$13 in (number~) startProcessing::$13 ← (byte) BORDER_XPOS_LEFT#0 + (unumber~) startProcessing::$12
Adding number conversion cast (unumber) 4 in (number~) startProcessing::$14 ← (unumber~) startProcessing::$13 << (number) 4
Adding number conversion cast (unumber) startProcessing::$14 in (number~) startProcessing::$14 ← (unumber~) startProcessing::$13 << (unumber)(number) 4
Adding number conversion cast (unumber) 8 in (number~) startProcessing::$16 ← (word~) startProcessing::$15 * (number) 8
Adding number conversion cast (unumber) startProcessing::$16 in (number~) startProcessing::$16 ← (word~) startProcessing::$15 * (unumber)(number) 8
Adding number conversion cast (unumber) startProcessing::$17 in (number~) startProcessing::$17 ← (byte) BORDER_YPOS_TOP#0 + (unumber~) startProcessing::$16
Adding number conversion cast (unumber) 4 in (number~) startProcessing::$18 ← (unumber~) startProcessing::$17 << (number) 4
Adding number conversion cast (unumber) startProcessing::$18 in (number~) startProcessing::$18 ← (unumber~) startProcessing::$17 << (unumber)(number) 4
Adding number conversion cast (unumber) $40 in (byte*~) startProcessing::$19 ← (byte*) SPRITE_DATA#0 / (number) $40
Adding number conversion cast (unumber) 8 in (number~) startProcessing::$22 ← (byte) startProcessing::spriteIdx#1 * (number) 8
Adding number conversion cast (unumber) startProcessing::$22 in (number~) startProcessing::$22 ← (byte) startProcessing::spriteIdx#1 * (unumber)(number) 8
Adding number conversion cast (unumber) $3c in *((word*) startProcessing::$35 + (byte~) startProcessing::$31) ← (number) $3c
Adding number conversion cast (unumber) 8 in (number~) $2 ← (byte) BORDER_XPOS_LEFT#0 - (number) 8
Adding number conversion cast (unumber) $2 in (number~) $2 ← (byte) BORDER_XPOS_LEFT#0 - (unumber)(number) 8
Adding number conversion cast (unumber) 4 in (word~) $4 ← (word~) $3 << (number) 4
Adding number conversion cast (unumber) 4 in (word~) $6 ← (word~) $5 << (number) 4
Adding number conversion cast (unumber) 8 in (number~) $7 ← (byte) BORDER_YPOS_TOP#0 - (number) 8
Adding number conversion cast (unumber) $7 in (number~) $7 ← (byte) BORDER_YPOS_TOP#0 - (unumber)(number) 8
Adding number conversion cast (unumber) 4 in (word~) $9 ← (word~) $8 << (number) 4
Adding number conversion cast (unumber) 4 in (word~) $11 ← (word~) $10 << (number) 4
Adding number conversion cast (unumber) 0 in (byte) processChars::numActive#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) processChars::$1 ← (byte) NUM_PROCESSING#0 - (number) 1
Adding number conversion cast (unumber) processChars::$1 in (number~) processChars::$1 ← (byte) NUM_PROCESSING#0 - (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (number~) processChars::$3 ← (number) 1 << *((byte*) processChars::$40)
Adding number conversion cast (unumber) processChars::$3 in (number~) processChars::$3 ← (unumber)(number) 1 << *((byte*) processChars::$40)
Adding number conversion cast (unumber) 4 in (word~) processChars::$10 ← *((word*) processChars::$43) >> (number) 4
Adding number conversion cast (unumber) 0 in (bool~) processChars::$66 ← (number) 0 != (byte~) processChars::$11
Adding number conversion cast (unumber) $ff in (number~) processChars::$12 ← (number) $ff ^ (byte) processChars::bitmask#3
Adding number conversion cast (unumber) processChars::$12 in (number~) processChars::$12 ← (unumber)(number) $ff ^ (byte) processChars::bitmask#3
Adding number conversion cast (unumber) 2 in (number~) processChars::$13 ← (byte) processChars::i#4 * (number) 2
Adding number conversion cast (unumber) processChars::$13 in (number~) processChars::$13 ← (byte) processChars::i#4 * (unumber)(number) 2
Adding number conversion cast (unumber) 4 in (word~) processChars::$15 ← *((word*) processChars::$50) >> (number) 4
Adding number conversion cast (unumber) 2 in (number~) processChars::$17 ← (byte) processChars::i#4 * (number) 2
Adding number conversion cast (unumber) processChars::$17 in (number~) processChars::$17 ← (byte) processChars::i#4 * (unumber)(number) 2
Adding number conversion cast (unumber) $ff in (number~) processChars::$33 ← (number) $ff ^ (byte) processChars::bitmask#4
Adding number conversion cast (unumber) processChars::$33 in (number~) processChars::$33 ← (unumber)(number) $ff ^ (byte) processChars::bitmask#4
Adding number conversion cast (unumber) 8 in (number~) processChars::$25 ← (word) processChars::xpos#2 / (number) 8
Adding number conversion cast (unumber) processChars::$25 in (number~) processChars::$25 ← (word) processChars::xpos#2 / (unumber)(number) 8
Adding number conversion cast (unumber) 8 in (number~) processChars::$27 ← (byte) BORDER_XPOS_LEFT#0 / (number) 8
Adding number conversion cast (unumber) processChars::$27 in (number~) processChars::$27 ← (byte) BORDER_XPOS_LEFT#0 / (unumber)(number) 8
Adding number conversion cast (unumber) processChars::$28 in (number~) processChars::$28 ← (byte~) processChars::$26 - (unumber~) processChars::$27
Adding number conversion cast (unumber) 8 in (number~) processChars::$29 ← (byte) processChars::ypos#1 / (number) 8
Adding number conversion cast (unumber) processChars::$29 in (number~) processChars::$29 ← (byte) processChars::ypos#1 / (unumber)(number) 8
Adding number conversion cast (unumber) 8 in (number~) processChars::$31 ← (byte) BORDER_YPOS_TOP#0 / (number) 8
Adding number conversion cast (unumber) processChars::$31 in (number~) processChars::$31 ← (byte) BORDER_YPOS_TOP#0 / (unumber)(number) 8
Adding number conversion cast (unumber) processChars::$32 in (number~) processChars::$32 ← (byte~) processChars::$30 - (unumber~) processChars::$31
Adding number conversion cast (unumber) $3e7 in (byte*~) processChars::$35 ← (byte*) SCREEN#0 + (number) $3e7
Adding number conversion cast (unumber) $30 in (byte) NUM_SQUARES#3 ← (number) $30
Adding number conversion cast (unumber) $28*$18 in (byte*~) init_dist_screen::$1 ← (byte*) init_dist_screen::screen#1 + (number) $28*(number) $18
Adding number conversion cast (unumber) 2 in (number~) init_dist_screen::$2 ← (byte) init_dist_screen::y#2 * (number) 2
Adding number conversion cast (unumber) init_dist_screen::$2 in (number~) init_dist_screen::$2 ← (byte) init_dist_screen::y#2 * (unumber)(number) 2
Adding number conversion cast (unumber) $18 in (bool~) init_dist_screen::$3 ← (byte) init_dist_screen::y2#0 >= (number) $18
Adding number conversion cast (unumber) $18 in (number~) init_dist_screen::$6 ← (byte) init_dist_screen::y2#1 - (number) $18
Adding number conversion cast (unumber) init_dist_screen::$6 in (number~) init_dist_screen::$6 ← (byte) init_dist_screen::y2#1 - (unumber)(number) $18
Adding number conversion cast (unumber) init_dist_screen::$7 in (number~) init_dist_screen::$7 ← (unumber~) init_dist_screen::$6
Adding number conversion cast (unumber) $18 in (number~) init_dist_screen::$4 ← (number) $18 - (byte) init_dist_screen::y2#2
Adding number conversion cast (unumber) init_dist_screen::$4 in (number~) init_dist_screen::$4 ← (unumber)(number) $18 - (byte) init_dist_screen::y2#2
Adding number conversion cast (unumber) init_dist_screen::$5 in (number~) init_dist_screen::$5 ← (unumber~) init_dist_screen::$4
Adding number conversion cast (unumber) init_dist_screen::$8 in (byte*) heap_head#52 ← phi( init_dist_screen::@2/(byte*) heap_head#54 init_dist_screen::@3/(byte*) heap_head#55 )
  (byte) init_dist_screen::y#11 ← phi( init_dist_screen::@2/(byte) init_dist_screen::y#12 init_dist_screen::@3/(byte) init_dist_screen::y#13 )
  (byte*) init_dist_screen::screen_bottomline#10 ← phi( init_dist_screen::@2/(byte*) init_dist_screen::screen_bottomline#11 init_dist_screen::@3/(byte*) init_dist_screen::screen_bottomline#12 )
  (byte*) init_dist_screen::screen_topline#10 ← phi( init_dist_screen::@2/(byte*) init_dist_screen::screen_topline#11 init_dist_screen::@3/(byte*) init_dist_screen::screen_topline#12 )
  (byte) NUM_SQUARES#36 ← phi( init_dist_screen::@2/(byte) NUM_SQUARES#39 init_dist_screen::@3/(byte) NUM_SQUARES#40 )
  (word*) SQUARES#18 ← phi( init_dist_screen::@2/(word*) SQUARES#27 init_dist_screen::@3/(word*) SQUARES#28 )
  (number~) init_dist_screen::$8 ← phi( init_dist_screen::@2/(unumber~) init_dist_screen::$7 init_dist_screen::@3/(unumber~) init_dist_screen::$5 )
Adding number conversion cast (unumber) 0 in (byte) init_dist_screen::x#0 ← (number) 0
Adding number conversion cast (unumber) $27 in (byte) init_dist_screen::xb#0 ← (number) $27
Adding number conversion cast (unumber) 2 in (number~) init_dist_screen::$10 ← (byte) init_dist_screen::x#2 * (number) 2
Adding number conversion cast (unumber) init_dist_screen::$10 in (number~) init_dist_screen::$10 ← (byte) init_dist_screen::x#2 * (unumber)(number) 2
Adding number conversion cast (unumber) $27 in (bool~) init_dist_screen::$11 ← (byte) init_dist_screen::x2#0 >= (number) $27
Adding number conversion cast (unumber) $27 in (number~) init_dist_screen::$14 ← (byte) init_dist_screen::x2#1 - (number) $27
Adding number conversion cast (unumber) init_dist_screen::$14 in (number~) init_dist_screen::$14 ← (byte) init_dist_screen::x2#1 - (unumber)(number) $27
Adding number conversion cast (unumber) init_dist_screen::$15 in (number~) init_dist_screen::$15 ← (unumber~) init_dist_screen::$14
Adding number conversion cast (unumber) $27 in (number~) init_dist_screen::$12 ← (number) $27 - (byte) init_dist_screen::x2#2
Adding number conversion cast (unumber) init_dist_screen::$12 in (number~) init_dist_screen::$12 ← (unumber)(number) $27 - (byte) init_dist_screen::x2#2
Adding number conversion cast (unumber) init_dist_screen::$13 in (number~) init_dist_screen::$13 ← (unumber~) init_dist_screen::$12
Adding number conversion cast (unumber) init_dist_screen::$16 in (byte*) heap_head#42 ← phi( init_dist_screen::@6/(byte*) heap_head#45 init_dist_screen::@7/(byte*) heap_head#46 )
  (byte) init_dist_screen::y#6 ← phi( init_dist_screen::@6/(byte) init_dist_screen::y#7 init_dist_screen::@7/(byte) init_dist_screen::y#8 )
  (byte) init_dist_screen::xb#4 ← phi( init_dist_screen::@6/(byte) init_dist_screen::xb#5 init_dist_screen::@7/(byte) init_dist_screen::xb#6 )
  (byte*) init_dist_screen::screen_bottomline#5 ← phi( init_dist_screen::@6/(byte*) init_dist_screen::screen_bottomline#6 init_dist_screen::@7/(byte*) init_dist_screen::screen_bottomline#7 )
  (byte) init_dist_screen::x#5 ← phi( init_dist_screen::@6/(byte) init_dist_screen::x#6 init_dist_screen::@7/(byte) init_dist_screen::x#7 )
  (byte*) init_dist_screen::screen_topline#5 ← phi( init_dist_screen::@6/(byte*) init_dist_screen::screen_topline#6 init_dist_screen::@7/(byte*) init_dist_screen::screen_topline#7 )
  (byte) NUM_SQUARES#19 ← phi( init_dist_screen::@6/(byte) NUM_SQUARES#24 init_dist_screen::@7/(byte) NUM_SQUARES#25 )
  (word) init_dist_screen::yds#2 ← phi( init_dist_screen::@6/(word) init_dist_screen::yds#3 init_dist_screen::@7/(word) init_dist_screen::yds#4 )
  (word*) SQUARES#19 ← phi( init_dist_screen::@6/(word*) SQUARES#29 init_dist_screen::@7/(word*) SQUARES#30 )
  (number~) init_dist_screen::$16 ← phi( init_dist_screen::@6/(unumber~) init_dist_screen::$15 init_dist_screen::@7/(unumber~) init_dist_screen::$13 )
Adding number conversion cast (unumber) $13 in (bool~) init_dist_screen::$20 ← (byte) init_dist_screen::x#1 <= (number) $13
Adding number conversion cast (unumber) $28 in (byte*) init_dist_screen::screen_topline#1 ← (byte*) init_dist_screen::screen_topline#3 + (number) $28
Adding number conversion cast (unumber) $28 in (byte*) init_dist_screen::screen_bottomline#1 ← (byte*) init_dist_screen::screen_bottomline#3 - (number) $28
Adding number conversion cast (unumber) 0 in *((byte*) initSprites::sp#2) ← (number) 0
Adding number conversion cast (unumber) $40 in (number~) initSprites::$0 ← (byte) NUM_PROCESSING#0 * (number) $40
Adding number conversion cast (unumber) initSprites::$0 in (number~) initSprites::$0 ← (byte) NUM_PROCESSING#0 * (unumber)(number) $40
Adding number conversion cast (unumber) 0 in *((byte*) SPRITES_MC#0) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*) SPRITES_EXPAND_X#0) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*) SPRITES_EXPAND_Y#0) ← (number) 0
Adding number conversion cast (unumber) $100 in (bool~) setupRasterIrq::$0 ← (word) setupRasterIrq::raster#1 < (number) $100
Adding number conversion cast (unumber) $7f in *((byte*) VIC_CONTROL#0) ← *((byte*) VIC_CONTROL#0) & (number) $7f
Adding number conversion cast (unumber) $80 in *((byte*) VIC_CONTROL#0) ← *((byte*) VIC_CONTROL#0) | (number) $80
Adding number conversion cast (unumber) $30 in (byte) RASTER_IRQ_TOP#0 ← (number) $30
Adding number conversion cast (unumber) $ff in (byte) RASTER_IRQ_MIDDLE#0 ← (number) $ff
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) HEAP_START#0 ← (byte*)(number) $c000
Inlining cast (void*) malloc::return#0 ← (void*)(byte*) malloc::mem#0
Inlining cast (signed word~) bsearch16u::$8 ← (signed word)(word) bsearch16u::key#1
Inlining cast (signed word~) bsearch16u::$9 ← (signed word)*((word*) bsearch16u::pivot#0)
Inlining cast (byte) NUM_SQUARES#0 ← (unumber)(number) $ff
Inlining cast (word*) SQUARES#1 ← (word*)(void*~) init_squares::$1
Inlining cast (word) init_squares::sqr#0 ← (unumber)(number) 0
Inlining cast (byte~) sqrt::$2 ← (byte)(word~) sqrt::$1
Inlining cast (byte*) PROCPORT_DDR#0 ← (byte*)(number) 0
Inlining cast (byte) PROCPORT_DDR_MEMORY_MASK#0 ← (unumber)(number) 7
Inlining cast (byte*) PROCPORT#0 ← (byte*)(number) 1
Inlining cast (byte) PROCPORT_RAM_IO#0 ← (unumber)(number) $35
Inlining cast (byte) PROCPORT_RAM_CHARROM#0 ← (unumber)(number) $31
Inlining cast (byte*) CHARGEN#0 ← (byte*)(number) $d000
Inlining cast (byte) BORDER_XPOS_LEFT#0 ← (unumber)(number) $18
Inlining cast (word) BORDER_XPOS_RIGHT#0 ← (unumber)(number) $158
Inlining cast (byte) BORDER_YPOS_TOP#0 ← (unumber)(number) $32
Inlining cast (byte) BORDER_YPOS_BOTTOM#0 ← (unumber)(number) $fa
Inlining cast (word) SPRITE_PTRS#0 ← (unumber)(number) $3f8
Inlining cast (byte*) SPRITES_XPOS#0 ← (byte*)(number) $d000
Inlining cast (byte*) SPRITES_YPOS#0 ← (byte*)(number) $d001
Inlining cast (byte*) SPRITES_XMSB#0 ← (byte*)(number) $d010
Inlining cast (byte*) RASTER#0 ← (byte*)(number) $d012
Inlining cast (byte*) SPRITES_ENABLE#0 ← (byte*)(number) $d015
Inlining cast (byte*) SPRITES_EXPAND_Y#0 ← (byte*)(number) $d017
Inlining cast (byte*) SPRITES_MC#0 ← (byte*)(number) $d01c
Inlining cast (byte*) SPRITES_EXPAND_X#0 ← (byte*)(number) $d01d
Inlining cast (byte*) BORDERCOL#0 ← (byte*)(number) $d020
Inlining cast (byte*) BGCOL#0 ← (byte*)(number) $d021
Inlining cast (byte*) SPRITES_COLS#0 ← (byte*)(number) $d027
Inlining cast (byte*) VIC_CONTROL#0 ← (byte*)(number) $d011
Inlining cast (byte*) IRQ_STATUS#0 ← (byte*)(number) $d019
Inlining cast (byte*) IRQ_ENABLE#0 ← (byte*)(number) $d01a
Inlining cast (byte) IRQ_RASTER#0 ← (unumber)(number) 1
Inlining cast (byte*) COLS#0 ← (byte*)(number) $d800
Inlining cast (byte*) CIA1_INTERRUPT#0 ← (byte*)(number) $dc0d
Inlining cast (byte) CIA_INTERRUPT_CLEAR#0 ← (unumber)(number) $7f
Inlining cast (void()**) HARDWARE_IRQ#0 ← (void()**)(number) $fffe
Inlining cast (byte) WHITE#0 ← (unumber)(number) 1
Inlining cast (byte) BLUE#0 ← (unumber)(number) 6
Inlining cast (byte) LIGHT_BLUE#0 ← (unumber)(number) $e
Inlining cast (byte*) SCREEN#0 ← (byte*)(number) $400
Inlining cast (byte*) SPRITE_DATA#0 ← (byte*)(number) $2000
Inlining cast (word) malloc::size#1 ← (unumber)(number) $3e8
Inlining cast (byte*) SCREEN_COPY#0 ← (byte*)(void*~) $0
Inlining cast (word) malloc::size#2 ← (unumber)(number) $3e8
Inlining cast (byte*) SCREEN_DIST#0 ← (byte*)(void*~) $1
Inlining cast (byte) NUM_PROCESSING#0 ← (unumber)(number) 8
Inlining cast (byte) NOT_FOUND#0 ← (unumber)(number) $ff
Inlining cast *((word*) main::$17 + (byte~) main::$16) ← (unumber)(number) 0
Inlining cast *((word*) main::$18 + (byte~) main::$16) ← (unumber)(number) 0
Inlining cast *((word*) main::$19 + (byte~) main::$16) ← (unumber)(number) 0
Inlining cast *((word*) main::$20 + (byte~) main::$16) ← (unumber)(number) 0
Inlining cast *((byte*) main::$21 + (byte~) main::$16) ← (unumber)(number) 0
Inlining cast *((byte*) main::$22 + (byte~) main::$16) ← (unumber)(number) 0
Inlining cast *((byte*) main::$23 + (byte~) main::$16) ← (unumber)(number) 0
Inlining cast *((byte**) main::$25 + (byte~) main::$16) ← (byte*)(number) 0
Inlining cast (byte) getCharToProcess::closest_x#0 ← (unumber)(number) 0
Inlining cast (byte) getCharToProcess::closest_y#0 ← (unumber)(number) 0
Inlining cast (word~) getCharToProcess::$8 ← (word)(byte) getCharToProcess::closest_y#3
Inlining cast (byte) startProcessing::freeIdx#0 ← (unumber)(number) $ff
Inlining cast (word~) startProcessing::$0 ← (word)(byte) startProcessing::center_y#1
Inlining cast (word~) startProcessing::$5 ← (word)(byte) startProcessing::spriteIdx#0
Inlining cast (word~) startProcessing::$8 ← (word)(byte) startProcessing::ch#0
Inlining cast (word~) startProcessing::$11 ← (word)(byte) startProcessing::center_x#2
Inlining cast (word~) startProcessing::$15 ← (word)(byte) startProcessing::center_y#2
Inlining cast (byte~) startProcessing::$20 ← (byte)(byte*~) startProcessing::$19
Inlining cast (word~) startProcessing::$23 ← (word)(unumber~) startProcessing::$22
Inlining cast *((word*) startProcessing::$35 + (byte~) startProcessing::$31) ← (unumber)(number) $3c
Inlining cast (word~) $3 ← (word)(unumber~) $2
Inlining cast (word~) $5 ← (word)(word) BORDER_XPOS_RIGHT#0
Inlining cast (word~) $8 ← (word)(unumber~) $7
Inlining cast (word~) $10 ← (word)(byte) BORDER_YPOS_BOTTOM#0
Inlining cast (byte) processChars::numActive#0 ← (unumber)(number) 0
Inlining cast (byte~) processChars::$14 ← (byte)(word) processChars::xpos#1
Inlining cast (byte~) processChars::$16 ← (byte)(word~) processChars::$15
Inlining cast (byte~) processChars::$26 ← (byte)(unumber~) processChars::$25
Inlining cast (byte~) processChars::$30 ← (byte)(unumber~) processChars::$29
Inlining cast (byte) NUM_SQUARES#3 ← (unumber)(number) $30
Inlining cast (byte) init_dist_screen::x#0 ← (unumber)(number) 0
Inlining cast (byte) init_dist_screen::xb#0 ← (unumber)(number) $27
Inlining cast *((byte*) initSprites::sp#2) ← (unumber)(number) 0
Inlining cast *((byte*) SPRITES_MC#0) ← (unumber)(number) 0
Inlining cast *((byte*) SPRITES_EXPAND_X#0) ← (unumber)(number) 0
Inlining cast *((byte*) SPRITES_EXPAND_Y#0) ← (unumber)(number) 0
Inlining cast (byte) RASTER_IRQ_TOP#0 ← (unumber)(number) $30
Inlining cast (byte) RASTER_IRQ_MIDDLE#0 ← (unumber)(number) $ff
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 49152
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 0
Simplifying constant integer cast 7
Simplifying constant pointer cast (byte*) 1
Simplifying constant integer cast $35
Simplifying constant integer cast $31
Simplifying constant pointer cast (byte*) 53248
Simplifying constant integer cast $18
Simplifying constant integer cast $158
Simplifying constant integer cast $32
Simplifying constant integer cast $fa
Simplifying constant integer cast $3f8
Simplifying constant pointer cast (byte*) 53248
Simplifying constant pointer cast (byte*) 53249
Simplifying constant pointer cast (byte*) 53264
Simplifying constant pointer cast (byte*) 53266
Simplifying constant pointer cast (byte*) 53269
Simplifying constant pointer cast (byte*) 53271
Simplifying constant pointer cast (byte*) 53276
Simplifying constant pointer cast (byte*) 53277
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53281
Simplifying constant pointer cast (byte*) 53287
Simplifying constant pointer cast (byte*) 53265
Simplifying constant pointer cast (byte*) 53273
Simplifying constant pointer cast (byte*) 53274
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 56333
Simplifying constant integer cast $7f
Simplifying constant pointer cast (void()**) 65534
Simplifying constant integer cast 1
Simplifying constant integer cast 6
Simplifying constant integer cast $e
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 8192
Simplifying constant integer cast $3e8
Simplifying constant integer cast $3e8
Simplifying constant integer cast 8
Simplifying constant integer cast $ff
Simplifying constant integer cast $3e8
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 0
Simplifying constant integer cast $3e7
Simplifying constant integer cast $3e7
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $ff
Simplifying constant integer cast 1
Simplifying constant integer cast $ff
Simplifying constant integer cast $28
Simplifying constant integer cast $40
Simplifying constant integer cast 8
Simplifying constant integer cast 3
Simplifying constant integer cast 8
Simplifying constant integer cast 4
Simplifying constant integer cast 8
Simplifying constant integer cast 4
Simplifying constant integer cast $40
Simplifying constant integer cast 8
Simplifying constant integer cast $3c
Simplifying constant integer cast 8
Simplifying constant integer cast 4
Simplifying constant integer cast (word) BORDER_XPOS_RIGHT#0
Simplifying constant integer cast 4
Simplifying constant integer cast 8
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 2
Simplifying constant integer cast 4
Simplifying constant integer cast 2
Simplifying constant integer cast $ff
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast $3e7
Simplifying constant integer cast $30
Simplifying constant integer cast 2
Simplifying constant integer cast $18
Simplifying constant integer cast $18
Simplifying constant integer cast $18
Simplifying constant integer cast 0
Simplifying constant integer cast $27
Simplifying constant integer cast 2
Simplifying constant integer cast $27
Simplifying constant integer cast $27
Simplifying constant integer cast $27
Simplifying constant integer cast $13
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $100
Simplifying constant integer cast $7f
Simplifying constant integer cast $80
Simplifying constant integer cast $30
Simplifying constant integer cast $ff
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) $35
Finalized unsigned number type (byte) $31
Finalized unsigned number type (byte) $18
Finalized unsigned number type (word) $158
Finalized unsigned number type (byte) $32
Finalized unsigned number type (byte) $fa
Finalized unsigned number type (word) $3f8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $e
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $3e7
Finalized unsigned number type (word) $3e7
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $3c
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (word) $3e7
Finalized unsigned number type (byte) $30
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $18
Finalized unsigned number type (byte) $18
Finalized unsigned number type (byte) $18
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $27
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $27
Finalized unsigned number type (byte) $27
Finalized unsigned number type (byte) $27
Finalized unsigned number type (byte) $13
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $100
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) $30
Finalized unsigned number type (byte) $ff
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) bsearch16u::$17 ← (byte) 1 * (const byte) SIZEOF_WORD
Inferred type updated to byte in (unumber~) bsearch16u::$18 ← (byte) 1 * (const byte) SIZEOF_WORD
Inferred type updated to byte in (unumber~) init_squares::$2 ← (byte) NUM_SQUARES#7 - (byte) 1
Inferred type updated to byte in (unumber~) init_squares::$3 ← (byte) init_squares::i#2 * (byte) 2
Inferred type updated to byte in (unumber~) init_squares::$4 ← (byte~) init_squares::$3 + (byte) 1
Inferred type updated to byte in (unumber~) main::$7 ← (byte) NUM_PROCESSING#0 - (byte) 1
Inferred type updated to word in (unumber~) getCharToProcess::$9 ← (word~) getCharToProcess::$8 * (byte) $28
Inferred type updated to byte in (unumber~) startProcessing::$24 ← (byte) NUM_PROCESSING#0 - (byte) 1
Inferred type updated to word in (unumber~) startProcessing::$1 ← (word~) startProcessing::$0 * (byte) $28
Inferred type updated to word in (unumber~) startProcessing::$2 ← (word~) startProcessing::$1 + (byte) startProcessing::center_x#1
Inferred type updated to word in (unumber~) startProcessing::$6 ← (word~) startProcessing::$5 * (byte) $40
Inferred type updated to word in (unumber~) startProcessing::$9 ← (word~) startProcessing::$8 * (byte) 8
Inferred type updated to word in (unumber~) startProcessing::$12 ← (word~) startProcessing::$11 * (byte) 8
Inferred type updated to word in (unumber~) startProcessing::$13 ← (byte) BORDER_XPOS_LEFT#0 + (word~) startProcessing::$12
Inferred type updated to word in (unumber~) startProcessing::$14 ← (word~) startProcessing::$13 << (byte) 4
Inferred type updated to word in (unumber~) startProcessing::$16 ← (word~) startProcessing::$15 * (byte) 8
Inferred type updated to word in (unumber~) startProcessing::$17 ← (byte) BORDER_YPOS_TOP#0 + (word~) startProcessing::$16
Inferred type updated to word in (unumber~) startProcessing::$18 ← (word~) startProcessing::$17 << (byte) 4
Inferred type updated to byte in (unumber~) startProcessing::$22 ← (byte) startProcessing::spriteIdx#1 * (byte) 8
Inferred type updated to byte in (unumber~) $2 ← (byte) BORDER_XPOS_LEFT#0 - (byte) 8
Inferred type updated to byte in (unumber~) $7 ← (byte) BORDER_YPOS_TOP#0 - (byte) 8
Inferred type updated to byte in (unumber~) processChars::$1 ← (byte) NUM_PROCESSING#0 - (byte) 1
Inferred type updated to byte in (unumber~) processChars::$3 ← (byte) 1 << *((byte*) processChars::$40)
Inferred type updated to byte in (unumber~) processChars::$12 ← (byte) $ff ^ (byte) processChars::bitmask#3
Inferred type updated to byte in (unumber~) processChars::$13 ← (byte) processChars::i#4 * (byte) 2
Inferred type updated to byte in (unumber~) processChars::$17 ← (byte) processChars::i#4 * (byte) 2
Inferred type updated to byte in (unumber~) processChars::$33 ← (byte) $ff ^ (byte) processChars::bitmask#4
Inferred type updated to word in (unumber~) processChars::$25 ← (word) processChars::xpos#2 / (byte) 8
Inferred type updated to byte in (unumber~) processChars::$27 ← (byte) BORDER_XPOS_LEFT#0 / (byte) 8
Inferred type updated to byte in (unumber~) processChars::$28 ← (byte~) processChars::$26 - (byte~) processChars::$27
Inferred type updated to byte in (unumber~) processChars::$29 ← (byte) processChars::ypos#1 / (byte) 8
Inferred type updated to byte in (unumber~) processChars::$31 ← (byte) BORDER_YPOS_TOP#0 / (byte) 8
Inferred type updated to byte in (unumber~) processChars::$32 ← (byte~) processChars::$30 - (byte~) processChars::$31
Inferred type updated to byte in (unumber~) init_dist_screen::$2 ← (byte) init_dist_screen::y#2 * (byte) 2
Inferred type updated to byte in (unumber~) init_dist_screen::$6 ← (byte) init_dist_screen::y2#1 - (byte) $18
Inferred type updated to byte in (unumber~) init_dist_screen::$7 ← (byte~) init_dist_screen::$6
Inferred type updated to byte in (unumber~) init_dist_screen::$4 ← (byte) $18 - (byte) init_dist_screen::y2#2
Inferred type updated to byte in (unumber~) init_dist_screen::$5 ← (byte~) init_dist_screen::$4
Inferred type updated to byte for (unumber~) init_dist_screen::$8
Inferred type updated to byte in (unumber~) init_dist_screen::$10 ← (byte) init_dist_screen::x#2 * (byte) 2
Inferred type updated to byte in (unumber~) init_dist_screen::$14 ← (byte) init_dist_screen::x2#1 - (byte) $27
Inferred type updated to byte in (unumber~) init_dist_screen::$15 ← (byte~) init_dist_screen::$14
Inferred type updated to byte in (unumber~) init_dist_screen::$12 ← (byte) $27 - (byte) init_dist_screen::x2#2
Inferred type updated to byte in (unumber~) init_dist_screen::$13 ← (byte~) init_dist_screen::$12
Inferred type updated to byte for (unumber~) init_dist_screen::$16
Inferred type updated to byte in (unumber~) initSprites::$0 ← (byte) NUM_PROCESSING#0 * (byte) $40
Inversing boolean not [24] (bool~) bsearch16u::$12 ← (signed word) bsearch16u::result#0 != (signed byte) 0 from [23] (bool~) bsearch16u::$11 ← (signed word) bsearch16u::result#0 == (signed byte) 0
Inversing boolean not [31] (bool~) bsearch16u::$14 ← (signed word) bsearch16u::result#1 <= (signed byte) 0 from [30] (bool~) bsearch16u::$13 ← (signed word) bsearch16u::result#1 > (signed byte) 0
Inversing boolean not [225] (bool~) main::$11 ← (byte) main::center_dist#0 != (byte) NOT_FOUND#0 from [224] (bool~) main::$10 ← (byte) main::center_dist#0 == (byte) NOT_FOUND#0
Inversing boolean not [257] (bool~) getCharToProcess::$3 ← *((byte*) getCharToProcess::screen_line#2 + (byte) getCharToProcess::x#2) == (byte) ' ' from [256] (bool~) getCharToProcess::$2 ← *((byte*) getCharToProcess::screen_line#2 + (byte) getCharToProcess::x#2) != (byte) ' '
Inversing boolean not [266] (bool~) getCharToProcess::$5 ← (byte) getCharToProcess::dist#0 >= (byte) getCharToProcess::closest_dist#2 from [265] (bool~) getCharToProcess::$4 ← (byte) getCharToProcess::dist#0 < (byte) getCharToProcess::closest_dist#2
Inversing boolean not [280] (bool~) getCharToProcess::$1 ← (byte) getCharToProcess::closest_dist#3 == (byte) NOT_FOUND#0 from [279] (bool~) getCharToProcess::$0 ← (byte) getCharToProcess::closest_dist#3 != (byte) NOT_FOUND#0
Inversing boolean not [308] (bool~) startProcessing::$26 ← *((byte*) startProcessing::$41 + (byte~) startProcessing::$30) != (const byte) STATUS_FREE from [307] (bool~) startProcessing::$25 ← *((byte*) startProcessing::$41 + (byte~) startProcessing::$30) == (const byte) STATUS_FREE
Inversing boolean not [415] (bool~) processChars::$5 ← *((byte*) processChars::$41) == (const byte) STATUS_FREE from [414] (bool~) processChars::$4 ← *((byte*) processChars::$41) != (const byte) STATUS_FREE
Inversing boolean not [424] (bool~) processChars::$7 ← *((byte*) processChars::$42) != (const byte) STATUS_NEW from [423] (bool~) processChars::$6 ← *((byte*) processChars::$42) == (const byte) STATUS_NEW
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte*) HEAP_START#0 = (byte*) heap_head#0 (byte*) heap_head#35 (byte*) heap_head#31 (byte*) heap_head#23 
Alias (void*) malloc::return#0 = (void*) malloc::return#5 (void*) malloc::return#1 
Alias (byte*) heap_head#1 = (byte*) heap_head#13 (byte*) heap_head#2 
Alias (byte) bsearch16u::num#3 = (byte) bsearch16u::num#4 (byte) bsearch16u::num#8 (byte) bsearch16u::num#6 
Alias (word*) bsearch16u::items#2 = (word*) bsearch16u::items#6 (word*) bsearch16u::items#3 (word*) bsearch16u::items#9 (word*) bsearch16u::items#4 (word*~) bsearch16u::$3 (word*) bsearch16u::items#5 
Alias (word) bsearch16u::key#1 = (word) bsearch16u::key#3 (word) bsearch16u::key#2 (word) bsearch16u::key#7 (word) bsearch16u::key#6 
Alias (word*) bsearch16u::pivot#0 = (word*~) bsearch16u::$7 (word*) bsearch16u::pivot#3 (word*) bsearch16u::pivot#1 (word*) bsearch16u::return#0 (word*) bsearch16u::pivot#2 
Alias (signed word) bsearch16u::result#0 = (signed word~) bsearch16u::$10 (signed word) bsearch16u::result#1 
Alias (word*) bsearch16u::return#1 = (word*) bsearch16u::return#4 
Alias (word*) bsearch16u::items#0 = (word*~) bsearch16u::$15 
Alias (word*~) bsearch16u::$2 = (word*~) bsearch16u::$1 
Alias (word*) bsearch16u::return#2 = (word*~) bsearch16u::$4 
Alias (word) malloc::size#0 = (byte~) init_squares::$0 
Alias (void*) malloc::return#2 = (void*) malloc::return#6 
Alias (byte) NUM_SQUARES#6 = (byte) NUM_SQUARES#7 
Alias (byte*) heap_head#14 = (byte*) heap_head#3 
Alias (byte*) heap_head#15 = (byte*) heap_head#25 (byte*) heap_head#4 
Alias (word*) SQUARES#17 = (word*) SQUARES#8 (word*) SQUARES#2 
Alias (word) sqr::return#0 = (word) sqr::return#4 (word) sqr::return#1 
Alias (word*) bsearch16u::return#3 = (word*) bsearch16u::return#5 
Alias (word*) SQUARES#10 = (word*) SQUARES#11 
Alias (word*) sqrt::found#0 = (word*~) sqrt::$0 
Alias (byte) sqrt::return#0 = (byte) sqrt::sq#0 (byte~) sqrt::$2 (byte) sqrt::return#3 (byte) sqrt::return#1 
Alias (byte) NUM_SQUARES#0 = (byte) NUM_SQUARES#41 (byte) NUM_SQUARES#37 (byte) NUM_SQUARES#34 (byte) NUM_SQUARES#32 (byte) NUM_SQUARES#30 (byte) NUM_SQUARES#26 (byte) NUM_SQUARES#21 (byte) NUM_SQUARES#17 
Alias (word*) SQUARES#0 = (word*) SQUARES#48 (word*) SQUARES#46 (word*) SQUARES#44 (word*) SQUARES#43 (word*) SQUARES#41 (word*) SQUARES#37 (word*) SQUARES#32 (word*) SQUARES#25 
Alias (void*) malloc::return#3 = (void*) malloc::return#7 
Alias (byte*) heap_head#16 = (byte*) heap_head#5 
Alias (void*) malloc::return#4 = (void*) malloc::return#8 
Alias (byte*) SCREEN_COPY#0 = (byte*) SCREEN_COPY#25 (byte*) SCREEN_COPY#23 (byte*) SCREEN_COPY#20 (byte*) SCREEN_COPY#14 (byte*) SCREEN_COPY#7 
Alias (byte*) heap_head#17 = (byte*) heap_head#6 (byte*) heap_head#43 (byte*) heap_head#39 (byte*) heap_head#34 (byte*) heap_head#30 
Alias (byte*) SCREEN_COPY#1 = (byte*) SCREEN_COPY#4 
Alias (byte*) SCREEN_DIST#1 = (byte*) SCREEN_DIST#17 
Alias (byte) NUM_SQUARES#1 = (byte) NUM_SQUARES#9 
Alias (byte*) heap_head#18 = (byte*) heap_head#7 
Alias (word*) SQUARES#12 = (word*) SQUARES#3 
Alias (byte*) SCREEN_COPY#24 = (byte*) SCREEN_COPY#26 
Alias (byte*) SCREEN_DIST#15 = (byte*) SCREEN_DIST#16 
Alias (byte) NUM_SQUARES#44 = (byte) NUM_SQUARES#46 
Alias (byte*) heap_head#53 = (byte*) heap_head#56 
Alias (word*) SQUARES#50 = (word*) SQUARES#51 
Alias (byte*) SCREEN_COPY#11 = (byte*) SCREEN_COPY#15 (byte*) SCREEN_COPY#21 (byte*) SCREEN_COPY#8 
Alias (byte*) SCREEN_DIST#11 = (byte*) SCREEN_DIST#14 (byte*) SCREEN_DIST#8 (byte*) SCREEN_DIST#5 
Alias (byte) NUM_SQUARES#31 = (byte) NUM_SQUARES#38 (byte) NUM_SQUARES#42 (byte) NUM_SQUARES#35 
Alias (byte*) heap_head#44 = (byte*) heap_head#49 (byte*) heap_head#51 (byte*) heap_head#47 
Alias (word*) SQUARES#42 = (word*) SQUARES#47 (word*) SQUARES#49 (word*) SQUARES#45 
Alias (void()*) setupRasterIrq::irqRoutine#0 = (void()*~) main::$2 
Alias (byte) getCharToProcess::return_x#0 = (byte) getCharToProcess::return_x#3 
Alias (byte) getCharToProcess::return_y#0 = (byte) getCharToProcess::return_y#3 
Alias (byte) getCharToProcess::return_dist#0 = (byte) getCharToProcess::return_dist#3 
Alias (byte) NUM_SQUARES#22 = (byte) NUM_SQUARES#27 (byte) NUM_SQUARES#28 (byte) NUM_SQUARES#23 
Alias (byte*) heap_head#36 = (byte*) heap_head#40 (byte*) heap_head#41 (byte*) heap_head#37 
Alias (word*) SQUARES#33 = (word*) SQUARES#38 (word*) SQUARES#39 (word*) SQUARES#34 
Alias (byte*) SCREEN_COPY#12 = (byte*) SCREEN_COPY#16 (byte*) SCREEN_COPY#5 (byte*) SCREEN_COPY#9 
Alias (byte*) SCREEN_DIST#12 = (byte*) SCREEN_DIST#4 (byte*) SCREEN_DIST#9 (byte*) SCREEN_DIST#6 
Alias (byte) main::center_x#0 = (byte) main::$9_x (byte) main::center_x#1 
Alias (byte) main::center_y#0 = (byte) main::$9_y (byte) main::center_y#1 
Alias (byte) main::center_dist#0 = (byte) main::$9_dist (byte) main::center_dist#1 
Alias (byte) NUM_SQUARES#10 = (byte) NUM_SQUARES#15 (byte) NUM_SQUARES#2 
Alias (byte*) heap_head#19 = (byte*) heap_head#27 (byte*) heap_head#8 
Alias (word*) SQUARES#13 = (word*) SQUARES#22 (word*) SQUARES#4 
Alias (byte*) getCharToProcess::dist_line#2 = (byte*) getCharToProcess::dist_line#4 (byte*) getCharToProcess::dist_line#7 
Alias (byte) getCharToProcess::x#2 = (byte) getCharToProcess::x#4 (byte) getCharToProcess::x#5 (byte) getCharToProcess::closest_x#1 
Alias (byte) getCharToProcess::closest_dist#2 = (byte) getCharToProcess::closest_dist#5 
Alias (byte) getCharToProcess::y#2 = (byte) getCharToProcess::y#4 (byte) getCharToProcess::y#6 (byte) getCharToProcess::closest_y#1 
Alias (byte*) getCharToProcess::screen_line#2 = (byte*) getCharToProcess::screen_line#6 (byte*) getCharToProcess::screen_line#7 
Alias (byte) getCharToProcess::closest_x#7 = (byte) getCharToProcess::closest_x#8 
Alias (byte) getCharToProcess::closest_y#7 = (byte) getCharToProcess::closest_y#8 
Alias (byte*) SCREEN_COPY#17 = (byte*) SCREEN_COPY#18 (byte*) SCREEN_COPY#19 
Alias (byte) getCharToProcess::dist#0 = (byte) getCharToProcess::dist#1 (byte) getCharToProcess::closest_dist#1 
Alias (byte*) getCharToProcess::screen_line#3 = (byte*) getCharToProcess::screen_line#5 
Alias (byte*) getCharToProcess::dist_line#3 = (byte*) getCharToProcess::dist_line#5 
Alias (byte) getCharToProcess::y#3 = (byte) getCharToProcess::y#5 
Alias (byte) getCharToProcess::closest_dist#3 = (byte) getCharToProcess::closest_dist#6 (byte) getCharToProcess::closest_dist#9 (byte) getCharToProcess::closest_dist#7 
Alias (byte) getCharToProcess::closest_x#3 = (byte) getCharToProcess::closest_x#5 (byte) getCharToProcess::closest_x#6 (byte) getCharToProcess::closest_x#4 
Alias (byte) getCharToProcess::closest_y#3 = (byte) getCharToProcess::closest_y#5 (byte) getCharToProcess::closest_y#6 (byte) getCharToProcess::closest_y#4 
Alias (byte*) SCREEN_COPY#10 = (byte*) SCREEN_COPY#13 (byte*) SCREEN_COPY#6 (byte*) SCREEN_COPY#3 
Alias (byte) getCharToProcess::return_x#1 = (byte) getCharToProcess::closest_x#2 (byte) getCharToProcess::return_x#4 (byte) getCharToProcess::return_x#2 
Alias (byte) getCharToProcess::return_y#1 = (byte) getCharToProcess::closest_y#2 (byte) getCharToProcess::return_y#4 (byte) getCharToProcess::return_y#2 
Alias (byte) getCharToProcess::return_dist#1 = (byte) getCharToProcess::closest_dist#4 (byte) getCharToProcess::return_dist#4 (byte) getCharToProcess::return_dist#2 
Alias (byte) startProcessing::i#2 = (byte) startProcessing::i#3 (byte) startProcessing::i#4 (byte) startProcessing::freeIdx#1 
Alias (byte) startProcessing::freeIdx#4 = (byte) startProcessing::freeIdx#5 
Alias (byte) startProcessing::center_y#5 = (byte) startProcessing::center_y#7 (byte) startProcessing::center_y#6 
Alias (byte) startProcessing::center_x#5 = (byte) startProcessing::center_x#7 (byte) startProcessing::center_x#6 
Alias (byte) startProcessing::freeIdx#2 = (byte) startProcessing::freeIdx#3 (byte) startProcessing::spriteIdx#0 
Alias (byte) startProcessing::center_y#1 = (byte) startProcessing::center_y#3 
Alias (byte) startProcessing::center_x#1 = (byte) startProcessing::center_x#3 
Alias (word) startProcessing::offset#0 = (word~) startProcessing::$2 
Alias (byte*) startProcessing::colPtr#0 = (byte*~) startProcessing::$3 
Alias (byte*) startProcessing::screenPtr#0 = (byte*~) startProcessing::$4 
Alias (byte*) startProcessing::spriteData#0 = (byte*~) startProcessing::$7 
Alias (byte*) startProcessing::chargenData#0 = (byte*~) startProcessing::$10 
Alias (byte) startProcessing::center_x#2 = (byte) startProcessing::center_x#4 
Alias (byte) startProcessing::center_y#2 = (byte) startProcessing::center_y#4 
Alias (byte) startProcessing::spriteIdx#1 = (byte) startProcessing::spriteIdx#2 
Alias (byte) startProcessing::spriteCol#1 = (byte) startProcessing::spriteCol#2 
Alias (byte*) startProcessing::screenPtr#1 = (byte*) startProcessing::screenPtr#2 
Alias (word) startProcessing::spriteX#0 = (word~) startProcessing::$14 
Alias (word) startProcessing::spriteY#0 = (word~) startProcessing::$18 
Alias (byte) startProcessing::spritePtr#0 = (byte~) startProcessing::$21 
Alias (byte*) SCREEN_DIST#0 = (byte*) SCREEN_DIST#13 (byte*) SCREEN_DIST#10 (byte*) SCREEN_DIST#7 (byte*) SCREEN_DIST#3 
Alias (word) XPOS_LEFTMOST#0 = (word~) $4 
Alias (word) BORDER_XPOS_RIGHT#0 = (word~) $5 
Alias (word) XPOS_RIGHTMOST#0 = (word~) $6 
Alias (word) YPOS_TOPMOST#0 = (word~) $9 
Alias (word) YPOS_BOTTOMMOST#0 = (word~) $11 
Alias (struct ProcessingSprite*) processChars::processing#0 = (struct ProcessingSprite*~) processChars::$2 (struct ProcessingSprite*) processChars::processing#1 (struct ProcessingSprite*) processChars::processing#3 
Alias (byte) processChars::bitmask#0 = (byte~) processChars::$3 (byte) processChars::bitmask#5 (byte) processChars::bitmask#1 
Alias (byte) processChars::i#11 = (byte) processChars::i#2 (byte) processChars::i#12 
Alias (byte) processChars::numActive#13 = (byte) processChars::numActive#9 (byte) processChars::numActive#14 
Alias (word) processChars::xpos#0 = (word~) processChars::$10 (word) processChars::xpos#3 (word) processChars::xpos#4 
Alias (byte) processChars::bitmask#2 = (byte) processChars::bitmask#6 (byte) processChars::bitmask#3 
Alias (byte) processChars::i#6 = (byte) processChars::i#8 (byte) processChars::i#7 
Alias (struct ProcessingSprite*) processChars::processing#2 = (struct ProcessingSprite*) processChars::processing#7 (struct ProcessingSprite*) processChars::processing#8 
Alias (byte) processChars::numActive#10 = (byte) processChars::numActive#12 (byte) processChars::numActive#11 
Alias (byte) processChars::ypos#0 = (byte~) processChars::$16 (byte) processChars::ypos#1 
Alias (struct ProcessingSprite*) processChars::processing#4 = (struct ProcessingSprite*) processChars::processing#5 (struct ProcessingSprite*) processChars::processing#6 
Alias (byte) processChars::bitmask#4 = (byte) processChars::bitmask#7 
Alias (byte) processChars::numActive#4 = (byte) processChars::numActive#5 (byte) processChars::numActive#7 
Alias (byte) processChars::i#10 = (byte) processChars::i#4 (byte) processChars::i#9 
Alias (word) processChars::xpos#1 = (word) processChars::xpos#2 
Alias (byte) processChars::xchar#0 = (byte~) processChars::$28 
Alias (byte) processChars::ychar#0 = (byte~) processChars::$32 
Alias (byte) processChars::numActive#3 = (byte) processChars::numActive#6 (byte) processChars::numActive#8 
Alias (byte*) init_dist_screen::screen#1 = (byte*) init_dist_screen::screen#2 (byte*) init_dist_screen::screen_topline#0 
Alias (byte) NUM_SQUARES#3 = (byte) NUM_SQUARES#45 
Alias (byte*) heap_head#20 = (byte*) heap_head#9 
Alias (word*) SQUARES#14 = (word*) SQUARES#5 
Alias (byte*) init_dist_screen::screen_bottomline#0 = (byte*~) init_dist_screen::$1 
Alias (byte) init_dist_screen::y2#0 = (byte~) init_dist_screen::$2 (byte) init_dist_screen::y2#1 (byte) init_dist_screen::y2#2 
Alias (word*) SQUARES#27 = (word*) SQUARES#35 (word*) SQUARES#28 
Alias (byte) NUM_SQUARES#39 = (byte) NUM_SQUARES#43 (byte) NUM_SQUARES#40 
Alias (byte*) init_dist_screen::screen_topline#11 = (byte*) init_dist_screen::screen_topline#13 (byte*) init_dist_screen::screen_topline#12 
Alias (byte*) init_dist_screen::screen_bottomline#11 = (byte*) init_dist_screen::screen_bottomline#13 (byte*) init_dist_screen::screen_bottomline#12 
Alias (byte) init_dist_screen::y#12 = (byte) init_dist_screen::y#2 (byte) init_dist_screen::y#13 
Alias (byte*) heap_head#54 = (byte*) heap_head#57 (byte*) heap_head#55 
Alias (byte~) init_dist_screen::$7 = (byte~) init_dist_screen::$6 
Alias (byte~) init_dist_screen::$5 = (byte~) init_dist_screen::$4 
Alias (byte) init_dist_screen::yd#0 = (byte~) init_dist_screen::$8 
Alias (word) sqr::return#2 = (word) sqr::return#5 
Alias (word*) SQUARES#18 = (word*) SQUARES#40 
Alias (byte) NUM_SQUARES#33 = (byte) NUM_SQUARES#36 
Alias (byte*) init_dist_screen::screen_topline#10 = (byte*) init_dist_screen::screen_topline#9 
Alias (byte*) init_dist_screen::screen_bottomline#10 = (byte*) init_dist_screen::screen_bottomline#9 
Alias (byte) init_dist_screen::y#10 = (byte) init_dist_screen::y#11 
Alias (byte*) heap_head#50 = (byte*) heap_head#52 
Alias (word) init_dist_screen::yds#0 = (word~) init_dist_screen::$9 
Alias (byte) init_dist_screen::x2#0 = (byte~) init_dist_screen::$10 (byte) init_dist_screen::x2#1 (byte) init_dist_screen::x2#2 
Alias (word*) SQUARES#29 = (word*) SQUARES#36 (word*) SQUARES#30 
Alias (word) init_dist_screen::yds#3 = (word) init_dist_screen::yds#5 (word) init_dist_screen::yds#4 
Alias (byte) NUM_SQUARES#24 = (byte) NUM_SQUARES#29 (byte) NUM_SQUARES#25 
Alias (byte*) init_dist_screen::screen_topline#6 = (byte*) init_dist_screen::screen_topline#8 (byte*) init_dist_screen::screen_topline#7 
Alias (byte) init_dist_screen::x#2 = (byte) init_dist_screen::x#6 (byte) init_dist_screen::x#7 
Alias (byte*) init_dist_screen::screen_bottomline#6 = (byte*) init_dist_screen::screen_bottomline#8 (byte*) init_dist_screen::screen_bottomline#7 
Alias (byte) init_dist_screen::xb#5 = (byte) init_dist_screen::xb#7 (byte) init_dist_screen::xb#6 
Alias (byte) init_dist_screen::y#7 = (byte) init_dist_screen::y#9 (byte) init_dist_screen::y#8 
Alias (byte*) heap_head#45 = (byte*) heap_head#48 (byte*) heap_head#46 
Alias (byte~) init_dist_screen::$15 = (byte~) init_dist_screen::$14 
Alias (byte~) init_dist_screen::$13 = (byte~) init_dist_screen::$12 
Alias (byte) init_dist_screen::xd#0 = (byte~) init_dist_screen::$16 
Alias (word) sqr::return#3 = (word) sqr::return#6 
Alias (word) init_dist_screen::yds#1 = (word) init_dist_screen::yds#2 (word) init_dist_screen::yds#6 
Alias (word*) SQUARES#15 = (word*) SQUARES#20 (word*) SQUARES#19 (word*) SQUARES#31 (word*) SQUARES#24 (word*) SQUARES#6 
Alias (byte) NUM_SQUARES#11 = (byte) NUM_SQUARES#13 (byte) NUM_SQUARES#19 (byte) NUM_SQUARES#20 (byte) NUM_SQUARES#16 (byte) NUM_SQUARES#4 
Alias (byte*) init_dist_screen::screen_topline#2 = (byte*) init_dist_screen::screen_topline#4 (byte*) init_dist_screen::screen_topline#5 (byte*) init_dist_screen::screen_topline#3 
Alias (byte) init_dist_screen::x#3 = (byte) init_dist_screen::x#4 (byte) init_dist_screen::x#5 
Alias (byte*) init_dist_screen::screen_bottomline#2 = (byte*) init_dist_screen::screen_bottomline#4 (byte*) init_dist_screen::screen_bottomline#5 (byte*) init_dist_screen::screen_bottomline#3 
Alias (byte) init_dist_screen::xb#2 = (byte) init_dist_screen::xb#3 (byte) init_dist_screen::xb#4 
Alias (byte) init_dist_screen::y#3 = (byte) init_dist_screen::y#5 (byte) init_dist_screen::y#6 (byte) init_dist_screen::y#4 
Alias (byte*) heap_head#10 = (byte*) heap_head#38 (byte*) heap_head#42 (byte*) heap_head#33 (byte*) heap_head#29 (byte*) heap_head#21 
Alias (word) init_dist_screen::xds#0 = (word~) init_dist_screen::$17 
Alias (word) init_dist_screen::ds#0 = (word~) init_dist_screen::$18 
Alias (byte) sqrt::return#2 = (byte) sqrt::return#4 
Alias (byte) init_dist_screen::d#0 = (byte~) init_dist_screen::$19 
Alias (word) setupRasterIrq::raster#1 = (word) setupRasterIrq::raster#3 (word) setupRasterIrq::raster#4 
Alias (void()*) setupRasterIrq::irqRoutine#2 = (void()*) setupRasterIrq::irqRoutine#4 (void()*) setupRasterIrq::irqRoutine#3 
Alias (byte) NUM_SQUARES#12 = (byte) NUM_SQUARES#5 
Alias (byte*) heap_head#11 = (byte*) heap_head#22 
Alias (word*) SQUARES#16 = (word*) SQUARES#7 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (phi-usage) (byte) getCharToProcess::x#2
Alias candidate removed (phi-usage) (byte) getCharToProcess::y#2
Alias candidate removed (solo) (byte) getCharToProcess::x#3 = 
Alias candidate removed (solo) (byte) getCharToProcess::y#3 = 
Alias (word) bsearch16u::key#1 = (word) bsearch16u::key#5 
Alias (byte) NUM_SQUARES#18 = (byte) NUM_SQUARES#22 
Alias (byte*) heap_head#32 = (byte*) heap_head#36 
Alias (word*) SQUARES#26 = (word*) SQUARES#33 
Alias (byte*) getCharToProcess::screen_line#2 = (byte*) getCharToProcess::screen_line#3 
Alias (byte*) getCharToProcess::dist_line#2 = (byte*) getCharToProcess::dist_line#3 
Alias (byte*) SCREEN_COPY#10 = (byte*) SCREEN_COPY#17 
Alias (byte) getCharToProcess::return_x#1 = (byte) getCharToProcess::closest_x#3 
Alias (byte) getCharToProcess::return_y#1 = (byte) getCharToProcess::closest_y#3 
Alias (byte) getCharToProcess::return_dist#1 = (byte) getCharToProcess::closest_dist#3 
Alias (byte) startProcessing::center_y#1 = (byte) startProcessing::center_y#5 
Alias (byte) startProcessing::center_x#1 = (byte) startProcessing::center_x#5 
Alias (struct ProcessingSprite*) processChars::processing#0 = (struct ProcessingSprite*) processChars::processing#2 (struct ProcessingSprite*) processChars::processing#4 
Alias (byte) processChars::bitmask#0 = (byte) processChars::bitmask#2 (byte) processChars::bitmask#4 
Alias (byte) processChars::i#10 = (byte) processChars::i#6 (byte) processChars::i#11 (byte) processChars::i#5 
Alias (byte) processChars::numActive#10 = (byte) processChars::numActive#13 (byte) processChars::numActive#4 (byte) processChars::numActive#2 
Alias (word) processChars::xpos#0 = (word) processChars::xpos#1 
Alias (word*) SQUARES#18 = (word*) SQUARES#27 
Alias (byte) NUM_SQUARES#33 = (byte) NUM_SQUARES#39 
Alias (byte*) init_dist_screen::screen_topline#10 = (byte*) init_dist_screen::screen_topline#11 
Alias (byte*) init_dist_screen::screen_bottomline#10 = (byte*) init_dist_screen::screen_bottomline#11 
Alias (byte) init_dist_screen::y#10 = (byte) init_dist_screen::y#12 
Alias (byte*) heap_head#50 = (byte*) heap_head#54 
Alias (word*) SQUARES#15 = (word*) SQUARES#29 
Alias (word) init_dist_screen::yds#1 = (word) init_dist_screen::yds#3 
Alias (byte) NUM_SQUARES#11 = (byte) NUM_SQUARES#24 
Alias (byte*) init_dist_screen::screen_topline#2 = (byte*) init_dist_screen::screen_topline#6 
Alias (byte) init_dist_screen::x#2 = (byte) init_dist_screen::x#3 
Alias (byte*) init_dist_screen::screen_bottomline#2 = (byte*) init_dist_screen::screen_bottomline#6 
Alias (byte) init_dist_screen::xb#2 = (byte) init_dist_screen::xb#5 
Alias (byte) init_dist_screen::y#3 = (byte) init_dist_screen::y#7 
Alias (byte*) heap_head#10 = (byte*) heap_head#45 
Alias (word) setupRasterIrq::raster#1 = (word) setupRasterIrq::raster#2 
Alias (void()*) setupRasterIrq::irqRoutine#1 = (void()*) setupRasterIrq::irqRoutine#2 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (phi-usage) (byte) getCharToProcess::x#2
Alias candidate removed (phi-usage) (byte) getCharToProcess::y#2
Alias candidate removed (solo) (byte) getCharToProcess::x#3 = 
Alias candidate removed (solo) (byte) getCharToProcess::y#3 = 
Alias (byte) processChars::i#10 = (byte) processChars::i#3 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (phi-usage) (byte) getCharToProcess::x#2
Alias candidate removed (phi-usage) (byte) getCharToProcess::y#2
Alias candidate removed (solo) (byte) getCharToProcess::x#3 = 
Alias candidate removed (solo) (byte) getCharToProcess::y#3 = 
Self Phi Eliminated (word) bsearch16u::key#1
Self Phi Eliminated (byte*) heap_head#15
Self Phi Eliminated (word*) SQUARES#17
Self Phi Eliminated (byte*) SCREEN_COPY#24
Self Phi Eliminated (byte*) SCREEN_DIST#15
Self Phi Eliminated (byte) NUM_SQUARES#44
Self Phi Eliminated (byte*) heap_head#53
Self Phi Eliminated (word*) SQUARES#50
Self Phi Eliminated (byte*) SCREEN_COPY#11
Self Phi Eliminated (byte*) SCREEN_DIST#11
Self Phi Eliminated (byte) NUM_SQUARES#31
Self Phi Eliminated (byte*) heap_head#44
Self Phi Eliminated (word*) SQUARES#42
Self Phi Eliminated (byte*) SCREEN_COPY#12
Self Phi Eliminated (byte*) SCREEN_DIST#12
Self Phi Eliminated (byte) NUM_SQUARES#18
Self Phi Eliminated (byte*) heap_head#32
Self Phi Eliminated (word*) SQUARES#26
Self Phi Eliminated (byte) NUM_SQUARES#10
Self Phi Eliminated (byte*) heap_head#19
Self Phi Eliminated (word*) SQUARES#13
Self Phi Eliminated (byte*) getCharToProcess::screen_line#2
Self Phi Eliminated (byte*) getCharToProcess::dist_line#2
Self Phi Eliminated (byte*) SCREEN_COPY#10
Self Phi Eliminated (byte) startProcessing::freeIdx#4
Self Phi Eliminated (byte) startProcessing::center_y#1
Self Phi Eliminated (byte) startProcessing::center_x#1
Self Phi Eliminated (byte) startProcessing::center_x#2
Self Phi Eliminated (byte) startProcessing::center_y#2
Self Phi Eliminated (byte) startProcessing::spriteIdx#1
Self Phi Eliminated (byte) startProcessing::spriteCol#1
Self Phi Eliminated (byte*) startProcessing::screenPtr#1
Self Phi Eliminated (word*) SQUARES#15
Self Phi Eliminated (word) init_dist_screen::yds#1
Self Phi Eliminated (byte) NUM_SQUARES#11
Self Phi Eliminated (byte*) init_dist_screen::screen_topline#2
Self Phi Eliminated (byte*) init_dist_screen::screen_bottomline#2
Self Phi Eliminated (byte) init_dist_screen::y#3
Self Phi Eliminated (byte*) heap_head#10
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (byte) bsearch16u::num#7 (byte) bsearch16u::num#2
Identical Phi Values (word*) bsearch16u::items#7 (word*) bsearch16u::items#1
Identical Phi Values (word) bsearch16u::key#4 (word) bsearch16u::key#0
Identical Phi Values (word) bsearch16u::key#1 (word) bsearch16u::key#4
Identical Phi Values (byte) NUM_SQUARES#6 (byte) NUM_SQUARES#3
Identical Phi Values (byte*) heap_head#24 (byte*) heap_head#28
Identical Phi Values (byte*) heap_head#14 (byte*) heap_head#1
Identical Phi Values (byte*) heap_head#15 (byte*) heap_head#14
Identical Phi Values (word*) SQUARES#17 (word*) SQUARES#1
Identical Phi Values (word) sqrt::val#1 (word) sqrt::val#0
Identical Phi Values (word*) SQUARES#10 (word*) SQUARES#15
Identical Phi Values (byte) NUM_SQUARES#8 (byte) NUM_SQUARES#11
Identical Phi Values (byte*) heap_head#16 (byte*) heap_head#1
Identical Phi Values (byte*) heap_head#17 (byte*) heap_head#1
Identical Phi Values (byte*) SCREEN_DIST#1 (byte*) SCREEN_DIST#0
Identical Phi Values (byte) NUM_SQUARES#14 (byte) NUM_SQUARES#0
Identical Phi Values (byte*) heap_head#26 (byte*) heap_head#17
Identical Phi Values (word*) SQUARES#21 (word*) SQUARES#0
Identical Phi Values (byte*) SCREEN_COPY#1 (byte*) SCREEN_COPY#0
Identical Phi Values (byte) NUM_SQUARES#1 (byte) NUM_SQUARES#11
Identical Phi Values (byte*) heap_head#18 (byte*) heap_head#10
Identical Phi Values (word*) SQUARES#12 (word*) SQUARES#15
Identical Phi Values (byte*) SCREEN_COPY#24 (byte*) SCREEN_COPY#1
Identical Phi Values (byte*) SCREEN_DIST#15 (byte*) SCREEN_DIST#1
Identical Phi Values (byte) NUM_SQUARES#44 (byte) NUM_SQUARES#1
Identical Phi Values (byte*) heap_head#53 (byte*) heap_head#18
Identical Phi Values (word*) SQUARES#50 (word*) SQUARES#12
Identical Phi Values (byte*) SCREEN_COPY#11 (byte*) SCREEN_COPY#24
Identical Phi Values (byte*) SCREEN_DIST#11 (byte*) SCREEN_DIST#15
Identical Phi Values (byte) NUM_SQUARES#31 (byte) NUM_SQUARES#44
Identical Phi Values (byte*) heap_head#44 (byte*) heap_head#53
Identical Phi Values (word*) SQUARES#42 (word*) SQUARES#50
Identical Phi Values (byte*) SCREEN_COPY#12 (byte*) SCREEN_COPY#11
Identical Phi Values (byte*) SCREEN_DIST#12 (byte*) SCREEN_DIST#11
Identical Phi Values (byte) NUM_SQUARES#18 (byte) NUM_SQUARES#31
Identical Phi Values (byte*) heap_head#32 (byte*) heap_head#44
Identical Phi Values (word*) SQUARES#26 (word*) SQUARES#42
Identical Phi Values (byte) NUM_SQUARES#10 (byte) NUM_SQUARES#18
Identical Phi Values (byte*) heap_head#19 (byte*) heap_head#32
Identical Phi Values (word*) SQUARES#13 (word*) SQUARES#26
Identical Phi Values (byte*) SCREEN_COPY#2 (byte*) SCREEN_COPY#12
Identical Phi Values (byte*) SCREEN_DIST#2 (byte*) SCREEN_DIST#12
Identical Phi Values (byte*) getCharToProcess::screen_line#2 (byte*) getCharToProcess::screen_line#4
Identical Phi Values (byte*) getCharToProcess::dist_line#2 (byte*) getCharToProcess::dist_line#6
Identical Phi Values (byte*) SCREEN_COPY#10 (byte*) SCREEN_COPY#22
Identical Phi Values (byte) getCharToProcess::x#3 (byte) getCharToProcess::x#2
Identical Phi Values (byte) getCharToProcess::y#3 (byte) getCharToProcess::y#2
Identical Phi Values (byte) startProcessing::center_y#9 (byte) startProcessing::center_y#0
Identical Phi Values (byte) startProcessing::center_x#9 (byte) startProcessing::center_x#0
Identical Phi Values (byte) startProcessing::freeIdx#4 (byte) startProcessing::freeIdx#6
Identical Phi Values (byte) startProcessing::center_y#1 (byte) startProcessing::center_y#8
Identical Phi Values (byte) startProcessing::center_x#1 (byte) startProcessing::center_x#8
Identical Phi Values (byte) startProcessing::center_x#2 (byte) startProcessing::center_x#1
Identical Phi Values (byte) startProcessing::center_y#2 (byte) startProcessing::center_y#1
Identical Phi Values (byte) startProcessing::spriteIdx#1 (byte) startProcessing::freeIdx#2
Identical Phi Values (byte) startProcessing::spriteCol#1 (byte) startProcessing::spriteCol#0
Identical Phi Values (byte*) startProcessing::screenPtr#1 (byte*) startProcessing::screenPtr#0
Identical Phi Values (byte*) heap_head#28 (byte*) heap_head#26
Identical Phi Values (word*) SQUARES#23 (word*) SQUARES#21
Identical Phi Values (byte*) init_dist_screen::screen#1 (byte*) init_dist_screen::screen#0
Identical Phi Values (byte*) heap_head#20 (byte*) heap_head#15
Identical Phi Values (word*) SQUARES#14 (word*) SQUARES#17
Identical Phi Values (word*) SQUARES#15 (word*) SQUARES#18
Identical Phi Values (word) init_dist_screen::yds#1 (word) init_dist_screen::yds#0
Identical Phi Values (byte) NUM_SQUARES#11 (byte) NUM_SQUARES#33
Identical Phi Values (byte*) init_dist_screen::screen_topline#2 (byte*) init_dist_screen::screen_topline#10
Identical Phi Values (byte*) init_dist_screen::screen_bottomline#2 (byte*) init_dist_screen::screen_bottomline#10
Identical Phi Values (byte) init_dist_screen::y#3 (byte) init_dist_screen::y#10
Identical Phi Values (byte*) heap_head#10 (byte*) heap_head#50
Identical Phi Values (word) setupRasterIrq::raster#1 (word) setupRasterIrq::raster#0
Identical Phi Values (void()*) setupRasterIrq::irqRoutine#1 (void()*) setupRasterIrq::irqRoutine#0
Identical Phi Values (byte) NUM_SQUARES#12 (byte) NUM_SQUARES#10
Identical Phi Values (byte*) heap_head#11 (byte*) heap_head#19
Identical Phi Values (word*) SQUARES#16 (word*) SQUARES#13
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (word*) SQUARES#9 (word*) SQUARES#18
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [460] (byte~) processChars::$17 ← (byte) processChars::i#10 * (byte) 2
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) bsearch16u::$5 [13] if((byte) bsearch16u::num#3>(byte) 0) goto bsearch16u::@7
Simple Condition (bool~) bsearch16u::$12 [25] if((signed word) bsearch16u::result#0!=(signed byte) 0) goto bsearch16u::@9
Simple Condition (bool~) bsearch16u::$0 [28] if(*((word*) bsearch16u::items#2)<=(word) bsearch16u::key#0) goto bsearch16u::@1
Simple Condition (bool~) bsearch16u::$14 [32] if((signed word) bsearch16u::result#0<=(signed byte) 0) goto bsearch16u::@10
Simple Condition (bool~) init_squares::$5 [77] if((byte) init_squares::i#1!=rangelast(0,init_squares::$2)) goto init_squares::@1
Simple Condition (bool~) main::$6 [177] if((byte*) main::src#1!=(byte*~) main::$5) goto main::@1
Simple Condition (bool~) main::$8 [203] if((byte) main::i#1!=rangelast(0,main::$7)) goto main::@3
Simple Condition (bool~) main::$11 [226] if((byte) main::center_dist#0!=(byte) NOT_FOUND#0) goto main::@6
Simple Condition (bool~) getCharToProcess::$3 [258] if(*((byte*) getCharToProcess::screen_line#4 + (byte) getCharToProcess::x#2)==(byte) ' ') goto getCharToProcess::@5
Simple Condition (bool~) getCharToProcess::$6 [262] if((byte) getCharToProcess::x#1!=rangelast(0,$27)) goto getCharToProcess::@4
Simple Condition (bool~) getCharToProcess::$5 [267] if((byte) getCharToProcess::dist#0>=(byte) getCharToProcess::closest_dist#2) goto getCharToProcess::@5
Simple Condition (bool~) getCharToProcess::$7 [277] if((byte) getCharToProcess::y#1!=rangelast(0,$18)) goto getCharToProcess::@3
Simple Condition (bool~) getCharToProcess::$1 [281] if((byte) getCharToProcess::return_dist#1==(byte) NOT_FOUND#0) goto getCharToProcess::@1
Simple Condition (bool~) startProcessing::$26 [309] if(*((byte*) startProcessing::$41 + (byte~) startProcessing::$30)!=(const byte) STATUS_FREE) goto startProcessing::@3
Simple Condition (bool~) startProcessing::$27 [313] if((byte) startProcessing::i#1!=rangelast(0,startProcessing::$24)) goto startProcessing::@2
Simple Condition (bool~) startProcessing::$28 [318] if((byte) startProcessing::freeIdx#2==(byte) $ff) goto startProcessing::@1
Simple Condition (bool~) startProcessing::$29 [348] if((byte) startProcessing::i1#1!=rangelast(0,7)) goto startProcessing::@9
Simple Condition (bool~) processChars::$5 [416] if(*((byte*) processChars::$41)==(const byte) STATUS_FREE) goto processChars::@3
Simple Condition (bool~) processChars::$34 [420] if((byte) processChars::i#1!=rangelast(0,processChars::$1)) goto processChars::@2
Simple Condition (bool~) processChars::$7 [425] if(*((byte*) processChars::$42)!=(const byte) STATUS_NEW) goto processChars::@4
Simple Condition (bool~) processChars::$66 [432] if((byte) 0!=(byte~) processChars::$11) goto processChars::@5
Simple Condition (bool~) init_dist_screen::$3 [530] if((byte) init_dist_screen::y2#0>=(byte) $18) goto init_dist_screen::@2
Simple Condition (bool~) init_dist_screen::$11 [551] if((byte) init_dist_screen::x2#0>=(byte) $27) goto init_dist_screen::@6
Simple Condition (bool~) init_dist_screen::$20 [581] if((byte) init_dist_screen::x#1<=(byte) $13) goto init_dist_screen::@5
Simple Condition (bool~) init_dist_screen::$21 [587] if((byte) init_dist_screen::y#1!=rangelast(0,$c)) goto init_dist_screen::@1
Simple Condition (bool~) initSprites::$2 [600] if((byte*) initSprites::sp#1<(byte*~) initSprites::$1) goto initSprites::@1
Simple Condition (bool~) initSprites::$3 [606] if((byte) initSprites::i#1!=rangelast(0,7)) goto initSprites::@3
Simple Condition (bool~) setupRasterIrq::$0 [617] if((word) setupRasterIrq::raster#0<(word) $100) goto setupRasterIrq::@1
Simple Condition (bool~) irqTop::$2 [641] if((byte) irqTop::i#1!=rangelast(0,4)) goto irqTop::@3
Simple Condition (bool~) irqTop::$3 [648] if((byte) irqTop::i1#1!=rangelast(0,7)) goto irqTop::@5
Simple Condition (bool~) irqBottom::$4 [663] if((byte) irqBottom::i#1!=rangelast(0,4)) goto irqBottom::@5
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting || if()-condition to two if()s [472] (bool~) processChars::$24 ← (bool~) processChars::$22 || (bool~) processChars::$23
Successful SSA optimization Pass2ConditionalAndOrRewriting
Rewriting || if()-condition to two if()s [469] (bool~) processChars::$22 ← (bool~) processChars::$20 || (bool~) processChars::$21
Successful SSA optimization Pass2ConditionalAndOrRewriting
Rewriting || if()-condition to two if()s [466] (bool~) processChars::$20 ← (bool~) processChars::$18 || (bool~) processChars::$19
Successful SSA optimization Pass2ConditionalAndOrRewriting
Rewriting ! if()-condition to reversed if() [509] (bool~) processChars::$0 ← ! (bool) DEBUG#0
Successful SSA optimization Pass2ConditionalAndOrRewriting
Rewriting ! if()-condition to reversed if() [631] (bool~) irqTop::$0 ← ! (bool) DEBUG#0
Successful SSA optimization Pass2ConditionalAndOrRewriting
Rewriting ! if()-condition to reversed if() [654] (bool~) irqBottom::$0 ← ! (bool) DEBUG#0
Successful SSA optimization Pass2ConditionalAndOrRewriting
Rewriting ! if()-condition to reversed if() [657] (bool~) irqBottom::$2 ← ! (bool) DEBUG#0
Successful SSA optimization Pass2ConditionalAndOrRewriting
Constant right-side identified [41] (byte~) bsearch16u::$17 ← (byte) 1 * (const byte) SIZEOF_WORD
Constant right-side identified [48] (byte~) bsearch16u::$18 ← (byte) 1 * (const byte) SIZEOF_WORD
Constant right-side identified [207] (void()*) setupRasterIrq::irqRoutine#0 ← & interrupt(HARDWARE_ALL)(void()) irqTop()
Constant right-side identified [634] (void()*~) irqTop::$1 ← & interrupt(HARDWARE_ALL)(void()) irqBottom()
Constant right-side identified [667] (void()*~) irqBottom::$3 ← & interrupt(HARDWARE_ALL)(void()) irqTop()
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) HEAP_START#0 = (byte*) 49152
Constant (const byte) bsearch16u::$17 = 1*SIZEOF_WORD
Constant (const byte) bsearch16u::$18 = 1*SIZEOF_WORD
Constant (const byte) NUM_SQUARES#0 = $ff
Constant (const word*) SQUARES#0 = (word*) 0
Constant (const word) init_squares::sqr#0 = 0
Constant (const byte) init_squares::i#0 = 0
Constant (const byte*) PROCPORT_DDR#0 = (byte*) 0
Constant (const byte) PROCPORT_DDR_MEMORY_MASK#0 = 7
Constant (const byte*) PROCPORT#0 = (byte*) 1
Constant (const byte) PROCPORT_RAM_IO#0 = $35
Constant (const byte) PROCPORT_RAM_CHARROM#0 = $31
Constant (const byte*) CHARGEN#0 = (byte*) 53248
Constant (const byte) BORDER_XPOS_LEFT#0 = $18
Constant (const word) BORDER_XPOS_RIGHT#0 = $158
Constant (const byte) BORDER_YPOS_TOP#0 = $32
Constant (const byte) BORDER_YPOS_BOTTOM#0 = $fa
Constant (const word) SPRITE_PTRS#0 = $3f8
Constant (const byte*) SPRITES_XPOS#0 = (byte*) 53248
Constant (const byte*) SPRITES_YPOS#0 = (byte*) 53249
Constant (const byte*) SPRITES_XMSB#0 = (byte*) 53264
Constant (const byte*) RASTER#0 = (byte*) 53266
Constant (const byte*) SPRITES_ENABLE#0 = (byte*) 53269
Constant (const byte*) SPRITES_EXPAND_Y#0 = (byte*) 53271
Constant (const byte*) SPRITES_MC#0 = (byte*) 53276
Constant (const byte*) SPRITES_EXPAND_X#0 = (byte*) 53277
Constant (const byte*) BORDERCOL#0 = (byte*) 53280
Constant (const byte*) BGCOL#0 = (byte*) 53281
Constant (const byte*) SPRITES_COLS#0 = (byte*) 53287
Constant (const byte*) VIC_CONTROL#0 = (byte*) 53265
Constant (const byte*) IRQ_STATUS#0 = (byte*) 53273
Constant (const byte*) IRQ_ENABLE#0 = (byte*) 53274
Constant (const byte) IRQ_RASTER#0 = 1
Constant (const byte*) COLS#0 = (byte*) 55296
Constant (const byte*) CIA1_INTERRUPT#0 = (byte*) 56333
Constant (const byte) CIA_INTERRUPT_CLEAR#0 = $7f
Constant (const void()**) HARDWARE_IRQ#0 = (void()**) 65534
Constant (const byte) WHITE#0 = 1
Constant (const byte) BLUE#0 = 6
Constant (const byte) LIGHT_BLUE#0 = $e
Constant (const bool) DEBUG#0 = false
Constant (const byte*) SCREEN#0 = (byte*) 1024
Constant (const byte*) SPRITE_DATA#0 = (byte*) 8192
Constant (const word[$28]) VXSIN#0 = kickasm {{ .for(var i=0; i<40; i++) {
      .word -sin(toRadians([i*360]/40))*4
    }
 }}
Constant (const word[$19]) VYSIN#0 = kickasm {{ .for(var i=0; i<25; i++) {
      .word -sin(toRadians([i*360]/25))*4
    }
 }}
Constant (const word) malloc::size#1 = $3e8
Constant (const word) malloc::size#2 = $3e8
Constant (const byte) NUM_PROCESSING#0 = 8
Constant (const byte) NOT_FOUND#0 = $ff
Constant (const byte) main::i#0 = 0
Constant (const void()*) setupRasterIrq::irqRoutine#0 = &irqTop
Constant (const byte) getCharToProcess::closest_x#0 = 0
Constant (const byte) getCharToProcess::closest_y#0 = 0
Constant (const byte) getCharToProcess::y#0 = 0
Constant (const byte) getCharToProcess::x#0 = 0
Constant (const byte) startProcessing::freeIdx#0 = $ff
Constant (const byte) startProcessing::i#0 = 0
Constant (const byte) startProcessing::i1#0 = 0
Constant (const byte) processChars::numActive#0 = 0
Constant (const byte) processChars::i#0 = 0
Constant (const byte) NUM_SQUARES#3 = $30
Constant (const byte) init_dist_screen::y#0 = 0
Constant (const byte) init_dist_screen::x#0 = 0
Constant (const byte) init_dist_screen::xb#0 = $27
Constant (const byte) initSprites::i#0 = 0
Constant (const byte) RASTER_IRQ_TOP#0 = $30
Constant (const void()*) irqTop::$1 = &irqBottom
Constant (const byte) irqTop::i#0 = 0
Constant (const byte) irqTop::i1#0 = 0
Constant (const byte) RASTER_IRQ_MIDDLE#0 = $ff
Constant (const byte) irqBottom::i#0 = 0
Constant (const void()*) irqBottom::$3 = &irqTop
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) main::src#0 = SCREEN#0
Constant (const word) setupRasterIrq::raster#0 = RASTER_IRQ_TOP#0
Constant (const byte) getCharToProcess::closest_dist#0 = NOT_FOUND#0
Constant (const byte*) initSprites::sp#0 = SPRITE_DATA#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified { fill( NUM_PROCESSING#0, 0) } in [161] (struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 ← { fill( NUM_PROCESSING#0, 0) }
Constant value identified (word)BORDER_YPOS_BOTTOM#0 in [400] (word~) $10 ← (word)(const byte) BORDER_YPOS_BOTTOM#0
Successful SSA optimization Pass2ConstantValues
if() condition always true - replacing block destination [233] if(true) goto main::@5
if() condition always true - replacing block destination [240] if(true) goto main::@11
if() condition always false - eliminating [510] if((const bool) DEBUG#0) goto processChars::@16
if() condition always true - replacing block destination [617] if((const word) setupRasterIrq::raster#0<(word) $100) goto setupRasterIrq::@1
if() condition always false - eliminating [632] if((const bool) DEBUG#0) goto irqTop::@2
if() condition always false - eliminating [655] if((const bool) DEBUG#0) goto irqBottom::@3
if() condition always false - eliminating [658] if((const bool) DEBUG#0) goto irqBottom::@4
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [260] getCharToProcess::x#1 ← ++ getCharToProcess::x#2 to ++
Resolved ranged comparison value [262] if(getCharToProcess::x#1!=rangelast(0,$27)) goto getCharToProcess::@4 to (number) $28
Resolved ranged next value [275] getCharToProcess::y#1 ← ++ getCharToProcess::y#2 to ++
Resolved ranged comparison value [277] if(getCharToProcess::y#1!=rangelast(0,$18)) goto getCharToProcess::@3 to (number) $19
Resolved ranged next value [346] startProcessing::i1#1 ← ++ startProcessing::i1#2 to ++
Resolved ranged comparison value [348] if(startProcessing::i1#1!=rangelast(0,7)) goto startProcessing::@9 to (number) 8
Resolved ranged next value [585] init_dist_screen::y#1 ← ++ init_dist_screen::y#10 to ++
Resolved ranged comparison value [587] if(init_dist_screen::y#1!=rangelast(0,$c)) goto init_dist_screen::@1 to (number) $d
Resolved ranged next value [604] initSprites::i#1 ← ++ initSprites::i#2 to ++
Resolved ranged comparison value [606] if(initSprites::i#1!=rangelast(0,7)) goto initSprites::@3 to (number) 8
Resolved ranged next value [639] irqTop::i#1 ← ++ irqTop::i#2 to ++
Resolved ranged comparison value [641] if(irqTop::i#1!=rangelast(0,4)) goto irqTop::@3 to (number) 5
Resolved ranged next value [646] irqTop::i1#1 ← ++ irqTop::i1#2 to ++
Resolved ranged comparison value [648] if(irqTop::i1#1!=rangelast(0,7)) goto irqTop::@5 to (number) 8
Resolved ranged next value [661] irqBottom::i#1 ← ++ irqBottom::i#2 to ++
Resolved ranged comparison value [663] if(irqBottom::i#1!=rangelast(0,4)) goto irqBottom::@5 to (number) 5
Rewriting conditional comparison [581] if((byte) init_dist_screen::x#1<=(byte) $13) goto init_dist_screen::@5
Converting *(pointer+n) to pointer[n] [292] *((byte*~) getCharToProcess::$11) ← (byte) ' '  -- *(getCharToProcess::$10 + getCharToProcess::return_x#1)
Converting *(pointer+n) to pointer[n] [411] (byte) processChars::bitmask#0 ← (byte) 1 << *((byte*) processChars::$40)  -- *((byte*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_ID)
Converting *(pointer+n) to pointer[n] [416] if(*((byte*) processChars::$41)==(const byte) STATUS_FREE) goto processChars::@3  -- *((byte*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_STATUS)
Converting *(pointer+n) to pointer[n] [425] if(*((byte*) processChars::$42)!=(const byte) STATUS_NEW) goto processChars::@4  -- *((byte*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_STATUS)
Converting *(pointer+n) to pointer[n] [428] (word) processChars::xpos#0 ← *((word*) processChars::$43) >> (byte) 4  -- *((word*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_X)
Converting *(pointer+n) to pointer[n] [435] *(*((byte**) processChars::$44)) ← (byte) ' '  -- *((byte**)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR)
Converting *(pointer+n) to pointer[n] [439] *((const byte*) SPRITES_COLS#0 + *((byte*) processChars::$46)) ← *((byte*) processChars::$45)  -- *((byte*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_COL)
Converting *(pointer+n) to pointer[n] [439] *((const byte*) SPRITES_COLS#0 + *((byte*) processChars::$46)) ← *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL)  -- *((byte*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_ID)
Converting *(pointer+n) to pointer[n] [442] (byte*~) processChars::$9 ← (byte*~) processChars::$8 + *((byte*) processChars::$47)  -- *((byte*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_ID)
Converting *(pointer+n) to pointer[n] [444] *((byte*~) processChars::$9) ← *((byte*) processChars::$48)  -- *((byte*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_PTR)
Converting *(pointer+n) to pointer[n] [444] *((byte*~) processChars::$9) ← *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR)  -- *(processChars::$8 + *((byte*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_ID))
Converting *(pointer+n) to pointer[n] [446] *((byte*) processChars::$49) ← (const byte) STATUS_PROCESSING  -- *((byte*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_STATUS)
Converting *(pointer+n) to pointer[n] [457] (word~) processChars::$15 ← *((word*) processChars::$50) >> (byte) 4  -- *((word*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_Y)
Converting *(pointer+n) to pointer[n] [463] (bool~) processChars::$18 ← *((word*) processChars::$51) < (word) XPOS_LEFTMOST#0  -- *((word*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_X)
Converting *(pointer+n) to pointer[n] [465] (bool~) processChars::$19 ← *((word*) processChars::$52) > (word) XPOS_RIGHTMOST#0  -- *((word*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_X)
Converting *(pointer+n) to pointer[n] [468] (bool~) processChars::$21 ← *((word*) processChars::$53) < (word) YPOS_TOPMOST#0  -- *((word*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_Y)
Converting *(pointer+n) to pointer[n] [471] (bool~) processChars::$23 ← *((word*) processChars::$54) > (word) YPOS_BOTTOMMOST#0  -- *((word*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_Y)
Converting *(pointer+n) to pointer[n] [476] *((byte*) processChars::$55) ← (const byte) STATUS_FREE  -- *((byte*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_STATUS)
Converting *(pointer+n) to pointer[n] [488] *((word*) processChars::$57) ← *((word*) processChars::$56) + *((const word[$28]) VXSIN#0 + (byte~) processChars::$38)  -- *((word*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_VX)
Converting *(pointer+n) to pointer[n] [488] *((word*) processChars::$57) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) + *((const word[$28]) VXSIN#0 + (byte~) processChars::$38)  -- *((word*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_VX)
Converting *(pointer+n) to pointer[n] [492] *((word*) processChars::$60) ← *((word*) processChars::$58) + *((word*) processChars::$59)  -- *((word*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_X)
Converting *(pointer+n) to pointer[n] [492] *((word*) processChars::$60) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X) + *((word*) processChars::$59)  -- *((word*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_VX)
Converting *(pointer+n) to pointer[n] [492] *((word*) processChars::$60) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X) + *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX)  -- *((word*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_X)
Converting *(pointer+n) to pointer[n] [501] *((word*) processChars::$62) ← *((word*) processChars::$61) + *((const word[$19]) VYSIN#0 + (byte~) processChars::$39)  -- *((word*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_VY)
Converting *(pointer+n) to pointer[n] [501] *((word*) processChars::$62) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) + *((const word[$19]) VYSIN#0 + (byte~) processChars::$39)  -- *((word*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_VY)
Converting *(pointer+n) to pointer[n] [505] *((word*) processChars::$65) ← *((word*) processChars::$63) + *((word*) processChars::$64)  -- *((word*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_Y)
Converting *(pointer+n) to pointer[n] [505] *((word*) processChars::$65) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) + *((word*) processChars::$64)  -- *((word*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_VY)
Converting *(pointer+n) to pointer[n] [505] *((word*) processChars::$65) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) + *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY)  -- *((word*)processChars::processing#0 + OFFSET_STRUCT_PROCESSINGSPRITE_Y)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero (word*)PROCESSING#0 in [183] (word*) main::$17 ← (word*)(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X
Simplifying expression containing zero (word*)PROCESSING#0 in [369] (word*) startProcessing::$32 ← (word*)(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X
Simplifying expression containing zero (word*)processChars::processing#0 in [427] (word*) processChars::$43 ← (word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X
Simplifying expression containing zero (word*)processChars::processing#0 in [428] (word) processChars::xpos#0 ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X) >> (byte) 4
Simplifying expression containing zero (word*)processChars::processing#0 in [462] (word*) processChars::$51 ← (word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X
Simplifying expression containing zero (word*)processChars::processing#0 in [463] (bool~) processChars::$18 ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X) < (word) XPOS_LEFTMOST#0
Simplifying expression containing zero (word*)processChars::processing#0 in [464] (word*) processChars::$52 ← (word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X
Simplifying expression containing zero (word*)processChars::processing#0 in [465] (bool~) processChars::$19 ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X) > (word) XPOS_RIGHTMOST#0
Simplifying expression containing zero (word*)processChars::processing#0 in [489] (word*) processChars::$58 ← (word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X
Simplifying expression containing zero (word*)processChars::processing#0 in [491] (word*) processChars::$60 ← (word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X
Simplifying expression containing zero (word*)processChars::processing#0 in [492] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X) + *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX)
Simplifying expression containing zero (word*)processChars::processing#0 in [492] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X) ← *((word*)(struct ProcessingSprite*) processChars::processing#0) + *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte) startProcessing::center_dist#0 and assignment [107] (byte) startProcessing::center_dist#0 ← (byte) main::center_dist#0
Eliminating unused variable (struct ProcessingChar) getCharToProcess::return#0 and assignment [129] (struct ProcessingChar) getCharToProcess::return#0 ← struct-unwound {(byte) getCharToProcess::return_x#1, (byte) getCharToProcess::return_y#1, (byte) getCharToProcess::return_dist#1}
Eliminating unused variable (byte*~) getCharToProcess::$11 and assignment [133] (byte*~) getCharToProcess::$11 ← (byte*~) getCharToProcess::$10 + (byte) getCharToProcess::return_x#1
Eliminating unused variable (struct ProcessingChar) getCharToProcess::return#1 and assignment [135] (struct ProcessingChar) getCharToProcess::return#1 ← struct-unwound {(byte) getCharToProcess::return_x#1, (byte) getCharToProcess::return_y#1, (byte) getCharToProcess::return_dist#1}
Eliminating unused variable (byte*) processChars::$40 and assignment [216] (byte*) processChars::$40 ← (byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID
Eliminating unused variable (byte*) processChars::$41 and assignment [218] (byte*) processChars::$41 ← (byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
Eliminating unused variable (byte*) processChars::$42 and assignment [223] (byte*) processChars::$42 ← (byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
Eliminating unused variable (word*) processChars::$43 and assignment [225] (word*) processChars::$43 ← (word*)(struct ProcessingSprite*) processChars::processing#0
Eliminating unused variable (byte**) processChars::$44 and assignment [229] (byte**) processChars::$44 ← (byte**)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR
Eliminating unused variable (byte*) processChars::$45 and assignment [232] (byte*) processChars::$45 ← (byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL
Eliminating unused variable (byte*) processChars::$46 and assignment [233] (byte*) processChars::$46 ← (byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID
Eliminating unused variable (byte*) processChars::$47 and assignment [236] (byte*) processChars::$47 ← (byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID
Eliminating unused variable (byte*~) processChars::$9 and assignment [237] (byte*~) processChars::$9 ← (byte*~) processChars::$8 + *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID)
Eliminating unused variable (byte*) processChars::$48 and assignment [238] (byte*) processChars::$48 ← (byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR
Eliminating unused variable (byte*) processChars::$49 and assignment [240] (byte*) processChars::$49 ← (byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
Eliminating unused variable (word*) processChars::$50 and assignment [248] (word*) processChars::$50 ← (word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y
Eliminating unused variable (word*) processChars::$51 and assignment [253] (word*) processChars::$51 ← (word*)(struct ProcessingSprite*) processChars::processing#0
Eliminating unused variable (word*) processChars::$52 and assignment [255] (word*) processChars::$52 ← (word*)(struct ProcessingSprite*) processChars::processing#0
Eliminating unused variable (word*) processChars::$53 and assignment [257] (word*) processChars::$53 ← (word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y
Eliminating unused variable (word*) processChars::$54 and assignment [259] (word*) processChars::$54 ← (word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y
Eliminating unused variable (byte*) processChars::$55 and assignment [262] (byte*) processChars::$55 ← (byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
Eliminating unused variable (word*) processChars::$56 and assignment [271] (word*) processChars::$56 ← (word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX
Eliminating unused variable (word*) processChars::$57 and assignment [272] (word*) processChars::$57 ← (word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX
Eliminating unused variable (word*) processChars::$58 and assignment [274] (word*) processChars::$58 ← (word*)(struct ProcessingSprite*) processChars::processing#0
Eliminating unused variable (word*) processChars::$59 and assignment [275] (word*) processChars::$59 ← (word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX
Eliminating unused variable (word*) processChars::$60 and assignment [276] (word*) processChars::$60 ← (word*)(struct ProcessingSprite*) processChars::processing#0
Eliminating unused variable (word*) processChars::$61 and assignment [283] (word*) processChars::$61 ← (word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY
Eliminating unused variable (word*) processChars::$62 and assignment [284] (word*) processChars::$62 ← (word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY
Eliminating unused variable (word*) processChars::$63 and assignment [286] (word*) processChars::$63 ← (word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y
Eliminating unused variable (word*) processChars::$64 and assignment [287] (word*) processChars::$64 ← (word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY
Eliminating unused variable (word*) processChars::$65 and assignment [288] (word*) processChars::$65 ← (word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y
Eliminating unused variable - keeping the phi block (byte*) heap_head#50
Eliminating unused constant (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_X
Eliminating unused constant (const byte) NUM_SQUARES#0
Eliminating unused constant (const word*) SQUARES#0
Eliminating unused constant (const bool) DEBUG#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable (byte*~) processChars::$35 from unused block processChars::@16
Eliminating variable (byte~) processChars::$36 from unused block processChars::@16
Eliminating variable (byte) irqTop::i#2 from unused block irqTop::@3
Eliminating variable (byte) irqTop::i#1 from unused block irqTop::@3
Eliminating variable (byte) irqTop::i1#2 from unused block irqTop::@5
Eliminating variable (byte) irqTop::i1#1 from unused block irqTop::@5
Eliminating variable (byte) irqBottom::i#2 from unused block irqBottom::@5
Eliminating variable (byte) irqBottom::i#1 from unused block irqBottom::@5
Removing unused block main::@return
Removing unused block processChars::@16
Removing unused block setupRasterIrq::@3
Removing PHI-reference to removed block (irqTop::@2) in block irqTop::@3
Removing unused block irqTop::@2
Removing unused block irqTop::@3
Removing PHI-reference to removed block (irqTop::@4) in block irqTop::@5
Removing unused block irqTop::@4
Removing unused block irqTop::@5
Removing unused block irqTop::@6
Removing PHI-reference to removed block (irqBottom::@3) in block irqBottom::@5
Removing unused block irqBottom::@3
Removing unused block irqBottom::@5
Removing unused block irqBottom::@6
Removing unused block irqBottom::@4
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) $28 in if((byte) getCharToProcess::x#1!=(number) $28) goto getCharToProcess::@4
Adding number conversion cast (unumber) $19 in if((byte) getCharToProcess::y#1!=(number) $19) goto getCharToProcess::@3
Adding number conversion cast (unumber) 8 in if((byte) startProcessing::i1#1!=(number) 8) goto startProcessing::@9
Adding number conversion cast (unumber) $13+1 in if((byte) init_dist_screen::x#1<(byte) $13+(number) 1) goto init_dist_screen::@5
Adding number conversion cast (unumber) 1 in if((byte) init_dist_screen::x#1<(unumber)(byte) $13+(number) 1) goto init_dist_screen::@5
Adding number conversion cast (unumber) $d in if((byte) init_dist_screen::y#1!=(number) $d) goto init_dist_screen::@1
Adding number conversion cast (unumber) 8 in if((byte) initSprites::i#1!=(number) 8) goto initSprites::@3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast 8
Simplifying constant integer cast (byte~) processChars::$29
Simplifying constant integer cast (byte) $13+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast $d
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $d
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (byte~) processChars::$17 = (byte~) processChars::$13 
Alias (byte~) processChars::$30 = (byte~) processChars::$29 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) SCREEN_COPY#22
Self Phi Eliminated (byte) getCharToProcess::y#2
Self Phi Eliminated (byte) startProcessing::center_y#8
Self Phi Eliminated (byte) startProcessing::center_x#8
Self Phi Eliminated (word*) SQUARES#18
Self Phi Eliminated (byte) NUM_SQUARES#33
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (byte*) SCREEN_COPY#22 (byte*) SCREEN_COPY#0
Identical Phi Values (byte) getCharToProcess::y#2 (byte) getCharToProcess::y#7
Identical Phi Values (byte) startProcessing::center_y#8 (byte) startProcessing::center_y#0
Identical Phi Values (byte) startProcessing::center_x#8 (byte) startProcessing::center_x#0
Identical Phi Values (word*) SQUARES#18 (word*) SQUARES#1
Identical Phi Values (byte) NUM_SQUARES#33 (const byte) NUM_SQUARES#3
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) processChars::$18 [240] if(*((word*)(struct ProcessingSprite*) processChars::processing#0)<(word) XPOS_LEFTMOST#0) goto processChars::@7
Simple Condition (bool~) processChars::$23 [334] if(*((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y)>(word) YPOS_BOTTOMMOST#0) goto processChars::@7
Simple Condition (bool~) processChars::$21 [335] if(*((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y)<(word) YPOS_TOPMOST#0) goto processChars::@7
Simple Condition (bool~) processChars::$19 [336] if(*((word*)(struct ProcessingSprite*) processChars::processing#0)>(word) XPOS_RIGHTMOST#0) goto processChars::@7
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [24] (word) malloc::size#0 ← (const byte) NUM_SQUARES#3 * (const byte) SIZEOF_WORD
Constant right-side identified [30] (byte~) init_squares::$2 ← (const byte) NUM_SQUARES#3 - (byte) 1
Constant right-side identified [70] (byte*~) main::$5 ← (const byte*) SCREEN#0 + (word) $3e8
Constant right-side identified [72] (byte~) main::$7 ← (const byte) NUM_PROCESSING#0 - (byte) 1
Constant right-side identified [108] (byte*~) main::$4 ← (const byte*) SCREEN#0 + (word) $3e7
Constant right-side identified [110] (byte*~) main::$15 ← (const byte*) COLS#0 + (word) $3e7
Constant right-side identified [133] (byte~) startProcessing::$24 ← (const byte) NUM_PROCESSING#0 - (byte) 1
Constant right-side identified [173] (byte*~) startProcessing::$19 ← (const byte*) SPRITE_DATA#0 / (byte) $40
Constant right-side identified [198] (byte~) $2 ← (const byte) BORDER_XPOS_LEFT#0 - (byte) 8
Constant right-side identified [201] (word) XPOS_RIGHTMOST#0 ← (const word) BORDER_XPOS_RIGHT#0 << (byte) 4
Constant right-side identified [202] (byte~) $7 ← (const byte) BORDER_YPOS_TOP#0 - (byte) 8
Constant right-side identified [207] (byte~) processChars::$1 ← (const byte) NUM_PROCESSING#0 - (byte) 1
Constant right-side identified [223] (byte*~) processChars::$8 ← (const byte*) SCREEN#0 + (const word) SPRITE_PTRS#0
Constant right-side identified [246] (byte~) processChars::$27 ← (const byte) BORDER_XPOS_LEFT#0 / (byte) 8
Constant right-side identified [253] (byte~) processChars::$31 ← (const byte) BORDER_YPOS_TOP#0 / (byte) 8
Constant right-side identified [302] (byte~) initSprites::$0 ← (const byte) NUM_PROCESSING#0 * (byte) $40
Constant right-side identified [318] (byte~) setupRasterIrq::$1 ← < (const word) setupRasterIrq::raster#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) malloc::size#0 = NUM_SQUARES#3*SIZEOF_WORD
Constant (const byte) init_squares::$2 = NUM_SQUARES#3-1
Constant (const byte) bsearch16u::num#2 = NUM_SQUARES#3
Constant (const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 = { fill( NUM_PROCESSING#0, 0) }
Constant (const byte*) main::$5 = SCREEN#0+$3e8
Constant (const byte) main::$7 = NUM_PROCESSING#0-1
Constant (const byte*) main::$4 = SCREEN#0+$3e7
Constant (const byte*) main::$15 = COLS#0+$3e7
Constant (const byte) startProcessing::$24 = NUM_PROCESSING#0-1
Constant (const byte*) startProcessing::$19 = SPRITE_DATA#0/$40
Constant (const byte) $2 = BORDER_XPOS_LEFT#0-8
Constant (const word) XPOS_RIGHTMOST#0 = BORDER_XPOS_RIGHT#0<<4
Constant (const byte) $7 = BORDER_YPOS_TOP#0-8
Constant (const word) $10 = (word)BORDER_YPOS_BOTTOM#0
Constant (const byte) processChars::$1 = NUM_PROCESSING#0-1
Constant (const byte*) processChars::$8 = SCREEN#0+SPRITE_PTRS#0
Constant (const byte) processChars::$27 = BORDER_XPOS_LEFT#0/8
Constant (const byte) processChars::$31 = BORDER_YPOS_TOP#0/8
Constant (const byte) initSprites::$0 = NUM_PROCESSING#0*$40
Constant (const byte) setupRasterIrq::$1 = <setupRasterIrq::raster#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word*)PROCESSING#0 in [75] (word*) main::$17 ← (word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0
Constant value identified (word*)PROCESSING#0 in [77] (word*) main::$18 ← (word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y
Constant value identified (word*)PROCESSING#0 in [79] (word*) main::$19 ← (word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX
Constant value identified (word*)PROCESSING#0 in [81] (word*) main::$20 ← (word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY
Constant value identified (byte*)PROCESSING#0 in [83] (byte*) main::$21 ← (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID
Constant value identified (byte*)PROCESSING#0 in [85] (byte*) main::$22 ← (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR
Constant value identified (byte*)PROCESSING#0 in [87] (byte*) main::$23 ← (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL
Constant value identified (byte*)PROCESSING#0 in [89] (byte*) main::$24 ← (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
Constant value identified (byte**)PROCESSING#0 in [91] (byte**) main::$25 ← (byte**)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR
Constant value identified (byte*)PROCESSING#0 in [136] (byte*) startProcessing::$41 ← (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
Constant value identified (byte)startProcessing::$19 in [174] (byte~) startProcessing::$20 ← (byte)(const byte*) startProcessing::$19
Constant value identified (word*)PROCESSING#0 in [179] (word*) startProcessing::$32 ← (word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0
Constant value identified (word*)PROCESSING#0 in [181] (word*) startProcessing::$33 ← (word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y
Constant value identified (word*)PROCESSING#0 in [183] (word*) startProcessing::$34 ← (word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX
Constant value identified (word*)PROCESSING#0 in [185] (word*) startProcessing::$35 ← (word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY
Constant value identified (byte*)PROCESSING#0 in [187] (byte*) startProcessing::$36 ← (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID
Constant value identified (byte*)PROCESSING#0 in [189] (byte*) startProcessing::$37 ← (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR
Constant value identified (byte*)PROCESSING#0 in [191] (byte*) startProcessing::$38 ← (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL
Constant value identified (byte*)PROCESSING#0 in [193] (byte*) startProcessing::$39 ← (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
Constant value identified (byte**)PROCESSING#0 in [195] (byte**) startProcessing::$40 ← (byte**)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR
Constant value identified (word)$2 in [199] (word~) $3 ← (word)(const byte) $2
Constant value identified (word)$7 in [203] (word~) $8 ← (word)(const byte) $7
Successful SSA optimization Pass2ConstantValues
Resolved ranged next value [37] init_squares::i#1 ← ++ init_squares::i#2 to ++
Resolved ranged comparison value [38] if(init_squares::i#1!=rangelast(0,init_squares::$2)) goto init_squares::@1 to (const byte) init_squares::$2+(number) 1
Resolved ranged next value [93] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [94] if(main::i#1!=rangelast(0,main::$7)) goto main::@3 to (const byte) main::$7+(number) 1
Resolved ranged next value [138] startProcessing::i#1 ← ++ startProcessing::i#2 to ++
Resolved ranged comparison value [139] if(startProcessing::i#1!=rangelast(0,startProcessing::$24)) goto startProcessing::@2 to (const byte) startProcessing::$24+(number) 1
Resolved ranged next value [214] processChars::i#1 ← ++ processChars::i#10 to ++
Resolved ranged comparison value [215] if(processChars::i#1!=rangelast(0,processChars::$1)) goto processChars::@2 to (const byte) processChars::$1+(number) 1
Eliminating unused constant (const byte) irqTop::i#0
Eliminating unused constant (const byte) irqTop::i1#0
Eliminating unused constant (const byte) irqBottom::i#0
Eliminating unused constant (const byte*) BORDERCOL#0
Eliminating unused constant (const byte*) BGCOL#0
Eliminating unused constant (const byte) WHITE#0
Eliminating unused constant (const byte) BLUE#0
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) init_squares::$2+1 in if((byte) init_squares::i#1!=(const byte) init_squares::$2+(number) 1) goto init_squares::@1
Adding number conversion cast (unumber) 1 in if((byte) init_squares::i#1!=(unumber)(const byte) init_squares::$2+(number) 1) goto init_squares::@1
Adding number conversion cast (unumber) main::$7+1 in if((byte) main::i#1!=(const byte) main::$7+(number) 1) goto main::@3
Adding number conversion cast (unumber) 1 in if((byte) main::i#1!=(unumber)(const byte) main::$7+(number) 1) goto main::@3
Adding number conversion cast (unumber) startProcessing::$24+1 in if((byte) startProcessing::i#1!=(const byte) startProcessing::$24+(number) 1) goto startProcessing::@2
Adding number conversion cast (unumber) 1 in if((byte) startProcessing::i#1!=(unumber)(const byte) startProcessing::$24+(number) 1) goto startProcessing::@2
Adding number conversion cast (unumber) processChars::$1+1 in if((byte) processChars::i#1!=(const byte) processChars::$1+(number) 1) goto processChars::@2
Adding number conversion cast (unumber) 1 in if((byte) processChars::i#1!=(unumber)(const byte) processChars::$1+(number) 1) goto processChars::@2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast (const byte) init_squares::$2+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (const byte) main::$7+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (const byte) startProcessing::$24+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (const byte) processChars::$1+(unumber)(number) 1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [71] (word*) main::$18 ← (word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y
Constant right-side identified [73] (word*) main::$19 ← (word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX
Constant right-side identified [75] (word*) main::$20 ← (word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY
Constant right-side identified [77] (byte*) main::$21 ← (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID
Constant right-side identified [79] (byte*) main::$22 ← (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR
Constant right-side identified [81] (byte*) main::$23 ← (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL
Constant right-side identified [83] (byte*) main::$24 ← (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
Constant right-side identified [85] (byte**) main::$25 ← (byte**)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR
Constant right-side identified [127] (byte*) startProcessing::$41 ← (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
Constant right-side identified [171] (word*) startProcessing::$33 ← (word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y
Constant right-side identified [173] (word*) startProcessing::$34 ← (word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX
Constant right-side identified [175] (word*) startProcessing::$35 ← (word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY
Constant right-side identified [177] (byte*) startProcessing::$36 ← (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID
Constant right-side identified [179] (byte*) startProcessing::$37 ← (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR
Constant right-side identified [181] (byte*) startProcessing::$38 ← (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL
Constant right-side identified [183] (byte*) startProcessing::$39 ← (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
Constant right-side identified [185] (byte**) startProcessing::$40 ← (byte**)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR
Constant right-side identified [192] (word) YPOS_BOTTOMMOST#0 ← (const word) $10 << (byte) 4
Constant right-side identified [278] (byte*~) initSprites::$1 ← (const byte*) SPRITE_DATA#0 + (const byte) initSprites::$0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word*) main::$17 = (word*)PROCESSING#0
Constant (const word*) main::$18 = (word*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGSPRITE_Y
Constant (const word*) main::$19 = (word*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGSPRITE_VX
Constant (const word*) main::$20 = (word*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGSPRITE_VY
Constant (const byte*) main::$21 = (byte*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGSPRITE_ID
Constant (const byte*) main::$22 = (byte*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGSPRITE_PTR
Constant (const byte*) main::$23 = (byte*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGSPRITE_COL
Constant (const byte*) main::$24 = (byte*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
Constant (const byte**) main::$25 = (byte**)PROCESSING#0+OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR
Constant (const byte*) startProcessing::$41 = (byte*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
Constant (const byte) startProcessing::$20 = (byte)startProcessing::$19
Constant (const word*) startProcessing::$32 = (word*)PROCESSING#0
Constant (const word*) startProcessing::$33 = (word*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGSPRITE_Y
Constant (const word*) startProcessing::$34 = (word*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGSPRITE_VX
Constant (const word*) startProcessing::$35 = (word*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGSPRITE_VY
Constant (const byte*) startProcessing::$36 = (byte*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGSPRITE_ID
Constant (const byte*) startProcessing::$37 = (byte*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGSPRITE_PTR
Constant (const byte*) startProcessing::$38 = (byte*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGSPRITE_COL
Constant (const byte*) startProcessing::$39 = (byte*)PROCESSING#0+OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
Constant (const byte**) startProcessing::$40 = (byte**)PROCESSING#0+OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR
Constant (const word) $3 = (word)$2
Constant (const word) $8 = (word)$7
Constant (const word) YPOS_BOTTOMMOST#0 = $10<<4
Constant (const byte*) initSprites::$1 = SPRITE_DATA#0+initSprites::$0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [168] (word) XPOS_LEFTMOST#0 ← (const word) $3 << (byte) 4
Constant right-side identified [169] (word) YPOS_TOPMOST#0 ← (const word) $8 << (byte) 4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) XPOS_LEFTMOST#0 = $3<<4
Constant (const word) YPOS_TOPMOST#0 = $8<<4
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [3] (void*) malloc::return#0 ← (void*)(byte*) malloc::mem#0 keeping malloc::mem#0
Inlining Noop Cast [10] (signed word~) bsearch16u::$8 ← (signed word)(word) bsearch16u::key#0 keeping bsearch16u::key#0
Inlining Noop Cast [11] (signed word~) bsearch16u::$9 ← (signed word)*((word*) bsearch16u::pivot#0) keeping *(bsearch16u::pivot#0)
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [25] (void*) malloc::return#2 ← (void*)(byte*) malloc::mem#0 keeping malloc::mem#0
Inlining Noop Cast [52] (void*) malloc::return#3 ← (void*)(byte*) malloc::mem#0 keeping malloc::mem#0
Inlining Noop Cast [56] (void*) malloc::return#4 ← (void*)(byte*) malloc::mem#0 keeping malloc::mem#0
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [27] (word*) SQUARES#1 ← (word*)(void*~) init_squares::$1 keeping SQUARES#1
Inlining Noop Cast [54] (byte*) SCREEN_COPY#0 ← (byte*)(void*~) $0 keeping SCREEN_COPY#0
Inlining Noop Cast [58] (byte*) SCREEN_DIST#0 ← (byte*)(void*~) $1 keeping SCREEN_DIST#0
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [8] (byte~) bsearch16u::$16 ← (byte~) bsearch16u::$6 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [32] (byte~) init_squares::$3 ← (byte) init_squares::i#2 * (byte) 2
Rewriting multiplication to use shift [39] (byte~) sqr::$0 ← (byte) sqr::val#2 * (const byte) SIZEOF_WORD
Rewriting division to use shift [48] (word~) sqrt::$1 ← (word~) sqrt::$3 / (const byte) SIZEOF_WORD
Rewriting multiplication to use shift and addition[68] (byte~) main::$16 ← (byte) main::i#2 * (const byte) SIZEOF_STRUCT_PROCESSINGSPRITE
Rewriting multiplication to use shift and addition[111] (word~) getCharToProcess::$9 ← (word~) getCharToProcess::$8 * (byte) $28
Rewriting multiplication to use shift and addition[117] (byte~) startProcessing::$30 ← (byte) startProcessing::i#2 * (const byte) SIZEOF_STRUCT_PROCESSINGSPRITE
Rewriting multiplication to use shift and addition[124] (word~) startProcessing::$1 ← (word~) startProcessing::$0 * (byte) $28
Rewriting multiplication to use shift [130] (word~) startProcessing::$6 ← (word~) startProcessing::$5 * (byte) $40
Rewriting multiplication to use shift [134] (word~) startProcessing::$9 ← (word~) startProcessing::$8 * (byte) 8
Rewriting multiplication to use shift [147] (word~) startProcessing::$12 ← (word~) startProcessing::$11 * (byte) 8
Rewriting multiplication to use shift [151] (word~) startProcessing::$16 ← (word~) startProcessing::$15 * (byte) 8
Rewriting multiplication to use shift [155] (byte~) startProcessing::$22 ← (byte) startProcessing::freeIdx#2 * (byte) 8
Rewriting multiplication to use shift and addition[157] (byte~) startProcessing::$31 ← (byte) startProcessing::freeIdx#2 * (const byte) SIZEOF_STRUCT_PROCESSINGSPRITE
Rewriting multiplication to use shift and addition[169] (byte~) processChars::$37 ← (byte) processChars::i#10 * (const byte) SIZEOF_STRUCT_PROCESSINGSPRITE
Rewriting multiplication to use shift [188] (byte~) processChars::$17 ← (byte) processChars::i#10 * (byte) 2
Rewriting division to use shift [198] (word~) processChars::$25 ← (word) processChars::xpos#0 / (byte) 8
Rewriting multiplication to use shift [201] (byte~) processChars::$38 ← (byte) processChars::xchar#0 * (const byte) SIZEOF_WORD
Rewriting division to use shift [204] (byte~) processChars::$30 ← (byte) processChars::ypos#0 / (byte) 8
Rewriting multiplication to use shift [206] (byte~) processChars::$39 ← (byte) processChars::ychar#0 * (const byte) SIZEOF_WORD
Rewriting multiplication to use shift [214] (byte) init_dist_screen::y2#0 ← (byte) init_dist_screen::y#10 * (byte) 2
Rewriting multiplication to use shift [224] (byte) init_dist_screen::x2#0 ← (byte) init_dist_screen::x#2 * (byte) 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const word) malloc::size#1
Inlining constant with var siblings (const word) malloc::size#2
Inlining constant with var siblings (const word) malloc::size#0
Inlining constant with var siblings (const byte) bsearch16u::num#2
Inlining constant with var siblings (const word) init_squares::sqr#0
Inlining constant with var siblings (const byte) init_squares::i#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte*) main::src#0
Inlining constant with var siblings (const byte) getCharToProcess::closest_x#0
Inlining constant with var siblings (const byte) getCharToProcess::closest_y#0
Inlining constant with var siblings (const byte) getCharToProcess::y#0
Inlining constant with var siblings (const byte) getCharToProcess::x#0
Inlining constant with var siblings (const byte) getCharToProcess::closest_dist#0
Inlining constant with var siblings (const byte) startProcessing::freeIdx#0
Inlining constant with var siblings (const byte) startProcessing::i#0
Inlining constant with var siblings (const byte) startProcessing::i1#0
Inlining constant with var siblings (const byte) processChars::numActive#0
Inlining constant with var siblings (const byte) processChars::i#0
Inlining constant with var siblings (const byte) init_dist_screen::y#0
Inlining constant with var siblings (const byte) init_dist_screen::x#0
Inlining constant with var siblings (const byte) init_dist_screen::xb#0
Inlining constant with var siblings (const byte) initSprites::i#0
Inlining constant with var siblings (const byte*) initSprites::sp#0
Constant inlined processChars::$31 = (const byte) BORDER_YPOS_TOP#0/(byte) 8
Constant inlined startProcessing::$19 = (const byte*) SPRITE_DATA#0/(byte) $40
Constant inlined main::src#0 = (const byte*) SCREEN#0
Constant inlined main::$15 = (const byte*) COLS#0+(word) $3e7
Constant inlined $2 = (const byte) BORDER_XPOS_LEFT#0-(byte) 8
Constant inlined $3 = (word)(const byte) BORDER_XPOS_LEFT#0-(byte) 8
Constant inlined getCharToProcess::y#0 = (byte) 0
Constant inlined init_dist_screen::x#0 = (byte) 0
Constant inlined setupRasterIrq::raster#0 = (const byte) RASTER_IRQ_TOP#0
Constant inlined $7 = (const byte) BORDER_YPOS_TOP#0-(byte) 8
Constant inlined $8 = (word)(const byte) BORDER_YPOS_TOP#0-(byte) 8
Constant inlined main::$17 = (word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0
Constant inlined main::$18 = (word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y
Constant inlined main::$19 = (word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX
Constant inlined processChars::numActive#0 = (byte) 0
Constant inlined getCharToProcess::closest_x#0 = (byte) 0
Constant inlined ProcessingSprite::$0::STATUS_FREE = (byte) 0
Constant inlined startProcessing::$24 = (const byte) NUM_PROCESSING#0-(byte) 1
Constant inlined startProcessing::i1#0 = (byte) 0
Constant inlined irqTop::$1 = &interrupt(HARDWARE_ALL)(void()) irqBottom()
Constant inlined bsearch16u::num#2 = (const byte) NUM_SQUARES#3
Constant inlined initSprites::$0 = (const byte) NUM_PROCESSING#0*(byte) $40
Constant inlined initSprites::$1 = (const byte*) SPRITE_DATA#0+(const byte) NUM_PROCESSING#0*(byte) $40
Constant inlined ProcessingSprite::$0::STATUS_NEW = (byte) 1
Constant inlined init_squares::i#0 = (byte) 0
Constant inlined processChars::i#0 = (byte) 0
Constant inlined startProcessing::$20 = (byte)(const byte*) SPRITE_DATA#0/(byte) $40
Constant inlined getCharToProcess::closest_dist#0 = (const byte) NOT_FOUND#0
Constant inlined processChars::$1 = (const byte) NUM_PROCESSING#0-(byte) 1
Constant inlined initSprites::i#0 = (byte) 0
Constant inlined startProcessing::$35 = (word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY
Constant inlined startProcessing::$34 = (word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX
Constant inlined startProcessing::$37 = (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR
Constant inlined startProcessing::$36 = (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID
Constant inlined $10 = (word)(const byte) BORDER_YPOS_BOTTOM#0
Constant inlined init_squares::sqr#0 = (byte) 0
Constant inlined startProcessing::$39 = (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
Constant inlined startProcessing::freeIdx#0 = (byte) $ff
Constant inlined startProcessing::$38 = (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL
Constant inlined irqBottom::$3 = &interrupt(HARDWARE_ALL)(void()) irqTop()
Constant inlined processChars::$8 = (const byte*) SCREEN#0+(const word) SPRITE_PTRS#0
Constant inlined getCharToProcess::x#0 = (byte) 0
Constant inlined init_dist_screen::y#0 = (byte) 0
Constant inlined initSprites::sp#0 = (const byte*) SPRITE_DATA#0
Constant inlined init_dist_screen::xb#0 = (byte) $27
Constant inlined getCharToProcess::closest_y#0 = (byte) 0
Constant inlined main::i#0 = (byte) 0
Constant inlined startProcessing::$33 = (word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y
Constant inlined startProcessing::$32 = (word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0
Constant inlined malloc::size#2 = (word) $3e8
Constant inlined main::$23 = (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL
Constant inlined main::$24 = (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
Constant inlined main::$25 = (byte**)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR
Constant inlined processChars::$27 = (const byte) BORDER_XPOS_LEFT#0/(byte) 8
Constant inlined malloc::size#1 = (word) $3e8
Constant inlined main::$20 = (word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY
Constant inlined malloc::size#0 = (const byte) NUM_SQUARES#3*(const byte) SIZEOF_WORD
Constant inlined bsearch16u::$17 = (byte) 1*(const byte) SIZEOF_WORD
Constant inlined main::$21 = (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID
Constant inlined bsearch16u::$18 = (byte) 1*(const byte) SIZEOF_WORD
Constant inlined main::$22 = (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR
Constant inlined setupRasterIrq::$1 = <(const byte) RASTER_IRQ_TOP#0
Constant inlined startProcessing::i#0 = (byte) 0
Constant inlined ProcessingSprite::$0::STATUS_PROCESSING = (byte) 2
Constant inlined main::$5 = (const byte*) SCREEN#0+(word) $3e8
Constant inlined startProcessing::$40 = (byte**)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR
Constant inlined init_squares::$2 = (const byte) NUM_SQUARES#3-(byte) 1
Constant inlined main::$4 = (const byte*) SCREEN#0+(word) $3e7
Constant inlined startProcessing::$41 = (byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
Constant inlined main::$7 = (const byte) NUM_PROCESSING#0-(byte) 1
Successful SSA optimization Pass2ConstantInlining
Alias (byte~) main::$16 = (byte) main::$30 
Alias (word~) getCharToProcess::$9 = (word) getCharToProcess::$14 
Alias (byte~) startProcessing::$30 = (byte) startProcessing::$46 
Alias (word~) startProcessing::$1 = (word) startProcessing::$49 
Alias (byte~) startProcessing::$31 = (byte) startProcessing::$54 
Alias (byte~) processChars::$37 = (byte) processChars::$71 
Successful SSA optimization Pass2AliasElimination
Eliminating unused constant (const byte) SIZEOF_STRUCT_PROCESSINGSPRITE
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting bsearch16u::@18(between bsearch16u::@9 and bsearch16u::@10)
Added new block during phi lifting init_squares::@4(between init_squares::@1 and init_squares::@1)
Added new block during phi lifting main::@18(between main::@1 and main::@1)
Added new block during phi lifting main::@19(between main::@3 and main::@3)
Added new block during phi lifting getCharToProcess::@12(between getCharToProcess::@9 and getCharToProcess::@3)
Added new block during phi lifting getCharToProcess::@13(between getCharToProcess::@5 and getCharToProcess::@4)
Added new block during phi lifting getCharToProcess::@14(between getCharToProcess::@4 and getCharToProcess::@5)
Added new block during phi lifting getCharToProcess::@15(between getCharToProcess::@7 and getCharToProcess::@5)
Added new block during phi lifting startProcessing::@11(between startProcessing::@4 and startProcessing::@1)
Added new block during phi lifting startProcessing::@12(between startProcessing::@3 and startProcessing::@2)
Added new block during phi lifting startProcessing::@13(between startProcessing::@3 and startProcessing::@4)
Added new block during phi lifting startProcessing::@14(between startProcessing::@9 and startProcessing::@9)
Added new block during phi lifting processChars::@20(between processChars::@3 and processChars::@2)
Added new block during phi lifting processChars::@21(between processChars::@2 and processChars::@3)
Added new block during phi lifting init_dist_screen::@19(between init_dist_screen::@11 and init_dist_screen::@1)
Added new block during phi lifting init_dist_screen::@20(between init_dist_screen::@18 and init_dist_screen::@5)
Added new block during phi lifting initSprites::@5(between initSprites::@1 and initSprites::@1)
Added new block during phi lifting initSprites::@6(between initSprites::@3 and initSprites::@3)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @3
Adding NOP phi() at start of @11
Adding NOP phi() at start of @15
Adding NOP phi() at start of @18
Adding NOP phi() at start of @22
Adding NOP phi() at start of @23
Adding NOP phi() at start of @24
Adding NOP phi() at start of @27
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@14
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@17
Adding NOP phi() at start of startProcessing
Adding NOP phi() at start of getCharToProcess::@1
Adding NOP phi() at start of initSprites
Adding NOP phi() at start of initSprites::@2
Adding NOP phi() at start of init_dist_screen
Adding NOP phi() at start of irqBottom
Adding NOP phi() at start of irqBottom::@1
Adding NOP phi() at start of irqBottom::@7
Adding NOP phi() at start of processChars
Adding NOP phi() at start of processChars::@15
Adding NOP phi() at start of irqTop
CALL GRAPH
Calls in [] to malloc:4 malloc:7 main:13 
Calls in [main] to init_dist_screen:17 initSprites:44 setupRasterIrq:46 getCharToProcess:49 startProcessing:61 
Calls in [init_dist_screen] to init_squares:213 sqr:225 sqr:236 sqrt:241 
Calls in [sqrt] to bsearch16u:267 
Calls in [init_squares] to malloc:307 
Calls in [irqBottom] to processChars:329 

Created 46 initial phi equivalence classes
Coalesced [6] heap_head#58 ← heap_head#1
Coalesced [19] main::dst#4 ← main::dst#0
Coalesced [63] main::i#3 ← main::i#1
Coalesced [64] main::src#3 ← main::src#1
Coalesced [65] main::dst#3 ← main::dst#1
Coalesced [75] startProcessing::freeIdx#9 ← startProcessing::i#2
Coalesced [95] startProcessing::chargenData#3 ← startProcessing::chargenData#0
Coalesced [96] startProcessing::spriteData#3 ← startProcessing::spriteData#0
Coalesced [131] startProcessing::chargenData#4 ← startProcessing::chargenData#1
Coalesced [132] startProcessing::spriteData#4 ← startProcessing::spriteData#1
Coalesced [133] startProcessing::i1#3 ← startProcessing::i1#1
Not coalescing [134] startProcessing::freeIdx#7 ← startProcessing::freeIdx#2
Not coalescing [137] startProcessing::freeIdx#8 ← startProcessing::freeIdx#6
Coalesced [138] startProcessing::i#5 ← startProcessing::i#1
Coalesced [141] getCharToProcess::screen_line#8 ← getCharToProcess::screen_line#0
Coalesced [142] getCharToProcess::dist_line#8 ← getCharToProcess::dist_line#0
Coalesced [144] getCharToProcess::closest_dist#11 ← getCharToProcess::closest_dist#8
Coalesced [145] getCharToProcess::closest_x#11 ← getCharToProcess::closest_x#9
Coalesced [146] getCharToProcess::closest_y#11 ← getCharToProcess::closest_y#9
Coalesced [151] getCharToProcess::return_dist#7 ← getCharToProcess::dist#0
Not coalescing [152] getCharToProcess::return_x#7 ← getCharToProcess::x#2
Not coalescing [153] getCharToProcess::return_y#7 ← getCharToProcess::y#7
Coalesced [170] getCharToProcess::screen_line#9 ← getCharToProcess::screen_line#1
Coalesced [171] getCharToProcess::dist_line#9 ← getCharToProcess::dist_line#1
Not coalescing [172] getCharToProcess::closest_dist#10 ← getCharToProcess::return_dist#1
Coalesced [173] getCharToProcess::y#8 ← getCharToProcess::y#1
Coalesced [174] getCharToProcess::closest_x#10 ← getCharToProcess::return_x#1
Coalesced [175] getCharToProcess::closest_y#10 ← getCharToProcess::return_y#1
Coalesced [176] getCharToProcess::x#6 ← getCharToProcess::x#1
Not coalescing [177] getCharToProcess::closest_dist#12 ← getCharToProcess::return_dist#1
Coalesced (already) [178] getCharToProcess::closest_x#12 ← getCharToProcess::return_x#1
Coalesced (already) [179] getCharToProcess::closest_y#12 ← getCharToProcess::return_y#1
Not coalescing [180] getCharToProcess::return_dist#6 ← getCharToProcess::closest_dist#2
Coalesced (already) [181] getCharToProcess::return_x#6 ← getCharToProcess::closest_x#7
Coalesced (already) [182] getCharToProcess::return_y#6 ← getCharToProcess::closest_y#7
Not coalescing [183] getCharToProcess::return_dist#5 ← getCharToProcess::closest_dist#2
Coalesced (already) [184] getCharToProcess::return_x#5 ← getCharToProcess::closest_x#7
Coalesced (already) [185] getCharToProcess::return_y#5 ← getCharToProcess::closest_y#7
Coalesced [210] initSprites::i#3 ← initSprites::i#1
Coalesced [211] initSprites::sp#3 ← initSprites::sp#1
Coalesced [215] init_dist_screen::screen_topline#15 ← init_dist_screen::screen#0
Coalesced [216] init_dist_screen::screen_bottomline#15 ← init_dist_screen::screen_bottomline#0
Coalesced [221] init_dist_screen::yd#2 ← init_dist_screen::$5
Coalesced [224] sqr::val#3 ← sqr::val#0
Coalesced [232] init_dist_screen::xd#2 ← init_dist_screen::$13
Coalesced [235] sqr::val#4 ← sqr::val#1
Coalesced [256] init_dist_screen::y#14 ← init_dist_screen::y#1
Coalesced [257] init_dist_screen::screen_topline#14 ← init_dist_screen::screen_topline#1
Coalesced [258] init_dist_screen::screen_bottomline#14 ← init_dist_screen::screen_bottomline#1
Coalesced [259] init_dist_screen::x#8 ← init_dist_screen::x#1
Coalesced [260] init_dist_screen::xb#8 ← init_dist_screen::xb#1
Coalesced [262] init_dist_screen::xd#1 ← init_dist_screen::$15
Coalesced [264] init_dist_screen::yd#1 ← init_dist_screen::$7
Coalesced [274] bsearch16u::items#10 ← bsearch16u::items#1
Coalesced [279] bsearch16u::return#9 ← bsearch16u::$2
Coalesced [281] bsearch16u::return#7 ← bsearch16u::return#2
Coalesced [284] bsearch16u::return#8 ← bsearch16u::items#2
Not coalescing [290] bsearch16u::return#6 ← bsearch16u::pivot#0
Coalesced [294] bsearch16u::num#10 ← bsearch16u::num#1
Coalesced [295] bsearch16u::items#12 ← bsearch16u::items#0
Coalesced [298] bsearch16u::num#9 ← bsearch16u::num#0
Coalesced [299] bsearch16u::items#11 ← bsearch16u::items#8
Coalesced [300] bsearch16u::num#11 ← bsearch16u::num#3
Coalesced (already) [301] bsearch16u::items#13 ← bsearch16u::items#2
Coalesced (already) [306] heap_head#59 ← heap_head#1
Coalesced [310] init_squares::squares#4 ← init_squares::squares#0
Coalesced [320] init_squares::sqr#3 ← init_squares::sqr#1
Coalesced [321] init_squares::squares#3 ← init_squares::squares#1
Coalesced [322] init_squares::i#3 ← init_squares::i#1
Coalesced [378] processChars::numActive#17 ← processChars::numActive#1
Coalesced [384] processChars::i#13 ← processChars::i#1
Coalesced [385] processChars::numActive#15 ← processChars::numActive#3
Coalesced (already) [390] processChars::numActive#16 ← processChars::numActive#10
Coalesced down to 36 phi equivalence classes
Culled Empty Block (label) @3
Culled Empty Block (label) @11
Culled Empty Block (label) @18
Culled Empty Block (label) @22
Culled Empty Block (label) @23
Culled Empty Block (label) @27
Culled Empty Block (label) main::@2
Culled Empty Block (label) main::@15
Culled Empty Block (label) main::@17
Culled Empty Block (label) main::@19
Culled Empty Block (label) main::@18
Culled Empty Block (label) startProcessing::@5
Culled Empty Block (label) startProcessing::@14
Culled Empty Block (label) startProcessing::@12
Culled Empty Block (label) getCharToProcess::@1
Culled Empty Block (label) initSprites::@2
Culled Empty Block (label) initSprites::@6
Culled Empty Block (label) initSprites::@5
Culled Empty Block (label) init_dist_screen::@19
Culled Empty Block (label) init_dist_screen::@20
Culled Empty Block (label) bsearch16u::@1
Culled Empty Block (label) bsearch16u::@18
Culled Empty Block (label) init_squares::@4
Culled Empty Block (label) irqBottom::@7
Culled Empty Block (label) processChars::@15
Culled Empty Block (label) processChars::@20
Culled Empty Block (label) processChars::@21
Renumbering block @15 to @1
Renumbering block @24 to @2
Renumbering block @25 to @3
Renumbering block @26 to @4
Renumbering block bsearch16u::@2 to bsearch16u::@1
Renumbering block bsearch16u::@3 to bsearch16u::@2
Renumbering block bsearch16u::@6 to bsearch16u::@3
Renumbering block bsearch16u::@7 to bsearch16u::@4
Renumbering block bsearch16u::@8 to bsearch16u::@5
Renumbering block bsearch16u::@9 to bsearch16u::@6
Renumbering block bsearch16u::@10 to bsearch16u::@7
Renumbering block bsearch16u::@13 to bsearch16u::@8
Renumbering block bsearch16u::@15 to bsearch16u::@9
Renumbering block init_squares::@3 to init_squares::@2
Renumbering block sqrt::@2 to sqrt::@1
Renumbering block main::@3 to main::@2
Renumbering block main::@4 to main::@3
Renumbering block main::@5 to main::@4
Renumbering block main::@6 to main::@5
Renumbering block main::@7 to main::@6
Renumbering block main::@11 to main::@7
Renumbering block main::@13 to main::@8
Renumbering block main::@14 to main::@9
Renumbering block main::@16 to main::@10
Renumbering block getCharToProcess::@3 to getCharToProcess::@1
Renumbering block getCharToProcess::@4 to getCharToProcess::@2
Renumbering block getCharToProcess::@5 to getCharToProcess::@3
Renumbering block getCharToProcess::@7 to getCharToProcess::@4
Renumbering block getCharToProcess::@8 to getCharToProcess::@5
Renumbering block getCharToProcess::@9 to getCharToProcess::@6
Renumbering block getCharToProcess::@10 to getCharToProcess::@7
Renumbering block getCharToProcess::@11 to getCharToProcess::@8
Renumbering block getCharToProcess::@12 to getCharToProcess::@9
Renumbering block getCharToProcess::@13 to getCharToProcess::@10
Renumbering block getCharToProcess::@14 to getCharToProcess::@11
Renumbering block getCharToProcess::@15 to getCharToProcess::@12
Renumbering block startProcessing::@8 to startProcessing::@5
Renumbering block startProcessing::@9 to startProcessing::@6
Renumbering block startProcessing::@10 to startProcessing::@7
Renumbering block startProcessing::@11 to startProcessing::@8
Renumbering block startProcessing::@13 to startProcessing::@9
Renumbering block processChars::@2 to processChars::@1
Renumbering block processChars::@3 to processChars::@2
Renumbering block processChars::@4 to processChars::@3
Renumbering block processChars::@5 to processChars::@4
Renumbering block processChars::@6 to processChars::@5
Renumbering block processChars::@7 to processChars::@6
Renumbering block processChars::@8 to processChars::@7
Renumbering block processChars::@9 to processChars::@8
Renumbering block processChars::@11 to processChars::@9
Renumbering block processChars::@13 to processChars::@10
Renumbering block processChars::@14 to processChars::@11
Renumbering block processChars::@17 to processChars::@12
Renumbering block processChars::@18 to processChars::@13
Renumbering block processChars::@19 to processChars::@14
Renumbering block init_dist_screen::@11 to init_dist_screen::@9
Renumbering block init_dist_screen::@15 to init_dist_screen::@10
Renumbering block init_dist_screen::@16 to init_dist_screen::@11
Renumbering block init_dist_screen::@17 to init_dist_screen::@12
Renumbering block init_dist_screen::@18 to init_dist_screen::@13
Renumbering block initSprites::@3 to initSprites::@2
Renumbering block initSprites::@4 to initSprites::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of startProcessing
Adding NOP phi() at start of initSprites
Adding NOP phi() at start of init_dist_screen
Adding NOP phi() at start of bsearch16u
Adding NOP phi() at start of init_squares
Adding NOP phi() at start of irqBottom
Adding NOP phi() at start of irqBottom::@1
Adding NOP phi() at start of processChars
Adding NOP phi() at start of irqTop

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call malloc 
  to:@3
@3: scope:[]  from @1
  [3] (void*) SCREEN_COPY#0 ← (void*)(byte*) malloc::mem#0
  [4] call malloc 
  to:@4
@4: scope:[]  from @3
  [5] (void*) SCREEN_DIST#0 ← (void*)(byte*) malloc::mem#0
  to:@2
@2: scope:[]  from @4
  [6] phi()
  [7] call main 
  to:@end
@end: scope:[]  from @2
  [8] phi()
main: scope:[main]  from @2
  [9] (byte*) init_dist_screen::screen#0 ← (byte*)(void*) SCREEN_DIST#0
  [10] call init_dist_screen 
  to:main::@8
main::@8: scope:[main]  from main
  [11] (byte*) main::dst#0 ← (byte*)(void*) SCREEN_COPY#0
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@8
  [12] (byte*) main::dst#2 ← phi( main::@1/(byte*) main::dst#1 main::@8/(byte*) main::dst#0 )
  [12] (byte*) main::src#2 ← phi( main::@1/(byte*) main::src#1 main::@8/(const byte*) SCREEN#0 )
  [13] *((byte*) main::dst#2) ← *((byte*) main::src#2)
  [14] (byte*) main::src#1 ← ++ (byte*) main::src#2
  [15] (byte*) main::dst#1 ← ++ (byte*) main::dst#2
  [16] if((byte*) main::src#1!=(const byte*) SCREEN#0+(word) $3e8) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [17] (byte) main::i#2 ← phi( main::@1/(byte) 0 main::@2/(byte) main::i#1 )
  [18] (byte) main::$26 ← (byte) main::i#2 << (byte) 1
  [19] (byte) main::$27 ← (byte) main::$26 + (byte) main::i#2
  [20] (byte) main::$28 ← (byte) main::$27 << (byte) 1
  [21] (byte) main::$29 ← (byte) main::$28 + (byte) main::i#2
  [22] (byte~) main::$16 ← (byte) main::$29 << (byte) 1
  [23] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) main::$16) ← (byte) 0
  [24] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y + (byte~) main::$16) ← (byte) 0
  [25] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX + (byte~) main::$16) ← (byte) 0
  [26] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY + (byte~) main::$16) ← (byte) 0
  [27] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID + (byte~) main::$16) ← (byte) 0
  [28] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR + (byte~) main::$16) ← (byte) 0
  [29] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL + (byte~) main::$16) ← (byte) 0
  [30] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) main::$16) ← (const byte) STATUS_FREE
  [31] *((byte**)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR + (byte~) main::$16) ← (byte*) 0
  [32] (byte) main::i#1 ← ++ (byte) main::i#2
  [33] if((byte) main::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [34] phi()
  [35] call initSprites 
  to:main::@9
main::@9: scope:[main]  from main::@3
  [36] phi()
  [37] call setupRasterIrq 
  to:main::@4
main::@4: scope:[main]  from main::@5 main::@9
  [38] phi()
  [39] call getCharToProcess 
  [40] (byte) getCharToProcess::return_x#0 ← (byte) getCharToProcess::return_x#1
  [41] (byte) getCharToProcess::return_y#0 ← (byte) getCharToProcess::return_y#1
  [42] (byte) getCharToProcess::return_dist#0 ← (byte) getCharToProcess::return_dist#1
  to:main::@10
main::@10: scope:[main]  from main::@4
  [43] (byte) main::center_x#0 ← (byte) getCharToProcess::return_x#0
  [44] (byte) main::center_y#0 ← (byte) getCharToProcess::return_y#0
  [45] (byte) main::center_dist#0 ← (byte) getCharToProcess::return_dist#0
  [46] if((byte) main::center_dist#0!=(const byte) NOT_FOUND#0) goto main::@5
  to:main::@6
main::@6: scope:[main]  from main::@10
  [47] *((const byte*) SCREEN#0+(word) $3e7) ← (byte) '.'
  to:main::@7
main::@7: scope:[main]  from main::@6 main::@7
  [48] *((const byte*) COLS#0+(word) $3e7) ← ++ *((const byte*) COLS#0+(word) $3e7)
  to:main::@7
main::@5: scope:[main]  from main::@10
  [49] (byte) startProcessing::center_x#0 ← (byte) main::center_x#0
  [50] (byte) startProcessing::center_y#0 ← (byte) main::center_y#0
  [51] call startProcessing 
  to:main::@4
startProcessing: scope:[startProcessing]  from main::@5
  [52] phi()
  to:startProcessing::@1
startProcessing::@1: scope:[startProcessing]  from startProcessing startProcessing::@8
  [53] (byte) startProcessing::freeIdx#6 ← phi( startProcessing/(byte) $ff startProcessing::@8/(byte~) startProcessing::freeIdx#7 )
  to:startProcessing::@2
startProcessing::@2: scope:[startProcessing]  from startProcessing::@1 startProcessing::@3
  [54] (byte) startProcessing::i#2 ← phi( startProcessing::@1/(byte) 0 startProcessing::@3/(byte) startProcessing::i#1 )
  [55] (byte) startProcessing::$42 ← (byte) startProcessing::i#2 << (byte) 1
  [56] (byte) startProcessing::$43 ← (byte) startProcessing::$42 + (byte) startProcessing::i#2
  [57] (byte) startProcessing::$44 ← (byte) startProcessing::$43 << (byte) 1
  [58] (byte) startProcessing::$45 ← (byte) startProcessing::$44 + (byte) startProcessing::i#2
  [59] (byte~) startProcessing::$30 ← (byte) startProcessing::$45 << (byte) 1
  [60] if(*((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) startProcessing::$30)!=(const byte) STATUS_FREE) goto startProcessing::@3
  to:startProcessing::@4
startProcessing::@4: scope:[startProcessing]  from startProcessing::@2 startProcessing::@9
  [61] (byte) startProcessing::freeIdx#2 ← phi( startProcessing::@9/(byte~) startProcessing::freeIdx#8 startProcessing::@2/(byte) startProcessing::i#2 )
  [62] if((byte) startProcessing::freeIdx#2==(byte) $ff) goto startProcessing::@8
  to:startProcessing::@5
startProcessing::@5: scope:[startProcessing]  from startProcessing::@4
  [63] (word~) startProcessing::$0 ← (word)(byte) startProcessing::center_y#0
  [64] (word) startProcessing::$47 ← (word~) startProcessing::$0 << (byte) 2
  [65] (word) startProcessing::$48 ← (word) startProcessing::$47 + (word~) startProcessing::$0
  [66] (word~) startProcessing::$1 ← (word) startProcessing::$48 << (byte) 3
  [67] (word) startProcessing::offset#0 ← (word~) startProcessing::$1 + (byte) startProcessing::center_x#0
  [68] (byte*) startProcessing::colPtr#0 ← (const byte*) COLS#0 + (word) startProcessing::offset#0
  [69] (byte) startProcessing::spriteCol#0 ← *((byte*) startProcessing::colPtr#0)
  [70] (byte*) startProcessing::screenPtr#0 ← (const byte*) SCREEN#0 + (word) startProcessing::offset#0
  [71] (word~) startProcessing::$5 ← (word)(byte) startProcessing::freeIdx#2
  [72] (word~) startProcessing::$6 ← (word~) startProcessing::$5 << (byte) 6
  [73] (byte*) startProcessing::spriteData#0 ← (const byte*) SPRITE_DATA#0 + (word~) startProcessing::$6
  [74] (byte) startProcessing::ch#0 ← *((byte*) startProcessing::screenPtr#0)
  [75] (word~) startProcessing::$8 ← (word)(byte) startProcessing::ch#0
  [76] (word~) startProcessing::$9 ← (word~) startProcessing::$8 << (byte) 3
  [77] (byte*) startProcessing::chargenData#0 ← (const byte*) CHARGEN#0 + (word~) startProcessing::$9
  asm { sei  }
  [79] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0
  to:startProcessing::@6
startProcessing::@6: scope:[startProcessing]  from startProcessing::@5 startProcessing::@6
  [80] (byte) startProcessing::i1#2 ← phi( startProcessing::@5/(byte) 0 startProcessing::@6/(byte) startProcessing::i1#1 )
  [80] (byte*) startProcessing::spriteData#2 ← phi( startProcessing::@5/(byte*) startProcessing::spriteData#0 startProcessing::@6/(byte*) startProcessing::spriteData#1 )
  [80] (byte*) startProcessing::chargenData#2 ← phi( startProcessing::@5/(byte*) startProcessing::chargenData#0 startProcessing::@6/(byte*) startProcessing::chargenData#1 )
  [81] *((byte*) startProcessing::spriteData#2) ← *((byte*) startProcessing::chargenData#2)
  [82] (byte*) startProcessing::spriteData#1 ← (byte*) startProcessing::spriteData#2 + (byte) 3
  [83] (byte*) startProcessing::chargenData#1 ← ++ (byte*) startProcessing::chargenData#2
  [84] (byte) startProcessing::i1#1 ← ++ (byte) startProcessing::i1#2
  [85] if((byte) startProcessing::i1#1!=(byte) 8) goto startProcessing::@6
  to:startProcessing::@7
startProcessing::@7: scope:[startProcessing]  from startProcessing::@6
  [86] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0
  asm { cli  }
  [88] (word~) startProcessing::$11 ← (word)(byte) startProcessing::center_x#0
  [89] (word~) startProcessing::$12 ← (word~) startProcessing::$11 << (byte) 3
  [90] (word~) startProcessing::$13 ← (const byte) BORDER_XPOS_LEFT#0 + (word~) startProcessing::$12
  [91] (word) startProcessing::spriteX#0 ← (word~) startProcessing::$13 << (byte) 4
  [92] (word~) startProcessing::$15 ← (word)(byte) startProcessing::center_y#0
  [93] (word~) startProcessing::$16 ← (word~) startProcessing::$15 << (byte) 3
  [94] (word~) startProcessing::$17 ← (const byte) BORDER_YPOS_TOP#0 + (word~) startProcessing::$16
  [95] (word) startProcessing::spriteY#0 ← (word~) startProcessing::$17 << (byte) 4
  [96] (byte) startProcessing::spritePtr#0 ← (byte)(const byte*) SPRITE_DATA#0/(byte) $40 + (byte) startProcessing::freeIdx#2
  [97] (byte~) startProcessing::$22 ← (byte) startProcessing::freeIdx#2 << (byte) 3
  [98] (word~) startProcessing::$23 ← (word)(byte~) startProcessing::$22
  [99] (byte) startProcessing::$50 ← (byte) startProcessing::freeIdx#2 << (byte) 1
  [100] (byte) startProcessing::$51 ← (byte) startProcessing::$50 + (byte) startProcessing::freeIdx#2
  [101] (byte) startProcessing::$52 ← (byte) startProcessing::$51 << (byte) 1
  [102] (byte) startProcessing::$53 ← (byte) startProcessing::$52 + (byte) startProcessing::freeIdx#2
  [103] (byte~) startProcessing::$31 ← (byte) startProcessing::$53 << (byte) 1
  [104] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) startProcessing::$31) ← (word) startProcessing::spriteX#0
  [105] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y + (byte~) startProcessing::$31) ← (word) startProcessing::spriteY#0
  [106] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX + (byte~) startProcessing::$31) ← (word~) startProcessing::$23
  [107] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY + (byte~) startProcessing::$31) ← (byte) $3c
  [108] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID + (byte~) startProcessing::$31) ← (byte) startProcessing::freeIdx#2
  [109] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR + (byte~) startProcessing::$31) ← (byte) startProcessing::spritePtr#0
  [110] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL + (byte~) startProcessing::$31) ← (byte) startProcessing::spriteCol#0
  [111] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) startProcessing::$31) ← (const byte) STATUS_NEW
  [112] *((byte**)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR + (byte~) startProcessing::$31) ← (byte*) startProcessing::screenPtr#0
  to:startProcessing::@return
startProcessing::@return: scope:[startProcessing]  from startProcessing::@7
  [113] return 
  to:@return
startProcessing::@8: scope:[startProcessing]  from startProcessing::@4
  [114] (byte~) startProcessing::freeIdx#7 ← (byte) startProcessing::freeIdx#2
  to:startProcessing::@1
startProcessing::@3: scope:[startProcessing]  from startProcessing::@2
  [115] (byte) startProcessing::i#1 ← ++ (byte) startProcessing::i#2
  [116] if((byte) startProcessing::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto startProcessing::@2
  to:startProcessing::@9
startProcessing::@9: scope:[startProcessing]  from startProcessing::@3
  [117] (byte~) startProcessing::freeIdx#8 ← (byte) startProcessing::freeIdx#6
  to:startProcessing::@4
getCharToProcess: scope:[getCharToProcess]  from main::@4
  [118] (byte*) getCharToProcess::screen_line#0 ← (byte*)(void*) SCREEN_COPY#0
  [119] (byte*) getCharToProcess::dist_line#0 ← (byte*)(void*) SCREEN_DIST#0
  to:getCharToProcess::@1
getCharToProcess::@1: scope:[getCharToProcess]  from getCharToProcess getCharToProcess::@9
  [120] (byte) getCharToProcess::closest_y#9 ← phi( getCharToProcess/(byte) 0 getCharToProcess::@9/(byte) getCharToProcess::return_y#1 )
  [120] (byte) getCharToProcess::closest_x#9 ← phi( getCharToProcess/(byte) 0 getCharToProcess::@9/(byte) getCharToProcess::return_x#1 )
  [120] (byte) getCharToProcess::y#7 ← phi( getCharToProcess/(byte) 0 getCharToProcess::@9/(byte) getCharToProcess::y#1 )
  [120] (byte) getCharToProcess::closest_dist#8 ← phi( getCharToProcess/(const byte) NOT_FOUND#0 getCharToProcess::@9/(byte~) getCharToProcess::closest_dist#10 )
  [120] (byte*) getCharToProcess::dist_line#6 ← phi( getCharToProcess/(byte*) getCharToProcess::dist_line#0 getCharToProcess::@9/(byte*) getCharToProcess::dist_line#1 )
  [120] (byte*) getCharToProcess::screen_line#4 ← phi( getCharToProcess/(byte*) getCharToProcess::screen_line#0 getCharToProcess::@9/(byte*) getCharToProcess::screen_line#1 )
  to:getCharToProcess::@2
getCharToProcess::@2: scope:[getCharToProcess]  from getCharToProcess::@1 getCharToProcess::@10
  [121] (byte) getCharToProcess::closest_y#7 ← phi( getCharToProcess::@1/(byte) getCharToProcess::closest_y#9 getCharToProcess::@10/(byte) getCharToProcess::return_y#1 )
  [121] (byte) getCharToProcess::closest_x#7 ← phi( getCharToProcess::@1/(byte) getCharToProcess::closest_x#9 getCharToProcess::@10/(byte) getCharToProcess::return_x#1 )
  [121] (byte) getCharToProcess::closest_dist#2 ← phi( getCharToProcess::@1/(byte) getCharToProcess::closest_dist#8 getCharToProcess::@10/(byte~) getCharToProcess::closest_dist#12 )
  [121] (byte) getCharToProcess::x#2 ← phi( getCharToProcess::@1/(byte) 0 getCharToProcess::@10/(byte) getCharToProcess::x#1 )
  [122] if(*((byte*) getCharToProcess::screen_line#4 + (byte) getCharToProcess::x#2)==(byte) ' ') goto getCharToProcess::@11
  to:getCharToProcess::@4
getCharToProcess::@4: scope:[getCharToProcess]  from getCharToProcess::@2
  [123] (byte) getCharToProcess::dist#0 ← *((byte*) getCharToProcess::dist_line#6 + (byte) getCharToProcess::x#2)
  [124] if((byte) getCharToProcess::dist#0>=(byte) getCharToProcess::closest_dist#2) goto getCharToProcess::@12
  to:getCharToProcess::@5
getCharToProcess::@5: scope:[getCharToProcess]  from getCharToProcess::@4
  [125] (byte~) getCharToProcess::return_x#7 ← (byte) getCharToProcess::x#2
  [126] (byte~) getCharToProcess::return_y#7 ← (byte) getCharToProcess::y#7
  to:getCharToProcess::@3
getCharToProcess::@3: scope:[getCharToProcess]  from getCharToProcess::@11 getCharToProcess::@12 getCharToProcess::@5
  [127] (byte) getCharToProcess::return_y#1 ← phi( getCharToProcess::@11/(byte) getCharToProcess::closest_y#7 getCharToProcess::@12/(byte) getCharToProcess::closest_y#7 getCharToProcess::@5/(byte~) getCharToProcess::return_y#7 )
  [127] (byte) getCharToProcess::return_x#1 ← phi( getCharToProcess::@11/(byte) getCharToProcess::closest_x#7 getCharToProcess::@12/(byte) getCharToProcess::closest_x#7 getCharToProcess::@5/(byte~) getCharToProcess::return_x#7 )
  [127] (byte) getCharToProcess::return_dist#1 ← phi( getCharToProcess::@11/(byte~) getCharToProcess::return_dist#5 getCharToProcess::@12/(byte~) getCharToProcess::return_dist#6 getCharToProcess::@5/(byte) getCharToProcess::dist#0 )
  [128] (byte) getCharToProcess::x#1 ← ++ (byte) getCharToProcess::x#2
  [129] if((byte) getCharToProcess::x#1!=(byte) $28) goto getCharToProcess::@10
  to:getCharToProcess::@6
getCharToProcess::@6: scope:[getCharToProcess]  from getCharToProcess::@3
  [130] (byte*) getCharToProcess::screen_line#1 ← (byte*) getCharToProcess::screen_line#4 + (byte) $28
  [131] (byte*) getCharToProcess::dist_line#1 ← (byte*) getCharToProcess::dist_line#6 + (byte) $28
  [132] (byte) getCharToProcess::y#1 ← ++ (byte) getCharToProcess::y#7
  [133] if((byte) getCharToProcess::y#1!=(byte) $19) goto getCharToProcess::@9
  to:getCharToProcess::@7
getCharToProcess::@7: scope:[getCharToProcess]  from getCharToProcess::@6
  [134] if((byte) getCharToProcess::return_dist#1==(const byte) NOT_FOUND#0) goto getCharToProcess::@return
  to:getCharToProcess::@8
getCharToProcess::@8: scope:[getCharToProcess]  from getCharToProcess::@7
  [135] (word~) getCharToProcess::$8 ← (word)(byte) getCharToProcess::return_y#1
  [136] (word) getCharToProcess::$12 ← (word~) getCharToProcess::$8 << (byte) 2
  [137] (word) getCharToProcess::$13 ← (word) getCharToProcess::$12 + (word~) getCharToProcess::$8
  [138] (word~) getCharToProcess::$9 ← (word) getCharToProcess::$13 << (byte) 3
  [139] (byte*~) getCharToProcess::$10 ← (byte*)(void*) SCREEN_COPY#0 + (word~) getCharToProcess::$9
  [140] *((byte*~) getCharToProcess::$10 + (byte) getCharToProcess::return_x#1) ← (byte) ' '
  to:getCharToProcess::@return
getCharToProcess::@return: scope:[getCharToProcess]  from getCharToProcess::@7 getCharToProcess::@8
  [141] return 
  to:@return
getCharToProcess::@9: scope:[getCharToProcess]  from getCharToProcess::@6
  [142] (byte~) getCharToProcess::closest_dist#10 ← (byte) getCharToProcess::return_dist#1
  to:getCharToProcess::@1
getCharToProcess::@10: scope:[getCharToProcess]  from getCharToProcess::@3
  [143] (byte~) getCharToProcess::closest_dist#12 ← (byte) getCharToProcess::return_dist#1
  to:getCharToProcess::@2
getCharToProcess::@12: scope:[getCharToProcess]  from getCharToProcess::@4
  [144] (byte~) getCharToProcess::return_dist#6 ← (byte) getCharToProcess::closest_dist#2
  to:getCharToProcess::@3
getCharToProcess::@11: scope:[getCharToProcess]  from getCharToProcess::@2
  [145] (byte~) getCharToProcess::return_dist#5 ← (byte) getCharToProcess::closest_dist#2
  to:getCharToProcess::@3
setupRasterIrq: scope:[setupRasterIrq]  from main::@9
  asm { sei  }
  [147] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0
  [148] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0
  [149] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0
  to:setupRasterIrq::@1
setupRasterIrq::@1: scope:[setupRasterIrq]  from setupRasterIrq
  [150] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f
  to:setupRasterIrq::@2
setupRasterIrq::@2: scope:[setupRasterIrq]  from setupRasterIrq::@1
  [151] *((const byte*) RASTER#0) ← <(const byte) RASTER_IRQ_TOP#0
  [152] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0
  [153] *((const void()**) HARDWARE_IRQ#0) ← (const void()*) setupRasterIrq::irqRoutine#0
  asm { cli  }
  to:setupRasterIrq::@return
setupRasterIrq::@return: scope:[setupRasterIrq]  from setupRasterIrq::@2
  [155] return 
  to:@return
initSprites: scope:[initSprites]  from main::@3
  [156] phi()
  to:initSprites::@1
initSprites::@1: scope:[initSprites]  from initSprites initSprites::@1
  [157] (byte*) initSprites::sp#2 ← phi( initSprites/(const byte*) SPRITE_DATA#0 initSprites::@1/(byte*) initSprites::sp#1 )
  [158] *((byte*) initSprites::sp#2) ← (byte) 0
  [159] (byte*) initSprites::sp#1 ← ++ (byte*) initSprites::sp#2
  [160] if((byte*) initSprites::sp#1<(const byte*) SPRITE_DATA#0+(const byte) NUM_PROCESSING#0*(byte) $40) goto initSprites::@1
  to:initSprites::@2
initSprites::@2: scope:[initSprites]  from initSprites::@1 initSprites::@2
  [161] (byte) initSprites::i#2 ← phi( initSprites::@1/(byte) 0 initSprites::@2/(byte) initSprites::i#1 )
  [162] *((const byte*) SPRITES_COLS#0 + (byte) initSprites::i#2) ← (const byte) LIGHT_BLUE#0
  [163] (byte) initSprites::i#1 ← ++ (byte) initSprites::i#2
  [164] if((byte) initSprites::i#1!=(byte) 8) goto initSprites::@2
  to:initSprites::@3
initSprites::@3: scope:[initSprites]  from initSprites::@2
  [165] *((const byte*) SPRITES_MC#0) ← (byte) 0
  [166] *((const byte*) SPRITES_EXPAND_X#0) ← (byte) 0
  [167] *((const byte*) SPRITES_EXPAND_Y#0) ← (byte) 0
  to:initSprites::@return
initSprites::@return: scope:[initSprites]  from initSprites::@3
  [168] return 
  to:@return
init_dist_screen: scope:[init_dist_screen]  from main
  [169] phi()
  [170] call init_squares 
  to:init_dist_screen::@10
init_dist_screen::@10: scope:[init_dist_screen]  from init_dist_screen
  [171] (byte*) init_dist_screen::screen_bottomline#0 ← (byte*) init_dist_screen::screen#0 + (word)(number) $28*(number) $18
  to:init_dist_screen::@1
init_dist_screen::@1: scope:[init_dist_screen]  from init_dist_screen::@10 init_dist_screen::@9
  [172] (byte*) init_dist_screen::screen_bottomline#10 ← phi( init_dist_screen::@9/(byte*) init_dist_screen::screen_bottomline#1 init_dist_screen::@10/(byte*) init_dist_screen::screen_bottomline#0 )
  [172] (byte*) init_dist_screen::screen_topline#10 ← phi( init_dist_screen::@9/(byte*) init_dist_screen::screen_topline#1 init_dist_screen::@10/(byte*) init_dist_screen::screen#0 )
  [172] (byte) init_dist_screen::y#10 ← phi( init_dist_screen::@9/(byte) init_dist_screen::y#1 init_dist_screen::@10/(byte) 0 )
  [173] (byte) init_dist_screen::y2#0 ← (byte) init_dist_screen::y#10 << (byte) 1
  [174] if((byte) init_dist_screen::y2#0>=(byte) $18) goto init_dist_screen::@2
  to:init_dist_screen::@3
init_dist_screen::@3: scope:[init_dist_screen]  from init_dist_screen::@1
  [175] (byte~) init_dist_screen::$5 ← (byte) $18 - (byte) init_dist_screen::y2#0
  to:init_dist_screen::@4
init_dist_screen::@4: scope:[init_dist_screen]  from init_dist_screen::@2 init_dist_screen::@3
  [176] (byte) init_dist_screen::yd#0 ← phi( init_dist_screen::@2/(byte~) init_dist_screen::$7 init_dist_screen::@3/(byte~) init_dist_screen::$5 )
  [177] (byte) sqr::val#0 ← (byte) init_dist_screen::yd#0
  [178] call sqr 
  [179] (word) sqr::return#2 ← (word) sqr::return#0
  to:init_dist_screen::@11
init_dist_screen::@11: scope:[init_dist_screen]  from init_dist_screen::@4
  [180] (word) init_dist_screen::yds#0 ← (word) sqr::return#2
  to:init_dist_screen::@5
init_dist_screen::@5: scope:[init_dist_screen]  from init_dist_screen::@11 init_dist_screen::@13
  [181] (byte) init_dist_screen::xb#2 ← phi( init_dist_screen::@11/(byte) $27 init_dist_screen::@13/(byte) init_dist_screen::xb#1 )
  [181] (byte) init_dist_screen::x#2 ← phi( init_dist_screen::@11/(byte) 0 init_dist_screen::@13/(byte) init_dist_screen::x#1 )
  [182] (byte) init_dist_screen::x2#0 ← (byte) init_dist_screen::x#2 << (byte) 1
  [183] if((byte) init_dist_screen::x2#0>=(byte) $27) goto init_dist_screen::@6
  to:init_dist_screen::@7
init_dist_screen::@7: scope:[init_dist_screen]  from init_dist_screen::@5
  [184] (byte~) init_dist_screen::$13 ← (byte) $27 - (byte) init_dist_screen::x2#0
  to:init_dist_screen::@8
init_dist_screen::@8: scope:[init_dist_screen]  from init_dist_screen::@6 init_dist_screen::@7
  [185] (byte) init_dist_screen::xd#0 ← phi( init_dist_screen::@6/(byte~) init_dist_screen::$15 init_dist_screen::@7/(byte~) init_dist_screen::$13 )
  [186] (byte) sqr::val#1 ← (byte) init_dist_screen::xd#0
  [187] call sqr 
  [188] (word) sqr::return#3 ← (word) sqr::return#0
  to:init_dist_screen::@12
init_dist_screen::@12: scope:[init_dist_screen]  from init_dist_screen::@8
  [189] (word) init_dist_screen::xds#0 ← (word) sqr::return#3
  [190] (word) init_dist_screen::ds#0 ← (word) init_dist_screen::xds#0 + (word) init_dist_screen::yds#0
  [191] (word) sqrt::val#0 ← (word) init_dist_screen::ds#0
  [192] call sqrt 
  [193] (byte) sqrt::return#2 ← (byte) sqrt::return#0
  to:init_dist_screen::@13
init_dist_screen::@13: scope:[init_dist_screen]  from init_dist_screen::@12
  [194] (byte) init_dist_screen::d#0 ← (byte) sqrt::return#2
  [195] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0
  [196] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0
  [197] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0
  [198] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0
  [199] (byte) init_dist_screen::x#1 ← ++ (byte) init_dist_screen::x#2
  [200] (byte) init_dist_screen::xb#1 ← -- (byte) init_dist_screen::xb#2
  [201] if((byte) init_dist_screen::x#1<(byte) $13+(byte) 1) goto init_dist_screen::@5
  to:init_dist_screen::@9
init_dist_screen::@9: scope:[init_dist_screen]  from init_dist_screen::@13
  [202] (byte*) init_dist_screen::screen_topline#1 ← (byte*) init_dist_screen::screen_topline#10 + (byte) $28
  [203] (byte*) init_dist_screen::screen_bottomline#1 ← (byte*) init_dist_screen::screen_bottomline#10 - (byte) $28
  [204] (byte) init_dist_screen::y#1 ← ++ (byte) init_dist_screen::y#10
  [205] if((byte) init_dist_screen::y#1!=(byte) $d) goto init_dist_screen::@1
  to:init_dist_screen::@return
init_dist_screen::@return: scope:[init_dist_screen]  from init_dist_screen::@9
  [206] return 
  to:@return
init_dist_screen::@6: scope:[init_dist_screen]  from init_dist_screen::@5
  [207] (byte~) init_dist_screen::$15 ← (byte) init_dist_screen::x2#0 - (byte) $27
  to:init_dist_screen::@8
init_dist_screen::@2: scope:[init_dist_screen]  from init_dist_screen::@1
  [208] (byte~) init_dist_screen::$7 ← (byte) init_dist_screen::y2#0 - (byte) $18
  to:init_dist_screen::@4
sqrt: scope:[sqrt]  from init_dist_screen::@12
  [209] (word) bsearch16u::key#0 ← (word) sqrt::val#0
  [210] (word*) bsearch16u::items#1 ← (word*)(void*) SQUARES#1
  [211] call bsearch16u 
  [212] (word*) bsearch16u::return#3 ← (word*) bsearch16u::return#1
  to:sqrt::@1
sqrt::@1: scope:[sqrt]  from sqrt
  [213] (word*) sqrt::found#0 ← (word*) bsearch16u::return#3
  [214] (word~) sqrt::$3 ← (word*) sqrt::found#0 - (word*)(void*) SQUARES#1
  [215] (word~) sqrt::$1 ← (word~) sqrt::$3 >> (byte) 1
  [216] (byte) sqrt::return#0 ← (byte)(word~) sqrt::$1
  to:sqrt::@return
sqrt::@return: scope:[sqrt]  from sqrt::@1
  [217] return 
  to:@return
bsearch16u: scope:[bsearch16u]  from sqrt
  [218] phi()
  to:bsearch16u::@3
bsearch16u::@3: scope:[bsearch16u]  from bsearch16u bsearch16u::@7
  [219] (word*) bsearch16u::items#2 ← phi( bsearch16u/(word*) bsearch16u::items#1 bsearch16u::@7/(word*) bsearch16u::items#8 )
  [219] (byte) bsearch16u::num#3 ← phi( bsearch16u/(const byte) NUM_SQUARES#3 bsearch16u::@7/(byte) bsearch16u::num#0 )
  [220] if((byte) bsearch16u::num#3>(byte) 0) goto bsearch16u::@4
  to:bsearch16u::@5
bsearch16u::@5: scope:[bsearch16u]  from bsearch16u::@3
  [221] if(*((word*) bsearch16u::items#2)<=(word) bsearch16u::key#0) goto bsearch16u::@2
  to:bsearch16u::@1
bsearch16u::@1: scope:[bsearch16u]  from bsearch16u::@5
  [222] (word*~) bsearch16u::$2 ← (word*) bsearch16u::items#2 - (byte) 1*(const byte) SIZEOF_WORD
  to:bsearch16u::@2
bsearch16u::@2: scope:[bsearch16u]  from bsearch16u::@1 bsearch16u::@5
  [223] (word*) bsearch16u::return#2 ← phi( bsearch16u::@5/(word*) bsearch16u::items#2 bsearch16u::@1/(word*~) bsearch16u::$2 )
  to:bsearch16u::@return
bsearch16u::@return: scope:[bsearch16u]  from bsearch16u::@2 bsearch16u::@8
  [224] (word*) bsearch16u::return#1 ← phi( bsearch16u::@8/(word*~) bsearch16u::return#6 bsearch16u::@2/(word*) bsearch16u::return#2 )
  [225] return 
  to:@return
bsearch16u::@4: scope:[bsearch16u]  from bsearch16u::@3
  [226] (byte~) bsearch16u::$6 ← (byte) bsearch16u::num#3 >> (byte) 1
  [227] (byte~) bsearch16u::$16 ← (byte~) bsearch16u::$6 << (byte) 1
  [228] (word*) bsearch16u::pivot#0 ← (word*) bsearch16u::items#2 + (byte~) bsearch16u::$16
  [229] (signed word) bsearch16u::result#0 ← (signed word)(word) bsearch16u::key#0 - (signed word)*((word*) bsearch16u::pivot#0)
  [230] if((signed word) bsearch16u::result#0!=(signed byte) 0) goto bsearch16u::@6
  to:bsearch16u::@8
bsearch16u::@8: scope:[bsearch16u]  from bsearch16u::@4
  [231] (word*~) bsearch16u::return#6 ← (word*) bsearch16u::pivot#0
  to:bsearch16u::@return
bsearch16u::@6: scope:[bsearch16u]  from bsearch16u::@4
  [232] if((signed word) bsearch16u::result#0<=(signed byte) 0) goto bsearch16u::@7
  to:bsearch16u::@9
bsearch16u::@9: scope:[bsearch16u]  from bsearch16u::@6
  [233] (word*) bsearch16u::items#0 ← (word*) bsearch16u::pivot#0 + (byte) 1*(const byte) SIZEOF_WORD
  [234] (byte) bsearch16u::num#1 ← -- (byte) bsearch16u::num#3
  to:bsearch16u::@7
bsearch16u::@7: scope:[bsearch16u]  from bsearch16u::@6 bsearch16u::@9
  [235] (word*) bsearch16u::items#8 ← phi( bsearch16u::@9/(word*) bsearch16u::items#0 bsearch16u::@6/(word*) bsearch16u::items#2 )
  [235] (byte) bsearch16u::num#5 ← phi( bsearch16u::@9/(byte) bsearch16u::num#1 bsearch16u::@6/(byte) bsearch16u::num#3 )
  [236] (byte) bsearch16u::num#0 ← (byte) bsearch16u::num#5 >> (byte) 1
  to:bsearch16u::@3
sqr: scope:[sqr]  from init_dist_screen::@4 init_dist_screen::@8
  [237] (byte) sqr::val#2 ← phi( init_dist_screen::@4/(byte) sqr::val#0 init_dist_screen::@8/(byte) sqr::val#1 )
  [238] (byte~) sqr::$0 ← (byte) sqr::val#2 << (byte) 1
  [239] (word) sqr::return#0 ← *((word*)(void*) SQUARES#1 + (byte~) sqr::$0)
  to:sqr::@return
sqr::@return: scope:[sqr]  from sqr
  [240] return 
  to:@return
init_squares: scope:[init_squares]  from init_dist_screen
  [241] phi()
  [242] call malloc 
  to:init_squares::@2
init_squares::@2: scope:[init_squares]  from init_squares
  [243] (void*) SQUARES#1 ← (void*)(byte*) malloc::mem#0
  [244] (word*) init_squares::squares#0 ← (word*)(void*) SQUARES#1
  to:init_squares::@1
init_squares::@1: scope:[init_squares]  from init_squares::@1 init_squares::@2
  [245] (byte) init_squares::i#2 ← phi( init_squares::@1/(byte) init_squares::i#1 init_squares::@2/(byte) 0 )
  [245] (word*) init_squares::squares#2 ← phi( init_squares::@1/(word*) init_squares::squares#1 init_squares::@2/(word*) init_squares::squares#0 )
  [245] (word) init_squares::sqr#2 ← phi( init_squares::@1/(word) init_squares::sqr#1 init_squares::@2/(byte) 0 )
  [246] *((word*) init_squares::squares#2) ← (word) init_squares::sqr#2
  [247] (word*) init_squares::squares#1 ← (word*) init_squares::squares#2 + (const byte) SIZEOF_WORD
  [248] (byte~) init_squares::$3 ← (byte) init_squares::i#2 << (byte) 1
  [249] (byte~) init_squares::$4 ← (byte~) init_squares::$3 + (byte) 1
  [250] (word) init_squares::sqr#1 ← (word) init_squares::sqr#2 + (byte~) init_squares::$4
  [251] (byte) init_squares::i#1 ← ++ (byte) init_squares::i#2
  [252] if((byte) init_squares::i#1!=(const byte) NUM_SQUARES#3-(byte) 1+(byte) 1) goto init_squares::@1
  to:init_squares::@return
init_squares::@return: scope:[init_squares]  from init_squares::@1
  [253] return 
  to:@return
malloc: scope:[malloc]  from @1 @3 init_squares
  [254] (word) malloc::size#3 ← phi( @1/(word) $3e8 @3/(word) $3e8 init_squares/(const byte) NUM_SQUARES#3*(const byte) SIZEOF_WORD )
  [254] (byte*) heap_head#12 ← phi( @1/(const byte*) HEAP_START#0 @3/(byte*) heap_head#1 init_squares/(byte*) heap_head#1 )
  [255] (byte*) malloc::mem#0 ← (byte*) heap_head#12
  [256] (byte*) heap_head#1 ← (byte*) heap_head#12 + (word) malloc::size#3
  to:malloc::@return
malloc::@return: scope:[malloc]  from malloc
  [257] return 
  to:@return
irqBottom: scope:[irqBottom]  from
  [258] phi()
  to:irqBottom::@1
irqBottom::@1: scope:[irqBottom]  from irqBottom
  [259] phi()
  [260] call processChars 
  to:irqBottom::@2
irqBottom::@2: scope:[irqBottom]  from irqBottom::@1
  [261] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_TOP#0
  [262] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqTop()
  [263] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  to:irqBottom::@return
irqBottom::@return: scope:[irqBottom]  from irqBottom::@2
  [264] return 
  to:@return
processChars: scope:[processChars]  from irqBottom::@1
  [265] phi()
  to:processChars::@1
processChars::@1: scope:[processChars]  from processChars processChars::@2
  [266] (byte) processChars::numActive#10 ← phi( processChars/(byte) 0 processChars::@2/(byte) processChars::numActive#3 )
  [266] (byte) processChars::i#10 ← phi( processChars/(byte) 0 processChars::@2/(byte) processChars::i#1 )
  [267] (byte) processChars::$67 ← (byte) processChars::i#10 << (byte) 1
  [268] (byte) processChars::$68 ← (byte) processChars::$67 + (byte) processChars::i#10
  [269] (byte) processChars::$69 ← (byte) processChars::$68 << (byte) 1
  [270] (byte) processChars::$70 ← (byte) processChars::$69 + (byte) processChars::i#10
  [271] (byte~) processChars::$37 ← (byte) processChars::$70 << (byte) 1
  [272] (struct ProcessingSprite*) processChars::processing#0 ← (const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) processChars::$37
  [273] (byte) processChars::bitmask#0 ← (byte) 1 << *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID)
  [274] if(*((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS)==(const byte) STATUS_FREE) goto processChars::@2
  to:processChars::@10
processChars::@10: scope:[processChars]  from processChars::@1
  [275] if(*((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS)!=(const byte) STATUS_NEW) goto processChars::@3
  to:processChars::@11
processChars::@11: scope:[processChars]  from processChars::@10
  [276] *(*((byte**)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR)) ← (byte) ' '
  [277] *((const byte*) SPRITES_ENABLE#0) ← *((const byte*) SPRITES_ENABLE#0) | (byte) processChars::bitmask#0
  [278] *((const byte*) SPRITES_COLS#0 + *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID)) ← *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL)
  [279] *((const byte*) SCREEN#0+(const word) SPRITE_PTRS#0 + *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID)) ← *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR)
  [280] *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS) ← (const byte) STATUS_PROCESSING
  to:processChars::@3
processChars::@3: scope:[processChars]  from processChars::@10 processChars::@11
  [281] (word) processChars::xpos#0 ← *((word*)(struct ProcessingSprite*) processChars::processing#0) >> (byte) 4
  [282] (byte~) processChars::$11 ← > (word) processChars::xpos#0
  [283] if((byte) 0!=(byte~) processChars::$11) goto processChars::@4
  to:processChars::@8
processChars::@8: scope:[processChars]  from processChars::@3
  [284] (byte~) processChars::$12 ← (byte) $ff ^ (byte) processChars::bitmask#0
  [285] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) & (byte~) processChars::$12
  to:processChars::@5
processChars::@5: scope:[processChars]  from processChars::@4 processChars::@8
  [286] (byte~) processChars::$17 ← (byte) processChars::i#10 << (byte) 1
  [287] (byte~) processChars::$14 ← (byte)(word) processChars::xpos#0
  [288] *((const byte*) SPRITES_XPOS#0 + (byte~) processChars::$17) ← (byte~) processChars::$14
  [289] (word~) processChars::$15 ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) >> (byte) 4
  [290] (byte) processChars::ypos#0 ← (byte)(word~) processChars::$15
  [291] *((const byte*) SPRITES_YPOS#0 + (byte~) processChars::$17) ← (byte) processChars::ypos#0
  [292] if(*((word*)(struct ProcessingSprite*) processChars::processing#0)<(const word) XPOS_LEFTMOST#0) goto processChars::@6
  to:processChars::@14
processChars::@14: scope:[processChars]  from processChars::@5
  [293] if(*((word*)(struct ProcessingSprite*) processChars::processing#0)>(const word) XPOS_RIGHTMOST#0) goto processChars::@6
  to:processChars::@13
processChars::@13: scope:[processChars]  from processChars::@14
  [294] if(*((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y)<(const word) YPOS_TOPMOST#0) goto processChars::@6
  to:processChars::@12
processChars::@12: scope:[processChars]  from processChars::@13
  [295] if(*((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y)>(const word) YPOS_BOTTOMMOST#0) goto processChars::@6
  to:processChars::@9
processChars::@9: scope:[processChars]  from processChars::@12
  [296] (word~) processChars::$25 ← (word) processChars::xpos#0 >> (byte) 3
  [297] (byte~) processChars::$26 ← (byte)(word~) processChars::$25
  [298] (byte) processChars::xchar#0 ← (byte~) processChars::$26 - (const byte) BORDER_XPOS_LEFT#0/(byte) 8
  [299] (byte~) processChars::$38 ← (byte) processChars::xchar#0 << (byte) 1
  [300] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) + *((const word[$28]) VXSIN#0 + (byte~) processChars::$38)
  [301] *((word*)(struct ProcessingSprite*) processChars::processing#0) ← *((word*)(struct ProcessingSprite*) processChars::processing#0) + *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX)
  [302] (byte~) processChars::$30 ← (byte) processChars::ypos#0 >> (byte) 3
  [303] (byte) processChars::ychar#0 ← (byte~) processChars::$30 - (const byte) BORDER_YPOS_TOP#0/(byte) 8
  [304] (byte~) processChars::$39 ← (byte) processChars::ychar#0 << (byte) 1
  [305] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) + *((const word[$19]) VYSIN#0 + (byte~) processChars::$39)
  [306] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) + *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY)
  to:processChars::@7
processChars::@7: scope:[processChars]  from processChars::@6 processChars::@9
  [307] (byte) processChars::numActive#1 ← ++ (byte) processChars::numActive#10
  to:processChars::@2
processChars::@2: scope:[processChars]  from processChars::@1 processChars::@7
  [308] (byte) processChars::numActive#3 ← phi( processChars::@1/(byte) processChars::numActive#10 processChars::@7/(byte) processChars::numActive#1 )
  [309] (byte) processChars::i#1 ← ++ (byte) processChars::i#10
  [310] if((byte) processChars::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto processChars::@1
  to:processChars::@return
processChars::@return: scope:[processChars]  from processChars::@2
  [311] return 
  to:@return
processChars::@6: scope:[processChars]  from processChars::@12 processChars::@13 processChars::@14 processChars::@5
  [312] *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS) ← (const byte) STATUS_FREE
  [313] (byte~) processChars::$33 ← (byte) $ff ^ (byte) processChars::bitmask#0
  [314] *((const byte*) SPRITES_ENABLE#0) ← *((const byte*) SPRITES_ENABLE#0) & (byte~) processChars::$33
  to:processChars::@7
processChars::@4: scope:[processChars]  from processChars::@3
  [315] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) | (byte) processChars::bitmask#0
  to:processChars::@5
irqTop: scope:[irqTop]  from
  [316] phi()
  to:irqTop::@1
irqTop::@1: scope:[irqTop]  from irqTop
  [317] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_MIDDLE#0
  [318] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqBottom()
  [319] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  to:irqTop::@return
irqTop::@return: scope:[irqTop]  from irqTop::@1
  [320] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) BGCOL
(byte) BLUE
(byte*) BORDERCOL
(byte) BORDER_XPOS_LEFT
(word) BORDER_XPOS_RIGHT
(byte) BORDER_YPOS_BOTTOM
(byte) BORDER_YPOS_TOP
(byte*) CHARGEN
(byte*) CIA1_INTERRUPT
(byte) CIA_INTERRUPT_CLEAR
(byte*) COLS
(bool) DEBUG
(void()**) HARDWARE_IRQ
(byte*) HEAP_START
(byte*) IRQ_ENABLE
(byte) IRQ_RASTER
(byte*) IRQ_STATUS
(byte) LIGHT_BLUE
(byte) NOT_FOUND
(byte) NUM_PROCESSING
(byte) NUM_SQUARES
(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING
(byte*) PROCPORT
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_IO
(byte) ProcessingChar::dist
(byte) ProcessingChar::x
(byte) ProcessingChar::y
(byte) ProcessingSprite::col
(byte) ProcessingSprite::id
(byte) ProcessingSprite::ptr
(byte*) ProcessingSprite::screenPtr
(byte) ProcessingSprite::status
(word) ProcessingSprite::vx
(word) ProcessingSprite::vy
(word) ProcessingSprite::x
(word) ProcessingSprite::y
(byte*) RASTER
(byte) RASTER_IRQ_MIDDLE
(byte) RASTER_IRQ_TOP
(byte*) SCREEN
(byte*) SCREEN_COPY
(void*) SCREEN_COPY#0 0.0273972602739726
(byte*) SCREEN_DIST
(void*) SCREEN_DIST#0 0.028169014084507043
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_MC
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(byte*) SPRITE_DATA
(word) SPRITE_PTRS
(word*) SQUARES
(void*) SQUARES#1 0.03225806451612903
(byte*) VIC_CONTROL
(word[$28]) VXSIN
(word[$19]) VYSIN
(byte) WHITE
(word) XPOS_LEFTMOST
(word) XPOS_RIGHTMOST
(word) YPOS_BOTTOMMOST
(word) YPOS_TOPMOST
(word*()) bsearch16u((word) bsearch16u::key , (word*) bsearch16u::items , (byte) bsearch16u::num)
(byte~) bsearch16u::$16 2002.0
(word*~) bsearch16u::$2 4.0
(byte~) bsearch16u::$6 2002.0
(word*) bsearch16u::items
(word*) bsearch16u::items#0 1001.0
(word*) bsearch16u::items#1 2.0
(word*) bsearch16u::items#2 334.5555555555556
(word*) bsearch16u::items#8 1501.5
(word) bsearch16u::key
(word) bsearch16u::key#0 0.26666666666666666
(byte) bsearch16u::num
(byte) bsearch16u::num#0 2002.0
(byte) bsearch16u::num#1 2002.0
(byte) bsearch16u::num#3 556.1111111111111
(byte) bsearch16u::num#5 3003.0
(word*) bsearch16u::pivot
(word*) bsearch16u::pivot#0 501.0
(signed word) bsearch16u::result
(signed word) bsearch16u::result#0 1501.5
(word*) bsearch16u::return
(word*) bsearch16u::return#1 2.0
(word*) bsearch16u::return#2 6.0
(word*) bsearch16u::return#3 4.0
(word*~) bsearch16u::return#6 4.0
(struct ProcessingChar()) getCharToProcess()
(byte*~) getCharToProcess::$10 4.0
(word) getCharToProcess::$12 4.0
(word) getCharToProcess::$13 4.0
(word~) getCharToProcess::$8 3.0
(word~) getCharToProcess::$9 4.0
(byte) getCharToProcess::closest_dist
(byte~) getCharToProcess::closest_dist#10 202.0
(byte~) getCharToProcess::closest_dist#12 2002.0
(byte) getCharToProcess::closest_dist#2 1026.25
(byte) getCharToProcess::closest_dist#8 202.0
(byte) getCharToProcess::closest_x
(byte) getCharToProcess::closest_x#7 517.3333333333334
(byte) getCharToProcess::closest_x#9 202.0
(byte) getCharToProcess::closest_y
(byte) getCharToProcess::closest_y#7 517.3333333333334
(byte) getCharToProcess::closest_y#9 202.0
(byte) getCharToProcess::dist
(byte) getCharToProcess::dist#0 750.75
(byte*) getCharToProcess::dist_line
(byte*) getCharToProcess::dist_line#0 4.0
(byte*) getCharToProcess::dist_line#1 50.5
(byte*) getCharToProcess::dist_line#6 86.07142857142857
(struct ProcessingChar) getCharToProcess::return
(byte) getCharToProcess::return_dist
(byte) getCharToProcess::return_dist#0 7.333333333333333
(byte) getCharToProcess::return_dist#1 228.7777777777778
(byte~) getCharToProcess::return_dist#5 2002.0
(byte~) getCharToProcess::return_dist#6 2002.0
(byte) getCharToProcess::return_x
(byte) getCharToProcess::return_x#0 7.333333333333333
(byte) getCharToProcess::return_x#1 228.7777777777778
(byte~) getCharToProcess::return_x#7 1001.0
(byte) getCharToProcess::return_y
(byte) getCharToProcess::return_y#0 7.333333333333333
(byte) getCharToProcess::return_y#1 216.6315789473684
(byte~) getCharToProcess::return_y#7 2002.0
(byte*) getCharToProcess::screen_line
(byte*) getCharToProcess::screen_line#0 2.0
(byte*) getCharToProcess::screen_line#1 40.4
(byte*) getCharToProcess::screen_line#4 92.6923076923077
(byte) getCharToProcess::x
(byte) getCharToProcess::x#1 1001.0
(byte) getCharToProcess::x#2 556.1111111111111
(byte) getCharToProcess::y
(byte) getCharToProcess::y#1 101.0
(byte) getCharToProcess::y#7 80.2
(byte*) heap_head
(byte*) heap_head#1 0.6000000000000001
(byte*) heap_head#12 4.0
(void()) initSprites()
(byte) initSprites::i
(byte) initSprites::i#1 16.5
(byte) initSprites::i#2 16.5
(byte*) initSprites::sp
(byte*) initSprites::sp#1 16.5
(byte*) initSprites::sp#2 16.5
(void()) init_dist_screen((byte*) init_dist_screen::screen)
(byte~) init_dist_screen::$13 202.0
(byte~) init_dist_screen::$15 202.0
(byte~) init_dist_screen::$5 22.0
(byte~) init_dist_screen::$7 22.0
(byte) init_dist_screen::d
(byte) init_dist_screen::d#0 126.25
(word) init_dist_screen::ds
(word) init_dist_screen::ds#0 202.0
(byte*) init_dist_screen::screen
(byte*) init_dist_screen::screen#0 1.5
(byte*) init_dist_screen::screen_bottomline
(byte*) init_dist_screen::screen_bottomline#0 4.0
(byte*) init_dist_screen::screen_bottomline#1 7.333333333333333
(byte*) init_dist_screen::screen_bottomline#10 6.848484848484849
(byte*) init_dist_screen::screen_topline
(byte*) init_dist_screen::screen_topline#1 5.5
(byte*) init_dist_screen::screen_topline#10 7.0625
(byte) init_dist_screen::x
(byte) init_dist_screen::x#1 101.0
(byte) init_dist_screen::x#2 26.578947368421055
(byte) init_dist_screen::x2
(byte) init_dist_screen::x2#0 202.0
(byte) init_dist_screen::xb
(byte) init_dist_screen::xb#1 101.0
(byte) init_dist_screen::xb#2 20.2
(byte) init_dist_screen::xd
(byte) init_dist_screen::xd#0 303.0
(word) init_dist_screen::xds
(word) init_dist_screen::xds#0 202.0
(byte) init_dist_screen::y
(byte) init_dist_screen::y#1 16.5
(byte) init_dist_screen::y#10 0.9705882352941178
(byte) init_dist_screen::y2
(byte) init_dist_screen::y2#0 22.0
(byte) init_dist_screen::yd
(byte) init_dist_screen::yd#0 33.0
(word) init_dist_screen::yds
(word) init_dist_screen::yds#0 4.869565217391305
(void()) init_squares()
(byte~) init_squares::$3 22.0
(byte~) init_squares::$4 22.0
(byte) init_squares::i
(byte) init_squares::i#1 16.5
(byte) init_squares::i#2 5.5
(word) init_squares::sqr
(word) init_squares::sqr#1 7.333333333333333
(word) init_squares::sqr#2 6.6000000000000005
(word*) init_squares::squares
(word*) init_squares::squares#0 4.0
(word*) init_squares::squares#1 3.6666666666666665
(word*) init_squares::squares#2 17.5
interrupt(HARDWARE_ALL)(void()) irqBottom()
(byte) irqBottom::i
interrupt(HARDWARE_ALL)(void()) irqTop()
(byte) irqTop::i
(byte) irqTop::i1
(void()) main()
(byte~) main::$16 12.222222222222221
(byte) main::$26 22.0
(byte) main::$27 22.0
(byte) main::$28 22.0
(byte) main::$29 22.0
(struct ProcessingChar~) main::$9
(byte) main::center_dist
(byte) main::center_dist#0 22.0
(byte) main::center_x
(byte) main::center_x#0 5.5
(byte) main::center_y
(byte) main::center_y#0 5.5
(byte*) main::dst
(byte*) main::dst#0 4.0
(byte*) main::dst#1 11.0
(byte*) main::dst#2 11.666666666666666
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 3.6666666666666665
(byte*) main::src
(byte*) main::src#1 11.0
(byte*) main::src#2 16.5
(void*()) malloc((word) malloc::size)
(byte*) malloc::mem
(byte*) malloc::mem#0 0.3333333333333333
(void*) malloc::return
(word) malloc::size
(word) malloc::size#3 1.0
(void()) processChars()
(byte~) processChars::$11 22.0
(byte~) processChars::$12 22.0
(byte~) processChars::$14 22.0
(word~) processChars::$15 11.0
(byte~) processChars::$17 6.6000000000000005
(word~) processChars::$25 11.0
(byte~) processChars::$26 22.0
(byte~) processChars::$30 22.0
(byte~) processChars::$33 22.0
(byte~) processChars::$37 22.0
(byte~) processChars::$38 22.0
(byte~) processChars::$39 22.0
(byte) processChars::$67 22.0
(byte) processChars::$68 22.0
(byte) processChars::$69 22.0
(byte) processChars::$70 22.0
(byte) processChars::bitmask
(byte) processChars::bitmask#0 2.2
(byte) processChars::i
(byte) processChars::i#1 16.5
(byte) processChars::i#10 1.4042553191489362
(byte) processChars::numActive
(byte) processChars::numActive#1 22.0
(byte) processChars::numActive#10 0.7333333333333333
(byte) processChars::numActive#3 11.0
(struct ProcessingSprite*) processChars::processing
(struct ProcessingSprite*) processChars::processing#0 0.3142857142857143
(byte) processChars::xchar
(byte) processChars::xchar#0 22.0
(word) processChars::xpos
(word) processChars::xpos#0 2.0625
(byte) processChars::ychar
(byte) processChars::ychar#0 22.0
(byte) processChars::ypos
(byte) processChars::ypos#0 2.75
(void()) setupRasterIrq((word) setupRasterIrq::raster , (void()*) setupRasterIrq::irqRoutine)
(void()*) setupRasterIrq::irqRoutine
(word) setupRasterIrq::raster
(word()) sqr((byte) sqr::val)
(byte~) sqr::$0 4.0
(word) sqr::return
(word) sqr::return#0 28.5
(word) sqr::return#2 22.0
(word) sqr::return#3 202.0
(byte) sqr::val
(byte) sqr::val#0 22.0
(byte) sqr::val#1 202.0
(byte) sqr::val#2 114.0
(byte()) sqrt((word) sqrt::val)
(word~) sqrt::$1 2.0
(word~) sqrt::$3 4.0
(word*) sqrt::found
(word*) sqrt::found#0 4.0
(byte) sqrt::return
(byte) sqrt::return#0 34.33333333333333
(byte) sqrt::return#2 202.0
(byte) sqrt::sq
(word) sqrt::val
(word) sqrt::val#0 103.0
(void()) startProcessing((byte) startProcessing::center_x , (byte) startProcessing::center_y , (byte) startProcessing::center_dist)
(word~) startProcessing::$0 3.0
(word~) startProcessing::$1 4.0
(word~) startProcessing::$11 4.0
(word~) startProcessing::$12 4.0
(word~) startProcessing::$13 4.0
(word~) startProcessing::$15 4.0
(word~) startProcessing::$16 4.0
(word~) startProcessing::$17 4.0
(byte~) startProcessing::$22 2.0
(word~) startProcessing::$23 0.5
(byte~) startProcessing::$30 2002.0
(byte~) startProcessing::$31 2.2222222222222228
(byte) startProcessing::$42 2002.0
(byte) startProcessing::$43 2002.0
(byte) startProcessing::$44 2002.0
(byte) startProcessing::$45 2002.0
(word) startProcessing::$47 4.0
(word) startProcessing::$48 4.0
(word~) startProcessing::$5 4.0
(byte) startProcessing::$50 4.0
(byte) startProcessing::$51 4.0
(byte) startProcessing::$52 4.0
(byte) startProcessing::$53 4.0
(word~) startProcessing::$6 4.0
(word~) startProcessing::$8 4.0
(word~) startProcessing::$9 4.0
(struct ProcessingChar) startProcessing::center
(byte) startProcessing::center_dist
(byte) startProcessing::center_x
(byte) startProcessing::center_x#0 0.30952380952380953
(byte) startProcessing::center_y
(byte) startProcessing::center_y#0 0.24444444444444444
(byte) startProcessing::ch
(byte) startProcessing::ch#0 2.0
(byte*) startProcessing::chargenData
(byte*) startProcessing::chargenData#0 1.3333333333333333
(byte*) startProcessing::chargenData#1 67.33333333333333
(byte*) startProcessing::chargenData#2 101.66666666666666
(byte*) startProcessing::colPtr
(byte*) startProcessing::colPtr#0 4.0
(byte) startProcessing::freeIdx
(byte) startProcessing::freeIdx#2 28.0
(byte) startProcessing::freeIdx#6 20.2
(byte~) startProcessing::freeIdx#7 202.0
(byte~) startProcessing::freeIdx#8 202.0
(byte) startProcessing::i
(byte) startProcessing::i#1 1501.5
(byte) startProcessing::i#2 858.0
(byte) startProcessing::i1
(byte) startProcessing::i1#1 151.5
(byte) startProcessing::i1#2 50.5
(word) startProcessing::offset
(word) startProcessing::offset#0 2.0
(byte*) startProcessing::screenPtr
(byte*) startProcessing::screenPtr#0 0.14285714285714285
(byte) startProcessing::spriteCol
(byte) startProcessing::spriteCol#0 0.0975609756097561
(byte*) startProcessing::spriteData
(byte*) startProcessing::spriteData#0 0.5714285714285714
(byte*) startProcessing::spriteData#1 50.5
(byte*) startProcessing::spriteData#2 152.5
(byte) startProcessing::spriteIdx
(byte) startProcessing::spritePtr
(byte) startProcessing::spritePtr#0 0.3076923076923077
(word) startProcessing::spriteX
(word) startProcessing::spriteX#0 0.3076923076923077
(word) startProcessing::spriteY
(word) startProcessing::spriteY#0 0.4

Initial phi equivalence classes
[ main::src#2 main::src#1 ]
[ main::dst#2 main::dst#1 main::dst#0 ]
[ main::i#2 main::i#1 ]
[ startProcessing::freeIdx#6 startProcessing::freeIdx#7 ]
[ startProcessing::freeIdx#2 startProcessing::freeIdx#8 startProcessing::i#2 startProcessing::i#1 ]
[ startProcessing::chargenData#2 startProcessing::chargenData#0 startProcessing::chargenData#1 ]
[ startProcessing::spriteData#2 startProcessing::spriteData#0 startProcessing::spriteData#1 ]
[ startProcessing::i1#2 startProcessing::i1#1 ]
[ getCharToProcess::screen_line#4 getCharToProcess::screen_line#0 getCharToProcess::screen_line#1 ]
[ getCharToProcess::dist_line#6 getCharToProcess::dist_line#0 getCharToProcess::dist_line#1 ]
[ getCharToProcess::y#7 getCharToProcess::y#1 ]
[ getCharToProcess::x#2 getCharToProcess::x#1 ]
[ getCharToProcess::closest_dist#2 getCharToProcess::closest_dist#8 getCharToProcess::closest_dist#10 getCharToProcess::closest_dist#12 ]
[ getCharToProcess::closest_x#7 getCharToProcess::closest_x#9 getCharToProcess::return_x#1 getCharToProcess::return_x#7 ]
[ getCharToProcess::closest_y#7 getCharToProcess::closest_y#9 getCharToProcess::return_y#1 getCharToProcess::return_y#7 ]
[ getCharToProcess::return_dist#1 getCharToProcess::return_dist#5 getCharToProcess::return_dist#6 getCharToProcess::dist#0 ]
[ initSprites::sp#2 initSprites::sp#1 ]
[ initSprites::i#2 initSprites::i#1 ]
[ init_dist_screen::y#10 init_dist_screen::y#1 ]
[ init_dist_screen::screen_topline#10 init_dist_screen::screen_topline#1 init_dist_screen::screen#0 ]
[ init_dist_screen::screen_bottomline#10 init_dist_screen::screen_bottomline#1 init_dist_screen::screen_bottomline#0 ]
[ init_dist_screen::yd#0 init_dist_screen::$7 init_dist_screen::$5 ]
[ init_dist_screen::x#2 init_dist_screen::x#1 ]
[ init_dist_screen::xb#2 init_dist_screen::xb#1 ]
[ init_dist_screen::xd#0 init_dist_screen::$15 init_dist_screen::$13 ]
[ bsearch16u::return#1 bsearch16u::return#6 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::items#0 ]
[ bsearch16u::num#5 bsearch16u::num#1 bsearch16u::num#3 bsearch16u::num#0 ]
[ sqr::val#2 sqr::val#0 sqr::val#1 ]
[ init_squares::sqr#2 init_squares::sqr#1 ]
[ init_squares::squares#2 init_squares::squares#1 init_squares::squares#0 ]
[ init_squares::i#2 init_squares::i#1 ]
[ heap_head#12 heap_head#1 ]
[ malloc::size#3 ]
[ processChars::i#10 processChars::i#1 ]
[ processChars::numActive#10 processChars::numActive#3 processChars::numActive#1 ]
Added variable SCREEN_COPY#0 to zero page equivalence class [ SCREEN_COPY#0 ]
Added variable SCREEN_DIST#0 to zero page equivalence class [ SCREEN_DIST#0 ]
Added variable main::$26 to zero page equivalence class [ main::$26 ]
Added variable main::$27 to zero page equivalence class [ main::$27 ]
Added variable main::$28 to zero page equivalence class [ main::$28 ]
Added variable main::$29 to zero page equivalence class [ main::$29 ]
Added variable main::$16 to zero page equivalence class [ main::$16 ]
Added variable getCharToProcess::return_x#0 to zero page equivalence class [ getCharToProcess::return_x#0 ]
Added variable getCharToProcess::return_y#0 to zero page equivalence class [ getCharToProcess::return_y#0 ]
Added variable getCharToProcess::return_dist#0 to zero page equivalence class [ getCharToProcess::return_dist#0 ]
Added variable main::center_x#0 to zero page equivalence class [ main::center_x#0 ]
Added variable main::center_y#0 to zero page equivalence class [ main::center_y#0 ]
Added variable main::center_dist#0 to zero page equivalence class [ main::center_dist#0 ]
Added variable startProcessing::center_x#0 to zero page equivalence class [ startProcessing::center_x#0 ]
Added variable startProcessing::center_y#0 to zero page equivalence class [ startProcessing::center_y#0 ]
Added variable startProcessing::$42 to zero page equivalence class [ startProcessing::$42 ]
Added variable startProcessing::$43 to zero page equivalence class [ startProcessing::$43 ]
Added variable startProcessing::$44 to zero page equivalence class [ startProcessing::$44 ]
Added variable startProcessing::$45 to zero page equivalence class [ startProcessing::$45 ]
Added variable startProcessing::$30 to zero page equivalence class [ startProcessing::$30 ]
Added variable startProcessing::$0 to zero page equivalence class [ startProcessing::$0 ]
Added variable startProcessing::$47 to zero page equivalence class [ startProcessing::$47 ]
Added variable startProcessing::$48 to zero page equivalence class [ startProcessing::$48 ]
Added variable startProcessing::$1 to zero page equivalence class [ startProcessing::$1 ]
Added variable startProcessing::offset#0 to zero page equivalence class [ startProcessing::offset#0 ]
Added variable startProcessing::colPtr#0 to zero page equivalence class [ startProcessing::colPtr#0 ]
Added variable startProcessing::spriteCol#0 to zero page equivalence class [ startProcessing::spriteCol#0 ]
Added variable startProcessing::screenPtr#0 to zero page equivalence class [ startProcessing::screenPtr#0 ]
Added variable startProcessing::$5 to zero page equivalence class [ startProcessing::$5 ]
Added variable startProcessing::$6 to zero page equivalence class [ startProcessing::$6 ]
Added variable startProcessing::ch#0 to zero page equivalence class [ startProcessing::ch#0 ]
Added variable startProcessing::$8 to zero page equivalence class [ startProcessing::$8 ]
Added variable startProcessing::$9 to zero page equivalence class [ startProcessing::$9 ]
Added variable startProcessing::$11 to zero page equivalence class [ startProcessing::$11 ]
Added variable startProcessing::$12 to zero page equivalence class [ startProcessing::$12 ]
Added variable startProcessing::$13 to zero page equivalence class [ startProcessing::$13 ]
Added variable startProcessing::spriteX#0 to zero page equivalence class [ startProcessing::spriteX#0 ]
Added variable startProcessing::$15 to zero page equivalence class [ startProcessing::$15 ]
Added variable startProcessing::$16 to zero page equivalence class [ startProcessing::$16 ]
Added variable startProcessing::$17 to zero page equivalence class [ startProcessing::$17 ]
Added variable startProcessing::spriteY#0 to zero page equivalence class [ startProcessing::spriteY#0 ]
Added variable startProcessing::spritePtr#0 to zero page equivalence class [ startProcessing::spritePtr#0 ]
Added variable startProcessing::$22 to zero page equivalence class [ startProcessing::$22 ]
Added variable startProcessing::$23 to zero page equivalence class [ startProcessing::$23 ]
Added variable startProcessing::$50 to zero page equivalence class [ startProcessing::$50 ]
Added variable startProcessing::$51 to zero page equivalence class [ startProcessing::$51 ]
Added variable startProcessing::$52 to zero page equivalence class [ startProcessing::$52 ]
Added variable startProcessing::$53 to zero page equivalence class [ startProcessing::$53 ]
Added variable startProcessing::$31 to zero page equivalence class [ startProcessing::$31 ]
Added variable getCharToProcess::$8 to zero page equivalence class [ getCharToProcess::$8 ]
Added variable getCharToProcess::$12 to zero page equivalence class [ getCharToProcess::$12 ]
Added variable getCharToProcess::$13 to zero page equivalence class [ getCharToProcess::$13 ]
Added variable getCharToProcess::$9 to zero page equivalence class [ getCharToProcess::$9 ]
Added variable getCharToProcess::$10 to zero page equivalence class [ getCharToProcess::$10 ]
Added variable init_dist_screen::y2#0 to zero page equivalence class [ init_dist_screen::y2#0 ]
Added variable sqr::return#2 to zero page equivalence class [ sqr::return#2 ]
Added variable init_dist_screen::yds#0 to zero page equivalence class [ init_dist_screen::yds#0 ]
Added variable init_dist_screen::x2#0 to zero page equivalence class [ init_dist_screen::x2#0 ]
Added variable sqr::return#3 to zero page equivalence class [ sqr::return#3 ]
Added variable init_dist_screen::xds#0 to zero page equivalence class [ init_dist_screen::xds#0 ]
Added variable init_dist_screen::ds#0 to zero page equivalence class [ init_dist_screen::ds#0 ]
Added variable sqrt::val#0 to zero page equivalence class [ sqrt::val#0 ]
Added variable sqrt::return#2 to zero page equivalence class [ sqrt::return#2 ]
Added variable init_dist_screen::d#0 to zero page equivalence class [ init_dist_screen::d#0 ]
Added variable bsearch16u::key#0 to zero page equivalence class [ bsearch16u::key#0 ]
Added variable bsearch16u::return#3 to zero page equivalence class [ bsearch16u::return#3 ]
Added variable sqrt::found#0 to zero page equivalence class [ sqrt::found#0 ]
Added variable sqrt::$3 to zero page equivalence class [ sqrt::$3 ]
Added variable sqrt::$1 to zero page equivalence class [ sqrt::$1 ]
Added variable sqrt::return#0 to zero page equivalence class [ sqrt::return#0 ]
Added variable bsearch16u::$6 to zero page equivalence class [ bsearch16u::$6 ]
Added variable bsearch16u::$16 to zero page equivalence class [ bsearch16u::$16 ]
Added variable bsearch16u::pivot#0 to zero page equivalence class [ bsearch16u::pivot#0 ]
Added variable bsearch16u::result#0 to zero page equivalence class [ bsearch16u::result#0 ]
Added variable sqr::$0 to zero page equivalence class [ sqr::$0 ]
Added variable sqr::return#0 to zero page equivalence class [ sqr::return#0 ]
Added variable SQUARES#1 to zero page equivalence class [ SQUARES#1 ]
Added variable init_squares::$3 to zero page equivalence class [ init_squares::$3 ]
Added variable init_squares::$4 to zero page equivalence class [ init_squares::$4 ]
Added variable malloc::mem#0 to zero page equivalence class [ malloc::mem#0 ]
Added variable processChars::$67 to zero page equivalence class [ processChars::$67 ]
Added variable processChars::$68 to zero page equivalence class [ processChars::$68 ]
Added variable processChars::$69 to zero page equivalence class [ processChars::$69 ]
Added variable processChars::$70 to zero page equivalence class [ processChars::$70 ]
Added variable processChars::$37 to zero page equivalence class [ processChars::$37 ]
Added variable processChars::processing#0 to zero page equivalence class [ processChars::processing#0 ]
Added variable processChars::bitmask#0 to zero page equivalence class [ processChars::bitmask#0 ]
Added variable processChars::xpos#0 to zero page equivalence class [ processChars::xpos#0 ]
Added variable processChars::$11 to zero page equivalence class [ processChars::$11 ]
Added variable processChars::$12 to zero page equivalence class [ processChars::$12 ]
Added variable processChars::$17 to zero page equivalence class [ processChars::$17 ]
Added variable processChars::$14 to zero page equivalence class [ processChars::$14 ]
Added variable processChars::$15 to zero page equivalence class [ processChars::$15 ]
Added variable processChars::ypos#0 to zero page equivalence class [ processChars::ypos#0 ]
Added variable processChars::$25 to zero page equivalence class [ processChars::$25 ]
Added variable processChars::$26 to zero page equivalence class [ processChars::$26 ]
Added variable processChars::xchar#0 to zero page equivalence class [ processChars::xchar#0 ]
Added variable processChars::$38 to zero page equivalence class [ processChars::$38 ]
Added variable processChars::$30 to zero page equivalence class [ processChars::$30 ]
Added variable processChars::ychar#0 to zero page equivalence class [ processChars::ychar#0 ]
Added variable processChars::$39 to zero page equivalence class [ processChars::$39 ]
Added variable processChars::$33 to zero page equivalence class [ processChars::$33 ]
Complete equivalence classes
[ main::src#2 main::src#1 ]
[ main::dst#2 main::dst#1 main::dst#0 ]
[ main::i#2 main::i#1 ]
[ startProcessing::freeIdx#6 startProcessing::freeIdx#7 ]
[ startProcessing::freeIdx#2 startProcessing::freeIdx#8 startProcessing::i#2 startProcessing::i#1 ]
[ startProcessing::chargenData#2 startProcessing::chargenData#0 startProcessing::chargenData#1 ]
[ startProcessing::spriteData#2 startProcessing::spriteData#0 startProcessing::spriteData#1 ]
[ startProcessing::i1#2 startProcessing::i1#1 ]
[ getCharToProcess::screen_line#4 getCharToProcess::screen_line#0 getCharToProcess::screen_line#1 ]
[ getCharToProcess::dist_line#6 getCharToProcess::dist_line#0 getCharToProcess::dist_line#1 ]
[ getCharToProcess::y#7 getCharToProcess::y#1 ]
[ getCharToProcess::x#2 getCharToProcess::x#1 ]
[ getCharToProcess::closest_dist#2 getCharToProcess::closest_dist#8 getCharToProcess::closest_dist#10 getCharToProcess::closest_dist#12 ]
[ getCharToProcess::closest_x#7 getCharToProcess::closest_x#9 getCharToProcess::return_x#1 getCharToProcess::return_x#7 ]
[ getCharToProcess::closest_y#7 getCharToProcess::closest_y#9 getCharToProcess::return_y#1 getCharToProcess::return_y#7 ]
[ getCharToProcess::return_dist#1 getCharToProcess::return_dist#5 getCharToProcess::return_dist#6 getCharToProcess::dist#0 ]
[ initSprites::sp#2 initSprites::sp#1 ]
[ initSprites::i#2 initSprites::i#1 ]
[ init_dist_screen::y#10 init_dist_screen::y#1 ]
[ init_dist_screen::screen_topline#10 init_dist_screen::screen_topline#1 init_dist_screen::screen#0 ]
[ init_dist_screen::screen_bottomline#10 init_dist_screen::screen_bottomline#1 init_dist_screen::screen_bottomline#0 ]
[ init_dist_screen::yd#0 init_dist_screen::$7 init_dist_screen::$5 ]
[ init_dist_screen::x#2 init_dist_screen::x#1 ]
[ init_dist_screen::xb#2 init_dist_screen::xb#1 ]
[ init_dist_screen::xd#0 init_dist_screen::$15 init_dist_screen::$13 ]
[ bsearch16u::return#1 bsearch16u::return#6 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::items#0 ]
[ bsearch16u::num#5 bsearch16u::num#1 bsearch16u::num#3 bsearch16u::num#0 ]
[ sqr::val#2 sqr::val#0 sqr::val#1 ]
[ init_squares::sqr#2 init_squares::sqr#1 ]
[ init_squares::squares#2 init_squares::squares#1 init_squares::squares#0 ]
[ init_squares::i#2 init_squares::i#1 ]
[ heap_head#12 heap_head#1 ]
[ malloc::size#3 ]
[ processChars::i#10 processChars::i#1 ]
[ processChars::numActive#10 processChars::numActive#3 processChars::numActive#1 ]
[ SCREEN_COPY#0 ]
[ SCREEN_DIST#0 ]
[ main::$26 ]
[ main::$27 ]
[ main::$28 ]
[ main::$29 ]
[ main::$16 ]
[ getCharToProcess::return_x#0 ]
[ getCharToProcess::return_y#0 ]
[ getCharToProcess::return_dist#0 ]
[ main::center_x#0 ]
[ main::center_y#0 ]
[ main::center_dist#0 ]
[ startProcessing::center_x#0 ]
[ startProcessing::center_y#0 ]
[ startProcessing::$42 ]
[ startProcessing::$43 ]
[ startProcessing::$44 ]
[ startProcessing::$45 ]
[ startProcessing::$30 ]
[ startProcessing::$0 ]
[ startProcessing::$47 ]
[ startProcessing::$48 ]
[ startProcessing::$1 ]
[ startProcessing::offset#0 ]
[ startProcessing::colPtr#0 ]
[ startProcessing::spriteCol#0 ]
[ startProcessing::screenPtr#0 ]
[ startProcessing::$5 ]
[ startProcessing::$6 ]
[ startProcessing::ch#0 ]
[ startProcessing::$8 ]
[ startProcessing::$9 ]
[ startProcessing::$11 ]
[ startProcessing::$12 ]
[ startProcessing::$13 ]
[ startProcessing::spriteX#0 ]
[ startProcessing::$15 ]
[ startProcessing::$16 ]
[ startProcessing::$17 ]
[ startProcessing::spriteY#0 ]
[ startProcessing::spritePtr#0 ]
[ startProcessing::$22 ]
[ startProcessing::$23 ]
[ startProcessing::$50 ]
[ startProcessing::$51 ]
[ startProcessing::$52 ]
[ startProcessing::$53 ]
[ startProcessing::$31 ]
[ getCharToProcess::$8 ]
[ getCharToProcess::$12 ]
[ getCharToProcess::$13 ]
[ getCharToProcess::$9 ]
[ getCharToProcess::$10 ]
[ init_dist_screen::y2#0 ]
[ sqr::return#2 ]
[ init_dist_screen::yds#0 ]
[ init_dist_screen::x2#0 ]
[ sqr::return#3 ]
[ init_dist_screen::xds#0 ]
[ init_dist_screen::ds#0 ]
[ sqrt::val#0 ]
[ sqrt::return#2 ]
[ init_dist_screen::d#0 ]
[ bsearch16u::key#0 ]
[ bsearch16u::return#3 ]
[ sqrt::found#0 ]
[ sqrt::$3 ]
[ sqrt::$1 ]
[ sqrt::return#0 ]
[ bsearch16u::$6 ]
[ bsearch16u::$16 ]
[ bsearch16u::pivot#0 ]
[ bsearch16u::result#0 ]
[ sqr::$0 ]
[ sqr::return#0 ]
[ SQUARES#1 ]
[ init_squares::$3 ]
[ init_squares::$4 ]
[ malloc::mem#0 ]
[ processChars::$67 ]
[ processChars::$68 ]
[ processChars::$69 ]
[ processChars::$70 ]
[ processChars::$37 ]
[ processChars::processing#0 ]
[ processChars::bitmask#0 ]
[ processChars::xpos#0 ]
[ processChars::$11 ]
[ processChars::$12 ]
[ processChars::$17 ]
[ processChars::$14 ]
[ processChars::$15 ]
[ processChars::ypos#0 ]
[ processChars::$25 ]
[ processChars::$26 ]
[ processChars::xchar#0 ]
[ processChars::$38 ]
[ processChars::$30 ]
[ processChars::ychar#0 ]
[ processChars::$39 ]
[ processChars::$33 ]
Allocated zp ZP_WORD:2 [ main::src#2 main::src#1 ]
Allocated zp ZP_WORD:4 [ main::dst#2 main::dst#1 main::dst#0 ]
Allocated zp ZP_BYTE:6 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:7 [ startProcessing::freeIdx#6 startProcessing::freeIdx#7 ]
Allocated zp ZP_BYTE:8 [ startProcessing::freeIdx#2 startProcessing::freeIdx#8 startProcessing::i#2 startProcessing::i#1 ]
Allocated zp ZP_WORD:9 [ startProcessing::chargenData#2 startProcessing::chargenData#0 startProcessing::chargenData#1 ]
Allocated zp ZP_WORD:11 [ startProcessing::spriteData#2 startProcessing::spriteData#0 startProcessing::spriteData#1 ]
Allocated zp ZP_BYTE:13 [ startProcessing::i1#2 startProcessing::i1#1 ]
Allocated zp ZP_WORD:14 [ getCharToProcess::screen_line#4 getCharToProcess::screen_line#0 getCharToProcess::screen_line#1 ]
Allocated zp ZP_WORD:16 [ getCharToProcess::dist_line#6 getCharToProcess::dist_line#0 getCharToProcess::dist_line#1 ]
Allocated zp ZP_BYTE:18 [ getCharToProcess::y#7 getCharToProcess::y#1 ]
Allocated zp ZP_BYTE:19 [ getCharToProcess::x#2 getCharToProcess::x#1 ]
Allocated zp ZP_BYTE:20 [ getCharToProcess::closest_dist#2 getCharToProcess::closest_dist#8 getCharToProcess::closest_dist#10 getCharToProcess::closest_dist#12 ]
Allocated zp ZP_BYTE:21 [ getCharToProcess::closest_x#7 getCharToProcess::closest_x#9 getCharToProcess::return_x#1 getCharToProcess::return_x#7 ]
Allocated zp ZP_BYTE:22 [ getCharToProcess::closest_y#7 getCharToProcess::closest_y#9 getCharToProcess::return_y#1 getCharToProcess::return_y#7 ]
Allocated zp ZP_BYTE:23 [ getCharToProcess::return_dist#1 getCharToProcess::return_dist#5 getCharToProcess::return_dist#6 getCharToProcess::dist#0 ]
Allocated zp ZP_WORD:24 [ initSprites::sp#2 initSprites::sp#1 ]
Allocated zp ZP_BYTE:26 [ initSprites::i#2 initSprites::i#1 ]
Allocated zp ZP_BYTE:27 [ init_dist_screen::y#10 init_dist_screen::y#1 ]
Allocated zp ZP_WORD:28 [ init_dist_screen::screen_topline#10 init_dist_screen::screen_topline#1 init_dist_screen::screen#0 ]
Allocated zp ZP_WORD:30 [ init_dist_screen::screen_bottomline#10 init_dist_screen::screen_bottomline#1 init_dist_screen::screen_bottomline#0 ]
Allocated zp ZP_BYTE:32 [ init_dist_screen::yd#0 init_dist_screen::$7 init_dist_screen::$5 ]
Allocated zp ZP_BYTE:33 [ init_dist_screen::x#2 init_dist_screen::x#1 ]
Allocated zp ZP_BYTE:34 [ init_dist_screen::xb#2 init_dist_screen::xb#1 ]
Allocated zp ZP_BYTE:35 [ init_dist_screen::xd#0 init_dist_screen::$15 init_dist_screen::$13 ]
Allocated zp ZP_WORD:36 [ bsearch16u::return#1 bsearch16u::return#6 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::items#0 ]
Allocated zp ZP_BYTE:38 [ bsearch16u::num#5 bsearch16u::num#1 bsearch16u::num#3 bsearch16u::num#0 ]
Allocated zp ZP_BYTE:39 [ sqr::val#2 sqr::val#0 sqr::val#1 ]
Allocated zp ZP_WORD:40 [ init_squares::sqr#2 init_squares::sqr#1 ]
Allocated zp ZP_WORD:42 [ init_squares::squares#2 init_squares::squares#1 init_squares::squares#0 ]
Allocated zp ZP_BYTE:44 [ init_squares::i#2 init_squares::i#1 ]
Allocated zp ZP_WORD:45 [ heap_head#12 heap_head#1 ]
Allocated zp ZP_WORD:47 [ malloc::size#3 ]
Allocated zp ZP_BYTE:49 [ processChars::i#10 processChars::i#1 ]
Allocated zp ZP_BYTE:50 [ processChars::numActive#10 processChars::numActive#3 processChars::numActive#1 ]
Allocated zp ZP_WORD:51 [ SCREEN_COPY#0 ]
Allocated zp ZP_WORD:53 [ SCREEN_DIST#0 ]
Allocated zp ZP_BYTE:55 [ main::$26 ]
Allocated zp ZP_BYTE:56 [ main::$27 ]
Allocated zp ZP_BYTE:57 [ main::$28 ]
Allocated zp ZP_BYTE:58 [ main::$29 ]
Allocated zp ZP_BYTE:59 [ main::$16 ]
Allocated zp ZP_BYTE:60 [ getCharToProcess::return_x#0 ]
Allocated zp ZP_BYTE:61 [ getCharToProcess::return_y#0 ]
Allocated zp ZP_BYTE:62 [ getCharToProcess::return_dist#0 ]
Allocated zp ZP_BYTE:63 [ main::center_x#0 ]
Allocated zp ZP_BYTE:64 [ main::center_y#0 ]
Allocated zp ZP_BYTE:65 [ main::center_dist#0 ]
Allocated zp ZP_BYTE:66 [ startProcessing::center_x#0 ]
Allocated zp ZP_BYTE:67 [ startProcessing::center_y#0 ]
Allocated zp ZP_BYTE:68 [ startProcessing::$42 ]
Allocated zp ZP_BYTE:69 [ startProcessing::$43 ]
Allocated zp ZP_BYTE:70 [ startProcessing::$44 ]
Allocated zp ZP_BYTE:71 [ startProcessing::$45 ]
Allocated zp ZP_BYTE:72 [ startProcessing::$30 ]
Allocated zp ZP_WORD:73 [ startProcessing::$0 ]
Allocated zp ZP_WORD:75 [ startProcessing::$47 ]
Allocated zp ZP_WORD:77 [ startProcessing::$48 ]
Allocated zp ZP_WORD:79 [ startProcessing::$1 ]
Allocated zp ZP_WORD:81 [ startProcessing::offset#0 ]
Allocated zp ZP_WORD:83 [ startProcessing::colPtr#0 ]
Allocated zp ZP_BYTE:85 [ startProcessing::spriteCol#0 ]
Allocated zp ZP_WORD:86 [ startProcessing::screenPtr#0 ]
Allocated zp ZP_WORD:88 [ startProcessing::$5 ]
Allocated zp ZP_WORD:90 [ startProcessing::$6 ]
Allocated zp ZP_BYTE:92 [ startProcessing::ch#0 ]
Allocated zp ZP_WORD:93 [ startProcessing::$8 ]
Allocated zp ZP_WORD:95 [ startProcessing::$9 ]
Allocated zp ZP_WORD:97 [ startProcessing::$11 ]
Allocated zp ZP_WORD:99 [ startProcessing::$12 ]
Allocated zp ZP_WORD:101 [ startProcessing::$13 ]
Allocated zp ZP_WORD:103 [ startProcessing::spriteX#0 ]
Allocated zp ZP_WORD:105 [ startProcessing::$15 ]
Allocated zp ZP_WORD:107 [ startProcessing::$16 ]
Allocated zp ZP_WORD:109 [ startProcessing::$17 ]
Allocated zp ZP_WORD:111 [ startProcessing::spriteY#0 ]
Allocated zp ZP_BYTE:113 [ startProcessing::spritePtr#0 ]
Allocated zp ZP_BYTE:114 [ startProcessing::$22 ]
Allocated zp ZP_WORD:115 [ startProcessing::$23 ]
Allocated zp ZP_BYTE:117 [ startProcessing::$50 ]
Allocated zp ZP_BYTE:118 [ startProcessing::$51 ]
Allocated zp ZP_BYTE:119 [ startProcessing::$52 ]
Allocated zp ZP_BYTE:120 [ startProcessing::$53 ]
Allocated zp ZP_BYTE:121 [ startProcessing::$31 ]
Allocated zp ZP_WORD:122 [ getCharToProcess::$8 ]
Allocated zp ZP_WORD:124 [ getCharToProcess::$12 ]
Allocated zp ZP_WORD:126 [ getCharToProcess::$13 ]
Allocated zp ZP_WORD:128 [ getCharToProcess::$9 ]
Allocated zp ZP_WORD:130 [ getCharToProcess::$10 ]
Allocated zp ZP_BYTE:132 [ init_dist_screen::y2#0 ]
Allocated zp ZP_WORD:133 [ sqr::return#2 ]
Allocated zp ZP_WORD:135 [ init_dist_screen::yds#0 ]
Allocated zp ZP_BYTE:137 [ init_dist_screen::x2#0 ]
Allocated zp ZP_WORD:138 [ sqr::return#3 ]
Allocated zp ZP_WORD:140 [ init_dist_screen::xds#0 ]
Allocated zp ZP_WORD:142 [ init_dist_screen::ds#0 ]
Allocated zp ZP_WORD:144 [ sqrt::val#0 ]
Allocated zp ZP_BYTE:146 [ sqrt::return#2 ]
Allocated zp ZP_BYTE:147 [ init_dist_screen::d#0 ]
Allocated zp ZP_WORD:148 [ bsearch16u::key#0 ]
Allocated zp ZP_WORD:150 [ bsearch16u::return#3 ]
Allocated zp ZP_WORD:152 [ sqrt::found#0 ]
Allocated zp ZP_WORD:154 [ sqrt::$3 ]
Allocated zp ZP_WORD:156 [ sqrt::$1 ]
Allocated zp ZP_BYTE:158 [ sqrt::return#0 ]
Allocated zp ZP_BYTE:159 [ bsearch16u::$6 ]
Allocated zp ZP_BYTE:160 [ bsearch16u::$16 ]
Allocated zp ZP_WORD:161 [ bsearch16u::pivot#0 ]
Allocated zp ZP_WORD:163 [ bsearch16u::result#0 ]
Allocated zp ZP_BYTE:165 [ sqr::$0 ]
Allocated zp ZP_WORD:166 [ sqr::return#0 ]
Allocated zp ZP_WORD:168 [ SQUARES#1 ]
Allocated zp ZP_BYTE:170 [ init_squares::$3 ]
Allocated zp ZP_BYTE:171 [ init_squares::$4 ]
Allocated zp ZP_WORD:172 [ malloc::mem#0 ]
Allocated zp ZP_BYTE:174 [ processChars::$67 ]
Allocated zp ZP_BYTE:175 [ processChars::$68 ]
Allocated zp ZP_BYTE:176 [ processChars::$69 ]
Allocated zp ZP_BYTE:177 [ processChars::$70 ]
Allocated zp ZP_BYTE:178 [ processChars::$37 ]
Allocated zp ZP_WORD:179 [ processChars::processing#0 ]
Allocated zp ZP_BYTE:181 [ processChars::bitmask#0 ]
Allocated zp ZP_WORD:182 [ processChars::xpos#0 ]
Allocated zp ZP_BYTE:184 [ processChars::$11 ]
Allocated zp ZP_BYTE:185 [ processChars::$12 ]
Allocated zp ZP_BYTE:186 [ processChars::$17 ]
Allocated zp ZP_BYTE:187 [ processChars::$14 ]
Allocated zp ZP_WORD:188 [ processChars::$15 ]
Allocated zp ZP_BYTE:190 [ processChars::ypos#0 ]
Allocated zp ZP_WORD:191 [ processChars::$25 ]
Allocated zp ZP_BYTE:193 [ processChars::$26 ]
Allocated zp ZP_BYTE:194 [ processChars::xchar#0 ]
Allocated zp ZP_BYTE:195 [ processChars::$38 ]
Allocated zp ZP_BYTE:196 [ processChars::$30 ]
Allocated zp ZP_BYTE:197 [ processChars::ychar#0 ]
Allocated zp ZP_BYTE:198 [ processChars::$39 ]
Allocated zp ZP_BYTE:199 [ processChars::$33 ]

INITIAL ASM
//SEG0 File Comments
// Clears start screen throwing around the letters (by turning them into sprites)
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const SIZEOF_WORD = 2
  .const STATUS_FREE = 0
  .const STATUS_NEW = 1
  .const STATUS_PROCESSING = 2
  .const OFFSET_STRUCT_PROCESSINGSPRITE_Y = 2
  .const OFFSET_STRUCT_PROCESSINGSPRITE_VX = 4
  .const OFFSET_STRUCT_PROCESSINGSPRITE_VY = 6
  .const OFFSET_STRUCT_PROCESSINGSPRITE_ID = 8
  .const OFFSET_STRUCT_PROCESSINGSPRITE_PTR = 9
  .const OFFSET_STRUCT_PROCESSINGSPRITE_COL = $a
  .const OFFSET_STRUCT_PROCESSINGSPRITE_STATUS = $b
  .const OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR = $c
  // Start of the heap used by malloc()
  .label HEAP_START = $c000
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = $35
  // RAM in $A000, $E000 CHAR ROM in $D000
  .const PROCPORT_RAM_CHARROM = $31
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  // Positions of the border (in sprite positions)
  .const BORDER_XPOS_LEFT = $18
  .const BORDER_XPOS_RIGHT = $158
  .const BORDER_YPOS_TOP = $32
  .const BORDER_YPOS_BOTTOM = $fa
  // The offset of the sprite pointers from the screen start address
  .const SPRITE_PTRS = $3f8
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_MC = $d01c
  .label SPRITES_EXPAND_X = $d01d
  .label SPRITES_COLS = $d027
  .label VIC_CONTROL = $d011
  // VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  // VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  // Bits for the IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // Color Ram
  .label COLS = $d800
  // CIA#1 Interrupt Status & Control Register
  .label CIA1_INTERRUPT = $dc0d
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // The vector used when the HARDWARE serves IRQ interrupts
  .label HARDWARE_IRQ = $fffe
  .const LIGHT_BLUE = $e
  // Address of the screen
  .label SCREEN = $400
  // Sprite data for the animating sprites
  .label SPRITE_DATA = $2000
  // Max number of chars processed at once
  .const NUM_PROCESSING = 8
  // Distance value meaning not found
  .const NOT_FOUND = $ff
  .const NUM_SQUARES = $30
  .const RASTER_IRQ_TOP = $30
  .const RASTER_IRQ_MIDDLE = $ff
  .const XPOS_RIGHTMOST = BORDER_XPOS_RIGHT<<4
  .const YPOS_BOTTOMMOST = BORDER_YPOS_BOTTOM<<4
  .const XPOS_LEFTMOST = BORDER_XPOS_LEFT-8<<4
  .const YPOS_TOPMOST = BORDER_YPOS_TOP-8<<4
  .label heap_head = $2d
  .label SQUARES = $a8
  .label SCREEN_COPY = $33
  .label SCREEN_DIST = $35
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call malloc 
//SEG7 [254] phi from @1 to malloc [phi:@1->malloc]
malloc_from_b1:
//SEG8 [254] phi (word) malloc::size#3 = (word) $3e8 [phi:@1->malloc#0] -- vwuz1=vwuc1 
  lda #<$3e8
  sta malloc.size
  lda #>$3e8
  sta malloc.size+1
//SEG9 [254] phi (byte*) heap_head#12 = (const byte*) HEAP_START#0 [phi:@1->malloc#1] -- pbuz1=pbuc1 
  lda #<HEAP_START
  sta heap_head
  lda #>HEAP_START
  sta heap_head+1
  jsr malloc
  jmp b3
//SEG10 @3
b3:
//SEG11 [3] (void*) SCREEN_COPY#0 ← (void*)(byte*) malloc::mem#0 -- pvoz1=pvoz2 
  lda malloc.mem
  sta SCREEN_COPY
  lda malloc.mem+1
  sta SCREEN_COPY+1
//SEG12 [4] call malloc 
//SEG13 [254] phi from @3 to malloc [phi:@3->malloc]
malloc_from_b3:
//SEG14 [254] phi (word) malloc::size#3 = (word) $3e8 [phi:@3->malloc#0] -- vwuz1=vwuc1 
  lda #<$3e8
  sta malloc.size
  lda #>$3e8
  sta malloc.size+1
//SEG15 [254] phi (byte*) heap_head#12 = (byte*) heap_head#1 [phi:@3->malloc#1] -- register_copy 
  jsr malloc
  jmp b4
//SEG16 @4
b4:
//SEG17 [5] (void*) SCREEN_DIST#0 ← (void*)(byte*) malloc::mem#0 -- pvoz1=pvoz2 
  lda malloc.mem
  sta SCREEN_DIST
  lda malloc.mem+1
  sta SCREEN_DIST+1
//SEG18 [6] phi from @4 to @2 [phi:@4->@2]
b2_from_b4:
  jmp b2
//SEG19 @2
b2:
//SEG20 [7] call main 
  jsr main
//SEG21 [8] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
//SEG22 @end
bend:
//SEG23 main
main: {
    .label _16 = $3b
    .label dst = 4
    .label src = 2
    .label i = 6
    .label center_x = $3f
    .label center_y = $40
    .label center_dist = $41
    .label _26 = $37
    .label _27 = $38
    .label _28 = $39
    .label _29 = $3a
  //SEG24 [9] (byte*) init_dist_screen::screen#0 ← (byte*)(void*) SCREEN_DIST#0 -- pbuz1=pbuz2 
    lda SCREEN_DIST
    sta init_dist_screen.screen
    lda SCREEN_DIST+1
    sta init_dist_screen.screen+1
  //SEG25 [10] call init_dist_screen 
  //SEG26 [169] phi from main to init_dist_screen [phi:main->init_dist_screen]
  init_dist_screen_from_main:
    jsr init_dist_screen
    jmp b8
  //SEG27 main::@8
  b8:
  //SEG28 [11] (byte*) main::dst#0 ← (byte*)(void*) SCREEN_COPY#0 -- pbuz1=pbuz2 
    lda SCREEN_COPY
    sta dst
    lda SCREEN_COPY+1
    sta dst+1
  //SEG29 [12] phi from main::@8 to main::@1 [phi:main::@8->main::@1]
  b1_from_b8:
  //SEG30 [12] phi (byte*) main::dst#2 = (byte*) main::dst#0 [phi:main::@8->main::@1#0] -- register_copy 
  //SEG31 [12] phi (byte*) main::src#2 = (const byte*) SCREEN#0 [phi:main::@8->main::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta src
    lda #>SCREEN
    sta src+1
    jmp b1
  // Copy screen to screen copy
  //SEG32 [12] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG33 [12] phi (byte*) main::dst#2 = (byte*) main::dst#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG34 [12] phi (byte*) main::src#2 = (byte*) main::src#1 [phi:main::@1->main::@1#1] -- register_copy 
    jmp b1
  //SEG35 main::@1
  b1:
  //SEG36 [13] *((byte*) main::dst#2) ← *((byte*) main::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
  //SEG37 [14] (byte*) main::src#1 ← ++ (byte*) main::src#2 -- pbuz1=_inc_pbuz1 
    inc src
    bne !+
    inc src+1
  !:
  //SEG38 [15] (byte*) main::dst#1 ← ++ (byte*) main::dst#2 -- pbuz1=_inc_pbuz1 
    inc dst
    bne !+
    inc dst+1
  !:
  //SEG39 [16] if((byte*) main::src#1!=(const byte*) SCREEN#0+(word) $3e8) goto main::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda src+1
    cmp #>SCREEN+$3e8
    bne b1_from_b1
    lda src
    cmp #<SCREEN+$3e8
    bne b1_from_b1
  //SEG40 [17] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG41 [17] phi (byte) main::i#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b2
  // Init processing array
  //SEG42 [17] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  b2_from_b2:
  //SEG43 [17] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@2#0] -- register_copy 
    jmp b2
  //SEG44 main::@2
  b2:
  //SEG45 [18] (byte) main::$26 ← (byte) main::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta _26
  //SEG46 [19] (byte) main::$27 ← (byte) main::$26 + (byte) main::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda _26
    clc
    adc i
    sta _27
  //SEG47 [20] (byte) main::$28 ← (byte) main::$27 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda _27
    asl
    sta _28
  //SEG48 [21] (byte) main::$29 ← (byte) main::$28 + (byte) main::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda _28
    clc
    adc i
    sta _29
  //SEG49 [22] (byte~) main::$16 ← (byte) main::$29 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda _29
    asl
    sta _16
  //SEG50 [23] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) main::$16) ← (byte) 0 -- pwuc1_derefidx_vbuz1=vbuc2 
    lda _16
    ldx #0
    tay
    txa
    sta PROCESSING,y
  //SEG51 [24] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y + (byte~) main::$16) ← (byte) 0 -- pwuc1_derefidx_vbuz1=vbuc2 
    lda _16
    ldx #0
    tay
    txa
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_Y,y
  //SEG52 [25] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX + (byte~) main::$16) ← (byte) 0 -- pwuc1_derefidx_vbuz1=vbuc2 
    lda _16
    ldx #0
    tay
    txa
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_VX,y
  //SEG53 [26] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY + (byte~) main::$16) ← (byte) 0 -- pwuc1_derefidx_vbuz1=vbuc2 
    lda _16
    ldx #0
    tay
    txa
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_VY,y
  //SEG54 [27] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID + (byte~) main::$16) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy _16
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_ID,y
  //SEG55 [28] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR + (byte~) main::$16) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy _16
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_PTR,y
  //SEG56 [29] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL + (byte~) main::$16) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy _16
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_COL,y
  //SEG57 [30] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) main::$16) ← (const byte) STATUS_FREE -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #STATUS_FREE
    ldy _16
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_STATUS,y
  //SEG58 [31] *((byte**)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR + (byte~) main::$16) ← (byte*) 0 -- pptc1_derefidx_vbuz1=pbuc2 
    ldy _16
    lda #<0
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR,y
    lda #>0
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR+1,y
  //SEG59 [32] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG60 [33] if((byte) main::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_PROCESSING-1+1
    cmp i
    bne b2_from_b2
  //SEG61 [34] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
  //SEG62 main::@3
  b3:
  //SEG63 [35] call initSprites 
  //SEG64 [156] phi from main::@3 to initSprites [phi:main::@3->initSprites]
  initSprites_from_b3:
    jsr initSprites
  //SEG65 [36] phi from main::@3 to main::@9 [phi:main::@3->main::@9]
  b9_from_b3:
    jmp b9
  //SEG66 main::@9
  b9:
  //SEG67 [37] call setupRasterIrq 
    jsr setupRasterIrq
  //SEG68 [38] phi from main::@5 main::@9 to main::@4 [phi:main::@5/main::@9->main::@4]
  b4_from_b5:
  b4_from_b9:
    jmp b4
  // Main loop
  //SEG69 main::@4
  b4:
  //SEG70 [39] call getCharToProcess 
    jsr getCharToProcess
  //SEG71 [40] (byte) getCharToProcess::return_x#0 ← (byte) getCharToProcess::return_x#1 -- vbuz1=vbuz2 
    lda getCharToProcess.return_x_1
    sta getCharToProcess.return_x
  //SEG72 [41] (byte) getCharToProcess::return_y#0 ← (byte) getCharToProcess::return_y#1 -- vbuz1=vbuz2 
    lda getCharToProcess.return_y_1
    sta getCharToProcess.return_y
  //SEG73 [42] (byte) getCharToProcess::return_dist#0 ← (byte) getCharToProcess::return_dist#1 -- vbuz1=vbuz2 
    lda getCharToProcess.return_dist_1
    sta getCharToProcess.return_dist
    jmp b10
  //SEG74 main::@10
  b10:
  //SEG75 [43] (byte) main::center_x#0 ← (byte) getCharToProcess::return_x#0 -- vbuz1=vbuz2 
    lda getCharToProcess.return_x
    sta center_x
  //SEG76 [44] (byte) main::center_y#0 ← (byte) getCharToProcess::return_y#0 -- vbuz1=vbuz2 
    lda getCharToProcess.return_y
    sta center_y
  //SEG77 [45] (byte) main::center_dist#0 ← (byte) getCharToProcess::return_dist#0 -- vbuz1=vbuz2 
    lda getCharToProcess.return_dist
    sta center_dist
  //SEG78 [46] if((byte) main::center_dist#0!=(const byte) NOT_FOUND#0) goto main::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #NOT_FOUND
    cmp center_dist
    bne b5
    jmp b6
  //SEG79 main::@6
  b6:
  //SEG80 [47] *((const byte*) SCREEN#0+(word) $3e7) ← (byte) '.' -- _deref_pbuc1=vbuc2 
    lda #'.'
    sta SCREEN+$3e7
    jmp b7
  //SEG81 main::@7
  b7:
  //SEG82 [48] *((const byte*) COLS#0+(word) $3e7) ← ++ *((const byte*) COLS#0+(word) $3e7) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc COLS+$3e7
    jmp b7
  //SEG83 main::@5
  b5:
  //SEG84 [49] (byte) startProcessing::center_x#0 ← (byte) main::center_x#0 -- vbuz1=vbuz2 
    lda center_x
    sta startProcessing.center_x
  //SEG85 [50] (byte) startProcessing::center_y#0 ← (byte) main::center_y#0 -- vbuz1=vbuz2 
    lda center_y
    sta startProcessing.center_y
  //SEG86 [51] call startProcessing 
  //SEG87 [52] phi from main::@5 to startProcessing [phi:main::@5->startProcessing]
  startProcessing_from_b5:
    jsr startProcessing
    jmp b4_from_b5
}
//SEG88 startProcessing
// Start processing a char - by inserting it into the PROCESSING array
// startProcessing(byte zeropage($42) center_x, byte zeropage($43) center_y)
startProcessing: {
    .label _0 = $49
    .label _1 = $4f
    .label _5 = $58
    .label _6 = $5a
    .label _8 = $5d
    .label _9 = $5f
    .label _11 = $61
    .label _12 = $63
    .label _13 = $65
    .label _15 = $69
    .label _16 = $6b
    .label _17 = $6d
    .label _22 = $72
    .label _23 = $73
    .label _30 = $48
    .label _31 = $79
    .label center_x = $42
    .label center_y = $43
    .label i = 8
    .label offset = $51
    .label colPtr = $53
    .label spriteCol = $55
    .label screenPtr = $56
    .label spriteData = $b
    .label ch = $5c
    .label chargenData = 9
    .label i1 = $d
    .label spriteX = $67
    .label spriteY = $6f
    .label spritePtr = $71
    .label freeIdx = 8
    .label freeIdx_6 = 7
    .label _42 = $44
    .label _43 = $45
    .label _44 = $46
    .label _45 = $47
    .label _47 = $4b
    .label _48 = $4d
    .label _50 = $75
    .label _51 = $76
    .label _52 = $77
    .label _53 = $78
    .label freeIdx_7 = 7
  //SEG89 [53] phi from startProcessing to startProcessing::@1 [phi:startProcessing->startProcessing::@1]
  b1_from_startProcessing:
  //SEG90 [53] phi (byte) startProcessing::freeIdx#6 = (byte) $ff [phi:startProcessing->startProcessing::@1#0] -- vbuz1=vbuc1 
    lda #$ff
    sta freeIdx_6
    jmp b1
  //SEG91 startProcessing::@1
  b1:
  //SEG92 [54] phi from startProcessing::@1 to startProcessing::@2 [phi:startProcessing::@1->startProcessing::@2]
  b2_from_b1:
  //SEG93 [54] phi (byte) startProcessing::i#2 = (byte) 0 [phi:startProcessing::@1->startProcessing::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b2
  //SEG94 [54] phi from startProcessing::@3 to startProcessing::@2 [phi:startProcessing::@3->startProcessing::@2]
  b2_from_b3:
  //SEG95 [54] phi (byte) startProcessing::i#2 = (byte) startProcessing::i#1 [phi:startProcessing::@3->startProcessing::@2#0] -- register_copy 
    jmp b2
  //SEG96 startProcessing::@2
  b2:
  //SEG97 [55] (byte) startProcessing::$42 ← (byte) startProcessing::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta _42
  //SEG98 [56] (byte) startProcessing::$43 ← (byte) startProcessing::$42 + (byte) startProcessing::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda _42
    clc
    adc i
    sta _43
  //SEG99 [57] (byte) startProcessing::$44 ← (byte) startProcessing::$43 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda _43
    asl
    sta _44
  //SEG100 [58] (byte) startProcessing::$45 ← (byte) startProcessing::$44 + (byte) startProcessing::i#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda _44
    clc
    adc i
    sta _45
  //SEG101 [59] (byte~) startProcessing::$30 ← (byte) startProcessing::$45 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda _45
    asl
    sta _30
  //SEG102 [60] if(*((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) startProcessing::$30)!=(const byte) STATUS_FREE) goto startProcessing::@3 -- pbuc1_derefidx_vbuz1_neq_vbuc2_then_la1 
    lda #STATUS_FREE
    ldy _30
    cmp PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_STATUS,y
    bne b3
  //SEG103 [61] phi from startProcessing::@2 startProcessing::@9 to startProcessing::@4 [phi:startProcessing::@2/startProcessing::@9->startProcessing::@4]
  b4_from_b2:
  b4_from_b9:
  //SEG104 [61] phi (byte) startProcessing::freeIdx#2 = (byte) startProcessing::i#2 [phi:startProcessing::@2/startProcessing::@9->startProcessing::@4#0] -- register_copy 
    jmp b4
  //SEG105 startProcessing::@4
  b4:
  //SEG106 [62] if((byte) startProcessing::freeIdx#2==(byte) $ff) goto startProcessing::@8 -- vbuz1_eq_vbuc1_then_la1 
    lda #$ff
    cmp freeIdx
    beq b8
    jmp b5
  //SEG107 startProcessing::@5
  b5:
  //SEG108 [63] (word~) startProcessing::$0 ← (word)(byte) startProcessing::center_y#0 -- vwuz1=_word_vbuz2 
    lda center_y
    sta _0
    lda #0
    sta _0+1
  //SEG109 [64] (word) startProcessing::$47 ← (word~) startProcessing::$0 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda _0
    asl
    sta _47
    lda _0+1
    rol
    sta _47+1
    asl _47
    rol _47+1
  //SEG110 [65] (word) startProcessing::$48 ← (word) startProcessing::$47 + (word~) startProcessing::$0 -- vwuz1=vwuz2_plus_vwuz3 
    lda _47
    clc
    adc _0
    sta _48
    lda _47+1
    adc _0+1
    sta _48+1
  //SEG111 [66] (word~) startProcessing::$1 ← (word) startProcessing::$48 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda _48
    asl
    sta _1
    lda _48+1
    rol
    sta _1+1
    asl _1
    rol _1+1
    asl _1
    rol _1+1
  //SEG112 [67] (word) startProcessing::offset#0 ← (word~) startProcessing::$1 + (byte) startProcessing::center_x#0 -- vwuz1=vwuz2_plus_vbuz3 
    lda center_x
    clc
    adc _1
    sta offset
    lda #0
    adc _1+1
    sta offset+1
  //SEG113 [68] (byte*) startProcessing::colPtr#0 ← (const byte*) COLS#0 + (word) startProcessing::offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda offset
    clc
    adc #<COLS
    sta colPtr
    lda offset+1
    adc #>COLS
    sta colPtr+1
  //SEG114 [69] (byte) startProcessing::spriteCol#0 ← *((byte*) startProcessing::colPtr#0) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (colPtr),y
    sta spriteCol
  //SEG115 [70] (byte*) startProcessing::screenPtr#0 ← (const byte*) SCREEN#0 + (word) startProcessing::offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda offset
    clc
    adc #<SCREEN
    sta screenPtr
    lda offset+1
    adc #>SCREEN
    sta screenPtr+1
  //SEG116 [71] (word~) startProcessing::$5 ← (word)(byte) startProcessing::freeIdx#2 -- vwuz1=_word_vbuz2 
    lda freeIdx
    sta _5
    lda #0
    sta _5+1
  //SEG117 [72] (word~) startProcessing::$6 ← (word~) startProcessing::$5 << (byte) 6 -- vwuz1=vwuz2_rol_6 
    lda _5
    asl
    sta _6
    lda _5+1
    rol
    sta _6+1
    asl _6
    rol _6+1
    asl _6
    rol _6+1
    asl _6
    rol _6+1
    asl _6
    rol _6+1
    asl _6
    rol _6+1
  //SEG118 [73] (byte*) startProcessing::spriteData#0 ← (const byte*) SPRITE_DATA#0 + (word~) startProcessing::$6 -- pbuz1=pbuc1_plus_vwuz2 
    lda _6
    clc
    adc #<SPRITE_DATA
    sta spriteData
    lda _6+1
    adc #>SPRITE_DATA
    sta spriteData+1
  //SEG119 [74] (byte) startProcessing::ch#0 ← *((byte*) startProcessing::screenPtr#0) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (screenPtr),y
    sta ch
  //SEG120 [75] (word~) startProcessing::$8 ← (word)(byte) startProcessing::ch#0 -- vwuz1=_word_vbuz2 
    lda ch
    sta _8
    lda #0
    sta _8+1
  //SEG121 [76] (word~) startProcessing::$9 ← (word~) startProcessing::$8 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda _8
    asl
    sta _9
    lda _8+1
    rol
    sta _9+1
    asl _9
    rol _9+1
    asl _9
    rol _9+1
  //SEG122 [77] (byte*) startProcessing::chargenData#0 ← (const byte*) CHARGEN#0 + (word~) startProcessing::$9 -- pbuz1=pbuc1_plus_vwuz2 
    lda _9
    clc
    adc #<CHARGEN
    sta chargenData
    lda _9+1
    adc #>CHARGEN
    sta chargenData+1
  //SEG123 asm { sei  }
    sei
  //SEG124 [79] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
  //SEG125 [80] phi from startProcessing::@5 to startProcessing::@6 [phi:startProcessing::@5->startProcessing::@6]
  b6_from_b5:
  //SEG126 [80] phi (byte) startProcessing::i1#2 = (byte) 0 [phi:startProcessing::@5->startProcessing::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta i1
  //SEG127 [80] phi (byte*) startProcessing::spriteData#2 = (byte*) startProcessing::spriteData#0 [phi:startProcessing::@5->startProcessing::@6#1] -- register_copy 
  //SEG128 [80] phi (byte*) startProcessing::chargenData#2 = (byte*) startProcessing::chargenData#0 [phi:startProcessing::@5->startProcessing::@6#2] -- register_copy 
    jmp b6
  //SEG129 [80] phi from startProcessing::@6 to startProcessing::@6 [phi:startProcessing::@6->startProcessing::@6]
  b6_from_b6:
  //SEG130 [80] phi (byte) startProcessing::i1#2 = (byte) startProcessing::i1#1 [phi:startProcessing::@6->startProcessing::@6#0] -- register_copy 
  //SEG131 [80] phi (byte*) startProcessing::spriteData#2 = (byte*) startProcessing::spriteData#1 [phi:startProcessing::@6->startProcessing::@6#1] -- register_copy 
  //SEG132 [80] phi (byte*) startProcessing::chargenData#2 = (byte*) startProcessing::chargenData#1 [phi:startProcessing::@6->startProcessing::@6#2] -- register_copy 
    jmp b6
  //SEG133 startProcessing::@6
  b6:
  //SEG134 [81] *((byte*) startProcessing::spriteData#2) ← *((byte*) startProcessing::chargenData#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (chargenData),y
    ldy #0
    sta (spriteData),y
  //SEG135 [82] (byte*) startProcessing::spriteData#1 ← (byte*) startProcessing::spriteData#2 + (byte) 3 -- pbuz1=pbuz1_plus_vbuc1 
    lda #3
    clc
    adc spriteData
    sta spriteData
    bcc !+
    inc spriteData+1
  !:
  //SEG136 [83] (byte*) startProcessing::chargenData#1 ← ++ (byte*) startProcessing::chargenData#2 -- pbuz1=_inc_pbuz1 
    inc chargenData
    bne !+
    inc chargenData+1
  !:
  //SEG137 [84] (byte) startProcessing::i1#1 ← ++ (byte) startProcessing::i1#2 -- vbuz1=_inc_vbuz1 
    inc i1
  //SEG138 [85] if((byte) startProcessing::i1#1!=(byte) 8) goto startProcessing::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp i1
    bne b6_from_b6
    jmp b7
  //SEG139 startProcessing::@7
  b7:
  //SEG140 [86] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG141 asm { cli  }
    cli
  //SEG142 [88] (word~) startProcessing::$11 ← (word)(byte) startProcessing::center_x#0 -- vwuz1=_word_vbuz2 
    lda center_x
    sta _11
    lda #0
    sta _11+1
  //SEG143 [89] (word~) startProcessing::$12 ← (word~) startProcessing::$11 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda _11
    asl
    sta _12
    lda _11+1
    rol
    sta _12+1
    asl _12
    rol _12+1
    asl _12
    rol _12+1
  //SEG144 [90] (word~) startProcessing::$13 ← (const byte) BORDER_XPOS_LEFT#0 + (word~) startProcessing::$12 -- vwuz1=vbuc1_plus_vwuz2 
    lda #BORDER_XPOS_LEFT
    clc
    adc _12
    sta _13
    lda #0
    adc _12+1
    sta _13+1
  //SEG145 [91] (word) startProcessing::spriteX#0 ← (word~) startProcessing::$13 << (byte) 4 -- vwuz1=vwuz2_rol_4 
    lda _13
    asl
    sta spriteX
    lda _13+1
    rol
    sta spriteX+1
    asl spriteX
    rol spriteX+1
    asl spriteX
    rol spriteX+1
    asl spriteX
    rol spriteX+1
  //SEG146 [92] (word~) startProcessing::$15 ← (word)(byte) startProcessing::center_y#0 -- vwuz1=_word_vbuz2 
    lda center_y
    sta _15
    lda #0
    sta _15+1
  //SEG147 [93] (word~) startProcessing::$16 ← (word~) startProcessing::$15 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda _15
    asl
    sta _16
    lda _15+1
    rol
    sta _16+1
    asl _16
    rol _16+1
    asl _16
    rol _16+1
  //SEG148 [94] (word~) startProcessing::$17 ← (const byte) BORDER_YPOS_TOP#0 + (word~) startProcessing::$16 -- vwuz1=vbuc1_plus_vwuz2 
    lda #BORDER_YPOS_TOP
    clc
    adc _16
    sta _17
    lda #0
    adc _16+1
    sta _17+1
  //SEG149 [95] (word) startProcessing::spriteY#0 ← (word~) startProcessing::$17 << (byte) 4 -- vwuz1=vwuz2_rol_4 
    lda _17
    asl
    sta spriteY
    lda _17+1
    rol
    sta spriteY+1
    asl spriteY
    rol spriteY+1
    asl spriteY
    rol spriteY+1
    asl spriteY
    rol spriteY+1
  //SEG150 [96] (byte) startProcessing::spritePtr#0 ← (byte)(const byte*) SPRITE_DATA#0/(byte) $40 + (byte) startProcessing::freeIdx#2 -- vbuz1=vbuc1_plus_vbuz2 
    lax freeIdx
    axs #-[SPRITE_DATA/$40]
    stx spritePtr
  //SEG151 [97] (byte~) startProcessing::$22 ← (byte) startProcessing::freeIdx#2 << (byte) 3 -- vbuz1=vbuz2_rol_3 
    lda freeIdx
    asl
    asl
    asl
    sta _22
  //SEG152 [98] (word~) startProcessing::$23 ← (word)(byte~) startProcessing::$22 -- vwuz1=_word_vbuz2 
    lda _22
    sta _23
    lda #0
    sta _23+1
  //SEG153 [99] (byte) startProcessing::$50 ← (byte) startProcessing::freeIdx#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda freeIdx
    asl
    sta _50
  //SEG154 [100] (byte) startProcessing::$51 ← (byte) startProcessing::$50 + (byte) startProcessing::freeIdx#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda _50
    clc
    adc freeIdx
    sta _51
  //SEG155 [101] (byte) startProcessing::$52 ← (byte) startProcessing::$51 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda _51
    asl
    sta _52
  //SEG156 [102] (byte) startProcessing::$53 ← (byte) startProcessing::$52 + (byte) startProcessing::freeIdx#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda _52
    clc
    adc freeIdx
    sta _53
  //SEG157 [103] (byte~) startProcessing::$31 ← (byte) startProcessing::$53 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda _53
    asl
    sta _31
  //SEG158 [104] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) startProcessing::$31) ← (word) startProcessing::spriteX#0 -- pwuc1_derefidx_vbuz1=vwuz2 
    ldy _31
    lda spriteX
    sta PROCESSING,y
    lda spriteX+1
    sta PROCESSING+1,y
  //SEG159 [105] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y + (byte~) startProcessing::$31) ← (word) startProcessing::spriteY#0 -- pwuc1_derefidx_vbuz1=vwuz2 
    ldy _31
    lda spriteY
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_Y,y
    lda spriteY+1
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_Y+1,y
  //SEG160 [106] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX + (byte~) startProcessing::$31) ← (word~) startProcessing::$23 -- pwuc1_derefidx_vbuz1=vwuz2 
    ldy _31
    lda _23
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_VX,y
    lda _23+1
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_VX+1,y
  //SEG161 [107] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY + (byte~) startProcessing::$31) ← (byte) $3c -- pwuc1_derefidx_vbuz1=vbuc2 
    lda _31
    ldx #$3c
    tay
    txa
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_VY,y
  //SEG162 [108] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID + (byte~) startProcessing::$31) ← (byte) startProcessing::freeIdx#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda freeIdx
    ldy _31
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_ID,y
  //SEG163 [109] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR + (byte~) startProcessing::$31) ← (byte) startProcessing::spritePtr#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda spritePtr
    ldy _31
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_PTR,y
  //SEG164 [110] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL + (byte~) startProcessing::$31) ← (byte) startProcessing::spriteCol#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda spriteCol
    ldy _31
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_COL,y
  //SEG165 [111] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) startProcessing::$31) ← (const byte) STATUS_NEW -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #STATUS_NEW
    ldy _31
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_STATUS,y
  //SEG166 [112] *((byte**)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR + (byte~) startProcessing::$31) ← (byte*) startProcessing::screenPtr#0 -- pptc1_derefidx_vbuz1=pbuz2 
    ldy _31
    lda screenPtr
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR,y
    lda screenPtr+1
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR+1,y
    jmp breturn
  //SEG167 startProcessing::@return
  breturn:
  //SEG168 [113] return 
    rts
  //SEG169 startProcessing::@8
  b8:
  //SEG170 [114] (byte~) startProcessing::freeIdx#7 ← (byte) startProcessing::freeIdx#2 -- vbuz1=vbuz2 
    lda freeIdx
    sta freeIdx_7
  //SEG171 [53] phi from startProcessing::@8 to startProcessing::@1 [phi:startProcessing::@8->startProcessing::@1]
  b1_from_b8:
  //SEG172 [53] phi (byte) startProcessing::freeIdx#6 = (byte~) startProcessing::freeIdx#7 [phi:startProcessing::@8->startProcessing::@1#0] -- register_copy 
    jmp b1
  //SEG173 startProcessing::@3
  b3:
  //SEG174 [115] (byte) startProcessing::i#1 ← ++ (byte) startProcessing::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG175 [116] if((byte) startProcessing::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto startProcessing::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_PROCESSING-1+1
    cmp i
    bne b2_from_b3
    jmp b9
  //SEG176 startProcessing::@9
  b9:
  //SEG177 [117] (byte~) startProcessing::freeIdx#8 ← (byte) startProcessing::freeIdx#6 -- vbuz1=vbuz2 
    lda freeIdx_6
    sta freeIdx
    jmp b4_from_b9
}
//SEG178 getCharToProcess
// Find the non-space char closest to the center of the screen
// If no non-space char is found the distance will be 0xffff
getCharToProcess: {
    .label _8 = $7a
    .label _9 = $80
    .label _10 = $82
    .label return_x = $3c
    .label return_y = $3d
    .label return_dist = $3e
    .label screen_line = $e
    .label dist_line = $10
    .label x = $13
    .label dist = $17
    .label y = $12
    .label return_x_1 = $15
    .label return_y_1 = $16
    .label return_dist_1 = $17
    .label closest_dist = $14
    .label closest_x = $15
    .label closest_y = $16
    .label _12 = $7c
    .label _13 = $7e
    .label return_dist_5 = $17
    .label return_dist_6 = $17
    .label return_x_7 = $15
    .label return_y_7 = $16
  //SEG179 [118] (byte*) getCharToProcess::screen_line#0 ← (byte*)(void*) SCREEN_COPY#0 -- pbuz1=pbuz2 
    lda SCREEN_COPY
    sta screen_line
    lda SCREEN_COPY+1
    sta screen_line+1
  //SEG180 [119] (byte*) getCharToProcess::dist_line#0 ← (byte*)(void*) SCREEN_DIST#0 -- pbuz1=pbuz2 
    lda SCREEN_DIST
    sta dist_line
    lda SCREEN_DIST+1
    sta dist_line+1
  //SEG181 [120] phi from getCharToProcess to getCharToProcess::@1 [phi:getCharToProcess->getCharToProcess::@1]
  b1_from_getCharToProcess:
  //SEG182 [120] phi (byte) getCharToProcess::closest_y#9 = (byte) 0 [phi:getCharToProcess->getCharToProcess::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta closest_y
  //SEG183 [120] phi (byte) getCharToProcess::closest_x#9 = (byte) 0 [phi:getCharToProcess->getCharToProcess::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta closest_x
  //SEG184 [120] phi (byte) getCharToProcess::y#7 = (byte) 0 [phi:getCharToProcess->getCharToProcess::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG185 [120] phi (byte) getCharToProcess::closest_dist#8 = (const byte) NOT_FOUND#0 [phi:getCharToProcess->getCharToProcess::@1#3] -- vbuz1=vbuc1 
    lda #NOT_FOUND
    sta closest_dist
  //SEG186 [120] phi (byte*) getCharToProcess::dist_line#6 = (byte*) getCharToProcess::dist_line#0 [phi:getCharToProcess->getCharToProcess::@1#4] -- register_copy 
  //SEG187 [120] phi (byte*) getCharToProcess::screen_line#4 = (byte*) getCharToProcess::screen_line#0 [phi:getCharToProcess->getCharToProcess::@1#5] -- register_copy 
    jmp b1
  //SEG188 getCharToProcess::@1
  b1:
  //SEG189 [121] phi from getCharToProcess::@1 to getCharToProcess::@2 [phi:getCharToProcess::@1->getCharToProcess::@2]
  b2_from_b1:
  //SEG190 [121] phi (byte) getCharToProcess::closest_y#7 = (byte) getCharToProcess::closest_y#9 [phi:getCharToProcess::@1->getCharToProcess::@2#0] -- register_copy 
  //SEG191 [121] phi (byte) getCharToProcess::closest_x#7 = (byte) getCharToProcess::closest_x#9 [phi:getCharToProcess::@1->getCharToProcess::@2#1] -- register_copy 
  //SEG192 [121] phi (byte) getCharToProcess::closest_dist#2 = (byte) getCharToProcess::closest_dist#8 [phi:getCharToProcess::@1->getCharToProcess::@2#2] -- register_copy 
  //SEG193 [121] phi (byte) getCharToProcess::x#2 = (byte) 0 [phi:getCharToProcess::@1->getCharToProcess::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta x
    jmp b2
  //SEG194 getCharToProcess::@2
  b2:
  //SEG195 [122] if(*((byte*) getCharToProcess::screen_line#4 + (byte) getCharToProcess::x#2)==(byte) ' ') goto getCharToProcess::@11 -- pbuz1_derefidx_vbuz2_eq_vbuc1_then_la1 
    ldy x
    lda (screen_line),y
    cmp #' '
    beq b11
    jmp b4
  //SEG196 getCharToProcess::@4
  b4:
  //SEG197 [123] (byte) getCharToProcess::dist#0 ← *((byte*) getCharToProcess::dist_line#6 + (byte) getCharToProcess::x#2) -- vbuz1=pbuz2_derefidx_vbuz3 
    ldy x
    lda (dist_line),y
    sta dist
  //SEG198 [124] if((byte) getCharToProcess::dist#0>=(byte) getCharToProcess::closest_dist#2) goto getCharToProcess::@12 -- vbuz1_ge_vbuz2_then_la1 
    lda dist
    cmp closest_dist
    bcs b12
    jmp b5
  //SEG199 getCharToProcess::@5
  b5:
  //SEG200 [125] (byte~) getCharToProcess::return_x#7 ← (byte) getCharToProcess::x#2 -- vbuz1=vbuz2 
    lda x
    sta return_x_7
  //SEG201 [126] (byte~) getCharToProcess::return_y#7 ← (byte) getCharToProcess::y#7 -- vbuz1=vbuz2 
    lda y
    sta return_y_7
  //SEG202 [127] phi from getCharToProcess::@11 getCharToProcess::@12 getCharToProcess::@5 to getCharToProcess::@3 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3]
  b3_from_b11:
  b3_from_b12:
  b3_from_b5:
  //SEG203 [127] phi (byte) getCharToProcess::return_y#1 = (byte) getCharToProcess::closest_y#7 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3#0] -- register_copy 
  //SEG204 [127] phi (byte) getCharToProcess::return_x#1 = (byte) getCharToProcess::closest_x#7 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3#1] -- register_copy 
  //SEG205 [127] phi (byte) getCharToProcess::return_dist#1 = (byte~) getCharToProcess::return_dist#5 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3#2] -- register_copy 
    jmp b3
  //SEG206 getCharToProcess::@3
  b3:
  //SEG207 [128] (byte) getCharToProcess::x#1 ← ++ (byte) getCharToProcess::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG208 [129] if((byte) getCharToProcess::x#1!=(byte) $28) goto getCharToProcess::@10 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp x
    bne b10
    jmp b6
  //SEG209 getCharToProcess::@6
  b6:
  //SEG210 [130] (byte*) getCharToProcess::screen_line#1 ← (byte*) getCharToProcess::screen_line#4 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc screen_line
    sta screen_line
    bcc !+
    inc screen_line+1
  !:
  //SEG211 [131] (byte*) getCharToProcess::dist_line#1 ← (byte*) getCharToProcess::dist_line#6 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc dist_line
    sta dist_line
    bcc !+
    inc dist_line+1
  !:
  //SEG212 [132] (byte) getCharToProcess::y#1 ← ++ (byte) getCharToProcess::y#7 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG213 [133] if((byte) getCharToProcess::y#1!=(byte) $19) goto getCharToProcess::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp y
    bne b9
    jmp b7
  //SEG214 getCharToProcess::@7
  b7:
  //SEG215 [134] if((byte) getCharToProcess::return_dist#1==(const byte) NOT_FOUND#0) goto getCharToProcess::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #NOT_FOUND
    cmp return_dist_1
    beq breturn
    jmp b8
  //SEG216 getCharToProcess::@8
  b8:
  //SEG217 [135] (word~) getCharToProcess::$8 ← (word)(byte) getCharToProcess::return_y#1 -- vwuz1=_word_vbuz2 
    lda return_y_1
    sta _8
    lda #0
    sta _8+1
  //SEG218 [136] (word) getCharToProcess::$12 ← (word~) getCharToProcess::$8 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda _8
    asl
    sta _12
    lda _8+1
    rol
    sta _12+1
    asl _12
    rol _12+1
  //SEG219 [137] (word) getCharToProcess::$13 ← (word) getCharToProcess::$12 + (word~) getCharToProcess::$8 -- vwuz1=vwuz2_plus_vwuz3 
    lda _12
    clc
    adc _8
    sta _13
    lda _12+1
    adc _8+1
    sta _13+1
  //SEG220 [138] (word~) getCharToProcess::$9 ← (word) getCharToProcess::$13 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda _13
    asl
    sta _9
    lda _13+1
    rol
    sta _9+1
    asl _9
    rol _9+1
    asl _9
    rol _9+1
  //SEG221 [139] (byte*~) getCharToProcess::$10 ← (byte*)(void*) SCREEN_COPY#0 + (word~) getCharToProcess::$9 -- pbuz1=pbuz2_plus_vwuz3 
    lda SCREEN_COPY
    clc
    adc _9
    sta _10
    lda SCREEN_COPY+1
    adc _9+1
    sta _10+1
  //SEG222 [140] *((byte*~) getCharToProcess::$10 + (byte) getCharToProcess::return_x#1) ← (byte) ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    // clear the found char on the screen copy
    lda #' '
    ldy return_x_1
    sta (_10),y
    jmp breturn
  //SEG223 getCharToProcess::@return
  breturn:
  //SEG224 [141] return 
    rts
  //SEG225 getCharToProcess::@9
  b9:
  //SEG226 [142] (byte~) getCharToProcess::closest_dist#10 ← (byte) getCharToProcess::return_dist#1 -- vbuz1=vbuz2 
    lda return_dist_1
    sta closest_dist
  //SEG227 [120] phi from getCharToProcess::@9 to getCharToProcess::@1 [phi:getCharToProcess::@9->getCharToProcess::@1]
  b1_from_b9:
  //SEG228 [120] phi (byte) getCharToProcess::closest_y#9 = (byte) getCharToProcess::return_y#1 [phi:getCharToProcess::@9->getCharToProcess::@1#0] -- register_copy 
  //SEG229 [120] phi (byte) getCharToProcess::closest_x#9 = (byte) getCharToProcess::return_x#1 [phi:getCharToProcess::@9->getCharToProcess::@1#1] -- register_copy 
  //SEG230 [120] phi (byte) getCharToProcess::y#7 = (byte) getCharToProcess::y#1 [phi:getCharToProcess::@9->getCharToProcess::@1#2] -- register_copy 
  //SEG231 [120] phi (byte) getCharToProcess::closest_dist#8 = (byte~) getCharToProcess::closest_dist#10 [phi:getCharToProcess::@9->getCharToProcess::@1#3] -- register_copy 
  //SEG232 [120] phi (byte*) getCharToProcess::dist_line#6 = (byte*) getCharToProcess::dist_line#1 [phi:getCharToProcess::@9->getCharToProcess::@1#4] -- register_copy 
  //SEG233 [120] phi (byte*) getCharToProcess::screen_line#4 = (byte*) getCharToProcess::screen_line#1 [phi:getCharToProcess::@9->getCharToProcess::@1#5] -- register_copy 
    jmp b1
  //SEG234 getCharToProcess::@10
  b10:
  //SEG235 [143] (byte~) getCharToProcess::closest_dist#12 ← (byte) getCharToProcess::return_dist#1 -- vbuz1=vbuz2 
    lda return_dist_1
    sta closest_dist
  //SEG236 [121] phi from getCharToProcess::@10 to getCharToProcess::@2 [phi:getCharToProcess::@10->getCharToProcess::@2]
  b2_from_b10:
  //SEG237 [121] phi (byte) getCharToProcess::closest_y#7 = (byte) getCharToProcess::return_y#1 [phi:getCharToProcess::@10->getCharToProcess::@2#0] -- register_copy 
  //SEG238 [121] phi (byte) getCharToProcess::closest_x#7 = (byte) getCharToProcess::return_x#1 [phi:getCharToProcess::@10->getCharToProcess::@2#1] -- register_copy 
  //SEG239 [121] phi (byte) getCharToProcess::closest_dist#2 = (byte~) getCharToProcess::closest_dist#12 [phi:getCharToProcess::@10->getCharToProcess::@2#2] -- register_copy 
  //SEG240 [121] phi (byte) getCharToProcess::x#2 = (byte) getCharToProcess::x#1 [phi:getCharToProcess::@10->getCharToProcess::@2#3] -- register_copy 
    jmp b2
  //SEG241 getCharToProcess::@12
  b12:
  //SEG242 [144] (byte~) getCharToProcess::return_dist#6 ← (byte) getCharToProcess::closest_dist#2 -- vbuz1=vbuz2 
    lda closest_dist
    sta return_dist_6
    jmp b3_from_b12
  //SEG243 getCharToProcess::@11
  b11:
  //SEG244 [145] (byte~) getCharToProcess::return_dist#5 ← (byte) getCharToProcess::closest_dist#2 -- vbuz1=vbuz2 
    lda closest_dist
    sta return_dist_5
    jmp b3_from_b11
}
//SEG245 setupRasterIrq
// Setup Raster IRQ
setupRasterIrq: {
    .label irqRoutine = irqTop
  //SEG246 asm { sei  }
    sei
  //SEG247 [147] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG248 [148] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG249 [149] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
    jmp b1
  //SEG250 setupRasterIrq::@1
  b1:
  //SEG251 [150] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
    jmp b2
  //SEG252 setupRasterIrq::@2
  b2:
  //SEG253 [151] *((const byte*) RASTER#0) ← <(const byte) RASTER_IRQ_TOP#0 -- _deref_pbuc1=vbuc2 
    lda #RASTER_IRQ_TOP
    sta RASTER
  //SEG254 [152] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
  //SEG255 [153] *((const void()**) HARDWARE_IRQ#0) ← (const void()*) setupRasterIrq::irqRoutine#0 -- _deref_pptc1=pprc2 
    // Set the IRQ routine
    lda #<irqRoutine
    sta HARDWARE_IRQ
    lda #>irqRoutine
    sta HARDWARE_IRQ+1
  //SEG256 asm { cli  }
    cli
    jmp breturn
  //SEG257 setupRasterIrq::@return
  breturn:
  //SEG258 [155] return 
    rts
}
//SEG259 initSprites
// Initialize sprites
initSprites: {
    .label sp = $18
    .label i = $1a
  //SEG260 [157] phi from initSprites to initSprites::@1 [phi:initSprites->initSprites::@1]
  b1_from_initSprites:
  //SEG261 [157] phi (byte*) initSprites::sp#2 = (const byte*) SPRITE_DATA#0 [phi:initSprites->initSprites::@1#0] -- pbuz1=pbuc1 
    lda #<SPRITE_DATA
    sta sp
    lda #>SPRITE_DATA
    sta sp+1
    jmp b1
  // Clear sprite data
  //SEG262 [157] phi from initSprites::@1 to initSprites::@1 [phi:initSprites::@1->initSprites::@1]
  b1_from_b1:
  //SEG263 [157] phi (byte*) initSprites::sp#2 = (byte*) initSprites::sp#1 [phi:initSprites::@1->initSprites::@1#0] -- register_copy 
    jmp b1
  //SEG264 initSprites::@1
  b1:
  //SEG265 [158] *((byte*) initSprites::sp#2) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (sp),y
  //SEG266 [159] (byte*) initSprites::sp#1 ← ++ (byte*) initSprites::sp#2 -- pbuz1=_inc_pbuz1 
    inc sp
    bne !+
    inc sp+1
  !:
  //SEG267 [160] if((byte*) initSprites::sp#1<(const byte*) SPRITE_DATA#0+(const byte) NUM_PROCESSING#0*(byte) $40) goto initSprites::@1 -- pbuz1_lt_pbuc1_then_la1 
    lda sp+1
    cmp #>SPRITE_DATA+NUM_PROCESSING*$40
    bcc b1_from_b1
    bne !+
    lda sp
    cmp #<SPRITE_DATA+NUM_PROCESSING*$40
    bcc b1_from_b1
  !:
  //SEG268 [161] phi from initSprites::@1 to initSprites::@2 [phi:initSprites::@1->initSprites::@2]
  b2_from_b1:
  //SEG269 [161] phi (byte) initSprites::i#2 = (byte) 0 [phi:initSprites::@1->initSprites::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b2
  // Initialize sprite registers
  //SEG270 [161] phi from initSprites::@2 to initSprites::@2 [phi:initSprites::@2->initSprites::@2]
  b2_from_b2:
  //SEG271 [161] phi (byte) initSprites::i#2 = (byte) initSprites::i#1 [phi:initSprites::@2->initSprites::@2#0] -- register_copy 
    jmp b2
  //SEG272 initSprites::@2
  b2:
  //SEG273 [162] *((const byte*) SPRITES_COLS#0 + (byte) initSprites::i#2) ← (const byte) LIGHT_BLUE#0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #LIGHT_BLUE
    ldy i
    sta SPRITES_COLS,y
  //SEG274 [163] (byte) initSprites::i#1 ← ++ (byte) initSprites::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG275 [164] if((byte) initSprites::i#1!=(byte) 8) goto initSprites::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp i
    bne b2_from_b2
    jmp b3
  //SEG276 initSprites::@3
  b3:
  //SEG277 [165] *((const byte*) SPRITES_MC#0) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_MC
  //SEG278 [166] *((const byte*) SPRITES_EXPAND_X#0) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_EXPAND_X
  //SEG279 [167] *((const byte*) SPRITES_EXPAND_Y#0) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_EXPAND_Y
    jmp breturn
  //SEG280 initSprites::@return
  breturn:
  //SEG281 [168] return 
    rts
}
//SEG282 init_dist_screen
// Populates 1000 bytes (a screen) with values representing the distance to the center.
// The actual value stored is distance*2 to increase precision
// init_dist_screen(byte* zeropage($1c) screen)
init_dist_screen: {
    .label _5 = $20
    .label _7 = $20
    .label _13 = $23
    .label _15 = $23
    .label screen = $1c
    .label screen_bottomline = $1e
    .label y2 = $84
    .label yd = $20
    .label yds = $87
    .label x2 = $89
    .label xd = $23
    .label xds = $8c
    .label ds = $8e
    .label d = $93
    .label x = $21
    .label xb = $22
    .label screen_topline = $1c
    .label y = $1b
  //SEG283 [170] call init_squares 
  //SEG284 [241] phi from init_dist_screen to init_squares [phi:init_dist_screen->init_squares]
  init_squares_from_init_dist_screen:
    jsr init_squares
    jmp b10
  //SEG285 init_dist_screen::@10
  b10:
  //SEG286 [171] (byte*) init_dist_screen::screen_bottomline#0 ← (byte*) init_dist_screen::screen#0 + (word)(number) $28*(number) $18 -- pbuz1=pbuz2_plus_vwuc1 
    lda screen
    clc
    adc #<$28*$18
    sta screen_bottomline
    lda screen+1
    adc #>$28*$18
    sta screen_bottomline+1
  //SEG287 [172] phi from init_dist_screen::@10 to init_dist_screen::@1 [phi:init_dist_screen::@10->init_dist_screen::@1]
  b1_from_b10:
  //SEG288 [172] phi (byte*) init_dist_screen::screen_bottomline#10 = (byte*) init_dist_screen::screen_bottomline#0 [phi:init_dist_screen::@10->init_dist_screen::@1#0] -- register_copy 
  //SEG289 [172] phi (byte*) init_dist_screen::screen_topline#10 = (byte*) init_dist_screen::screen#0 [phi:init_dist_screen::@10->init_dist_screen::@1#1] -- register_copy 
  //SEG290 [172] phi (byte) init_dist_screen::y#10 = (byte) 0 [phi:init_dist_screen::@10->init_dist_screen::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta y
    jmp b1
  //SEG291 [172] phi from init_dist_screen::@9 to init_dist_screen::@1 [phi:init_dist_screen::@9->init_dist_screen::@1]
  b1_from_b9:
  //SEG292 [172] phi (byte*) init_dist_screen::screen_bottomline#10 = (byte*) init_dist_screen::screen_bottomline#1 [phi:init_dist_screen::@9->init_dist_screen::@1#0] -- register_copy 
  //SEG293 [172] phi (byte*) init_dist_screen::screen_topline#10 = (byte*) init_dist_screen::screen_topline#1 [phi:init_dist_screen::@9->init_dist_screen::@1#1] -- register_copy 
  //SEG294 [172] phi (byte) init_dist_screen::y#10 = (byte) init_dist_screen::y#1 [phi:init_dist_screen::@9->init_dist_screen::@1#2] -- register_copy 
    jmp b1
  //SEG295 init_dist_screen::@1
  b1:
  //SEG296 [173] (byte) init_dist_screen::y2#0 ← (byte) init_dist_screen::y#10 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda y
    asl
    sta y2
  //SEG297 [174] if((byte) init_dist_screen::y2#0>=(byte) $18) goto init_dist_screen::@2 -- vbuz1_ge_vbuc1_then_la1 
    lda y2
    cmp #$18
    bcs b2
    jmp b3
  //SEG298 init_dist_screen::@3
  b3:
  //SEG299 [175] (byte~) init_dist_screen::$5 ← (byte) $18 - (byte) init_dist_screen::y2#0 -- vbuz1=vbuc1_minus_vbuz2 
    lda #$18
    sec
    sbc y2
    sta _5
  //SEG300 [176] phi from init_dist_screen::@2 init_dist_screen::@3 to init_dist_screen::@4 [phi:init_dist_screen::@2/init_dist_screen::@3->init_dist_screen::@4]
  b4_from_b2:
  b4_from_b3:
  //SEG301 [176] phi (byte) init_dist_screen::yd#0 = (byte~) init_dist_screen::$7 [phi:init_dist_screen::@2/init_dist_screen::@3->init_dist_screen::@4#0] -- register_copy 
    jmp b4
  //SEG302 init_dist_screen::@4
  b4:
  //SEG303 [177] (byte) sqr::val#0 ← (byte) init_dist_screen::yd#0 -- vbuz1=vbuz2 
    lda yd
    sta sqr.val
  //SEG304 [178] call sqr 
  //SEG305 [237] phi from init_dist_screen::@4 to sqr [phi:init_dist_screen::@4->sqr]
  sqr_from_b4:
  //SEG306 [237] phi (byte) sqr::val#2 = (byte) sqr::val#0 [phi:init_dist_screen::@4->sqr#0] -- register_copy 
    jsr sqr
  //SEG307 [179] (word) sqr::return#2 ← (word) sqr::return#0 -- vwuz1=vwuz2 
    lda sqr.return
    sta sqr.return_2
    lda sqr.return+1
    sta sqr.return_2+1
    jmp b11
  //SEG308 init_dist_screen::@11
  b11:
  //SEG309 [180] (word) init_dist_screen::yds#0 ← (word) sqr::return#2 -- vwuz1=vwuz2 
    lda sqr.return_2
    sta yds
    lda sqr.return_2+1
    sta yds+1
  //SEG310 [181] phi from init_dist_screen::@11 to init_dist_screen::@5 [phi:init_dist_screen::@11->init_dist_screen::@5]
  b5_from_b11:
  //SEG311 [181] phi (byte) init_dist_screen::xb#2 = (byte) $27 [phi:init_dist_screen::@11->init_dist_screen::@5#0] -- vbuz1=vbuc1 
    lda #$27
    sta xb
  //SEG312 [181] phi (byte) init_dist_screen::x#2 = (byte) 0 [phi:init_dist_screen::@11->init_dist_screen::@5#1] -- vbuz1=vbuc1 
    lda #0
    sta x
    jmp b5
  //SEG313 [181] phi from init_dist_screen::@13 to init_dist_screen::@5 [phi:init_dist_screen::@13->init_dist_screen::@5]
  b5_from_b13:
  //SEG314 [181] phi (byte) init_dist_screen::xb#2 = (byte) init_dist_screen::xb#1 [phi:init_dist_screen::@13->init_dist_screen::@5#0] -- register_copy 
  //SEG315 [181] phi (byte) init_dist_screen::x#2 = (byte) init_dist_screen::x#1 [phi:init_dist_screen::@13->init_dist_screen::@5#1] -- register_copy 
    jmp b5
  //SEG316 init_dist_screen::@5
  b5:
  //SEG317 [182] (byte) init_dist_screen::x2#0 ← (byte) init_dist_screen::x#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda x
    asl
    sta x2
  //SEG318 [183] if((byte) init_dist_screen::x2#0>=(byte) $27) goto init_dist_screen::@6 -- vbuz1_ge_vbuc1_then_la1 
    lda x2
    cmp #$27
    bcs b6
    jmp b7
  //SEG319 init_dist_screen::@7
  b7:
  //SEG320 [184] (byte~) init_dist_screen::$13 ← (byte) $27 - (byte) init_dist_screen::x2#0 -- vbuz1=vbuc1_minus_vbuz2 
    lda #$27
    sec
    sbc x2
    sta _13
  //SEG321 [185] phi from init_dist_screen::@6 init_dist_screen::@7 to init_dist_screen::@8 [phi:init_dist_screen::@6/init_dist_screen::@7->init_dist_screen::@8]
  b8_from_b6:
  b8_from_b7:
  //SEG322 [185] phi (byte) init_dist_screen::xd#0 = (byte~) init_dist_screen::$15 [phi:init_dist_screen::@6/init_dist_screen::@7->init_dist_screen::@8#0] -- register_copy 
    jmp b8
  //SEG323 init_dist_screen::@8
  b8:
  //SEG324 [186] (byte) sqr::val#1 ← (byte) init_dist_screen::xd#0 -- vbuz1=vbuz2 
    lda xd
    sta sqr.val
  //SEG325 [187] call sqr 
  //SEG326 [237] phi from init_dist_screen::@8 to sqr [phi:init_dist_screen::@8->sqr]
  sqr_from_b8:
  //SEG327 [237] phi (byte) sqr::val#2 = (byte) sqr::val#1 [phi:init_dist_screen::@8->sqr#0] -- register_copy 
    jsr sqr
  //SEG328 [188] (word) sqr::return#3 ← (word) sqr::return#0 -- vwuz1=vwuz2 
    lda sqr.return
    sta sqr.return_3
    lda sqr.return+1
    sta sqr.return_3+1
    jmp b12
  //SEG329 init_dist_screen::@12
  b12:
  //SEG330 [189] (word) init_dist_screen::xds#0 ← (word) sqr::return#3 -- vwuz1=vwuz2 
    lda sqr.return_3
    sta xds
    lda sqr.return_3+1
    sta xds+1
  //SEG331 [190] (word) init_dist_screen::ds#0 ← (word) init_dist_screen::xds#0 + (word) init_dist_screen::yds#0 -- vwuz1=vwuz2_plus_vwuz3 
    lda xds
    clc
    adc yds
    sta ds
    lda xds+1
    adc yds+1
    sta ds+1
  //SEG332 [191] (word) sqrt::val#0 ← (word) init_dist_screen::ds#0 -- vwuz1=vwuz2 
    lda ds
    sta sqrt.val
    lda ds+1
    sta sqrt.val+1
  //SEG333 [192] call sqrt 
    jsr sqrt
  //SEG334 [193] (byte) sqrt::return#2 ← (byte) sqrt::return#0 -- vbuz1=vbuz2 
    lda sqrt.return
    sta sqrt.return_2
    jmp b13
  //SEG335 init_dist_screen::@13
  b13:
  //SEG336 [194] (byte) init_dist_screen::d#0 ← (byte) sqrt::return#2 -- vbuz1=vbuz2 
    lda sqrt.return_2
    sta d
  //SEG337 [195] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda d
    ldy x
    sta (screen_topline),y
  //SEG338 [196] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda d
    ldy x
    sta (screen_bottomline),y
  //SEG339 [197] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda d
    ldy xb
    sta (screen_topline),y
  //SEG340 [198] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda d
    ldy xb
    sta (screen_bottomline),y
  //SEG341 [199] (byte) init_dist_screen::x#1 ← ++ (byte) init_dist_screen::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG342 [200] (byte) init_dist_screen::xb#1 ← -- (byte) init_dist_screen::xb#2 -- vbuz1=_dec_vbuz1 
    dec xb
  //SEG343 [201] if((byte) init_dist_screen::x#1<(byte) $13+(byte) 1) goto init_dist_screen::@5 -- vbuz1_lt_vbuc1_then_la1 
    lda x
    cmp #$13+1
    bcc b5_from_b13
    jmp b9
  //SEG344 init_dist_screen::@9
  b9:
  //SEG345 [202] (byte*) init_dist_screen::screen_topline#1 ← (byte*) init_dist_screen::screen_topline#10 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc screen_topline
    sta screen_topline
    bcc !+
    inc screen_topline+1
  !:
  //SEG346 [203] (byte*) init_dist_screen::screen_bottomline#1 ← (byte*) init_dist_screen::screen_bottomline#10 - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda screen_bottomline
    sec
    sbc #<$28
    sta screen_bottomline
    lda screen_bottomline+1
    sbc #>$28
    sta screen_bottomline+1
  //SEG347 [204] (byte) init_dist_screen::y#1 ← ++ (byte) init_dist_screen::y#10 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG348 [205] if((byte) init_dist_screen::y#1!=(byte) $d) goto init_dist_screen::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$d
    cmp y
    bne b1_from_b9
    jmp breturn
  //SEG349 init_dist_screen::@return
  breturn:
  //SEG350 [206] return 
    rts
  //SEG351 init_dist_screen::@6
  b6:
  //SEG352 [207] (byte~) init_dist_screen::$15 ← (byte) init_dist_screen::x2#0 - (byte) $27 -- vbuz1=vbuz2_minus_vbuc1 
    lax x2
    axs #$27
    stx _15
    jmp b8_from_b6
  //SEG353 init_dist_screen::@2
  b2:
  //SEG354 [208] (byte~) init_dist_screen::$7 ← (byte) init_dist_screen::y2#0 - (byte) $18 -- vbuz1=vbuz2_minus_vbuc1 
    lax y2
    axs #$18
    stx _7
    jmp b4_from_b2
}
//SEG355 sqrt
// Find the (integer) square root of a word value
// If the square is not an integer then it returns the largest integer N where N*N <= val
// Uses a table of squares that must be initialized by calling init_squares()
// sqrt(word zeropage($90) val)
sqrt: {
    .label _1 = $9c
    .label _3 = $9a
    .label found = $98
    .label return = $9e
    .label val = $90
    .label return_2 = $92
  //SEG356 [209] (word) bsearch16u::key#0 ← (word) sqrt::val#0 -- vwuz1=vwuz2 
    lda val
    sta bsearch16u.key
    lda val+1
    sta bsearch16u.key+1
  //SEG357 [210] (word*) bsearch16u::items#1 ← (word*)(void*) SQUARES#1 -- pwuz1=pwuz2 
    lda SQUARES
    sta bsearch16u.items
    lda SQUARES+1
    sta bsearch16u.items+1
  //SEG358 [211] call bsearch16u 
  //SEG359 [218] phi from sqrt to bsearch16u [phi:sqrt->bsearch16u]
  bsearch16u_from_sqrt:
    jsr bsearch16u
  //SEG360 [212] (word*) bsearch16u::return#3 ← (word*) bsearch16u::return#1 -- pwuz1=pwuz2 
    lda bsearch16u.return
    sta bsearch16u.return_3
    lda bsearch16u.return+1
    sta bsearch16u.return_3+1
    jmp b1
  //SEG361 sqrt::@1
  b1:
  //SEG362 [213] (word*) sqrt::found#0 ← (word*) bsearch16u::return#3 -- pwuz1=pwuz2 
    lda bsearch16u.return_3
    sta found
    lda bsearch16u.return_3+1
    sta found+1
  //SEG363 [214] (word~) sqrt::$3 ← (word*) sqrt::found#0 - (word*)(void*) SQUARES#1 -- vwuz1=pwuz2_minus_pwuz3 
    lda found
    sec
    sbc SQUARES
    sta _3
    lda found+1
    sbc SQUARES+1
    sta _3+1
  //SEG364 [215] (word~) sqrt::$1 ← (word~) sqrt::$3 >> (byte) 1 -- vwuz1=vwuz2_ror_1 
    lda _3+1
    lsr
    sta _1+1
    lda _3
    ror
    sta _1
  //SEG365 [216] (byte) sqrt::return#0 ← (byte)(word~) sqrt::$1 -- vbuz1=_byte_vwuz2 
    lda _1
    sta return
    jmp breturn
  //SEG366 sqrt::@return
  breturn:
  //SEG367 [217] return 
    rts
}
//SEG368 bsearch16u
// Searches an array of nitems unsigned words, the initial member of which is pointed to by base, for a member that matches the value key.
// - key - The value to look for
// - items - Pointer to the start of the array to search in
// - num - The number of items in the array
// Returns pointer to an entry in the array that matches the search key
// bsearch16u(word zeropage($94) key, word* zeropage($24) items, byte zeropage($26) num)
bsearch16u: {
    .label _2 = $24
    .label _6 = $9f
    .label _16 = $a0
    .label pivot = $a1
    .label result = $a3
    .label return = $24
    .label num = $26
    .label items = $24
    .label key = $94
    .label return_3 = $96
  //SEG369 [219] phi from bsearch16u to bsearch16u::@3 [phi:bsearch16u->bsearch16u::@3]
  b3_from_bsearch16u:
  //SEG370 [219] phi (word*) bsearch16u::items#2 = (word*) bsearch16u::items#1 [phi:bsearch16u->bsearch16u::@3#0] -- register_copy 
  //SEG371 [219] phi (byte) bsearch16u::num#3 = (const byte) NUM_SQUARES#3 [phi:bsearch16u->bsearch16u::@3#1] -- vbuz1=vbuc1 
    lda #NUM_SQUARES
    sta num
    jmp b3
  //SEG372 bsearch16u::@3
  b3:
  //SEG373 [220] if((byte) bsearch16u::num#3>(byte) 0) goto bsearch16u::@4 -- vbuz1_gt_0_then_la1 
    lda num
    bne b4
    jmp b5
  //SEG374 bsearch16u::@5
  b5:
  //SEG375 [221] if(*((word*) bsearch16u::items#2)<=(word) bsearch16u::key#0) goto bsearch16u::@2 -- _deref_pwuz1_le_vwuz2_then_la1 
    ldy #1
    lda (items),y
    cmp key+1
    bne !+
    dey
    lda (items),y
    cmp key
    beq b2_from_b5
  !:
    bcc b2_from_b5
    jmp b1
  //SEG376 bsearch16u::@1
  b1:
  //SEG377 [222] (word*~) bsearch16u::$2 ← (word*) bsearch16u::items#2 - (byte) 1*(const byte) SIZEOF_WORD -- pwuz1=pwuz1_minus_vwuc1 
    lda _2
    sec
    sbc #<1*SIZEOF_WORD
    sta _2
    lda _2+1
    sbc #>1*SIZEOF_WORD
    sta _2+1
  //SEG378 [223] phi from bsearch16u::@1 bsearch16u::@5 to bsearch16u::@2 [phi:bsearch16u::@1/bsearch16u::@5->bsearch16u::@2]
  b2_from_b1:
  b2_from_b5:
  //SEG379 [223] phi (word*) bsearch16u::return#2 = (word*~) bsearch16u::$2 [phi:bsearch16u::@1/bsearch16u::@5->bsearch16u::@2#0] -- register_copy 
    jmp b2
  //SEG380 bsearch16u::@2
  b2:
  //SEG381 [224] phi from bsearch16u::@2 bsearch16u::@8 to bsearch16u::@return [phi:bsearch16u::@2/bsearch16u::@8->bsearch16u::@return]
  breturn_from_b2:
  breturn_from_b8:
  //SEG382 [224] phi (word*) bsearch16u::return#1 = (word*) bsearch16u::return#2 [phi:bsearch16u::@2/bsearch16u::@8->bsearch16u::@return#0] -- register_copy 
    jmp breturn
  //SEG383 bsearch16u::@return
  breturn:
  //SEG384 [225] return 
    rts
  //SEG385 bsearch16u::@4
  b4:
  //SEG386 [226] (byte~) bsearch16u::$6 ← (byte) bsearch16u::num#3 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda num
    lsr
    sta _6
  //SEG387 [227] (byte~) bsearch16u::$16 ← (byte~) bsearch16u::$6 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda _6
    asl
    sta _16
  //SEG388 [228] (word*) bsearch16u::pivot#0 ← (word*) bsearch16u::items#2 + (byte~) bsearch16u::$16 -- pwuz1=pwuz2_plus_vbuz3 
    lda _16
    clc
    adc items
    sta pivot
    lda #0
    adc items+1
    sta pivot+1
  //SEG389 [229] (signed word) bsearch16u::result#0 ← (signed word)(word) bsearch16u::key#0 - (signed word)*((word*) bsearch16u::pivot#0) -- vwsz1=vwsz2_minus__deref_pwsz3 
    sec
    lda key
    ldy #0
    sbc (pivot),y
    sta result
    lda key+1
    iny
    sbc (pivot),y
    sta result+1
  //SEG390 [230] if((signed word) bsearch16u::result#0!=(signed byte) 0) goto bsearch16u::@6 -- vwsz1_neq_0_then_la1 
    lda result+1
    bne b6
    lda result
    bne b6
    jmp b8
  //SEG391 bsearch16u::@8
  b8:
  //SEG392 [231] (word*~) bsearch16u::return#6 ← (word*) bsearch16u::pivot#0 -- pwuz1=pwuz2 
    lda pivot
    sta return
    lda pivot+1
    sta return+1
    jmp breturn_from_b8
  //SEG393 bsearch16u::@6
  b6:
  //SEG394 [232] if((signed word) bsearch16u::result#0<=(signed byte) 0) goto bsearch16u::@7 -- vwsz1_le_0_then_la1 
    lda result+1
    bmi b7_from_b6
    bne !+
    lda result
    beq b7_from_b6
  !:
    jmp b9
  //SEG395 bsearch16u::@9
  b9:
  //SEG396 [233] (word*) bsearch16u::items#0 ← (word*) bsearch16u::pivot#0 + (byte) 1*(const byte) SIZEOF_WORD -- pwuz1=pwuz2_plus_vbuc1 
    lda #1*SIZEOF_WORD
    clc
    adc pivot
    sta items
    lda #0
    adc pivot+1
    sta items+1
  //SEG397 [234] (byte) bsearch16u::num#1 ← -- (byte) bsearch16u::num#3 -- vbuz1=_dec_vbuz1 
    dec num
  //SEG398 [235] phi from bsearch16u::@6 bsearch16u::@9 to bsearch16u::@7 [phi:bsearch16u::@6/bsearch16u::@9->bsearch16u::@7]
  b7_from_b6:
  b7_from_b9:
  //SEG399 [235] phi (word*) bsearch16u::items#8 = (word*) bsearch16u::items#2 [phi:bsearch16u::@6/bsearch16u::@9->bsearch16u::@7#0] -- register_copy 
  //SEG400 [235] phi (byte) bsearch16u::num#5 = (byte) bsearch16u::num#3 [phi:bsearch16u::@6/bsearch16u::@9->bsearch16u::@7#1] -- register_copy 
    jmp b7
  //SEG401 bsearch16u::@7
  b7:
  //SEG402 [236] (byte) bsearch16u::num#0 ← (byte) bsearch16u::num#5 >> (byte) 1 -- vbuz1=vbuz1_ror_1 
    lsr num
  //SEG403 [219] phi from bsearch16u::@7 to bsearch16u::@3 [phi:bsearch16u::@7->bsearch16u::@3]
  b3_from_b7:
  //SEG404 [219] phi (word*) bsearch16u::items#2 = (word*) bsearch16u::items#8 [phi:bsearch16u::@7->bsearch16u::@3#0] -- register_copy 
  //SEG405 [219] phi (byte) bsearch16u::num#3 = (byte) bsearch16u::num#0 [phi:bsearch16u::@7->bsearch16u::@3#1] -- register_copy 
    jmp b3
}
//SEG406 sqr
// Find the square of a byte value
// Uses a table of squares that must be initialized by calling init_squares()
// sqr(byte zeropage($27) val)
sqr: {
    .label _0 = $a5
    .label return = $a6
    .label val = $27
    .label return_2 = $85
    .label return_3 = $8a
  //SEG407 [238] (byte~) sqr::$0 ← (byte) sqr::val#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda val
    asl
    sta _0
  //SEG408 [239] (word) sqr::return#0 ← *((word*)(void*) SQUARES#1 + (byte~) sqr::$0) -- vwuz1=pwuz2_derefidx_vbuz3 
    ldy _0
    lda (SQUARES),y
    sta return
    iny
    lda (SQUARES),y
    sta return+1
    jmp breturn
  //SEG409 sqr::@return
  breturn:
  //SEG410 [240] return 
    rts
}
//SEG411 init_squares
// Initialize squares table
// Uses iterative formula (x+1)^2 = x^2 + 2*x + 1
init_squares: {
    .label _3 = $aa
    .label _4 = $ab
    .label squares = $2a
    .label sqr = $28
    .label i = $2c
  //SEG412 [242] call malloc 
  //SEG413 [254] phi from init_squares to malloc [phi:init_squares->malloc]
  malloc_from_init_squares:
  //SEG414 [254] phi (word) malloc::size#3 = (const byte) NUM_SQUARES#3*(const byte) SIZEOF_WORD [phi:init_squares->malloc#0] -- vwuz1=vbuc1 
    lda #NUM_SQUARES*SIZEOF_WORD
    sta malloc.size
    lda #0
    sta malloc.size+1
  //SEG415 [254] phi (byte*) heap_head#12 = (byte*) heap_head#1 [phi:init_squares->malloc#1] -- register_copy 
    jsr malloc
    jmp b2
  //SEG416 init_squares::@2
  b2:
  //SEG417 [243] (void*) SQUARES#1 ← (void*)(byte*) malloc::mem#0 -- pvoz1=pvoz2 
    lda malloc.mem
    sta SQUARES
    lda malloc.mem+1
    sta SQUARES+1
  //SEG418 [244] (word*) init_squares::squares#0 ← (word*)(void*) SQUARES#1 -- pwuz1=pwuz2 
    lda SQUARES
    sta squares
    lda SQUARES+1
    sta squares+1
  //SEG419 [245] phi from init_squares::@2 to init_squares::@1 [phi:init_squares::@2->init_squares::@1]
  b1_from_b2:
  //SEG420 [245] phi (byte) init_squares::i#2 = (byte) 0 [phi:init_squares::@2->init_squares::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG421 [245] phi (word*) init_squares::squares#2 = (word*) init_squares::squares#0 [phi:init_squares::@2->init_squares::@1#1] -- register_copy 
  //SEG422 [245] phi (word) init_squares::sqr#2 = (byte) 0 [phi:init_squares::@2->init_squares::@1#2] -- vwuz1=vbuc1 
    lda #0
    sta sqr
    lda #0
    sta sqr+1
    jmp b1
  //SEG423 [245] phi from init_squares::@1 to init_squares::@1 [phi:init_squares::@1->init_squares::@1]
  b1_from_b1:
  //SEG424 [245] phi (byte) init_squares::i#2 = (byte) init_squares::i#1 [phi:init_squares::@1->init_squares::@1#0] -- register_copy 
  //SEG425 [245] phi (word*) init_squares::squares#2 = (word*) init_squares::squares#1 [phi:init_squares::@1->init_squares::@1#1] -- register_copy 
  //SEG426 [245] phi (word) init_squares::sqr#2 = (word) init_squares::sqr#1 [phi:init_squares::@1->init_squares::@1#2] -- register_copy 
    jmp b1
  //SEG427 init_squares::@1
  b1:
  //SEG428 [246] *((word*) init_squares::squares#2) ← (word) init_squares::sqr#2 -- _deref_pwuz1=vwuz2 
    ldy #0
    lda sqr
    sta (squares),y
    iny
    lda sqr+1
    sta (squares),y
  //SEG429 [247] (word*) init_squares::squares#1 ← (word*) init_squares::squares#2 + (const byte) SIZEOF_WORD -- pwuz1=pwuz1_plus_vbuc1 
    lda #SIZEOF_WORD
    clc
    adc squares
    sta squares
    bcc !+
    inc squares+1
  !:
  //SEG430 [248] (byte~) init_squares::$3 ← (byte) init_squares::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta _3
  //SEG431 [249] (byte~) init_squares::$4 ← (byte~) init_squares::$3 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy _3
    iny
    sty _4
  //SEG432 [250] (word) init_squares::sqr#1 ← (word) init_squares::sqr#2 + (byte~) init_squares::$4 -- vwuz1=vwuz1_plus_vbuz2 
    lda _4
    clc
    adc sqr
    sta sqr
    bcc !+
    inc sqr+1
  !:
  //SEG433 [251] (byte) init_squares::i#1 ← ++ (byte) init_squares::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG434 [252] if((byte) init_squares::i#1!=(const byte) NUM_SQUARES#3-(byte) 1+(byte) 1) goto init_squares::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_SQUARES-1+1
    cmp i
    bne b1_from_b1
    jmp breturn
  //SEG435 init_squares::@return
  breturn:
  //SEG436 [253] return 
    rts
}
//SEG437 malloc
// Allocates a block of size bytes of memory, returning a pointer to the beginning of the block.
// The content of the newly allocated block of memory is not initialized, remaining with indeterminate values.
// malloc(word zeropage($2f) size)
malloc: {
    .label mem = $ac
    .label size = $2f
  //SEG438 [255] (byte*) malloc::mem#0 ← (byte*) heap_head#12 -- pbuz1=pbuz2 
    lda heap_head
    sta mem
    lda heap_head+1
    sta mem+1
  //SEG439 [256] (byte*) heap_head#1 ← (byte*) heap_head#12 + (word) malloc::size#3 -- pbuz1=pbuz1_plus_vwuz2 
    lda heap_head
    clc
    adc size
    sta heap_head
    lda heap_head+1
    adc size+1
    sta heap_head+1
    jmp breturn
  //SEG440 malloc::@return
  breturn:
  //SEG441 [257] return 
    rts
}
//SEG442 irqBottom
// Raster Interrupt at the bottom of the screen
irqBottom: {
  //SEG443 entry interrupt(HARDWARE_ALL)
    sta rega+1
    stx regx+1
    sty regy+1
  //SEG444 [259] phi from irqBottom to irqBottom::@1 [phi:irqBottom->irqBottom::@1]
  b1_from_irqBottom:
    jmp b1
  //SEG445 irqBottom::@1
  b1:
  //SEG446 [260] call processChars 
  //SEG447 [265] phi from irqBottom::@1 to processChars [phi:irqBottom::@1->processChars]
  processChars_from_b1:
    jsr processChars
    jmp b2
  //SEG448 irqBottom::@2
  b2:
  //SEG449 [261] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_TOP#0 -- _deref_pbuc1=vbuc2 
    // Trigger IRQ at the top of the screen
    lda #RASTER_IRQ_TOP
    sta RASTER
  //SEG450 [262] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqTop() -- _deref_pptc1=pprc2 
    lda #<irqTop
    sta HARDWARE_IRQ
    lda #>irqTop
    sta HARDWARE_IRQ+1
  //SEG451 [263] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
    jmp breturn
  //SEG452 irqBottom::@return
  breturn:
  //SEG453 [264] return  - exit interrupt(HARDWARE_ALL)
  rega:
    lda #00
  regx:
    ldx #00
  regy:
    ldy #00
    rti
}
//SEG454 processChars
// Process any chars in the PROCESSING array
processChars: {
    .label _11 = $b8
    .label _12 = $b9
    .label _14 = $bb
    .label _15 = $bc
    .label _17 = $ba
    .label _25 = $bf
    .label _26 = $c1
    .label _30 = $c4
    .label _33 = $c7
    .label _37 = $b2
    .label _38 = $c3
    .label _39 = $c6
    .label processing = $b3
    .label bitmask = $b5
    .label i = $31
    .label xpos = $b6
    .label ypos = $be
    .label xchar = $c2
    .label ychar = $c5
    .label numActive = $32
    .label _67 = $ae
    .label _68 = $af
    .label _69 = $b0
    .label _70 = $b1
  //SEG455 [266] phi from processChars to processChars::@1 [phi:processChars->processChars::@1]
  b1_from_processChars:
  //SEG456 [266] phi (byte) processChars::numActive#10 = (byte) 0 [phi:processChars->processChars::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta numActive
  //SEG457 [266] phi (byte) processChars::i#10 = (byte) 0 [phi:processChars->processChars::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG458 [266] phi from processChars::@2 to processChars::@1 [phi:processChars::@2->processChars::@1]
  b1_from_b2:
  //SEG459 [266] phi (byte) processChars::numActive#10 = (byte) processChars::numActive#3 [phi:processChars::@2->processChars::@1#0] -- register_copy 
  //SEG460 [266] phi (byte) processChars::i#10 = (byte) processChars::i#1 [phi:processChars::@2->processChars::@1#1] -- register_copy 
    jmp b1
  //SEG461 processChars::@1
  b1:
  //SEG462 [267] (byte) processChars::$67 ← (byte) processChars::i#10 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta _67
  //SEG463 [268] (byte) processChars::$68 ← (byte) processChars::$67 + (byte) processChars::i#10 -- vbuz1=vbuz2_plus_vbuz3 
    lda _67
    clc
    adc i
    sta _68
  //SEG464 [269] (byte) processChars::$69 ← (byte) processChars::$68 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda _68
    asl
    sta _69
  //SEG465 [270] (byte) processChars::$70 ← (byte) processChars::$69 + (byte) processChars::i#10 -- vbuz1=vbuz2_plus_vbuz3 
    lda _69
    clc
    adc i
    sta _70
  //SEG466 [271] (byte~) processChars::$37 ← (byte) processChars::$70 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda _70
    asl
    sta _37
  //SEG467 [272] (struct ProcessingSprite*) processChars::processing#0 ← (const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) processChars::$37 -- pssz1=pssc1_plus_vbuz2 
    lda _37
    clc
    adc #<PROCESSING
    sta processing
    lda #>PROCESSING
    adc #0
    sta processing+1
  //SEG468 [273] (byte) processChars::bitmask#0 ← (byte) 1 << *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID) -- vbuz1=vbuc1_rol_pbuz2_derefidx_vbuc2 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_ID
    lda (processing),y
    tax
    lda #1
    cpx #0
    beq !e+
  !:
    asl
    dex
    bne !-
  !e:
    sta bitmask
  //SEG469 [274] if(*((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS)==(const byte) STATUS_FREE) goto processChars::@2 -- pbuz1_derefidx_vbuc1_eq_vbuc2_then_la1 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
    lda (processing),y
    cmp #STATUS_FREE
    beq b2_from_b1
    jmp b10
  //SEG470 processChars::@10
  b10:
  //SEG471 [275] if(*((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS)!=(const byte) STATUS_NEW) goto processChars::@3 -- pbuz1_derefidx_vbuc1_neq_vbuc2_then_la1 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
    lda (processing),y
    cmp #STATUS_NEW
    bne b3
    jmp b11
  //SEG472 processChars::@11
  b11:
  //SEG473 [276] *(*((byte**)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR)) ← (byte) ' ' -- _deref_pptz1_derefidx_vbuc1=vbuc2 
    // Clear the char on the screen
    ldx #' '
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR
    lda (processing),y
    sta !++1
    iny
    lda (processing),y
    sta !++2
    txa
  !:
    sta $ffff
  //SEG474 [277] *((const byte*) SPRITES_ENABLE#0) ← *((const byte*) SPRITES_ENABLE#0) | (byte) processChars::bitmask#0 -- _deref_pbuc1=_deref_pbuc1_bor_vbuz1 
    // Enable the sprite
    lda SPRITES_ENABLE
    ora bitmask
    sta SPRITES_ENABLE
  //SEG475 [278] *((const byte*) SPRITES_COLS#0 + *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID)) ← *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL) -- pbuc1_derefidx_pbuz1_derefidx_vbuc2=pbuz1_derefidx_vbuc3 
    // Set the sprite color
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_COL
    lda (processing),y
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_ID
    pha
    lda (processing),y
    tay
    pla
    sta SPRITES_COLS,y
  //SEG476 [279] *((const byte*) SCREEN#0+(const word) SPRITE_PTRS#0 + *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID)) ← *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR) -- pbuc1_derefidx_pbuz1_derefidx_vbuc2=pbuz1_derefidx_vbuc3 
    // Set sprite pointer
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_PTR
    lda (processing),y
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_ID
    pha
    lda (processing),y
    tay
    pla
    sta SCREEN+SPRITE_PTRS,y
  //SEG477 [280] *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS) ← (const byte) STATUS_PROCESSING -- pbuz1_derefidx_vbuc1=vbuc2 
    // Set status
    lda #STATUS_PROCESSING
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
    sta (processing),y
    jmp b3
  //SEG478 processChars::@3
  b3:
  //SEG479 [281] (word) processChars::xpos#0 ← *((word*)(struct ProcessingSprite*) processChars::processing#0) >> (byte) 4 -- vwuz1=_deref_pwuz2_ror_4 
    ldy #0
    lda (processing),y
    sta xpos
    iny
    lda (processing),y
    sta xpos+1
    lsr xpos+1
    ror xpos
    lsr xpos+1
    ror xpos
    lsr xpos+1
    ror xpos
    lsr xpos+1
    ror xpos
  //SEG480 [282] (byte~) processChars::$11 ← > (word) processChars::xpos#0 -- vbuz1=_hi_vwuz2 
    lda xpos+1
    sta _11
  //SEG481 [283] if((byte) 0!=(byte~) processChars::$11) goto processChars::@4 -- vbuc1_neq_vbuz1_then_la1 
    // Set sprite position
    lda #0
    cmp _11
    bne b4
    jmp b8
  //SEG482 processChars::@8
  b8:
  //SEG483 [284] (byte~) processChars::$12 ← (byte) $ff ^ (byte) processChars::bitmask#0 -- vbuz1=vbuc1_bxor_vbuz2 
    lda #$ff
    eor bitmask
    sta _12
  //SEG484 [285] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) & (byte~) processChars::$12 -- _deref_pbuc1=_deref_pbuc1_band_vbuz1 
    lda SPRITES_XMSB
    and _12
    sta SPRITES_XMSB
    jmp b5
  //SEG485 processChars::@5
  b5:
  //SEG486 [286] (byte~) processChars::$17 ← (byte) processChars::i#10 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta _17
  //SEG487 [287] (byte~) processChars::$14 ← (byte)(word) processChars::xpos#0 -- vbuz1=_byte_vwuz2 
    lda xpos
    sta _14
  //SEG488 [288] *((const byte*) SPRITES_XPOS#0 + (byte~) processChars::$17) ← (byte~) processChars::$14 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _14
    ldy _17
    sta SPRITES_XPOS,y
  //SEG489 [289] (word~) processChars::$15 ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) >> (byte) 4 -- vwuz1=pwuz2_derefidx_vbuc1_ror_4 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_Y
    lda (processing),y
    sta _15
    iny
    lda (processing),y
    sta _15+1
    lsr _15+1
    ror _15
    lsr _15+1
    ror _15
    lsr _15+1
    ror _15
    lsr _15+1
    ror _15
  //SEG490 [290] (byte) processChars::ypos#0 ← (byte)(word~) processChars::$15 -- vbuz1=_byte_vwuz2 
    lda _15
    sta ypos
  //SEG491 [291] *((const byte*) SPRITES_YPOS#0 + (byte~) processChars::$17) ← (byte) processChars::ypos#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda ypos
    ldy _17
    sta SPRITES_YPOS,y
  //SEG492 [292] if(*((word*)(struct ProcessingSprite*) processChars::processing#0)<(const word) XPOS_LEFTMOST#0) goto processChars::@6 -- _deref_pwuz1_lt_vwuc1_then_la1 
    // Move sprite
    ldy #1
    lda (processing),y
    cmp #>XPOS_LEFTMOST
    bcc b6
    bne !+
    dey
    lda (processing),y
    cmp #<XPOS_LEFTMOST
    bcc b6
  !:
    jmp b14
  //SEG493 processChars::@14
  b14:
  //SEG494 [293] if(*((word*)(struct ProcessingSprite*) processChars::processing#0)>(const word) XPOS_RIGHTMOST#0) goto processChars::@6 -- _deref_pwuz1_gt_vwuc1_then_la1 
    ldy #1
    lda #>XPOS_RIGHTMOST
    cmp (processing),y
    bcc b6
    bne !+
    dey
    lda #<XPOS_RIGHTMOST
    cmp (processing),y
    bcc b6
  !:
    jmp b13
  //SEG495 processChars::@13
  b13:
  //SEG496 [294] if(*((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y)<(const word) YPOS_TOPMOST#0) goto processChars::@6 -- pwuz1_derefidx_vbuc1_lt_vwuc2_then_la1 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_Y
    iny
    lda (processing),y
    cmp #>YPOS_TOPMOST
    bcc b6
    bne !+
    dey
    lda (processing),y
    cmp #<YPOS_TOPMOST
    bcc b6
  !:
    jmp b12
  //SEG497 processChars::@12
  b12:
  //SEG498 [295] if(*((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y)>(const word) YPOS_BOTTOMMOST#0) goto processChars::@6 -- pwuz1_derefidx_vbuc1_gt_vwuc2_then_la1 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_Y
    iny
    lda #>YPOS_BOTTOMMOST
    cmp (processing),y
    bcc b6
    bne !+
    dey
    lda #<YPOS_BOTTOMMOST
    cmp (processing),y
    bcc b6
  !:
    jmp b9
  //SEG499 processChars::@9
  b9:
  //SEG500 [296] (word~) processChars::$25 ← (word) processChars::xpos#0 >> (byte) 3 -- vwuz1=vwuz2_ror_3 
    lda xpos+1
    lsr
    sta _25+1
    lda xpos
    ror
    sta _25
    lsr _25+1
    ror _25
    lsr _25+1
    ror _25
  //SEG501 [297] (byte~) processChars::$26 ← (byte)(word~) processChars::$25 -- vbuz1=_byte_vwuz2 
    lda _25
    sta _26
  //SEG502 [298] (byte) processChars::xchar#0 ← (byte~) processChars::$26 - (const byte) BORDER_XPOS_LEFT#0/(byte) 8 -- vbuz1=vbuz2_minus_vbuc1 
    lax _26
    axs #BORDER_XPOS_LEFT/8
    stx xchar
  //SEG503 [299] (byte~) processChars::$38 ← (byte) processChars::xchar#0 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda xchar
    asl
    sta _38
  //SEG504 [300] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) + *((const word[$28]) VXSIN#0 + (byte~) processChars::$38) -- pwuz1_derefidx_vbuc1=pwuz1_derefidx_vbuc1_plus_pwuc2_derefidx_vbuz2 
    ldx _38
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_VX
    clc
    lda (processing),y
    adc VXSIN,x
    sta (processing),y
    iny
    lda (processing),y
    adc VXSIN+1,x
    sta (processing),y
  //SEG505 [301] *((word*)(struct ProcessingSprite*) processChars::processing#0) ← *((word*)(struct ProcessingSprite*) processChars::processing#0) + *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) -- _deref_pwuz1=_deref_pwuz1_plus_pwuz1_derefidx_vbuc1 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_VX
    sty $ff
    clc
    lda (processing),y
    ldy #0
    adc (processing),y
    sta (processing),y
    ldy $ff
    iny
    lda (processing),y
    ldy #1
    adc (processing),y
    sta (processing),y
  //SEG506 [302] (byte~) processChars::$30 ← (byte) processChars::ypos#0 >> (byte) 3 -- vbuz1=vbuz2_ror_3 
    lda ypos
    lsr
    lsr
    lsr
    sta _30
  //SEG507 [303] (byte) processChars::ychar#0 ← (byte~) processChars::$30 - (const byte) BORDER_YPOS_TOP#0/(byte) 8 -- vbuz1=vbuz2_minus_vbuc1 
    lax _30
    axs #BORDER_YPOS_TOP/8
    stx ychar
  //SEG508 [304] (byte~) processChars::$39 ← (byte) processChars::ychar#0 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda ychar
    asl
    sta _39
  //SEG509 [305] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) + *((const word[$19]) VYSIN#0 + (byte~) processChars::$39) -- pwuz1_derefidx_vbuc1=pwuz1_derefidx_vbuc1_plus_pwuc2_derefidx_vbuz2 
    ldx _39
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_VY
    clc
    lda (processing),y
    adc VYSIN,x
    sta (processing),y
    iny
    lda (processing),y
    adc VYSIN+1,x
    sta (processing),y
  //SEG510 [306] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) + *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) -- pwuz1_derefidx_vbuc1=pwuz1_derefidx_vbuc1_plus_pwuz1_derefidx_vbuc2 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_VY
    clc
    lda (processing),y
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_Y
    adc (processing),y
    sta (processing),y
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_VY+1
    lda (processing),y
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_Y+1
    adc (processing),y
    sta (processing),y
    jmp b7
  //SEG511 processChars::@7
  b7:
  //SEG512 [307] (byte) processChars::numActive#1 ← ++ (byte) processChars::numActive#10 -- vbuz1=_inc_vbuz1 
    inc numActive
  //SEG513 [308] phi from processChars::@1 processChars::@7 to processChars::@2 [phi:processChars::@1/processChars::@7->processChars::@2]
  b2_from_b1:
  b2_from_b7:
  //SEG514 [308] phi (byte) processChars::numActive#3 = (byte) processChars::numActive#10 [phi:processChars::@1/processChars::@7->processChars::@2#0] -- register_copy 
    jmp b2
  //SEG515 processChars::@2
  b2:
  //SEG516 [309] (byte) processChars::i#1 ← ++ (byte) processChars::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG517 [310] if((byte) processChars::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto processChars::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_PROCESSING-1+1
    cmp i
    bne b1_from_b2
    jmp breturn
  //SEG518 processChars::@return
  breturn:
  //SEG519 [311] return 
    rts
  //SEG520 processChars::@6
  b6:
  //SEG521 [312] *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS) ← (const byte) STATUS_FREE -- pbuz1_derefidx_vbuc1=vbuc2 
    // Set status to FREE
    lda #STATUS_FREE
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
    sta (processing),y
  //SEG522 [313] (byte~) processChars::$33 ← (byte) $ff ^ (byte) processChars::bitmask#0 -- vbuz1=vbuc1_bxor_vbuz2 
    lda #$ff
    eor bitmask
    sta _33
  //SEG523 [314] *((const byte*) SPRITES_ENABLE#0) ← *((const byte*) SPRITES_ENABLE#0) & (byte~) processChars::$33 -- _deref_pbuc1=_deref_pbuc1_band_vbuz1 
    // Disable the sprite
    lda SPRITES_ENABLE
    and _33
    sta SPRITES_ENABLE
    jmp b7
  //SEG524 processChars::@4
  b4:
  //SEG525 [315] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) | (byte) processChars::bitmask#0 -- _deref_pbuc1=_deref_pbuc1_bor_vbuz1 
    lda SPRITES_XMSB
    ora bitmask
    sta SPRITES_XMSB
    jmp b5
}
//SEG526 irqTop
// Raster Interrupt at the top of the screen
irqTop: {
  //SEG527 entry interrupt(HARDWARE_ALL)
    sta rega+1
    stx regx+1
    sty regy+1
    jmp b1
  //SEG528 irqTop::@1
  b1:
  //SEG529 [317] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_MIDDLE#0 -- _deref_pbuc1=vbuc2 
    // Trigger IRQ at the middle of the screen
    lda #RASTER_IRQ_MIDDLE
    sta RASTER
  //SEG530 [318] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqBottom() -- _deref_pptc1=pprc2 
    lda #<irqBottom
    sta HARDWARE_IRQ
    lda #>irqBottom
    sta HARDWARE_IRQ+1
  //SEG531 [319] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
    jmp breturn
  //SEG532 irqTop::@return
  breturn:
  //SEG533 [320] return  - exit interrupt(HARDWARE_ALL)
  rega:
    lda #00
  regx:
    ldx #00
  regy:
    ldy #00
    rti
}
//SEG534 File Data
  // Values added to VX
VXSIN:
.for(var i=0; i<40; i++) {
      .word -sin(toRadians([i*360]/40))*4
    }

  // Values added to VY
VYSIN:
.for(var i=0; i<25; i++) {
      .word -sin(toRadians([i*360]/25))*4
    }

  // Sprites currently being processed in the interrupt
  PROCESSING: .fill $e*NUM_PROCESSING, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] (void*) SCREEN_COPY#0 ← (void*)(byte*) malloc::mem#0 [ SCREEN_COPY#0 heap_head#1 ] ( ) always clobbers reg byte a 
Statement [5] (void*) SCREEN_DIST#0 ← (void*)(byte*) malloc::mem#0 [ SCREEN_COPY#0 SCREEN_DIST#0 heap_head#1 ] ( ) always clobbers reg byte a 
Statement [9] (byte*) init_dist_screen::screen#0 ← (byte*)(void*) SCREEN_DIST#0 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 heap_head#1 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 heap_head#1 ] ) always clobbers reg byte a 
Statement [11] (byte*) main::dst#0 ← (byte*)(void*) SCREEN_COPY#0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::dst#0 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::dst#0 ] ) always clobbers reg byte a 
Statement [13] *((byte*) main::dst#2) ← *((byte*) main::src#2) [ SCREEN_COPY#0 SCREEN_DIST#0 main::src#2 main::dst#2 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::src#2 main::dst#2 ] ) always clobbers reg byte a reg byte y 
Statement [16] if((byte*) main::src#1!=(const byte*) SCREEN#0+(word) $3e8) goto main::@1 [ SCREEN_COPY#0 SCREEN_DIST#0 main::src#1 main::dst#1 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::src#1 main::dst#1 ] ) always clobbers reg byte a 
Statement [18] (byte) main::$26 ← (byte) main::i#2 << (byte) 1 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$26 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$26 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ main::i#2 main::i#1 ]
Statement [19] (byte) main::$27 ← (byte) main::$26 + (byte) main::i#2 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$27 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$27 ] ) always clobbers reg byte a 
Statement [20] (byte) main::$28 ← (byte) main::$27 << (byte) 1 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$28 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$28 ] ) always clobbers reg byte a 
Statement [21] (byte) main::$29 ← (byte) main::$28 + (byte) main::i#2 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$29 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$29 ] ) always clobbers reg byte a 
Statement [22] (byte~) main::$16 ← (byte) main::$29 << (byte) 1 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [23] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) main::$16) ← (byte) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:59 [ main::$16 ]
Statement [24] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y + (byte~) main::$16) ← (byte) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [25] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX + (byte~) main::$16) ← (byte) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [26] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY + (byte~) main::$16) ← (byte) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [27] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID + (byte~) main::$16) ← (byte) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [28] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR + (byte~) main::$16) ← (byte) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [29] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL + (byte~) main::$16) ← (byte) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [30] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) main::$16) ← (const byte) STATUS_FREE [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [31] *((byte**)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR + (byte~) main::$16) ← (byte*) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 ] ) always clobbers reg byte a 
Statement [47] *((const byte*) SCREEN#0+(word) $3e7) ← (byte) '.' [ ] ( main:7 [ ] ) always clobbers reg byte a 
Statement [55] (byte) startProcessing::$42 ← (byte) startProcessing::i#2 << (byte) 1 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$42 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$42 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:66 [ startProcessing::center_x#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:67 [ startProcessing::center_y#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ startProcessing::freeIdx#6 startProcessing::freeIdx#7 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ startProcessing::freeIdx#2 startProcessing::freeIdx#8 startProcessing::i#2 startProcessing::i#1 ]
Statement [56] (byte) startProcessing::$43 ← (byte) startProcessing::$42 + (byte) startProcessing::i#2 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$43 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$43 ] ) always clobbers reg byte a 
Statement [57] (byte) startProcessing::$44 ← (byte) startProcessing::$43 << (byte) 1 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$44 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$44 ] ) always clobbers reg byte a 
Statement [58] (byte) startProcessing::$45 ← (byte) startProcessing::$44 + (byte) startProcessing::i#2 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$45 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$45 ] ) always clobbers reg byte a 
Statement [59] (byte~) startProcessing::$30 ← (byte) startProcessing::$45 << (byte) 1 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$30 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$30 ] ) always clobbers reg byte a 
Statement [60] if(*((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) startProcessing::$30)!=(const byte) STATUS_FREE) goto startProcessing::@3 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 ] ) always clobbers reg byte a 
Statement [63] (word~) startProcessing::$0 ← (word)(byte) startProcessing::center_y#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$0 ] ) always clobbers reg byte a 
Statement [64] (word) startProcessing::$47 ← (word~) startProcessing::$0 << (byte) 2 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$0 startProcessing::$47 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$0 startProcessing::$47 ] ) always clobbers reg byte a 
Statement [65] (word) startProcessing::$48 ← (word) startProcessing::$47 + (word~) startProcessing::$0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$48 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$48 ] ) always clobbers reg byte a 
Statement [66] (word~) startProcessing::$1 ← (word) startProcessing::$48 << (byte) 3 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$1 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$1 ] ) always clobbers reg byte a 
Statement [67] (word) startProcessing::offset#0 ← (word~) startProcessing::$1 + (byte) startProcessing::center_x#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::offset#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::offset#0 ] ) always clobbers reg byte a 
Statement [68] (byte*) startProcessing::colPtr#0 ← (const byte*) COLS#0 + (word) startProcessing::offset#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::offset#0 startProcessing::colPtr#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::offset#0 startProcessing::colPtr#0 ] ) always clobbers reg byte a 
Statement [69] (byte) startProcessing::spriteCol#0 ← *((byte*) startProcessing::colPtr#0) [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::offset#0 startProcessing::spriteCol#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::offset#0 startProcessing::spriteCol#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:66 [ startProcessing::center_x#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:67 [ startProcessing::center_y#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:8 [ startProcessing::freeIdx#2 startProcessing::freeIdx#8 startProcessing::i#2 startProcessing::i#1 ]
Statement [70] (byte*) startProcessing::screenPtr#0 ← (const byte*) SCREEN#0 + (word) startProcessing::offset#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:85 [ startProcessing::spriteCol#0 ]
Statement [71] (word~) startProcessing::$5 ← (word)(byte) startProcessing::freeIdx#2 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$5 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$5 ] ) always clobbers reg byte a 
Statement [72] (word~) startProcessing::$6 ← (word~) startProcessing::$5 << (byte) 6 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$6 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$6 ] ) always clobbers reg byte a 
Statement [73] (byte*) startProcessing::spriteData#0 ← (const byte*) SPRITE_DATA#0 + (word~) startProcessing::$6 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 ] ) always clobbers reg byte a 
Statement [74] (byte) startProcessing::ch#0 ← *((byte*) startProcessing::screenPtr#0) [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::ch#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::ch#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:85 [ startProcessing::spriteCol#0 ]
Statement [75] (word~) startProcessing::$8 ← (word)(byte) startProcessing::ch#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::$8 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::$8 ] ) always clobbers reg byte a 
Statement [76] (word~) startProcessing::$9 ← (word~) startProcessing::$8 << (byte) 3 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::$9 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::$9 ] ) always clobbers reg byte a 
Statement [77] (byte*) startProcessing::chargenData#0 ← (const byte*) CHARGEN#0 + (word~) startProcessing::$9 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::chargenData#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::chargenData#0 ] ) always clobbers reg byte a 
Statement [79] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::chargenData#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::chargenData#0 ] ) always clobbers reg byte a 
Statement [81] *((byte*) startProcessing::spriteData#2) ← *((byte*) startProcessing::chargenData#2) [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::chargenData#2 startProcessing::spriteData#2 startProcessing::i1#2 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::chargenData#2 startProcessing::spriteData#2 startProcessing::i1#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:13 [ startProcessing::i1#2 startProcessing::i1#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:13 [ startProcessing::i1#2 startProcessing::i1#1 ]
Statement [82] (byte*) startProcessing::spriteData#1 ← (byte*) startProcessing::spriteData#2 + (byte) 3 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::chargenData#2 startProcessing::i1#2 startProcessing::spriteData#1 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::chargenData#2 startProcessing::i1#2 startProcessing::spriteData#1 ] ) always clobbers reg byte a 
Statement [86] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 ] ) always clobbers reg byte a 
Statement [88] (word~) startProcessing::$11 ← (word)(byte) startProcessing::center_x#0 [ startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$11 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$11 ] ) always clobbers reg byte a 
Statement [89] (word~) startProcessing::$12 ← (word~) startProcessing::$11 << (byte) 3 [ startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$12 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$12 ] ) always clobbers reg byte a 
Statement [90] (word~) startProcessing::$13 ← (const byte) BORDER_XPOS_LEFT#0 + (word~) startProcessing::$12 [ startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$13 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$13 ] ) always clobbers reg byte a 
Statement [91] (word) startProcessing::spriteX#0 ← (word~) startProcessing::$13 << (byte) 4 [ startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 ] ) always clobbers reg byte a 
Statement [92] (word~) startProcessing::$15 ← (word)(byte) startProcessing::center_y#0 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::$15 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::$15 ] ) always clobbers reg byte a 
Statement [93] (word~) startProcessing::$16 ← (word~) startProcessing::$15 << (byte) 3 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::$16 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::$16 ] ) always clobbers reg byte a 
Statement [94] (word~) startProcessing::$17 ← (const byte) BORDER_YPOS_TOP#0 + (word~) startProcessing::$16 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::$17 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::$17 ] ) always clobbers reg byte a 
Statement [95] (word) startProcessing::spriteY#0 ← (word~) startProcessing::$17 << (byte) 4 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 ] ) always clobbers reg byte a 
Statement [96] (byte) startProcessing::spritePtr#0 ← (byte)(const byte*) SPRITE_DATA#0/(byte) $40 + (byte) startProcessing::freeIdx#2 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 ] ) always clobbers reg byte a 
Statement [97] (byte~) startProcessing::$22 ← (byte) startProcessing::freeIdx#2 << (byte) 3 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$22 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$22 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:113 [ startProcessing::spritePtr#0 ]
Statement [98] (word~) startProcessing::$23 ← (word)(byte~) startProcessing::$22 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 ] ) always clobbers reg byte a 
Statement [99] (byte) startProcessing::$50 ← (byte) startProcessing::freeIdx#2 << (byte) 1 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$50 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$50 ] ) always clobbers reg byte a 
Statement [100] (byte) startProcessing::$51 ← (byte) startProcessing::$50 + (byte) startProcessing::freeIdx#2 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$51 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$51 ] ) always clobbers reg byte a 
Statement [101] (byte) startProcessing::$52 ← (byte) startProcessing::$51 << (byte) 1 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$52 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$52 ] ) always clobbers reg byte a 
Statement [102] (byte) startProcessing::$53 ← (byte) startProcessing::$52 + (byte) startProcessing::freeIdx#2 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$53 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$53 ] ) always clobbers reg byte a 
Statement [103] (byte~) startProcessing::$31 ← (byte) startProcessing::$53 << (byte) 1 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [104] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) startProcessing::$31) ← (word) startProcessing::spriteX#0 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$31 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:121 [ startProcessing::$31 ]
Statement [105] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y + (byte~) startProcessing::$31) ← (word) startProcessing::spriteY#0 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [106] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX + (byte~) startProcessing::$31) ← (word~) startProcessing::$23 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [107] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY + (byte~) startProcessing::$31) ← (byte) $3c [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [108] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID + (byte~) startProcessing::$31) ← (byte) startProcessing::freeIdx#2 [ startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [109] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR + (byte~) startProcessing::$31) ← (byte) startProcessing::spritePtr#0 [ startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [110] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL + (byte~) startProcessing::$31) ← (byte) startProcessing::spriteCol#0 [ startProcessing::screenPtr#0 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::screenPtr#0 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [111] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) startProcessing::$31) ← (const byte) STATUS_NEW [ startProcessing::screenPtr#0 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::screenPtr#0 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [112] *((byte**)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR + (byte~) startProcessing::$31) ← (byte*) startProcessing::screenPtr#0 [ ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [118] (byte*) getCharToProcess::screen_line#0 ← (byte*)(void*) SCREEN_COPY#0 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#0 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#0 ] ) always clobbers reg byte a 
Statement [119] (byte*) getCharToProcess::dist_line#0 ← (byte*)(void*) SCREEN_DIST#0 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#0 getCharToProcess::dist_line#0 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#0 getCharToProcess::dist_line#0 ] ) always clobbers reg byte a 
Statement [122] if(*((byte*) getCharToProcess::screen_line#4 + (byte) getCharToProcess::x#2)==(byte) ' ') goto getCharToProcess::@11 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#4 getCharToProcess::dist_line#6 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#4 getCharToProcess::dist_line#6 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:18 [ getCharToProcess::y#7 getCharToProcess::y#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:19 [ getCharToProcess::x#2 getCharToProcess::x#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:20 [ getCharToProcess::closest_dist#2 getCharToProcess::closest_dist#8 getCharToProcess::closest_dist#10 getCharToProcess::closest_dist#12 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:21 [ getCharToProcess::closest_x#7 getCharToProcess::closest_x#9 getCharToProcess::return_x#1 getCharToProcess::return_x#7 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:22 [ getCharToProcess::closest_y#7 getCharToProcess::closest_y#9 getCharToProcess::return_y#1 getCharToProcess::return_y#7 ]
Statement [123] (byte) getCharToProcess::dist#0 ← *((byte*) getCharToProcess::dist_line#6 + (byte) getCharToProcess::x#2) [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#4 getCharToProcess::dist_line#6 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::dist#0 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#4 getCharToProcess::dist_line#6 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::dist#0 ] ) always clobbers reg byte a 
Statement [130] (byte*) getCharToProcess::screen_line#1 ← (byte*) getCharToProcess::screen_line#4 + (byte) $28 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::dist_line#6 getCharToProcess::y#7 getCharToProcess::screen_line#1 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::dist_line#6 getCharToProcess::y#7 getCharToProcess::screen_line#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:23 [ getCharToProcess::return_dist#1 getCharToProcess::return_dist#5 getCharToProcess::return_dist#6 getCharToProcess::dist#0 ]
Statement [131] (byte*) getCharToProcess::dist_line#1 ← (byte*) getCharToProcess::dist_line#6 + (byte) $28 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::y#7 getCharToProcess::screen_line#1 getCharToProcess::dist_line#1 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::y#7 getCharToProcess::screen_line#1 getCharToProcess::dist_line#1 ] ) always clobbers reg byte a 
Statement [135] (word~) getCharToProcess::$8 ← (word)(byte) getCharToProcess::return_y#1 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$8 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$8 ] ) always clobbers reg byte a 
Statement [136] (word) getCharToProcess::$12 ← (word~) getCharToProcess::$8 << (byte) 2 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$8 getCharToProcess::$12 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$8 getCharToProcess::$12 ] ) always clobbers reg byte a 
Statement [137] (word) getCharToProcess::$13 ← (word) getCharToProcess::$12 + (word~) getCharToProcess::$8 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$13 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$13 ] ) always clobbers reg byte a 
Statement [138] (word~) getCharToProcess::$9 ← (word) getCharToProcess::$13 << (byte) 3 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$9 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$9 ] ) always clobbers reg byte a 
Statement [139] (byte*~) getCharToProcess::$10 ← (byte*)(void*) SCREEN_COPY#0 + (word~) getCharToProcess::$9 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$10 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$10 ] ) always clobbers reg byte a 
Statement [140] *((byte*~) getCharToProcess::$10 + (byte) getCharToProcess::return_x#1) ← (byte) ' ' [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 ] ) always clobbers reg byte a 
Statement [147] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:7::setupRasterIrq:37 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [148] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:7::setupRasterIrq:37 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [149] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 [ ] ( main:7::setupRasterIrq:37 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [150] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f [ ] ( main:7::setupRasterIrq:37 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [151] *((const byte*) RASTER#0) ← <(const byte) RASTER_IRQ_TOP#0 [ ] ( main:7::setupRasterIrq:37 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [152] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 [ ] ( main:7::setupRasterIrq:37 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [153] *((const void()**) HARDWARE_IRQ#0) ← (const void()*) setupRasterIrq::irqRoutine#0 [ ] ( main:7::setupRasterIrq:37 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [158] *((byte*) initSprites::sp#2) ← (byte) 0 [ initSprites::sp#2 ] ( main:7::initSprites:35 [ SCREEN_COPY#0 SCREEN_DIST#0 initSprites::sp#2 ] ) always clobbers reg byte a reg byte y 
Statement [160] if((byte*) initSprites::sp#1<(const byte*) SPRITE_DATA#0+(const byte) NUM_PROCESSING#0*(byte) $40) goto initSprites::@1 [ initSprites::sp#1 ] ( main:7::initSprites:35 [ SCREEN_COPY#0 SCREEN_DIST#0 initSprites::sp#1 ] ) always clobbers reg byte a 
Statement [162] *((const byte*) SPRITES_COLS#0 + (byte) initSprites::i#2) ← (const byte) LIGHT_BLUE#0 [ initSprites::i#2 ] ( main:7::initSprites:35 [ SCREEN_COPY#0 SCREEN_DIST#0 initSprites::i#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:26 [ initSprites::i#2 initSprites::i#1 ]
Statement [165] *((const byte*) SPRITES_MC#0) ← (byte) 0 [ ] ( main:7::initSprites:35 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [166] *((const byte*) SPRITES_EXPAND_X#0) ← (byte) 0 [ ] ( main:7::initSprites:35 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [167] *((const byte*) SPRITES_EXPAND_Y#0) ← (byte) 0 [ ] ( main:7::initSprites:35 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [171] (byte*) init_dist_screen::screen_bottomline#0 ← (byte*) init_dist_screen::screen#0 + (word)(number) $28*(number) $18 [ init_dist_screen::screen#0 init_dist_screen::screen_bottomline#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 init_dist_screen::screen_bottomline#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [173] (byte) init_dist_screen::y2#0 ← (byte) init_dist_screen::y#10 << (byte) 1 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::y2#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::y2#0 SQUARES#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:27 [ init_dist_screen::y#10 init_dist_screen::y#1 ]
Statement [175] (byte~) init_dist_screen::$5 ← (byte) $18 - (byte) init_dist_screen::y2#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::$5 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::$5 SQUARES#1 ] ) always clobbers reg byte a 
Statement [179] (word) sqr::return#2 ← (word) sqr::return#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 sqr::return#2 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 sqr::return#2 SQUARES#1 ] ) always clobbers reg byte a 
Statement [180] (word) init_dist_screen::yds#0 ← (word) sqr::return#2 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [182] (byte) init_dist_screen::x2#0 ← (byte) init_dist_screen::x#2 << (byte) 1 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::x2#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::x2#0 SQUARES#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:33 [ init_dist_screen::x#2 init_dist_screen::x#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:34 [ init_dist_screen::xb#2 init_dist_screen::xb#1 ]
Statement [184] (byte~) init_dist_screen::$13 ← (byte) $27 - (byte) init_dist_screen::x2#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::$13 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::$13 SQUARES#1 ] ) always clobbers reg byte a 
Statement [188] (word) sqr::return#3 ← (word) sqr::return#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqr::return#3 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqr::return#3 SQUARES#1 ] ) always clobbers reg byte a 
Statement [189] (word) init_dist_screen::xds#0 ← (word) sqr::return#3 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::xds#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::xds#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [190] (word) init_dist_screen::ds#0 ← (word) init_dist_screen::xds#0 + (word) init_dist_screen::yds#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::ds#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::ds#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [191] (word) sqrt::val#0 ← (word) init_dist_screen::ds#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqrt::val#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqrt::val#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [202] (byte*) init_dist_screen::screen_topline#1 ← (byte*) init_dist_screen::screen_topline#10 + (byte) $28 [ init_dist_screen::y#10 init_dist_screen::screen_bottomline#10 init_dist_screen::screen_topline#1 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_bottomline#10 init_dist_screen::screen_topline#1 SQUARES#1 ] ) always clobbers reg byte a 
Statement [203] (byte*) init_dist_screen::screen_bottomline#1 ← (byte*) init_dist_screen::screen_bottomline#10 - (byte) $28 [ init_dist_screen::y#10 init_dist_screen::screen_topline#1 init_dist_screen::screen_bottomline#1 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#1 init_dist_screen::screen_bottomline#1 SQUARES#1 ] ) always clobbers reg byte a 
Statement [209] (word) bsearch16u::key#0 ← (word) sqrt::val#0 [ bsearch16u::key#0 SQUARES#1 ] ( main:7::init_dist_screen:10::sqrt:192 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 bsearch16u::key#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [210] (word*) bsearch16u::items#1 ← (word*)(void*) SQUARES#1 [ bsearch16u::key#0 bsearch16u::items#1 SQUARES#1 ] ( main:7::init_dist_screen:10::sqrt:192 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 bsearch16u::key#0 bsearch16u::items#1 SQUARES#1 ] ) always clobbers reg byte a 
Statement [212] (word*) bsearch16u::return#3 ← (word*) bsearch16u::return#1 [ SQUARES#1 bsearch16u::return#3 ] ( main:7::init_dist_screen:10::sqrt:192 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::return#3 ] ) always clobbers reg byte a 
Statement [213] (word*) sqrt::found#0 ← (word*) bsearch16u::return#3 [ SQUARES#1 sqrt::found#0 ] ( main:7::init_dist_screen:10::sqrt:192 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqrt::found#0 ] ) always clobbers reg byte a 
Statement [214] (word~) sqrt::$3 ← (word*) sqrt::found#0 - (word*)(void*) SQUARES#1 [ SQUARES#1 sqrt::$3 ] ( main:7::init_dist_screen:10::sqrt:192 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqrt::$3 ] ) always clobbers reg byte a 
Statement [215] (word~) sqrt::$1 ← (word~) sqrt::$3 >> (byte) 1 [ SQUARES#1 sqrt::$1 ] ( main:7::init_dist_screen:10::sqrt:192 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqrt::$1 ] ) always clobbers reg byte a 
Statement [216] (byte) sqrt::return#0 ← (byte)(word~) sqrt::$1 [ sqrt::return#0 SQUARES#1 ] ( main:7::init_dist_screen:10::sqrt:192 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqrt::return#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [221] if(*((word*) bsearch16u::items#2)<=(word) bsearch16u::key#0) goto bsearch16u::@2 [ bsearch16u::items#2 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::items#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:27 [ init_dist_screen::y#10 init_dist_screen::y#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:33 [ init_dist_screen::x#2 init_dist_screen::x#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:34 [ init_dist_screen::xb#2 init_dist_screen::xb#1 ]
Statement [222] (word*~) bsearch16u::$2 ← (word*) bsearch16u::items#2 - (byte) 1*(const byte) SIZEOF_WORD [ bsearch16u::$2 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::$2 ] ) always clobbers reg byte a 
Statement [226] (byte~) bsearch16u::$6 ← (byte) bsearch16u::num#3 >> (byte) 1 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$6 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$6 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:38 [ bsearch16u::num#5 bsearch16u::num#1 bsearch16u::num#3 bsearch16u::num#0 ]
Statement [227] (byte~) bsearch16u::$16 ← (byte~) bsearch16u::$6 << (byte) 1 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$16 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$16 ] ) always clobbers reg byte a 
Statement [228] (word*) bsearch16u::pivot#0 ← (word*) bsearch16u::items#2 + (byte~) bsearch16u::$16 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ) always clobbers reg byte a 
Statement [229] (signed word) bsearch16u::result#0 ← (signed word)(word) bsearch16u::key#0 - (signed word)*((word*) bsearch16u::pivot#0) [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:38 [ bsearch16u::num#5 bsearch16u::num#1 bsearch16u::num#3 bsearch16u::num#0 ]
Statement [230] if((signed word) bsearch16u::result#0!=(signed byte) 0) goto bsearch16u::@6 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ) always clobbers reg byte a 
Statement [231] (word*~) bsearch16u::return#6 ← (word*) bsearch16u::pivot#0 [ bsearch16u::return#6 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::return#6 ] ) always clobbers reg byte a 
Statement [232] if((signed word) bsearch16u::result#0<=(signed byte) 0) goto bsearch16u::@7 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ) always clobbers reg byte a 
Statement [233] (word*) bsearch16u::items#0 ← (word*) bsearch16u::pivot#0 + (byte) 1*(const byte) SIZEOF_WORD [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#0 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#0 ] ) always clobbers reg byte a 
Statement [238] (byte~) sqr::$0 ← (byte) sqr::val#2 << (byte) 1 [ SQUARES#1 sqr::$0 ] ( main:7::init_dist_screen:10::sqr:178 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 SQUARES#1 sqr::$0 ] main:7::init_dist_screen:10::sqr:187 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqr::$0 ] ) always clobbers reg byte a 
Statement [239] (word) sqr::return#0 ← *((word*)(void*) SQUARES#1 + (byte~) sqr::$0) [ sqr::return#0 SQUARES#1 ] ( main:7::init_dist_screen:10::sqr:178 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 sqr::return#0 SQUARES#1 ] main:7::init_dist_screen:10::sqr:187 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqr::return#0 SQUARES#1 ] ) always clobbers reg byte a reg byte y 
Statement [243] (void*) SQUARES#1 ← (void*)(byte*) malloc::mem#0 [ SQUARES#1 ] ( main:7::init_dist_screen:10::init_squares:170 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [244] (word*) init_squares::squares#0 ← (word*)(void*) SQUARES#1 [ SQUARES#1 init_squares::squares#0 ] ( main:7::init_dist_screen:10::init_squares:170 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 SQUARES#1 init_squares::squares#0 ] ) always clobbers reg byte a 
Statement [246] *((word*) init_squares::squares#2) ← (word) init_squares::sqr#2 [ SQUARES#1 init_squares::sqr#2 init_squares::squares#2 init_squares::i#2 ] ( main:7::init_dist_screen:10::init_squares:170 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 SQUARES#1 init_squares::sqr#2 init_squares::squares#2 init_squares::i#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:44 [ init_squares::i#2 init_squares::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:44 [ init_squares::i#2 init_squares::i#1 ]
Statement [247] (word*) init_squares::squares#1 ← (word*) init_squares::squares#2 + (const byte) SIZEOF_WORD [ SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 ] ( main:7::init_dist_screen:10::init_squares:170 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 ] ) always clobbers reg byte a 
Statement [248] (byte~) init_squares::$3 ← (byte) init_squares::i#2 << (byte) 1 [ SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 init_squares::$3 ] ( main:7::init_dist_screen:10::init_squares:170 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 init_squares::$3 ] ) always clobbers reg byte a 
Statement [250] (word) init_squares::sqr#1 ← (word) init_squares::sqr#2 + (byte~) init_squares::$4 [ SQUARES#1 init_squares::i#2 init_squares::sqr#1 init_squares::squares#1 ] ( main:7::init_dist_screen:10::init_squares:170 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 SQUARES#1 init_squares::i#2 init_squares::sqr#1 init_squares::squares#1 ] ) always clobbers reg byte a 
Statement [255] (byte*) malloc::mem#0 ← (byte*) heap_head#12 [ malloc::mem#0 heap_head#12 malloc::size#3 ] ( malloc:2 [ malloc::mem#0 heap_head#12 malloc::size#3 ] malloc:4 [ malloc::mem#0 heap_head#12 malloc::size#3 ] main:7::init_dist_screen:10::init_squares:170::malloc:242 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 malloc::mem#0 heap_head#12 malloc::size#3 ] ) always clobbers reg byte a 
Statement [256] (byte*) heap_head#1 ← (byte*) heap_head#12 + (word) malloc::size#3 [ malloc::mem#0 heap_head#1 ] ( malloc:2 [ malloc::mem#0 heap_head#1 ] malloc:4 [ malloc::mem#0 heap_head#1 ] main:7::init_dist_screen:10::init_squares:170::malloc:242 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 malloc::mem#0 heap_head#1 ] ) always clobbers reg byte a 
Statement [261] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_TOP#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [262] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqTop() [ ] (  [ ] ) always clobbers reg byte a 
Statement [263] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [264] return  [ ] (  [ ] ) always clobbers reg byte a reg byte x reg byte y 
Statement [267] (byte) processChars::$67 ← (byte) processChars::i#10 << (byte) 1 [ processChars::i#10 processChars::numActive#10 processChars::$67 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::$67 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:49 [ processChars::i#10 processChars::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:50 [ processChars::numActive#10 processChars::numActive#3 processChars::numActive#1 ]
Statement [268] (byte) processChars::$68 ← (byte) processChars::$67 + (byte) processChars::i#10 [ processChars::i#10 processChars::numActive#10 processChars::$68 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::$68 ] ) always clobbers reg byte a 
Statement [269] (byte) processChars::$69 ← (byte) processChars::$68 << (byte) 1 [ processChars::i#10 processChars::numActive#10 processChars::$69 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::$69 ] ) always clobbers reg byte a 
Statement [270] (byte) processChars::$70 ← (byte) processChars::$69 + (byte) processChars::i#10 [ processChars::i#10 processChars::numActive#10 processChars::$70 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::$70 ] ) always clobbers reg byte a 
Statement [271] (byte~) processChars::$37 ← (byte) processChars::$70 << (byte) 1 [ processChars::i#10 processChars::numActive#10 processChars::$37 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::$37 ] ) always clobbers reg byte a 
Statement [272] (struct ProcessingSprite*) processChars::processing#0 ← (const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) processChars::$37 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 ] ) always clobbers reg byte a 
Statement [273] (byte) processChars::bitmask#0 ← (byte) 1 << *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID) [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:49 [ processChars::i#10 processChars::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:50 [ processChars::numActive#10 processChars::numActive#3 processChars::numActive#1 ]
Statement [274] if(*((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS)==(const byte) STATUS_FREE) goto processChars::@2 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:181 [ processChars::bitmask#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:181 [ processChars::bitmask#0 ]
Statement [275] if(*((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS)!=(const byte) STATUS_NEW) goto processChars::@3 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte y 
Statement [276] *(*((byte**)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR)) ← (byte) ' ' [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte x reg byte y 
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:49 [ processChars::i#10 processChars::i#1 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:50 [ processChars::numActive#10 processChars::numActive#3 processChars::numActive#1 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:181 [ processChars::bitmask#0 ]
Statement [277] *((const byte*) SPRITES_ENABLE#0) ← *((const byte*) SPRITES_ENABLE#0) | (byte) processChars::bitmask#0 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a 
Statement [278] *((const byte*) SPRITES_COLS#0 + *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID)) ← *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL) [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte y 
Statement [279] *((const byte*) SCREEN#0+(const word) SPRITE_PTRS#0 + *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID)) ← *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR) [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte y 
Statement [280] *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS) ← (const byte) STATUS_PROCESSING [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte y 
Statement [281] (word) processChars::xpos#0 ← *((word*)(struct ProcessingSprite*) processChars::processing#0) >> (byte) 4 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 ] ) always clobbers reg byte a reg byte y 
Statement [282] (byte~) processChars::$11 ← > (word) processChars::xpos#0 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$11 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$11 ] ) always clobbers reg byte a 
Statement [284] (byte~) processChars::$12 ← (byte) $ff ^ (byte) processChars::bitmask#0 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$12 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$12 ] ) always clobbers reg byte a 
Statement [285] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) & (byte~) processChars::$12 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 ] ) always clobbers reg byte a 
Statement [286] (byte~) processChars::$17 ← (byte) processChars::i#10 << (byte) 1 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 ] ) always clobbers reg byte a 
Statement [287] (byte~) processChars::$14 ← (byte)(word) processChars::xpos#0 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 processChars::$14 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 processChars::$14 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:186 [ processChars::$17 ]
Statement [289] (word~) processChars::$15 ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) >> (byte) 4 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 processChars::$15 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 processChars::$15 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:186 [ processChars::$17 ]
Statement [290] (byte) processChars::ypos#0 ← (byte)(word~) processChars::$15 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 processChars::ypos#0 ] ) always clobbers reg byte a 
Statement [292] if(*((word*)(struct ProcessingSprite*) processChars::processing#0)<(const word) XPOS_LEFTMOST#0) goto processChars::@6 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:190 [ processChars::ypos#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:190 [ processChars::ypos#0 ]
Statement [293] if(*((word*)(struct ProcessingSprite*) processChars::processing#0)>(const word) XPOS_RIGHTMOST#0) goto processChars::@6 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ) always clobbers reg byte a reg byte y 
Statement [294] if(*((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y)<(const word) YPOS_TOPMOST#0) goto processChars::@6 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ) always clobbers reg byte a reg byte y 
Statement [295] if(*((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y)>(const word) YPOS_BOTTOMMOST#0) goto processChars::@6 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ) always clobbers reg byte a reg byte y 
Statement [296] (word~) processChars::$25 ← (word) processChars::xpos#0 >> (byte) 3 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 processChars::$25 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 processChars::$25 ] ) always clobbers reg byte a 
Statement [297] (byte~) processChars::$26 ← (byte)(word~) processChars::$25 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 processChars::$26 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 processChars::$26 ] ) always clobbers reg byte a 
Statement [299] (byte~) processChars::$38 ← (byte) processChars::xchar#0 << (byte) 1 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 processChars::$38 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 processChars::$38 ] ) always clobbers reg byte a 
Statement [300] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) + *((const word[$28]) VXSIN#0 + (byte~) processChars::$38) [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 ] ) always clobbers reg byte a reg byte y 
Statement [301] *((word*)(struct ProcessingSprite*) processChars::processing#0) ← *((word*)(struct ProcessingSprite*) processChars::processing#0) + *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 ] ) always clobbers reg byte a reg byte y 
Statement [302] (byte~) processChars::$30 ← (byte) processChars::ypos#0 >> (byte) 3 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::$30 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::$30 ] ) always clobbers reg byte a 
Statement [304] (byte~) processChars::$39 ← (byte) processChars::ychar#0 << (byte) 1 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::$39 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::$39 ] ) always clobbers reg byte a 
Statement [305] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) + *((const word[$19]) VYSIN#0 + (byte~) processChars::$39) [ processChars::i#10 processChars::numActive#10 processChars::processing#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 ] ) always clobbers reg byte a reg byte y 
Statement [306] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) + *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) [ processChars::i#10 processChars::numActive#10 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 ] ) always clobbers reg byte a reg byte y 
Statement [310] if((byte) processChars::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto processChars::@1 [ processChars::i#1 processChars::numActive#3 ] ( processChars:260 [ processChars::i#1 processChars::numActive#3 ] ) always clobbers reg byte a 
Statement [312] *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS) ← (const byte) STATUS_FREE [ processChars::i#10 processChars::numActive#10 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte y 
Statement [313] (byte~) processChars::$33 ← (byte) $ff ^ (byte) processChars::bitmask#0 [ processChars::i#10 processChars::numActive#10 processChars::$33 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::$33 ] ) always clobbers reg byte a 
Statement [314] *((const byte*) SPRITES_ENABLE#0) ← *((const byte*) SPRITES_ENABLE#0) & (byte~) processChars::$33 [ processChars::i#10 processChars::numActive#10 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 ] ) always clobbers reg byte a 
Statement [315] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) | (byte) processChars::bitmask#0 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 ] ) always clobbers reg byte a 
Statement [317] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_MIDDLE#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [318] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqBottom() [ ] (  [ ] ) always clobbers reg byte a 
Statement [319] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [320] return  [ ] (  [ ] ) always clobbers reg byte a reg byte x reg byte y 
Statement [3] (void*) SCREEN_COPY#0 ← (void*)(byte*) malloc::mem#0 [ SCREEN_COPY#0 heap_head#1 ] ( ) always clobbers reg byte a 
Statement [5] (void*) SCREEN_DIST#0 ← (void*)(byte*) malloc::mem#0 [ SCREEN_COPY#0 SCREEN_DIST#0 heap_head#1 ] ( ) always clobbers reg byte a 
Statement [9] (byte*) init_dist_screen::screen#0 ← (byte*)(void*) SCREEN_DIST#0 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 heap_head#1 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 heap_head#1 ] ) always clobbers reg byte a 
Statement [11] (byte*) main::dst#0 ← (byte*)(void*) SCREEN_COPY#0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::dst#0 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::dst#0 ] ) always clobbers reg byte a 
Statement [13] *((byte*) main::dst#2) ← *((byte*) main::src#2) [ SCREEN_COPY#0 SCREEN_DIST#0 main::src#2 main::dst#2 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::src#2 main::dst#2 ] ) always clobbers reg byte a reg byte y 
Statement [16] if((byte*) main::src#1!=(const byte*) SCREEN#0+(word) $3e8) goto main::@1 [ SCREEN_COPY#0 SCREEN_DIST#0 main::src#1 main::dst#1 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::src#1 main::dst#1 ] ) always clobbers reg byte a 
Statement [18] (byte) main::$26 ← (byte) main::i#2 << (byte) 1 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$26 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$26 ] ) always clobbers reg byte a 
Statement [19] (byte) main::$27 ← (byte) main::$26 + (byte) main::i#2 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$27 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$27 ] ) always clobbers reg byte a 
Statement [20] (byte) main::$28 ← (byte) main::$27 << (byte) 1 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$28 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$28 ] ) always clobbers reg byte a 
Statement [21] (byte) main::$29 ← (byte) main::$28 + (byte) main::i#2 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$29 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$29 ] ) always clobbers reg byte a 
Statement [22] (byte~) main::$16 ← (byte) main::$29 << (byte) 1 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [23] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) main::$16) ← (byte) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [24] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y + (byte~) main::$16) ← (byte) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [25] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX + (byte~) main::$16) ← (byte) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [26] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY + (byte~) main::$16) ← (byte) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [27] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID + (byte~) main::$16) ← (byte) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [28] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR + (byte~) main::$16) ← (byte) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [29] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL + (byte~) main::$16) ← (byte) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [30] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) main::$16) ← (const byte) STATUS_FREE [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [31] *((byte**)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR + (byte~) main::$16) ← (byte*) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 ] ) always clobbers reg byte a 
Statement [47] *((const byte*) SCREEN#0+(word) $3e7) ← (byte) '.' [ ] ( main:7 [ ] ) always clobbers reg byte a 
Statement [55] (byte) startProcessing::$42 ← (byte) startProcessing::i#2 << (byte) 1 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$42 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$42 ] ) always clobbers reg byte a 
Statement [56] (byte) startProcessing::$43 ← (byte) startProcessing::$42 + (byte) startProcessing::i#2 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$43 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$43 ] ) always clobbers reg byte a 
Statement [57] (byte) startProcessing::$44 ← (byte) startProcessing::$43 << (byte) 1 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$44 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$44 ] ) always clobbers reg byte a 
Statement [58] (byte) startProcessing::$45 ← (byte) startProcessing::$44 + (byte) startProcessing::i#2 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$45 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$45 ] ) always clobbers reg byte a 
Statement [59] (byte~) startProcessing::$30 ← (byte) startProcessing::$45 << (byte) 1 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$30 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$30 ] ) always clobbers reg byte a 
Statement [60] if(*((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) startProcessing::$30)!=(const byte) STATUS_FREE) goto startProcessing::@3 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 ] ) always clobbers reg byte a 
Statement [63] (word~) startProcessing::$0 ← (word)(byte) startProcessing::center_y#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$0 ] ) always clobbers reg byte a 
Statement [64] (word) startProcessing::$47 ← (word~) startProcessing::$0 << (byte) 2 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$0 startProcessing::$47 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$0 startProcessing::$47 ] ) always clobbers reg byte a 
Statement [65] (word) startProcessing::$48 ← (word) startProcessing::$47 + (word~) startProcessing::$0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$48 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$48 ] ) always clobbers reg byte a 
Statement [66] (word~) startProcessing::$1 ← (word) startProcessing::$48 << (byte) 3 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$1 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$1 ] ) always clobbers reg byte a 
Statement [67] (word) startProcessing::offset#0 ← (word~) startProcessing::$1 + (byte) startProcessing::center_x#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::offset#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::offset#0 ] ) always clobbers reg byte a 
Statement [68] (byte*) startProcessing::colPtr#0 ← (const byte*) COLS#0 + (word) startProcessing::offset#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::offset#0 startProcessing::colPtr#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::offset#0 startProcessing::colPtr#0 ] ) always clobbers reg byte a 
Statement [69] (byte) startProcessing::spriteCol#0 ← *((byte*) startProcessing::colPtr#0) [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::offset#0 startProcessing::spriteCol#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::offset#0 startProcessing::spriteCol#0 ] ) always clobbers reg byte a reg byte y 
Statement [70] (byte*) startProcessing::screenPtr#0 ← (const byte*) SCREEN#0 + (word) startProcessing::offset#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 ] ) always clobbers reg byte a 
Statement [71] (word~) startProcessing::$5 ← (word)(byte) startProcessing::freeIdx#2 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$5 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$5 ] ) always clobbers reg byte a 
Statement [72] (word~) startProcessing::$6 ← (word~) startProcessing::$5 << (byte) 6 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$6 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$6 ] ) always clobbers reg byte a 
Statement [73] (byte*) startProcessing::spriteData#0 ← (const byte*) SPRITE_DATA#0 + (word~) startProcessing::$6 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 ] ) always clobbers reg byte a 
Statement [74] (byte) startProcessing::ch#0 ← *((byte*) startProcessing::screenPtr#0) [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::ch#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::ch#0 ] ) always clobbers reg byte a reg byte y 
Statement [75] (word~) startProcessing::$8 ← (word)(byte) startProcessing::ch#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::$8 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::$8 ] ) always clobbers reg byte a 
Statement [76] (word~) startProcessing::$9 ← (word~) startProcessing::$8 << (byte) 3 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::$9 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::$9 ] ) always clobbers reg byte a 
Statement [77] (byte*) startProcessing::chargenData#0 ← (const byte*) CHARGEN#0 + (word~) startProcessing::$9 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::chargenData#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::chargenData#0 ] ) always clobbers reg byte a 
Statement [79] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::chargenData#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::chargenData#0 ] ) always clobbers reg byte a 
Statement [81] *((byte*) startProcessing::spriteData#2) ← *((byte*) startProcessing::chargenData#2) [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::chargenData#2 startProcessing::spriteData#2 startProcessing::i1#2 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::chargenData#2 startProcessing::spriteData#2 startProcessing::i1#2 ] ) always clobbers reg byte a reg byte y 
Statement [82] (byte*) startProcessing::spriteData#1 ← (byte*) startProcessing::spriteData#2 + (byte) 3 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::chargenData#2 startProcessing::i1#2 startProcessing::spriteData#1 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::chargenData#2 startProcessing::i1#2 startProcessing::spriteData#1 ] ) always clobbers reg byte a 
Statement [86] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 ] ) always clobbers reg byte a 
Statement [88] (word~) startProcessing::$11 ← (word)(byte) startProcessing::center_x#0 [ startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$11 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$11 ] ) always clobbers reg byte a 
Statement [89] (word~) startProcessing::$12 ← (word~) startProcessing::$11 << (byte) 3 [ startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$12 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$12 ] ) always clobbers reg byte a 
Statement [90] (word~) startProcessing::$13 ← (const byte) BORDER_XPOS_LEFT#0 + (word~) startProcessing::$12 [ startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$13 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$13 ] ) always clobbers reg byte a 
Statement [91] (word) startProcessing::spriteX#0 ← (word~) startProcessing::$13 << (byte) 4 [ startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 ] ) always clobbers reg byte a 
Statement [92] (word~) startProcessing::$15 ← (word)(byte) startProcessing::center_y#0 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::$15 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::$15 ] ) always clobbers reg byte a 
Statement [93] (word~) startProcessing::$16 ← (word~) startProcessing::$15 << (byte) 3 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::$16 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::$16 ] ) always clobbers reg byte a 
Statement [94] (word~) startProcessing::$17 ← (const byte) BORDER_YPOS_TOP#0 + (word~) startProcessing::$16 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::$17 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::$17 ] ) always clobbers reg byte a 
Statement [95] (word) startProcessing::spriteY#0 ← (word~) startProcessing::$17 << (byte) 4 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 ] ) always clobbers reg byte a 
Statement [96] (byte) startProcessing::spritePtr#0 ← (byte)(const byte*) SPRITE_DATA#0/(byte) $40 + (byte) startProcessing::freeIdx#2 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 ] ) always clobbers reg byte a 
Statement [97] (byte~) startProcessing::$22 ← (byte) startProcessing::freeIdx#2 << (byte) 3 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$22 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$22 ] ) always clobbers reg byte a 
Statement [98] (word~) startProcessing::$23 ← (word)(byte~) startProcessing::$22 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 ] ) always clobbers reg byte a 
Statement [99] (byte) startProcessing::$50 ← (byte) startProcessing::freeIdx#2 << (byte) 1 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$50 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$50 ] ) always clobbers reg byte a 
Statement [100] (byte) startProcessing::$51 ← (byte) startProcessing::$50 + (byte) startProcessing::freeIdx#2 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$51 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$51 ] ) always clobbers reg byte a 
Statement [101] (byte) startProcessing::$52 ← (byte) startProcessing::$51 << (byte) 1 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$52 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$52 ] ) always clobbers reg byte a 
Statement [102] (byte) startProcessing::$53 ← (byte) startProcessing::$52 + (byte) startProcessing::freeIdx#2 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$53 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$53 ] ) always clobbers reg byte a 
Statement [103] (byte~) startProcessing::$31 ← (byte) startProcessing::$53 << (byte) 1 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [104] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) startProcessing::$31) ← (word) startProcessing::spriteX#0 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [105] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y + (byte~) startProcessing::$31) ← (word) startProcessing::spriteY#0 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [106] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX + (byte~) startProcessing::$31) ← (word~) startProcessing::$23 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [107] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY + (byte~) startProcessing::$31) ← (byte) $3c [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [108] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID + (byte~) startProcessing::$31) ← (byte) startProcessing::freeIdx#2 [ startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [109] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR + (byte~) startProcessing::$31) ← (byte) startProcessing::spritePtr#0 [ startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [110] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL + (byte~) startProcessing::$31) ← (byte) startProcessing::spriteCol#0 [ startProcessing::screenPtr#0 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::screenPtr#0 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [111] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) startProcessing::$31) ← (const byte) STATUS_NEW [ startProcessing::screenPtr#0 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::screenPtr#0 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [112] *((byte**)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR + (byte~) startProcessing::$31) ← (byte*) startProcessing::screenPtr#0 [ ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [118] (byte*) getCharToProcess::screen_line#0 ← (byte*)(void*) SCREEN_COPY#0 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#0 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#0 ] ) always clobbers reg byte a 
Statement [119] (byte*) getCharToProcess::dist_line#0 ← (byte*)(void*) SCREEN_DIST#0 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#0 getCharToProcess::dist_line#0 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#0 getCharToProcess::dist_line#0 ] ) always clobbers reg byte a 
Statement [122] if(*((byte*) getCharToProcess::screen_line#4 + (byte) getCharToProcess::x#2)==(byte) ' ') goto getCharToProcess::@11 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#4 getCharToProcess::dist_line#6 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#4 getCharToProcess::dist_line#6 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 ] ) always clobbers reg byte a 
Statement [123] (byte) getCharToProcess::dist#0 ← *((byte*) getCharToProcess::dist_line#6 + (byte) getCharToProcess::x#2) [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#4 getCharToProcess::dist_line#6 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::dist#0 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#4 getCharToProcess::dist_line#6 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::dist#0 ] ) always clobbers reg byte a 
Statement [130] (byte*) getCharToProcess::screen_line#1 ← (byte*) getCharToProcess::screen_line#4 + (byte) $28 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::dist_line#6 getCharToProcess::y#7 getCharToProcess::screen_line#1 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::dist_line#6 getCharToProcess::y#7 getCharToProcess::screen_line#1 ] ) always clobbers reg byte a 
Statement [131] (byte*) getCharToProcess::dist_line#1 ← (byte*) getCharToProcess::dist_line#6 + (byte) $28 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::y#7 getCharToProcess::screen_line#1 getCharToProcess::dist_line#1 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::y#7 getCharToProcess::screen_line#1 getCharToProcess::dist_line#1 ] ) always clobbers reg byte a 
Statement [135] (word~) getCharToProcess::$8 ← (word)(byte) getCharToProcess::return_y#1 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$8 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$8 ] ) always clobbers reg byte a 
Statement [136] (word) getCharToProcess::$12 ← (word~) getCharToProcess::$8 << (byte) 2 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$8 getCharToProcess::$12 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$8 getCharToProcess::$12 ] ) always clobbers reg byte a 
Statement [137] (word) getCharToProcess::$13 ← (word) getCharToProcess::$12 + (word~) getCharToProcess::$8 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$13 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$13 ] ) always clobbers reg byte a 
Statement [138] (word~) getCharToProcess::$9 ← (word) getCharToProcess::$13 << (byte) 3 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$9 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$9 ] ) always clobbers reg byte a 
Statement [139] (byte*~) getCharToProcess::$10 ← (byte*)(void*) SCREEN_COPY#0 + (word~) getCharToProcess::$9 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$10 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$10 ] ) always clobbers reg byte a 
Statement [140] *((byte*~) getCharToProcess::$10 + (byte) getCharToProcess::return_x#1) ← (byte) ' ' [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 ] ) always clobbers reg byte a 
Statement [147] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:7::setupRasterIrq:37 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [148] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:7::setupRasterIrq:37 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [149] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 [ ] ( main:7::setupRasterIrq:37 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [150] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f [ ] ( main:7::setupRasterIrq:37 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [151] *((const byte*) RASTER#0) ← <(const byte) RASTER_IRQ_TOP#0 [ ] ( main:7::setupRasterIrq:37 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [152] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 [ ] ( main:7::setupRasterIrq:37 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [153] *((const void()**) HARDWARE_IRQ#0) ← (const void()*) setupRasterIrq::irqRoutine#0 [ ] ( main:7::setupRasterIrq:37 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [158] *((byte*) initSprites::sp#2) ← (byte) 0 [ initSprites::sp#2 ] ( main:7::initSprites:35 [ SCREEN_COPY#0 SCREEN_DIST#0 initSprites::sp#2 ] ) always clobbers reg byte a reg byte y 
Statement [160] if((byte*) initSprites::sp#1<(const byte*) SPRITE_DATA#0+(const byte) NUM_PROCESSING#0*(byte) $40) goto initSprites::@1 [ initSprites::sp#1 ] ( main:7::initSprites:35 [ SCREEN_COPY#0 SCREEN_DIST#0 initSprites::sp#1 ] ) always clobbers reg byte a 
Statement [162] *((const byte*) SPRITES_COLS#0 + (byte) initSprites::i#2) ← (const byte) LIGHT_BLUE#0 [ initSprites::i#2 ] ( main:7::initSprites:35 [ SCREEN_COPY#0 SCREEN_DIST#0 initSprites::i#2 ] ) always clobbers reg byte a 
Statement [165] *((const byte*) SPRITES_MC#0) ← (byte) 0 [ ] ( main:7::initSprites:35 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [166] *((const byte*) SPRITES_EXPAND_X#0) ← (byte) 0 [ ] ( main:7::initSprites:35 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [167] *((const byte*) SPRITES_EXPAND_Y#0) ← (byte) 0 [ ] ( main:7::initSprites:35 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [171] (byte*) init_dist_screen::screen_bottomline#0 ← (byte*) init_dist_screen::screen#0 + (word)(number) $28*(number) $18 [ init_dist_screen::screen#0 init_dist_screen::screen_bottomline#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 init_dist_screen::screen_bottomline#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [173] (byte) init_dist_screen::y2#0 ← (byte) init_dist_screen::y#10 << (byte) 1 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::y2#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::y2#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [175] (byte~) init_dist_screen::$5 ← (byte) $18 - (byte) init_dist_screen::y2#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::$5 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::$5 SQUARES#1 ] ) always clobbers reg byte a 
Statement [179] (word) sqr::return#2 ← (word) sqr::return#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 sqr::return#2 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 sqr::return#2 SQUARES#1 ] ) always clobbers reg byte a 
Statement [180] (word) init_dist_screen::yds#0 ← (word) sqr::return#2 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [182] (byte) init_dist_screen::x2#0 ← (byte) init_dist_screen::x#2 << (byte) 1 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::x2#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::x2#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [184] (byte~) init_dist_screen::$13 ← (byte) $27 - (byte) init_dist_screen::x2#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::$13 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::$13 SQUARES#1 ] ) always clobbers reg byte a 
Statement [188] (word) sqr::return#3 ← (word) sqr::return#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqr::return#3 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqr::return#3 SQUARES#1 ] ) always clobbers reg byte a 
Statement [189] (word) init_dist_screen::xds#0 ← (word) sqr::return#3 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::xds#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::xds#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [190] (word) init_dist_screen::ds#0 ← (word) init_dist_screen::xds#0 + (word) init_dist_screen::yds#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::ds#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::ds#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [191] (word) sqrt::val#0 ← (word) init_dist_screen::ds#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqrt::val#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqrt::val#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [195] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:147 [ init_dist_screen::d#0 ]
Statement [196] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ) always clobbers reg byte y 
Statement [197] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ) always clobbers reg byte y 
Statement [198] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 ] ) always clobbers reg byte y 
Statement [202] (byte*) init_dist_screen::screen_topline#1 ← (byte*) init_dist_screen::screen_topline#10 + (byte) $28 [ init_dist_screen::y#10 init_dist_screen::screen_bottomline#10 init_dist_screen::screen_topline#1 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_bottomline#10 init_dist_screen::screen_topline#1 SQUARES#1 ] ) always clobbers reg byte a 
Statement [203] (byte*) init_dist_screen::screen_bottomline#1 ← (byte*) init_dist_screen::screen_bottomline#10 - (byte) $28 [ init_dist_screen::y#10 init_dist_screen::screen_topline#1 init_dist_screen::screen_bottomline#1 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#1 init_dist_screen::screen_bottomline#1 SQUARES#1 ] ) always clobbers reg byte a 
Statement [209] (word) bsearch16u::key#0 ← (word) sqrt::val#0 [ bsearch16u::key#0 SQUARES#1 ] ( main:7::init_dist_screen:10::sqrt:192 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 bsearch16u::key#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [210] (word*) bsearch16u::items#1 ← (word*)(void*) SQUARES#1 [ bsearch16u::key#0 bsearch16u::items#1 SQUARES#1 ] ( main:7::init_dist_screen:10::sqrt:192 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 bsearch16u::key#0 bsearch16u::items#1 SQUARES#1 ] ) always clobbers reg byte a 
Statement [212] (word*) bsearch16u::return#3 ← (word*) bsearch16u::return#1 [ SQUARES#1 bsearch16u::return#3 ] ( main:7::init_dist_screen:10::sqrt:192 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::return#3 ] ) always clobbers reg byte a 
Statement [213] (word*) sqrt::found#0 ← (word*) bsearch16u::return#3 [ SQUARES#1 sqrt::found#0 ] ( main:7::init_dist_screen:10::sqrt:192 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqrt::found#0 ] ) always clobbers reg byte a 
Statement [214] (word~) sqrt::$3 ← (word*) sqrt::found#0 - (word*)(void*) SQUARES#1 [ SQUARES#1 sqrt::$3 ] ( main:7::init_dist_screen:10::sqrt:192 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqrt::$3 ] ) always clobbers reg byte a 
Statement [215] (word~) sqrt::$1 ← (word~) sqrt::$3 >> (byte) 1 [ SQUARES#1 sqrt::$1 ] ( main:7::init_dist_screen:10::sqrt:192 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqrt::$1 ] ) always clobbers reg byte a 
Statement [216] (byte) sqrt::return#0 ← (byte)(word~) sqrt::$1 [ sqrt::return#0 SQUARES#1 ] ( main:7::init_dist_screen:10::sqrt:192 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqrt::return#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [221] if(*((word*) bsearch16u::items#2)<=(word) bsearch16u::key#0) goto bsearch16u::@2 [ bsearch16u::items#2 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::items#2 ] ) always clobbers reg byte a reg byte y 
Statement [222] (word*~) bsearch16u::$2 ← (word*) bsearch16u::items#2 - (byte) 1*(const byte) SIZEOF_WORD [ bsearch16u::$2 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::$2 ] ) always clobbers reg byte a 
Statement [226] (byte~) bsearch16u::$6 ← (byte) bsearch16u::num#3 >> (byte) 1 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$6 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$6 ] ) always clobbers reg byte a 
Statement [227] (byte~) bsearch16u::$16 ← (byte~) bsearch16u::$6 << (byte) 1 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$16 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$16 ] ) always clobbers reg byte a 
Statement [228] (word*) bsearch16u::pivot#0 ← (word*) bsearch16u::items#2 + (byte~) bsearch16u::$16 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ) always clobbers reg byte a 
Statement [229] (signed word) bsearch16u::result#0 ← (signed word)(word) bsearch16u::key#0 - (signed word)*((word*) bsearch16u::pivot#0) [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ) always clobbers reg byte a reg byte y 
Statement [230] if((signed word) bsearch16u::result#0!=(signed byte) 0) goto bsearch16u::@6 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ) always clobbers reg byte a 
Statement [231] (word*~) bsearch16u::return#6 ← (word*) bsearch16u::pivot#0 [ bsearch16u::return#6 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::return#6 ] ) always clobbers reg byte a 
Statement [232] if((signed word) bsearch16u::result#0<=(signed byte) 0) goto bsearch16u::@7 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ) always clobbers reg byte a 
Statement [233] (word*) bsearch16u::items#0 ← (word*) bsearch16u::pivot#0 + (byte) 1*(const byte) SIZEOF_WORD [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#0 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#0 ] ) always clobbers reg byte a 
Statement [238] (byte~) sqr::$0 ← (byte) sqr::val#2 << (byte) 1 [ SQUARES#1 sqr::$0 ] ( main:7::init_dist_screen:10::sqr:178 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 SQUARES#1 sqr::$0 ] main:7::init_dist_screen:10::sqr:187 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqr::$0 ] ) always clobbers reg byte a 
Statement [239] (word) sqr::return#0 ← *((word*)(void*) SQUARES#1 + (byte~) sqr::$0) [ sqr::return#0 SQUARES#1 ] ( main:7::init_dist_screen:10::sqr:178 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 sqr::return#0 SQUARES#1 ] main:7::init_dist_screen:10::sqr:187 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqr::return#0 SQUARES#1 ] ) always clobbers reg byte a reg byte y 
Statement [243] (void*) SQUARES#1 ← (void*)(byte*) malloc::mem#0 [ SQUARES#1 ] ( main:7::init_dist_screen:10::init_squares:170 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [244] (word*) init_squares::squares#0 ← (word*)(void*) SQUARES#1 [ SQUARES#1 init_squares::squares#0 ] ( main:7::init_dist_screen:10::init_squares:170 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 SQUARES#1 init_squares::squares#0 ] ) always clobbers reg byte a 
Statement [246] *((word*) init_squares::squares#2) ← (word) init_squares::sqr#2 [ SQUARES#1 init_squares::sqr#2 init_squares::squares#2 init_squares::i#2 ] ( main:7::init_dist_screen:10::init_squares:170 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 SQUARES#1 init_squares::sqr#2 init_squares::squares#2 init_squares::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [247] (word*) init_squares::squares#1 ← (word*) init_squares::squares#2 + (const byte) SIZEOF_WORD [ SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 ] ( main:7::init_dist_screen:10::init_squares:170 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 ] ) always clobbers reg byte a 
Statement [248] (byte~) init_squares::$3 ← (byte) init_squares::i#2 << (byte) 1 [ SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 init_squares::$3 ] ( main:7::init_dist_screen:10::init_squares:170 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 init_squares::$3 ] ) always clobbers reg byte a 
Statement [250] (word) init_squares::sqr#1 ← (word) init_squares::sqr#2 + (byte~) init_squares::$4 [ SQUARES#1 init_squares::i#2 init_squares::sqr#1 init_squares::squares#1 ] ( main:7::init_dist_screen:10::init_squares:170 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 SQUARES#1 init_squares::i#2 init_squares::sqr#1 init_squares::squares#1 ] ) always clobbers reg byte a 
Statement [255] (byte*) malloc::mem#0 ← (byte*) heap_head#12 [ malloc::mem#0 heap_head#12 malloc::size#3 ] ( malloc:2 [ malloc::mem#0 heap_head#12 malloc::size#3 ] malloc:4 [ malloc::mem#0 heap_head#12 malloc::size#3 ] main:7::init_dist_screen:10::init_squares:170::malloc:242 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 malloc::mem#0 heap_head#12 malloc::size#3 ] ) always clobbers reg byte a 
Statement [256] (byte*) heap_head#1 ← (byte*) heap_head#12 + (word) malloc::size#3 [ malloc::mem#0 heap_head#1 ] ( malloc:2 [ malloc::mem#0 heap_head#1 ] malloc:4 [ malloc::mem#0 heap_head#1 ] main:7::init_dist_screen:10::init_squares:170::malloc:242 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 malloc::mem#0 heap_head#1 ] ) always clobbers reg byte a 
Statement [261] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_TOP#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [262] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqTop() [ ] (  [ ] ) always clobbers reg byte a 
Statement [263] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [264] return  [ ] (  [ ] ) always clobbers reg byte a reg byte x reg byte y 
Statement [267] (byte) processChars::$67 ← (byte) processChars::i#10 << (byte) 1 [ processChars::i#10 processChars::numActive#10 processChars::$67 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::$67 ] ) always clobbers reg byte a 
Statement [268] (byte) processChars::$68 ← (byte) processChars::$67 + (byte) processChars::i#10 [ processChars::i#10 processChars::numActive#10 processChars::$68 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::$68 ] ) always clobbers reg byte a 
Statement [269] (byte) processChars::$69 ← (byte) processChars::$68 << (byte) 1 [ processChars::i#10 processChars::numActive#10 processChars::$69 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::$69 ] ) always clobbers reg byte a 
Statement [270] (byte) processChars::$70 ← (byte) processChars::$69 + (byte) processChars::i#10 [ processChars::i#10 processChars::numActive#10 processChars::$70 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::$70 ] ) always clobbers reg byte a 
Statement [271] (byte~) processChars::$37 ← (byte) processChars::$70 << (byte) 1 [ processChars::i#10 processChars::numActive#10 processChars::$37 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::$37 ] ) always clobbers reg byte a 
Statement [272] (struct ProcessingSprite*) processChars::processing#0 ← (const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) processChars::$37 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 ] ) always clobbers reg byte a 
Statement [273] (byte) processChars::bitmask#0 ← (byte) 1 << *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID) [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte x reg byte y 
Statement [274] if(*((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS)==(const byte) STATUS_FREE) goto processChars::@2 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte y 
Statement [275] if(*((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS)!=(const byte) STATUS_NEW) goto processChars::@3 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte y 
Statement [276] *(*((byte**)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR)) ← (byte) ' ' [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte x reg byte y 
Statement [277] *((const byte*) SPRITES_ENABLE#0) ← *((const byte*) SPRITES_ENABLE#0) | (byte) processChars::bitmask#0 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a 
Statement [278] *((const byte*) SPRITES_COLS#0 + *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID)) ← *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL) [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte y 
Statement [279] *((const byte*) SCREEN#0+(const word) SPRITE_PTRS#0 + *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID)) ← *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR) [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte y 
Statement [280] *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS) ← (const byte) STATUS_PROCESSING [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte y 
Statement [281] (word) processChars::xpos#0 ← *((word*)(struct ProcessingSprite*) processChars::processing#0) >> (byte) 4 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 ] ) always clobbers reg byte a reg byte y 
Statement [282] (byte~) processChars::$11 ← > (word) processChars::xpos#0 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$11 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$11 ] ) always clobbers reg byte a 
Statement [284] (byte~) processChars::$12 ← (byte) $ff ^ (byte) processChars::bitmask#0 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$12 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$12 ] ) always clobbers reg byte a 
Statement [285] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) & (byte~) processChars::$12 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 ] ) always clobbers reg byte a 
Statement [286] (byte~) processChars::$17 ← (byte) processChars::i#10 << (byte) 1 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 ] ) always clobbers reg byte a 
Statement [287] (byte~) processChars::$14 ← (byte)(word) processChars::xpos#0 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 processChars::$14 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 processChars::$14 ] ) always clobbers reg byte a 
Statement [289] (word~) processChars::$15 ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) >> (byte) 4 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 processChars::$15 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 processChars::$15 ] ) always clobbers reg byte a reg byte y 
Statement [290] (byte) processChars::ypos#0 ← (byte)(word~) processChars::$15 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 processChars::ypos#0 ] ) always clobbers reg byte a 
Statement [291] *((const byte*) SPRITES_YPOS#0 + (byte~) processChars::$17) ← (byte) processChars::ypos#0 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ) always clobbers reg byte a 
Statement [292] if(*((word*)(struct ProcessingSprite*) processChars::processing#0)<(const word) XPOS_LEFTMOST#0) goto processChars::@6 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ) always clobbers reg byte a reg byte y 
Statement [293] if(*((word*)(struct ProcessingSprite*) processChars::processing#0)>(const word) XPOS_RIGHTMOST#0) goto processChars::@6 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ) always clobbers reg byte a reg byte y 
Statement [294] if(*((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y)<(const word) YPOS_TOPMOST#0) goto processChars::@6 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ) always clobbers reg byte a reg byte y 
Statement [295] if(*((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y)>(const word) YPOS_BOTTOMMOST#0) goto processChars::@6 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ) always clobbers reg byte a reg byte y 
Statement [296] (word~) processChars::$25 ← (word) processChars::xpos#0 >> (byte) 3 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 processChars::$25 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 processChars::$25 ] ) always clobbers reg byte a 
Statement [297] (byte~) processChars::$26 ← (byte)(word~) processChars::$25 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 processChars::$26 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 processChars::$26 ] ) always clobbers reg byte a 
Statement [299] (byte~) processChars::$38 ← (byte) processChars::xchar#0 << (byte) 1 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 processChars::$38 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 processChars::$38 ] ) always clobbers reg byte a 
Statement [300] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) + *((const word[$28]) VXSIN#0 + (byte~) processChars::$38) [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 ] ) always clobbers reg byte a reg byte y 
Statement [301] *((word*)(struct ProcessingSprite*) processChars::processing#0) ← *((word*)(struct ProcessingSprite*) processChars::processing#0) + *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 ] ) always clobbers reg byte a reg byte y 
Statement [302] (byte~) processChars::$30 ← (byte) processChars::ypos#0 >> (byte) 3 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::$30 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::$30 ] ) always clobbers reg byte a 
Statement [304] (byte~) processChars::$39 ← (byte) processChars::ychar#0 << (byte) 1 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::$39 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::$39 ] ) always clobbers reg byte a 
Statement [305] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) + *((const word[$19]) VYSIN#0 + (byte~) processChars::$39) [ processChars::i#10 processChars::numActive#10 processChars::processing#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 ] ) always clobbers reg byte a reg byte y 
Statement [306] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) + *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) [ processChars::i#10 processChars::numActive#10 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 ] ) always clobbers reg byte a reg byte y 
Statement [310] if((byte) processChars::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto processChars::@1 [ processChars::i#1 processChars::numActive#3 ] ( processChars:260 [ processChars::i#1 processChars::numActive#3 ] ) always clobbers reg byte a 
Statement [312] *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS) ← (const byte) STATUS_FREE [ processChars::i#10 processChars::numActive#10 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte y 
Statement [313] (byte~) processChars::$33 ← (byte) $ff ^ (byte) processChars::bitmask#0 [ processChars::i#10 processChars::numActive#10 processChars::$33 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::$33 ] ) always clobbers reg byte a 
Statement [314] *((const byte*) SPRITES_ENABLE#0) ← *((const byte*) SPRITES_ENABLE#0) & (byte~) processChars::$33 [ processChars::i#10 processChars::numActive#10 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 ] ) always clobbers reg byte a 
Statement [315] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) | (byte) processChars::bitmask#0 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 ] ) always clobbers reg byte a 
Statement [317] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_MIDDLE#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [318] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqBottom() [ ] (  [ ] ) always clobbers reg byte a 
Statement [319] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [320] return  [ ] (  [ ] ) always clobbers reg byte a reg byte x reg byte y 
Statement [3] (void*) SCREEN_COPY#0 ← (void*)(byte*) malloc::mem#0 [ SCREEN_COPY#0 heap_head#1 ] ( ) always clobbers reg byte a 
Statement [5] (void*) SCREEN_DIST#0 ← (void*)(byte*) malloc::mem#0 [ SCREEN_COPY#0 SCREEN_DIST#0 heap_head#1 ] ( ) always clobbers reg byte a 
Statement [9] (byte*) init_dist_screen::screen#0 ← (byte*)(void*) SCREEN_DIST#0 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 heap_head#1 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 heap_head#1 ] ) always clobbers reg byte a 
Statement [11] (byte*) main::dst#0 ← (byte*)(void*) SCREEN_COPY#0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::dst#0 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::dst#0 ] ) always clobbers reg byte a 
Statement [13] *((byte*) main::dst#2) ← *((byte*) main::src#2) [ SCREEN_COPY#0 SCREEN_DIST#0 main::src#2 main::dst#2 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::src#2 main::dst#2 ] ) always clobbers reg byte a reg byte y 
Statement [16] if((byte*) main::src#1!=(const byte*) SCREEN#0+(word) $3e8) goto main::@1 [ SCREEN_COPY#0 SCREEN_DIST#0 main::src#1 main::dst#1 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::src#1 main::dst#1 ] ) always clobbers reg byte a 
Statement [18] (byte) main::$26 ← (byte) main::i#2 << (byte) 1 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$26 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$26 ] ) always clobbers reg byte a 
Statement [19] (byte) main::$27 ← (byte) main::$26 + (byte) main::i#2 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$27 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$27 ] ) always clobbers reg byte a 
Statement [20] (byte) main::$28 ← (byte) main::$27 << (byte) 1 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$28 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$28 ] ) always clobbers reg byte a 
Statement [21] (byte) main::$29 ← (byte) main::$28 + (byte) main::i#2 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$29 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$29 ] ) always clobbers reg byte a 
Statement [22] (byte~) main::$16 ← (byte) main::$29 << (byte) 1 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [23] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) main::$16) ← (byte) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [24] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y + (byte~) main::$16) ← (byte) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [25] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX + (byte~) main::$16) ← (byte) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [26] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY + (byte~) main::$16) ← (byte) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [27] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID + (byte~) main::$16) ← (byte) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [28] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR + (byte~) main::$16) ← (byte) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [29] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL + (byte~) main::$16) ← (byte) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [30] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) main::$16) ← (const byte) STATUS_FREE [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 main::$16 ] ) always clobbers reg byte a 
Statement [31] *((byte**)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR + (byte~) main::$16) ← (byte*) 0 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 ] ( main:7 [ SCREEN_COPY#0 SCREEN_DIST#0 main::i#2 ] ) always clobbers reg byte a 
Statement [47] *((const byte*) SCREEN#0+(word) $3e7) ← (byte) '.' [ ] ( main:7 [ ] ) always clobbers reg byte a 
Statement [55] (byte) startProcessing::$42 ← (byte) startProcessing::i#2 << (byte) 1 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$42 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$42 ] ) always clobbers reg byte a 
Statement [56] (byte) startProcessing::$43 ← (byte) startProcessing::$42 + (byte) startProcessing::i#2 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$43 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$43 ] ) always clobbers reg byte a 
Statement [57] (byte) startProcessing::$44 ← (byte) startProcessing::$43 << (byte) 1 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$44 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$44 ] ) always clobbers reg byte a 
Statement [58] (byte) startProcessing::$45 ← (byte) startProcessing::$44 + (byte) startProcessing::i#2 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$45 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$45 ] ) always clobbers reg byte a 
Statement [59] (byte~) startProcessing::$30 ← (byte) startProcessing::$45 << (byte) 1 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$30 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 startProcessing::$30 ] ) always clobbers reg byte a 
Statement [60] if(*((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) startProcessing::$30)!=(const byte) STATUS_FREE) goto startProcessing::@3 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#6 startProcessing::i#2 ] ) always clobbers reg byte a 
Statement [63] (word~) startProcessing::$0 ← (word)(byte) startProcessing::center_y#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$0 ] ) always clobbers reg byte a 
Statement [64] (word) startProcessing::$47 ← (word~) startProcessing::$0 << (byte) 2 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$0 startProcessing::$47 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$0 startProcessing::$47 ] ) always clobbers reg byte a 
Statement [65] (word) startProcessing::$48 ← (word) startProcessing::$47 + (word~) startProcessing::$0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$48 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$48 ] ) always clobbers reg byte a 
Statement [66] (word~) startProcessing::$1 ← (word) startProcessing::$48 << (byte) 3 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$1 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::$1 ] ) always clobbers reg byte a 
Statement [67] (word) startProcessing::offset#0 ← (word~) startProcessing::$1 + (byte) startProcessing::center_x#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::offset#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::offset#0 ] ) always clobbers reg byte a 
Statement [68] (byte*) startProcessing::colPtr#0 ← (const byte*) COLS#0 + (word) startProcessing::offset#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::offset#0 startProcessing::colPtr#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::offset#0 startProcessing::colPtr#0 ] ) always clobbers reg byte a 
Statement [69] (byte) startProcessing::spriteCol#0 ← *((byte*) startProcessing::colPtr#0) [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::offset#0 startProcessing::spriteCol#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::offset#0 startProcessing::spriteCol#0 ] ) always clobbers reg byte a reg byte y 
Statement [70] (byte*) startProcessing::screenPtr#0 ← (const byte*) SCREEN#0 + (word) startProcessing::offset#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 ] ) always clobbers reg byte a 
Statement [71] (word~) startProcessing::$5 ← (word)(byte) startProcessing::freeIdx#2 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$5 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$5 ] ) always clobbers reg byte a 
Statement [72] (word~) startProcessing::$6 ← (word~) startProcessing::$5 << (byte) 6 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$6 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$6 ] ) always clobbers reg byte a 
Statement [73] (byte*) startProcessing::spriteData#0 ← (const byte*) SPRITE_DATA#0 + (word~) startProcessing::$6 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 ] ) always clobbers reg byte a 
Statement [74] (byte) startProcessing::ch#0 ← *((byte*) startProcessing::screenPtr#0) [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::ch#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::ch#0 ] ) always clobbers reg byte a reg byte y 
Statement [75] (word~) startProcessing::$8 ← (word)(byte) startProcessing::ch#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::$8 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::$8 ] ) always clobbers reg byte a 
Statement [76] (word~) startProcessing::$9 ← (word~) startProcessing::$8 << (byte) 3 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::$9 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::$9 ] ) always clobbers reg byte a 
Statement [77] (byte*) startProcessing::chargenData#0 ← (const byte*) CHARGEN#0 + (word~) startProcessing::$9 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::chargenData#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::chargenData#0 ] ) always clobbers reg byte a 
Statement [79] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::chargenData#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteData#0 startProcessing::chargenData#0 ] ) always clobbers reg byte a 
Statement [81] *((byte*) startProcessing::spriteData#2) ← *((byte*) startProcessing::chargenData#2) [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::chargenData#2 startProcessing::spriteData#2 startProcessing::i1#2 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::chargenData#2 startProcessing::spriteData#2 startProcessing::i1#2 ] ) always clobbers reg byte a reg byte y 
Statement [82] (byte*) startProcessing::spriteData#1 ← (byte*) startProcessing::spriteData#2 + (byte) 3 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::chargenData#2 startProcessing::i1#2 startProcessing::spriteData#1 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::chargenData#2 startProcessing::i1#2 startProcessing::spriteData#1 ] ) always clobbers reg byte a 
Statement [86] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_x#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 ] ) always clobbers reg byte a 
Statement [88] (word~) startProcessing::$11 ← (word)(byte) startProcessing::center_x#0 [ startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$11 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$11 ] ) always clobbers reg byte a 
Statement [89] (word~) startProcessing::$12 ← (word~) startProcessing::$11 << (byte) 3 [ startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$12 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$12 ] ) always clobbers reg byte a 
Statement [90] (word~) startProcessing::$13 ← (const byte) BORDER_XPOS_LEFT#0 + (word~) startProcessing::$12 [ startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$13 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$13 ] ) always clobbers reg byte a 
Statement [91] (word) startProcessing::spriteX#0 ← (word~) startProcessing::$13 << (byte) 4 [ startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::center_y#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 ] ) always clobbers reg byte a 
Statement [92] (word~) startProcessing::$15 ← (word)(byte) startProcessing::center_y#0 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::$15 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::$15 ] ) always clobbers reg byte a 
Statement [93] (word~) startProcessing::$16 ← (word~) startProcessing::$15 << (byte) 3 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::$16 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::$16 ] ) always clobbers reg byte a 
Statement [94] (word~) startProcessing::$17 ← (const byte) BORDER_YPOS_TOP#0 + (word~) startProcessing::$16 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::$17 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::$17 ] ) always clobbers reg byte a 
Statement [95] (word) startProcessing::spriteY#0 ← (word~) startProcessing::$17 << (byte) 4 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 ] ) always clobbers reg byte a 
Statement [96] (byte) startProcessing::spritePtr#0 ← (byte)(const byte*) SPRITE_DATA#0/(byte) $40 + (byte) startProcessing::freeIdx#2 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 ] ) always clobbers reg byte a 
Statement [97] (byte~) startProcessing::$22 ← (byte) startProcessing::freeIdx#2 << (byte) 3 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$22 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$22 ] ) always clobbers reg byte a 
Statement [98] (word~) startProcessing::$23 ← (word)(byte~) startProcessing::$22 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 ] ) always clobbers reg byte a 
Statement [99] (byte) startProcessing::$50 ← (byte) startProcessing::freeIdx#2 << (byte) 1 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$50 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$50 ] ) always clobbers reg byte a 
Statement [100] (byte) startProcessing::$51 ← (byte) startProcessing::$50 + (byte) startProcessing::freeIdx#2 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$51 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$51 ] ) always clobbers reg byte a 
Statement [101] (byte) startProcessing::$52 ← (byte) startProcessing::$51 << (byte) 1 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$52 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$52 ] ) always clobbers reg byte a 
Statement [102] (byte) startProcessing::$53 ← (byte) startProcessing::$52 + (byte) startProcessing::freeIdx#2 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$53 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$53 ] ) always clobbers reg byte a 
Statement [103] (byte~) startProcessing::$31 ← (byte) startProcessing::$53 << (byte) 1 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteX#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [104] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) startProcessing::$31) ← (word) startProcessing::spriteX#0 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spriteY#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [105] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y + (byte~) startProcessing::$31) ← (word) startProcessing::spriteY#0 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$23 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [106] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX + (byte~) startProcessing::$31) ← (word~) startProcessing::$23 [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [107] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY + (byte~) startProcessing::$31) ← (byte) $3c [ startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::freeIdx#2 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [108] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID + (byte~) startProcessing::$31) ← (byte) startProcessing::freeIdx#2 [ startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::spritePtr#0 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [109] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR + (byte~) startProcessing::$31) ← (byte) startProcessing::spritePtr#0 [ startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::spriteCol#0 startProcessing::screenPtr#0 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [110] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL + (byte~) startProcessing::$31) ← (byte) startProcessing::spriteCol#0 [ startProcessing::screenPtr#0 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::screenPtr#0 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [111] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) startProcessing::$31) ← (const byte) STATUS_NEW [ startProcessing::screenPtr#0 startProcessing::$31 ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 startProcessing::screenPtr#0 startProcessing::$31 ] ) always clobbers reg byte a 
Statement [112] *((byte**)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR + (byte~) startProcessing::$31) ← (byte*) startProcessing::screenPtr#0 [ ] ( main:7::startProcessing:51 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [118] (byte*) getCharToProcess::screen_line#0 ← (byte*)(void*) SCREEN_COPY#0 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#0 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#0 ] ) always clobbers reg byte a 
Statement [119] (byte*) getCharToProcess::dist_line#0 ← (byte*)(void*) SCREEN_DIST#0 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#0 getCharToProcess::dist_line#0 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#0 getCharToProcess::dist_line#0 ] ) always clobbers reg byte a 
Statement [122] if(*((byte*) getCharToProcess::screen_line#4 + (byte) getCharToProcess::x#2)==(byte) ' ') goto getCharToProcess::@11 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#4 getCharToProcess::dist_line#6 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#4 getCharToProcess::dist_line#6 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 ] ) always clobbers reg byte a 
Statement [123] (byte) getCharToProcess::dist#0 ← *((byte*) getCharToProcess::dist_line#6 + (byte) getCharToProcess::x#2) [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#4 getCharToProcess::dist_line#6 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::dist#0 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::screen_line#4 getCharToProcess::dist_line#6 getCharToProcess::y#7 getCharToProcess::x#2 getCharToProcess::closest_dist#2 getCharToProcess::closest_x#7 getCharToProcess::closest_y#7 getCharToProcess::dist#0 ] ) always clobbers reg byte a 
Statement [130] (byte*) getCharToProcess::screen_line#1 ← (byte*) getCharToProcess::screen_line#4 + (byte) $28 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::dist_line#6 getCharToProcess::y#7 getCharToProcess::screen_line#1 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::dist_line#6 getCharToProcess::y#7 getCharToProcess::screen_line#1 ] ) always clobbers reg byte a 
Statement [131] (byte*) getCharToProcess::dist_line#1 ← (byte*) getCharToProcess::dist_line#6 + (byte) $28 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::y#7 getCharToProcess::screen_line#1 getCharToProcess::dist_line#1 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::y#7 getCharToProcess::screen_line#1 getCharToProcess::dist_line#1 ] ) always clobbers reg byte a 
Statement [135] (word~) getCharToProcess::$8 ← (word)(byte) getCharToProcess::return_y#1 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$8 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$8 ] ) always clobbers reg byte a 
Statement [136] (word) getCharToProcess::$12 ← (word~) getCharToProcess::$8 << (byte) 2 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$8 getCharToProcess::$12 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$8 getCharToProcess::$12 ] ) always clobbers reg byte a 
Statement [137] (word) getCharToProcess::$13 ← (word) getCharToProcess::$12 + (word~) getCharToProcess::$8 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$13 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$13 ] ) always clobbers reg byte a 
Statement [138] (word~) getCharToProcess::$9 ← (word) getCharToProcess::$13 << (byte) 3 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$9 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$9 ] ) always clobbers reg byte a 
Statement [139] (byte*~) getCharToProcess::$10 ← (byte*)(void*) SCREEN_COPY#0 + (word~) getCharToProcess::$9 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$10 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 getCharToProcess::$10 ] ) always clobbers reg byte a 
Statement [140] *((byte*~) getCharToProcess::$10 + (byte) getCharToProcess::return_x#1) ← (byte) ' ' [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 ] ( main:7::getCharToProcess:39 [ SCREEN_COPY#0 SCREEN_DIST#0 getCharToProcess::return_x#1 getCharToProcess::return_y#1 getCharToProcess::return_dist#1 ] ) always clobbers reg byte a 
Statement [147] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:7::setupRasterIrq:37 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [148] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:7::setupRasterIrq:37 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [149] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 [ ] ( main:7::setupRasterIrq:37 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [150] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f [ ] ( main:7::setupRasterIrq:37 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [151] *((const byte*) RASTER#0) ← <(const byte) RASTER_IRQ_TOP#0 [ ] ( main:7::setupRasterIrq:37 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [152] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 [ ] ( main:7::setupRasterIrq:37 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [153] *((const void()**) HARDWARE_IRQ#0) ← (const void()*) setupRasterIrq::irqRoutine#0 [ ] ( main:7::setupRasterIrq:37 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [158] *((byte*) initSprites::sp#2) ← (byte) 0 [ initSprites::sp#2 ] ( main:7::initSprites:35 [ SCREEN_COPY#0 SCREEN_DIST#0 initSprites::sp#2 ] ) always clobbers reg byte a reg byte y 
Statement [160] if((byte*) initSprites::sp#1<(const byte*) SPRITE_DATA#0+(const byte) NUM_PROCESSING#0*(byte) $40) goto initSprites::@1 [ initSprites::sp#1 ] ( main:7::initSprites:35 [ SCREEN_COPY#0 SCREEN_DIST#0 initSprites::sp#1 ] ) always clobbers reg byte a 
Statement [162] *((const byte*) SPRITES_COLS#0 + (byte) initSprites::i#2) ← (const byte) LIGHT_BLUE#0 [ initSprites::i#2 ] ( main:7::initSprites:35 [ SCREEN_COPY#0 SCREEN_DIST#0 initSprites::i#2 ] ) always clobbers reg byte a 
Statement [165] *((const byte*) SPRITES_MC#0) ← (byte) 0 [ ] ( main:7::initSprites:35 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [166] *((const byte*) SPRITES_EXPAND_X#0) ← (byte) 0 [ ] ( main:7::initSprites:35 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [167] *((const byte*) SPRITES_EXPAND_Y#0) ← (byte) 0 [ ] ( main:7::initSprites:35 [ SCREEN_COPY#0 SCREEN_DIST#0 ] ) always clobbers reg byte a 
Statement [171] (byte*) init_dist_screen::screen_bottomline#0 ← (byte*) init_dist_screen::screen#0 + (word)(number) $28*(number) $18 [ init_dist_screen::screen#0 init_dist_screen::screen_bottomline#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 init_dist_screen::screen_bottomline#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [173] (byte) init_dist_screen::y2#0 ← (byte) init_dist_screen::y#10 << (byte) 1 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::y2#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::y2#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [175] (byte~) init_dist_screen::$5 ← (byte) $18 - (byte) init_dist_screen::y2#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::$5 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::$5 SQUARES#1 ] ) always clobbers reg byte a 
Statement [179] (word) sqr::return#2 ← (word) sqr::return#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 sqr::return#2 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 sqr::return#2 SQUARES#1 ] ) always clobbers reg byte a 
Statement [180] (word) init_dist_screen::yds#0 ← (word) sqr::return#2 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [182] (byte) init_dist_screen::x2#0 ← (byte) init_dist_screen::x#2 << (byte) 1 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::x2#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::x2#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [184] (byte~) init_dist_screen::$13 ← (byte) $27 - (byte) init_dist_screen::x2#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::$13 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::$13 SQUARES#1 ] ) always clobbers reg byte a 
Statement [188] (word) sqr::return#3 ← (word) sqr::return#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqr::return#3 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqr::return#3 SQUARES#1 ] ) always clobbers reg byte a 
Statement [189] (word) init_dist_screen::xds#0 ← (word) sqr::return#3 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::xds#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::xds#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [190] (word) init_dist_screen::ds#0 ← (word) init_dist_screen::xds#0 + (word) init_dist_screen::yds#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::ds#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::ds#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [191] (word) sqrt::val#0 ← (word) init_dist_screen::ds#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqrt::val#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqrt::val#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [195] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ) always clobbers reg byte y 
Statement [196] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ) always clobbers reg byte y 
Statement [197] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 init_dist_screen::d#0 SQUARES#1 ] ) always clobbers reg byte y 
Statement [198] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0 [ init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 ] ) always clobbers reg byte y 
Statement [202] (byte*) init_dist_screen::screen_topline#1 ← (byte*) init_dist_screen::screen_topline#10 + (byte) $28 [ init_dist_screen::y#10 init_dist_screen::screen_bottomline#10 init_dist_screen::screen_topline#1 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_bottomline#10 init_dist_screen::screen_topline#1 SQUARES#1 ] ) always clobbers reg byte a 
Statement [203] (byte*) init_dist_screen::screen_bottomline#1 ← (byte*) init_dist_screen::screen_bottomline#10 - (byte) $28 [ init_dist_screen::y#10 init_dist_screen::screen_topline#1 init_dist_screen::screen_bottomline#1 SQUARES#1 ] ( main:7::init_dist_screen:10 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#1 init_dist_screen::screen_bottomline#1 SQUARES#1 ] ) always clobbers reg byte a 
Statement [209] (word) bsearch16u::key#0 ← (word) sqrt::val#0 [ bsearch16u::key#0 SQUARES#1 ] ( main:7::init_dist_screen:10::sqrt:192 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 bsearch16u::key#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [210] (word*) bsearch16u::items#1 ← (word*)(void*) SQUARES#1 [ bsearch16u::key#0 bsearch16u::items#1 SQUARES#1 ] ( main:7::init_dist_screen:10::sqrt:192 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 bsearch16u::key#0 bsearch16u::items#1 SQUARES#1 ] ) always clobbers reg byte a 
Statement [212] (word*) bsearch16u::return#3 ← (word*) bsearch16u::return#1 [ SQUARES#1 bsearch16u::return#3 ] ( main:7::init_dist_screen:10::sqrt:192 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::return#3 ] ) always clobbers reg byte a 
Statement [213] (word*) sqrt::found#0 ← (word*) bsearch16u::return#3 [ SQUARES#1 sqrt::found#0 ] ( main:7::init_dist_screen:10::sqrt:192 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqrt::found#0 ] ) always clobbers reg byte a 
Statement [214] (word~) sqrt::$3 ← (word*) sqrt::found#0 - (word*)(void*) SQUARES#1 [ SQUARES#1 sqrt::$3 ] ( main:7::init_dist_screen:10::sqrt:192 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqrt::$3 ] ) always clobbers reg byte a 
Statement [215] (word~) sqrt::$1 ← (word~) sqrt::$3 >> (byte) 1 [ SQUARES#1 sqrt::$1 ] ( main:7::init_dist_screen:10::sqrt:192 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqrt::$1 ] ) always clobbers reg byte a 
Statement [216] (byte) sqrt::return#0 ← (byte)(word~) sqrt::$1 [ sqrt::return#0 SQUARES#1 ] ( main:7::init_dist_screen:10::sqrt:192 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqrt::return#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [221] if(*((word*) bsearch16u::items#2)<=(word) bsearch16u::key#0) goto bsearch16u::@2 [ bsearch16u::items#2 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::items#2 ] ) always clobbers reg byte a reg byte y 
Statement [222] (word*~) bsearch16u::$2 ← (word*) bsearch16u::items#2 - (byte) 1*(const byte) SIZEOF_WORD [ bsearch16u::$2 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::$2 ] ) always clobbers reg byte a 
Statement [226] (byte~) bsearch16u::$6 ← (byte) bsearch16u::num#3 >> (byte) 1 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$6 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$6 ] ) always clobbers reg byte a 
Statement [227] (byte~) bsearch16u::$16 ← (byte~) bsearch16u::$6 << (byte) 1 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$16 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::$16 ] ) always clobbers reg byte a 
Statement [228] (word*) bsearch16u::pivot#0 ← (word*) bsearch16u::items#2 + (byte~) bsearch16u::$16 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ) always clobbers reg byte a 
Statement [229] (signed word) bsearch16u::result#0 ← (signed word)(word) bsearch16u::key#0 - (signed word)*((word*) bsearch16u::pivot#0) [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ) always clobbers reg byte a reg byte y 
Statement [230] if((signed word) bsearch16u::result#0!=(signed byte) 0) goto bsearch16u::@6 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 bsearch16u::result#0 ] ) always clobbers reg byte a 
Statement [231] (word*~) bsearch16u::return#6 ← (word*) bsearch16u::pivot#0 [ bsearch16u::return#6 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::return#6 ] ) always clobbers reg byte a 
Statement [232] if((signed word) bsearch16u::result#0<=(signed byte) 0) goto bsearch16u::@7 [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#2 bsearch16u::pivot#0 ] ) always clobbers reg byte a 
Statement [233] (word*) bsearch16u::items#0 ← (word*) bsearch16u::pivot#0 + (byte) 1*(const byte) SIZEOF_WORD [ bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#0 ] ( main:7::init_dist_screen:10::sqrt:192::bsearch16u:211 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 bsearch16u::key#0 bsearch16u::num#3 bsearch16u::items#0 ] ) always clobbers reg byte a 
Statement [238] (byte~) sqr::$0 ← (byte) sqr::val#2 << (byte) 1 [ SQUARES#1 sqr::$0 ] ( main:7::init_dist_screen:10::sqr:178 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 SQUARES#1 sqr::$0 ] main:7::init_dist_screen:10::sqr:187 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 SQUARES#1 sqr::$0 ] ) always clobbers reg byte a 
Statement [239] (word) sqr::return#0 ← *((word*)(void*) SQUARES#1 + (byte~) sqr::$0) [ sqr::return#0 SQUARES#1 ] ( main:7::init_dist_screen:10::sqr:178 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 sqr::return#0 SQUARES#1 ] main:7::init_dist_screen:10::sqr:187 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::y#10 init_dist_screen::screen_topline#10 init_dist_screen::screen_bottomline#10 init_dist_screen::yds#0 init_dist_screen::x#2 init_dist_screen::xb#2 sqr::return#0 SQUARES#1 ] ) always clobbers reg byte a reg byte y 
Statement [243] (void*) SQUARES#1 ← (void*)(byte*) malloc::mem#0 [ SQUARES#1 ] ( main:7::init_dist_screen:10::init_squares:170 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 SQUARES#1 ] ) always clobbers reg byte a 
Statement [244] (word*) init_squares::squares#0 ← (word*)(void*) SQUARES#1 [ SQUARES#1 init_squares::squares#0 ] ( main:7::init_dist_screen:10::init_squares:170 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 SQUARES#1 init_squares::squares#0 ] ) always clobbers reg byte a 
Statement [246] *((word*) init_squares::squares#2) ← (word) init_squares::sqr#2 [ SQUARES#1 init_squares::sqr#2 init_squares::squares#2 init_squares::i#2 ] ( main:7::init_dist_screen:10::init_squares:170 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 SQUARES#1 init_squares::sqr#2 init_squares::squares#2 init_squares::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [247] (word*) init_squares::squares#1 ← (word*) init_squares::squares#2 + (const byte) SIZEOF_WORD [ SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 ] ( main:7::init_dist_screen:10::init_squares:170 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 ] ) always clobbers reg byte a 
Statement [248] (byte~) init_squares::$3 ← (byte) init_squares::i#2 << (byte) 1 [ SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 init_squares::$3 ] ( main:7::init_dist_screen:10::init_squares:170 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 SQUARES#1 init_squares::sqr#2 init_squares::i#2 init_squares::squares#1 init_squares::$3 ] ) always clobbers reg byte a 
Statement [250] (word) init_squares::sqr#1 ← (word) init_squares::sqr#2 + (byte~) init_squares::$4 [ SQUARES#1 init_squares::i#2 init_squares::sqr#1 init_squares::squares#1 ] ( main:7::init_dist_screen:10::init_squares:170 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 SQUARES#1 init_squares::i#2 init_squares::sqr#1 init_squares::squares#1 ] ) always clobbers reg byte a 
Statement [255] (byte*) malloc::mem#0 ← (byte*) heap_head#12 [ malloc::mem#0 heap_head#12 malloc::size#3 ] ( malloc:2 [ malloc::mem#0 heap_head#12 malloc::size#3 ] malloc:4 [ malloc::mem#0 heap_head#12 malloc::size#3 ] main:7::init_dist_screen:10::init_squares:170::malloc:242 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 malloc::mem#0 heap_head#12 malloc::size#3 ] ) always clobbers reg byte a 
Statement [256] (byte*) heap_head#1 ← (byte*) heap_head#12 + (word) malloc::size#3 [ malloc::mem#0 heap_head#1 ] ( malloc:2 [ malloc::mem#0 heap_head#1 ] malloc:4 [ malloc::mem#0 heap_head#1 ] main:7::init_dist_screen:10::init_squares:170::malloc:242 [ SCREEN_COPY#0 SCREEN_DIST#0 init_dist_screen::screen#0 malloc::mem#0 heap_head#1 ] ) always clobbers reg byte a 
Statement [261] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_TOP#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [262] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqTop() [ ] (  [ ] ) always clobbers reg byte a 
Statement [263] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [264] return  [ ] (  [ ] ) always clobbers reg byte a reg byte x reg byte y 
Statement [267] (byte) processChars::$67 ← (byte) processChars::i#10 << (byte) 1 [ processChars::i#10 processChars::numActive#10 processChars::$67 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::$67 ] ) always clobbers reg byte a 
Statement [268] (byte) processChars::$68 ← (byte) processChars::$67 + (byte) processChars::i#10 [ processChars::i#10 processChars::numActive#10 processChars::$68 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::$68 ] ) always clobbers reg byte a 
Statement [269] (byte) processChars::$69 ← (byte) processChars::$68 << (byte) 1 [ processChars::i#10 processChars::numActive#10 processChars::$69 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::$69 ] ) always clobbers reg byte a 
Statement [270] (byte) processChars::$70 ← (byte) processChars::$69 + (byte) processChars::i#10 [ processChars::i#10 processChars::numActive#10 processChars::$70 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::$70 ] ) always clobbers reg byte a 
Statement [271] (byte~) processChars::$37 ← (byte) processChars::$70 << (byte) 1 [ processChars::i#10 processChars::numActive#10 processChars::$37 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::$37 ] ) always clobbers reg byte a 
Statement [272] (struct ProcessingSprite*) processChars::processing#0 ← (const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) processChars::$37 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 ] ) always clobbers reg byte a 
Statement [273] (byte) processChars::bitmask#0 ← (byte) 1 << *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID) [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte x reg byte y 
Statement [274] if(*((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS)==(const byte) STATUS_FREE) goto processChars::@2 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte y 
Statement [275] if(*((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS)!=(const byte) STATUS_NEW) goto processChars::@3 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte y 
Statement [276] *(*((byte**)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR)) ← (byte) ' ' [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte x reg byte y 
Statement [277] *((const byte*) SPRITES_ENABLE#0) ← *((const byte*) SPRITES_ENABLE#0) | (byte) processChars::bitmask#0 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a 
Statement [278] *((const byte*) SPRITES_COLS#0 + *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID)) ← *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL) [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte y 
Statement [279] *((const byte*) SCREEN#0+(const word) SPRITE_PTRS#0 + *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID)) ← *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR) [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte y 
Statement [280] *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS) ← (const byte) STATUS_PROCESSING [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte y 
Statement [281] (word) processChars::xpos#0 ← *((word*)(struct ProcessingSprite*) processChars::processing#0) >> (byte) 4 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 ] ) always clobbers reg byte a reg byte y 
Statement [282] (byte~) processChars::$11 ← > (word) processChars::xpos#0 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$11 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$11 ] ) always clobbers reg byte a 
Statement [284] (byte~) processChars::$12 ← (byte) $ff ^ (byte) processChars::bitmask#0 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$12 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$12 ] ) always clobbers reg byte a 
Statement [285] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) & (byte~) processChars::$12 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 ] ) always clobbers reg byte a 
Statement [286] (byte~) processChars::$17 ← (byte) processChars::i#10 << (byte) 1 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 ] ) always clobbers reg byte a 
Statement [287] (byte~) processChars::$14 ← (byte)(word) processChars::xpos#0 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 processChars::$14 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 processChars::$14 ] ) always clobbers reg byte a 
Statement [289] (word~) processChars::$15 ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) >> (byte) 4 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 processChars::$15 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 processChars::$15 ] ) always clobbers reg byte a reg byte y 
Statement [290] (byte) processChars::ypos#0 ← (byte)(word~) processChars::$15 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::$17 processChars::ypos#0 ] ) always clobbers reg byte a 
Statement [291] *((const byte*) SPRITES_YPOS#0 + (byte~) processChars::$17) ← (byte) processChars::ypos#0 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ) always clobbers reg byte a 
Statement [292] if(*((word*)(struct ProcessingSprite*) processChars::processing#0)<(const word) XPOS_LEFTMOST#0) goto processChars::@6 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ) always clobbers reg byte a reg byte y 
Statement [293] if(*((word*)(struct ProcessingSprite*) processChars::processing#0)>(const word) XPOS_RIGHTMOST#0) goto processChars::@6 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ) always clobbers reg byte a reg byte y 
Statement [294] if(*((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y)<(const word) YPOS_TOPMOST#0) goto processChars::@6 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ) always clobbers reg byte a reg byte y 
Statement [295] if(*((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y)>(const word) YPOS_BOTTOMMOST#0) goto processChars::@6 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 processChars::ypos#0 ] ) always clobbers reg byte a reg byte y 
Statement [296] (word~) processChars::$25 ← (word) processChars::xpos#0 >> (byte) 3 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 processChars::$25 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 processChars::$25 ] ) always clobbers reg byte a 
Statement [297] (byte~) processChars::$26 ← (byte)(word~) processChars::$25 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 processChars::$26 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 processChars::$26 ] ) always clobbers reg byte a 
Statement [299] (byte~) processChars::$38 ← (byte) processChars::xchar#0 << (byte) 1 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 processChars::$38 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 processChars::$38 ] ) always clobbers reg byte a 
Statement [300] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) + *((const word[$28]) VXSIN#0 + (byte~) processChars::$38) [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 ] ) always clobbers reg byte a reg byte y 
Statement [301] *((word*)(struct ProcessingSprite*) processChars::processing#0) ← *((word*)(struct ProcessingSprite*) processChars::processing#0) + *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::ypos#0 ] ) always clobbers reg byte a reg byte y 
Statement [302] (byte~) processChars::$30 ← (byte) processChars::ypos#0 >> (byte) 3 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::$30 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::$30 ] ) always clobbers reg byte a 
Statement [304] (byte~) processChars::$39 ← (byte) processChars::ychar#0 << (byte) 1 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::$39 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::$39 ] ) always clobbers reg byte a 
Statement [305] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) + *((const word[$19]) VYSIN#0 + (byte~) processChars::$39) [ processChars::i#10 processChars::numActive#10 processChars::processing#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 ] ) always clobbers reg byte a reg byte y 
Statement [306] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) + *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) [ processChars::i#10 processChars::numActive#10 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 ] ) always clobbers reg byte a reg byte y 
Statement [310] if((byte) processChars::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto processChars::@1 [ processChars::i#1 processChars::numActive#3 ] ( processChars:260 [ processChars::i#1 processChars::numActive#3 ] ) always clobbers reg byte a 
Statement [312] *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS) ← (const byte) STATUS_FREE [ processChars::i#10 processChars::numActive#10 processChars::bitmask#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::bitmask#0 ] ) always clobbers reg byte a reg byte y 
Statement [313] (byte~) processChars::$33 ← (byte) $ff ^ (byte) processChars::bitmask#0 [ processChars::i#10 processChars::numActive#10 processChars::$33 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::$33 ] ) always clobbers reg byte a 
Statement [314] *((const byte*) SPRITES_ENABLE#0) ← *((const byte*) SPRITES_ENABLE#0) & (byte~) processChars::$33 [ processChars::i#10 processChars::numActive#10 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 ] ) always clobbers reg byte a 
Statement [315] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) | (byte) processChars::bitmask#0 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 ] ( processChars:260 [ processChars::i#10 processChars::numActive#10 processChars::processing#0 processChars::bitmask#0 processChars::xpos#0 ] ) always clobbers reg byte a 
Statement [317] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_MIDDLE#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [318] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqBottom() [ ] (  [ ] ) always clobbers reg byte a 
Statement [319] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 [ ] (  [ ] ) always clobbers reg byte a 
Statement [320] return  [ ] (  [ ] ) always clobbers reg byte a reg byte x reg byte y 
Potential registers zp ZP_WORD:2 [ main::src#2 main::src#1 ] : zp ZP_WORD:2 , 
Potential registers zp ZP_WORD:4 [ main::dst#2 main::dst#1 main::dst#0 ] : zp ZP_WORD:4 , 
Potential registers zp ZP_BYTE:6 [ main::i#2 main::i#1 ] : zp ZP_BYTE:6 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ startProcessing::freeIdx#6 startProcessing::freeIdx#7 ] : zp ZP_BYTE:7 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ startProcessing::freeIdx#2 startProcessing::freeIdx#8 startProcessing::i#2 startProcessing::i#1 ] : zp ZP_BYTE:8 , reg byte x , 
Potential registers zp ZP_WORD:9 [ startProcessing::chargenData#2 startProcessing::chargenData#0 startProcessing::chargenData#1 ] : zp ZP_WORD:9 , 
Potential registers zp ZP_WORD:11 [ startProcessing::spriteData#2 startProcessing::spriteData#0 startProcessing::spriteData#1 ] : zp ZP_WORD:11 , 
Potential registers zp ZP_BYTE:13 [ startProcessing::i1#2 startProcessing::i1#1 ] : zp ZP_BYTE:13 , reg byte x , 
Potential registers zp ZP_WORD:14 [ getCharToProcess::screen_line#4 getCharToProcess::screen_line#0 getCharToProcess::screen_line#1 ] : zp ZP_WORD:14 , 
Potential registers zp ZP_WORD:16 [ getCharToProcess::dist_line#6 getCharToProcess::dist_line#0 getCharToProcess::dist_line#1 ] : zp ZP_WORD:16 , 
Potential registers zp ZP_BYTE:18 [ getCharToProcess::y#7 getCharToProcess::y#1 ] : zp ZP_BYTE:18 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:19 [ getCharToProcess::x#2 getCharToProcess::x#1 ] : zp ZP_BYTE:19 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:20 [ getCharToProcess::closest_dist#2 getCharToProcess::closest_dist#8 getCharToProcess::closest_dist#10 getCharToProcess::closest_dist#12 ] : zp ZP_BYTE:20 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:21 [ getCharToProcess::closest_x#7 getCharToProcess::closest_x#9 getCharToProcess::return_x#1 getCharToProcess::return_x#7 ] : zp ZP_BYTE:21 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:22 [ getCharToProcess::closest_y#7 getCharToProcess::closest_y#9 getCharToProcess::return_y#1 getCharToProcess::return_y#7 ] : zp ZP_BYTE:22 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:23 [ getCharToProcess::return_dist#1 getCharToProcess::return_dist#5 getCharToProcess::return_dist#6 getCharToProcess::dist#0 ] : zp ZP_BYTE:23 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:24 [ initSprites::sp#2 initSprites::sp#1 ] : zp ZP_WORD:24 , 
Potential registers zp ZP_BYTE:26 [ initSprites::i#2 initSprites::i#1 ] : zp ZP_BYTE:26 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:27 [ init_dist_screen::y#10 init_dist_screen::y#1 ] : zp ZP_BYTE:27 , reg byte x , 
Potential registers zp ZP_WORD:28 [ init_dist_screen::screen_topline#10 init_dist_screen::screen_topline#1 init_dist_screen::screen#0 ] : zp ZP_WORD:28 , 
Potential registers zp ZP_WORD:30 [ init_dist_screen::screen_bottomline#10 init_dist_screen::screen_bottomline#1 init_dist_screen::screen_bottomline#0 ] : zp ZP_WORD:30 , 
Potential registers zp ZP_BYTE:32 [ init_dist_screen::yd#0 init_dist_screen::$7 init_dist_screen::$5 ] : zp ZP_BYTE:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:33 [ init_dist_screen::x#2 init_dist_screen::x#1 ] : zp ZP_BYTE:33 , reg byte x , 
Potential registers zp ZP_BYTE:34 [ init_dist_screen::xb#2 init_dist_screen::xb#1 ] : zp ZP_BYTE:34 , reg byte x , 
Potential registers zp ZP_BYTE:35 [ init_dist_screen::xd#0 init_dist_screen::$15 init_dist_screen::$13 ] : zp ZP_BYTE:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:36 [ bsearch16u::return#1 bsearch16u::return#6 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::items#0 ] : zp ZP_WORD:36 , 
Potential registers zp ZP_BYTE:38 [ bsearch16u::num#5 bsearch16u::num#1 bsearch16u::num#3 bsearch16u::num#0 ] : zp ZP_BYTE:38 , reg byte x , 
Potential registers zp ZP_BYTE:39 [ sqr::val#2 sqr::val#0 sqr::val#1 ] : zp ZP_BYTE:39 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:40 [ init_squares::sqr#2 init_squares::sqr#1 ] : zp ZP_WORD:40 , 
Potential registers zp ZP_WORD:42 [ init_squares::squares#2 init_squares::squares#1 init_squares::squares#0 ] : zp ZP_WORD:42 , 
Potential registers zp ZP_BYTE:44 [ init_squares::i#2 init_squares::i#1 ] : zp ZP_BYTE:44 , reg byte x , 
Potential registers zp ZP_WORD:45 [ heap_head#12 heap_head#1 ] : zp ZP_WORD:45 , 
Potential registers zp ZP_WORD:47 [ malloc::size#3 ] : zp ZP_WORD:47 , 
Potential registers zp ZP_BYTE:49 [ processChars::i#10 processChars::i#1 ] : zp ZP_BYTE:49 , 
Potential registers zp ZP_BYTE:50 [ processChars::numActive#10 processChars::numActive#3 processChars::numActive#1 ] : zp ZP_BYTE:50 , 
Potential registers zp ZP_WORD:51 [ SCREEN_COPY#0 ] : zp ZP_WORD:51 , 
Potential registers zp ZP_WORD:53 [ SCREEN_DIST#0 ] : zp ZP_WORD:53 , 
Potential registers zp ZP_BYTE:55 [ main::$26 ] : zp ZP_BYTE:55 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:56 [ main::$27 ] : zp ZP_BYTE:56 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:57 [ main::$28 ] : zp ZP_BYTE:57 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:58 [ main::$29 ] : zp ZP_BYTE:58 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:59 [ main::$16 ] : zp ZP_BYTE:59 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:60 [ getCharToProcess::return_x#0 ] : zp ZP_BYTE:60 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:61 [ getCharToProcess::return_y#0 ] : zp ZP_BYTE:61 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:62 [ getCharToProcess::return_dist#0 ] : zp ZP_BYTE:62 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:63 [ main::center_x#0 ] : zp ZP_BYTE:63 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:64 [ main::center_y#0 ] : zp ZP_BYTE:64 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:65 [ main::center_dist#0 ] : zp ZP_BYTE:65 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:66 [ startProcessing::center_x#0 ] : zp ZP_BYTE:66 , reg byte x , 
Potential registers zp ZP_BYTE:67 [ startProcessing::center_y#0 ] : zp ZP_BYTE:67 , reg byte x , 
Potential registers zp ZP_BYTE:68 [ startProcessing::$42 ] : zp ZP_BYTE:68 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:69 [ startProcessing::$43 ] : zp ZP_BYTE:69 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:70 [ startProcessing::$44 ] : zp ZP_BYTE:70 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:71 [ startProcessing::$45 ] : zp ZP_BYTE:71 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:72 [ startProcessing::$30 ] : zp ZP_BYTE:72 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:73 [ startProcessing::$0 ] : zp ZP_WORD:73 , 
Potential registers zp ZP_WORD:75 [ startProcessing::$47 ] : zp ZP_WORD:75 , 
Potential registers zp ZP_WORD:77 [ startProcessing::$48 ] : zp ZP_WORD:77 , 
Potential registers zp ZP_WORD:79 [ startProcessing::$1 ] : zp ZP_WORD:79 , 
Potential registers zp ZP_WORD:81 [ startProcessing::offset#0 ] : zp ZP_WORD:81 , 
Potential registers zp ZP_WORD:83 [ startProcessing::colPtr#0 ] : zp ZP_WORD:83 , 
Potential registers zp ZP_BYTE:85 [ startProcessing::spriteCol#0 ] : zp ZP_BYTE:85 , reg byte x , 
Potential registers zp ZP_WORD:86 [ startProcessing::screenPtr#0 ] : zp ZP_WORD:86 , 
Potential registers zp ZP_WORD:88 [ startProcessing::$5 ] : zp ZP_WORD:88 , 
Potential registers zp ZP_WORD:90 [ startProcessing::$6 ] : zp ZP_WORD:90 , 
Potential registers zp ZP_BYTE:92 [ startProcessing::ch#0 ] : zp ZP_BYTE:92 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:93 [ startProcessing::$8 ] : zp ZP_WORD:93 , 
Potential registers zp ZP_WORD:95 [ startProcessing::$9 ] : zp ZP_WORD:95 , 
Potential registers zp ZP_WORD:97 [ startProcessing::$11 ] : zp ZP_WORD:97 , 
Potential registers zp ZP_WORD:99 [ startProcessing::$12 ] : zp ZP_WORD:99 , 
Potential registers zp ZP_WORD:101 [ startProcessing::$13 ] : zp ZP_WORD:101 , 
Potential registers zp ZP_WORD:103 [ startProcessing::spriteX#0 ] : zp ZP_WORD:103 , 
Potential registers zp ZP_WORD:105 [ startProcessing::$15 ] : zp ZP_WORD:105 , 
Potential registers zp ZP_WORD:107 [ startProcessing::$16 ] : zp ZP_WORD:107 , 
Potential registers zp ZP_WORD:109 [ startProcessing::$17 ] : zp ZP_WORD:109 , 
Potential registers zp ZP_WORD:111 [ startProcessing::spriteY#0 ] : zp ZP_WORD:111 , 
Potential registers zp ZP_BYTE:113 [ startProcessing::spritePtr#0 ] : zp ZP_BYTE:113 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:114 [ startProcessing::$22 ] : zp ZP_BYTE:114 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:115 [ startProcessing::$23 ] : zp ZP_WORD:115 , 
Potential registers zp ZP_BYTE:117 [ startProcessing::$50 ] : zp ZP_BYTE:117 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:118 [ startProcessing::$51 ] : zp ZP_BYTE:118 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:119 [ startProcessing::$52 ] : zp ZP_BYTE:119 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:120 [ startProcessing::$53 ] : zp ZP_BYTE:120 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:121 [ startProcessing::$31 ] : zp ZP_BYTE:121 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:122 [ getCharToProcess::$8 ] : zp ZP_WORD:122 , 
Potential registers zp ZP_WORD:124 [ getCharToProcess::$12 ] : zp ZP_WORD:124 , 
Potential registers zp ZP_WORD:126 [ getCharToProcess::$13 ] : zp ZP_WORD:126 , 
Potential registers zp ZP_WORD:128 [ getCharToProcess::$9 ] : zp ZP_WORD:128 , 
Potential registers zp ZP_WORD:130 [ getCharToProcess::$10 ] : zp ZP_WORD:130 , 
Potential registers zp ZP_BYTE:132 [ init_dist_screen::y2#0 ] : zp ZP_BYTE:132 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:133 [ sqr::return#2 ] : zp ZP_WORD:133 , 
Potential registers zp ZP_WORD:135 [ init_dist_screen::yds#0 ] : zp ZP_WORD:135 , 
Potential registers zp ZP_BYTE:137 [ init_dist_screen::x2#0 ] : zp ZP_BYTE:137 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:138 [ sqr::return#3 ] : zp ZP_WORD:138 , 
Potential registers zp ZP_WORD:140 [ init_dist_screen::xds#0 ] : zp ZP_WORD:140 , 
Potential registers zp ZP_WORD:142 [ init_dist_screen::ds#0 ] : zp ZP_WORD:142 , 
Potential registers zp ZP_WORD:144 [ sqrt::val#0 ] : zp ZP_WORD:144 , 
Potential registers zp ZP_BYTE:146 [ sqrt::return#2 ] : zp ZP_BYTE:146 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:147 [ init_dist_screen::d#0 ] : zp ZP_BYTE:147 , reg byte a , reg byte x , 
Potential registers zp ZP_WORD:148 [ bsearch16u::key#0 ] : zp ZP_WORD:148 , 
Potential registers zp ZP_WORD:150 [ bsearch16u::return#3 ] : zp ZP_WORD:150 , 
Potential registers zp ZP_WORD:152 [ sqrt::found#0 ] : zp ZP_WORD:152 , 
Potential registers zp ZP_WORD:154 [ sqrt::$3 ] : zp ZP_WORD:154 , 
Potential registers zp ZP_WORD:156 [ sqrt::$1 ] : zp ZP_WORD:156 , 
Potential registers zp ZP_BYTE:158 [ sqrt::return#0 ] : zp ZP_BYTE:158 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:159 [ bsearch16u::$6 ] : zp ZP_BYTE:159 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:160 [ bsearch16u::$16 ] : zp ZP_BYTE:160 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:161 [ bsearch16u::pivot#0 ] : zp ZP_WORD:161 , 
Potential registers zp ZP_WORD:163 [ bsearch16u::result#0 ] : zp ZP_WORD:163 , 
Potential registers zp ZP_BYTE:165 [ sqr::$0 ] : zp ZP_BYTE:165 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:166 [ sqr::return#0 ] : zp ZP_WORD:166 , 
Potential registers zp ZP_WORD:168 [ SQUARES#1 ] : zp ZP_WORD:168 , 
Potential registers zp ZP_BYTE:170 [ init_squares::$3 ] : zp ZP_BYTE:170 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:171 [ init_squares::$4 ] : zp ZP_BYTE:171 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:172 [ malloc::mem#0 ] : zp ZP_WORD:172 , 
Potential registers zp ZP_BYTE:174 [ processChars::$67 ] : zp ZP_BYTE:174 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:175 [ processChars::$68 ] : zp ZP_BYTE:175 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:176 [ processChars::$69 ] : zp ZP_BYTE:176 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:177 [ processChars::$70 ] : zp ZP_BYTE:177 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:178 [ processChars::$37 ] : zp ZP_BYTE:178 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:179 [ processChars::processing#0 ] : zp ZP_WORD:179 , 
Potential registers zp ZP_BYTE:181 [ processChars::bitmask#0 ] : zp ZP_BYTE:181 , 
Potential registers zp ZP_WORD:182 [ processChars::xpos#0 ] : zp ZP_WORD:182 , 
Potential registers zp ZP_BYTE:184 [ processChars::$11 ] : zp ZP_BYTE:184 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:185 [ processChars::$12 ] : zp ZP_BYTE:185 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:186 [ processChars::$17 ] : zp ZP_BYTE:186 , reg byte x , 
Potential registers zp ZP_BYTE:187 [ processChars::$14 ] : zp ZP_BYTE:187 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:188 [ processChars::$15 ] : zp ZP_WORD:188 , 
Potential registers zp ZP_BYTE:190 [ processChars::ypos#0 ] : zp ZP_BYTE:190 , reg byte x , 
Potential registers zp ZP_WORD:191 [ processChars::$25 ] : zp ZP_WORD:191 , 
Potential registers zp ZP_BYTE:193 [ processChars::$26 ] : zp ZP_BYTE:193 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:194 [ processChars::xchar#0 ] : zp ZP_BYTE:194 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:195 [ processChars::$38 ] : zp ZP_BYTE:195 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:196 [ processChars::$30 ] : zp ZP_BYTE:196 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:197 [ processChars::ychar#0 ] : zp ZP_BYTE:197 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:198 [ processChars::$39 ] : zp ZP_BYTE:198 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:199 [ processChars::$33 ] : zp ZP_BYTE:199 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [bsearch16u] 7,563.11: zp ZP_BYTE:38 [ bsearch16u::num#5 bsearch16u::num#1 bsearch16u::num#3 bsearch16u::num#0 ] 2,855.06: zp ZP_WORD:36 [ bsearch16u::return#1 bsearch16u::return#6 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::items#0 ] 2,002: zp ZP_BYTE:159 [ bsearch16u::$6 ] 2,002: zp ZP_BYTE:160 [ bsearch16u::$16 ] 1,501.5: zp ZP_WORD:163 [ bsearch16u::result#0 ] 501: zp ZP_WORD:161 [ bsearch16u::pivot#0 ] 4: zp ZP_WORD:150 [ bsearch16u::return#3 ] 0.27: zp ZP_WORD:148 [ bsearch16u::key#0 ] 
Uplift Scope [getCharToProcess] 4,983.53: zp ZP_BYTE:23 [ getCharToProcess::return_dist#1 getCharToProcess::return_dist#5 getCharToProcess::return_dist#6 getCharToProcess::dist#0 ] 3,432.25: zp ZP_BYTE:20 [ getCharToProcess::closest_dist#2 getCharToProcess::closest_dist#8 getCharToProcess::closest_dist#10 getCharToProcess::closest_dist#12 ] 2,937.96: zp ZP_BYTE:22 [ getCharToProcess::closest_y#7 getCharToProcess::closest_y#9 getCharToProcess::return_y#1 getCharToProcess::return_y#7 ] 1,949.11: zp ZP_BYTE:21 [ getCharToProcess::closest_x#7 getCharToProcess::closest_x#9 getCharToProcess::return_x#1 getCharToProcess::return_x#7 ] 1,557.11: zp ZP_BYTE:19 [ getCharToProcess::x#2 getCharToProcess::x#1 ] 181.2: zp ZP_BYTE:18 [ getCharToProcess::y#7 getCharToProcess::y#1 ] 140.57: zp ZP_WORD:16 [ getCharToProcess::dist_line#6 getCharToProcess::dist_line#0 getCharToProcess::dist_line#1 ] 135.09: zp ZP_WORD:14 [ getCharToProcess::screen_line#4 getCharToProcess::screen_line#0 getCharToProcess::screen_line#1 ] 7.33: zp ZP_BYTE:60 [ getCharToProcess::return_x#0 ] 7.33: zp ZP_BYTE:61 [ getCharToProcess::return_y#0 ] 7.33: zp ZP_BYTE:62 [ getCharToProcess::return_dist#0 ] 4: zp ZP_WORD:124 [ getCharToProcess::$12 ] 4: zp ZP_WORD:126 [ getCharToProcess::$13 ] 4: zp ZP_WORD:128 [ getCharToProcess::$9 ] 4: zp ZP_WORD:130 [ getCharToProcess::$10 ] 3: zp ZP_WORD:122 [ getCharToProcess::$8 ] 
Uplift Scope [startProcessing] 2,589.5: zp ZP_BYTE:8 [ startProcessing::freeIdx#2 startProcessing::freeIdx#8 startProcessing::i#2 startProcessing::i#1 ] 2,002: zp ZP_BYTE:68 [ startProcessing::$42 ] 2,002: zp ZP_BYTE:69 [ startProcessing::$43 ] 2,002: zp ZP_BYTE:70 [ startProcessing::$44 ] 2,002: zp ZP_BYTE:71 [ startProcessing::$45 ] 2,002: zp ZP_BYTE:72 [ startProcessing::$30 ] 222.2: zp ZP_BYTE:7 [ startProcessing::freeIdx#6 startProcessing::freeIdx#7 ] 203.57: zp ZP_WORD:11 [ startProcessing::spriteData#2 startProcessing::spriteData#0 startProcessing::spriteData#1 ] 202: zp ZP_BYTE:13 [ startProcessing::i1#2 startProcessing::i1#1 ] 170.33: zp ZP_WORD:9 [ startProcessing::chargenData#2 startProcessing::chargenData#0 startProcessing::chargenData#1 ] 4: zp ZP_WORD:75 [ startProcessing::$47 ] 4: zp ZP_WORD:77 [ startProcessing::$48 ] 4: zp ZP_WORD:79 [ startProcessing::$1 ] 4: zp ZP_WORD:83 [ startProcessing::colPtr#0 ] 4: zp ZP_WORD:88 [ startProcessing::$5 ] 4: zp ZP_WORD:90 [ startProcessing::$6 ] 4: zp ZP_WORD:93 [ startProcessing::$8 ] 4: zp ZP_WORD:95 [ startProcessing::$9 ] 4: zp ZP_WORD:97 [ startProcessing::$11 ] 4: zp ZP_WORD:99 [ startProcessing::$12 ] 4: zp ZP_WORD:101 [ startProcessing::$13 ] 4: zp ZP_WORD:105 [ startProcessing::$15 ] 4: zp ZP_WORD:107 [ startProcessing::$16 ] 4: zp ZP_WORD:109 [ startProcessing::$17 ] 4: zp ZP_BYTE:117 [ startProcessing::$50 ] 4: zp ZP_BYTE:118 [ startProcessing::$51 ] 4: zp ZP_BYTE:119 [ startProcessing::$52 ] 4: zp ZP_BYTE:120 [ startProcessing::$53 ] 3: zp ZP_WORD:73 [ startProcessing::$0 ] 2.22: zp ZP_BYTE:121 [ startProcessing::$31 ] 2: zp ZP_WORD:81 [ startProcessing::offset#0 ] 2: zp ZP_BYTE:92 [ startProcessing::ch#0 ] 2: zp ZP_BYTE:114 [ startProcessing::$22 ] 0.5: zp ZP_WORD:115 [ startProcessing::$23 ] 0.4: zp ZP_WORD:111 [ startProcessing::spriteY#0 ] 0.31: zp ZP_BYTE:66 [ startProcessing::center_x#0 ] 0.31: zp ZP_WORD:103 [ startProcessing::spriteX#0 ] 0.31: zp ZP_BYTE:113 [ startProcessing::spritePtr#0 ] 0.24: zp ZP_BYTE:67 [ startProcessing::center_y#0 ] 0.14: zp ZP_WORD:86 [ startProcessing::screenPtr#0 ] 0.1: zp ZP_BYTE:85 [ startProcessing::spriteCol#0 ] 
Uplift Scope [init_dist_screen] 707: zp ZP_BYTE:35 [ init_dist_screen::xd#0 init_dist_screen::$15 init_dist_screen::$13 ] 202: zp ZP_BYTE:137 [ init_dist_screen::x2#0 ] 202: zp ZP_WORD:140 [ init_dist_screen::xds#0 ] 202: zp ZP_WORD:142 [ init_dist_screen::ds#0 ] 127.58: zp ZP_BYTE:33 [ init_dist_screen::x#2 init_dist_screen::x#1 ] 126.25: zp ZP_BYTE:147 [ init_dist_screen::d#0 ] 121.2: zp ZP_BYTE:34 [ init_dist_screen::xb#2 init_dist_screen::xb#1 ] 77: zp ZP_BYTE:32 [ init_dist_screen::yd#0 init_dist_screen::$7 init_dist_screen::$5 ] 22: zp ZP_BYTE:132 [ init_dist_screen::y2#0 ] 18.18: zp ZP_WORD:30 [ init_dist_screen::screen_bottomline#10 init_dist_screen::screen_bottomline#1 init_dist_screen::screen_bottomline#0 ] 17.47: zp ZP_BYTE:27 [ init_dist_screen::y#10 init_dist_screen::y#1 ] 14.06: zp ZP_WORD:28 [ init_dist_screen::screen_topline#10 init_dist_screen::screen_topline#1 init_dist_screen::screen#0 ] 4.87: zp ZP_WORD:135 [ init_dist_screen::yds#0 ] 
Uplift Scope [sqr] 338: zp ZP_BYTE:39 [ sqr::val#2 sqr::val#0 sqr::val#1 ] 202: zp ZP_WORD:138 [ sqr::return#3 ] 28.5: zp ZP_WORD:166 [ sqr::return#0 ] 22: zp ZP_WORD:133 [ sqr::return#2 ] 4: zp ZP_BYTE:165 [ sqr::$0 ] 
Uplift Scope [processChars] 33.73: zp ZP_BYTE:50 [ processChars::numActive#10 processChars::numActive#3 processChars::numActive#1 ] 22: zp ZP_BYTE:174 [ processChars::$67 ] 22: zp ZP_BYTE:175 [ processChars::$68 ] 22: zp ZP_BYTE:176 [ processChars::$69 ] 22: zp ZP_BYTE:177 [ processChars::$70 ] 22: zp ZP_BYTE:178 [ processChars::$37 ] 22: zp ZP_BYTE:184 [ processChars::$11 ] 22: zp ZP_BYTE:185 [ processChars::$12 ] 22: zp ZP_BYTE:187 [ processChars::$14 ] 22: zp ZP_BYTE:193 [ processChars::$26 ] 22: zp ZP_BYTE:194 [ processChars::xchar#0 ] 22: zp ZP_BYTE:195 [ processChars::$38 ] 22: zp ZP_BYTE:196 [ processChars::$30 ] 22: zp ZP_BYTE:197 [ processChars::ychar#0 ] 22: zp ZP_BYTE:198 [ processChars::$39 ] 22: zp ZP_BYTE:199 [ processChars::$33 ] 17.9: zp ZP_BYTE:49 [ processChars::i#10 processChars::i#1 ] 11: zp ZP_WORD:188 [ processChars::$15 ] 11: zp ZP_WORD:191 [ processChars::$25 ] 6.6: zp ZP_BYTE:186 [ processChars::$17 ] 2.75: zp ZP_BYTE:190 [ processChars::ypos#0 ] 2.2: zp ZP_BYTE:181 [ processChars::bitmask#0 ] 2.06: zp ZP_WORD:182 [ processChars::xpos#0 ] 0.31: zp ZP_WORD:179 [ processChars::processing#0 ] 
Uplift Scope [sqrt] 202: zp ZP_BYTE:146 [ sqrt::return#2 ] 103: zp ZP_WORD:144 [ sqrt::val#0 ] 34.33: zp ZP_BYTE:158 [ sqrt::return#0 ] 4: zp ZP_WORD:152 [ sqrt::found#0 ] 4: zp ZP_WORD:154 [ sqrt::$3 ] 2: zp ZP_WORD:156 [ sqrt::$1 ] 
Uplift Scope [main] 27.5: zp ZP_WORD:2 [ main::src#2 main::src#1 ] 26.67: zp ZP_WORD:4 [ main::dst#2 main::dst#1 main::dst#0 ] 22: zp ZP_BYTE:55 [ main::$26 ] 22: zp ZP_BYTE:56 [ main::$27 ] 22: zp ZP_BYTE:57 [ main::$28 ] 22: zp ZP_BYTE:58 [ main::$29 ] 22: zp ZP_BYTE:65 [ main::center_dist#0 ] 20.17: zp ZP_BYTE:6 [ main::i#2 main::i#1 ] 12.22: zp ZP_BYTE:59 [ main::$16 ] 5.5: zp ZP_BYTE:63 [ main::center_x#0 ] 5.5: zp ZP_BYTE:64 [ main::center_y#0 ] 
Uplift Scope [init_squares] 25.17: zp ZP_WORD:42 [ init_squares::squares#2 init_squares::squares#1 init_squares::squares#0 ] 22: zp ZP_BYTE:44 [ init_squares::i#2 init_squares::i#1 ] 22: zp ZP_BYTE:170 [ init_squares::$3 ] 22: zp ZP_BYTE:171 [ init_squares::$4 ] 13.93: zp ZP_WORD:40 [ init_squares::sqr#2 init_squares::sqr#1 ] 
Uplift Scope [initSprites] 33: zp ZP_WORD:24 [ initSprites::sp#2 initSprites::sp#1 ] 33: zp ZP_BYTE:26 [ initSprites::i#2 initSprites::i#1 ] 
Uplift Scope [] 4.6: zp ZP_WORD:45 [ heap_head#12 heap_head#1 ] 0.03: zp ZP_WORD:168 [ SQUARES#1 ] 0.03: zp ZP_WORD:53 [ SCREEN_DIST#0 ] 0.03: zp ZP_WORD:51 [ SCREEN_COPY#0 ] 
Uplift Scope [malloc] 1: zp ZP_WORD:47 [ malloc::size#3 ] 0.33: zp ZP_WORD:172 [ malloc::mem#0 ] 
Uplift Scope [ProcessingChar] 
Uplift Scope [ProcessingSprite] 
Uplift Scope [ProcessingSprite::$0] 
Uplift Scope [setupRasterIrq] 
Uplift Scope [irqTop] 
Uplift Scope [irqBottom] 

Uplifting [bsearch16u] best 373435 combination reg byte x [ bsearch16u::num#5 bsearch16u::num#1 bsearch16u::num#3 bsearch16u::num#0 ] zp ZP_WORD:36 [ bsearch16u::return#1 bsearch16u::return#6 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::items#0 ] reg byte a [ bsearch16u::$6 ] reg byte a [ bsearch16u::$16 ] zp ZP_WORD:163 [ bsearch16u::result#0 ] zp ZP_WORD:161 [ bsearch16u::pivot#0 ] zp ZP_WORD:150 [ bsearch16u::return#3 ] zp ZP_WORD:148 [ bsearch16u::key#0 ] 
Uplifting [getCharToProcess] best 360102 combination reg byte x [ getCharToProcess::return_dist#1 getCharToProcess::return_dist#5 getCharToProcess::return_dist#6 getCharToProcess::dist#0 ] zp ZP_BYTE:20 [ getCharToProcess::closest_dist#2 getCharToProcess::closest_dist#8 getCharToProcess::closest_dist#10 getCharToProcess::closest_dist#12 ] zp ZP_BYTE:22 [ getCharToProcess::closest_y#7 getCharToProcess::closest_y#9 getCharToProcess::return_y#1 getCharToProcess::return_y#7 ] zp ZP_BYTE:21 [ getCharToProcess::closest_x#7 getCharToProcess::closest_x#9 getCharToProcess::return_x#1 getCharToProcess::return_x#7 ] zp ZP_BYTE:19 [ getCharToProcess::x#2 getCharToProcess::x#1 ] zp ZP_BYTE:18 [ getCharToProcess::y#7 getCharToProcess::y#1 ] zp ZP_WORD:16 [ getCharToProcess::dist_line#6 getCharToProcess::dist_line#0 getCharToProcess::dist_line#1 ] zp ZP_WORD:14 [ getCharToProcess::screen_line#4 getCharToProcess::screen_line#0 getCharToProcess::screen_line#1 ] zp ZP_BYTE:60 [ getCharToProcess::return_x#0 ] zp ZP_BYTE:61 [ getCharToProcess::return_y#0 ] zp ZP_BYTE:62 [ getCharToProcess::return_dist#0 ] zp ZP_WORD:124 [ getCharToProcess::$12 ] zp ZP_WORD:126 [ getCharToProcess::$13 ] zp ZP_WORD:128 [ getCharToProcess::$9 ] zp ZP_WORD:130 [ getCharToProcess::$10 ] zp ZP_WORD:122 [ getCharToProcess::$8 ] 
Limited combination testing to 100 combinations of 46656 possible.
Uplifting [init_dist_screen] best 356902 combination reg byte a [ init_dist_screen::xd#0 init_dist_screen::$15 init_dist_screen::$13 ] reg byte a [ init_dist_screen::x2#0 ] zp ZP_WORD:140 [ init_dist_screen::xds#0 ] zp ZP_WORD:142 [ init_dist_screen::ds#0 ] zp ZP_BYTE:33 [ init_dist_screen::x#2 init_dist_screen::x#1 ] reg byte a [ init_dist_screen::d#0 ] zp ZP_BYTE:34 [ init_dist_screen::xb#2 init_dist_screen::xb#1 ] zp ZP_BYTE:32 [ init_dist_screen::yd#0 init_dist_screen::$7 init_dist_screen::$5 ] zp ZP_BYTE:132 [ init_dist_screen::y2#0 ] zp ZP_WORD:30 [ init_dist_screen::screen_bottomline#10 init_dist_screen::screen_bottomline#1 init_dist_screen::screen_bottomline#0 ] zp ZP_BYTE:27 [ init_dist_screen::y#10 init_dist_screen::y#1 ] zp ZP_WORD:28 [ init_dist_screen::screen_topline#10 init_dist_screen::screen_topline#1 init_dist_screen::screen#0 ] zp ZP_WORD:135 [ init_dist_screen::yds#0 ] 
Limited combination testing to 100 combinations of 6144 possible.
Uplifting [sqr] best 356565 combination reg byte a [ sqr::val#2 sqr::val#0 sqr::val#1 ] zp ZP_WORD:138 [ sqr::return#3 ] zp ZP_WORD:166 [ sqr::return#0 ] zp ZP_WORD:133 [ sqr::return#2 ] reg byte a [ sqr::$0 ] 
Uplifting [sqrt] best 355662 combination reg byte a [ sqrt::return#2 ] zp ZP_WORD:144 [ sqrt::val#0 ] reg byte a [ sqrt::return#0 ] zp ZP_WORD:152 [ sqrt::found#0 ] zp ZP_WORD:154 [ sqrt::$3 ] zp ZP_WORD:156 [ sqrt::$1 ] 
Uplifting [main] best 355422 combination zp ZP_WORD:2 [ main::src#2 main::src#1 ] zp ZP_WORD:4 [ main::dst#2 main::dst#1 main::dst#0 ] reg byte a [ main::$26 ] reg byte a [ main::$27 ] reg byte a [ main::$28 ] reg byte a [ main::$29 ] zp ZP_BYTE:65 [ main::center_dist#0 ] zp ZP_BYTE:6 [ main::i#2 main::i#1 ] zp ZP_BYTE:59 [ main::$16 ] zp ZP_BYTE:63 [ main::center_x#0 ] zp ZP_BYTE:64 [ main::center_y#0 ] 
Limited combination testing to 100 combinations of 147456 possible.
Uplifting [init_squares] best 355222 combination zp ZP_WORD:42 [ init_squares::squares#2 init_squares::squares#1 init_squares::squares#0 ] reg byte x [ init_squares::i#2 init_squares::i#1 ] reg byte a [ init_squares::$3 ] reg byte a [ init_squares::$4 ] zp ZP_WORD:40 [ init_squares::sqr#2 init_squares::sqr#1 ] 
Uplifting [initSprites] best 355102 combination zp ZP_WORD:24 [ initSprites::sp#2 initSprites::sp#1 ] reg byte x [ initSprites::i#2 initSprites::i#1 ] 
Uplifting [] best 355102 combination zp ZP_WORD:45 [ heap_head#12 heap_head#1 ] zp ZP_WORD:168 [ SQUARES#1 ] zp ZP_WORD:53 [ SCREEN_DIST#0 ] zp ZP_WORD:51 [ SCREEN_COPY#0 ] 
Uplifting [malloc] best 355102 combination zp ZP_WORD:47 [ malloc::size#3 ] zp ZP_WORD:172 [ malloc::mem#0 ] 
Uplifting [ProcessingChar] best 355102 combination 
Uplifting [ProcessingSprite] best 355102 combination 
Uplifting [ProcessingSprite::$0] best 355102 combination 
Uplifting [setupRasterIrq] best 355102 combination 
Uplifting [irqTop] best 355102 combination 
Uplifting [irqBottom] best 355102 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:20 [ getCharToProcess::closest_dist#2 getCharToProcess::closest_dist#8 getCharToProcess::closest_dist#10 getCharToProcess::closest_dist#12 ]
Uplifting [getCharToProcess] best 355102 combination zp ZP_BYTE:20 [ getCharToProcess::closest_dist#2 getCharToProcess::closest_dist#8 getCharToProcess::closest_dist#10 getCharToProcess::closest_dist#12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:22 [ getCharToProcess::closest_y#7 getCharToProcess::closest_y#9 getCharToProcess::return_y#1 getCharToProcess::return_y#7 ]
Uplifting [getCharToProcess] best 355102 combination zp ZP_BYTE:22 [ getCharToProcess::closest_y#7 getCharToProcess::closest_y#9 getCharToProcess::return_y#1 getCharToProcess::return_y#7 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:8 [ startProcessing::freeIdx#2 startProcessing::freeIdx#8 startProcessing::i#2 startProcessing::i#1 ]
Uplifting [startProcessing] best 355102 combination zp ZP_BYTE:8 [ startProcessing::freeIdx#2 startProcessing::freeIdx#8 startProcessing::i#2 startProcessing::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:68 [ startProcessing::$42 ]
Uplifting [startProcessing] best 349102 combination reg byte a [ startProcessing::$42 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:69 [ startProcessing::$43 ]
Uplifting [startProcessing] best 343102 combination reg byte a [ startProcessing::$43 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:70 [ startProcessing::$44 ]
Uplifting [startProcessing] best 337102 combination reg byte a [ startProcessing::$44 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:71 [ startProcessing::$45 ]
Uplifting [startProcessing] best 331102 combination reg byte a [ startProcessing::$45 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:72 [ startProcessing::$30 ]
Uplifting [startProcessing] best 327102 combination reg byte a [ startProcessing::$30 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:21 [ getCharToProcess::closest_x#7 getCharToProcess::closest_x#9 getCharToProcess::return_x#1 getCharToProcess::return_x#7 ]
Uplifting [getCharToProcess] best 327102 combination zp ZP_BYTE:21 [ getCharToProcess::closest_x#7 getCharToProcess::closest_x#9 getCharToProcess::return_x#1 getCharToProcess::return_x#7 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:19 [ getCharToProcess::x#2 getCharToProcess::x#1 ]
Uplifting [getCharToProcess] best 309102 combination reg byte y [ getCharToProcess::x#2 getCharToProcess::x#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ startProcessing::freeIdx#6 startProcessing::freeIdx#7 ]
Uplifting [startProcessing] best 308202 combination reg byte x [ startProcessing::freeIdx#6 startProcessing::freeIdx#7 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:13 [ startProcessing::i1#2 startProcessing::i1#1 ]
Uplifting [startProcessing] best 307302 combination reg byte x [ startProcessing::i1#2 startProcessing::i1#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:18 [ getCharToProcess::y#7 getCharToProcess::y#1 ]
Uplifting [getCharToProcess] best 307302 combination zp ZP_BYTE:18 [ getCharToProcess::y#7 getCharToProcess::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:33 [ init_dist_screen::x#2 init_dist_screen::x#1 ]
Uplifting [init_dist_screen] best 307302 combination zp ZP_BYTE:33 [ init_dist_screen::x#2 init_dist_screen::x#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:34 [ init_dist_screen::xb#2 init_dist_screen::xb#1 ]
Uplifting [init_dist_screen] best 307302 combination zp ZP_BYTE:34 [ init_dist_screen::xb#2 init_dist_screen::xb#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:32 [ init_dist_screen::yd#0 init_dist_screen::$7 init_dist_screen::$5 ]
Uplifting [init_dist_screen] best 307232 combination reg byte a [ init_dist_screen::yd#0 init_dist_screen::$7 init_dist_screen::$5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:50 [ processChars::numActive#10 processChars::numActive#3 processChars::numActive#1 ]
Uplifting [processChars] best 307232 combination zp ZP_BYTE:50 [ processChars::numActive#10 processChars::numActive#3 processChars::numActive#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:65 [ main::center_dist#0 ]
Uplifting [main] best 307172 combination reg byte a [ main::center_dist#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:132 [ init_dist_screen::y2#0 ]
Uplifting [init_dist_screen] best 307072 combination reg byte a [ init_dist_screen::y2#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:174 [ processChars::$67 ]
Uplifting [processChars] best 307012 combination reg byte a [ processChars::$67 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:175 [ processChars::$68 ]
Uplifting [processChars] best 306952 combination reg byte a [ processChars::$68 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:176 [ processChars::$69 ]
Uplifting [processChars] best 306892 combination reg byte a [ processChars::$69 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:177 [ processChars::$70 ]
Uplifting [processChars] best 306832 combination reg byte a [ processChars::$70 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:178 [ processChars::$37 ]
Uplifting [processChars] best 306772 combination reg byte a [ processChars::$37 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:184 [ processChars::$11 ]
Uplifting [processChars] best 306712 combination reg byte a [ processChars::$11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:185 [ processChars::$12 ]
Uplifting [processChars] best 306652 combination reg byte a [ processChars::$12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:187 [ processChars::$14 ]
Uplifting [processChars] best 306592 combination reg byte a [ processChars::$14 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:193 [ processChars::$26 ]
Uplifting [processChars] best 306552 combination reg byte a [ processChars::$26 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:194 [ processChars::xchar#0 ]
Uplifting [processChars] best 306492 combination reg byte a [ processChars::xchar#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:195 [ processChars::$38 ]
Uplifting [processChars] best 306452 combination reg byte a [ processChars::$38 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:196 [ processChars::$30 ]
Uplifting [processChars] best 306412 combination reg byte a [ processChars::$30 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:197 [ processChars::ychar#0 ]
Uplifting [processChars] best 306352 combination reg byte a [ processChars::ychar#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:198 [ processChars::$39 ]
Uplifting [processChars] best 306312 combination reg byte a [ processChars::$39 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:199 [ processChars::$33 ]
Uplifting [processChars] best 306252 combination reg byte a [ processChars::$33 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ main::i#2 main::i#1 ]
Uplifting [main] best 306252 combination zp ZP_BYTE:6 [ main::i#2 main::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:49 [ processChars::i#10 processChars::i#1 ]
Uplifting [processChars] best 306252 combination zp ZP_BYTE:49 [ processChars::i#10 processChars::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:27 [ init_dist_screen::y#10 init_dist_screen::y#1 ]
Uplifting [init_dist_screen] best 306252 combination zp ZP_BYTE:27 [ init_dist_screen::y#10 init_dist_screen::y#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:59 [ main::$16 ]
Uplifting [main] best 306092 combination reg byte x [ main::$16 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:60 [ getCharToProcess::return_x#0 ]
Uplifting [getCharToProcess] best 306032 combination reg byte y [ getCharToProcess::return_x#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:61 [ getCharToProcess::return_y#0 ]
Uplifting [getCharToProcess] best 305972 combination reg byte a [ getCharToProcess::return_y#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:62 [ getCharToProcess::return_dist#0 ]
Uplifting [getCharToProcess] best 305932 combination reg byte x [ getCharToProcess::return_dist#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:186 [ processChars::$17 ]
Uplifting [processChars] best 305862 combination reg byte x [ processChars::$17 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:63 [ main::center_x#0 ]
Uplifting [main] best 305802 combination reg byte y [ main::center_x#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:64 [ main::center_y#0 ]
Uplifting [main] best 305802 combination zp ZP_BYTE:64 [ main::center_y#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:117 [ startProcessing::$50 ]
Uplifting [startProcessing] best 305796 combination reg byte a [ startProcessing::$50 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:118 [ startProcessing::$51 ]
Uplifting [startProcessing] best 305790 combination reg byte a [ startProcessing::$51 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:119 [ startProcessing::$52 ]
Uplifting [startProcessing] best 305784 combination reg byte a [ startProcessing::$52 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:120 [ startProcessing::$53 ]
Uplifting [startProcessing] best 305778 combination reg byte a [ startProcessing::$53 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:190 [ processChars::ypos#0 ]
Uplifting [processChars] best 305778 combination zp ZP_BYTE:190 [ processChars::ypos#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:121 [ startProcessing::$31 ]
Uplifting [startProcessing] best 305753 combination reg byte x [ startProcessing::$31 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:181 [ processChars::bitmask#0 ]
Uplifting [processChars] best 305753 combination zp ZP_BYTE:181 [ processChars::bitmask#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:92 [ startProcessing::ch#0 ]
Uplifting [startProcessing] best 305747 combination reg byte a [ startProcessing::ch#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:114 [ startProcessing::$22 ]
Uplifting [startProcessing] best 305741 combination reg byte a [ startProcessing::$22 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:66 [ startProcessing::center_x#0 ]
Uplifting [startProcessing] best 305741 combination zp ZP_BYTE:66 [ startProcessing::center_x#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:113 [ startProcessing::spritePtr#0 ]
Uplifting [startProcessing] best 305741 combination zp ZP_BYTE:113 [ startProcessing::spritePtr#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:67 [ startProcessing::center_y#0 ]
Uplifting [startProcessing] best 305741 combination zp ZP_BYTE:67 [ startProcessing::center_y#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:85 [ startProcessing::spriteCol#0 ]
Uplifting [startProcessing] best 305741 combination zp ZP_BYTE:85 [ startProcessing::spriteCol#0 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:9 [ startProcessing::chargenData#2 startProcessing::chargenData#0 startProcessing::chargenData#1 ] ] with [ zp ZP_WORD:95 [ startProcessing::$9 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:11 [ startProcessing::spriteData#2 startProcessing::spriteData#0 startProcessing::spriteData#1 ] ] with [ zp ZP_WORD:90 [ startProcessing::$6 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:36 [ bsearch16u::return#1 bsearch16u::return#6 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::items#0 ] ] with [ zp ZP_WORD:150 [ bsearch16u::return#3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:64 [ main::center_y#0 ] ] with [ zp ZP_BYTE:67 [ startProcessing::center_y#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:73 [ startProcessing::$0 ] ] with [ zp ZP_WORD:77 [ startProcessing::$48 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:79 [ startProcessing::$1 ] ] with [ zp ZP_WORD:81 [ startProcessing::offset#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:97 [ startProcessing::$11 ] ] with [ zp ZP_WORD:99 [ startProcessing::$12 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:101 [ startProcessing::$13 ] ] with [ zp ZP_WORD:103 [ startProcessing::spriteX#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:105 [ startProcessing::$15 ] ] with [ zp ZP_WORD:107 [ startProcessing::$16 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:109 [ startProcessing::$17 ] ] with [ zp ZP_WORD:111 [ startProcessing::spriteY#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:122 [ getCharToProcess::$8 ] ] with [ zp ZP_WORD:126 [ getCharToProcess::$13 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:128 [ getCharToProcess::$9 ] ] with [ zp ZP_WORD:130 [ getCharToProcess::$10 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:133 [ sqr::return#2 ] ] with [ zp ZP_WORD:135 [ init_dist_screen::yds#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:138 [ sqr::return#3 ] ] with [ zp ZP_WORD:140 [ init_dist_screen::xds#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:138 [ sqr::return#3 init_dist_screen::xds#0 ] ] with [ zp ZP_WORD:166 [ sqr::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:142 [ init_dist_screen::ds#0 ] ] with [ zp ZP_WORD:144 [ sqrt::val#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:152 [ sqrt::found#0 ] ] with [ zp ZP_WORD:154 [ sqrt::$3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:168 [ SQUARES#1 ] ] with [ zp ZP_WORD:172 [ malloc::mem#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:182 [ processChars::xpos#0 ] ] with [ zp ZP_WORD:191 [ processChars::$25 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:9 [ startProcessing::chargenData#2 startProcessing::chargenData#0 startProcessing::chargenData#1 startProcessing::$9 ] ] with [ zp ZP_WORD:93 [ startProcessing::$8 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:11 [ startProcessing::spriteData#2 startProcessing::spriteData#0 startProcessing::spriteData#1 startProcessing::$6 ] ] with [ zp ZP_WORD:88 [ startProcessing::$5 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:36 [ bsearch16u::return#1 bsearch16u::return#6 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::items#0 bsearch16u::return#3 ] ] with [ zp ZP_WORD:152 [ sqrt::found#0 sqrt::$3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:73 [ startProcessing::$0 startProcessing::$48 ] ] with [ zp ZP_WORD:79 [ startProcessing::$1 startProcessing::offset#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:97 [ startProcessing::$11 startProcessing::$12 ] ] with [ zp ZP_WORD:101 [ startProcessing::$13 startProcessing::spriteX#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:105 [ startProcessing::$15 startProcessing::$16 ] ] with [ zp ZP_WORD:109 [ startProcessing::$17 startProcessing::spriteY#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:122 [ getCharToProcess::$8 getCharToProcess::$13 ] ] with [ zp ZP_WORD:128 [ getCharToProcess::$9 getCharToProcess::$10 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:138 [ sqr::return#3 init_dist_screen::xds#0 sqr::return#0 ] ] with [ zp ZP_WORD:142 [ init_dist_screen::ds#0 sqrt::val#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:36 [ bsearch16u::return#1 bsearch16u::return#6 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::items#0 bsearch16u::return#3 sqrt::found#0 sqrt::$3 ] ] with [ zp ZP_WORD:156 [ sqrt::$1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:73 [ startProcessing::$0 startProcessing::$48 startProcessing::$1 startProcessing::offset#0 ] ] with [ zp ZP_WORD:86 [ startProcessing::screenPtr#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:138 [ sqr::return#3 init_dist_screen::xds#0 sqr::return#0 init_dist_screen::ds#0 sqrt::val#0 ] ] with [ zp ZP_WORD:148 [ bsearch16u::key#0 ] ] - score: 1
Allocated (was zp ZP_BYTE:8) zp ZP_BYTE:7 [ startProcessing::freeIdx#2 startProcessing::freeIdx#8 startProcessing::i#2 startProcessing::i#1 ]
Allocated (was zp ZP_WORD:9) zp ZP_WORD:8 [ startProcessing::chargenData#2 startProcessing::chargenData#0 startProcessing::chargenData#1 startProcessing::$9 startProcessing::$8 ]
Allocated (was zp ZP_WORD:11) zp ZP_WORD:10 [ startProcessing::spriteData#2 startProcessing::spriteData#0 startProcessing::spriteData#1 startProcessing::$6 startProcessing::$5 ]
Allocated (was zp ZP_WORD:14) zp ZP_WORD:12 [ getCharToProcess::screen_line#4 getCharToProcess::screen_line#0 getCharToProcess::screen_line#1 ]
Allocated (was zp ZP_WORD:16) zp ZP_WORD:14 [ getCharToProcess::dist_line#6 getCharToProcess::dist_line#0 getCharToProcess::dist_line#1 ]
Allocated (was zp ZP_BYTE:18) zp ZP_BYTE:16 [ getCharToProcess::y#7 getCharToProcess::y#1 ]
Allocated (was zp ZP_BYTE:20) zp ZP_BYTE:17 [ getCharToProcess::closest_dist#2 getCharToProcess::closest_dist#8 getCharToProcess::closest_dist#10 getCharToProcess::closest_dist#12 ]
Allocated (was zp ZP_BYTE:21) zp ZP_BYTE:18 [ getCharToProcess::closest_x#7 getCharToProcess::closest_x#9 getCharToProcess::return_x#1 getCharToProcess::return_x#7 ]
Allocated (was zp ZP_BYTE:22) zp ZP_BYTE:19 [ getCharToProcess::closest_y#7 getCharToProcess::closest_y#9 getCharToProcess::return_y#1 getCharToProcess::return_y#7 ]
Allocated (was zp ZP_WORD:24) zp ZP_WORD:20 [ initSprites::sp#2 initSprites::sp#1 ]
Allocated (was zp ZP_BYTE:27) zp ZP_BYTE:22 [ init_dist_screen::y#10 init_dist_screen::y#1 ]
Allocated (was zp ZP_WORD:28) zp ZP_WORD:23 [ init_dist_screen::screen_topline#10 init_dist_screen::screen_topline#1 init_dist_screen::screen#0 ]
Allocated (was zp ZP_WORD:30) zp ZP_WORD:25 [ init_dist_screen::screen_bottomline#10 init_dist_screen::screen_bottomline#1 init_dist_screen::screen_bottomline#0 ]
Allocated (was zp ZP_BYTE:33) zp ZP_BYTE:27 [ init_dist_screen::x#2 init_dist_screen::x#1 ]
Allocated (was zp ZP_BYTE:34) zp ZP_BYTE:28 [ init_dist_screen::xb#2 init_dist_screen::xb#1 ]
Allocated (was zp ZP_WORD:36) zp ZP_WORD:29 [ bsearch16u::return#1 bsearch16u::return#6 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::items#0 bsearch16u::return#3 sqrt::found#0 sqrt::$3 sqrt::$1 ]
Allocated (was zp ZP_WORD:40) zp ZP_WORD:31 [ init_squares::sqr#2 init_squares::sqr#1 ]
Allocated (was zp ZP_WORD:42) zp ZP_WORD:33 [ init_squares::squares#2 init_squares::squares#1 init_squares::squares#0 ]
Allocated (was zp ZP_WORD:45) zp ZP_WORD:35 [ heap_head#12 heap_head#1 ]
Allocated (was zp ZP_WORD:47) zp ZP_WORD:37 [ malloc::size#3 ]
Allocated (was zp ZP_BYTE:49) zp ZP_BYTE:39 [ processChars::i#10 processChars::i#1 ]
Allocated (was zp ZP_BYTE:50) zp ZP_BYTE:40 [ processChars::numActive#10 processChars::numActive#3 processChars::numActive#1 ]
Allocated (was zp ZP_WORD:51) zp ZP_WORD:41 [ SCREEN_COPY#0 ]
Allocated (was zp ZP_WORD:53) zp ZP_WORD:43 [ SCREEN_DIST#0 ]
Allocated (was zp ZP_BYTE:64) zp ZP_BYTE:45 [ main::center_y#0 startProcessing::center_y#0 ]
Allocated (was zp ZP_BYTE:66) zp ZP_BYTE:46 [ startProcessing::center_x#0 ]
Allocated (was zp ZP_WORD:73) zp ZP_WORD:47 [ startProcessing::$0 startProcessing::$48 startProcessing::$1 startProcessing::offset#0 startProcessing::screenPtr#0 ]
Allocated (was zp ZP_WORD:75) zp ZP_WORD:49 [ startProcessing::$47 ]
Allocated (was zp ZP_WORD:83) zp ZP_WORD:51 [ startProcessing::colPtr#0 ]
Allocated (was zp ZP_BYTE:85) zp ZP_BYTE:53 [ startProcessing::spriteCol#0 ]
Allocated (was zp ZP_WORD:97) zp ZP_WORD:54 [ startProcessing::$11 startProcessing::$12 startProcessing::$13 startProcessing::spriteX#0 ]
Allocated (was zp ZP_WORD:105) zp ZP_WORD:56 [ startProcessing::$15 startProcessing::$16 startProcessing::$17 startProcessing::spriteY#0 ]
Allocated (was zp ZP_BYTE:113) zp ZP_BYTE:58 [ startProcessing::spritePtr#0 ]
Allocated (was zp ZP_WORD:115) zp ZP_WORD:59 [ startProcessing::$23 ]
Allocated (was zp ZP_WORD:122) zp ZP_WORD:61 [ getCharToProcess::$8 getCharToProcess::$13 getCharToProcess::$9 getCharToProcess::$10 ]
Allocated (was zp ZP_WORD:124) zp ZP_WORD:63 [ getCharToProcess::$12 ]
Allocated (was zp ZP_WORD:133) zp ZP_WORD:65 [ sqr::return#2 init_dist_screen::yds#0 ]
Allocated (was zp ZP_WORD:138) zp ZP_WORD:67 [ sqr::return#3 init_dist_screen::xds#0 sqr::return#0 init_dist_screen::ds#0 sqrt::val#0 bsearch16u::key#0 ]
Allocated (was zp ZP_WORD:161) zp ZP_WORD:69 [ bsearch16u::pivot#0 ]
Allocated (was zp ZP_WORD:163) zp ZP_WORD:71 [ bsearch16u::result#0 ]
Allocated (was zp ZP_WORD:168) zp ZP_WORD:73 [ SQUARES#1 malloc::mem#0 ]
Allocated (was zp ZP_WORD:179) zp ZP_WORD:75 [ processChars::processing#0 ]
Allocated (was zp ZP_BYTE:181) zp ZP_BYTE:77 [ processChars::bitmask#0 ]
Allocated (was zp ZP_WORD:182) zp ZP_WORD:78 [ processChars::xpos#0 processChars::$25 ]
Allocated (was zp ZP_WORD:188) zp ZP_WORD:80 [ processChars::$15 ]
Allocated (was zp ZP_BYTE:190) zp ZP_BYTE:82 [ processChars::ypos#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Clears start screen throwing around the letters (by turning them into sprites)
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const SIZEOF_WORD = 2
  .const STATUS_FREE = 0
  .const STATUS_NEW = 1
  .const STATUS_PROCESSING = 2
  .const OFFSET_STRUCT_PROCESSINGSPRITE_Y = 2
  .const OFFSET_STRUCT_PROCESSINGSPRITE_VX = 4
  .const OFFSET_STRUCT_PROCESSINGSPRITE_VY = 6
  .const OFFSET_STRUCT_PROCESSINGSPRITE_ID = 8
  .const OFFSET_STRUCT_PROCESSINGSPRITE_PTR = 9
  .const OFFSET_STRUCT_PROCESSINGSPRITE_COL = $a
  .const OFFSET_STRUCT_PROCESSINGSPRITE_STATUS = $b
  .const OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR = $c
  // Start of the heap used by malloc()
  .label HEAP_START = $c000
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = $35
  // RAM in $A000, $E000 CHAR ROM in $D000
  .const PROCPORT_RAM_CHARROM = $31
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  // Positions of the border (in sprite positions)
  .const BORDER_XPOS_LEFT = $18
  .const BORDER_XPOS_RIGHT = $158
  .const BORDER_YPOS_TOP = $32
  .const BORDER_YPOS_BOTTOM = $fa
  // The offset of the sprite pointers from the screen start address
  .const SPRITE_PTRS = $3f8
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_MC = $d01c
  .label SPRITES_EXPAND_X = $d01d
  .label SPRITES_COLS = $d027
  .label VIC_CONTROL = $d011
  // VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  // VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  // Bits for the IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // Color Ram
  .label COLS = $d800
  // CIA#1 Interrupt Status & Control Register
  .label CIA1_INTERRUPT = $dc0d
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // The vector used when the HARDWARE serves IRQ interrupts
  .label HARDWARE_IRQ = $fffe
  .const LIGHT_BLUE = $e
  // Address of the screen
  .label SCREEN = $400
  // Sprite data for the animating sprites
  .label SPRITE_DATA = $2000
  // Max number of chars processed at once
  .const NUM_PROCESSING = 8
  // Distance value meaning not found
  .const NOT_FOUND = $ff
  .const NUM_SQUARES = $30
  .const RASTER_IRQ_TOP = $30
  .const RASTER_IRQ_MIDDLE = $ff
  .const XPOS_RIGHTMOST = BORDER_XPOS_RIGHT<<4
  .const YPOS_BOTTOMMOST = BORDER_YPOS_BOTTOM<<4
  .const XPOS_LEFTMOST = BORDER_XPOS_LEFT-8<<4
  .const YPOS_TOPMOST = BORDER_YPOS_TOP-8<<4
  .label heap_head = $23
  .label SQUARES = $49
  .label SCREEN_COPY = $29
  .label SCREEN_DIST = $2b
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call malloc 
//SEG7 [254] phi from @1 to malloc [phi:@1->malloc]
malloc_from_b1:
//SEG8 [254] phi (word) malloc::size#3 = (word) $3e8 [phi:@1->malloc#0] -- vwuz1=vwuc1 
  lda #<$3e8
  sta malloc.size
  lda #>$3e8
  sta malloc.size+1
//SEG9 [254] phi (byte*) heap_head#12 = (const byte*) HEAP_START#0 [phi:@1->malloc#1] -- pbuz1=pbuc1 
  lda #<HEAP_START
  sta heap_head
  lda #>HEAP_START
  sta heap_head+1
  jsr malloc
  jmp b3
//SEG10 @3
b3:
//SEG11 [3] (void*) SCREEN_COPY#0 ← (void*)(byte*) malloc::mem#0 -- pvoz1=pvoz2 
  lda malloc.mem
  sta SCREEN_COPY
  lda malloc.mem+1
  sta SCREEN_COPY+1
//SEG12 [4] call malloc 
//SEG13 [254] phi from @3 to malloc [phi:@3->malloc]
malloc_from_b3:
//SEG14 [254] phi (word) malloc::size#3 = (word) $3e8 [phi:@3->malloc#0] -- vwuz1=vwuc1 
  lda #<$3e8
  sta malloc.size
  lda #>$3e8
  sta malloc.size+1
//SEG15 [254] phi (byte*) heap_head#12 = (byte*) heap_head#1 [phi:@3->malloc#1] -- register_copy 
  jsr malloc
  jmp b4
//SEG16 @4
b4:
//SEG17 [5] (void*) SCREEN_DIST#0 ← (void*)(byte*) malloc::mem#0 -- pvoz1=pvoz2 
  lda malloc.mem
  sta SCREEN_DIST
  lda malloc.mem+1
  sta SCREEN_DIST+1
//SEG18 [6] phi from @4 to @2 [phi:@4->@2]
b2_from_b4:
  jmp b2
//SEG19 @2
b2:
//SEG20 [7] call main 
  jsr main
//SEG21 [8] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
//SEG22 @end
bend:
//SEG23 main
main: {
    .label dst = 4
    .label src = 2
    .label i = 6
    .label center_y = $2d
  //SEG24 [9] (byte*) init_dist_screen::screen#0 ← (byte*)(void*) SCREEN_DIST#0 -- pbuz1=pbuz2 
    lda SCREEN_DIST
    sta init_dist_screen.screen
    lda SCREEN_DIST+1
    sta init_dist_screen.screen+1
  //SEG25 [10] call init_dist_screen 
  //SEG26 [169] phi from main to init_dist_screen [phi:main->init_dist_screen]
  init_dist_screen_from_main:
    jsr init_dist_screen
    jmp b8
  //SEG27 main::@8
  b8:
  //SEG28 [11] (byte*) main::dst#0 ← (byte*)(void*) SCREEN_COPY#0 -- pbuz1=pbuz2 
    lda SCREEN_COPY
    sta dst
    lda SCREEN_COPY+1
    sta dst+1
  //SEG29 [12] phi from main::@8 to main::@1 [phi:main::@8->main::@1]
  b1_from_b8:
  //SEG30 [12] phi (byte*) main::dst#2 = (byte*) main::dst#0 [phi:main::@8->main::@1#0] -- register_copy 
  //SEG31 [12] phi (byte*) main::src#2 = (const byte*) SCREEN#0 [phi:main::@8->main::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta src
    lda #>SCREEN
    sta src+1
    jmp b1
  // Copy screen to screen copy
  //SEG32 [12] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG33 [12] phi (byte*) main::dst#2 = (byte*) main::dst#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG34 [12] phi (byte*) main::src#2 = (byte*) main::src#1 [phi:main::@1->main::@1#1] -- register_copy 
    jmp b1
  //SEG35 main::@1
  b1:
  //SEG36 [13] *((byte*) main::dst#2) ← *((byte*) main::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
  //SEG37 [14] (byte*) main::src#1 ← ++ (byte*) main::src#2 -- pbuz1=_inc_pbuz1 
    inc src
    bne !+
    inc src+1
  !:
  //SEG38 [15] (byte*) main::dst#1 ← ++ (byte*) main::dst#2 -- pbuz1=_inc_pbuz1 
    inc dst
    bne !+
    inc dst+1
  !:
  //SEG39 [16] if((byte*) main::src#1!=(const byte*) SCREEN#0+(word) $3e8) goto main::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda src+1
    cmp #>SCREEN+$3e8
    bne b1_from_b1
    lda src
    cmp #<SCREEN+$3e8
    bne b1_from_b1
  //SEG40 [17] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG41 [17] phi (byte) main::i#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b2
  // Init processing array
  //SEG42 [17] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  b2_from_b2:
  //SEG43 [17] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@2#0] -- register_copy 
    jmp b2
  //SEG44 main::@2
  b2:
  //SEG45 [18] (byte) main::$26 ← (byte) main::i#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda i
    asl
  //SEG46 [19] (byte) main::$27 ← (byte) main::$26 + (byte) main::i#2 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc i
  //SEG47 [20] (byte) main::$28 ← (byte) main::$27 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
  //SEG48 [21] (byte) main::$29 ← (byte) main::$28 + (byte) main::i#2 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc i
  //SEG49 [22] (byte~) main::$16 ← (byte) main::$29 << (byte) 1 -- vbuxx=vbuaa_rol_1 
    asl
    tax
  //SEG50 [23] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) main::$16) ← (byte) 0 -- pwuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta PROCESSING,x
    lda #0
    sta PROCESSING+1,x
  //SEG51 [24] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y + (byte~) main::$16) ← (byte) 0 -- pwuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_Y,x
    lda #0
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_Y+1,x
  //SEG52 [25] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX + (byte~) main::$16) ← (byte) 0 -- pwuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_VX,x
    lda #0
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_VX+1,x
  //SEG53 [26] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY + (byte~) main::$16) ← (byte) 0 -- pwuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_VY,x
    lda #0
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_VY+1,x
  //SEG54 [27] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID + (byte~) main::$16) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_ID,x
  //SEG55 [28] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR + (byte~) main::$16) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_PTR,x
  //SEG56 [29] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL + (byte~) main::$16) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_COL,x
  //SEG57 [30] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) main::$16) ← (const byte) STATUS_FREE -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #STATUS_FREE
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_STATUS,x
  //SEG58 [31] *((byte**)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR + (byte~) main::$16) ← (byte*) 0 -- pptc1_derefidx_vbuxx=pbuc2 
    lda #<0
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR,x
    lda #>0
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR+1,x
  //SEG59 [32] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG60 [33] if((byte) main::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_PROCESSING-1+1
    cmp i
    bne b2_from_b2
  //SEG61 [34] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
  //SEG62 main::@3
  b3:
  //SEG63 [35] call initSprites 
  //SEG64 [156] phi from main::@3 to initSprites [phi:main::@3->initSprites]
  initSprites_from_b3:
    jsr initSprites
  //SEG65 [36] phi from main::@3 to main::@9 [phi:main::@3->main::@9]
  b9_from_b3:
    jmp b9
  //SEG66 main::@9
  b9:
  //SEG67 [37] call setupRasterIrq 
    jsr setupRasterIrq
  //SEG68 [38] phi from main::@5 main::@9 to main::@4 [phi:main::@5/main::@9->main::@4]
  b4_from_b5:
  b4_from_b9:
    jmp b4
  // Main loop
  //SEG69 main::@4
  b4:
  //SEG70 [39] call getCharToProcess 
    jsr getCharToProcess
  //SEG71 [40] (byte) getCharToProcess::return_x#0 ← (byte) getCharToProcess::return_x#1 -- vbuyy=vbuz1 
    ldy getCharToProcess.return_x
  //SEG72 [41] (byte) getCharToProcess::return_y#0 ← (byte) getCharToProcess::return_y#1 -- vbuaa=vbuz1 
    lda getCharToProcess.return_y
  //SEG73 [42] (byte) getCharToProcess::return_dist#0 ← (byte) getCharToProcess::return_dist#1
    jmp b10
  //SEG74 main::@10
  b10:
  //SEG75 [43] (byte) main::center_x#0 ← (byte) getCharToProcess::return_x#0
  //SEG76 [44] (byte) main::center_y#0 ← (byte) getCharToProcess::return_y#0 -- vbuz1=vbuaa 
    sta center_y
  //SEG77 [45] (byte) main::center_dist#0 ← (byte) getCharToProcess::return_dist#0 -- vbuaa=vbuxx 
    txa
  //SEG78 [46] if((byte) main::center_dist#0!=(const byte) NOT_FOUND#0) goto main::@5 -- vbuaa_neq_vbuc1_then_la1 
    cmp #NOT_FOUND
    bne b5
    jmp b6
  //SEG79 main::@6
  b6:
  //SEG80 [47] *((const byte*) SCREEN#0+(word) $3e7) ← (byte) '.' -- _deref_pbuc1=vbuc2 
    lda #'.'
    sta SCREEN+$3e7
    jmp b7
  //SEG81 main::@7
  b7:
  //SEG82 [48] *((const byte*) COLS#0+(word) $3e7) ← ++ *((const byte*) COLS#0+(word) $3e7) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc COLS+$3e7
    jmp b7
  //SEG83 main::@5
  b5:
  //SEG84 [49] (byte) startProcessing::center_x#0 ← (byte) main::center_x#0 -- vbuz1=vbuyy 
    sty startProcessing.center_x
  //SEG85 [50] (byte) startProcessing::center_y#0 ← (byte) main::center_y#0
  //SEG86 [51] call startProcessing 
  //SEG87 [52] phi from main::@5 to startProcessing [phi:main::@5->startProcessing]
  startProcessing_from_b5:
    jsr startProcessing
    jmp b4_from_b5
}
//SEG88 startProcessing
// Start processing a char - by inserting it into the PROCESSING array
// startProcessing(byte zeropage($2e) center_x, byte zeropage($2d) center_y)
startProcessing: {
    .label _0 = $2f
    .label _1 = $2f
    .label _5 = $a
    .label _6 = $a
    .label _8 = 8
    .label _9 = 8
    .label _11 = $36
    .label _12 = $36
    .label _13 = $36
    .label _15 = $38
    .label _16 = $38
    .label _17 = $38
    .label _23 = $3b
    .label center_x = $2e
    .label center_y = $2d
    .label i = 7
    .label offset = $2f
    .label colPtr = $33
    .label spriteCol = $35
    .label screenPtr = $2f
    .label spriteData = $a
    .label chargenData = 8
    .label spriteX = $36
    .label spriteY = $38
    .label spritePtr = $3a
    .label freeIdx = 7
    .label _47 = $31
    .label _48 = $2f
  //SEG89 [53] phi from startProcessing to startProcessing::@1 [phi:startProcessing->startProcessing::@1]
  b1_from_startProcessing:
  //SEG90 [53] phi (byte) startProcessing::freeIdx#6 = (byte) $ff [phi:startProcessing->startProcessing::@1#0] -- vbuxx=vbuc1 
    ldx #$ff
    jmp b1
  //SEG91 startProcessing::@1
  b1:
  //SEG92 [54] phi from startProcessing::@1 to startProcessing::@2 [phi:startProcessing::@1->startProcessing::@2]
  b2_from_b1:
  //SEG93 [54] phi (byte) startProcessing::i#2 = (byte) 0 [phi:startProcessing::@1->startProcessing::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b2
  //SEG94 [54] phi from startProcessing::@3 to startProcessing::@2 [phi:startProcessing::@3->startProcessing::@2]
  b2_from_b3:
  //SEG95 [54] phi (byte) startProcessing::i#2 = (byte) startProcessing::i#1 [phi:startProcessing::@3->startProcessing::@2#0] -- register_copy 
    jmp b2
  //SEG96 startProcessing::@2
  b2:
  //SEG97 [55] (byte) startProcessing::$42 ← (byte) startProcessing::i#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda i
    asl
  //SEG98 [56] (byte) startProcessing::$43 ← (byte) startProcessing::$42 + (byte) startProcessing::i#2 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc i
  //SEG99 [57] (byte) startProcessing::$44 ← (byte) startProcessing::$43 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
  //SEG100 [58] (byte) startProcessing::$45 ← (byte) startProcessing::$44 + (byte) startProcessing::i#2 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc i
  //SEG101 [59] (byte~) startProcessing::$30 ← (byte) startProcessing::$45 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
  //SEG102 [60] if(*((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) startProcessing::$30)!=(const byte) STATUS_FREE) goto startProcessing::@3 -- pbuc1_derefidx_vbuaa_neq_vbuc2_then_la1 
    tay
    lda #STATUS_FREE
    cmp PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_STATUS,y
    bne b3
  //SEG103 [61] phi from startProcessing::@2 startProcessing::@9 to startProcessing::@4 [phi:startProcessing::@2/startProcessing::@9->startProcessing::@4]
  b4_from_b2:
  b4_from_b9:
  //SEG104 [61] phi (byte) startProcessing::freeIdx#2 = (byte) startProcessing::i#2 [phi:startProcessing::@2/startProcessing::@9->startProcessing::@4#0] -- register_copy 
    jmp b4
  //SEG105 startProcessing::@4
  b4:
  //SEG106 [62] if((byte) startProcessing::freeIdx#2==(byte) $ff) goto startProcessing::@8 -- vbuz1_eq_vbuc1_then_la1 
    lda #$ff
    cmp freeIdx
    beq b8
    jmp b5
  //SEG107 startProcessing::@5
  b5:
  //SEG108 [63] (word~) startProcessing::$0 ← (word)(byte) startProcessing::center_y#0 -- vwuz1=_word_vbuz2 
    lda center_y
    sta _0
    lda #0
    sta _0+1
  //SEG109 [64] (word) startProcessing::$47 ← (word~) startProcessing::$0 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda _0
    asl
    sta _47
    lda _0+1
    rol
    sta _47+1
    asl _47
    rol _47+1
  //SEG110 [65] (word) startProcessing::$48 ← (word) startProcessing::$47 + (word~) startProcessing::$0 -- vwuz1=vwuz2_plus_vwuz1 
    lda _48
    clc
    adc _47
    sta _48
    lda _48+1
    adc _47+1
    sta _48+1
  //SEG111 [66] (word~) startProcessing::$1 ← (word) startProcessing::$48 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl _1
    rol _1+1
    asl _1
    rol _1+1
    asl _1
    rol _1+1
  //SEG112 [67] (word) startProcessing::offset#0 ← (word~) startProcessing::$1 + (byte) startProcessing::center_x#0 -- vwuz1=vwuz1_plus_vbuz2 
    lda center_x
    clc
    adc offset
    sta offset
    bcc !+
    inc offset+1
  !:
  //SEG113 [68] (byte*) startProcessing::colPtr#0 ← (const byte*) COLS#0 + (word) startProcessing::offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda offset
    clc
    adc #<COLS
    sta colPtr
    lda offset+1
    adc #>COLS
    sta colPtr+1
  //SEG114 [69] (byte) startProcessing::spriteCol#0 ← *((byte*) startProcessing::colPtr#0) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (colPtr),y
    sta spriteCol
  //SEG115 [70] (byte*) startProcessing::screenPtr#0 ← (const byte*) SCREEN#0 + (word) startProcessing::offset#0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda screenPtr
    adc #<SCREEN
    sta screenPtr
    lda screenPtr+1
    adc #>SCREEN
    sta screenPtr+1
  //SEG116 [71] (word~) startProcessing::$5 ← (word)(byte) startProcessing::freeIdx#2 -- vwuz1=_word_vbuz2 
    lda freeIdx
    sta _5
    lda #0
    sta _5+1
  //SEG117 [72] (word~) startProcessing::$6 ← (word~) startProcessing::$5 << (byte) 6 -- vwuz1=vwuz1_rol_6 
    asl _6
    rol _6+1
    asl _6
    rol _6+1
    asl _6
    rol _6+1
    asl _6
    rol _6+1
    asl _6
    rol _6+1
    asl _6
    rol _6+1
  //SEG118 [73] (byte*) startProcessing::spriteData#0 ← (const byte*) SPRITE_DATA#0 + (word~) startProcessing::$6 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda spriteData
    adc #<SPRITE_DATA
    sta spriteData
    lda spriteData+1
    adc #>SPRITE_DATA
    sta spriteData+1
  //SEG119 [74] (byte) startProcessing::ch#0 ← *((byte*) startProcessing::screenPtr#0) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (screenPtr),y
  //SEG120 [75] (word~) startProcessing::$8 ← (word)(byte) startProcessing::ch#0 -- vwuz1=_word_vbuaa 
    sta _8
    lda #0
    sta _8+1
  //SEG121 [76] (word~) startProcessing::$9 ← (word~) startProcessing::$8 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl _9
    rol _9+1
    asl _9
    rol _9+1
    asl _9
    rol _9+1
  //SEG122 [77] (byte*) startProcessing::chargenData#0 ← (const byte*) CHARGEN#0 + (word~) startProcessing::$9 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda chargenData
    adc #<CHARGEN
    sta chargenData
    lda chargenData+1
    adc #>CHARGEN
    sta chargenData+1
  //SEG123 asm { sei  }
    sei
  //SEG124 [79] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
  //SEG125 [80] phi from startProcessing::@5 to startProcessing::@6 [phi:startProcessing::@5->startProcessing::@6]
  b6_from_b5:
  //SEG126 [80] phi (byte) startProcessing::i1#2 = (byte) 0 [phi:startProcessing::@5->startProcessing::@6#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG127 [80] phi (byte*) startProcessing::spriteData#2 = (byte*) startProcessing::spriteData#0 [phi:startProcessing::@5->startProcessing::@6#1] -- register_copy 
  //SEG128 [80] phi (byte*) startProcessing::chargenData#2 = (byte*) startProcessing::chargenData#0 [phi:startProcessing::@5->startProcessing::@6#2] -- register_copy 
    jmp b6
  //SEG129 [80] phi from startProcessing::@6 to startProcessing::@6 [phi:startProcessing::@6->startProcessing::@6]
  b6_from_b6:
  //SEG130 [80] phi (byte) startProcessing::i1#2 = (byte) startProcessing::i1#1 [phi:startProcessing::@6->startProcessing::@6#0] -- register_copy 
  //SEG131 [80] phi (byte*) startProcessing::spriteData#2 = (byte*) startProcessing::spriteData#1 [phi:startProcessing::@6->startProcessing::@6#1] -- register_copy 
  //SEG132 [80] phi (byte*) startProcessing::chargenData#2 = (byte*) startProcessing::chargenData#1 [phi:startProcessing::@6->startProcessing::@6#2] -- register_copy 
    jmp b6
  //SEG133 startProcessing::@6
  b6:
  //SEG134 [81] *((byte*) startProcessing::spriteData#2) ← *((byte*) startProcessing::chargenData#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (chargenData),y
    ldy #0
    sta (spriteData),y
  //SEG135 [82] (byte*) startProcessing::spriteData#1 ← (byte*) startProcessing::spriteData#2 + (byte) 3 -- pbuz1=pbuz1_plus_vbuc1 
    lda #3
    clc
    adc spriteData
    sta spriteData
    bcc !+
    inc spriteData+1
  !:
  //SEG136 [83] (byte*) startProcessing::chargenData#1 ← ++ (byte*) startProcessing::chargenData#2 -- pbuz1=_inc_pbuz1 
    inc chargenData
    bne !+
    inc chargenData+1
  !:
  //SEG137 [84] (byte) startProcessing::i1#1 ← ++ (byte) startProcessing::i1#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG138 [85] if((byte) startProcessing::i1#1!=(byte) 8) goto startProcessing::@6 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b6_from_b6
    jmp b7
  //SEG139 startProcessing::@7
  b7:
  //SEG140 [86] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG141 asm { cli  }
    cli
  //SEG142 [88] (word~) startProcessing::$11 ← (word)(byte) startProcessing::center_x#0 -- vwuz1=_word_vbuz2 
    lda center_x
    sta _11
    lda #0
    sta _11+1
  //SEG143 [89] (word~) startProcessing::$12 ← (word~) startProcessing::$11 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl _12
    rol _12+1
    asl _12
    rol _12+1
    asl _12
    rol _12+1
  //SEG144 [90] (word~) startProcessing::$13 ← (const byte) BORDER_XPOS_LEFT#0 + (word~) startProcessing::$12 -- vwuz1=vbuc1_plus_vwuz1 
    lda #BORDER_XPOS_LEFT
    clc
    adc _13
    sta _13
    bcc !+
    inc _13+1
  !:
  //SEG145 [91] (word) startProcessing::spriteX#0 ← (word~) startProcessing::$13 << (byte) 4 -- vwuz1=vwuz1_rol_4 
    asl spriteX
    rol spriteX+1
    asl spriteX
    rol spriteX+1
    asl spriteX
    rol spriteX+1
    asl spriteX
    rol spriteX+1
  //SEG146 [92] (word~) startProcessing::$15 ← (word)(byte) startProcessing::center_y#0 -- vwuz1=_word_vbuz2 
    lda center_y
    sta _15
    lda #0
    sta _15+1
  //SEG147 [93] (word~) startProcessing::$16 ← (word~) startProcessing::$15 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl _16
    rol _16+1
    asl _16
    rol _16+1
    asl _16
    rol _16+1
  //SEG148 [94] (word~) startProcessing::$17 ← (const byte) BORDER_YPOS_TOP#0 + (word~) startProcessing::$16 -- vwuz1=vbuc1_plus_vwuz1 
    lda #BORDER_YPOS_TOP
    clc
    adc _17
    sta _17
    bcc !+
    inc _17+1
  !:
  //SEG149 [95] (word) startProcessing::spriteY#0 ← (word~) startProcessing::$17 << (byte) 4 -- vwuz1=vwuz1_rol_4 
    asl spriteY
    rol spriteY+1
    asl spriteY
    rol spriteY+1
    asl spriteY
    rol spriteY+1
    asl spriteY
    rol spriteY+1
  //SEG150 [96] (byte) startProcessing::spritePtr#0 ← (byte)(const byte*) SPRITE_DATA#0/(byte) $40 + (byte) startProcessing::freeIdx#2 -- vbuz1=vbuc1_plus_vbuz2 
    lax freeIdx
    axs #-[SPRITE_DATA/$40]
    stx spritePtr
  //SEG151 [97] (byte~) startProcessing::$22 ← (byte) startProcessing::freeIdx#2 << (byte) 3 -- vbuaa=vbuz1_rol_3 
    lda freeIdx
    asl
    asl
    asl
  //SEG152 [98] (word~) startProcessing::$23 ← (word)(byte~) startProcessing::$22 -- vwuz1=_word_vbuaa 
    sta _23
    lda #0
    sta _23+1
  //SEG153 [99] (byte) startProcessing::$50 ← (byte) startProcessing::freeIdx#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda freeIdx
    asl
  //SEG154 [100] (byte) startProcessing::$51 ← (byte) startProcessing::$50 + (byte) startProcessing::freeIdx#2 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc freeIdx
  //SEG155 [101] (byte) startProcessing::$52 ← (byte) startProcessing::$51 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
  //SEG156 [102] (byte) startProcessing::$53 ← (byte) startProcessing::$52 + (byte) startProcessing::freeIdx#2 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc freeIdx
  //SEG157 [103] (byte~) startProcessing::$31 ← (byte) startProcessing::$53 << (byte) 1 -- vbuxx=vbuaa_rol_1 
    asl
    tax
  //SEG158 [104] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) startProcessing::$31) ← (word) startProcessing::spriteX#0 -- pwuc1_derefidx_vbuxx=vwuz1 
    lda spriteX
    sta PROCESSING,x
    lda spriteX+1
    sta PROCESSING+1,x
  //SEG159 [105] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y + (byte~) startProcessing::$31) ← (word) startProcessing::spriteY#0 -- pwuc1_derefidx_vbuxx=vwuz1 
    lda spriteY
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_Y,x
    lda spriteY+1
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_Y+1,x
  //SEG160 [106] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX + (byte~) startProcessing::$31) ← (word~) startProcessing::$23 -- pwuc1_derefidx_vbuxx=vwuz1 
    lda _23
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_VX,x
    lda _23+1
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_VX+1,x
  //SEG161 [107] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY + (byte~) startProcessing::$31) ← (byte) $3c -- pwuc1_derefidx_vbuxx=vbuc2 
    lda #$3c
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_VY,x
    lda #0
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_VY+1,x
  //SEG162 [108] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID + (byte~) startProcessing::$31) ← (byte) startProcessing::freeIdx#2 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda freeIdx
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_ID,x
  //SEG163 [109] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR + (byte~) startProcessing::$31) ← (byte) startProcessing::spritePtr#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda spritePtr
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_PTR,x
  //SEG164 [110] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL + (byte~) startProcessing::$31) ← (byte) startProcessing::spriteCol#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda spriteCol
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_COL,x
  //SEG165 [111] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) startProcessing::$31) ← (const byte) STATUS_NEW -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #STATUS_NEW
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_STATUS,x
  //SEG166 [112] *((byte**)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR + (byte~) startProcessing::$31) ← (byte*) startProcessing::screenPtr#0 -- pptc1_derefidx_vbuxx=pbuz1 
    lda screenPtr
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR,x
    lda screenPtr+1
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR+1,x
    jmp breturn
  //SEG167 startProcessing::@return
  breturn:
  //SEG168 [113] return 
    rts
  //SEG169 startProcessing::@8
  b8:
  //SEG170 [114] (byte~) startProcessing::freeIdx#7 ← (byte) startProcessing::freeIdx#2 -- vbuxx=vbuz1 
    ldx freeIdx
  //SEG171 [53] phi from startProcessing::@8 to startProcessing::@1 [phi:startProcessing::@8->startProcessing::@1]
  b1_from_b8:
  //SEG172 [53] phi (byte) startProcessing::freeIdx#6 = (byte~) startProcessing::freeIdx#7 [phi:startProcessing::@8->startProcessing::@1#0] -- register_copy 
    jmp b1
  //SEG173 startProcessing::@3
  b3:
  //SEG174 [115] (byte) startProcessing::i#1 ← ++ (byte) startProcessing::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG175 [116] if((byte) startProcessing::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto startProcessing::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_PROCESSING-1+1
    cmp i
    bne b2_from_b3
    jmp b9
  //SEG176 startProcessing::@9
  b9:
  //SEG177 [117] (byte~) startProcessing::freeIdx#8 ← (byte) startProcessing::freeIdx#6 -- vbuz1=vbuxx 
    stx freeIdx
    jmp b4_from_b9
}
//SEG178 getCharToProcess
// Find the non-space char closest to the center of the screen
// If no non-space char is found the distance will be 0xffff
getCharToProcess: {
    .label _8 = $3d
    .label _9 = $3d
    .label _10 = $3d
    .label screen_line = $c
    .label dist_line = $e
    .label y = $10
    .label return_x = $12
    .label return_y = $13
    .label closest_dist = $11
    .label closest_x = $12
    .label closest_y = $13
    .label _12 = $3f
    .label _13 = $3d
  //SEG179 [118] (byte*) getCharToProcess::screen_line#0 ← (byte*)(void*) SCREEN_COPY#0 -- pbuz1=pbuz2 
    lda SCREEN_COPY
    sta screen_line
    lda SCREEN_COPY+1
    sta screen_line+1
  //SEG180 [119] (byte*) getCharToProcess::dist_line#0 ← (byte*)(void*) SCREEN_DIST#0 -- pbuz1=pbuz2 
    lda SCREEN_DIST
    sta dist_line
    lda SCREEN_DIST+1
    sta dist_line+1
  //SEG181 [120] phi from getCharToProcess to getCharToProcess::@1 [phi:getCharToProcess->getCharToProcess::@1]
  b1_from_getCharToProcess:
  //SEG182 [120] phi (byte) getCharToProcess::closest_y#9 = (byte) 0 [phi:getCharToProcess->getCharToProcess::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta closest_y
  //SEG183 [120] phi (byte) getCharToProcess::closest_x#9 = (byte) 0 [phi:getCharToProcess->getCharToProcess::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta closest_x
  //SEG184 [120] phi (byte) getCharToProcess::y#7 = (byte) 0 [phi:getCharToProcess->getCharToProcess::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG185 [120] phi (byte) getCharToProcess::closest_dist#8 = (const byte) NOT_FOUND#0 [phi:getCharToProcess->getCharToProcess::@1#3] -- vbuz1=vbuc1 
    lda #NOT_FOUND
    sta closest_dist
  //SEG186 [120] phi (byte*) getCharToProcess::dist_line#6 = (byte*) getCharToProcess::dist_line#0 [phi:getCharToProcess->getCharToProcess::@1#4] -- register_copy 
  //SEG187 [120] phi (byte*) getCharToProcess::screen_line#4 = (byte*) getCharToProcess::screen_line#0 [phi:getCharToProcess->getCharToProcess::@1#5] -- register_copy 
    jmp b1
  //SEG188 getCharToProcess::@1
  b1:
  //SEG189 [121] phi from getCharToProcess::@1 to getCharToProcess::@2 [phi:getCharToProcess::@1->getCharToProcess::@2]
  b2_from_b1:
  //SEG190 [121] phi (byte) getCharToProcess::closest_y#7 = (byte) getCharToProcess::closest_y#9 [phi:getCharToProcess::@1->getCharToProcess::@2#0] -- register_copy 
  //SEG191 [121] phi (byte) getCharToProcess::closest_x#7 = (byte) getCharToProcess::closest_x#9 [phi:getCharToProcess::@1->getCharToProcess::@2#1] -- register_copy 
  //SEG192 [121] phi (byte) getCharToProcess::closest_dist#2 = (byte) getCharToProcess::closest_dist#8 [phi:getCharToProcess::@1->getCharToProcess::@2#2] -- register_copy 
  //SEG193 [121] phi (byte) getCharToProcess::x#2 = (byte) 0 [phi:getCharToProcess::@1->getCharToProcess::@2#3] -- vbuyy=vbuc1 
    ldy #0
    jmp b2
  //SEG194 getCharToProcess::@2
  b2:
  //SEG195 [122] if(*((byte*) getCharToProcess::screen_line#4 + (byte) getCharToProcess::x#2)==(byte) ' ') goto getCharToProcess::@11 -- pbuz1_derefidx_vbuyy_eq_vbuc1_then_la1 
    lda (screen_line),y
    cmp #' '
    beq b11
    jmp b4
  //SEG196 getCharToProcess::@4
  b4:
  //SEG197 [123] (byte) getCharToProcess::dist#0 ← *((byte*) getCharToProcess::dist_line#6 + (byte) getCharToProcess::x#2) -- vbuxx=pbuz1_derefidx_vbuyy 
    lda (dist_line),y
    tax
  //SEG198 [124] if((byte) getCharToProcess::dist#0>=(byte) getCharToProcess::closest_dist#2) goto getCharToProcess::@12 -- vbuxx_ge_vbuz1_then_la1 
    cpx closest_dist
    bcs b12
    jmp b5
  //SEG199 getCharToProcess::@5
  b5:
  //SEG200 [125] (byte~) getCharToProcess::return_x#7 ← (byte) getCharToProcess::x#2 -- vbuz1=vbuyy 
    sty return_x
  //SEG201 [126] (byte~) getCharToProcess::return_y#7 ← (byte) getCharToProcess::y#7 -- vbuz1=vbuz2 
    lda y
    sta return_y
  //SEG202 [127] phi from getCharToProcess::@11 getCharToProcess::@12 getCharToProcess::@5 to getCharToProcess::@3 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3]
  b3_from_b11:
  b3_from_b12:
  b3_from_b5:
  //SEG203 [127] phi (byte) getCharToProcess::return_y#1 = (byte) getCharToProcess::closest_y#7 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3#0] -- register_copy 
  //SEG204 [127] phi (byte) getCharToProcess::return_x#1 = (byte) getCharToProcess::closest_x#7 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3#1] -- register_copy 
  //SEG205 [127] phi (byte) getCharToProcess::return_dist#1 = (byte~) getCharToProcess::return_dist#5 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3#2] -- register_copy 
    jmp b3
  //SEG206 getCharToProcess::@3
  b3:
  //SEG207 [128] (byte) getCharToProcess::x#1 ← ++ (byte) getCharToProcess::x#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG208 [129] if((byte) getCharToProcess::x#1!=(byte) $28) goto getCharToProcess::@10 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$28
    bne b10
    jmp b6
  //SEG209 getCharToProcess::@6
  b6:
  //SEG210 [130] (byte*) getCharToProcess::screen_line#1 ← (byte*) getCharToProcess::screen_line#4 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc screen_line
    sta screen_line
    bcc !+
    inc screen_line+1
  !:
  //SEG211 [131] (byte*) getCharToProcess::dist_line#1 ← (byte*) getCharToProcess::dist_line#6 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc dist_line
    sta dist_line
    bcc !+
    inc dist_line+1
  !:
  //SEG212 [132] (byte) getCharToProcess::y#1 ← ++ (byte) getCharToProcess::y#7 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG213 [133] if((byte) getCharToProcess::y#1!=(byte) $19) goto getCharToProcess::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp y
    bne b9
    jmp b7
  //SEG214 getCharToProcess::@7
  b7:
  //SEG215 [134] if((byte) getCharToProcess::return_dist#1==(const byte) NOT_FOUND#0) goto getCharToProcess::@return -- vbuxx_eq_vbuc1_then_la1 
    cpx #NOT_FOUND
    beq breturn
    jmp b8
  //SEG216 getCharToProcess::@8
  b8:
  //SEG217 [135] (word~) getCharToProcess::$8 ← (word)(byte) getCharToProcess::return_y#1 -- vwuz1=_word_vbuz2 
    lda return_y
    sta _8
    lda #0
    sta _8+1
  //SEG218 [136] (word) getCharToProcess::$12 ← (word~) getCharToProcess::$8 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda _8
    asl
    sta _12
    lda _8+1
    rol
    sta _12+1
    asl _12
    rol _12+1
  //SEG219 [137] (word) getCharToProcess::$13 ← (word) getCharToProcess::$12 + (word~) getCharToProcess::$8 -- vwuz1=vwuz2_plus_vwuz1 
    lda _13
    clc
    adc _12
    sta _13
    lda _13+1
    adc _12+1
    sta _13+1
  //SEG220 [138] (word~) getCharToProcess::$9 ← (word) getCharToProcess::$13 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl _9
    rol _9+1
    asl _9
    rol _9+1
    asl _9
    rol _9+1
  //SEG221 [139] (byte*~) getCharToProcess::$10 ← (byte*)(void*) SCREEN_COPY#0 + (word~) getCharToProcess::$9 -- pbuz1=pbuz2_plus_vwuz1 
    lda _10
    clc
    adc SCREEN_COPY
    sta _10
    lda _10+1
    adc SCREEN_COPY+1
    sta _10+1
  //SEG222 [140] *((byte*~) getCharToProcess::$10 + (byte) getCharToProcess::return_x#1) ← (byte) ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    // clear the found char on the screen copy
    lda #' '
    ldy return_x
    sta (_10),y
    jmp breturn
  //SEG223 getCharToProcess::@return
  breturn:
  //SEG224 [141] return 
    rts
  //SEG225 getCharToProcess::@9
  b9:
  //SEG226 [142] (byte~) getCharToProcess::closest_dist#10 ← (byte) getCharToProcess::return_dist#1 -- vbuz1=vbuxx 
    stx closest_dist
  //SEG227 [120] phi from getCharToProcess::@9 to getCharToProcess::@1 [phi:getCharToProcess::@9->getCharToProcess::@1]
  b1_from_b9:
  //SEG228 [120] phi (byte) getCharToProcess::closest_y#9 = (byte) getCharToProcess::return_y#1 [phi:getCharToProcess::@9->getCharToProcess::@1#0] -- register_copy 
  //SEG229 [120] phi (byte) getCharToProcess::closest_x#9 = (byte) getCharToProcess::return_x#1 [phi:getCharToProcess::@9->getCharToProcess::@1#1] -- register_copy 
  //SEG230 [120] phi (byte) getCharToProcess::y#7 = (byte) getCharToProcess::y#1 [phi:getCharToProcess::@9->getCharToProcess::@1#2] -- register_copy 
  //SEG231 [120] phi (byte) getCharToProcess::closest_dist#8 = (byte~) getCharToProcess::closest_dist#10 [phi:getCharToProcess::@9->getCharToProcess::@1#3] -- register_copy 
  //SEG232 [120] phi (byte*) getCharToProcess::dist_line#6 = (byte*) getCharToProcess::dist_line#1 [phi:getCharToProcess::@9->getCharToProcess::@1#4] -- register_copy 
  //SEG233 [120] phi (byte*) getCharToProcess::screen_line#4 = (byte*) getCharToProcess::screen_line#1 [phi:getCharToProcess::@9->getCharToProcess::@1#5] -- register_copy 
    jmp b1
  //SEG234 getCharToProcess::@10
  b10:
  //SEG235 [143] (byte~) getCharToProcess::closest_dist#12 ← (byte) getCharToProcess::return_dist#1 -- vbuz1=vbuxx 
    stx closest_dist
  //SEG236 [121] phi from getCharToProcess::@10 to getCharToProcess::@2 [phi:getCharToProcess::@10->getCharToProcess::@2]
  b2_from_b10:
  //SEG237 [121] phi (byte) getCharToProcess::closest_y#7 = (byte) getCharToProcess::return_y#1 [phi:getCharToProcess::@10->getCharToProcess::@2#0] -- register_copy 
  //SEG238 [121] phi (byte) getCharToProcess::closest_x#7 = (byte) getCharToProcess::return_x#1 [phi:getCharToProcess::@10->getCharToProcess::@2#1] -- register_copy 
  //SEG239 [121] phi (byte) getCharToProcess::closest_dist#2 = (byte~) getCharToProcess::closest_dist#12 [phi:getCharToProcess::@10->getCharToProcess::@2#2] -- register_copy 
  //SEG240 [121] phi (byte) getCharToProcess::x#2 = (byte) getCharToProcess::x#1 [phi:getCharToProcess::@10->getCharToProcess::@2#3] -- register_copy 
    jmp b2
  //SEG241 getCharToProcess::@12
  b12:
  //SEG242 [144] (byte~) getCharToProcess::return_dist#6 ← (byte) getCharToProcess::closest_dist#2 -- vbuxx=vbuz1 
    ldx closest_dist
    jmp b3_from_b12
  //SEG243 getCharToProcess::@11
  b11:
  //SEG244 [145] (byte~) getCharToProcess::return_dist#5 ← (byte) getCharToProcess::closest_dist#2 -- vbuxx=vbuz1 
    ldx closest_dist
    jmp b3_from_b11
}
//SEG245 setupRasterIrq
// Setup Raster IRQ
setupRasterIrq: {
    .label irqRoutine = irqTop
  //SEG246 asm { sei  }
    sei
  //SEG247 [147] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG248 [148] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG249 [149] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
    jmp b1
  //SEG250 setupRasterIrq::@1
  b1:
  //SEG251 [150] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
    jmp b2
  //SEG252 setupRasterIrq::@2
  b2:
  //SEG253 [151] *((const byte*) RASTER#0) ← <(const byte) RASTER_IRQ_TOP#0 -- _deref_pbuc1=vbuc2 
    lda #RASTER_IRQ_TOP
    sta RASTER
  //SEG254 [152] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
  //SEG255 [153] *((const void()**) HARDWARE_IRQ#0) ← (const void()*) setupRasterIrq::irqRoutine#0 -- _deref_pptc1=pprc2 
    // Set the IRQ routine
    lda #<irqRoutine
    sta HARDWARE_IRQ
    lda #>irqRoutine
    sta HARDWARE_IRQ+1
  //SEG256 asm { cli  }
    cli
    jmp breturn
  //SEG257 setupRasterIrq::@return
  breturn:
  //SEG258 [155] return 
    rts
}
//SEG259 initSprites
// Initialize sprites
initSprites: {
    .label sp = $14
  //SEG260 [157] phi from initSprites to initSprites::@1 [phi:initSprites->initSprites::@1]
  b1_from_initSprites:
  //SEG261 [157] phi (byte*) initSprites::sp#2 = (const byte*) SPRITE_DATA#0 [phi:initSprites->initSprites::@1#0] -- pbuz1=pbuc1 
    lda #<SPRITE_DATA
    sta sp
    lda #>SPRITE_DATA
    sta sp+1
    jmp b1
  // Clear sprite data
  //SEG262 [157] phi from initSprites::@1 to initSprites::@1 [phi:initSprites::@1->initSprites::@1]
  b1_from_b1:
  //SEG263 [157] phi (byte*) initSprites::sp#2 = (byte*) initSprites::sp#1 [phi:initSprites::@1->initSprites::@1#0] -- register_copy 
    jmp b1
  //SEG264 initSprites::@1
  b1:
  //SEG265 [158] *((byte*) initSprites::sp#2) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (sp),y
  //SEG266 [159] (byte*) initSprites::sp#1 ← ++ (byte*) initSprites::sp#2 -- pbuz1=_inc_pbuz1 
    inc sp
    bne !+
    inc sp+1
  !:
  //SEG267 [160] if((byte*) initSprites::sp#1<(const byte*) SPRITE_DATA#0+(const byte) NUM_PROCESSING#0*(byte) $40) goto initSprites::@1 -- pbuz1_lt_pbuc1_then_la1 
    lda sp+1
    cmp #>SPRITE_DATA+NUM_PROCESSING*$40
    bcc b1_from_b1
    bne !+
    lda sp
    cmp #<SPRITE_DATA+NUM_PROCESSING*$40
    bcc b1_from_b1
  !:
  //SEG268 [161] phi from initSprites::@1 to initSprites::@2 [phi:initSprites::@1->initSprites::@2]
  b2_from_b1:
  //SEG269 [161] phi (byte) initSprites::i#2 = (byte) 0 [phi:initSprites::@1->initSprites::@2#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b2
  // Initialize sprite registers
  //SEG270 [161] phi from initSprites::@2 to initSprites::@2 [phi:initSprites::@2->initSprites::@2]
  b2_from_b2:
  //SEG271 [161] phi (byte) initSprites::i#2 = (byte) initSprites::i#1 [phi:initSprites::@2->initSprites::@2#0] -- register_copy 
    jmp b2
  //SEG272 initSprites::@2
  b2:
  //SEG273 [162] *((const byte*) SPRITES_COLS#0 + (byte) initSprites::i#2) ← (const byte) LIGHT_BLUE#0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #LIGHT_BLUE
    sta SPRITES_COLS,x
  //SEG274 [163] (byte) initSprites::i#1 ← ++ (byte) initSprites::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG275 [164] if((byte) initSprites::i#1!=(byte) 8) goto initSprites::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b2_from_b2
    jmp b3
  //SEG276 initSprites::@3
  b3:
  //SEG277 [165] *((const byte*) SPRITES_MC#0) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_MC
  //SEG278 [166] *((const byte*) SPRITES_EXPAND_X#0) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_EXPAND_X
  //SEG279 [167] *((const byte*) SPRITES_EXPAND_Y#0) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_EXPAND_Y
    jmp breturn
  //SEG280 initSprites::@return
  breturn:
  //SEG281 [168] return 
    rts
}
//SEG282 init_dist_screen
// Populates 1000 bytes (a screen) with values representing the distance to the center.
// The actual value stored is distance*2 to increase precision
// init_dist_screen(byte* zeropage($17) screen)
init_dist_screen: {
    .label screen = $17
    .label screen_bottomline = $19
    .label yds = $41
    .label xds = $43
    .label ds = $43
    .label x = $1b
    .label xb = $1c
    .label screen_topline = $17
    .label y = $16
  //SEG283 [170] call init_squares 
  //SEG284 [241] phi from init_dist_screen to init_squares [phi:init_dist_screen->init_squares]
  init_squares_from_init_dist_screen:
    jsr init_squares
    jmp b10
  //SEG285 init_dist_screen::@10
  b10:
  //SEG286 [171] (byte*) init_dist_screen::screen_bottomline#0 ← (byte*) init_dist_screen::screen#0 + (word)(number) $28*(number) $18 -- pbuz1=pbuz2_plus_vwuc1 
    lda screen
    clc
    adc #<$28*$18
    sta screen_bottomline
    lda screen+1
    adc #>$28*$18
    sta screen_bottomline+1
  //SEG287 [172] phi from init_dist_screen::@10 to init_dist_screen::@1 [phi:init_dist_screen::@10->init_dist_screen::@1]
  b1_from_b10:
  //SEG288 [172] phi (byte*) init_dist_screen::screen_bottomline#10 = (byte*) init_dist_screen::screen_bottomline#0 [phi:init_dist_screen::@10->init_dist_screen::@1#0] -- register_copy 
  //SEG289 [172] phi (byte*) init_dist_screen::screen_topline#10 = (byte*) init_dist_screen::screen#0 [phi:init_dist_screen::@10->init_dist_screen::@1#1] -- register_copy 
  //SEG290 [172] phi (byte) init_dist_screen::y#10 = (byte) 0 [phi:init_dist_screen::@10->init_dist_screen::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta y
    jmp b1
  //SEG291 [172] phi from init_dist_screen::@9 to init_dist_screen::@1 [phi:init_dist_screen::@9->init_dist_screen::@1]
  b1_from_b9:
  //SEG292 [172] phi (byte*) init_dist_screen::screen_bottomline#10 = (byte*) init_dist_screen::screen_bottomline#1 [phi:init_dist_screen::@9->init_dist_screen::@1#0] -- register_copy 
  //SEG293 [172] phi (byte*) init_dist_screen::screen_topline#10 = (byte*) init_dist_screen::screen_topline#1 [phi:init_dist_screen::@9->init_dist_screen::@1#1] -- register_copy 
  //SEG294 [172] phi (byte) init_dist_screen::y#10 = (byte) init_dist_screen::y#1 [phi:init_dist_screen::@9->init_dist_screen::@1#2] -- register_copy 
    jmp b1
  //SEG295 init_dist_screen::@1
  b1:
  //SEG296 [173] (byte) init_dist_screen::y2#0 ← (byte) init_dist_screen::y#10 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda y
    asl
  //SEG297 [174] if((byte) init_dist_screen::y2#0>=(byte) $18) goto init_dist_screen::@2 -- vbuaa_ge_vbuc1_then_la1 
    cmp #$18
    bcs b2
    jmp b3
  //SEG298 init_dist_screen::@3
  b3:
  //SEG299 [175] (byte~) init_dist_screen::$5 ← (byte) $18 - (byte) init_dist_screen::y2#0 -- vbuaa=vbuc1_minus_vbuaa 
    eor #$ff
    clc
    adc #$18+1
  //SEG300 [176] phi from init_dist_screen::@2 init_dist_screen::@3 to init_dist_screen::@4 [phi:init_dist_screen::@2/init_dist_screen::@3->init_dist_screen::@4]
  b4_from_b2:
  b4_from_b3:
  //SEG301 [176] phi (byte) init_dist_screen::yd#0 = (byte~) init_dist_screen::$7 [phi:init_dist_screen::@2/init_dist_screen::@3->init_dist_screen::@4#0] -- register_copy 
    jmp b4
  //SEG302 init_dist_screen::@4
  b4:
  //SEG303 [177] (byte) sqr::val#0 ← (byte) init_dist_screen::yd#0
  //SEG304 [178] call sqr 
  //SEG305 [237] phi from init_dist_screen::@4 to sqr [phi:init_dist_screen::@4->sqr]
  sqr_from_b4:
  //SEG306 [237] phi (byte) sqr::val#2 = (byte) sqr::val#0 [phi:init_dist_screen::@4->sqr#0] -- register_copy 
    jsr sqr
  //SEG307 [179] (word) sqr::return#2 ← (word) sqr::return#0 -- vwuz1=vwuz2 
    lda sqr.return
    sta sqr.return_2
    lda sqr.return+1
    sta sqr.return_2+1
    jmp b11
  //SEG308 init_dist_screen::@11
  b11:
  //SEG309 [180] (word) init_dist_screen::yds#0 ← (word) sqr::return#2
  //SEG310 [181] phi from init_dist_screen::@11 to init_dist_screen::@5 [phi:init_dist_screen::@11->init_dist_screen::@5]
  b5_from_b11:
  //SEG311 [181] phi (byte) init_dist_screen::xb#2 = (byte) $27 [phi:init_dist_screen::@11->init_dist_screen::@5#0] -- vbuz1=vbuc1 
    lda #$27
    sta xb
  //SEG312 [181] phi (byte) init_dist_screen::x#2 = (byte) 0 [phi:init_dist_screen::@11->init_dist_screen::@5#1] -- vbuz1=vbuc1 
    lda #0
    sta x
    jmp b5
  //SEG313 [181] phi from init_dist_screen::@13 to init_dist_screen::@5 [phi:init_dist_screen::@13->init_dist_screen::@5]
  b5_from_b13:
  //SEG314 [181] phi (byte) init_dist_screen::xb#2 = (byte) init_dist_screen::xb#1 [phi:init_dist_screen::@13->init_dist_screen::@5#0] -- register_copy 
  //SEG315 [181] phi (byte) init_dist_screen::x#2 = (byte) init_dist_screen::x#1 [phi:init_dist_screen::@13->init_dist_screen::@5#1] -- register_copy 
    jmp b5
  //SEG316 init_dist_screen::@5
  b5:
  //SEG317 [182] (byte) init_dist_screen::x2#0 ← (byte) init_dist_screen::x#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda x
    asl
  //SEG318 [183] if((byte) init_dist_screen::x2#0>=(byte) $27) goto init_dist_screen::@6 -- vbuaa_ge_vbuc1_then_la1 
    cmp #$27
    bcs b6
    jmp b7
  //SEG319 init_dist_screen::@7
  b7:
  //SEG320 [184] (byte~) init_dist_screen::$13 ← (byte) $27 - (byte) init_dist_screen::x2#0 -- vbuaa=vbuc1_minus_vbuaa 
    eor #$ff
    clc
    adc #$27+1
  //SEG321 [185] phi from init_dist_screen::@6 init_dist_screen::@7 to init_dist_screen::@8 [phi:init_dist_screen::@6/init_dist_screen::@7->init_dist_screen::@8]
  b8_from_b6:
  b8_from_b7:
  //SEG322 [185] phi (byte) init_dist_screen::xd#0 = (byte~) init_dist_screen::$15 [phi:init_dist_screen::@6/init_dist_screen::@7->init_dist_screen::@8#0] -- register_copy 
    jmp b8
  //SEG323 init_dist_screen::@8
  b8:
  //SEG324 [186] (byte) sqr::val#1 ← (byte) init_dist_screen::xd#0
  //SEG325 [187] call sqr 
  //SEG326 [237] phi from init_dist_screen::@8 to sqr [phi:init_dist_screen::@8->sqr]
  sqr_from_b8:
  //SEG327 [237] phi (byte) sqr::val#2 = (byte) sqr::val#1 [phi:init_dist_screen::@8->sqr#0] -- register_copy 
    jsr sqr
  //SEG328 [188] (word) sqr::return#3 ← (word) sqr::return#0
    jmp b12
  //SEG329 init_dist_screen::@12
  b12:
  //SEG330 [189] (word) init_dist_screen::xds#0 ← (word) sqr::return#3
  //SEG331 [190] (word) init_dist_screen::ds#0 ← (word) init_dist_screen::xds#0 + (word) init_dist_screen::yds#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda ds
    clc
    adc yds
    sta ds
    lda ds+1
    adc yds+1
    sta ds+1
  //SEG332 [191] (word) sqrt::val#0 ← (word) init_dist_screen::ds#0
  //SEG333 [192] call sqrt 
    jsr sqrt
  //SEG334 [193] (byte) sqrt::return#2 ← (byte) sqrt::return#0
    jmp b13
  //SEG335 init_dist_screen::@13
  b13:
  //SEG336 [194] (byte) init_dist_screen::d#0 ← (byte) sqrt::return#2
  //SEG337 [195] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy x
    sta (screen_topline),y
  //SEG338 [196] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy x
    sta (screen_bottomline),y
  //SEG339 [197] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy xb
    sta (screen_topline),y
  //SEG340 [198] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy xb
    sta (screen_bottomline),y
  //SEG341 [199] (byte) init_dist_screen::x#1 ← ++ (byte) init_dist_screen::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG342 [200] (byte) init_dist_screen::xb#1 ← -- (byte) init_dist_screen::xb#2 -- vbuz1=_dec_vbuz1 
    dec xb
  //SEG343 [201] if((byte) init_dist_screen::x#1<(byte) $13+(byte) 1) goto init_dist_screen::@5 -- vbuz1_lt_vbuc1_then_la1 
    lda x
    cmp #$13+1
    bcc b5_from_b13
    jmp b9
  //SEG344 init_dist_screen::@9
  b9:
  //SEG345 [202] (byte*) init_dist_screen::screen_topline#1 ← (byte*) init_dist_screen::screen_topline#10 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc screen_topline
    sta screen_topline
    bcc !+
    inc screen_topline+1
  !:
  //SEG346 [203] (byte*) init_dist_screen::screen_bottomline#1 ← (byte*) init_dist_screen::screen_bottomline#10 - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda screen_bottomline
    sec
    sbc #<$28
    sta screen_bottomline
    lda screen_bottomline+1
    sbc #>$28
    sta screen_bottomline+1
  //SEG347 [204] (byte) init_dist_screen::y#1 ← ++ (byte) init_dist_screen::y#10 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG348 [205] if((byte) init_dist_screen::y#1!=(byte) $d) goto init_dist_screen::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$d
    cmp y
    bne b1_from_b9
    jmp breturn
  //SEG349 init_dist_screen::@return
  breturn:
  //SEG350 [206] return 
    rts
  //SEG351 init_dist_screen::@6
  b6:
  //SEG352 [207] (byte~) init_dist_screen::$15 ← (byte) init_dist_screen::x2#0 - (byte) $27 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #$27
    jmp b8_from_b6
  //SEG353 init_dist_screen::@2
  b2:
  //SEG354 [208] (byte~) init_dist_screen::$7 ← (byte) init_dist_screen::y2#0 - (byte) $18 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #$18
    jmp b4_from_b2
}
//SEG355 sqrt
// Find the (integer) square root of a word value
// If the square is not an integer then it returns the largest integer N where N*N <= val
// Uses a table of squares that must be initialized by calling init_squares()
// sqrt(word zeropage($43) val)
sqrt: {
    .label _1 = $1d
    .label _3 = $1d
    .label found = $1d
    .label val = $43
  //SEG356 [209] (word) bsearch16u::key#0 ← (word) sqrt::val#0
  //SEG357 [210] (word*) bsearch16u::items#1 ← (word*)(void*) SQUARES#1 -- pwuz1=pwuz2 
    lda SQUARES
    sta bsearch16u.items
    lda SQUARES+1
    sta bsearch16u.items+1
  //SEG358 [211] call bsearch16u 
  //SEG359 [218] phi from sqrt to bsearch16u [phi:sqrt->bsearch16u]
  bsearch16u_from_sqrt:
    jsr bsearch16u
  //SEG360 [212] (word*) bsearch16u::return#3 ← (word*) bsearch16u::return#1
    jmp b1
  //SEG361 sqrt::@1
  b1:
  //SEG362 [213] (word*) sqrt::found#0 ← (word*) bsearch16u::return#3
  //SEG363 [214] (word~) sqrt::$3 ← (word*) sqrt::found#0 - (word*)(void*) SQUARES#1 -- vwuz1=pwuz1_minus_pwuz2 
    lda _3
    sec
    sbc SQUARES
    sta _3
    lda _3+1
    sbc SQUARES+1
    sta _3+1
  //SEG364 [215] (word~) sqrt::$1 ← (word~) sqrt::$3 >> (byte) 1 -- vwuz1=vwuz1_ror_1 
    lsr _1+1
    ror _1
  //SEG365 [216] (byte) sqrt::return#0 ← (byte)(word~) sqrt::$1 -- vbuaa=_byte_vwuz1 
    lda _1
    jmp breturn
  //SEG366 sqrt::@return
  breturn:
  //SEG367 [217] return 
    rts
}
//SEG368 bsearch16u
// Searches an array of nitems unsigned words, the initial member of which is pointed to by base, for a member that matches the value key.
// - key - The value to look for
// - items - Pointer to the start of the array to search in
// - num - The number of items in the array
// Returns pointer to an entry in the array that matches the search key
// bsearch16u(word zeropage($43) key, word* zeropage($1d) items, byte register(X) num)
bsearch16u: {
    .label _2 = $1d
    .label pivot = $45
    .label result = $47
    .label return = $1d
    .label items = $1d
    .label key = $43
  //SEG369 [219] phi from bsearch16u to bsearch16u::@3 [phi:bsearch16u->bsearch16u::@3]
  b3_from_bsearch16u:
  //SEG370 [219] phi (word*) bsearch16u::items#2 = (word*) bsearch16u::items#1 [phi:bsearch16u->bsearch16u::@3#0] -- register_copy 
  //SEG371 [219] phi (byte) bsearch16u::num#3 = (const byte) NUM_SQUARES#3 [phi:bsearch16u->bsearch16u::@3#1] -- vbuxx=vbuc1 
    ldx #NUM_SQUARES
    jmp b3
  //SEG372 bsearch16u::@3
  b3:
  //SEG373 [220] if((byte) bsearch16u::num#3>(byte) 0) goto bsearch16u::@4 -- vbuxx_gt_0_then_la1 
    cpx #0
    bne b4
    jmp b5
  //SEG374 bsearch16u::@5
  b5:
  //SEG375 [221] if(*((word*) bsearch16u::items#2)<=(word) bsearch16u::key#0) goto bsearch16u::@2 -- _deref_pwuz1_le_vwuz2_then_la1 
    ldy #1
    lda (items),y
    cmp key+1
    bne !+
    dey
    lda (items),y
    cmp key
    beq b2_from_b5
  !:
    bcc b2_from_b5
    jmp b1
  //SEG376 bsearch16u::@1
  b1:
  //SEG377 [222] (word*~) bsearch16u::$2 ← (word*) bsearch16u::items#2 - (byte) 1*(const byte) SIZEOF_WORD -- pwuz1=pwuz1_minus_vwuc1 
    lda _2
    sec
    sbc #<1*SIZEOF_WORD
    sta _2
    lda _2+1
    sbc #>1*SIZEOF_WORD
    sta _2+1
  //SEG378 [223] phi from bsearch16u::@1 bsearch16u::@5 to bsearch16u::@2 [phi:bsearch16u::@1/bsearch16u::@5->bsearch16u::@2]
  b2_from_b1:
  b2_from_b5:
  //SEG379 [223] phi (word*) bsearch16u::return#2 = (word*~) bsearch16u::$2 [phi:bsearch16u::@1/bsearch16u::@5->bsearch16u::@2#0] -- register_copy 
    jmp b2
  //SEG380 bsearch16u::@2
  b2:
  //SEG381 [224] phi from bsearch16u::@2 bsearch16u::@8 to bsearch16u::@return [phi:bsearch16u::@2/bsearch16u::@8->bsearch16u::@return]
  breturn_from_b2:
  breturn_from_b8:
  //SEG382 [224] phi (word*) bsearch16u::return#1 = (word*) bsearch16u::return#2 [phi:bsearch16u::@2/bsearch16u::@8->bsearch16u::@return#0] -- register_copy 
    jmp breturn
  //SEG383 bsearch16u::@return
  breturn:
  //SEG384 [225] return 
    rts
  //SEG385 bsearch16u::@4
  b4:
  //SEG386 [226] (byte~) bsearch16u::$6 ← (byte) bsearch16u::num#3 >> (byte) 1 -- vbuaa=vbuxx_ror_1 
    txa
    lsr
  //SEG387 [227] (byte~) bsearch16u::$16 ← (byte~) bsearch16u::$6 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
  //SEG388 [228] (word*) bsearch16u::pivot#0 ← (word*) bsearch16u::items#2 + (byte~) bsearch16u::$16 -- pwuz1=pwuz2_plus_vbuaa 
    clc
    adc items
    sta pivot
    lda #0
    adc items+1
    sta pivot+1
  //SEG389 [229] (signed word) bsearch16u::result#0 ← (signed word)(word) bsearch16u::key#0 - (signed word)*((word*) bsearch16u::pivot#0) -- vwsz1=vwsz2_minus__deref_pwsz3 
    sec
    lda key
    ldy #0
    sbc (pivot),y
    sta result
    lda key+1
    iny
    sbc (pivot),y
    sta result+1
  //SEG390 [230] if((signed word) bsearch16u::result#0!=(signed byte) 0) goto bsearch16u::@6 -- vwsz1_neq_0_then_la1 
    lda result+1
    bne b6
    lda result
    bne b6
    jmp b8
  //SEG391 bsearch16u::@8
  b8:
  //SEG392 [231] (word*~) bsearch16u::return#6 ← (word*) bsearch16u::pivot#0 -- pwuz1=pwuz2 
    lda pivot
    sta return
    lda pivot+1
    sta return+1
    jmp breturn_from_b8
  //SEG393 bsearch16u::@6
  b6:
  //SEG394 [232] if((signed word) bsearch16u::result#0<=(signed byte) 0) goto bsearch16u::@7 -- vwsz1_le_0_then_la1 
    lda result+1
    bmi b7_from_b6
    bne !+
    lda result
    beq b7_from_b6
  !:
    jmp b9
  //SEG395 bsearch16u::@9
  b9:
  //SEG396 [233] (word*) bsearch16u::items#0 ← (word*) bsearch16u::pivot#0 + (byte) 1*(const byte) SIZEOF_WORD -- pwuz1=pwuz2_plus_vbuc1 
    lda #1*SIZEOF_WORD
    clc
    adc pivot
    sta items
    lda #0
    adc pivot+1
    sta items+1
  //SEG397 [234] (byte) bsearch16u::num#1 ← -- (byte) bsearch16u::num#3 -- vbuxx=_dec_vbuxx 
    dex
  //SEG398 [235] phi from bsearch16u::@6 bsearch16u::@9 to bsearch16u::@7 [phi:bsearch16u::@6/bsearch16u::@9->bsearch16u::@7]
  b7_from_b6:
  b7_from_b9:
  //SEG399 [235] phi (word*) bsearch16u::items#8 = (word*) bsearch16u::items#2 [phi:bsearch16u::@6/bsearch16u::@9->bsearch16u::@7#0] -- register_copy 
  //SEG400 [235] phi (byte) bsearch16u::num#5 = (byte) bsearch16u::num#3 [phi:bsearch16u::@6/bsearch16u::@9->bsearch16u::@7#1] -- register_copy 
    jmp b7
  //SEG401 bsearch16u::@7
  b7:
  //SEG402 [236] (byte) bsearch16u::num#0 ← (byte) bsearch16u::num#5 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
  //SEG403 [219] phi from bsearch16u::@7 to bsearch16u::@3 [phi:bsearch16u::@7->bsearch16u::@3]
  b3_from_b7:
  //SEG404 [219] phi (word*) bsearch16u::items#2 = (word*) bsearch16u::items#8 [phi:bsearch16u::@7->bsearch16u::@3#0] -- register_copy 
  //SEG405 [219] phi (byte) bsearch16u::num#3 = (byte) bsearch16u::num#0 [phi:bsearch16u::@7->bsearch16u::@3#1] -- register_copy 
    jmp b3
}
//SEG406 sqr
// Find the square of a byte value
// Uses a table of squares that must be initialized by calling init_squares()
// sqr(byte register(A) val)
sqr: {
    .label return = $43
    .label return_2 = $41
  //SEG407 [238] (byte~) sqr::$0 ← (byte) sqr::val#2 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
  //SEG408 [239] (word) sqr::return#0 ← *((word*)(void*) SQUARES#1 + (byte~) sqr::$0) -- vwuz1=pwuz2_derefidx_vbuaa 
    tay
    lda (SQUARES),y
    sta return
    iny
    lda (SQUARES),y
    sta return+1
    jmp breturn
  //SEG409 sqr::@return
  breturn:
  //SEG410 [240] return 
    rts
}
//SEG411 init_squares
// Initialize squares table
// Uses iterative formula (x+1)^2 = x^2 + 2*x + 1
init_squares: {
    .label squares = $21
    .label sqr = $1f
  //SEG412 [242] call malloc 
  //SEG413 [254] phi from init_squares to malloc [phi:init_squares->malloc]
  malloc_from_init_squares:
  //SEG414 [254] phi (word) malloc::size#3 = (const byte) NUM_SQUARES#3*(const byte) SIZEOF_WORD [phi:init_squares->malloc#0] -- vwuz1=vbuc1 
    lda #NUM_SQUARES*SIZEOF_WORD
    sta malloc.size
    lda #0
    sta malloc.size+1
  //SEG415 [254] phi (byte*) heap_head#12 = (byte*) heap_head#1 [phi:init_squares->malloc#1] -- register_copy 
    jsr malloc
    jmp b2
  //SEG416 init_squares::@2
  b2:
  //SEG417 [243] (void*) SQUARES#1 ← (void*)(byte*) malloc::mem#0
  //SEG418 [244] (word*) init_squares::squares#0 ← (word*)(void*) SQUARES#1 -- pwuz1=pwuz2 
    lda SQUARES
    sta squares
    lda SQUARES+1
    sta squares+1
  //SEG419 [245] phi from init_squares::@2 to init_squares::@1 [phi:init_squares::@2->init_squares::@1]
  b1_from_b2:
  //SEG420 [245] phi (byte) init_squares::i#2 = (byte) 0 [phi:init_squares::@2->init_squares::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG421 [245] phi (word*) init_squares::squares#2 = (word*) init_squares::squares#0 [phi:init_squares::@2->init_squares::@1#1] -- register_copy 
  //SEG422 [245] phi (word) init_squares::sqr#2 = (byte) 0 [phi:init_squares::@2->init_squares::@1#2] -- vwuz1=vbuc1 
    lda #0
    sta sqr
    lda #0
    sta sqr+1
    jmp b1
  //SEG423 [245] phi from init_squares::@1 to init_squares::@1 [phi:init_squares::@1->init_squares::@1]
  b1_from_b1:
  //SEG424 [245] phi (byte) init_squares::i#2 = (byte) init_squares::i#1 [phi:init_squares::@1->init_squares::@1#0] -- register_copy 
  //SEG425 [245] phi (word*) init_squares::squares#2 = (word*) init_squares::squares#1 [phi:init_squares::@1->init_squares::@1#1] -- register_copy 
  //SEG426 [245] phi (word) init_squares::sqr#2 = (word) init_squares::sqr#1 [phi:init_squares::@1->init_squares::@1#2] -- register_copy 
    jmp b1
  //SEG427 init_squares::@1
  b1:
  //SEG428 [246] *((word*) init_squares::squares#2) ← (word) init_squares::sqr#2 -- _deref_pwuz1=vwuz2 
    ldy #0
    lda sqr
    sta (squares),y
    iny
    lda sqr+1
    sta (squares),y
  //SEG429 [247] (word*) init_squares::squares#1 ← (word*) init_squares::squares#2 + (const byte) SIZEOF_WORD -- pwuz1=pwuz1_plus_vbuc1 
    lda #SIZEOF_WORD
    clc
    adc squares
    sta squares
    bcc !+
    inc squares+1
  !:
  //SEG430 [248] (byte~) init_squares::$3 ← (byte) init_squares::i#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG431 [249] (byte~) init_squares::$4 ← (byte~) init_squares::$3 + (byte) 1 -- vbuaa=vbuaa_plus_1 
    clc
    adc #1
  //SEG432 [250] (word) init_squares::sqr#1 ← (word) init_squares::sqr#2 + (byte~) init_squares::$4 -- vwuz1=vwuz1_plus_vbuaa 
    clc
    adc sqr
    sta sqr
    bcc !+
    inc sqr+1
  !:
  //SEG433 [251] (byte) init_squares::i#1 ← ++ (byte) init_squares::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG434 [252] if((byte) init_squares::i#1!=(const byte) NUM_SQUARES#3-(byte) 1+(byte) 1) goto init_squares::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #NUM_SQUARES-1+1
    bne b1_from_b1
    jmp breturn
  //SEG435 init_squares::@return
  breturn:
  //SEG436 [253] return 
    rts
}
//SEG437 malloc
// Allocates a block of size bytes of memory, returning a pointer to the beginning of the block.
// The content of the newly allocated block of memory is not initialized, remaining with indeterminate values.
// malloc(word zeropage($25) size)
malloc: {
    .label mem = $49
    .label size = $25
  //SEG438 [255] (byte*) malloc::mem#0 ← (byte*) heap_head#12 -- pbuz1=pbuz2 
    lda heap_head
    sta mem
    lda heap_head+1
    sta mem+1
  //SEG439 [256] (byte*) heap_head#1 ← (byte*) heap_head#12 + (word) malloc::size#3 -- pbuz1=pbuz1_plus_vwuz2 
    lda heap_head
    clc
    adc size
    sta heap_head
    lda heap_head+1
    adc size+1
    sta heap_head+1
    jmp breturn
  //SEG440 malloc::@return
  breturn:
  //SEG441 [257] return 
    rts
}
//SEG442 irqBottom
// Raster Interrupt at the bottom of the screen
irqBottom: {
  //SEG443 entry interrupt(HARDWARE_ALL)
    sta rega+1
    stx regx+1
    sty regy+1
  //SEG444 [259] phi from irqBottom to irqBottom::@1 [phi:irqBottom->irqBottom::@1]
  b1_from_irqBottom:
    jmp b1
  //SEG445 irqBottom::@1
  b1:
  //SEG446 [260] call processChars 
  //SEG447 [265] phi from irqBottom::@1 to processChars [phi:irqBottom::@1->processChars]
  processChars_from_b1:
    jsr processChars
    jmp b2
  //SEG448 irqBottom::@2
  b2:
  //SEG449 [261] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_TOP#0 -- _deref_pbuc1=vbuc2 
    // Trigger IRQ at the top of the screen
    lda #RASTER_IRQ_TOP
    sta RASTER
  //SEG450 [262] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqTop() -- _deref_pptc1=pprc2 
    lda #<irqTop
    sta HARDWARE_IRQ
    lda #>irqTop
    sta HARDWARE_IRQ+1
  //SEG451 [263] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
    jmp breturn
  //SEG452 irqBottom::@return
  breturn:
  //SEG453 [264] return  - exit interrupt(HARDWARE_ALL)
  rega:
    lda #00
  regx:
    ldx #00
  regy:
    ldy #00
    rti
}
//SEG454 processChars
// Process any chars in the PROCESSING array
processChars: {
    .label _15 = $50
    .label _25 = $4e
    .label processing = $4b
    .label bitmask = $4d
    .label i = $27
    .label xpos = $4e
    .label ypos = $52
    .label numActive = $28
  //SEG455 [266] phi from processChars to processChars::@1 [phi:processChars->processChars::@1]
  b1_from_processChars:
  //SEG456 [266] phi (byte) processChars::numActive#10 = (byte) 0 [phi:processChars->processChars::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta numActive
  //SEG457 [266] phi (byte) processChars::i#10 = (byte) 0 [phi:processChars->processChars::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG458 [266] phi from processChars::@2 to processChars::@1 [phi:processChars::@2->processChars::@1]
  b1_from_b2:
  //SEG459 [266] phi (byte) processChars::numActive#10 = (byte) processChars::numActive#3 [phi:processChars::@2->processChars::@1#0] -- register_copy 
  //SEG460 [266] phi (byte) processChars::i#10 = (byte) processChars::i#1 [phi:processChars::@2->processChars::@1#1] -- register_copy 
    jmp b1
  //SEG461 processChars::@1
  b1:
  //SEG462 [267] (byte) processChars::$67 ← (byte) processChars::i#10 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda i
    asl
  //SEG463 [268] (byte) processChars::$68 ← (byte) processChars::$67 + (byte) processChars::i#10 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc i
  //SEG464 [269] (byte) processChars::$69 ← (byte) processChars::$68 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
  //SEG465 [270] (byte) processChars::$70 ← (byte) processChars::$69 + (byte) processChars::i#10 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc i
  //SEG466 [271] (byte~) processChars::$37 ← (byte) processChars::$70 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
  //SEG467 [272] (struct ProcessingSprite*) processChars::processing#0 ← (const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) processChars::$37 -- pssz1=pssc1_plus_vbuaa 
    clc
    adc #<PROCESSING
    sta processing
    lda #>PROCESSING
    adc #0
    sta processing+1
  //SEG468 [273] (byte) processChars::bitmask#0 ← (byte) 1 << *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID) -- vbuz1=vbuc1_rol_pbuz2_derefidx_vbuc2 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_ID
    lda (processing),y
    tax
    lda #1
    cpx #0
    beq !e+
  !:
    asl
    dex
    bne !-
  !e:
    sta bitmask
  //SEG469 [274] if(*((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS)==(const byte) STATUS_FREE) goto processChars::@2 -- pbuz1_derefidx_vbuc1_eq_vbuc2_then_la1 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
    lda (processing),y
    cmp #STATUS_FREE
    beq b2_from_b1
    jmp b10
  //SEG470 processChars::@10
  b10:
  //SEG471 [275] if(*((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS)!=(const byte) STATUS_NEW) goto processChars::@3 -- pbuz1_derefidx_vbuc1_neq_vbuc2_then_la1 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
    lda (processing),y
    cmp #STATUS_NEW
    bne b3
    jmp b11
  //SEG472 processChars::@11
  b11:
  //SEG473 [276] *(*((byte**)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR)) ← (byte) ' ' -- _deref_pptz1_derefidx_vbuc1=vbuc2 
    // Clear the char on the screen
    ldx #' '
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR
    lda (processing),y
    sta !++1
    iny
    lda (processing),y
    sta !++2
    txa
  !:
    sta $ffff
  //SEG474 [277] *((const byte*) SPRITES_ENABLE#0) ← *((const byte*) SPRITES_ENABLE#0) | (byte) processChars::bitmask#0 -- _deref_pbuc1=_deref_pbuc1_bor_vbuz1 
    // Enable the sprite
    lda SPRITES_ENABLE
    ora bitmask
    sta SPRITES_ENABLE
  //SEG475 [278] *((const byte*) SPRITES_COLS#0 + *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID)) ← *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL) -- pbuc1_derefidx_pbuz1_derefidx_vbuc2=pbuz1_derefidx_vbuc3 
    // Set the sprite color
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_COL
    lda (processing),y
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_ID
    pha
    lda (processing),y
    tay
    pla
    sta SPRITES_COLS,y
  //SEG476 [279] *((const byte*) SCREEN#0+(const word) SPRITE_PTRS#0 + *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID)) ← *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR) -- pbuc1_derefidx_pbuz1_derefidx_vbuc2=pbuz1_derefidx_vbuc3 
    // Set sprite pointer
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_PTR
    lda (processing),y
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_ID
    pha
    lda (processing),y
    tay
    pla
    sta SCREEN+SPRITE_PTRS,y
  //SEG477 [280] *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS) ← (const byte) STATUS_PROCESSING -- pbuz1_derefidx_vbuc1=vbuc2 
    // Set status
    lda #STATUS_PROCESSING
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
    sta (processing),y
    jmp b3
  //SEG478 processChars::@3
  b3:
  //SEG479 [281] (word) processChars::xpos#0 ← *((word*)(struct ProcessingSprite*) processChars::processing#0) >> (byte) 4 -- vwuz1=_deref_pwuz2_ror_4 
    ldy #0
    lda (processing),y
    sta xpos
    iny
    lda (processing),y
    sta xpos+1
    lsr xpos+1
    ror xpos
    lsr xpos+1
    ror xpos
    lsr xpos+1
    ror xpos
    lsr xpos+1
    ror xpos
  //SEG480 [282] (byte~) processChars::$11 ← > (word) processChars::xpos#0 -- vbuaa=_hi_vwuz1 
    lda xpos+1
  //SEG481 [283] if((byte) 0!=(byte~) processChars::$11) goto processChars::@4 -- vbuc1_neq_vbuaa_then_la1 
    // Set sprite position
    cmp #0
    bne b4
    jmp b8
  //SEG482 processChars::@8
  b8:
  //SEG483 [284] (byte~) processChars::$12 ← (byte) $ff ^ (byte) processChars::bitmask#0 -- vbuaa=vbuc1_bxor_vbuz1 
    lda #$ff
    eor bitmask
  //SEG484 [285] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) & (byte~) processChars::$12 -- _deref_pbuc1=_deref_pbuc1_band_vbuaa 
    and SPRITES_XMSB
    sta SPRITES_XMSB
    jmp b5
  //SEG485 processChars::@5
  b5:
  //SEG486 [286] (byte~) processChars::$17 ← (byte) processChars::i#10 << (byte) 1 -- vbuxx=vbuz1_rol_1 
    lda i
    asl
    tax
  //SEG487 [287] (byte~) processChars::$14 ← (byte)(word) processChars::xpos#0 -- vbuaa=_byte_vwuz1 
    lda xpos
  //SEG488 [288] *((const byte*) SPRITES_XPOS#0 + (byte~) processChars::$17) ← (byte~) processChars::$14 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SPRITES_XPOS,x
  //SEG489 [289] (word~) processChars::$15 ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) >> (byte) 4 -- vwuz1=pwuz2_derefidx_vbuc1_ror_4 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_Y
    lda (processing),y
    sta _15
    iny
    lda (processing),y
    sta _15+1
    lsr _15+1
    ror _15
    lsr _15+1
    ror _15
    lsr _15+1
    ror _15
    lsr _15+1
    ror _15
  //SEG490 [290] (byte) processChars::ypos#0 ← (byte)(word~) processChars::$15 -- vbuz1=_byte_vwuz2 
    lda _15
    sta ypos
  //SEG491 [291] *((const byte*) SPRITES_YPOS#0 + (byte~) processChars::$17) ← (byte) processChars::ypos#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda ypos
    sta SPRITES_YPOS,x
  //SEG492 [292] if(*((word*)(struct ProcessingSprite*) processChars::processing#0)<(const word) XPOS_LEFTMOST#0) goto processChars::@6 -- _deref_pwuz1_lt_vwuc1_then_la1 
    // Move sprite
    ldy #1
    lda (processing),y
    cmp #>XPOS_LEFTMOST
    bcc b6
    bne !+
    dey
    lda (processing),y
    cmp #<XPOS_LEFTMOST
    bcc b6
  !:
    jmp b14
  //SEG493 processChars::@14
  b14:
  //SEG494 [293] if(*((word*)(struct ProcessingSprite*) processChars::processing#0)>(const word) XPOS_RIGHTMOST#0) goto processChars::@6 -- _deref_pwuz1_gt_vwuc1_then_la1 
    ldy #1
    lda #>XPOS_RIGHTMOST
    cmp (processing),y
    bcc b6
    bne !+
    dey
    lda #<XPOS_RIGHTMOST
    cmp (processing),y
    bcc b6
  !:
    jmp b13
  //SEG495 processChars::@13
  b13:
  //SEG496 [294] if(*((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y)<(const word) YPOS_TOPMOST#0) goto processChars::@6 -- pwuz1_derefidx_vbuc1_lt_vwuc2_then_la1 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_Y
    iny
    lda (processing),y
    cmp #>YPOS_TOPMOST
    bcc b6
    bne !+
    dey
    lda (processing),y
    cmp #<YPOS_TOPMOST
    bcc b6
  !:
    jmp b12
  //SEG497 processChars::@12
  b12:
  //SEG498 [295] if(*((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y)>(const word) YPOS_BOTTOMMOST#0) goto processChars::@6 -- pwuz1_derefidx_vbuc1_gt_vwuc2_then_la1 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_Y
    iny
    lda #>YPOS_BOTTOMMOST
    cmp (processing),y
    bcc b6
    bne !+
    dey
    lda #<YPOS_BOTTOMMOST
    cmp (processing),y
    bcc b6
  !:
    jmp b9
  //SEG499 processChars::@9
  b9:
  //SEG500 [296] (word~) processChars::$25 ← (word) processChars::xpos#0 >> (byte) 3 -- vwuz1=vwuz1_ror_3 
    lsr _25+1
    ror _25
    lsr _25+1
    ror _25
    lsr _25+1
    ror _25
  //SEG501 [297] (byte~) processChars::$26 ← (byte)(word~) processChars::$25 -- vbuaa=_byte_vwuz1 
    lda _25
  //SEG502 [298] (byte) processChars::xchar#0 ← (byte~) processChars::$26 - (const byte) BORDER_XPOS_LEFT#0/(byte) 8 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #BORDER_XPOS_LEFT/8
  //SEG503 [299] (byte~) processChars::$38 ← (byte) processChars::xchar#0 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
  //SEG504 [300] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) + *((const word[$28]) VXSIN#0 + (byte~) processChars::$38) -- pwuz1_derefidx_vbuc1=pwuz1_derefidx_vbuc1_plus_pwuc2_derefidx_vbuaa 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_VX
    tax
    clc
    lda (processing),y
    adc VXSIN,x
    sta (processing),y
    iny
    lda (processing),y
    adc VXSIN+1,x
    sta (processing),y
  //SEG505 [301] *((word*)(struct ProcessingSprite*) processChars::processing#0) ← *((word*)(struct ProcessingSprite*) processChars::processing#0) + *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) -- _deref_pwuz1=_deref_pwuz1_plus_pwuz1_derefidx_vbuc1 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_VX
    sty $ff
    clc
    lda (processing),y
    ldy #0
    adc (processing),y
    sta (processing),y
    ldy $ff
    iny
    lda (processing),y
    ldy #1
    adc (processing),y
    sta (processing),y
  //SEG506 [302] (byte~) processChars::$30 ← (byte) processChars::ypos#0 >> (byte) 3 -- vbuaa=vbuz1_ror_3 
    lda ypos
    lsr
    lsr
    lsr
  //SEG507 [303] (byte) processChars::ychar#0 ← (byte~) processChars::$30 - (const byte) BORDER_YPOS_TOP#0/(byte) 8 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #BORDER_YPOS_TOP/8
  //SEG508 [304] (byte~) processChars::$39 ← (byte) processChars::ychar#0 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
  //SEG509 [305] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) + *((const word[$19]) VYSIN#0 + (byte~) processChars::$39) -- pwuz1_derefidx_vbuc1=pwuz1_derefidx_vbuc1_plus_pwuc2_derefidx_vbuaa 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_VY
    tax
    clc
    lda (processing),y
    adc VYSIN,x
    sta (processing),y
    iny
    lda (processing),y
    adc VYSIN+1,x
    sta (processing),y
  //SEG510 [306] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) + *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) -- pwuz1_derefidx_vbuc1=pwuz1_derefidx_vbuc1_plus_pwuz1_derefidx_vbuc2 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_VY
    clc
    lda (processing),y
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_Y
    adc (processing),y
    sta (processing),y
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_VY+1
    lda (processing),y
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_Y+1
    adc (processing),y
    sta (processing),y
    jmp b7
  //SEG511 processChars::@7
  b7:
  //SEG512 [307] (byte) processChars::numActive#1 ← ++ (byte) processChars::numActive#10 -- vbuz1=_inc_vbuz1 
    inc numActive
  //SEG513 [308] phi from processChars::@1 processChars::@7 to processChars::@2 [phi:processChars::@1/processChars::@7->processChars::@2]
  b2_from_b1:
  b2_from_b7:
  //SEG514 [308] phi (byte) processChars::numActive#3 = (byte) processChars::numActive#10 [phi:processChars::@1/processChars::@7->processChars::@2#0] -- register_copy 
    jmp b2
  //SEG515 processChars::@2
  b2:
  //SEG516 [309] (byte) processChars::i#1 ← ++ (byte) processChars::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG517 [310] if((byte) processChars::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto processChars::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_PROCESSING-1+1
    cmp i
    bne b1_from_b2
    jmp breturn
  //SEG518 processChars::@return
  breturn:
  //SEG519 [311] return 
    rts
  //SEG520 processChars::@6
  b6:
  //SEG521 [312] *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS) ← (const byte) STATUS_FREE -- pbuz1_derefidx_vbuc1=vbuc2 
    // Set status to FREE
    lda #STATUS_FREE
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
    sta (processing),y
  //SEG522 [313] (byte~) processChars::$33 ← (byte) $ff ^ (byte) processChars::bitmask#0 -- vbuaa=vbuc1_bxor_vbuz1 
    lda #$ff
    eor bitmask
  //SEG523 [314] *((const byte*) SPRITES_ENABLE#0) ← *((const byte*) SPRITES_ENABLE#0) & (byte~) processChars::$33 -- _deref_pbuc1=_deref_pbuc1_band_vbuaa 
    // Disable the sprite
    and SPRITES_ENABLE
    sta SPRITES_ENABLE
    jmp b7
  //SEG524 processChars::@4
  b4:
  //SEG525 [315] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) | (byte) processChars::bitmask#0 -- _deref_pbuc1=_deref_pbuc1_bor_vbuz1 
    lda SPRITES_XMSB
    ora bitmask
    sta SPRITES_XMSB
    jmp b5
}
//SEG526 irqTop
// Raster Interrupt at the top of the screen
irqTop: {
  //SEG527 entry interrupt(HARDWARE_ALL)
    sta rega+1
    stx regx+1
    sty regy+1
    jmp b1
  //SEG528 irqTop::@1
  b1:
  //SEG529 [317] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_MIDDLE#0 -- _deref_pbuc1=vbuc2 
    // Trigger IRQ at the middle of the screen
    lda #RASTER_IRQ_MIDDLE
    sta RASTER
  //SEG530 [318] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqBottom() -- _deref_pptc1=pprc2 
    lda #<irqBottom
    sta HARDWARE_IRQ
    lda #>irqBottom
    sta HARDWARE_IRQ+1
  //SEG531 [319] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
    jmp breturn
  //SEG532 irqTop::@return
  breturn:
  //SEG533 [320] return  - exit interrupt(HARDWARE_ALL)
  rega:
    lda #00
  regx:
    ldx #00
  regy:
    ldy #00
    rti
}
//SEG534 File Data
  // Values added to VX
VXSIN:
.for(var i=0; i<40; i++) {
      .word -sin(toRadians([i*360]/40))*4
    }

  // Values added to VY
VYSIN:
.for(var i=0; i<25; i++) {
      .word -sin(toRadians([i*360]/25))*4
    }

  // Sprites currently being processed in the interrupt
  PROCESSING: .fill $e*NUM_PROCESSING, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp bend
Removing instruction jmp b8
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b9
Removing instruction jmp b4
Removing instruction jmp b10
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp breturn
Removing instruction jmp b9
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b10
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b11
Removing instruction jmp b5
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b12
Removing instruction jmp b13
Removing instruction jmp b9
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b7
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b3
Removing instruction jmp b8
Removing instruction jmp b5
Removing instruction jmp b14
Removing instruction jmp b13
Removing instruction jmp b12
Removing instruction jmp b9
Removing instruction jmp b7
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #>0
Replacing instruction lda #0 with TYA
Removing instruction ldy #0
Replacing instruction lda #0 with TYA
Removing instruction ldy #0
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction ldy #0 with TAY
Removing instruction lda #0
Removing instruction lda #0
Removing instruction ldy x
Removing instruction ldy xb
Removing instruction lda result+1
Replacing instruction lda #0 with TXA
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda ypos
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b2_from_b2 with b2
Replacing label b4_from_b5 with b4_from_b9
Replacing label b6_from_b6 with b6
Replacing label b2_from_b3 with b2
Replacing label b4_from_b9 with b4
Replacing label b3_from_b12 with b3
Replacing label b3_from_b11 with b3
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b2_from_b2 with b2
Replacing label b5_from_b13 with b5
Replacing label b1_from_b9 with b1
Replacing label b8_from_b6 with b8
Replacing label b4_from_b2 with b4
Replacing label b2_from_b5 with b2
Replacing label b2_from_b5 with b2
Replacing label breturn_from_b8 with b2
Replacing label b7_from_b6 with b7
Replacing label b7_from_b6 with b7
Replacing label b1_from_b1 with b1
Replacing label b2_from_b1 with b2
Replacing label b1_from_b2 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction malloc_from_b1:
Removing instruction b2_from_b4:
Removing instruction bend_from_b2:
Removing instruction b1_from_b1:
Removing instruction b2_from_b2:
Removing instruction b3_from_b2:
Removing instruction initSprites_from_b3:
Removing instruction b9_from_b3:
Removing instruction b4_from_b5:
Removing instruction b2_from_b1:
Removing instruction b2_from_b3:
Removing instruction b4_from_b2:
Removing instruction b4_from_b9:
Removing instruction b6_from_b6:
Removing instruction b2_from_b1:
Removing instruction b3_from_b11:
Removing instruction b3_from_b12:
Removing instruction b3_from_b5:
Removing instruction b1_from_b1:
Removing instruction b2_from_b2:
Removing instruction b1_from_b9:
Removing instruction b4_from_b2:
Removing instruction b4_from_b3:
Removing instruction sqr_from_b4:
Removing instruction b5_from_b11:
Removing instruction b5_from_b13:
Removing instruction b8_from_b6:
Removing instruction b8_from_b7:
Removing instruction sqr_from_b8:
Removing instruction b2_from_b1:
Removing instruction b2_from_b5:
Removing instruction breturn_from_b2:
Removing instruction breturn_from_b8:
Removing instruction breturn:
Removing instruction b7_from_b6:
Removing instruction b7_from_b9:
Removing instruction b1_from_b1:
Removing instruction b1_from_irqBottom:
Removing instruction processChars_from_b1:
Removing instruction breturn:
Removing instruction b1_from_b2:
Removing instruction b2_from_b1:
Removing instruction b2_from_b7:
Removing instruction breturn:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b3:
Removing instruction malloc_from_b3:
Removing instruction b4:
Removing instruction b2:
Removing instruction bend:
Removing instruction init_dist_screen_from_main:
Removing instruction b8:
Removing instruction b1_from_b8:
Removing instruction b2_from_b1:
Removing instruction b3:
Removing instruction b9:
Removing instruction b4:
Removing instruction b10:
Removing instruction b6:
Removing instruction startProcessing_from_b5:
Removing instruction b1_from_startProcessing:
Removing instruction b5:
Removing instruction b6_from_b5:
Removing instruction b7:
Removing instruction breturn:
Removing instruction b1_from_b8:
Removing instruction b9:
Removing instruction b1_from_getCharToProcess:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b1_from_b9:
Removing instruction b2_from_b10:
Removing instruction b1:
Removing instruction b2:
Removing instruction breturn:
Removing instruction b1_from_initSprites:
Removing instruction b2_from_b1:
Removing instruction b3:
Removing instruction breturn:
Removing instruction init_squares_from_init_dist_screen:
Removing instruction b10:
Removing instruction b1_from_b10:
Removing instruction b3:
Removing instruction b11:
Removing instruction b7:
Removing instruction b12:
Removing instruction b13:
Removing instruction b9:
Removing instruction breturn:
Removing instruction bsearch16u_from_sqrt:
Removing instruction b1:
Removing instruction breturn:
Removing instruction b3_from_bsearch16u:
Removing instruction b5:
Removing instruction b1:
Removing instruction b8:
Removing instruction b9:
Removing instruction b3_from_b7:
Removing instruction breturn:
Removing instruction malloc_from_init_squares:
Removing instruction b2:
Removing instruction b1_from_b2:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1:
Removing instruction b2:
Removing instruction b1_from_processChars:
Removing instruction b10:
Removing instruction b11:
Removing instruction b8:
Removing instruction b14:
Removing instruction b13:
Removing instruction b12:
Removing instruction b9:
Removing instruction breturn:
Removing instruction b1:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp b2
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label b4_from_b9 to b3
Succesful ASM optimization Pass5RelabelLongLabels
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b2
Removing instruction jmp b6
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp b1
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy #OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Fixing long branch [469] bne b2 to beq
Fixing long branch [1212] bne b1 to beq
Fixing long branch [245] bne b3 to beq
Fixing long branch [251] beq b8 to bne
Fixing long branch [514] beq b11 to bne
Fixing long branch [1021] beq b2 to bne
Fixing long branch [1082] bne b4 to beq
Fixing long branch [1116] bcc b6 to bcs
Fixing long branch [1123] bcc b6 to bcs
Fixing long branch [1130] bcc b6 to bcs
Fixing long branch [1137] bcc b6 to bcs
Fixing long branch [1145] bcc b6 to bcs
Fixing long branch [1152] bcc b6 to bcs
Fixing long branch [1160] bcc b6 to bcs

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @3
(label) @4
(label) @begin
(label) @end
(byte*) BGCOL
(byte) BLUE
(byte*) BORDERCOL
(byte) BORDER_XPOS_LEFT
(const byte) BORDER_XPOS_LEFT#0 BORDER_XPOS_LEFT = (byte) $18
(word) BORDER_XPOS_RIGHT
(const word) BORDER_XPOS_RIGHT#0 BORDER_XPOS_RIGHT = (word) $158
(byte) BORDER_YPOS_BOTTOM
(const byte) BORDER_YPOS_BOTTOM#0 BORDER_YPOS_BOTTOM = (byte) $fa
(byte) BORDER_YPOS_TOP
(const byte) BORDER_YPOS_TOP#0 BORDER_YPOS_TOP = (byte) $32
(byte*) CHARGEN
(const byte*) CHARGEN#0 CHARGEN = (byte*) 53248
(byte*) CIA1_INTERRUPT
(const byte*) CIA1_INTERRUPT#0 CIA1_INTERRUPT = (byte*) 56333
(byte) CIA_INTERRUPT_CLEAR
(const byte) CIA_INTERRUPT_CLEAR#0 CIA_INTERRUPT_CLEAR = (byte) $7f
(byte*) COLS
(const byte*) COLS#0 COLS = (byte*) 55296
(bool) DEBUG
(void()**) HARDWARE_IRQ
(const void()**) HARDWARE_IRQ#0 HARDWARE_IRQ = (void()**) 65534
(byte*) HEAP_START
(const byte*) HEAP_START#0 HEAP_START = (byte*) 49152
(byte*) IRQ_ENABLE
(const byte*) IRQ_ENABLE#0 IRQ_ENABLE = (byte*) 53274
(byte) IRQ_RASTER
(const byte) IRQ_RASTER#0 IRQ_RASTER = (byte) 1
(byte*) IRQ_STATUS
(const byte*) IRQ_STATUS#0 IRQ_STATUS = (byte*) 53273
(byte) LIGHT_BLUE
(const byte) LIGHT_BLUE#0 LIGHT_BLUE = (byte) $e
(byte) NOT_FOUND
(const byte) NOT_FOUND#0 NOT_FOUND = (byte) $ff
(byte) NUM_PROCESSING
(const byte) NUM_PROCESSING#0 NUM_PROCESSING = (byte) 8
(byte) NUM_SQUARES
(const byte) NUM_SQUARES#3 NUM_SQUARES = (byte) $30
(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL OFFSET_STRUCT_PROCESSINGSPRITE_COL = (byte) $a
(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID OFFSET_STRUCT_PROCESSINGSPRITE_ID = (byte) 8
(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR OFFSET_STRUCT_PROCESSINGSPRITE_PTR = (byte) 9
(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR = (byte) $c
(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS OFFSET_STRUCT_PROCESSINGSPRITE_STATUS = (byte) $b
(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX OFFSET_STRUCT_PROCESSINGSPRITE_VX = (byte) 4
(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY OFFSET_STRUCT_PROCESSINGSPRITE_VY = (byte) 6
(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y OFFSET_STRUCT_PROCESSINGSPRITE_Y = (byte) 2
(struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING
(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 PROCESSING = { fill( NUM_PROCESSING#0, 0) }
(byte*) PROCPORT
(const byte*) PROCPORT#0 PROCPORT = (byte*) 1
(byte*) PROCPORT_DDR
(const byte*) PROCPORT_DDR#0 PROCPORT_DDR = (byte*) 0
(byte) PROCPORT_DDR_MEMORY_MASK
(const byte) PROCPORT_DDR_MEMORY_MASK#0 PROCPORT_DDR_MEMORY_MASK = (byte) 7
(byte) PROCPORT_RAM_CHARROM
(const byte) PROCPORT_RAM_CHARROM#0 PROCPORT_RAM_CHARROM = (byte) $31
(byte) PROCPORT_RAM_IO
(const byte) PROCPORT_RAM_IO#0 PROCPORT_RAM_IO = (byte) $35
(byte) ProcessingChar::dist
(byte) ProcessingChar::x
(byte) ProcessingChar::y
(byte) ProcessingSprite::col
(byte) ProcessingSprite::id
(byte) ProcessingSprite::ptr
(byte*) ProcessingSprite::screenPtr
(byte) ProcessingSprite::status
(word) ProcessingSprite::vx
(word) ProcessingSprite::vy
(word) ProcessingSprite::x
(word) ProcessingSprite::y
(byte*) RASTER
(const byte*) RASTER#0 RASTER = (byte*) 53266
(byte) RASTER_IRQ_MIDDLE
(const byte) RASTER_IRQ_MIDDLE#0 RASTER_IRQ_MIDDLE = (byte) $ff
(byte) RASTER_IRQ_TOP
(const byte) RASTER_IRQ_TOP#0 RASTER_IRQ_TOP = (byte) $30
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (byte*) 1024
(byte*) SCREEN_COPY
(void*) SCREEN_COPY#0 SCREEN_COPY zp ZP_WORD:41 0.0273972602739726
(byte*) SCREEN_DIST
(void*) SCREEN_DIST#0 SCREEN_DIST zp ZP_WORD:43 0.028169014084507043
(const byte) SIZEOF_WORD SIZEOF_WORD = (byte) 2
(byte*) SPRITES_COLS
(const byte*) SPRITES_COLS#0 SPRITES_COLS = (byte*) 53287
(byte*) SPRITES_ENABLE
(const byte*) SPRITES_ENABLE#0 SPRITES_ENABLE = (byte*) 53269
(byte*) SPRITES_EXPAND_X
(const byte*) SPRITES_EXPAND_X#0 SPRITES_EXPAND_X = (byte*) 53277
(byte*) SPRITES_EXPAND_Y
(const byte*) SPRITES_EXPAND_Y#0 SPRITES_EXPAND_Y = (byte*) 53271
(byte*) SPRITES_MC
(const byte*) SPRITES_MC#0 SPRITES_MC = (byte*) 53276
(byte*) SPRITES_XMSB
(const byte*) SPRITES_XMSB#0 SPRITES_XMSB = (byte*) 53264
(byte*) SPRITES_XPOS
(const byte*) SPRITES_XPOS#0 SPRITES_XPOS = (byte*) 53248
(byte*) SPRITES_YPOS
(const byte*) SPRITES_YPOS#0 SPRITES_YPOS = (byte*) 53249
(byte*) SPRITE_DATA
(const byte*) SPRITE_DATA#0 SPRITE_DATA = (byte*) 8192
(word) SPRITE_PTRS
(const word) SPRITE_PTRS#0 SPRITE_PTRS = (word) $3f8
(word*) SQUARES
(void*) SQUARES#1 SQUARES zp ZP_WORD:73 0.03225806451612903
(const byte) STATUS_FREE STATUS_FREE = (byte) 0
(const byte) STATUS_NEW STATUS_NEW = (byte) 1
(const byte) STATUS_PROCESSING STATUS_PROCESSING = (byte) 2
(byte*) VIC_CONTROL
(const byte*) VIC_CONTROL#0 VIC_CONTROL = (byte*) 53265
(word[$28]) VXSIN
(const word[$28]) VXSIN#0 VXSIN = kickasm {{ .for(var i=0; i<40; i++) {
      .word -sin(toRadians([i*360]/40))*4
    }
 }}
(word[$19]) VYSIN
(const word[$19]) VYSIN#0 VYSIN = kickasm {{ .for(var i=0; i<25; i++) {
      .word -sin(toRadians([i*360]/25))*4
    }
 }}
(byte) WHITE
(word) XPOS_LEFTMOST
(const word) XPOS_LEFTMOST#0 XPOS_LEFTMOST = (word)(const byte) BORDER_XPOS_LEFT#0-(byte) 8<<(byte) 4
(word) XPOS_RIGHTMOST
(const word) XPOS_RIGHTMOST#0 XPOS_RIGHTMOST = (const word) BORDER_XPOS_RIGHT#0<<(byte) 4
(word) YPOS_BOTTOMMOST
(const word) YPOS_BOTTOMMOST#0 YPOS_BOTTOMMOST = (word)(const byte) BORDER_YPOS_BOTTOM#0<<(byte) 4
(word) YPOS_TOPMOST
(const word) YPOS_TOPMOST#0 YPOS_TOPMOST = (word)(const byte) BORDER_YPOS_TOP#0-(byte) 8<<(byte) 4
(word*()) bsearch16u((word) bsearch16u::key , (word*) bsearch16u::items , (byte) bsearch16u::num)
(byte~) bsearch16u::$16 reg byte a 2002.0
(word*~) bsearch16u::$2 $2 zp ZP_WORD:29 4.0
(byte~) bsearch16u::$6 reg byte a 2002.0
(label) bsearch16u::@1
(label) bsearch16u::@2
(label) bsearch16u::@3
(label) bsearch16u::@4
(label) bsearch16u::@5
(label) bsearch16u::@6
(label) bsearch16u::@7
(label) bsearch16u::@8
(label) bsearch16u::@9
(label) bsearch16u::@return
(word*) bsearch16u::items
(word*) bsearch16u::items#0 items zp ZP_WORD:29 1001.0
(word*) bsearch16u::items#1 items zp ZP_WORD:29 2.0
(word*) bsearch16u::items#2 items zp ZP_WORD:29 334.5555555555556
(word*) bsearch16u::items#8 items zp ZP_WORD:29 1501.5
(word) bsearch16u::key
(word) bsearch16u::key#0 key zp ZP_WORD:67 0.26666666666666666
(byte) bsearch16u::num
(byte) bsearch16u::num#0 reg byte x 2002.0
(byte) bsearch16u::num#1 reg byte x 2002.0
(byte) bsearch16u::num#3 reg byte x 556.1111111111111
(byte) bsearch16u::num#5 reg byte x 3003.0
(word*) bsearch16u::pivot
(word*) bsearch16u::pivot#0 pivot zp ZP_WORD:69 501.0
(signed word) bsearch16u::result
(signed word) bsearch16u::result#0 result zp ZP_WORD:71 1501.5
(word*) bsearch16u::return
(word*) bsearch16u::return#1 return zp ZP_WORD:29 2.0
(word*) bsearch16u::return#2 return zp ZP_WORD:29 6.0
(word*) bsearch16u::return#3 return zp ZP_WORD:29 4.0
(word*~) bsearch16u::return#6 return zp ZP_WORD:29 4.0
(struct ProcessingChar()) getCharToProcess()
(byte*~) getCharToProcess::$10 $10 zp ZP_WORD:61 4.0
(word) getCharToProcess::$12 $12 zp ZP_WORD:63 4.0
(word) getCharToProcess::$13 $13 zp ZP_WORD:61 4.0
(word~) getCharToProcess::$8 $8 zp ZP_WORD:61 3.0
(word~) getCharToProcess::$9 $9 zp ZP_WORD:61 4.0
(label) getCharToProcess::@1
(label) getCharToProcess::@10
(label) getCharToProcess::@11
(label) getCharToProcess::@12
(label) getCharToProcess::@2
(label) getCharToProcess::@3
(label) getCharToProcess::@4
(label) getCharToProcess::@5
(label) getCharToProcess::@6
(label) getCharToProcess::@7
(label) getCharToProcess::@8
(label) getCharToProcess::@9
(label) getCharToProcess::@return
(byte) getCharToProcess::closest_dist
(byte~) getCharToProcess::closest_dist#10 closest_dist zp ZP_BYTE:17 202.0
(byte~) getCharToProcess::closest_dist#12 closest_dist zp ZP_BYTE:17 2002.0
(byte) getCharToProcess::closest_dist#2 closest_dist zp ZP_BYTE:17 1026.25
(byte) getCharToProcess::closest_dist#8 closest_dist zp ZP_BYTE:17 202.0
(byte) getCharToProcess::closest_x
(byte) getCharToProcess::closest_x#7 closest_x zp ZP_BYTE:18 517.3333333333334
(byte) getCharToProcess::closest_x#9 closest_x zp ZP_BYTE:18 202.0
(byte) getCharToProcess::closest_y
(byte) getCharToProcess::closest_y#7 closest_y zp ZP_BYTE:19 517.3333333333334
(byte) getCharToProcess::closest_y#9 closest_y zp ZP_BYTE:19 202.0
(byte) getCharToProcess::dist
(byte) getCharToProcess::dist#0 reg byte x 750.75
(byte*) getCharToProcess::dist_line
(byte*) getCharToProcess::dist_line#0 dist_line zp ZP_WORD:14 4.0
(byte*) getCharToProcess::dist_line#1 dist_line zp ZP_WORD:14 50.5
(byte*) getCharToProcess::dist_line#6 dist_line zp ZP_WORD:14 86.07142857142857
(struct ProcessingChar) getCharToProcess::return
(byte) getCharToProcess::return_dist
(byte) getCharToProcess::return_dist#0 reg byte x 7.333333333333333
(byte) getCharToProcess::return_dist#1 reg byte x 228.7777777777778
(byte~) getCharToProcess::return_dist#5 reg byte x 2002.0
(byte~) getCharToProcess::return_dist#6 reg byte x 2002.0
(byte) getCharToProcess::return_x
(byte) getCharToProcess::return_x#0 reg byte y 7.333333333333333
(byte) getCharToProcess::return_x#1 return_x zp ZP_BYTE:18 228.7777777777778
(byte~) getCharToProcess::return_x#7 return_x zp ZP_BYTE:18 1001.0
(byte) getCharToProcess::return_y
(byte) getCharToProcess::return_y#0 reg byte a 7.333333333333333
(byte) getCharToProcess::return_y#1 return_y zp ZP_BYTE:19 216.6315789473684
(byte~) getCharToProcess::return_y#7 return_y zp ZP_BYTE:19 2002.0
(byte*) getCharToProcess::screen_line
(byte*) getCharToProcess::screen_line#0 screen_line zp ZP_WORD:12 2.0
(byte*) getCharToProcess::screen_line#1 screen_line zp ZP_WORD:12 40.4
(byte*) getCharToProcess::screen_line#4 screen_line zp ZP_WORD:12 92.6923076923077
(byte) getCharToProcess::x
(byte) getCharToProcess::x#1 reg byte y 1001.0
(byte) getCharToProcess::x#2 reg byte y 556.1111111111111
(byte) getCharToProcess::y
(byte) getCharToProcess::y#1 y zp ZP_BYTE:16 101.0
(byte) getCharToProcess::y#7 y zp ZP_BYTE:16 80.2
(byte*) heap_head
(byte*) heap_head#1 heap_head zp ZP_WORD:35 0.6000000000000001
(byte*) heap_head#12 heap_head zp ZP_WORD:35 4.0
(void()) initSprites()
(label) initSprites::@1
(label) initSprites::@2
(label) initSprites::@3
(label) initSprites::@return
(byte) initSprites::i
(byte) initSprites::i#1 reg byte x 16.5
(byte) initSprites::i#2 reg byte x 16.5
(byte*) initSprites::sp
(byte*) initSprites::sp#1 sp zp ZP_WORD:20 16.5
(byte*) initSprites::sp#2 sp zp ZP_WORD:20 16.5
(void()) init_dist_screen((byte*) init_dist_screen::screen)
(byte~) init_dist_screen::$13 reg byte a 202.0
(byte~) init_dist_screen::$15 reg byte a 202.0
(byte~) init_dist_screen::$5 reg byte a 22.0
(byte~) init_dist_screen::$7 reg byte a 22.0
(label) init_dist_screen::@1
(label) init_dist_screen::@10
(label) init_dist_screen::@11
(label) init_dist_screen::@12
(label) init_dist_screen::@13
(label) init_dist_screen::@2
(label) init_dist_screen::@3
(label) init_dist_screen::@4
(label) init_dist_screen::@5
(label) init_dist_screen::@6
(label) init_dist_screen::@7
(label) init_dist_screen::@8
(label) init_dist_screen::@9
(label) init_dist_screen::@return
(byte) init_dist_screen::d
(byte) init_dist_screen::d#0 reg byte a 126.25
(word) init_dist_screen::ds
(word) init_dist_screen::ds#0 ds zp ZP_WORD:67 202.0
(byte*) init_dist_screen::screen
(byte*) init_dist_screen::screen#0 screen zp ZP_WORD:23 1.5
(byte*) init_dist_screen::screen_bottomline
(byte*) init_dist_screen::screen_bottomline#0 screen_bottomline zp ZP_WORD:25 4.0
(byte*) init_dist_screen::screen_bottomline#1 screen_bottomline zp ZP_WORD:25 7.333333333333333
(byte*) init_dist_screen::screen_bottomline#10 screen_bottomline zp ZP_WORD:25 6.848484848484849
(byte*) init_dist_screen::screen_topline
(byte*) init_dist_screen::screen_topline#1 screen_topline zp ZP_WORD:23 5.5
(byte*) init_dist_screen::screen_topline#10 screen_topline zp ZP_WORD:23 7.0625
(byte) init_dist_screen::x
(byte) init_dist_screen::x#1 x zp ZP_BYTE:27 101.0
(byte) init_dist_screen::x#2 x zp ZP_BYTE:27 26.578947368421055
(byte) init_dist_screen::x2
(byte) init_dist_screen::x2#0 reg byte a 202.0
(byte) init_dist_screen::xb
(byte) init_dist_screen::xb#1 xb zp ZP_BYTE:28 101.0
(byte) init_dist_screen::xb#2 xb zp ZP_BYTE:28 20.2
(byte) init_dist_screen::xd
(byte) init_dist_screen::xd#0 reg byte a 303.0
(word) init_dist_screen::xds
(word) init_dist_screen::xds#0 xds zp ZP_WORD:67 202.0
(byte) init_dist_screen::y
(byte) init_dist_screen::y#1 y zp ZP_BYTE:22 16.5
(byte) init_dist_screen::y#10 y zp ZP_BYTE:22 0.9705882352941178
(byte) init_dist_screen::y2
(byte) init_dist_screen::y2#0 reg byte a 22.0
(byte) init_dist_screen::yd
(byte) init_dist_screen::yd#0 reg byte a 33.0
(word) init_dist_screen::yds
(word) init_dist_screen::yds#0 yds zp ZP_WORD:65 4.869565217391305
(void()) init_squares()
(byte~) init_squares::$3 reg byte a 22.0
(byte~) init_squares::$4 reg byte a 22.0
(label) init_squares::@1
(label) init_squares::@2
(label) init_squares::@return
(byte) init_squares::i
(byte) init_squares::i#1 reg byte x 16.5
(byte) init_squares::i#2 reg byte x 5.5
(word) init_squares::sqr
(word) init_squares::sqr#1 sqr zp ZP_WORD:31 7.333333333333333
(word) init_squares::sqr#2 sqr zp ZP_WORD:31 6.6000000000000005
(word*) init_squares::squares
(word*) init_squares::squares#0 squares zp ZP_WORD:33 4.0
(word*) init_squares::squares#1 squares zp ZP_WORD:33 3.6666666666666665
(word*) init_squares::squares#2 squares zp ZP_WORD:33 17.5
interrupt(HARDWARE_ALL)(void()) irqBottom()
(label) irqBottom::@1
(label) irqBottom::@2
(label) irqBottom::@return
(byte) irqBottom::i
interrupt(HARDWARE_ALL)(void()) irqTop()
(label) irqTop::@1
(label) irqTop::@return
(byte) irqTop::i
(byte) irqTop::i1
(void()) main()
(byte~) main::$16 reg byte x 12.222222222222221
(byte) main::$26 reg byte a 22.0
(byte) main::$27 reg byte a 22.0
(byte) main::$28 reg byte a 22.0
(byte) main::$29 reg byte a 22.0
(struct ProcessingChar~) main::$9
(label) main::@1
(label) main::@10
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(byte) main::center_dist
(byte) main::center_dist#0 reg byte a 22.0
(byte) main::center_x
(byte) main::center_x#0 reg byte y 5.5
(byte) main::center_y
(byte) main::center_y#0 center_y zp ZP_BYTE:45 5.5
(byte*) main::dst
(byte*) main::dst#0 dst zp ZP_WORD:4 4.0
(byte*) main::dst#1 dst zp ZP_WORD:4 11.0
(byte*) main::dst#2 dst zp ZP_WORD:4 11.666666666666666
(byte) main::i
(byte) main::i#1 i zp ZP_BYTE:6 16.5
(byte) main::i#2 i zp ZP_BYTE:6 3.6666666666666665
(byte*) main::src
(byte*) main::src#1 src zp ZP_WORD:2 11.0
(byte*) main::src#2 src zp ZP_WORD:2 16.5
(void*()) malloc((word) malloc::size)
(label) malloc::@return
(byte*) malloc::mem
(byte*) malloc::mem#0 mem zp ZP_WORD:73 0.3333333333333333
(void*) malloc::return
(word) malloc::size
(word) malloc::size#3 size zp ZP_WORD:37 1.0
(void()) processChars()
(byte~) processChars::$11 reg byte a 22.0
(byte~) processChars::$12 reg byte a 22.0
(byte~) processChars::$14 reg byte a 22.0
(word~) processChars::$15 $15 zp ZP_WORD:80 11.0
(byte~) processChars::$17 reg byte x 6.6000000000000005
(word~) processChars::$25 $25 zp ZP_WORD:78 11.0
(byte~) processChars::$26 reg byte a 22.0
(byte~) processChars::$30 reg byte a 22.0
(byte~) processChars::$33 reg byte a 22.0
(byte~) processChars::$37 reg byte a 22.0
(byte~) processChars::$38 reg byte a 22.0
(byte~) processChars::$39 reg byte a 22.0
(byte) processChars::$67 reg byte a 22.0
(byte) processChars::$68 reg byte a 22.0
(byte) processChars::$69 reg byte a 22.0
(byte) processChars::$70 reg byte a 22.0
(label) processChars::@1
(label) processChars::@10
(label) processChars::@11
(label) processChars::@12
(label) processChars::@13
(label) processChars::@14
(label) processChars::@2
(label) processChars::@3
(label) processChars::@4
(label) processChars::@5
(label) processChars::@6
(label) processChars::@7
(label) processChars::@8
(label) processChars::@9
(label) processChars::@return
(byte) processChars::bitmask
(byte) processChars::bitmask#0 bitmask zp ZP_BYTE:77 2.2
(byte) processChars::i
(byte) processChars::i#1 i zp ZP_BYTE:39 16.5
(byte) processChars::i#10 i zp ZP_BYTE:39 1.4042553191489362
(byte) processChars::numActive
(byte) processChars::numActive#1 numActive zp ZP_BYTE:40 22.0
(byte) processChars::numActive#10 numActive zp ZP_BYTE:40 0.7333333333333333
(byte) processChars::numActive#3 numActive zp ZP_BYTE:40 11.0
(struct ProcessingSprite*) processChars::processing
(struct ProcessingSprite*) processChars::processing#0 processing zp ZP_WORD:75 0.3142857142857143
(byte) processChars::xchar
(byte) processChars::xchar#0 reg byte a 22.0
(word) processChars::xpos
(word) processChars::xpos#0 xpos zp ZP_WORD:78 2.0625
(byte) processChars::ychar
(byte) processChars::ychar#0 reg byte a 22.0
(byte) processChars::ypos
(byte) processChars::ypos#0 ypos zp ZP_BYTE:82 2.75
(void()) setupRasterIrq((word) setupRasterIrq::raster , (void()*) setupRasterIrq::irqRoutine)
(label) setupRasterIrq::@1
(label) setupRasterIrq::@2
(label) setupRasterIrq::@return
(void()*) setupRasterIrq::irqRoutine
(const void()*) setupRasterIrq::irqRoutine#0 irqRoutine = &interrupt(HARDWARE_ALL)(void()) irqTop()
(word) setupRasterIrq::raster
(word()) sqr((byte) sqr::val)
(byte~) sqr::$0 reg byte a 4.0
(label) sqr::@return
(word) sqr::return
(word) sqr::return#0 return zp ZP_WORD:67 28.5
(word) sqr::return#2 return#2 zp ZP_WORD:65 22.0
(word) sqr::return#3 return zp ZP_WORD:67 202.0
(byte) sqr::val
(byte) sqr::val#0 reg byte a 22.0
(byte) sqr::val#1 reg byte a 202.0
(byte) sqr::val#2 reg byte a 114.0
(byte()) sqrt((word) sqrt::val)
(word~) sqrt::$1 $1 zp ZP_WORD:29 2.0
(word~) sqrt::$3 $3 zp ZP_WORD:29 4.0
(label) sqrt::@1
(label) sqrt::@return
(word*) sqrt::found
(word*) sqrt::found#0 found zp ZP_WORD:29 4.0
(byte) sqrt::return
(byte) sqrt::return#0 reg byte a 34.33333333333333
(byte) sqrt::return#2 reg byte a 202.0
(byte) sqrt::sq
(word) sqrt::val
(word) sqrt::val#0 val zp ZP_WORD:67 103.0
(void()) startProcessing((byte) startProcessing::center_x , (byte) startProcessing::center_y , (byte) startProcessing::center_dist)
(word~) startProcessing::$0 $0 zp ZP_WORD:47 3.0
(word~) startProcessing::$1 $1 zp ZP_WORD:47 4.0
(word~) startProcessing::$11 $11 zp ZP_WORD:54 4.0
(word~) startProcessing::$12 $12 zp ZP_WORD:54 4.0
(word~) startProcessing::$13 $13 zp ZP_WORD:54 4.0
(word~) startProcessing::$15 $15 zp ZP_WORD:56 4.0
(word~) startProcessing::$16 $16 zp ZP_WORD:56 4.0
(word~) startProcessing::$17 $17 zp ZP_WORD:56 4.0
(byte~) startProcessing::$22 reg byte a 2.0
(word~) startProcessing::$23 $23 zp ZP_WORD:59 0.5
(byte~) startProcessing::$30 reg byte a 2002.0
(byte~) startProcessing::$31 reg byte x 2.2222222222222228
(byte) startProcessing::$42 reg byte a 2002.0
(byte) startProcessing::$43 reg byte a 2002.0
(byte) startProcessing::$44 reg byte a 2002.0
(byte) startProcessing::$45 reg byte a 2002.0
(word) startProcessing::$47 $47 zp ZP_WORD:49 4.0
(word) startProcessing::$48 $48 zp ZP_WORD:47 4.0
(word~) startProcessing::$5 $5 zp ZP_WORD:10 4.0
(byte) startProcessing::$50 reg byte a 4.0
(byte) startProcessing::$51 reg byte a 4.0
(byte) startProcessing::$52 reg byte a 4.0
(byte) startProcessing::$53 reg byte a 4.0
(word~) startProcessing::$6 $6 zp ZP_WORD:10 4.0
(word~) startProcessing::$8 $8 zp ZP_WORD:8 4.0
(word~) startProcessing::$9 $9 zp ZP_WORD:8 4.0
(label) startProcessing::@1
(label) startProcessing::@2
(label) startProcessing::@3
(label) startProcessing::@4
(label) startProcessing::@5
(label) startProcessing::@6
(label) startProcessing::@7
(label) startProcessing::@8
(label) startProcessing::@9
(label) startProcessing::@return
(struct ProcessingChar) startProcessing::center
(byte) startProcessing::center_dist
(byte) startProcessing::center_x
(byte) startProcessing::center_x#0 center_x zp ZP_BYTE:46 0.30952380952380953
(byte) startProcessing::center_y
(byte) startProcessing::center_y#0 center_y zp ZP_BYTE:45 0.24444444444444444
(byte) startProcessing::ch
(byte) startProcessing::ch#0 reg byte a 2.0
(byte*) startProcessing::chargenData
(byte*) startProcessing::chargenData#0 chargenData zp ZP_WORD:8 1.3333333333333333
(byte*) startProcessing::chargenData#1 chargenData zp ZP_WORD:8 67.33333333333333
(byte*) startProcessing::chargenData#2 chargenData zp ZP_WORD:8 101.66666666666666
(byte*) startProcessing::colPtr
(byte*) startProcessing::colPtr#0 colPtr zp ZP_WORD:51 4.0
(byte) startProcessing::freeIdx
(byte) startProcessing::freeIdx#2 freeIdx zp ZP_BYTE:7 28.0
(byte) startProcessing::freeIdx#6 reg byte x 20.2
(byte~) startProcessing::freeIdx#7 reg byte x 202.0
(byte~) startProcessing::freeIdx#8 freeIdx zp ZP_BYTE:7 202.0
(byte) startProcessing::i
(byte) startProcessing::i#1 i zp ZP_BYTE:7 1501.5
(byte) startProcessing::i#2 i zp ZP_BYTE:7 858.0
(byte) startProcessing::i1
(byte) startProcessing::i1#1 reg byte x 151.5
(byte) startProcessing::i1#2 reg byte x 50.5
(word) startProcessing::offset
(word) startProcessing::offset#0 offset zp ZP_WORD:47 2.0
(byte*) startProcessing::screenPtr
(byte*) startProcessing::screenPtr#0 screenPtr zp ZP_WORD:47 0.14285714285714285
(byte) startProcessing::spriteCol
(byte) startProcessing::spriteCol#0 spriteCol zp ZP_BYTE:53 0.0975609756097561
(byte*) startProcessing::spriteData
(byte*) startProcessing::spriteData#0 spriteData zp ZP_WORD:10 0.5714285714285714
(byte*) startProcessing::spriteData#1 spriteData zp ZP_WORD:10 50.5
(byte*) startProcessing::spriteData#2 spriteData zp ZP_WORD:10 152.5
(byte) startProcessing::spriteIdx
(byte) startProcessing::spritePtr
(byte) startProcessing::spritePtr#0 spritePtr zp ZP_BYTE:58 0.3076923076923077
(word) startProcessing::spriteX
(word) startProcessing::spriteX#0 spriteX zp ZP_WORD:54 0.3076923076923077
(word) startProcessing::spriteY
(word) startProcessing::spriteY#0 spriteY zp ZP_WORD:56 0.4

zp ZP_WORD:2 [ main::src#2 main::src#1 ]
zp ZP_WORD:4 [ main::dst#2 main::dst#1 main::dst#0 ]
zp ZP_BYTE:6 [ main::i#2 main::i#1 ]
reg byte x [ startProcessing::freeIdx#6 startProcessing::freeIdx#7 ]
zp ZP_BYTE:7 [ startProcessing::freeIdx#2 startProcessing::freeIdx#8 startProcessing::i#2 startProcessing::i#1 ]
zp ZP_WORD:8 [ startProcessing::chargenData#2 startProcessing::chargenData#0 startProcessing::chargenData#1 startProcessing::$9 startProcessing::$8 ]
zp ZP_WORD:10 [ startProcessing::spriteData#2 startProcessing::spriteData#0 startProcessing::spriteData#1 startProcessing::$6 startProcessing::$5 ]
reg byte x [ startProcessing::i1#2 startProcessing::i1#1 ]
zp ZP_WORD:12 [ getCharToProcess::screen_line#4 getCharToProcess::screen_line#0 getCharToProcess::screen_line#1 ]
zp ZP_WORD:14 [ getCharToProcess::dist_line#6 getCharToProcess::dist_line#0 getCharToProcess::dist_line#1 ]
zp ZP_BYTE:16 [ getCharToProcess::y#7 getCharToProcess::y#1 ]
reg byte y [ getCharToProcess::x#2 getCharToProcess::x#1 ]
zp ZP_BYTE:17 [ getCharToProcess::closest_dist#2 getCharToProcess::closest_dist#8 getCharToProcess::closest_dist#10 getCharToProcess::closest_dist#12 ]
zp ZP_BYTE:18 [ getCharToProcess::closest_x#7 getCharToProcess::closest_x#9 getCharToProcess::return_x#1 getCharToProcess::return_x#7 ]
zp ZP_BYTE:19 [ getCharToProcess::closest_y#7 getCharToProcess::closest_y#9 getCharToProcess::return_y#1 getCharToProcess::return_y#7 ]
reg byte x [ getCharToProcess::return_dist#1 getCharToProcess::return_dist#5 getCharToProcess::return_dist#6 getCharToProcess::dist#0 ]
zp ZP_WORD:20 [ initSprites::sp#2 initSprites::sp#1 ]
reg byte x [ initSprites::i#2 initSprites::i#1 ]
zp ZP_BYTE:22 [ init_dist_screen::y#10 init_dist_screen::y#1 ]
zp ZP_WORD:23 [ init_dist_screen::screen_topline#10 init_dist_screen::screen_topline#1 init_dist_screen::screen#0 ]
zp ZP_WORD:25 [ init_dist_screen::screen_bottomline#10 init_dist_screen::screen_bottomline#1 init_dist_screen::screen_bottomline#0 ]
reg byte a [ init_dist_screen::yd#0 init_dist_screen::$7 init_dist_screen::$5 ]
zp ZP_BYTE:27 [ init_dist_screen::x#2 init_dist_screen::x#1 ]
zp ZP_BYTE:28 [ init_dist_screen::xb#2 init_dist_screen::xb#1 ]
reg byte a [ init_dist_screen::xd#0 init_dist_screen::$15 init_dist_screen::$13 ]
zp ZP_WORD:29 [ bsearch16u::return#1 bsearch16u::return#6 bsearch16u::return#2 bsearch16u::items#2 bsearch16u::items#1 bsearch16u::items#8 bsearch16u::$2 bsearch16u::items#0 bsearch16u::return#3 sqrt::found#0 sqrt::$3 sqrt::$1 ]
reg byte x [ bsearch16u::num#5 bsearch16u::num#1 bsearch16u::num#3 bsearch16u::num#0 ]
reg byte a [ sqr::val#2 sqr::val#0 sqr::val#1 ]
zp ZP_WORD:31 [ init_squares::sqr#2 init_squares::sqr#1 ]
zp ZP_WORD:33 [ init_squares::squares#2 init_squares::squares#1 init_squares::squares#0 ]
reg byte x [ init_squares::i#2 init_squares::i#1 ]
zp ZP_WORD:35 [ heap_head#12 heap_head#1 ]
zp ZP_WORD:37 [ malloc::size#3 ]
zp ZP_BYTE:39 [ processChars::i#10 processChars::i#1 ]
zp ZP_BYTE:40 [ processChars::numActive#10 processChars::numActive#3 processChars::numActive#1 ]
zp ZP_WORD:41 [ SCREEN_COPY#0 ]
zp ZP_WORD:43 [ SCREEN_DIST#0 ]
reg byte a [ main::$26 ]
reg byte a [ main::$27 ]
reg byte a [ main::$28 ]
reg byte a [ main::$29 ]
reg byte x [ main::$16 ]
reg byte y [ getCharToProcess::return_x#0 ]
reg byte a [ getCharToProcess::return_y#0 ]
reg byte x [ getCharToProcess::return_dist#0 ]
reg byte y [ main::center_x#0 ]
zp ZP_BYTE:45 [ main::center_y#0 startProcessing::center_y#0 ]
reg byte a [ main::center_dist#0 ]
zp ZP_BYTE:46 [ startProcessing::center_x#0 ]
reg byte a [ startProcessing::$42 ]
reg byte a [ startProcessing::$43 ]
reg byte a [ startProcessing::$44 ]
reg byte a [ startProcessing::$45 ]
reg byte a [ startProcessing::$30 ]
zp ZP_WORD:47 [ startProcessing::$0 startProcessing::$48 startProcessing::$1 startProcessing::offset#0 startProcessing::screenPtr#0 ]
zp ZP_WORD:49 [ startProcessing::$47 ]
zp ZP_WORD:51 [ startProcessing::colPtr#0 ]
zp ZP_BYTE:53 [ startProcessing::spriteCol#0 ]
reg byte a [ startProcessing::ch#0 ]
zp ZP_WORD:54 [ startProcessing::$11 startProcessing::$12 startProcessing::$13 startProcessing::spriteX#0 ]
zp ZP_WORD:56 [ startProcessing::$15 startProcessing::$16 startProcessing::$17 startProcessing::spriteY#0 ]
zp ZP_BYTE:58 [ startProcessing::spritePtr#0 ]
reg byte a [ startProcessing::$22 ]
zp ZP_WORD:59 [ startProcessing::$23 ]
reg byte a [ startProcessing::$50 ]
reg byte a [ startProcessing::$51 ]
reg byte a [ startProcessing::$52 ]
reg byte a [ startProcessing::$53 ]
reg byte x [ startProcessing::$31 ]
zp ZP_WORD:61 [ getCharToProcess::$8 getCharToProcess::$13 getCharToProcess::$9 getCharToProcess::$10 ]
zp ZP_WORD:63 [ getCharToProcess::$12 ]
reg byte a [ init_dist_screen::y2#0 ]
zp ZP_WORD:65 [ sqr::return#2 init_dist_screen::yds#0 ]
reg byte a [ init_dist_screen::x2#0 ]
zp ZP_WORD:67 [ sqr::return#3 init_dist_screen::xds#0 sqr::return#0 init_dist_screen::ds#0 sqrt::val#0 bsearch16u::key#0 ]
reg byte a [ sqrt::return#2 ]
reg byte a [ init_dist_screen::d#0 ]
reg byte a [ sqrt::return#0 ]
reg byte a [ bsearch16u::$6 ]
reg byte a [ bsearch16u::$16 ]
zp ZP_WORD:69 [ bsearch16u::pivot#0 ]
zp ZP_WORD:71 [ bsearch16u::result#0 ]
reg byte a [ sqr::$0 ]
zp ZP_WORD:73 [ SQUARES#1 malloc::mem#0 ]
reg byte a [ init_squares::$3 ]
reg byte a [ init_squares::$4 ]
reg byte a [ processChars::$67 ]
reg byte a [ processChars::$68 ]
reg byte a [ processChars::$69 ]
reg byte a [ processChars::$70 ]
reg byte a [ processChars::$37 ]
zp ZP_WORD:75 [ processChars::processing#0 ]
zp ZP_BYTE:77 [ processChars::bitmask#0 ]
zp ZP_WORD:78 [ processChars::xpos#0 processChars::$25 ]
reg byte a [ processChars::$11 ]
reg byte a [ processChars::$12 ]
reg byte x [ processChars::$17 ]
reg byte a [ processChars::$14 ]
zp ZP_WORD:80 [ processChars::$15 ]
zp ZP_BYTE:82 [ processChars::ypos#0 ]
reg byte a [ processChars::$26 ]
reg byte a [ processChars::xchar#0 ]
reg byte a [ processChars::$38 ]
reg byte a [ processChars::$30 ]
reg byte a [ processChars::ychar#0 ]
reg byte a [ processChars::$39 ]
reg byte a [ processChars::$33 ]


FINAL ASSEMBLER
Score: 262202

//SEG0 File Comments
// Clears start screen throwing around the letters (by turning them into sprites)
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const SIZEOF_WORD = 2
  .const STATUS_FREE = 0
  .const STATUS_NEW = 1
  .const STATUS_PROCESSING = 2
  .const OFFSET_STRUCT_PROCESSINGSPRITE_Y = 2
  .const OFFSET_STRUCT_PROCESSINGSPRITE_VX = 4
  .const OFFSET_STRUCT_PROCESSINGSPRITE_VY = 6
  .const OFFSET_STRUCT_PROCESSINGSPRITE_ID = 8
  .const OFFSET_STRUCT_PROCESSINGSPRITE_PTR = 9
  .const OFFSET_STRUCT_PROCESSINGSPRITE_COL = $a
  .const OFFSET_STRUCT_PROCESSINGSPRITE_STATUS = $b
  .const OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR = $c
  // Start of the heap used by malloc()
  .label HEAP_START = $c000
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = $35
  // RAM in $A000, $E000 CHAR ROM in $D000
  .const PROCPORT_RAM_CHARROM = $31
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  // Positions of the border (in sprite positions)
  .const BORDER_XPOS_LEFT = $18
  .const BORDER_XPOS_RIGHT = $158
  .const BORDER_YPOS_TOP = $32
  .const BORDER_YPOS_BOTTOM = $fa
  // The offset of the sprite pointers from the screen start address
  .const SPRITE_PTRS = $3f8
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_MC = $d01c
  .label SPRITES_EXPAND_X = $d01d
  .label SPRITES_COLS = $d027
  .label VIC_CONTROL = $d011
  // VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  // VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  // Bits for the IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // Color Ram
  .label COLS = $d800
  // CIA#1 Interrupt Status & Control Register
  .label CIA1_INTERRUPT = $dc0d
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // The vector used when the HARDWARE serves IRQ interrupts
  .label HARDWARE_IRQ = $fffe
  .const LIGHT_BLUE = $e
  // Address of the screen
  .label SCREEN = $400
  // Sprite data for the animating sprites
  .label SPRITE_DATA = $2000
  // Max number of chars processed at once
  .const NUM_PROCESSING = 8
  // Distance value meaning not found
  .const NOT_FOUND = $ff
  .const NUM_SQUARES = $30
  .const RASTER_IRQ_TOP = $30
  .const RASTER_IRQ_MIDDLE = $ff
  .const XPOS_RIGHTMOST = BORDER_XPOS_RIGHT<<4
  .const YPOS_BOTTOMMOST = BORDER_YPOS_BOTTOM<<4
  .const XPOS_LEFTMOST = BORDER_XPOS_LEFT-8<<4
  .const YPOS_TOPMOST = BORDER_YPOS_TOP-8<<4
  .label heap_head = $23
  .label SQUARES = $49
  .label SCREEN_COPY = $29
  .label SCREEN_DIST = $2b
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call malloc 
//SEG7 [254] phi from @1 to malloc [phi:@1->malloc]
//SEG8 [254] phi (word) malloc::size#3 = (word) $3e8 [phi:@1->malloc#0] -- vwuz1=vwuc1 
  lda #<$3e8
  sta malloc.size
  lda #>$3e8
  sta malloc.size+1
//SEG9 [254] phi (byte*) heap_head#12 = (const byte*) HEAP_START#0 [phi:@1->malloc#1] -- pbuz1=pbuc1 
  lda #<HEAP_START
  sta heap_head
  lda #>HEAP_START
  sta heap_head+1
  jsr malloc
//SEG10 @3
//SEG11 [3] (void*) SCREEN_COPY#0 ← (void*)(byte*) malloc::mem#0 -- pvoz1=pvoz2 
  lda malloc.mem
  sta SCREEN_COPY
  lda malloc.mem+1
  sta SCREEN_COPY+1
//SEG12 [4] call malloc 
//SEG13 [254] phi from @3 to malloc [phi:@3->malloc]
//SEG14 [254] phi (word) malloc::size#3 = (word) $3e8 [phi:@3->malloc#0] -- vwuz1=vwuc1 
  lda #<$3e8
  sta malloc.size
  lda #>$3e8
  sta malloc.size+1
//SEG15 [254] phi (byte*) heap_head#12 = (byte*) heap_head#1 [phi:@3->malloc#1] -- register_copy 
  jsr malloc
//SEG16 @4
//SEG17 [5] (void*) SCREEN_DIST#0 ← (void*)(byte*) malloc::mem#0 -- pvoz1=pvoz2 
  lda malloc.mem
  sta SCREEN_DIST
  lda malloc.mem+1
  sta SCREEN_DIST+1
//SEG18 [6] phi from @4 to @2 [phi:@4->@2]
//SEG19 @2
//SEG20 [7] call main 
  jsr main
  rts
//SEG21 [8] phi from @2 to @end [phi:@2->@end]
//SEG22 @end
//SEG23 main
main: {
    .label dst = 4
    .label src = 2
    .label i = 6
    .label center_y = $2d
  //SEG24 [9] (byte*) init_dist_screen::screen#0 ← (byte*)(void*) SCREEN_DIST#0 -- pbuz1=pbuz2 
    lda SCREEN_DIST
    sta init_dist_screen.screen
    lda SCREEN_DIST+1
    sta init_dist_screen.screen+1
  //SEG25 [10] call init_dist_screen 
  //SEG26 [169] phi from main to init_dist_screen [phi:main->init_dist_screen]
    jsr init_dist_screen
  //SEG27 main::@8
  //SEG28 [11] (byte*) main::dst#0 ← (byte*)(void*) SCREEN_COPY#0 -- pbuz1=pbuz2 
    lda SCREEN_COPY
    sta dst
    lda SCREEN_COPY+1
    sta dst+1
  //SEG29 [12] phi from main::@8 to main::@1 [phi:main::@8->main::@1]
  //SEG30 [12] phi (byte*) main::dst#2 = (byte*) main::dst#0 [phi:main::@8->main::@1#0] -- register_copy 
  //SEG31 [12] phi (byte*) main::src#2 = (const byte*) SCREEN#0 [phi:main::@8->main::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta src
    lda #>SCREEN
    sta src+1
  // Copy screen to screen copy
  //SEG32 [12] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG33 [12] phi (byte*) main::dst#2 = (byte*) main::dst#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG34 [12] phi (byte*) main::src#2 = (byte*) main::src#1 [phi:main::@1->main::@1#1] -- register_copy 
  //SEG35 main::@1
  b1:
  //SEG36 [13] *((byte*) main::dst#2) ← *((byte*) main::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta (dst),y
  //SEG37 [14] (byte*) main::src#1 ← ++ (byte*) main::src#2 -- pbuz1=_inc_pbuz1 
    inc src
    bne !+
    inc src+1
  !:
  //SEG38 [15] (byte*) main::dst#1 ← ++ (byte*) main::dst#2 -- pbuz1=_inc_pbuz1 
    inc dst
    bne !+
    inc dst+1
  !:
  //SEG39 [16] if((byte*) main::src#1!=(const byte*) SCREEN#0+(word) $3e8) goto main::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda src+1
    cmp #>SCREEN+$3e8
    bne b1
    lda src
    cmp #<SCREEN+$3e8
    bne b1
  //SEG40 [17] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG41 [17] phi (byte) main::i#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  // Init processing array
  //SEG42 [17] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  //SEG43 [17] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@2#0] -- register_copy 
  //SEG44 main::@2
  b2:
  //SEG45 [18] (byte) main::$26 ← (byte) main::i#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda i
    asl
  //SEG46 [19] (byte) main::$27 ← (byte) main::$26 + (byte) main::i#2 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc i
  //SEG47 [20] (byte) main::$28 ← (byte) main::$27 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
  //SEG48 [21] (byte) main::$29 ← (byte) main::$28 + (byte) main::i#2 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc i
  //SEG49 [22] (byte~) main::$16 ← (byte) main::$29 << (byte) 1 -- vbuxx=vbuaa_rol_1 
    asl
    tax
  //SEG50 [23] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) main::$16) ← (byte) 0 -- pwuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta PROCESSING,x
    sta PROCESSING+1,x
  //SEG51 [24] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y + (byte~) main::$16) ← (byte) 0 -- pwuc1_derefidx_vbuxx=vbuc2 
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_Y,x
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_Y+1,x
  //SEG52 [25] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX + (byte~) main::$16) ← (byte) 0 -- pwuc1_derefidx_vbuxx=vbuc2 
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_VX,x
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_VX+1,x
  //SEG53 [26] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY + (byte~) main::$16) ← (byte) 0 -- pwuc1_derefidx_vbuxx=vbuc2 
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_VY,x
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_VY+1,x
  //SEG54 [27] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID + (byte~) main::$16) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_ID,x
  //SEG55 [28] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR + (byte~) main::$16) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_PTR,x
  //SEG56 [29] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL + (byte~) main::$16) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_COL,x
  //SEG57 [30] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) main::$16) ← (const byte) STATUS_FREE -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #STATUS_FREE
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_STATUS,x
  //SEG58 [31] *((byte**)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR + (byte~) main::$16) ← (byte*) 0 -- pptc1_derefidx_vbuxx=pbuc2 
    lda #<0
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR,x
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR+1,x
  //SEG59 [32] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG60 [33] if((byte) main::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_PROCESSING-1+1
    cmp i
    bne b2
  //SEG61 [34] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  //SEG62 main::@3
  //SEG63 [35] call initSprites 
  //SEG64 [156] phi from main::@3 to initSprites [phi:main::@3->initSprites]
    jsr initSprites
  //SEG65 [36] phi from main::@3 to main::@9 [phi:main::@3->main::@9]
  //SEG66 main::@9
  //SEG67 [37] call setupRasterIrq 
    jsr setupRasterIrq
  //SEG68 [38] phi from main::@5 main::@9 to main::@4 [phi:main::@5/main::@9->main::@4]
  b3:
  // Main loop
  //SEG69 main::@4
  //SEG70 [39] call getCharToProcess 
    jsr getCharToProcess
  //SEG71 [40] (byte) getCharToProcess::return_x#0 ← (byte) getCharToProcess::return_x#1 -- vbuyy=vbuz1 
    ldy getCharToProcess.return_x
  //SEG72 [41] (byte) getCharToProcess::return_y#0 ← (byte) getCharToProcess::return_y#1 -- vbuaa=vbuz1 
    lda getCharToProcess.return_y
  //SEG73 [42] (byte) getCharToProcess::return_dist#0 ← (byte) getCharToProcess::return_dist#1
  //SEG74 main::@10
  //SEG75 [43] (byte) main::center_x#0 ← (byte) getCharToProcess::return_x#0
  //SEG76 [44] (byte) main::center_y#0 ← (byte) getCharToProcess::return_y#0 -- vbuz1=vbuaa 
    sta center_y
  //SEG77 [45] (byte) main::center_dist#0 ← (byte) getCharToProcess::return_dist#0 -- vbuaa=vbuxx 
    txa
  //SEG78 [46] if((byte) main::center_dist#0!=(const byte) NOT_FOUND#0) goto main::@5 -- vbuaa_neq_vbuc1_then_la1 
    cmp #NOT_FOUND
    bne b5
  //SEG79 main::@6
  //SEG80 [47] *((const byte*) SCREEN#0+(word) $3e7) ← (byte) '.' -- _deref_pbuc1=vbuc2 
    lda #'.'
    sta SCREEN+$3e7
  //SEG81 main::@7
  b7:
  //SEG82 [48] *((const byte*) COLS#0+(word) $3e7) ← ++ *((const byte*) COLS#0+(word) $3e7) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc COLS+$3e7
    jmp b7
  //SEG83 main::@5
  b5:
  //SEG84 [49] (byte) startProcessing::center_x#0 ← (byte) main::center_x#0 -- vbuz1=vbuyy 
    sty startProcessing.center_x
  //SEG85 [50] (byte) startProcessing::center_y#0 ← (byte) main::center_y#0
  //SEG86 [51] call startProcessing 
  //SEG87 [52] phi from main::@5 to startProcessing [phi:main::@5->startProcessing]
    jsr startProcessing
    jmp b3
}
//SEG88 startProcessing
// Start processing a char - by inserting it into the PROCESSING array
// startProcessing(byte zeropage($2e) center_x, byte zeropage($2d) center_y)
startProcessing: {
    .label _0 = $2f
    .label _1 = $2f
    .label _5 = $a
    .label _6 = $a
    .label _8 = 8
    .label _9 = 8
    .label _11 = $36
    .label _12 = $36
    .label _13 = $36
    .label _15 = $38
    .label _16 = $38
    .label _17 = $38
    .label _23 = $3b
    .label center_x = $2e
    .label center_y = $2d
    .label i = 7
    .label offset = $2f
    .label colPtr = $33
    .label spriteCol = $35
    .label screenPtr = $2f
    .label spriteData = $a
    .label chargenData = 8
    .label spriteX = $36
    .label spriteY = $38
    .label spritePtr = $3a
    .label freeIdx = 7
    .label _47 = $31
    .label _48 = $2f
  //SEG89 [53] phi from startProcessing to startProcessing::@1 [phi:startProcessing->startProcessing::@1]
  //SEG90 [53] phi (byte) startProcessing::freeIdx#6 = (byte) $ff [phi:startProcessing->startProcessing::@1#0] -- vbuxx=vbuc1 
    ldx #$ff
  //SEG91 startProcessing::@1
  b1:
  //SEG92 [54] phi from startProcessing::@1 to startProcessing::@2 [phi:startProcessing::@1->startProcessing::@2]
  //SEG93 [54] phi (byte) startProcessing::i#2 = (byte) 0 [phi:startProcessing::@1->startProcessing::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG94 [54] phi from startProcessing::@3 to startProcessing::@2 [phi:startProcessing::@3->startProcessing::@2]
  //SEG95 [54] phi (byte) startProcessing::i#2 = (byte) startProcessing::i#1 [phi:startProcessing::@3->startProcessing::@2#0] -- register_copy 
  //SEG96 startProcessing::@2
  b2:
  //SEG97 [55] (byte) startProcessing::$42 ← (byte) startProcessing::i#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda i
    asl
  //SEG98 [56] (byte) startProcessing::$43 ← (byte) startProcessing::$42 + (byte) startProcessing::i#2 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc i
  //SEG99 [57] (byte) startProcessing::$44 ← (byte) startProcessing::$43 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
  //SEG100 [58] (byte) startProcessing::$45 ← (byte) startProcessing::$44 + (byte) startProcessing::i#2 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc i
  //SEG101 [59] (byte~) startProcessing::$30 ← (byte) startProcessing::$45 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
  //SEG102 [60] if(*((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) startProcessing::$30)!=(const byte) STATUS_FREE) goto startProcessing::@3 -- pbuc1_derefidx_vbuaa_neq_vbuc2_then_la1 
    tay
    lda #STATUS_FREE
    cmp PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_STATUS,y
    beq !b3+
    jmp b3
  !b3:
  //SEG103 [61] phi from startProcessing::@2 startProcessing::@9 to startProcessing::@4 [phi:startProcessing::@2/startProcessing::@9->startProcessing::@4]
  //SEG104 [61] phi (byte) startProcessing::freeIdx#2 = (byte) startProcessing::i#2 [phi:startProcessing::@2/startProcessing::@9->startProcessing::@4#0] -- register_copy 
  //SEG105 startProcessing::@4
  b4:
  //SEG106 [62] if((byte) startProcessing::freeIdx#2==(byte) $ff) goto startProcessing::@8 -- vbuz1_eq_vbuc1_then_la1 
    lda #$ff
    cmp freeIdx
    bne !b8+
    jmp b8
  !b8:
  //SEG107 startProcessing::@5
  //SEG108 [63] (word~) startProcessing::$0 ← (word)(byte) startProcessing::center_y#0 -- vwuz1=_word_vbuz2 
    lda center_y
    sta _0
    lda #0
    sta _0+1
  //SEG109 [64] (word) startProcessing::$47 ← (word~) startProcessing::$0 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda _0
    asl
    sta _47
    lda _0+1
    rol
    sta _47+1
    asl _47
    rol _47+1
  //SEG110 [65] (word) startProcessing::$48 ← (word) startProcessing::$47 + (word~) startProcessing::$0 -- vwuz1=vwuz2_plus_vwuz1 
    lda _48
    clc
    adc _47
    sta _48
    lda _48+1
    adc _47+1
    sta _48+1
  //SEG111 [66] (word~) startProcessing::$1 ← (word) startProcessing::$48 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl _1
    rol _1+1
    asl _1
    rol _1+1
    asl _1
    rol _1+1
  //SEG112 [67] (word) startProcessing::offset#0 ← (word~) startProcessing::$1 + (byte) startProcessing::center_x#0 -- vwuz1=vwuz1_plus_vbuz2 
    lda center_x
    clc
    adc offset
    sta offset
    bcc !+
    inc offset+1
  !:
  //SEG113 [68] (byte*) startProcessing::colPtr#0 ← (const byte*) COLS#0 + (word) startProcessing::offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda offset
    clc
    adc #<COLS
    sta colPtr
    lda offset+1
    adc #>COLS
    sta colPtr+1
  //SEG114 [69] (byte) startProcessing::spriteCol#0 ← *((byte*) startProcessing::colPtr#0) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (colPtr),y
    sta spriteCol
  //SEG115 [70] (byte*) startProcessing::screenPtr#0 ← (const byte*) SCREEN#0 + (word) startProcessing::offset#0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda screenPtr
    adc #<SCREEN
    sta screenPtr
    lda screenPtr+1
    adc #>SCREEN
    sta screenPtr+1
  //SEG116 [71] (word~) startProcessing::$5 ← (word)(byte) startProcessing::freeIdx#2 -- vwuz1=_word_vbuz2 
    lda freeIdx
    sta _5
    tya
    sta _5+1
  //SEG117 [72] (word~) startProcessing::$6 ← (word~) startProcessing::$5 << (byte) 6 -- vwuz1=vwuz1_rol_6 
    asl _6
    rol _6+1
    asl _6
    rol _6+1
    asl _6
    rol _6+1
    asl _6
    rol _6+1
    asl _6
    rol _6+1
    asl _6
    rol _6+1
  //SEG118 [73] (byte*) startProcessing::spriteData#0 ← (const byte*) SPRITE_DATA#0 + (word~) startProcessing::$6 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda spriteData
    adc #<SPRITE_DATA
    sta spriteData
    lda spriteData+1
    adc #>SPRITE_DATA
    sta spriteData+1
  //SEG119 [74] (byte) startProcessing::ch#0 ← *((byte*) startProcessing::screenPtr#0) -- vbuaa=_deref_pbuz1 
    lda (screenPtr),y
  //SEG120 [75] (word~) startProcessing::$8 ← (word)(byte) startProcessing::ch#0 -- vwuz1=_word_vbuaa 
    sta _8
    tya
    sta _8+1
  //SEG121 [76] (word~) startProcessing::$9 ← (word~) startProcessing::$8 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl _9
    rol _9+1
    asl _9
    rol _9+1
    asl _9
    rol _9+1
  //SEG122 [77] (byte*) startProcessing::chargenData#0 ← (const byte*) CHARGEN#0 + (word~) startProcessing::$9 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda chargenData
    adc #<CHARGEN
    sta chargenData
    lda chargenData+1
    adc #>CHARGEN
    sta chargenData+1
  //SEG123 asm { sei  }
    sei
  //SEG124 [79] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
  //SEG125 [80] phi from startProcessing::@5 to startProcessing::@6 [phi:startProcessing::@5->startProcessing::@6]
  //SEG126 [80] phi (byte) startProcessing::i1#2 = (byte) 0 [phi:startProcessing::@5->startProcessing::@6#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG127 [80] phi (byte*) startProcessing::spriteData#2 = (byte*) startProcessing::spriteData#0 [phi:startProcessing::@5->startProcessing::@6#1] -- register_copy 
  //SEG128 [80] phi (byte*) startProcessing::chargenData#2 = (byte*) startProcessing::chargenData#0 [phi:startProcessing::@5->startProcessing::@6#2] -- register_copy 
  //SEG129 [80] phi from startProcessing::@6 to startProcessing::@6 [phi:startProcessing::@6->startProcessing::@6]
  //SEG130 [80] phi (byte) startProcessing::i1#2 = (byte) startProcessing::i1#1 [phi:startProcessing::@6->startProcessing::@6#0] -- register_copy 
  //SEG131 [80] phi (byte*) startProcessing::spriteData#2 = (byte*) startProcessing::spriteData#1 [phi:startProcessing::@6->startProcessing::@6#1] -- register_copy 
  //SEG132 [80] phi (byte*) startProcessing::chargenData#2 = (byte*) startProcessing::chargenData#1 [phi:startProcessing::@6->startProcessing::@6#2] -- register_copy 
  //SEG133 startProcessing::@6
  b6:
  //SEG134 [81] *((byte*) startProcessing::spriteData#2) ← *((byte*) startProcessing::chargenData#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (chargenData),y
    sta (spriteData),y
  //SEG135 [82] (byte*) startProcessing::spriteData#1 ← (byte*) startProcessing::spriteData#2 + (byte) 3 -- pbuz1=pbuz1_plus_vbuc1 
    lda #3
    clc
    adc spriteData
    sta spriteData
    bcc !+
    inc spriteData+1
  !:
  //SEG136 [83] (byte*) startProcessing::chargenData#1 ← ++ (byte*) startProcessing::chargenData#2 -- pbuz1=_inc_pbuz1 
    inc chargenData
    bne !+
    inc chargenData+1
  !:
  //SEG137 [84] (byte) startProcessing::i1#1 ← ++ (byte) startProcessing::i1#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG138 [85] if((byte) startProcessing::i1#1!=(byte) 8) goto startProcessing::@6 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b6
  //SEG139 startProcessing::@7
  //SEG140 [86] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG141 asm { cli  }
    cli
  //SEG142 [88] (word~) startProcessing::$11 ← (word)(byte) startProcessing::center_x#0 -- vwuz1=_word_vbuz2 
    lda center_x
    sta _11
    lda #0
    sta _11+1
  //SEG143 [89] (word~) startProcessing::$12 ← (word~) startProcessing::$11 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl _12
    rol _12+1
    asl _12
    rol _12+1
    asl _12
    rol _12+1
  //SEG144 [90] (word~) startProcessing::$13 ← (const byte) BORDER_XPOS_LEFT#0 + (word~) startProcessing::$12 -- vwuz1=vbuc1_plus_vwuz1 
    lda #BORDER_XPOS_LEFT
    clc
    adc _13
    sta _13
    bcc !+
    inc _13+1
  !:
  //SEG145 [91] (word) startProcessing::spriteX#0 ← (word~) startProcessing::$13 << (byte) 4 -- vwuz1=vwuz1_rol_4 
    asl spriteX
    rol spriteX+1
    asl spriteX
    rol spriteX+1
    asl spriteX
    rol spriteX+1
    asl spriteX
    rol spriteX+1
  //SEG146 [92] (word~) startProcessing::$15 ← (word)(byte) startProcessing::center_y#0 -- vwuz1=_word_vbuz2 
    lda center_y
    sta _15
    lda #0
    sta _15+1
  //SEG147 [93] (word~) startProcessing::$16 ← (word~) startProcessing::$15 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl _16
    rol _16+1
    asl _16
    rol _16+1
    asl _16
    rol _16+1
  //SEG148 [94] (word~) startProcessing::$17 ← (const byte) BORDER_YPOS_TOP#0 + (word~) startProcessing::$16 -- vwuz1=vbuc1_plus_vwuz1 
    lda #BORDER_YPOS_TOP
    clc
    adc _17
    sta _17
    bcc !+
    inc _17+1
  !:
  //SEG149 [95] (word) startProcessing::spriteY#0 ← (word~) startProcessing::$17 << (byte) 4 -- vwuz1=vwuz1_rol_4 
    asl spriteY
    rol spriteY+1
    asl spriteY
    rol spriteY+1
    asl spriteY
    rol spriteY+1
    asl spriteY
    rol spriteY+1
  //SEG150 [96] (byte) startProcessing::spritePtr#0 ← (byte)(const byte*) SPRITE_DATA#0/(byte) $40 + (byte) startProcessing::freeIdx#2 -- vbuz1=vbuc1_plus_vbuz2 
    lax freeIdx
    axs #-[SPRITE_DATA/$40]
    stx spritePtr
  //SEG151 [97] (byte~) startProcessing::$22 ← (byte) startProcessing::freeIdx#2 << (byte) 3 -- vbuaa=vbuz1_rol_3 
    lda freeIdx
    asl
    asl
    asl
  //SEG152 [98] (word~) startProcessing::$23 ← (word)(byte~) startProcessing::$22 -- vwuz1=_word_vbuaa 
    sta _23
    lda #0
    sta _23+1
  //SEG153 [99] (byte) startProcessing::$50 ← (byte) startProcessing::freeIdx#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda freeIdx
    asl
  //SEG154 [100] (byte) startProcessing::$51 ← (byte) startProcessing::$50 + (byte) startProcessing::freeIdx#2 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc freeIdx
  //SEG155 [101] (byte) startProcessing::$52 ← (byte) startProcessing::$51 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
  //SEG156 [102] (byte) startProcessing::$53 ← (byte) startProcessing::$52 + (byte) startProcessing::freeIdx#2 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc freeIdx
  //SEG157 [103] (byte~) startProcessing::$31 ← (byte) startProcessing::$53 << (byte) 1 -- vbuxx=vbuaa_rol_1 
    asl
    tax
  //SEG158 [104] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) startProcessing::$31) ← (word) startProcessing::spriteX#0 -- pwuc1_derefidx_vbuxx=vwuz1 
    lda spriteX
    sta PROCESSING,x
    lda spriteX+1
    sta PROCESSING+1,x
  //SEG159 [105] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y + (byte~) startProcessing::$31) ← (word) startProcessing::spriteY#0 -- pwuc1_derefidx_vbuxx=vwuz1 
    lda spriteY
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_Y,x
    lda spriteY+1
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_Y+1,x
  //SEG160 [106] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX + (byte~) startProcessing::$31) ← (word~) startProcessing::$23 -- pwuc1_derefidx_vbuxx=vwuz1 
    lda _23
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_VX,x
    lda _23+1
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_VX+1,x
  //SEG161 [107] *((word*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY + (byte~) startProcessing::$31) ← (byte) $3c -- pwuc1_derefidx_vbuxx=vbuc2 
    lda #$3c
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_VY,x
    lda #0
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_VY+1,x
  //SEG162 [108] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID + (byte~) startProcessing::$31) ← (byte) startProcessing::freeIdx#2 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda freeIdx
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_ID,x
  //SEG163 [109] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR + (byte~) startProcessing::$31) ← (byte) startProcessing::spritePtr#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda spritePtr
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_PTR,x
  //SEG164 [110] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL + (byte~) startProcessing::$31) ← (byte) startProcessing::spriteCol#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda spriteCol
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_COL,x
  //SEG165 [111] *((byte*)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS + (byte~) startProcessing::$31) ← (const byte) STATUS_NEW -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #STATUS_NEW
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_STATUS,x
  //SEG166 [112] *((byte**)(const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0+(const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR + (byte~) startProcessing::$31) ← (byte*) startProcessing::screenPtr#0 -- pptc1_derefidx_vbuxx=pbuz1 
    lda screenPtr
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR,x
    lda screenPtr+1
    sta PROCESSING+OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR+1,x
  //SEG167 startProcessing::@return
  //SEG168 [113] return 
    rts
  //SEG169 startProcessing::@8
  b8:
  //SEG170 [114] (byte~) startProcessing::freeIdx#7 ← (byte) startProcessing::freeIdx#2 -- vbuxx=vbuz1 
    ldx freeIdx
  //SEG171 [53] phi from startProcessing::@8 to startProcessing::@1 [phi:startProcessing::@8->startProcessing::@1]
  //SEG172 [53] phi (byte) startProcessing::freeIdx#6 = (byte~) startProcessing::freeIdx#7 [phi:startProcessing::@8->startProcessing::@1#0] -- register_copy 
    jmp b1
  //SEG173 startProcessing::@3
  b3:
  //SEG174 [115] (byte) startProcessing::i#1 ← ++ (byte) startProcessing::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG175 [116] if((byte) startProcessing::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto startProcessing::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_PROCESSING-1+1
    cmp i
    beq !b2+
    jmp b2
  !b2:
  //SEG176 startProcessing::@9
  //SEG177 [117] (byte~) startProcessing::freeIdx#8 ← (byte) startProcessing::freeIdx#6 -- vbuz1=vbuxx 
    stx freeIdx
    jmp b4
}
//SEG178 getCharToProcess
// Find the non-space char closest to the center of the screen
// If no non-space char is found the distance will be 0xffff
getCharToProcess: {
    .label _8 = $3d
    .label _9 = $3d
    .label _10 = $3d
    .label screen_line = $c
    .label dist_line = $e
    .label y = $10
    .label return_x = $12
    .label return_y = $13
    .label closest_dist = $11
    .label closest_x = $12
    .label closest_y = $13
    .label _12 = $3f
    .label _13 = $3d
  //SEG179 [118] (byte*) getCharToProcess::screen_line#0 ← (byte*)(void*) SCREEN_COPY#0 -- pbuz1=pbuz2 
    lda SCREEN_COPY
    sta screen_line
    lda SCREEN_COPY+1
    sta screen_line+1
  //SEG180 [119] (byte*) getCharToProcess::dist_line#0 ← (byte*)(void*) SCREEN_DIST#0 -- pbuz1=pbuz2 
    lda SCREEN_DIST
    sta dist_line
    lda SCREEN_DIST+1
    sta dist_line+1
  //SEG181 [120] phi from getCharToProcess to getCharToProcess::@1 [phi:getCharToProcess->getCharToProcess::@1]
  //SEG182 [120] phi (byte) getCharToProcess::closest_y#9 = (byte) 0 [phi:getCharToProcess->getCharToProcess::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta closest_y
  //SEG183 [120] phi (byte) getCharToProcess::closest_x#9 = (byte) 0 [phi:getCharToProcess->getCharToProcess::@1#1] -- vbuz1=vbuc1 
    sta closest_x
  //SEG184 [120] phi (byte) getCharToProcess::y#7 = (byte) 0 [phi:getCharToProcess->getCharToProcess::@1#2] -- vbuz1=vbuc1 
    sta y
  //SEG185 [120] phi (byte) getCharToProcess::closest_dist#8 = (const byte) NOT_FOUND#0 [phi:getCharToProcess->getCharToProcess::@1#3] -- vbuz1=vbuc1 
    lda #NOT_FOUND
    sta closest_dist
  //SEG186 [120] phi (byte*) getCharToProcess::dist_line#6 = (byte*) getCharToProcess::dist_line#0 [phi:getCharToProcess->getCharToProcess::@1#4] -- register_copy 
  //SEG187 [120] phi (byte*) getCharToProcess::screen_line#4 = (byte*) getCharToProcess::screen_line#0 [phi:getCharToProcess->getCharToProcess::@1#5] -- register_copy 
  //SEG188 getCharToProcess::@1
  b1:
  //SEG189 [121] phi from getCharToProcess::@1 to getCharToProcess::@2 [phi:getCharToProcess::@1->getCharToProcess::@2]
  //SEG190 [121] phi (byte) getCharToProcess::closest_y#7 = (byte) getCharToProcess::closest_y#9 [phi:getCharToProcess::@1->getCharToProcess::@2#0] -- register_copy 
  //SEG191 [121] phi (byte) getCharToProcess::closest_x#7 = (byte) getCharToProcess::closest_x#9 [phi:getCharToProcess::@1->getCharToProcess::@2#1] -- register_copy 
  //SEG192 [121] phi (byte) getCharToProcess::closest_dist#2 = (byte) getCharToProcess::closest_dist#8 [phi:getCharToProcess::@1->getCharToProcess::@2#2] -- register_copy 
  //SEG193 [121] phi (byte) getCharToProcess::x#2 = (byte) 0 [phi:getCharToProcess::@1->getCharToProcess::@2#3] -- vbuyy=vbuc1 
    ldy #0
  //SEG194 getCharToProcess::@2
  b2:
  //SEG195 [122] if(*((byte*) getCharToProcess::screen_line#4 + (byte) getCharToProcess::x#2)==(byte) ' ') goto getCharToProcess::@11 -- pbuz1_derefidx_vbuyy_eq_vbuc1_then_la1 
    lda (screen_line),y
    cmp #' '
    bne !b11+
    jmp b11
  !b11:
  //SEG196 getCharToProcess::@4
  //SEG197 [123] (byte) getCharToProcess::dist#0 ← *((byte*) getCharToProcess::dist_line#6 + (byte) getCharToProcess::x#2) -- vbuxx=pbuz1_derefidx_vbuyy 
    lda (dist_line),y
    tax
  //SEG198 [124] if((byte) getCharToProcess::dist#0>=(byte) getCharToProcess::closest_dist#2) goto getCharToProcess::@12 -- vbuxx_ge_vbuz1_then_la1 
    cpx closest_dist
    bcs b12
  //SEG199 getCharToProcess::@5
  //SEG200 [125] (byte~) getCharToProcess::return_x#7 ← (byte) getCharToProcess::x#2 -- vbuz1=vbuyy 
    sty return_x
  //SEG201 [126] (byte~) getCharToProcess::return_y#7 ← (byte) getCharToProcess::y#7 -- vbuz1=vbuz2 
    lda y
    sta return_y
  //SEG202 [127] phi from getCharToProcess::@11 getCharToProcess::@12 getCharToProcess::@5 to getCharToProcess::@3 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3]
  //SEG203 [127] phi (byte) getCharToProcess::return_y#1 = (byte) getCharToProcess::closest_y#7 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3#0] -- register_copy 
  //SEG204 [127] phi (byte) getCharToProcess::return_x#1 = (byte) getCharToProcess::closest_x#7 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3#1] -- register_copy 
  //SEG205 [127] phi (byte) getCharToProcess::return_dist#1 = (byte~) getCharToProcess::return_dist#5 [phi:getCharToProcess::@11/getCharToProcess::@12/getCharToProcess::@5->getCharToProcess::@3#2] -- register_copy 
  //SEG206 getCharToProcess::@3
  b3:
  //SEG207 [128] (byte) getCharToProcess::x#1 ← ++ (byte) getCharToProcess::x#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG208 [129] if((byte) getCharToProcess::x#1!=(byte) $28) goto getCharToProcess::@10 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$28
    bne b10
  //SEG209 getCharToProcess::@6
  //SEG210 [130] (byte*) getCharToProcess::screen_line#1 ← (byte*) getCharToProcess::screen_line#4 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc screen_line
    sta screen_line
    bcc !+
    inc screen_line+1
  !:
  //SEG211 [131] (byte*) getCharToProcess::dist_line#1 ← (byte*) getCharToProcess::dist_line#6 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc dist_line
    sta dist_line
    bcc !+
    inc dist_line+1
  !:
  //SEG212 [132] (byte) getCharToProcess::y#1 ← ++ (byte) getCharToProcess::y#7 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG213 [133] if((byte) getCharToProcess::y#1!=(byte) $19) goto getCharToProcess::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp y
    bne b9
  //SEG214 getCharToProcess::@7
  //SEG215 [134] if((byte) getCharToProcess::return_dist#1==(const byte) NOT_FOUND#0) goto getCharToProcess::@return -- vbuxx_eq_vbuc1_then_la1 
    cpx #NOT_FOUND
    beq breturn
  //SEG216 getCharToProcess::@8
  //SEG217 [135] (word~) getCharToProcess::$8 ← (word)(byte) getCharToProcess::return_y#1 -- vwuz1=_word_vbuz2 
    lda return_y
    sta _8
    lda #0
    sta _8+1
  //SEG218 [136] (word) getCharToProcess::$12 ← (word~) getCharToProcess::$8 << (byte) 2 -- vwuz1=vwuz2_rol_2 
    lda _8
    asl
    sta _12
    lda _8+1
    rol
    sta _12+1
    asl _12
    rol _12+1
  //SEG219 [137] (word) getCharToProcess::$13 ← (word) getCharToProcess::$12 + (word~) getCharToProcess::$8 -- vwuz1=vwuz2_plus_vwuz1 
    lda _13
    clc
    adc _12
    sta _13
    lda _13+1
    adc _12+1
    sta _13+1
  //SEG220 [138] (word~) getCharToProcess::$9 ← (word) getCharToProcess::$13 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl _9
    rol _9+1
    asl _9
    rol _9+1
    asl _9
    rol _9+1
  //SEG221 [139] (byte*~) getCharToProcess::$10 ← (byte*)(void*) SCREEN_COPY#0 + (word~) getCharToProcess::$9 -- pbuz1=pbuz2_plus_vwuz1 
    lda _10
    clc
    adc SCREEN_COPY
    sta _10
    lda _10+1
    adc SCREEN_COPY+1
    sta _10+1
  //SEG222 [140] *((byte*~) getCharToProcess::$10 + (byte) getCharToProcess::return_x#1) ← (byte) ' ' -- pbuz1_derefidx_vbuz2=vbuc1 
    // clear the found char on the screen copy
    lda #' '
    ldy return_x
    sta (_10),y
  //SEG223 getCharToProcess::@return
  breturn:
  //SEG224 [141] return 
    rts
  //SEG225 getCharToProcess::@9
  b9:
  //SEG226 [142] (byte~) getCharToProcess::closest_dist#10 ← (byte) getCharToProcess::return_dist#1 -- vbuz1=vbuxx 
    stx closest_dist
  //SEG227 [120] phi from getCharToProcess::@9 to getCharToProcess::@1 [phi:getCharToProcess::@9->getCharToProcess::@1]
  //SEG228 [120] phi (byte) getCharToProcess::closest_y#9 = (byte) getCharToProcess::return_y#1 [phi:getCharToProcess::@9->getCharToProcess::@1#0] -- register_copy 
  //SEG229 [120] phi (byte) getCharToProcess::closest_x#9 = (byte) getCharToProcess::return_x#1 [phi:getCharToProcess::@9->getCharToProcess::@1#1] -- register_copy 
  //SEG230 [120] phi (byte) getCharToProcess::y#7 = (byte) getCharToProcess::y#1 [phi:getCharToProcess::@9->getCharToProcess::@1#2] -- register_copy 
  //SEG231 [120] phi (byte) getCharToProcess::closest_dist#8 = (byte~) getCharToProcess::closest_dist#10 [phi:getCharToProcess::@9->getCharToProcess::@1#3] -- register_copy 
  //SEG232 [120] phi (byte*) getCharToProcess::dist_line#6 = (byte*) getCharToProcess::dist_line#1 [phi:getCharToProcess::@9->getCharToProcess::@1#4] -- register_copy 
  //SEG233 [120] phi (byte*) getCharToProcess::screen_line#4 = (byte*) getCharToProcess::screen_line#1 [phi:getCharToProcess::@9->getCharToProcess::@1#5] -- register_copy 
    jmp b1
  //SEG234 getCharToProcess::@10
  b10:
  //SEG235 [143] (byte~) getCharToProcess::closest_dist#12 ← (byte) getCharToProcess::return_dist#1 -- vbuz1=vbuxx 
    stx closest_dist
  //SEG236 [121] phi from getCharToProcess::@10 to getCharToProcess::@2 [phi:getCharToProcess::@10->getCharToProcess::@2]
  //SEG237 [121] phi (byte) getCharToProcess::closest_y#7 = (byte) getCharToProcess::return_y#1 [phi:getCharToProcess::@10->getCharToProcess::@2#0] -- register_copy 
  //SEG238 [121] phi (byte) getCharToProcess::closest_x#7 = (byte) getCharToProcess::return_x#1 [phi:getCharToProcess::@10->getCharToProcess::@2#1] -- register_copy 
  //SEG239 [121] phi (byte) getCharToProcess::closest_dist#2 = (byte~) getCharToProcess::closest_dist#12 [phi:getCharToProcess::@10->getCharToProcess::@2#2] -- register_copy 
  //SEG240 [121] phi (byte) getCharToProcess::x#2 = (byte) getCharToProcess::x#1 [phi:getCharToProcess::@10->getCharToProcess::@2#3] -- register_copy 
    jmp b2
  //SEG241 getCharToProcess::@12
  b12:
  //SEG242 [144] (byte~) getCharToProcess::return_dist#6 ← (byte) getCharToProcess::closest_dist#2 -- vbuxx=vbuz1 
    ldx closest_dist
    jmp b3
  //SEG243 getCharToProcess::@11
  b11:
  //SEG244 [145] (byte~) getCharToProcess::return_dist#5 ← (byte) getCharToProcess::closest_dist#2 -- vbuxx=vbuz1 
    ldx closest_dist
    jmp b3
}
//SEG245 setupRasterIrq
// Setup Raster IRQ
setupRasterIrq: {
    .label irqRoutine = irqTop
  //SEG246 asm { sei  }
    sei
  //SEG247 [147] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG248 [148] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG249 [149] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0 -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
  //SEG250 setupRasterIrq::@1
  //SEG251 [150] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
  //SEG252 setupRasterIrq::@2
  //SEG253 [151] *((const byte*) RASTER#0) ← <(const byte) RASTER_IRQ_TOP#0 -- _deref_pbuc1=vbuc2 
    lda #RASTER_IRQ_TOP
    sta RASTER
  //SEG254 [152] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
  //SEG255 [153] *((const void()**) HARDWARE_IRQ#0) ← (const void()*) setupRasterIrq::irqRoutine#0 -- _deref_pptc1=pprc2 
    // Set the IRQ routine
    lda #<irqRoutine
    sta HARDWARE_IRQ
    lda #>irqRoutine
    sta HARDWARE_IRQ+1
  //SEG256 asm { cli  }
    cli
  //SEG257 setupRasterIrq::@return
  //SEG258 [155] return 
    rts
}
//SEG259 initSprites
// Initialize sprites
initSprites: {
    .label sp = $14
  //SEG260 [157] phi from initSprites to initSprites::@1 [phi:initSprites->initSprites::@1]
  //SEG261 [157] phi (byte*) initSprites::sp#2 = (const byte*) SPRITE_DATA#0 [phi:initSprites->initSprites::@1#0] -- pbuz1=pbuc1 
    lda #<SPRITE_DATA
    sta sp
    lda #>SPRITE_DATA
    sta sp+1
  // Clear sprite data
  //SEG262 [157] phi from initSprites::@1 to initSprites::@1 [phi:initSprites::@1->initSprites::@1]
  //SEG263 [157] phi (byte*) initSprites::sp#2 = (byte*) initSprites::sp#1 [phi:initSprites::@1->initSprites::@1#0] -- register_copy 
  //SEG264 initSprites::@1
  b1:
  //SEG265 [158] *((byte*) initSprites::sp#2) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (sp),y
  //SEG266 [159] (byte*) initSprites::sp#1 ← ++ (byte*) initSprites::sp#2 -- pbuz1=_inc_pbuz1 
    inc sp
    bne !+
    inc sp+1
  !:
  //SEG267 [160] if((byte*) initSprites::sp#1<(const byte*) SPRITE_DATA#0+(const byte) NUM_PROCESSING#0*(byte) $40) goto initSprites::@1 -- pbuz1_lt_pbuc1_then_la1 
    lda sp+1
    cmp #>SPRITE_DATA+NUM_PROCESSING*$40
    bcc b1
    bne !+
    lda sp
    cmp #<SPRITE_DATA+NUM_PROCESSING*$40
    bcc b1
  !:
  //SEG268 [161] phi from initSprites::@1 to initSprites::@2 [phi:initSprites::@1->initSprites::@2]
  //SEG269 [161] phi (byte) initSprites::i#2 = (byte) 0 [phi:initSprites::@1->initSprites::@2#0] -- vbuxx=vbuc1 
    ldx #0
  // Initialize sprite registers
  //SEG270 [161] phi from initSprites::@2 to initSprites::@2 [phi:initSprites::@2->initSprites::@2]
  //SEG271 [161] phi (byte) initSprites::i#2 = (byte) initSprites::i#1 [phi:initSprites::@2->initSprites::@2#0] -- register_copy 
  //SEG272 initSprites::@2
  b2:
  //SEG273 [162] *((const byte*) SPRITES_COLS#0 + (byte) initSprites::i#2) ← (const byte) LIGHT_BLUE#0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #LIGHT_BLUE
    sta SPRITES_COLS,x
  //SEG274 [163] (byte) initSprites::i#1 ← ++ (byte) initSprites::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG275 [164] if((byte) initSprites::i#1!=(byte) 8) goto initSprites::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b2
  //SEG276 initSprites::@3
  //SEG277 [165] *((const byte*) SPRITES_MC#0) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_MC
  //SEG278 [166] *((const byte*) SPRITES_EXPAND_X#0) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    sta SPRITES_EXPAND_X
  //SEG279 [167] *((const byte*) SPRITES_EXPAND_Y#0) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    sta SPRITES_EXPAND_Y
  //SEG280 initSprites::@return
  //SEG281 [168] return 
    rts
}
//SEG282 init_dist_screen
// Populates 1000 bytes (a screen) with values representing the distance to the center.
// The actual value stored is distance*2 to increase precision
// init_dist_screen(byte* zeropage($17) screen)
init_dist_screen: {
    .label screen = $17
    .label screen_bottomline = $19
    .label yds = $41
    .label xds = $43
    .label ds = $43
    .label x = $1b
    .label xb = $1c
    .label screen_topline = $17
    .label y = $16
  //SEG283 [170] call init_squares 
  //SEG284 [241] phi from init_dist_screen to init_squares [phi:init_dist_screen->init_squares]
    jsr init_squares
  //SEG285 init_dist_screen::@10
  //SEG286 [171] (byte*) init_dist_screen::screen_bottomline#0 ← (byte*) init_dist_screen::screen#0 + (word)(number) $28*(number) $18 -- pbuz1=pbuz2_plus_vwuc1 
    lda screen
    clc
    adc #<$28*$18
    sta screen_bottomline
    lda screen+1
    adc #>$28*$18
    sta screen_bottomline+1
  //SEG287 [172] phi from init_dist_screen::@10 to init_dist_screen::@1 [phi:init_dist_screen::@10->init_dist_screen::@1]
  //SEG288 [172] phi (byte*) init_dist_screen::screen_bottomline#10 = (byte*) init_dist_screen::screen_bottomline#0 [phi:init_dist_screen::@10->init_dist_screen::@1#0] -- register_copy 
  //SEG289 [172] phi (byte*) init_dist_screen::screen_topline#10 = (byte*) init_dist_screen::screen#0 [phi:init_dist_screen::@10->init_dist_screen::@1#1] -- register_copy 
  //SEG290 [172] phi (byte) init_dist_screen::y#10 = (byte) 0 [phi:init_dist_screen::@10->init_dist_screen::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta y
  //SEG291 [172] phi from init_dist_screen::@9 to init_dist_screen::@1 [phi:init_dist_screen::@9->init_dist_screen::@1]
  //SEG292 [172] phi (byte*) init_dist_screen::screen_bottomline#10 = (byte*) init_dist_screen::screen_bottomline#1 [phi:init_dist_screen::@9->init_dist_screen::@1#0] -- register_copy 
  //SEG293 [172] phi (byte*) init_dist_screen::screen_topline#10 = (byte*) init_dist_screen::screen_topline#1 [phi:init_dist_screen::@9->init_dist_screen::@1#1] -- register_copy 
  //SEG294 [172] phi (byte) init_dist_screen::y#10 = (byte) init_dist_screen::y#1 [phi:init_dist_screen::@9->init_dist_screen::@1#2] -- register_copy 
  //SEG295 init_dist_screen::@1
  b1:
  //SEG296 [173] (byte) init_dist_screen::y2#0 ← (byte) init_dist_screen::y#10 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda y
    asl
  //SEG297 [174] if((byte) init_dist_screen::y2#0>=(byte) $18) goto init_dist_screen::@2 -- vbuaa_ge_vbuc1_then_la1 
    cmp #$18
    bcs b2
  //SEG298 init_dist_screen::@3
  //SEG299 [175] (byte~) init_dist_screen::$5 ← (byte) $18 - (byte) init_dist_screen::y2#0 -- vbuaa=vbuc1_minus_vbuaa 
    eor #$ff
    clc
    adc #$18+1
  //SEG300 [176] phi from init_dist_screen::@2 init_dist_screen::@3 to init_dist_screen::@4 [phi:init_dist_screen::@2/init_dist_screen::@3->init_dist_screen::@4]
  //SEG301 [176] phi (byte) init_dist_screen::yd#0 = (byte~) init_dist_screen::$7 [phi:init_dist_screen::@2/init_dist_screen::@3->init_dist_screen::@4#0] -- register_copy 
  //SEG302 init_dist_screen::@4
  b4:
  //SEG303 [177] (byte) sqr::val#0 ← (byte) init_dist_screen::yd#0
  //SEG304 [178] call sqr 
  //SEG305 [237] phi from init_dist_screen::@4 to sqr [phi:init_dist_screen::@4->sqr]
  //SEG306 [237] phi (byte) sqr::val#2 = (byte) sqr::val#0 [phi:init_dist_screen::@4->sqr#0] -- register_copy 
    jsr sqr
  //SEG307 [179] (word) sqr::return#2 ← (word) sqr::return#0 -- vwuz1=vwuz2 
    lda sqr.return
    sta sqr.return_2
    lda sqr.return+1
    sta sqr.return_2+1
  //SEG308 init_dist_screen::@11
  //SEG309 [180] (word) init_dist_screen::yds#0 ← (word) sqr::return#2
  //SEG310 [181] phi from init_dist_screen::@11 to init_dist_screen::@5 [phi:init_dist_screen::@11->init_dist_screen::@5]
  //SEG311 [181] phi (byte) init_dist_screen::xb#2 = (byte) $27 [phi:init_dist_screen::@11->init_dist_screen::@5#0] -- vbuz1=vbuc1 
    lda #$27
    sta xb
  //SEG312 [181] phi (byte) init_dist_screen::x#2 = (byte) 0 [phi:init_dist_screen::@11->init_dist_screen::@5#1] -- vbuz1=vbuc1 
    lda #0
    sta x
  //SEG313 [181] phi from init_dist_screen::@13 to init_dist_screen::@5 [phi:init_dist_screen::@13->init_dist_screen::@5]
  //SEG314 [181] phi (byte) init_dist_screen::xb#2 = (byte) init_dist_screen::xb#1 [phi:init_dist_screen::@13->init_dist_screen::@5#0] -- register_copy 
  //SEG315 [181] phi (byte) init_dist_screen::x#2 = (byte) init_dist_screen::x#1 [phi:init_dist_screen::@13->init_dist_screen::@5#1] -- register_copy 
  //SEG316 init_dist_screen::@5
  b5:
  //SEG317 [182] (byte) init_dist_screen::x2#0 ← (byte) init_dist_screen::x#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda x
    asl
  //SEG318 [183] if((byte) init_dist_screen::x2#0>=(byte) $27) goto init_dist_screen::@6 -- vbuaa_ge_vbuc1_then_la1 
    cmp #$27
    bcs b6
  //SEG319 init_dist_screen::@7
  //SEG320 [184] (byte~) init_dist_screen::$13 ← (byte) $27 - (byte) init_dist_screen::x2#0 -- vbuaa=vbuc1_minus_vbuaa 
    eor #$ff
    clc
    adc #$27+1
  //SEG321 [185] phi from init_dist_screen::@6 init_dist_screen::@7 to init_dist_screen::@8 [phi:init_dist_screen::@6/init_dist_screen::@7->init_dist_screen::@8]
  //SEG322 [185] phi (byte) init_dist_screen::xd#0 = (byte~) init_dist_screen::$15 [phi:init_dist_screen::@6/init_dist_screen::@7->init_dist_screen::@8#0] -- register_copy 
  //SEG323 init_dist_screen::@8
  b8:
  //SEG324 [186] (byte) sqr::val#1 ← (byte) init_dist_screen::xd#0
  //SEG325 [187] call sqr 
  //SEG326 [237] phi from init_dist_screen::@8 to sqr [phi:init_dist_screen::@8->sqr]
  //SEG327 [237] phi (byte) sqr::val#2 = (byte) sqr::val#1 [phi:init_dist_screen::@8->sqr#0] -- register_copy 
    jsr sqr
  //SEG328 [188] (word) sqr::return#3 ← (word) sqr::return#0
  //SEG329 init_dist_screen::@12
  //SEG330 [189] (word) init_dist_screen::xds#0 ← (word) sqr::return#3
  //SEG331 [190] (word) init_dist_screen::ds#0 ← (word) init_dist_screen::xds#0 + (word) init_dist_screen::yds#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda ds
    clc
    adc yds
    sta ds
    lda ds+1
    adc yds+1
    sta ds+1
  //SEG332 [191] (word) sqrt::val#0 ← (word) init_dist_screen::ds#0
  //SEG333 [192] call sqrt 
    jsr sqrt
  //SEG334 [193] (byte) sqrt::return#2 ← (byte) sqrt::return#0
  //SEG335 init_dist_screen::@13
  //SEG336 [194] (byte) init_dist_screen::d#0 ← (byte) sqrt::return#2
  //SEG337 [195] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy x
    sta (screen_topline),y
  //SEG338 [196] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::x#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuaa 
    sta (screen_bottomline),y
  //SEG339 [197] *((byte*) init_dist_screen::screen_topline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy xb
    sta (screen_topline),y
  //SEG340 [198] *((byte*) init_dist_screen::screen_bottomline#10 + (byte) init_dist_screen::xb#2) ← (byte) init_dist_screen::d#0 -- pbuz1_derefidx_vbuz2=vbuaa 
    sta (screen_bottomline),y
  //SEG341 [199] (byte) init_dist_screen::x#1 ← ++ (byte) init_dist_screen::x#2 -- vbuz1=_inc_vbuz1 
    inc x
  //SEG342 [200] (byte) init_dist_screen::xb#1 ← -- (byte) init_dist_screen::xb#2 -- vbuz1=_dec_vbuz1 
    dec xb
  //SEG343 [201] if((byte) init_dist_screen::x#1<(byte) $13+(byte) 1) goto init_dist_screen::@5 -- vbuz1_lt_vbuc1_then_la1 
    lda x
    cmp #$13+1
    bcc b5
  //SEG344 init_dist_screen::@9
  //SEG345 [202] (byte*) init_dist_screen::screen_topline#1 ← (byte*) init_dist_screen::screen_topline#10 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc screen_topline
    sta screen_topline
    bcc !+
    inc screen_topline+1
  !:
  //SEG346 [203] (byte*) init_dist_screen::screen_bottomline#1 ← (byte*) init_dist_screen::screen_bottomline#10 - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda screen_bottomline
    sec
    sbc #<$28
    sta screen_bottomline
    lda screen_bottomline+1
    sbc #>$28
    sta screen_bottomline+1
  //SEG347 [204] (byte) init_dist_screen::y#1 ← ++ (byte) init_dist_screen::y#10 -- vbuz1=_inc_vbuz1 
    inc y
  //SEG348 [205] if((byte) init_dist_screen::y#1!=(byte) $d) goto init_dist_screen::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$d
    cmp y
    bne b1
  //SEG349 init_dist_screen::@return
  //SEG350 [206] return 
    rts
  //SEG351 init_dist_screen::@6
  b6:
  //SEG352 [207] (byte~) init_dist_screen::$15 ← (byte) init_dist_screen::x2#0 - (byte) $27 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #$27
    jmp b8
  //SEG353 init_dist_screen::@2
  b2:
  //SEG354 [208] (byte~) init_dist_screen::$7 ← (byte) init_dist_screen::y2#0 - (byte) $18 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #$18
    jmp b4
}
//SEG355 sqrt
// Find the (integer) square root of a word value
// If the square is not an integer then it returns the largest integer N where N*N <= val
// Uses a table of squares that must be initialized by calling init_squares()
// sqrt(word zeropage($43) val)
sqrt: {
    .label _1 = $1d
    .label _3 = $1d
    .label found = $1d
    .label val = $43
  //SEG356 [209] (word) bsearch16u::key#0 ← (word) sqrt::val#0
  //SEG357 [210] (word*) bsearch16u::items#1 ← (word*)(void*) SQUARES#1 -- pwuz1=pwuz2 
    lda SQUARES
    sta bsearch16u.items
    lda SQUARES+1
    sta bsearch16u.items+1
  //SEG358 [211] call bsearch16u 
  //SEG359 [218] phi from sqrt to bsearch16u [phi:sqrt->bsearch16u]
    jsr bsearch16u
  //SEG360 [212] (word*) bsearch16u::return#3 ← (word*) bsearch16u::return#1
  //SEG361 sqrt::@1
  //SEG362 [213] (word*) sqrt::found#0 ← (word*) bsearch16u::return#3
  //SEG363 [214] (word~) sqrt::$3 ← (word*) sqrt::found#0 - (word*)(void*) SQUARES#1 -- vwuz1=pwuz1_minus_pwuz2 
    lda _3
    sec
    sbc SQUARES
    sta _3
    lda _3+1
    sbc SQUARES+1
    sta _3+1
  //SEG364 [215] (word~) sqrt::$1 ← (word~) sqrt::$3 >> (byte) 1 -- vwuz1=vwuz1_ror_1 
    lsr _1+1
    ror _1
  //SEG365 [216] (byte) sqrt::return#0 ← (byte)(word~) sqrt::$1 -- vbuaa=_byte_vwuz1 
    lda _1
  //SEG366 sqrt::@return
  //SEG367 [217] return 
    rts
}
//SEG368 bsearch16u
// Searches an array of nitems unsigned words, the initial member of which is pointed to by base, for a member that matches the value key.
// - key - The value to look for
// - items - Pointer to the start of the array to search in
// - num - The number of items in the array
// Returns pointer to an entry in the array that matches the search key
// bsearch16u(word zeropage($43) key, word* zeropage($1d) items, byte register(X) num)
bsearch16u: {
    .label _2 = $1d
    .label pivot = $45
    .label result = $47
    .label return = $1d
    .label items = $1d
    .label key = $43
  //SEG369 [219] phi from bsearch16u to bsearch16u::@3 [phi:bsearch16u->bsearch16u::@3]
  //SEG370 [219] phi (word*) bsearch16u::items#2 = (word*) bsearch16u::items#1 [phi:bsearch16u->bsearch16u::@3#0] -- register_copy 
  //SEG371 [219] phi (byte) bsearch16u::num#3 = (const byte) NUM_SQUARES#3 [phi:bsearch16u->bsearch16u::@3#1] -- vbuxx=vbuc1 
    ldx #NUM_SQUARES
  //SEG372 bsearch16u::@3
  b3:
  //SEG373 [220] if((byte) bsearch16u::num#3>(byte) 0) goto bsearch16u::@4 -- vbuxx_gt_0_then_la1 
    cpx #0
    bne b4
  //SEG374 bsearch16u::@5
  //SEG375 [221] if(*((word*) bsearch16u::items#2)<=(word) bsearch16u::key#0) goto bsearch16u::@2 -- _deref_pwuz1_le_vwuz2_then_la1 
    ldy #1
    lda (items),y
    cmp key+1
    bne !+
    dey
    lda (items),y
    cmp key
    beq b2
  !:
    bcc b2
  //SEG376 bsearch16u::@1
  //SEG377 [222] (word*~) bsearch16u::$2 ← (word*) bsearch16u::items#2 - (byte) 1*(const byte) SIZEOF_WORD -- pwuz1=pwuz1_minus_vwuc1 
    lda _2
    sec
    sbc #<1*SIZEOF_WORD
    sta _2
    lda _2+1
    sbc #>1*SIZEOF_WORD
    sta _2+1
  //SEG378 [223] phi from bsearch16u::@1 bsearch16u::@5 to bsearch16u::@2 [phi:bsearch16u::@1/bsearch16u::@5->bsearch16u::@2]
  //SEG379 [223] phi (word*) bsearch16u::return#2 = (word*~) bsearch16u::$2 [phi:bsearch16u::@1/bsearch16u::@5->bsearch16u::@2#0] -- register_copy 
  //SEG380 bsearch16u::@2
  b2:
  //SEG381 [224] phi from bsearch16u::@2 bsearch16u::@8 to bsearch16u::@return [phi:bsearch16u::@2/bsearch16u::@8->bsearch16u::@return]
  //SEG382 [224] phi (word*) bsearch16u::return#1 = (word*) bsearch16u::return#2 [phi:bsearch16u::@2/bsearch16u::@8->bsearch16u::@return#0] -- register_copy 
  //SEG383 bsearch16u::@return
  //SEG384 [225] return 
    rts
  //SEG385 bsearch16u::@4
  b4:
  //SEG386 [226] (byte~) bsearch16u::$6 ← (byte) bsearch16u::num#3 >> (byte) 1 -- vbuaa=vbuxx_ror_1 
    txa
    lsr
  //SEG387 [227] (byte~) bsearch16u::$16 ← (byte~) bsearch16u::$6 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
  //SEG388 [228] (word*) bsearch16u::pivot#0 ← (word*) bsearch16u::items#2 + (byte~) bsearch16u::$16 -- pwuz1=pwuz2_plus_vbuaa 
    clc
    adc items
    sta pivot
    lda #0
    adc items+1
    sta pivot+1
  //SEG389 [229] (signed word) bsearch16u::result#0 ← (signed word)(word) bsearch16u::key#0 - (signed word)*((word*) bsearch16u::pivot#0) -- vwsz1=vwsz2_minus__deref_pwsz3 
    sec
    lda key
    ldy #0
    sbc (pivot),y
    sta result
    lda key+1
    iny
    sbc (pivot),y
    sta result+1
  //SEG390 [230] if((signed word) bsearch16u::result#0!=(signed byte) 0) goto bsearch16u::@6 -- vwsz1_neq_0_then_la1 
    bne b6
    lda result
    bne b6
  //SEG391 bsearch16u::@8
  //SEG392 [231] (word*~) bsearch16u::return#6 ← (word*) bsearch16u::pivot#0 -- pwuz1=pwuz2 
    lda pivot
    sta return
    lda pivot+1
    sta return+1
    rts
  //SEG393 bsearch16u::@6
  b6:
  //SEG394 [232] if((signed word) bsearch16u::result#0<=(signed byte) 0) goto bsearch16u::@7 -- vwsz1_le_0_then_la1 
    lda result+1
    bmi b7
    bne !+
    lda result
    beq b7
  !:
  //SEG395 bsearch16u::@9
  //SEG396 [233] (word*) bsearch16u::items#0 ← (word*) bsearch16u::pivot#0 + (byte) 1*(const byte) SIZEOF_WORD -- pwuz1=pwuz2_plus_vbuc1 
    lda #1*SIZEOF_WORD
    clc
    adc pivot
    sta items
    lda #0
    adc pivot+1
    sta items+1
  //SEG397 [234] (byte) bsearch16u::num#1 ← -- (byte) bsearch16u::num#3 -- vbuxx=_dec_vbuxx 
    dex
  //SEG398 [235] phi from bsearch16u::@6 bsearch16u::@9 to bsearch16u::@7 [phi:bsearch16u::@6/bsearch16u::@9->bsearch16u::@7]
  //SEG399 [235] phi (word*) bsearch16u::items#8 = (word*) bsearch16u::items#2 [phi:bsearch16u::@6/bsearch16u::@9->bsearch16u::@7#0] -- register_copy 
  //SEG400 [235] phi (byte) bsearch16u::num#5 = (byte) bsearch16u::num#3 [phi:bsearch16u::@6/bsearch16u::@9->bsearch16u::@7#1] -- register_copy 
  //SEG401 bsearch16u::@7
  b7:
  //SEG402 [236] (byte) bsearch16u::num#0 ← (byte) bsearch16u::num#5 >> (byte) 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
  //SEG403 [219] phi from bsearch16u::@7 to bsearch16u::@3 [phi:bsearch16u::@7->bsearch16u::@3]
  //SEG404 [219] phi (word*) bsearch16u::items#2 = (word*) bsearch16u::items#8 [phi:bsearch16u::@7->bsearch16u::@3#0] -- register_copy 
  //SEG405 [219] phi (byte) bsearch16u::num#3 = (byte) bsearch16u::num#0 [phi:bsearch16u::@7->bsearch16u::@3#1] -- register_copy 
    jmp b3
}
//SEG406 sqr
// Find the square of a byte value
// Uses a table of squares that must be initialized by calling init_squares()
// sqr(byte register(A) val)
sqr: {
    .label return = $43
    .label return_2 = $41
  //SEG407 [238] (byte~) sqr::$0 ← (byte) sqr::val#2 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
  //SEG408 [239] (word) sqr::return#0 ← *((word*)(void*) SQUARES#1 + (byte~) sqr::$0) -- vwuz1=pwuz2_derefidx_vbuaa 
    tay
    lda (SQUARES),y
    sta return
    iny
    lda (SQUARES),y
    sta return+1
  //SEG409 sqr::@return
  //SEG410 [240] return 
    rts
}
//SEG411 init_squares
// Initialize squares table
// Uses iterative formula (x+1)^2 = x^2 + 2*x + 1
init_squares: {
    .label squares = $21
    .label sqr = $1f
  //SEG412 [242] call malloc 
  //SEG413 [254] phi from init_squares to malloc [phi:init_squares->malloc]
  //SEG414 [254] phi (word) malloc::size#3 = (const byte) NUM_SQUARES#3*(const byte) SIZEOF_WORD [phi:init_squares->malloc#0] -- vwuz1=vbuc1 
    lda #NUM_SQUARES*SIZEOF_WORD
    sta malloc.size
    lda #0
    sta malloc.size+1
  //SEG415 [254] phi (byte*) heap_head#12 = (byte*) heap_head#1 [phi:init_squares->malloc#1] -- register_copy 
    jsr malloc
  //SEG416 init_squares::@2
  //SEG417 [243] (void*) SQUARES#1 ← (void*)(byte*) malloc::mem#0
  //SEG418 [244] (word*) init_squares::squares#0 ← (word*)(void*) SQUARES#1 -- pwuz1=pwuz2 
    lda SQUARES
    sta squares
    lda SQUARES+1
    sta squares+1
  //SEG419 [245] phi from init_squares::@2 to init_squares::@1 [phi:init_squares::@2->init_squares::@1]
  //SEG420 [245] phi (byte) init_squares::i#2 = (byte) 0 [phi:init_squares::@2->init_squares::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG421 [245] phi (word*) init_squares::squares#2 = (word*) init_squares::squares#0 [phi:init_squares::@2->init_squares::@1#1] -- register_copy 
  //SEG422 [245] phi (word) init_squares::sqr#2 = (byte) 0 [phi:init_squares::@2->init_squares::@1#2] -- vwuz1=vbuc1 
    txa
    sta sqr
    sta sqr+1
  //SEG423 [245] phi from init_squares::@1 to init_squares::@1 [phi:init_squares::@1->init_squares::@1]
  //SEG424 [245] phi (byte) init_squares::i#2 = (byte) init_squares::i#1 [phi:init_squares::@1->init_squares::@1#0] -- register_copy 
  //SEG425 [245] phi (word*) init_squares::squares#2 = (word*) init_squares::squares#1 [phi:init_squares::@1->init_squares::@1#1] -- register_copy 
  //SEG426 [245] phi (word) init_squares::sqr#2 = (word) init_squares::sqr#1 [phi:init_squares::@1->init_squares::@1#2] -- register_copy 
  //SEG427 init_squares::@1
  b1:
  //SEG428 [246] *((word*) init_squares::squares#2) ← (word) init_squares::sqr#2 -- _deref_pwuz1=vwuz2 
    ldy #0
    lda sqr
    sta (squares),y
    iny
    lda sqr+1
    sta (squares),y
  //SEG429 [247] (word*) init_squares::squares#1 ← (word*) init_squares::squares#2 + (const byte) SIZEOF_WORD -- pwuz1=pwuz1_plus_vbuc1 
    lda #SIZEOF_WORD
    clc
    adc squares
    sta squares
    bcc !+
    inc squares+1
  !:
  //SEG430 [248] (byte~) init_squares::$3 ← (byte) init_squares::i#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG431 [249] (byte~) init_squares::$4 ← (byte~) init_squares::$3 + (byte) 1 -- vbuaa=vbuaa_plus_1 
    clc
    adc #1
  //SEG432 [250] (word) init_squares::sqr#1 ← (word) init_squares::sqr#2 + (byte~) init_squares::$4 -- vwuz1=vwuz1_plus_vbuaa 
    clc
    adc sqr
    sta sqr
    bcc !+
    inc sqr+1
  !:
  //SEG433 [251] (byte) init_squares::i#1 ← ++ (byte) init_squares::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG434 [252] if((byte) init_squares::i#1!=(const byte) NUM_SQUARES#3-(byte) 1+(byte) 1) goto init_squares::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #NUM_SQUARES-1+1
    bne b1
  //SEG435 init_squares::@return
  //SEG436 [253] return 
    rts
}
//SEG437 malloc
// Allocates a block of size bytes of memory, returning a pointer to the beginning of the block.
// The content of the newly allocated block of memory is not initialized, remaining with indeterminate values.
// malloc(word zeropage($25) size)
malloc: {
    .label mem = $49
    .label size = $25
  //SEG438 [255] (byte*) malloc::mem#0 ← (byte*) heap_head#12 -- pbuz1=pbuz2 
    lda heap_head
    sta mem
    lda heap_head+1
    sta mem+1
  //SEG439 [256] (byte*) heap_head#1 ← (byte*) heap_head#12 + (word) malloc::size#3 -- pbuz1=pbuz1_plus_vwuz2 
    lda heap_head
    clc
    adc size
    sta heap_head
    lda heap_head+1
    adc size+1
    sta heap_head+1
  //SEG440 malloc::@return
  //SEG441 [257] return 
    rts
}
//SEG442 irqBottom
// Raster Interrupt at the bottom of the screen
irqBottom: {
  //SEG443 entry interrupt(HARDWARE_ALL)
    sta rega+1
    stx regx+1
    sty regy+1
  //SEG444 [259] phi from irqBottom to irqBottom::@1 [phi:irqBottom->irqBottom::@1]
  //SEG445 irqBottom::@1
  //SEG446 [260] call processChars 
  //SEG447 [265] phi from irqBottom::@1 to processChars [phi:irqBottom::@1->processChars]
    jsr processChars
  //SEG448 irqBottom::@2
  //SEG449 [261] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_TOP#0 -- _deref_pbuc1=vbuc2 
    // Trigger IRQ at the top of the screen
    lda #RASTER_IRQ_TOP
    sta RASTER
  //SEG450 [262] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqTop() -- _deref_pptc1=pprc2 
    lda #<irqTop
    sta HARDWARE_IRQ
    lda #>irqTop
    sta HARDWARE_IRQ+1
  //SEG451 [263] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
  //SEG452 irqBottom::@return
  //SEG453 [264] return  - exit interrupt(HARDWARE_ALL)
  rega:
    lda #00
  regx:
    ldx #00
  regy:
    ldy #00
    rti
}
//SEG454 processChars
// Process any chars in the PROCESSING array
processChars: {
    .label _15 = $50
    .label _25 = $4e
    .label processing = $4b
    .label bitmask = $4d
    .label i = $27
    .label xpos = $4e
    .label ypos = $52
    .label numActive = $28
  //SEG455 [266] phi from processChars to processChars::@1 [phi:processChars->processChars::@1]
  //SEG456 [266] phi (byte) processChars::numActive#10 = (byte) 0 [phi:processChars->processChars::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta numActive
  //SEG457 [266] phi (byte) processChars::i#10 = (byte) 0 [phi:processChars->processChars::@1#1] -- vbuz1=vbuc1 
    sta i
  //SEG458 [266] phi from processChars::@2 to processChars::@1 [phi:processChars::@2->processChars::@1]
  //SEG459 [266] phi (byte) processChars::numActive#10 = (byte) processChars::numActive#3 [phi:processChars::@2->processChars::@1#0] -- register_copy 
  //SEG460 [266] phi (byte) processChars::i#10 = (byte) processChars::i#1 [phi:processChars::@2->processChars::@1#1] -- register_copy 
  //SEG461 processChars::@1
  b1:
  //SEG462 [267] (byte) processChars::$67 ← (byte) processChars::i#10 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda i
    asl
  //SEG463 [268] (byte) processChars::$68 ← (byte) processChars::$67 + (byte) processChars::i#10 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc i
  //SEG464 [269] (byte) processChars::$69 ← (byte) processChars::$68 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
  //SEG465 [270] (byte) processChars::$70 ← (byte) processChars::$69 + (byte) processChars::i#10 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc i
  //SEG466 [271] (byte~) processChars::$37 ← (byte) processChars::$70 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
  //SEG467 [272] (struct ProcessingSprite*) processChars::processing#0 ← (const struct ProcessingSprite[NUM_PROCESSING#0]) PROCESSING#0 + (byte~) processChars::$37 -- pssz1=pssc1_plus_vbuaa 
    clc
    adc #<PROCESSING
    sta processing
    lda #>PROCESSING
    adc #0
    sta processing+1
  //SEG468 [273] (byte) processChars::bitmask#0 ← (byte) 1 << *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID) -- vbuz1=vbuc1_rol_pbuz2_derefidx_vbuc2 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_ID
    lda (processing),y
    tax
    lda #1
    cpx #0
    beq !e+
  !:
    asl
    dex
    bne !-
  !e:
    sta bitmask
  //SEG469 [274] if(*((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS)==(const byte) STATUS_FREE) goto processChars::@2 -- pbuz1_derefidx_vbuc1_eq_vbuc2_then_la1 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
    lda (processing),y
    cmp #STATUS_FREE
    bne !b2+
    jmp b2
  !b2:
  //SEG470 processChars::@10
  //SEG471 [275] if(*((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS)!=(const byte) STATUS_NEW) goto processChars::@3 -- pbuz1_derefidx_vbuc1_neq_vbuc2_then_la1 
    lda (processing),y
    cmp #STATUS_NEW
    bne b3
  //SEG472 processChars::@11
  //SEG473 [276] *(*((byte**)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR)) ← (byte) ' ' -- _deref_pptz1_derefidx_vbuc1=vbuc2 
    // Clear the char on the screen
    ldx #' '
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_SCREENPTR
    lda (processing),y
    sta !++1
    iny
    lda (processing),y
    sta !++2
    txa
  !:
    sta $ffff
  //SEG474 [277] *((const byte*) SPRITES_ENABLE#0) ← *((const byte*) SPRITES_ENABLE#0) | (byte) processChars::bitmask#0 -- _deref_pbuc1=_deref_pbuc1_bor_vbuz1 
    // Enable the sprite
    lda SPRITES_ENABLE
    ora bitmask
    sta SPRITES_ENABLE
  //SEG475 [278] *((const byte*) SPRITES_COLS#0 + *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID)) ← *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_COL) -- pbuc1_derefidx_pbuz1_derefidx_vbuc2=pbuz1_derefidx_vbuc3 
    // Set the sprite color
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_COL
    lda (processing),y
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_ID
    pha
    lda (processing),y
    tay
    pla
    sta SPRITES_COLS,y
  //SEG476 [279] *((const byte*) SCREEN#0+(const word) SPRITE_PTRS#0 + *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_ID)) ← *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_PTR) -- pbuc1_derefidx_pbuz1_derefidx_vbuc2=pbuz1_derefidx_vbuc3 
    // Set sprite pointer
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_PTR
    lda (processing),y
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_ID
    pha
    lda (processing),y
    tay
    pla
    sta SCREEN+SPRITE_PTRS,y
  //SEG477 [280] *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS) ← (const byte) STATUS_PROCESSING -- pbuz1_derefidx_vbuc1=vbuc2 
    // Set status
    lda #STATUS_PROCESSING
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
    sta (processing),y
  //SEG478 processChars::@3
  b3:
  //SEG479 [281] (word) processChars::xpos#0 ← *((word*)(struct ProcessingSprite*) processChars::processing#0) >> (byte) 4 -- vwuz1=_deref_pwuz2_ror_4 
    ldy #0
    lda (processing),y
    sta xpos
    iny
    lda (processing),y
    sta xpos+1
    lsr xpos+1
    ror xpos
    lsr xpos+1
    ror xpos
    lsr xpos+1
    ror xpos
    lsr xpos+1
    ror xpos
  //SEG480 [282] (byte~) processChars::$11 ← > (word) processChars::xpos#0 -- vbuaa=_hi_vwuz1 
    lda xpos+1
  //SEG481 [283] if((byte) 0!=(byte~) processChars::$11) goto processChars::@4 -- vbuc1_neq_vbuaa_then_la1 
    // Set sprite position
    cmp #0
    beq !b4+
    jmp b4
  !b4:
  //SEG482 processChars::@8
  //SEG483 [284] (byte~) processChars::$12 ← (byte) $ff ^ (byte) processChars::bitmask#0 -- vbuaa=vbuc1_bxor_vbuz1 
    lda #$ff
    eor bitmask
  //SEG484 [285] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) & (byte~) processChars::$12 -- _deref_pbuc1=_deref_pbuc1_band_vbuaa 
    and SPRITES_XMSB
    sta SPRITES_XMSB
  //SEG485 processChars::@5
  b5:
  //SEG486 [286] (byte~) processChars::$17 ← (byte) processChars::i#10 << (byte) 1 -- vbuxx=vbuz1_rol_1 
    lda i
    asl
    tax
  //SEG487 [287] (byte~) processChars::$14 ← (byte)(word) processChars::xpos#0 -- vbuaa=_byte_vwuz1 
    lda xpos
  //SEG488 [288] *((const byte*) SPRITES_XPOS#0 + (byte~) processChars::$17) ← (byte~) processChars::$14 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SPRITES_XPOS,x
  //SEG489 [289] (word~) processChars::$15 ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) >> (byte) 4 -- vwuz1=pwuz2_derefidx_vbuc1_ror_4 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_Y
    lda (processing),y
    sta _15
    iny
    lda (processing),y
    sta _15+1
    lsr _15+1
    ror _15
    lsr _15+1
    ror _15
    lsr _15+1
    ror _15
    lsr _15+1
    ror _15
  //SEG490 [290] (byte) processChars::ypos#0 ← (byte)(word~) processChars::$15 -- vbuz1=_byte_vwuz2 
    lda _15
    sta ypos
  //SEG491 [291] *((const byte*) SPRITES_YPOS#0 + (byte~) processChars::$17) ← (byte) processChars::ypos#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    sta SPRITES_YPOS,x
  //SEG492 [292] if(*((word*)(struct ProcessingSprite*) processChars::processing#0)<(const word) XPOS_LEFTMOST#0) goto processChars::@6 -- _deref_pwuz1_lt_vwuc1_then_la1 
    // Move sprite
    ldy #1
    lda (processing),y
    cmp #>XPOS_LEFTMOST
    bcs !b6+
    jmp b6
  !b6:
    bne !+
    dey
    lda (processing),y
    cmp #<XPOS_LEFTMOST
    bcs !b6+
    jmp b6
  !b6:
  !:
  //SEG493 processChars::@14
  //SEG494 [293] if(*((word*)(struct ProcessingSprite*) processChars::processing#0)>(const word) XPOS_RIGHTMOST#0) goto processChars::@6 -- _deref_pwuz1_gt_vwuc1_then_la1 
    ldy #1
    lda #>XPOS_RIGHTMOST
    cmp (processing),y
    bcs !b6+
    jmp b6
  !b6:
    bne !+
    dey
    lda #<XPOS_RIGHTMOST
    cmp (processing),y
    bcs !b6+
    jmp b6
  !b6:
  !:
  //SEG495 processChars::@13
  //SEG496 [294] if(*((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y)<(const word) YPOS_TOPMOST#0) goto processChars::@6 -- pwuz1_derefidx_vbuc1_lt_vwuc2_then_la1 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_Y
    iny
    lda (processing),y
    cmp #>YPOS_TOPMOST
    bcs !b6+
    jmp b6
  !b6:
    bne !+
    dey
    lda (processing),y
    cmp #<YPOS_TOPMOST
    bcs !b6+
    jmp b6
  !b6:
  !:
  //SEG497 processChars::@12
  //SEG498 [295] if(*((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y)>(const word) YPOS_BOTTOMMOST#0) goto processChars::@6 -- pwuz1_derefidx_vbuc1_gt_vwuc2_then_la1 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_Y
    iny
    lda #>YPOS_BOTTOMMOST
    cmp (processing),y
    bcs !b6+
    jmp b6
  !b6:
    bne !+
    dey
    lda #<YPOS_BOTTOMMOST
    cmp (processing),y
    bcc b6
  !:
  //SEG499 processChars::@9
  //SEG500 [296] (word~) processChars::$25 ← (word) processChars::xpos#0 >> (byte) 3 -- vwuz1=vwuz1_ror_3 
    lsr _25+1
    ror _25
    lsr _25+1
    ror _25
    lsr _25+1
    ror _25
  //SEG501 [297] (byte~) processChars::$26 ← (byte)(word~) processChars::$25 -- vbuaa=_byte_vwuz1 
    lda _25
  //SEG502 [298] (byte) processChars::xchar#0 ← (byte~) processChars::$26 - (const byte) BORDER_XPOS_LEFT#0/(byte) 8 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #BORDER_XPOS_LEFT/8
  //SEG503 [299] (byte~) processChars::$38 ← (byte) processChars::xchar#0 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
  //SEG504 [300] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) + *((const word[$28]) VXSIN#0 + (byte~) processChars::$38) -- pwuz1_derefidx_vbuc1=pwuz1_derefidx_vbuc1_plus_pwuc2_derefidx_vbuaa 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_VX
    tax
    clc
    lda (processing),y
    adc VXSIN,x
    sta (processing),y
    iny
    lda (processing),y
    adc VXSIN+1,x
    sta (processing),y
  //SEG505 [301] *((word*)(struct ProcessingSprite*) processChars::processing#0) ← *((word*)(struct ProcessingSprite*) processChars::processing#0) + *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VX) -- _deref_pwuz1=_deref_pwuz1_plus_pwuz1_derefidx_vbuc1 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_VX
    sty $ff
    clc
    lda (processing),y
    ldy #0
    adc (processing),y
    sta (processing),y
    ldy $ff
    iny
    lda (processing),y
    ldy #1
    adc (processing),y
    sta (processing),y
  //SEG506 [302] (byte~) processChars::$30 ← (byte) processChars::ypos#0 >> (byte) 3 -- vbuaa=vbuz1_ror_3 
    lda ypos
    lsr
    lsr
    lsr
  //SEG507 [303] (byte) processChars::ychar#0 ← (byte~) processChars::$30 - (const byte) BORDER_YPOS_TOP#0/(byte) 8 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #BORDER_YPOS_TOP/8
  //SEG508 [304] (byte~) processChars::$39 ← (byte) processChars::ychar#0 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
  //SEG509 [305] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) + *((const word[$19]) VYSIN#0 + (byte~) processChars::$39) -- pwuz1_derefidx_vbuc1=pwuz1_derefidx_vbuc1_plus_pwuc2_derefidx_vbuaa 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_VY
    tax
    clc
    lda (processing),y
    adc VYSIN,x
    sta (processing),y
    iny
    lda (processing),y
    adc VYSIN+1,x
    sta (processing),y
  //SEG510 [306] *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) ← *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_Y) + *((word*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_VY) -- pwuz1_derefidx_vbuc1=pwuz1_derefidx_vbuc1_plus_pwuz1_derefidx_vbuc2 
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_VY
    clc
    lda (processing),y
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_Y
    adc (processing),y
    sta (processing),y
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_VY+1
    lda (processing),y
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_Y+1
    adc (processing),y
    sta (processing),y
  //SEG511 processChars::@7
  b7:
  //SEG512 [307] (byte) processChars::numActive#1 ← ++ (byte) processChars::numActive#10 -- vbuz1=_inc_vbuz1 
    inc numActive
  //SEG513 [308] phi from processChars::@1 processChars::@7 to processChars::@2 [phi:processChars::@1/processChars::@7->processChars::@2]
  //SEG514 [308] phi (byte) processChars::numActive#3 = (byte) processChars::numActive#10 [phi:processChars::@1/processChars::@7->processChars::@2#0] -- register_copy 
  //SEG515 processChars::@2
  b2:
  //SEG516 [309] (byte) processChars::i#1 ← ++ (byte) processChars::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG517 [310] if((byte) processChars::i#1!=(const byte) NUM_PROCESSING#0-(byte) 1+(byte) 1) goto processChars::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_PROCESSING-1+1
    cmp i
    beq !b1+
    jmp b1
  !b1:
  //SEG518 processChars::@return
  //SEG519 [311] return 
    rts
  //SEG520 processChars::@6
  b6:
  //SEG521 [312] *((byte*)(struct ProcessingSprite*) processChars::processing#0 + (const byte) OFFSET_STRUCT_PROCESSINGSPRITE_STATUS) ← (const byte) STATUS_FREE -- pbuz1_derefidx_vbuc1=vbuc2 
    // Set status to FREE
    lda #STATUS_FREE
    ldy #OFFSET_STRUCT_PROCESSINGSPRITE_STATUS
    sta (processing),y
  //SEG522 [313] (byte~) processChars::$33 ← (byte) $ff ^ (byte) processChars::bitmask#0 -- vbuaa=vbuc1_bxor_vbuz1 
    lda #$ff
    eor bitmask
  //SEG523 [314] *((const byte*) SPRITES_ENABLE#0) ← *((const byte*) SPRITES_ENABLE#0) & (byte~) processChars::$33 -- _deref_pbuc1=_deref_pbuc1_band_vbuaa 
    // Disable the sprite
    and SPRITES_ENABLE
    sta SPRITES_ENABLE
    jmp b7
  //SEG524 processChars::@4
  b4:
  //SEG525 [315] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) | (byte) processChars::bitmask#0 -- _deref_pbuc1=_deref_pbuc1_bor_vbuz1 
    lda SPRITES_XMSB
    ora bitmask
    sta SPRITES_XMSB
    jmp b5
}
//SEG526 irqTop
// Raster Interrupt at the top of the screen
irqTop: {
  //SEG527 entry interrupt(HARDWARE_ALL)
    sta rega+1
    stx regx+1
    sty regy+1
  //SEG528 irqTop::@1
  //SEG529 [317] *((const byte*) RASTER#0) ← (const byte) RASTER_IRQ_MIDDLE#0 -- _deref_pbuc1=vbuc2 
    // Trigger IRQ at the middle of the screen
    lda #RASTER_IRQ_MIDDLE
    sta RASTER
  //SEG530 [318] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_ALL)(void()) irqBottom() -- _deref_pptc1=pprc2 
    lda #<irqBottom
    sta HARDWARE_IRQ
    lda #>irqBottom
    sta HARDWARE_IRQ+1
  //SEG531 [319] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0 -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
  //SEG532 irqTop::@return
  //SEG533 [320] return  - exit interrupt(HARDWARE_ALL)
  rega:
    lda #00
  regx:
    ldx #00
  regy:
    ldy #00
    rti
}
//SEG534 File Data
  // Values added to VX
VXSIN:
.for(var i=0; i<40; i++) {
      .word -sin(toRadians([i*360]/40))*4
    }

  // Values added to VY
VYSIN:
.for(var i=0; i<25; i++) {
      .word -sin(toRadians([i*360]/25))*4
    }

  // Sprites currently being processed in the interrupt
  PROCESSING: .fill $e*NUM_PROCESSING, 0

