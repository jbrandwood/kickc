Fixing pointer array-indexing *((signed word[]) swords + (byte) main::i)
Fixing pointer array-indexing *((signed word[]) swords + (byte) main::j)
Adding pointer type conversion cast (byte*) PROCPORT_DDR in (byte*) PROCPORT_DDR ← (number) 0
Adding pointer type conversion cast (byte*) PROCPORT in (byte*) PROCPORT ← (number) 1
Adding pointer type conversion cast (byte*) CHARGEN in (byte*) CHARGEN ← (number) $d000
Adding pointer type conversion cast (byte*) SPRITES_XPOS in (byte*) SPRITES_XPOS ← (number) $d000
Adding pointer type conversion cast (byte*) SPRITES_YPOS in (byte*) SPRITES_YPOS ← (number) $d001
Adding pointer type conversion cast (byte*) SPRITES_XMSB in (byte*) SPRITES_XMSB ← (number) $d010
Adding pointer type conversion cast (byte*) RASTER in (byte*) RASTER ← (number) $d012
Adding pointer type conversion cast (byte*) SPRITES_ENABLE in (byte*) SPRITES_ENABLE ← (number) $d015
Adding pointer type conversion cast (byte*) SPRITES_EXPAND_Y in (byte*) SPRITES_EXPAND_Y ← (number) $d017
Adding pointer type conversion cast (byte*) SPRITES_PRIORITY in (byte*) SPRITES_PRIORITY ← (number) $d01b
Adding pointer type conversion cast (byte*) SPRITES_MC in (byte*) SPRITES_MC ← (number) $d01c
Adding pointer type conversion cast (byte*) SPRITES_EXPAND_X in (byte*) SPRITES_EXPAND_X ← (number) $d01d
Adding pointer type conversion cast (byte*) BORDERCOL in (byte*) BORDERCOL ← (number) $d020
Adding pointer type conversion cast (byte*) BGCOL in (byte*) BGCOL ← (number) $d021
Adding pointer type conversion cast (byte*) BGCOL1 in (byte*) BGCOL1 ← (number) $d021
Adding pointer type conversion cast (byte*) BGCOL2 in (byte*) BGCOL2 ← (number) $d022
Adding pointer type conversion cast (byte*) BGCOL3 in (byte*) BGCOL3 ← (number) $d023
Adding pointer type conversion cast (byte*) BGCOL4 in (byte*) BGCOL4 ← (number) $d024
Adding pointer type conversion cast (byte*) SPRITES_MC1 in (byte*) SPRITES_MC1 ← (number) $d025
Adding pointer type conversion cast (byte*) SPRITES_MC2 in (byte*) SPRITES_MC2 ← (number) $d026
Adding pointer type conversion cast (byte*) SPRITES_COLS in (byte*) SPRITES_COLS ← (number) $d027
Adding pointer type conversion cast (byte*) VIC_CONTROL in (byte*) VIC_CONTROL ← (number) $d011
Adding pointer type conversion cast (byte*) D011 in (byte*) D011 ← (number) $d011
Adding pointer type conversion cast (byte*) VIC_CONTROL2 in (byte*) VIC_CONTROL2 ← (number) $d016
Adding pointer type conversion cast (byte*) D016 in (byte*) D016 ← (number) $d016
Adding pointer type conversion cast (byte*) D018 in (byte*) D018 ← (number) $d018
Adding pointer type conversion cast (byte*) VIC_MEMORY in (byte*) VIC_MEMORY ← (number) $d018
Adding pointer type conversion cast (byte*) LIGHTPEN_X in (byte*) LIGHTPEN_X ← (number) $d013
Adding pointer type conversion cast (byte*) LIGHTPEN_Y in (byte*) LIGHTPEN_Y ← (number) $d014
Adding pointer type conversion cast (byte*) IRQ_STATUS in (byte*) IRQ_STATUS ← (number) $d019
Adding pointer type conversion cast (byte*) IRQ_ENABLE in (byte*) IRQ_ENABLE ← (number) $d01a
Adding pointer type conversion cast (byte*) COLS in (byte*) COLS ← (number) $d800
Adding pointer type conversion cast (byte*) CIA1_PORT_A in (byte*) CIA1_PORT_A ← (number) $dc00
Adding pointer type conversion cast (byte*) CIA1_PORT_B in (byte*) CIA1_PORT_B ← (number) $dc01
Adding pointer type conversion cast (byte*) CIA1_PORT_A_DDR in (byte*) CIA1_PORT_A_DDR ← (number) $dc02
Adding pointer type conversion cast (byte*) CIA1_PORT_B_DDR in (byte*) CIA1_PORT_B_DDR ← (number) $dc03
Adding pointer type conversion cast (byte*) CIA1_INTERRUPT in (byte*) CIA1_INTERRUPT ← (number) $dc0d
Adding pointer type conversion cast (byte*) CIA2_PORT_A in (byte*) CIA2_PORT_A ← (number) $dd00
Adding pointer type conversion cast (byte*) CIA2_PORT_B in (byte*) CIA2_PORT_B ← (number) $dd01
Adding pointer type conversion cast (byte*) CIA2_PORT_A_DDR in (byte*) CIA2_PORT_A_DDR ← (number) $dd02
Adding pointer type conversion cast (byte*) CIA2_PORT_B_DDR in (byte*) CIA2_PORT_B_DDR ← (number) $dd03
Adding pointer type conversion cast (byte*) CIA2_INTERRUPT in (byte*) CIA2_INTERRUPT ← (number) $dd0d
Adding pointer type conversion cast (void()**) KERNEL_IRQ in (void()**) KERNEL_IRQ ← (number) $314
Adding pointer type conversion cast (void()**) HARDWARE_IRQ in (void()**) HARDWARE_IRQ ← (number) $fffe
Adding pointer type conversion cast (byte*) print_screen in (byte*) print_screen ← (number) $400
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) @3
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) print_str::@4
Culled Empty Block (label) print_str::@3
Culled Empty Block (label) print_str::@5
Culled Empty Block (label) print_str::@6
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @12
Culled Empty Block (label) @13
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) @17
Culled Empty Block (label) @18
Culled Empty Block (label) @19
Culled Empty Block (label) @20
Culled Empty Block (label) @21
Culled Empty Block (label) @22
Culled Empty Block (label) main::@8
Culled Empty Block (label) main::@10
Culled Empty Block (label) main::@12
Culled Empty Block (label) main::@11
Culled Empty Block (label) main::@13
Culled Empty Block (label) main::@14
Culled Empty Block (label) compare::@6
Culled Empty Block (label) compare::@7
Culled Empty Block (label) compare::@21
Culled Empty Block (label) compare::@8
Culled Empty Block (label) compare::@23
Culled Empty Block (label) compare::@9
Culled Empty Block (label) compare::@25
Culled Empty Block (label) compare::@10
Culled Empty Block (label) compare::@27
Culled Empty Block (label) compare::@29

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@4
@4: scope:[]  from @begin
  (byte*) print_screen#0 ← ((byte*)) (number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@16
print_str: scope:[print_str]  from compare::@39
  (byte*) print_char_cursor#73 ← phi( compare::@39/(byte*) print_char_cursor#22 )
  (byte*) print_str::str#4 ← phi( compare::@39/(byte*) print_str::str#1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (byte*) print_char_cursor#58 ← phi( print_str/(byte*) print_char_cursor#73 print_str::@2/(byte*) print_char_cursor#1 )
  (byte*) print_str::str#2 ← phi( print_str/(byte*) print_str::str#4 print_str::@2/(byte*) print_str::str#0 )
  (bool~) print_str::$0 ← *((byte*) print_str::str#2) != (byte) '@'
  if((bool~) print_str::$0) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#30 ← phi( print_str::@1/(byte*) print_char_cursor#58 )
  (byte*) print_str::str#3 ← phi( print_str::@1/(byte*) print_str::str#2 )
  *((byte*) print_char_cursor#30) ← *((byte*) print_str::str#3)
  (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#30
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#31 ← phi( print_str::@1/(byte*) print_char_cursor#58 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#31
  return 
  to:@return
print_ln: scope:[print_ln]  from main::@5
  (byte*) print_char_cursor#59 ← phi( main::@5/(byte*) print_char_cursor#68 )
  (byte*) print_line_cursor#17 ← phi( main::@5/(byte*) print_line_cursor#19 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#32 ← phi( print_ln/(byte*) print_char_cursor#59 print_ln::@1/(byte*) print_char_cursor#32 )
  (byte*) print_line_cursor#9 ← phi( print_ln/(byte*) print_line_cursor#17 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#9 + (number) $28
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#32
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#10 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#3 ← (byte*) print_line_cursor#10
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#33 ← phi( print_ln::@2/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#11 ← phi( print_ln::@2/(byte*) print_line_cursor#10 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#11
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#33
  return 
  to:@return
print_sword: scope:[print_sword]  from compare::@12 compare::@13
  (byte*) print_char_cursor#74 ← phi( compare::@12/(byte*) print_char_cursor#70 compare::@13/(byte*) print_char_cursor#71 )
  (signed word) print_sword::w#3 ← phi( compare::@12/(signed word) print_sword::w#1 compare::@13/(signed word) print_sword::w#2 )
  (bool~) print_sword::$0 ← (signed word) print_sword::w#3 < (number) 0
  (bool~) print_sword::$1 ← ! (bool~) print_sword::$0
  if((bool~) print_sword::$1) goto print_sword::@1
  to:print_sword::@2
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@4
  (byte*) print_char_cursor#60 ← phi( print_sword/(byte*) print_char_cursor#74 print_sword::@4/(byte*) print_char_cursor#6 )
  (signed word) print_sword::w#4 ← phi( print_sword/(signed word) print_sword::w#3 print_sword::@4/(signed word) print_sword::w#0 )
  (word~) print_sword::$2 ← ((word)) (signed word) print_sword::w#4
  (word) print_word::w#0 ← (word~) print_sword::$2
  call print_word 
  to:print_sword::@3
print_sword::@3: scope:[print_sword]  from print_sword::@1
  (byte*) print_char_cursor#34 ← phi( print_sword::@1/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#34
  to:print_sword::@return
print_sword::@2: scope:[print_sword]  from print_sword
  (signed word) print_sword::w#6 ← phi( print_sword/(signed word) print_sword::w#3 )
  (byte*) print_char_cursor#61 ← phi( print_sword/(byte*) print_char_cursor#74 )
  (byte) print_char::ch#0 ← (byte) '-'
  call print_char 
  to:print_sword::@4
print_sword::@4: scope:[print_sword]  from print_sword::@2
  (signed word) print_sword::w#5 ← phi( print_sword::@2/(signed word) print_sword::w#6 )
  (byte*) print_char_cursor#35 ← phi( print_sword::@2/(byte*) print_char_cursor#15 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#35
  (signed word~) print_sword::$5 ← - (signed word) print_sword::w#5
  (signed word) print_sword::w#0 ← (signed word~) print_sword::$5
  to:print_sword::@1
print_sword::@return: scope:[print_sword]  from print_sword::@3
  (byte*) print_char_cursor#36 ← phi( print_sword::@3/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#36
  return 
  to:@return
print_word: scope:[print_word]  from print_sword::@1
  (byte*) print_char_cursor#62 ← phi( print_sword::@1/(byte*) print_char_cursor#60 )
  (word) print_word::w#1 ← phi( print_sword::@1/(word) print_word::w#0 )
  (byte~) print_word::$0 ← > (word) print_word::w#1
  (byte) print_byte::b#0 ← (byte~) print_word::$0
  call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  (word) print_word::w#2 ← phi( print_word/(word) print_word::w#1 )
  (byte*) print_char_cursor#37 ← phi( print_word/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#37
  (byte~) print_word::$2 ← < (word) print_word::w#2
  (byte) print_byte::b#1 ← (byte~) print_word::$2
  call print_byte 
  to:print_word::@2
print_word::@2: scope:[print_word]  from print_word::@1
  (byte*) print_char_cursor#38 ← phi( print_word::@1/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#38
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@2
  (byte*) print_char_cursor#39 ← phi( print_word::@2/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#39
  return 
  to:@return
@16: scope:[]  from @4
  (byte*) print_screen#8 ← phi( @4/(byte*) print_screen#0 )
  (byte*) print_char_cursor#90 ← phi( @4/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#28 ← phi( @4/(byte*) print_line_cursor#0 )
  (byte[]) print_hextab#0 ← (const string) $0
  to:@23
print_byte: scope:[print_byte]  from print_word print_word::@1
  (byte*) print_char_cursor#63 ← phi( print_word/(byte*) print_char_cursor#62 print_word::@1/(byte*) print_char_cursor#8 )
  (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (number) 4
  (byte) print_char::ch#1 ← *((byte[]) print_hextab#0 + (byte~) print_byte::$0)
  call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#3 ← phi( print_byte/(byte) print_byte::b#2 )
  (byte*) print_char_cursor#40 ← phi( print_byte/(byte*) print_char_cursor#15 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#40
  (number~) print_byte::$2 ← (byte) print_byte::b#3 & (number) $f
  (byte) print_char::ch#2 ← *((byte[]) print_hextab#0 + (number~) print_byte::$2)
  call print_char 
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) print_char_cursor#41 ← phi( print_byte::@1/(byte*) print_char_cursor#15 )
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#41
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) print_char_cursor#42 ← phi( print_byte::@2/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#42
  return 
  to:@return
print_char: scope:[print_char]  from compare::@31 compare::@32 compare::@42 print_byte print_byte::@1 print_sword::@2
  (byte*) print_char_cursor#43 ← phi( compare::@31/(byte*) print_char_cursor#64 compare::@32/(byte*) print_char_cursor#65 compare::@42/(byte*) print_char_cursor#25 print_byte/(byte*) print_char_cursor#63 print_byte::@1/(byte*) print_char_cursor#11 print_sword::@2/(byte*) print_char_cursor#61 )
  (byte) print_char::ch#6 ← phi( compare::@31/(byte) print_char::ch#3 compare::@32/(byte) print_char::ch#5 compare::@42/(byte) print_char::ch#4 print_byte/(byte) print_char::ch#1 print_byte::@1/(byte) print_char::ch#2 print_sword::@2/(byte) print_char::ch#0 )
  *((byte*) print_char_cursor#43) ← (byte) print_char::ch#6
  (byte*) print_char_cursor#14 ← ++ (byte*) print_char_cursor#43
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#44 ← phi( print_char/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#44
  return 
  to:@return
print_cls: scope:[print_cls]  from main
  (byte*) print_screen#1 ← phi( main/(byte*) print_screen#4 )
  (byte*) print_cls::sc#0 ← (byte*) print_screen#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (number) $3e8
  (bool~) print_cls::$1 ← (byte*) print_cls::sc#1 != (byte*~) print_cls::$0
  if((bool~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) print_screen#3 ← phi( print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_line_cursor#3 ← (byte*) print_screen#3
  (byte*) print_char_cursor#16 ← (byte*) print_line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  (byte*) print_char_cursor#45 ← phi( print_cls::@2/(byte*) print_char_cursor#16 )
  (byte*) print_line_cursor#12 ← phi( print_cls::@2/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#12
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#45
  return 
  to:@return
@23: scope:[]  from @16
  (byte*) print_screen#7 ← phi( @16/(byte*) print_screen#8 )
  (byte*) print_char_cursor#82 ← phi( @16/(byte*) print_char_cursor#90 )
  (byte*) print_line_cursor#27 ← phi( @16/(byte*) print_line_cursor#28 )
  (signed word[]) swords#0 ← { (number) -$6fed, (number) $12, (number) $7fed }
  to:@24
main: scope:[main]  from @25
  (byte*) print_char_cursor#66 ← phi( @25/(byte*) print_char_cursor#72 )
  (byte*) print_line_cursor#18 ← phi( @25/(byte*) print_line_cursor#21 )
  (byte*) print_screen#4 ← phi( @25/(byte*) print_screen#5 )
  call print_cls 
  to:main::@15
main::@15: scope:[main]  from main
  (byte*) print_char_cursor#46 ← phi( main/(byte*) print_char_cursor#17 )
  (byte*) print_line_cursor#13 ← phi( main/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#13
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#46
  (byte) main::s#0 ← (number) 0
  (byte) main::i#0 ← (number) 0
  to:main::@1
main::@1: scope:[main]  from main::@15 main::@7
  (byte*) print_line_cursor#31 ← phi( main::@15/(byte*) print_line_cursor#5 main::@7/(byte*) print_line_cursor#23 )
  (byte) main::s#7 ← phi( main::@15/(byte) main::s#0 main::@7/(byte) main::s#10 )
  (byte*) print_char_cursor#80 ← phi( main::@15/(byte*) print_char_cursor#18 main::@7/(byte*) print_char_cursor#77 )
  (byte) main::i#2 ← phi( main::@15/(byte) main::i#0 main::@7/(byte) main::i#1 )
  (byte~) main::$8 ← (byte) main::i#2 * (const byte) SIZEOF_SIGNED_WORD
  (signed word) main::w1#0 ← *((signed word[]) swords#0 + (byte~) main::$8)
  (byte) main::j#0 ← (number) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@6
  (byte) main::i#10 ← phi( main::@1/(byte) main::i#2 main::@6/(byte) main::i#4 )
  (byte*) print_line_cursor#29 ← phi( main::@1/(byte*) print_line_cursor#31 main::@6/(byte*) print_line_cursor#26 )
  (byte) main::s#5 ← phi( main::@1/(byte) main::s#7 main::@6/(byte) main::s#8 )
  (byte*) print_char_cursor#75 ← phi( main::@1/(byte*) print_char_cursor#80 main::@6/(byte*) print_char_cursor#81 )
  (signed word) main::w1#2 ← phi( main::@1/(signed word) main::w1#0 main::@6/(signed word) main::w1#4 )
  (byte) main::j#2 ← phi( main::@1/(byte) main::j#0 main::@6/(byte) main::j#1 )
  (byte~) main::$9 ← (byte) main::j#2 * (const byte) SIZEOF_SIGNED_WORD
  (signed word) main::w2#0 ← *((signed word[]) swords#0 + (byte~) main::$9)
  (byte) main::op#0 ← (number) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  (byte) main::i#8 ← phi( main::@2/(byte) main::i#10 main::@4/(byte) main::i#5 )
  (byte*) print_line_cursor#25 ← phi( main::@2/(byte*) print_line_cursor#29 main::@4/(byte*) print_line_cursor#30 )
  (byte) main::j#7 ← phi( main::@2/(byte) main::j#2 main::@4/(byte) main::j#4 )
  (byte) main::s#4 ← phi( main::@2/(byte) main::s#5 main::@4/(byte) main::s#6 )
  (byte*) print_char_cursor#67 ← phi( main::@2/(byte*) print_char_cursor#75 main::@4/(byte*) print_char_cursor#76 )
  (byte) main::op#2 ← phi( main::@2/(byte) main::op#0 main::@4/(byte) main::op#1 )
  (signed word) main::w2#1 ← phi( main::@2/(signed word) main::w2#0 main::@4/(signed word) main::w2#2 )
  (signed word) main::w1#1 ← phi( main::@2/(signed word) main::w1#2 main::@4/(signed word) main::w1#3 )
  (signed word) compare::w1#0 ← (signed word) main::w1#1
  (signed word) compare::w2#0 ← (signed word) main::w2#1
  (byte) compare::op#0 ← (byte) main::op#2
  call compare 
  to:main::@16
main::@16: scope:[main]  from main::@3
  (byte) main::i#6 ← phi( main::@3/(byte) main::i#8 )
  (byte*) print_line_cursor#22 ← phi( main::@3/(byte*) print_line_cursor#25 )
  (byte) main::j#5 ← phi( main::@3/(byte) main::j#7 )
  (signed word) main::w2#3 ← phi( main::@3/(signed word) main::w2#1 )
  (signed word) main::w1#5 ← phi( main::@3/(signed word) main::w1#1 )
  (byte) main::op#4 ← phi( main::@3/(byte) main::op#2 )
  (byte) main::s#3 ← phi( main::@3/(byte) main::s#4 )
  (byte*) print_char_cursor#47 ← phi( main::@3/(byte*) print_char_cursor#28 )
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#47
  (byte) main::s#1 ← ++ (byte) main::s#3
  (bool~) main::$2 ← (byte) main::s#1 == (number) 3
  (bool~) main::$3 ← ! (bool~) main::$2
  if((bool~) main::$3) goto main::@4
  to:main::@5
main::@4: scope:[main]  from main::@16 main::@17
  (byte*) print_line_cursor#30 ← phi( main::@16/(byte*) print_line_cursor#22 main::@17/(byte*) print_line_cursor#6 )
  (byte) main::i#5 ← phi( main::@16/(byte) main::i#6 main::@17/(byte) main::i#7 )
  (byte) main::s#6 ← phi( main::@16/(byte) main::s#1 main::@17/(byte) main::s#9 )
  (byte*) print_char_cursor#76 ← phi( main::@16/(byte*) print_char_cursor#19 main::@17/(byte*) print_char_cursor#20 )
  (byte) main::j#4 ← phi( main::@16/(byte) main::j#5 main::@17/(byte) main::j#6 )
  (signed word) main::w2#2 ← phi( main::@16/(signed word) main::w2#3 main::@17/(signed word) main::w2#4 )
  (signed word) main::w1#3 ← phi( main::@16/(signed word) main::w1#5 main::@17/(signed word) main::w1#6 )
  (byte) main::op#3 ← phi( main::@16/(byte) main::op#4 main::@17/(byte) main::op#5 )
  (byte) main::op#1 ← (byte) main::op#3 + rangenext(0,5)
  (bool~) main::$5 ← (byte) main::op#1 != rangelast(0,5)
  if((bool~) main::$5) goto main::@3
  to:main::@6
main::@5: scope:[main]  from main::@16
  (byte) main::i#9 ← phi( main::@16/(byte) main::i#6 )
  (byte) main::j#8 ← phi( main::@16/(byte) main::j#5 )
  (signed word) main::w2#5 ← phi( main::@16/(signed word) main::w2#3 )
  (signed word) main::w1#7 ← phi( main::@16/(signed word) main::w1#5 )
  (byte) main::op#6 ← phi( main::@16/(byte) main::op#4 )
  (byte*) print_char_cursor#68 ← phi( main::@16/(byte*) print_char_cursor#19 )
  (byte*) print_line_cursor#19 ← phi( main::@16/(byte*) print_line_cursor#22 )
  (byte) main::s#2 ← (number) 0
  call print_ln 
  to:main::@17
main::@17: scope:[main]  from main::@5
  (byte) main::i#7 ← phi( main::@5/(byte) main::i#9 )
  (byte) main::s#9 ← phi( main::@5/(byte) main::s#2 )
  (byte) main::j#6 ← phi( main::@5/(byte) main::j#8 )
  (signed word) main::w2#4 ← phi( main::@5/(signed word) main::w2#5 )
  (signed word) main::w1#6 ← phi( main::@5/(signed word) main::w1#7 )
  (byte) main::op#5 ← phi( main::@5/(byte) main::op#6 )
  (byte*) print_char_cursor#48 ← phi( main::@5/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#14 ← phi( main::@5/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#14
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#48
  to:main::@4
main::@6: scope:[main]  from main::@4
  (byte*) print_line_cursor#26 ← phi( main::@4/(byte*) print_line_cursor#30 )
  (byte) main::s#8 ← phi( main::@4/(byte) main::s#6 )
  (byte*) print_char_cursor#81 ← phi( main::@4/(byte*) print_char_cursor#76 )
  (signed word) main::w1#4 ← phi( main::@4/(signed word) main::w1#3 )
  (byte) main::i#4 ← phi( main::@4/(byte) main::i#5 )
  (byte) main::j#3 ← phi( main::@4/(byte) main::j#4 )
  (byte) main::j#1 ← (byte) main::j#3 + rangenext(0,2)
  (bool~) main::$6 ← (byte) main::j#1 != rangelast(0,2)
  if((bool~) main::$6) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte) main::s#10 ← phi( main::@6/(byte) main::s#8 )
  (byte*) print_char_cursor#77 ← phi( main::@6/(byte*) print_char_cursor#81 )
  (byte*) print_line_cursor#23 ← phi( main::@6/(byte*) print_line_cursor#26 )
  (byte) main::i#3 ← phi( main::@6/(byte) main::i#4 )
  (byte) main::i#1 ← (byte) main::i#3 + rangenext(0,2)
  (bool~) main::$7 ← (byte) main::i#1 != rangelast(0,2)
  if((bool~) main::$7) goto main::@1
  to:main::@9
main::@9: scope:[main]  from main::@7 main::@9
  (byte*) print_char_cursor#69 ← phi( main::@7/(byte*) print_char_cursor#77 main::@9/(byte*) print_char_cursor#69 )
  (byte*) print_line_cursor#20 ← phi( main::@7/(byte*) print_line_cursor#23 main::@9/(byte*) print_line_cursor#20 )
  if(true) goto main::@9
  to:main::@return
main::@return: scope:[main]  from main::@9
  (byte*) print_char_cursor#49 ← phi( main::@9/(byte*) print_char_cursor#69 )
  (byte*) print_line_cursor#15 ← phi( main::@9/(byte*) print_line_cursor#20 )
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#15
  (byte*) print_char_cursor#21 ← (byte*) print_char_cursor#49
  return 
  to:@return
@24: scope:[]  from @23
  (byte*) print_screen#6 ← phi( @23/(byte*) print_screen#7 )
  (byte*) print_char_cursor#79 ← phi( @23/(byte*) print_char_cursor#82 )
  (byte*) print_line_cursor#24 ← phi( @23/(byte*) print_line_cursor#27 )
  (byte) LT#0 ← (number) 0
  (byte) LE#0 ← (number) 1
  (byte) GT#0 ← (number) 2
  (byte) GE#0 ← (number) 3
  (byte) EQ#0 ← (number) 4
  (byte) NE#0 ← (number) 5
  (byte) FF#0 ← (number) $57
  (byte) TT#0 ← (number) $51
  to:@25
compare: scope:[compare]  from main::@3
  (byte*) print_char_cursor#104 ← phi( main::@3/(byte*) print_char_cursor#67 )
  (signed word) compare::w2#9 ← phi( main::@3/(signed word) compare::w2#0 )
  (signed word) compare::w1#9 ← phi( main::@3/(signed word) compare::w1#0 )
  (byte) compare::op#1 ← phi( main::@3/(byte) compare::op#0 )
  (byte) compare::r#0 ← (byte) FF#0
  (byte*) compare::ops#0 ← (byte*) 0
  (bool~) compare::$0 ← (byte) compare::op#1 == (byte) LT#0
  if((bool~) compare::$0) goto compare::@1
  to:compare::@14
compare::@1: scope:[compare]  from compare
  (byte) compare::r#30 ← phi( compare/(byte) compare::r#0 )
  (byte*) print_char_cursor#102 ← phi( compare/(byte*) print_char_cursor#104 )
  (signed word) compare::w2#1 ← phi( compare/(signed word) compare::w2#9 )
  (signed word) compare::w1#1 ← phi( compare/(signed word) compare::w1#9 )
  (bool~) compare::$27 ← (signed word) compare::w1#1 < (signed word) compare::w2#1
  (bool~) compare::$28 ← ! (bool~) compare::$27
  if((bool~) compare::$28) goto compare::@38
  to:compare::@30
compare::@14: scope:[compare]  from compare
  (byte) compare::r#31 ← phi( compare/(byte) compare::r#0 )
  (byte*) compare::ops#16 ← phi( compare/(byte*) compare::ops#0 )
  (byte*) print_char_cursor#105 ← phi( compare/(byte*) print_char_cursor#104 )
  (signed word) compare::w2#10 ← phi( compare/(signed word) compare::w2#9 )
  (signed word) compare::w1#10 ← phi( compare/(signed word) compare::w1#9 )
  (byte) compare::op#2 ← phi( compare/(byte) compare::op#1 )
  (bool~) compare::$1 ← (byte) compare::op#2 == (byte) LE#0
  if((bool~) compare::$1) goto compare::@2
  to:compare::@15
compare::@2: scope:[compare]  from compare::@14
  (byte) compare::r#29 ← phi( compare::@14/(byte) compare::r#31 )
  (byte*) print_char_cursor#100 ← phi( compare::@14/(byte*) print_char_cursor#105 )
  (signed word) compare::w2#2 ← phi( compare::@14/(signed word) compare::w2#10 )
  (signed word) compare::w1#2 ← phi( compare::@14/(signed word) compare::w1#10 )
  (bool~) compare::$25 ← (signed word) compare::w1#2 <= (signed word) compare::w2#2
  (bool~) compare::$26 ← ! (bool~) compare::$25
  if((bool~) compare::$26) goto compare::@37
  to:compare::@28
compare::@15: scope:[compare]  from compare::@14
  (byte) compare::r#32 ← phi( compare::@14/(byte) compare::r#31 )
  (byte*) compare::ops#15 ← phi( compare::@14/(byte*) compare::ops#16 )
  (byte*) print_char_cursor#106 ← phi( compare::@14/(byte*) print_char_cursor#105 )
  (signed word) compare::w2#11 ← phi( compare::@14/(signed word) compare::w2#10 )
  (signed word) compare::w1#11 ← phi( compare::@14/(signed word) compare::w1#10 )
  (byte) compare::op#3 ← phi( compare::@14/(byte) compare::op#2 )
  (bool~) compare::$2 ← (byte) compare::op#3 == (byte) GT#0
  if((bool~) compare::$2) goto compare::@3
  to:compare::@16
compare::@3: scope:[compare]  from compare::@15
  (byte) compare::r#28 ← phi( compare::@15/(byte) compare::r#32 )
  (byte*) print_char_cursor#99 ← phi( compare::@15/(byte*) print_char_cursor#106 )
  (signed word) compare::w2#3 ← phi( compare::@15/(signed word) compare::w2#11 )
  (signed word) compare::w1#3 ← phi( compare::@15/(signed word) compare::w1#11 )
  (bool~) compare::$23 ← (signed word) compare::w1#3 > (signed word) compare::w2#3
  (bool~) compare::$24 ← ! (bool~) compare::$23
  if((bool~) compare::$24) goto compare::@36
  to:compare::@26
compare::@16: scope:[compare]  from compare::@15
  (byte) compare::r#33 ← phi( compare::@15/(byte) compare::r#32 )
  (byte*) compare::ops#14 ← phi( compare::@15/(byte*) compare::ops#15 )
  (byte*) print_char_cursor#107 ← phi( compare::@15/(byte*) print_char_cursor#106 )
  (signed word) compare::w2#12 ← phi( compare::@15/(signed word) compare::w2#11 )
  (signed word) compare::w1#12 ← phi( compare::@15/(signed word) compare::w1#11 )
  (byte) compare::op#4 ← phi( compare::@15/(byte) compare::op#3 )
  (bool~) compare::$3 ← (byte) compare::op#4 == (byte) GE#0
  if((bool~) compare::$3) goto compare::@4
  to:compare::@17
compare::@4: scope:[compare]  from compare::@16
  (byte) compare::r#27 ← phi( compare::@16/(byte) compare::r#33 )
  (byte*) print_char_cursor#97 ← phi( compare::@16/(byte*) print_char_cursor#107 )
  (signed word) compare::w2#4 ← phi( compare::@16/(signed word) compare::w2#12 )
  (signed word) compare::w1#4 ← phi( compare::@16/(signed word) compare::w1#12 )
  (bool~) compare::$21 ← (signed word) compare::w1#4 >= (signed word) compare::w2#4
  (bool~) compare::$22 ← ! (bool~) compare::$21
  if((bool~) compare::$22) goto compare::@35
  to:compare::@24
compare::@17: scope:[compare]  from compare::@16
  (byte) compare::r#24 ← phi( compare::@16/(byte) compare::r#33 )
  (byte*) compare::ops#13 ← phi( compare::@16/(byte*) compare::ops#14 )
  (byte*) print_char_cursor#91 ← phi( compare::@16/(byte*) print_char_cursor#107 )
  (signed word) compare::w2#13 ← phi( compare::@16/(signed word) compare::w2#12 )
  (signed word) compare::w1#13 ← phi( compare::@16/(signed word) compare::w1#12 )
  (byte) compare::op#5 ← phi( compare::@16/(byte) compare::op#4 )
  (bool~) compare::$4 ← (byte) compare::op#5 == (byte) EQ#0
  if((bool~) compare::$4) goto compare::@5
  to:compare::@18
compare::@5: scope:[compare]  from compare::@17
  (byte) compare::r#26 ← phi( compare::@17/(byte) compare::r#24 )
  (byte*) print_char_cursor#95 ← phi( compare::@17/(byte*) print_char_cursor#91 )
  (signed word) compare::w2#5 ← phi( compare::@17/(signed word) compare::w2#13 )
  (signed word) compare::w1#5 ← phi( compare::@17/(signed word) compare::w1#13 )
  (bool~) compare::$19 ← (signed word) compare::w1#5 == (signed word) compare::w2#5
  (bool~) compare::$20 ← ! (bool~) compare::$19
  if((bool~) compare::$20) goto compare::@34
  to:compare::@22
compare::@18: scope:[compare]  from compare::@17
  (byte) compare::r#16 ← phi( compare::@17/(byte) compare::r#24 )
  (byte*) compare::ops#11 ← phi( compare::@17/(byte*) compare::ops#13 )
  (byte*) print_char_cursor#83 ← phi( compare::@17/(byte*) print_char_cursor#91 )
  (signed word) compare::w2#14 ← phi( compare::@17/(signed word) compare::w2#13 )
  (signed word) compare::w1#14 ← phi( compare::@17/(signed word) compare::w1#13 )
  (byte) compare::op#6 ← phi( compare::@17/(byte) compare::op#5 )
  (bool~) compare::$5 ← (byte) compare::op#6 == (byte) NE#0
  (bool~) compare::$6 ← ! (bool~) compare::$5
  if((bool~) compare::$6) goto compare::@11
  to:compare::@19
compare::@19: scope:[compare]  from compare::@18
  (byte) compare::r#25 ← phi( compare::@18/(byte) compare::r#16 )
  (byte*) print_char_cursor#92 ← phi( compare::@18/(byte*) print_char_cursor#83 )
  (signed word) compare::w2#6 ← phi( compare::@18/(signed word) compare::w2#14 )
  (signed word) compare::w1#6 ← phi( compare::@18/(signed word) compare::w1#14 )
  (bool~) compare::$17 ← (signed word) compare::w1#6 != (signed word) compare::w2#6
  (bool~) compare::$18 ← ! (bool~) compare::$17
  if((bool~) compare::$18) goto compare::@33
  to:compare::@20
compare::@33: scope:[compare]  from compare::@19 compare::@20
  (byte) compare::r#17 ← phi( compare::@19/(byte) compare::r#25 compare::@20/(byte) compare::r#1 )
  (signed word) compare::w2#21 ← phi( compare::@19/(signed word) compare::w2#6 compare::@20/(signed word) compare::w2#28 )
  (byte*) print_char_cursor#84 ← phi( compare::@19/(byte*) print_char_cursor#92 compare::@20/(byte*) print_char_cursor#93 )
  (signed word) compare::w1#15 ← phi( compare::@19/(signed word) compare::w1#6 compare::@20/(signed word) compare::w1#22 )
  (byte*) compare::ops#1 ← (const string) compare::$29
  to:compare::@11
compare::@20: scope:[compare]  from compare::@19
  (signed word) compare::w2#28 ← phi( compare::@19/(signed word) compare::w2#6 )
  (byte*) print_char_cursor#93 ← phi( compare::@19/(byte*) print_char_cursor#92 )
  (signed word) compare::w1#22 ← phi( compare::@19/(signed word) compare::w1#6 )
  (byte) compare::r#1 ← (byte) TT#0
  to:compare::@33
compare::@34: scope:[compare]  from compare::@22 compare::@5
  (byte) compare::r#18 ← phi( compare::@22/(byte) compare::r#2 compare::@5/(byte) compare::r#26 )
  (signed word) compare::w2#22 ← phi( compare::@22/(signed word) compare::w2#29 compare::@5/(signed word) compare::w2#5 )
  (byte*) print_char_cursor#85 ← phi( compare::@22/(byte*) print_char_cursor#94 compare::@5/(byte*) print_char_cursor#95 )
  (signed word) compare::w1#16 ← phi( compare::@22/(signed word) compare::w1#23 compare::@5/(signed word) compare::w1#5 )
  (byte*) compare::ops#2 ← (const string) compare::$30
  to:compare::@11
compare::@22: scope:[compare]  from compare::@5
  (signed word) compare::w2#29 ← phi( compare::@5/(signed word) compare::w2#5 )
  (byte*) print_char_cursor#94 ← phi( compare::@5/(byte*) print_char_cursor#95 )
  (signed word) compare::w1#23 ← phi( compare::@5/(signed word) compare::w1#5 )
  (byte) compare::r#2 ← (byte) TT#0
  to:compare::@34
compare::@35: scope:[compare]  from compare::@24 compare::@4
  (byte) compare::r#19 ← phi( compare::@24/(byte) compare::r#3 compare::@4/(byte) compare::r#27 )
  (signed word) compare::w2#23 ← phi( compare::@24/(signed word) compare::w2#30 compare::@4/(signed word) compare::w2#4 )
  (byte*) print_char_cursor#86 ← phi( compare::@24/(byte*) print_char_cursor#96 compare::@4/(byte*) print_char_cursor#97 )
  (signed word) compare::w1#17 ← phi( compare::@24/(signed word) compare::w1#24 compare::@4/(signed word) compare::w1#4 )
  (byte*) compare::ops#3 ← (const string) compare::$31
  to:compare::@11
compare::@24: scope:[compare]  from compare::@4
  (signed word) compare::w2#30 ← phi( compare::@4/(signed word) compare::w2#4 )
  (byte*) print_char_cursor#96 ← phi( compare::@4/(byte*) print_char_cursor#97 )
  (signed word) compare::w1#24 ← phi( compare::@4/(signed word) compare::w1#4 )
  (byte) compare::r#3 ← (byte) TT#0
  to:compare::@35
compare::@36: scope:[compare]  from compare::@26 compare::@3
  (byte) compare::r#20 ← phi( compare::@26/(byte) compare::r#4 compare::@3/(byte) compare::r#28 )
  (signed word) compare::w2#24 ← phi( compare::@26/(signed word) compare::w2#31 compare::@3/(signed word) compare::w2#3 )
  (byte*) print_char_cursor#87 ← phi( compare::@26/(byte*) print_char_cursor#98 compare::@3/(byte*) print_char_cursor#99 )
  (signed word) compare::w1#18 ← phi( compare::@26/(signed word) compare::w1#25 compare::@3/(signed word) compare::w1#3 )
  (byte*) compare::ops#4 ← (const string) compare::$32
  to:compare::@11
compare::@26: scope:[compare]  from compare::@3
  (signed word) compare::w2#31 ← phi( compare::@3/(signed word) compare::w2#3 )
  (byte*) print_char_cursor#98 ← phi( compare::@3/(byte*) print_char_cursor#99 )
  (signed word) compare::w1#25 ← phi( compare::@3/(signed word) compare::w1#3 )
  (byte) compare::r#4 ← (byte) TT#0
  to:compare::@36
compare::@37: scope:[compare]  from compare::@2 compare::@28
  (byte) compare::r#21 ← phi( compare::@2/(byte) compare::r#29 compare::@28/(byte) compare::r#5 )
  (signed word) compare::w2#25 ← phi( compare::@2/(signed word) compare::w2#2 compare::@28/(signed word) compare::w2#32 )
  (byte*) print_char_cursor#88 ← phi( compare::@2/(byte*) print_char_cursor#100 compare::@28/(byte*) print_char_cursor#101 )
  (signed word) compare::w1#19 ← phi( compare::@2/(signed word) compare::w1#2 compare::@28/(signed word) compare::w1#26 )
  (byte*) compare::ops#5 ← (const string) compare::$33
  to:compare::@11
compare::@28: scope:[compare]  from compare::@2
  (signed word) compare::w2#32 ← phi( compare::@2/(signed word) compare::w2#2 )
  (byte*) print_char_cursor#101 ← phi( compare::@2/(byte*) print_char_cursor#100 )
  (signed word) compare::w1#26 ← phi( compare::@2/(signed word) compare::w1#2 )
  (byte) compare::r#5 ← (byte) TT#0
  to:compare::@37
compare::@11: scope:[compare]  from compare::@18 compare::@33 compare::@34 compare::@35 compare::@36 compare::@37 compare::@38
  (byte) compare::r#14 ← phi( compare::@18/(byte) compare::r#16 compare::@33/(byte) compare::r#17 compare::@34/(byte) compare::r#18 compare::@35/(byte) compare::r#19 compare::@36/(byte) compare::r#20 compare::@37/(byte) compare::r#21 compare::@38/(byte) compare::r#22 )
  (signed word) compare::w2#19 ← phi( compare::@18/(signed word) compare::w2#14 compare::@33/(signed word) compare::w2#21 compare::@34/(signed word) compare::w2#22 compare::@35/(signed word) compare::w2#23 compare::@36/(signed word) compare::w2#24 compare::@37/(signed word) compare::w2#25 compare::@38/(signed word) compare::w2#26 )
  (byte*) compare::ops#9 ← phi( compare::@18/(byte*) compare::ops#11 compare::@33/(byte*) compare::ops#1 compare::@34/(byte*) compare::ops#2 compare::@35/(byte*) compare::ops#3 compare::@36/(byte*) compare::ops#4 compare::@37/(byte*) compare::ops#5 compare::@38/(byte*) compare::ops#6 )
  (byte*) print_char_cursor#78 ← phi( compare::@18/(byte*) print_char_cursor#83 compare::@33/(byte*) print_char_cursor#84 compare::@34/(byte*) print_char_cursor#85 compare::@35/(byte*) print_char_cursor#86 compare::@36/(byte*) print_char_cursor#87 compare::@37/(byte*) print_char_cursor#88 compare::@38/(byte*) print_char_cursor#89 )
  (signed word) compare::w1#7 ← phi( compare::@18/(signed word) compare::w1#14 compare::@33/(signed word) compare::w1#15 compare::@34/(signed word) compare::w1#16 compare::@35/(signed word) compare::w1#17 compare::@36/(signed word) compare::w1#18 compare::@37/(signed word) compare::w1#19 compare::@38/(signed word) compare::w1#20 )
  (bool~) compare::$7 ← (signed word) compare::w1#7 >= (number) 0
  (bool~) compare::$8 ← ! (bool~) compare::$7
  if((bool~) compare::$8) goto compare::@12
  to:compare::@31
compare::@38: scope:[compare]  from compare::@1 compare::@30
  (byte) compare::r#22 ← phi( compare::@1/(byte) compare::r#30 compare::@30/(byte) compare::r#6 )
  (signed word) compare::w2#26 ← phi( compare::@1/(signed word) compare::w2#1 compare::@30/(signed word) compare::w2#33 )
  (byte*) print_char_cursor#89 ← phi( compare::@1/(byte*) print_char_cursor#102 compare::@30/(byte*) print_char_cursor#103 )
  (signed word) compare::w1#20 ← phi( compare::@1/(signed word) compare::w1#1 compare::@30/(signed word) compare::w1#27 )
  (byte*) compare::ops#6 ← (const string) compare::$34
  to:compare::@11
compare::@30: scope:[compare]  from compare::@1
  (signed word) compare::w2#33 ← phi( compare::@1/(signed word) compare::w2#1 )
  (byte*) print_char_cursor#103 ← phi( compare::@1/(byte*) print_char_cursor#102 )
  (signed word) compare::w1#27 ← phi( compare::@1/(signed word) compare::w1#1 )
  (byte) compare::r#6 ← (byte) TT#0
  to:compare::@38
compare::@12: scope:[compare]  from compare::@11 compare::@41
  (byte) compare::r#13 ← phi( compare::@11/(byte) compare::r#14 compare::@41/(byte) compare::r#15 )
  (signed word) compare::w2#17 ← phi( compare::@11/(signed word) compare::w2#19 compare::@41/(signed word) compare::w2#20 )
  (byte*) compare::ops#8 ← phi( compare::@11/(byte*) compare::ops#9 compare::@41/(byte*) compare::ops#10 )
  (byte*) print_char_cursor#70 ← phi( compare::@11/(byte*) print_char_cursor#78 compare::@41/(byte*) print_char_cursor#24 )
  (signed word) compare::w1#8 ← phi( compare::@11/(signed word) compare::w1#7 compare::@41/(signed word) compare::w1#21 )
  (signed word) print_sword::w#1 ← (signed word) compare::w1#8
  call print_sword 
  to:compare::@39
compare::@39: scope:[compare]  from compare::@12
  (byte) compare::r#11 ← phi( compare::@12/(byte) compare::r#13 )
  (signed word) compare::w2#15 ← phi( compare::@12/(signed word) compare::w2#17 )
  (byte*) compare::ops#7 ← phi( compare::@12/(byte*) compare::ops#8 )
  (byte*) print_char_cursor#50 ← phi( compare::@12/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#22 ← (byte*) print_char_cursor#50
  (byte*) print_str::str#1 ← (byte*) compare::ops#7
  call print_str 
  to:compare::@40
compare::@40: scope:[compare]  from compare::@39
  (byte) compare::r#9 ← phi( compare::@39/(byte) compare::r#11 )
  (signed word) compare::w2#7 ← phi( compare::@39/(signed word) compare::w2#15 )
  (byte*) print_char_cursor#51 ← phi( compare::@39/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#23 ← (byte*) print_char_cursor#51
  (bool~) compare::$12 ← (signed word) compare::w2#7 >= (number) 0
  (bool~) compare::$13 ← ! (bool~) compare::$12
  if((bool~) compare::$13) goto compare::@13
  to:compare::@32
compare::@31: scope:[compare]  from compare::@11
  (byte) compare::r#23 ← phi( compare::@11/(byte) compare::r#14 )
  (signed word) compare::w2#27 ← phi( compare::@11/(signed word) compare::w2#19 )
  (byte*) compare::ops#12 ← phi( compare::@11/(byte*) compare::ops#9 )
  (signed word) compare::w1#28 ← phi( compare::@11/(signed word) compare::w1#7 )
  (byte*) print_char_cursor#64 ← phi( compare::@11/(byte*) print_char_cursor#78 )
  (byte) print_char::ch#3 ← (byte) ' '
  call print_char 
  to:compare::@41
compare::@41: scope:[compare]  from compare::@31
  (byte) compare::r#15 ← phi( compare::@31/(byte) compare::r#23 )
  (signed word) compare::w2#20 ← phi( compare::@31/(signed word) compare::w2#27 )
  (byte*) compare::ops#10 ← phi( compare::@31/(byte*) compare::ops#12 )
  (signed word) compare::w1#21 ← phi( compare::@31/(signed word) compare::w1#28 )
  (byte*) print_char_cursor#52 ← phi( compare::@31/(byte*) print_char_cursor#15 )
  (byte*) print_char_cursor#24 ← (byte*) print_char_cursor#52
  to:compare::@12
compare::@13: scope:[compare]  from compare::@40 compare::@44
  (byte) compare::r#8 ← phi( compare::@40/(byte) compare::r#9 compare::@44/(byte) compare::r#10 )
  (byte*) print_char_cursor#71 ← phi( compare::@40/(byte*) print_char_cursor#23 compare::@44/(byte*) print_char_cursor#27 )
  (signed word) compare::w2#8 ← phi( compare::@40/(signed word) compare::w2#7 compare::@44/(signed word) compare::w2#16 )
  (signed word) print_sword::w#2 ← (signed word) compare::w2#8
  call print_sword 
  to:compare::@42
compare::@42: scope:[compare]  from compare::@13
  (byte) compare::r#7 ← phi( compare::@13/(byte) compare::r#8 )
  (byte*) print_char_cursor#53 ← phi( compare::@13/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#25 ← (byte*) print_char_cursor#53
  (byte) print_char::ch#4 ← (byte) compare::r#7
  call print_char 
  to:compare::@43
compare::@43: scope:[compare]  from compare::@42
  (byte*) print_char_cursor#54 ← phi( compare::@42/(byte*) print_char_cursor#15 )
  (byte*) print_char_cursor#26 ← (byte*) print_char_cursor#54
  to:compare::@return
compare::@32: scope:[compare]  from compare::@40
  (byte) compare::r#12 ← phi( compare::@40/(byte) compare::r#9 )
  (signed word) compare::w2#18 ← phi( compare::@40/(signed word) compare::w2#7 )
  (byte*) print_char_cursor#65 ← phi( compare::@40/(byte*) print_char_cursor#23 )
  (byte) print_char::ch#5 ← (byte) ' '
  call print_char 
  to:compare::@44
compare::@44: scope:[compare]  from compare::@32
  (byte) compare::r#10 ← phi( compare::@32/(byte) compare::r#12 )
  (signed word) compare::w2#16 ← phi( compare::@32/(signed word) compare::w2#18 )
  (byte*) print_char_cursor#55 ← phi( compare::@32/(byte*) print_char_cursor#15 )
  (byte*) print_char_cursor#27 ← (byte*) print_char_cursor#55
  to:compare::@13
compare::@return: scope:[compare]  from compare::@43
  (byte*) print_char_cursor#56 ← phi( compare::@43/(byte*) print_char_cursor#26 )
  (byte*) print_char_cursor#28 ← (byte*) print_char_cursor#56
  return 
  to:@return
@25: scope:[]  from @24
  (byte*) print_screen#5 ← phi( @24/(byte*) print_screen#6 )
  (byte*) print_char_cursor#72 ← phi( @24/(byte*) print_char_cursor#79 )
  (byte*) print_line_cursor#21 ← phi( @24/(byte*) print_line_cursor#24 )
  call main 
  to:@26
@26: scope:[]  from @25
  (byte*) print_char_cursor#57 ← phi( @25/(byte*) print_char_cursor#21 )
  (byte*) print_line_cursor#16 ← phi( @25/(byte*) print_line_cursor#7 )
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#16
  (byte*) print_char_cursor#29 ← (byte*) print_char_cursor#57
  to:@end
@end: scope:[]  from @26

SYMBOL TABLE SSA
(const string) $0 = (string) "0123456789abcdef"
(label) @16
(label) @23
(label) @24
(label) @25
(label) @26
(label) @4
(label) @begin
(label) @end
(byte) EQ
(byte) EQ#0
(byte) FF
(byte) FF#0
(byte) GE
(byte) GE#0
(byte) GT
(byte) GT#0
(byte) LE
(byte) LE#0
(byte) LT
(byte) LT#0
(byte) NE
(byte) NE#0
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(byte) TT
(byte) TT#0
(void()) compare((signed word) compare::w1 , (signed word) compare::w2 , (byte) compare::op)
(bool~) compare::$0
(bool~) compare::$1
(bool~) compare::$12
(bool~) compare::$13
(bool~) compare::$17
(bool~) compare::$18
(bool~) compare::$19
(bool~) compare::$2
(bool~) compare::$20
(bool~) compare::$21
(bool~) compare::$22
(bool~) compare::$23
(bool~) compare::$24
(bool~) compare::$25
(bool~) compare::$26
(bool~) compare::$27
(bool~) compare::$28
(const string) compare::$29 = (string) "!=@"
(bool~) compare::$3
(const string) compare::$30 = (string) "==@"
(const string) compare::$31 = (string) ">=@"
(const string) compare::$32 = (string) "> @"
(const string) compare::$33 = (string) "<=@"
(const string) compare::$34 = (string) "< @"
(bool~) compare::$4
(bool~) compare::$5
(bool~) compare::$6
(bool~) compare::$7
(bool~) compare::$8
(label) compare::@1
(label) compare::@11
(label) compare::@12
(label) compare::@13
(label) compare::@14
(label) compare::@15
(label) compare::@16
(label) compare::@17
(label) compare::@18
(label) compare::@19
(label) compare::@2
(label) compare::@20
(label) compare::@22
(label) compare::@24
(label) compare::@26
(label) compare::@28
(label) compare::@3
(label) compare::@30
(label) compare::@31
(label) compare::@32
(label) compare::@33
(label) compare::@34
(label) compare::@35
(label) compare::@36
(label) compare::@37
(label) compare::@38
(label) compare::@39
(label) compare::@4
(label) compare::@40
(label) compare::@41
(label) compare::@42
(label) compare::@43
(label) compare::@44
(label) compare::@5
(label) compare::@return
(byte) compare::op
(byte) compare::op#0
(byte) compare::op#1
(byte) compare::op#2
(byte) compare::op#3
(byte) compare::op#4
(byte) compare::op#5
(byte) compare::op#6
(byte*) compare::ops
(byte*) compare::ops#0
(byte*) compare::ops#1
(byte*) compare::ops#10
(byte*) compare::ops#11
(byte*) compare::ops#12
(byte*) compare::ops#13
(byte*) compare::ops#14
(byte*) compare::ops#15
(byte*) compare::ops#16
(byte*) compare::ops#2
(byte*) compare::ops#3
(byte*) compare::ops#4
(byte*) compare::ops#5
(byte*) compare::ops#6
(byte*) compare::ops#7
(byte*) compare::ops#8
(byte*) compare::ops#9
(byte) compare::r
(byte) compare::r#0
(byte) compare::r#1
(byte) compare::r#10
(byte) compare::r#11
(byte) compare::r#12
(byte) compare::r#13
(byte) compare::r#14
(byte) compare::r#15
(byte) compare::r#16
(byte) compare::r#17
(byte) compare::r#18
(byte) compare::r#19
(byte) compare::r#2
(byte) compare::r#20
(byte) compare::r#21
(byte) compare::r#22
(byte) compare::r#23
(byte) compare::r#24
(byte) compare::r#25
(byte) compare::r#26
(byte) compare::r#27
(byte) compare::r#28
(byte) compare::r#29
(byte) compare::r#3
(byte) compare::r#30
(byte) compare::r#31
(byte) compare::r#32
(byte) compare::r#33
(byte) compare::r#4
(byte) compare::r#5
(byte) compare::r#6
(byte) compare::r#7
(byte) compare::r#8
(byte) compare::r#9
(signed word) compare::w1
(signed word) compare::w1#0
(signed word) compare::w1#1
(signed word) compare::w1#10
(signed word) compare::w1#11
(signed word) compare::w1#12
(signed word) compare::w1#13
(signed word) compare::w1#14
(signed word) compare::w1#15
(signed word) compare::w1#16
(signed word) compare::w1#17
(signed word) compare::w1#18
(signed word) compare::w1#19
(signed word) compare::w1#2
(signed word) compare::w1#20
(signed word) compare::w1#21
(signed word) compare::w1#22
(signed word) compare::w1#23
(signed word) compare::w1#24
(signed word) compare::w1#25
(signed word) compare::w1#26
(signed word) compare::w1#27
(signed word) compare::w1#28
(signed word) compare::w1#3
(signed word) compare::w1#4
(signed word) compare::w1#5
(signed word) compare::w1#6
(signed word) compare::w1#7
(signed word) compare::w1#8
(signed word) compare::w1#9
(signed word) compare::w2
(signed word) compare::w2#0
(signed word) compare::w2#1
(signed word) compare::w2#10
(signed word) compare::w2#11
(signed word) compare::w2#12
(signed word) compare::w2#13
(signed word) compare::w2#14
(signed word) compare::w2#15
(signed word) compare::w2#16
(signed word) compare::w2#17
(signed word) compare::w2#18
(signed word) compare::w2#19
(signed word) compare::w2#2
(signed word) compare::w2#20
(signed word) compare::w2#21
(signed word) compare::w2#22
(signed word) compare::w2#23
(signed word) compare::w2#24
(signed word) compare::w2#25
(signed word) compare::w2#26
(signed word) compare::w2#27
(signed word) compare::w2#28
(signed word) compare::w2#29
(signed word) compare::w2#3
(signed word) compare::w2#30
(signed word) compare::w2#31
(signed word) compare::w2#32
(signed word) compare::w2#33
(signed word) compare::w2#4
(signed word) compare::w2#5
(signed word) compare::w2#6
(signed word) compare::w2#7
(signed word) compare::w2#8
(signed word) compare::w2#9
(void()) main()
(bool~) main::$2
(bool~) main::$3
(bool~) main::$5
(bool~) main::$6
(bool~) main::$7
(byte~) main::$8
(byte~) main::$9
(label) main::@1
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@9
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#10
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6
(byte) main::i#7
(byte) main::i#8
(byte) main::i#9
(byte) main::j
(byte) main::j#0
(byte) main::j#1
(byte) main::j#2
(byte) main::j#3
(byte) main::j#4
(byte) main::j#5
(byte) main::j#6
(byte) main::j#7
(byte) main::j#8
(byte) main::op
(byte) main::op#0
(byte) main::op#1
(byte) main::op#2
(byte) main::op#3
(byte) main::op#4
(byte) main::op#5
(byte) main::op#6
(byte) main::s
(byte) main::s#0
(byte) main::s#1
(byte) main::s#10
(byte) main::s#2
(byte) main::s#3
(byte) main::s#4
(byte) main::s#5
(byte) main::s#6
(byte) main::s#7
(byte) main::s#8
(byte) main::s#9
(signed word) main::w1
(signed word) main::w1#0
(signed word) main::w1#1
(signed word) main::w1#2
(signed word) main::w1#3
(signed word) main::w1#4
(signed word) main::w1#5
(signed word) main::w1#6
(signed word) main::w1#7
(signed word) main::w2
(signed word) main::w2#0
(signed word) main::w2#1
(signed word) main::w2#2
(signed word) main::w2#3
(signed word) main::w2#4
(signed word) main::w2#5
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(number~) print_byte::$2
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte) print_char::ch#5
(byte) print_char::ch#6
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#100
(byte*) print_char_cursor#101
(byte*) print_char_cursor#102
(byte*) print_char_cursor#103
(byte*) print_char_cursor#104
(byte*) print_char_cursor#105
(byte*) print_char_cursor#106
(byte*) print_char_cursor#107
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#61
(byte*) print_char_cursor#62
(byte*) print_char_cursor#63
(byte*) print_char_cursor#64
(byte*) print_char_cursor#65
(byte*) print_char_cursor#66
(byte*) print_char_cursor#67
(byte*) print_char_cursor#68
(byte*) print_char_cursor#69
(byte*) print_char_cursor#7
(byte*) print_char_cursor#70
(byte*) print_char_cursor#71
(byte*) print_char_cursor#72
(byte*) print_char_cursor#73
(byte*) print_char_cursor#74
(byte*) print_char_cursor#75
(byte*) print_char_cursor#76
(byte*) print_char_cursor#77
(byte*) print_char_cursor#78
(byte*) print_char_cursor#79
(byte*) print_char_cursor#8
(byte*) print_char_cursor#80
(byte*) print_char_cursor#81
(byte*) print_char_cursor#82
(byte*) print_char_cursor#83
(byte*) print_char_cursor#84
(byte*) print_char_cursor#85
(byte*) print_char_cursor#86
(byte*) print_char_cursor#87
(byte*) print_char_cursor#88
(byte*) print_char_cursor#89
(byte*) print_char_cursor#9
(byte*) print_char_cursor#90
(byte*) print_char_cursor#91
(byte*) print_char_cursor#92
(byte*) print_char_cursor#93
(byte*) print_char_cursor#94
(byte*) print_char_cursor#95
(byte*) print_char_cursor#96
(byte*) print_char_cursor#97
(byte*) print_char_cursor#98
(byte*) print_char_cursor#99
(void()) print_cls()
(byte*~) print_cls::$0
(bool~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(byte[]) print_hextab
(byte[]) print_hextab#0
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#4
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(byte*) print_screen#7
(byte*) print_screen#8
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(void()) print_sword((signed word) print_sword::w)
(bool~) print_sword::$0
(bool~) print_sword::$1
(word~) print_sword::$2
(signed word~) print_sword::$5
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@4
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0
(signed word) print_sword::w#1
(signed word) print_sword::w#2
(signed word) print_sword::w#3
(signed word) print_sword::w#4
(signed word) print_sword::w#5
(signed word) print_sword::w#6
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(byte~) print_word::$2
(label) print_word::@1
(label) print_word::@2
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0
(word) print_word::w#1
(word) print_word::w#2
(signed word[]) swords
(signed word[]) swords#0

Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#9 + (number) $28
Adding number conversion cast (snumber) 0 in (bool~) print_sword::$0 ← (signed word) print_sword::w#3 < (number) 0
Adding number conversion cast (unumber) 4 in (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_byte::$2 ← (byte) print_byte::b#3 & (number) $f
Adding number conversion cast (unumber) print_byte::$2 in (number~) print_byte::$2 ← (byte) print_byte::b#3 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (number) $3e8
Adding number conversion cast (unumber) 0 in (byte) main::s#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) main::i#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) main::j#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) main::op#0 ← (number) 0
Adding number conversion cast (unumber) 3 in (bool~) main::$2 ← (byte) main::s#1 == (number) 3
Adding number conversion cast (unumber) 0 in (byte) main::s#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) LT#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) LE#0 ← (number) 1
Adding number conversion cast (unumber) 2 in (byte) GT#0 ← (number) 2
Adding number conversion cast (unumber) 3 in (byte) GE#0 ← (number) 3
Adding number conversion cast (unumber) 4 in (byte) EQ#0 ← (number) 4
Adding number conversion cast (unumber) 5 in (byte) NE#0 ← (number) 5
Adding number conversion cast (unumber) $57 in (byte) FF#0 ← (number) $57
Adding number conversion cast (unumber) $51 in (byte) TT#0 ← (number) $51
Adding number conversion cast (snumber) 0 in (bool~) compare::$7 ← (signed word) compare::w1#7 >= (number) 0
Adding number conversion cast (snumber) 0 in (bool~) compare::$12 ← (signed word) compare::w2#7 >= (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (signed word) to elements in (signed word[]) swords#0 ← { (signed word)(number) -$6fed, (signed word)(number) $12, (signed word)(number) $7fed }
Successful SSA optimization PassNAddArrayNumberTypeConversions
Inlining cast (byte*) print_screen#0 ← (byte*)(number) $400
Inlining cast (word~) print_sword::$2 ← (word)(signed word) print_sword::w#4
Inlining cast (byte) main::s#0 ← (unumber)(number) 0
Inlining cast (byte) main::i#0 ← (unumber)(number) 0
Inlining cast (byte) main::j#0 ← (unumber)(number) 0
Inlining cast (byte) main::op#0 ← (unumber)(number) 0
Inlining cast (byte) main::s#2 ← (unumber)(number) 0
Inlining cast (byte) LT#0 ← (unumber)(number) 0
Inlining cast (byte) LE#0 ← (unumber)(number) 1
Inlining cast (byte) GT#0 ← (unumber)(number) 2
Inlining cast (byte) GE#0 ← (unumber)(number) 3
Inlining cast (byte) EQ#0 ← (unumber)(number) 4
Inlining cast (byte) NE#0 ← (unumber)(number) 5
Inlining cast (byte) FF#0 ← (unumber)(number) $57
Inlining cast (byte) TT#0 ← (unumber)(number) $51
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast -$6fed
Simplifying constant integer cast $12
Simplifying constant integer cast $7fed
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast $57
Simplifying constant integer cast $51
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) $57
Finalized unsigned number type (byte) $51
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_byte::$2 ← (byte) print_byte::b#3 & (byte) $f
Inversing boolean not [28] (bool~) print_sword::$1 ← (signed word) print_sword::w#3 >= (signed byte) 0 from [27] (bool~) print_sword::$0 ← (signed word) print_sword::w#3 < (signed byte) 0
Inversing boolean not [123] (bool~) main::$3 ← (byte) main::s#1 != (byte) 3 from [122] (bool~) main::$2 ← (byte) main::s#1 == (byte) 3
Inversing boolean not [165] (bool~) compare::$28 ← (signed word) compare::w1#1 >= (signed word) compare::w2#1 from [164] (bool~) compare::$27 ← (signed word) compare::w1#1 < (signed word) compare::w2#1
Inversing boolean not [172] (bool~) compare::$26 ← (signed word) compare::w1#2 > (signed word) compare::w2#2 from [171] (bool~) compare::$25 ← (signed word) compare::w1#2 <= (signed word) compare::w2#2
Inversing boolean not [179] (bool~) compare::$24 ← (signed word) compare::w1#3 <= (signed word) compare::w2#3 from [178] (bool~) compare::$23 ← (signed word) compare::w1#3 > (signed word) compare::w2#3
Inversing boolean not [186] (bool~) compare::$22 ← (signed word) compare::w1#4 < (signed word) compare::w2#4 from [185] (bool~) compare::$21 ← (signed word) compare::w1#4 >= (signed word) compare::w2#4
Inversing boolean not [193] (bool~) compare::$20 ← (signed word) compare::w1#5 != (signed word) compare::w2#5 from [192] (bool~) compare::$19 ← (signed word) compare::w1#5 == (signed word) compare::w2#5
Inversing boolean not [197] (bool~) compare::$6 ← (byte) compare::op#6 != (byte) NE#0 from [196] (bool~) compare::$5 ← (byte) compare::op#6 == (byte) NE#0
Inversing boolean not [201] (bool~) compare::$18 ← (signed word) compare::w1#6 == (signed word) compare::w2#6 from [200] (bool~) compare::$17 ← (signed word) compare::w1#6 != (signed word) compare::w2#6
Inversing boolean not [225] (bool~) compare::$8 ← (signed word) compare::w1#7 < (signed byte) 0 from [224] (bool~) compare::$7 ← (signed word) compare::w1#7 >= (signed byte) 0
Inversing boolean not [241] (bool~) compare::$13 ← (signed word) compare::w2#7 < (signed byte) 0 from [240] (bool~) compare::$12 ← (signed word) compare::w2#7 >= (signed byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte*) print_line_cursor#0 = (byte*) print_screen#0 (byte*) print_char_cursor#0 (byte*) print_line_cursor#28 (byte*) print_char_cursor#90 (byte*) print_screen#8 (byte*) print_line_cursor#27 (byte*) print_char_cursor#82 (byte*) print_screen#7 (byte*) print_line_cursor#24 (byte*) print_char_cursor#79 (byte*) print_screen#6 (byte*) print_line_cursor#21 (byte*) print_char_cursor#72 (byte*) print_screen#5 
Alias (byte*) print_str::str#2 = (byte*) print_str::str#3 
Alias (byte*) print_char_cursor#2 = (byte*) print_char_cursor#30 (byte*) print_char_cursor#58 (byte*) print_char_cursor#31 
Alias (byte*) print_line_cursor#1 = (byte*~) print_ln::$0 (byte*) print_line_cursor#10 (byte*) print_char_cursor#3 (byte*) print_line_cursor#11 (byte*) print_char_cursor#33 (byte*) print_line_cursor#2 (byte*) print_char_cursor#4 
Alias (word) print_word::w#0 = (word~) print_sword::$2 
Alias (byte*) print_char_cursor#34 = (byte*) print_char_cursor#5 (byte*) print_char_cursor#36 (byte*) print_char_cursor#7 
Alias (byte*) print_char_cursor#61 = (byte*) print_char_cursor#74 
Alias (signed word) print_sword::w#3 = (signed word) print_sword::w#6 (signed word) print_sword::w#5 
Alias (byte*) print_char_cursor#35 = (byte*) print_char_cursor#6 
Alias (signed word) print_sword::w#0 = (signed word~) print_sword::$5 
Alias (byte) print_byte::b#0 = (byte~) print_word::$0 
Alias (word) print_word::w#1 = (word) print_word::w#2 
Alias (byte*) print_char_cursor#37 = (byte*) print_char_cursor#8 
Alias (byte) print_byte::b#1 = (byte~) print_word::$2 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#9 (byte*) print_char_cursor#38 (byte*) print_char_cursor#39 
Alias (byte) print_byte::b#2 = (byte) print_byte::b#3 
Alias (byte*) print_char_cursor#11 = (byte*) print_char_cursor#40 
Alias (byte*) print_char_cursor#12 = (byte*) print_char_cursor#41 (byte*) print_char_cursor#42 (byte*) print_char_cursor#13 
Alias (byte*) print_char_cursor#14 = (byte*) print_char_cursor#44 (byte*) print_char_cursor#15 
Alias (byte*) print_line_cursor#12 = (byte*) print_screen#3 (byte*) print_screen#2 (byte*) print_line_cursor#3 (byte*) print_char_cursor#16 (byte*) print_char_cursor#45 (byte*) print_line_cursor#4 (byte*) print_char_cursor#17 
Alias (byte*) print_line_cursor#13 = (byte*) print_line_cursor#5 
Alias (byte*) print_char_cursor#18 = (byte*) print_char_cursor#46 
Alias (byte) main::s#3 = (byte) main::s#4 
Alias (byte) main::op#2 = (byte) main::op#4 (byte) main::op#6 (byte) main::op#5 
Alias (signed word) main::w1#1 = (signed word) main::w1#5 (signed word) main::w1#7 (signed word) main::w1#6 
Alias (signed word) main::w2#1 = (signed word) main::w2#3 (signed word) main::w2#5 (signed word) main::w2#4 
Alias (byte) main::j#5 = (byte) main::j#7 (byte) main::j#8 (byte) main::j#6 
Alias (byte*) print_line_cursor#19 = (byte*) print_line_cursor#22 (byte*) print_line_cursor#25 
Alias (byte) main::i#6 = (byte) main::i#8 (byte) main::i#9 (byte) main::i#7 
Alias (byte*) print_char_cursor#19 = (byte*) print_char_cursor#47 (byte*) print_char_cursor#68 
Alias (byte) main::s#2 = (byte) main::s#9 
Alias (byte*) print_line_cursor#14 = (byte*) print_line_cursor#6 
Alias (byte*) print_char_cursor#20 = (byte*) print_char_cursor#48 
Alias (byte) main::j#3 = (byte) main::j#4 
Alias (byte) main::i#3 = (byte) main::i#4 (byte) main::i#5 
Alias (signed word) main::w1#3 = (signed word) main::w1#4 
Alias (byte*) print_char_cursor#76 = (byte*) print_char_cursor#81 (byte*) print_char_cursor#77 
Alias (byte) main::s#10 = (byte) main::s#8 (byte) main::s#6 
Alias (byte*) print_line_cursor#23 = (byte*) print_line_cursor#26 (byte*) print_line_cursor#30 
Alias (byte*) print_line_cursor#15 = (byte*) print_line_cursor#20 (byte*) print_line_cursor#7 
Alias (byte*) print_char_cursor#21 = (byte*) print_char_cursor#49 (byte*) print_char_cursor#69 
Alias (signed word) compare::w1#1 = (signed word) compare::w1#9 (signed word) compare::w1#10 (signed word) compare::w1#2 (signed word) compare::w1#11 (signed word) compare::w1#3 (signed word) compare::w1#12 (signed word) compare::w1#4 (signed word) compare::w1#13 (signed word) compare::w1#5 (signed word) compare::w1#14 (signed word) compare::w1#6 (signed word) compare::w1#22 (signed word) compare::w1#23 (signed word) compare::w1#24 (signed word) compare::w1#25 (signed word) compare::w1#26 (signed word) compare::w1#27 
Alias (signed word) compare::w2#1 = (signed word) compare::w2#9 (signed word) compare::w2#10 (signed word) compare::w2#2 (signed word) compare::w2#11 (signed word) compare::w2#3 (signed word) compare::w2#12 (signed word) compare::w2#4 (signed word) compare::w2#13 (signed word) compare::w2#5 (signed word) compare::w2#14 (signed word) compare::w2#6 (signed word) compare::w2#28 (signed word) compare::w2#29 (signed word) compare::w2#30 (signed word) compare::w2#31 (signed word) compare::w2#32 (signed word) compare::w2#33 
Alias (byte*) print_char_cursor#100 = (byte*) print_char_cursor#102 (byte*) print_char_cursor#104 (byte*) print_char_cursor#105 (byte*) print_char_cursor#106 (byte*) print_char_cursor#99 (byte*) print_char_cursor#107 (byte*) print_char_cursor#97 (byte*) print_char_cursor#91 (byte*) print_char_cursor#95 (byte*) print_char_cursor#83 (byte*) print_char_cursor#92 (byte*) print_char_cursor#93 (byte*) print_char_cursor#94 (byte*) print_char_cursor#96 (byte*) print_char_cursor#98 (byte*) print_char_cursor#101 (byte*) print_char_cursor#103 
Alias (byte) compare::r#0 = (byte) compare::r#30 (byte) compare::r#31 (byte) compare::r#29 (byte) compare::r#32 (byte) compare::r#28 (byte) compare::r#33 (byte) compare::r#27 (byte) compare::r#24 (byte) compare::r#26 (byte) compare::r#16 (byte) compare::r#25 
Alias (byte) compare::op#1 = (byte) compare::op#2 (byte) compare::op#3 (byte) compare::op#4 (byte) compare::op#5 (byte) compare::op#6 
Alias (byte*) compare::ops#0 = (byte*) compare::ops#16 (byte*) compare::ops#15 (byte*) compare::ops#14 (byte*) compare::ops#13 (byte*) compare::ops#11 
Alias (byte*) compare::ops#7 = (byte*) compare::ops#8 
Alias (signed word) compare::w2#15 = (signed word) compare::w2#17 (signed word) compare::w2#7 (signed word) compare::w2#18 (signed word) compare::w2#16 
Alias (byte) compare::r#10 = (byte) compare::r#11 (byte) compare::r#13 (byte) compare::r#9 (byte) compare::r#12 
Alias (byte*) print_char_cursor#22 = (byte*) print_char_cursor#50 
Alias (byte*) print_char_cursor#23 = (byte*) print_char_cursor#51 (byte*) print_char_cursor#65 
Alias (byte*) print_char_cursor#64 = (byte*) print_char_cursor#78 
Alias (signed word) compare::w1#21 = (signed word) compare::w1#28 (signed word) compare::w1#7 
Alias (byte*) compare::ops#10 = (byte*) compare::ops#12 (byte*) compare::ops#9 
Alias (signed word) compare::w2#19 = (signed word) compare::w2#27 (signed word) compare::w2#20 
Alias (byte) compare::r#14 = (byte) compare::r#23 (byte) compare::r#15 
Alias (byte*) print_char_cursor#24 = (byte*) print_char_cursor#52 
Alias (byte) compare::r#7 = (byte) compare::r#8 
Alias (byte*) print_char_cursor#25 = (byte*) print_char_cursor#53 
Alias (byte*) print_char_cursor#26 = (byte*) print_char_cursor#54 (byte*) print_char_cursor#56 (byte*) print_char_cursor#28 
Alias (byte*) print_char_cursor#27 = (byte*) print_char_cursor#55 
Alias (byte*) print_line_cursor#16 = (byte*) print_line_cursor#8 
Alias (byte*) print_char_cursor#29 = (byte*) print_char_cursor#57 
Successful SSA optimization Pass2AliasElimination
Alias (byte) main::op#2 = (byte) main::op#3 
Alias (signed word) main::w1#1 = (signed word) main::w1#3 
Alias (signed word) main::w2#1 = (signed word) main::w2#2 
Alias (byte) main::j#3 = (byte) main::j#5 
Alias (byte) main::i#3 = (byte) main::i#6 
Alias (signed word) compare::w1#1 = (signed word) compare::w1#15 (signed word) compare::w1#16 (signed word) compare::w1#17 (signed word) compare::w1#18 (signed word) compare::w1#19 (signed word) compare::w1#20 
Alias (byte*) print_char_cursor#100 = (byte*) print_char_cursor#84 (byte*) print_char_cursor#85 (byte*) print_char_cursor#86 (byte*) print_char_cursor#87 (byte*) print_char_cursor#88 (byte*) print_char_cursor#89 
Alias (signed word) compare::w2#1 = (signed word) compare::w2#21 (signed word) compare::w2#22 (signed word) compare::w2#23 (signed word) compare::w2#24 (signed word) compare::w2#25 (signed word) compare::w2#26 
Alias (signed word) compare::w1#21 = (signed word) compare::w1#8 
Alias (byte*) compare::ops#10 = (byte*) compare::ops#7 
Alias (signed word) compare::w2#15 = (signed word) compare::w2#19 (signed word) compare::w2#8 
Alias (byte) compare::r#10 = (byte) compare::r#14 (byte) compare::r#7 
Successful SSA optimization Pass2AliasElimination
Alias (signed word) compare::w1#1 = (signed word) compare::w1#21 
Alias (byte*) print_char_cursor#100 = (byte*) print_char_cursor#64 
Alias (signed word) compare::w2#1 = (signed word) compare::w2#15 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) print_char_cursor#32
Self Phi Eliminated (byte*) print_line_cursor#12
Self Phi Eliminated (signed word) main::w1#1
Self Phi Eliminated (signed word) main::w2#1
Self Phi Eliminated (byte) main::j#3
Self Phi Eliminated (byte) main::i#3
Self Phi Eliminated (byte*) print_line_cursor#15
Self Phi Eliminated (byte*) print_char_cursor#21
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (byte*) print_str::str#4 (byte*) print_str::str#1
Identical Phi Values (byte*) print_char_cursor#73 (byte*) print_char_cursor#22
Identical Phi Values (byte*) print_line_cursor#17 (byte*) print_line_cursor#19
Identical Phi Values (byte*) print_char_cursor#59 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#32 (byte*) print_char_cursor#59
Identical Phi Values (byte*) print_char_cursor#34 (byte*) print_char_cursor#10
Identical Phi Values (byte*) print_char_cursor#35 (byte*) print_char_cursor#14
Identical Phi Values (word) print_word::w#1 (word) print_word::w#0
Identical Phi Values (byte*) print_char_cursor#62 (byte*) print_char_cursor#60
Identical Phi Values (byte*) print_char_cursor#37 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#12
Identical Phi Values (byte*) print_char_cursor#11 (byte*) print_char_cursor#14
Identical Phi Values (byte*) print_char_cursor#12 (byte*) print_char_cursor#14
Identical Phi Values (byte*) print_screen#1 (byte*) print_screen#4
Identical Phi Values (byte*) print_line_cursor#12 (byte*) print_screen#1
Identical Phi Values (byte*) print_screen#4 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#18 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#66 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#13 (byte*) print_line_cursor#12
Identical Phi Values (byte*) print_char_cursor#18 (byte*) print_line_cursor#12
Identical Phi Values (signed word) main::w1#1 (signed word) main::w1#2
Identical Phi Values (signed word) main::w2#1 (signed word) main::w2#0
Identical Phi Values (byte) main::j#3 (byte) main::j#2
Identical Phi Values (byte) main::i#3 (byte) main::i#10
Identical Phi Values (byte*) print_char_cursor#19 (byte*) print_char_cursor#26
Identical Phi Values (byte*) print_line_cursor#14 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#20 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#15 (byte*) print_line_cursor#23
Identical Phi Values (byte*) print_char_cursor#21 (byte*) print_char_cursor#76
Identical Phi Values (byte) compare::op#1 (byte) compare::op#0
Identical Phi Values (signed word) compare::w1#1 (signed word) compare::w1#0
Identical Phi Values (signed word) compare::w2#1 (signed word) compare::w2#0
Identical Phi Values (byte*) print_char_cursor#100 (byte*) print_char_cursor#67
Identical Phi Values (byte*) print_char_cursor#22 (byte*) print_char_cursor#34
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#24 (byte*) print_char_cursor#14
Identical Phi Values (byte*) print_char_cursor#25 (byte*) print_char_cursor#34
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#14
Identical Phi Values (byte*) print_char_cursor#27 (byte*) print_char_cursor#14
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_line_cursor#15
Identical Phi Values (byte*) print_char_cursor#29 (byte*) print_char_cursor#21
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) print_str::$0 [6] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2
Simple Condition (bool~) print_ln::$1 [19] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#14) goto print_ln::@1
Simple Condition (bool~) print_sword::$1 [29] if((signed word) print_sword::w#3>=(signed byte) 0) goto print_sword::@1
Simple Condition (bool~) print_cls::$1 [89] if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
Simple Condition (bool~) main::$3 [124] if((byte) main::s#1!=(byte) 3) goto main::@4
Simple Condition (bool~) main::$5 [128] if((byte) main::op#1!=rangelast(0,5)) goto main::@3
Simple Condition (bool~) main::$6 [138] if((byte) main::j#1!=rangelast(0,2)) goto main::@2
Simple Condition (bool~) main::$7 [142] if((byte) main::i#1!=rangelast(0,2)) goto main::@1
Simple Condition (bool~) compare::$0 [162] if((byte) compare::op#0==(byte) LT#0) goto compare::@1
Simple Condition (bool~) compare::$28 [166] if((signed word) compare::w1#0>=(signed word) compare::w2#0) goto compare::@38
Simple Condition (bool~) compare::$1 [169] if((byte) compare::op#0==(byte) LE#0) goto compare::@2
Simple Condition (bool~) compare::$26 [173] if((signed word) compare::w1#0>(signed word) compare::w2#0) goto compare::@37
Simple Condition (bool~) compare::$2 [176] if((byte) compare::op#0==(byte) GT#0) goto compare::@3
Simple Condition (bool~) compare::$24 [180] if((signed word) compare::w1#0<=(signed word) compare::w2#0) goto compare::@36
Simple Condition (bool~) compare::$3 [183] if((byte) compare::op#0==(byte) GE#0) goto compare::@4
Simple Condition (bool~) compare::$22 [187] if((signed word) compare::w1#0<(signed word) compare::w2#0) goto compare::@35
Simple Condition (bool~) compare::$4 [190] if((byte) compare::op#0==(byte) EQ#0) goto compare::@5
Simple Condition (bool~) compare::$20 [194] if((signed word) compare::w1#0!=(signed word) compare::w2#0) goto compare::@34
Simple Condition (bool~) compare::$6 [198] if((byte) compare::op#0!=(byte) NE#0) goto compare::@11
Simple Condition (bool~) compare::$18 [202] if((signed word) compare::w1#0==(signed word) compare::w2#0) goto compare::@33
Simple Condition (bool~) compare::$8 [226] if((signed word) compare::w1#0<(signed byte) 0) goto compare::@12
Simple Condition (bool~) compare::$13 [242] if((signed word) compare::w2#0<(signed byte) 0) goto compare::@13
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [98] (signed word[]) swords#0 ← { (signed word) -$6fed, (signed word) $12, (signed word) $7fed }
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) print_line_cursor#0 = (byte*) 1024
Constant (const byte) print_char::ch#0 = '-'
Constant (const byte[]) print_hextab#0 = $0
Constant (const signed word[]) swords#0 = { -$6fed, $12, $7fed }
Constant (const byte) main::s#0 = 0
Constant (const byte) main::i#0 = 0
Constant (const byte) main::j#0 = 0
Constant (const byte) main::op#0 = 0
Constant (const byte) main::s#2 = 0
Constant (const byte) LT#0 = 0
Constant (const byte) LE#0 = 1
Constant (const byte) GT#0 = 2
Constant (const byte) GE#0 = 3
Constant (const byte) EQ#0 = 4
Constant (const byte) NE#0 = 5
Constant (const byte) FF#0 = $57
Constant (const byte) TT#0 = $51
Constant (const byte*) compare::ops#0 = (byte*) 0
Constant (const byte*) compare::ops#1 = compare::$29
Constant (const byte*) compare::ops#2 = compare::$30
Constant (const byte*) compare::ops#3 = compare::$31
Constant (const byte*) compare::ops#4 = compare::$32
Constant (const byte*) compare::ops#5 = compare::$33
Constant (const byte*) compare::ops#6 = compare::$34
Constant (const byte) print_char::ch#3 = ' '
Constant (const byte) print_char::ch#5 = ' '
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_cls::sc#0 = print_line_cursor#0
Constant (const byte) compare::r#0 = FF#0
Constant (const byte) compare::r#1 = TT#0
Constant (const byte) compare::r#2 = TT#0
Constant (const byte) compare::r#3 = TT#0
Constant (const byte) compare::r#4 = TT#0
Constant (const byte) compare::r#5 = TT#0
Constant (const byte) compare::r#6 = TT#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [144] if(true) goto main::@9
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [126] main::op#1 ← ++ main::op#2 to ++
Resolved ranged comparison value [128] if(main::op#1!=rangelast(0,5)) goto main::@3 to (number) 6
Resolved ranged next value [136] main::j#1 ← ++ main::j#2 to ++
Resolved ranged comparison value [138] if(main::j#1!=rangelast(0,2)) goto main::@2 to (number) 3
Resolved ranged next value [140] main::i#1 ← ++ main::i#10 to ++
Resolved ranged comparison value [142] if(main::i#1!=rangelast(0,2)) goto main::@1 to (number) 3
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) 6 in if((byte) main::op#1!=(number) 6) goto main::@3
Adding number conversion cast (unumber) 3 in if((byte) main::j#1!=(number) 3) goto main::@2
Adding number conversion cast (unumber) 3 in if((byte) main::i#1!=(number) 3) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 6
Simplifying constant integer cast 3
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Self Phi Eliminated (signed word) main::w1#2
Self Phi Eliminated (byte) main::i#10
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (signed word) main::w1#2 (signed word) main::w1#0
Identical Phi Values (byte) main::i#10 (byte) main::i#2
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [38] (byte*~) print_cls::$0 ← (const byte*) print_line_cursor#0 + (word) $3e8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) print_cls::$0 = print_line_cursor#0+$3e8
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [13] (word) print_word::w#0 ← (word)(signed word) print_sword::w#4 keeping print_sword::w#4
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [42] (byte~) main::$8 ← (byte) main::i#2 * (const byte) SIZEOF_SIGNED_WORD
Rewriting multiplication to use shift [45] (byte~) main::$9 ← (byte) main::j#2 * (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte) print_char::ch#3
Inlining constant with var siblings (const byte) print_char::ch#5
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte) main::s#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) main::op#0
Inlining constant with var siblings (const byte) main::s#2
Inlining constant with var siblings (const byte*) compare::ops#0
Inlining constant with var siblings (const byte*) compare::ops#1
Inlining constant with var siblings (const byte*) compare::ops#2
Inlining constant with var siblings (const byte*) compare::ops#3
Inlining constant with var siblings (const byte*) compare::ops#4
Inlining constant with var siblings (const byte*) compare::ops#5
Inlining constant with var siblings (const byte*) compare::ops#6
Inlining constant with var siblings (const byte) compare::r#0
Inlining constant with var siblings (const byte) compare::r#1
Inlining constant with var siblings (const byte) compare::r#2
Inlining constant with var siblings (const byte) compare::r#3
Inlining constant with var siblings (const byte) compare::r#4
Inlining constant with var siblings (const byte) compare::r#5
Inlining constant with var siblings (const byte) compare::r#6
Inlining constant with var siblings (const byte*) print_line_cursor#0
Constant inlined print_cls::$0 = (byte*) 1024+(word) $3e8
Constant inlined compare::ops#0 = (byte*) 0
Constant inlined compare::r#1 = (const byte) TT#0
Constant inlined compare::r#0 = (const byte) FF#0
Constant inlined compare::r#3 = (const byte) TT#0
Constant inlined $0 = (const byte[]) print_hextab#0
Constant inlined compare::r#2 = (const byte) TT#0
Constant inlined compare::r#5 = (const byte) TT#0
Constant inlined compare::r#4 = (const byte) TT#0
Constant inlined compare::$34 = (const byte*) compare::ops#6
Constant inlined main::i#0 = (byte) 0
Constant inlined main::j#0 = (byte) 0
Constant inlined main::op#0 = (byte) 0
Constant inlined main::s#0 = (byte) 0
Constant inlined print_line_cursor#0 = (byte*) 1024
Constant inlined print_cls::sc#0 = (byte*) 1024
Constant inlined compare::$30 = (const byte*) compare::ops#2
Constant inlined compare::$31 = (const byte*) compare::ops#3
Constant inlined compare::$32 = (const byte*) compare::ops#4
Constant inlined compare::$33 = (const byte*) compare::ops#5
Constant inlined main::s#2 = (byte) 0
Constant inlined print_char::ch#3 = (byte) ' '
Constant inlined compare::r#6 = (const byte) TT#0
Constant inlined print_char::ch#5 = (byte) ' '
Constant inlined compare::$29 = (const byte*) compare::ops#1
Constant inlined print_char::ch#0 = (byte) '-'
Successful SSA optimization Pass2ConstantInlining
Inlining constant with var siblings (const byte*) compare::ops#1
Inlining constant with var siblings (const byte*) compare::ops#2
Inlining constant with var siblings (const byte*) compare::ops#3
Inlining constant with var siblings (const byte*) compare::ops#4
Inlining constant with var siblings (const byte*) compare::ops#5
Inlining constant with var siblings (const byte*) compare::ops#6
Eliminating unused constant (const byte) SIZEOF_SIGNED_WORD
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with var siblings (const byte*) compare::ops#1
Inlining constant with var siblings (const byte*) compare::ops#2
Inlining constant with var siblings (const byte*) compare::ops#3
Inlining constant with var siblings (const byte*) compare::ops#4
Inlining constant with var siblings (const byte*) compare::ops#5
Inlining constant with var siblings (const byte*) compare::ops#6
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting print_sword::@5(between print_sword and print_sword::@1)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Added new block during phi lifting main::@18(between main::@7 and main::@1)
Added new block during phi lifting main::@19(between main::@6 and main::@2)
Added new block during phi lifting main::@20(between main::@4 and main::@3)
Added new block during phi lifting main::@21(between main::@16 and main::@4)
Added new block during phi lifting compare::@45(between compare::@11 and compare::@12)
Added new block during phi lifting compare::@46(between compare::@40 and compare::@13)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @4
Adding NOP phi() at start of @16
Adding NOP phi() at start of @23
Adding NOP phi() at start of @24
Adding NOP phi() at start of @25
Adding NOP phi() at start of @26
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of compare::@20
Adding NOP phi() at start of compare::@43
Adding NOP phi() at start of compare::@22
Adding NOP phi() at start of compare::@24
Adding NOP phi() at start of compare::@26
Adding NOP phi() at start of compare::@28
Adding NOP phi() at start of compare::@30
Adding NOP phi() at start of print_sword::@3
Adding NOP phi() at start of print_word::@2
Adding NOP phi() at start of print_byte::@2
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@2
CALL GRAPH
Calls in [] to main:6 
Calls in [main] to print_cls:10 compare:28 print_ln:32 
Calls in [compare] to print_char:78 print_sword:84 print_str:86 print_char:89 print_sword:95 print_char:99 
Calls in [print_sword] to print_char:131 print_word:136 
Calls in [print_word] to print_byte:144 print_byte:148 
Calls in [print_byte] to print_char:156 print_char:161 

Created 37 initial phi equivalence classes
Coalesced [15] print_char_cursor#123 ← print_char_cursor#80
Coalesced [16] main::s#12 ← main::s#7
Coalesced [17] print_line_cursor#35 ← print_line_cursor#31
Coalesced [21] print_char_cursor#125 ← print_char_cursor#75
Coalesced [22] main::s#14 ← main::s#5
Coalesced [23] print_line_cursor#37 ← print_line_cursor#29
Not coalescing [33] print_char_cursor#128 ← print_line_cursor#1
Coalesced [34] print_line_cursor#40 ← print_line_cursor#1
Coalesced [43] main::i#11 ← main::i#1
Coalesced [44] print_char_cursor#122 ← print_char_cursor#76
Coalesced [45] main::s#11 ← main::s#10
Coalesced [46] print_line_cursor#34 ← print_line_cursor#23
Coalesced [47] main::j#9 ← main::j#1
Coalesced (already) [48] print_char_cursor#124 ← print_char_cursor#76
Coalesced (already) [49] main::s#13 ← main::s#10
Coalesced (already) [50] print_line_cursor#36 ← print_line_cursor#23
Coalesced [51] main::op#7 ← main::op#1
Coalesced (already) [52] print_char_cursor#126 ← print_char_cursor#76
Coalesced (already) [53] main::s#15 ← main::s#10
Coalesced (already) [54] print_line_cursor#38 ← print_line_cursor#23
Coalesced [55] print_char_cursor#127 ← print_char_cursor#14
Coalesced [56] main::s#16 ← main::s#1
Coalesced (already) [57] print_line_cursor#39 ← print_line_cursor#19
Coalesced [58] print_line_cursor#32 ← print_line_cursor#19
Coalesced (already) [64] print_line_cursor#33 ← print_line_cursor#1
Coalesced [74] compare::r#34 ← compare::r#17
Coalesced [77] print_char_cursor#116 ← print_char_cursor#67
Coalesced [79] print_char_cursor#130 ← print_char_cursor#14
Coalesced [82] print_sword::w#7 ← print_sword::w#1
Coalesced [83] print_char_cursor#110 ← print_char_cursor#70
Coalesced [88] print_char_cursor#117 ← print_char_cursor#2
Coalesced [90] print_char_cursor#132 ← print_char_cursor#14
Coalesced [93] print_sword::w#8 ← print_sword::w#2
Coalesced (already) [94] print_char_cursor#111 ← print_char_cursor#71
Coalesced [97] print_char::ch#7 ← print_char::ch#4
Coalesced (already) [98] print_char_cursor#118 ← print_char_cursor#14
Coalesced (already) [102] print_char_cursor#131 ← print_char_cursor#2
Coalesced (already) [103] print_char_cursor#129 ← print_char_cursor#67
Coalesced [107] compare::r#35 ← compare::r#18
Coalesced [111] compare::r#36 ← compare::r#19
Coalesced [115] compare::r#37 ← compare::r#20
Coalesced [119] compare::r#38 ← compare::r#21
Coalesced [123] compare::r#39 ← compare::r#22
Coalesced (already) [130] print_char_cursor#121 ← print_char_cursor#61
Coalesced [133] print_sword::w#10 ← print_sword::w#0
Coalesced [134] print_char_cursor#113 ← print_char_cursor#14
Coalesced [139] print_sword::w#9 ← print_sword::w#3
Coalesced (already) [140] print_char_cursor#112 ← print_char_cursor#61
Coalesced [142] print_byte::b#4 ← print_byte::b#0
Coalesced [143] print_char_cursor#114 ← print_char_cursor#60
Coalesced [146] print_byte::b#5 ← print_byte::b#1
Coalesced (already) [147] print_char_cursor#115 ← print_char_cursor#14
Coalesced [154] print_char::ch#8 ← print_char::ch#1
Coalesced (already) [155] print_char_cursor#119 ← print_char_cursor#63
Coalesced [159] print_char::ch#9 ← print_char::ch#2
Coalesced (already) [160] print_char_cursor#120 ← print_char_cursor#14
Coalesced [164] print_str::str#5 ← print_str::str#1
Coalesced (already) [165] print_char_cursor#108 ← print_char_cursor#14
Coalesced [172] print_str::str#6 ← print_str::str#0
Coalesced [173] print_char_cursor#109 ← print_char_cursor#1
Coalesced [181] print_cls::sc#3 ← print_cls::sc#1
Coalesced down to 13 phi equivalence classes
Culled Empty Block (label) @4
Culled Empty Block (label) @16
Culled Empty Block (label) @23
Culled Empty Block (label) @24
Culled Empty Block (label) @26
Culled Empty Block (label) main::@15
Culled Empty Block (label) main::@18
Culled Empty Block (label) main::@19
Culled Empty Block (label) main::@20
Culled Empty Block (label) main::@21
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) compare::@41
Culled Empty Block (label) compare::@44
Culled Empty Block (label) compare::@43
Culled Empty Block (label) compare::@46
Culled Empty Block (label) compare::@45
Culled Empty Block (label) print_sword::@3
Culled Empty Block (label) print_sword::@5
Culled Empty Block (label) print_word::@2
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) print_cls::@2
Culled Empty Block (label) print_cls::@3
Renumbering block @25 to @1
Renumbering block print_sword::@4 to print_sword::@3
Renumbering block main::@9 to main::@8
Renumbering block main::@16 to main::@9
Renumbering block main::@17 to main::@10
Renumbering block compare::@11 to compare::@6
Renumbering block compare::@12 to compare::@7
Renumbering block compare::@13 to compare::@8
Renumbering block compare::@14 to compare::@9
Renumbering block compare::@15 to compare::@10
Renumbering block compare::@16 to compare::@11
Renumbering block compare::@17 to compare::@12
Renumbering block compare::@18 to compare::@13
Renumbering block compare::@19 to compare::@14
Renumbering block compare::@20 to compare::@15
Renumbering block compare::@22 to compare::@16
Renumbering block compare::@24 to compare::@17
Renumbering block compare::@26 to compare::@18
Renumbering block compare::@28 to compare::@19
Renumbering block compare::@30 to compare::@20
Renumbering block compare::@31 to compare::@21
Renumbering block compare::@32 to compare::@22
Renumbering block compare::@33 to compare::@23
Renumbering block compare::@34 to compare::@24
Renumbering block compare::@35 to compare::@25
Renumbering block compare::@36 to compare::@26
Renumbering block compare::@37 to compare::@27
Renumbering block compare::@38 to compare::@28
Renumbering block compare::@39 to compare::@29
Renumbering block compare::@40 to compare::@30
Renumbering block compare::@42 to compare::@31
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of compare::@15
Adding NOP phi() at start of compare::@21
Adding NOP phi() at start of compare::@22
Adding NOP phi() at start of compare::@16
Adding NOP phi() at start of compare::@17
Adding NOP phi() at start of compare::@18
Adding NOP phi() at start of compare::@19
Adding NOP phi() at start of compare::@20
Adding NOP phi() at start of print_sword::@2
Adding NOP phi() at start of print_str
Adding NOP phi() at start of print_cls

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main main::@7
  [6] (byte*) print_line_cursor#31 ← phi( main/(byte*) 1024 main::@7/(byte*) print_line_cursor#23 )
  [6] (byte) main::s#7 ← phi( main/(byte) 0 main::@7/(byte) main::s#10 )
  [6] (byte*) print_char_cursor#80 ← phi( main/(byte*) 1024 main::@7/(byte*) print_char_cursor#76 )
  [6] (byte) main::i#2 ← phi( main/(byte) 0 main::@7/(byte) main::i#1 )
  [7] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1
  [8] (signed word) main::w1#0 ← *((const signed word[]) swords#0 + (byte~) main::$8)
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@6
  [9] (byte*) print_line_cursor#29 ← phi( main::@1/(byte*) print_line_cursor#31 main::@6/(byte*) print_line_cursor#23 )
  [9] (byte) main::s#5 ← phi( main::@1/(byte) main::s#7 main::@6/(byte) main::s#10 )
  [9] (byte*) print_char_cursor#75 ← phi( main::@1/(byte*) print_char_cursor#80 main::@6/(byte*) print_char_cursor#76 )
  [9] (byte) main::j#2 ← phi( main::@1/(byte) 0 main::@6/(byte) main::j#1 )
  [10] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1
  [11] (signed word) main::w2#0 ← *((const signed word[]) swords#0 + (byte~) main::$9)
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [12] (byte*) print_line_cursor#19 ← phi( main::@2/(byte*) print_line_cursor#29 main::@4/(byte*) print_line_cursor#23 )
  [12] (byte) main::s#3 ← phi( main::@2/(byte) main::s#5 main::@4/(byte) main::s#10 )
  [12] (byte*) print_char_cursor#67 ← phi( main::@2/(byte*) print_char_cursor#75 main::@4/(byte*) print_char_cursor#76 )
  [12] (byte) main::op#2 ← phi( main::@2/(byte) 0 main::@4/(byte) main::op#1 )
  [13] (signed word) compare::w1#0 ← (signed word) main::w1#0
  [14] (signed word) compare::w2#0 ← (signed word) main::w2#0
  [15] (byte) compare::op#0 ← (byte) main::op#2
  [16] call compare 
  to:main::@9
main::@9: scope:[main]  from main::@3
  [17] (byte) main::s#1 ← ++ (byte) main::s#3
  [18] if((byte) main::s#1!=(byte) 3) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@9
  [19] phi()
  [20] call print_ln 
  to:main::@10
main::@10: scope:[main]  from main::@5
  [21] (byte*~) print_char_cursor#128 ← (byte*) print_line_cursor#1
  to:main::@4
main::@4: scope:[main]  from main::@10 main::@9
  [22] (byte*) print_line_cursor#23 ← phi( main::@9/(byte*) print_line_cursor#19 main::@10/(byte*) print_line_cursor#1 )
  [22] (byte) main::s#10 ← phi( main::@9/(byte) main::s#1 main::@10/(byte) 0 )
  [22] (byte*) print_char_cursor#76 ← phi( main::@9/(byte*) print_char_cursor#14 main::@10/(byte*~) print_char_cursor#128 )
  [23] (byte) main::op#1 ← ++ (byte) main::op#2
  [24] if((byte) main::op#1!=(byte) 6) goto main::@3
  to:main::@6
main::@6: scope:[main]  from main::@4
  [25] (byte) main::j#1 ← ++ (byte) main::j#2
  [26] if((byte) main::j#1!=(byte) 3) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  [27] (byte) main::i#1 ← ++ (byte) main::i#2
  [28] if((byte) main::i#1!=(byte) 3) goto main::@1
  to:main::@8
main::@8: scope:[main]  from main::@7 main::@8
  [29] phi()
  to:main::@8
print_ln: scope:[print_ln]  from main::@5
  [30] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [31] (byte*) print_line_cursor#9 ← phi( print_ln/(byte*) print_line_cursor#19 print_ln::@1/(byte*) print_line_cursor#1 )
  [32] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28
  [33] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#14) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [34] return 
  to:@return
compare: scope:[compare]  from main::@3
  [35] if((byte) compare::op#0==(const byte) LT#0) goto compare::@1
  to:compare::@9
compare::@9: scope:[compare]  from compare
  [36] if((byte) compare::op#0==(const byte) LE#0) goto compare::@2
  to:compare::@10
compare::@10: scope:[compare]  from compare::@9
  [37] if((byte) compare::op#0==(const byte) GT#0) goto compare::@3
  to:compare::@11
compare::@11: scope:[compare]  from compare::@10
  [38] if((byte) compare::op#0==(const byte) GE#0) goto compare::@4
  to:compare::@12
compare::@12: scope:[compare]  from compare::@11
  [39] if((byte) compare::op#0==(const byte) EQ#0) goto compare::@5
  to:compare::@13
compare::@13: scope:[compare]  from compare::@12
  [40] if((byte) compare::op#0!=(const byte) NE#0) goto compare::@6
  to:compare::@14
compare::@14: scope:[compare]  from compare::@13
  [41] if((signed word) compare::w1#0==(signed word) compare::w2#0) goto compare::@23
  to:compare::@15
compare::@15: scope:[compare]  from compare::@14
  [42] phi()
  to:compare::@23
compare::@23: scope:[compare]  from compare::@14 compare::@15
  [43] (byte) compare::r#17 ← phi( compare::@14/(const byte) FF#0 compare::@15/(const byte) TT#0 )
  to:compare::@6
compare::@6: scope:[compare]  from compare::@13 compare::@23 compare::@24 compare::@25 compare::@26 compare::@27 compare::@28
  [44] (byte) compare::r#10 ← phi( compare::@13/(const byte) FF#0 compare::@23/(byte) compare::r#17 compare::@24/(byte) compare::r#18 compare::@25/(byte) compare::r#19 compare::@26/(byte) compare::r#20 compare::@27/(byte) compare::r#21 compare::@28/(byte) compare::r#22 )
  [44] (byte*) compare::ops#10 ← phi( compare::@13/(byte*) 0 compare::@23/(const byte*) compare::ops#1 compare::@24/(const byte*) compare::ops#2 compare::@25/(const byte*) compare::ops#3 compare::@26/(const byte*) compare::ops#4 compare::@27/(const byte*) compare::ops#5 compare::@28/(const byte*) compare::ops#6 )
  [45] if((signed word) compare::w1#0<(signed byte) 0) goto compare::@7
  to:compare::@21
compare::@21: scope:[compare]  from compare::@6
  [46] phi()
  [47] call print_char 
  to:compare::@7
compare::@7: scope:[compare]  from compare::@21 compare::@6
  [48] (byte*) print_char_cursor#70 ← phi( compare::@6/(byte*) print_char_cursor#67 compare::@21/(byte*) print_char_cursor#14 )
  [49] (signed word) print_sword::w#1 ← (signed word) compare::w1#0
  [50] call print_sword 
  to:compare::@29
compare::@29: scope:[compare]  from compare::@7
  [51] (byte*) print_str::str#1 ← (byte*) compare::ops#10
  [52] call print_str 
  to:compare::@30
compare::@30: scope:[compare]  from compare::@29
  [53] if((signed word) compare::w2#0<(signed byte) 0) goto compare::@8
  to:compare::@22
compare::@22: scope:[compare]  from compare::@30
  [54] phi()
  [55] call print_char 
  to:compare::@8
compare::@8: scope:[compare]  from compare::@22 compare::@30
  [56] (byte*) print_char_cursor#71 ← phi( compare::@30/(byte*) print_char_cursor#2 compare::@22/(byte*) print_char_cursor#14 )
  [57] (signed word) print_sword::w#2 ← (signed word) compare::w2#0
  [58] call print_sword 
  to:compare::@31
compare::@31: scope:[compare]  from compare::@8
  [59] (byte) print_char::ch#4 ← (byte) compare::r#10
  [60] call print_char 
  to:compare::@return
compare::@return: scope:[compare]  from compare::@31
  [61] return 
  to:@return
compare::@5: scope:[compare]  from compare::@12
  [62] if((signed word) compare::w1#0!=(signed word) compare::w2#0) goto compare::@24
  to:compare::@16
compare::@16: scope:[compare]  from compare::@5
  [63] phi()
  to:compare::@24
compare::@24: scope:[compare]  from compare::@16 compare::@5
  [64] (byte) compare::r#18 ← phi( compare::@16/(const byte) TT#0 compare::@5/(const byte) FF#0 )
  to:compare::@6
compare::@4: scope:[compare]  from compare::@11
  [65] if((signed word) compare::w1#0<(signed word) compare::w2#0) goto compare::@25
  to:compare::@17
compare::@17: scope:[compare]  from compare::@4
  [66] phi()
  to:compare::@25
compare::@25: scope:[compare]  from compare::@17 compare::@4
  [67] (byte) compare::r#19 ← phi( compare::@17/(const byte) TT#0 compare::@4/(const byte) FF#0 )
  to:compare::@6
compare::@3: scope:[compare]  from compare::@10
  [68] if((signed word) compare::w1#0<=(signed word) compare::w2#0) goto compare::@26
  to:compare::@18
compare::@18: scope:[compare]  from compare::@3
  [69] phi()
  to:compare::@26
compare::@26: scope:[compare]  from compare::@18 compare::@3
  [70] (byte) compare::r#20 ← phi( compare::@18/(const byte) TT#0 compare::@3/(const byte) FF#0 )
  to:compare::@6
compare::@2: scope:[compare]  from compare::@9
  [71] if((signed word) compare::w1#0>(signed word) compare::w2#0) goto compare::@27
  to:compare::@19
compare::@19: scope:[compare]  from compare::@2
  [72] phi()
  to:compare::@27
compare::@27: scope:[compare]  from compare::@19 compare::@2
  [73] (byte) compare::r#21 ← phi( compare::@2/(const byte) FF#0 compare::@19/(const byte) TT#0 )
  to:compare::@6
compare::@1: scope:[compare]  from compare
  [74] if((signed word) compare::w1#0>=(signed word) compare::w2#0) goto compare::@28
  to:compare::@20
compare::@20: scope:[compare]  from compare::@1
  [75] phi()
  to:compare::@28
compare::@28: scope:[compare]  from compare::@1 compare::@20
  [76] (byte) compare::r#22 ← phi( compare::@1/(const byte) FF#0 compare::@20/(const byte) TT#0 )
  to:compare::@6
print_char: scope:[print_char]  from compare::@21 compare::@22 compare::@31 print_byte print_byte::@1 print_sword::@2
  [77] (byte*) print_char_cursor#43 ← phi( compare::@21/(byte*) print_char_cursor#67 compare::@22/(byte*) print_char_cursor#2 compare::@31/(byte*) print_char_cursor#14 print_byte/(byte*) print_char_cursor#63 print_byte::@1/(byte*) print_char_cursor#14 print_sword::@2/(byte*) print_char_cursor#61 )
  [77] (byte) print_char::ch#6 ← phi( compare::@21/(byte) ' ' compare::@22/(byte) ' ' compare::@31/(byte) print_char::ch#4 print_byte/(byte) print_char::ch#1 print_byte::@1/(byte) print_char::ch#2 print_sword::@2/(byte) '-' )
  [78] *((byte*) print_char_cursor#43) ← (byte) print_char::ch#6
  [79] (byte*) print_char_cursor#14 ← ++ (byte*) print_char_cursor#43
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [80] return 
  to:@return
print_sword: scope:[print_sword]  from compare::@7 compare::@8
  [81] (byte*) print_char_cursor#61 ← phi( compare::@7/(byte*) print_char_cursor#70 compare::@8/(byte*) print_char_cursor#71 )
  [81] (signed word) print_sword::w#3 ← phi( compare::@7/(signed word) print_sword::w#1 compare::@8/(signed word) print_sword::w#2 )
  [82] if((signed word) print_sword::w#3>=(signed byte) 0) goto print_sword::@1
  to:print_sword::@2
print_sword::@2: scope:[print_sword]  from print_sword
  [83] phi()
  [84] call print_char 
  to:print_sword::@3
print_sword::@3: scope:[print_sword]  from print_sword::@2
  [85] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3
  to:print_sword::@1
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@3
  [86] (byte*) print_char_cursor#60 ← phi( print_sword/(byte*) print_char_cursor#61 print_sword::@3/(byte*) print_char_cursor#14 )
  [86] (signed word) print_sword::w#4 ← phi( print_sword/(signed word) print_sword::w#3 print_sword::@3/(signed word) print_sword::w#0 )
  [87] call print_word 
  to:print_sword::@return
print_sword::@return: scope:[print_sword]  from print_sword::@1
  [88] return 
  to:@return
print_word: scope:[print_word]  from print_sword::@1
  [89] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#4
  [90] call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [91] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#4
  [92] call print_byte 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [93] return 
  to:@return
print_byte: scope:[print_byte]  from print_word print_word::@1
  [94] (byte*) print_char_cursor#63 ← phi( print_word/(byte*) print_char_cursor#60 print_word::@1/(byte*) print_char_cursor#14 )
  [94] (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  [95] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4
  [96] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0)
  [97] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [98] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f
  [99] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2)
  [100] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [101] return 
  to:@return
print_str: scope:[print_str]  from compare::@29
  [102] phi()
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [103] (byte*) print_char_cursor#2 ← phi( print_str/(byte*) print_char_cursor#14 print_str::@2/(byte*) print_char_cursor#1 )
  [103] (byte*) print_str::str#2 ← phi( print_str/(byte*) print_str::str#1 print_str::@2/(byte*) print_str::str#0 )
  [104] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [105] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [106] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2)
  [107] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2
  [108] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2
  to:print_str::@1
print_cls: scope:[print_cls]  from main
  [109] phi()
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [110] (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) 1024 print_cls::@1/(byte*) print_cls::sc#1 )
  [111] *((byte*) print_cls::sc#2) ← (byte) ' '
  [112] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  [113] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [114] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) EQ
(byte) FF
(byte) GE
(byte) GT
(byte) LE
(byte) LT
(byte) NE
(byte) TT
(void()) compare((signed word) compare::w1 , (signed word) compare::w2 , (byte) compare::op)
(byte) compare::op
(byte) compare::op#0 168.8333333333334
(byte*) compare::ops
(byte*) compare::ops#10 0.2857142857142857
(byte) compare::r
(byte) compare::r#10 0.9333333333333332
(byte) compare::r#17 2.0
(byte) compare::r#18 2.0
(byte) compare::r#19 2.0
(byte) compare::r#20 2.0
(byte) compare::r#21 2.0
(byte) compare::r#22 2.0
(signed word) compare::w1
(signed word) compare::w1#0 31.78125
(signed word) compare::w2
(signed word) compare::w2#0 26.076923076923077
(void()) main()
(byte~) main::$8 22.0
(byte~) main::$9 202.0
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 1.5714285714285716
(byte) main::j
(byte) main::j#1 151.5
(byte) main::j#2 18.9375
(byte) main::op
(byte) main::op#1 1501.5
(byte) main::op#2 273.0
(byte) main::s
(byte) main::s#1 1501.5
(byte) main::s#10 302.0
(byte) main::s#3 420.59999999999997
(byte) main::s#5 71.0
(byte) main::s#7 7.333333333333333
(signed word) main::w1
(signed word) main::w1#0 53.26315789473684
(signed word) main::w2
(signed word) main::w2#0 78.71428571428571
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#0 4.0
(byte) print_byte::b#1 4.0
(byte) print_byte::b#2 2.0
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#1 4.0
(byte) print_char::ch#2 4.0
(byte) print_char::ch#4 4.0
(byte) print_char::ch#6 8.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 10001.0
(byte*~) print_char_cursor#128 2002.0
(byte*) print_char_cursor#14 344.3125
(byte*) print_char_cursor#2 4287.0
(byte*) print_char_cursor#43 8.0
(byte*) print_char_cursor#60 3.0
(byte*) print_char_cursor#61 2.6666666666666665
(byte*) print_char_cursor#63 2.0
(byte*) print_char_cursor#67 35.677419354838705
(byte*) print_char_cursor#70 3.0
(byte*) print_char_cursor#71 3.0
(byte*) print_char_cursor#75 71.0
(byte*) print_char_cursor#76 445.0
(byte*) print_char_cursor#80 7.333333333333333
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 16.5
(byte*) print_cls::sc#2 16.5
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_line_cursor#1 6401.0
(byte*) print_line_cursor#19 233.8888888888889
(byte*) print_line_cursor#23 445.0
(byte*) print_line_cursor#29 71.0
(byte*) print_line_cursor#31 7.333333333333333
(byte*) print_line_cursor#9 20004.0
(void()) print_ln()
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 20002.0
(byte*) print_str::str#1 2.0
(byte*) print_str::str#2 10001.5
(void()) print_sword((signed word) print_sword::w)
(signed word) print_sword::w
(signed word) print_sword::w#0 4.0
(signed word) print_sword::w#1 4.0
(signed word) print_sword::w#2 4.0
(signed word) print_sword::w#3 2.5
(signed word) print_sword::w#4 1.3333333333333333
(void()) print_word((word) print_word::w)
(word) print_word::w
(signed word[]) swords

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
[ main::op#2 main::op#1 ]
[ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
[ print_line_cursor#9 print_line_cursor#19 print_line_cursor#29 print_line_cursor#31 print_line_cursor#23 print_line_cursor#1 ]
[ compare::ops#10 ]
[ compare::r#10 compare::r#17 compare::r#18 compare::r#19 compare::r#20 compare::r#21 compare::r#22 ]
[ print_char::ch#6 print_char::ch#4 print_char::ch#1 print_char::ch#2 ]
[ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ]
[ print_char_cursor#60 print_char_cursor#43 print_char_cursor#71 print_char_cursor#2 print_char_cursor#70 print_char_cursor#67 print_char_cursor#75 print_char_cursor#80 print_char_cursor#76 print_char_cursor#14 print_char_cursor#128 print_char_cursor#63 print_char_cursor#61 print_char_cursor#1 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_str::str#2 print_str::str#1 print_str::str#0 ]
[ print_cls::sc#2 print_cls::sc#1 ]
Added variable main::$8 to zero page equivalence class [ main::$8 ]
Added variable main::w1#0 to zero page equivalence class [ main::w1#0 ]
Added variable main::$9 to zero page equivalence class [ main::$9 ]
Added variable main::w2#0 to zero page equivalence class [ main::w2#0 ]
Added variable compare::w1#0 to zero page equivalence class [ compare::w1#0 ]
Added variable compare::w2#0 to zero page equivalence class [ compare::w2#0 ]
Added variable compare::op#0 to zero page equivalence class [ compare::op#0 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
[ main::op#2 main::op#1 ]
[ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
[ print_line_cursor#9 print_line_cursor#19 print_line_cursor#29 print_line_cursor#31 print_line_cursor#23 print_line_cursor#1 ]
[ compare::ops#10 ]
[ compare::r#10 compare::r#17 compare::r#18 compare::r#19 compare::r#20 compare::r#21 compare::r#22 ]
[ print_char::ch#6 print_char::ch#4 print_char::ch#1 print_char::ch#2 ]
[ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ]
[ print_char_cursor#60 print_char_cursor#43 print_char_cursor#71 print_char_cursor#2 print_char_cursor#70 print_char_cursor#67 print_char_cursor#75 print_char_cursor#80 print_char_cursor#76 print_char_cursor#14 print_char_cursor#128 print_char_cursor#63 print_char_cursor#61 print_char_cursor#1 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_str::str#2 print_str::str#1 print_str::str#0 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ main::$8 ]
[ main::w1#0 ]
[ main::$9 ]
[ main::w2#0 ]
[ compare::w1#0 ]
[ compare::w2#0 ]
[ compare::op#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::j#2 main::j#1 ]
Allocated zp ZP_BYTE:4 [ main::op#2 main::op#1 ]
Allocated zp ZP_BYTE:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
Allocated zp ZP_WORD:6 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#29 print_line_cursor#31 print_line_cursor#23 print_line_cursor#1 ]
Allocated zp ZP_WORD:8 [ compare::ops#10 ]
Allocated zp ZP_BYTE:10 [ compare::r#10 compare::r#17 compare::r#18 compare::r#19 compare::r#20 compare::r#21 compare::r#22 ]
Allocated zp ZP_BYTE:11 [ print_char::ch#6 print_char::ch#4 print_char::ch#1 print_char::ch#2 ]
Allocated zp ZP_WORD:12 [ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ]
Allocated zp ZP_WORD:14 [ print_char_cursor#60 print_char_cursor#43 print_char_cursor#71 print_char_cursor#2 print_char_cursor#70 print_char_cursor#67 print_char_cursor#75 print_char_cursor#80 print_char_cursor#76 print_char_cursor#14 print_char_cursor#128 print_char_cursor#63 print_char_cursor#61 print_char_cursor#1 ]
Allocated zp ZP_BYTE:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Allocated zp ZP_WORD:17 [ print_str::str#2 print_str::str#1 print_str::str#0 ]
Allocated zp ZP_WORD:19 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_BYTE:21 [ main::$8 ]
Allocated zp ZP_WORD:22 [ main::w1#0 ]
Allocated zp ZP_BYTE:24 [ main::$9 ]
Allocated zp ZP_WORD:25 [ main::w2#0 ]
Allocated zp ZP_WORD:27 [ compare::w1#0 ]
Allocated zp ZP_WORD:29 [ compare::w2#0 ]
Allocated zp ZP_BYTE:31 [ compare::op#0 ]
Allocated zp ZP_BYTE:32 [ print_byte::$0 ]
Allocated zp ZP_BYTE:33 [ print_byte::$2 ]

INITIAL ASM
//SEG0 File Comments
// Test signed word comparisons
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const LT = 0
  .const LE = 1
  .const GT = 2
  .const GE = 3
  .const EQ = 4
  .const NE = 5
  // empty circle
  .const FF = $57
  // filled circle
  .const TT = $51
  .label print_char_cursor = $e
  .label print_line_cursor = 6
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label _8 = $15
    .label _9 = $18
    .label w1 = $16
    .label w2 = $19
    .label s = 5
    .label op = 4
    .label j = 3
    .label i = 2
  //SEG11 [5] call print_cls 
  //SEG12 [109] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG13 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG14 [6] phi (byte*) print_line_cursor#31 = (byte*) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG15 [6] phi (byte) main::s#7 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta s
  //SEG16 [6] phi (byte*) print_char_cursor#80 = (byte*) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG17 [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG18 [6] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
  b1_from_b7:
  //SEG19 [6] phi (byte*) print_line_cursor#31 = (byte*) print_line_cursor#23 [phi:main::@7->main::@1#0] -- register_copy 
  //SEG20 [6] phi (byte) main::s#7 = (byte) main::s#10 [phi:main::@7->main::@1#1] -- register_copy 
  //SEG21 [6] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#76 [phi:main::@7->main::@1#2] -- register_copy 
  //SEG22 [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@7->main::@1#3] -- register_copy 
    jmp b1
  //SEG23 main::@1
  b1:
  //SEG24 [7] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta _8
  //SEG25 [8] (signed word) main::w1#0 ← *((const signed word[]) swords#0 + (byte~) main::$8) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy _8
    lda swords,y
    sta w1
    lda swords+1,y
    sta w1+1
  //SEG26 [9] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG27 [9] phi (byte*) print_line_cursor#29 = (byte*) print_line_cursor#31 [phi:main::@1->main::@2#0] -- register_copy 
  //SEG28 [9] phi (byte) main::s#5 = (byte) main::s#7 [phi:main::@1->main::@2#1] -- register_copy 
  //SEG29 [9] phi (byte*) print_char_cursor#75 = (byte*) print_char_cursor#80 [phi:main::@1->main::@2#2] -- register_copy 
  //SEG30 [9] phi (byte) main::j#2 = (byte) 0 [phi:main::@1->main::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta j
    jmp b2
  //SEG31 [9] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  b2_from_b6:
  //SEG32 [9] phi (byte*) print_line_cursor#29 = (byte*) print_line_cursor#23 [phi:main::@6->main::@2#0] -- register_copy 
  //SEG33 [9] phi (byte) main::s#5 = (byte) main::s#10 [phi:main::@6->main::@2#1] -- register_copy 
  //SEG34 [9] phi (byte*) print_char_cursor#75 = (byte*) print_char_cursor#76 [phi:main::@6->main::@2#2] -- register_copy 
  //SEG35 [9] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@6->main::@2#3] -- register_copy 
    jmp b2
  //SEG36 main::@2
  b2:
  //SEG37 [10] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda j
    asl
    sta _9
  //SEG38 [11] (signed word) main::w2#0 ← *((const signed word[]) swords#0 + (byte~) main::$9) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy _9
    lda swords,y
    sta w2
    lda swords+1,y
    sta w2+1
  //SEG39 [12] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
  //SEG40 [12] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#29 [phi:main::@2->main::@3#0] -- register_copy 
  //SEG41 [12] phi (byte) main::s#3 = (byte) main::s#5 [phi:main::@2->main::@3#1] -- register_copy 
  //SEG42 [12] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#75 [phi:main::@2->main::@3#2] -- register_copy 
  //SEG43 [12] phi (byte) main::op#2 = (byte) 0 [phi:main::@2->main::@3#3] -- vbuz1=vbuc1 
    lda #0
    sta op
    jmp b3
  //SEG44 [12] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  b3_from_b4:
  //SEG45 [12] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#23 [phi:main::@4->main::@3#0] -- register_copy 
  //SEG46 [12] phi (byte) main::s#3 = (byte) main::s#10 [phi:main::@4->main::@3#1] -- register_copy 
  //SEG47 [12] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#76 [phi:main::@4->main::@3#2] -- register_copy 
  //SEG48 [12] phi (byte) main::op#2 = (byte) main::op#1 [phi:main::@4->main::@3#3] -- register_copy 
    jmp b3
  //SEG49 main::@3
  b3:
  //SEG50 [13] (signed word) compare::w1#0 ← (signed word) main::w1#0 -- vwsz1=vwsz2 
    lda w1
    sta compare.w1
    lda w1+1
    sta compare.w1+1
  //SEG51 [14] (signed word) compare::w2#0 ← (signed word) main::w2#0 -- vwsz1=vwsz2 
    lda w2
    sta compare.w2
    lda w2+1
    sta compare.w2+1
  //SEG52 [15] (byte) compare::op#0 ← (byte) main::op#2 -- vbuz1=vbuz2 
    lda op
    sta compare.op
  //SEG53 [16] call compare 
    jsr compare
    jmp b9
  //SEG54 main::@9
  b9:
  //SEG55 [17] (byte) main::s#1 ← ++ (byte) main::s#3 -- vbuz1=_inc_vbuz1 
    inc s
  //SEG56 [18] if((byte) main::s#1!=(byte) 3) goto main::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp s
    bne b4_from_b9
  //SEG57 [19] phi from main::@9 to main::@5 [phi:main::@9->main::@5]
  b5_from_b9:
    jmp b5
  //SEG58 main::@5
  b5:
  //SEG59 [20] call print_ln 
  //SEG60 [30] phi from main::@5 to print_ln [phi:main::@5->print_ln]
  print_ln_from_b5:
    jsr print_ln
    jmp b10
  //SEG61 main::@10
  b10:
  //SEG62 [21] (byte*~) print_char_cursor#128 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG63 [22] phi from main::@10 to main::@4 [phi:main::@10->main::@4]
  b4_from_b10:
  //SEG64 [22] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#1 [phi:main::@10->main::@4#0] -- register_copy 
  //SEG65 [22] phi (byte) main::s#10 = (byte) 0 [phi:main::@10->main::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta s
  //SEG66 [22] phi (byte*) print_char_cursor#76 = (byte*~) print_char_cursor#128 [phi:main::@10->main::@4#2] -- register_copy 
    jmp b4
  //SEG67 [22] phi from main::@9 to main::@4 [phi:main::@9->main::@4]
  b4_from_b9:
  //SEG68 [22] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#19 [phi:main::@9->main::@4#0] -- register_copy 
  //SEG69 [22] phi (byte) main::s#10 = (byte) main::s#1 [phi:main::@9->main::@4#1] -- register_copy 
  //SEG70 [22] phi (byte*) print_char_cursor#76 = (byte*) print_char_cursor#14 [phi:main::@9->main::@4#2] -- register_copy 
    jmp b4
  //SEG71 main::@4
  b4:
  //SEG72 [23] (byte) main::op#1 ← ++ (byte) main::op#2 -- vbuz1=_inc_vbuz1 
    inc op
  //SEG73 [24] if((byte) main::op#1!=(byte) 6) goto main::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp op
    bne b3_from_b4
    jmp b6
  //SEG74 main::@6
  b6:
  //SEG75 [25] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuz1=_inc_vbuz1 
    inc j
  //SEG76 [26] if((byte) main::j#1!=(byte) 3) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp j
    bne b2_from_b6
    jmp b7
  //SEG77 main::@7
  b7:
  //SEG78 [27] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG79 [28] if((byte) main::i#1!=(byte) 3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp i
    bne b1_from_b7
  //SEG80 [29] phi from main::@7 main::@8 to main::@8 [phi:main::@7/main::@8->main::@8]
  b8_from_b7:
  b8_from_b8:
    jmp b8
  // loop forever
  //SEG81 main::@8
  b8:
    jmp b8_from_b8
}
//SEG82 print_ln
// Print a newline
print_ln: {
  //SEG83 [31] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG84 [31] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#19 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG85 print_ln::@1
  b1:
  //SEG86 [32] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG87 [33] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#14) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG88 print_ln::@return
  breturn:
  //SEG89 [34] return 
    rts
}
//SEG90 compare
// Compare two words using an operator
// compare(signed word zeropage($1b) w1, signed word zeropage($1d) w2, byte zeropage($1f) op)
compare: {
    .label w1 = $1b
    .label w2 = $1d
    .label op = $1f
    .label ops = 8
    .label r = $a
  //SEG91 [35] if((byte) compare::op#0==(const byte) LT#0) goto compare::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #LT
    cmp op
    beq b1
    jmp b9
  //SEG92 compare::@9
  b9:
  //SEG93 [36] if((byte) compare::op#0==(const byte) LE#0) goto compare::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #LE
    cmp op
    beq b2
    jmp b10
  //SEG94 compare::@10
  b10:
  //SEG95 [37] if((byte) compare::op#0==(const byte) GT#0) goto compare::@3 -- vbuz1_eq_vbuc1_then_la1 
    lda #GT
    cmp op
    beq b3
    jmp b11
  //SEG96 compare::@11
  b11:
  //SEG97 [38] if((byte) compare::op#0==(const byte) GE#0) goto compare::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #GE
    cmp op
    beq b4
    jmp b12
  //SEG98 compare::@12
  b12:
  //SEG99 [39] if((byte) compare::op#0==(const byte) EQ#0) goto compare::@5 -- vbuz1_eq_vbuc1_then_la1 
    lda #EQ
    cmp op
    beq b5
    jmp b13
  //SEG100 compare::@13
  b13:
  //SEG101 [40] if((byte) compare::op#0!=(const byte) NE#0) goto compare::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #NE
    cmp op
    bne b6_from_b13
    jmp b14
  //SEG102 compare::@14
  b14:
  //SEG103 [41] if((signed word) compare::w1#0==(signed word) compare::w2#0) goto compare::@23 -- vwsz1_eq_vwsz2_then_la1 
    lda w1
    cmp w2
    bne !+
    lda w1+1
    cmp w2+1
    beq b23_from_b14
  !:
  //SEG104 [42] phi from compare::@14 to compare::@15 [phi:compare::@14->compare::@15]
  b15_from_b14:
    jmp b15
  //SEG105 compare::@15
  b15:
  //SEG106 [43] phi from compare::@15 to compare::@23 [phi:compare::@15->compare::@23]
  b23_from_b15:
  //SEG107 [43] phi (byte) compare::r#17 = (const byte) TT#0 [phi:compare::@15->compare::@23#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b23
  //SEG108 [43] phi from compare::@14 to compare::@23 [phi:compare::@14->compare::@23]
  b23_from_b14:
  //SEG109 [43] phi (byte) compare::r#17 = (const byte) FF#0 [phi:compare::@14->compare::@23#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b23
  //SEG110 compare::@23
  b23:
  //SEG111 [44] phi from compare::@23 to compare::@6 [phi:compare::@23->compare::@6]
  b6_from_b23:
  //SEG112 [44] phi (byte) compare::r#10 = (byte) compare::r#17 [phi:compare::@23->compare::@6#0] -- register_copy 
  //SEG113 [44] phi (byte*) compare::ops#10 = (const byte*) compare::ops#1 [phi:compare::@23->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_1
    sta ops
    lda #>ops_1
    sta ops+1
    jmp b6
  //SEG114 [44] phi from compare::@13 to compare::@6 [phi:compare::@13->compare::@6]
  b6_from_b13:
  //SEG115 [44] phi (byte) compare::r#10 = (const byte) FF#0 [phi:compare::@13->compare::@6#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
  //SEG116 [44] phi (byte*) compare::ops#10 = (byte*) 0 [phi:compare::@13->compare::@6#1] -- pbuz1=pbuc1 
    lda #<0
    sta ops
    lda #>0
    sta ops+1
    jmp b6
  //SEG117 compare::@6
  b6:
  //SEG118 [45] if((signed word) compare::w1#0<(signed byte) 0) goto compare::@7 -- vwsz1_lt_0_then_la1 
    lda w1+1
    bmi b7_from_b6
  //SEG119 [46] phi from compare::@6 to compare::@21 [phi:compare::@6->compare::@21]
  b21_from_b6:
    jmp b21
  //SEG120 compare::@21
  b21:
  //SEG121 [47] call print_char 
  //SEG122 [77] phi from compare::@21 to print_char [phi:compare::@21->print_char]
  print_char_from_b21:
  //SEG123 [77] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#67 [phi:compare::@21->print_char#0] -- register_copy 
  //SEG124 [77] phi (byte) print_char::ch#6 = (byte) ' ' [phi:compare::@21->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta print_char.ch
    jsr print_char
  //SEG125 [48] phi from compare::@21 compare::@6 to compare::@7 [phi:compare::@21/compare::@6->compare::@7]
  b7_from_b21:
  b7_from_b6:
  //SEG126 [48] phi (byte*) print_char_cursor#70 = (byte*) print_char_cursor#14 [phi:compare::@21/compare::@6->compare::@7#0] -- register_copy 
    jmp b7
  //SEG127 compare::@7
  b7:
  //SEG128 [49] (signed word) print_sword::w#1 ← (signed word) compare::w1#0 -- vwsz1=vwsz2 
    lda w1
    sta print_sword.w
    lda w1+1
    sta print_sword.w+1
  //SEG129 [50] call print_sword 
  //SEG130 [81] phi from compare::@7 to print_sword [phi:compare::@7->print_sword]
  print_sword_from_b7:
  //SEG131 [81] phi (byte*) print_char_cursor#61 = (byte*) print_char_cursor#70 [phi:compare::@7->print_sword#0] -- register_copy 
  //SEG132 [81] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:compare::@7->print_sword#1] -- register_copy 
    jsr print_sword
    jmp b29
  //SEG133 compare::@29
  b29:
  //SEG134 [51] (byte*) print_str::str#1 ← (byte*) compare::ops#10 -- pbuz1=pbuz2 
    lda ops
    sta print_str.str
    lda ops+1
    sta print_str.str+1
  //SEG135 [52] call print_str 
  //SEG136 [102] phi from compare::@29 to print_str [phi:compare::@29->print_str]
  print_str_from_b29:
    jsr print_str
    jmp b30
  //SEG137 compare::@30
  b30:
  //SEG138 [53] if((signed word) compare::w2#0<(signed byte) 0) goto compare::@8 -- vwsz1_lt_0_then_la1 
    lda w2+1
    bmi b8_from_b30
  //SEG139 [54] phi from compare::@30 to compare::@22 [phi:compare::@30->compare::@22]
  b22_from_b30:
    jmp b22
  //SEG140 compare::@22
  b22:
  //SEG141 [55] call print_char 
  //SEG142 [77] phi from compare::@22 to print_char [phi:compare::@22->print_char]
  print_char_from_b22:
  //SEG143 [77] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#2 [phi:compare::@22->print_char#0] -- register_copy 
  //SEG144 [77] phi (byte) print_char::ch#6 = (byte) ' ' [phi:compare::@22->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta print_char.ch
    jsr print_char
  //SEG145 [56] phi from compare::@22 compare::@30 to compare::@8 [phi:compare::@22/compare::@30->compare::@8]
  b8_from_b22:
  b8_from_b30:
  //SEG146 [56] phi (byte*) print_char_cursor#71 = (byte*) print_char_cursor#14 [phi:compare::@22/compare::@30->compare::@8#0] -- register_copy 
    jmp b8
  //SEG147 compare::@8
  b8:
  //SEG148 [57] (signed word) print_sword::w#2 ← (signed word) compare::w2#0 -- vwsz1=vwsz2 
    lda w2
    sta print_sword.w
    lda w2+1
    sta print_sword.w+1
  //SEG149 [58] call print_sword 
  //SEG150 [81] phi from compare::@8 to print_sword [phi:compare::@8->print_sword]
  print_sword_from_b8:
  //SEG151 [81] phi (byte*) print_char_cursor#61 = (byte*) print_char_cursor#71 [phi:compare::@8->print_sword#0] -- register_copy 
  //SEG152 [81] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#2 [phi:compare::@8->print_sword#1] -- register_copy 
    jsr print_sword
    jmp b31
  //SEG153 compare::@31
  b31:
  //SEG154 [59] (byte) print_char::ch#4 ← (byte) compare::r#10 -- vbuz1=vbuz2 
    lda r
    sta print_char.ch
  //SEG155 [60] call print_char 
  //SEG156 [77] phi from compare::@31 to print_char [phi:compare::@31->print_char]
  print_char_from_b31:
  //SEG157 [77] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#14 [phi:compare::@31->print_char#0] -- register_copy 
  //SEG158 [77] phi (byte) print_char::ch#6 = (byte) print_char::ch#4 [phi:compare::@31->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG159 compare::@return
  breturn:
  //SEG160 [61] return 
    rts
  //SEG161 compare::@5
  b5:
  //SEG162 [62] if((signed word) compare::w1#0!=(signed word) compare::w2#0) goto compare::@24 -- vwsz1_neq_vwsz2_then_la1 
    lda w1+1
    cmp w2+1
    bne b24_from_b5
    lda w1
    cmp w2
    bne b24_from_b5
  //SEG163 [63] phi from compare::@5 to compare::@16 [phi:compare::@5->compare::@16]
  b16_from_b5:
    jmp b16
  //SEG164 compare::@16
  b16:
  //SEG165 [64] phi from compare::@16 to compare::@24 [phi:compare::@16->compare::@24]
  b24_from_b16:
  //SEG166 [64] phi (byte) compare::r#18 = (const byte) TT#0 [phi:compare::@16->compare::@24#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b24
  //SEG167 [64] phi from compare::@5 to compare::@24 [phi:compare::@5->compare::@24]
  b24_from_b5:
  //SEG168 [64] phi (byte) compare::r#18 = (const byte) FF#0 [phi:compare::@5->compare::@24#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b24
  //SEG169 compare::@24
  b24:
  //SEG170 [44] phi from compare::@24 to compare::@6 [phi:compare::@24->compare::@6]
  b6_from_b24:
  //SEG171 [44] phi (byte) compare::r#10 = (byte) compare::r#18 [phi:compare::@24->compare::@6#0] -- register_copy 
  //SEG172 [44] phi (byte*) compare::ops#10 = (const byte*) compare::ops#2 [phi:compare::@24->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_2
    sta ops
    lda #>ops_2
    sta ops+1
    jmp b6
  //SEG173 compare::@4
  b4:
  //SEG174 [65] if((signed word) compare::w1#0<(signed word) compare::w2#0) goto compare::@25 -- vwsz1_lt_vwsz2_then_la1 
    lda w2
    cmp w1
    lda w2+1
    sbc w1+1
    bvc !+
    eor #$80
  !:
    beq !e+
    bpl b25_from_b4
  !e:
  //SEG175 [66] phi from compare::@4 to compare::@17 [phi:compare::@4->compare::@17]
  b17_from_b4:
    jmp b17
  //SEG176 compare::@17
  b17:
  //SEG177 [67] phi from compare::@17 to compare::@25 [phi:compare::@17->compare::@25]
  b25_from_b17:
  //SEG178 [67] phi (byte) compare::r#19 = (const byte) TT#0 [phi:compare::@17->compare::@25#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b25
  //SEG179 [67] phi from compare::@4 to compare::@25 [phi:compare::@4->compare::@25]
  b25_from_b4:
  //SEG180 [67] phi (byte) compare::r#19 = (const byte) FF#0 [phi:compare::@4->compare::@25#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b25
  //SEG181 compare::@25
  b25:
  //SEG182 [44] phi from compare::@25 to compare::@6 [phi:compare::@25->compare::@6]
  b6_from_b25:
  //SEG183 [44] phi (byte) compare::r#10 = (byte) compare::r#19 [phi:compare::@25->compare::@6#0] -- register_copy 
  //SEG184 [44] phi (byte*) compare::ops#10 = (const byte*) compare::ops#3 [phi:compare::@25->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_3
    sta ops
    lda #>ops_3
    sta ops+1
    jmp b6
  //SEG185 compare::@3
  b3:
  //SEG186 [68] if((signed word) compare::w1#0<=(signed word) compare::w2#0) goto compare::@26 -- vwsz1_le_vwsz2_then_la1 
    lda w2
    cmp w1
    lda w2+1
    sbc w1+1
    bvc !+
    eor #$80
  !:
    bpl b26_from_b3
  //SEG187 [69] phi from compare::@3 to compare::@18 [phi:compare::@3->compare::@18]
  b18_from_b3:
    jmp b18
  //SEG188 compare::@18
  b18:
  //SEG189 [70] phi from compare::@18 to compare::@26 [phi:compare::@18->compare::@26]
  b26_from_b18:
  //SEG190 [70] phi (byte) compare::r#20 = (const byte) TT#0 [phi:compare::@18->compare::@26#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b26
  //SEG191 [70] phi from compare::@3 to compare::@26 [phi:compare::@3->compare::@26]
  b26_from_b3:
  //SEG192 [70] phi (byte) compare::r#20 = (const byte) FF#0 [phi:compare::@3->compare::@26#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b26
  //SEG193 compare::@26
  b26:
  //SEG194 [44] phi from compare::@26 to compare::@6 [phi:compare::@26->compare::@6]
  b6_from_b26:
  //SEG195 [44] phi (byte) compare::r#10 = (byte) compare::r#20 [phi:compare::@26->compare::@6#0] -- register_copy 
  //SEG196 [44] phi (byte*) compare::ops#10 = (const byte*) compare::ops#4 [phi:compare::@26->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_4
    sta ops
    lda #>ops_4
    sta ops+1
    jmp b6
  //SEG197 compare::@2
  b2:
  //SEG198 [71] if((signed word) compare::w1#0>(signed word) compare::w2#0) goto compare::@27 -- vwsz1_gt_vwsz2_then_la1 
    lda w1
    cmp w2
    lda w1+1
    sbc w2+1
    bvc !+
    eor #$80
  !:
    beq !e+
    bpl b27_from_b2
  !e:
  //SEG199 [72] phi from compare::@2 to compare::@19 [phi:compare::@2->compare::@19]
  b19_from_b2:
    jmp b19
  //SEG200 compare::@19
  b19:
  //SEG201 [73] phi from compare::@19 to compare::@27 [phi:compare::@19->compare::@27]
  b27_from_b19:
  //SEG202 [73] phi (byte) compare::r#21 = (const byte) TT#0 [phi:compare::@19->compare::@27#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b27
  //SEG203 [73] phi from compare::@2 to compare::@27 [phi:compare::@2->compare::@27]
  b27_from_b2:
  //SEG204 [73] phi (byte) compare::r#21 = (const byte) FF#0 [phi:compare::@2->compare::@27#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b27
  //SEG205 compare::@27
  b27:
  //SEG206 [44] phi from compare::@27 to compare::@6 [phi:compare::@27->compare::@6]
  b6_from_b27:
  //SEG207 [44] phi (byte) compare::r#10 = (byte) compare::r#21 [phi:compare::@27->compare::@6#0] -- register_copy 
  //SEG208 [44] phi (byte*) compare::ops#10 = (const byte*) compare::ops#5 [phi:compare::@27->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_5
    sta ops
    lda #>ops_5
    sta ops+1
    jmp b6
  //SEG209 compare::@1
  b1:
  //SEG210 [74] if((signed word) compare::w1#0>=(signed word) compare::w2#0) goto compare::@28 -- vwsz1_ge_vwsz2_then_la1 
    lda w1
    cmp w2
    lda w1+1
    sbc w2+1
    bvc !+
    eor #$80
  !:
    bpl b28_from_b1
  //SEG211 [75] phi from compare::@1 to compare::@20 [phi:compare::@1->compare::@20]
  b20_from_b1:
    jmp b20
  //SEG212 compare::@20
  b20:
  //SEG213 [76] phi from compare::@20 to compare::@28 [phi:compare::@20->compare::@28]
  b28_from_b20:
  //SEG214 [76] phi (byte) compare::r#22 = (const byte) TT#0 [phi:compare::@20->compare::@28#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b28
  //SEG215 [76] phi from compare::@1 to compare::@28 [phi:compare::@1->compare::@28]
  b28_from_b1:
  //SEG216 [76] phi (byte) compare::r#22 = (const byte) FF#0 [phi:compare::@1->compare::@28#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b28
  //SEG217 compare::@28
  b28:
  //SEG218 [44] phi from compare::@28 to compare::@6 [phi:compare::@28->compare::@6]
  b6_from_b28:
  //SEG219 [44] phi (byte) compare::r#10 = (byte) compare::r#22 [phi:compare::@28->compare::@6#0] -- register_copy 
  //SEG220 [44] phi (byte*) compare::ops#10 = (const byte*) compare::ops#6 [phi:compare::@28->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_6
    sta ops
    lda #>ops_6
    sta ops+1
    jmp b6
    ops_1: .text "!=@"
    ops_2: .text "==@"
    ops_3: .text ">=@"
    ops_4: .text "> @"
    ops_5: .text "<=@"
    ops_6: .text "< @"
}
//SEG221 print_char
// Print a single char
// print_char(byte zeropage($b) ch)
print_char: {
    .label ch = $b
  //SEG222 [78] *((byte*) print_char_cursor#43) ← (byte) print_char::ch#6 -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (print_char_cursor),y
  //SEG223 [79] (byte*) print_char_cursor#14 ← ++ (byte*) print_char_cursor#43 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG224 print_char::@return
  breturn:
  //SEG225 [80] return 
    rts
}
//SEG226 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage($c) w)
print_sword: {
    .label w = $c
  //SEG227 [82] if((signed word) print_sword::w#3>=(signed byte) 0) goto print_sword::@1 -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1_from_print_sword
  //SEG228 [83] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  b2_from_print_sword:
    jmp b2
  //SEG229 print_sword::@2
  b2:
  //SEG230 [84] call print_char 
  //SEG231 [77] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  print_char_from_b2:
  //SEG232 [77] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#61 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG233 [77] phi (byte) print_char::ch#6 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta print_char.ch
    jsr print_char
    jmp b3
  //SEG234 print_sword::@3
  b3:
  //SEG235 [85] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG236 [86] phi from print_sword print_sword::@3 to print_sword::@1 [phi:print_sword/print_sword::@3->print_sword::@1]
  b1_from_print_sword:
  b1_from_b3:
  //SEG237 [86] phi (byte*) print_char_cursor#60 = (byte*) print_char_cursor#61 [phi:print_sword/print_sword::@3->print_sword::@1#0] -- register_copy 
  //SEG238 [86] phi (signed word) print_sword::w#4 = (signed word) print_sword::w#3 [phi:print_sword/print_sword::@3->print_sword::@1#1] -- register_copy 
    jmp b1
  //SEG239 print_sword::@1
  b1:
  //SEG240 [87] call print_word 
    jsr print_word
    jmp breturn
  //SEG241 print_sword::@return
  breturn:
  //SEG242 [88] return 
    rts
}
//SEG243 print_word
// Print a word as HEX
print_word: {
  //SEG244 [89] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#4 -- vbuz1=_hi_vwuz2 
    lda print_sword.w+1
    sta print_byte.b
  //SEG245 [90] call print_byte 
  //SEG246 [94] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG247 [94] phi (byte*) print_char_cursor#63 = (byte*) print_char_cursor#60 [phi:print_word->print_byte#0] -- register_copy 
  //SEG248 [94] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG249 print_word::@1
  b1:
  //SEG250 [91] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#4 -- vbuz1=_lo_vwuz2 
    lda print_sword.w
    sta print_byte.b
  //SEG251 [92] call print_byte 
  //SEG252 [94] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG253 [94] phi (byte*) print_char_cursor#63 = (byte*) print_char_cursor#14 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG254 [94] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG255 print_word::@return
  breturn:
  //SEG256 [93] return 
    rts
}
//SEG257 print_byte
// Print a byte as HEX
// print_byte(byte zeropage($10) b)
print_byte: {
    .label _0 = $20
    .label _2 = $21
    .label b = $10
  //SEG258 [95] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    sta _0
  //SEG259 [96] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda print_hextab,y
    sta print_char.ch
  //SEG260 [97] call print_char 
  //SEG261 [77] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG262 [77] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#63 [phi:print_byte->print_char#0] -- register_copy 
  //SEG263 [77] phi (byte) print_char::ch#6 = (byte) print_char::ch#1 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG264 print_byte::@1
  b1:
  //SEG265 [98] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and b
    sta _2
  //SEG266 [99] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda print_hextab,y
    sta print_char.ch
  //SEG267 [100] call print_char 
  //SEG268 [77] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG269 [77] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#14 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG270 [77] phi (byte) print_char::ch#6 = (byte) print_char::ch#2 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG271 print_byte::@return
  breturn:
  //SEG272 [101] return 
    rts
}
//SEG273 print_str
// Print a zero-terminated string
// print_str(byte* zeropage($11) str)
print_str: {
    .label str = $11
  //SEG274 [103] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG275 [103] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#14 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG276 [103] phi (byte*) print_str::str#2 = (byte*) print_str::str#1 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG277 print_str::@1
  b1:
  //SEG278 [104] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG279 print_str::@return
  breturn:
  //SEG280 [105] return 
    rts
  //SEG281 print_str::@2
  b2:
  //SEG282 [106] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG283 [107] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG284 [108] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG285 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $13
  //SEG286 [110] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG287 [110] phi (byte*) print_cls::sc#2 = (byte*) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG288 [110] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG289 [110] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG290 print_cls::@1
  b1:
  //SEG291 [111] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG292 [112] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG293 [113] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG294 print_cls::@return
  breturn:
  //SEG295 [114] return 
    rts
}
  print_hextab: .text "0123456789abcdef"
  swords: .word -$6fed, $12, $7fed

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1 [ main::i#2 print_char_cursor#80 main::s#7 print_line_cursor#31 main::$8 ] ( main:2 [ main::i#2 print_char_cursor#80 main::s#7 print_line_cursor#31 main::$8 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
Statement [8] (signed word) main::w1#0 ← *((const signed word[]) swords#0 + (byte~) main::$8) [ main::i#2 print_char_cursor#80 main::s#7 print_line_cursor#31 main::w1#0 ] ( main:2 [ main::i#2 print_char_cursor#80 main::s#7 print_line_cursor#31 main::w1#0 ] ) always clobbers reg byte a 
Statement [10] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1 [ main::i#2 main::w1#0 main::j#2 print_char_cursor#75 main::s#5 print_line_cursor#29 main::$9 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 print_char_cursor#75 main::s#5 print_line_cursor#29 main::$9 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ main::j#2 main::j#1 ]
Statement [11] (signed word) main::w2#0 ← *((const signed word[]) swords#0 + (byte~) main::$9) [ main::i#2 main::w1#0 main::j#2 print_char_cursor#75 main::s#5 print_line_cursor#29 main::w2#0 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 print_char_cursor#75 main::s#5 print_line_cursor#29 main::w2#0 ] ) always clobbers reg byte a 
Statement [13] (signed word) compare::w1#0 ← (signed word) main::w1#0 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#67 main::s#3 print_line_cursor#19 compare::w1#0 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#67 main::s#3 print_line_cursor#19 compare::w1#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ main::op#2 main::op#1 ]
Statement [14] (signed word) compare::w2#0 ← (signed word) main::w2#0 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#67 main::s#3 print_line_cursor#19 compare::w1#0 compare::w2#0 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#67 main::s#3 print_line_cursor#19 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [21] (byte*~) print_char_cursor#128 ← (byte*) print_line_cursor#1 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#128 print_line_cursor#1 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#128 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [32] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 [ print_line_cursor#1 print_char_cursor#14 ] ( main:2::print_ln:20 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_line_cursor#1 print_char_cursor#14 ] ) always clobbers reg byte a 
Statement [33] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#14) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#14 ] ( main:2::print_ln:20 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_line_cursor#1 print_char_cursor#14 ] ) always clobbers reg byte a 
Statement [41] if((signed word) compare::w1#0==(signed word) compare::w2#0) goto compare::@23 [ print_char_cursor#67 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#67 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [45] if((signed word) compare::w1#0<(signed byte) 0) goto compare::@7 [ print_char_cursor#67 compare::w1#0 compare::w2#0 compare::ops#10 compare::r#10 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#67 compare::w1#0 compare::w2#0 compare::ops#10 compare::r#10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:10 [ compare::r#10 compare::r#17 compare::r#18 compare::r#19 compare::r#20 compare::r#21 compare::r#22 ]
Statement [49] (signed word) print_sword::w#1 ← (signed word) compare::w1#0 [ compare::w2#0 compare::ops#10 compare::r#10 print_char_cursor#70 print_sword::w#1 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_char_cursor#70 print_sword::w#1 ] ) always clobbers reg byte a 
Statement [51] (byte*) print_str::str#1 ← (byte*) compare::ops#10 [ compare::w2#0 print_char_cursor#14 compare::r#10 print_str::str#1 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 print_char_cursor#14 compare::r#10 print_str::str#1 ] ) always clobbers reg byte a 
Statement [53] if((signed word) compare::w2#0<(signed byte) 0) goto compare::@8 [ compare::w2#0 compare::r#10 print_char_cursor#2 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::r#10 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [57] (signed word) print_sword::w#2 ← (signed word) compare::w2#0 [ compare::r#10 print_char_cursor#71 print_sword::w#2 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#71 print_sword::w#2 ] ) always clobbers reg byte a 
Statement [62] if((signed word) compare::w1#0!=(signed word) compare::w2#0) goto compare::@24 [ print_char_cursor#67 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#67 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [65] if((signed word) compare::w1#0<(signed word) compare::w2#0) goto compare::@25 [ print_char_cursor#67 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#67 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [68] if((signed word) compare::w1#0<=(signed word) compare::w2#0) goto compare::@26 [ print_char_cursor#67 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#67 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [71] if((signed word) compare::w1#0>(signed word) compare::w2#0) goto compare::@27 [ print_char_cursor#67 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#67 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [74] if((signed word) compare::w1#0>=(signed word) compare::w2#0) goto compare::@28 [ print_char_cursor#67 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#67 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [78] *((byte*) print_char_cursor#43) ← (byte) print_char::ch#6 [ print_char_cursor#43 ] ( main:2::compare:16::print_char:47 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w1#0 compare::w2#0 compare::ops#10 compare::r#10 print_char_cursor#43 ] main:2::compare:16::print_char:55 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::r#10 print_char_cursor#43 ] main:2::compare:16::print_char:60 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#43 ] main:2::compare:16::print_sword:50::print_char:84 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_sword::w#3 print_char_cursor#43 ] main:2::compare:16::print_sword:58::print_char:84 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_sword::w#3 print_char_cursor#43 ] main:2::compare:16::print_sword:50::print_word:87::print_byte:90::print_char:97 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_sword::w#4 print_byte::b#2 print_char_cursor#43 ] main:2::compare:16::print_sword:58::print_word:87::print_byte:90::print_char:97 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_sword::w#4 print_byte::b#2 print_char_cursor#43 ] main:2::compare:16::print_sword:50::print_word:87::print_byte:92::print_char:97 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_byte::b#2 print_char_cursor#43 ] main:2::compare:16::print_sword:58::print_word:87::print_byte:92::print_char:97 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_byte::b#2 print_char_cursor#43 ] main:2::compare:16::print_sword:50::print_word:87::print_byte:90::print_char:100 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_sword::w#4 print_char_cursor#43 ] main:2::compare:16::print_sword:58::print_word:87::print_byte:90::print_char:100 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_sword::w#4 print_char_cursor#43 ] main:2::compare:16::print_sword:50::print_word:87::print_byte:92::print_char:100 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_char_cursor#43 ] main:2::compare:16::print_sword:58::print_word:87::print_byte:92::print_char:100 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#43 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:3 [ main::j#2 main::j#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:4 [ main::op#2 main::op#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:10 [ compare::r#10 compare::r#17 compare::r#18 compare::r#19 compare::r#20 compare::r#21 compare::r#22 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [82] if((signed word) print_sword::w#3>=(signed byte) 0) goto print_sword::@1 [ print_char_cursor#61 print_sword::w#3 ] ( main:2::compare:16::print_sword:50 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_char_cursor#61 print_sword::w#3 ] main:2::compare:16::print_sword:58 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#61 print_sword::w#3 ] ) always clobbers reg byte a 
Statement [85] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 [ print_char_cursor#14 print_sword::w#0 ] ( main:2::compare:16::print_sword:50 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_char_cursor#14 print_sword::w#0 ] main:2::compare:16::print_sword:58 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#14 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [89] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#4 [ print_sword::w#4 print_char_cursor#60 print_byte::b#0 ] ( main:2::compare:16::print_sword:50::print_word:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_sword::w#4 print_char_cursor#60 print_byte::b#0 ] main:2::compare:16::print_sword:58::print_word:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_sword::w#4 print_char_cursor#60 print_byte::b#0 ] ) always clobbers reg byte a 
Statement [91] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#4 [ print_char_cursor#14 print_byte::b#1 ] ( main:2::compare:16::print_sword:50::print_word:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_char_cursor#14 print_byte::b#1 ] main:2::compare:16::print_sword:58::print_word:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#14 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [95] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 [ print_char_cursor#63 print_byte::b#2 print_byte::$0 ] ( main:2::compare:16::print_sword:50::print_word:87::print_byte:90 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_sword::w#4 print_char_cursor#63 print_byte::b#2 print_byte::$0 ] main:2::compare:16::print_sword:58::print_word:87::print_byte:90 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_sword::w#4 print_char_cursor#63 print_byte::b#2 print_byte::$0 ] main:2::compare:16::print_sword:50::print_word:87::print_byte:92 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_char_cursor#63 print_byte::b#2 print_byte::$0 ] main:2::compare:16::print_sword:58::print_word:87::print_byte:92 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#63 print_byte::b#2 print_byte::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [98] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f [ print_char_cursor#14 print_byte::$2 ] ( main:2::compare:16::print_sword:50::print_word:87::print_byte:90 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_sword::w#4 print_char_cursor#14 print_byte::$2 ] main:2::compare:16::print_sword:58::print_word:87::print_byte:90 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_sword::w#4 print_char_cursor#14 print_byte::$2 ] main:2::compare:16::print_sword:50::print_word:87::print_byte:92 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_char_cursor#14 print_byte::$2 ] main:2::compare:16::print_sword:58::print_word:87::print_byte:92 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#14 print_byte::$2 ] ) always clobbers reg byte a 
Statement [104] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 [ print_char_cursor#2 print_str::str#2 ] ( main:2::compare:16::print_str:52 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::r#10 print_char_cursor#2 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [106] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2) [ print_char_cursor#2 print_str::str#2 ] ( main:2::compare:16::print_str:52 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::r#10 print_char_cursor#2 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [111] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [113] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [7] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1 [ main::i#2 print_char_cursor#80 main::s#7 print_line_cursor#31 main::$8 ] ( main:2 [ main::i#2 print_char_cursor#80 main::s#7 print_line_cursor#31 main::$8 ] ) always clobbers reg byte a 
Statement [8] (signed word) main::w1#0 ← *((const signed word[]) swords#0 + (byte~) main::$8) [ main::i#2 print_char_cursor#80 main::s#7 print_line_cursor#31 main::w1#0 ] ( main:2 [ main::i#2 print_char_cursor#80 main::s#7 print_line_cursor#31 main::w1#0 ] ) always clobbers reg byte a 
Statement [10] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1 [ main::i#2 main::w1#0 main::j#2 print_char_cursor#75 main::s#5 print_line_cursor#29 main::$9 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 print_char_cursor#75 main::s#5 print_line_cursor#29 main::$9 ] ) always clobbers reg byte a 
Statement [11] (signed word) main::w2#0 ← *((const signed word[]) swords#0 + (byte~) main::$9) [ main::i#2 main::w1#0 main::j#2 print_char_cursor#75 main::s#5 print_line_cursor#29 main::w2#0 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 print_char_cursor#75 main::s#5 print_line_cursor#29 main::w2#0 ] ) always clobbers reg byte a 
Statement [13] (signed word) compare::w1#0 ← (signed word) main::w1#0 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#67 main::s#3 print_line_cursor#19 compare::w1#0 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#67 main::s#3 print_line_cursor#19 compare::w1#0 ] ) always clobbers reg byte a 
Statement [14] (signed word) compare::w2#0 ← (signed word) main::w2#0 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#67 main::s#3 print_line_cursor#19 compare::w1#0 compare::w2#0 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#67 main::s#3 print_line_cursor#19 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [21] (byte*~) print_char_cursor#128 ← (byte*) print_line_cursor#1 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#128 print_line_cursor#1 ] ( main:2 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_char_cursor#128 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [32] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 [ print_line_cursor#1 print_char_cursor#14 ] ( main:2::print_ln:20 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_line_cursor#1 print_char_cursor#14 ] ) always clobbers reg byte a 
Statement [33] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#14) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#14 ] ( main:2::print_ln:20 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 print_line_cursor#1 print_char_cursor#14 ] ) always clobbers reg byte a 
Statement [41] if((signed word) compare::w1#0==(signed word) compare::w2#0) goto compare::@23 [ print_char_cursor#67 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#67 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [45] if((signed word) compare::w1#0<(signed byte) 0) goto compare::@7 [ print_char_cursor#67 compare::w1#0 compare::w2#0 compare::ops#10 compare::r#10 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#67 compare::w1#0 compare::w2#0 compare::ops#10 compare::r#10 ] ) always clobbers reg byte a 
Statement [49] (signed word) print_sword::w#1 ← (signed word) compare::w1#0 [ compare::w2#0 compare::ops#10 compare::r#10 print_char_cursor#70 print_sword::w#1 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_char_cursor#70 print_sword::w#1 ] ) always clobbers reg byte a 
Statement [51] (byte*) print_str::str#1 ← (byte*) compare::ops#10 [ compare::w2#0 print_char_cursor#14 compare::r#10 print_str::str#1 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 print_char_cursor#14 compare::r#10 print_str::str#1 ] ) always clobbers reg byte a 
Statement [53] if((signed word) compare::w2#0<(signed byte) 0) goto compare::@8 [ compare::w2#0 compare::r#10 print_char_cursor#2 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::r#10 print_char_cursor#2 ] ) always clobbers reg byte a 
Statement [57] (signed word) print_sword::w#2 ← (signed word) compare::w2#0 [ compare::r#10 print_char_cursor#71 print_sword::w#2 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#71 print_sword::w#2 ] ) always clobbers reg byte a 
Statement [62] if((signed word) compare::w1#0!=(signed word) compare::w2#0) goto compare::@24 [ print_char_cursor#67 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#67 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [65] if((signed word) compare::w1#0<(signed word) compare::w2#0) goto compare::@25 [ print_char_cursor#67 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#67 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [68] if((signed word) compare::w1#0<=(signed word) compare::w2#0) goto compare::@26 [ print_char_cursor#67 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#67 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [71] if((signed word) compare::w1#0>(signed word) compare::w2#0) goto compare::@27 [ print_char_cursor#67 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#67 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [74] if((signed word) compare::w1#0>=(signed word) compare::w2#0) goto compare::@28 [ print_char_cursor#67 compare::w1#0 compare::w2#0 ] ( main:2::compare:16 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#67 compare::w1#0 compare::w2#0 ] ) always clobbers reg byte a 
Statement [78] *((byte*) print_char_cursor#43) ← (byte) print_char::ch#6 [ print_char_cursor#43 ] ( main:2::compare:16::print_char:47 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w1#0 compare::w2#0 compare::ops#10 compare::r#10 print_char_cursor#43 ] main:2::compare:16::print_char:55 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::r#10 print_char_cursor#43 ] main:2::compare:16::print_char:60 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 print_char_cursor#43 ] main:2::compare:16::print_sword:50::print_char:84 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_sword::w#3 print_char_cursor#43 ] main:2::compare:16::print_sword:58::print_char:84 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_sword::w#3 print_char_cursor#43 ] main:2::compare:16::print_sword:50::print_word:87::print_byte:90::print_char:97 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_sword::w#4 print_byte::b#2 print_char_cursor#43 ] main:2::compare:16::print_sword:58::print_word:87::print_byte:90::print_char:97 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_sword::w#4 print_byte::b#2 print_char_cursor#43 ] main:2::compare:16::print_sword:50::print_word:87::print_byte:92::print_char:97 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_byte::b#2 print_char_cursor#43 ] main:2::compare:16::print_sword:58::print_word:87::print_byte:92::print_char:97 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_byte::b#2 print_char_cursor#43 ] main:2::compare:16::print_sword:50::print_word:87::print_byte:90::print_char:100 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_sword::w#4 print_char_cursor#43 ] main:2::compare:16::print_sword:58::print_word:87::print_byte:90::print_char:100 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_sword::w#4 print_char_cursor#43 ] main:2::compare:16::print_sword:50::print_word:87::print_byte:92::print_char:100 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_char_cursor#43 ] main:2::compare:16::print_sword:58::print_word:87::print_byte:92::print_char:100 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#43 ] ) always clobbers reg byte y 
Statement [82] if((signed word) print_sword::w#3>=(signed byte) 0) goto print_sword::@1 [ print_char_cursor#61 print_sword::w#3 ] ( main:2::compare:16::print_sword:50 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_char_cursor#61 print_sword::w#3 ] main:2::compare:16::print_sword:58 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#61 print_sword::w#3 ] ) always clobbers reg byte a 
Statement [85] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 [ print_char_cursor#14 print_sword::w#0 ] ( main:2::compare:16::print_sword:50 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_char_cursor#14 print_sword::w#0 ] main:2::compare:16::print_sword:58 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#14 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [89] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#4 [ print_sword::w#4 print_char_cursor#60 print_byte::b#0 ] ( main:2::compare:16::print_sword:50::print_word:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_sword::w#4 print_char_cursor#60 print_byte::b#0 ] main:2::compare:16::print_sword:58::print_word:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_sword::w#4 print_char_cursor#60 print_byte::b#0 ] ) always clobbers reg byte a 
Statement [91] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#4 [ print_char_cursor#14 print_byte::b#1 ] ( main:2::compare:16::print_sword:50::print_word:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_char_cursor#14 print_byte::b#1 ] main:2::compare:16::print_sword:58::print_word:87 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#14 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [95] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 [ print_char_cursor#63 print_byte::b#2 print_byte::$0 ] ( main:2::compare:16::print_sword:50::print_word:87::print_byte:90 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_sword::w#4 print_char_cursor#63 print_byte::b#2 print_byte::$0 ] main:2::compare:16::print_sword:58::print_word:87::print_byte:90 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_sword::w#4 print_char_cursor#63 print_byte::b#2 print_byte::$0 ] main:2::compare:16::print_sword:50::print_word:87::print_byte:92 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_char_cursor#63 print_byte::b#2 print_byte::$0 ] main:2::compare:16::print_sword:58::print_word:87::print_byte:92 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#63 print_byte::b#2 print_byte::$0 ] ) always clobbers reg byte a 
Statement [98] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f [ print_char_cursor#14 print_byte::$2 ] ( main:2::compare:16::print_sword:50::print_word:87::print_byte:90 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_sword::w#4 print_char_cursor#14 print_byte::$2 ] main:2::compare:16::print_sword:58::print_word:87::print_byte:90 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_sword::w#4 print_char_cursor#14 print_byte::$2 ] main:2::compare:16::print_sword:50::print_word:87::print_byte:92 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::ops#10 compare::r#10 print_char_cursor#14 print_byte::$2 ] main:2::compare:16::print_sword:58::print_word:87::print_byte:92 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::r#10 print_char_cursor#14 print_byte::$2 ] ) always clobbers reg byte a 
Statement [104] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 [ print_char_cursor#2 print_str::str#2 ] ( main:2::compare:16::print_str:52 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::r#10 print_char_cursor#2 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [106] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2) [ print_char_cursor#2 print_str::str#2 ] ( main:2::compare:16::print_str:52 [ main::i#2 main::w1#0 main::j#2 main::w2#0 main::op#2 main::s#3 print_line_cursor#19 compare::w2#0 compare::r#10 print_char_cursor#2 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [111] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [113] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_BYTE:3 [ main::j#2 main::j#1 ] : zp ZP_BYTE:3 , reg byte x , 
Potential registers zp ZP_BYTE:4 [ main::op#2 main::op#1 ] : zp ZP_BYTE:4 , reg byte x , 
Potential registers zp ZP_BYTE:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ] : zp ZP_BYTE:5 , reg byte x , 
Potential registers zp ZP_WORD:6 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#29 print_line_cursor#31 print_line_cursor#23 print_line_cursor#1 ] : zp ZP_WORD:6 , 
Potential registers zp ZP_WORD:8 [ compare::ops#10 ] : zp ZP_WORD:8 , 
Potential registers zp ZP_BYTE:10 [ compare::r#10 compare::r#17 compare::r#18 compare::r#19 compare::r#20 compare::r#21 compare::r#22 ] : zp ZP_BYTE:10 , reg byte x , 
Potential registers zp ZP_BYTE:11 [ print_char::ch#6 print_char::ch#4 print_char::ch#1 print_char::ch#2 ] : zp ZP_BYTE:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:12 [ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ] : zp ZP_WORD:12 , 
Potential registers zp ZP_WORD:14 [ print_char_cursor#60 print_char_cursor#43 print_char_cursor#71 print_char_cursor#2 print_char_cursor#70 print_char_cursor#67 print_char_cursor#75 print_char_cursor#80 print_char_cursor#76 print_char_cursor#14 print_char_cursor#128 print_char_cursor#63 print_char_cursor#61 print_char_cursor#1 ] : zp ZP_WORD:14 , 
Potential registers zp ZP_BYTE:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] : zp ZP_BYTE:16 , reg byte x , 
Potential registers zp ZP_WORD:17 [ print_str::str#2 print_str::str#1 print_str::str#0 ] : zp ZP_WORD:17 , 
Potential registers zp ZP_WORD:19 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:19 , 
Potential registers zp ZP_BYTE:21 [ main::$8 ] : zp ZP_BYTE:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:22 [ main::w1#0 ] : zp ZP_WORD:22 , 
Potential registers zp ZP_BYTE:24 [ main::$9 ] : zp ZP_BYTE:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:25 [ main::w2#0 ] : zp ZP_WORD:25 , 
Potential registers zp ZP_WORD:27 [ compare::w1#0 ] : zp ZP_WORD:27 , 
Potential registers zp ZP_WORD:29 [ compare::w2#0 ] : zp ZP_WORD:29 , 
Potential registers zp ZP_BYTE:31 [ compare::op#0 ] : zp ZP_BYTE:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:32 [ print_byte::$0 ] : zp ZP_BYTE:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:33 [ print_byte::$2 ] : zp ZP_BYTE:33 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 27,162.22: zp ZP_WORD:6 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#29 print_line_cursor#31 print_line_cursor#23 print_line_cursor#1 ] 17,214.99: zp ZP_WORD:14 [ print_char_cursor#60 print_char_cursor#43 print_char_cursor#71 print_char_cursor#2 print_char_cursor#70 print_char_cursor#67 print_char_cursor#75 print_char_cursor#80 print_char_cursor#76 print_char_cursor#14 print_char_cursor#128 print_char_cursor#63 print_char_cursor#61 print_char_cursor#1 ] 
Uplift Scope [print_str] 30,005.5: zp ZP_WORD:17 [ print_str::str#2 print_str::str#1 print_str::str#0 ] 
Uplift Scope [main] 2,302.43: zp ZP_BYTE:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ] 1,774.5: zp ZP_BYTE:4 [ main::op#2 main::op#1 ] 202: zp ZP_BYTE:24 [ main::$9 ] 170.44: zp ZP_BYTE:3 [ main::j#2 main::j#1 ] 78.71: zp ZP_WORD:25 [ main::w2#0 ] 53.26: zp ZP_WORD:22 [ main::w1#0 ] 22: zp ZP_BYTE:21 [ main::$8 ] 18.07: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Uplift Scope [compare] 168.83: zp ZP_BYTE:31 [ compare::op#0 ] 31.78: zp ZP_WORD:27 [ compare::w1#0 ] 26.08: zp ZP_WORD:29 [ compare::w2#0 ] 12.93: zp ZP_BYTE:10 [ compare::r#10 compare::r#17 compare::r#18 compare::r#19 compare::r#20 compare::r#21 compare::r#22 ] 0.29: zp ZP_WORD:8 [ compare::ops#10 ] 
Uplift Scope [print_cls] 33: zp ZP_WORD:19 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [print_char] 20: zp ZP_BYTE:11 [ print_char::ch#6 print_char::ch#4 print_char::ch#1 print_char::ch#2 ] 
Uplift Scope [print_byte] 10: zp ZP_BYTE:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 4: zp ZP_BYTE:32 [ print_byte::$0 ] 4: zp ZP_BYTE:33 [ print_byte::$2 ] 
Uplift Scope [print_sword] 15.83: zp ZP_WORD:12 [ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ] 
Uplift Scope [print_ln] 
Uplift Scope [print_word] 

Uplifting [] best 1156373 combination zp ZP_WORD:6 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#29 print_line_cursor#31 print_line_cursor#23 print_line_cursor#1 ] zp ZP_WORD:14 [ print_char_cursor#60 print_char_cursor#43 print_char_cursor#71 print_char_cursor#2 print_char_cursor#70 print_char_cursor#67 print_char_cursor#75 print_char_cursor#80 print_char_cursor#76 print_char_cursor#14 print_char_cursor#128 print_char_cursor#63 print_char_cursor#61 print_char_cursor#1 ] 
Uplifting [print_str] best 1156373 combination zp ZP_WORD:17 [ print_str::str#2 print_str::str#1 print_str::str#0 ] 
Uplifting [main] best 1143933 combination zp ZP_BYTE:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ] reg byte x [ main::op#2 main::op#1 ] reg byte a [ main::$9 ] zp ZP_BYTE:3 [ main::j#2 main::j#1 ] zp ZP_WORD:25 [ main::w2#0 ] zp ZP_WORD:22 [ main::w1#0 ] reg byte a [ main::$8 ] zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Limited combination testing to 100 combinations of 256 possible.
Uplifting [compare] best 1140915 combination reg byte x [ compare::op#0 ] zp ZP_WORD:27 [ compare::w1#0 ] zp ZP_WORD:29 [ compare::w2#0 ] zp ZP_BYTE:10 [ compare::r#10 compare::r#17 compare::r#18 compare::r#19 compare::r#20 compare::r#21 compare::r#22 ] zp ZP_WORD:8 [ compare::ops#10 ] 
Uplifting [print_cls] best 1140915 combination zp ZP_WORD:19 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [print_char] best 1140894 combination reg byte a [ print_char::ch#6 print_char::ch#4 print_char::ch#1 print_char::ch#2 ] 
Uplifting [print_byte] best 1140886 combination zp ZP_BYTE:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] reg byte a [ print_byte::$0 ] reg byte a [ print_byte::$2 ] 
Uplifting [print_sword] best 1140886 combination zp ZP_WORD:12 [ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ] 
Uplifting [print_ln] best 1140886 combination 
Uplifting [print_word] best 1140886 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
Uplifting [main] best 1140886 combination zp ZP_BYTE:5 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ main::j#2 main::j#1 ]
Uplifting [main] best 1140886 combination zp ZP_BYTE:3 [ main::j#2 main::j#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 1140886 combination zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:10 [ compare::r#10 compare::r#17 compare::r#18 compare::r#19 compare::r#20 compare::r#21 compare::r#22 ]
Uplifting [compare] best 1140886 combination zp ZP_BYTE:10 [ compare::r#10 compare::r#17 compare::r#18 compare::r#19 compare::r#20 compare::r#21 compare::r#22 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Uplifting [print_byte] best 1140886 combination zp ZP_BYTE:16 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:8 [ compare::ops#10 ] ] with [ zp ZP_WORD:17 [ print_str::str#2 print_str::str#1 print_str::str#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:12 [ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 ] ] with [ zp ZP_WORD:27 [ compare::w1#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:25 [ main::w2#0 ] ] with [ zp ZP_WORD:29 [ compare::w2#0 ] ] - score: 1
Allocated (was zp ZP_BYTE:5) zp ZP_BYTE:4 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
Allocated (was zp ZP_WORD:6) zp ZP_WORD:5 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#29 print_line_cursor#31 print_line_cursor#23 print_line_cursor#1 ]
Allocated (was zp ZP_WORD:8) zp ZP_WORD:7 [ compare::ops#10 print_str::str#2 print_str::str#1 print_str::str#0 ]
Allocated (was zp ZP_BYTE:10) zp ZP_BYTE:9 [ compare::r#10 compare::r#17 compare::r#18 compare::r#19 compare::r#20 compare::r#21 compare::r#22 ]
Allocated (was zp ZP_WORD:12) zp ZP_WORD:10 [ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 compare::w1#0 ]
Allocated (was zp ZP_WORD:14) zp ZP_WORD:12 [ print_char_cursor#60 print_char_cursor#43 print_char_cursor#71 print_char_cursor#2 print_char_cursor#70 print_char_cursor#67 print_char_cursor#75 print_char_cursor#80 print_char_cursor#76 print_char_cursor#14 print_char_cursor#128 print_char_cursor#63 print_char_cursor#61 print_char_cursor#1 ]
Allocated (was zp ZP_BYTE:16) zp ZP_BYTE:14 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Allocated (was zp ZP_WORD:19) zp ZP_WORD:15 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated (was zp ZP_WORD:22) zp ZP_WORD:17 [ main::w1#0 ]
Allocated (was zp ZP_WORD:25) zp ZP_WORD:19 [ main::w2#0 compare::w2#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Test signed word comparisons
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const LT = 0
  .const LE = 1
  .const GT = 2
  .const GE = 3
  .const EQ = 4
  .const NE = 5
  // empty circle
  .const FF = $57
  // filled circle
  .const TT = $51
  .label print_char_cursor = $c
  .label print_line_cursor = 5
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label w1 = $11
    .label w2 = $13
    .label s = 4
    .label j = 3
    .label i = 2
  //SEG11 [5] call print_cls 
  //SEG12 [109] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG13 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG14 [6] phi (byte*) print_line_cursor#31 = (byte*) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG15 [6] phi (byte) main::s#7 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta s
  //SEG16 [6] phi (byte*) print_char_cursor#80 = (byte*) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG17 [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG18 [6] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
  b1_from_b7:
  //SEG19 [6] phi (byte*) print_line_cursor#31 = (byte*) print_line_cursor#23 [phi:main::@7->main::@1#0] -- register_copy 
  //SEG20 [6] phi (byte) main::s#7 = (byte) main::s#10 [phi:main::@7->main::@1#1] -- register_copy 
  //SEG21 [6] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#76 [phi:main::@7->main::@1#2] -- register_copy 
  //SEG22 [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@7->main::@1#3] -- register_copy 
    jmp b1
  //SEG23 main::@1
  b1:
  //SEG24 [7] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda i
    asl
  //SEG25 [8] (signed word) main::w1#0 ← *((const signed word[]) swords#0 + (byte~) main::$8) -- vwsz1=pwsc1_derefidx_vbuaa 
    tay
    lda swords,y
    sta w1
    lda swords+1,y
    sta w1+1
  //SEG26 [9] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG27 [9] phi (byte*) print_line_cursor#29 = (byte*) print_line_cursor#31 [phi:main::@1->main::@2#0] -- register_copy 
  //SEG28 [9] phi (byte) main::s#5 = (byte) main::s#7 [phi:main::@1->main::@2#1] -- register_copy 
  //SEG29 [9] phi (byte*) print_char_cursor#75 = (byte*) print_char_cursor#80 [phi:main::@1->main::@2#2] -- register_copy 
  //SEG30 [9] phi (byte) main::j#2 = (byte) 0 [phi:main::@1->main::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta j
    jmp b2
  //SEG31 [9] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  b2_from_b6:
  //SEG32 [9] phi (byte*) print_line_cursor#29 = (byte*) print_line_cursor#23 [phi:main::@6->main::@2#0] -- register_copy 
  //SEG33 [9] phi (byte) main::s#5 = (byte) main::s#10 [phi:main::@6->main::@2#1] -- register_copy 
  //SEG34 [9] phi (byte*) print_char_cursor#75 = (byte*) print_char_cursor#76 [phi:main::@6->main::@2#2] -- register_copy 
  //SEG35 [9] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@6->main::@2#3] -- register_copy 
    jmp b2
  //SEG36 main::@2
  b2:
  //SEG37 [10] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda j
    asl
  //SEG38 [11] (signed word) main::w2#0 ← *((const signed word[]) swords#0 + (byte~) main::$9) -- vwsz1=pwsc1_derefidx_vbuaa 
    tay
    lda swords,y
    sta w2
    lda swords+1,y
    sta w2+1
  //SEG39 [12] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
  //SEG40 [12] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#29 [phi:main::@2->main::@3#0] -- register_copy 
  //SEG41 [12] phi (byte) main::s#3 = (byte) main::s#5 [phi:main::@2->main::@3#1] -- register_copy 
  //SEG42 [12] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#75 [phi:main::@2->main::@3#2] -- register_copy 
  //SEG43 [12] phi (byte) main::op#2 = (byte) 0 [phi:main::@2->main::@3#3] -- vbuxx=vbuc1 
    ldx #0
    jmp b3
  //SEG44 [12] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  b3_from_b4:
  //SEG45 [12] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#23 [phi:main::@4->main::@3#0] -- register_copy 
  //SEG46 [12] phi (byte) main::s#3 = (byte) main::s#10 [phi:main::@4->main::@3#1] -- register_copy 
  //SEG47 [12] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#76 [phi:main::@4->main::@3#2] -- register_copy 
  //SEG48 [12] phi (byte) main::op#2 = (byte) main::op#1 [phi:main::@4->main::@3#3] -- register_copy 
    jmp b3
  //SEG49 main::@3
  b3:
  //SEG50 [13] (signed word) compare::w1#0 ← (signed word) main::w1#0 -- vwsz1=vwsz2 
    lda w1
    sta compare.w1
    lda w1+1
    sta compare.w1+1
  //SEG51 [14] (signed word) compare::w2#0 ← (signed word) main::w2#0
  //SEG52 [15] (byte) compare::op#0 ← (byte) main::op#2
  //SEG53 [16] call compare 
    jsr compare
    jmp b9
  //SEG54 main::@9
  b9:
  //SEG55 [17] (byte) main::s#1 ← ++ (byte) main::s#3 -- vbuz1=_inc_vbuz1 
    inc s
  //SEG56 [18] if((byte) main::s#1!=(byte) 3) goto main::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp s
    bne b4_from_b9
  //SEG57 [19] phi from main::@9 to main::@5 [phi:main::@9->main::@5]
  b5_from_b9:
    jmp b5
  //SEG58 main::@5
  b5:
  //SEG59 [20] call print_ln 
  //SEG60 [30] phi from main::@5 to print_ln [phi:main::@5->print_ln]
  print_ln_from_b5:
    jsr print_ln
    jmp b10
  //SEG61 main::@10
  b10:
  //SEG62 [21] (byte*~) print_char_cursor#128 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG63 [22] phi from main::@10 to main::@4 [phi:main::@10->main::@4]
  b4_from_b10:
  //SEG64 [22] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#1 [phi:main::@10->main::@4#0] -- register_copy 
  //SEG65 [22] phi (byte) main::s#10 = (byte) 0 [phi:main::@10->main::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta s
  //SEG66 [22] phi (byte*) print_char_cursor#76 = (byte*~) print_char_cursor#128 [phi:main::@10->main::@4#2] -- register_copy 
    jmp b4
  //SEG67 [22] phi from main::@9 to main::@4 [phi:main::@9->main::@4]
  b4_from_b9:
  //SEG68 [22] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#19 [phi:main::@9->main::@4#0] -- register_copy 
  //SEG69 [22] phi (byte) main::s#10 = (byte) main::s#1 [phi:main::@9->main::@4#1] -- register_copy 
  //SEG70 [22] phi (byte*) print_char_cursor#76 = (byte*) print_char_cursor#14 [phi:main::@9->main::@4#2] -- register_copy 
    jmp b4
  //SEG71 main::@4
  b4:
  //SEG72 [23] (byte) main::op#1 ← ++ (byte) main::op#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG73 [24] if((byte) main::op#1!=(byte) 6) goto main::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #6
    bne b3_from_b4
    jmp b6
  //SEG74 main::@6
  b6:
  //SEG75 [25] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuz1=_inc_vbuz1 
    inc j
  //SEG76 [26] if((byte) main::j#1!=(byte) 3) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp j
    bne b2_from_b6
    jmp b7
  //SEG77 main::@7
  b7:
  //SEG78 [27] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG79 [28] if((byte) main::i#1!=(byte) 3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp i
    bne b1_from_b7
  //SEG80 [29] phi from main::@7 main::@8 to main::@8 [phi:main::@7/main::@8->main::@8]
  b8_from_b7:
  b8_from_b8:
    jmp b8
  // loop forever
  //SEG81 main::@8
  b8:
    jmp b8_from_b8
}
//SEG82 print_ln
// Print a newline
print_ln: {
  //SEG83 [31] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG84 [31] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#19 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG85 print_ln::@1
  b1:
  //SEG86 [32] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG87 [33] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#14) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG88 print_ln::@return
  breturn:
  //SEG89 [34] return 
    rts
}
//SEG90 compare
// Compare two words using an operator
// compare(signed word zeropage($a) w1, signed word zeropage($13) w2, byte register(X) op)
compare: {
    .label w1 = $a
    .label w2 = $13
    .label ops = 7
    .label r = 9
  //SEG91 [35] if((byte) compare::op#0==(const byte) LT#0) goto compare::@1 -- vbuxx_eq_vbuc1_then_la1 
    cpx #LT
    beq b1
    jmp b9
  //SEG92 compare::@9
  b9:
  //SEG93 [36] if((byte) compare::op#0==(const byte) LE#0) goto compare::@2 -- vbuxx_eq_vbuc1_then_la1 
    cpx #LE
    beq b2
    jmp b10
  //SEG94 compare::@10
  b10:
  //SEG95 [37] if((byte) compare::op#0==(const byte) GT#0) goto compare::@3 -- vbuxx_eq_vbuc1_then_la1 
    cpx #GT
    beq b3
    jmp b11
  //SEG96 compare::@11
  b11:
  //SEG97 [38] if((byte) compare::op#0==(const byte) GE#0) goto compare::@4 -- vbuxx_eq_vbuc1_then_la1 
    cpx #GE
    beq b4
    jmp b12
  //SEG98 compare::@12
  b12:
  //SEG99 [39] if((byte) compare::op#0==(const byte) EQ#0) goto compare::@5 -- vbuxx_eq_vbuc1_then_la1 
    cpx #EQ
    beq b5
    jmp b13
  //SEG100 compare::@13
  b13:
  //SEG101 [40] if((byte) compare::op#0!=(const byte) NE#0) goto compare::@6 -- vbuxx_neq_vbuc1_then_la1 
    cpx #NE
    bne b6_from_b13
    jmp b14
  //SEG102 compare::@14
  b14:
  //SEG103 [41] if((signed word) compare::w1#0==(signed word) compare::w2#0) goto compare::@23 -- vwsz1_eq_vwsz2_then_la1 
    lda w1
    cmp w2
    bne !+
    lda w1+1
    cmp w2+1
    beq b23_from_b14
  !:
  //SEG104 [42] phi from compare::@14 to compare::@15 [phi:compare::@14->compare::@15]
  b15_from_b14:
    jmp b15
  //SEG105 compare::@15
  b15:
  //SEG106 [43] phi from compare::@15 to compare::@23 [phi:compare::@15->compare::@23]
  b23_from_b15:
  //SEG107 [43] phi (byte) compare::r#17 = (const byte) TT#0 [phi:compare::@15->compare::@23#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b23
  //SEG108 [43] phi from compare::@14 to compare::@23 [phi:compare::@14->compare::@23]
  b23_from_b14:
  //SEG109 [43] phi (byte) compare::r#17 = (const byte) FF#0 [phi:compare::@14->compare::@23#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b23
  //SEG110 compare::@23
  b23:
  //SEG111 [44] phi from compare::@23 to compare::@6 [phi:compare::@23->compare::@6]
  b6_from_b23:
  //SEG112 [44] phi (byte) compare::r#10 = (byte) compare::r#17 [phi:compare::@23->compare::@6#0] -- register_copy 
  //SEG113 [44] phi (byte*) compare::ops#10 = (const byte*) compare::ops#1 [phi:compare::@23->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_1
    sta ops
    lda #>ops_1
    sta ops+1
    jmp b6
  //SEG114 [44] phi from compare::@13 to compare::@6 [phi:compare::@13->compare::@6]
  b6_from_b13:
  //SEG115 [44] phi (byte) compare::r#10 = (const byte) FF#0 [phi:compare::@13->compare::@6#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
  //SEG116 [44] phi (byte*) compare::ops#10 = (byte*) 0 [phi:compare::@13->compare::@6#1] -- pbuz1=pbuc1 
    lda #<0
    sta ops
    lda #>0
    sta ops+1
    jmp b6
  //SEG117 compare::@6
  b6:
  //SEG118 [45] if((signed word) compare::w1#0<(signed byte) 0) goto compare::@7 -- vwsz1_lt_0_then_la1 
    lda w1+1
    bmi b7_from_b6
  //SEG119 [46] phi from compare::@6 to compare::@21 [phi:compare::@6->compare::@21]
  b21_from_b6:
    jmp b21
  //SEG120 compare::@21
  b21:
  //SEG121 [47] call print_char 
  //SEG122 [77] phi from compare::@21 to print_char [phi:compare::@21->print_char]
  print_char_from_b21:
  //SEG123 [77] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#67 [phi:compare::@21->print_char#0] -- register_copy 
  //SEG124 [77] phi (byte) print_char::ch#6 = (byte) ' ' [phi:compare::@21->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
  //SEG125 [48] phi from compare::@21 compare::@6 to compare::@7 [phi:compare::@21/compare::@6->compare::@7]
  b7_from_b21:
  b7_from_b6:
  //SEG126 [48] phi (byte*) print_char_cursor#70 = (byte*) print_char_cursor#14 [phi:compare::@21/compare::@6->compare::@7#0] -- register_copy 
    jmp b7
  //SEG127 compare::@7
  b7:
  //SEG128 [49] (signed word) print_sword::w#1 ← (signed word) compare::w1#0
  //SEG129 [50] call print_sword 
  //SEG130 [81] phi from compare::@7 to print_sword [phi:compare::@7->print_sword]
  print_sword_from_b7:
  //SEG131 [81] phi (byte*) print_char_cursor#61 = (byte*) print_char_cursor#70 [phi:compare::@7->print_sword#0] -- register_copy 
  //SEG132 [81] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:compare::@7->print_sword#1] -- register_copy 
    jsr print_sword
    jmp b29
  //SEG133 compare::@29
  b29:
  //SEG134 [51] (byte*) print_str::str#1 ← (byte*) compare::ops#10
  //SEG135 [52] call print_str 
  //SEG136 [102] phi from compare::@29 to print_str [phi:compare::@29->print_str]
  print_str_from_b29:
    jsr print_str
    jmp b30
  //SEG137 compare::@30
  b30:
  //SEG138 [53] if((signed word) compare::w2#0<(signed byte) 0) goto compare::@8 -- vwsz1_lt_0_then_la1 
    lda w2+1
    bmi b8_from_b30
  //SEG139 [54] phi from compare::@30 to compare::@22 [phi:compare::@30->compare::@22]
  b22_from_b30:
    jmp b22
  //SEG140 compare::@22
  b22:
  //SEG141 [55] call print_char 
  //SEG142 [77] phi from compare::@22 to print_char [phi:compare::@22->print_char]
  print_char_from_b22:
  //SEG143 [77] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#2 [phi:compare::@22->print_char#0] -- register_copy 
  //SEG144 [77] phi (byte) print_char::ch#6 = (byte) ' ' [phi:compare::@22->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
  //SEG145 [56] phi from compare::@22 compare::@30 to compare::@8 [phi:compare::@22/compare::@30->compare::@8]
  b8_from_b22:
  b8_from_b30:
  //SEG146 [56] phi (byte*) print_char_cursor#71 = (byte*) print_char_cursor#14 [phi:compare::@22/compare::@30->compare::@8#0] -- register_copy 
    jmp b8
  //SEG147 compare::@8
  b8:
  //SEG148 [57] (signed word) print_sword::w#2 ← (signed word) compare::w2#0 -- vwsz1=vwsz2 
    lda w2
    sta print_sword.w
    lda w2+1
    sta print_sword.w+1
  //SEG149 [58] call print_sword 
  //SEG150 [81] phi from compare::@8 to print_sword [phi:compare::@8->print_sword]
  print_sword_from_b8:
  //SEG151 [81] phi (byte*) print_char_cursor#61 = (byte*) print_char_cursor#71 [phi:compare::@8->print_sword#0] -- register_copy 
  //SEG152 [81] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#2 [phi:compare::@8->print_sword#1] -- register_copy 
    jsr print_sword
    jmp b31
  //SEG153 compare::@31
  b31:
  //SEG154 [59] (byte) print_char::ch#4 ← (byte) compare::r#10 -- vbuaa=vbuz1 
    lda r
  //SEG155 [60] call print_char 
  //SEG156 [77] phi from compare::@31 to print_char [phi:compare::@31->print_char]
  print_char_from_b31:
  //SEG157 [77] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#14 [phi:compare::@31->print_char#0] -- register_copy 
  //SEG158 [77] phi (byte) print_char::ch#6 = (byte) print_char::ch#4 [phi:compare::@31->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG159 compare::@return
  breturn:
  //SEG160 [61] return 
    rts
  //SEG161 compare::@5
  b5:
  //SEG162 [62] if((signed word) compare::w1#0!=(signed word) compare::w2#0) goto compare::@24 -- vwsz1_neq_vwsz2_then_la1 
    lda w1+1
    cmp w2+1
    bne b24_from_b5
    lda w1
    cmp w2
    bne b24_from_b5
  //SEG163 [63] phi from compare::@5 to compare::@16 [phi:compare::@5->compare::@16]
  b16_from_b5:
    jmp b16
  //SEG164 compare::@16
  b16:
  //SEG165 [64] phi from compare::@16 to compare::@24 [phi:compare::@16->compare::@24]
  b24_from_b16:
  //SEG166 [64] phi (byte) compare::r#18 = (const byte) TT#0 [phi:compare::@16->compare::@24#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b24
  //SEG167 [64] phi from compare::@5 to compare::@24 [phi:compare::@5->compare::@24]
  b24_from_b5:
  //SEG168 [64] phi (byte) compare::r#18 = (const byte) FF#0 [phi:compare::@5->compare::@24#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b24
  //SEG169 compare::@24
  b24:
  //SEG170 [44] phi from compare::@24 to compare::@6 [phi:compare::@24->compare::@6]
  b6_from_b24:
  //SEG171 [44] phi (byte) compare::r#10 = (byte) compare::r#18 [phi:compare::@24->compare::@6#0] -- register_copy 
  //SEG172 [44] phi (byte*) compare::ops#10 = (const byte*) compare::ops#2 [phi:compare::@24->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_2
    sta ops
    lda #>ops_2
    sta ops+1
    jmp b6
  //SEG173 compare::@4
  b4:
  //SEG174 [65] if((signed word) compare::w1#0<(signed word) compare::w2#0) goto compare::@25 -- vwsz1_lt_vwsz2_then_la1 
    lda w2
    cmp w1
    lda w2+1
    sbc w1+1
    bvc !+
    eor #$80
  !:
    beq !e+
    bpl b25_from_b4
  !e:
  //SEG175 [66] phi from compare::@4 to compare::@17 [phi:compare::@4->compare::@17]
  b17_from_b4:
    jmp b17
  //SEG176 compare::@17
  b17:
  //SEG177 [67] phi from compare::@17 to compare::@25 [phi:compare::@17->compare::@25]
  b25_from_b17:
  //SEG178 [67] phi (byte) compare::r#19 = (const byte) TT#0 [phi:compare::@17->compare::@25#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b25
  //SEG179 [67] phi from compare::@4 to compare::@25 [phi:compare::@4->compare::@25]
  b25_from_b4:
  //SEG180 [67] phi (byte) compare::r#19 = (const byte) FF#0 [phi:compare::@4->compare::@25#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b25
  //SEG181 compare::@25
  b25:
  //SEG182 [44] phi from compare::@25 to compare::@6 [phi:compare::@25->compare::@6]
  b6_from_b25:
  //SEG183 [44] phi (byte) compare::r#10 = (byte) compare::r#19 [phi:compare::@25->compare::@6#0] -- register_copy 
  //SEG184 [44] phi (byte*) compare::ops#10 = (const byte*) compare::ops#3 [phi:compare::@25->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_3
    sta ops
    lda #>ops_3
    sta ops+1
    jmp b6
  //SEG185 compare::@3
  b3:
  //SEG186 [68] if((signed word) compare::w1#0<=(signed word) compare::w2#0) goto compare::@26 -- vwsz1_le_vwsz2_then_la1 
    lda w2
    cmp w1
    lda w2+1
    sbc w1+1
    bvc !+
    eor #$80
  !:
    bpl b26_from_b3
  //SEG187 [69] phi from compare::@3 to compare::@18 [phi:compare::@3->compare::@18]
  b18_from_b3:
    jmp b18
  //SEG188 compare::@18
  b18:
  //SEG189 [70] phi from compare::@18 to compare::@26 [phi:compare::@18->compare::@26]
  b26_from_b18:
  //SEG190 [70] phi (byte) compare::r#20 = (const byte) TT#0 [phi:compare::@18->compare::@26#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b26
  //SEG191 [70] phi from compare::@3 to compare::@26 [phi:compare::@3->compare::@26]
  b26_from_b3:
  //SEG192 [70] phi (byte) compare::r#20 = (const byte) FF#0 [phi:compare::@3->compare::@26#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b26
  //SEG193 compare::@26
  b26:
  //SEG194 [44] phi from compare::@26 to compare::@6 [phi:compare::@26->compare::@6]
  b6_from_b26:
  //SEG195 [44] phi (byte) compare::r#10 = (byte) compare::r#20 [phi:compare::@26->compare::@6#0] -- register_copy 
  //SEG196 [44] phi (byte*) compare::ops#10 = (const byte*) compare::ops#4 [phi:compare::@26->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_4
    sta ops
    lda #>ops_4
    sta ops+1
    jmp b6
  //SEG197 compare::@2
  b2:
  //SEG198 [71] if((signed word) compare::w1#0>(signed word) compare::w2#0) goto compare::@27 -- vwsz1_gt_vwsz2_then_la1 
    lda w1
    cmp w2
    lda w1+1
    sbc w2+1
    bvc !+
    eor #$80
  !:
    beq !e+
    bpl b27_from_b2
  !e:
  //SEG199 [72] phi from compare::@2 to compare::@19 [phi:compare::@2->compare::@19]
  b19_from_b2:
    jmp b19
  //SEG200 compare::@19
  b19:
  //SEG201 [73] phi from compare::@19 to compare::@27 [phi:compare::@19->compare::@27]
  b27_from_b19:
  //SEG202 [73] phi (byte) compare::r#21 = (const byte) TT#0 [phi:compare::@19->compare::@27#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b27
  //SEG203 [73] phi from compare::@2 to compare::@27 [phi:compare::@2->compare::@27]
  b27_from_b2:
  //SEG204 [73] phi (byte) compare::r#21 = (const byte) FF#0 [phi:compare::@2->compare::@27#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b27
  //SEG205 compare::@27
  b27:
  //SEG206 [44] phi from compare::@27 to compare::@6 [phi:compare::@27->compare::@6]
  b6_from_b27:
  //SEG207 [44] phi (byte) compare::r#10 = (byte) compare::r#21 [phi:compare::@27->compare::@6#0] -- register_copy 
  //SEG208 [44] phi (byte*) compare::ops#10 = (const byte*) compare::ops#5 [phi:compare::@27->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_5
    sta ops
    lda #>ops_5
    sta ops+1
    jmp b6
  //SEG209 compare::@1
  b1:
  //SEG210 [74] if((signed word) compare::w1#0>=(signed word) compare::w2#0) goto compare::@28 -- vwsz1_ge_vwsz2_then_la1 
    lda w1
    cmp w2
    lda w1+1
    sbc w2+1
    bvc !+
    eor #$80
  !:
    bpl b28_from_b1
  //SEG211 [75] phi from compare::@1 to compare::@20 [phi:compare::@1->compare::@20]
  b20_from_b1:
    jmp b20
  //SEG212 compare::@20
  b20:
  //SEG213 [76] phi from compare::@20 to compare::@28 [phi:compare::@20->compare::@28]
  b28_from_b20:
  //SEG214 [76] phi (byte) compare::r#22 = (const byte) TT#0 [phi:compare::@20->compare::@28#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b28
  //SEG215 [76] phi from compare::@1 to compare::@28 [phi:compare::@1->compare::@28]
  b28_from_b1:
  //SEG216 [76] phi (byte) compare::r#22 = (const byte) FF#0 [phi:compare::@1->compare::@28#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
    jmp b28
  //SEG217 compare::@28
  b28:
  //SEG218 [44] phi from compare::@28 to compare::@6 [phi:compare::@28->compare::@6]
  b6_from_b28:
  //SEG219 [44] phi (byte) compare::r#10 = (byte) compare::r#22 [phi:compare::@28->compare::@6#0] -- register_copy 
  //SEG220 [44] phi (byte*) compare::ops#10 = (const byte*) compare::ops#6 [phi:compare::@28->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_6
    sta ops
    lda #>ops_6
    sta ops+1
    jmp b6
    ops_1: .text "!=@"
    ops_2: .text "==@"
    ops_3: .text ">=@"
    ops_4: .text "> @"
    ops_5: .text "<=@"
    ops_6: .text "< @"
}
//SEG221 print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
  //SEG222 [78] *((byte*) print_char_cursor#43) ← (byte) print_char::ch#6 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG223 [79] (byte*) print_char_cursor#14 ← ++ (byte*) print_char_cursor#43 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG224 print_char::@return
  breturn:
  //SEG225 [80] return 
    rts
}
//SEG226 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage($a) w)
print_sword: {
    .label w = $a
  //SEG227 [82] if((signed word) print_sword::w#3>=(signed byte) 0) goto print_sword::@1 -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1_from_print_sword
  //SEG228 [83] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  b2_from_print_sword:
    jmp b2
  //SEG229 print_sword::@2
  b2:
  //SEG230 [84] call print_char 
  //SEG231 [77] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  print_char_from_b2:
  //SEG232 [77] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#61 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG233 [77] phi (byte) print_char::ch#6 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp b3
  //SEG234 print_sword::@3
  b3:
  //SEG235 [85] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG236 [86] phi from print_sword print_sword::@3 to print_sword::@1 [phi:print_sword/print_sword::@3->print_sword::@1]
  b1_from_print_sword:
  b1_from_b3:
  //SEG237 [86] phi (byte*) print_char_cursor#60 = (byte*) print_char_cursor#61 [phi:print_sword/print_sword::@3->print_sword::@1#0] -- register_copy 
  //SEG238 [86] phi (signed word) print_sword::w#4 = (signed word) print_sword::w#3 [phi:print_sword/print_sword::@3->print_sword::@1#1] -- register_copy 
    jmp b1
  //SEG239 print_sword::@1
  b1:
  //SEG240 [87] call print_word 
    jsr print_word
    jmp breturn
  //SEG241 print_sword::@return
  breturn:
  //SEG242 [88] return 
    rts
}
//SEG243 print_word
// Print a word as HEX
print_word: {
  //SEG244 [89] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#4 -- vbuz1=_hi_vwuz2 
    lda print_sword.w+1
    sta print_byte.b
  //SEG245 [90] call print_byte 
  //SEG246 [94] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG247 [94] phi (byte*) print_char_cursor#63 = (byte*) print_char_cursor#60 [phi:print_word->print_byte#0] -- register_copy 
  //SEG248 [94] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG249 print_word::@1
  b1:
  //SEG250 [91] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#4 -- vbuz1=_lo_vwuz2 
    lda print_sword.w
    sta print_byte.b
  //SEG251 [92] call print_byte 
  //SEG252 [94] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG253 [94] phi (byte*) print_char_cursor#63 = (byte*) print_char_cursor#14 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG254 [94] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG255 print_word::@return
  breturn:
  //SEG256 [93] return 
    rts
}
//SEG257 print_byte
// Print a byte as HEX
// print_byte(byte zeropage($e) b)
print_byte: {
    .label b = $e
  //SEG258 [95] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG259 [96] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG260 [97] call print_char 
  //SEG261 [77] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG262 [77] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#63 [phi:print_byte->print_char#0] -- register_copy 
  //SEG263 [77] phi (byte) print_char::ch#6 = (byte) print_char::ch#1 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG264 print_byte::@1
  b1:
  //SEG265 [98] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG266 [99] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG267 [100] call print_char 
  //SEG268 [77] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG269 [77] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#14 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG270 [77] phi (byte) print_char::ch#6 = (byte) print_char::ch#2 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG271 print_byte::@return
  breturn:
  //SEG272 [101] return 
    rts
}
//SEG273 print_str
// Print a zero-terminated string
// print_str(byte* zeropage(7) str)
print_str: {
    .label str = 7
  //SEG274 [103] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG275 [103] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#14 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG276 [103] phi (byte*) print_str::str#2 = (byte*) print_str::str#1 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG277 print_str::@1
  b1:
  //SEG278 [104] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG279 print_str::@return
  breturn:
  //SEG280 [105] return 
    rts
  //SEG281 print_str::@2
  b2:
  //SEG282 [106] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG283 [107] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG284 [108] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG285 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $f
  //SEG286 [110] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG287 [110] phi (byte*) print_cls::sc#2 = (byte*) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG288 [110] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG289 [110] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG290 print_cls::@1
  b1:
  //SEG291 [111] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG292 [112] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG293 [113] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG294 print_cls::@return
  breturn:
  //SEG295 [114] return 
    rts
}
  print_hextab: .text "0123456789abcdef"
  swords: .word -$6fed, $12, $7fed

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b9
Removing instruction jmp b5
Removing instruction jmp b10
Removing instruction jmp b4
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b13
Removing instruction jmp b14
Removing instruction jmp b15
Removing instruction jmp b23
Removing instruction jmp b6
Removing instruction jmp b21
Removing instruction jmp b7
Removing instruction jmp b29
Removing instruction jmp b30
Removing instruction jmp b22
Removing instruction jmp b8
Removing instruction jmp b31
Removing instruction jmp breturn
Removing instruction jmp b16
Removing instruction jmp b24
Removing instruction jmp b17
Removing instruction jmp b25
Removing instruction jmp b18
Removing instruction jmp b26
Removing instruction jmp b19
Removing instruction jmp b27
Removing instruction jmp b20
Removing instruction jmp b28
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b4_from_b9 with b4
Replacing label b3_from_b4 with b3
Replacing label b2_from_b6 with b2
Replacing label b1_from_b7 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b7_from_b6 with b7
Replacing label b8_from_b30 with b8
Replacing label b1_from_print_sword with b1
Replacing label b1_from_b2 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b7:
Removing instruction b2_from_b6:
Removing instruction b3_from_b4:
Removing instruction b5_from_b9:
Removing instruction print_ln_from_b5:
Removing instruction b4_from_b9:
Removing instruction b8_from_b7:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Removing instruction b15_from_b14:
Removing instruction b23_from_b15:
Removing instruction b6_from_b23:
Removing instruction b21_from_b6:
Removing instruction print_char_from_b21:
Removing instruction b7_from_b21:
Removing instruction b7_from_b6:
Removing instruction print_sword_from_b7:
Removing instruction print_str_from_b29:
Removing instruction b22_from_b30:
Removing instruction print_char_from_b22:
Removing instruction b8_from_b22:
Removing instruction b8_from_b30:
Removing instruction b16_from_b5:
Removing instruction b24_from_b16:
Removing instruction b6_from_b24:
Removing instruction b17_from_b4:
Removing instruction b25_from_b17:
Removing instruction b6_from_b25:
Removing instruction b18_from_b3:
Removing instruction b26_from_b18:
Removing instruction b6_from_b26:
Removing instruction b19_from_b2:
Removing instruction b27_from_b19:
Removing instruction b6_from_b27:
Removing instruction b20_from_b1:
Removing instruction b28_from_b20:
Removing instruction b6_from_b28:
Removing instruction b2_from_print_sword:
Removing instruction print_char_from_b2:
Removing instruction b1_from_print_sword:
Removing instruction b1_from_b3:
Removing instruction b1_from_print_str:
Removing instruction b1_from_b2:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction print_cls_from_main:
Removing instruction b1_from_main:
Removing instruction b2_from_b1:
Removing instruction b3_from_b2:
Removing instruction b9:
Removing instruction b5:
Removing instruction b10:
Removing instruction b4_from_b10:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction breturn:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction b12:
Removing instruction b13:
Removing instruction b14:
Removing instruction b15:
Removing instruction b21:
Removing instruction b29:
Removing instruction b30:
Removing instruction b22:
Removing instruction print_sword_from_b8:
Removing instruction b31:
Removing instruction print_char_from_b31:
Removing instruction breturn:
Removing instruction b16:
Removing instruction b17:
Removing instruction b18:
Removing instruction b19:
Removing instruction b20:
Removing instruction breturn:
Removing instruction b2:
Removing instruction b3:
Removing instruction breturn:
Removing instruction print_byte_from_print_word:
Removing instruction b1:
Removing instruction print_byte_from_b1:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Relabelling long label b8_from_b8 to b5
Relabelling long label b23_from_b14 to b9
Relabelling long label b6_from_b13 to b10
Relabelling long label b24_from_b5 to b11
Relabelling long label b25_from_b4 to b12
Relabelling long label b26_from_b3 to b13
Relabelling long label b27_from_b2 to b14
Relabelling long label b28_from_b1 to b15
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #3
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination
Fixing long branch [114] beq b1 to bne
Fixing long branch [118] beq b2 to bne
Fixing long branch [122] beq b3 to bne
Fixing long branch [126] beq b4 to bne

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte) EQ
(const byte) EQ#0 EQ = (byte) 4
(byte) FF
(const byte) FF#0 FF = (byte) $57
(byte) GE
(const byte) GE#0 GE = (byte) 3
(byte) GT
(const byte) GT#0 GT = (byte) 2
(byte) LE
(const byte) LE#0 LE = (byte) 1
(byte) LT
(const byte) LT#0 LT = (byte) 0
(byte) NE
(const byte) NE#0 NE = (byte) 5
(byte) TT
(const byte) TT#0 TT = (byte) $51
(void()) compare((signed word) compare::w1 , (signed word) compare::w2 , (byte) compare::op)
(label) compare::@1
(label) compare::@10
(label) compare::@11
(label) compare::@12
(label) compare::@13
(label) compare::@14
(label) compare::@15
(label) compare::@16
(label) compare::@17
(label) compare::@18
(label) compare::@19
(label) compare::@2
(label) compare::@20
(label) compare::@21
(label) compare::@22
(label) compare::@23
(label) compare::@24
(label) compare::@25
(label) compare::@26
(label) compare::@27
(label) compare::@28
(label) compare::@29
(label) compare::@3
(label) compare::@30
(label) compare::@31
(label) compare::@4
(label) compare::@5
(label) compare::@6
(label) compare::@7
(label) compare::@8
(label) compare::@9
(label) compare::@return
(byte) compare::op
(byte) compare::op#0 reg byte x 168.8333333333334
(byte*) compare::ops
(const byte*) compare::ops#1 ops#1 = (string) "!=@"
(byte*) compare::ops#10 ops zp ZP_WORD:7 0.2857142857142857
(const byte*) compare::ops#2 ops#2 = (string) "==@"
(const byte*) compare::ops#3 ops#3 = (string) ">=@"
(const byte*) compare::ops#4 ops#4 = (string) "> @"
(const byte*) compare::ops#5 ops#5 = (string) "<=@"
(const byte*) compare::ops#6 ops#6 = (string) "< @"
(byte) compare::r
(byte) compare::r#10 r zp ZP_BYTE:9 0.9333333333333332
(byte) compare::r#17 r zp ZP_BYTE:9 2.0
(byte) compare::r#18 r zp ZP_BYTE:9 2.0
(byte) compare::r#19 r zp ZP_BYTE:9 2.0
(byte) compare::r#20 r zp ZP_BYTE:9 2.0
(byte) compare::r#21 r zp ZP_BYTE:9 2.0
(byte) compare::r#22 r zp ZP_BYTE:9 2.0
(signed word) compare::w1
(signed word) compare::w1#0 w1 zp ZP_WORD:10 31.78125
(signed word) compare::w2
(signed word) compare::w2#0 w2 zp ZP_WORD:19 26.076923076923077
(void()) main()
(byte~) main::$8 reg byte a 22.0
(byte~) main::$9 reg byte a 202.0
(label) main::@1
(label) main::@10
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(byte) main::i
(byte) main::i#1 i zp ZP_BYTE:2 16.5
(byte) main::i#2 i zp ZP_BYTE:2 1.5714285714285716
(byte) main::j
(byte) main::j#1 j zp ZP_BYTE:3 151.5
(byte) main::j#2 j zp ZP_BYTE:3 18.9375
(byte) main::op
(byte) main::op#1 reg byte x 1501.5
(byte) main::op#2 reg byte x 273.0
(byte) main::s
(byte) main::s#1 s zp ZP_BYTE:4 1501.5
(byte) main::s#10 s zp ZP_BYTE:4 302.0
(byte) main::s#3 s zp ZP_BYTE:4 420.59999999999997
(byte) main::s#5 s zp ZP_BYTE:4 71.0
(byte) main::s#7 s zp ZP_BYTE:4 7.333333333333333
(signed word) main::w1
(signed word) main::w1#0 w1 zp ZP_WORD:17 53.26315789473684
(signed word) main::w2
(signed word) main::w2#0 w2 zp ZP_WORD:19 78.71428571428571
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 b zp ZP_BYTE:14 4.0
(byte) print_byte::b#1 b zp ZP_BYTE:14 4.0
(byte) print_byte::b#2 b zp ZP_BYTE:14 2.0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#1 reg byte a 4.0
(byte) print_char::ch#2 reg byte a 4.0
(byte) print_char::ch#4 reg byte a 4.0
(byte) print_char::ch#6 reg byte a 8.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp ZP_WORD:12 10001.0
(byte*~) print_char_cursor#128 print_char_cursor zp ZP_WORD:12 2002.0
(byte*) print_char_cursor#14 print_char_cursor zp ZP_WORD:12 344.3125
(byte*) print_char_cursor#2 print_char_cursor zp ZP_WORD:12 4287.0
(byte*) print_char_cursor#43 print_char_cursor zp ZP_WORD:12 8.0
(byte*) print_char_cursor#60 print_char_cursor zp ZP_WORD:12 3.0
(byte*) print_char_cursor#61 print_char_cursor zp ZP_WORD:12 2.6666666666666665
(byte*) print_char_cursor#63 print_char_cursor zp ZP_WORD:12 2.0
(byte*) print_char_cursor#67 print_char_cursor zp ZP_WORD:12 35.677419354838705
(byte*) print_char_cursor#70 print_char_cursor zp ZP_WORD:12 3.0
(byte*) print_char_cursor#71 print_char_cursor zp ZP_WORD:12 3.0
(byte*) print_char_cursor#75 print_char_cursor zp ZP_WORD:12 71.0
(byte*) print_char_cursor#76 print_char_cursor zp ZP_WORD:12 445.0
(byte*) print_char_cursor#80 print_char_cursor zp ZP_WORD:12 7.333333333333333
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:15 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:15 16.5
(byte[]) print_hextab
(const byte[]) print_hextab#0 print_hextab = (string) "0123456789abcdef"
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp ZP_WORD:5 6401.0
(byte*) print_line_cursor#19 print_line_cursor zp ZP_WORD:5 233.8888888888889
(byte*) print_line_cursor#23 print_line_cursor zp ZP_WORD:5 445.0
(byte*) print_line_cursor#29 print_line_cursor zp ZP_WORD:5 71.0
(byte*) print_line_cursor#31 print_line_cursor zp ZP_WORD:5 7.333333333333333
(byte*) print_line_cursor#9 print_line_cursor zp ZP_WORD:5 20004.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp ZP_WORD:7 20002.0
(byte*) print_str::str#1 str zp ZP_WORD:7 2.0
(byte*) print_str::str#2 str zp ZP_WORD:7 10001.5
(void()) print_sword((signed word) print_sword::w)
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0 w zp ZP_WORD:10 4.0
(signed word) print_sword::w#1 w zp ZP_WORD:10 4.0
(signed word) print_sword::w#2 w zp ZP_WORD:10 4.0
(signed word) print_sword::w#3 w zp ZP_WORD:10 2.5
(signed word) print_sword::w#4 w zp ZP_WORD:10 1.3333333333333333
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(signed word[]) swords
(const signed word[]) swords#0 swords = { (signed word) -$6fed, (signed word) $12, (signed word) $7fed }

zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
zp ZP_BYTE:3 [ main::j#2 main::j#1 ]
reg byte x [ main::op#2 main::op#1 ]
zp ZP_BYTE:4 [ main::s#3 main::s#5 main::s#7 main::s#10 main::s#1 ]
zp ZP_WORD:5 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#29 print_line_cursor#31 print_line_cursor#23 print_line_cursor#1 ]
zp ZP_WORD:7 [ compare::ops#10 print_str::str#2 print_str::str#1 print_str::str#0 ]
zp ZP_BYTE:9 [ compare::r#10 compare::r#17 compare::r#18 compare::r#19 compare::r#20 compare::r#21 compare::r#22 ]
reg byte a [ print_char::ch#6 print_char::ch#4 print_char::ch#1 print_char::ch#2 ]
zp ZP_WORD:10 [ print_sword::w#4 print_sword::w#3 print_sword::w#1 print_sword::w#2 print_sword::w#0 compare::w1#0 ]
zp ZP_WORD:12 [ print_char_cursor#60 print_char_cursor#43 print_char_cursor#71 print_char_cursor#2 print_char_cursor#70 print_char_cursor#67 print_char_cursor#75 print_char_cursor#80 print_char_cursor#76 print_char_cursor#14 print_char_cursor#128 print_char_cursor#63 print_char_cursor#61 print_char_cursor#1 ]
zp ZP_BYTE:14 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
zp ZP_WORD:15 [ print_cls::sc#2 print_cls::sc#1 ]
reg byte a [ main::$8 ]
zp ZP_WORD:17 [ main::w1#0 ]
reg byte a [ main::$9 ]
zp ZP_WORD:19 [ main::w2#0 compare::w2#0 ]
reg byte x [ compare::op#0 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]


FINAL ASSEMBLER
Score: 966649

//SEG0 File Comments
// Test signed word comparisons
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const LT = 0
  .const LE = 1
  .const GT = 2
  .const GE = 3
  .const EQ = 4
  .const NE = 5
  // empty circle
  .const FF = $57
  // filled circle
  .const TT = $51
  .label print_char_cursor = $c
  .label print_line_cursor = 5
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
    .label w1 = $11
    .label w2 = $13
    .label s = 4
    .label j = 3
    .label i = 2
  //SEG11 [5] call print_cls 
  //SEG12 [109] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
  //SEG13 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG14 [6] phi (byte*) print_line_cursor#31 = (byte*) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG15 [6] phi (byte) main::s#7 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta s
  //SEG16 [6] phi (byte*) print_char_cursor#80 = (byte*) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG17 [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG18 [6] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
  //SEG19 [6] phi (byte*) print_line_cursor#31 = (byte*) print_line_cursor#23 [phi:main::@7->main::@1#0] -- register_copy 
  //SEG20 [6] phi (byte) main::s#7 = (byte) main::s#10 [phi:main::@7->main::@1#1] -- register_copy 
  //SEG21 [6] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#76 [phi:main::@7->main::@1#2] -- register_copy 
  //SEG22 [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@7->main::@1#3] -- register_copy 
  //SEG23 main::@1
  b1:
  //SEG24 [7] (byte~) main::$8 ← (byte) main::i#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda i
    asl
  //SEG25 [8] (signed word) main::w1#0 ← *((const signed word[]) swords#0 + (byte~) main::$8) -- vwsz1=pwsc1_derefidx_vbuaa 
    tay
    lda swords,y
    sta w1
    lda swords+1,y
    sta w1+1
  //SEG26 [9] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG27 [9] phi (byte*) print_line_cursor#29 = (byte*) print_line_cursor#31 [phi:main::@1->main::@2#0] -- register_copy 
  //SEG28 [9] phi (byte) main::s#5 = (byte) main::s#7 [phi:main::@1->main::@2#1] -- register_copy 
  //SEG29 [9] phi (byte*) print_char_cursor#75 = (byte*) print_char_cursor#80 [phi:main::@1->main::@2#2] -- register_copy 
  //SEG30 [9] phi (byte) main::j#2 = (byte) 0 [phi:main::@1->main::@2#3] -- vbuz1=vbuc1 
    lda #0
    sta j
  //SEG31 [9] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  //SEG32 [9] phi (byte*) print_line_cursor#29 = (byte*) print_line_cursor#23 [phi:main::@6->main::@2#0] -- register_copy 
  //SEG33 [9] phi (byte) main::s#5 = (byte) main::s#10 [phi:main::@6->main::@2#1] -- register_copy 
  //SEG34 [9] phi (byte*) print_char_cursor#75 = (byte*) print_char_cursor#76 [phi:main::@6->main::@2#2] -- register_copy 
  //SEG35 [9] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@6->main::@2#3] -- register_copy 
  //SEG36 main::@2
  b2:
  //SEG37 [10] (byte~) main::$9 ← (byte) main::j#2 << (byte) 1 -- vbuaa=vbuz1_rol_1 
    lda j
    asl
  //SEG38 [11] (signed word) main::w2#0 ← *((const signed word[]) swords#0 + (byte~) main::$9) -- vwsz1=pwsc1_derefidx_vbuaa 
    tay
    lda swords,y
    sta w2
    lda swords+1,y
    sta w2+1
  //SEG39 [12] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  //SEG40 [12] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#29 [phi:main::@2->main::@3#0] -- register_copy 
  //SEG41 [12] phi (byte) main::s#3 = (byte) main::s#5 [phi:main::@2->main::@3#1] -- register_copy 
  //SEG42 [12] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#75 [phi:main::@2->main::@3#2] -- register_copy 
  //SEG43 [12] phi (byte) main::op#2 = (byte) 0 [phi:main::@2->main::@3#3] -- vbuxx=vbuc1 
    ldx #0
  //SEG44 [12] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  //SEG45 [12] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#23 [phi:main::@4->main::@3#0] -- register_copy 
  //SEG46 [12] phi (byte) main::s#3 = (byte) main::s#10 [phi:main::@4->main::@3#1] -- register_copy 
  //SEG47 [12] phi (byte*) print_char_cursor#67 = (byte*) print_char_cursor#76 [phi:main::@4->main::@3#2] -- register_copy 
  //SEG48 [12] phi (byte) main::op#2 = (byte) main::op#1 [phi:main::@4->main::@3#3] -- register_copy 
  //SEG49 main::@3
  b3:
  //SEG50 [13] (signed word) compare::w1#0 ← (signed word) main::w1#0 -- vwsz1=vwsz2 
    lda w1
    sta compare.w1
    lda w1+1
    sta compare.w1+1
  //SEG51 [14] (signed word) compare::w2#0 ← (signed word) main::w2#0
  //SEG52 [15] (byte) compare::op#0 ← (byte) main::op#2
  //SEG53 [16] call compare 
    jsr compare
  //SEG54 main::@9
  //SEG55 [17] (byte) main::s#1 ← ++ (byte) main::s#3 -- vbuz1=_inc_vbuz1 
    inc s
  //SEG56 [18] if((byte) main::s#1!=(byte) 3) goto main::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp s
    bne b4
  //SEG57 [19] phi from main::@9 to main::@5 [phi:main::@9->main::@5]
  //SEG58 main::@5
  //SEG59 [20] call print_ln 
  //SEG60 [30] phi from main::@5 to print_ln [phi:main::@5->print_ln]
    jsr print_ln
  //SEG61 main::@10
  //SEG62 [21] (byte*~) print_char_cursor#128 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG63 [22] phi from main::@10 to main::@4 [phi:main::@10->main::@4]
  //SEG64 [22] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#1 [phi:main::@10->main::@4#0] -- register_copy 
  //SEG65 [22] phi (byte) main::s#10 = (byte) 0 [phi:main::@10->main::@4#1] -- vbuz1=vbuc1 
    lda #0
    sta s
  //SEG66 [22] phi (byte*) print_char_cursor#76 = (byte*~) print_char_cursor#128 [phi:main::@10->main::@4#2] -- register_copy 
  //SEG67 [22] phi from main::@9 to main::@4 [phi:main::@9->main::@4]
  //SEG68 [22] phi (byte*) print_line_cursor#23 = (byte*) print_line_cursor#19 [phi:main::@9->main::@4#0] -- register_copy 
  //SEG69 [22] phi (byte) main::s#10 = (byte) main::s#1 [phi:main::@9->main::@4#1] -- register_copy 
  //SEG70 [22] phi (byte*) print_char_cursor#76 = (byte*) print_char_cursor#14 [phi:main::@9->main::@4#2] -- register_copy 
  //SEG71 main::@4
  b4:
  //SEG72 [23] (byte) main::op#1 ← ++ (byte) main::op#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG73 [24] if((byte) main::op#1!=(byte) 6) goto main::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #6
    bne b3
  //SEG74 main::@6
  //SEG75 [25] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuz1=_inc_vbuz1 
    inc j
  //SEG76 [26] if((byte) main::j#1!=(byte) 3) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp j
    bne b2
  //SEG77 main::@7
  //SEG78 [27] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG79 [28] if((byte) main::i#1!=(byte) 3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    cmp i
    bne b1
  //SEG80 [29] phi from main::@7 main::@8 to main::@8 [phi:main::@7/main::@8->main::@8]
  b5:
  // loop forever
  //SEG81 main::@8
    jmp b5
}
//SEG82 print_ln
// Print a newline
print_ln: {
  //SEG83 [31] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  //SEG84 [31] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#19 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
  //SEG85 print_ln::@1
  b1:
  //SEG86 [32] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG87 [33] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#14) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1
  !:
  //SEG88 print_ln::@return
  //SEG89 [34] return 
    rts
}
//SEG90 compare
// Compare two words using an operator
// compare(signed word zeropage($a) w1, signed word zeropage($13) w2, byte register(X) op)
compare: {
    .label w1 = $a
    .label w2 = $13
    .label ops = 7
    .label r = 9
  //SEG91 [35] if((byte) compare::op#0==(const byte) LT#0) goto compare::@1 -- vbuxx_eq_vbuc1_then_la1 
    cpx #LT
    bne !b1+
    jmp b1
  !b1:
  //SEG92 compare::@9
  //SEG93 [36] if((byte) compare::op#0==(const byte) LE#0) goto compare::@2 -- vbuxx_eq_vbuc1_then_la1 
    cpx #LE
    bne !b2+
    jmp b2
  !b2:
  //SEG94 compare::@10
  //SEG95 [37] if((byte) compare::op#0==(const byte) GT#0) goto compare::@3 -- vbuxx_eq_vbuc1_then_la1 
    cpx #GT
    bne !b3+
    jmp b3
  !b3:
  //SEG96 compare::@11
  //SEG97 [38] if((byte) compare::op#0==(const byte) GE#0) goto compare::@4 -- vbuxx_eq_vbuc1_then_la1 
    cpx #GE
    bne !b4+
    jmp b4
  !b4:
  //SEG98 compare::@12
  //SEG99 [39] if((byte) compare::op#0==(const byte) EQ#0) goto compare::@5 -- vbuxx_eq_vbuc1_then_la1 
    cpx #EQ
    beq b5
  //SEG100 compare::@13
  //SEG101 [40] if((byte) compare::op#0!=(const byte) NE#0) goto compare::@6 -- vbuxx_neq_vbuc1_then_la1 
    cpx #NE
    bne b10
  //SEG102 compare::@14
  //SEG103 [41] if((signed word) compare::w1#0==(signed word) compare::w2#0) goto compare::@23 -- vwsz1_eq_vwsz2_then_la1 
    lda w1
    cmp w2
    bne !+
    lda w1+1
    cmp w2+1
    beq b9
  !:
  //SEG104 [42] phi from compare::@14 to compare::@15 [phi:compare::@14->compare::@15]
  //SEG105 compare::@15
  //SEG106 [43] phi from compare::@15 to compare::@23 [phi:compare::@15->compare::@23]
  //SEG107 [43] phi (byte) compare::r#17 = (const byte) TT#0 [phi:compare::@15->compare::@23#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b23
  //SEG108 [43] phi from compare::@14 to compare::@23 [phi:compare::@14->compare::@23]
  b9:
  //SEG109 [43] phi (byte) compare::r#17 = (const byte) FF#0 [phi:compare::@14->compare::@23#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
  //SEG110 compare::@23
  b23:
  //SEG111 [44] phi from compare::@23 to compare::@6 [phi:compare::@23->compare::@6]
  //SEG112 [44] phi (byte) compare::r#10 = (byte) compare::r#17 [phi:compare::@23->compare::@6#0] -- register_copy 
  //SEG113 [44] phi (byte*) compare::ops#10 = (const byte*) compare::ops#1 [phi:compare::@23->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_1
    sta ops
    lda #>ops_1
    sta ops+1
    jmp b6
  //SEG114 [44] phi from compare::@13 to compare::@6 [phi:compare::@13->compare::@6]
  b10:
  //SEG115 [44] phi (byte) compare::r#10 = (const byte) FF#0 [phi:compare::@13->compare::@6#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
  //SEG116 [44] phi (byte*) compare::ops#10 = (byte*) 0 [phi:compare::@13->compare::@6#1] -- pbuz1=pbuc1 
    lda #<0
    sta ops
    sta ops+1
  //SEG117 compare::@6
  b6:
  //SEG118 [45] if((signed word) compare::w1#0<(signed byte) 0) goto compare::@7 -- vwsz1_lt_0_then_la1 
    lda w1+1
    bmi b7
  //SEG119 [46] phi from compare::@6 to compare::@21 [phi:compare::@6->compare::@21]
  //SEG120 compare::@21
  //SEG121 [47] call print_char 
  //SEG122 [77] phi from compare::@21 to print_char [phi:compare::@21->print_char]
  //SEG123 [77] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#67 [phi:compare::@21->print_char#0] -- register_copy 
  //SEG124 [77] phi (byte) print_char::ch#6 = (byte) ' ' [phi:compare::@21->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
  //SEG125 [48] phi from compare::@21 compare::@6 to compare::@7 [phi:compare::@21/compare::@6->compare::@7]
  //SEG126 [48] phi (byte*) print_char_cursor#70 = (byte*) print_char_cursor#14 [phi:compare::@21/compare::@6->compare::@7#0] -- register_copy 
  //SEG127 compare::@7
  b7:
  //SEG128 [49] (signed word) print_sword::w#1 ← (signed word) compare::w1#0
  //SEG129 [50] call print_sword 
  //SEG130 [81] phi from compare::@7 to print_sword [phi:compare::@7->print_sword]
  //SEG131 [81] phi (byte*) print_char_cursor#61 = (byte*) print_char_cursor#70 [phi:compare::@7->print_sword#0] -- register_copy 
  //SEG132 [81] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#1 [phi:compare::@7->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG133 compare::@29
  //SEG134 [51] (byte*) print_str::str#1 ← (byte*) compare::ops#10
  //SEG135 [52] call print_str 
  //SEG136 [102] phi from compare::@29 to print_str [phi:compare::@29->print_str]
    jsr print_str
  //SEG137 compare::@30
  //SEG138 [53] if((signed word) compare::w2#0<(signed byte) 0) goto compare::@8 -- vwsz1_lt_0_then_la1 
    lda w2+1
    bmi b8
  //SEG139 [54] phi from compare::@30 to compare::@22 [phi:compare::@30->compare::@22]
  //SEG140 compare::@22
  //SEG141 [55] call print_char 
  //SEG142 [77] phi from compare::@22 to print_char [phi:compare::@22->print_char]
  //SEG143 [77] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#2 [phi:compare::@22->print_char#0] -- register_copy 
  //SEG144 [77] phi (byte) print_char::ch#6 = (byte) ' ' [phi:compare::@22->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
  //SEG145 [56] phi from compare::@22 compare::@30 to compare::@8 [phi:compare::@22/compare::@30->compare::@8]
  //SEG146 [56] phi (byte*) print_char_cursor#71 = (byte*) print_char_cursor#14 [phi:compare::@22/compare::@30->compare::@8#0] -- register_copy 
  //SEG147 compare::@8
  b8:
  //SEG148 [57] (signed word) print_sword::w#2 ← (signed word) compare::w2#0 -- vwsz1=vwsz2 
    lda w2
    sta print_sword.w
    lda w2+1
    sta print_sword.w+1
  //SEG149 [58] call print_sword 
  //SEG150 [81] phi from compare::@8 to print_sword [phi:compare::@8->print_sword]
  //SEG151 [81] phi (byte*) print_char_cursor#61 = (byte*) print_char_cursor#71 [phi:compare::@8->print_sword#0] -- register_copy 
  //SEG152 [81] phi (signed word) print_sword::w#3 = (signed word) print_sword::w#2 [phi:compare::@8->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG153 compare::@31
  //SEG154 [59] (byte) print_char::ch#4 ← (byte) compare::r#10 -- vbuaa=vbuz1 
    lda r
  //SEG155 [60] call print_char 
  //SEG156 [77] phi from compare::@31 to print_char [phi:compare::@31->print_char]
  //SEG157 [77] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#14 [phi:compare::@31->print_char#0] -- register_copy 
  //SEG158 [77] phi (byte) print_char::ch#6 = (byte) print_char::ch#4 [phi:compare::@31->print_char#1] -- register_copy 
    jsr print_char
  //SEG159 compare::@return
  //SEG160 [61] return 
    rts
  //SEG161 compare::@5
  b5:
  //SEG162 [62] if((signed word) compare::w1#0!=(signed word) compare::w2#0) goto compare::@24 -- vwsz1_neq_vwsz2_then_la1 
    lda w1+1
    cmp w2+1
    bne b11
    lda w1
    cmp w2
    bne b11
  //SEG163 [63] phi from compare::@5 to compare::@16 [phi:compare::@5->compare::@16]
  //SEG164 compare::@16
  //SEG165 [64] phi from compare::@16 to compare::@24 [phi:compare::@16->compare::@24]
  //SEG166 [64] phi (byte) compare::r#18 = (const byte) TT#0 [phi:compare::@16->compare::@24#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b24
  //SEG167 [64] phi from compare::@5 to compare::@24 [phi:compare::@5->compare::@24]
  b11:
  //SEG168 [64] phi (byte) compare::r#18 = (const byte) FF#0 [phi:compare::@5->compare::@24#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
  //SEG169 compare::@24
  b24:
  //SEG170 [44] phi from compare::@24 to compare::@6 [phi:compare::@24->compare::@6]
  //SEG171 [44] phi (byte) compare::r#10 = (byte) compare::r#18 [phi:compare::@24->compare::@6#0] -- register_copy 
  //SEG172 [44] phi (byte*) compare::ops#10 = (const byte*) compare::ops#2 [phi:compare::@24->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_2
    sta ops
    lda #>ops_2
    sta ops+1
    jmp b6
  //SEG173 compare::@4
  b4:
  //SEG174 [65] if((signed word) compare::w1#0<(signed word) compare::w2#0) goto compare::@25 -- vwsz1_lt_vwsz2_then_la1 
    lda w2
    cmp w1
    lda w2+1
    sbc w1+1
    bvc !+
    eor #$80
  !:
    beq !e+
    bpl b12
  !e:
  //SEG175 [66] phi from compare::@4 to compare::@17 [phi:compare::@4->compare::@17]
  //SEG176 compare::@17
  //SEG177 [67] phi from compare::@17 to compare::@25 [phi:compare::@17->compare::@25]
  //SEG178 [67] phi (byte) compare::r#19 = (const byte) TT#0 [phi:compare::@17->compare::@25#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b25
  //SEG179 [67] phi from compare::@4 to compare::@25 [phi:compare::@4->compare::@25]
  b12:
  //SEG180 [67] phi (byte) compare::r#19 = (const byte) FF#0 [phi:compare::@4->compare::@25#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
  //SEG181 compare::@25
  b25:
  //SEG182 [44] phi from compare::@25 to compare::@6 [phi:compare::@25->compare::@6]
  //SEG183 [44] phi (byte) compare::r#10 = (byte) compare::r#19 [phi:compare::@25->compare::@6#0] -- register_copy 
  //SEG184 [44] phi (byte*) compare::ops#10 = (const byte*) compare::ops#3 [phi:compare::@25->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_3
    sta ops
    lda #>ops_3
    sta ops+1
    jmp b6
  //SEG185 compare::@3
  b3:
  //SEG186 [68] if((signed word) compare::w1#0<=(signed word) compare::w2#0) goto compare::@26 -- vwsz1_le_vwsz2_then_la1 
    lda w2
    cmp w1
    lda w2+1
    sbc w1+1
    bvc !+
    eor #$80
  !:
    bpl b13
  //SEG187 [69] phi from compare::@3 to compare::@18 [phi:compare::@3->compare::@18]
  //SEG188 compare::@18
  //SEG189 [70] phi from compare::@18 to compare::@26 [phi:compare::@18->compare::@26]
  //SEG190 [70] phi (byte) compare::r#20 = (const byte) TT#0 [phi:compare::@18->compare::@26#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b26
  //SEG191 [70] phi from compare::@3 to compare::@26 [phi:compare::@3->compare::@26]
  b13:
  //SEG192 [70] phi (byte) compare::r#20 = (const byte) FF#0 [phi:compare::@3->compare::@26#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
  //SEG193 compare::@26
  b26:
  //SEG194 [44] phi from compare::@26 to compare::@6 [phi:compare::@26->compare::@6]
  //SEG195 [44] phi (byte) compare::r#10 = (byte) compare::r#20 [phi:compare::@26->compare::@6#0] -- register_copy 
  //SEG196 [44] phi (byte*) compare::ops#10 = (const byte*) compare::ops#4 [phi:compare::@26->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_4
    sta ops
    lda #>ops_4
    sta ops+1
    jmp b6
  //SEG197 compare::@2
  b2:
  //SEG198 [71] if((signed word) compare::w1#0>(signed word) compare::w2#0) goto compare::@27 -- vwsz1_gt_vwsz2_then_la1 
    lda w1
    cmp w2
    lda w1+1
    sbc w2+1
    bvc !+
    eor #$80
  !:
    beq !e+
    bpl b14
  !e:
  //SEG199 [72] phi from compare::@2 to compare::@19 [phi:compare::@2->compare::@19]
  //SEG200 compare::@19
  //SEG201 [73] phi from compare::@19 to compare::@27 [phi:compare::@19->compare::@27]
  //SEG202 [73] phi (byte) compare::r#21 = (const byte) TT#0 [phi:compare::@19->compare::@27#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b27
  //SEG203 [73] phi from compare::@2 to compare::@27 [phi:compare::@2->compare::@27]
  b14:
  //SEG204 [73] phi (byte) compare::r#21 = (const byte) FF#0 [phi:compare::@2->compare::@27#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
  //SEG205 compare::@27
  b27:
  //SEG206 [44] phi from compare::@27 to compare::@6 [phi:compare::@27->compare::@6]
  //SEG207 [44] phi (byte) compare::r#10 = (byte) compare::r#21 [phi:compare::@27->compare::@6#0] -- register_copy 
  //SEG208 [44] phi (byte*) compare::ops#10 = (const byte*) compare::ops#5 [phi:compare::@27->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_5
    sta ops
    lda #>ops_5
    sta ops+1
    jmp b6
  //SEG209 compare::@1
  b1:
  //SEG210 [74] if((signed word) compare::w1#0>=(signed word) compare::w2#0) goto compare::@28 -- vwsz1_ge_vwsz2_then_la1 
    lda w1
    cmp w2
    lda w1+1
    sbc w2+1
    bvc !+
    eor #$80
  !:
    bpl b15
  //SEG211 [75] phi from compare::@1 to compare::@20 [phi:compare::@1->compare::@20]
  //SEG212 compare::@20
  //SEG213 [76] phi from compare::@20 to compare::@28 [phi:compare::@20->compare::@28]
  //SEG214 [76] phi (byte) compare::r#22 = (const byte) TT#0 [phi:compare::@20->compare::@28#0] -- vbuz1=vbuc1 
    lda #TT
    sta r
    jmp b28
  //SEG215 [76] phi from compare::@1 to compare::@28 [phi:compare::@1->compare::@28]
  b15:
  //SEG216 [76] phi (byte) compare::r#22 = (const byte) FF#0 [phi:compare::@1->compare::@28#0] -- vbuz1=vbuc1 
    lda #FF
    sta r
  //SEG217 compare::@28
  b28:
  //SEG218 [44] phi from compare::@28 to compare::@6 [phi:compare::@28->compare::@6]
  //SEG219 [44] phi (byte) compare::r#10 = (byte) compare::r#22 [phi:compare::@28->compare::@6#0] -- register_copy 
  //SEG220 [44] phi (byte*) compare::ops#10 = (const byte*) compare::ops#6 [phi:compare::@28->compare::@6#1] -- pbuz1=pbuc1 
    lda #<ops_6
    sta ops
    lda #>ops_6
    sta ops+1
    jmp b6
    ops_1: .text "!=@"
    ops_2: .text "==@"
    ops_3: .text ">=@"
    ops_4: .text "> @"
    ops_5: .text "<=@"
    ops_6: .text "< @"
}
//SEG221 print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
  //SEG222 [78] *((byte*) print_char_cursor#43) ← (byte) print_char::ch#6 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG223 [79] (byte*) print_char_cursor#14 ← ++ (byte*) print_char_cursor#43 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG224 print_char::@return
  //SEG225 [80] return 
    rts
}
//SEG226 print_sword
// Print a signed word as HEX
// print_sword(signed word zeropage($a) w)
print_sword: {
    .label w = $a
  //SEG227 [82] if((signed word) print_sword::w#3>=(signed byte) 0) goto print_sword::@1 -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1
  //SEG228 [83] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  //SEG229 print_sword::@2
  //SEG230 [84] call print_char 
  //SEG231 [77] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  //SEG232 [77] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#61 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG233 [77] phi (byte) print_char::ch#6 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
  //SEG234 print_sword::@3
  //SEG235 [85] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#3 -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG236 [86] phi from print_sword print_sword::@3 to print_sword::@1 [phi:print_sword/print_sword::@3->print_sword::@1]
  //SEG237 [86] phi (byte*) print_char_cursor#60 = (byte*) print_char_cursor#61 [phi:print_sword/print_sword::@3->print_sword::@1#0] -- register_copy 
  //SEG238 [86] phi (signed word) print_sword::w#4 = (signed word) print_sword::w#3 [phi:print_sword/print_sword::@3->print_sword::@1#1] -- register_copy 
  //SEG239 print_sword::@1
  b1:
  //SEG240 [87] call print_word 
    jsr print_word
  //SEG241 print_sword::@return
  //SEG242 [88] return 
    rts
}
//SEG243 print_word
// Print a word as HEX
print_word: {
  //SEG244 [89] (byte) print_byte::b#0 ← > (word)(signed word) print_sword::w#4 -- vbuz1=_hi_vwuz2 
    lda print_sword.w+1
    sta print_byte.b
  //SEG245 [90] call print_byte 
  //SEG246 [94] phi from print_word to print_byte [phi:print_word->print_byte]
  //SEG247 [94] phi (byte*) print_char_cursor#63 = (byte*) print_char_cursor#60 [phi:print_word->print_byte#0] -- register_copy 
  //SEG248 [94] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG249 print_word::@1
  //SEG250 [91] (byte) print_byte::b#1 ← < (word)(signed word) print_sword::w#4 -- vbuz1=_lo_vwuz2 
    lda print_sword.w
    sta print_byte.b
  //SEG251 [92] call print_byte 
  //SEG252 [94] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  //SEG253 [94] phi (byte*) print_char_cursor#63 = (byte*) print_char_cursor#14 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG254 [94] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG255 print_word::@return
  //SEG256 [93] return 
    rts
}
//SEG257 print_byte
// Print a byte as HEX
// print_byte(byte zeropage($e) b)
print_byte: {
    .label b = $e
  //SEG258 [95] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG259 [96] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG260 [97] call print_char 
  //SEG261 [77] phi from print_byte to print_char [phi:print_byte->print_char]
  //SEG262 [77] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#63 [phi:print_byte->print_char#0] -- register_copy 
  //SEG263 [77] phi (byte) print_char::ch#6 = (byte) print_char::ch#1 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
  //SEG264 print_byte::@1
  //SEG265 [98] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG266 [99] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG267 [100] call print_char 
  //SEG268 [77] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  //SEG269 [77] phi (byte*) print_char_cursor#43 = (byte*) print_char_cursor#14 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG270 [77] phi (byte) print_char::ch#6 = (byte) print_char::ch#2 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
  //SEG271 print_byte::@return
  //SEG272 [101] return 
    rts
}
//SEG273 print_str
// Print a zero-terminated string
// print_str(byte* zeropage(7) str)
print_str: {
    .label str = 7
  //SEG274 [103] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  //SEG275 [103] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#14 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG276 [103] phi (byte*) print_str::str#2 = (byte*) print_str::str#1 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
  //SEG277 print_str::@1
  b1:
  //SEG278 [104] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
  //SEG279 print_str::@return
  //SEG280 [105] return 
    rts
  //SEG281 print_str::@2
  b2:
  //SEG282 [106] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (print_char_cursor),y
  //SEG283 [107] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG284 [108] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1
}
//SEG285 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $f
  //SEG286 [110] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG287 [110] phi (byte*) print_cls::sc#2 = (byte*) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
  //SEG288 [110] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG289 [110] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG290 print_cls::@1
  b1:
  //SEG291 [111] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG292 [112] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG293 [113] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1
    lda sc
    cmp #<$400+$3e8
    bne b1
  //SEG294 print_cls::@return
  //SEG295 [114] return 
    rts
}
  print_hextab: .text "0123456789abcdef"
  swords: .word -$6fed, $12, $7fed

