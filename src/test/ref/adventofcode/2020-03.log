Resolved forward reference rawmap to rawmap
Fixing struct type size struct ATARI_GTIA_READ to 32
Fixing struct type size struct ATARI_POKEY_READ to 16
Fixing struct type size struct printf_buffer_number to 12
Fixing struct type size struct printf_buffer_number to 12
Fixing struct type size struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct ATARI_GTIA_READ to 32
Fixing struct type SIZE_OF struct ATARI_POKEY_READ to 16
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct ATARI_GTIA_READ to 32
Fixing struct type SIZE_OF struct ATARI_POKEY_READ to 16
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Setting inferred volatile on symbol affected by address-of cputc::$4 = call convertToScreenCode(&cputc::c)
Setting inferred __stackcall on procedure affected by address-of __stackcall void cputc(volatile char c) caused by statement call printf_str(&cputc, "1: encountered "at)
Setting inferred __stackcall on procedure affected by address-of __stackcall void cputc(volatile char c) caused by statement call printf_uint(&cputc, main::$1, { 0, 0, 0, 0, 0, DECIMAL })
Setting inferred __stackcall on procedure affected by address-of __stackcall void cputc(volatile char c) caused by statement call printf_str(&cputc, " trees
"at)
Setting inferred __stackcall on procedure affected by address-of __stackcall void cputc(volatile char c) caused by statement call printf_str(&cputc, "2a: encountered "at)
Setting inferred __stackcall on procedure affected by address-of __stackcall void cputc(volatile char c) caused by statement call printf_uint(&cputc, main::$3, { 0, 0, 0, 0, 0, DECIMAL })
Setting inferred __stackcall on procedure affected by address-of __stackcall void cputc(volatile char c) caused by statement call printf_str(&cputc, " trees
"at)
Setting inferred __stackcall on procedure affected by address-of __stackcall void cputc(volatile char c) caused by statement call printf_str(&cputc, "2b: encountered "at)
Setting inferred __stackcall on procedure affected by address-of __stackcall void cputc(volatile char c) caused by statement call printf_uint(&cputc, main::$5, { 0, 0, 0, 0, 0, DECIMAL })
Setting inferred __stackcall on procedure affected by address-of __stackcall void cputc(volatile char c) caused by statement call printf_str(&cputc, " trees
"at)
Setting inferred __stackcall on procedure affected by address-of __stackcall void cputc(volatile char c) caused by statement call printf_str(&cputc, "2c: encountered "at)
Setting inferred __stackcall on procedure affected by address-of __stackcall void cputc(volatile char c) caused by statement call printf_uint(&cputc, main::$7, { 0, 0, 0, 0, 0, DECIMAL })
Setting inferred __stackcall on procedure affected by address-of __stackcall void cputc(volatile char c) caused by statement call printf_str(&cputc, " trees
"at)
Setting inferred __stackcall on procedure affected by address-of __stackcall void cputc(volatile char c) caused by statement call printf_str(&cputc, "2d: encountered "at)
Setting inferred __stackcall on procedure affected by address-of __stackcall void cputc(volatile char c) caused by statement call printf_uint(&cputc, main::$9, { 0, 0, 0, 0, 0, DECIMAL })
Setting inferred __stackcall on procedure affected by address-of __stackcall void cputc(volatile char c) caused by statement call printf_str(&cputc, " trees
"at)
Setting inferred __stackcall on procedure affected by address-of __stackcall void cputc(volatile char c) caused by statement call printf_str(&cputc, "2e: encountered "at)
Setting inferred __stackcall on procedure affected by address-of __stackcall void cputc(volatile char c) caused by statement call printf_uint(&cputc, main::$11, { 0, 0, 0, 0, 0, DECIMAL })
Setting inferred __stackcall on procedure affected by address-of __stackcall void cputc(volatile char c) caused by statement call printf_str(&cputc, " trees
"at)
Adding parameter assignment in __stackcall procedure cputc::c = param(cputc::c)
Added struct type cast to parameter value list call printf_uint(&cputc, main::$1, (struct printf_format_number){ 0, 0, 0, 0, 0, DECIMAL })
Added struct type cast to parameter value list call printf_uint(&cputc, main::$3, (struct printf_format_number){ 0, 0, 0, 0, 0, DECIMAL })
Added struct type cast to parameter value list call printf_uint(&cputc, main::$5, (struct printf_format_number){ 0, 0, 0, 0, 0, DECIMAL })
Added struct type cast to parameter value list call printf_uint(&cputc, main::$7, (struct printf_format_number){ 0, 0, 0, 0, 0, DECIMAL })
Added struct type cast to parameter value list call printf_uint(&cputc, main::$9, (struct printf_format_number){ 0, 0, 0, 0, 0, DECIMAL })
Added struct type cast to parameter value list call printf_uint(&cputc, main::$11, (struct printf_format_number){ 0, 0, 0, 0, 0, DECIMAL })
Inlined call cputc::$4 = call convertToScreenCode(&cputc::c)
Inlined call call __init
Eliminating unused variable with no statement memcpy::$0
Eliminating unused variable with no statement memset::$2
Eliminating unused variable with no statement putchar::$0
Eliminating unused variable with no statement putchar::$1
Eliminating unused variable with no statement setcursor::$0
Eliminating unused variable with no statement main::$2
Eliminating unused variable with no statement main::$4
Eliminating unused variable with no statement main::$6
Eliminating unused variable with no statement main::$8
Eliminating unused variable with no statement main::$10
Eliminating unused variable with no statement main::$12
Calling convention STACK_CALL adding prepare/execute/finalize for call *printf_str::putc printf_str::c 
Calling convention STACK_CALL adding prepare/execute/finalize for call *printf_padding::putc printf_padding::pad 
Calling convention STACK_CALL adding prepare/execute/finalize for call *printf_number_buffer::putc printf_number_buffer::buffer_sign 
Calling convention STACK_CALL replacing param(cputc::c) with stackidx(char,cputc::OFFSET_STACK_C)
Calling convention STACK_CALL adding stack push stackpush(char) = printf_str::c
Calling convention STACK_CALL adding stack push stackpush(char) = printf_padding::pad
Calling convention STACK_CALL adding stack push stackpush(char) = printf_number_buffer::buffer_sign

CONTROL FLOW GRAPH SSA

void * memcpy(void *destination , void *source , unsigned int num)
memcpy: scope:[memcpy]  from newline::@5
  memcpy::num#1 = phi( newline::@5/memcpy::num#0 )
  memcpy::destination#1 = phi( newline::@5/memcpy::destination#0 )
  memcpy::source#1 = phi( newline::@5/memcpy::source#0 )
  memcpy::src#0 = ((char *)) memcpy::source#1
  memcpy::dst#0 = ((char *)) memcpy::destination#1
  memcpy::$2 = (char *)memcpy::source#1
  memcpy::src_end#0 = memcpy::$2 + memcpy::num#1
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  memcpy::destination#3 = phi( memcpy/memcpy::destination#1, memcpy::@2/memcpy::destination#4 )
  memcpy::dst#3 = phi( memcpy/memcpy::dst#0, memcpy::@2/memcpy::dst#1 )
  memcpy::src_end#1 = phi( memcpy/memcpy::src_end#0, memcpy::@2/memcpy::src_end#2 )
  memcpy::src#2 = phi( memcpy/memcpy::src#0, memcpy::@2/memcpy::src#1 )
  memcpy::$1 = memcpy::src#2 != memcpy::src_end#1
  if(memcpy::$1) goto memcpy::@2
  to:memcpy::@3
memcpy::@2: scope:[memcpy]  from memcpy::@1
  memcpy::destination#4 = phi( memcpy::@1/memcpy::destination#3 )
  memcpy::src_end#2 = phi( memcpy::@1/memcpy::src_end#1 )
  memcpy::dst#2 = phi( memcpy::@1/memcpy::dst#3 )
  memcpy::src#3 = phi( memcpy::@1/memcpy::src#2 )
  *memcpy::dst#2 = *memcpy::src#3
  memcpy::dst#1 = ++ memcpy::dst#2
  memcpy::src#1 = ++ memcpy::src#3
  to:memcpy::@1
memcpy::@3: scope:[memcpy]  from memcpy::@1
  memcpy::destination#2 = phi( memcpy::@1/memcpy::destination#3 )
  memcpy::return#0 = memcpy::destination#2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@3
  memcpy::return#3 = phi( memcpy::@3/memcpy::return#0 )
  memcpy::return#1 = memcpy::return#3
  return 
  to:@return

void * memset(void *str , char c , unsigned int num)
memset: scope:[memset]  from clrscr newline::@9
  memset::c#5 = phi( clrscr/memset::c#0, newline::@9/memset::c#1 )
  memset::str#4 = phi( clrscr/memset::str#0, newline::@9/memset::str#1 )
  memset::num#2 = phi( clrscr/memset::num#0, newline::@9/memset::num#1 )
  memset::$0 = memset::num#2 > 0
  memset::$1 = ! memset::$0
  if(memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  memset::str#2 = phi( memset/memset::str#4, memset::@3/memset::str#5 )
  memset::return#0 = memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  memset::c#4 = phi( memset/memset::c#5 )
  memset::num#3 = phi( memset/memset::num#2 )
  memset::str#3 = phi( memset/memset::str#4 )
  memset::$4 = (char *)memset::str#3
  memset::end#0 = memset::$4 + memset::num#3
  memset::dst#0 = ((char *)) memset::str#3
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  memset::c#3 = phi( memset::@2/memset::c#4, memset::@4/memset::c#2 )
  memset::str#5 = phi( memset::@2/memset::str#3, memset::@4/memset::str#6 )
  memset::end#1 = phi( memset::@2/memset::end#0, memset::@4/memset::end#2 )
  memset::dst#2 = phi( memset::@2/memset::dst#0, memset::@4/memset::dst#1 )
  memset::$3 = memset::dst#2 != memset::end#1
  if(memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  memset::str#6 = phi( memset::@3/memset::str#5 )
  memset::end#2 = phi( memset::@3/memset::end#1 )
  memset::dst#3 = phi( memset::@3/memset::dst#2 )
  memset::c#2 = phi( memset::@3/memset::c#3 )
  *memset::dst#3 = memset::c#2
  memset::dst#1 = ++ memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  memset::return#4 = phi( memset::@1/memset::return#0 )
  memset::return#1 = memset::return#4
  return 
  to:@return

unsigned int strlen(char *str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  strlen::str#4 = phi( printf_number_buffer::@6/strlen::str#1 )
  strlen::len#0 = 0
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  strlen::len#4 = phi( strlen/strlen::len#0, strlen::@2/strlen::len#1 )
  strlen::str#2 = phi( strlen/strlen::str#4, strlen::@2/strlen::str#0 )
  strlen::$0 = 0 != *strlen::str#2
  if(strlen::$0) goto strlen::@2
  to:strlen::@3
strlen::@2: scope:[strlen]  from strlen::@1
  strlen::str#3 = phi( strlen::@1/strlen::str#2 )
  strlen::len#2 = phi( strlen::@1/strlen::len#4 )
  strlen::len#1 = ++ strlen::len#2
  strlen::str#0 = ++ strlen::str#3
  to:strlen::@1
strlen::@3: scope:[strlen]  from strlen::@1
  strlen::len#3 = phi( strlen::@1/strlen::len#4 )
  strlen::return#0 = strlen::len#3
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@3
  strlen::return#3 = phi( strlen::@3/strlen::return#0 )
  strlen::return#1 = strlen::return#3
  return 
  to:@return

char toupper(char ch)
toupper: scope:[toupper]  from strupr::@2
  toupper::ch#1 = phi( strupr::@2/toupper::ch#0 )
  toupper::$0 = toupper::ch#1 >= 'a'at
  toupper::$1 = toupper::ch#1 <= 'z'at
  toupper::$2 = toupper::$0 && toupper::$1
  if(toupper::$2) goto toupper::@1
  to:toupper::@2
toupper::@1: scope:[toupper]  from toupper
  toupper::ch#2 = phi( toupper/toupper::ch#1 )
  toupper::$3 = toupper::ch#2 + 'A'at-'a'at
  toupper::return#0 = toupper::$3
  to:toupper::@return
toupper::@2: scope:[toupper]  from toupper
  toupper::ch#3 = phi( toupper/toupper::ch#1 )
  toupper::return#1 = toupper::ch#3
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper::@1 toupper::@2
  toupper::return#4 = phi( toupper::@1/toupper::return#0, toupper::@2/toupper::return#1 )
  toupper::return#2 = toupper::return#4
  return 
  to:@return

char * strupr(char *str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  strupr::str#1 = phi( printf_number_buffer::@11/strupr::str#0 )
  strupr::src#0 = strupr::str#1
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@4
  strupr::str#3 = phi( strupr/strupr::str#1, strupr::@4/strupr::str#4 )
  strupr::src#2 = phi( strupr/strupr::src#0, strupr::@4/strupr::src#1 )
  strupr::$1 = 0 != *strupr::src#2
  if(strupr::$1) goto strupr::@2
  to:strupr::@3
strupr::@2: scope:[strupr]  from strupr::@1
  strupr::str#5 = phi( strupr::@1/strupr::str#3 )
  strupr::src#3 = phi( strupr::@1/strupr::src#2 )
  toupper::ch#0 = *strupr::src#3
  call toupper
  toupper::return#3 = toupper::return#2
  to:strupr::@4
strupr::@4: scope:[strupr]  from strupr::@2
  strupr::str#4 = phi( strupr::@2/strupr::str#5 )
  strupr::src#4 = phi( strupr::@2/strupr::src#3 )
  toupper::return#5 = phi( strupr::@2/toupper::return#3 )
  strupr::$0 = toupper::return#5
  *strupr::src#4 = strupr::$0
  strupr::src#1 = ++ strupr::src#4
  to:strupr::@1
strupr::@3: scope:[strupr]  from strupr::@1
  strupr::str#2 = phi( strupr::@1/strupr::str#3 )
  strupr::return#0 = strupr::str#2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@3
  strupr::return#3 = phi( strupr::@3/strupr::return#0 )
  strupr::return#1 = strupr::return#3
  return 
  to:@return

void utoa(unsigned int value , char *buffer , char radix)
utoa: scope:[utoa]  from printf_uint::@3
  utoa::buffer#21 = phi( printf_uint::@3/utoa::buffer#5 )
  utoa::value#12 = phi( printf_uint::@3/utoa::value#1 )
  utoa::radix#1 = phi( printf_uint::@3/utoa::radix#0 )
  utoa::max_digits#0 = 0
  utoa::digit_values#0 = (unsigned int *) 0
  utoa::$0 = utoa::radix#1 == DECIMAL
  if(utoa::$0) goto utoa::@1
  to:utoa::@6
utoa::@1: scope:[utoa]  from utoa
  utoa::buffer#17 = phi( utoa/utoa::buffer#21 )
  utoa::value#8 = phi( utoa/utoa::value#12 )
  utoa::max_digits#1 = 5
  utoa::digit_values#1 = RADIX_DECIMAL_VALUES
  to:utoa::@5
utoa::@6: scope:[utoa]  from utoa
  utoa::value#13 = phi( utoa/utoa::value#12 )
  utoa::buffer#16 = phi( utoa/utoa::buffer#21 )
  utoa::radix#2 = phi( utoa/utoa::radix#1 )
  utoa::$1 = utoa::radix#2 == HEXADECIMAL
  if(utoa::$1) goto utoa::@2
  to:utoa::@7
utoa::@2: scope:[utoa]  from utoa::@6
  utoa::buffer#18 = phi( utoa::@6/utoa::buffer#16 )
  utoa::value#9 = phi( utoa::@6/utoa::value#13 )
  utoa::max_digits#2 = 4
  utoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES
  to:utoa::@5
utoa::@7: scope:[utoa]  from utoa::@6
  utoa::value#14 = phi( utoa::@6/utoa::value#13 )
  utoa::buffer#13 = phi( utoa::@6/utoa::buffer#16 )
  utoa::radix#3 = phi( utoa::@6/utoa::radix#2 )
  utoa::$2 = utoa::radix#3 == OCTAL
  if(utoa::$2) goto utoa::@3
  to:utoa::@8
utoa::@3: scope:[utoa]  from utoa::@7
  utoa::buffer#19 = phi( utoa::@7/utoa::buffer#13 )
  utoa::value#10 = phi( utoa::@7/utoa::value#14 )
  utoa::max_digits#3 = 6
  utoa::digit_values#3 = RADIX_OCTAL_VALUES
  to:utoa::@5
utoa::@8: scope:[utoa]  from utoa::@7
  utoa::value#15 = phi( utoa::@7/utoa::value#14 )
  utoa::buffer#10 = phi( utoa::@7/utoa::buffer#13 )
  utoa::radix#4 = phi( utoa::@7/utoa::radix#3 )
  utoa::$3 = utoa::radix#4 == BINARY
  if(utoa::$3) goto utoa::@4
  to:utoa::@9
utoa::@4: scope:[utoa]  from utoa::@8
  utoa::buffer#20 = phi( utoa::@8/utoa::buffer#10 )
  utoa::value#11 = phi( utoa::@8/utoa::value#15 )
  utoa::max_digits#4 = $10
  utoa::digit_values#4 = RADIX_BINARY_VALUES
  to:utoa::@5
utoa::@9: scope:[utoa]  from utoa::@8
  utoa::buffer#6 = phi( utoa::@8/utoa::buffer#10 )
  *utoa::buffer#6 = 'e'at
  utoa::buffer#0 = ++ utoa::buffer#6
  *utoa::buffer#0 = 'r'at
  utoa::buffer#1 = ++ utoa::buffer#0
  *utoa::buffer#1 = 'r'at
  utoa::buffer#2 = ++ utoa::buffer#1
  *utoa::buffer#2 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@12 utoa::@9
  return 
  to:@return
utoa::@5: scope:[utoa]  from utoa::@1 utoa::@2 utoa::@3 utoa::@4
  utoa::buffer#15 = phi( utoa::@1/utoa::buffer#17, utoa::@2/utoa::buffer#18, utoa::@3/utoa::buffer#19, utoa::@4/utoa::buffer#20 )
  utoa::value#7 = phi( utoa::@1/utoa::value#8, utoa::@2/utoa::value#9, utoa::@3/utoa::value#10, utoa::@4/utoa::value#11 )
  utoa::digit_values#8 = phi( utoa::@1/utoa::digit_values#1, utoa::@2/utoa::digit_values#2, utoa::@3/utoa::digit_values#3, utoa::@4/utoa::digit_values#4 )
  utoa::max_digits#7 = phi( utoa::@1/utoa::max_digits#1, utoa::@2/utoa::max_digits#2, utoa::@3/utoa::max_digits#3, utoa::@4/utoa::max_digits#4 )
  utoa::started#0 = 0
  utoa::digit#0 = 0
  to:utoa::@10
utoa::@10: scope:[utoa]  from utoa::@13 utoa::@5
  utoa::buffer#11 = phi( utoa::@13/utoa::buffer#14, utoa::@5/utoa::buffer#15 )
  utoa::started#3 = phi( utoa::@13/utoa::started#4, utoa::@5/utoa::started#0 )
  utoa::value#5 = phi( utoa::@13/utoa::value#6, utoa::@5/utoa::value#7 )
  utoa::digit_values#6 = phi( utoa::@13/utoa::digit_values#7, utoa::@5/utoa::digit_values#8 )
  utoa::digit#2 = phi( utoa::@13/utoa::digit#1, utoa::@5/utoa::digit#0 )
  utoa::max_digits#5 = phi( utoa::@13/utoa::max_digits#6, utoa::@5/utoa::max_digits#7 )
  utoa::$4 = utoa::max_digits#5 - 1
  utoa::$5 = utoa::digit#2 < utoa::$4
  if(utoa::$5) goto utoa::@11
  to:utoa::@12
utoa::@11: scope:[utoa]  from utoa::@10
  utoa::max_digits#8 = phi( utoa::@10/utoa::max_digits#5 )
  utoa::buffer#12 = phi( utoa::@10/utoa::buffer#11 )
  utoa::started#2 = phi( utoa::@10/utoa::started#3 )
  utoa::value#2 = phi( utoa::@10/utoa::value#5 )
  utoa::digit_values#5 = phi( utoa::@10/utoa::digit_values#6 )
  utoa::digit#3 = phi( utoa::@10/utoa::digit#2 )
  utoa::$10 = utoa::digit#3 * SIZEOF_UNSIGNED_INT
  utoa::digit_value#0 = utoa::digit_values#5[utoa::$10]
  utoa::$6 = utoa::value#2 >= utoa::digit_value#0
  utoa::$7 = utoa::started#2 || utoa::$6
  utoa::$8 = ! utoa::$7
  if(utoa::$8) goto utoa::@13
  to:utoa::@14
utoa::@12: scope:[utoa]  from utoa::@10
  utoa::buffer#7 = phi( utoa::@10/utoa::buffer#11 )
  utoa::value#3 = phi( utoa::@10/utoa::value#5 )
  utoa::$11 = (char)utoa::value#3
  *utoa::buffer#7 = DIGITS[utoa::$11]
  utoa::buffer#3 = ++ utoa::buffer#7
  *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@13: scope:[utoa]  from utoa::@11 utoa::@15
  utoa::buffer#14 = phi( utoa::@11/utoa::buffer#12, utoa::@15/utoa::buffer#4 )
  utoa::started#4 = phi( utoa::@11/utoa::started#2, utoa::@15/utoa::started#1 )
  utoa::value#6 = phi( utoa::@11/utoa::value#2, utoa::@15/utoa::value#0 )
  utoa::digit_values#7 = phi( utoa::@11/utoa::digit_values#5, utoa::@15/utoa::digit_values#9 )
  utoa::max_digits#6 = phi( utoa::@11/utoa::max_digits#8, utoa::@15/utoa::max_digits#9 )
  utoa::digit#4 = phi( utoa::@11/utoa::digit#3, utoa::@15/utoa::digit#5 )
  utoa::digit#1 = ++ utoa::digit#4
  to:utoa::@10
utoa::@14: scope:[utoa]  from utoa::@11
  utoa::digit_values#10 = phi( utoa::@11/utoa::digit_values#5 )
  utoa::max_digits#10 = phi( utoa::@11/utoa::max_digits#8 )
  utoa::digit#6 = phi( utoa::@11/utoa::digit#3 )
  utoa::digit_value#1 = phi( utoa::@11/utoa::digit_value#0 )
  utoa::value#4 = phi( utoa::@11/utoa::value#2 )
  utoa::buffer#8 = phi( utoa::@11/utoa::buffer#12 )
  utoa_append::buffer#0 = utoa::buffer#8
  utoa_append::value#0 = utoa::value#4
  utoa_append::sub#0 = utoa::digit_value#1
  call utoa_append
  utoa_append::return#0 = utoa_append::return#2
  to:utoa::@15
utoa::@15: scope:[utoa]  from utoa::@14
  utoa::digit_values#9 = phi( utoa::@14/utoa::digit_values#10 )
  utoa::max_digits#9 = phi( utoa::@14/utoa::max_digits#10 )
  utoa::digit#5 = phi( utoa::@14/utoa::digit#6 )
  utoa::buffer#9 = phi( utoa::@14/utoa::buffer#8 )
  utoa_append::return#3 = phi( utoa::@14/utoa_append::return#0 )
  utoa::$9 = utoa_append::return#3
  utoa::value#0 = utoa::$9
  utoa::buffer#4 = ++ utoa::buffer#9
  utoa::started#1 = 1
  to:utoa::@13

unsigned int utoa_append(char *buffer , unsigned int value , unsigned int sub)
utoa_append: scope:[utoa_append]  from utoa::@14
  utoa_append::buffer#3 = phi( utoa::@14/utoa_append::buffer#0 )
  utoa_append::sub#3 = phi( utoa::@14/utoa_append::sub#0 )
  utoa_append::value#5 = phi( utoa::@14/utoa_append::value#0 )
  utoa_append::digit#0 = 0
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  utoa_append::buffer#2 = phi( utoa_append/utoa_append::buffer#3, utoa_append::@2/utoa_append::buffer#4 )
  utoa_append::digit#4 = phi( utoa_append/utoa_append::digit#0, utoa_append::@2/utoa_append::digit#1 )
  utoa_append::sub#1 = phi( utoa_append/utoa_append::sub#3, utoa_append::@2/utoa_append::sub#2 )
  utoa_append::value#2 = phi( utoa_append/utoa_append::value#5, utoa_append::@2/utoa_append::value#1 )
  utoa_append::$0 = utoa_append::value#2 >= utoa_append::sub#1
  if(utoa_append::$0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  utoa_append::buffer#4 = phi( utoa_append::@1/utoa_append::buffer#2 )
  utoa_append::sub#2 = phi( utoa_append::@1/utoa_append::sub#1 )
  utoa_append::value#3 = phi( utoa_append::@1/utoa_append::value#2 )
  utoa_append::digit#2 = phi( utoa_append::@1/utoa_append::digit#4 )
  utoa_append::digit#1 = ++ utoa_append::digit#2
  utoa_append::value#1 = utoa_append::value#3 - utoa_append::sub#2
  to:utoa_append::@1
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  utoa_append::value#4 = phi( utoa_append::@1/utoa_append::value#2 )
  utoa_append::buffer#1 = phi( utoa_append::@1/utoa_append::buffer#2 )
  utoa_append::digit#3 = phi( utoa_append::@1/utoa_append::digit#4 )
  *utoa_append::buffer#1 = DIGITS[utoa_append::digit#3]
  utoa_append::return#1 = utoa_append::value#4
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  utoa_append::return#4 = phi( utoa_append::@3/utoa_append::return#1 )
  utoa_append::return#2 = utoa_append::return#4
  return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  memset::str#0 = (void *)*SAVMSC
  memset::c#0 = 0
  memset::num#0 = $28*$18
  call memset
  memset::return#2 = memset::return#1
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr
  *OLDCHR = 0
  gotoxy::x#0 = 0
  gotoxy::y#0 = 0
  call gotoxy
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  return 
  to:@return

void gotoxy(char x , char y)
gotoxy: scope:[gotoxy]  from clrscr::@1 newline::@3
  gotoxy::y#2 = phi( clrscr::@1/gotoxy::y#0, newline::@3/gotoxy::y#1 )
  gotoxy::x#2 = phi( clrscr::@1/gotoxy::x#0, newline::@3/gotoxy::x#1 )
  *COLCRS = gotoxy::x#2
  *ROWCRS = gotoxy::y#2
  call setcursor
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@1
  return 
  to:@return

__stackcall void cputc(volatile char c)
cputc: scope:[cputc]  from
  cputc::c = stackidx(char,cputc::OFFSET_STACK_C)
  cputc::$0 = cputc::c == ''at
  if(cputc::$0) goto cputc::@1
  to:cputc::@3
cputc::@1: scope:[cputc]  from cputc
  *COLCRS = 0
  call setcursor
  to:cputc::@8
cputc::@8: scope:[cputc]  from cputc::@1
  to:cputc::@return
cputc::@3: scope:[cputc]  from cputc
  cputc::$1 = cputc::c == '
'at
  cputc::$2 = cputc::c == $9b
  cputc::$3 = cputc::$1 || cputc::$2
  if(cputc::$3) goto cputc::@2
  to:cputc::@4
cputc::@2: scope:[cputc]  from cputc::@3
  *COLCRS = 0
  call newline
  to:cputc::@9
cputc::@9: scope:[cputc]  from cputc::@2
  to:cputc::@return
cputc::@4: scope:[cputc]  from cputc::@3
  cputc::convertToScreenCode1_v#0 = &cputc::c
  to:cputc::convertToScreenCode1
cputc::convertToScreenCode1: scope:[cputc]  from cputc::@4
  cputc::convertToScreenCode1_v#1 = phi( cputc::@4/cputc::convertToScreenCode1_v#0 )
  cputc::convertToScreenCode1_return#0 = rawmap[*cputc::convertToScreenCode1_v#1]
  to:cputc::convertToScreenCode1_@return
cputc::convertToScreenCode1_@return: scope:[cputc]  from cputc::convertToScreenCode1
  cputc::convertToScreenCode1_return#2 = phi( cputc::convertToScreenCode1/cputc::convertToScreenCode1_return#0 )
  cputc::convertToScreenCode1_return#1 = cputc::convertToScreenCode1_return#2
  to:cputc::@7
cputc::@7: scope:[cputc]  from cputc::convertToScreenCode1_@return
  cputc::convertToScreenCode1_return#3 = phi( cputc::convertToScreenCode1_@return/cputc::convertToScreenCode1_return#1 )
  cputc::$4 = cputc::convertToScreenCode1_return#3
  putchar::code#0 = cputc::$4
  call putchar
  to:cputc::@10
cputc::@10: scope:[cputc]  from cputc::@7
  *COLCRS = ++ *COLCRS
  cputc::$7 = *COLCRS == $28
  if(cputc::$7) goto cputc::@6
  to:cputc::@5
cputc::@6: scope:[cputc]  from cputc::@10
  *COLCRS = 0
  call newline
  to:cputc::@11
cputc::@11: scope:[cputc]  from cputc::@6
  to:cputc::@return
cputc::@5: scope:[cputc]  from cputc::@10
  call setcursor
  to:cputc::@12
cputc::@12: scope:[cputc]  from cputc::@5
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@11 cputc::@12 cputc::@8 cputc::@9
  return 
  to:@return

void putchar(char code)
putchar: scope:[putchar]  from cputc::@7
  putchar::code#2 = phi( cputc::@7/putchar::code#0 )
  *(*OLDADR) = *OLDCHR
  call cursorLocation
  cursorLocation::return#0 = cursorLocation::return#2
  to:putchar::@1
putchar::@1: scope:[putchar]  from putchar
  putchar::code#1 = phi( putchar/putchar::code#2 )
  cursorLocation::return#4 = phi( putchar/cursorLocation::return#0 )
  putchar::loc#0 = cursorLocation::return#4
  putchar::newChar#0 = putchar::code#1 | conio_reverse_value
  *putchar::loc#0 = putchar::newChar#0
  *OLDCHR = putchar::newChar#0
  call setcursor
  to:putchar::@2
putchar::@2: scope:[putchar]  from putchar::@1
  to:putchar::@return
putchar::@return: scope:[putchar]  from putchar::@2
  return 
  to:@return

char * cursorLocation()
cursorLocation: scope:[cursorLocation]  from putchar setcursor
  cursorLocation::$3 = (unsigned int)*ROWCRS
  cursorLocation::$0 = cursorLocation::$3 * $28
  cursorLocation::$1 = *SAVMSC + cursorLocation::$0
  cursorLocation::$2 = cursorLocation::$1 + *COLCRS
  cursorLocation::return#1 = cursorLocation::$2
  to:cursorLocation::@return
cursorLocation::@return: scope:[cursorLocation]  from cursorLocation
  cursorLocation::return#5 = phi( cursorLocation/cursorLocation::return#1 )
  cursorLocation::return#2 = cursorLocation::return#5
  return 
  to:@return

void newline()
newline: scope:[newline]  from cputc::@2 cputc::@6
  newline::$0 = *ROWCRS == $18
  *ROWCRS = ++ *ROWCRS
  newline::$1 = ! newline::$0
  if(newline::$1) goto newline::@1
  to:newline::@2
newline::@1: scope:[newline]  from newline newline::@10 newline::@8
  call setcursor
  to:newline::@7
newline::@7: scope:[newline]  from newline::@1
  to:newline::@return
newline::@2: scope:[newline]  from newline
  newline::$3 = conio_scroll_enable == 1
  if(newline::$3) goto newline::@4
  to:newline::@3
newline::@4: scope:[newline]  from newline::@2
  newline::$5 = conio_display_cursor == 1
  newline::$6 = ! newline::$5
  if(newline::$6) goto newline::@5
  to:newline::@6
newline::@3: scope:[newline]  from newline::@2
  gotoxy::x#1 = 0
  gotoxy::y#1 = 0
  call gotoxy
  to:newline::@8
newline::@8: scope:[newline]  from newline::@3
  to:newline::@1
newline::@5: scope:[newline]  from newline::@4 newline::@6
  newline::start#0 = *SAVMSC
  newline::$7 = newline::start#0 + $28
  memcpy::destination#0 = (void *)newline::start#0
  memcpy::source#0 = (void *)newline::$7
  memcpy::num#0 = $28*$17
  call memcpy
  memcpy::return#2 = memcpy::return#1
  to:newline::@9
newline::@9: scope:[newline]  from newline::@5
  newline::start#1 = phi( newline::@5/newline::start#0 )
  newline::$9 = newline::start#1 + $28*$17
  memset::str#1 = (void *)newline::$9
  memset::c#1 = 0
  memset::num#1 = $28
  call memset
  memset::return#3 = memset::return#1
  to:newline::@10
newline::@10: scope:[newline]  from newline::@9
  *ROWCRS = $18-1
  to:newline::@1
newline::@6: scope:[newline]  from newline::@4
  *(*OLDADR) = *(*OLDADR) ^ $80
  to:newline::@5
newline::@return: scope:[newline]  from newline::@7
  return 
  to:@return

void setcursor()
setcursor: scope:[setcursor]  from cputc::@1 cputc::@5 gotoxy newline::@1 putchar::@1
  *(*OLDADR) = *OLDCHR
  call cursorLocation
  cursorLocation::return#3 = cursorLocation::return#2
  to:setcursor::@4
setcursor::@4: scope:[setcursor]  from setcursor
  cursorLocation::return#6 = phi( setcursor/cursorLocation::return#3 )
  setcursor::loc#0 = cursorLocation::return#6
  setcursor::c#0 = *setcursor::loc#0
  *OLDCHR = setcursor::c#0
  *OLDADR = setcursor::loc#0
  setcursor::$1 = conio_display_cursor == 0
  if(setcursor::$1) goto setcursor::@1
  to:setcursor::@3
setcursor::@1: scope:[setcursor]  from setcursor::@4
  setcursor::c#4 = phi( setcursor::@4/setcursor::c#0 )
  *CRSINH = 1
  to:setcursor::@2
setcursor::@3: scope:[setcursor]  from setcursor::@4
  setcursor::c#2 = phi( setcursor::@4/setcursor::c#0 )
  *CRSINH = 0
  setcursor::$2 = setcursor::c#2 ^ $80
  setcursor::c#1 = setcursor::$2
  to:setcursor::@2
setcursor::@2: scope:[setcursor]  from setcursor::@1 setcursor::@3
  setcursor::c#3 = phi( setcursor::@1/setcursor::c#4, setcursor::@3/setcursor::c#1 )
  *(*OLDADR) = setcursor::c#3
  to:setcursor::@return
setcursor::@return: scope:[setcursor]  from setcursor::@2
  return 
  to:@return

void printf_str(void (*putc)(char) , const char *s)
printf_str: scope:[printf_str]  from main::@11 main::@13 main::@15 main::@17 main::@19 main::@21 main::@23 main::@25 main::@3 main::@5 main::@7 main::@9 printf_number_buffer::@5
  printf_str::putc#15 = phi( main::@11/printf_str::putc#5, main::@13/printf_str::putc#6, main::@15/printf_str::putc#7, main::@17/printf_str::putc#8, main::@19/printf_str::putc#9, main::@21/printf_str::putc#10, main::@23/printf_str::putc#11, main::@25/printf_str::putc#12, main::@3/printf_str::putc#1, main::@5/printf_str::putc#2, main::@7/printf_str::putc#3, main::@9/printf_str::putc#4, printf_number_buffer::@5/printf_str::putc#0 )
  printf_str::s#15 = phi( main::@11/printf_str::s#6, main::@13/printf_str::s#7, main::@15/printf_str::s#8, main::@17/printf_str::s#9, main::@19/printf_str::s#10, main::@21/printf_str::s#11, main::@23/printf_str::s#12, main::@25/printf_str::s#13, main::@3/printf_str::s#2, main::@5/printf_str::s#3, main::@7/printf_str::s#4, main::@9/printf_str::s#5, printf_number_buffer::@5/printf_str::s#1 )
  printf_str::c#0 = 0
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@2
  printf_str::putc#14 = phi( printf_str/printf_str::putc#15, printf_str::@2/printf_str::putc#13 )
  printf_str::s#14 = phi( printf_str/printf_str::s#15, printf_str::@2/printf_str::s#16 )
  printf_str::c#1 = *printf_str::s#14
  printf_str::$0 = printf_str::c#1
  printf_str::s#0 = ++ printf_str::s#14
  printf_str::$2 = 0 != printf_str::$0
  if(printf_str::$2) goto printf_str::@2
  to:printf_str::@return
printf_str::@2: scope:[printf_str]  from printf_str::@1
  printf_str::s#16 = phi( printf_str::@1/printf_str::s#0 )
  printf_str::putc#13 = phi( printf_str::@1/printf_str::putc#14 )
  printf_str::c#2 = phi( printf_str::@1/printf_str::c#1 )
  stackpush(char) = printf_str::c#2
  callexecute *printf_str::putc#13 
  sideeffect stackpullbytes(1)
  to:printf_str::@1
printf_str::@return: scope:[printf_str]  from printf_str::@1
  return 
  to:@return

void printf_padding(void (*putc)(char) , char pad , char length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  printf_padding::putc#5 = phi( printf_number_buffer::@10/printf_padding::putc#1, printf_number_buffer::@12/printf_padding::putc#2, printf_number_buffer::@8/printf_padding::putc#0 )
  printf_padding::pad#5 = phi( printf_number_buffer::@10/printf_padding::pad#1, printf_number_buffer::@12/printf_padding::pad#2, printf_number_buffer::@8/printf_padding::pad#0 )
  printf_padding::length#4 = phi( printf_number_buffer::@10/printf_padding::length#1, printf_number_buffer::@12/printf_padding::length#2, printf_number_buffer::@8/printf_padding::length#0 )
  printf_padding::i#0 = 0
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  printf_padding::putc#4 = phi( printf_padding/printf_padding::putc#5, printf_padding::@3/printf_padding::putc#6 )
  printf_padding::pad#4 = phi( printf_padding/printf_padding::pad#5, printf_padding::@3/printf_padding::pad#6 )
  printf_padding::length#3 = phi( printf_padding/printf_padding::length#4, printf_padding::@3/printf_padding::length#5 )
  printf_padding::i#2 = phi( printf_padding/printf_padding::i#0, printf_padding::@3/printf_padding::i#1 )
  printf_padding::$0 = printf_padding::i#2 < printf_padding::length#3
  if(printf_padding::$0) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  printf_padding::length#6 = phi( printf_padding::@1/printf_padding::length#3 )
  printf_padding::i#4 = phi( printf_padding::@1/printf_padding::i#2 )
  printf_padding::putc#3 = phi( printf_padding::@1/printf_padding::putc#4 )
  printf_padding::pad#3 = phi( printf_padding::@1/printf_padding::pad#4 )
  stackpush(char) = printf_padding::pad#3
  callexecute *printf_padding::putc#3 
  sideeffect stackpullbytes(1)
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  printf_padding::putc#6 = phi( printf_padding::@2/printf_padding::putc#3 )
  printf_padding::pad#6 = phi( printf_padding::@2/printf_padding::pad#3 )
  printf_padding::length#5 = phi( printf_padding::@2/printf_padding::length#6 )
  printf_padding::i#3 = phi( printf_padding::@2/printf_padding::i#4 )
  printf_padding::i#1 = ++ printf_padding::i#3
  to:printf_padding::@1
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  return 
  to:@return

void printf_uint(void (*putc)(char) , unsigned int uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_uint: scope:[printf_uint]  from main::@12 main::@16 main::@20 main::@24 main::@4 main::@8
  printf_uint::format_upper_case#10 = phi( main::@12/printf_uint::format_upper_case#2, main::@16/printf_uint::format_upper_case#3, main::@20/printf_uint::format_upper_case#4, main::@24/printf_uint::format_upper_case#5, main::@4/printf_uint::format_upper_case#0, main::@8/printf_uint::format_upper_case#1 )
  printf_uint::format_zero_padding#10 = phi( main::@12/printf_uint::format_zero_padding#2, main::@16/printf_uint::format_zero_padding#3, main::@20/printf_uint::format_zero_padding#4, main::@24/printf_uint::format_zero_padding#5, main::@4/printf_uint::format_zero_padding#0, main::@8/printf_uint::format_zero_padding#1 )
  printf_uint::format_justify_left#10 = phi( main::@12/printf_uint::format_justify_left#2, main::@16/printf_uint::format_justify_left#3, main::@20/printf_uint::format_justify_left#4, main::@24/printf_uint::format_justify_left#5, main::@4/printf_uint::format_justify_left#0, main::@8/printf_uint::format_justify_left#1 )
  printf_uint::format_min_length#10 = phi( main::@12/printf_uint::format_min_length#2, main::@16/printf_uint::format_min_length#3, main::@20/printf_uint::format_min_length#4, main::@24/printf_uint::format_min_length#5, main::@4/printf_uint::format_min_length#0, main::@8/printf_uint::format_min_length#1 )
  printf_uint::putc#10 = phi( main::@12/printf_uint::putc#2, main::@16/printf_uint::putc#3, main::@20/printf_uint::putc#4, main::@24/printf_uint::putc#5, main::@4/printf_uint::putc#0, main::@8/printf_uint::putc#1 )
  printf_uint::format_radix#10 = phi( main::@12/printf_uint::format_radix#2, main::@16/printf_uint::format_radix#3, main::@20/printf_uint::format_radix#4, main::@24/printf_uint::format_radix#5, main::@4/printf_uint::format_radix#0, main::@8/printf_uint::format_radix#1 )
  printf_uint::uvalue#9 = phi( main::@12/printf_uint::uvalue#2, main::@16/printf_uint::uvalue#3, main::@20/printf_uint::uvalue#4, main::@24/printf_uint::uvalue#5, main::@4/printf_uint::uvalue#0, main::@8/printf_uint::uvalue#1 )
  printf_uint::format_sign_always#6 = phi( main::@12/printf_uint::format_sign_always#2, main::@16/printf_uint::format_sign_always#3, main::@20/printf_uint::format_sign_always#4, main::@24/printf_uint::format_sign_always#5, main::@4/printf_uint::format_sign_always#0, main::@8/printf_uint::format_sign_always#1 )
  printf_uint::$5 = 0 != printf_uint::format_sign_always#6
  if(printf_uint::$5) goto printf_uint::@1
  to:printf_uint::@2
printf_uint::@1: scope:[printf_uint]  from printf_uint
  printf_uint::format_upper_case#8 = phi( printf_uint/printf_uint::format_upper_case#10 )
  printf_uint::format_zero_padding#8 = phi( printf_uint/printf_uint::format_zero_padding#10 )
  printf_uint::format_sign_always#9 = phi( printf_uint/printf_uint::format_sign_always#6 )
  printf_uint::format_justify_left#8 = phi( printf_uint/printf_uint::format_justify_left#10 )
  printf_uint::format_min_length#8 = phi( printf_uint/printf_uint::format_min_length#10 )
  printf_uint::putc#8 = phi( printf_uint/printf_uint::putc#10 )
  printf_uint::format_radix#8 = phi( printf_uint/printf_uint::format_radix#10 )
  printf_uint::uvalue#7 = phi( printf_uint/printf_uint::uvalue#9 )
  printf_uint::$1 = '+'at
  to:printf_uint::@3
printf_uint::@2: scope:[printf_uint]  from printf_uint
  printf_uint::format_upper_case#9 = phi( printf_uint/printf_uint::format_upper_case#10 )
  printf_uint::format_zero_padding#9 = phi( printf_uint/printf_uint::format_zero_padding#10 )
  printf_uint::format_sign_always#10 = phi( printf_uint/printf_uint::format_sign_always#6 )
  printf_uint::format_justify_left#9 = phi( printf_uint/printf_uint::format_justify_left#10 )
  printf_uint::format_min_length#9 = phi( printf_uint/printf_uint::format_min_length#10 )
  printf_uint::putc#9 = phi( printf_uint/printf_uint::putc#10 )
  printf_uint::format_radix#9 = phi( printf_uint/printf_uint::format_radix#10 )
  printf_uint::uvalue#8 = phi( printf_uint/printf_uint::uvalue#9 )
  printf_uint::$0 = 0
  to:printf_uint::@3
printf_uint::@3: scope:[printf_uint]  from printf_uint::@1 printf_uint::@2
  printf_uint::format_upper_case#7 = phi( printf_uint::@1/printf_uint::format_upper_case#8, printf_uint::@2/printf_uint::format_upper_case#9 )
  printf_uint::format_zero_padding#7 = phi( printf_uint::@1/printf_uint::format_zero_padding#8, printf_uint::@2/printf_uint::format_zero_padding#9 )
  printf_uint::format_sign_always#8 = phi( printf_uint::@1/printf_uint::format_sign_always#9, printf_uint::@2/printf_uint::format_sign_always#10 )
  printf_uint::format_justify_left#7 = phi( printf_uint::@1/printf_uint::format_justify_left#8, printf_uint::@2/printf_uint::format_justify_left#9 )
  printf_uint::format_min_length#7 = phi( printf_uint::@1/printf_uint::format_min_length#8, printf_uint::@2/printf_uint::format_min_length#9 )
  printf_uint::putc#7 = phi( printf_uint::@1/printf_uint::putc#8, printf_uint::@2/printf_uint::putc#9 )
  printf_uint::format_radix#6 = phi( printf_uint::@1/printf_uint::format_radix#8, printf_uint::@2/printf_uint::format_radix#9 )
  printf_uint::uvalue#6 = phi( printf_uint::@1/printf_uint::uvalue#7, printf_uint::@2/printf_uint::uvalue#8 )
  printf_uint::$2 = phi( printf_uint::@1/printf_uint::$1, printf_uint::@2/printf_uint::$0 )
  *((char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) = printf_uint::$2
  utoa::value#1 = printf_uint::uvalue#6
  utoa::buffer#5 = (char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  utoa::radix#0 = printf_uint::format_radix#6
  call utoa
  to:printf_uint::@4
printf_uint::@4: scope:[printf_uint]  from printf_uint::@3
  printf_uint::format_radix#7 = phi( printf_uint::@3/printf_uint::format_radix#6 )
  printf_uint::format_upper_case#6 = phi( printf_uint::@3/printf_uint::format_upper_case#7 )
  printf_uint::format_zero_padding#6 = phi( printf_uint::@3/printf_uint::format_zero_padding#7 )
  printf_uint::format_sign_always#7 = phi( printf_uint::@3/printf_uint::format_sign_always#8 )
  printf_uint::format_justify_left#6 = phi( printf_uint::@3/printf_uint::format_justify_left#7 )
  printf_uint::format_min_length#6 = phi( printf_uint::@3/printf_uint::format_min_length#7 )
  printf_uint::putc#6 = phi( printf_uint::@3/printf_uint::putc#7 )
  printf_number_buffer::putc#0 = printf_uint::putc#6
  printf_number_buffer::buffer_sign#0 = *((char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
  printf_number_buffer::buffer_digits#0 = (char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  printf_number_buffer::format_min_length#0 = printf_uint::format_min_length#6
  printf_number_buffer::format_justify_left#0 = printf_uint::format_justify_left#6
  printf_number_buffer::format_sign_always#0 = printf_uint::format_sign_always#7
  printf_number_buffer::format_zero_padding#0 = printf_uint::format_zero_padding#6
  printf_number_buffer::format_upper_case#0 = printf_uint::format_upper_case#6
  printf_number_buffer::format_radix#0 = printf_uint::format_radix#7
  call printf_number_buffer
  to:printf_uint::@5
printf_uint::@5: scope:[printf_uint]  from printf_uint::@4
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@5
  return 
  to:@return

void printf_number_buffer(void (*putc)(char) , char buffer_sign , char *buffer_digits , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uint::@4
  printf_number_buffer::format_upper_case#9 = phi( printf_uint::@4/printf_number_buffer::format_upper_case#0 )
  printf_number_buffer::putc#12 = phi( printf_uint::@4/printf_number_buffer::putc#0 )
  printf_number_buffer::buffer_sign#7 = phi( printf_uint::@4/printf_number_buffer::buffer_sign#0 )
  printf_number_buffer::buffer_digits#4 = phi( printf_uint::@4/printf_number_buffer::buffer_digits#0 )
  printf_number_buffer::format_zero_padding#4 = phi( printf_uint::@4/printf_number_buffer::format_zero_padding#0 )
  printf_number_buffer::format_justify_left#3 = phi( printf_uint::@4/printf_number_buffer::format_justify_left#0 )
  printf_number_buffer::format_min_length#1 = phi( printf_uint::@4/printf_number_buffer::format_min_length#0 )
  printf_number_buffer::padding#0 = 0
  printf_number_buffer::$26 = 0 != printf_number_buffer::format_min_length#1
  printf_number_buffer::$0 = ! printf_number_buffer::$26
  if(printf_number_buffer::$0) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@14
  printf_number_buffer::buffer_digits#12 = phi( printf_number_buffer/printf_number_buffer::buffer_digits#4, printf_number_buffer::@13/printf_number_buffer::buffer_digits#14, printf_number_buffer::@14/printf_number_buffer::buffer_digits#15 )
  printf_number_buffer::format_upper_case#7 = phi( printf_number_buffer/printf_number_buffer::format_upper_case#9, printf_number_buffer::@13/printf_number_buffer::format_upper_case#10, printf_number_buffer::@14/printf_number_buffer::format_upper_case#11 )
  printf_number_buffer::putc#6 = phi( printf_number_buffer/printf_number_buffer::putc#12, printf_number_buffer::@13/printf_number_buffer::putc#13, printf_number_buffer::@14/printf_number_buffer::putc#14 )
  printf_number_buffer::buffer_sign#5 = phi( printf_number_buffer/printf_number_buffer::buffer_sign#7, printf_number_buffer::@13/printf_number_buffer::buffer_sign#8, printf_number_buffer::@14/printf_number_buffer::buffer_sign#9 )
  printf_number_buffer::padding#3 = phi( printf_number_buffer/printf_number_buffer::padding#0, printf_number_buffer::@13/printf_number_buffer::padding#1, printf_number_buffer::@14/printf_number_buffer::padding#2 )
  printf_number_buffer::format_zero_padding#1 = phi( printf_number_buffer/printf_number_buffer::format_zero_padding#4, printf_number_buffer::@13/printf_number_buffer::format_zero_padding#5, printf_number_buffer::@14/printf_number_buffer::format_zero_padding#6 )
  printf_number_buffer::format_justify_left#1 = phi( printf_number_buffer/printf_number_buffer::format_justify_left#3, printf_number_buffer::@13/printf_number_buffer::format_justify_left#4, printf_number_buffer::@14/printf_number_buffer::format_justify_left#5 )
  printf_number_buffer::$27 = 0 != printf_number_buffer::format_justify_left#1
  printf_number_buffer::$1 = ! printf_number_buffer::$27
  printf_number_buffer::$28 = 0 != printf_number_buffer::format_zero_padding#1
  printf_number_buffer::$2 = ! printf_number_buffer::$28
  printf_number_buffer::$3 = printf_number_buffer::$1 && printf_number_buffer::$2
  printf_number_buffer::$4 = printf_number_buffer::$3 && printf_number_buffer::padding#3
  printf_number_buffer::$5 = ! printf_number_buffer::$4
  if(printf_number_buffer::$5) goto printf_number_buffer::@2
  to:printf_number_buffer::@8
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  printf_number_buffer::format_upper_case#15 = phi( printf_number_buffer/printf_number_buffer::format_upper_case#9 )
  printf_number_buffer::putc#20 = phi( printf_number_buffer/printf_number_buffer::putc#12 )
  printf_number_buffer::format_zero_padding#15 = phi( printf_number_buffer/printf_number_buffer::format_zero_padding#4 )
  printf_number_buffer::format_justify_left#11 = phi( printf_number_buffer/printf_number_buffer::format_justify_left#3 )
  printf_number_buffer::format_min_length#5 = phi( printf_number_buffer/printf_number_buffer::format_min_length#1 )
  printf_number_buffer::buffer_sign#4 = phi( printf_number_buffer/printf_number_buffer::buffer_sign#7 )
  printf_number_buffer::buffer_digits#1 = phi( printf_number_buffer/printf_number_buffer::buffer_digits#4 )
  strlen::str#1 = printf_number_buffer::buffer_digits#1
  call strlen
  strlen::return#2 = strlen::return#1
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@6
  printf_number_buffer::buffer_digits#17 = phi( printf_number_buffer::@6/printf_number_buffer::buffer_digits#1 )
  printf_number_buffer::format_upper_case#13 = phi( printf_number_buffer::@6/printf_number_buffer::format_upper_case#15 )
  printf_number_buffer::putc#18 = phi( printf_number_buffer::@6/printf_number_buffer::putc#20 )
  printf_number_buffer::format_zero_padding#10 = phi( printf_number_buffer::@6/printf_number_buffer::format_zero_padding#15 )
  printf_number_buffer::format_justify_left#7 = phi( printf_number_buffer::@6/printf_number_buffer::format_justify_left#11 )
  printf_number_buffer::format_min_length#3 = phi( printf_number_buffer::@6/printf_number_buffer::format_min_length#5 )
  printf_number_buffer::buffer_sign#1 = phi( printf_number_buffer::@6/printf_number_buffer::buffer_sign#4 )
  strlen::return#4 = phi( printf_number_buffer::@6/strlen::return#2 )
  printf_number_buffer::$19 = strlen::return#4
  printf_number_buffer::len#0 = (signed char)printf_number_buffer::$19
  printf_number_buffer::$29 = 0 != printf_number_buffer::buffer_sign#1
  printf_number_buffer::$20 = ! printf_number_buffer::$29
  if(printf_number_buffer::$20) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@15 printf_number_buffer::@7
  printf_number_buffer::buffer_digits#14 = phi( printf_number_buffer::@15/printf_number_buffer::buffer_digits#17, printf_number_buffer::@7/printf_number_buffer::buffer_digits#18 )
  printf_number_buffer::format_upper_case#10 = phi( printf_number_buffer::@15/printf_number_buffer::format_upper_case#13, printf_number_buffer::@7/printf_number_buffer::format_upper_case#14 )
  printf_number_buffer::putc#13 = phi( printf_number_buffer::@15/printf_number_buffer::putc#18, printf_number_buffer::@7/printf_number_buffer::putc#19 )
  printf_number_buffer::buffer_sign#8 = phi( printf_number_buffer::@15/printf_number_buffer::buffer_sign#1, printf_number_buffer::@7/printf_number_buffer::buffer_sign#11 )
  printf_number_buffer::format_zero_padding#5 = phi( printf_number_buffer::@15/printf_number_buffer::format_zero_padding#10, printf_number_buffer::@7/printf_number_buffer::format_zero_padding#11 )
  printf_number_buffer::format_justify_left#4 = phi( printf_number_buffer::@15/printf_number_buffer::format_justify_left#7, printf_number_buffer::@7/printf_number_buffer::format_justify_left#8 )
  printf_number_buffer::len#2 = phi( printf_number_buffer::@15/printf_number_buffer::len#0, printf_number_buffer::@7/printf_number_buffer::len#1 )
  printf_number_buffer::format_min_length#2 = phi( printf_number_buffer::@15/printf_number_buffer::format_min_length#3, printf_number_buffer::@7/printf_number_buffer::format_min_length#4 )
  printf_number_buffer::$25 = (signed char)printf_number_buffer::format_min_length#2
  printf_number_buffer::$21 = printf_number_buffer::$25 - printf_number_buffer::len#2
  printf_number_buffer::padding#1 = printf_number_buffer::$21
  printf_number_buffer::$22 = printf_number_buffer::padding#1 < 0
  printf_number_buffer::$23 = ! printf_number_buffer::$22
  if(printf_number_buffer::$23) goto printf_number_buffer::@1
  to:printf_number_buffer::@14
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@15
  printf_number_buffer::buffer_digits#18 = phi( printf_number_buffer::@15/printf_number_buffer::buffer_digits#17 )
  printf_number_buffer::format_upper_case#14 = phi( printf_number_buffer::@15/printf_number_buffer::format_upper_case#13 )
  printf_number_buffer::putc#19 = phi( printf_number_buffer::@15/printf_number_buffer::putc#18 )
  printf_number_buffer::buffer_sign#11 = phi( printf_number_buffer::@15/printf_number_buffer::buffer_sign#1 )
  printf_number_buffer::format_zero_padding#11 = phi( printf_number_buffer::@15/printf_number_buffer::format_zero_padding#10 )
  printf_number_buffer::format_justify_left#8 = phi( printf_number_buffer::@15/printf_number_buffer::format_justify_left#7 )
  printf_number_buffer::format_min_length#4 = phi( printf_number_buffer::@15/printf_number_buffer::format_min_length#3 )
  printf_number_buffer::len#3 = phi( printf_number_buffer::@15/printf_number_buffer::len#0 )
  printf_number_buffer::len#1 = ++ printf_number_buffer::len#3
  to:printf_number_buffer::@13
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@13
  printf_number_buffer::buffer_digits#15 = phi( printf_number_buffer::@13/printf_number_buffer::buffer_digits#14 )
  printf_number_buffer::format_upper_case#11 = phi( printf_number_buffer::@13/printf_number_buffer::format_upper_case#10 )
  printf_number_buffer::putc#14 = phi( printf_number_buffer::@13/printf_number_buffer::putc#13 )
  printf_number_buffer::buffer_sign#9 = phi( printf_number_buffer::@13/printf_number_buffer::buffer_sign#8 )
  printf_number_buffer::format_zero_padding#6 = phi( printf_number_buffer::@13/printf_number_buffer::format_zero_padding#5 )
  printf_number_buffer::format_justify_left#5 = phi( printf_number_buffer::@13/printf_number_buffer::format_justify_left#4 )
  printf_number_buffer::padding#2 = 0
  to:printf_number_buffer::@1
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16
  printf_number_buffer::format_justify_left#15 = phi( printf_number_buffer::@1/printf_number_buffer::format_justify_left#1, printf_number_buffer::@16/printf_number_buffer::format_justify_left#18 )
  printf_number_buffer::buffer_digits#9 = phi( printf_number_buffer::@1/printf_number_buffer::buffer_digits#12, printf_number_buffer::@16/printf_number_buffer::buffer_digits#13 )
  printf_number_buffer::format_upper_case#4 = phi( printf_number_buffer::@1/printf_number_buffer::format_upper_case#7, printf_number_buffer::@16/printf_number_buffer::format_upper_case#8 )
  printf_number_buffer::putc#7 = phi( printf_number_buffer::@1/printf_number_buffer::putc#6, printf_number_buffer::@16/printf_number_buffer::putc#15 )
  printf_number_buffer::padding#9 = phi( printf_number_buffer::@1/printf_number_buffer::padding#3, printf_number_buffer::@16/printf_number_buffer::padding#12 )
  printf_number_buffer::format_zero_padding#7 = phi( printf_number_buffer::@1/printf_number_buffer::format_zero_padding#1, printf_number_buffer::@16/printf_number_buffer::format_zero_padding#12 )
  printf_number_buffer::buffer_sign#2 = phi( printf_number_buffer::@1/printf_number_buffer::buffer_sign#5, printf_number_buffer::@16/printf_number_buffer::buffer_sign#6 )
  printf_number_buffer::$30 = 0 != printf_number_buffer::buffer_sign#2
  printf_number_buffer::$7 = ! printf_number_buffer::$30
  if(printf_number_buffer::$7) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@1
  printf_number_buffer::format_justify_left#19 = phi( printf_number_buffer::@1/printf_number_buffer::format_justify_left#1 )
  printf_number_buffer::buffer_digits#16 = phi( printf_number_buffer::@1/printf_number_buffer::buffer_digits#12 )
  printf_number_buffer::format_upper_case#12 = phi( printf_number_buffer::@1/printf_number_buffer::format_upper_case#7 )
  printf_number_buffer::format_zero_padding#16 = phi( printf_number_buffer::@1/printf_number_buffer::format_zero_padding#1 )
  printf_number_buffer::buffer_sign#10 = phi( printf_number_buffer::@1/printf_number_buffer::buffer_sign#5 )
  printf_number_buffer::padding#4 = phi( printf_number_buffer::@1/printf_number_buffer::padding#3 )
  printf_number_buffer::putc#1 = phi( printf_number_buffer::@1/printf_number_buffer::putc#6 )
  printf_padding::putc#0 = printf_number_buffer::putc#1
  printf_padding::pad#0 = ' 'at
  printf_padding::length#0 = (char)printf_number_buffer::padding#4
  call printf_padding
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@8
  printf_number_buffer::format_justify_left#18 = phi( printf_number_buffer::@8/printf_number_buffer::format_justify_left#19 )
  printf_number_buffer::buffer_digits#13 = phi( printf_number_buffer::@8/printf_number_buffer::buffer_digits#16 )
  printf_number_buffer::format_upper_case#8 = phi( printf_number_buffer::@8/printf_number_buffer::format_upper_case#12 )
  printf_number_buffer::putc#15 = phi( printf_number_buffer::@8/printf_number_buffer::putc#1 )
  printf_number_buffer::padding#12 = phi( printf_number_buffer::@8/printf_number_buffer::padding#4 )
  printf_number_buffer::format_zero_padding#12 = phi( printf_number_buffer::@8/printf_number_buffer::format_zero_padding#16 )
  printf_number_buffer::buffer_sign#6 = phi( printf_number_buffer::@8/printf_number_buffer::buffer_sign#10 )
  to:printf_number_buffer::@2
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@2 printf_number_buffer::@9
  printf_number_buffer::format_justify_left#13 = phi( printf_number_buffer::@2/printf_number_buffer::format_justify_left#15, printf_number_buffer::@9/printf_number_buffer::format_justify_left#16 )
  printf_number_buffer::buffer_digits#8 = phi( printf_number_buffer::@2/printf_number_buffer::buffer_digits#9, printf_number_buffer::@9/printf_number_buffer::buffer_digits#10 )
  printf_number_buffer::putc#8 = phi( printf_number_buffer::@2/printf_number_buffer::putc#7, printf_number_buffer::@9/printf_number_buffer::putc#2 )
  printf_number_buffer::format_upper_case#3 = phi( printf_number_buffer::@2/printf_number_buffer::format_upper_case#4, printf_number_buffer::@9/printf_number_buffer::format_upper_case#5 )
  printf_number_buffer::padding#5 = phi( printf_number_buffer::@2/printf_number_buffer::padding#9, printf_number_buffer::@9/printf_number_buffer::padding#10 )
  printf_number_buffer::format_zero_padding#2 = phi( printf_number_buffer::@2/printf_number_buffer::format_zero_padding#7, printf_number_buffer::@9/printf_number_buffer::format_zero_padding#8 )
  printf_number_buffer::$9 = printf_number_buffer::format_zero_padding#2 && printf_number_buffer::padding#5
  printf_number_buffer::$10 = ! printf_number_buffer::$9
  if(printf_number_buffer::$10) goto printf_number_buffer::@4
  to:printf_number_buffer::@10
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  printf_number_buffer::format_justify_left#16 = phi( printf_number_buffer::@2/printf_number_buffer::format_justify_left#15 )
  printf_number_buffer::buffer_digits#10 = phi( printf_number_buffer::@2/printf_number_buffer::buffer_digits#9 )
  printf_number_buffer::format_upper_case#5 = phi( printf_number_buffer::@2/printf_number_buffer::format_upper_case#4 )
  printf_number_buffer::padding#10 = phi( printf_number_buffer::@2/printf_number_buffer::padding#9 )
  printf_number_buffer::format_zero_padding#8 = phi( printf_number_buffer::@2/printf_number_buffer::format_zero_padding#7 )
  printf_number_buffer::putc#2 = phi( printf_number_buffer::@2/printf_number_buffer::putc#7 )
  printf_number_buffer::buffer_sign#3 = phi( printf_number_buffer::@2/printf_number_buffer::buffer_sign#2 )
  stackpush(char) = printf_number_buffer::buffer_sign#3
  callexecute *printf_number_buffer::putc#2 
  sideeffect stackpullbytes(1)
  to:printf_number_buffer::@3
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@17 printf_number_buffer::@3
  printf_number_buffer::padding#14 = phi( printf_number_buffer::@17/printf_number_buffer::padding#15, printf_number_buffer::@3/printf_number_buffer::padding#5 )
  printf_number_buffer::format_justify_left#10 = phi( printf_number_buffer::@17/printf_number_buffer::format_justify_left#12, printf_number_buffer::@3/printf_number_buffer::format_justify_left#13 )
  printf_number_buffer::format_zero_padding#14 = phi( printf_number_buffer::@17/printf_number_buffer::format_zero_padding#17, printf_number_buffer::@3/printf_number_buffer::format_zero_padding#2 )
  printf_number_buffer::buffer_digits#6 = phi( printf_number_buffer::@17/printf_number_buffer::buffer_digits#7, printf_number_buffer::@3/printf_number_buffer::buffer_digits#8 )
  printf_number_buffer::putc#10 = phi( printf_number_buffer::@17/printf_number_buffer::putc#16, printf_number_buffer::@3/printf_number_buffer::putc#8 )
  printf_number_buffer::format_upper_case#1 = phi( printf_number_buffer::@17/printf_number_buffer::format_upper_case#2, printf_number_buffer::@3/printf_number_buffer::format_upper_case#3 )
  printf_number_buffer::$31 = 0 != printf_number_buffer::format_upper_case#1
  printf_number_buffer::$12 = ! printf_number_buffer::$31
  if(printf_number_buffer::$12) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@3
  printf_number_buffer::format_justify_left#17 = phi( printf_number_buffer::@3/printf_number_buffer::format_justify_left#13 )
  printf_number_buffer::format_zero_padding#19 = phi( printf_number_buffer::@3/printf_number_buffer::format_zero_padding#2 )
  printf_number_buffer::buffer_digits#11 = phi( printf_number_buffer::@3/printf_number_buffer::buffer_digits#8 )
  printf_number_buffer::format_upper_case#6 = phi( printf_number_buffer::@3/printf_number_buffer::format_upper_case#3 )
  printf_number_buffer::padding#6 = phi( printf_number_buffer::@3/printf_number_buffer::padding#5 )
  printf_number_buffer::putc#3 = phi( printf_number_buffer::@3/printf_number_buffer::putc#8 )
  printf_padding::putc#1 = printf_number_buffer::putc#3
  printf_padding::pad#1 = '0'at
  printf_padding::length#1 = (char)printf_number_buffer::padding#6
  call printf_padding
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@10
  printf_number_buffer::padding#15 = phi( printf_number_buffer::@10/printf_number_buffer::padding#6 )
  printf_number_buffer::format_justify_left#12 = phi( printf_number_buffer::@10/printf_number_buffer::format_justify_left#17 )
  printf_number_buffer::format_zero_padding#17 = phi( printf_number_buffer::@10/printf_number_buffer::format_zero_padding#19 )
  printf_number_buffer::buffer_digits#7 = phi( printf_number_buffer::@10/printf_number_buffer::buffer_digits#11 )
  printf_number_buffer::putc#16 = phi( printf_number_buffer::@10/printf_number_buffer::putc#3 )
  printf_number_buffer::format_upper_case#2 = phi( printf_number_buffer::@10/printf_number_buffer::format_upper_case#6 )
  to:printf_number_buffer::@4
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@19 printf_number_buffer::@4
  printf_number_buffer::padding#11 = phi( printf_number_buffer::@19/printf_number_buffer::padding#13, printf_number_buffer::@4/printf_number_buffer::padding#14 )
  printf_number_buffer::format_justify_left#6 = phi( printf_number_buffer::@19/printf_number_buffer::format_justify_left#9, printf_number_buffer::@4/printf_number_buffer::format_justify_left#10 )
  printf_number_buffer::format_zero_padding#9 = phi( printf_number_buffer::@19/printf_number_buffer::format_zero_padding#13, printf_number_buffer::@4/printf_number_buffer::format_zero_padding#14 )
  printf_number_buffer::buffer_digits#2 = phi( printf_number_buffer::@19/printf_number_buffer::buffer_digits#5, printf_number_buffer::@4/printf_number_buffer::buffer_digits#6 )
  printf_number_buffer::putc#4 = phi( printf_number_buffer::@19/printf_number_buffer::putc#9, printf_number_buffer::@4/printf_number_buffer::putc#10 )
  printf_str::putc#0 = printf_number_buffer::putc#4
  printf_str::s#1 = printf_number_buffer::buffer_digits#2
  call printf_str
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@5
  printf_number_buffer::putc#11 = phi( printf_number_buffer::@5/printf_number_buffer::putc#4 )
  printf_number_buffer::padding#7 = phi( printf_number_buffer::@5/printf_number_buffer::padding#11 )
  printf_number_buffer::format_justify_left#2 = phi( printf_number_buffer::@5/printf_number_buffer::format_justify_left#6 )
  printf_number_buffer::format_zero_padding#3 = phi( printf_number_buffer::@5/printf_number_buffer::format_zero_padding#9 )
  printf_number_buffer::$32 = 0 != printf_number_buffer::format_zero_padding#3
  printf_number_buffer::$14 = ! printf_number_buffer::$32
  printf_number_buffer::$15 = printf_number_buffer::format_justify_left#2 && printf_number_buffer::$14
  printf_number_buffer::$16 = printf_number_buffer::$15 && printf_number_buffer::padding#7
  printf_number_buffer::$17 = ! printf_number_buffer::$16
  if(printf_number_buffer::$17) goto printf_number_buffer::@return
  to:printf_number_buffer::@12
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  printf_number_buffer::padding#16 = phi( printf_number_buffer::@4/printf_number_buffer::padding#14 )
  printf_number_buffer::format_justify_left#14 = phi( printf_number_buffer::@4/printf_number_buffer::format_justify_left#10 )
  printf_number_buffer::format_zero_padding#18 = phi( printf_number_buffer::@4/printf_number_buffer::format_zero_padding#14 )
  printf_number_buffer::putc#17 = phi( printf_number_buffer::@4/printf_number_buffer::putc#10 )
  printf_number_buffer::buffer_digits#3 = phi( printf_number_buffer::@4/printf_number_buffer::buffer_digits#6 )
  strupr::str#0 = printf_number_buffer::buffer_digits#3
  call strupr
  strupr::return#2 = strupr::return#1
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@11
  printf_number_buffer::padding#13 = phi( printf_number_buffer::@11/printf_number_buffer::padding#16 )
  printf_number_buffer::format_justify_left#9 = phi( printf_number_buffer::@11/printf_number_buffer::format_justify_left#14 )
  printf_number_buffer::format_zero_padding#13 = phi( printf_number_buffer::@11/printf_number_buffer::format_zero_padding#18 )
  printf_number_buffer::buffer_digits#5 = phi( printf_number_buffer::@11/printf_number_buffer::buffer_digits#3 )
  printf_number_buffer::putc#9 = phi( printf_number_buffer::@11/printf_number_buffer::putc#17 )
  to:printf_number_buffer::@5
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@18
  printf_number_buffer::padding#8 = phi( printf_number_buffer::@18/printf_number_buffer::padding#7 )
  printf_number_buffer::putc#5 = phi( printf_number_buffer::@18/printf_number_buffer::putc#11 )
  printf_padding::putc#2 = printf_number_buffer::putc#5
  printf_padding::pad#2 = ' 'at
  printf_padding::length#2 = (char)printf_number_buffer::padding#8
  call printf_padding
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@18 printf_number_buffer::@20
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  call clrscr
  to:main::@2
main::@2: scope:[main]  from main
  test_slope::x_inc#0 = 3
  test_slope::y_inc#0 = 1
  call test_slope
  test_slope::return#0 = test_slope::return#7
  to:main::@3
main::@3: scope:[main]  from main::@2
  test_slope::return#8 = phi( main::@2/test_slope::return#0 )
  main::$1 = test_slope::return#8
  printf_str::putc#1 = &cputc
  printf_str::s#2 = main::s
  call printf_str
  to:main::@4
main::@4: scope:[main]  from main::@3
  printf_uint::putc#0 = &cputc
  printf_uint::uvalue#0 = main::$1
  printf_uint::format_min_length#0 = 0
  printf_uint::format_justify_left#0 = 0
  printf_uint::format_sign_always#0 = 0
  printf_uint::format_zero_padding#0 = 0
  printf_uint::format_upper_case#0 = 0
  printf_uint::format_radix#0 = DECIMAL
  call printf_uint
  to:main::@5
main::@5: scope:[main]  from main::@4
  printf_str::putc#2 = &cputc
  printf_str::s#3 = main::s1
  call printf_str
  to:main::@6
main::@6: scope:[main]  from main::@5
  test_slope::x_inc#1 = 1
  test_slope::y_inc#1 = 1
  call test_slope
  test_slope::return#1 = test_slope::return#7
  to:main::@7
main::@7: scope:[main]  from main::@6
  test_slope::return#9 = phi( main::@6/test_slope::return#1 )
  main::$3 = test_slope::return#9
  printf_str::putc#3 = &cputc
  printf_str::s#4 = main::s2
  call printf_str
  to:main::@8
main::@8: scope:[main]  from main::@7
  printf_uint::putc#1 = &cputc
  printf_uint::uvalue#1 = main::$3
  printf_uint::format_min_length#1 = 0
  printf_uint::format_justify_left#1 = 0
  printf_uint::format_sign_always#1 = 0
  printf_uint::format_zero_padding#1 = 0
  printf_uint::format_upper_case#1 = 0
  printf_uint::format_radix#1 = DECIMAL
  call printf_uint
  to:main::@9
main::@9: scope:[main]  from main::@8
  printf_str::putc#4 = &cputc
  printf_str::s#5 = main::s3
  call printf_str
  to:main::@10
main::@10: scope:[main]  from main::@9
  test_slope::x_inc#2 = 3
  test_slope::y_inc#2 = 1
  call test_slope
  test_slope::return#2 = test_slope::return#7
  to:main::@11
main::@11: scope:[main]  from main::@10
  test_slope::return#10 = phi( main::@10/test_slope::return#2 )
  main::$5 = test_slope::return#10
  printf_str::putc#5 = &cputc
  printf_str::s#6 = main::s4
  call printf_str
  to:main::@12
main::@12: scope:[main]  from main::@11
  printf_uint::putc#2 = &cputc
  printf_uint::uvalue#2 = main::$5
  printf_uint::format_min_length#2 = 0
  printf_uint::format_justify_left#2 = 0
  printf_uint::format_sign_always#2 = 0
  printf_uint::format_zero_padding#2 = 0
  printf_uint::format_upper_case#2 = 0
  printf_uint::format_radix#2 = DECIMAL
  call printf_uint
  to:main::@13
main::@13: scope:[main]  from main::@12
  printf_str::putc#6 = &cputc
  printf_str::s#7 = main::s5
  call printf_str
  to:main::@14
main::@14: scope:[main]  from main::@13
  test_slope::x_inc#3 = 5
  test_slope::y_inc#3 = 1
  call test_slope
  test_slope::return#3 = test_slope::return#7
  to:main::@15
main::@15: scope:[main]  from main::@14
  test_slope::return#11 = phi( main::@14/test_slope::return#3 )
  main::$7 = test_slope::return#11
  printf_str::putc#7 = &cputc
  printf_str::s#8 = main::s6
  call printf_str
  to:main::@16
main::@16: scope:[main]  from main::@15
  printf_uint::putc#3 = &cputc
  printf_uint::uvalue#3 = main::$7
  printf_uint::format_min_length#3 = 0
  printf_uint::format_justify_left#3 = 0
  printf_uint::format_sign_always#3 = 0
  printf_uint::format_zero_padding#3 = 0
  printf_uint::format_upper_case#3 = 0
  printf_uint::format_radix#3 = DECIMAL
  call printf_uint
  to:main::@17
main::@17: scope:[main]  from main::@16
  printf_str::putc#8 = &cputc
  printf_str::s#9 = main::s7
  call printf_str
  to:main::@18
main::@18: scope:[main]  from main::@17
  test_slope::x_inc#4 = 7
  test_slope::y_inc#4 = 1
  call test_slope
  test_slope::return#4 = test_slope::return#7
  to:main::@19
main::@19: scope:[main]  from main::@18
  test_slope::return#12 = phi( main::@18/test_slope::return#4 )
  main::$9 = test_slope::return#12
  printf_str::putc#9 = &cputc
  printf_str::s#10 = main::s8
  call printf_str
  to:main::@20
main::@20: scope:[main]  from main::@19
  printf_uint::putc#4 = &cputc
  printf_uint::uvalue#4 = main::$9
  printf_uint::format_min_length#4 = 0
  printf_uint::format_justify_left#4 = 0
  printf_uint::format_sign_always#4 = 0
  printf_uint::format_zero_padding#4 = 0
  printf_uint::format_upper_case#4 = 0
  printf_uint::format_radix#4 = DECIMAL
  call printf_uint
  to:main::@21
main::@21: scope:[main]  from main::@20
  printf_str::putc#10 = &cputc
  printf_str::s#11 = main::s9
  call printf_str
  to:main::@22
main::@22: scope:[main]  from main::@21
  test_slope::x_inc#5 = 1
  test_slope::y_inc#5 = 2
  call test_slope
  test_slope::return#5 = test_slope::return#7
  to:main::@23
main::@23: scope:[main]  from main::@22
  test_slope::return#13 = phi( main::@22/test_slope::return#5 )
  main::$11 = test_slope::return#13
  printf_str::putc#11 = &cputc
  printf_str::s#12 = main::s10
  call printf_str
  to:main::@24
main::@24: scope:[main]  from main::@23
  printf_uint::putc#5 = &cputc
  printf_uint::uvalue#5 = main::$11
  printf_uint::format_min_length#5 = 0
  printf_uint::format_justify_left#5 = 0
  printf_uint::format_sign_always#5 = 0
  printf_uint::format_zero_padding#5 = 0
  printf_uint::format_upper_case#5 = 0
  printf_uint::format_radix#5 = DECIMAL
  call printf_uint
  to:main::@25
main::@25: scope:[main]  from main::@24
  printf_str::putc#12 = &cputc
  printf_str::s#13 = main::s11
  call printf_str
  to:main::@26
main::@26: scope:[main]  from main::@25
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@26
  to:main::@1
main::@return: scope:[main]  from
  return 
  to:@return

unsigned int test_slope(char x_inc , char y_inc)
test_slope: scope:[test_slope]  from main::@10 main::@14 main::@18 main::@2 main::@22 main::@6
  test_slope::y_inc#12 = phi( main::@10/test_slope::y_inc#2, main::@14/test_slope::y_inc#3, main::@18/test_slope::y_inc#4, main::@2/test_slope::y_inc#0, main::@22/test_slope::y_inc#5, main::@6/test_slope::y_inc#1 )
  test_slope::x_inc#10 = phi( main::@10/test_slope::x_inc#2, main::@14/test_slope::x_inc#3, main::@18/test_slope::x_inc#4, main::@2/test_slope::x_inc#0, main::@22/test_slope::x_inc#5, main::@6/test_slope::x_inc#1 )
  test_slope::x#0 = 0
  test_slope::trees#0 = 0
  test_slope::mapline#0 = map
  test_slope::y#0 = 0
  to:test_slope::@1
test_slope::@1: scope:[test_slope]  from test_slope test_slope::@5
  test_slope::y_inc#11 = phi( test_slope/test_slope::y_inc#12, test_slope::@5/test_slope::y_inc#6 )
  test_slope::x_inc#9 = phi( test_slope/test_slope::x_inc#10, test_slope::@5/test_slope::x_inc#11 )
  test_slope::trees#4 = phi( test_slope/test_slope::trees#0, test_slope::@5/test_slope::trees#6 )
  test_slope::x#6 = phi( test_slope/test_slope::x#0, test_slope::@5/test_slope::x#8 )
  test_slope::mapline#4 = phi( test_slope/test_slope::mapline#0, test_slope::@5/test_slope::mapline#1 )
  test_slope::y#2 = phi( test_slope/test_slope::y#0, test_slope::@5/test_slope::y#1 )
  test_slope::$0 = test_slope::y#2 < $143
  if(test_slope::$0) goto test_slope::@2
  to:test_slope::@3
test_slope::@2: scope:[test_slope]  from test_slope::@1
  test_slope::y#6 = phi( test_slope::@1/test_slope::y#2 )
  test_slope::y_inc#9 = phi( test_slope::@1/test_slope::y_inc#11 )
  test_slope::trees#5 = phi( test_slope::@1/test_slope::trees#4 )
  test_slope::x_inc#7 = phi( test_slope::@1/test_slope::x_inc#9 )
  test_slope::x#3 = phi( test_slope::@1/test_slope::x#6 )
  test_slope::mapline#2 = phi( test_slope::@1/test_slope::mapline#4 )
  test_slope::$1 = test_slope::mapline#2[test_slope::x#3] == '#'at
  test_slope::$2 = ! test_slope::$1
  if(test_slope::$2) goto test_slope::@4
  to:test_slope::@6
test_slope::@3: scope:[test_slope]  from test_slope::@1
  test_slope::trees#2 = phi( test_slope::@1/test_slope::trees#4 )
  test_slope::return#6 = test_slope::trees#2
  to:test_slope::@return
test_slope::@4: scope:[test_slope]  from test_slope::@2 test_slope::@6
  test_slope::trees#7 = phi( test_slope::@2/test_slope::trees#5, test_slope::@6/test_slope::trees#1 )
  test_slope::y#4 = phi( test_slope::@2/test_slope::y#6, test_slope::@6/test_slope::y#7 )
  test_slope::mapline#5 = phi( test_slope::@2/test_slope::mapline#2, test_slope::@6/test_slope::mapline#7 )
  test_slope::y_inc#7 = phi( test_slope::@2/test_slope::y_inc#9, test_slope::@6/test_slope::y_inc#10 )
  test_slope::x_inc#6 = phi( test_slope::@2/test_slope::x_inc#7, test_slope::@6/test_slope::x_inc#8 )
  test_slope::x#4 = phi( test_slope::@2/test_slope::x#3, test_slope::@6/test_slope::x#7 )
  test_slope::x#1 = test_slope::x#4 + test_slope::x_inc#6
  test_slope::$3 = test_slope::x#1 >= $1f
  test_slope::$4 = ! test_slope::$3
  if(test_slope::$4) goto test_slope::@5
  to:test_slope::@7
test_slope::@6: scope:[test_slope]  from test_slope::@2
  test_slope::y#7 = phi( test_slope::@2/test_slope::y#6 )
  test_slope::mapline#7 = phi( test_slope::@2/test_slope::mapline#2 )
  test_slope::y_inc#10 = phi( test_slope::@2/test_slope::y_inc#9 )
  test_slope::x_inc#8 = phi( test_slope::@2/test_slope::x_inc#7 )
  test_slope::x#7 = phi( test_slope::@2/test_slope::x#3 )
  test_slope::trees#3 = phi( test_slope::@2/test_slope::trees#5 )
  test_slope::trees#1 = ++ test_slope::trees#3
  to:test_slope::@4
test_slope::@5: scope:[test_slope]  from test_slope::@4 test_slope::@7
  test_slope::x_inc#11 = phi( test_slope::@4/test_slope::x_inc#6, test_slope::@7/test_slope::x_inc#12 )
  test_slope::trees#6 = phi( test_slope::@4/test_slope::trees#7, test_slope::@7/test_slope::trees#8 )
  test_slope::x#8 = phi( test_slope::@4/test_slope::x#1, test_slope::@7/test_slope::x#2 )
  test_slope::y#3 = phi( test_slope::@4/test_slope::y#4, test_slope::@7/test_slope::y#5 )
  test_slope::mapline#3 = phi( test_slope::@4/test_slope::mapline#5, test_slope::@7/test_slope::mapline#6 )
  test_slope::y_inc#6 = phi( test_slope::@4/test_slope::y_inc#7, test_slope::@7/test_slope::y_inc#8 )
  test_slope::$5 = test_slope::y_inc#6 * $1f
  test_slope::mapline#1 = test_slope::mapline#3 + test_slope::$5
  test_slope::y#1 = test_slope::y#3 + test_slope::y_inc#6
  to:test_slope::@1
test_slope::@7: scope:[test_slope]  from test_slope::@4
  test_slope::x_inc#12 = phi( test_slope::@4/test_slope::x_inc#6 )
  test_slope::trees#8 = phi( test_slope::@4/test_slope::trees#7 )
  test_slope::y#5 = phi( test_slope::@4/test_slope::y#4 )
  test_slope::mapline#6 = phi( test_slope::@4/test_slope::mapline#5 )
  test_slope::y_inc#8 = phi( test_slope::@4/test_slope::y_inc#7 )
  test_slope::x#5 = phi( test_slope::@4/test_slope::x#1 )
  test_slope::x#2 = test_slope::x#5 - $1f
  to:test_slope::@5
test_slope::@return: scope:[test_slope]  from test_slope::@3
  test_slope::return#14 = phi( test_slope::@3/test_slope::return#6 )
  test_slope::return#7 = test_slope::return#14
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  conio_reverse_value = 0
  conio_display_cursor = 1
  conio_scroll_enable = 1
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
__constant char BINARY = 2
__constant unsigned int *COLCRS = (unsigned int *)$55
__constant char * const CRSINH = (char *)$2f0
__constant char DECIMAL = $a
__constant char DIGITS[] = "0123456789abcdef"atz
__constant char HEXADECIMAL = $10
__constant char OCTAL = 8
__constant char OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
__constant char OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN = 0
__constant char ** const OLDADR = (char **)$5e
__constant char * const OLDCHR = (char *)$5d
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant unsigned int RADIX_BINARY_VALUES[] = { $8000, $4000, $2000, $1000, $800, $400, $200, $100, $80, $40, $20, $10, 8, 4, 2 }
__constant unsigned int RADIX_DECIMAL_VALUES[] = { $2710, $3e8, $64, $a }
__constant unsigned int RADIX_HEXADECIMAL_VALUES[] = { $1000, $100, $10 }
__constant unsigned int RADIX_OCTAL_VALUES[] = { $8000, $1000, $200, $40, 8 }
__constant char *ROWCRS = (char *)$54
__constant char ** const SAVMSC = (char **)$58
__constant char SIZEOF_UNSIGNED_INT = 2
__constant unsigned int STACK_BASE = $103
void __start()
void clrscr()
__loadstore char conio_display_cursor
__loadstore char conio_reverse_value
__loadstore char conio_scroll_enable
__stackcall void cputc(volatile char c)
bool cputc::$0
bool cputc::$1
bool cputc::$2
bool cputc::$3
char cputc::$4
bool cputc::$7
__constant char cputc::OFFSET_STACK_C = 0
__loadstore volatile char cputc::c
char cputc::convertToScreenCode1_return
char cputc::convertToScreenCode1_return#0
char cputc::convertToScreenCode1_return#1
char cputc::convertToScreenCode1_return#2
char cputc::convertToScreenCode1_return#3
char *cputc::convertToScreenCode1_v
char *cputc::convertToScreenCode1_v#0
char *cputc::convertToScreenCode1_v#1
char * cursorLocation()
number cursorLocation::$0
char *cursorLocation::$1
char *cursorLocation::$2
unsigned int cursorLocation::$3
char *cursorLocation::return
char *cursorLocation::return#0
char *cursorLocation::return#1
char *cursorLocation::return#2
char *cursorLocation::return#3
char *cursorLocation::return#4
char *cursorLocation::return#5
char *cursorLocation::return#6
void gotoxy(char x , char y)
char gotoxy::x
char gotoxy::x#0
char gotoxy::x#1
char gotoxy::x#2
char gotoxy::y
char gotoxy::y#0
char gotoxy::y#1
char gotoxy::y#2
void main()
unsigned int main::$1
unsigned int main::$11
unsigned int main::$3
unsigned int main::$5
unsigned int main::$7
unsigned int main::$9
__constant char main::s[$10] = "1: encountered "at
__constant char main::s1[8] = " trees
"at
__constant char main::s10[$11] = "2e: encountered "at
__constant char main::s11[8] = " trees
"at
__constant char main::s2[$11] = "2a: encountered "at
__constant char main::s3[8] = " trees
"at
__constant char main::s4[$11] = "2b: encountered "at
__constant char main::s5[8] = " trees
"at
__constant char main::s6[$11] = "2c: encountered "at
__constant char main::s7[8] = " trees
"at
__constant char main::s8[$11] = "2d: encountered "at
__constant char main::s9[8] = " trees
"at
__constant char *map = ".#......##..#.....#....#.#.#....#.#...#.##.#..........#...##...........#.....#.####........#........#.#...#.#.................#....#...#.#...#.#...#.#........#...........#..#.........#.#....#..#....#..#..#.#...#..##..#...........#..#.....#.......#.#..#...#...#.###...#...#.#...#.#...#.#.......#...#...#...##.##..#..................#.#.#....#..#.##....#........##...............#....#....#.#.......#.....##.#..##.#.....###.......#...........#...###....#..#.#...#..................#.........#.##...#......#.............#....#...#.#..#......#.###....#...#.....#..#........#.....#.....#...#..#.......#...#..............#..#...#...#........#...##........#..#........#....#......#......#.....#..#.###.......##....#.#..#..#..###..#..........................#...#....#.........#.#.......#.##................#..#.......#......######.....#.........#......##.......#....#..##.###..#...##.###..#.......#....#.......#.###...#.#.#........#........###...#.......#..........#.#..........#...#..........##.#....#....#........#.....#....#..#..#...#.#....##..#...##....#...........##...#..##.....#.......###.......#.#...#...#.......#.#....#.#....##.###........#..........#..............#....##..###......#.#....#.#......#.....##.....#....#..#......#...#........#.##..#.....#..#....#......#......#.#.#..........##....#.............#..#..........#.#......##..#...#......#.#..#....#....#.#..##.......#.#......##........#.#....#.#.....#..............#.........#.......#..#.#......##.........#..##.#......#......#..#.....#...#.....#.........#...........#..##..##.#..##...###..##.....#...#..##...##.#.#......#..........#.#.....##.#....#..##..#..#.........###.......#........##....#...##....##............#.#.##...............#....#..#......#.....#..#..#.#.....#.....##.#....#.#.....#.#.#.........#..#.#..##....#.....#....#.#...#.....#....#....#.#.#...........#................#.......#.......#..#.#...#.#......#..#.#...........#....#....###...#.#.#.##....##..###.#.#......#.##.#..##...#.#..#..#...#.....#.#.#.#.....###.#..#.#...#.#......#.#..##.#...#...#.#.....#.#.......#....#...#.##......#.#......#....#.....##.....#....................###...##.#...........#.......#..##.....##....#................#..#......#..........#........##..##.#...#...#.#.....#.##.#.....###..###.#...#.#..#....#.#..........#...#..#.#.#..#...#.##.##..#..#....#....####..........#..#.#..........#..........###...#.#..#..#...#..###.......####.#...#....#..#...#..#...........##....#.#...#....##....##.....#.#.##....#.##..#....#.#.#.#......#..#.###....#####.##......##..#.#.#..#........##.##..###.#...#..#..#......#..#.....#...###.....#.#....#.#..##.....#.#....#......#.#...#...#.#....#.#.....#.###.##...................#..........#........#.#...##.#.##......#.#.#..#....##.###..#...#.##....#....#.........#.#..#........#..#..#.#.####.....##..#..#.##.#......#.#..##.#...#..#..#.#.##..#.##..........#......##.#.....#.#.##..#..##.....##.#.##........#..#.....#...#.##.##...#....#.#.#.........##.....#....#....#.#....#...#..#.............#...#..#...#.##......##...##.........#......#..........##.#......#.....##....#.#.#.....#..#.###......#..#.#....#.....#..#.......#...#...#.#.#.#..##......#..............#...###.....#...##......#.#..#.#........#.#...##.#....#..........##...#.#....#...#.....#.######...##...#..#...#...#............#.....#....###..###.##..#.........#.......#........##..#....#...#.#..##.#.#.##.#.#...###.................#.#.#......#.#.#....#.....#.#.#...........#.##.#..#.###......###.#....#...........##.#.#....#...#...........#..##..........#...#.#...........#..###....#..##.......#.....#.....##....#..#.......#........#...##.##..#.#....#..###..#.....##.......#.........###.#...#..#....#.#...#....#..#.......##...#.#.#...#..........#..#.......#.......##.#..#.#....###.....#...#..#...#....#...#.##.#........#..........##.....#.#.##.#.#..#..##.......##.#.#.......##....#.#...........#..##.............##...#.#..#..#...........#.#......#.##.##..#...#...#...........#....###.#.#.##..#.#.#....#....#####.........#...#.....#.#....#............#..#........#.....#.#......#...#.........#...#...#.#.#..#.....##.##......#.#...#.......#...#.##...#..#..........#...#.....##..........#..#...#.#......#.......##......#...##..##..#....#..##.......#...#.#..##..#..#.....#.#................#....#.......#..#..###.......#...............##.....#..#......#....#.........#...###...#....#..##...#.#.#.........#.......#...#....#....#.#...#.#....##....#.#..##.#.....#..#..#....#..#.#..##.....##..#..#.#.#....#...#....#..#..........###.....#...##.#..#.#...#.#.#.#..#.##........#.#....#....#..........#....#.#.......#...#.....#........#........#....#..#.#..#...#...................#....####..#..#..#..#....#..#.#...##.#..........#.##..#.....##...................##..........#....##....###.....#..#...#.#....##.........#..#...................##..###....#.##............#.#...###.#..##...#...........#.....#..#......#.....#...........#..##...#.....#.....#.#............#....###.#..#.#.#....#..##...#.......#.##.....#..........#.#..#...#.............##...........#..............#.....#..#......#......###....#...#...........#.....#...#.......###.....#..........##......##.#.#.....#....#.......#..#......#.......#..#...#.###...........#..#.###......#...#.#...........#.#...##........#.#.#........#.#.....#.....##..##.#.#..#.#....#.#.##....#.#.#......##.....#...#.#...###...#..#......#.#.#..#...#........#..##...........#..#..#..#..#..##...#...#...##.#..#.#....#.#.....####.#..#..#....##..#.#..#....#..#......#.....#.#.#........#..#.....#......#............#.#..###.....#...#...#.....##..#.#...##..#...........####....#.##....##.#......#.....##.#..#.##..#....#.###..........##....###...#......#.#....##...........................#..#.....#..#.#...#.#..#.....#...#..####.##....#.##..##...##.##.....#......#...#.##...........#.......##.###..#.....##...#.........##....###....##...###................#....#####........#.#.#.##.....#.#....####.##........#............#......#........................###.....##......#..##.#......#.#...........##.#....##.#....................#.#.#.......#.#.#........#..#.......##.......#...#...#....#......#....##.##..#..............#......#....#......#.........##..................#.#....##..#.......#............#.......#...........#........#....#.#..##.#....#...#....#.#.#..#..#.#.#.#...#....#....#.#.#....#...#.#..#......#.....#.#...........#.#....##.....#...........#...#....#....##.....###..#..........#..#..#.....#....#.#.###..........#.##....#...##..#................#.##.##.......#...#.##...##...#.........#..#....#......#......#.........#.##...#...##.#.........#......#........#.....#....................#...#.....##.........#.#..#...#......#...#.......#......#.##.......#...#.##.#..##..#.......#.#............#...###..#........#.......##.......#....#..#.......#..#.#....#.#.............#....#...##.##....#....##..............#......#.......#....#....#..#..##......##.#..#.#..##......##......#.##.##......#.............##.#...#.....#.......#...##.#....#..#......#.##.........##.####.#...#.#....#..........#........#.....#..#....#...#.####....##......#..#..#.##..#.............###.#..#..#....#.......#.........#....#.....#....#.#.#...#.#.....##.#...#...#.#..#.....##......##.##.#.....#..#.......#.##...##.......#..##......#..........#..#....#.......#.#...#.....#.................#..............#.#.#.....#.#....#..#.......#..........#.##....#....#..#.....#.......#........#....#.....##..#.........##..#..#.#..##.#...#..........#....#..........#..#.#......#.##..#..#.##.....##.####....#.....#.#...##.....#.#....#.#........#..........#...#.#.##.##....##..#...#...#....#.#.......#..#...#..#..##..#.....#....#........###.....#..........#..#.##....#.#.....#........##....#....#.......#.....#..........#........###...##.....#.#..#...##.........#.#..#....#...##...........#.........#...#......#.#.#.........#..#.#.#...........##.###....#..#.......#.....#.#...#......#..#........##.#....##....#...#.##.........#.####.#..#...........##.#.#........#....#..#.....#..##.####.#...##...#...........#.#.........##.#..#..#...#.#.#.........#..#.#......###............#...#......#.......#....#...#...#..#...##.#.#...##..#...#...#.......##.......#.#.......#..........#.#................#...#..#...#.#...#.#...##.####..##.##....#..##.#..####.......##.#........#...#......###....##...#.#..#.##.....##.....###..#...#.###.###.......#...#.....#...#..#..##..#.......#...##.....##........#.#.##..#...#..#....#....#..###....#.#..#.#.#.#.#..........#.#..#..##.......###.....................##.#......#.##.....#.........#.......................#.#.....##..#........##.......#..##..#.##.#.#.....##.#.##.##.#....##....#...#.....#.........#.....#.....#.........#.##.#.###.#......#.........#..#.##...#.......###......##........#......#...........#.#...##...#........#.##.............##............#.####..#....#...#...#..#....#..#.#.#.#..#.........#......#.##............#.....#........#........#.#.##.#..#.#..#..###......###....#.###.....#.#.#.##........#..###.#..#...##.....#....#...#.#.........#....#.....#...#............#........##.......#.##..####..#..#....#....#..#..#...#.##...##.....#............#...#...........#.......#.....#...#.#.#...........#.....#...##...............#........##...........#...#.#..##.#...#....#....#........#.##..#.#.......#...#......#..............#.#..#..#.....##.#..#....#.##.......#......#.##..#......#........#.##.#...#.....#......###..#.......##....................#.#.#.....#.##.......#.......#....#......#.#.....#...##........#...#..#.#.........#.##...........#.##...##......#....#.###.#.#.#...####..#....###..........#...#.....##....#.#.##.###..###.#.#.....#.##.........#..#...#.#.................##.###.........#.#....#.#...#.###..#.#....#..............#.##.#......#..#....##.#..#.......#..##..#..#.###......##..........#..#.##....#.#....#....#.#..#.............#.....#..#....#.##...#..#.#.#.........###..#..#.....#.....##..##...##....#..#......#............#....#..........#....#..##..#...#......#.....#.#....#..##..#....#.#.#...#................##..#.........#........#..##..#..#......###.....#..#.........#..#.##..........#.#..#..."at
void * memcpy(void *destination , void *source , unsigned int num)
bool memcpy::$1
char *memcpy::$2
void *memcpy::destination
void *memcpy::destination#0
void *memcpy::destination#1
void *memcpy::destination#2
void *memcpy::destination#3
void *memcpy::destination#4
char *memcpy::dst
char *memcpy::dst#0
char *memcpy::dst#1
char *memcpy::dst#2
char *memcpy::dst#3
unsigned int memcpy::num
unsigned int memcpy::num#0
unsigned int memcpy::num#1
void *memcpy::return
void *memcpy::return#0
void *memcpy::return#1
void *memcpy::return#2
void *memcpy::return#3
void *memcpy::source
void *memcpy::source#0
void *memcpy::source#1
char *memcpy::src
char *memcpy::src#0
char *memcpy::src#1
char *memcpy::src#2
char *memcpy::src#3
char *memcpy::src_end
char *memcpy::src_end#0
char *memcpy::src_end#1
char *memcpy::src_end#2
void * memset(void *str , char c , unsigned int num)
bool memset::$0
bool memset::$1
bool memset::$3
char *memset::$4
char memset::c
char memset::c#0
char memset::c#1
char memset::c#2
char memset::c#3
char memset::c#4
char memset::c#5
char *memset::dst
char *memset::dst#0
char *memset::dst#1
char *memset::dst#2
char *memset::dst#3
char *memset::end
char *memset::end#0
char *memset::end#1
char *memset::end#2
unsigned int memset::num
unsigned int memset::num#0
unsigned int memset::num#1
unsigned int memset::num#2
unsigned int memset::num#3
void *memset::return
void *memset::return#0
void *memset::return#1
void *memset::return#2
void *memset::return#3
void *memset::return#4
void *memset::str
void *memset::str#0
void *memset::str#1
void *memset::str#2
void *memset::str#3
void *memset::str#4
void *memset::str#5
void *memset::str#6
void newline()
bool newline::$0
bool newline::$1
bool newline::$3
bool newline::$5
bool newline::$6
char *newline::$7
char *newline::$9
char *newline::start
char *newline::start#0
char *newline::start#1
__loadstore struct printf_buffer_number printf_buffer = {}
void printf_number_buffer(void (*putc)(char) , char buffer_sign , char *buffer_digits , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
bool printf_number_buffer::$0
bool printf_number_buffer::$1
bool printf_number_buffer::$10
bool printf_number_buffer::$12
bool printf_number_buffer::$14
bool printf_number_buffer::$15
bool printf_number_buffer::$16
bool printf_number_buffer::$17
unsigned int printf_number_buffer::$19
bool printf_number_buffer::$2
bool printf_number_buffer::$20
signed char printf_number_buffer::$21
bool printf_number_buffer::$22
bool printf_number_buffer::$23
signed char printf_number_buffer::$25
bool printf_number_buffer::$26
bool printf_number_buffer::$27
bool printf_number_buffer::$28
bool printf_number_buffer::$29
bool printf_number_buffer::$3
bool printf_number_buffer::$30
bool printf_number_buffer::$31
bool printf_number_buffer::$32
bool printf_number_buffer::$4
bool printf_number_buffer::$5
bool printf_number_buffer::$7
bool printf_number_buffer::$9
struct printf_buffer_number printf_number_buffer::buffer
char *printf_number_buffer::buffer_digits
char *printf_number_buffer::buffer_digits#0
char *printf_number_buffer::buffer_digits#1
char *printf_number_buffer::buffer_digits#10
char *printf_number_buffer::buffer_digits#11
char *printf_number_buffer::buffer_digits#12
char *printf_number_buffer::buffer_digits#13
char *printf_number_buffer::buffer_digits#14
char *printf_number_buffer::buffer_digits#15
char *printf_number_buffer::buffer_digits#16
char *printf_number_buffer::buffer_digits#17
char *printf_number_buffer::buffer_digits#18
char *printf_number_buffer::buffer_digits#2
char *printf_number_buffer::buffer_digits#3
char *printf_number_buffer::buffer_digits#4
char *printf_number_buffer::buffer_digits#5
char *printf_number_buffer::buffer_digits#6
char *printf_number_buffer::buffer_digits#7
char *printf_number_buffer::buffer_digits#8
char *printf_number_buffer::buffer_digits#9
char printf_number_buffer::buffer_sign
char printf_number_buffer::buffer_sign#0
char printf_number_buffer::buffer_sign#1
char printf_number_buffer::buffer_sign#10
char printf_number_buffer::buffer_sign#11
char printf_number_buffer::buffer_sign#2
char printf_number_buffer::buffer_sign#3
char printf_number_buffer::buffer_sign#4
char printf_number_buffer::buffer_sign#5
char printf_number_buffer::buffer_sign#6
char printf_number_buffer::buffer_sign#7
char printf_number_buffer::buffer_sign#8
char printf_number_buffer::buffer_sign#9
struct printf_format_number printf_number_buffer::format
char printf_number_buffer::format_justify_left
char printf_number_buffer::format_justify_left#0
char printf_number_buffer::format_justify_left#1
char printf_number_buffer::format_justify_left#10
char printf_number_buffer::format_justify_left#11
char printf_number_buffer::format_justify_left#12
char printf_number_buffer::format_justify_left#13
char printf_number_buffer::format_justify_left#14
char printf_number_buffer::format_justify_left#15
char printf_number_buffer::format_justify_left#16
char printf_number_buffer::format_justify_left#17
char printf_number_buffer::format_justify_left#18
char printf_number_buffer::format_justify_left#19
char printf_number_buffer::format_justify_left#2
char printf_number_buffer::format_justify_left#3
char printf_number_buffer::format_justify_left#4
char printf_number_buffer::format_justify_left#5
char printf_number_buffer::format_justify_left#6
char printf_number_buffer::format_justify_left#7
char printf_number_buffer::format_justify_left#8
char printf_number_buffer::format_justify_left#9
char printf_number_buffer::format_min_length
char printf_number_buffer::format_min_length#0
char printf_number_buffer::format_min_length#1
char printf_number_buffer::format_min_length#2
char printf_number_buffer::format_min_length#3
char printf_number_buffer::format_min_length#4
char printf_number_buffer::format_min_length#5
char printf_number_buffer::format_radix
char printf_number_buffer::format_radix#0
char printf_number_buffer::format_sign_always
char printf_number_buffer::format_sign_always#0
char printf_number_buffer::format_upper_case
char printf_number_buffer::format_upper_case#0
char printf_number_buffer::format_upper_case#1
char printf_number_buffer::format_upper_case#10
char printf_number_buffer::format_upper_case#11
char printf_number_buffer::format_upper_case#12
char printf_number_buffer::format_upper_case#13
char printf_number_buffer::format_upper_case#14
char printf_number_buffer::format_upper_case#15
char printf_number_buffer::format_upper_case#2
char printf_number_buffer::format_upper_case#3
char printf_number_buffer::format_upper_case#4
char printf_number_buffer::format_upper_case#5
char printf_number_buffer::format_upper_case#6
char printf_number_buffer::format_upper_case#7
char printf_number_buffer::format_upper_case#8
char printf_number_buffer::format_upper_case#9
char printf_number_buffer::format_zero_padding
char printf_number_buffer::format_zero_padding#0
char printf_number_buffer::format_zero_padding#1
char printf_number_buffer::format_zero_padding#10
char printf_number_buffer::format_zero_padding#11
char printf_number_buffer::format_zero_padding#12
char printf_number_buffer::format_zero_padding#13
char printf_number_buffer::format_zero_padding#14
char printf_number_buffer::format_zero_padding#15
char printf_number_buffer::format_zero_padding#16
char printf_number_buffer::format_zero_padding#17
char printf_number_buffer::format_zero_padding#18
char printf_number_buffer::format_zero_padding#19
char printf_number_buffer::format_zero_padding#2
char printf_number_buffer::format_zero_padding#3
char printf_number_buffer::format_zero_padding#4
char printf_number_buffer::format_zero_padding#5
char printf_number_buffer::format_zero_padding#6
char printf_number_buffer::format_zero_padding#7
char printf_number_buffer::format_zero_padding#8
char printf_number_buffer::format_zero_padding#9
signed char printf_number_buffer::len
signed char printf_number_buffer::len#0
signed char printf_number_buffer::len#1
signed char printf_number_buffer::len#2
signed char printf_number_buffer::len#3
signed char printf_number_buffer::padding
signed char printf_number_buffer::padding#0
signed char printf_number_buffer::padding#1
signed char printf_number_buffer::padding#10
signed char printf_number_buffer::padding#11
signed char printf_number_buffer::padding#12
signed char printf_number_buffer::padding#13
signed char printf_number_buffer::padding#14
signed char printf_number_buffer::padding#15
signed char printf_number_buffer::padding#16
signed char printf_number_buffer::padding#2
signed char printf_number_buffer::padding#3
signed char printf_number_buffer::padding#4
signed char printf_number_buffer::padding#5
signed char printf_number_buffer::padding#6
signed char printf_number_buffer::padding#7
signed char printf_number_buffer::padding#8
signed char printf_number_buffer::padding#9
void (*printf_number_buffer::putc)(char)
void (*printf_number_buffer::putc#0)(char)
void (*printf_number_buffer::putc#1)(char)
void (*printf_number_buffer::putc#10)(char)
void (*printf_number_buffer::putc#11)(char)
void (*printf_number_buffer::putc#12)(char)
void (*printf_number_buffer::putc#13)(char)
void (*printf_number_buffer::putc#14)(char)
void (*printf_number_buffer::putc#15)(char)
void (*printf_number_buffer::putc#16)(char)
void (*printf_number_buffer::putc#17)(char)
void (*printf_number_buffer::putc#18)(char)
void (*printf_number_buffer::putc#19)(char)
void (*printf_number_buffer::putc#2)(char)
void (*printf_number_buffer::putc#20)(char)
void (*printf_number_buffer::putc#3)(char)
void (*printf_number_buffer::putc#4)(char)
void (*printf_number_buffer::putc#5)(char)
void (*printf_number_buffer::putc#6)(char)
void (*printf_number_buffer::putc#7)(char)
void (*printf_number_buffer::putc#8)(char)
void (*printf_number_buffer::putc#9)(char)
void printf_padding(void (*putc)(char) , char pad , char length)
bool printf_padding::$0
char printf_padding::i
char printf_padding::i#0
char printf_padding::i#1
char printf_padding::i#2
char printf_padding::i#3
char printf_padding::i#4
char printf_padding::length
char printf_padding::length#0
char printf_padding::length#1
char printf_padding::length#2
char printf_padding::length#3
char printf_padding::length#4
char printf_padding::length#5
char printf_padding::length#6
char printf_padding::pad
char printf_padding::pad#0
char printf_padding::pad#1
char printf_padding::pad#2
char printf_padding::pad#3
char printf_padding::pad#4
char printf_padding::pad#5
char printf_padding::pad#6
void (*printf_padding::putc)(char)
void (*printf_padding::putc#0)(char)
void (*printf_padding::putc#1)(char)
void (*printf_padding::putc#2)(char)
void (*printf_padding::putc#3)(char)
void (*printf_padding::putc#4)(char)
void (*printf_padding::putc#5)(char)
void (*printf_padding::putc#6)(char)
void printf_str(void (*putc)(char) , const char *s)
char printf_str::$0
bool printf_str::$2
char printf_str::c
char printf_str::c#0
char printf_str::c#1
char printf_str::c#2
void (*printf_str::putc)(char)
void (*printf_str::putc#0)(char)
void (*printf_str::putc#1)(char)
void (*printf_str::putc#10)(char)
void (*printf_str::putc#11)(char)
void (*printf_str::putc#12)(char)
void (*printf_str::putc#13)(char)
void (*printf_str::putc#14)(char)
void (*printf_str::putc#15)(char)
void (*printf_str::putc#2)(char)
void (*printf_str::putc#3)(char)
void (*printf_str::putc#4)(char)
void (*printf_str::putc#5)(char)
void (*printf_str::putc#6)(char)
void (*printf_str::putc#7)(char)
void (*printf_str::putc#8)(char)
void (*printf_str::putc#9)(char)
const char *printf_str::s
const char *printf_str::s#0
const char *printf_str::s#1
const char *printf_str::s#10
const char *printf_str::s#11
const char *printf_str::s#12
const char *printf_str::s#13
const char *printf_str::s#14
const char *printf_str::s#15
const char *printf_str::s#16
const char *printf_str::s#2
const char *printf_str::s#3
const char *printf_str::s#4
const char *printf_str::s#5
const char *printf_str::s#6
const char *printf_str::s#7
const char *printf_str::s#8
const char *printf_str::s#9
void printf_uint(void (*putc)(char) , unsigned int uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
number printf_uint::$0
char printf_uint::$1
number printf_uint::$2
bool printf_uint::$5
struct printf_format_number printf_uint::format
char printf_uint::format_justify_left
char printf_uint::format_justify_left#0
char printf_uint::format_justify_left#1
char printf_uint::format_justify_left#10
char printf_uint::format_justify_left#2
char printf_uint::format_justify_left#3
char printf_uint::format_justify_left#4
char printf_uint::format_justify_left#5
char printf_uint::format_justify_left#6
char printf_uint::format_justify_left#7
char printf_uint::format_justify_left#8
char printf_uint::format_justify_left#9
char printf_uint::format_min_length
char printf_uint::format_min_length#0
char printf_uint::format_min_length#1
char printf_uint::format_min_length#10
char printf_uint::format_min_length#2
char printf_uint::format_min_length#3
char printf_uint::format_min_length#4
char printf_uint::format_min_length#5
char printf_uint::format_min_length#6
char printf_uint::format_min_length#7
char printf_uint::format_min_length#8
char printf_uint::format_min_length#9
char printf_uint::format_radix
char printf_uint::format_radix#0
char printf_uint::format_radix#1
char printf_uint::format_radix#10
char printf_uint::format_radix#2
char printf_uint::format_radix#3
char printf_uint::format_radix#4
char printf_uint::format_radix#5
char printf_uint::format_radix#6
char printf_uint::format_radix#7
char printf_uint::format_radix#8
char printf_uint::format_radix#9
char printf_uint::format_sign_always
char printf_uint::format_sign_always#0
char printf_uint::format_sign_always#1
char printf_uint::format_sign_always#10
char printf_uint::format_sign_always#2
char printf_uint::format_sign_always#3
char printf_uint::format_sign_always#4
char printf_uint::format_sign_always#5
char printf_uint::format_sign_always#6
char printf_uint::format_sign_always#7
char printf_uint::format_sign_always#8
char printf_uint::format_sign_always#9
char printf_uint::format_upper_case
char printf_uint::format_upper_case#0
char printf_uint::format_upper_case#1
char printf_uint::format_upper_case#10
char printf_uint::format_upper_case#2
char printf_uint::format_upper_case#3
char printf_uint::format_upper_case#4
char printf_uint::format_upper_case#5
char printf_uint::format_upper_case#6
char printf_uint::format_upper_case#7
char printf_uint::format_upper_case#8
char printf_uint::format_upper_case#9
char printf_uint::format_zero_padding
char printf_uint::format_zero_padding#0
char printf_uint::format_zero_padding#1
char printf_uint::format_zero_padding#10
char printf_uint::format_zero_padding#2
char printf_uint::format_zero_padding#3
char printf_uint::format_zero_padding#4
char printf_uint::format_zero_padding#5
char printf_uint::format_zero_padding#6
char printf_uint::format_zero_padding#7
char printf_uint::format_zero_padding#8
char printf_uint::format_zero_padding#9
void (*printf_uint::putc)(char)
void (*printf_uint::putc#0)(char)
void (*printf_uint::putc#1)(char)
void (*printf_uint::putc#10)(char)
void (*printf_uint::putc#2)(char)
void (*printf_uint::putc#3)(char)
void (*printf_uint::putc#4)(char)
void (*printf_uint::putc#5)(char)
void (*printf_uint::putc#6)(char)
void (*printf_uint::putc#7)(char)
void (*printf_uint::putc#8)(char)
void (*printf_uint::putc#9)(char)
unsigned int printf_uint::uvalue
unsigned int printf_uint::uvalue#0
unsigned int printf_uint::uvalue#1
unsigned int printf_uint::uvalue#2
unsigned int printf_uint::uvalue#3
unsigned int printf_uint::uvalue#4
unsigned int printf_uint::uvalue#5
unsigned int printf_uint::uvalue#6
unsigned int printf_uint::uvalue#7
unsigned int printf_uint::uvalue#8
unsigned int printf_uint::uvalue#9
void putchar(char code)
char putchar::code
char putchar::code#0
char putchar::code#1
char putchar::code#2
char *putchar::loc
char *putchar::loc#0
char putchar::newChar
char putchar::newChar#0
__constant char rawmap[$100] = kickasm {{ .var ht = Hashtable().put(0,64, 1,0, 2,32, 3,96) // the table for converting bit 6,7 into ora value
	.for(var i=0; i<256; i++) {
		.var idx = (i & $60) / 32
		.var mask = i & $9f
		.byte mask | ht.get(idx)
	}
 }}
void setcursor()
bool setcursor::$1
number setcursor::$2
char setcursor::c
char setcursor::c#0
char setcursor::c#1
char setcursor::c#2
char setcursor::c#3
char setcursor::c#4
char *setcursor::loc
char *setcursor::loc#0
unsigned int strlen(char *str)
bool strlen::$0
unsigned int strlen::len
unsigned int strlen::len#0
unsigned int strlen::len#1
unsigned int strlen::len#2
unsigned int strlen::len#3
unsigned int strlen::len#4
unsigned int strlen::return
unsigned int strlen::return#0
unsigned int strlen::return#1
unsigned int strlen::return#2
unsigned int strlen::return#3
unsigned int strlen::return#4
char *strlen::str
char *strlen::str#0
char *strlen::str#1
char *strlen::str#2
char *strlen::str#3
char *strlen::str#4
char * strupr(char *str)
char strupr::$0
bool strupr::$1
char *strupr::return
char *strupr::return#0
char *strupr::return#1
char *strupr::return#2
char *strupr::return#3
char *strupr::src
char *strupr::src#0
char *strupr::src#1
char *strupr::src#2
char *strupr::src#3
char *strupr::src#4
char *strupr::str
char *strupr::str#0
char *strupr::str#1
char *strupr::str#2
char *strupr::str#3
char *strupr::str#4
char *strupr::str#5
unsigned int test_slope(char x_inc , char y_inc)
bool test_slope::$0
bool test_slope::$1
bool test_slope::$2
bool test_slope::$3
bool test_slope::$4
number test_slope::$5
char *test_slope::mapline
char *test_slope::mapline#0
char *test_slope::mapline#1
char *test_slope::mapline#2
char *test_slope::mapline#3
char *test_slope::mapline#4
char *test_slope::mapline#5
char *test_slope::mapline#6
char *test_slope::mapline#7
unsigned int test_slope::return
unsigned int test_slope::return#0
unsigned int test_slope::return#1
unsigned int test_slope::return#10
unsigned int test_slope::return#11
unsigned int test_slope::return#12
unsigned int test_slope::return#13
unsigned int test_slope::return#14
unsigned int test_slope::return#2
unsigned int test_slope::return#3
unsigned int test_slope::return#4
unsigned int test_slope::return#5
unsigned int test_slope::return#6
unsigned int test_slope::return#7
unsigned int test_slope::return#8
unsigned int test_slope::return#9
unsigned int test_slope::trees
unsigned int test_slope::trees#0
unsigned int test_slope::trees#1
unsigned int test_slope::trees#2
unsigned int test_slope::trees#3
unsigned int test_slope::trees#4
unsigned int test_slope::trees#5
unsigned int test_slope::trees#6
unsigned int test_slope::trees#7
unsigned int test_slope::trees#8
char test_slope::x
char test_slope::x#0
char test_slope::x#1
char test_slope::x#2
char test_slope::x#3
char test_slope::x#4
char test_slope::x#5
char test_slope::x#6
char test_slope::x#7
char test_slope::x#8
char test_slope::x_inc
char test_slope::x_inc#0
char test_slope::x_inc#1
char test_slope::x_inc#10
char test_slope::x_inc#11
char test_slope::x_inc#12
char test_slope::x_inc#2
char test_slope::x_inc#3
char test_slope::x_inc#4
char test_slope::x_inc#5
char test_slope::x_inc#6
char test_slope::x_inc#7
char test_slope::x_inc#8
char test_slope::x_inc#9
unsigned int test_slope::y
unsigned int test_slope::y#0
unsigned int test_slope::y#1
unsigned int test_slope::y#2
unsigned int test_slope::y#3
unsigned int test_slope::y#4
unsigned int test_slope::y#5
unsigned int test_slope::y#6
unsigned int test_slope::y#7
char test_slope::y_inc
char test_slope::y_inc#0
char test_slope::y_inc#1
char test_slope::y_inc#10
char test_slope::y_inc#11
char test_slope::y_inc#12
char test_slope::y_inc#2
char test_slope::y_inc#3
char test_slope::y_inc#4
char test_slope::y_inc#5
char test_slope::y_inc#6
char test_slope::y_inc#7
char test_slope::y_inc#8
char test_slope::y_inc#9
char toupper(char ch)
bool toupper::$0
bool toupper::$1
bool toupper::$2
char toupper::$3
char toupper::ch
char toupper::ch#0
char toupper::ch#1
char toupper::ch#2
char toupper::ch#3
char toupper::return
char toupper::return#0
char toupper::return#1
char toupper::return#2
char toupper::return#3
char toupper::return#4
char toupper::return#5
void utoa(unsigned int value , char *buffer , char radix)
bool utoa::$0
bool utoa::$1
char utoa::$10
char utoa::$11
bool utoa::$2
bool utoa::$3
number utoa::$4
bool utoa::$5
bool utoa::$6
bool utoa::$7
bool utoa::$8
unsigned int utoa::$9
char *utoa::buffer
char *utoa::buffer#0
char *utoa::buffer#1
char *utoa::buffer#10
char *utoa::buffer#11
char *utoa::buffer#12
char *utoa::buffer#13
char *utoa::buffer#14
char *utoa::buffer#15
char *utoa::buffer#16
char *utoa::buffer#17
char *utoa::buffer#18
char *utoa::buffer#19
char *utoa::buffer#2
char *utoa::buffer#20
char *utoa::buffer#21
char *utoa::buffer#3
char *utoa::buffer#4
char *utoa::buffer#5
char *utoa::buffer#6
char *utoa::buffer#7
char *utoa::buffer#8
char *utoa::buffer#9
char utoa::digit
char utoa::digit#0
char utoa::digit#1
char utoa::digit#2
char utoa::digit#3
char utoa::digit#4
char utoa::digit#5
char utoa::digit#6
unsigned int utoa::digit_value
unsigned int utoa::digit_value#0
unsigned int utoa::digit_value#1
unsigned int *utoa::digit_values
unsigned int *utoa::digit_values#0
unsigned int *utoa::digit_values#1
unsigned int *utoa::digit_values#10
unsigned int *utoa::digit_values#2
unsigned int *utoa::digit_values#3
unsigned int *utoa::digit_values#4
unsigned int *utoa::digit_values#5
unsigned int *utoa::digit_values#6
unsigned int *utoa::digit_values#7
unsigned int *utoa::digit_values#8
unsigned int *utoa::digit_values#9
char utoa::max_digits
char utoa::max_digits#0
char utoa::max_digits#1
char utoa::max_digits#10
char utoa::max_digits#2
char utoa::max_digits#3
char utoa::max_digits#4
char utoa::max_digits#5
char utoa::max_digits#6
char utoa::max_digits#7
char utoa::max_digits#8
char utoa::max_digits#9
char utoa::radix
char utoa::radix#0
char utoa::radix#1
char utoa::radix#2
char utoa::radix#3
char utoa::radix#4
char utoa::started
char utoa::started#0
char utoa::started#1
char utoa::started#2
char utoa::started#3
char utoa::started#4
unsigned int utoa::value
unsigned int utoa::value#0
unsigned int utoa::value#1
unsigned int utoa::value#10
unsigned int utoa::value#11
unsigned int utoa::value#12
unsigned int utoa::value#13
unsigned int utoa::value#14
unsigned int utoa::value#15
unsigned int utoa::value#2
unsigned int utoa::value#3
unsigned int utoa::value#4
unsigned int utoa::value#5
unsigned int utoa::value#6
unsigned int utoa::value#7
unsigned int utoa::value#8
unsigned int utoa::value#9
unsigned int utoa_append(char *buffer , unsigned int value , unsigned int sub)
bool utoa_append::$0
char *utoa_append::buffer
char *utoa_append::buffer#0
char *utoa_append::buffer#1
char *utoa_append::buffer#2
char *utoa_append::buffer#3
char *utoa_append::buffer#4
char utoa_append::digit
char utoa_append::digit#0
char utoa_append::digit#1
char utoa_append::digit#2
char utoa_append::digit#3
char utoa_append::digit#4
unsigned int utoa_append::return
unsigned int utoa_append::return#0
unsigned int utoa_append::return#1
unsigned int utoa_append::return#2
unsigned int utoa_append::return#3
unsigned int utoa_append::return#4
unsigned int utoa_append::sub
unsigned int utoa_append::sub#0
unsigned int utoa_append::sub#1
unsigned int utoa_append::sub#2
unsigned int utoa_append::sub#3
unsigned int utoa_append::value
unsigned int utoa_append::value#0
unsigned int utoa_append::value#1
unsigned int utoa_append::value#2
unsigned int utoa_append::value#3
unsigned int utoa_append::value#4
unsigned int utoa_append::value#5

Adding number conversion cast (unumber) 0 in memset::$0 = memset::num#2 > 0
Adding number conversion cast (unumber) 0 in strlen::$0 = 0 != *strlen::str#2
Adding number conversion cast (unumber) 0 in strupr::$1 = 0 != *strupr::src#2
Adding number conversion cast (unumber) 5 in utoa::max_digits#1 = 5
Adding number conversion cast (unumber) 4 in utoa::max_digits#2 = 4
Adding number conversion cast (unumber) 6 in utoa::max_digits#3 = 6
Adding number conversion cast (unumber) $10 in utoa::max_digits#4 = $10
Adding number conversion cast (unumber) 0 in *utoa::buffer#2 = 0
Adding number conversion cast (unumber) 1 in utoa::$4 = utoa::max_digits#5 - 1
Adding number conversion cast (unumber) utoa::$4 in utoa::$4 = utoa::max_digits#5 - (unumber)1
Adding number conversion cast (unumber) 0 in *utoa::buffer#3 = 0
Adding number conversion cast (unumber) 1 in utoa::started#1 = 1
Adding number conversion cast (unumber) 0 in memset::c#0 = 0
Adding number conversion cast (unumber) $28*$18 in memset::num#0 = $28*$18
Adding number conversion cast (unumber) 0 in *OLDCHR = 0
Adding number conversion cast (unumber) 0 in gotoxy::x#0 = 0
Adding number conversion cast (unumber) 0 in gotoxy::y#0 = 0
Adding number conversion cast (unumber) 0 in *COLCRS = 0
Adding number conversion cast (unumber) $9b in cputc::$2 = cputc::c == $9b
Adding number conversion cast (unumber) 0 in *COLCRS = 0
Adding number conversion cast (unumber) $28 in cputc::$7 = *COLCRS == $28
Adding number conversion cast (unumber) 0 in *COLCRS = 0
Adding number conversion cast (unumber) $28 in cursorLocation::$0 = cursorLocation::$3 * $28
Adding number conversion cast (unumber) cursorLocation::$0 in cursorLocation::$0 = cursorLocation::$3 * (unumber)$28
Adding number conversion cast (unumber) $18 in newline::$0 = *ROWCRS == $18
Adding number conversion cast (unumber) 1 in newline::$3 = conio_scroll_enable == 1
Adding number conversion cast (unumber) 1 in newline::$5 = conio_display_cursor == 1
Adding number conversion cast (unumber) 0 in gotoxy::x#1 = 0
Adding number conversion cast (unumber) 0 in gotoxy::y#1 = 0
Adding number conversion cast (unumber) $28 in newline::$7 = newline::start#0 + $28
Adding number conversion cast (unumber) $28*$17 in memcpy::num#0 = $28*$17
Adding number conversion cast (unumber) $28*$17 in newline::$9 = newline::start#1 + $28*$17
Adding number conversion cast (unumber) 0 in memset::c#1 = 0
Adding number conversion cast (unumber) $28 in memset::num#1 = $28
Adding number conversion cast (unumber) $18-1 in *ROWCRS = $18-1
Adding number conversion cast (unumber) $80 in *(*OLDADR) = *(*OLDADR) ^ $80
Adding number conversion cast (unumber) 0 in setcursor::$1 = conio_display_cursor == 0
Adding number conversion cast (unumber) 1 in *CRSINH = 1
Adding number conversion cast (unumber) 0 in *CRSINH = 0
Adding number conversion cast (unumber) $80 in setcursor::$2 = setcursor::c#2 ^ $80
Adding number conversion cast (unumber) setcursor::$2 in setcursor::$2 = setcursor::c#2 ^ (unumber)$80
Adding number conversion cast (unumber) 0 in printf_str::$2 = 0 != printf_str::$0
Adding number conversion cast (unumber) 0 in printf_uint::$5 = 0 != printf_uint::format_sign_always#6
Adding number conversion cast (unumber) printf_uint::$2 in printf_uint::format_upper_case#7 = phi( printf_uint::@1/printf_uint::format_upper_case#8, printf_uint::@2/printf_uint::format_upper_case#9 )
  printf_uint::format_zero_padding#7 = phi( printf_uint::@1/printf_uint::format_zero_padding#8, printf_uint::@2/printf_uint::format_zero_padding#9 )
  printf_uint::format_sign_always#8 = phi( printf_uint::@1/printf_uint::format_sign_always#9, printf_uint::@2/printf_uint::format_sign_always#10 )
  printf_uint::format_justify_left#7 = phi( printf_uint::@1/printf_uint::format_justify_left#8, printf_uint::@2/printf_uint::format_justify_left#9 )
  printf_uint::format_min_length#7 = phi( printf_uint::@1/printf_uint::format_min_length#8, printf_uint::@2/printf_uint::format_min_length#9 )
  printf_uint::putc#7 = phi( printf_uint::@1/printf_uint::putc#8, printf_uint::@2/printf_uint::putc#9 )
  printf_uint::format_radix#6 = phi( printf_uint::@1/printf_uint::format_radix#8, printf_uint::@2/printf_uint::format_radix#9 )
  printf_uint::uvalue#6 = phi( printf_uint::@1/printf_uint::uvalue#7, printf_uint::@2/printf_uint::uvalue#8 )
  printf_uint::$2 = phi( printf_uint::@1/printf_uint::$1, printf_uint::@2/printf_uint::$0 )
Adding number conversion cast (unumber) printf_uint::$0 in printf_uint::format_upper_case#7 = phi( printf_uint::@1/printf_uint::format_upper_case#8, printf_uint::@2/printf_uint::format_upper_case#9 )
  printf_uint::format_zero_padding#7 = phi( printf_uint::@1/printf_uint::format_zero_padding#8, printf_uint::@2/printf_uint::format_zero_padding#9 )
  printf_uint::format_sign_always#8 = phi( printf_uint::@1/printf_uint::format_sign_always#9, printf_uint::@2/printf_uint::format_sign_always#10 )
  printf_uint::format_justify_left#7 = phi( printf_uint::@1/printf_uint::format_justify_left#8, printf_uint::@2/printf_uint::format_justify_left#9 )
  printf_uint::format_min_length#7 = phi( printf_uint::@1/printf_uint::format_min_length#8, printf_uint::@2/printf_uint::format_min_length#9 )
  printf_uint::putc#7 = phi( printf_uint::@1/printf_uint::putc#8, printf_uint::@2/printf_uint::putc#9 )
  printf_uint::format_radix#6 = phi( printf_uint::@1/printf_uint::format_radix#8, printf_uint::@2/printf_uint::format_radix#9 )
  printf_uint::uvalue#6 = phi( printf_uint::@1/printf_uint::uvalue#7, printf_uint::@2/printf_uint::uvalue#8 )
  printf_uint::$2 = phi( printf_uint::@1/printf_uint::$1, printf_uint::@2/printf_uint::$0 )
Adding number conversion cast (unumber) 0 in printf_number_buffer::$26 = 0 != printf_number_buffer::format_min_length#1
Adding number conversion cast (unumber) 0 in printf_number_buffer::$27 = 0 != printf_number_buffer::format_justify_left#1
Adding number conversion cast (unumber) 0 in printf_number_buffer::$28 = 0 != printf_number_buffer::format_zero_padding#1
Adding number conversion cast (unumber) 0 in printf_number_buffer::$29 = 0 != printf_number_buffer::buffer_sign#1
Adding number conversion cast (snumber) 0 in printf_number_buffer::$22 = printf_number_buffer::padding#1 < 0
Adding number conversion cast (snumber) 0 in printf_number_buffer::padding#2 = 0
Adding number conversion cast (unumber) 0 in printf_number_buffer::$30 = 0 != printf_number_buffer::buffer_sign#2
Adding number conversion cast (unumber) 0 in printf_number_buffer::$31 = 0 != printf_number_buffer::format_upper_case#1
Adding number conversion cast (unumber) 0 in printf_number_buffer::$32 = 0 != printf_number_buffer::format_zero_padding#3
Adding number conversion cast (unumber) 3 in test_slope::x_inc#0 = 3
Adding number conversion cast (unumber) 1 in test_slope::y_inc#0 = 1
Adding number conversion cast (unumber) 1 in test_slope::x_inc#1 = 1
Adding number conversion cast (unumber) 1 in test_slope::y_inc#1 = 1
Adding number conversion cast (unumber) 3 in test_slope::x_inc#2 = 3
Adding number conversion cast (unumber) 1 in test_slope::y_inc#2 = 1
Adding number conversion cast (unumber) 5 in test_slope::x_inc#3 = 5
Adding number conversion cast (unumber) 1 in test_slope::y_inc#3 = 1
Adding number conversion cast (unumber) 7 in test_slope::x_inc#4 = 7
Adding number conversion cast (unumber) 1 in test_slope::y_inc#4 = 1
Adding number conversion cast (unumber) 1 in test_slope::x_inc#5 = 1
Adding number conversion cast (unumber) 2 in test_slope::y_inc#5 = 2
Adding number conversion cast (unumber) $143 in test_slope::$0 = test_slope::y#2 < $143
Adding number conversion cast (unumber) $1f in test_slope::$3 = test_slope::x#1 >= $1f
Adding number conversion cast (unumber) $1f in test_slope::$5 = test_slope::y_inc#6 * $1f
Adding number conversion cast (unumber) test_slope::$5 in test_slope::$5 = test_slope::y_inc#6 * (unumber)$1f
Adding number conversion cast (unumber) $1f in test_slope::x#2 = test_slope::x#5 - $1f
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (unumber) 0 in printf_uint::$0 = 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast memcpy::src#0 = (char *)memcpy::source#1
Inlining cast memcpy::dst#0 = (char *)memcpy::destination#1
Inlining cast memset::dst#0 = (char *)memset::str#3
Inlining cast utoa::max_digits#1 = (unumber)5
Inlining cast utoa::max_digits#2 = (unumber)4
Inlining cast utoa::max_digits#3 = (unumber)6
Inlining cast utoa::max_digits#4 = (unumber)$10
Inlining cast *utoa::buffer#2 = (unumber)0
Inlining cast *utoa::buffer#3 = (unumber)0
Inlining cast utoa::started#1 = (unumber)1
Inlining cast memset::c#0 = (unumber)0
Inlining cast memset::num#0 = (unumber)$28*$18
Inlining cast *OLDCHR = (unumber)0
Inlining cast gotoxy::x#0 = (unumber)0
Inlining cast gotoxy::y#0 = (unumber)0
Inlining cast *COLCRS = (unumber)0
Inlining cast *COLCRS = (unumber)0
Inlining cast *COLCRS = (unumber)0
Inlining cast gotoxy::x#1 = (unumber)0
Inlining cast gotoxy::y#1 = (unumber)0
Inlining cast memcpy::num#0 = (unumber)$28*$17
Inlining cast memset::c#1 = (unumber)0
Inlining cast memset::num#1 = (unumber)$28
Inlining cast *ROWCRS = (unumber)$18-1
Inlining cast *CRSINH = (unumber)1
Inlining cast *CRSINH = (unumber)0
Inlining cast printf_uint::$0 = (unumber)0
Inlining cast printf_number_buffer::padding#2 = (snumber)0
Inlining cast test_slope::x_inc#0 = (unumber)3
Inlining cast test_slope::y_inc#0 = (unumber)1
Inlining cast test_slope::x_inc#1 = (unumber)1
Inlining cast test_slope::y_inc#1 = (unumber)1
Inlining cast test_slope::x_inc#2 = (unumber)3
Inlining cast test_slope::y_inc#2 = (unumber)1
Inlining cast test_slope::x_inc#3 = (unumber)5
Inlining cast test_slope::y_inc#3 = (unumber)1
Inlining cast test_slope::x_inc#4 = (unumber)7
Inlining cast test_slope::y_inc#4 = (unumber)1
Inlining cast test_slope::x_inc#5 = (unumber)1
Inlining cast test_slope::y_inc#5 = (unumber)2
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (char **) 88
Simplifying constant pointer cast (char *) 93
Simplifying constant pointer cast (char **) 94
Simplifying constant pointer cast (char *) 752
Simplifying constant pointer cast (char *) 84
Simplifying constant pointer cast (unsigned int *) 85
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 5
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $9b
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $18
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 1
Simplifying constant integer cast 5
Simplifying constant integer cast 1
Simplifying constant integer cast 7
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast $143
Simplifying constant integer cast $1f
Simplifying constant integer cast $1f
Simplifying constant integer cast $1f
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 5
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) 6
Finalized unsigned number type (char) $10
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) $9b
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) $18
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) $80
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) $80
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized signed number type (signed char) 0
Finalized signed number type (signed char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 3
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 3
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 5
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 7
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 2
Finalized unsigned number type (unsigned int) $143
Finalized unsigned number type (char) $1f
Finalized unsigned number type (char) $1f
Finalized unsigned number type (char) $1f
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to char in utoa::$4 = utoa::max_digits#5 - 1
Inferred type updated to unsigned int in cursorLocation::$0 = cursorLocation::$3 * $28
Inferred type updated to char in setcursor::$2 = setcursor::c#2 ^ $80
Inferred type updated to char in printf_uint::$0 = 0
Inferred type updated to char for printf_uint::$2
Inferred type updated to char in test_slope::$5 = test_slope::y_inc#6 * $1f
Inversing boolean not [19] memset::$1 = memset::num#2 <= 0 from [18] memset::$0 = memset::num#2 > 0
Inversing boolean not [224] newline::$1 = *ROWCRS != $18 from [222] newline::$0 = *ROWCRS == $18
Inversing boolean not [230] newline::$6 = conio_display_cursor != 1 from [229] newline::$5 = conio_display_cursor == 1
Inversing boolean not [324] printf_number_buffer::$0 = 0 == printf_number_buffer::format_min_length#1 from [323] printf_number_buffer::$26 = 0 != printf_number_buffer::format_min_length#1
Inversing boolean not [328] printf_number_buffer::$1 = 0 == printf_number_buffer::format_justify_left#1 from [327] printf_number_buffer::$27 = 0 != printf_number_buffer::format_justify_left#1
Inversing boolean not [330] printf_number_buffer::$2 = 0 == printf_number_buffer::format_zero_padding#1 from [329] printf_number_buffer::$28 = 0 != printf_number_buffer::format_zero_padding#1
Inversing boolean not [343] printf_number_buffer::$20 = 0 == printf_number_buffer::buffer_sign#1 from [342] printf_number_buffer::$29 = 0 != printf_number_buffer::buffer_sign#1
Inversing boolean not [350] printf_number_buffer::$23 = printf_number_buffer::padding#1 >= 0 from [349] printf_number_buffer::$22 = printf_number_buffer::padding#1 < 0
Inversing boolean not [358] printf_number_buffer::$7 = 0 == printf_number_buffer::buffer_sign#2 from [357] printf_number_buffer::$30 = 0 != printf_number_buffer::buffer_sign#2
Inversing boolean not [376] printf_number_buffer::$12 = 0 == printf_number_buffer::format_upper_case#1 from [375] printf_number_buffer::$31 = 0 != printf_number_buffer::format_upper_case#1
Inversing boolean not [390] printf_number_buffer::$14 = 0 == printf_number_buffer::format_zero_padding#3 from [389] printf_number_buffer::$32 = 0 != printf_number_buffer::format_zero_padding#3
Inversing boolean not [544] test_slope::$2 = test_slope::mapline#2[test_slope::x#3] != '#'at from [543] test_slope::$1 = test_slope::mapline#2[test_slope::x#3] == '#'at
Inversing boolean not [551] test_slope::$4 = test_slope::x#1 < $1f from [550] test_slope::$3 = test_slope::x#1 >= $1f
Successful SSA optimization Pass2UnaryNotSimplification
Alias memcpy::src#2 = memcpy::src#3 
Alias memcpy::dst#2 = memcpy::dst#3 
Alias memcpy::src_end#1 = memcpy::src_end#2 
Alias memcpy::destination#2 = memcpy::destination#4 memcpy::destination#3 memcpy::return#0 memcpy::return#3 memcpy::return#1 
Alias memset::return#0 = memset::str#2 memset::return#4 memset::return#1 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias strlen::len#2 = strlen::len#4 strlen::len#3 strlen::return#0 strlen::return#3 strlen::return#1 
Alias strlen::str#2 = strlen::str#3 
Alias toupper::ch#1 = toupper::ch#2 toupper::ch#3 toupper::return#1 
Alias toupper::return#0 = toupper::$3 
Alias toupper::return#2 = toupper::return#4 
Alias strupr::src#0 = strupr::str#1 
Alias strupr::src#2 = strupr::src#3 strupr::src#4 
Alias strupr::str#2 = strupr::str#5 strupr::str#3 strupr::str#4 strupr::return#0 strupr::return#3 strupr::return#1 
Alias toupper::return#3 = toupper::return#5 
Alias utoa::value#10 = utoa::value#8 utoa::value#12 utoa::value#13 utoa::value#9 utoa::value#14 utoa::value#15 utoa::value#11 
Alias utoa::buffer#10 = utoa::buffer#17 utoa::buffer#21 utoa::buffer#16 utoa::buffer#18 utoa::buffer#13 utoa::buffer#19 utoa::buffer#20 utoa::buffer#6 
Alias utoa::radix#1 = utoa::radix#2 utoa::radix#3 utoa::radix#4 
Alias utoa::digit#2 = utoa::digit#3 utoa::digit#6 utoa::digit#5 
Alias utoa::digit_values#10 = utoa::digit_values#5 utoa::digit_values#6 utoa::digit_values#9 
Alias utoa::value#2 = utoa::value#5 utoa::value#3 utoa::value#4 
Alias utoa::started#2 = utoa::started#3 
Alias utoa::buffer#11 = utoa::buffer#12 utoa::buffer#7 utoa::buffer#8 utoa::buffer#9 
Alias utoa::max_digits#10 = utoa::max_digits#8 utoa::max_digits#5 utoa::max_digits#9 
Alias utoa::digit_value#0 = utoa::digit_value#1 
Alias utoa_append::return#0 = utoa_append::return#3 
Alias utoa::value#0 = utoa::$9 
Alias utoa_append::digit#2 = utoa_append::digit#4 utoa_append::digit#3 
Alias utoa_append::value#2 = utoa_append::value#3 utoa_append::value#4 utoa_append::return#1 utoa_append::return#4 utoa_append::return#2 
Alias utoa_append::sub#1 = utoa_append::sub#2 
Alias utoa_append::buffer#1 = utoa_append::buffer#4 utoa_append::buffer#2 
Alias cputc::convertToScreenCode1_v#0 = cputc::convertToScreenCode1_v#1 
Alias cputc::convertToScreenCode1_return#0 = cputc::convertToScreenCode1_return#2 cputc::convertToScreenCode1_return#1 cputc::convertToScreenCode1_return#3 cputc::$4 putchar::code#0 
Alias cursorLocation::return#0 = cursorLocation::return#4 
Alias putchar::code#1 = putchar::code#2 
Alias cursorLocation::return#1 = cursorLocation::$2 cursorLocation::return#5 cursorLocation::return#2 
Alias newline::start#0 = newline::start#1 
Alias cursorLocation::return#3 = cursorLocation::return#6 
Alias setcursor::c#0 = setcursor::c#4 setcursor::c#2 
Alias setcursor::c#1 = setcursor::$2 
Alias printf_str::c#1 = printf_str::$0 printf_str::c#2 
Alias printf_str::putc#13 = printf_str::putc#14 
Alias printf_str::s#0 = printf_str::s#16 
Alias printf_padding::pad#3 = printf_padding::pad#4 printf_padding::pad#6 
Alias printf_padding::putc#3 = printf_padding::putc#4 printf_padding::putc#6 
Alias printf_padding::i#2 = printf_padding::i#4 printf_padding::i#3 
Alias printf_padding::length#3 = printf_padding::length#6 printf_padding::length#5 
Alias printf_uint::uvalue#7 = printf_uint::uvalue#9 printf_uint::uvalue#8 
Alias printf_uint::format_radix#10 = printf_uint::format_radix#8 printf_uint::format_radix#9 
Alias printf_uint::putc#10 = printf_uint::putc#8 printf_uint::putc#9 
Alias printf_uint::format_min_length#10 = printf_uint::format_min_length#8 printf_uint::format_min_length#9 
Alias printf_uint::format_justify_left#10 = printf_uint::format_justify_left#8 printf_uint::format_justify_left#9 
Alias printf_uint::format_sign_always#10 = printf_uint::format_sign_always#9 printf_uint::format_sign_always#6 
Alias printf_uint::format_zero_padding#10 = printf_uint::format_zero_padding#8 printf_uint::format_zero_padding#9 
Alias printf_uint::format_upper_case#10 = printf_uint::format_upper_case#8 printf_uint::format_upper_case#9 
Alias printf_uint::putc#6 = printf_uint::putc#7 
Alias printf_uint::format_min_length#6 = printf_uint::format_min_length#7 
Alias printf_uint::format_justify_left#6 = printf_uint::format_justify_left#7 
Alias printf_uint::format_sign_always#7 = printf_uint::format_sign_always#8 
Alias printf_uint::format_zero_padding#6 = printf_uint::format_zero_padding#7 
Alias printf_uint::format_upper_case#6 = printf_uint::format_upper_case#7 
Alias printf_uint::format_radix#6 = printf_uint::format_radix#7 
Alias printf_number_buffer::buffer_digits#1 = printf_number_buffer::buffer_digits#4 printf_number_buffer::buffer_digits#17 printf_number_buffer::buffer_digits#18 
Alias printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#4 printf_number_buffer::buffer_sign#7 printf_number_buffer::buffer_sign#11 
Alias printf_number_buffer::format_min_length#1 = printf_number_buffer::format_min_length#5 printf_number_buffer::format_min_length#3 printf_number_buffer::format_min_length#4 
Alias printf_number_buffer::format_justify_left#11 = printf_number_buffer::format_justify_left#3 printf_number_buffer::format_justify_left#7 printf_number_buffer::format_justify_left#8 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#15 printf_number_buffer::format_zero_padding#4 printf_number_buffer::format_zero_padding#11 
Alias printf_number_buffer::putc#12 = printf_number_buffer::putc#20 printf_number_buffer::putc#18 printf_number_buffer::putc#19 
Alias printf_number_buffer::format_upper_case#13 = printf_number_buffer::format_upper_case#15 printf_number_buffer::format_upper_case#9 printf_number_buffer::format_upper_case#14 
Alias strlen::return#2 = strlen::return#4 
Alias printf_number_buffer::padding#1 = printf_number_buffer::$21 
Alias printf_number_buffer::len#0 = printf_number_buffer::len#3 
Alias printf_number_buffer::format_justify_left#4 = printf_number_buffer::format_justify_left#5 
Alias printf_number_buffer::format_zero_padding#5 = printf_number_buffer::format_zero_padding#6 
Alias printf_number_buffer::buffer_sign#8 = printf_number_buffer::buffer_sign#9 
Alias printf_number_buffer::putc#13 = printf_number_buffer::putc#14 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#11 
Alias printf_number_buffer::buffer_digits#14 = printf_number_buffer::buffer_digits#15 
Alias printf_number_buffer::putc#1 = printf_number_buffer::putc#6 printf_number_buffer::putc#15 
Alias printf_number_buffer::padding#12 = printf_number_buffer::padding#4 printf_number_buffer::padding#3 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#5 printf_number_buffer::buffer_sign#6 
Alias printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#16 printf_number_buffer::format_zero_padding#12 
Alias printf_number_buffer::format_upper_case#12 = printf_number_buffer::format_upper_case#7 printf_number_buffer::format_upper_case#8 
Alias printf_number_buffer::buffer_digits#12 = printf_number_buffer::buffer_digits#16 printf_number_buffer::buffer_digits#13 
Alias printf_number_buffer::format_justify_left#1 = printf_number_buffer::format_justify_left#19 printf_number_buffer::format_justify_left#18 
Alias printf_number_buffer::buffer_sign#2 = printf_number_buffer::buffer_sign#3 
Alias printf_number_buffer::putc#2 = printf_number_buffer::putc#7 
Alias printf_number_buffer::format_zero_padding#7 = printf_number_buffer::format_zero_padding#8 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#9 
Alias printf_number_buffer::format_upper_case#4 = printf_number_buffer::format_upper_case#5 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#9 
Alias printf_number_buffer::format_justify_left#15 = printf_number_buffer::format_justify_left#16 
Alias printf_number_buffer::putc#16 = printf_number_buffer::putc#3 printf_number_buffer::putc#8 
Alias printf_number_buffer::padding#15 = printf_number_buffer::padding#6 printf_number_buffer::padding#5 
Alias printf_number_buffer::format_upper_case#2 = printf_number_buffer::format_upper_case#6 printf_number_buffer::format_upper_case#3 
Alias printf_number_buffer::buffer_digits#11 = printf_number_buffer::buffer_digits#8 printf_number_buffer::buffer_digits#7 
Alias printf_number_buffer::format_zero_padding#17 = printf_number_buffer::format_zero_padding#19 printf_number_buffer::format_zero_padding#2 
Alias printf_number_buffer::format_justify_left#12 = printf_number_buffer::format_justify_left#17 printf_number_buffer::format_justify_left#13 
Alias printf_number_buffer::format_zero_padding#3 = printf_number_buffer::format_zero_padding#9 
Alias printf_number_buffer::format_justify_left#2 = printf_number_buffer::format_justify_left#6 
Alias printf_number_buffer::padding#11 = printf_number_buffer::padding#7 printf_number_buffer::padding#8 
Alias printf_number_buffer::putc#11 = printf_number_buffer::putc#4 printf_number_buffer::putc#5 
Alias printf_number_buffer::buffer_digits#3 = printf_number_buffer::buffer_digits#6 printf_number_buffer::buffer_digits#5 
Alias printf_number_buffer::putc#10 = printf_number_buffer::putc#17 printf_number_buffer::putc#9 
Alias printf_number_buffer::format_zero_padding#13 = printf_number_buffer::format_zero_padding#18 printf_number_buffer::format_zero_padding#14 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#14 printf_number_buffer::format_justify_left#9 
Alias printf_number_buffer::padding#13 = printf_number_buffer::padding#16 printf_number_buffer::padding#14 
Alias test_slope::return#0 = test_slope::return#8 
Alias printf_uint::uvalue#0 = main::$1 
Alias test_slope::return#1 = test_slope::return#9 
Alias printf_uint::uvalue#1 = main::$3 
Alias test_slope::return#10 = test_slope::return#2 
Alias printf_uint::uvalue#2 = main::$5 
Alias test_slope::return#11 = test_slope::return#3 
Alias printf_uint::uvalue#3 = main::$7 
Alias test_slope::return#12 = test_slope::return#4 
Alias printf_uint::uvalue#4 = main::$9 
Alias test_slope::return#13 = test_slope::return#5 
Alias printf_uint::uvalue#5 = main::$11 
Alias test_slope::mapline#2 = test_slope::mapline#4 test_slope::mapline#7 
Alias test_slope::x#3 = test_slope::x#6 test_slope::x#7 
Alias test_slope::x_inc#7 = test_slope::x_inc#9 test_slope::x_inc#8 
Alias test_slope::trees#2 = test_slope::trees#5 test_slope::trees#4 test_slope::return#6 test_slope::trees#3 test_slope::return#14 test_slope::return#7 
Alias test_slope::y_inc#10 = test_slope::y_inc#9 test_slope::y_inc#11 
Alias test_slope::y#2 = test_slope::y#6 test_slope::y#7 
Alias test_slope::x#1 = test_slope::x#5 
Alias test_slope::y_inc#7 = test_slope::y_inc#8 
Alias test_slope::mapline#5 = test_slope::mapline#6 
Alias test_slope::y#4 = test_slope::y#5 
Alias test_slope::trees#7 = test_slope::trees#8 
Alias test_slope::x_inc#12 = test_slope::x_inc#6 
Successful SSA optimization Pass2AliasElimination
Alias utoa::value#10 = utoa::value#7 
Alias utoa::buffer#10 = utoa::buffer#15 
Alias utoa::digit#2 = utoa::digit#4 
Alias utoa::max_digits#10 = utoa::max_digits#6 
Alias utoa::digit_values#10 = utoa::digit_values#7 
Alias printf_uint::uvalue#6 = printf_uint::uvalue#7 
Alias printf_uint::format_radix#10 = printf_uint::format_radix#6 
Alias printf_uint::putc#10 = printf_uint::putc#6 
Alias printf_uint::format_min_length#10 = printf_uint::format_min_length#6 
Alias printf_uint::format_justify_left#10 = printf_uint::format_justify_left#6 
Alias printf_uint::format_sign_always#10 = printf_uint::format_sign_always#7 
Alias printf_uint::format_zero_padding#10 = printf_uint::format_zero_padding#6 
Alias printf_uint::format_upper_case#10 = printf_uint::format_upper_case#6 
Alias printf_number_buffer::format_min_length#1 = printf_number_buffer::format_min_length#2 
Alias printf_number_buffer::format_justify_left#11 = printf_number_buffer::format_justify_left#4 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#5 
Alias printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#8 
Alias printf_number_buffer::putc#12 = printf_number_buffer::putc#13 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#13 
Alias printf_number_buffer::buffer_digits#1 = printf_number_buffer::buffer_digits#14 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#2 
Alias printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#7 printf_number_buffer::format_zero_padding#17 printf_number_buffer::format_zero_padding#13 printf_number_buffer::format_zero_padding#3 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#12 printf_number_buffer::padding#15 printf_number_buffer::padding#13 printf_number_buffer::padding#11 
Alias printf_number_buffer::putc#1 = printf_number_buffer::putc#2 printf_number_buffer::putc#16 printf_number_buffer::putc#10 printf_number_buffer::putc#11 
Alias printf_number_buffer::format_upper_case#1 = printf_number_buffer::format_upper_case#4 printf_number_buffer::format_upper_case#12 printf_number_buffer::format_upper_case#2 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#12 printf_number_buffer::buffer_digits#11 printf_number_buffer::buffer_digits#3 printf_number_buffer::buffer_digits#2 
Alias printf_number_buffer::format_justify_left#1 = printf_number_buffer::format_justify_left#15 printf_number_buffer::format_justify_left#12 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_justify_left#2 
Alias test_slope::x#3 = test_slope::x#4 
Alias test_slope::x_inc#11 = test_slope::x_inc#12 test_slope::x_inc#7 
Alias test_slope::y_inc#10 = test_slope::y_inc#7 test_slope::y_inc#6 
Alias test_slope::mapline#2 = test_slope::mapline#5 test_slope::mapline#3 
Alias test_slope::y#2 = test_slope::y#4 test_slope::y#3 
Alias test_slope::trees#6 = test_slope::trees#7 
Successful SSA optimization Pass2AliasElimination
Alias printf_number_buffer::format_justify_left#1 = printf_number_buffer::format_justify_left#11 
Alias printf_number_buffer::format_zero_padding#1 = printf_number_buffer::format_zero_padding#10 
Alias printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 
Alias printf_number_buffer::putc#1 = printf_number_buffer::putc#12 
Alias printf_number_buffer::format_upper_case#1 = printf_number_buffer::format_upper_case#10 
Alias printf_number_buffer::buffer_digits#1 = printf_number_buffer::buffer_digits#10 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values memcpy::source#1 memcpy::source#0
Identical Phi Values memcpy::destination#1 memcpy::destination#0
Identical Phi Values memcpy::num#1 memcpy::num#0
Identical Phi Values memcpy::src_end#1 memcpy::src_end#0
Identical Phi Values memcpy::destination#2 memcpy::destination#1
Identical Phi Values memset::end#1 memset::end#0
Identical Phi Values memset::str#5 memset::str#3
Identical Phi Values memset::c#2 memset::c#4
Identical Phi Values strlen::str#4 strlen::str#1
Identical Phi Values toupper::ch#1 toupper::ch#0
Identical Phi Values strupr::src#0 strupr::str#0
Identical Phi Values strupr::str#2 strupr::src#0
Identical Phi Values utoa::radix#1 utoa::radix#0
Identical Phi Values utoa::value#10 utoa::value#1
Identical Phi Values utoa::buffer#10 utoa::buffer#5
Identical Phi Values utoa::max_digits#10 utoa::max_digits#7
Identical Phi Values utoa::digit_values#10 utoa::digit_values#8
Identical Phi Values utoa_append::value#5 utoa_append::value#0
Identical Phi Values utoa_append::sub#3 utoa_append::sub#0
Identical Phi Values utoa_append::buffer#3 utoa_append::buffer#0
Identical Phi Values utoa_append::sub#1 utoa_append::sub#3
Identical Phi Values utoa_append::buffer#1 utoa_append::buffer#3
Identical Phi Values putchar::code#1 cputc::convertToScreenCode1_return#0
Identical Phi Values printf_str::putc#13 printf_str::putc#15
Identical Phi Values printf_padding::length#3 printf_padding::length#4
Identical Phi Values printf_padding::pad#3 printf_padding::pad#5
Identical Phi Values printf_padding::putc#3 printf_padding::putc#5
Identical Phi Values printf_number_buffer::format_min_length#1 printf_number_buffer::format_min_length#0
Identical Phi Values printf_number_buffer::format_justify_left#1 printf_number_buffer::format_justify_left#0
Identical Phi Values printf_number_buffer::format_zero_padding#1 printf_number_buffer::format_zero_padding#0
Identical Phi Values printf_number_buffer::buffer_digits#1 printf_number_buffer::buffer_digits#0
Identical Phi Values printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0
Identical Phi Values printf_number_buffer::putc#1 printf_number_buffer::putc#0
Identical Phi Values printf_number_buffer::format_upper_case#1 printf_number_buffer::format_upper_case#0
Identical Phi Values test_slope::x_inc#11 test_slope::x_inc#10
Identical Phi Values test_slope::y_inc#10 test_slope::y_inc#12
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values memset::return#0 memset::str#3
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition memcpy::$1 [7] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
Simple Condition memset::$1 [14] if(memset::num#2<=0) goto memset::@1
Simple Condition memset::$3 [21] if(memset::dst#2!=memset::end#0) goto memset::@4
Simple Condition strlen::$0 [29] if(0!=*strlen::str#2) goto strlen::@2
Simple Condition strupr::$1 [44] if(0!=*strupr::src#2) goto strupr::@2
Simple Condition utoa::$0 [56] if(utoa::radix#0==DECIMAL) goto utoa::@1
Simple Condition utoa::$1 [60] if(utoa::radix#0==HEXADECIMAL) goto utoa::@2
Simple Condition utoa::$2 [64] if(utoa::radix#0==OCTAL) goto utoa::@3
Simple Condition utoa::$3 [68] if(utoa::radix#0==BINARY) goto utoa::@4
Simple Condition utoa::$5 [85] if(utoa::digit#2<utoa::$4) goto utoa::@11
Simple Condition utoa_append::$0 [110] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
Simple Condition cputc::$0 [132] if(cputc::c==''at) goto cputc::@1
Simple Condition cputc::$7 [146] if(*COLCRS==$28) goto cputc::@6
Simple Condition newline::$1 [168] if(*ROWCRS!=$18) goto newline::@1
Simple Condition newline::$3 [171] if(conio_scroll_enable==1) goto newline::@4
Simple Condition newline::$6 [173] if(conio_display_cursor!=1) goto newline::@5
Simple Condition setcursor::$1 [201] if(conio_display_cursor==0) goto setcursor::@1
Simple Condition printf_str::$2 [214] if(0!=printf_str::c#1) goto printf_str::@2
Simple Condition printf_padding::$0 [223] if(printf_padding::i#2<printf_padding::length#4) goto printf_padding::@2
Simple Condition printf_uint::$5 [231] if(0!=printf_uint::format_sign_always#10) goto printf_uint::@1
Simple Condition printf_number_buffer::$0 [254] if(0==printf_number_buffer::format_min_length#0) goto printf_number_buffer::@1
Simple Condition printf_number_buffer::$20 [268] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@13
Simple Condition printf_number_buffer::$23 [273] if(printf_number_buffer::padding#1>=0) goto printf_number_buffer::@1
Simple Condition printf_number_buffer::$7 [277] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@3
Simple Condition printf_number_buffer::$12 [289] if(0==printf_number_buffer::format_upper_case#0) goto printf_number_buffer::@5
Simple Condition test_slope::$0 [433] if(test_slope::y#2<$143) goto test_slope::@2
Simple Condition test_slope::$2 [435] if(test_slope::mapline#2[test_slope::x#3]!='#'at) goto test_slope::@4
Simple Condition test_slope::$4 [439] if(test_slope::x#1<$1f) goto test_slope::@5
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting && if()-condition to two if()s [36] toupper::$2 = toupper::$0 && toupper::$1
Rewriting ! if()-condition to reversed if() [90] utoa::$8 = ! utoa::$7
Rewriting || if()-condition to two if()s [89] utoa::$7 = utoa::started#2 || utoa::$6
Rewriting || if()-condition to two if()s [137] cputc::$3 = cputc::$1 || cputc::$2
Rewriting ! if()-condition to reversed if() [260] printf_number_buffer::$5 = ! printf_number_buffer::$4
Rewriting && if()-condition to two if()s [259] printf_number_buffer::$4 = printf_number_buffer::$3 && printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [258] printf_number_buffer::$3 = printf_number_buffer::$1 && printf_number_buffer::$2
Rewriting ! if()-condition to reversed if() [283] printf_number_buffer::$10 = ! printf_number_buffer::$9
Rewriting && if()-condition to two if()s [282] printf_number_buffer::$9 = printf_number_buffer::format_zero_padding#0 && printf_number_buffer::padding#10
Rewriting ! if()-condition to reversed if() [300] printf_number_buffer::$17 = ! printf_number_buffer::$16
Rewriting && if()-condition to two if()s [299] printf_number_buffer::$16 = printf_number_buffer::$15 && printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [298] printf_number_buffer::$15 = printf_number_buffer::format_justify_left#0 && printf_number_buffer::$14
Successful SSA optimization Pass2ConditionalAndOrRewriting
Warning! Adding boolean cast to non-boolean condition utoa::started#2
Warning! Adding boolean cast to non-boolean condition printf_number_buffer::format_zero_padding#0
Warning! Adding boolean cast to non-boolean condition printf_number_buffer::format_justify_left#0
Warning! Adding boolean cast to non-boolean condition printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition printf_number_buffer::padding#10
Constant right-side identified [117] memset::num#0 = (unumber)$28*$18
Constant right-side identified [181] memcpy::num#0 = (unumber)$28*$17
Constant right-side identified [190] *ROWCRS = (unumber)$18-1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant strlen::len#0 = 0
Constant utoa::max_digits#0 = 0
Constant utoa::digit_values#0 = (unsigned int *) 0
Constant utoa::max_digits#1 = 5
Constant utoa::digit_values#1 = RADIX_DECIMAL_VALUES
Constant utoa::max_digits#2 = 4
Constant utoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES
Constant utoa::max_digits#3 = 6
Constant utoa::digit_values#3 = RADIX_OCTAL_VALUES
Constant utoa::max_digits#4 = $10
Constant utoa::digit_values#4 = RADIX_BINARY_VALUES
Constant utoa::started#0 = 0
Constant utoa::digit#0 = 0
Constant utoa::started#1 = 1
Constant utoa_append::digit#0 = 0
Constant memset::c#0 = 0
Constant memset::num#0 = (unumber)$28*$18
Constant gotoxy::x#0 = 0
Constant gotoxy::y#0 = 0
Constant cputc::convertToScreenCode1_v#0 = &cputc::c
Constant gotoxy::x#1 = 0
Constant gotoxy::y#1 = 0
Constant memcpy::num#0 = (unumber)$28*$17
Constant memset::c#1 = 0
Constant memset::num#1 = $28
Constant printf_str::c#0 = 0
Constant printf_padding::i#0 = 0
Constant printf_uint::$1 = '+'at
Constant printf_uint::$0 = 0
Constant utoa::buffer#5 = (char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant printf_number_buffer::buffer_digits#0 = (char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant printf_number_buffer::padding#0 = 0
Constant printf_number_buffer::padding#2 = 0
Constant printf_padding::pad#0 = ' 'at
Constant printf_padding::pad#1 = '0'at
Constant printf_padding::pad#2 = ' 'at
Constant test_slope::x_inc#0 = 3
Constant test_slope::y_inc#0 = 1
Constant printf_str::putc#1 = &cputc
Constant printf_str::s#2 = main::s
Constant printf_uint::putc#0 = &cputc
Constant printf_uint::format_min_length#0 = 0
Constant printf_uint::format_justify_left#0 = 0
Constant printf_uint::format_sign_always#0 = 0
Constant printf_uint::format_zero_padding#0 = 0
Constant printf_uint::format_upper_case#0 = 0
Constant printf_uint::format_radix#0 = DECIMAL
Constant printf_str::putc#2 = &cputc
Constant printf_str::s#3 = main::s1
Constant test_slope::x_inc#1 = 1
Constant test_slope::y_inc#1 = 1
Constant printf_str::putc#3 = &cputc
Constant printf_str::s#4 = main::s2
Constant printf_uint::putc#1 = &cputc
Constant printf_uint::format_min_length#1 = 0
Constant printf_uint::format_justify_left#1 = 0
Constant printf_uint::format_sign_always#1 = 0
Constant printf_uint::format_zero_padding#1 = 0
Constant printf_uint::format_upper_case#1 = 0
Constant printf_uint::format_radix#1 = DECIMAL
Constant printf_str::putc#4 = &cputc
Constant printf_str::s#5 = main::s3
Constant test_slope::x_inc#2 = 3
Constant test_slope::y_inc#2 = 1
Constant printf_str::putc#5 = &cputc
Constant printf_str::s#6 = main::s4
Constant printf_uint::putc#2 = &cputc
Constant printf_uint::format_min_length#2 = 0
Constant printf_uint::format_justify_left#2 = 0
Constant printf_uint::format_sign_always#2 = 0
Constant printf_uint::format_zero_padding#2 = 0
Constant printf_uint::format_upper_case#2 = 0
Constant printf_uint::format_radix#2 = DECIMAL
Constant printf_str::putc#6 = &cputc
Constant printf_str::s#7 = main::s5
Constant test_slope::x_inc#3 = 5
Constant test_slope::y_inc#3 = 1
Constant printf_str::putc#7 = &cputc
Constant printf_str::s#8 = main::s6
Constant printf_uint::putc#3 = &cputc
Constant printf_uint::format_min_length#3 = 0
Constant printf_uint::format_justify_left#3 = 0
Constant printf_uint::format_sign_always#3 = 0
Constant printf_uint::format_zero_padding#3 = 0
Constant printf_uint::format_upper_case#3 = 0
Constant printf_uint::format_radix#3 = DECIMAL
Constant printf_str::putc#8 = &cputc
Constant printf_str::s#9 = main::s7
Constant test_slope::x_inc#4 = 7
Constant test_slope::y_inc#4 = 1
Constant printf_str::putc#9 = &cputc
Constant printf_str::s#10 = main::s8
Constant printf_uint::putc#4 = &cputc
Constant printf_uint::format_min_length#4 = 0
Constant printf_uint::format_justify_left#4 = 0
Constant printf_uint::format_sign_always#4 = 0
Constant printf_uint::format_zero_padding#4 = 0
Constant printf_uint::format_upper_case#4 = 0
Constant printf_uint::format_radix#4 = DECIMAL
Constant printf_str::putc#10 = &cputc
Constant printf_str::s#11 = main::s9
Constant test_slope::x_inc#5 = 1
Constant test_slope::y_inc#5 = 2
Constant printf_str::putc#11 = &cputc
Constant printf_str::s#12 = main::s10
Constant printf_uint::putc#5 = &cputc
Constant printf_uint::format_min_length#5 = 0
Constant printf_uint::format_justify_left#5 = 0
Constant printf_uint::format_sign_always#5 = 0
Constant printf_uint::format_zero_padding#5 = 0
Constant printf_uint::format_upper_case#5 = 0
Constant printf_uint::format_radix#5 = DECIMAL
Constant printf_str::putc#12 = &cputc
Constant printf_str::s#13 = main::s11
Constant test_slope::x#0 = 0
Constant test_slope::trees#0 = 0
Constant test_slope::mapline#0 = map
Constant test_slope::y#0 = 0
Constant conio_reverse_value = 0
Constant conio_display_cursor = 1
Constant conio_scroll_enable = 1
Successful SSA optimization Pass2ConstantIdentification
Constant strlen::str#1 = printf_number_buffer::buffer_digits#0
Constant printf_str::s#1 = printf_number_buffer::buffer_digits#0
Constant strupr::str#0 = printf_number_buffer::buffer_digits#0
Successful SSA optimization Pass2ConstantIdentification
Constant strupr::return#2 = strupr::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [171] if(conio_scroll_enable==1) goto newline::@4
if() condition always false - eliminating [173] if(conio_display_cursor!=1) goto newline::@5
if() condition always false - eliminating [201] if(conio_display_cursor==0) goto setcursor::@1
Successful SSA optimization Pass2ConstantIfs
Consolidated constant strings into main::s1
Successful SSA optimization Pass2ConstantStringConsolidation
Simplifying expression containing zero cputc::convertToScreenCode1_return#0 in [156] putchar::newChar#0 = cputc::convertToScreenCode1_return#0 | conio_reverse_value
Simplifying expression containing zero (char *)&printf_buffer in [235] *((char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) = printf_uint::$2
Simplifying expression containing zero (char *)&printf_buffer in [241] printf_number_buffer::buffer_sign#0 = *((char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing PHI-reference to removed block (newline::@3) in block gotoxy
Removing PHI-reference to removed block (newline::@3) in block gotoxy
Removing unused block newline::@3
Removing unused block newline::@8
Removing PHI-reference to removed block (setcursor::@1) in block setcursor::@2
Removing unused block setcursor::@1
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Eliminating unused variable memset::return#2 and assignment [82] memset::return#2 = memset::str#3
Eliminating unused variable memcpy::return#2 and assignment [130] memcpy::return#2 = memcpy::destination#0
Eliminating unused variable memset::return#3 and assignment [134] memset::return#3 = memset::str#3
Eliminating unused variable printf_number_buffer::format_sign_always#0 and assignment [178] printf_number_buffer::format_sign_always#0 = printf_uint::format_sign_always#10
Eliminating unused variable printf_number_buffer::format_radix#0 and assignment [181] printf_number_buffer::format_radix#0 = printf_uint::format_radix#10
Eliminating unused constant strupr::return#2
Eliminating unused constant utoa::max_digits#0
Eliminating unused constant utoa::digit_values#0
Eliminating unused constant gotoxy::x#1
Eliminating unused constant gotoxy::y#1
Eliminating unused constant printf_str::c#0
Eliminating unused constant OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN
Eliminating unused constant conio_reverse_value
Eliminating unused constant conio_display_cursor
Eliminating unused constant conio_scroll_enable
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 0 in [59] utoa::$12 = 0 != utoa::started#2
Adding number conversion cast (unumber) 0 in [198] printf_number_buffer::$33 = 0 != printf_number_buffer::format_zero_padding#0
Adding number conversion cast (unumber) 0 in [210] printf_number_buffer::$34 = 0 != printf_number_buffer::format_justify_left#0
Adding number conversion cast (snumber) 0 in [273] printf_number_buffer::$35 = 0 != printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in [276] printf_number_buffer::$36 = 0 != printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in [278] printf_number_buffer::$37 = 0 != printf_number_buffer::padding#10
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized signed number type (signed char) 0
Finalized signed number type (signed char) 0
Finalized signed number type (signed char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias setcursor::c#1 = setcursor::c#3 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values gotoxy::x#2 gotoxy::x#0
Identical Phi Values gotoxy::y#2 gotoxy::y#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition toupper::$0 [27] if(toupper::ch#0>='a'at) goto toupper::@3
Simple Condition utoa::$12 [60] if(0!=utoa::started#2) goto utoa::@14
Simple Condition cputc::$1 [96] if(cputc::c=='
'at) goto cputc::@2
Simple Condition printf_number_buffer::$1 [182] if(0==printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@22
Simple Condition printf_number_buffer::$33 [198] if(0!=printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@23
Simple Condition printf_number_buffer::$34 [210] if(0!=printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@25
Simple Condition toupper::$1 [267] if(toupper::ch#0<='z'at) goto toupper::@1
Simple Condition utoa::$6 [268] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@14
Simple Condition cputc::$2 [269] if(cputc::c==$9b) goto cputc::@2
Simple Condition printf_number_buffer::$35 [271] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@8
Simple Condition printf_number_buffer::$2 [272] if(0==printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@21
Simple Condition printf_number_buffer::$36 [274] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@10
Simple Condition printf_number_buffer::$37 [276] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@12
Simple Condition printf_number_buffer::$14 [277] if(0==printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@24
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [27] if(toupper::ch#0<'a'at) goto toupper::@2
Negating conditional jump and destination [182] if(0!=printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@2
Negating conditional jump and destination [198] if(0==printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@4
Negating conditional jump and destination [210] if(0==printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@return
Negating conditional jump and destination [272] if(0!=printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@2
Negating conditional jump and destination [277] if(0!=printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [45] utoa::buffer#0 = ++ utoa::buffer#5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant utoa::buffer#0 = ++utoa::buffer#5
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [44] utoa::buffer#1 = ++ utoa::buffer#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant utoa::buffer#1 = ++utoa::buffer#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [45] utoa::buffer#2 = ++ utoa::buffer#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant utoa::buffer#2 = ++utoa::buffer#1
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [0] memcpy::src#0 = (char *)memcpy::source#0 keeping memcpy::source#0
Inlining Noop Cast [1] memcpy::dst#0 = (char *)memcpy::destination#0 keeping memcpy::destination#0
Inlining Noop Cast [2] memcpy::$2 = (char *)memcpy::source#0 keeping memcpy::source#0
Inlining Noop Cast [12] memset::$4 = (char *)memset::str#3 keeping memset::str#3
Inlining Noop Cast [14] memset::dst#0 = (char *)memset::str#3 keeping memset::str#3
Inlining Noop Cast [73] memset::str#0 = (void *)*SAVMSC keeping *SAVMSC
Inlining Noop Cast [177] printf_number_buffer::$25 = (signed char)printf_number_buffer::format_min_length#0 keeping printf_number_buffer::format_min_length#0
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [117] memcpy::source#0 = (void *)newline::$7 keeping memcpy::source#0
Inlining Noop Cast [120] memset::str#1 = (void *)newline::$9 keeping memset::str#1
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [51] utoa::$10 = utoa::digit#2 * SIZEOF_UNSIGNED_INT
Rewriting multiplication to use shift and addition[107] cursorLocation::$0 = cursorLocation::$3 * $28
Rewriting multiplication to use shift and addition[247] test_slope::$5 = test_slope::y_inc#12 * $1f
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings memset::c#0
Inlining constant with var siblings memset::num#0
Inlining constant with var siblings memset::c#1
Inlining constant with var siblings memset::num#1
Inlining constant with var siblings strlen::len#0
Inlining constant with var siblings strlen::str#1
Inlining constant with var siblings utoa::max_digits#1
Inlining constant with var siblings utoa::digit_values#1
Inlining constant with var siblings utoa::max_digits#2
Inlining constant with var siblings utoa::digit_values#2
Inlining constant with var siblings utoa::max_digits#3
Inlining constant with var siblings utoa::digit_values#3
Inlining constant with var siblings utoa::max_digits#4
Inlining constant with var siblings utoa::digit_values#4
Inlining constant with var siblings utoa::started#0
Inlining constant with var siblings utoa::digit#0
Inlining constant with var siblings utoa::started#1
Inlining constant with var siblings utoa::buffer#5
Inlining constant with var siblings utoa::buffer#0
Inlining constant with var siblings utoa::buffer#1
Inlining constant with var siblings utoa::buffer#2
Inlining constant with var siblings utoa_append::digit#0
Inlining constant with var siblings printf_str::putc#1
Inlining constant with var siblings printf_str::s#2
Inlining constant with var siblings printf_str::putc#2
Inlining constant with var siblings printf_str::s#3
Inlining constant with var siblings printf_str::putc#3
Inlining constant with var siblings printf_str::s#4
Inlining constant with var siblings printf_str::putc#4
Inlining constant with var siblings printf_str::s#5
Inlining constant with var siblings printf_str::putc#5
Inlining constant with var siblings printf_str::s#6
Inlining constant with var siblings printf_str::putc#6
Inlining constant with var siblings printf_str::s#7
Inlining constant with var siblings printf_str::putc#7
Inlining constant with var siblings printf_str::s#8
Inlining constant with var siblings printf_str::putc#8
Inlining constant with var siblings printf_str::s#9
Inlining constant with var siblings printf_str::putc#9
Inlining constant with var siblings printf_str::s#10
Inlining constant with var siblings printf_str::putc#10
Inlining constant with var siblings printf_str::s#11
Inlining constant with var siblings printf_str::putc#11
Inlining constant with var siblings printf_str::s#12
Inlining constant with var siblings printf_str::putc#12
Inlining constant with var siblings printf_str::s#13
Inlining constant with var siblings printf_str::s#1
Inlining constant with var siblings printf_padding::i#0
Inlining constant with var siblings printf_padding::pad#0
Inlining constant with var siblings printf_padding::pad#1
Inlining constant with var siblings printf_padding::pad#2
Inlining constant with var siblings printf_uint::putc#0
Inlining constant with var siblings printf_uint::format_min_length#0
Inlining constant with var siblings printf_uint::format_justify_left#0
Inlining constant with var siblings printf_uint::format_sign_always#0
Inlining constant with var siblings printf_uint::format_zero_padding#0
Inlining constant with var siblings printf_uint::format_upper_case#0
Inlining constant with var siblings printf_uint::format_radix#0
Inlining constant with var siblings printf_uint::putc#1
Inlining constant with var siblings printf_uint::format_min_length#1
Inlining constant with var siblings printf_uint::format_justify_left#1
Inlining constant with var siblings printf_uint::format_sign_always#1
Inlining constant with var siblings printf_uint::format_zero_padding#1
Inlining constant with var siblings printf_uint::format_upper_case#1
Inlining constant with var siblings printf_uint::format_radix#1
Inlining constant with var siblings printf_uint::putc#2
Inlining constant with var siblings printf_uint::format_min_length#2
Inlining constant with var siblings printf_uint::format_justify_left#2
Inlining constant with var siblings printf_uint::format_sign_always#2
Inlining constant with var siblings printf_uint::format_zero_padding#2
Inlining constant with var siblings printf_uint::format_upper_case#2
Inlining constant with var siblings printf_uint::format_radix#2
Inlining constant with var siblings printf_uint::putc#3
Inlining constant with var siblings printf_uint::format_min_length#3
Inlining constant with var siblings printf_uint::format_justify_left#3
Inlining constant with var siblings printf_uint::format_sign_always#3
Inlining constant with var siblings printf_uint::format_zero_padding#3
Inlining constant with var siblings printf_uint::format_upper_case#3
Inlining constant with var siblings printf_uint::format_radix#3
Inlining constant with var siblings printf_uint::putc#4
Inlining constant with var siblings printf_uint::format_min_length#4
Inlining constant with var siblings printf_uint::format_justify_left#4
Inlining constant with var siblings printf_uint::format_sign_always#4
Inlining constant with var siblings printf_uint::format_zero_padding#4
Inlining constant with var siblings printf_uint::format_upper_case#4
Inlining constant with var siblings printf_uint::format_radix#4
Inlining constant with var siblings printf_uint::putc#5
Inlining constant with var siblings printf_uint::format_min_length#5
Inlining constant with var siblings printf_uint::format_justify_left#5
Inlining constant with var siblings printf_uint::format_sign_always#5
Inlining constant with var siblings printf_uint::format_zero_padding#5
Inlining constant with var siblings printf_uint::format_upper_case#5
Inlining constant with var siblings printf_uint::format_radix#5
Inlining constant with var siblings printf_number_buffer::padding#0
Inlining constant with var siblings printf_number_buffer::padding#2
Inlining constant with var siblings test_slope::x_inc#0
Inlining constant with var siblings test_slope::y_inc#0
Inlining constant with var siblings test_slope::x_inc#1
Inlining constant with var siblings test_slope::y_inc#1
Inlining constant with var siblings test_slope::x_inc#2
Inlining constant with var siblings test_slope::y_inc#2
Inlining constant with var siblings test_slope::x_inc#3
Inlining constant with var siblings test_slope::y_inc#3
Inlining constant with var siblings test_slope::x_inc#4
Inlining constant with var siblings test_slope::y_inc#4
Inlining constant with var siblings test_slope::x_inc#5
Inlining constant with var siblings test_slope::y_inc#5
Inlining constant with var siblings test_slope::x#0
Inlining constant with var siblings test_slope::trees#0
Inlining constant with var siblings test_slope::mapline#0
Inlining constant with var siblings test_slope::y#0
Constant inlined utoa::digit_values#1 = RADIX_DECIMAL_VALUES
Constant inlined utoa::digit_values#4 = RADIX_BINARY_VALUES
Constant inlined utoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES
Constant inlined utoa::digit_values#3 = RADIX_OCTAL_VALUES
Constant inlined strlen::len#0 = 0
Constant inlined printf_str::s#9 = main::s1
Constant inlined printf_str::s#7 = main::s1
Constant inlined test_slope::x_inc#1 = 1
Constant inlined printf_str::s#8 = main::s6
Constant inlined test_slope::x_inc#0 = 3
Constant inlined printf_str::s#5 = main::s1
Constant inlined printf_str::s#6 = main::s4
Constant inlined printf_str::s#3 = main::s1
Constant inlined printf_str::s#4 = main::s2
Constant inlined printf_str::s#1 = printf_number_buffer::buffer_digits#0
Constant inlined printf_str::s#2 = main::s
Constant inlined test_slope::x_inc#3 = 5
Constant inlined test_slope::x_inc#2 = 3
Constant inlined test_slope::x_inc#5 = 1
Constant inlined test_slope::x_inc#4 = 7
Constant inlined printf_str::s#13 = main::s1
Constant inlined test_slope::trees#0 = 0
Constant inlined printf_str::s#12 = main::s10
Constant inlined printf_str::s#11 = main::s1
Constant inlined printf_str::s#10 = main::s8
Constant inlined memset::c#0 = 0
Constant inlined memset::c#1 = 0
Constant inlined utoa_append::digit#0 = 0
Constant inlined utoa::digit#0 = 0
Constant inlined printf_uint::format_upper_case#5 = 0
Constant inlined printf_uint::format_upper_case#4 = 0
Constant inlined printf_uint::format_upper_case#3 = 0
Constant inlined printf_uint::format_upper_case#2 = 0
Constant inlined printf_uint::format_upper_case#1 = 0
Constant inlined printf_uint::format_upper_case#0 = 0
Constant inlined strupr::str#0 = printf_number_buffer::buffer_digits#0
Constant inlined printf_padding::pad#0 = ' 'at
Constant inlined printf_padding::i#0 = 0
Constant inlined printf_padding::pad#1 = '0'at
Constant inlined printf_padding::pad#2 = ' 'at
Constant inlined utoa::started#1 = 1
Constant inlined utoa::started#0 = 0
Constant inlined test_slope::y#0 = 0
Constant inlined printf_str::putc#12 = &cputc
Constant inlined printf_str::putc#11 = &cputc
Constant inlined printf_str::putc#10 = &cputc
Constant inlined utoa::buffer#0 = ++(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined utoa::buffer#1 = ++++(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_str::putc#1 = &cputc
Constant inlined memset::num#1 = $28
Constant inlined printf_str::putc#2 = &cputc
Constant inlined memset::num#0 = (unsigned int)$28*$18
Constant inlined printf_str::putc#3 = &cputc
Constant inlined printf_str::putc#8 = &cputc
Constant inlined printf_str::putc#9 = &cputc
Constant inlined test_slope::mapline#0 = map
Constant inlined printf_str::putc#4 = &cputc
Constant inlined printf_str::putc#5 = &cputc
Constant inlined printf_str::putc#6 = &cputc
Constant inlined printf_str::putc#7 = &cputc
Constant inlined main::s11 = main::s1
Constant inlined printf_uint::format_zero_padding#3 = 0
Constant inlined printf_uint::putc#5 = &cputc
Constant inlined printf_number_buffer::padding#2 = 0
Constant inlined printf_uint::format_zero_padding#4 = 0
Constant inlined printf_uint::format_zero_padding#1 = 0
Constant inlined printf_uint::putc#3 = &cputc
Constant inlined test_slope::x#0 = 0
Constant inlined printf_uint::format_zero_padding#2 = 0
Constant inlined printf_uint::putc#4 = &cputc
Constant inlined printf_uint::putc#1 = &cputc
Constant inlined printf_uint::putc#2 = &cputc
Constant inlined printf_uint::format_zero_padding#5 = 0
Constant inlined printf_uint::putc#0 = &cputc
Constant inlined test_slope::y_inc#4 = 1
Constant inlined test_slope::y_inc#3 = 1
Constant inlined test_slope::y_inc#2 = 1
Constant inlined test_slope::y_inc#1 = 1
Constant inlined utoa::buffer#5 = (char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined utoa::buffer#2 = ++++++(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_uint::format_sign_always#0 = 0
Constant inlined printf_uint::format_sign_always#1 = 0
Constant inlined test_slope::y_inc#5 = 2
Constant inlined utoa::max_digits#1 = 5
Constant inlined printf_uint::format_sign_always#2 = 0
Constant inlined printf_uint::format_radix#0 = DECIMAL
Constant inlined utoa::max_digits#2 = 4
Constant inlined printf_uint::format_sign_always#3 = 0
Constant inlined printf_uint::format_radix#1 = DECIMAL
Constant inlined utoa::max_digits#3 = 6
Constant inlined printf_uint::format_sign_always#4 = 0
Constant inlined printf_uint::format_radix#2 = DECIMAL
Constant inlined utoa::max_digits#4 = $10
Constant inlined printf_uint::format_sign_always#5 = 0
Constant inlined printf_uint::format_radix#3 = DECIMAL
Constant inlined test_slope::y_inc#0 = 1
Constant inlined printf_uint::format_radix#4 = DECIMAL
Constant inlined printf_uint::format_zero_padding#0 = 0
Constant inlined printf_uint::format_radix#5 = DECIMAL
Constant inlined printf_number_buffer::padding#0 = 0
Constant inlined printf_uint::format_justify_left#0 = 0
Constant inlined printf_uint::format_justify_left#2 = 0
Constant inlined printf_uint::format_justify_left#1 = 0
Constant inlined printf_uint::format_justify_left#4 = 0
Constant inlined strlen::str#1 = printf_number_buffer::buffer_digits#0
Constant inlined printf_uint::format_justify_left#3 = 0
Constant inlined printf_uint::format_min_length#4 = 0
Constant inlined printf_uint::format_min_length#5 = 0
Constant inlined printf_uint::format_min_length#0 = 0
Constant inlined printf_uint::format_min_length#1 = 0
Constant inlined printf_uint::format_min_length#2 = 0
Constant inlined printf_uint::format_min_length#3 = 0
Constant inlined printf_uint::format_justify_left#5 = 0
Constant inlined printf_uint::$1 = '+'at
Constant inlined printf_uint::$0 = 0
Constant inlined main::s5 = main::s1
Constant inlined main::s3 = main::s1
Constant inlined main::s9 = main::s1
Constant inlined main::s7 = main::s1
Successful SSA optimization Pass2ConstantInlining
Simplifying constant integer increment ++(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Simplifying constant integer increment ++(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Simplifying constant integer increment ++(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1
Simplifying constant integer increment ++(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+2
Successful SSA optimization Pass2ConstantSimplification
Adding number conversion cast (unumber) 1 in [43] *((char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1) = 'r'at
Adding number conversion cast (unumber) 2 in [44] *((char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+2) = 'r'at
Adding number conversion cast (unumber) 3 in [45] *((char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+3) = 0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias cursorLocation::$0 = cursorLocation::$6 
Alias test_slope::$5 = test_slope::$13 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values memset::c#4 0
Identical Phi Values printf_uint::format_sign_always#10 0
Identical Phi Values printf_uint::format_radix#10 DECIMAL
Identical Phi Values printf_uint::putc#10 &cputc
Identical Phi Values printf_uint::format_min_length#10 0
Identical Phi Values printf_uint::format_justify_left#10 0
Identical Phi Values printf_uint::format_zero_padding#10 0
Identical Phi Values printf_uint::format_upper_case#10 0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant utoa::radix#0 = DECIMAL
Constant printf_number_buffer::putc#0 = &cputc
Constant printf_number_buffer::format_min_length#0 = 0
Constant printf_number_buffer::format_justify_left#0 = 0
Constant printf_number_buffer::format_zero_padding#0 = 0
Constant printf_number_buffer::format_upper_case#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant printf_padding::putc#0 = printf_number_buffer::putc#0
Constant printf_padding::putc#1 = printf_number_buffer::putc#0
Constant printf_str::putc#0 = printf_number_buffer::putc#0
Constant printf_padding::putc#2 = printf_number_buffer::putc#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (signed char)printf_number_buffer::format_min_length#0 in [171] printf_number_buffer::padding#1 = (signed char)printf_number_buffer::format_min_length#0 - printf_number_buffer::len#2
Successful SSA optimization Pass2ConstantValues
Replacing constant pointer function [180] callexecute cputc 
Successful SSA optimization Pass2ConstantCallPointerIdentification
if() condition always true - replacing block destination [33] if(utoa::radix#0==DECIMAL) goto utoa::@1
if() condition always false - eliminating [34] if(utoa::radix#0==HEXADECIMAL) goto utoa::@2
if() condition always false - eliminating [35] if(utoa::radix#0==OCTAL) goto utoa::@3
if() condition always false - eliminating [36] if(utoa::radix#0==BINARY) goto utoa::@4
if() condition always false - eliminating [148] if(0!=0) goto printf_uint::@1
if() condition always true - replacing block destination [162] if(0==printf_number_buffer::format_min_length#0) goto printf_number_buffer::@1
if() condition always false - eliminating [164] if(0!=printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@2
if() condition always true - replacing block destination [178] if(0==printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@4
if() condition always true - replacing block destination [182] if(0==printf_number_buffer::format_upper_case#0) goto printf_number_buffer::@5
if() condition always true - replacing block destination [188] if(0==printf_number_buffer::format_justify_left#0) goto printf_number_buffer::@return
if() condition always false - eliminating [256] if(0!=printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@2
if() condition always false - eliminating [259] if(0!=printf_number_buffer::format_zero_padding#0) goto printf_number_buffer::@return
Successful SSA optimization Pass2ConstantIfs
Simplifying constant evaluating to zero (signed char)printf_number_buffer::format_min_length#0 in [171] printf_number_buffer::padding#1 = (signed char)printf_number_buffer::format_min_length#0 - printf_number_buffer::len#2
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero printf_number_buffer::len#2 in [171] printf_number_buffer::padding#1 = 0 - printf_number_buffer::len#2
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating variable strlen::str#2 from unused block strlen::@1
Eliminating variable strlen::len#2 from unused block strlen::@1
Eliminating variable strlen::len#1 from unused block strlen::@2
Eliminating variable strlen::str#0 from unused block strlen::@2
Eliminating variable toupper::return#0 from unused block toupper::@1
Eliminating variable toupper::return#2 from unused block toupper::@return
Eliminating variable strupr::src#2 from unused block strupr::@1
Eliminating variable toupper::ch#0 from unused block strupr::@2
Eliminating variable toupper::return#3 from unused block strupr::@2
Eliminating variable strupr::$0 from unused block strupr::@4
Eliminating variable strupr::src#1 from unused block strupr::@4
Eliminating variable strlen::return#2 from unused block printf_number_buffer::@6
Eliminating variable printf_number_buffer::$19 from unused block printf_number_buffer::@15
Eliminating variable printf_number_buffer::len#0 from unused block printf_number_buffer::@15
Eliminating variable printf_number_buffer::len#2 from unused block printf_number_buffer::@13
Eliminating variable printf_number_buffer::padding#1 from unused block printf_number_buffer::@13
Eliminating variable printf_number_buffer::len#1 from unused block printf_number_buffer::@7
Eliminating variable printf_padding::length#1 from unused block printf_number_buffer::@10
Eliminating variable printf_padding::length#2 from unused block printf_number_buffer::@12
Removing unused procedure strlen
Removing unused procedure block strlen
Removing PHI-reference to removed block (strlen) in block strlen::@1
Removing PHI-reference to removed block (strlen) in block strlen::@1
Removing unused procedure block strlen::@1
Removing unused procedure block strlen::@2
Removing unused procedure block strlen::@3
Removing unused procedure block strlen::@return
Removing unused procedure toupper
Removing unused procedure block toupper
Removing unused procedure block toupper::@1
Removing PHI-reference to removed block (toupper::@1) in block toupper::@return
Removing unused procedure block toupper::@2
Removing PHI-reference to removed block (toupper::@2) in block toupper::@return
Removing unused procedure block toupper::@return
Removing unused procedure block toupper::@3
Removing unused procedure strupr
Removing unused procedure block strupr
Removing PHI-reference to removed block (strupr) in block strupr::@1
Removing unused procedure block strupr::@1
Removing unused procedure block strupr::@2
Removing unused procedure block strupr::@4
Removing unused procedure block strupr::@3
Removing unused procedure block strupr::@return
Removing unused block utoa::@6
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing unused block utoa::@2
Removing unused block utoa::@7
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing unused block utoa::@3
Removing unused block utoa::@8
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing unused block utoa::@4
Removing unused block utoa::@9
Removing PHI-reference to removed block (printf_uint::@1) in block printf_uint::@3
Removing unused block printf_uint::@1
Removing unused block printf_number_buffer::@6
Removing PHI-reference to removed block (printf_number_buffer::@15) in block printf_number_buffer::@13
Removing unused block printf_number_buffer::@15
Removing PHI-reference to removed block (printf_number_buffer::@13) in block printf_number_buffer::@1
Removing unused block printf_number_buffer::@13
Removing unused block printf_number_buffer::@7
Removing PHI-reference to removed block (printf_number_buffer::@14) in block printf_number_buffer::@1
Removing unused block printf_number_buffer::@14
Removing PHI-reference to removed block (printf_number_buffer::@10) in block printf_padding
Removing PHI-reference to removed block (printf_number_buffer::@10) in block printf_padding
Removing PHI-reference to removed block (printf_number_buffer::@10) in block printf_padding
Removing unused block printf_number_buffer::@10
Removing unused block printf_number_buffer::@17
Removing unused block printf_number_buffer::@11
Removing unused block printf_number_buffer::@19
Removing PHI-reference to removed block (printf_number_buffer::@12) in block printf_padding
Removing PHI-reference to removed block (printf_number_buffer::@12) in block printf_padding
Removing PHI-reference to removed block (printf_number_buffer::@12) in block printf_padding
Removing unused block printf_number_buffer::@12
Removing unused block printf_number_buffer::@20
Removing unused block printf_number_buffer::@23
Removing unused block printf_number_buffer::@24
Removing unused block printf_number_buffer::@25
Successful SSA optimization Pass2EliminateUnusedBlocks
Eliminating unused constant BINARY
Eliminating unused constant OCTAL
Eliminating unused constant HEXADECIMAL
Eliminating unused constant utoa::radix#0
Eliminating unused constant RADIX_BINARY_VALUES
Eliminating unused constant RADIX_OCTAL_VALUES
Eliminating unused constant RADIX_HEXADECIMAL_VALUES
Eliminating unused constant printf_padding::putc#1
Eliminating unused constant printf_padding::putc#2
Eliminating unused constant printf_number_buffer::format_min_length#0
Eliminating unused constant printf_number_buffer::format_justify_left#0
Eliminating unused constant printf_number_buffer::format_zero_padding#0
Eliminating unused constant printf_number_buffer::format_upper_case#0
Eliminating unused constant SIZEOF_UNSIGNED_INT
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant DECIMAL
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with var siblings printf_str::putc#0
Inlining constant with var siblings printf_padding::putc#0
Constant inlined printf_str::putc#0 = printf_number_buffer::putc#0
Constant inlined printf_padding::putc#0 = printf_number_buffer::putc#0
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values utoa::max_digits#7 5
Identical Phi Values utoa::digit_values#8 RADIX_DECIMAL_VALUES
Identical Phi Values printf_padding::length#4 printf_padding::length#0
Identical Phi Values printf_padding::pad#5 ' 'at
Identical Phi Values printf_padding::putc#5 printf_number_buffer::putc#0
Identical Phi Values printf_uint::$2 0
Identical Phi Values printf_number_buffer::padding#10 0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [18] utoa::$4 = 5 - 1
Constant right-side identified [131] printf_padding::length#0 = (char)0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant utoa::$4 = 5-1
Constant printf_padding::length#0 = (char)0
Successful SSA optimization Pass2ConstantIdentification
Replacing constant pointer function [117] callexecute cputc 
Successful SSA optimization Pass2ConstantCallPointerIdentification
if() condition always false - eliminating [115] if(printf_padding::i#2<printf_padding::length#0) goto printf_padding::@2
if() condition always false - eliminating [198] if(0!=0) goto printf_number_buffer::@8
Successful SSA optimization Pass2ConstantIfs
Simplifying constant evaluating to zero (char)0 in 
Successful SSA optimization PassNSimplifyConstantZero
Eliminating variable printf_padding::i#2 from unused block printf_padding::@1
Eliminating variable printf_padding::i#1 from unused block printf_padding::@3
Removing unused procedure printf_padding
Removing unused procedure block printf_padding
Removing PHI-reference to removed block (printf_padding) in block printf_padding::@1
Removing unused procedure block printf_padding::@1
Removing unused procedure block printf_padding::@2
Removing unused procedure block printf_padding::@3
Removing unused procedure block printf_padding::@return
Removing unused block printf_number_buffer::@8
Removing unused block printf_number_buffer::@16
Successful SSA optimization Pass2EliminateUnusedBlocks
Constant inlined utoa::$4 = 5-1
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) $17
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) 8
Finalized unsigned number type (char) $a
Finalized unsigned number type (char) $10
Finalized unsigned number type (char) $a
Finalized unsigned number type (char) $a
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) 2
Finalized unsigned number type (unsigned int) $100
Finalized unsigned number type (char) $b
Finalized unsigned number type (char) $b
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) $18
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) $17
Finalized unsigned number type (char) $18
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying constant integer cast $18-1
Successful SSA optimization PassNCastSimplification
Added new block during phi lifting utoa::@17(between utoa::@16 and utoa::@13)
Added new block during phi lifting test_slope::@8(between test_slope::@2 and test_slope::@4)
Added new block during phi lifting test_slope::@9(between test_slope::@4 and test_slope::@5)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@14
Adding NOP phi() at start of main::@17
Adding NOP phi() at start of main::@18
Adding NOP phi() at start of main::@21
Adding NOP phi() at start of main::@22
Adding NOP phi() at start of main::@25
Adding NOP phi() at start of main::@26
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of cputc::@4
Adding NOP phi() at start of cputc::convertToScreenCode1_@return
Adding NOP phi() at start of cputc::@7
Adding NOP phi() at start of cputc::@5
Adding NOP phi() at start of cputc::@12
Adding NOP phi() at start of cputc::@11
Adding NOP phi() at start of cputc::@9
Adding NOP phi() at start of cputc::@8
Adding NOP phi() at start of clrscr::@2
Adding NOP phi() at start of test_slope::@3
Adding NOP phi() at start of printf_uint::@2
Adding NOP phi() at start of printf_uint::@5
Adding NOP phi() at start of putchar::@2
Adding NOP phi() at start of newline::@2
Adding NOP phi() at start of newline::@4
Adding NOP phi() at start of newline::@1
Adding NOP phi() at start of newline::@7
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of gotoxy::@1
Adding NOP phi() at start of utoa
Adding NOP phi() at start of utoa::@1
Adding NOP phi() at start of printf_number_buffer
Adding NOP phi() at start of printf_number_buffer::@1
Adding NOP phi() at start of printf_number_buffer::@22
Adding NOP phi() at start of printf_number_buffer::@21
Adding NOP phi() at start of printf_number_buffer::@3
Adding NOP phi() at start of printf_number_buffer::@4
Adding NOP phi() at start of printf_number_buffer::@5
Adding NOP phi() at start of printf_number_buffer::@18
Adding NOP phi() at start of memcpy::@3
CALL GRAPH
Calls in [main] to clrscr:1 test_slope:3 printf_str:6 printf_uint:8 printf_str:10 test_slope:12 printf_str:15 printf_uint:17 printf_str:19 test_slope:21 printf_str:24 printf_uint:26 printf_str:28 test_slope:30 printf_str:33 printf_uint:35 printf_str:37 test_slope:39 printf_str:42 printf_uint:44 printf_str:46 test_slope:48 printf_str:51 printf_uint:53 printf_str:55 
Calls in [cputc] to putchar:66 setcursor:70 newline:74 newline:77 setcursor:80 
Calls in [clrscr] to memset:83 gotoxy:85 
Calls in [printf_str] to null:126 
Calls in [printf_uint] to utoa:133 printf_number_buffer:135 
Calls in [putchar] to cursorLocation:139 setcursor:145 
Calls in [setcursor] to cursorLocation:149 
Calls in [newline] to memcpy:167 memset:170 setcursor:173 
Calls in [gotoxy] to setcursor:189 
Calls in [utoa] to utoa_append:218 
Calls in [printf_number_buffer] to cputc:230 printf_str:235 

Created 26 initial phi equivalence classes
Coalesced [7] printf_uint::uvalue#14 = printf_uint::uvalue#0
Coalesced [16] printf_uint::uvalue#15 = printf_uint::uvalue#1
Coalesced [25] printf_uint::uvalue#10 = printf_uint::uvalue#2
Coalesced [34] printf_uint::uvalue#11 = printf_uint::uvalue#3
Coalesced [43] printf_uint::uvalue#12 = printf_uint::uvalue#4
Coalesced [52] printf_uint::uvalue#13 = printf_uint::uvalue#5
Coalesced [95] test_slope::trees#11 = test_slope::trees#1
Coalesced [100] test_slope::x#11 = test_slope::x#2
Coalesced [112] test_slope::y#8 = test_slope::y#1
Coalesced [113] test_slope::mapline#8 = test_slope::mapline#1
Coalesced [114] test_slope::x#9 = test_slope::x#8
Coalesced [115] test_slope::trees#9 = test_slope::trees#6
Coalesced [116] test_slope::x#10 = test_slope::x#1
Coalesced (already) [117] test_slope::trees#10 = test_slope::trees#2
Coalesced [119] printf_str::s#17 = printf_str::s#15
Coalesced [128] printf_str::s#18 = printf_str::s#0
Coalesced [186] memset::dst#5 = memset::dst#1
Coalesced [194] utoa::value#17 = utoa::value#1
Coalesced [206] utoa::value#18 = utoa::value#2
Coalesced [207] utoa::started#6 = utoa::started#2
Coalesced [208] utoa::buffer#23 = utoa::buffer#11
Coalesced [211] utoa::digit#7 = utoa::digit#1
Coalesced (already) [212] utoa::value#16 = utoa::value#6
Coalesced (already) [213] utoa::started#5 = utoa::started#4
Coalesced (already) [214] utoa::buffer#22 = utoa::buffer#14
Coalesced [222] utoa::value#19 = utoa::value#0
Coalesced [223] utoa::buffer#24 = utoa::buffer#4
Coalesced [255] memcpy::src#5 = memcpy::src#1
Coalesced [256] memcpy::dst#5 = memcpy::dst#1
Coalesced [257] utoa_append::value#6 = utoa_append::value#0
Coalesced [264] utoa_append::value#7 = utoa_append::value#1
Coalesced [265] utoa_append::digit#5 = utoa_append::digit#1
Coalesced down to 20 phi equivalence classes
Culled Empty Block label main::@26
Culled Empty Block label cputc::@4
Culled Empty Block label cputc::convertToScreenCode1_@return
Culled Empty Block label cputc::@12
Culled Empty Block label cputc::@11
Culled Empty Block label cputc::@9
Culled Empty Block label cputc::@8
Culled Empty Block label clrscr::@2
Culled Empty Block label test_slope::@3
Culled Empty Block label test_slope::@9
Culled Empty Block label test_slope::@8
Culled Empty Block label printf_uint::@2
Culled Empty Block label printf_uint::@5
Culled Empty Block label putchar::@2
Culled Empty Block label newline::@2
Culled Empty Block label newline::@4
Culled Empty Block label newline::@7
Culled Empty Block label memset::@1
Culled Empty Block label gotoxy::@1
Culled Empty Block label utoa::@1
Culled Empty Block label utoa::@5
Culled Empty Block label utoa::@17
Culled Empty Block label printf_number_buffer::@1
Culled Empty Block label printf_number_buffer::@22
Culled Empty Block label printf_number_buffer::@21
Culled Empty Block label printf_number_buffer::@3
Culled Empty Block label printf_number_buffer::@4
Culled Empty Block label printf_number_buffer::@18
Culled Empty Block label memcpy::@3
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block utoa::@10 to utoa::@1
Renumbering block utoa::@11 to utoa::@2
Renumbering block utoa::@12 to utoa::@3
Renumbering block utoa::@13 to utoa::@4
Renumbering block utoa::@14 to utoa::@5
Renumbering block utoa::@15 to utoa::@6
Renumbering block utoa::@16 to utoa::@7
Renumbering block cputc::@5 to cputc::@4
Renumbering block cputc::@6 to cputc::@5
Renumbering block cputc::@7 to cputc::@6
Renumbering block cputc::@10 to cputc::@7
Renumbering block cputc::@13 to cputc::@8
Renumbering block newline::@5 to newline::@2
Renumbering block newline::@6 to newline::@3
Renumbering block newline::@9 to newline::@4
Renumbering block newline::@10 to newline::@5
Renumbering block setcursor::@2 to setcursor::@1
Renumbering block setcursor::@3 to setcursor::@2
Renumbering block setcursor::@4 to setcursor::@3
Renumbering block printf_uint::@3 to printf_uint::@1
Renumbering block printf_uint::@4 to printf_uint::@2
Renumbering block printf_number_buffer::@2 to printf_number_buffer::@1
Renumbering block printf_number_buffer::@5 to printf_number_buffer::@2
Renumbering block printf_number_buffer::@9 to printf_number_buffer::@3
Renumbering block test_slope::@4 to test_slope::@3
Renumbering block test_slope::@5 to test_slope::@4
Renumbering block test_slope::@6 to test_slope::@5
Renumbering block test_slope::@7 to test_slope::@6
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@14
Adding NOP phi() at start of main::@16
Adding NOP phi() at start of main::@17
Adding NOP phi() at start of main::@18
Adding NOP phi() at start of main::@20
Adding NOP phi() at start of main::@21
Adding NOP phi() at start of main::@22
Adding NOP phi() at start of main::@24
Adding NOP phi() at start of main::@25
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of cputc::@6
Adding NOP phi() at start of cputc::@4
Adding NOP phi() at start of newline::@1
Adding NOP phi() at start of utoa
Adding NOP phi() at start of printf_number_buffer
Adding NOP phi() at start of printf_number_buffer::@2
Adding NOP phi() at start of utoa_append

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call clrscr
  to:main::@2
main::@2: scope:[main]  from main
  [2] phi()
  [3] call test_slope
  [4] test_slope::return#0 = test_slope::trees#2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [5] printf_uint::uvalue#0 = test_slope::return#0
  [6] call printf_str
  to:main::@4
main::@4: scope:[main]  from main::@3
  [7] phi()
  [8] call printf_uint
  to:main::@5
main::@5: scope:[main]  from main::@4
  [9] phi()
  [10] call printf_str
  to:main::@6
main::@6: scope:[main]  from main::@5
  [11] phi()
  [12] call test_slope
  [13] test_slope::return#1 = test_slope::trees#2
  to:main::@7
main::@7: scope:[main]  from main::@6
  [14] printf_uint::uvalue#1 = test_slope::return#1
  [15] call printf_str
  to:main::@8
main::@8: scope:[main]  from main::@7
  [16] phi()
  [17] call printf_uint
  to:main::@9
main::@9: scope:[main]  from main::@8
  [18] phi()
  [19] call printf_str
  to:main::@10
main::@10: scope:[main]  from main::@9
  [20] phi()
  [21] call test_slope
  [22] test_slope::return#10 = test_slope::trees#2
  to:main::@11
main::@11: scope:[main]  from main::@10
  [23] printf_uint::uvalue#2 = test_slope::return#10
  [24] call printf_str
  to:main::@12
main::@12: scope:[main]  from main::@11
  [25] phi()
  [26] call printf_uint
  to:main::@13
main::@13: scope:[main]  from main::@12
  [27] phi()
  [28] call printf_str
  to:main::@14
main::@14: scope:[main]  from main::@13
  [29] phi()
  [30] call test_slope
  [31] test_slope::return#11 = test_slope::trees#2
  to:main::@15
main::@15: scope:[main]  from main::@14
  [32] printf_uint::uvalue#3 = test_slope::return#11
  [33] call printf_str
  to:main::@16
main::@16: scope:[main]  from main::@15
  [34] phi()
  [35] call printf_uint
  to:main::@17
main::@17: scope:[main]  from main::@16
  [36] phi()
  [37] call printf_str
  to:main::@18
main::@18: scope:[main]  from main::@17
  [38] phi()
  [39] call test_slope
  [40] test_slope::return#12 = test_slope::trees#2
  to:main::@19
main::@19: scope:[main]  from main::@18
  [41] printf_uint::uvalue#4 = test_slope::return#12
  [42] call printf_str
  to:main::@20
main::@20: scope:[main]  from main::@19
  [43] phi()
  [44] call printf_uint
  to:main::@21
main::@21: scope:[main]  from main::@20
  [45] phi()
  [46] call printf_str
  to:main::@22
main::@22: scope:[main]  from main::@21
  [47] phi()
  [48] call test_slope
  [49] test_slope::return#13 = test_slope::trees#2
  to:main::@23
main::@23: scope:[main]  from main::@22
  [50] printf_uint::uvalue#5 = test_slope::return#13
  [51] call printf_str
  to:main::@24
main::@24: scope:[main]  from main::@23
  [52] phi()
  [53] call printf_uint
  to:main::@25
main::@25: scope:[main]  from main::@24
  [54] phi()
  [55] call printf_str
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@25
  [56] phi()
  to:main::@1

__stackcall void cputc(volatile char c)
cputc: scope:[cputc]  from printf_number_buffer::@3
  [57] cputc::c = stackidx(char,cputc::OFFSET_STACK_C)
  [58] if(cputc::c==''at) goto cputc::@1
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc
  [59] if(cputc::c=='
'at) goto cputc::@2
  to:cputc::@8
cputc::@8: scope:[cputc]  from cputc::@3
  [60] if(cputc::c==$9b) goto cputc::@2
  to:cputc::convertToScreenCode1
cputc::convertToScreenCode1: scope:[cputc]  from cputc::@8
  [61] cputc::convertToScreenCode1_return#0 = rawmap[*cputc::convertToScreenCode1_v#0]
  to:cputc::@6
cputc::@6: scope:[cputc]  from cputc::convertToScreenCode1
  [62] phi()
  [63] call putchar
  to:cputc::@7
cputc::@7: scope:[cputc]  from cputc::@6
  [64] *COLCRS = ++ *COLCRS
  [65] if(*COLCRS==$28) goto cputc::@5
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@7
  [66] phi()
  [67] call setcursor
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@4 cputc::@5
  [68] return 
  to:@return
cputc::@5: scope:[cputc]  from cputc::@7
  [69] *COLCRS = 0
  [70] call newline
  to:cputc::@return
cputc::@2: scope:[cputc]  from cputc::@3 cputc::@8
  [71] *COLCRS = 0
  [72] call newline
  to:cputc::@return
cputc::@1: scope:[cputc]  from cputc
  [73] *COLCRS = 0
  [74] call setcursor
  to:cputc::@return

void clrscr()
clrscr: scope:[clrscr]  from main
  [75] memset::str#7 = (void *)*SAVMSC
  [76] call memset
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr
  [77] *OLDCHR = 0
  [78] call gotoxy
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@1
  [79] return 
  to:@return

unsigned int test_slope(char x_inc , char y_inc)
test_slope: scope:[test_slope]  from main::@10 main::@14 main::@18 main::@2 main::@22 main::@6
  [80] test_slope::y_inc#12 = phi( main::@10/1, main::@14/1, main::@18/1, main::@2/1, main::@22/2, main::@6/1 )
  [80] test_slope::x_inc#10 = phi( main::@10/3, main::@14/5, main::@18/7, main::@2/3, main::@22/1, main::@6/1 )
  to:test_slope::@1
test_slope::@1: scope:[test_slope]  from test_slope test_slope::@4
  [81] test_slope::trees#2 = phi( test_slope/0, test_slope::@4/test_slope::trees#6 )
  [81] test_slope::x#3 = phi( test_slope/0, test_slope::@4/test_slope::x#8 )
  [81] test_slope::mapline#2 = phi( test_slope/map, test_slope::@4/test_slope::mapline#1 )
  [81] test_slope::y#2 = phi( test_slope/0, test_slope::@4/test_slope::y#1 )
  [82] if(test_slope::y#2<$143) goto test_slope::@2
  to:test_slope::@return
test_slope::@return: scope:[test_slope]  from test_slope::@1
  [83] return 
  to:@return
test_slope::@2: scope:[test_slope]  from test_slope::@1
  [84] if(test_slope::mapline#2[test_slope::x#3]!='#'at) goto test_slope::@3
  to:test_slope::@5
test_slope::@5: scope:[test_slope]  from test_slope::@2
  [85] test_slope::trees#1 = ++ test_slope::trees#2
  to:test_slope::@3
test_slope::@3: scope:[test_slope]  from test_slope::@2 test_slope::@5
  [86] test_slope::trees#6 = phi( test_slope::@2/test_slope::trees#2, test_slope::@5/test_slope::trees#1 )
  [87] test_slope::x#1 = test_slope::x#3 + test_slope::x_inc#10
  [88] if(test_slope::x#1<$1f) goto test_slope::@4
  to:test_slope::@6
test_slope::@6: scope:[test_slope]  from test_slope::@3
  [89] test_slope::x#2 = test_slope::x#1 - $1f
  to:test_slope::@4
test_slope::@4: scope:[test_slope]  from test_slope::@3 test_slope::@6
  [90] test_slope::x#8 = phi( test_slope::@3/test_slope::x#1, test_slope::@6/test_slope::x#2 )
  [91] test_slope::$6 = test_slope::y_inc#12 << 1
  [92] test_slope::$7 = test_slope::$6 + test_slope::y_inc#12
  [93] test_slope::$8 = test_slope::$7 << 1
  [94] test_slope::$9 = test_slope::$8 + test_slope::y_inc#12
  [95] test_slope::$10 = test_slope::$9 << 1
  [96] test_slope::$11 = test_slope::$10 + test_slope::y_inc#12
  [97] test_slope::$12 = test_slope::$11 << 1
  [98] test_slope::$5 = test_slope::$12 + test_slope::y_inc#12
  [99] test_slope::mapline#1 = test_slope::mapline#2 + test_slope::$5
  [100] test_slope::y#1 = test_slope::y#2 + test_slope::y_inc#12
  to:test_slope::@1

void printf_str(void (*putc)(char) , const char *s)
printf_str: scope:[printf_str]  from main::@11 main::@13 main::@15 main::@17 main::@19 main::@21 main::@23 main::@25 main::@3 main::@5 main::@7 main::@9 printf_number_buffer::@2
  [101] printf_str::putc#15 = phi( main::@11/&cputc, main::@13/&cputc, main::@15/&cputc, main::@17/&cputc, main::@19/&cputc, main::@21/&cputc, main::@23/&cputc, main::@25/&cputc, main::@3/&cputc, main::@5/&cputc, main::@7/&cputc, main::@9/&cputc, printf_number_buffer::@2/printf_number_buffer::putc#0 )
  [101] printf_str::s#15 = phi( main::@11/main::s4, main::@13/main::s1, main::@15/main::s6, main::@17/main::s1, main::@19/main::s8, main::@21/main::s1, main::@23/main::s10, main::@25/main::s1, main::@3/main::s, main::@5/main::s1, main::@7/main::s2, main::@9/main::s1, printf_number_buffer::@2/printf_number_buffer::buffer_digits#0 )
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@2
  [102] printf_str::s#14 = phi( printf_str/printf_str::s#15, printf_str::@2/printf_str::s#0 )
  [103] printf_str::c#1 = *printf_str::s#14
  [104] printf_str::s#0 = ++ printf_str::s#14
  [105] if(0!=printf_str::c#1) goto printf_str::@2
  to:printf_str::@return
printf_str::@return: scope:[printf_str]  from printf_str::@1
  [106] return 
  to:@return
printf_str::@2: scope:[printf_str]  from printf_str::@1
  [107] stackpush(char) = printf_str::c#1
  [108] callexecute *printf_str::putc#15 
  sideeffect stackpullbytes(1)
  to:printf_str::@1

void printf_uint(void (*putc)(char) , unsigned int uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_uint: scope:[printf_uint]  from main::@12 main::@16 main::@20 main::@24 main::@4 main::@8
  [110] printf_uint::uvalue#6 = phi( main::@12/printf_uint::uvalue#2, main::@16/printf_uint::uvalue#3, main::@20/printf_uint::uvalue#4, main::@24/printf_uint::uvalue#5, main::@4/printf_uint::uvalue#0, main::@8/printf_uint::uvalue#1 )
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [111] *((char *)&printf_buffer) = 0
  [112] utoa::value#1 = printf_uint::uvalue#6
  [113] call utoa
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [114] printf_number_buffer::buffer_sign#0 = *((char *)&printf_buffer)
  [115] call printf_number_buffer
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [116] return 
  to:@return

void putchar(char code)
putchar: scope:[putchar]  from cputc::@6
  [117] *(*OLDADR) = *OLDCHR
  [118] call cursorLocation
  [119] cursorLocation::return#0 = cursorLocation::return#1
  to:putchar::@1
putchar::@1: scope:[putchar]  from putchar
  [120] putchar::loc#0 = cursorLocation::return#0
  [121] putchar::newChar#0 = cputc::convertToScreenCode1_return#0
  [122] *putchar::loc#0 = putchar::newChar#0
  [123] *OLDCHR = putchar::newChar#0
  [124] call setcursor
  to:putchar::@return
putchar::@return: scope:[putchar]  from putchar::@1
  [125] return 
  to:@return

void setcursor()
setcursor: scope:[setcursor]  from cputc::@1 cputc::@4 gotoxy newline::@1 putchar::@1
  [126] *(*OLDADR) = *OLDCHR
  [127] call cursorLocation
  [128] cursorLocation::return#3 = cursorLocation::return#1
  to:setcursor::@3
setcursor::@3: scope:[setcursor]  from setcursor
  [129] setcursor::loc#0 = cursorLocation::return#3
  [130] setcursor::c#0 = *setcursor::loc#0
  [131] *OLDCHR = setcursor::c#0
  [132] *OLDADR = setcursor::loc#0
  to:setcursor::@2
setcursor::@2: scope:[setcursor]  from setcursor::@3
  [133] *CRSINH = 0
  [134] setcursor::c#1 = setcursor::c#0 ^ $80
  to:setcursor::@1
setcursor::@1: scope:[setcursor]  from setcursor::@2
  [135] *(*OLDADR) = setcursor::c#1
  to:setcursor::@return
setcursor::@return: scope:[setcursor]  from setcursor::@1
  [136] return 
  to:@return

void newline()
newline: scope:[newline]  from cputc::@2 cputc::@5
  [137] *ROWCRS = ++ *ROWCRS
  [138] if(*ROWCRS!=$18) goto newline::@1
  to:newline::@3
newline::@3: scope:[newline]  from newline
  [139] *(*OLDADR) = *(*OLDADR) ^ $80
  to:newline::@2
newline::@2: scope:[newline]  from newline::@3
  [140] newline::start#0 = *SAVMSC
  [141] memcpy::source#0 = newline::start#0 + $28
  [142] memcpy::destination#0 = (void *)newline::start#0
  [143] call memcpy
  to:newline::@4
newline::@4: scope:[newline]  from newline::@2
  [144] memset::str#1 = newline::start#0 + (unsigned int)$28*$17
  [145] memset::str#8 = (void *)memset::str#1
  [146] call memset
  to:newline::@5
newline::@5: scope:[newline]  from newline::@4
  [147] *ROWCRS = $18-1
  to:newline::@1
newline::@1: scope:[newline]  from newline newline::@5
  [148] phi()
  [149] call setcursor
  to:newline::@return
newline::@return: scope:[newline]  from newline::@1
  [150] return 
  to:@return

void * memset(void *str , char c , unsigned int num)
memset: scope:[memset]  from clrscr newline::@4
  [151] memset::str#3 = phi( clrscr/memset::str#7, newline::@4/memset::str#8 )
  [151] memset::num#2 = phi( clrscr/(unsigned int)$28*$18, newline::@4/$28 )
  [152] if(memset::num#2<=0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [153] memset::end#0 = (char *)memset::str#3 + memset::num#2
  [154] memset::dst#4 = (char *)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [155] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [156] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [157] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [158] *memset::dst#2 = 0
  [159] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

void gotoxy(char x , char y)
gotoxy: scope:[gotoxy]  from clrscr::@1
  [160] *COLCRS = gotoxy::x#0
  [161] *ROWCRS = gotoxy::y#0
  [162] call setcursor
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy
  [163] return 
  to:@return

void utoa(unsigned int value , char *buffer , char radix)
utoa: scope:[utoa]  from printf_uint::@1
  [164] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [165] utoa::buffer#11 = phi( utoa::@4/utoa::buffer#14, utoa/(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [165] utoa::started#2 = phi( utoa::@4/utoa::started#4, utoa/0 )
  [165] utoa::value#2 = phi( utoa::@4/utoa::value#6, utoa/utoa::value#1 )
  [165] utoa::digit#2 = phi( utoa::@4/utoa::digit#1, utoa/0 )
  [166] if(utoa::digit#2<5-1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [167] utoa::$11 = (char)utoa::value#2
  [168] *utoa::buffer#11 = DIGITS[utoa::$11]
  [169] utoa::buffer#3 = ++ utoa::buffer#11
  [170] *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [171] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [172] utoa::$10 = utoa::digit#2 << 1
  [173] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10]
  [174] if(0!=utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [175] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [176] utoa::buffer#14 = phi( utoa::@7/utoa::buffer#11, utoa::@6/utoa::buffer#4 )
  [176] utoa::started#4 = phi( utoa::@7/utoa::started#2, utoa::@6/1 )
  [176] utoa::value#6 = phi( utoa::@7/utoa::value#2, utoa::@6/utoa::value#0 )
  [177] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [178] utoa_append::buffer#0 = utoa::buffer#11
  [179] utoa_append::value#0 = utoa::value#2
  [180] utoa_append::sub#0 = utoa::digit_value#0
  [181] call utoa_append
  [182] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [183] utoa::value#0 = utoa_append::return#0
  [184] utoa::buffer#4 = ++ utoa::buffer#11
  to:utoa::@4

void printf_number_buffer(void (*putc)(char) , char buffer_sign , char *buffer_digits , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uint::@2
  [185] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [186] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [187] stackpush(char) = printf_number_buffer::buffer_sign#0
  [188] callexecute cputc 
  sideeffect stackpullbytes(1)
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [190] phi()
  [191] call printf_str
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [192] return 
  to:@return

char * cursorLocation()
cursorLocation: scope:[cursorLocation]  from putchar setcursor
  [193] cursorLocation::$3 = (unsigned int)*ROWCRS
  [194] cursorLocation::$4 = cursorLocation::$3 << 2
  [195] cursorLocation::$5 = cursorLocation::$4 + cursorLocation::$3
  [196] cursorLocation::$0 = cursorLocation::$5 << 3
  [197] cursorLocation::$1 = *SAVMSC + cursorLocation::$0
  [198] cursorLocation::return#1 = cursorLocation::$1 + *COLCRS
  to:cursorLocation::@return
cursorLocation::@return: scope:[cursorLocation]  from cursorLocation
  [199] return 
  to:@return

void * memcpy(void *destination , void *source , unsigned int num)
memcpy: scope:[memcpy]  from newline::@2
  [200] memcpy::src_end#0 = (char *)(void *)memcpy::source#0 + memcpy::num#0
  [201] memcpy::src#4 = (char *)(void *)memcpy::source#0
  [202] memcpy::dst#4 = (char *)memcpy::destination#0
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [203] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [203] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [204] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [205] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [206] *memcpy::dst#2 = *memcpy::src#2
  [207] memcpy::dst#1 = ++ memcpy::dst#2
  [208] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

unsigned int utoa_append(char *buffer , unsigned int value , unsigned int sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [209] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [210] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [210] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [211] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [212] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [213] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [214] utoa_append::digit#1 = ++ utoa_append::digit#2
  [215] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1


VARIABLE REGISTER WEIGHTS
void clrscr()
__stackcall void cputc(volatile char c)
__loadstore volatile char cputc::c // 1334.6666666666667
char cputc::convertToScreenCode1_return
char cputc::convertToScreenCode1_return#0 // 1833.6666666666665
char *cputc::convertToScreenCode1_v
char * cursorLocation()
unsigned int cursorLocation::$0 // 2000002.0
char *cursorLocation::$1 // 2000002.0
unsigned int cursorLocation::$3 // 1500001.5
unsigned int cursorLocation::$4 // 2000002.0
unsigned int cursorLocation::$5 // 2000002.0
char *cursorLocation::return
char *cursorLocation::return#0 // 20002.0
char *cursorLocation::return#1 // 277500.75
char *cursorLocation::return#3 // 200002.0
void gotoxy(char x , char y)
char gotoxy::x
char gotoxy::y
void main()
void * memcpy(void *destination , void *source , unsigned int num)
void *memcpy::destination
void *memcpy::destination#0 // 3333.6666666666665
char *memcpy::dst
char *memcpy::dst#1 // 1000001.0
char *memcpy::dst#2 // 1033334.6666666667
char *memcpy::dst#4 // 200002.0
unsigned int memcpy::num
void *memcpy::return
void *memcpy::source
char *memcpy::source#0 // 3333.6666666666665
char *memcpy::src
char *memcpy::src#1 // 2000002.0
char *memcpy::src#2 // 1025001.25
char *memcpy::src#4 // 100001.0
char *memcpy::src_end
char *memcpy::src_end#0 // 137500.25
void * memset(void *str , char c , unsigned int num)
char memset::c
char *memset::dst
char *memset::dst#1 // 2000002.0
char *memset::dst#2 // 1366668.3333333335
char *memset::dst#4 // 200002.0
char *memset::end
char *memset::end#0 // 183333.6666666667
unsigned int memset::num
unsigned int memset::num#2 // 100001.0
void *memset::return
void *memset::str
char *memset::str#1 // 10001.0
void *memset::str#3 // 3337.333333333333
void *memset::str#7 // 22.0
void *memset::str#8 // 20002.0
void newline()
char *newline::start
char *newline::start#0 // 7500.75
__loadstore struct printf_buffer_number printf_buffer = {}
void printf_number_buffer(void (*putc)(char) , char buffer_sign , char *buffer_digits , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_buffer_number printf_number_buffer::buffer
char *printf_number_buffer::buffer_digits
char printf_number_buffer::buffer_sign
char printf_number_buffer::buffer_sign#0 // 71.0
struct printf_format_number printf_number_buffer::format
char printf_number_buffer::format_justify_left
char printf_number_buffer::format_min_length
char printf_number_buffer::format_radix
char printf_number_buffer::format_sign_always
char printf_number_buffer::format_upper_case
char printf_number_buffer::format_zero_padding
signed char printf_number_buffer::len
signed char printf_number_buffer::padding
void (*printf_number_buffer::putc)(char)
void printf_str(void (*putc)(char) , const char *s)
char printf_str::c
char printf_str::c#1 // 10001.0
void (*printf_str::putc)(char)
void (*printf_str::putc#15)(char)
const char *printf_str::s
const char *printf_str::s#0 // 10001.0
const char *printf_str::s#14 // 15502.0
const char *printf_str::s#15 // 1001.0
void printf_uint(void (*putc)(char) , unsigned int uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_format_number printf_uint::format
char printf_uint::format_justify_left
char printf_uint::format_min_length
char printf_uint::format_radix
char printf_uint::format_sign_always
char printf_uint::format_upper_case
char printf_uint::format_zero_padding
void (*printf_uint::putc)(char)
unsigned int printf_uint::uvalue
unsigned int printf_uint::uvalue#0 // 1.3333333333333333
unsigned int printf_uint::uvalue#1 // 1.3333333333333333
unsigned int printf_uint::uvalue#2 // 1.3333333333333333
unsigned int printf_uint::uvalue#3 // 1.3333333333333333
unsigned int printf_uint::uvalue#4 // 1.3333333333333333
unsigned int printf_uint::uvalue#5 // 1.3333333333333333
unsigned int printf_uint::uvalue#6 // 11.5
void putchar(char code)
char putchar::code
char *putchar::loc
char *putchar::loc#0 // 10001.0
char putchar::newChar
char putchar::newChar#0 // 15001.5
void setcursor()
char setcursor::c
char setcursor::c#0 // 75000.75
char setcursor::c#1 // 200002.0
char *setcursor::loc
char *setcursor::loc#0 // 100001.0
unsigned int test_slope(char x_inc , char y_inc)
char test_slope::$10 // 202.0
char test_slope::$11 // 202.0
char test_slope::$12 // 202.0
char test_slope::$5 // 202.0
char test_slope::$6 // 202.0
char test_slope::$7 // 202.0
char test_slope::$8 // 202.0
char test_slope::$9 // 202.0
char *test_slope::mapline
char *test_slope::mapline#1 // 101.0
char *test_slope::mapline#2 // 17.823529411764707
unsigned int test_slope::return
unsigned int test_slope::return#0 // 4.0
unsigned int test_slope::return#1 // 4.0
unsigned int test_slope::return#10 // 4.0
unsigned int test_slope::return#11 // 4.0
unsigned int test_slope::return#12 // 4.0
unsigned int test_slope::return#13 // 4.0
unsigned int test_slope::trees
unsigned int test_slope::trees#1 // 202.0
unsigned int test_slope::trees#2 // 31.5
unsigned int test_slope::trees#6 // 20.2
char test_slope::x
char test_slope::x#1 // 202.0
char test_slope::x#2 // 202.0
char test_slope::x#3 // 60.599999999999994
char test_slope::x#8 // 27.545454545454547
char test_slope::x_inc
char test_slope::x_inc#10 // 5.05
unsigned int test_slope::y
unsigned int test_slope::y#1 // 202.0
unsigned int test_slope::y#2 // 16.833333333333332
char test_slope::y_inc
char test_slope::y_inc#12 // 30.3
void utoa(unsigned int value , char *buffer , char radix)
char utoa::$10 // 2002.0
char utoa::$11 // 202.0
char *utoa::buffer
char *utoa::buffer#11 // 300.42857142857144
char *utoa::buffer#14 // 1501.5
char *utoa::buffer#3 // 202.0
char *utoa::buffer#4 // 2002.0
char utoa::digit
char utoa::digit#1 // 2002.0
char utoa::digit#2 // 286.0
unsigned int utoa::digit_value
unsigned int utoa::digit_value#0 // 600.5999999999999
unsigned int *utoa::digit_values
char utoa::max_digits
char utoa::radix
char utoa::started
char utoa::started#2 // 500.5
char utoa::started#4 // 1001.0
unsigned int utoa::value
unsigned int utoa::value#0 // 1001.0
unsigned int utoa::value#1 // 56.0
unsigned int utoa::value#2 // 586.4285714285714
unsigned int utoa::value#6 // 1501.5
unsigned int utoa_append(char *buffer , unsigned int value , unsigned int sub)
char *utoa_append::buffer
char *utoa_append::buffer#0 // 1375.25
char utoa_append::digit
char utoa_append::digit#1 // 1000001.0
char utoa_append::digit#2 // 1005001.5
unsigned int utoa_append::return
unsigned int utoa_append::return#0 // 2002.0
unsigned int utoa_append::sub
unsigned int utoa_append::sub#0 // 333500.5
unsigned int utoa_append::value
unsigned int utoa_append::value#0 // 3667.333333333333
unsigned int utoa_append::value#1 // 2000002.0
unsigned int utoa_append::value#2 // 501834.16666666674

Initial phi equivalence classes
[ test_slope::x_inc#10 ]
[ test_slope::y_inc#12 ]
[ test_slope::y#2 test_slope::y#1 ]
[ test_slope::mapline#2 test_slope::mapline#1 ]
[ test_slope::x#3 test_slope::x#8 test_slope::x#1 test_slope::x#2 ]
[ test_slope::trees#2 test_slope::trees#6 test_slope::trees#1 ]
[ printf_str::putc#15 ]
[ printf_str::s#14 printf_str::s#15 printf_str::s#0 ]
[ printf_uint::uvalue#6 printf_uint::uvalue#2 printf_uint::uvalue#3 printf_uint::uvalue#4 printf_uint::uvalue#5 printf_uint::uvalue#0 printf_uint::uvalue#1 ]
[ memset::num#2 ]
[ memset::str#3 memset::str#7 memset::str#8 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
Added variable test_slope::return#0 to live range equivalence class [ test_slope::return#0 ]
Added variable test_slope::return#1 to live range equivalence class [ test_slope::return#1 ]
Added variable test_slope::return#10 to live range equivalence class [ test_slope::return#10 ]
Added variable test_slope::return#11 to live range equivalence class [ test_slope::return#11 ]
Added variable test_slope::return#12 to live range equivalence class [ test_slope::return#12 ]
Added variable test_slope::return#13 to live range equivalence class [ test_slope::return#13 ]
Added variable cputc::c to live range equivalence class [ cputc::c ]
Added variable cputc::convertToScreenCode1_return#0 to live range equivalence class [ cputc::convertToScreenCode1_return#0 ]
Added variable test_slope::$6 to live range equivalence class [ test_slope::$6 ]
Added variable test_slope::$7 to live range equivalence class [ test_slope::$7 ]
Added variable test_slope::$8 to live range equivalence class [ test_slope::$8 ]
Added variable test_slope::$9 to live range equivalence class [ test_slope::$9 ]
Added variable test_slope::$10 to live range equivalence class [ test_slope::$10 ]
Added variable test_slope::$11 to live range equivalence class [ test_slope::$11 ]
Added variable test_slope::$12 to live range equivalence class [ test_slope::$12 ]
Added variable test_slope::$5 to live range equivalence class [ test_slope::$5 ]
Added variable printf_str::c#1 to live range equivalence class [ printf_str::c#1 ]
Added variable printf_number_buffer::buffer_sign#0 to live range equivalence class [ printf_number_buffer::buffer_sign#0 ]
Added variable cursorLocation::return#0 to live range equivalence class [ cursorLocation::return#0 ]
Added variable putchar::loc#0 to live range equivalence class [ putchar::loc#0 ]
Added variable putchar::newChar#0 to live range equivalence class [ putchar::newChar#0 ]
Added variable cursorLocation::return#3 to live range equivalence class [ cursorLocation::return#3 ]
Added variable setcursor::loc#0 to live range equivalence class [ setcursor::loc#0 ]
Added variable setcursor::c#0 to live range equivalence class [ setcursor::c#0 ]
Added variable setcursor::c#1 to live range equivalence class [ setcursor::c#1 ]
Added variable newline::start#0 to live range equivalence class [ newline::start#0 ]
Added variable memcpy::source#0 to live range equivalence class [ memcpy::source#0 ]
Added variable memcpy::destination#0 to live range equivalence class [ memcpy::destination#0 ]
Added variable memset::str#1 to live range equivalence class [ memset::str#1 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable utoa::$11 to live range equivalence class [ utoa::$11 ]
Added variable utoa::buffer#3 to live range equivalence class [ utoa::buffer#3 ]
Added variable utoa::$10 to live range equivalence class [ utoa::$10 ]
Added variable utoa::digit_value#0 to live range equivalence class [ utoa::digit_value#0 ]
Added variable utoa_append::buffer#0 to live range equivalence class [ utoa_append::buffer#0 ]
Added variable utoa_append::sub#0 to live range equivalence class [ utoa_append::sub#0 ]
Added variable utoa_append::return#0 to live range equivalence class [ utoa_append::return#0 ]
Added variable cursorLocation::$3 to live range equivalence class [ cursorLocation::$3 ]
Added variable cursorLocation::$4 to live range equivalence class [ cursorLocation::$4 ]
Added variable cursorLocation::$5 to live range equivalence class [ cursorLocation::$5 ]
Added variable cursorLocation::$0 to live range equivalence class [ cursorLocation::$0 ]
Added variable cursorLocation::$1 to live range equivalence class [ cursorLocation::$1 ]
Added variable cursorLocation::return#1 to live range equivalence class [ cursorLocation::return#1 ]
Added variable memcpy::src_end#0 to live range equivalence class [ memcpy::src_end#0 ]
Added variable printf_buffer to live range equivalence class [ printf_buffer ]
Complete equivalence classes
[ test_slope::x_inc#10 ]
[ test_slope::y_inc#12 ]
[ test_slope::y#2 test_slope::y#1 ]
[ test_slope::mapline#2 test_slope::mapline#1 ]
[ test_slope::x#3 test_slope::x#8 test_slope::x#1 test_slope::x#2 ]
[ test_slope::trees#2 test_slope::trees#6 test_slope::trees#1 ]
[ printf_str::putc#15 ]
[ printf_str::s#14 printf_str::s#15 printf_str::s#0 ]
[ printf_uint::uvalue#6 printf_uint::uvalue#2 printf_uint::uvalue#3 printf_uint::uvalue#4 printf_uint::uvalue#5 printf_uint::uvalue#0 printf_uint::uvalue#1 ]
[ memset::num#2 ]
[ memset::str#3 memset::str#7 memset::str#8 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ test_slope::return#0 ]
[ test_slope::return#1 ]
[ test_slope::return#10 ]
[ test_slope::return#11 ]
[ test_slope::return#12 ]
[ test_slope::return#13 ]
[ cputc::c ]
[ cputc::convertToScreenCode1_return#0 ]
[ test_slope::$6 ]
[ test_slope::$7 ]
[ test_slope::$8 ]
[ test_slope::$9 ]
[ test_slope::$10 ]
[ test_slope::$11 ]
[ test_slope::$12 ]
[ test_slope::$5 ]
[ printf_str::c#1 ]
[ printf_number_buffer::buffer_sign#0 ]
[ cursorLocation::return#0 ]
[ putchar::loc#0 ]
[ putchar::newChar#0 ]
[ cursorLocation::return#3 ]
[ setcursor::loc#0 ]
[ setcursor::c#0 ]
[ setcursor::c#1 ]
[ newline::start#0 ]
[ memcpy::source#0 ]
[ memcpy::destination#0 ]
[ memset::str#1 ]
[ memset::end#0 ]
[ utoa::$11 ]
[ utoa::buffer#3 ]
[ utoa::$10 ]
[ utoa::digit_value#0 ]
[ utoa_append::buffer#0 ]
[ utoa_append::sub#0 ]
[ utoa_append::return#0 ]
[ cursorLocation::$3 ]
[ cursorLocation::$4 ]
[ cursorLocation::$5 ]
[ cursorLocation::$0 ]
[ cursorLocation::$1 ]
[ cursorLocation::return#1 ]
[ memcpy::src_end#0 ]
[ printf_buffer ]
Allocated zp[1]:128 [ test_slope::x_inc#10 ]
Allocated zp[1]:129 [ test_slope::y_inc#12 ]
Allocated zp[2]:130 [ test_slope::y#2 test_slope::y#1 ]
Allocated zp[2]:132 [ test_slope::mapline#2 test_slope::mapline#1 ]
Allocated zp[1]:134 [ test_slope::x#3 test_slope::x#8 test_slope::x#1 test_slope::x#2 ]
Allocated zp[2]:135 [ test_slope::trees#2 test_slope::trees#6 test_slope::trees#1 ]
Allocated zp[2]:137 [ printf_str::putc#15 ]
Allocated zp[2]:139 [ printf_str::s#14 printf_str::s#15 printf_str::s#0 ]
Allocated zp[2]:141 [ printf_uint::uvalue#6 printf_uint::uvalue#2 printf_uint::uvalue#3 printf_uint::uvalue#4 printf_uint::uvalue#5 printf_uint::uvalue#0 printf_uint::uvalue#1 ]
Allocated zp[2]:143 [ memset::num#2 ]
Allocated zp[2]:145 [ memset::str#3 memset::str#7 memset::str#8 ]
Allocated zp[2]:147 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[1]:149 [ utoa::digit#2 utoa::digit#1 ]
Allocated zp[2]:150 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ]
Allocated zp[1]:152 [ utoa::started#2 utoa::started#4 ]
Allocated zp[2]:153 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
Allocated zp[2]:155 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
Allocated zp[2]:157 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated zp[2]:159 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
Allocated zp[1]:161 [ utoa_append::digit#2 utoa_append::digit#1 ]
Allocated zp[2]:162 [ test_slope::return#0 ]
Allocated zp[2]:164 [ test_slope::return#1 ]
Allocated zp[2]:166 [ test_slope::return#10 ]
Allocated zp[2]:168 [ test_slope::return#11 ]
Allocated zp[2]:170 [ test_slope::return#12 ]
Allocated zp[2]:172 [ test_slope::return#13 ]
Allocated zp[1]:174 [ cputc::c ]
Allocated zp[1]:175 [ cputc::convertToScreenCode1_return#0 ]
Allocated zp[1]:176 [ test_slope::$6 ]
Allocated zp[1]:177 [ test_slope::$7 ]
Allocated zp[1]:178 [ test_slope::$8 ]
Allocated zp[1]:179 [ test_slope::$9 ]
Allocated zp[1]:180 [ test_slope::$10 ]
Allocated zp[1]:181 [ test_slope::$11 ]
Allocated zp[1]:182 [ test_slope::$12 ]
Allocated zp[1]:183 [ test_slope::$5 ]
Allocated zp[1]:184 [ printf_str::c#1 ]
Allocated zp[1]:185 [ printf_number_buffer::buffer_sign#0 ]
Allocated zp[2]:186 [ cursorLocation::return#0 ]
Allocated zp[2]:188 [ putchar::loc#0 ]
Allocated zp[1]:190 [ putchar::newChar#0 ]
Allocated zp[2]:191 [ cursorLocation::return#3 ]
Allocated zp[2]:193 [ setcursor::loc#0 ]
Allocated zp[1]:195 [ setcursor::c#0 ]
Allocated zp[1]:196 [ setcursor::c#1 ]
Allocated zp[2]:197 [ newline::start#0 ]
Allocated zp[2]:199 [ memcpy::source#0 ]
Allocated zp[2]:201 [ memcpy::destination#0 ]
Allocated zp[2]:203 [ memset::str#1 ]
Allocated zp[2]:205 [ memset::end#0 ]
Allocated zp[1]:207 [ utoa::$11 ]
Allocated zp[2]:208 [ utoa::buffer#3 ]
Allocated zp[1]:210 [ utoa::$10 ]
Allocated zp[2]:211 [ utoa::digit_value#0 ]
Allocated zp[2]:213 [ utoa_append::buffer#0 ]
Allocated zp[2]:215 [ utoa_append::sub#0 ]
Allocated zp[2]:217 [ utoa_append::return#0 ]
Allocated zp[2]:219 [ cursorLocation::$3 ]
Allocated zp[2]:221 [ cursorLocation::$4 ]
Allocated zp[2]:223 [ cursorLocation::$5 ]
Allocated zp[2]:225 [ cursorLocation::$0 ]
Allocated zp[2]:227 [ cursorLocation::$1 ]
Allocated zp[2]:229 [ cursorLocation::return#1 ]
Allocated zp[2]:231 [ memcpy::src_end#0 ]
Allocated mem[12] [ printf_buffer ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] test_slope::return#0 = test_slope::trees#2 [ test_slope::return#0 printf_buffer ] (  [ test_slope::return#0 printf_buffer ] { { test_slope::return#0 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [5] printf_uint::uvalue#0 = test_slope::return#0 [ printf_uint::uvalue#0 printf_buffer ] (  [ printf_uint::uvalue#0 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [13] test_slope::return#1 = test_slope::trees#2 [ test_slope::return#1 printf_buffer ] (  [ test_slope::return#1 printf_buffer ] { { test_slope::return#1 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [14] printf_uint::uvalue#1 = test_slope::return#1 [ printf_uint::uvalue#1 printf_buffer ] (  [ printf_uint::uvalue#1 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [22] test_slope::return#10 = test_slope::trees#2 [ test_slope::return#10 printf_buffer ] (  [ test_slope::return#10 printf_buffer ] { { test_slope::return#10 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [23] printf_uint::uvalue#2 = test_slope::return#10 [ printf_uint::uvalue#2 printf_buffer ] (  [ printf_uint::uvalue#2 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [31] test_slope::return#11 = test_slope::trees#2 [ test_slope::return#11 printf_buffer ] (  [ test_slope::return#11 printf_buffer ] { { test_slope::return#11 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [32] printf_uint::uvalue#3 = test_slope::return#11 [ printf_uint::uvalue#3 printf_buffer ] (  [ printf_uint::uvalue#3 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [40] test_slope::return#12 = test_slope::trees#2 [ test_slope::return#12 printf_buffer ] (  [ test_slope::return#12 printf_buffer ] { { test_slope::return#12 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [41] printf_uint::uvalue#4 = test_slope::return#12 [ printf_uint::uvalue#4 printf_buffer ] (  [ printf_uint::uvalue#4 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [49] test_slope::return#13 = test_slope::trees#2 [ test_slope::return#13 printf_buffer ] (  [ test_slope::return#13 printf_buffer ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [50] printf_uint::uvalue#5 = test_slope::return#13 [ printf_uint::uvalue#5 printf_buffer ] (  [ printf_uint::uvalue#5 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [57] cputc::c = stackidx(char,cputc::OFFSET_STACK_C) [ cputc::c ] (  [ cputc::c ] { }  printf_uint:8::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a reg byte x 
Statement [58] if(cputc::c==''at) goto cputc::@1 [ cputc::c ] (  [ cputc::c ] { }  printf_uint:8::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [59] if(cputc::c=='
'at) goto cputc::@2 [ cputc::c ] (  [ cputc::c ] { }  printf_uint:8::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [60] if(cputc::c==$9b) goto cputc::@2 [ ] (  [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [61] cputc::convertToScreenCode1_return#0 = rawmap[*cputc::convertToScreenCode1_v#0] [ cputc::convertToScreenCode1_return#0 ] (  [ cputc::convertToScreenCode1_return#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte y 
Statement [65] if(*COLCRS==$28) goto cputc::@5 [ ] (  [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [69] *COLCRS = 0 [ ] (  [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [71] *COLCRS = 0 [ ] (  [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [73] *COLCRS = 0 [ ] (  [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [75] memset::str#7 = (void *)*SAVMSC [ memset::str#7 ] ( clrscr:1 [ printf_buffer memset::str#7 ] { { memset::str#3 = memset::str#7 } }  ) always clobbers reg byte a 
Statement [77] *OLDCHR = 0 [ ] ( clrscr:1 [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [82] if(test_slope::y#2<$143) goto test_slope::@2 [ test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] ( test_slope:3 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:128 [ test_slope::x_inc#10 ]
Removing always clobbered register reg byte a as potential for zp[1]:129 [ test_slope::y_inc#12 ]
Removing always clobbered register reg byte a as potential for zp[1]:134 [ test_slope::x#3 test_slope::x#8 test_slope::x#1 test_slope::x#2 ]
Statement [84] if(test_slope::mapline#2[test_slope::x#3]!='#'at) goto test_slope::@3 [ test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] ( test_slope:3 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [87] test_slope::x#1 = test_slope::x#3 + test_slope::x_inc#10 [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#1 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#1 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#1 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#1 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#1 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#1 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#1 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [89] test_slope::x#2 = test_slope::x#1 - $1f [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#2 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#2 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#2 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#2 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#2 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#2 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#2 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [91] test_slope::$6 = test_slope::y_inc#12 << 1 [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$6 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$6 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$6 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$6 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$6 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$6 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$6 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [92] test_slope::$7 = test_slope::$6 + test_slope::y_inc#12 [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$7 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$7 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$7 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$7 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$7 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$7 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$7 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [93] test_slope::$8 = test_slope::$7 << 1 [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$8 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$8 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$8 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$8 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$8 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$8 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$8 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [94] test_slope::$9 = test_slope::$8 + test_slope::y_inc#12 [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$9 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$9 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$9 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$9 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$9 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$9 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$9 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [95] test_slope::$10 = test_slope::$9 << 1 [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$10 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$10 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$10 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$10 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$10 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$10 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$10 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [96] test_slope::$11 = test_slope::$10 + test_slope::y_inc#12 [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$11 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$11 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$11 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$11 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$11 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$11 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$11 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [97] test_slope::$12 = test_slope::$11 << 1 [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$12 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$12 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$12 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$12 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$12 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$12 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$12 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [98] test_slope::$5 = test_slope::$12 + test_slope::y_inc#12 [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$5 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$5 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$5 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$5 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$5 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$5 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$5 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [99] test_slope::mapline#1 = test_slope::mapline#2 + test_slope::$5 [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [100] test_slope::y#1 = test_slope::y#2 + test_slope::y_inc#12 [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#1 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#1 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#1 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#1 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#1 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#1 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#1 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [103] printf_str::c#1 = *printf_str::s#14 [ printf_str::s#14 printf_str::c#1 ] ( printf_str:6 [ printf_uint::uvalue#0 printf_buffer printf_str::s#14 printf_str::c#1 ] { }  printf_str:10 [ printf_buffer printf_str::s#14 printf_str::c#1 ] { }  printf_str:15 [ printf_uint::uvalue#1 printf_buffer printf_str::s#14 printf_str::c#1 ] { }  printf_str:19 [ printf_buffer printf_str::s#14 printf_str::c#1 ] { }  printf_str:24 [ printf_uint::uvalue#2 printf_buffer printf_str::s#14 printf_str::c#1 ] { }  printf_str:28 [ printf_buffer printf_str::s#14 printf_str::c#1 ] { }  printf_str:33 [ printf_uint::uvalue#3 printf_buffer printf_str::s#14 printf_str::c#1 ] { }  printf_str:37 [ printf_buffer printf_str::s#14 printf_str::c#1 ] { }  printf_str:42 [ printf_uint::uvalue#4 printf_buffer printf_str::s#14 printf_str::c#1 ] { }  printf_str:46 [ printf_buffer printf_str::s#14 printf_str::c#1 ] { }  printf_str:51 [ printf_uint::uvalue#5 printf_buffer printf_str::s#14 printf_str::c#1 ] { }  printf_str:55 [ printf_str::s#14 printf_str::c#1 ] { }  printf_uint:8::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#14 printf_str::c#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#14 printf_str::c#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#14 printf_str::c#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#14 printf_str::c#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#14 printf_str::c#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#14 printf_str::c#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a reg byte y 
Statement [108] callexecute *printf_str::putc#15  [ printf_str::s#0 ] ( printf_str:6 [ printf_uint::uvalue#0 printf_buffer printf_str::s#0 ] { }  printf_str:10 [ printf_buffer printf_str::s#0 ] { }  printf_str:15 [ printf_uint::uvalue#1 printf_buffer printf_str::s#0 ] { }  printf_str:19 [ printf_buffer printf_str::s#0 ] { }  printf_str:24 [ printf_uint::uvalue#2 printf_buffer printf_str::s#0 ] { }  printf_str:28 [ printf_buffer printf_str::s#0 ] { }  printf_str:33 [ printf_uint::uvalue#3 printf_buffer printf_str::s#0 ] { }  printf_str:37 [ printf_buffer printf_str::s#0 ] { }  printf_str:42 [ printf_uint::uvalue#4 printf_buffer printf_str::s#0 ] { }  printf_str:46 [ printf_buffer printf_str::s#0 ] { }  printf_str:51 [ printf_uint::uvalue#5 printf_buffer printf_str::s#0 ] { }  printf_str:55 [ printf_str::s#0 ] { }  printf_uint:8::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a reg byte x reg byte y 
Statement sideeffect stackpullbytes(1) always clobbers reg byte a 
Statement [111] *((char *)&printf_buffer) = 0 [ printf_uint::uvalue#6 printf_buffer ] ( printf_uint:8 [ printf_uint::uvalue#6 printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:17 [ printf_uint::uvalue#6 printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:26 [ printf_uint::uvalue#6 printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:35 [ printf_uint::uvalue#6 printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:44 [ printf_uint::uvalue#6 printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:53 [ printf_uint::uvalue#6 printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [112] utoa::value#1 = printf_uint::uvalue#6 [ printf_buffer utoa::value#1 ] ( printf_uint:8 [ printf_buffer utoa::value#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:17 [ printf_buffer utoa::value#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:26 [ printf_buffer utoa::value#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:35 [ printf_buffer utoa::value#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:44 [ printf_buffer utoa::value#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:53 [ printf_buffer utoa::value#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [117] *(*OLDADR) = *OLDCHR [ cputc::convertToScreenCode1_return#0 ] ( putchar:63 [ cputc::convertToScreenCode1_return#0 ] { { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:175 [ cputc::convertToScreenCode1_return#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:175 [ cputc::convertToScreenCode1_return#0 ]
Statement [119] cursorLocation::return#0 = cursorLocation::return#1 [ cputc::convertToScreenCode1_return#0 cursorLocation::return#0 ] ( putchar:63 [ cputc::convertToScreenCode1_return#0 cursorLocation::return#0 ] { { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  ) always clobbers reg byte a 
Statement [120] putchar::loc#0 = cursorLocation::return#0 [ cputc::convertToScreenCode1_return#0 putchar::loc#0 ] ( putchar:63 [ cputc::convertToScreenCode1_return#0 putchar::loc#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 putchar::loc#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 putchar::loc#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 putchar::loc#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 putchar::loc#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 putchar::loc#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 putchar::loc#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [122] *putchar::loc#0 = putchar::newChar#0 [ putchar::newChar#0 ] ( putchar:63 [ putchar::newChar#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer putchar::newChar#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer putchar::newChar#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer putchar::newChar#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer putchar::newChar#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer putchar::newChar#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer putchar::newChar#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:190 [ putchar::newChar#0 ]
Statement [126] *(*OLDADR) = *OLDCHR [ ] ( setcursor:67 [ ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  setcursor:74 [ ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  putchar:63::setcursor:124 [ ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:70::setcursor:149 [ ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:72::setcursor:149 [ ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  clrscr:1::gotoxy:78::setcursor:162 [ printf_buffer ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [128] cursorLocation::return#3 = cursorLocation::return#1 [ cursorLocation::return#3 ] ( setcursor:67 [ cursorLocation::return#3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  setcursor:74 [ cursorLocation::return#3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  putchar:63::setcursor:124 [ cursorLocation::return#3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:70::setcursor:149 [ cursorLocation::return#3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:72::setcursor:149 [ cursorLocation::return#3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  clrscr:1::gotoxy:78::setcursor:162 [ printf_buffer cursorLocation::return#3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  ) always clobbers reg byte a 
Statement [129] setcursor::loc#0 = cursorLocation::return#3 [ setcursor::loc#0 ] ( setcursor:67 [ setcursor::loc#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  setcursor:74 [ setcursor::loc#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  putchar:63::setcursor:124 [ setcursor::loc#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:70::setcursor:149 [ setcursor::loc#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72::setcursor:149 [ setcursor::loc#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  clrscr:1::gotoxy:78::setcursor:162 [ printf_buffer setcursor::loc#0 ] { }  ) always clobbers reg byte a 
Statement [130] setcursor::c#0 = *setcursor::loc#0 [ setcursor::loc#0 setcursor::c#0 ] ( setcursor:67 [ setcursor::loc#0 setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  setcursor:74 [ setcursor::loc#0 setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  putchar:63::setcursor:124 [ setcursor::loc#0 setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:70::setcursor:149 [ setcursor::loc#0 setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72::setcursor:149 [ setcursor::loc#0 setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  clrscr:1::gotoxy:78::setcursor:162 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [132] *OLDADR = setcursor::loc#0 [ setcursor::c#0 ] ( setcursor:67 [ setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  setcursor:74 [ setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  putchar:63::setcursor:124 [ setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:70::setcursor:149 [ setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72::setcursor:149 [ setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  clrscr:1::gotoxy:78::setcursor:162 [ printf_buffer setcursor::c#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:195 [ setcursor::c#0 ]
Statement [133] *CRSINH = 0 [ setcursor::c#0 ] ( setcursor:67 [ setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  setcursor:74 [ setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  putchar:63::setcursor:124 [ setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:70::setcursor:149 [ setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72::setcursor:149 [ setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  clrscr:1::gotoxy:78::setcursor:162 [ printf_buffer setcursor::c#0 ] { }  ) always clobbers reg byte a 
Statement [134] setcursor::c#1 = setcursor::c#0 ^ $80 [ setcursor::c#1 ] ( setcursor:67 [ setcursor::c#1 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  setcursor:74 [ setcursor::c#1 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  putchar:63::setcursor:124 [ setcursor::c#1 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:70::setcursor:149 [ setcursor::c#1 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72::setcursor:149 [ setcursor::c#1 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  clrscr:1::gotoxy:78::setcursor:162 [ printf_buffer setcursor::c#1 ] { }  ) always clobbers reg byte a 
Statement [135] *(*OLDADR) = setcursor::c#1 [ ] ( setcursor:67 [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  setcursor:74 [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  putchar:63::setcursor:124 [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:70::setcursor:149 [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72::setcursor:149 [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  clrscr:1::gotoxy:78::setcursor:162 [ printf_buffer ] { }  ) always clobbers reg byte y 
Statement [138] if(*ROWCRS!=$18) goto newline::@1 [ ] ( newline:70 [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72 [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [139] *(*OLDADR) = *(*OLDADR) ^ $80 [ ] ( newline:70 [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72 [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a reg byte y 
Statement [140] newline::start#0 = *SAVMSC [ newline::start#0 ] ( newline:70 [ newline::start#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72 [ newline::start#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [141] memcpy::source#0 = newline::start#0 + $28 [ newline::start#0 memcpy::source#0 ] ( newline:70 [ newline::start#0 memcpy::source#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72 [ newline::start#0 memcpy::source#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [142] memcpy::destination#0 = (void *)newline::start#0 [ newline::start#0 memcpy::source#0 memcpy::destination#0 ] ( newline:70 [ newline::start#0 memcpy::source#0 memcpy::destination#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72 [ newline::start#0 memcpy::source#0 memcpy::destination#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [144] memset::str#1 = newline::start#0 + (unsigned int)$28*$17 [ memset::str#1 ] ( newline:70 [ memset::str#1 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  newline:72 [ memset::str#1 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  ) always clobbers reg byte a 
Statement [145] memset::str#8 = (void *)memset::str#1 [ memset::str#8 ] ( newline:70 [ memset::str#8 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  newline:72 [ memset::str#8 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  ) always clobbers reg byte a 
Statement [147] *ROWCRS = $18-1 [ ] ( newline:70 [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72 [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [152] if(memset::num#2<=0) goto memset::@return [ memset::num#2 memset::str#3 ] ( clrscr:1::memset:76 [ printf_buffer memset::num#2 memset::str#3 ] { { memset::str#3 = memset::str#7 } }  newline:70::memset:146 [ memset::num#2 memset::str#3 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  newline:72::memset:146 [ memset::num#2 memset::str#3 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  ) always clobbers reg byte a 
Statement [153] memset::end#0 = (char *)memset::str#3 + memset::num#2 [ memset::str#3 memset::end#0 ] ( clrscr:1::memset:76 [ printf_buffer memset::str#3 memset::end#0 ] { { memset::str#3 = memset::str#7 } }  newline:70::memset:146 [ memset::str#3 memset::end#0 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  newline:72::memset:146 [ memset::str#3 memset::end#0 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  ) always clobbers reg byte a 
Statement [154] memset::dst#4 = (char *)memset::str#3 [ memset::end#0 memset::dst#4 ] ( clrscr:1::memset:76 [ printf_buffer memset::end#0 memset::dst#4 ] { { memset::str#3 = memset::str#7 } }  newline:70::memset:146 [ memset::end#0 memset::dst#4 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  newline:72::memset:146 [ memset::end#0 memset::dst#4 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  ) always clobbers reg byte a 
Statement [156] if(memset::dst#2!=memset::end#0) goto memset::@3 [ memset::end#0 memset::dst#2 ] ( clrscr:1::memset:76 [ printf_buffer memset::end#0 memset::dst#2 ] { { memset::str#3 = memset::str#7 } }  newline:70::memset:146 [ memset::end#0 memset::dst#2 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  newline:72::memset:146 [ memset::end#0 memset::dst#2 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  ) always clobbers reg byte a 
Statement [158] *memset::dst#2 = 0 [ memset::end#0 memset::dst#2 ] ( clrscr:1::memset:76 [ printf_buffer memset::end#0 memset::dst#2 ] { { memset::str#3 = memset::str#7 } }  newline:70::memset:146 [ memset::end#0 memset::dst#2 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  newline:72::memset:146 [ memset::end#0 memset::dst#2 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  ) always clobbers reg byte a reg byte y 
Statement [160] *COLCRS = gotoxy::x#0 [ ] ( clrscr:1::gotoxy:78 [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [161] *ROWCRS = gotoxy::y#0 [ ] ( clrscr:1::gotoxy:78 [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [168] *utoa::buffer#11 = DIGITS[utoa::$11] [ printf_buffer utoa::buffer#11 ] ( printf_uint:8::utoa:113 [ printf_buffer utoa::buffer#11 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:17::utoa:113 [ printf_buffer utoa::buffer#11 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:26::utoa:113 [ printf_buffer utoa::buffer#11 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:35::utoa:113 [ printf_buffer utoa::buffer#11 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:44::utoa:113 [ printf_buffer utoa::buffer#11 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:53::utoa:113 [ printf_buffer utoa::buffer#11 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [169] utoa::buffer#3 = ++ utoa::buffer#11 [ printf_buffer utoa::buffer#3 ] ( printf_uint:8::utoa:113 [ printf_buffer utoa::buffer#3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:17::utoa:113 [ printf_buffer utoa::buffer#3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:26::utoa:113 [ printf_buffer utoa::buffer#3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:35::utoa:113 [ printf_buffer utoa::buffer#3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:44::utoa:113 [ printf_buffer utoa::buffer#3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:53::utoa:113 [ printf_buffer utoa::buffer#3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [170] *utoa::buffer#3 = 0 [ printf_buffer ] ( printf_uint:8::utoa:113 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:17::utoa:113 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:26::utoa:113 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:35::utoa:113 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:44::utoa:113 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:53::utoa:113 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [172] utoa::$10 = utoa::digit#2 << 1 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( printf_uint:8::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:17::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:26::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:35::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:44::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:53::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:149 [ utoa::digit#2 utoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:152 [ utoa::started#2 utoa::started#4 ]
Statement [173] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10] [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( printf_uint:8::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:17::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:26::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:35::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:44::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:53::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [175] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( printf_uint:8::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:17::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:26::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:35::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:44::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:53::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [178] utoa_append::buffer#0 = utoa::buffer#11 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( printf_uint:8::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:17::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:26::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:35::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:44::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:53::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [179] utoa_append::value#0 = utoa::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( printf_uint:8::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:17::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:26::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:35::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:44::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:53::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [180] utoa_append::sub#0 = utoa::digit_value#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( printf_uint:8::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:17::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:26::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:35::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:44::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:53::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [182] utoa_append::return#0 = utoa_append::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( printf_uint:8::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:17::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:26::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:35::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:44::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:53::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [183] utoa::value#0 = utoa_append::return#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( printf_uint:8::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:17::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:26::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:35::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:44::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:53::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } }  ) always clobbers reg byte a 
Statement sideeffect stackpullbytes(1) always clobbers reg byte a 
Statement [193] cursorLocation::$3 = (unsigned int)*ROWCRS [ cursorLocation::$3 ] ( putchar:63::cursorLocation:118 [ cputc::convertToScreenCode1_return#0 cursorLocation::$3 ] { { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  setcursor:67::cursorLocation:127 [ cursorLocation::$3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  setcursor:74::cursorLocation:127 [ cursorLocation::$3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  putchar:63::setcursor:124::cursorLocation:127 [ cursorLocation::$3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:70::setcursor:149::cursorLocation:127 [ cursorLocation::$3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:72::setcursor:149::cursorLocation:127 [ cursorLocation::$3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  clrscr:1::gotoxy:78::setcursor:162::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  ) always clobbers reg byte a 
Statement [194] cursorLocation::$4 = cursorLocation::$3 << 2 [ cursorLocation::$3 cursorLocation::$4 ] ( putchar:63::cursorLocation:118 [ cputc::convertToScreenCode1_return#0 cursorLocation::$3 cursorLocation::$4 ] { { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  setcursor:67::cursorLocation:127 [ cursorLocation::$3 cursorLocation::$4 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  setcursor:74::cursorLocation:127 [ cursorLocation::$3 cursorLocation::$4 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  putchar:63::setcursor:124::cursorLocation:127 [ cursorLocation::$3 cursorLocation::$4 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:70::setcursor:149::cursorLocation:127 [ cursorLocation::$3 cursorLocation::$4 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:72::setcursor:149::cursorLocation:127 [ cursorLocation::$3 cursorLocation::$4 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  clrscr:1::gotoxy:78::setcursor:162::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  ) always clobbers reg byte a 
Statement [195] cursorLocation::$5 = cursorLocation::$4 + cursorLocation::$3 [ cursorLocation::$5 ] ( putchar:63::cursorLocation:118 [ cputc::convertToScreenCode1_return#0 cursorLocation::$5 ] { { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$5 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$5 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$5 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$5 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$5 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$5 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  setcursor:67::cursorLocation:127 [ cursorLocation::$5 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  setcursor:74::cursorLocation:127 [ cursorLocation::$5 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  putchar:63::setcursor:124::cursorLocation:127 [ cursorLocation::$5 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:70::setcursor:149::cursorLocation:127 [ cursorLocation::$5 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:72::setcursor:149::cursorLocation:127 [ cursorLocation::$5 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  clrscr:1::gotoxy:78::setcursor:162::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  ) always clobbers reg byte a 
Statement [196] cursorLocation::$0 = cursorLocation::$5 << 3 [ cursorLocation::$0 ] ( putchar:63::cursorLocation:118 [ cputc::convertToScreenCode1_return#0 cursorLocation::$0 ] { { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  setcursor:67::cursorLocation:127 [ cursorLocation::$0 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  setcursor:74::cursorLocation:127 [ cursorLocation::$0 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  putchar:63::setcursor:124::cursorLocation:127 [ cursorLocation::$0 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:70::setcursor:149::cursorLocation:127 [ cursorLocation::$0 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:72::setcursor:149::cursorLocation:127 [ cursorLocation::$0 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  clrscr:1::gotoxy:78::setcursor:162::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  ) always clobbers reg byte a 
Statement [197] cursorLocation::$1 = *SAVMSC + cursorLocation::$0 [ cursorLocation::$1 ] ( putchar:63::cursorLocation:118 [ cputc::convertToScreenCode1_return#0 cursorLocation::$1 ] { { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  setcursor:67::cursorLocation:127 [ cursorLocation::$1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  setcursor:74::cursorLocation:127 [ cursorLocation::$1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  putchar:63::setcursor:124::cursorLocation:127 [ cursorLocation::$1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:70::setcursor:149::cursorLocation:127 [ cursorLocation::$1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:72::setcursor:149::cursorLocation:127 [ cursorLocation::$1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  clrscr:1::gotoxy:78::setcursor:162::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  ) always clobbers reg byte a 
Statement [198] cursorLocation::return#1 = cursorLocation::$1 + *COLCRS [ cursorLocation::return#1 ] ( putchar:63::cursorLocation:118 [ cputc::convertToScreenCode1_return#0 cursorLocation::return#1 ] { { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  setcursor:67::cursorLocation:127 [ cursorLocation::return#1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  setcursor:74::cursorLocation:127 [ cursorLocation::return#1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  putchar:63::setcursor:124::cursorLocation:127 [ cursorLocation::return#1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:70::setcursor:149::cursorLocation:127 [ cursorLocation::return#1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:72::setcursor:149::cursorLocation:127 [ cursorLocation::return#1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  clrscr:1::gotoxy:78::setcursor:162::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  ) always clobbers reg byte a 
Statement [200] memcpy::src_end#0 = (char *)(void *)memcpy::source#0 + memcpy::num#0 [ memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] ( newline:70::memcpy:143 [ newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72::memcpy:143 [ newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [201] memcpy::src#4 = (char *)(void *)memcpy::source#0 [ memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] ( newline:70::memcpy:143 [ newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72::memcpy:143 [ newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [202] memcpy::dst#4 = (char *)memcpy::destination#0 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( newline:70::memcpy:143 [ newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72::memcpy:143 [ newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [204] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( newline:70::memcpy:143 [ newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72::memcpy:143 [ newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [206] *memcpy::dst#2 = *memcpy::src#2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( newline:70::memcpy:143 [ newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72::memcpy:143 [ newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a reg byte y 
Statement [211] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( printf_uint:8::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:17::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:26::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:35::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:44::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:53::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:161 [ utoa_append::digit#2 utoa_append::digit#1 ]
Statement [212] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2] [ utoa_append::value#2 ] ( printf_uint:8::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:17::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:26::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:35::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:44::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:53::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:149 [ utoa::digit#2 utoa::digit#1 ]
Statement [215] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( printf_uint:8::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:17::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:26::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:35::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:44::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:53::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [4] test_slope::return#0 = test_slope::trees#2 [ test_slope::return#0 printf_buffer ] (  [ test_slope::return#0 printf_buffer ] { { test_slope::return#0 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [5] printf_uint::uvalue#0 = test_slope::return#0 [ printf_uint::uvalue#0 printf_buffer ] (  [ printf_uint::uvalue#0 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [13] test_slope::return#1 = test_slope::trees#2 [ test_slope::return#1 printf_buffer ] (  [ test_slope::return#1 printf_buffer ] { { test_slope::return#1 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [14] printf_uint::uvalue#1 = test_slope::return#1 [ printf_uint::uvalue#1 printf_buffer ] (  [ printf_uint::uvalue#1 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [22] test_slope::return#10 = test_slope::trees#2 [ test_slope::return#10 printf_buffer ] (  [ test_slope::return#10 printf_buffer ] { { test_slope::return#10 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [23] printf_uint::uvalue#2 = test_slope::return#10 [ printf_uint::uvalue#2 printf_buffer ] (  [ printf_uint::uvalue#2 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [31] test_slope::return#11 = test_slope::trees#2 [ test_slope::return#11 printf_buffer ] (  [ test_slope::return#11 printf_buffer ] { { test_slope::return#11 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [32] printf_uint::uvalue#3 = test_slope::return#11 [ printf_uint::uvalue#3 printf_buffer ] (  [ printf_uint::uvalue#3 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [40] test_slope::return#12 = test_slope::trees#2 [ test_slope::return#12 printf_buffer ] (  [ test_slope::return#12 printf_buffer ] { { test_slope::return#12 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [41] printf_uint::uvalue#4 = test_slope::return#12 [ printf_uint::uvalue#4 printf_buffer ] (  [ printf_uint::uvalue#4 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [49] test_slope::return#13 = test_slope::trees#2 [ test_slope::return#13 printf_buffer ] (  [ test_slope::return#13 printf_buffer ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [50] printf_uint::uvalue#5 = test_slope::return#13 [ printf_uint::uvalue#5 printf_buffer ] (  [ printf_uint::uvalue#5 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [57] cputc::c = stackidx(char,cputc::OFFSET_STACK_C) [ cputc::c ] (  [ cputc::c ] { }  printf_uint:8::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a reg byte x 
Statement [58] if(cputc::c==''at) goto cputc::@1 [ cputc::c ] (  [ cputc::c ] { }  printf_uint:8::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [59] if(cputc::c=='
'at) goto cputc::@2 [ cputc::c ] (  [ cputc::c ] { }  printf_uint:8::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::c ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [60] if(cputc::c==$9b) goto cputc::@2 [ ] (  [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [61] cputc::convertToScreenCode1_return#0 = rawmap[*cputc::convertToScreenCode1_v#0] [ cputc::convertToScreenCode1_return#0 ] (  [ cputc::convertToScreenCode1_return#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte y 
Statement [65] if(*COLCRS==$28) goto cputc::@5 [ ] (  [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [69] *COLCRS = 0 [ ] (  [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [71] *COLCRS = 0 [ ] (  [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [73] *COLCRS = 0 [ ] (  [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [75] memset::str#7 = (void *)*SAVMSC [ memset::str#7 ] ( clrscr:1 [ printf_buffer memset::str#7 ] { { memset::str#3 = memset::str#7 } }  ) always clobbers reg byte a 
Statement [77] *OLDCHR = 0 [ ] ( clrscr:1 [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [82] if(test_slope::y#2<$143) goto test_slope::@2 [ test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] ( test_slope:3 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [84] if(test_slope::mapline#2[test_slope::x#3]!='#'at) goto test_slope::@3 [ test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] ( test_slope:3 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::trees#2 test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#3 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [87] test_slope::x#1 = test_slope::x#3 + test_slope::x_inc#10 [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#1 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#1 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#1 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#1 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#1 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#1 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#1 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [89] test_slope::x#2 = test_slope::x#1 - $1f [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#2 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#2 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#2 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#2 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#2 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#2 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::trees#6 test_slope::x#2 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [91] test_slope::$6 = test_slope::y_inc#12 << 1 [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$6 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$6 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$6 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$6 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$6 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$6 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$6 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [92] test_slope::$7 = test_slope::$6 + test_slope::y_inc#12 [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$7 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$7 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$7 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$7 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$7 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$7 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$7 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [93] test_slope::$8 = test_slope::$7 << 1 [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$8 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$8 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$8 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$8 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$8 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$8 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$8 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [94] test_slope::$9 = test_slope::$8 + test_slope::y_inc#12 [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$9 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$9 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$9 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$9 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$9 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$9 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$9 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [95] test_slope::$10 = test_slope::$9 << 1 [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$10 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$10 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$10 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$10 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$10 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$10 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$10 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [96] test_slope::$11 = test_slope::$10 + test_slope::y_inc#12 [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$11 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$11 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$11 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$11 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$11 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$11 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$11 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [97] test_slope::$12 = test_slope::$11 << 1 [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$12 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$12 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$12 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$12 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$12 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$12 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$12 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [98] test_slope::$5 = test_slope::$12 + test_slope::y_inc#12 [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$5 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$5 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$5 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$5 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$5 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$5 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#2 test_slope::x#8 test_slope::trees#6 test_slope::$5 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [99] test_slope::mapline#1 = test_slope::mapline#2 + test_slope::$5 [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#2 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [100] test_slope::y#1 = test_slope::y#2 + test_slope::y_inc#12 [ test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#1 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] ( test_slope:3 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#1 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#0 = test_slope::trees#2 } }  test_slope:12 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#1 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#1 = test_slope::trees#2 } }  test_slope:21 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#1 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#10 = test_slope::trees#2 } }  test_slope:30 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#1 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#11 = test_slope::trees#2 } }  test_slope:39 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#1 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#12 = test_slope::trees#2 } }  test_slope:48 [ printf_buffer test_slope::x_inc#10 test_slope::y_inc#12 test_slope::y#1 test_slope::mapline#1 test_slope::x#8 test_slope::trees#6 ] { { test_slope::return#13 = test_slope::trees#2 } }  ) always clobbers reg byte a 
Statement [103] printf_str::c#1 = *printf_str::s#14 [ printf_str::s#14 printf_str::c#1 ] ( printf_str:6 [ printf_uint::uvalue#0 printf_buffer printf_str::s#14 printf_str::c#1 ] { }  printf_str:10 [ printf_buffer printf_str::s#14 printf_str::c#1 ] { }  printf_str:15 [ printf_uint::uvalue#1 printf_buffer printf_str::s#14 printf_str::c#1 ] { }  printf_str:19 [ printf_buffer printf_str::s#14 printf_str::c#1 ] { }  printf_str:24 [ printf_uint::uvalue#2 printf_buffer printf_str::s#14 printf_str::c#1 ] { }  printf_str:28 [ printf_buffer printf_str::s#14 printf_str::c#1 ] { }  printf_str:33 [ printf_uint::uvalue#3 printf_buffer printf_str::s#14 printf_str::c#1 ] { }  printf_str:37 [ printf_buffer printf_str::s#14 printf_str::c#1 ] { }  printf_str:42 [ printf_uint::uvalue#4 printf_buffer printf_str::s#14 printf_str::c#1 ] { }  printf_str:46 [ printf_buffer printf_str::s#14 printf_str::c#1 ] { }  printf_str:51 [ printf_uint::uvalue#5 printf_buffer printf_str::s#14 printf_str::c#1 ] { }  printf_str:55 [ printf_str::s#14 printf_str::c#1 ] { }  printf_uint:8::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#14 printf_str::c#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#14 printf_str::c#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#14 printf_str::c#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#14 printf_str::c#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#14 printf_str::c#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#14 printf_str::c#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a reg byte y 
Statement [108] callexecute *printf_str::putc#15  [ printf_str::s#0 ] ( printf_str:6 [ printf_uint::uvalue#0 printf_buffer printf_str::s#0 ] { }  printf_str:10 [ printf_buffer printf_str::s#0 ] { }  printf_str:15 [ printf_uint::uvalue#1 printf_buffer printf_str::s#0 ] { }  printf_str:19 [ printf_buffer printf_str::s#0 ] { }  printf_str:24 [ printf_uint::uvalue#2 printf_buffer printf_str::s#0 ] { }  printf_str:28 [ printf_buffer printf_str::s#0 ] { }  printf_str:33 [ printf_uint::uvalue#3 printf_buffer printf_str::s#0 ] { }  printf_str:37 [ printf_buffer printf_str::s#0 ] { }  printf_str:42 [ printf_uint::uvalue#4 printf_buffer printf_str::s#0 ] { }  printf_str:46 [ printf_buffer printf_str::s#0 ] { }  printf_str:51 [ printf_uint::uvalue#5 printf_buffer printf_str::s#0 ] { }  printf_str:55 [ printf_str::s#0 ] { }  printf_uint:8::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::printf_str:191 [ printf_buffer printf_str::s#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a reg byte x reg byte y 
Statement sideeffect stackpullbytes(1) always clobbers reg byte a 
Statement [111] *((char *)&printf_buffer) = 0 [ printf_uint::uvalue#6 printf_buffer ] ( printf_uint:8 [ printf_uint::uvalue#6 printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:17 [ printf_uint::uvalue#6 printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:26 [ printf_uint::uvalue#6 printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:35 [ printf_uint::uvalue#6 printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:44 [ printf_uint::uvalue#6 printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:53 [ printf_uint::uvalue#6 printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [112] utoa::value#1 = printf_uint::uvalue#6 [ printf_buffer utoa::value#1 ] ( printf_uint:8 [ printf_buffer utoa::value#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:17 [ printf_buffer utoa::value#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:26 [ printf_buffer utoa::value#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:35 [ printf_buffer utoa::value#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:44 [ printf_buffer utoa::value#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:53 [ printf_buffer utoa::value#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [117] *(*OLDADR) = *OLDCHR [ cputc::convertToScreenCode1_return#0 ] ( putchar:63 [ cputc::convertToScreenCode1_return#0 ] { { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  ) always clobbers reg byte a reg byte y 
Statement [119] cursorLocation::return#0 = cursorLocation::return#1 [ cputc::convertToScreenCode1_return#0 cursorLocation::return#0 ] ( putchar:63 [ cputc::convertToScreenCode1_return#0 cursorLocation::return#0 ] { { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  ) always clobbers reg byte a 
Statement [120] putchar::loc#0 = cursorLocation::return#0 [ cputc::convertToScreenCode1_return#0 putchar::loc#0 ] ( putchar:63 [ cputc::convertToScreenCode1_return#0 putchar::loc#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 putchar::loc#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 putchar::loc#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 putchar::loc#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 putchar::loc#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 putchar::loc#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer cputc::convertToScreenCode1_return#0 putchar::loc#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [122] *putchar::loc#0 = putchar::newChar#0 [ putchar::newChar#0 ] ( putchar:63 [ putchar::newChar#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer putchar::newChar#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer putchar::newChar#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer putchar::newChar#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer putchar::newChar#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer putchar::newChar#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63 [ printf_buffer putchar::newChar#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte y 
Statement [126] *(*OLDADR) = *OLDCHR [ ] ( setcursor:67 [ ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  setcursor:74 [ ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  putchar:63::setcursor:124 [ ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:70::setcursor:149 [ ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:72::setcursor:149 [ ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  clrscr:1::gotoxy:78::setcursor:162 [ printf_buffer ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [128] cursorLocation::return#3 = cursorLocation::return#1 [ cursorLocation::return#3 ] ( setcursor:67 [ cursorLocation::return#3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  setcursor:74 [ cursorLocation::return#3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  putchar:63::setcursor:124 [ cursorLocation::return#3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:70::setcursor:149 [ cursorLocation::return#3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:72::setcursor:149 [ cursorLocation::return#3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer cursorLocation::return#3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  clrscr:1::gotoxy:78::setcursor:162 [ printf_buffer cursorLocation::return#3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  ) always clobbers reg byte a 
Statement [129] setcursor::loc#0 = cursorLocation::return#3 [ setcursor::loc#0 ] ( setcursor:67 [ setcursor::loc#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  setcursor:74 [ setcursor::loc#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  putchar:63::setcursor:124 [ setcursor::loc#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:70::setcursor:149 [ setcursor::loc#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72::setcursor:149 [ setcursor::loc#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  clrscr:1::gotoxy:78::setcursor:162 [ printf_buffer setcursor::loc#0 ] { }  ) always clobbers reg byte a 
Statement [130] setcursor::c#0 = *setcursor::loc#0 [ setcursor::loc#0 setcursor::c#0 ] ( setcursor:67 [ setcursor::loc#0 setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  setcursor:74 [ setcursor::loc#0 setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  putchar:63::setcursor:124 [ setcursor::loc#0 setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:70::setcursor:149 [ setcursor::loc#0 setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72::setcursor:149 [ setcursor::loc#0 setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  clrscr:1::gotoxy:78::setcursor:162 [ printf_buffer setcursor::loc#0 setcursor::c#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [132] *OLDADR = setcursor::loc#0 [ setcursor::c#0 ] ( setcursor:67 [ setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  setcursor:74 [ setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  putchar:63::setcursor:124 [ setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:70::setcursor:149 [ setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72::setcursor:149 [ setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  clrscr:1::gotoxy:78::setcursor:162 [ printf_buffer setcursor::c#0 ] { }  ) always clobbers reg byte a 
Statement [133] *CRSINH = 0 [ setcursor::c#0 ] ( setcursor:67 [ setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  setcursor:74 [ setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  putchar:63::setcursor:124 [ setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:70::setcursor:149 [ setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72::setcursor:149 [ setcursor::c#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  clrscr:1::gotoxy:78::setcursor:162 [ printf_buffer setcursor::c#0 ] { }  ) always clobbers reg byte a 
Statement [134] setcursor::c#1 = setcursor::c#0 ^ $80 [ setcursor::c#1 ] ( setcursor:67 [ setcursor::c#1 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  setcursor:74 [ setcursor::c#1 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  putchar:63::setcursor:124 [ setcursor::c#1 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:70::setcursor:149 [ setcursor::c#1 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72::setcursor:149 [ setcursor::c#1 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer setcursor::c#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  clrscr:1::gotoxy:78::setcursor:162 [ printf_buffer setcursor::c#1 ] { }  ) always clobbers reg byte a 
Statement [135] *(*OLDADR) = setcursor::c#1 [ ] ( setcursor:67 [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  setcursor:74 [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  putchar:63::setcursor:124 [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:70::setcursor:149 [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72::setcursor:149 [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  clrscr:1::gotoxy:78::setcursor:162 [ printf_buffer ] { }  ) always clobbers reg byte y 
Statement [138] if(*ROWCRS!=$18) goto newline::@1 [ ] ( newline:70 [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72 [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [139] *(*OLDADR) = *(*OLDADR) ^ $80 [ ] ( newline:70 [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72 [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a reg byte y 
Statement [140] newline::start#0 = *SAVMSC [ newline::start#0 ] ( newline:70 [ newline::start#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72 [ newline::start#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [141] memcpy::source#0 = newline::start#0 + $28 [ newline::start#0 memcpy::source#0 ] ( newline:70 [ newline::start#0 memcpy::source#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72 [ newline::start#0 memcpy::source#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [142] memcpy::destination#0 = (void *)newline::start#0 [ newline::start#0 memcpy::source#0 memcpy::destination#0 ] ( newline:70 [ newline::start#0 memcpy::source#0 memcpy::destination#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72 [ newline::start#0 memcpy::source#0 memcpy::destination#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [144] memset::str#1 = newline::start#0 + (unsigned int)$28*$17 [ memset::str#1 ] ( newline:70 [ memset::str#1 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  newline:72 [ memset::str#1 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  ) always clobbers reg byte a 
Statement [145] memset::str#8 = (void *)memset::str#1 [ memset::str#8 ] ( newline:70 [ memset::str#8 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  newline:72 [ memset::str#8 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer memset::str#8 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  ) always clobbers reg byte a 
Statement [147] *ROWCRS = $18-1 [ ] ( newline:70 [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72 [ ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [152] if(memset::num#2<=0) goto memset::@return [ memset::num#2 memset::str#3 ] ( clrscr:1::memset:76 [ printf_buffer memset::num#2 memset::str#3 ] { { memset::str#3 = memset::str#7 } }  newline:70::memset:146 [ memset::num#2 memset::str#3 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  newline:72::memset:146 [ memset::num#2 memset::str#3 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::num#2 memset::str#3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  ) always clobbers reg byte a 
Statement [153] memset::end#0 = (char *)memset::str#3 + memset::num#2 [ memset::str#3 memset::end#0 ] ( clrscr:1::memset:76 [ printf_buffer memset::str#3 memset::end#0 ] { { memset::str#3 = memset::str#7 } }  newline:70::memset:146 [ memset::str#3 memset::end#0 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  newline:72::memset:146 [ memset::str#3 memset::end#0 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::str#3 memset::end#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  ) always clobbers reg byte a 
Statement [154] memset::dst#4 = (char *)memset::str#3 [ memset::end#0 memset::dst#4 ] ( clrscr:1::memset:76 [ printf_buffer memset::end#0 memset::dst#4 ] { { memset::str#3 = memset::str#7 } }  newline:70::memset:146 [ memset::end#0 memset::dst#4 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  newline:72::memset:146 [ memset::end#0 memset::dst#4 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  ) always clobbers reg byte a 
Statement [156] if(memset::dst#2!=memset::end#0) goto memset::@3 [ memset::end#0 memset::dst#2 ] ( clrscr:1::memset:76 [ printf_buffer memset::end#0 memset::dst#2 ] { { memset::str#3 = memset::str#7 } }  newline:70::memset:146 [ memset::end#0 memset::dst#2 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  newline:72::memset:146 [ memset::end#0 memset::dst#2 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  ) always clobbers reg byte a 
Statement [158] *memset::dst#2 = 0 [ memset::end#0 memset::dst#2 ] ( clrscr:1::memset:76 [ printf_buffer memset::end#0 memset::dst#2 ] { { memset::str#3 = memset::str#7 } }  newline:70::memset:146 [ memset::end#0 memset::dst#2 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  newline:72::memset:146 [ memset::end#0 memset::dst#2 ] { { memset::str#3 = memset::str#8 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::memset:146 [ printf_buffer memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { memset::str#3 = memset::str#8 } }  ) always clobbers reg byte a reg byte y 
Statement [160] *COLCRS = gotoxy::x#0 [ ] ( clrscr:1::gotoxy:78 [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [161] *ROWCRS = gotoxy::y#0 [ ] ( clrscr:1::gotoxy:78 [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [168] *utoa::buffer#11 = DIGITS[utoa::$11] [ printf_buffer utoa::buffer#11 ] ( printf_uint:8::utoa:113 [ printf_buffer utoa::buffer#11 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:17::utoa:113 [ printf_buffer utoa::buffer#11 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:26::utoa:113 [ printf_buffer utoa::buffer#11 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:35::utoa:113 [ printf_buffer utoa::buffer#11 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:44::utoa:113 [ printf_buffer utoa::buffer#11 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:53::utoa:113 [ printf_buffer utoa::buffer#11 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [169] utoa::buffer#3 = ++ utoa::buffer#11 [ printf_buffer utoa::buffer#3 ] ( printf_uint:8::utoa:113 [ printf_buffer utoa::buffer#3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:17::utoa:113 [ printf_buffer utoa::buffer#3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:26::utoa:113 [ printf_buffer utoa::buffer#3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:35::utoa:113 [ printf_buffer utoa::buffer#3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:44::utoa:113 [ printf_buffer utoa::buffer#3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:53::utoa:113 [ printf_buffer utoa::buffer#3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [170] *utoa::buffer#3 = 0 [ printf_buffer ] ( printf_uint:8::utoa:113 [ printf_buffer ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:17::utoa:113 [ printf_buffer ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:26::utoa:113 [ printf_buffer ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:35::utoa:113 [ printf_buffer ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:44::utoa:113 [ printf_buffer ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:53::utoa:113 [ printf_buffer ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [172] utoa::$10 = utoa::digit#2 << 1 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( printf_uint:8::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:17::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:26::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:35::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:44::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:53::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [173] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10] [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( printf_uint:8::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:17::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:26::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:35::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:44::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:53::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [175] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( printf_uint:8::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:17::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:26::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:35::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:44::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:53::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [178] utoa_append::buffer#0 = utoa::buffer#11 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( printf_uint:8::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:17::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:26::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:35::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:44::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:53::utoa:113 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [179] utoa_append::value#0 = utoa::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( printf_uint:8::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:17::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:26::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:35::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:44::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:53::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [180] utoa_append::sub#0 = utoa::digit_value#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( printf_uint:8::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:17::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:26::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:35::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:44::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:53::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [182] utoa_append::return#0 = utoa_append::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( printf_uint:8::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:17::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:26::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:35::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:44::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:53::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [183] utoa::value#0 = utoa_append::return#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( printf_uint:8::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:17::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:26::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:35::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:44::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } }  printf_uint:53::utoa:113 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } }  ) always clobbers reg byte a 
Statement sideeffect stackpullbytes(1) always clobbers reg byte a 
Statement [193] cursorLocation::$3 = (unsigned int)*ROWCRS [ cursorLocation::$3 ] ( putchar:63::cursorLocation:118 [ cputc::convertToScreenCode1_return#0 cursorLocation::$3 ] { { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  setcursor:67::cursorLocation:127 [ cursorLocation::$3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  setcursor:74::cursorLocation:127 [ cursorLocation::$3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  putchar:63::setcursor:124::cursorLocation:127 [ cursorLocation::$3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:70::setcursor:149::cursorLocation:127 [ cursorLocation::$3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:72::setcursor:149::cursorLocation:127 [ cursorLocation::$3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  clrscr:1::gotoxy:78::setcursor:162::cursorLocation:127 [ printf_buffer cursorLocation::$3 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  ) always clobbers reg byte a 
Statement [194] cursorLocation::$4 = cursorLocation::$3 << 2 [ cursorLocation::$3 cursorLocation::$4 ] ( putchar:63::cursorLocation:118 [ cputc::convertToScreenCode1_return#0 cursorLocation::$3 cursorLocation::$4 ] { { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  setcursor:67::cursorLocation:127 [ cursorLocation::$3 cursorLocation::$4 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  setcursor:74::cursorLocation:127 [ cursorLocation::$3 cursorLocation::$4 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  putchar:63::setcursor:124::cursorLocation:127 [ cursorLocation::$3 cursorLocation::$4 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:70::setcursor:149::cursorLocation:127 [ cursorLocation::$3 cursorLocation::$4 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:72::setcursor:149::cursorLocation:127 [ cursorLocation::$3 cursorLocation::$4 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  clrscr:1::gotoxy:78::setcursor:162::cursorLocation:127 [ printf_buffer cursorLocation::$3 cursorLocation::$4 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  ) always clobbers reg byte a 
Statement [195] cursorLocation::$5 = cursorLocation::$4 + cursorLocation::$3 [ cursorLocation::$5 ] ( putchar:63::cursorLocation:118 [ cputc::convertToScreenCode1_return#0 cursorLocation::$5 ] { { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$5 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$5 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$5 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$5 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$5 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$5 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  setcursor:67::cursorLocation:127 [ cursorLocation::$5 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  setcursor:74::cursorLocation:127 [ cursorLocation::$5 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  putchar:63::setcursor:124::cursorLocation:127 [ cursorLocation::$5 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:70::setcursor:149::cursorLocation:127 [ cursorLocation::$5 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:72::setcursor:149::cursorLocation:127 [ cursorLocation::$5 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  clrscr:1::gotoxy:78::setcursor:162::cursorLocation:127 [ printf_buffer cursorLocation::$5 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  ) always clobbers reg byte a 
Statement [196] cursorLocation::$0 = cursorLocation::$5 << 3 [ cursorLocation::$0 ] ( putchar:63::cursorLocation:118 [ cputc::convertToScreenCode1_return#0 cursorLocation::$0 ] { { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  setcursor:67::cursorLocation:127 [ cursorLocation::$0 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  setcursor:74::cursorLocation:127 [ cursorLocation::$0 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  putchar:63::setcursor:124::cursorLocation:127 [ cursorLocation::$0 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:70::setcursor:149::cursorLocation:127 [ cursorLocation::$0 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:72::setcursor:149::cursorLocation:127 [ cursorLocation::$0 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  clrscr:1::gotoxy:78::setcursor:162::cursorLocation:127 [ printf_buffer cursorLocation::$0 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  ) always clobbers reg byte a 
Statement [197] cursorLocation::$1 = *SAVMSC + cursorLocation::$0 [ cursorLocation::$1 ] ( putchar:63::cursorLocation:118 [ cputc::convertToScreenCode1_return#0 cursorLocation::$1 ] { { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::$1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  setcursor:67::cursorLocation:127 [ cursorLocation::$1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  setcursor:74::cursorLocation:127 [ cursorLocation::$1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  putchar:63::setcursor:124::cursorLocation:127 [ cursorLocation::$1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:70::setcursor:149::cursorLocation:127 [ cursorLocation::$1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:72::setcursor:149::cursorLocation:127 [ cursorLocation::$1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  clrscr:1::gotoxy:78::setcursor:162::cursorLocation:127 [ printf_buffer cursorLocation::$1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  ) always clobbers reg byte a 
Statement [198] cursorLocation::return#1 = cursorLocation::$1 + *COLCRS [ cursorLocation::return#1 ] ( putchar:63::cursorLocation:118 [ cputc::convertToScreenCode1_return#0 cursorLocation::return#1 ] { { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::cursorLocation:118 [ printf_buffer cputc::convertToScreenCode1_return#0 cursorLocation::return#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#0 = cursorLocation::return#1 } }  setcursor:67::cursorLocation:127 [ cursorLocation::return#1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:67::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  setcursor:74::cursorLocation:127 [ cursorLocation::return#1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::setcursor:74::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  putchar:63::setcursor:124::cursorLocation:127 [ cursorLocation::return#1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::putchar:63::setcursor:124::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:70::setcursor:149::cursorLocation:127 [ cursorLocation::return#1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  newline:72::setcursor:149::cursorLocation:127 [ cursorLocation::return#1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::setcursor:149::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } { cursorLocation::return#1 = cursorLocation::return#3 } }  clrscr:1::gotoxy:78::setcursor:162::cursorLocation:127 [ printf_buffer cursorLocation::return#1 ] { { cursorLocation::return#1 = cursorLocation::return#3 } }  ) always clobbers reg byte a 
Statement [200] memcpy::src_end#0 = (char *)(void *)memcpy::source#0 + memcpy::num#0 [ memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] ( newline:70::memcpy:143 [ newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72::memcpy:143 [ newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::source#0 memcpy::destination#0 memcpy::src_end#0 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [201] memcpy::src#4 = (char *)(void *)memcpy::source#0 [ memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] ( newline:70::memcpy:143 [ newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72::memcpy:143 [ newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::destination#0 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [202] memcpy::dst#4 = (char *)memcpy::destination#0 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( newline:70::memcpy:143 [ newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72::memcpy:143 [ newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [204] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( newline:70::memcpy:143 [ newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72::memcpy:143 [ newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a 
Statement [206] *memcpy::dst#2 = *memcpy::src#2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( newline:70::memcpy:143 [ newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:70::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  newline:72::memcpy:143 [ newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { }  printf_uint:8::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 } }  printf_uint:17::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 } }  printf_uint:26::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 } }  printf_uint:35::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 } }  printf_uint:44::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 } }  printf_uint:53::printf_number_buffer:115::cputc:188::newline:72::memcpy:143 [ printf_buffer newline::start#0 memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 } }  ) always clobbers reg byte a reg byte y 
Statement [211] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( printf_uint:8::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:17::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:26::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:35::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:44::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:53::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [212] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2] [ utoa_append::value#2 ] ( printf_uint:8::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:17::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:26::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:35::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:44::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:53::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [215] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( printf_uint:8::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { printf_uint::uvalue#0 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:17::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { printf_uint::uvalue#1 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:26::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { printf_uint::uvalue#2 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:35::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { printf_uint::uvalue#3 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:44::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { printf_uint::uvalue#4 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  printf_uint:53::utoa:113::utoa_append:181 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { printf_uint::uvalue#5 = printf_uint::uvalue#6 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Potential registers zp[1]:128 [ test_slope::x_inc#10 ] : zp[1]:128 , reg byte x , reg byte y , 
Potential registers zp[1]:129 [ test_slope::y_inc#12 ] : zp[1]:129 , reg byte x , reg byte y , 
Potential registers zp[2]:130 [ test_slope::y#2 test_slope::y#1 ] : zp[2]:130 , 
Potential registers zp[2]:132 [ test_slope::mapline#2 test_slope::mapline#1 ] : zp[2]:132 , 
Potential registers zp[1]:134 [ test_slope::x#3 test_slope::x#8 test_slope::x#1 test_slope::x#2 ] : zp[1]:134 , reg byte x , reg byte y , 
Potential registers zp[2]:135 [ test_slope::trees#2 test_slope::trees#6 test_slope::trees#1 ] : zp[2]:135 , 
Potential registers zp[2]:137 [ printf_str::putc#15 ] : zp[2]:137 , 
Potential registers zp[2]:139 [ printf_str::s#14 printf_str::s#15 printf_str::s#0 ] : zp[2]:139 , 
Potential registers zp[2]:141 [ printf_uint::uvalue#6 printf_uint::uvalue#2 printf_uint::uvalue#3 printf_uint::uvalue#4 printf_uint::uvalue#5 printf_uint::uvalue#0 printf_uint::uvalue#1 ] : zp[2]:141 , 
Potential registers zp[2]:143 [ memset::num#2 ] : zp[2]:143 , 
Potential registers zp[2]:145 [ memset::str#3 memset::str#7 memset::str#8 ] : zp[2]:145 , 
Potential registers zp[2]:147 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:147 , 
Potential registers zp[1]:149 [ utoa::digit#2 utoa::digit#1 ] : zp[1]:149 , reg byte x , 
Potential registers zp[2]:150 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] : zp[2]:150 , 
Potential registers zp[1]:152 [ utoa::started#2 utoa::started#4 ] : zp[1]:152 , reg byte x , reg byte y , 
Potential registers zp[2]:153 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] : zp[2]:153 , 
Potential registers zp[2]:155 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] : zp[2]:155 , 
Potential registers zp[2]:157 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] : zp[2]:157 , 
Potential registers zp[2]:159 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] : zp[2]:159 , 
Potential registers zp[1]:161 [ utoa_append::digit#2 utoa_append::digit#1 ] : zp[1]:161 , reg byte x , reg byte y , 
Potential registers zp[2]:162 [ test_slope::return#0 ] : zp[2]:162 , 
Potential registers zp[2]:164 [ test_slope::return#1 ] : zp[2]:164 , 
Potential registers zp[2]:166 [ test_slope::return#10 ] : zp[2]:166 , 
Potential registers zp[2]:168 [ test_slope::return#11 ] : zp[2]:168 , 
Potential registers zp[2]:170 [ test_slope::return#12 ] : zp[2]:170 , 
Potential registers zp[2]:172 [ test_slope::return#13 ] : zp[2]:172 , 
Potential registers zp[1]:174 [ cputc::c ] : zp[1]:174 , 
Potential registers zp[1]:175 [ cputc::convertToScreenCode1_return#0 ] : zp[1]:175 , reg byte x , 
Potential registers zp[1]:176 [ test_slope::$6 ] : zp[1]:176 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:177 [ test_slope::$7 ] : zp[1]:177 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:178 [ test_slope::$8 ] : zp[1]:178 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:179 [ test_slope::$9 ] : zp[1]:179 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:180 [ test_slope::$10 ] : zp[1]:180 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:181 [ test_slope::$11 ] : zp[1]:181 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:182 [ test_slope::$12 ] : zp[1]:182 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:183 [ test_slope::$5 ] : zp[1]:183 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:184 [ printf_str::c#1 ] : zp[1]:184 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:185 [ printf_number_buffer::buffer_sign#0 ] : zp[1]:185 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:186 [ cursorLocation::return#0 ] : zp[2]:186 , 
Potential registers zp[2]:188 [ putchar::loc#0 ] : zp[2]:188 , 
Potential registers zp[1]:190 [ putchar::newChar#0 ] : zp[1]:190 , reg byte a , reg byte x , 
Potential registers zp[2]:191 [ cursorLocation::return#3 ] : zp[2]:191 , 
Potential registers zp[2]:193 [ setcursor::loc#0 ] : zp[2]:193 , 
Potential registers zp[1]:195 [ setcursor::c#0 ] : zp[1]:195 , reg byte x , reg byte y , 
Potential registers zp[1]:196 [ setcursor::c#1 ] : zp[1]:196 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:197 [ newline::start#0 ] : zp[2]:197 , 
Potential registers zp[2]:199 [ memcpy::source#0 ] : zp[2]:199 , 
Potential registers zp[2]:201 [ memcpy::destination#0 ] : zp[2]:201 , 
Potential registers zp[2]:203 [ memset::str#1 ] : zp[2]:203 , 
Potential registers zp[2]:205 [ memset::end#0 ] : zp[2]:205 , 
Potential registers zp[1]:207 [ utoa::$11 ] : zp[1]:207 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:208 [ utoa::buffer#3 ] : zp[2]:208 , 
Potential registers zp[1]:210 [ utoa::$10 ] : zp[1]:210 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:211 [ utoa::digit_value#0 ] : zp[2]:211 , 
Potential registers zp[2]:213 [ utoa_append::buffer#0 ] : zp[2]:213 , 
Potential registers zp[2]:215 [ utoa_append::sub#0 ] : zp[2]:215 , 
Potential registers zp[2]:217 [ utoa_append::return#0 ] : zp[2]:217 , 
Potential registers zp[2]:219 [ cursorLocation::$3 ] : zp[2]:219 , 
Potential registers zp[2]:221 [ cursorLocation::$4 ] : zp[2]:221 , 
Potential registers zp[2]:223 [ cursorLocation::$5 ] : zp[2]:223 , 
Potential registers zp[2]:225 [ cursorLocation::$0 ] : zp[2]:225 , 
Potential registers zp[2]:227 [ cursorLocation::$1 ] : zp[2]:227 , 
Potential registers zp[2]:229 [ cursorLocation::return#1 ] : zp[2]:229 , 
Potential registers zp[2]:231 [ memcpy::src_end#0 ] : zp[2]:231 , 
Potential registers mem[12] [ printf_buffer ] : mem[12] , 

REGISTER UPLIFT SCOPES
Uplift Scope [cursorLocation] 2,000,002: zp[2]:221 [ cursorLocation::$4 ] 2,000,002: zp[2]:223 [ cursorLocation::$5 ] 2,000,002: zp[2]:225 [ cursorLocation::$0 ] 2,000,002: zp[2]:227 [ cursorLocation::$1 ] 1,500,001.5: zp[2]:219 [ cursorLocation::$3 ] 277,500.75: zp[2]:229 [ cursorLocation::return#1 ] 200,002: zp[2]:191 [ cursorLocation::return#3 ] 20,002: zp[2]:186 [ cursorLocation::return#0 ] 
Uplift Scope [memcpy] 3,125,004.25: zp[2]:155 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] 2,233,337.67: zp[2]:157 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] 137,500.25: zp[2]:231 [ memcpy::src_end#0 ] 3,333.67: zp[2]:199 [ memcpy::source#0 ] 3,333.67: zp[2]:201 [ memcpy::destination#0 ] 
Uplift Scope [utoa_append] 2,505,503.5: zp[2]:159 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] 2,005,002.5: zp[1]:161 [ utoa_append::digit#2 utoa_append::digit#1 ] 333,500.5: zp[2]:215 [ utoa_append::sub#0 ] 2,002: zp[2]:217 [ utoa_append::return#0 ] 1,375.25: zp[2]:213 [ utoa_append::buffer#0 ] 
Uplift Scope [memset] 3,566,672.33: zp[2]:147 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 183,333.67: zp[2]:205 [ memset::end#0 ] 100,001: zp[2]:143 [ memset::num#2 ] 23,361.33: zp[2]:145 [ memset::str#3 memset::str#7 memset::str#8 ] 10,001: zp[2]:203 [ memset::str#1 ] 
Uplift Scope [setcursor] 200,002: zp[1]:196 [ setcursor::c#1 ] 100,001: zp[2]:193 [ setcursor::loc#0 ] 75,000.75: zp[1]:195 [ setcursor::c#0 ] 
Uplift Scope [printf_str] 26,504: zp[2]:139 [ printf_str::s#14 printf_str::s#15 printf_str::s#0 ] 10,001: zp[1]:184 [ printf_str::c#1 ] 0: zp[2]:137 [ printf_str::putc#15 ] 
Uplift Scope [putchar] 15,001.5: zp[1]:190 [ putchar::newChar#0 ] 10,001: zp[2]:188 [ putchar::loc#0 ] 
Uplift Scope [utoa] 3,803.93: zp[2]:153 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] 3,144.93: zp[2]:150 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] 2,288: zp[1]:149 [ utoa::digit#2 utoa::digit#1 ] 2,002: zp[1]:210 [ utoa::$10 ] 1,501.5: zp[1]:152 [ utoa::started#2 utoa::started#4 ] 600.6: zp[2]:211 [ utoa::digit_value#0 ] 202: zp[1]:207 [ utoa::$11 ] 202: zp[2]:208 [ utoa::buffer#3 ] 
Uplift Scope [newline] 7,500.75: zp[2]:197 [ newline::start#0 ] 
Uplift Scope [cputc] 1,833.67: zp[1]:175 [ cputc::convertToScreenCode1_return#0 ] 1,334.67: zp[1]:174 [ cputc::c ] 
Uplift Scope [test_slope] 492.15: zp[1]:134 [ test_slope::x#3 test_slope::x#8 test_slope::x#1 test_slope::x#2 ] 253.7: zp[2]:135 [ test_slope::trees#2 test_slope::trees#6 test_slope::trees#1 ] 218.83: zp[2]:130 [ test_slope::y#2 test_slope::y#1 ] 202: zp[1]:176 [ test_slope::$6 ] 202: zp[1]:177 [ test_slope::$7 ] 202: zp[1]:178 [ test_slope::$8 ] 202: zp[1]:179 [ test_slope::$9 ] 202: zp[1]:180 [ test_slope::$10 ] 202: zp[1]:181 [ test_slope::$11 ] 202: zp[1]:182 [ test_slope::$12 ] 202: zp[1]:183 [ test_slope::$5 ] 118.82: zp[2]:132 [ test_slope::mapline#2 test_slope::mapline#1 ] 30.3: zp[1]:129 [ test_slope::y_inc#12 ] 5.05: zp[1]:128 [ test_slope::x_inc#10 ] 4: zp[2]:162 [ test_slope::return#0 ] 4: zp[2]:164 [ test_slope::return#1 ] 4: zp[2]:166 [ test_slope::return#10 ] 4: zp[2]:168 [ test_slope::return#11 ] 4: zp[2]:170 [ test_slope::return#12 ] 4: zp[2]:172 [ test_slope::return#13 ] 
Uplift Scope [printf_number_buffer] 71: zp[1]:185 [ printf_number_buffer::buffer_sign#0 ] 
Uplift Scope [printf_uint] 19.5: zp[2]:141 [ printf_uint::uvalue#6 printf_uint::uvalue#2 printf_uint::uvalue#3 printf_uint::uvalue#4 printf_uint::uvalue#5 printf_uint::uvalue#0 printf_uint::uvalue#1 ] 
Uplift Scope [RADIX] 
Uplift Scope [clrscr] 
Uplift Scope [gotoxy] 
Uplift Scope [ATARI_ANTIC] 
Uplift Scope [ATARI_GTIA_READ] 
Uplift Scope [ATARI_GTIA_WRITE] 
Uplift Scope [ATARI_POKEY_READ] 
Uplift Scope [ATARI_POKEY_WRITE] 
Uplift Scope [printf_format_number] 
Uplift Scope [printf_buffer_number] 
Uplift Scope [printf_format_string] 
Uplift Scope [main] 
Uplift Scope [] 0: mem[12] [ printf_buffer ] 

Uplifting [cursorLocation] best 13709 combination zp[2]:221 [ cursorLocation::$4 ] zp[2]:223 [ cursorLocation::$5 ] zp[2]:225 [ cursorLocation::$0 ] zp[2]:227 [ cursorLocation::$1 ] zp[2]:219 [ cursorLocation::$3 ] zp[2]:229 [ cursorLocation::return#1 ] zp[2]:191 [ cursorLocation::return#3 ] zp[2]:186 [ cursorLocation::return#0 ] 
Uplifting [memcpy] best 13709 combination zp[2]:155 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] zp[2]:157 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] zp[2]:231 [ memcpy::src_end#0 ] zp[2]:199 [ memcpy::source#0 ] zp[2]:201 [ memcpy::destination#0 ] 
Uplifting [utoa_append] best 13106 combination zp[2]:159 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ] zp[2]:215 [ utoa_append::sub#0 ] zp[2]:217 [ utoa_append::return#0 ] zp[2]:213 [ utoa_append::buffer#0 ] 
Uplifting [memset] best 13106 combination zp[2]:147 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:205 [ memset::end#0 ] zp[2]:143 [ memset::num#2 ] zp[2]:145 [ memset::str#3 memset::str#7 memset::str#8 ] zp[2]:203 [ memset::str#1 ] 
Uplifting [setcursor] best 13095 combination reg byte a [ setcursor::c#1 ] zp[2]:193 [ setcursor::loc#0 ] reg byte x [ setcursor::c#0 ] 
Uplifting [printf_str] best 13025 combination zp[2]:139 [ printf_str::s#14 printf_str::s#15 printf_str::s#0 ] reg byte a [ printf_str::c#1 ] zp[2]:137 [ printf_str::putc#15 ] 
Uplifting [putchar] best 13016 combination reg byte a [ putchar::newChar#0 ] zp[2]:188 [ putchar::loc#0 ] 
Uplifting [utoa] best 12900 combination zp[2]:153 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] zp[2]:150 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] zp[1]:149 [ utoa::digit#2 utoa::digit#1 ] reg byte a [ utoa::$10 ] reg byte x [ utoa::started#2 utoa::started#4 ] zp[2]:211 [ utoa::digit_value#0 ] reg byte x [ utoa::$11 ] zp[2]:208 [ utoa::buffer#3 ] 
Uplifting [newline] best 12900 combination zp[2]:197 [ newline::start#0 ] 
Uplifting [cputc] best 12896 combination reg byte x [ cputc::convertToScreenCode1_return#0 ] zp[1]:174 [ cputc::c ] 
Uplifting [test_slope] best 12606 combination reg byte x [ test_slope::x#3 test_slope::x#8 test_slope::x#1 test_slope::x#2 ] zp[2]:135 [ test_slope::trees#2 test_slope::trees#6 test_slope::trees#1 ] zp[2]:130 [ test_slope::y#2 test_slope::y#1 ] reg byte a [ test_slope::$6 ] reg byte a [ test_slope::$7 ] reg byte a [ test_slope::$8 ] zp[1]:179 [ test_slope::$9 ] zp[1]:180 [ test_slope::$10 ] zp[1]:181 [ test_slope::$11 ] zp[1]:182 [ test_slope::$12 ] zp[1]:183 [ test_slope::$5 ] zp[2]:132 [ test_slope::mapline#2 test_slope::mapline#1 ] zp[1]:129 [ test_slope::y_inc#12 ] zp[1]:128 [ test_slope::x_inc#10 ] zp[2]:162 [ test_slope::return#0 ] zp[2]:164 [ test_slope::return#1 ] zp[2]:166 [ test_slope::return#10 ] zp[2]:168 [ test_slope::return#11 ] zp[2]:170 [ test_slope::return#12 ] zp[2]:172 [ test_slope::return#13 ] 
Limited combination testing to 100 combinations of 1769472 possible.
Uplifting [printf_number_buffer] best 12599 combination reg byte a [ printf_number_buffer::buffer_sign#0 ] 
Uplifting [printf_uint] best 12599 combination zp[2]:141 [ printf_uint::uvalue#6 printf_uint::uvalue#2 printf_uint::uvalue#3 printf_uint::uvalue#4 printf_uint::uvalue#5 printf_uint::uvalue#0 printf_uint::uvalue#1 ] 
Uplifting [RADIX] best 12599 combination 
Uplifting [clrscr] best 12599 combination 
Uplifting [gotoxy] best 12599 combination 
Uplifting [ATARI_ANTIC] best 12599 combination 
Uplifting [ATARI_GTIA_READ] best 12599 combination 
Uplifting [ATARI_GTIA_WRITE] best 12599 combination 
Uplifting [ATARI_POKEY_READ] best 12599 combination 
Uplifting [ATARI_POKEY_WRITE] best 12599 combination 
Uplifting [printf_format_number] best 12599 combination 
Uplifting [printf_buffer_number] best 12599 combination 
Uplifting [printf_format_string] best 12599 combination 
Uplifting [main] best 12599 combination 
Uplifting [] best 12599 combination mem[12] [ printf_buffer ] 
Attempting to uplift remaining variables inzp[1]:149 [ utoa::digit#2 utoa::digit#1 ]
Uplifting [utoa] best 12599 combination zp[1]:149 [ utoa::digit#2 utoa::digit#1 ] 
Attempting to uplift remaining variables inzp[1]:174 [ cputc::c ]
Uplifting [cputc] best 12599 combination zp[1]:174 [ cputc::c ] 
Attempting to uplift remaining variables inzp[1]:179 [ test_slope::$9 ]
Uplifting [test_slope] best 12539 combination reg byte a [ test_slope::$9 ] 
Attempting to uplift remaining variables inzp[1]:180 [ test_slope::$10 ]
Uplifting [test_slope] best 12479 combination reg byte a [ test_slope::$10 ] 
Attempting to uplift remaining variables inzp[1]:181 [ test_slope::$11 ]
Uplifting [test_slope] best 12419 combination reg byte a [ test_slope::$11 ] 
Attempting to uplift remaining variables inzp[1]:182 [ test_slope::$12 ]
Uplifting [test_slope] best 12359 combination reg byte a [ test_slope::$12 ] 
Attempting to uplift remaining variables inzp[1]:183 [ test_slope::$5 ]
Uplifting [test_slope] best 12299 combination reg byte a [ test_slope::$5 ] 
Attempting to uplift remaining variables inzp[1]:129 [ test_slope::y_inc#12 ]
Uplifting [test_slope] best 12299 combination zp[1]:129 [ test_slope::y_inc#12 ] 
Attempting to uplift remaining variables inzp[1]:128 [ test_slope::x_inc#10 ]
Uplifting [test_slope] best 12299 combination zp[1]:128 [ test_slope::x_inc#10 ] 
Coalescing zero page register [ zp[2]:135 [ test_slope::trees#2 test_slope::trees#6 test_slope::trees#1 ] ] with [ zp[2]:162 [ test_slope::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:135 [ test_slope::trees#2 test_slope::trees#6 test_slope::trees#1 test_slope::return#0 ] ] with [ zp[2]:164 [ test_slope::return#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:135 [ test_slope::trees#2 test_slope::trees#6 test_slope::trees#1 test_slope::return#0 test_slope::return#1 ] ] with [ zp[2]:166 [ test_slope::return#10 ] ] - score: 1
Coalescing zero page register [ zp[2]:135 [ test_slope::trees#2 test_slope::trees#6 test_slope::trees#1 test_slope::return#0 test_slope::return#1 test_slope::return#10 ] ] with [ zp[2]:168 [ test_slope::return#11 ] ] - score: 1
Coalescing zero page register [ zp[2]:135 [ test_slope::trees#2 test_slope::trees#6 test_slope::trees#1 test_slope::return#0 test_slope::return#1 test_slope::return#10 test_slope::return#11 ] ] with [ zp[2]:170 [ test_slope::return#12 ] ] - score: 1
Coalescing zero page register [ zp[2]:135 [ test_slope::trees#2 test_slope::trees#6 test_slope::trees#1 test_slope::return#0 test_slope::return#1 test_slope::return#10 test_slope::return#11 test_slope::return#12 ] ] with [ zp[2]:172 [ test_slope::return#13 ] ] - score: 1
Coalescing zero page register [ zp[2]:141 [ printf_uint::uvalue#6 printf_uint::uvalue#2 printf_uint::uvalue#3 printf_uint::uvalue#4 printf_uint::uvalue#5 printf_uint::uvalue#0 printf_uint::uvalue#1 ] ] with [ zp[2]:150 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:143 [ memset::num#2 ] ] with [ zp[2]:205 [ memset::end#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:145 [ memset::str#3 memset::str#7 memset::str#8 ] ] with [ zp[2]:147 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:145 [ memset::str#3 memset::str#7 memset::str#8 memset::dst#2 memset::dst#4 memset::dst#1 ] ] with [ zp[2]:203 [ memset::str#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:153 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] ] with [ zp[2]:208 [ utoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:153 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 ] ] with [ zp[2]:213 [ utoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:155 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] with [ zp[2]:199 [ memcpy::source#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:157 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ] with [ zp[2]:201 [ memcpy::destination#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:159 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] ] with [ zp[2]:217 [ utoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:186 [ cursorLocation::return#0 ] ] with [ zp[2]:188 [ putchar::loc#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:186 [ cursorLocation::return#0 putchar::loc#0 ] ] with [ zp[2]:229 [ cursorLocation::return#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:191 [ cursorLocation::return#3 ] ] with [ zp[2]:193 [ setcursor::loc#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:211 [ utoa::digit_value#0 ] ] with [ zp[2]:215 [ utoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:219 [ cursorLocation::$3 ] ] with [ zp[2]:223 [ cursorLocation::$5 ] ] - score: 1
Coalescing zero page register [ zp[2]:225 [ cursorLocation::$0 ] ] with [ zp[2]:227 [ cursorLocation::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:135 [ test_slope::trees#2 test_slope::trees#6 test_slope::trees#1 test_slope::return#0 test_slope::return#1 test_slope::return#10 test_slope::return#11 test_slope::return#12 test_slope::return#13 ] ] with [ zp[2]:141 [ printf_uint::uvalue#6 printf_uint::uvalue#2 printf_uint::uvalue#3 printf_uint::uvalue#4 printf_uint::uvalue#5 printf_uint::uvalue#0 printf_uint::uvalue#1 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] ] - score: 6
Coalescing zero page register [ zp[2]:145 [ memset::str#3 memset::str#7 memset::str#8 memset::dst#2 memset::dst#4 memset::dst#1 memset::str#1 ] ] with [ zp[2]:197 [ newline::start#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:186 [ cursorLocation::return#0 putchar::loc#0 cursorLocation::return#1 ] ] with [ zp[2]:191 [ cursorLocation::return#3 setcursor::loc#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:186 [ cursorLocation::return#0 putchar::loc#0 cursorLocation::return#1 cursorLocation::return#3 setcursor::loc#0 ] ] with [ zp[2]:225 [ cursorLocation::$0 cursorLocation::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:135 [ test_slope::trees#2 test_slope::trees#6 test_slope::trees#1 test_slope::return#0 test_slope::return#1 test_slope::return#10 test_slope::return#11 test_slope::return#12 test_slope::return#13 printf_uint::uvalue#6 printf_uint::uvalue#2 printf_uint::uvalue#3 printf_uint::uvalue#4 printf_uint::uvalue#5 printf_uint::uvalue#0 printf_uint::uvalue#1 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] ] with [ zp[2]:159 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 ] ] - score: 2
Coalescing zero page register [ zp[2]:186 [ cursorLocation::return#0 putchar::loc#0 cursorLocation::return#1 cursorLocation::return#3 setcursor::loc#0 cursorLocation::$0 cursorLocation::$1 ] ] with [ zp[2]:219 [ cursorLocation::$3 cursorLocation::$5 ] ] - score: 1
Coalescing zero page register [ zp[2]:137 [ printf_str::putc#15 ] ] with [ zp[2]:130 [ test_slope::y#2 test_slope::y#1 ] ]
Coalescing zero page register [ zp[2]:139 [ printf_str::s#14 printf_str::s#15 printf_str::s#0 ] ] with [ zp[2]:132 [ test_slope::mapline#2 test_slope::mapline#1 ] ]
Coalescing zero page register [ zp[1]:149 [ utoa::digit#2 utoa::digit#1 ] ] with [ zp[1]:128 [ test_slope::x_inc#10 ] ]
Coalescing zero page register [ zp[2]:155 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 memcpy::source#0 ] ] with [ zp[2]:143 [ memset::num#2 memset::end#0 ] ]
Coalescing zero page register [ zp[2]:186 [ cursorLocation::return#0 putchar::loc#0 cursorLocation::return#1 cursorLocation::return#3 setcursor::loc#0 cursorLocation::$0 cursorLocation::$1 cursorLocation::$3 cursorLocation::$5 ] ] with [ zp[2]:157 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 memcpy::destination#0 ] ]
Coalescing zero page register [ zp[2]:231 [ memcpy::src_end#0 ] ] with [ zp[2]:221 [ cursorLocation::$4 ] ]
Coalescing zero page register [ zp[2]:153 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ] ] with [ zp[2]:137 [ printf_str::putc#15 test_slope::y#2 test_slope::y#1 ] ]
Coalescing zero page register [ zp[2]:211 [ utoa::digit_value#0 utoa_append::sub#0 ] ] with [ zp[2]:139 [ printf_str::s#14 printf_str::s#15 printf_str::s#0 test_slope::mapline#2 test_slope::mapline#1 ] ]
Allocated (was zp[1]:129) zp[1]:128 [ test_slope::y_inc#12 ]
Allocated (was zp[2]:135) zp[2]:129 [ test_slope::trees#2 test_slope::trees#6 test_slope::trees#1 test_slope::return#0 test_slope::return#1 test_slope::return#10 test_slope::return#11 test_slope::return#12 test_slope::return#13 printf_uint::uvalue#6 printf_uint::uvalue#2 printf_uint::uvalue#3 printf_uint::uvalue#4 printf_uint::uvalue#5 printf_uint::uvalue#0 printf_uint::uvalue#1 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 ]
Allocated (was zp[2]:145) zp[2]:131 [ memset::str#3 memset::str#7 memset::str#8 memset::dst#2 memset::dst#4 memset::dst#1 memset::str#1 newline::start#0 ]
Allocated (was zp[1]:149) zp[1]:133 [ utoa::digit#2 utoa::digit#1 test_slope::x_inc#10 ]
Allocated (was zp[2]:153) zp[2]:134 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 printf_str::putc#15 test_slope::y#2 test_slope::y#1 ]
Allocated (was zp[2]:155) zp[2]:136 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 memcpy::source#0 memset::num#2 memset::end#0 ]
Allocated (was zp[1]:174) zp[1]:138 [ cputc::c ]
Allocated (was zp[2]:186) zp[2]:139 [ cursorLocation::return#0 putchar::loc#0 cursorLocation::return#1 cursorLocation::return#3 setcursor::loc#0 cursorLocation::$0 cursorLocation::$1 cursorLocation::$3 cursorLocation::$5 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 memcpy::destination#0 ]
Allocated (was zp[2]:211) zp[2]:141 [ utoa::digit_value#0 utoa_append::sub#0 printf_str::s#14 printf_str::s#15 printf_str::s#0 test_slope::mapline#2 test_slope::mapline#1 ]
Allocated (was zp[2]:231) zp[2]:143 [ memcpy::src_end#0 cursorLocation::$4 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// https://adventofcode.com/2020/day/3
  // Upstart
  // Atari XL/XE executable XEX file with a single segment
// https://www.atarimax.com/jindroush.atari.org/afmtexe.html
.plugin "dk.camelot64.kickass.xexplugin.AtariXex"
.file [name="2020-03.xex", type="bin", segments="XexFile"]
.segmentdef XexFile [segments="Program", modify="XexFormat", _RunAddr=main]
.segmentdef Program [segments="Code, Data"]
.segmentdef Code [start=$2000]
.segmentdef Data [startAfter="Code"]
  // Global Constants & labels
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const STACK_BASE = $103
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  /// 2-byte saved memory scan counter
  .label SAVMSC = $58
  /// data under cursor
  .label OLDCHR = $5d
  /// 2-byte saved cursor memory address
  .label OLDADR = $5e
  /// Cursor inhibit flag, 0 turns on, any other number turns off. Cursor doesn't change until it moves next.
  .label CRSINH = $2f0
  /// Atari ZP registers
  /// 1-byte cursor row
  .label ROWCRS = $54
  /// 2-byte cursor column
  .label COLCRS = $55
.segment Code
  // main
main: {
    // [1] call clrscr
    jsr clrscr
    // [2] phi from main to main::@2 [phi:main->main::@2]
  __b2_from_main:
    jmp __b2
    // main::@2
  __b2:
    // [3] call test_slope
    // [80] phi from main::@2 to test_slope [phi:main::@2->test_slope]
  test_slope_from___b2:
    // [80] phi test_slope::y_inc#12 = 1 [phi:main::@2->test_slope#0] -- vbuz1=vbuc1 
    lda #1
    sta.z test_slope.y_inc
    // [80] phi test_slope::x_inc#10 = 3 [phi:main::@2->test_slope#1] -- vbuz1=vbuc1 
    lda #3
    sta.z test_slope.x_inc
    jsr test_slope
    // [4] test_slope::return#0 = test_slope::trees#2
    jmp __b3
    // main::@3
  __b3:
    // [5] printf_uint::uvalue#0 = test_slope::return#0
    // [6] call printf_str
    // [101] phi from main::@3 to printf_str [phi:main::@3->printf_str]
  printf_str_from___b3:
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@3->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s [phi:main::@3->printf_str#1] -- pbuz1=pbuc1 
    lda #<s
    sta.z printf_str.s
    lda #>s
    sta.z printf_str.s+1
    jsr printf_str
    // [7] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [8] call printf_uint
    // [110] phi from main::@4 to printf_uint [phi:main::@4->printf_uint]
  printf_uint_from___b4:
    // [110] phi printf_uint::uvalue#6 = printf_uint::uvalue#0 [phi:main::@4->printf_uint#0] -- register_copy 
    jsr printf_uint
    // [9] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [10] call printf_str
    // [101] phi from main::@5 to printf_str [phi:main::@5->printf_str]
  printf_str_from___b5:
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@5->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s1 [phi:main::@5->printf_str#1] -- pbuz1=pbuc1 
    lda #<s1
    sta.z printf_str.s
    lda #>s1
    sta.z printf_str.s+1
    jsr printf_str
    // [11] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [12] call test_slope
    // [80] phi from main::@6 to test_slope [phi:main::@6->test_slope]
  test_slope_from___b6:
    // [80] phi test_slope::y_inc#12 = 1 [phi:main::@6->test_slope#0] -- vbuz1=vbuc1 
    lda #1
    sta.z test_slope.y_inc
    // [80] phi test_slope::x_inc#10 = 1 [phi:main::@6->test_slope#1] -- vbuz1=vbuc1 
    lda #1
    sta.z test_slope.x_inc
    jsr test_slope
    // [13] test_slope::return#1 = test_slope::trees#2
    jmp __b7
    // main::@7
  __b7:
    // [14] printf_uint::uvalue#1 = test_slope::return#1
    // [15] call printf_str
    // [101] phi from main::@7 to printf_str [phi:main::@7->printf_str]
  printf_str_from___b7:
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@7->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s2 [phi:main::@7->printf_str#1] -- pbuz1=pbuc1 
    lda #<s2
    sta.z printf_str.s
    lda #>s2
    sta.z printf_str.s+1
    jsr printf_str
    // [16] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  __b8_from___b7:
    jmp __b8
    // main::@8
  __b8:
    // [17] call printf_uint
    // [110] phi from main::@8 to printf_uint [phi:main::@8->printf_uint]
  printf_uint_from___b8:
    // [110] phi printf_uint::uvalue#6 = printf_uint::uvalue#1 [phi:main::@8->printf_uint#0] -- register_copy 
    jsr printf_uint
    // [18] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  __b9_from___b8:
    jmp __b9
    // main::@9
  __b9:
    // [19] call printf_str
    // [101] phi from main::@9 to printf_str [phi:main::@9->printf_str]
  printf_str_from___b9:
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@9->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s1 [phi:main::@9->printf_str#1] -- pbuz1=pbuc1 
    lda #<s1
    sta.z printf_str.s
    lda #>s1
    sta.z printf_str.s+1
    jsr printf_str
    // [20] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  __b10_from___b9:
    jmp __b10
    // main::@10
  __b10:
    // [21] call test_slope
    // [80] phi from main::@10 to test_slope [phi:main::@10->test_slope]
  test_slope_from___b10:
    // [80] phi test_slope::y_inc#12 = 1 [phi:main::@10->test_slope#0] -- vbuz1=vbuc1 
    lda #1
    sta.z test_slope.y_inc
    // [80] phi test_slope::x_inc#10 = 3 [phi:main::@10->test_slope#1] -- vbuz1=vbuc1 
    lda #3
    sta.z test_slope.x_inc
    jsr test_slope
    // [22] test_slope::return#10 = test_slope::trees#2
    jmp __b11
    // main::@11
  __b11:
    // [23] printf_uint::uvalue#2 = test_slope::return#10
    // [24] call printf_str
    // [101] phi from main::@11 to printf_str [phi:main::@11->printf_str]
  printf_str_from___b11:
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@11->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s4 [phi:main::@11->printf_str#1] -- pbuz1=pbuc1 
    lda #<s4
    sta.z printf_str.s
    lda #>s4
    sta.z printf_str.s+1
    jsr printf_str
    // [25] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  __b12_from___b11:
    jmp __b12
    // main::@12
  __b12:
    // [26] call printf_uint
    // [110] phi from main::@12 to printf_uint [phi:main::@12->printf_uint]
  printf_uint_from___b12:
    // [110] phi printf_uint::uvalue#6 = printf_uint::uvalue#2 [phi:main::@12->printf_uint#0] -- register_copy 
    jsr printf_uint
    // [27] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  __b13_from___b12:
    jmp __b13
    // main::@13
  __b13:
    // [28] call printf_str
    // [101] phi from main::@13 to printf_str [phi:main::@13->printf_str]
  printf_str_from___b13:
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@13->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s1 [phi:main::@13->printf_str#1] -- pbuz1=pbuc1 
    lda #<s1
    sta.z printf_str.s
    lda #>s1
    sta.z printf_str.s+1
    jsr printf_str
    // [29] phi from main::@13 to main::@14 [phi:main::@13->main::@14]
  __b14_from___b13:
    jmp __b14
    // main::@14
  __b14:
    // [30] call test_slope
    // [80] phi from main::@14 to test_slope [phi:main::@14->test_slope]
  test_slope_from___b14:
    // [80] phi test_slope::y_inc#12 = 1 [phi:main::@14->test_slope#0] -- vbuz1=vbuc1 
    lda #1
    sta.z test_slope.y_inc
    // [80] phi test_slope::x_inc#10 = 5 [phi:main::@14->test_slope#1] -- vbuz1=vbuc1 
    lda #5
    sta.z test_slope.x_inc
    jsr test_slope
    // [31] test_slope::return#11 = test_slope::trees#2
    jmp __b15
    // main::@15
  __b15:
    // [32] printf_uint::uvalue#3 = test_slope::return#11
    // [33] call printf_str
    // [101] phi from main::@15 to printf_str [phi:main::@15->printf_str]
  printf_str_from___b15:
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@15->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s6 [phi:main::@15->printf_str#1] -- pbuz1=pbuc1 
    lda #<s6
    sta.z printf_str.s
    lda #>s6
    sta.z printf_str.s+1
    jsr printf_str
    // [34] phi from main::@15 to main::@16 [phi:main::@15->main::@16]
  __b16_from___b15:
    jmp __b16
    // main::@16
  __b16:
    // [35] call printf_uint
    // [110] phi from main::@16 to printf_uint [phi:main::@16->printf_uint]
  printf_uint_from___b16:
    // [110] phi printf_uint::uvalue#6 = printf_uint::uvalue#3 [phi:main::@16->printf_uint#0] -- register_copy 
    jsr printf_uint
    // [36] phi from main::@16 to main::@17 [phi:main::@16->main::@17]
  __b17_from___b16:
    jmp __b17
    // main::@17
  __b17:
    // [37] call printf_str
    // [101] phi from main::@17 to printf_str [phi:main::@17->printf_str]
  printf_str_from___b17:
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@17->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s1 [phi:main::@17->printf_str#1] -- pbuz1=pbuc1 
    lda #<s1
    sta.z printf_str.s
    lda #>s1
    sta.z printf_str.s+1
    jsr printf_str
    // [38] phi from main::@17 to main::@18 [phi:main::@17->main::@18]
  __b18_from___b17:
    jmp __b18
    // main::@18
  __b18:
    // [39] call test_slope
    // [80] phi from main::@18 to test_slope [phi:main::@18->test_slope]
  test_slope_from___b18:
    // [80] phi test_slope::y_inc#12 = 1 [phi:main::@18->test_slope#0] -- vbuz1=vbuc1 
    lda #1
    sta.z test_slope.y_inc
    // [80] phi test_slope::x_inc#10 = 7 [phi:main::@18->test_slope#1] -- vbuz1=vbuc1 
    lda #7
    sta.z test_slope.x_inc
    jsr test_slope
    // [40] test_slope::return#12 = test_slope::trees#2
    jmp __b19
    // main::@19
  __b19:
    // [41] printf_uint::uvalue#4 = test_slope::return#12
    // [42] call printf_str
    // [101] phi from main::@19 to printf_str [phi:main::@19->printf_str]
  printf_str_from___b19:
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@19->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s8 [phi:main::@19->printf_str#1] -- pbuz1=pbuc1 
    lda #<s8
    sta.z printf_str.s
    lda #>s8
    sta.z printf_str.s+1
    jsr printf_str
    // [43] phi from main::@19 to main::@20 [phi:main::@19->main::@20]
  __b20_from___b19:
    jmp __b20
    // main::@20
  __b20:
    // [44] call printf_uint
    // [110] phi from main::@20 to printf_uint [phi:main::@20->printf_uint]
  printf_uint_from___b20:
    // [110] phi printf_uint::uvalue#6 = printf_uint::uvalue#4 [phi:main::@20->printf_uint#0] -- register_copy 
    jsr printf_uint
    // [45] phi from main::@20 to main::@21 [phi:main::@20->main::@21]
  __b21_from___b20:
    jmp __b21
    // main::@21
  __b21:
    // [46] call printf_str
    // [101] phi from main::@21 to printf_str [phi:main::@21->printf_str]
  printf_str_from___b21:
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@21->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s1 [phi:main::@21->printf_str#1] -- pbuz1=pbuc1 
    lda #<s1
    sta.z printf_str.s
    lda #>s1
    sta.z printf_str.s+1
    jsr printf_str
    // [47] phi from main::@21 to main::@22 [phi:main::@21->main::@22]
  __b22_from___b21:
    jmp __b22
    // main::@22
  __b22:
    // [48] call test_slope
    // [80] phi from main::@22 to test_slope [phi:main::@22->test_slope]
  test_slope_from___b22:
    // [80] phi test_slope::y_inc#12 = 2 [phi:main::@22->test_slope#0] -- vbuz1=vbuc1 
    lda #2
    sta.z test_slope.y_inc
    // [80] phi test_slope::x_inc#10 = 1 [phi:main::@22->test_slope#1] -- vbuz1=vbuc1 
    lda #1
    sta.z test_slope.x_inc
    jsr test_slope
    // [49] test_slope::return#13 = test_slope::trees#2
    jmp __b23
    // main::@23
  __b23:
    // [50] printf_uint::uvalue#5 = test_slope::return#13
    // [51] call printf_str
    // [101] phi from main::@23 to printf_str [phi:main::@23->printf_str]
  printf_str_from___b23:
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@23->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s10 [phi:main::@23->printf_str#1] -- pbuz1=pbuc1 
    lda #<s10
    sta.z printf_str.s
    lda #>s10
    sta.z printf_str.s+1
    jsr printf_str
    // [52] phi from main::@23 to main::@24 [phi:main::@23->main::@24]
  __b24_from___b23:
    jmp __b24
    // main::@24
  __b24:
    // [53] call printf_uint
    // [110] phi from main::@24 to printf_uint [phi:main::@24->printf_uint]
  printf_uint_from___b24:
    // [110] phi printf_uint::uvalue#6 = printf_uint::uvalue#5 [phi:main::@24->printf_uint#0] -- register_copy 
    jsr printf_uint
    // [54] phi from main::@24 to main::@25 [phi:main::@24->main::@25]
  __b25_from___b24:
    jmp __b25
    // main::@25
  __b25:
    // [55] call printf_str
    // [101] phi from main::@25 to printf_str [phi:main::@25->printf_str]
  printf_str_from___b25:
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@25->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s1 [phi:main::@25->printf_str#1] -- pbuz1=pbuc1 
    lda #<s1
    sta.z printf_str.s
    lda #>s1
    sta.z printf_str.s+1
    jsr printf_str
    // [56] phi from main::@1 main::@25 to main::@1 [phi:main::@1/main::@25->main::@1]
  __b1_from___b1:
  __b1_from___b25:
    jmp __b1
    // main::@1
  __b1:
    jmp __b1_from___b1
  .segment Data
  .encoding "ascii"
    s: .text "1: encountered "
    .byte 0
    s1: .text @" trees\$9b"
    .byte 0
    s2: .text "2a: encountered "
    .byte 0
    s4: .text "2b: encountered "
    .byte 0
    s6: .text "2c: encountered "
    .byte 0
    s8: .text "2d: encountered "
    .byte 0
    s10: .text "2e: encountered "
    .byte 0
}
.segment Code
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// void cputc(__zp($8a) volatile char c)
cputc: {
    .const OFFSET_STACK_C = 0
    .label convertToScreenCode1_v = c
    .label c = $8a
    // [57] cputc::c = stackidx(char,cputc::OFFSET_STACK_C) -- vbuz1=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_C,x
    sta.z c
    // [58] if(cputc::c==' 'at) goto cputc::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #'\r'
    cmp.z c
    beq __b1
    jmp __b3
    // cputc::@3
  __b3:
    // [59] if(cputc::c==' 'at) goto cputc::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #'\$9b'
    cmp.z c
    beq __b2
    jmp __b8
    // cputc::@8
  __b8:
    // [60] if(cputc::c==$9b) goto cputc::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #$9b
    cmp.z c
    beq __b2
    jmp convertToScreenCode1
    // cputc::convertToScreenCode1
  convertToScreenCode1:
    // [61] cputc::convertToScreenCode1_return#0 = rawmap[*cputc::convertToScreenCode1_v#0] -- vbuxx=pbuc1_derefidx_(_deref_pbuc2) 
    ldy.z convertToScreenCode1_v
    ldx rawmap,y
    // [62] phi from cputc::convertToScreenCode1 to cputc::@6 [phi:cputc::convertToScreenCode1->cputc::@6]
  __b6_from_convertToScreenCode1:
    jmp __b6
    // cputc::@6
  __b6:
    // [63] call putchar
    jsr putchar
    jmp __b7
    // cputc::@7
  __b7:
    // [64] *COLCRS = ++ *COLCRS -- _deref_pwuc1=_inc__deref_pwuc1 
    inc COLCRS
    bne !+
    inc COLCRS+1
  !:
    // [65] if(*COLCRS==$28) goto cputc::@5 -- _deref_pwuc1_eq_vbuc2_then_la1 
    lda COLCRS+1
    bne !+
    lda COLCRS
    cmp #$28
    beq __b5
  !:
    // [66] phi from cputc::@7 to cputc::@4 [phi:cputc::@7->cputc::@4]
  __b4_from___b7:
    jmp __b4
    // cputc::@4
  __b4:
    // [67] call setcursor
    jsr setcursor
    jmp __breturn
    // cputc::@return
  __breturn:
    // [68] return 
    rts
    // cputc::@5
  __b5:
    // [69] *COLCRS = 0 -- _deref_pwuc1=vbuc2 
    lda #<0
    sta COLCRS
    lda #>0
    sta COLCRS+1
    // [70] call newline
    jsr newline
    jmp __breturn
    // cputc::@2
  __b2:
    // [71] *COLCRS = 0 -- _deref_pwuc1=vbuc2 
    // 0x0a LF, or atascii EOL
    lda #<0
    sta COLCRS
    lda #>0
    sta COLCRS+1
    // [72] call newline
    jsr newline
    jmp __breturn
    // cputc::@1
  __b1:
    // [73] *COLCRS = 0 -- _deref_pwuc1=vbuc2 
    // 0x0d, CR = just set the cursor x value to 0
    lda #<0
    sta COLCRS
    lda #>0
    sta COLCRS+1
    // [74] call setcursor
    jsr setcursor
    jmp __breturn
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    // [75] memset::str#7 = (void *)*SAVMSC -- pvoz1=_deref_qvoc1 
    lda SAVMSC
    sta.z memset.str
    lda SAVMSC+1
    sta.z memset.str+1
    // [76] call memset
  // Fill entire screen with spaces
    // [151] phi from clrscr to memset [phi:clrscr->memset]
  memset_from_clrscr:
    // [151] phi memset::str#3 = memset::str#7 [phi:clrscr->memset#0] -- register_copy 
    // [151] phi memset::num#2 = (unsigned int)$28*$18 [phi:clrscr->memset#1] -- vwuz1=vwuc1 
    lda #<$28*$18
    sta.z memset.num
    lda #>$28*$18
    sta.z memset.num+1
    jsr memset
    jmp __b1
    // clrscr::@1
  __b1:
    // [77] *OLDCHR = 0 -- _deref_pbuc1=vbuc2 
    // 0x00 is screencode for space character
    // set the old character to a space so the cursor doesn't reappear at the last position it was at
    lda #0
    sta OLDCHR
    // [78] call gotoxy
    jsr gotoxy
    jmp __breturn
    // clrscr::@return
  __breturn:
    // [79] return 
    rts
}
  // test_slope
// Count the number of trees on a specific slope
// __zp($81) unsigned int test_slope(__zp($85) char x_inc, __zp($80) char y_inc)
test_slope: {
    .label return = $81
    .label trees = $81
    .label mapline = $8d
    .label y = $86
    .label x_inc = $85
    .label y_inc = $80
    // [81] phi from test_slope to test_slope::@1 [phi:test_slope->test_slope::@1]
  __b1_from_test_slope:
    // [81] phi test_slope::trees#2 = 0 [phi:test_slope->test_slope::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z trees
    lda #>0
    sta.z trees+1
    // [81] phi test_slope::x#3 = 0 [phi:test_slope->test_slope::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [81] phi test_slope::mapline#2 = map [phi:test_slope->test_slope::@1#2] -- pbuz1=pbuc1 
    lda #<map
    sta.z mapline
    lda #>map
    sta.z mapline+1
    // [81] phi test_slope::y#2 = 0 [phi:test_slope->test_slope::@1#3] -- vwuz1=vwuc1 
    lda #<0
    sta.z y
    lda #>0
    sta.z y+1
    jmp __b1
    // test_slope::@1
  __b1:
    // [82] if(test_slope::y#2<$143) goto test_slope::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z y+1
    cmp #>$143
    bcc __b2
    bne !+
    lda.z y
    cmp #<$143
    bcc __b2
  !:
    jmp __breturn
    // test_slope::@return
  __breturn:
    // [83] return 
    rts
    // test_slope::@2
  __b2:
    // [84] if(test_slope::mapline#2[test_slope::x#3]!='#'at) goto test_slope::@3 -- pbuz1_derefidx_vbuxx_neq_vbuc1_then_la1 
    txa
    tay
    lda (mapline),y
    cmp #'#'
    bne __b3_from___b2
    jmp __b5
    // test_slope::@5
  __b5:
    // [85] test_slope::trees#1 = ++ test_slope::trees#2 -- vwuz1=_inc_vwuz1 
    inc.z trees
    bne !+
    inc.z trees+1
  !:
    // [86] phi from test_slope::@2 test_slope::@5 to test_slope::@3 [phi:test_slope::@2/test_slope::@5->test_slope::@3]
  __b3_from___b2:
  __b3_from___b5:
    // [86] phi test_slope::trees#6 = test_slope::trees#2 [phi:test_slope::@2/test_slope::@5->test_slope::@3#0] -- register_copy 
    jmp __b3
    // test_slope::@3
  __b3:
    // [87] test_slope::x#1 = test_slope::x#3 + test_slope::x_inc#10 -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z x_inc
    tax
    // [88] if(test_slope::x#1<$1f) goto test_slope::@4 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$1f
    bcc __b4_from___b3
    jmp __b6
    // test_slope::@6
  __b6:
    // [89] test_slope::x#2 = test_slope::x#1 - $1f -- vbuxx=vbuxx_minus_vbuc1 
    txa
    axs #$1f
    // [90] phi from test_slope::@3 test_slope::@6 to test_slope::@4 [phi:test_slope::@3/test_slope::@6->test_slope::@4]
  __b4_from___b3:
  __b4_from___b6:
    // [90] phi test_slope::x#8 = test_slope::x#1 [phi:test_slope::@3/test_slope::@6->test_slope::@4#0] -- register_copy 
    jmp __b4
    // test_slope::@4
  __b4:
    // [91] test_slope::$6 = test_slope::y_inc#12 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z y_inc
    asl
    // [92] test_slope::$7 = test_slope::$6 + test_slope::y_inc#12 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc.z y_inc
    // [93] test_slope::$8 = test_slope::$7 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [94] test_slope::$9 = test_slope::$8 + test_slope::y_inc#12 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc.z y_inc
    // [95] test_slope::$10 = test_slope::$9 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [96] test_slope::$11 = test_slope::$10 + test_slope::y_inc#12 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc.z y_inc
    // [97] test_slope::$12 = test_slope::$11 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [98] test_slope::$5 = test_slope::$12 + test_slope::y_inc#12 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc.z y_inc
    // [99] test_slope::mapline#1 = test_slope::mapline#2 + test_slope::$5 -- pbuz1=pbuz1_plus_vbuaa 
    clc
    adc.z mapline
    sta.z mapline
    bcc !+
    inc.z mapline+1
  !:
    // [100] test_slope::y#1 = test_slope::y#2 + test_slope::y_inc#12 -- vwuz1=vwuz1_plus_vbuz2 
    lda.z y_inc
    clc
    adc.z y
    sta.z y
    bcc !+
    inc.z y+1
  !:
    // [81] phi from test_slope::@4 to test_slope::@1 [phi:test_slope::@4->test_slope::@1]
  __b1_from___b4:
    // [81] phi test_slope::trees#2 = test_slope::trees#6 [phi:test_slope::@4->test_slope::@1#0] -- register_copy 
    // [81] phi test_slope::x#3 = test_slope::x#8 [phi:test_slope::@4->test_slope::@1#1] -- register_copy 
    // [81] phi test_slope::mapline#2 = test_slope::mapline#1 [phi:test_slope::@4->test_slope::@1#2] -- register_copy 
    // [81] phi test_slope::y#2 = test_slope::y#1 [phi:test_slope::@4->test_slope::@1#3] -- register_copy 
    jmp __b1
}
  // printf_str
/// Print a NUL-terminated string
// void printf_str(__zp($86) void (*putc)(char), __zp($8d) const char *s)
printf_str: {
    .label s = $8d
    .label putc = $86
    // [102] phi from printf_str printf_str::@2 to printf_str::@1 [phi:printf_str/printf_str::@2->printf_str::@1]
  __b1_from_printf_str:
  __b1_from___b2:
    // [102] phi printf_str::s#14 = printf_str::s#15 [phi:printf_str/printf_str::@2->printf_str::@1#0] -- register_copy 
    jmp __b1
    // printf_str::@1
  __b1:
    // [103] printf_str::c#1 = *printf_str::s#14 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // [104] printf_str::s#0 = ++ printf_str::s#14 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [105] if(0!=printf_str::c#1) goto printf_str::@2 -- 0_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    jmp __breturn
    // printf_str::@return
  __breturn:
    // [106] return 
    rts
    // printf_str::@2
  __b2:
    // [107] stackpush(char) = printf_str::c#1 -- _stackpushbyte_=vbuaa 
    pha
    // [108] callexecute *printf_str::putc#15  -- call__deref_pprz1 
    jsr icall1
    // sideeffect stackpullbytes(1) -- _stackpullbyte_1 
    pla
    jmp __b1_from___b2
    // Outside Flow
  icall1:
    jmp (putc)
}
  // printf_uint
// Print an unsigned int using a specific format
// void printf_uint(void (*putc)(char), __zp($81) unsigned int uvalue, char format_min_length, char format_justify_left, char format_sign_always, char format_zero_padding, char format_upper_case, char format_radix)
printf_uint: {
    .label uvalue = $81
    jmp __b1
    // printf_uint::@1
  __b1:
    // [111] *((char *)&printf_buffer) = 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [112] utoa::value#1 = printf_uint::uvalue#6
    // [113] call utoa
  // Format number into buffer
    // [164] phi from printf_uint::@1 to utoa [phi:printf_uint::@1->utoa]
  utoa_from___b1:
    jsr utoa
    jmp __b2
    // printf_uint::@2
  __b2:
    // [114] printf_number_buffer::buffer_sign#0 = *((char *)&printf_buffer) -- vbuaa=_deref_pbuc1 
    lda printf_buffer
    // [115] call printf_number_buffer
  // Print using format
    // [185] phi from printf_uint::@2 to printf_number_buffer [phi:printf_uint::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    jsr printf_number_buffer
    jmp __breturn
    // printf_uint::@return
  __breturn:
    // [116] return 
    rts
}
  // putchar
// Puts a character to the screen a the current location. Uses internal screencode. Deals with storing the old cursor value
// void putchar(char code)
putchar: {
    .label loc = $8b
    // [117] *(*OLDADR) = *OLDCHR -- _deref_(_deref_qbuc1)=_deref_pbuc2 
    lda OLDCHR
    ldy OLDADR
    sty.z $fe
    ldy OLDADR+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    // [118] call cursorLocation
    jsr cursorLocation
    // [119] cursorLocation::return#0 = cursorLocation::return#1
    jmp __b1
    // putchar::@1
  __b1:
    // [120] putchar::loc#0 = cursorLocation::return#0
    // [121] putchar::newChar#0 = cputc::convertToScreenCode1_return#0 -- vbuaa=vbuxx 
    txa
    // [122] *putchar::loc#0 = putchar::newChar#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (loc),y
    // [123] *OLDCHR = putchar::newChar#0 -- _deref_pbuc1=vbuaa 
    sta OLDCHR
    // [124] call setcursor
    jsr setcursor
    jmp __breturn
    // putchar::@return
  __breturn:
    // [125] return 
    rts
}
  // setcursor
// Handles cursor movement, displaying it if required, and inverting character it is over if there is one (and enabled)
setcursor: {
    .label loc = $8b
    // [126] *(*OLDADR) = *OLDCHR -- _deref_(_deref_qbuc1)=_deref_pbuc2 
    // save the current oldchr into oldadr
    lda OLDCHR
    ldy OLDADR
    sty.z $fe
    ldy OLDADR+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    // [127] call cursorLocation
    // work out the new location for oldadr based on new column/row
    jsr cursorLocation
    // [128] cursorLocation::return#3 = cursorLocation::return#1
    jmp __b3
    // setcursor::@3
  __b3:
    // [129] setcursor::loc#0 = cursorLocation::return#3
    // [130] setcursor::c#0 = *setcursor::loc#0 -- vbuxx=_deref_pbuz1 
    ldy #0
    lda (loc),y
    tax
    // [131] *OLDCHR = setcursor::c#0 -- _deref_pbuc1=vbuxx 
    stx OLDCHR
    // [132] *OLDADR = setcursor::loc#0 -- _deref_qbuc1=pbuz1 
    lda.z loc
    sta OLDADR
    lda.z loc+1
    sta OLDADR+1
    jmp __b2
    // setcursor::@2
  __b2:
    // [133] *CRSINH = 0 -- _deref_pbuc1=vbuc2 
    // cursor is on, so invert the inverse bit and turn cursor on
    lda #0
    sta CRSINH
    // [134] setcursor::c#1 = setcursor::c#0 ^ $80 -- vbuaa=vbuxx_bxor_vbuc1 
    txa
    eor #$80
    jmp __b1
    // setcursor::@1
  __b1:
    // [135] *(*OLDADR) = setcursor::c#1 -- _deref_(_deref_qbuc1)=vbuaa 
    ldy OLDADR
    sty.z $fe
    ldy OLDADR+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    jmp __breturn
    // setcursor::@return
  __breturn:
    // [136] return 
    rts
}
  // newline
newline: {
    .label start = $83
    // [137] *ROWCRS = ++ *ROWCRS -- _deref_pbuc1=_inc__deref_pbuc1 
    inc ROWCRS
    // [138] if(*ROWCRS!=$18) goto newline::@1 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$18
    cmp ROWCRS
    bne __b1_from_newline
    jmp __b3
    // newline::@3
  __b3:
    // [139] *(*OLDADR) = *(*OLDADR) ^ $80 -- _deref_(_deref_qbuc1)=_deref_(_deref_qbuc1)_bxor_vbuc2 
    ldy OLDADR
    sty.z $fe
    ldy OLDADR+1
    sty.z $ff
    ldy #0
    lda ($fe),y
    eor #$80
    sta ($fe),y
    jmp __b2
    // newline::@2
  __b2:
    // [140] newline::start#0 = *SAVMSC -- pbuz1=_deref_qbuc1 
    // move screen up 1 line
    lda SAVMSC
    sta.z start
    lda SAVMSC+1
    sta.z start+1
    // [141] memcpy::source#0 = newline::start#0 + $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z start
    sta.z memcpy.source
    lda #0
    adc.z start+1
    sta.z memcpy.source+1
    // [142] memcpy::destination#0 = (void *)newline::start#0 -- pvoz1=pvoz2 
    lda.z start
    sta.z memcpy.destination
    lda.z start+1
    sta.z memcpy.destination+1
    // [143] call memcpy
    jsr memcpy
    jmp __b4
    // newline::@4
  __b4:
    // [144] memset::str#1 = newline::start#0 + (unsigned int)$28*$17 -- pbuz1=pbuz1_plus_vwuc1 
    lda.z memset.str
    clc
    adc #<$28*$17
    sta.z memset.str
    lda.z memset.str+1
    adc #>$28*$17
    sta.z memset.str+1
    // [145] memset::str#8 = (void *)memset::str#1
    // [146] call memset
    // [151] phi from newline::@4 to memset [phi:newline::@4->memset]
  memset_from___b4:
    // [151] phi memset::str#3 = memset::str#8 [phi:newline::@4->memset#0] -- register_copy 
    // [151] phi memset::num#2 = $28 [phi:newline::@4->memset#1] -- vwuz1=vbuc1 
    lda #<$28
    sta.z memset.num
    lda #>$28
    sta.z memset.num+1
    jsr memset
    jmp __b5
    // newline::@5
  __b5:
    // [147] *ROWCRS = $18-1 -- _deref_pbuc1=vbuc2 
    lda #$18-1
    sta ROWCRS
    // [148] phi from newline newline::@5 to newline::@1 [phi:newline/newline::@5->newline::@1]
  __b1_from_newline:
  __b1_from___b5:
    jmp __b1
    // newline::@1
  __b1:
    // [149] call setcursor
    jsr setcursor
    jmp __breturn
    // newline::@return
  __breturn:
    // [150] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// void * memset(__zp($83) char *str, char c, __zp($88) unsigned int num)
memset: {
    .label end = $88
    .label dst = $83
    .label str = $83
    .label num = $88
    // [152] if(memset::num#2<=0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    jmp __b1
    // memset::@1
  __b1:
    // [153] memset::end#0 = (char *)memset::str#3 + memset::num#2 -- pbuz1=pbuz2_plus_vwuz1 
    clc
    lda.z end
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [154] memset::dst#4 = (char *)memset::str#3
    // [155] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [155] phi memset::dst#2 = memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [156] if(memset::dst#2!=memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [157] return 
    rts
    // memset::@3
  __b3:
    // [158] *memset::dst#2 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (dst),y
    // [159] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // gotoxy
// Set the cursor to the specified position
// void gotoxy(char x, char y)
gotoxy: {
    .const x = 0
    .const y = 0
    // [160] *COLCRS = gotoxy::x#0 -- _deref_pwuc1=vbuc2 
    lda #<x
    sta COLCRS
    lda #>x
    sta COLCRS+1
    // [161] *ROWCRS = gotoxy::y#0 -- _deref_pbuc1=vbuc2 
    lda #y
    sta ROWCRS
    // [162] call setcursor
    jsr setcursor
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [163] return 
    rts
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// void utoa(__zp($81) unsigned int value, __zp($86) char *buffer, char radix)
utoa: {
    .label digit_value = $8d
    .label buffer = $86
    .label digit = $85
    .label value = $81
    // [165] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
  __b1_from_utoa:
    // [165] phi utoa::buffer#11 = (char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [165] phi utoa::started#2 = 0 [phi:utoa->utoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [165] phi utoa::value#2 = utoa::value#1 [phi:utoa->utoa::@1#2] -- register_copy 
    // [165] phi utoa::digit#2 = 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // utoa::@1
  __b1:
    // [166] if(utoa::digit#2<5-1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #5-1
    bcc __b2
    jmp __b3
    // utoa::@3
  __b3:
    // [167] utoa::$11 = (char)utoa::value#2 -- vbuxx=_byte_vwuz1 
    ldx.z value
    // [168] *utoa::buffer#11 = DIGITS[utoa::$11] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // [169] utoa::buffer#3 = ++ utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [170] *utoa::buffer#3 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa::@return
  __breturn:
    // [171] return 
    rts
    // utoa::@2
  __b2:
    // [172] utoa::$10 = utoa::digit#2 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z digit
    asl
    // [173] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10] -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // [174] if(0!=utoa::started#2) goto utoa::@5 -- 0_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    jmp __b7
    // utoa::@7
  __b7:
    // [175] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [176] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
  __b4_from___b7:
    // [176] phi utoa::buffer#14 = utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [176] phi utoa::started#4 = utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [176] phi utoa::value#6 = utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    jmp __b4
    // utoa::@4
  __b4:
    // [177] utoa::digit#1 = ++ utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [165] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
  __b1_from___b4:
    // [165] phi utoa::buffer#11 = utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [165] phi utoa::started#2 = utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [165] phi utoa::value#2 = utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [165] phi utoa::digit#2 = utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // [178] utoa_append::buffer#0 = utoa::buffer#11
    // [179] utoa_append::value#0 = utoa::value#2
    // [180] utoa_append::sub#0 = utoa::digit_value#0
    // [181] call utoa_append
    // [209] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
  utoa_append_from___b5:
    jsr utoa_append
    // [182] utoa_append::return#0 = utoa_append::value#2
    jmp __b6
    // utoa::@6
  __b6:
    // [183] utoa::value#0 = utoa_append::return#0
    // [184] utoa::buffer#4 = ++ utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [176] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
  __b4_from___b6:
    // [176] phi utoa::buffer#14 = utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [176] phi utoa::started#4 = 1 [phi:utoa::@6->utoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [176] phi utoa::value#6 = utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// void printf_number_buffer(void (*putc)(char), __register(A) char buffer_sign, char *buffer_digits, char format_min_length, char format_justify_left, char format_sign_always, char format_zero_padding, char format_upper_case, char format_radix)
printf_number_buffer: {
    .label buffer_digits = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    .label putc = cputc
    jmp __b1
    // printf_number_buffer::@1
  __b1:
    // [186] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2 -- 0_eq_vbuaa_then_la1 
    cmp #0
    beq __b2_from___b1
    jmp __b3
    // printf_number_buffer::@3
  __b3:
    // [187] stackpush(char) = printf_number_buffer::buffer_sign#0 -- _stackpushbyte_=vbuaa 
    pha
    // [188] callexecute cputc  -- call_vprc1 
    jsr cputc
    // sideeffect stackpullbytes(1) -- _stackpullbyte_1 
    pla
    // [190] phi from printf_number_buffer::@1 printf_number_buffer::@3 to printf_number_buffer::@2 [phi:printf_number_buffer::@1/printf_number_buffer::@3->printf_number_buffer::@2]
  __b2_from___b1:
  __b2_from___b3:
    jmp __b2
    // printf_number_buffer::@2
  __b2:
    // [191] call printf_str
    // [101] phi from printf_number_buffer::@2 to printf_str [phi:printf_number_buffer::@2->printf_str]
  printf_str_from___b2:
    // [101] phi printf_str::putc#15 = printf_number_buffer::putc#0 [phi:printf_number_buffer::@2->printf_str#0] -- pprz1=pprc1 
    lda #<putc
    sta.z printf_str.putc
    lda #>putc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = printf_number_buffer::buffer_digits#0 [phi:printf_number_buffer::@2->printf_str#1] -- pbuz1=pbuc1 
    lda #<buffer_digits
    sta.z printf_str.s
    lda #>buffer_digits
    sta.z printf_str.s+1
    jsr printf_str
    jmp __breturn
    // printf_number_buffer::@return
  __breturn:
    // [192] return 
    rts
}
  // cursorLocation
// Return a pointer to the location of the cursor
cursorLocation: {
    .label __0 = $8b
    .label __1 = $8b
    .label __3 = $8b
    .label return = $8b
    .label __4 = $8f
    .label __5 = $8b
    // [193] cursorLocation::$3 = (unsigned int)*ROWCRS -- vwuz1=_word__deref_pbuc1 
    lda ROWCRS
    sta.z __3
    lda #0
    sta.z __3+1
    // [194] cursorLocation::$4 = cursorLocation::$3 << 2 -- vwuz1=vwuz2_rol_2 
    lda.z __3
    asl
    sta.z __4
    lda.z __3+1
    rol
    sta.z __4+1
    asl.z __4
    rol.z __4+1
    // [195] cursorLocation::$5 = cursorLocation::$4 + cursorLocation::$3 -- vwuz1=vwuz2_plus_vwuz1 
    clc
    lda.z __5
    adc.z __4
    sta.z __5
    lda.z __5+1
    adc.z __4+1
    sta.z __5+1
    // [196] cursorLocation::$0 = cursorLocation::$5 << 3 -- vwuz1=vwuz1_rol_3 
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    // [197] cursorLocation::$1 = *SAVMSC + cursorLocation::$0 -- pbuz1=_deref_qbuc1_plus_vwuz1 
    clc
    lda.z __1
    adc SAVMSC
    sta.z __1
    lda.z __1+1
    adc SAVMSC+1
    sta.z __1+1
    // [198] cursorLocation::return#1 = cursorLocation::$1 + *COLCRS -- pbuz1=pbuz1_plus__deref_pwuc1 
    clc
    lda.z return
    adc COLCRS
    sta.z return
    lda.z return+1
    adc COLCRS+1
    sta.z return+1
    jmp __breturn
    // cursorLocation::@return
  __breturn:
    // [199] return 
    rts
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// void * memcpy(__zp($8b) void *destination, __zp($88) char *source, unsigned int num)
memcpy: {
    .const num = $28*$17
    .label src_end = $8f
    .label dst = $8b
    .label src = $88
    .label destination = $8b
    .label source = $88
    // [200] memcpy::src_end#0 = (char *)(void *)memcpy::source#0 + memcpy::num#0 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<num
    sta.z src_end
    lda.z source+1
    adc #>num
    sta.z src_end+1
    // [201] memcpy::src#4 = (char *)(void *)memcpy::source#0
    // [202] memcpy::dst#4 = (char *)memcpy::destination#0
    // [203] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [203] phi memcpy::dst#2 = memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [203] phi memcpy::src#2 = memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [204] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [205] return 
    rts
    // memcpy::@2
  __b2:
    // [206] *memcpy::dst#2 = *memcpy::src#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [207] memcpy::dst#1 = ++ memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [208] memcpy::src#1 = ++ memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// __zp($81) unsigned int utoa_append(__zp($86) char *buffer, __zp($81) unsigned int value, __zp($8d) unsigned int sub)
utoa_append: {
    .label buffer = $86
    .label value = $81
    .label sub = $8d
    .label return = $81
    // [210] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
  __b1_from_utoa_append:
    // [210] phi utoa_append::digit#2 = 0 [phi:utoa_append->utoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [210] phi utoa_append::value#2 = utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    jmp __b1
    // utoa_append::@1
  __b1:
    // [211] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    jmp __b3
    // utoa_append::@3
  __b3:
    // [212] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa_append::@return
  __breturn:
    // [213] return 
    rts
    // utoa_append::@2
  __b2:
    // [214] utoa_append::digit#1 = ++ utoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // [215] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [210] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
  __b1_from___b2:
    // [210] phi utoa_append::digit#2 = utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [210] phi utoa_append::value#2 = utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // create a static table to map char value to screen value
  // use KickAsm functions to create a table of code -> screen code values, using cc65 algorithm
rawmap:
.var ht = Hashtable().put(0,64, 1,0, 2,32, 3,96) // the table for converting bit 6,7 into ora value
	.for(var i=0; i<256; i++) {
		.var idx = (i & $60) / 32
		.var mask = i & $9f
		.byte mask | ht.get(idx)
	}

  map: .text ".#......##..#.....#....#.#.#....#.#...#.##.#..........#...##...........#.....#.####........#........#.#...#.#.................#....#...#.#...#.#...#.#........#...........#..#.........#.#....#..#....#..#..#.#...#..##..#...........#..#.....#.......#.#..#...#...#.###...#...#.#...#.#...#.#.......#...#...#...##.##..#..................#.#.#....#..#.##....#........##...............#....#....#.#.......#.....##.#..##.#.....###.......#...........#...###....#..#.#...#..................#.........#.##...#......#.............#....#...#.#..#......#.###....#...#.....#..#........#.....#.....#...#..#.......#...#..............#..#...#...#........#...##........#..#........#....#......#......#.....#..#.###.......##....#.#..#..#..###..#..........................#...#....#.........#.#.......#.##................#..#.......#......######.....#.........#......##.......#....#..##.###..#...##.###..#.......#....#.......#.###...#.#.#........#........###...#.......#..........#.#..........#...#..........##.#....#....#........#.....#....#..#..#...#.#....##..#...##....#...........##...#..##.....#.......###.......#.#...#...#.......#.#....#.#....##.###........#..........#..............#....##..###......#.#....#.#......#.....##.....#....#..#......#...#........#.##..#.....#..#....#......#......#.#.#..........##....#.............#..#..........#.#......##..#...#......#.#..#....#....#.#..##.......#.#......##........#.#....#.#.....#..............#.........#.......#..#.#......##.........#..##.#......#......#..#.....#...#.....#.........#...........#..##..##.#..##...###..##.....#...#..##...##.#.#......#..........#.#.....##.#....#..##..#..#.........###.......#........##....#...##....##............#.#.##...............#....#..#......#.....#..#..#.#.....#.....##.#....#.#.....#.#.#.........#..#.#..##....#.....#....#.#...#.....#....#....#.#.#...........#................#.......#.......#..#.#...#.#......#..#.#...........#....#....###...#.#.#.##....##..###.#.#......#.##.#..##...#.#..#..#...#.....#.#.#.#.....###.#..#.#...#.#......#.#..##.#...#...#.#.....#.#.......#....#...#.##......#.#......#....#.....##.....#....................###...##.#...........#.......#..##.....##....#................#..#......#..........#........##..##.#...#...#.#.....#.##.#.....###..###.#...#.#..#....#.#..........#...#..#.#.#..#...#.##.##..#..#....#....####..........#..#.#..........#..........###...#.#..#..#...#..###.......####.#...#....#..#...#..#...........##....#.#...#....##....##.....#.#.##....#.##..#....#.#.#.#......#..#.###....#####.##......##..#.#.#..#........##.##..###.#...#..#..#......#..#.....#...###.....#.#....#.#..##.....#.#....#......#.#...#...#.#....#.#.....#.###.##...................#..........#........#.#...##.#.##......#.#.#..#....##.###..#...#.##....#....#.........#.#..#........#..#..#.#.####.....##..#..#.##.#......#.#..##.#...#..#..#.#.##..#.##..........#......##.#.....#.#.##..#..##.....##.#.##........#..#.....#...#.##.##...#....#.#.#.........##.....#....#....#.#....#...#..#.............#...#..#...#.##......##...##.........#......#..........##.#......#.....##....#.#.#.....#..#.###......#..#.#....#.....#..#.......#...#...#.#.#.#..##......#..............#...###.....#...##......#.#..#.#........#.#...##.#....#..........##...#.#....#...#.....#.######...##...#..#...#...#............#.....#....###..###.##..#.........#.......#........##..#....#...#.#..##.#.#.##.#.#...###.................#.#.#......#.#.#....#.....#.#.#...........#.##.#..#.###......###.#....#...........##.#.#....#...#...........#..##..........#...#.#...........#..###....#..##.......#.....#.....##....#..#.......#........#...##.##..#.#....#..###..#.....##.......#.........###.#...#..#....#.#...#....#..#.......##...#.#.#...#..........#..#.......#.......##.#..#.#....###.....#...#..#...#....#...#.##.#........#..........##.....#.#.##.#.#..#..##.......##.#.#.......##....#.#...........#..##.............##...#.#..#..#...........#.#......#.##.##..#...#...#...........#....###.#.#.##..#.#.#....#....#####.........#...#.....#.#....#............#..#........#.....#.#......#...#.........#...#...#.#.#..#.....##.##......#.#...#.......#...#.##...#..#..........#...#.....##..........#..#...#.#......#.......##......#...##..##..#....#..##.......#...#.#..##..#..#.....#.#................#....#.......#..#..###.......#...............##.....#..#......#....#.........#...###...#....#..##...#.#.#.........#.......#...#....#....#.#...#.#....##....#.#..##.#.....#..#..#....#..#.#..##.....##..#..#.#.#....#...#....#..#..........###.....#...##.#..#.#...#.#.#.#..#.##........#.#....#....#..........#....#.#.......#...#.....#........#........#....#..#.#..#...#...................#....####..#..#..#..#....#..#.#...##.#..........#.##..#.....##...................##..........#....##....###.....#..#...#.#....##.........#..#...................##..###....#.##............#.#...###.#..##...#...........#.....#..#......#.....#...........#..##...#.....#.....#.#............#....###.#..#.#.#....#..##...#.......#.##.....#..........#.#..#...#.............##...........#..............#.....#..#......#......###....#...#...........#.....#...#.......###.....#..........##......##.#.#.....#....#.......#..#......#.......#..#...#.###...........#..#.###......#...#.#...........#.#...##........#.#.#........#.#.....#.....##..##.#.#..#.#....#.#.##....#.#.#......##.....#...#.#...###...#..#......#.#.#..#...#........#..##...........#..#..#..#..#..##...#...#...##.#..#.#....#.#.....####.#..#..#....##..#.#..#....#..#......#.....#.#.#........#..#.....#......#............#.#..###.....#...#...#.....##..#.#...##..#...........####....#.##....##.#......#.....##.#..#.##..#....#.###..........##....###...#......#.#....##...........................#..#.....#..#.#...#.#..#.....#...#..####.##....#.##..##...##.##.....#......#...#.##...........#.......##.###..#.....##...#.........##....###....##...###................#....#####........#.#.#.##.....#.#....####.##........#............#......#........................###.....##......#..##.#......#.#...........##.#....##.#....................#.#.#.......#.#.#........#..#.......##.......#...#...#....#......#....##.##..#..............#......#....#......#.........##..................#.#....##..#.......#............#.......#...........#........#....#.#..##.#....#...#....#.#.#..#..#.#.#.#...#....#....#.#.#....#...#.#..#......#.....#.#...........#.#....##.....#...........#...#....#....##.....###..#..........#..#..#.....#....#.#.###..........#.##....#...##..#................#.##.##.......#...#.##...##...#.........#..#....#......#......#.........#.##...#...##.#.........#......#........#.....#....................#...#.....##.........#.#..#...#......#...#.......#......#.##.......#...#.##.#..##..#.......#.#............#...###..#........#.......##.......#....#..#.......#..#.#....#.#.............#....#...##.##....#....##..............#......#.......#....#....#..#..##......##.#..#.#..##......##......#.##.##......#.............##.#...#.....#.......#...##.#....#..#......#.##.........##.####.#...#.#....#..........#........#.....#..#....#...#.####....##......#..#..#.##..#.............###.#..#..#....#.......#.........#....#.....#....#.#.#...#.#.....##.#...#...#.#..#.....##......##.##.#.....#..#.......#.##...##.......#..##......#..........#..#....#.......#.#...#.....#.................#..............#.#.#.....#.#....#..#.......#..........#.##....#....#..#.....#.......#........#....#.....##..#.........##..#..#.#..##.#...#..........#....#..........#..#.#......#.##..#..#.##.....##.####....#.....#.#...##.....#.#....#.#........#..........#...#.#.##.##....##..#...#...#....#.#.......#..#...#..#..##..#.....#....#........###.....#..........#..#.##....#.#.....#........##....#....#.......#.....#..........#........###...##.....#.#..#...##.........#.#..#....#...##...........#.........#...#......#.#.#.........#..#.#.#...........##.###....#..#.......#.....#.#...#......#..#........##.#....##....#...#.##.........#.####.#..#...........##.#.#........#....#..#.....#..##.####.#...##...#...........#.#.........##.#..#..#...#.#.#.........#..#.#......###............#...#......#.......#....#...#...#..#...##.#.#...##..#...#...#.......##.......#.#.......#..........#.#................#...#..#...#.#...#.#...##.####..##.##....#..##.#..####.......##.#........#...#......###....##...#.#..#.##.....##.....###..#...#.###.###.......#...#.....#...#..#..##..#.......#...##.....##........#.#.##..#...#..#....#....#..###....#.#..#.#.#.#.#..........#.#..#..##.......###.....................##.#......#.##.....#.........#.......................#.#.....##..#........##.......#..##..#.##.#.#.....##.#.##.##.#....##....#...#.....#.........#.....#.....#.........#.##.#.###.#......#.........#..#.##...#.......###......##........#......#...........#.#...##...#........#.##.............##............#.####..#....#...#...#..#....#..#.#.#.#..#.........#......#.##............#.....#........#........#.#.##.#..#.#..#..###......###....#.###.....#.#.#.##........#..###.#..#...##.....#....#...#.#.........#....#.....#...#............#........##.......#.##..####..#..#....#....#..#..#...#.##...##.....#............#...#...........#.......#.....#...#.#.#...........#.....#...##...............#........##...........#...#.#..##.#...#....#....#........#.##..#.#.......#...#......#..............#.#..#..#.....##.#..#....#.##.......#......#.##..#......#........#.##.#...#.....#......###..#.......##....................#.#.#.....#.##.......#.......#....#......#.#.....#...##........#...#..#.#.........#.##...........#.##...##......#....#.###.#.#.#...####..#....###..........#...#.....##....#.#.##.###..###.#.#.....#.##.........#..#...#.#.................##.###.........#.#....#.#...#.###..#.#....#..............#.##.#......#..#....##.#..#.......#..##..#..#.###......##..........#..#.##....#.#....#....#.#..#.............#.....#..#....#.##...#..#.#.#.........###..#..#.....#.....##..##...##....#..#......#............#....#..........#....#..##..#...#......#.....#.#....#..##..#....#.#.#...#................##..#.........#........#..##..#..#......###.....#..#.........#..#.##..........#.#..#..."
  .byte 0
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __b16
Removing instruction jmp __b17
Removing instruction jmp __b18
Removing instruction jmp __b19
Removing instruction jmp __b20
Removing instruction jmp __b21
Removing instruction jmp __b22
Removing instruction jmp __b23
Removing instruction jmp __b24
Removing instruction jmp __b25
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b8
Removing instruction jmp convertToScreenCode1
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #1
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #>0
Replacing instruction ldx #0 with TAX
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Replacing instruction ldy #0 with TAY
Replacing instruction lda #0 with TXA
Replacing instruction ldy #0 with TAY
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b3_from___b2 with __b3
Replacing label __b4_from___b3 with __b4
Replacing label __b1_from___b2 with __b1
Replacing label __b1_from_newline with __b1
Replacing label __b2_from___b3 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b1_from___b2 with __b1
Removing instruction __b2_from_main:
Removing instruction test_slope_from___b2:
Removing instruction printf_str_from___b3:
Removing instruction __b4_from___b3:
Removing instruction printf_uint_from___b4:
Removing instruction __b5_from___b4:
Removing instruction printf_str_from___b5:
Removing instruction __b6_from___b5:
Removing instruction test_slope_from___b6:
Removing instruction printf_str_from___b7:
Removing instruction __b8_from___b7:
Removing instruction printf_uint_from___b8:
Removing instruction __b9_from___b8:
Removing instruction printf_str_from___b9:
Removing instruction __b10_from___b9:
Removing instruction test_slope_from___b10:
Removing instruction printf_str_from___b11:
Removing instruction __b12_from___b11:
Removing instruction printf_uint_from___b12:
Removing instruction __b13_from___b12:
Removing instruction printf_str_from___b13:
Removing instruction __b14_from___b13:
Removing instruction test_slope_from___b14:
Removing instruction printf_str_from___b15:
Removing instruction __b16_from___b15:
Removing instruction printf_uint_from___b16:
Removing instruction __b17_from___b16:
Removing instruction printf_str_from___b17:
Removing instruction __b18_from___b17:
Removing instruction test_slope_from___b18:
Removing instruction printf_str_from___b19:
Removing instruction __b20_from___b19:
Removing instruction printf_uint_from___b20:
Removing instruction __b21_from___b20:
Removing instruction printf_str_from___b21:
Removing instruction __b22_from___b21:
Removing instruction test_slope_from___b22:
Removing instruction printf_str_from___b23:
Removing instruction __b24_from___b23:
Removing instruction printf_uint_from___b24:
Removing instruction __b25_from___b24:
Removing instruction printf_str_from___b25:
Removing instruction __b1_from___b1:
Removing instruction __b1_from___b25:
Removing instruction __b6_from_convertToScreenCode1:
Removing instruction __b4_from___b7:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b5:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b6:
Removing instruction __b1_from_printf_str:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_newline:
Removing instruction __b1_from___b5:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b4_from___b7:
Removing instruction utoa_append_from___b5:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction printf_str_from___b2:
Removing instruction __b1_from_memcpy:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction __b16:
Removing instruction __b17:
Removing instruction __b18:
Removing instruction __b19:
Removing instruction __b20:
Removing instruction __b21:
Removing instruction __b22:
Removing instruction __b23:
Removing instruction __b24:
Removing instruction __b25:
Removing instruction __b3:
Removing instruction __b8:
Removing instruction convertToScreenCode1:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b4:
Removing instruction memset_from_clrscr:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_test_slope:
Removing instruction __breturn:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b1_from___b4:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction utoa_from___b1:
Removing instruction __b2:
Removing instruction printf_number_buffer_from___b2:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b2:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b2:
Removing instruction __b4:
Removing instruction memset_from___b4:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_utoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b1:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_utoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Replacing instruction lda #0 with TYA
Replacing instruction lda #0 with TYA
Removing instruction lda.z digit_value+1
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant unsigned int *COLCRS = (unsigned int *) 85
__constant char * const CRSINH = (char *) 752
__constant char DIGITS[] = "0123456789abcdef"atz
__constant char OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
__constant char ** const OLDADR = (char **) 94
__constant char * const OLDCHR = (char *) 93
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant unsigned int RADIX_DECIMAL_VALUES[] = { $2710, $3e8, $64, $a }
__constant char *ROWCRS = (char *) 84
__constant char ** const SAVMSC = (char **) 88
__constant char SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
__constant unsigned int STACK_BASE = $103
void clrscr()
__stackcall void cputc(volatile char c)
__constant char cputc::OFFSET_STACK_C = 0
__loadstore volatile char cputc::c // zp[1]:138 1334.6666666666667
char cputc::convertToScreenCode1_return
char cputc::convertToScreenCode1_return#0 // reg byte x 1833.6666666666665
char *cputc::convertToScreenCode1_v
__constant char *cputc::convertToScreenCode1_v#0 = &cputc::c // convertToScreenCode1_v
char * cursorLocation()
unsigned int cursorLocation::$0 // zp[2]:139 2000002.0
char *cursorLocation::$1 // zp[2]:139 2000002.0
unsigned int cursorLocation::$3 // zp[2]:139 1500001.5
unsigned int cursorLocation::$4 // zp[2]:143 2000002.0
unsigned int cursorLocation::$5 // zp[2]:139 2000002.0
char *cursorLocation::return
char *cursorLocation::return#0 // return zp[2]:139 20002.0
char *cursorLocation::return#1 // return zp[2]:139 277500.75
char *cursorLocation::return#3 // return zp[2]:139 200002.0
void gotoxy(char x , char y)
char gotoxy::x
__constant char gotoxy::x#0 = 0 // x
char gotoxy::y
__constant char gotoxy::y#0 = 0 // y
void main()
__constant char main::s[$10] = "1: encountered "at
__constant char main::s1[8] = " trees
"at
__constant char main::s10[$11] = "2e: encountered "at
__constant char main::s2[$11] = "2a: encountered "at
__constant char main::s4[$11] = "2b: encountered "at
__constant char main::s6[$11] = "2c: encountered "at
__constant char main::s8[$11] = "2d: encountered "at
__constant char *map = ".#......##..#.....#....#.#.#....#.#...#.##.#..........#...##...........#.....#.####........#........#.#...#.#.................#....#...#.#...#.#...#.#........#...........#..#.........#.#....#..#....#..#..#.#...#..##..#...........#..#.....#.......#.#..#...#...#.###...#...#.#...#.#...#.#.......#...#...#...##.##..#..................#.#.#....#..#.##....#........##...............#....#....#.#.......#.....##.#..##.#.....###.......#...........#...###....#..#.#...#..................#.........#.##...#......#.............#....#...#.#..#......#.###....#...#.....#..#........#.....#.....#...#..#.......#...#..............#..#...#...#........#...##........#..#........#....#......#......#.....#..#.###.......##....#.#..#..#..###..#..........................#...#....#.........#.#.......#.##................#..#.......#......######.....#.........#......##.......#....#..##.###..#...##.###..#.......#....#.......#.###...#.#.#........#........###...#.......#..........#.#..........#...#..........##.#....#....#........#.....#....#..#..#...#.#....##..#...##....#...........##...#..##.....#.......###.......#.#...#...#.......#.#....#.#....##.###........#..........#..............#....##..###......#.#....#.#......#.....##.....#....#..#......#...#........#.##..#.....#..#....#......#......#.#.#..........##....#.............#..#..........#.#......##..#...#......#.#..#....#....#.#..##.......#.#......##........#.#....#.#.....#..............#.........#.......#..#.#......##.........#..##.#......#......#..#.....#...#.....#.........#...........#..##..##.#..##...###..##.....#...#..##...##.#.#......#..........#.#.....##.#....#..##..#..#.........###.......#........##....#...##....##............#.#.##...............#....#..#......#.....#..#..#.#.....#.....##.#....#.#.....#.#.#.........#..#.#..##....#.....#....#.#...#.....#....#....#.#.#...........#................#.......#.......#..#.#...#.#......#..#.#...........#....#....###...#.#.#.##....##..###.#.#......#.##.#..##...#.#..#..#...#.....#.#.#.#.....###.#..#.#...#.#......#.#..##.#...#...#.#.....#.#.......#....#...#.##......#.#......#....#.....##.....#....................###...##.#...........#.......#..##.....##....#................#..#......#..........#........##..##.#...#...#.#.....#.##.#.....###..###.#...#.#..#....#.#..........#...#..#.#.#..#...#.##.##..#..#....#....####..........#..#.#..........#..........###...#.#..#..#...#..###.......####.#...#....#..#...#..#...........##....#.#...#....##....##.....#.#.##....#.##..#....#.#.#.#......#..#.###....#####.##......##..#.#.#..#........##.##..###.#...#..#..#......#..#.....#...###.....#.#....#.#..##.....#.#....#......#.#...#...#.#....#.#.....#.###.##...................#..........#........#.#...##.#.##......#.#.#..#....##.###..#...#.##....#....#.........#.#..#........#..#..#.#.####.....##..#..#.##.#......#.#..##.#...#..#..#.#.##..#.##..........#......##.#.....#.#.##..#..##.....##.#.##........#..#.....#...#.##.##...#....#.#.#.........##.....#....#....#.#....#...#..#.............#...#..#...#.##......##...##.........#......#..........##.#......#.....##....#.#.#.....#..#.###......#..#.#....#.....#..#.......#...#...#.#.#.#..##......#..............#...###.....#...##......#.#..#.#........#.#...##.#....#..........##...#.#....#...#.....#.######...##...#..#...#...#............#.....#....###..###.##..#.........#.......#........##..#....#...#.#..##.#.#.##.#.#...###.................#.#.#......#.#.#....#.....#.#.#...........#.##.#..#.###......###.#....#...........##.#.#....#...#...........#..##..........#...#.#...........#..###....#..##.......#.....#.....##....#..#.......#........#...##.##..#.#....#..###..#.....##.......#.........###.#...#..#....#.#...#....#..#.......##...#.#.#...#..........#..#.......#.......##.#..#.#....###.....#...#..#...#....#...#.##.#........#..........##.....#.#.##.#.#..#..##.......##.#.#.......##....#.#...........#..##.............##...#.#..#..#...........#.#......#.##.##..#...#...#...........#....###.#.#.##..#.#.#....#....#####.........#...#.....#.#....#............#..#........#.....#.#......#...#.........#...#...#.#.#..#.....##.##......#.#...#.......#...#.##...#..#..........#...#.....##..........#..#...#.#......#.......##......#...##..##..#....#..##.......#...#.#..##..#..#.....#.#................#....#.......#..#..###.......#...............##.....#..#......#....#.........#...###...#....#..##...#.#.#.........#.......#...#....#....#.#...#.#....##....#.#..##.#.....#..#..#....#..#.#..##.....##..#..#.#.#....#...#....#..#..........###.....#...##.#..#.#...#.#.#.#..#.##........#.#....#....#..........#....#.#.......#...#.....#........#........#....#..#.#..#...#...................#....####..#..#..#..#....#..#.#...##.#..........#.##..#.....##...................##..........#....##....###.....#..#...#.#....##.........#..#...................##..###....#.##............#.#...###.#..##...#...........#.....#..#......#.....#...........#..##...#.....#.....#.#............#....###.#..#.#.#....#..##...#.......#.##.....#..........#.#..#...#.............##...........#..............#.....#..#......#......###....#...#...........#.....#...#.......###.....#..........##......##.#.#.....#....#.......#..#......#.......#..#...#.###...........#..#.###......#...#.#...........#.#...##........#.#.#........#.#.....#.....##..##.#.#..#.#....#.#.##....#.#.#......##.....#...#.#...###...#..#......#.#.#..#...#........#..##...........#..#..#..#..#..##...#...#...##.#..#.#....#.#.....####.#..#..#....##..#.#..#....#..#......#.....#.#.#........#..#.....#......#............#.#..###.....#...#...#.....##..#.#...##..#...........####....#.##....##.#......#.....##.#..#.##..#....#.###..........##....###...#......#.#....##...........................#..#.....#..#.#...#.#..#.....#...#..####.##....#.##..##...##.##.....#......#...#.##...........#.......##.###..#.....##...#.........##....###....##...###................#....#####........#.#.#.##.....#.#....####.##........#............#......#........................###.....##......#..##.#......#.#...........##.#....##.#....................#.#.#.......#.#.#........#..#.......##.......#...#...#....#......#....##.##..#..............#......#....#......#.........##..................#.#....##..#.......#............#.......#...........#........#....#.#..##.#....#...#....#.#.#..#..#.#.#.#...#....#....#.#.#....#...#.#..#......#.....#.#...........#.#....##.....#...........#...#....#....##.....###..#..........#..#..#.....#....#.#.###..........#.##....#...##..#................#.##.##.......#...#.##...##...#.........#..#....#......#......#.........#.##...#...##.#.........#......#........#.....#....................#...#.....##.........#.#..#...#......#...#.......#......#.##.......#...#.##.#..##..#.......#.#............#...###..#........#.......##.......#....#..#.......#..#.#....#.#.............#....#...##.##....#....##..............#......#.......#....#....#..#..##......##.#..#.#..##......##......#.##.##......#.............##.#...#.....#.......#...##.#....#..#......#.##.........##.####.#...#.#....#..........#........#.....#..#....#...#.####....##......#..#..#.##..#.............###.#..#..#....#.......#.........#....#.....#....#.#.#...#.#.....##.#...#...#.#..#.....##......##.##.#.....#..#.......#.##...##.......#..##......#..........#..#....#.......#.#...#.....#.................#..............#.#.#.....#.#....#..#.......#..........#.##....#....#..#.....#.......#........#....#.....##..#.........##..#..#.#..##.#...#..........#....#..........#..#.#......#.##..#..#.##.....##.####....#.....#.#...##.....#.#....#.#........#..........#...#.#.##.##....##..#...#...#....#.#.......#..#...#..#..##..#.....#....#........###.....#..........#..#.##....#.#.....#........##....#....#.......#.....#..........#........###...##.....#.#..#...##.........#.#..#....#...##...........#.........#...#......#.#.#.........#..#.#.#...........##.###....#..#.......#.....#.#...#......#..#........##.#....##....#...#.##.........#.####.#..#...........##.#.#........#....#..#.....#..##.####.#...##...#...........#.#.........##.#..#..#...#.#.#.........#..#.#......###............#...#......#.......#....#...#...#..#...##.#.#...##..#...#...#.......##.......#.#.......#..........#.#................#...#..#...#.#...#.#...##.####..##.##....#..##.#..####.......##.#........#...#......###....##...#.#..#.##.....##.....###..#...#.###.###.......#...#.....#...#..#..##..#.......#...##.....##........#.#.##..#...#..#....#....#..###....#.#..#.#.#.#.#..........#.#..#..##.......###.....................##.#......#.##.....#.........#.......................#.#.....##..#........##.......#..##..#.##.#.#.....##.#.##.##.#....##....#...#.....#.........#.....#.....#.........#.##.#.###.#......#.........#..#.##...#.......###......##........#......#...........#.#...##...#........#.##.............##............#.####..#....#...#...#..#....#..#.#.#.#..#.........#......#.##............#.....#........#........#.#.##.#..#.#..#..###......###....#.###.....#.#.#.##........#..###.#..#...##.....#....#...#.#.........#....#.....#...#............#........##.......#.##..####..#..#....#....#..#..#...#.##...##.....#............#...#...........#.......#.....#...#.#.#...........#.....#...##...............#........##...........#...#.#..##.#...#....#....#........#.##..#.#.......#...#......#..............#.#..#..#.....##.#..#....#.##.......#......#.##..#......#........#.##.#...#.....#......###..#.......##....................#.#.#.....#.##.......#.......#....#......#.#.....#...##........#...#..#.#.........#.##...........#.##...##......#....#.###.#.#.#...####..#....###..........#...#.....##....#.#.##.###..###.#.#.....#.##.........#..#...#.#.................##.###.........#.#....#.#...#.###..#.#....#..............#.##.#......#..#....##.#..#.......#..##..#..#.###......##..........#..#.##....#.#....#....#.#..#.............#.....#..#....#.##...#..#.#.#.........###..#..#.....#.....##..##...##....#..#......#............#....#..........#....#..##..#...#......#.....#.#....#..##..#....#.#.#...#................##..#.........#........#..##..#..#......###.....#..#.........#..#.##..........#.#..#..."at
void * memcpy(void *destination , void *source , unsigned int num)
void *memcpy::destination
void *memcpy::destination#0 // destination zp[2]:139 3333.6666666666665
char *memcpy::dst
char *memcpy::dst#1 // dst zp[2]:139 1000001.0
char *memcpy::dst#2 // dst zp[2]:139 1033334.6666666667
char *memcpy::dst#4 // dst zp[2]:139 200002.0
unsigned int memcpy::num
__constant unsigned int memcpy::num#0 = (unsigned int)$28*$17 // num
void *memcpy::return
void *memcpy::source
char *memcpy::source#0 // source zp[2]:136 3333.6666666666665
char *memcpy::src
char *memcpy::src#1 // src zp[2]:136 2000002.0
char *memcpy::src#2 // src zp[2]:136 1025001.25
char *memcpy::src#4 // src zp[2]:136 100001.0
char *memcpy::src_end
char *memcpy::src_end#0 // src_end zp[2]:143 137500.25
void * memset(void *str , char c , unsigned int num)
char memset::c
char *memset::dst
char *memset::dst#1 // dst zp[2]:131 2000002.0
char *memset::dst#2 // dst zp[2]:131 1366668.3333333335
char *memset::dst#4 // dst zp[2]:131 200002.0
char *memset::end
char *memset::end#0 // end zp[2]:136 183333.6666666667
unsigned int memset::num
unsigned int memset::num#2 // num zp[2]:136 100001.0
void *memset::return
void *memset::str
char *memset::str#1 // str zp[2]:131 10001.0
void *memset::str#3 // str zp[2]:131 3337.333333333333
void *memset::str#7 // str zp[2]:131 22.0
void *memset::str#8 // str zp[2]:131 20002.0
void newline()
char *newline::start
char *newline::start#0 // start zp[2]:131 7500.75
__loadstore struct printf_buffer_number printf_buffer = {} // mem[12]
void printf_number_buffer(void (*putc)(char) , char buffer_sign , char *buffer_digits , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_buffer_number printf_number_buffer::buffer
char *printf_number_buffer::buffer_digits
__constant char *printf_number_buffer::buffer_digits#0 = (char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS // buffer_digits
char printf_number_buffer::buffer_sign
char printf_number_buffer::buffer_sign#0 // reg byte a 71.0
struct printf_format_number printf_number_buffer::format
char printf_number_buffer::format_justify_left
char printf_number_buffer::format_min_length
char printf_number_buffer::format_radix
char printf_number_buffer::format_sign_always
char printf_number_buffer::format_upper_case
char printf_number_buffer::format_zero_padding
signed char printf_number_buffer::len
signed char printf_number_buffer::padding
void (*printf_number_buffer::putc)(char)
__constant void (*printf_number_buffer::putc#0)(char) = &cputc // putc
void printf_str(void (*putc)(char) , const char *s)
char printf_str::c
char printf_str::c#1 // reg byte a 10001.0
void (*printf_str::putc)(char)
void (*printf_str::putc#15)(char) // putc zp[2]:134
const char *printf_str::s
const char *printf_str::s#0 // s zp[2]:141 10001.0
const char *printf_str::s#14 // s zp[2]:141 15502.0
const char *printf_str::s#15 // s zp[2]:141 1001.0
void printf_uint(void (*putc)(char) , unsigned int uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_format_number printf_uint::format
char printf_uint::format_justify_left
char printf_uint::format_min_length
char printf_uint::format_radix
char printf_uint::format_sign_always
char printf_uint::format_upper_case
char printf_uint::format_zero_padding
void (*printf_uint::putc)(char)
unsigned int printf_uint::uvalue
unsigned int printf_uint::uvalue#0 // uvalue zp[2]:129 1.3333333333333333
unsigned int printf_uint::uvalue#1 // uvalue zp[2]:129 1.3333333333333333
unsigned int printf_uint::uvalue#2 // uvalue zp[2]:129 1.3333333333333333
unsigned int printf_uint::uvalue#3 // uvalue zp[2]:129 1.3333333333333333
unsigned int printf_uint::uvalue#4 // uvalue zp[2]:129 1.3333333333333333
unsigned int printf_uint::uvalue#5 // uvalue zp[2]:129 1.3333333333333333
unsigned int printf_uint::uvalue#6 // uvalue zp[2]:129 11.5
void putchar(char code)
char putchar::code
char *putchar::loc
char *putchar::loc#0 // loc zp[2]:139 10001.0
char putchar::newChar
char putchar::newChar#0 // reg byte a 15001.5
__constant char rawmap[$100] = kickasm {{ .var ht = Hashtable().put(0,64, 1,0, 2,32, 3,96) // the table for converting bit 6,7 into ora value
	.for(var i=0; i<256; i++) {
		.var idx = (i & $60) / 32
		.var mask = i & $9f
		.byte mask | ht.get(idx)
	}
 }}
void setcursor()
char setcursor::c
char setcursor::c#0 // reg byte x 75000.75
char setcursor::c#1 // reg byte a 200002.0
char *setcursor::loc
char *setcursor::loc#0 // loc zp[2]:139 100001.0
unsigned int test_slope(char x_inc , char y_inc)
char test_slope::$10 // reg byte a 202.0
char test_slope::$11 // reg byte a 202.0
char test_slope::$12 // reg byte a 202.0
char test_slope::$5 // reg byte a 202.0
char test_slope::$6 // reg byte a 202.0
char test_slope::$7 // reg byte a 202.0
char test_slope::$8 // reg byte a 202.0
char test_slope::$9 // reg byte a 202.0
char *test_slope::mapline
char *test_slope::mapline#1 // mapline zp[2]:141 101.0
char *test_slope::mapline#2 // mapline zp[2]:141 17.823529411764707
unsigned int test_slope::return
unsigned int test_slope::return#0 // return zp[2]:129 4.0
unsigned int test_slope::return#1 // return zp[2]:129 4.0
unsigned int test_slope::return#10 // return zp[2]:129 4.0
unsigned int test_slope::return#11 // return zp[2]:129 4.0
unsigned int test_slope::return#12 // return zp[2]:129 4.0
unsigned int test_slope::return#13 // return zp[2]:129 4.0
unsigned int test_slope::trees
unsigned int test_slope::trees#1 // trees zp[2]:129 202.0
unsigned int test_slope::trees#2 // trees zp[2]:129 31.5
unsigned int test_slope::trees#6 // trees zp[2]:129 20.2
char test_slope::x
char test_slope::x#1 // reg byte x 202.0
char test_slope::x#2 // reg byte x 202.0
char test_slope::x#3 // reg byte x 60.599999999999994
char test_slope::x#8 // reg byte x 27.545454545454547
char test_slope::x_inc
char test_slope::x_inc#10 // x_inc zp[1]:133 5.05
unsigned int test_slope::y
unsigned int test_slope::y#1 // y zp[2]:134 202.0
unsigned int test_slope::y#2 // y zp[2]:134 16.833333333333332
char test_slope::y_inc
char test_slope::y_inc#12 // y_inc zp[1]:128 30.3
void utoa(unsigned int value , char *buffer , char radix)
char utoa::$10 // reg byte a 2002.0
char utoa::$11 // reg byte x 202.0
char *utoa::buffer
char *utoa::buffer#11 // buffer zp[2]:134 300.42857142857144
char *utoa::buffer#14 // buffer zp[2]:134 1501.5
char *utoa::buffer#3 // buffer zp[2]:134 202.0
char *utoa::buffer#4 // buffer zp[2]:134 2002.0
char utoa::digit
char utoa::digit#1 // digit zp[1]:133 2002.0
char utoa::digit#2 // digit zp[1]:133 286.0
unsigned int utoa::digit_value
unsigned int utoa::digit_value#0 // digit_value zp[2]:141 600.5999999999999
unsigned int *utoa::digit_values
char utoa::max_digits
char utoa::radix
char utoa::started
char utoa::started#2 // reg byte x 500.5
char utoa::started#4 // reg byte x 1001.0
unsigned int utoa::value
unsigned int utoa::value#0 // value zp[2]:129 1001.0
unsigned int utoa::value#1 // value zp[2]:129 56.0
unsigned int utoa::value#2 // value zp[2]:129 586.4285714285714
unsigned int utoa::value#6 // value zp[2]:129 1501.5
unsigned int utoa_append(char *buffer , unsigned int value , unsigned int sub)
char *utoa_append::buffer
char *utoa_append::buffer#0 // buffer zp[2]:134 1375.25
char utoa_append::digit
char utoa_append::digit#1 // reg byte x 1000001.0
char utoa_append::digit#2 // reg byte x 1005001.5
unsigned int utoa_append::return
unsigned int utoa_append::return#0 // return zp[2]:129 2002.0
unsigned int utoa_append::sub
unsigned int utoa_append::sub#0 // sub zp[2]:141 333500.5
unsigned int utoa_append::value
unsigned int utoa_append::value#0 // value zp[2]:129 3667.333333333333
unsigned int utoa_append::value#1 // value zp[2]:129 2000002.0
unsigned int utoa_append::value#2 // value zp[2]:129 501834.16666666674

zp[1]:128 [ test_slope::y_inc#12 ]
reg byte x [ test_slope::x#3 test_slope::x#8 test_slope::x#1 test_slope::x#2 ]
zp[2]:129 [ test_slope::trees#2 test_slope::trees#6 test_slope::trees#1 test_slope::return#0 test_slope::return#1 test_slope::return#10 test_slope::return#11 test_slope::return#12 test_slope::return#13 printf_uint::uvalue#6 printf_uint::uvalue#2 printf_uint::uvalue#3 printf_uint::uvalue#4 printf_uint::uvalue#5 printf_uint::uvalue#0 printf_uint::uvalue#1 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 ]
zp[2]:131 [ memset::str#3 memset::str#7 memset::str#8 memset::dst#2 memset::dst#4 memset::dst#1 memset::str#1 newline::start#0 ]
zp[1]:133 [ utoa::digit#2 utoa::digit#1 test_slope::x_inc#10 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
zp[2]:134 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 printf_str::putc#15 test_slope::y#2 test_slope::y#1 ]
zp[2]:136 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 memcpy::source#0 memset::num#2 memset::end#0 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
zp[1]:138 [ cputc::c ]
reg byte x [ cputc::convertToScreenCode1_return#0 ]
reg byte a [ test_slope::$6 ]
reg byte a [ test_slope::$7 ]
reg byte a [ test_slope::$8 ]
reg byte a [ test_slope::$9 ]
reg byte a [ test_slope::$10 ]
reg byte a [ test_slope::$11 ]
reg byte a [ test_slope::$12 ]
reg byte a [ test_slope::$5 ]
reg byte a [ printf_str::c#1 ]
reg byte a [ printf_number_buffer::buffer_sign#0 ]
zp[2]:139 [ cursorLocation::return#0 putchar::loc#0 cursorLocation::return#1 cursorLocation::return#3 setcursor::loc#0 cursorLocation::$0 cursorLocation::$1 cursorLocation::$3 cursorLocation::$5 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 memcpy::destination#0 ]
reg byte a [ putchar::newChar#0 ]
reg byte x [ setcursor::c#0 ]
reg byte a [ setcursor::c#1 ]
reg byte x [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:141 [ utoa::digit_value#0 utoa_append::sub#0 printf_str::s#14 printf_str::s#15 printf_str::s#0 test_slope::mapline#2 test_slope::mapline#1 ]
zp[2]:143 [ memcpy::src_end#0 cursorLocation::$4 ]
mem[12] [ printf_buffer ]


FINAL ASSEMBLER
Score: 9981

  // File Comments
// https://adventofcode.com/2020/day/3
  // Upstart
  // Atari XL/XE executable XEX file with a single segment
// https://www.atarimax.com/jindroush.atari.org/afmtexe.html
.plugin "dk.camelot64.kickass.xexplugin.AtariXex"
.file [name="2020-03.xex", type="bin", segments="XexFile"]
.segmentdef XexFile [segments="Program", modify="XexFormat", _RunAddr=main]
.segmentdef Program [segments="Code, Data"]
.segmentdef Code [start=$2000]
.segmentdef Data [startAfter="Code"]
  // Global Constants & labels
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const STACK_BASE = $103
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  /// 2-byte saved memory scan counter
  .label SAVMSC = $58
  /// data under cursor
  .label OLDCHR = $5d
  /// 2-byte saved cursor memory address
  .label OLDADR = $5e
  /// Cursor inhibit flag, 0 turns on, any other number turns off. Cursor doesn't change until it moves next.
  .label CRSINH = $2f0
  /// Atari ZP registers
  /// 1-byte cursor row
  .label ROWCRS = $54
  /// 2-byte cursor column
  .label COLCRS = $55
.segment Code
  // main
main: {
    // clrscr()
    // [1] call clrscr
    jsr clrscr
    // [2] phi from main to main::@2 [phi:main->main::@2]
    // main::@2
    // test_slope(3,1)
    // [3] call test_slope
    // [80] phi from main::@2 to test_slope [phi:main::@2->test_slope]
    // [80] phi test_slope::y_inc#12 = 1 [phi:main::@2->test_slope#0] -- vbuz1=vbuc1 
    lda #1
    sta.z test_slope.y_inc
    // [80] phi test_slope::x_inc#10 = 3 [phi:main::@2->test_slope#1] -- vbuz1=vbuc1 
    lda #3
    sta.z test_slope.x_inc
    jsr test_slope
    // test_slope(3,1)
    // [4] test_slope::return#0 = test_slope::trees#2
    // main::@3
    // printf("1: encountered %u trees\n",test_slope(3,1))
    // [5] printf_uint::uvalue#0 = test_slope::return#0
    // [6] call printf_str
    // [101] phi from main::@3 to printf_str [phi:main::@3->printf_str]
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@3->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s [phi:main::@3->printf_str#1] -- pbuz1=pbuc1 
    lda #<s
    sta.z printf_str.s
    lda #>s
    sta.z printf_str.s+1
    jsr printf_str
    // [7] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // main::@4
    // printf("1: encountered %u trees\n",test_slope(3,1))
    // [8] call printf_uint
    // [110] phi from main::@4 to printf_uint [phi:main::@4->printf_uint]
    // [110] phi printf_uint::uvalue#6 = printf_uint::uvalue#0 [phi:main::@4->printf_uint#0] -- register_copy 
    jsr printf_uint
    // [9] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
    // main::@5
    // printf("1: encountered %u trees\n",test_slope(3,1))
    // [10] call printf_str
    // [101] phi from main::@5 to printf_str [phi:main::@5->printf_str]
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@5->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s1 [phi:main::@5->printf_str#1] -- pbuz1=pbuc1 
    lda #<s1
    sta.z printf_str.s
    lda #>s1
    sta.z printf_str.s+1
    jsr printf_str
    // [11] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
    // main::@6
    // test_slope(1,1)
    // [12] call test_slope
    // [80] phi from main::@6 to test_slope [phi:main::@6->test_slope]
    // [80] phi test_slope::y_inc#12 = 1 [phi:main::@6->test_slope#0] -- vbuz1=vbuc1 
    lda #1
    sta.z test_slope.y_inc
    // [80] phi test_slope::x_inc#10 = 1 [phi:main::@6->test_slope#1] -- vbuz1=vbuc1 
    sta.z test_slope.x_inc
    jsr test_slope
    // test_slope(1,1)
    // [13] test_slope::return#1 = test_slope::trees#2
    // main::@7
    // printf("2a: encountered %u trees\n",test_slope(1,1))
    // [14] printf_uint::uvalue#1 = test_slope::return#1
    // [15] call printf_str
    // [101] phi from main::@7 to printf_str [phi:main::@7->printf_str]
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@7->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s2 [phi:main::@7->printf_str#1] -- pbuz1=pbuc1 
    lda #<s2
    sta.z printf_str.s
    lda #>s2
    sta.z printf_str.s+1
    jsr printf_str
    // [16] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
    // main::@8
    // printf("2a: encountered %u trees\n",test_slope(1,1))
    // [17] call printf_uint
    // [110] phi from main::@8 to printf_uint [phi:main::@8->printf_uint]
    // [110] phi printf_uint::uvalue#6 = printf_uint::uvalue#1 [phi:main::@8->printf_uint#0] -- register_copy 
    jsr printf_uint
    // [18] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
    // main::@9
    // printf("2a: encountered %u trees\n",test_slope(1,1))
    // [19] call printf_str
    // [101] phi from main::@9 to printf_str [phi:main::@9->printf_str]
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@9->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s1 [phi:main::@9->printf_str#1] -- pbuz1=pbuc1 
    lda #<s1
    sta.z printf_str.s
    lda #>s1
    sta.z printf_str.s+1
    jsr printf_str
    // [20] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
    // main::@10
    // test_slope(3,1)
    // [21] call test_slope
    // [80] phi from main::@10 to test_slope [phi:main::@10->test_slope]
    // [80] phi test_slope::y_inc#12 = 1 [phi:main::@10->test_slope#0] -- vbuz1=vbuc1 
    lda #1
    sta.z test_slope.y_inc
    // [80] phi test_slope::x_inc#10 = 3 [phi:main::@10->test_slope#1] -- vbuz1=vbuc1 
    lda #3
    sta.z test_slope.x_inc
    jsr test_slope
    // test_slope(3,1)
    // [22] test_slope::return#10 = test_slope::trees#2
    // main::@11
    // printf("2b: encountered %u trees\n",test_slope(3,1))
    // [23] printf_uint::uvalue#2 = test_slope::return#10
    // [24] call printf_str
    // [101] phi from main::@11 to printf_str [phi:main::@11->printf_str]
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@11->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s4 [phi:main::@11->printf_str#1] -- pbuz1=pbuc1 
    lda #<s4
    sta.z printf_str.s
    lda #>s4
    sta.z printf_str.s+1
    jsr printf_str
    // [25] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
    // main::@12
    // printf("2b: encountered %u trees\n",test_slope(3,1))
    // [26] call printf_uint
    // [110] phi from main::@12 to printf_uint [phi:main::@12->printf_uint]
    // [110] phi printf_uint::uvalue#6 = printf_uint::uvalue#2 [phi:main::@12->printf_uint#0] -- register_copy 
    jsr printf_uint
    // [27] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
    // main::@13
    // printf("2b: encountered %u trees\n",test_slope(3,1))
    // [28] call printf_str
    // [101] phi from main::@13 to printf_str [phi:main::@13->printf_str]
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@13->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s1 [phi:main::@13->printf_str#1] -- pbuz1=pbuc1 
    lda #<s1
    sta.z printf_str.s
    lda #>s1
    sta.z printf_str.s+1
    jsr printf_str
    // [29] phi from main::@13 to main::@14 [phi:main::@13->main::@14]
    // main::@14
    // test_slope(5,1)
    // [30] call test_slope
    // [80] phi from main::@14 to test_slope [phi:main::@14->test_slope]
    // [80] phi test_slope::y_inc#12 = 1 [phi:main::@14->test_slope#0] -- vbuz1=vbuc1 
    lda #1
    sta.z test_slope.y_inc
    // [80] phi test_slope::x_inc#10 = 5 [phi:main::@14->test_slope#1] -- vbuz1=vbuc1 
    lda #5
    sta.z test_slope.x_inc
    jsr test_slope
    // test_slope(5,1)
    // [31] test_slope::return#11 = test_slope::trees#2
    // main::@15
    // printf("2c: encountered %u trees\n",test_slope(5,1))
    // [32] printf_uint::uvalue#3 = test_slope::return#11
    // [33] call printf_str
    // [101] phi from main::@15 to printf_str [phi:main::@15->printf_str]
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@15->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s6 [phi:main::@15->printf_str#1] -- pbuz1=pbuc1 
    lda #<s6
    sta.z printf_str.s
    lda #>s6
    sta.z printf_str.s+1
    jsr printf_str
    // [34] phi from main::@15 to main::@16 [phi:main::@15->main::@16]
    // main::@16
    // printf("2c: encountered %u trees\n",test_slope(5,1))
    // [35] call printf_uint
    // [110] phi from main::@16 to printf_uint [phi:main::@16->printf_uint]
    // [110] phi printf_uint::uvalue#6 = printf_uint::uvalue#3 [phi:main::@16->printf_uint#0] -- register_copy 
    jsr printf_uint
    // [36] phi from main::@16 to main::@17 [phi:main::@16->main::@17]
    // main::@17
    // printf("2c: encountered %u trees\n",test_slope(5,1))
    // [37] call printf_str
    // [101] phi from main::@17 to printf_str [phi:main::@17->printf_str]
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@17->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s1 [phi:main::@17->printf_str#1] -- pbuz1=pbuc1 
    lda #<s1
    sta.z printf_str.s
    lda #>s1
    sta.z printf_str.s+1
    jsr printf_str
    // [38] phi from main::@17 to main::@18 [phi:main::@17->main::@18]
    // main::@18
    // test_slope(7,1)
    // [39] call test_slope
    // [80] phi from main::@18 to test_slope [phi:main::@18->test_slope]
    // [80] phi test_slope::y_inc#12 = 1 [phi:main::@18->test_slope#0] -- vbuz1=vbuc1 
    lda #1
    sta.z test_slope.y_inc
    // [80] phi test_slope::x_inc#10 = 7 [phi:main::@18->test_slope#1] -- vbuz1=vbuc1 
    lda #7
    sta.z test_slope.x_inc
    jsr test_slope
    // test_slope(7,1)
    // [40] test_slope::return#12 = test_slope::trees#2
    // main::@19
    // printf("2d: encountered %u trees\n",test_slope(7,1))
    // [41] printf_uint::uvalue#4 = test_slope::return#12
    // [42] call printf_str
    // [101] phi from main::@19 to printf_str [phi:main::@19->printf_str]
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@19->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s8 [phi:main::@19->printf_str#1] -- pbuz1=pbuc1 
    lda #<s8
    sta.z printf_str.s
    lda #>s8
    sta.z printf_str.s+1
    jsr printf_str
    // [43] phi from main::@19 to main::@20 [phi:main::@19->main::@20]
    // main::@20
    // printf("2d: encountered %u trees\n",test_slope(7,1))
    // [44] call printf_uint
    // [110] phi from main::@20 to printf_uint [phi:main::@20->printf_uint]
    // [110] phi printf_uint::uvalue#6 = printf_uint::uvalue#4 [phi:main::@20->printf_uint#0] -- register_copy 
    jsr printf_uint
    // [45] phi from main::@20 to main::@21 [phi:main::@20->main::@21]
    // main::@21
    // printf("2d: encountered %u trees\n",test_slope(7,1))
    // [46] call printf_str
    // [101] phi from main::@21 to printf_str [phi:main::@21->printf_str]
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@21->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s1 [phi:main::@21->printf_str#1] -- pbuz1=pbuc1 
    lda #<s1
    sta.z printf_str.s
    lda #>s1
    sta.z printf_str.s+1
    jsr printf_str
    // [47] phi from main::@21 to main::@22 [phi:main::@21->main::@22]
    // main::@22
    // test_slope(1,2)
    // [48] call test_slope
    // [80] phi from main::@22 to test_slope [phi:main::@22->test_slope]
    // [80] phi test_slope::y_inc#12 = 2 [phi:main::@22->test_slope#0] -- vbuz1=vbuc1 
    lda #2
    sta.z test_slope.y_inc
    // [80] phi test_slope::x_inc#10 = 1 [phi:main::@22->test_slope#1] -- vbuz1=vbuc1 
    lda #1
    sta.z test_slope.x_inc
    jsr test_slope
    // test_slope(1,2)
    // [49] test_slope::return#13 = test_slope::trees#2
    // main::@23
    // printf("2e: encountered %u trees\n",test_slope(1,2))
    // [50] printf_uint::uvalue#5 = test_slope::return#13
    // [51] call printf_str
    // [101] phi from main::@23 to printf_str [phi:main::@23->printf_str]
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@23->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s10 [phi:main::@23->printf_str#1] -- pbuz1=pbuc1 
    lda #<s10
    sta.z printf_str.s
    lda #>s10
    sta.z printf_str.s+1
    jsr printf_str
    // [52] phi from main::@23 to main::@24 [phi:main::@23->main::@24]
    // main::@24
    // printf("2e: encountered %u trees\n",test_slope(1,2))
    // [53] call printf_uint
    // [110] phi from main::@24 to printf_uint [phi:main::@24->printf_uint]
    // [110] phi printf_uint::uvalue#6 = printf_uint::uvalue#5 [phi:main::@24->printf_uint#0] -- register_copy 
    jsr printf_uint
    // [54] phi from main::@24 to main::@25 [phi:main::@24->main::@25]
    // main::@25
    // printf("2e: encountered %u trees\n",test_slope(1,2))
    // [55] call printf_str
    // [101] phi from main::@25 to printf_str [phi:main::@25->printf_str]
    // [101] phi printf_str::putc#15 = &cputc [phi:main::@25->printf_str#0] -- pprz1=pprc1 
    lda #<cputc
    sta.z printf_str.putc
    lda #>cputc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = main::s1 [phi:main::@25->printf_str#1] -- pbuz1=pbuc1 
    lda #<s1
    sta.z printf_str.s
    lda #>s1
    sta.z printf_str.s+1
    jsr printf_str
    // [56] phi from main::@1 main::@25 to main::@1 [phi:main::@1/main::@25->main::@1]
    // main::@1
  __b1:
    jmp __b1
  .segment Data
  .encoding "ascii"
    s: .text "1: encountered "
    .byte 0
    s1: .text @" trees\$9b"
    .byte 0
    s2: .text "2a: encountered "
    .byte 0
    s4: .text "2b: encountered "
    .byte 0
    s6: .text "2c: encountered "
    .byte 0
    s8: .text "2d: encountered "
    .byte 0
    s10: .text "2e: encountered "
    .byte 0
}
.segment Code
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// void cputc(__zp($8a) volatile char c)
cputc: {
    .const OFFSET_STACK_C = 0
    .label convertToScreenCode1_v = c
    .label c = $8a
    // [57] cputc::c = stackidx(char,cputc::OFFSET_STACK_C) -- vbuz1=_stackidxbyte_vbuc1 
    tsx
    lda STACK_BASE+OFFSET_STACK_C,x
    sta.z c
    // if (c == '\r')
    // [58] if(cputc::c==' 'at) goto cputc::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #'\r'
    cmp.z c
    beq __b1
    // cputc::@3
    // if(c == '\n' || c == 0x9b)
    // [59] if(cputc::c==' 'at) goto cputc::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #'\$9b'
    cmp.z c
    beq __b2
    // cputc::@8
    // [60] if(cputc::c==$9b) goto cputc::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #$9b
    cmp.z c
    beq __b2
    // cputc::convertToScreenCode1
    // return rawmap[*v];
    // [61] cputc::convertToScreenCode1_return#0 = rawmap[*cputc::convertToScreenCode1_v#0] -- vbuxx=pbuc1_derefidx_(_deref_pbuc2) 
    ldy.z convertToScreenCode1_v
    ldx rawmap,y
    // [62] phi from cputc::convertToScreenCode1 to cputc::@6 [phi:cputc::convertToScreenCode1->cputc::@6]
    // cputc::@6
    // putchar(convertToScreenCode(&c))
    // [63] call putchar
    jsr putchar
    // cputc::@7
    // (*COLCRS)++;
    // [64] *COLCRS = ++ *COLCRS -- _deref_pwuc1=_inc__deref_pwuc1 
    inc COLCRS
    bne !+
    inc COLCRS+1
  !:
    // if (*COLCRS == CONIO_WIDTH)
    // [65] if(*COLCRS==$28) goto cputc::@5 -- _deref_pwuc1_eq_vbuc2_then_la1 
    lda COLCRS+1
    bne !+
    lda COLCRS
    cmp #$28
    beq __b5
  !:
    // [66] phi from cputc::@7 to cputc::@4 [phi:cputc::@7->cputc::@4]
    // cputc::@4
    // setcursor()
    // [67] call setcursor
    jsr setcursor
    // cputc::@return
    // }
    // [68] return 
    rts
    // cputc::@5
  __b5:
    // *COLCRS = 0
    // [69] *COLCRS = 0 -- _deref_pwuc1=vbuc2 
    lda #<0
    sta COLCRS
    sta COLCRS+1
    // newline()
    // [70] call newline
    jsr newline
    rts
    // cputc::@2
  __b2:
    // *COLCRS = 0
    // [71] *COLCRS = 0 -- _deref_pwuc1=vbuc2 
    // 0x0a LF, or atascii EOL
    lda #<0
    sta COLCRS
    sta COLCRS+1
    // newline()
    // [72] call newline
    jsr newline
    rts
    // cputc::@1
  __b1:
    // *COLCRS = 0
    // [73] *COLCRS = 0 -- _deref_pwuc1=vbuc2 
    // 0x0d, CR = just set the cursor x value to 0
    lda #<0
    sta COLCRS
    sta COLCRS+1
    // setcursor()
    // [74] call setcursor
    jsr setcursor
    rts
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    // [75] memset::str#7 = (void *)*SAVMSC -- pvoz1=_deref_qvoc1 
    lda SAVMSC
    sta.z memset.str
    lda SAVMSC+1
    sta.z memset.str+1
    // memset(*SAVMSC, 0x00, CONIO_WIDTH * CONIO_HEIGHT)
    // [76] call memset
  // Fill entire screen with spaces
    // [151] phi from clrscr to memset [phi:clrscr->memset]
    // [151] phi memset::str#3 = memset::str#7 [phi:clrscr->memset#0] -- register_copy 
    // [151] phi memset::num#2 = (unsigned int)$28*$18 [phi:clrscr->memset#1] -- vwuz1=vwuc1 
    lda #<$28*$18
    sta.z memset.num
    lda #>$28*$18
    sta.z memset.num+1
    jsr memset
    // clrscr::@1
    // *OLDCHR = 0x00
    // [77] *OLDCHR = 0 -- _deref_pbuc1=vbuc2 
    // 0x00 is screencode for space character
    // set the old character to a space so the cursor doesn't reappear at the last position it was at
    lda #0
    sta OLDCHR
    // gotoxy(0,0)
    // [78] call gotoxy
    jsr gotoxy
    // clrscr::@return
    // }
    // [79] return 
    rts
}
  // test_slope
// Count the number of trees on a specific slope
// __zp($81) unsigned int test_slope(__zp($85) char x_inc, __zp($80) char y_inc)
test_slope: {
    .label return = $81
    .label trees = $81
    .label mapline = $8d
    .label y = $86
    .label x_inc = $85
    .label y_inc = $80
    // [81] phi from test_slope to test_slope::@1 [phi:test_slope->test_slope::@1]
    // [81] phi test_slope::trees#2 = 0 [phi:test_slope->test_slope::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z trees
    sta.z trees+1
    // [81] phi test_slope::x#3 = 0 [phi:test_slope->test_slope::@1#1] -- vbuxx=vbuc1 
    tax
    // [81] phi test_slope::mapline#2 = map [phi:test_slope->test_slope::@1#2] -- pbuz1=pbuc1 
    lda #<map
    sta.z mapline
    lda #>map
    sta.z mapline+1
    // [81] phi test_slope::y#2 = 0 [phi:test_slope->test_slope::@1#3] -- vwuz1=vwuc1 
    txa
    sta.z y
    sta.z y+1
    // test_slope::@1
  __b1:
    // for(unsigned int y=0; y<MAP_HEIGHT; y+=y_inc)
    // [82] if(test_slope::y#2<$143) goto test_slope::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z y+1
    cmp #>$143
    bcc __b2
    bne !+
    lda.z y
    cmp #<$143
    bcc __b2
  !:
    // test_slope::@return
    // }
    // [83] return 
    rts
    // test_slope::@2
  __b2:
    // if(mapline[x]=='#')
    // [84] if(test_slope::mapline#2[test_slope::x#3]!='#'at) goto test_slope::@3 -- pbuz1_derefidx_vbuxx_neq_vbuc1_then_la1 
    txa
    tay
    lda (mapline),y
    cmp #'#'
    bne __b3
    // test_slope::@5
    // trees++;
    // [85] test_slope::trees#1 = ++ test_slope::trees#2 -- vwuz1=_inc_vwuz1 
    inc.z trees
    bne !+
    inc.z trees+1
  !:
    // [86] phi from test_slope::@2 test_slope::@5 to test_slope::@3 [phi:test_slope::@2/test_slope::@5->test_slope::@3]
    // [86] phi test_slope::trees#6 = test_slope::trees#2 [phi:test_slope::@2/test_slope::@5->test_slope::@3#0] -- register_copy 
    // test_slope::@3
  __b3:
    // x += x_inc
    // [87] test_slope::x#1 = test_slope::x#3 + test_slope::x_inc#10 -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z x_inc
    tax
    // if(x>=MAP_WIDTH)
    // [88] if(test_slope::x#1<$1f) goto test_slope::@4 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$1f
    bcc __b4
    // test_slope::@6
    // x -= MAP_WIDTH
    // [89] test_slope::x#2 = test_slope::x#1 - $1f -- vbuxx=vbuxx_minus_vbuc1 
    txa
    axs #$1f
    // [90] phi from test_slope::@3 test_slope::@6 to test_slope::@4 [phi:test_slope::@3/test_slope::@6->test_slope::@4]
    // [90] phi test_slope::x#8 = test_slope::x#1 [phi:test_slope::@3/test_slope::@6->test_slope::@4#0] -- register_copy 
    // test_slope::@4
  __b4:
    // y_inc*MAP_WIDTH
    // [91] test_slope::$6 = test_slope::y_inc#12 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z y_inc
    asl
    // [92] test_slope::$7 = test_slope::$6 + test_slope::y_inc#12 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc.z y_inc
    // [93] test_slope::$8 = test_slope::$7 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [94] test_slope::$9 = test_slope::$8 + test_slope::y_inc#12 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc.z y_inc
    // [95] test_slope::$10 = test_slope::$9 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [96] test_slope::$11 = test_slope::$10 + test_slope::y_inc#12 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc.z y_inc
    // [97] test_slope::$12 = test_slope::$11 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [98] test_slope::$5 = test_slope::$12 + test_slope::y_inc#12 -- vbuaa=vbuaa_plus_vbuz1 
    clc
    adc.z y_inc
    // mapline += y_inc*MAP_WIDTH
    // [99] test_slope::mapline#1 = test_slope::mapline#2 + test_slope::$5 -- pbuz1=pbuz1_plus_vbuaa 
    clc
    adc.z mapline
    sta.z mapline
    bcc !+
    inc.z mapline+1
  !:
    // y+=y_inc
    // [100] test_slope::y#1 = test_slope::y#2 + test_slope::y_inc#12 -- vwuz1=vwuz1_plus_vbuz2 
    lda.z y_inc
    clc
    adc.z y
    sta.z y
    bcc !+
    inc.z y+1
  !:
    // [81] phi from test_slope::@4 to test_slope::@1 [phi:test_slope::@4->test_slope::@1]
    // [81] phi test_slope::trees#2 = test_slope::trees#6 [phi:test_slope::@4->test_slope::@1#0] -- register_copy 
    // [81] phi test_slope::x#3 = test_slope::x#8 [phi:test_slope::@4->test_slope::@1#1] -- register_copy 
    // [81] phi test_slope::mapline#2 = test_slope::mapline#1 [phi:test_slope::@4->test_slope::@1#2] -- register_copy 
    // [81] phi test_slope::y#2 = test_slope::y#1 [phi:test_slope::@4->test_slope::@1#3] -- register_copy 
    jmp __b1
}
  // printf_str
/// Print a NUL-terminated string
// void printf_str(__zp($86) void (*putc)(char), __zp($8d) const char *s)
printf_str: {
    .label s = $8d
    .label putc = $86
    // [102] phi from printf_str printf_str::@2 to printf_str::@1 [phi:printf_str/printf_str::@2->printf_str::@1]
    // [102] phi printf_str::s#14 = printf_str::s#15 [phi:printf_str/printf_str::@2->printf_str::@1#0] -- register_copy 
    // printf_str::@1
  __b1:
    // while(c=*s++)
    // [103] printf_str::c#1 = *printf_str::s#14 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // [104] printf_str::s#0 = ++ printf_str::s#14 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [105] if(0!=printf_str::c#1) goto printf_str::@2 -- 0_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    // printf_str::@return
    // }
    // [106] return 
    rts
    // printf_str::@2
  __b2:
    // putc(c)
    // [107] stackpush(char) = printf_str::c#1 -- _stackpushbyte_=vbuaa 
    pha
    // [108] callexecute *printf_str::putc#15  -- call__deref_pprz1 
    jsr icall1
    // sideeffect stackpullbytes(1) -- _stackpullbyte_1 
    pla
    jmp __b1
    // Outside Flow
  icall1:
    jmp (putc)
}
  // printf_uint
// Print an unsigned int using a specific format
// void printf_uint(void (*putc)(char), __zp($81) unsigned int uvalue, char format_min_length, char format_justify_left, char format_sign_always, char format_zero_padding, char format_upper_case, char format_radix)
printf_uint: {
    .label uvalue = $81
    // printf_uint::@1
    // printf_buffer.sign = format.sign_always?'+':0
    // [111] *((char *)&printf_buffer) = 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // utoa(uvalue, printf_buffer.digits, format.radix)
    // [112] utoa::value#1 = printf_uint::uvalue#6
    // [113] call utoa
  // Format number into buffer
    // [164] phi from printf_uint::@1 to utoa [phi:printf_uint::@1->utoa]
    jsr utoa
    // printf_uint::@2
    // printf_number_buffer(putc, printf_buffer, format)
    // [114] printf_number_buffer::buffer_sign#0 = *((char *)&printf_buffer) -- vbuaa=_deref_pbuc1 
    lda printf_buffer
    // [115] call printf_number_buffer
  // Print using format
    // [185] phi from printf_uint::@2 to printf_number_buffer [phi:printf_uint::@2->printf_number_buffer]
    jsr printf_number_buffer
    // printf_uint::@return
    // }
    // [116] return 
    rts
}
  // putchar
// Puts a character to the screen a the current location. Uses internal screencode. Deals with storing the old cursor value
// void putchar(char code)
putchar: {
    .label loc = $8b
    // **OLDADR = *OLDCHR
    // [117] *(*OLDADR) = *OLDCHR -- _deref_(_deref_qbuc1)=_deref_pbuc2 
    lda OLDCHR
    ldy OLDADR
    sty.z $fe
    ldy OLDADR+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    // char * loc = cursorLocation()
    // [118] call cursorLocation
    jsr cursorLocation
    // [119] cursorLocation::return#0 = cursorLocation::return#1
    // putchar::@1
    // [120] putchar::loc#0 = cursorLocation::return#0
    // char newChar = code | conio_reverse_value
    // [121] putchar::newChar#0 = cputc::convertToScreenCode1_return#0 -- vbuaa=vbuxx 
    txa
    // *loc = newChar
    // [122] *putchar::loc#0 = putchar::newChar#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (loc),y
    // *OLDCHR = newChar
    // [123] *OLDCHR = putchar::newChar#0 -- _deref_pbuc1=vbuaa 
    sta OLDCHR
    // setcursor()
    // [124] call setcursor
    jsr setcursor
    // putchar::@return
    // }
    // [125] return 
    rts
}
  // setcursor
// Handles cursor movement, displaying it if required, and inverting character it is over if there is one (and enabled)
setcursor: {
    .label loc = $8b
    // **OLDADR = *OLDCHR
    // [126] *(*OLDADR) = *OLDCHR -- _deref_(_deref_qbuc1)=_deref_pbuc2 
    // save the current oldchr into oldadr
    lda OLDCHR
    ldy OLDADR
    sty.z $fe
    ldy OLDADR+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    // char * loc = cursorLocation()
    // [127] call cursorLocation
    // work out the new location for oldadr based on new column/row
    jsr cursorLocation
    // [128] cursorLocation::return#3 = cursorLocation::return#1
    // setcursor::@3
    // [129] setcursor::loc#0 = cursorLocation::return#3
    // char c = *loc
    // [130] setcursor::c#0 = *setcursor::loc#0 -- vbuxx=_deref_pbuz1 
    ldy #0
    lda (loc),y
    tax
    // *OLDCHR = c
    // [131] *OLDCHR = setcursor::c#0 -- _deref_pbuc1=vbuxx 
    stx OLDCHR
    // *OLDADR = loc
    // [132] *OLDADR = setcursor::loc#0 -- _deref_qbuc1=pbuz1 
    lda.z loc
    sta OLDADR
    lda.z loc+1
    sta OLDADR+1
    // setcursor::@2
    // *CRSINH = 0
    // [133] *CRSINH = 0 -- _deref_pbuc1=vbuc2 
    // cursor is on, so invert the inverse bit and turn cursor on
    tya
    sta CRSINH
    // c = c ^ 0x80
    // [134] setcursor::c#1 = setcursor::c#0 ^ $80 -- vbuaa=vbuxx_bxor_vbuc1 
    txa
    eor #$80
    // setcursor::@1
    // **OLDADR = c
    // [135] *(*OLDADR) = setcursor::c#1 -- _deref_(_deref_qbuc1)=vbuaa 
    ldy OLDADR
    sty.z $fe
    ldy OLDADR+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    // setcursor::@return
    // }
    // [136] return 
    rts
}
  // newline
newline: {
    .label start = $83
    // if ((*ROWCRS)++ == CONIO_HEIGHT)
    // [137] *ROWCRS = ++ *ROWCRS -- _deref_pbuc1=_inc__deref_pbuc1 
    inc ROWCRS
    // [138] if(*ROWCRS!=$18) goto newline::@1 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$18
    cmp ROWCRS
    bne __b1
    // newline::@3
    // **OLDADR ^= 0x80
    // [139] *(*OLDADR) = *(*OLDADR) ^ $80 -- _deref_(_deref_qbuc1)=_deref_(_deref_qbuc1)_bxor_vbuc2 
    ldy OLDADR
    sty.z $fe
    ldy OLDADR+1
    sty.z $ff
    ldy #0
    lda ($fe),y
    eor #$80
    sta ($fe),y
    // newline::@2
    // char * start = *SAVMSC
    // [140] newline::start#0 = *SAVMSC -- pbuz1=_deref_qbuc1 
    // move screen up 1 line
    lda SAVMSC
    sta.z start
    lda SAVMSC+1
    sta.z start+1
    // start + CONIO_WIDTH
    // [141] memcpy::source#0 = newline::start#0 + $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z start
    sta.z memcpy.source
    tya
    adc.z start+1
    sta.z memcpy.source+1
    // memcpy(start, start + CONIO_WIDTH, CONIO_WIDTH * 23)
    // [142] memcpy::destination#0 = (void *)newline::start#0 -- pvoz1=pvoz2 
    lda.z start
    sta.z memcpy.destination
    lda.z start+1
    sta.z memcpy.destination+1
    // [143] call memcpy
    jsr memcpy
    // newline::@4
    // start + CONIO_WIDTH * 23
    // [144] memset::str#1 = newline::start#0 + (unsigned int)$28*$17 -- pbuz1=pbuz1_plus_vwuc1 
    lda.z memset.str
    clc
    adc #<$28*$17
    sta.z memset.str
    lda.z memset.str+1
    adc #>$28*$17
    sta.z memset.str+1
    // [145] memset::str#8 = (void *)memset::str#1
    // memset(start + CONIO_WIDTH * 23, 0x00, CONIO_WIDTH)
    // [146] call memset
    // [151] phi from newline::@4 to memset [phi:newline::@4->memset]
    // [151] phi memset::str#3 = memset::str#8 [phi:newline::@4->memset#0] -- register_copy 
    // [151] phi memset::num#2 = $28 [phi:newline::@4->memset#1] -- vwuz1=vbuc1 
    lda #<$28
    sta.z memset.num
    lda #>$28
    sta.z memset.num+1
    jsr memset
    // newline::@5
    // *ROWCRS = CONIO_HEIGHT - 1
    // [147] *ROWCRS = $18-1 -- _deref_pbuc1=vbuc2 
    lda #$18-1
    sta ROWCRS
    // [148] phi from newline newline::@5 to newline::@1 [phi:newline/newline::@5->newline::@1]
    // newline::@1
  __b1:
    // setcursor()
    // [149] call setcursor
    jsr setcursor
    // newline::@return
    // }
    // [150] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// void * memset(__zp($83) char *str, char c, __zp($88) unsigned int num)
memset: {
    .label end = $88
    .label dst = $83
    .label str = $83
    .label num = $88
    // if(num>0)
    // [152] if(memset::num#2<=0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    // memset::@1
    // char* end = (char*)str + num
    // [153] memset::end#0 = (char *)memset::str#3 + memset::num#2 -- pbuz1=pbuz2_plus_vwuz1 
    clc
    lda.z end
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [154] memset::dst#4 = (char *)memset::str#3
    // [155] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [155] phi memset::dst#2 = memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [156] if(memset::dst#2!=memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
  __breturn:
    // }
    // [157] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [158] *memset::dst#2 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [159] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // gotoxy
// Set the cursor to the specified position
// void gotoxy(char x, char y)
gotoxy: {
    .const x = 0
    .const y = 0
    // *COLCRS = x
    // [160] *COLCRS = gotoxy::x#0 -- _deref_pwuc1=vbuc2 
    lda #<x
    sta COLCRS
    lda #>x
    sta COLCRS+1
    // *ROWCRS = y
    // [161] *ROWCRS = gotoxy::y#0 -- _deref_pbuc1=vbuc2 
    lda #y
    sta ROWCRS
    // setcursor()
    // [162] call setcursor
    jsr setcursor
    // gotoxy::@return
    // }
    // [163] return 
    rts
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// void utoa(__zp($81) unsigned int value, __zp($86) char *buffer, char radix)
utoa: {
    .label digit_value = $8d
    .label buffer = $86
    .label digit = $85
    .label value = $81
    // [165] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
    // [165] phi utoa::buffer#11 = (char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [165] phi utoa::started#2 = 0 [phi:utoa->utoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [165] phi utoa::value#2 = utoa::value#1 [phi:utoa->utoa::@1#2] -- register_copy 
    // [165] phi utoa::digit#2 = 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    txa
    sta.z digit
    // utoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [166] if(utoa::digit#2<5-1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #5-1
    bcc __b2
    // utoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [167] utoa::$11 = (char)utoa::value#2 -- vbuxx=_byte_vwuz1 
    ldx.z value
    // [168] *utoa::buffer#11 = DIGITS[utoa::$11] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [169] utoa::buffer#3 = ++ utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [170] *utoa::buffer#3 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // utoa::@return
    // }
    // [171] return 
    rts
    // utoa::@2
  __b2:
    // unsigned int digit_value = digit_values[digit]
    // [172] utoa::$10 = utoa::digit#2 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z digit
    asl
    // [173] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10] -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // if (started || value >= digit_value)
    // [174] if(0!=utoa::started#2) goto utoa::@5 -- 0_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    // utoa::@7
    // [175] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [176] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
    // [176] phi utoa::buffer#14 = utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [176] phi utoa::started#4 = utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [176] phi utoa::value#6 = utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    // utoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [177] utoa::digit#1 = ++ utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [165] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
    // [165] phi utoa::buffer#11 = utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [165] phi utoa::started#2 = utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [165] phi utoa::value#2 = utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [165] phi utoa::digit#2 = utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // utoa_append(buffer++, value, digit_value)
    // [178] utoa_append::buffer#0 = utoa::buffer#11
    // [179] utoa_append::value#0 = utoa::value#2
    // [180] utoa_append::sub#0 = utoa::digit_value#0
    // [181] call utoa_append
    // [209] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
    jsr utoa_append
    // utoa_append(buffer++, value, digit_value)
    // [182] utoa_append::return#0 = utoa_append::value#2
    // utoa::@6
    // value = utoa_append(buffer++, value, digit_value)
    // [183] utoa::value#0 = utoa_append::return#0
    // value = utoa_append(buffer++, value, digit_value);
    // [184] utoa::buffer#4 = ++ utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [176] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
    // [176] phi utoa::buffer#14 = utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [176] phi utoa::started#4 = 1 [phi:utoa::@6->utoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [176] phi utoa::value#6 = utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// void printf_number_buffer(void (*putc)(char), __register(A) char buffer_sign, char *buffer_digits, char format_min_length, char format_justify_left, char format_sign_always, char format_zero_padding, char format_upper_case, char format_radix)
printf_number_buffer: {
    .label buffer_digits = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    .label putc = cputc
    // printf_number_buffer::@1
    // if(buffer.sign)
    // [186] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2 -- 0_eq_vbuaa_then_la1 
    cmp #0
    beq __b2
    // printf_number_buffer::@3
    // putc(buffer.sign)
    // [187] stackpush(char) = printf_number_buffer::buffer_sign#0 -- _stackpushbyte_=vbuaa 
    pha
    // [188] callexecute cputc  -- call_vprc1 
    jsr cputc
    // sideeffect stackpullbytes(1) -- _stackpullbyte_1 
    pla
    // [190] phi from printf_number_buffer::@1 printf_number_buffer::@3 to printf_number_buffer::@2 [phi:printf_number_buffer::@1/printf_number_buffer::@3->printf_number_buffer::@2]
    // printf_number_buffer::@2
  __b2:
    // printf_str(putc, buffer.digits)
    // [191] call printf_str
    // [101] phi from printf_number_buffer::@2 to printf_str [phi:printf_number_buffer::@2->printf_str]
    // [101] phi printf_str::putc#15 = printf_number_buffer::putc#0 [phi:printf_number_buffer::@2->printf_str#0] -- pprz1=pprc1 
    lda #<putc
    sta.z printf_str.putc
    lda #>putc
    sta.z printf_str.putc+1
    // [101] phi printf_str::s#15 = printf_number_buffer::buffer_digits#0 [phi:printf_number_buffer::@2->printf_str#1] -- pbuz1=pbuc1 
    lda #<buffer_digits
    sta.z printf_str.s
    lda #>buffer_digits
    sta.z printf_str.s+1
    jsr printf_str
    // printf_number_buffer::@return
    // }
    // [192] return 
    rts
}
  // cursorLocation
// Return a pointer to the location of the cursor
cursorLocation: {
    .label __0 = $8b
    .label __1 = $8b
    .label __3 = $8b
    .label return = $8b
    .label __4 = $8f
    .label __5 = $8b
    // (word)(*ROWCRS)*CONIO_WIDTH
    // [193] cursorLocation::$3 = (unsigned int)*ROWCRS -- vwuz1=_word__deref_pbuc1 
    lda ROWCRS
    sta.z __3
    lda #0
    sta.z __3+1
    // [194] cursorLocation::$4 = cursorLocation::$3 << 2 -- vwuz1=vwuz2_rol_2 
    lda.z __3
    asl
    sta.z __4
    lda.z __3+1
    rol
    sta.z __4+1
    asl.z __4
    rol.z __4+1
    // [195] cursorLocation::$5 = cursorLocation::$4 + cursorLocation::$3 -- vwuz1=vwuz2_plus_vwuz1 
    clc
    lda.z __5
    adc.z __4
    sta.z __5
    lda.z __5+1
    adc.z __4+1
    sta.z __5+1
    // [196] cursorLocation::$0 = cursorLocation::$5 << 3 -- vwuz1=vwuz1_rol_3 
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    // *SAVMSC + (word)(*ROWCRS)*CONIO_WIDTH
    // [197] cursorLocation::$1 = *SAVMSC + cursorLocation::$0 -- pbuz1=_deref_qbuc1_plus_vwuz1 
    clc
    lda.z __1
    adc SAVMSC
    sta.z __1
    lda.z __1+1
    adc SAVMSC+1
    sta.z __1+1
    // *SAVMSC + (word)(*ROWCRS)*CONIO_WIDTH + *COLCRS
    // [198] cursorLocation::return#1 = cursorLocation::$1 + *COLCRS -- pbuz1=pbuz1_plus__deref_pwuc1 
    clc
    lda.z return
    adc COLCRS
    sta.z return
    lda.z return+1
    adc COLCRS+1
    sta.z return+1
    // cursorLocation::@return
    // }
    // [199] return 
    rts
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// void * memcpy(__zp($8b) void *destination, __zp($88) char *source, unsigned int num)
memcpy: {
    .const num = $28*$17
    .label src_end = $8f
    .label dst = $8b
    .label src = $88
    .label destination = $8b
    .label source = $88
    // char* src_end = (char*)source+num
    // [200] memcpy::src_end#0 = (char *)(void *)memcpy::source#0 + memcpy::num#0 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<num
    sta.z src_end
    lda.z source+1
    adc #>num
    sta.z src_end+1
    // [201] memcpy::src#4 = (char *)(void *)memcpy::source#0
    // [202] memcpy::dst#4 = (char *)memcpy::destination#0
    // [203] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
    // [203] phi memcpy::dst#2 = memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [203] phi memcpy::src#2 = memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    // memcpy::@1
  __b1:
    // while(src!=src_end)
    // [204] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    // memcpy::@return
    // }
    // [205] return 
    rts
    // memcpy::@2
  __b2:
    // *dst++ = *src++
    // [206] *memcpy::dst#2 = *memcpy::src#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta (dst),y
    // *dst++ = *src++;
    // [207] memcpy::dst#1 = ++ memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [208] memcpy::src#1 = ++ memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// __zp($81) unsigned int utoa_append(__zp($86) char *buffer, __zp($81) unsigned int value, __zp($8d) unsigned int sub)
utoa_append: {
    .label buffer = $86
    .label value = $81
    .label sub = $8d
    .label return = $81
    // [210] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
    // [210] phi utoa_append::digit#2 = 0 [phi:utoa_append->utoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [210] phi utoa_append::value#2 = utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    // utoa_append::@1
  __b1:
    // while (value >= sub)
    // [211] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    // utoa_append::@3
    // *buffer = DIGITS[digit]
    // [212] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // utoa_append::@return
    // }
    // [213] return 
    rts
    // utoa_append::@2
  __b2:
    // digit++;
    // [214] utoa_append::digit#1 = ++ utoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // value -= sub
    // [215] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [210] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
    // [210] phi utoa_append::digit#2 = utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [210] phi utoa_append::value#2 = utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // create a static table to map char value to screen value
  // use KickAsm functions to create a table of code -> screen code values, using cc65 algorithm
rawmap:
.var ht = Hashtable().put(0,64, 1,0, 2,32, 3,96) // the table for converting bit 6,7 into ora value
	.for(var i=0; i<256; i++) {
		.var idx = (i & $60) / 32
		.var mask = i & $9f
		.byte mask | ht.get(idx)
	}

  map: .text ".#......##..#.....#....#.#.#....#.#...#.##.#..........#...##...........#.....#.####........#........#.#...#.#.................#....#...#.#...#.#...#.#........#...........#..#.........#.#....#..#....#..#..#.#...#..##..#...........#..#.....#.......#.#..#...#...#.###...#...#.#...#.#...#.#.......#...#...#...##.##..#..................#.#.#....#..#.##....#........##...............#....#....#.#.......#.....##.#..##.#.....###.......#...........#...###....#..#.#...#..................#.........#.##...#......#.............#....#...#.#..#......#.###....#...#.....#..#........#.....#.....#...#..#.......#...#..............#..#...#...#........#...##........#..#........#....#......#......#.....#..#.###.......##....#.#..#..#..###..#..........................#...#....#.........#.#.......#.##................#..#.......#......######.....#.........#......##.......#....#..##.###..#...##.###..#.......#....#.......#.###...#.#.#........#........###...#.......#..........#.#..........#...#..........##.#....#....#........#.....#....#..#..#...#.#....##..#...##....#...........##...#..##.....#.......###.......#.#...#...#.......#.#....#.#....##.###........#..........#..............#....##..###......#.#....#.#......#.....##.....#....#..#......#...#........#.##..#.....#..#....#......#......#.#.#..........##....#.............#..#..........#.#......##..#...#......#.#..#....#....#.#..##.......#.#......##........#.#....#.#.....#..............#.........#.......#..#.#......##.........#..##.#......#......#..#.....#...#.....#.........#...........#..##..##.#..##...###..##.....#...#..##...##.#.#......#..........#.#.....##.#....#..##..#..#.........###.......#........##....#...##....##............#.#.##...............#....#..#......#.....#..#..#.#.....#.....##.#....#.#.....#.#.#.........#..#.#..##....#.....#....#.#...#.....#....#....#.#.#...........#................#.......#.......#..#.#...#.#......#..#.#...........#....#....###...#.#.#.##....##..###.#.#......#.##.#..##...#.#..#..#...#.....#.#.#.#.....###.#..#.#...#.#......#.#..##.#...#...#.#.....#.#.......#....#...#.##......#.#......#....#.....##.....#....................###...##.#...........#.......#..##.....##....#................#..#......#..........#........##..##.#...#...#.#.....#.##.#.....###..###.#...#.#..#....#.#..........#...#..#.#.#..#...#.##.##..#..#....#....####..........#..#.#..........#..........###...#.#..#..#...#..###.......####.#...#....#..#...#..#...........##....#.#...#....##....##.....#.#.##....#.##..#....#.#.#.#......#..#.###....#####.##......##..#.#.#..#........##.##..###.#...#..#..#......#..#.....#...###.....#.#....#.#..##.....#.#....#......#.#...#...#.#....#.#.....#.###.##...................#..........#........#.#...##.#.##......#.#.#..#....##.###..#...#.##....#....#.........#.#..#........#..#..#.#.####.....##..#..#.##.#......#.#..##.#...#..#..#.#.##..#.##..........#......##.#.....#.#.##..#..##.....##.#.##........#..#.....#...#.##.##...#....#.#.#.........##.....#....#....#.#....#...#..#.............#...#..#...#.##......##...##.........#......#..........##.#......#.....##....#.#.#.....#..#.###......#..#.#....#.....#..#.......#...#...#.#.#.#..##......#..............#...###.....#...##......#.#..#.#........#.#...##.#....#..........##...#.#....#...#.....#.######...##...#..#...#...#............#.....#....###..###.##..#.........#.......#........##..#....#...#.#..##.#.#.##.#.#...###.................#.#.#......#.#.#....#.....#.#.#...........#.##.#..#.###......###.#....#...........##.#.#....#...#...........#..##..........#...#.#...........#..###....#..##.......#.....#.....##....#..#.......#........#...##.##..#.#....#..###..#.....##.......#.........###.#...#..#....#.#...#....#..#.......##...#.#.#...#..........#..#.......#.......##.#..#.#....###.....#...#..#...#....#...#.##.#........#..........##.....#.#.##.#.#..#..##.......##.#.#.......##....#.#...........#..##.............##...#.#..#..#...........#.#......#.##.##..#...#...#...........#....###.#.#.##..#.#.#....#....#####.........#...#.....#.#....#............#..#........#.....#.#......#...#.........#...#...#.#.#..#.....##.##......#.#...#.......#...#.##...#..#..........#...#.....##..........#..#...#.#......#.......##......#...##..##..#....#..##.......#...#.#..##..#..#.....#.#................#....#.......#..#..###.......#...............##.....#..#......#....#.........#...###...#....#..##...#.#.#.........#.......#...#....#....#.#...#.#....##....#.#..##.#.....#..#..#....#..#.#..##.....##..#..#.#.#....#...#....#..#..........###.....#...##.#..#.#...#.#.#.#..#.##........#.#....#....#..........#....#.#.......#...#.....#........#........#....#..#.#..#...#...................#....####..#..#..#..#....#..#.#...##.#..........#.##..#.....##...................##..........#....##....###.....#..#...#.#....##.........#..#...................##..###....#.##............#.#...###.#..##...#...........#.....#..#......#.....#...........#..##...#.....#.....#.#............#....###.#..#.#.#....#..##...#.......#.##.....#..........#.#..#...#.............##...........#..............#.....#..#......#......###....#...#...........#.....#...#.......###.....#..........##......##.#.#.....#....#.......#..#......#.......#..#...#.###...........#..#.###......#...#.#...........#.#...##........#.#.#........#.#.....#.....##..##.#.#..#.#....#.#.##....#.#.#......##.....#...#.#...###...#..#......#.#.#..#...#........#..##...........#..#..#..#..#..##...#...#...##.#..#.#....#.#.....####.#..#..#....##..#.#..#....#..#......#.....#.#.#........#..#.....#......#............#.#..###.....#...#...#.....##..#.#...##..#...........####....#.##....##.#......#.....##.#..#.##..#....#.###..........##....###...#......#.#....##...........................#..#.....#..#.#...#.#..#.....#...#..####.##....#.##..##...##.##.....#......#...#.##...........#.......##.###..#.....##...#.........##....###....##...###................#....#####........#.#.#.##.....#.#....####.##........#............#......#........................###.....##......#..##.#......#.#...........##.#....##.#....................#.#.#.......#.#.#........#..#.......##.......#...#...#....#......#....##.##..#..............#......#....#......#.........##..................#.#....##..#.......#............#.......#...........#........#....#.#..##.#....#...#....#.#.#..#..#.#.#.#...#....#....#.#.#....#...#.#..#......#.....#.#...........#.#....##.....#...........#...#....#....##.....###..#..........#..#..#.....#....#.#.###..........#.##....#...##..#................#.##.##.......#...#.##...##...#.........#..#....#......#......#.........#.##...#...##.#.........#......#........#.....#....................#...#.....##.........#.#..#...#......#...#.......#......#.##.......#...#.##.#..##..#.......#.#............#...###..#........#.......##.......#....#..#.......#..#.#....#.#.............#....#...##.##....#....##..............#......#.......#....#....#..#..##......##.#..#.#..##......##......#.##.##......#.............##.#...#.....#.......#...##.#....#..#......#.##.........##.####.#...#.#....#..........#........#.....#..#....#...#.####....##......#..#..#.##..#.............###.#..#..#....#.......#.........#....#.....#....#.#.#...#.#.....##.#...#...#.#..#.....##......##.##.#.....#..#.......#.##...##.......#..##......#..........#..#....#.......#.#...#.....#.................#..............#.#.#.....#.#....#..#.......#..........#.##....#....#..#.....#.......#........#....#.....##..#.........##..#..#.#..##.#...#..........#....#..........#..#.#......#.##..#..#.##.....##.####....#.....#.#...##.....#.#....#.#........#..........#...#.#.##.##....##..#...#...#....#.#.......#..#...#..#..##..#.....#....#........###.....#..........#..#.##....#.#.....#........##....#....#.......#.....#..........#........###...##.....#.#..#...##.........#.#..#....#...##...........#.........#...#......#.#.#.........#..#.#.#...........##.###....#..#.......#.....#.#...#......#..#........##.#....##....#...#.##.........#.####.#..#...........##.#.#........#....#..#.....#..##.####.#...##...#...........#.#.........##.#..#..#...#.#.#.........#..#.#......###............#...#......#.......#....#...#...#..#...##.#.#...##..#...#...#.......##.......#.#.......#..........#.#................#...#..#...#.#...#.#...##.####..##.##....#..##.#..####.......##.#........#...#......###....##...#.#..#.##.....##.....###..#...#.###.###.......#...#.....#...#..#..##..#.......#...##.....##........#.#.##..#...#..#....#....#..###....#.#..#.#.#.#.#..........#.#..#..##.......###.....................##.#......#.##.....#.........#.......................#.#.....##..#........##.......#..##..#.##.#.#.....##.#.##.##.#....##....#...#.....#.........#.....#.....#.........#.##.#.###.#......#.........#..#.##...#.......###......##........#......#...........#.#...##...#........#.##.............##............#.####..#....#...#...#..#....#..#.#.#.#..#.........#......#.##............#.....#........#........#.#.##.#..#.#..#..###......###....#.###.....#.#.#.##........#..###.#..#...##.....#....#...#.#.........#....#.....#...#............#........##.......#.##..####..#..#....#....#..#..#...#.##...##.....#............#...#...........#.......#.....#...#.#.#...........#.....#...##...............#........##...........#...#.#..##.#...#....#....#........#.##..#.#.......#...#......#..............#.#..#..#.....##.#..#....#.##.......#......#.##..#......#........#.##.#...#.....#......###..#.......##....................#.#.#.....#.##.......#.......#....#......#.#.....#...##........#...#..#.#.........#.##...........#.##...##......#....#.###.#.#.#...####..#....###..........#...#.....##....#.#.##.###..###.#.#.....#.##.........#..#...#.#.................##.###.........#.#....#.#...#.###..#.#....#..............#.##.#......#..#....##.#..#.......#..##..#..#.###......##..........#..#.##....#.#....#....#.#..#.............#.....#..#....#.##...#..#.#.#.........###..#..#.....#.....##..##...##....#..#......#............#....#..........#....#..##..#...#......#.....#.#....#..##..#....#.#.#...#................##..#.........#........#..##..#..#......###.....#..#.........#..#.##..........#.#..#..."
  .byte 0
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0

