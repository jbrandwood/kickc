Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  (byte*) screen#19 ← phi( _start::@1/(byte*) screen#22 )
  (byte) print_msg::idx#0 ← (number) 1
  call print_msg 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) screen#10 ← phi( main/(byte*) screen#4 )
  (byte*) screen#0 ← (byte*) screen#10
  (byte) print_msg::idx#1 ← (number) 2
  call print_msg 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) screen#11 ← phi( main::@1/(byte*) screen#4 )
  (byte*) screen#1 ← (byte*) screen#11
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte*) screen#12 ← phi( main::@2/(byte*) screen#1 )
  (byte*) screen#2 ← (byte*) screen#12
  return 
  to:@return

(void()) print_msg((byte) print_msg::idx)
print_msg: scope:[print_msg]  from main main::@1
  (byte*) screen#26 ← phi( main/(byte*) screen#19 main::@1/(byte*) screen#0 )
  (byte) print_msg::idx#2 ← phi( main/(byte) print_msg::idx#0 main::@1/(byte) print_msg::idx#1 )
  (byte*) print_msg::msg#0 ← (byte*) 0
  (bool~) print_msg::$0 ← (byte) print_msg::idx#2 == (number) 1
  if((bool~) print_msg::$0) goto print_msg::@1
  to:print_msg::@3
print_msg::@1: scope:[print_msg]  from print_msg
  (byte*) screen#23 ← phi( print_msg/(byte*) screen#26 )
  (byte*) print_msg::msg#1 ← (const byte*) print_msg::$2
  to:print_msg::@2
print_msg::@3: scope:[print_msg]  from print_msg
  (byte*) screen#24 ← phi( print_msg/(byte*) screen#26 )
  (byte*) print_msg::msg#2 ← (const byte*) print_msg::$3
  to:print_msg::@2
print_msg::@2: scope:[print_msg]  from print_msg::@1 print_msg::@3
  (byte*) screen#20 ← phi( print_msg::@1/(byte*) screen#23 print_msg::@3/(byte*) screen#24 )
  (byte*) print_msg::msg#3 ← phi( print_msg::@1/(byte*) print_msg::msg#1 print_msg::@3/(byte*) print_msg::msg#2 )
  (byte*) print::msg#0 ← (byte*) print_msg::msg#3
  call print 
  to:print_msg::@4
print_msg::@4: scope:[print_msg]  from print_msg::@2
  (byte*) screen#13 ← phi( print_msg::@2/(byte*) screen#6 )
  (byte*) screen#3 ← (byte*) screen#13
  to:print_msg::@return
print_msg::@return: scope:[print_msg]  from print_msg::@4
  (byte*) screen#14 ← phi( print_msg::@4/(byte*) screen#3 )
  (byte*) screen#4 ← (byte*) screen#14
  return 
  to:@return

(void()) print((byte*) print::msg)
print: scope:[print]  from print_msg::@2
  (byte*) screen#25 ← phi( print_msg::@2/(byte*) screen#20 )
  (byte*) print::msg#4 ← phi( print_msg::@2/(byte*) print::msg#0 )
  to:print::@1
print::@1: scope:[print]  from print print::@2
  (byte*) screen#21 ← phi( print/(byte*) screen#25 print::@2/(byte*) screen#5 )
  (byte*) print::msg#2 ← phi( print/(byte*) print::msg#4 print::@2/(byte*) print::msg#1 )
  (bool~) print::$0 ← (number) 0 != *((byte*) print::msg#2)
  if((bool~) print::$0) goto print::@2
  to:print::@return
print::@2: scope:[print]  from print::@1
  (byte*) screen#15 ← phi( print::@1/(byte*) screen#21 )
  (byte*) print::msg#3 ← phi( print::@1/(byte*) print::msg#2 )
  *((byte*) screen#15) ← *((byte*) print::msg#3)
  (byte*) screen#5 ← ++ (byte*) screen#15
  (byte*) print::msg#1 ← ++ (byte*) print::msg#3
  to:print::@1
print::@return: scope:[print]  from print::@1
  (byte*) screen#16 ← phi( print::@1/(byte*) screen#21 )
  (byte*) screen#6 ← (byte*) screen#16
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (byte*) screen#7 ← (byte*)(number) $400
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  (byte*) screen#22 ← phi( _start::_init1/(byte*) screen#7 )
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  (byte*) screen#17 ← phi( _start::@1/(byte*) screen#2 )
  (byte*) screen#8 ← (byte*) screen#17
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  (byte*) screen#18 ← phi( _start::@2/(byte*) screen#8 )
  (byte*) screen#9 ← (byte*) screen#18
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(void()) print((byte*) print::msg)
(bool~) print::$0
(label) print::@1
(label) print::@2
(label) print::@return
(byte*) print::msg
(byte*) print::msg#0
(byte*) print::msg#1
(byte*) print::msg#2
(byte*) print::msg#3
(byte*) print::msg#4
(void()) print_msg((byte) print_msg::idx)
(bool~) print_msg::$0
(const byte*) print_msg::$2[(byte) 7]  = (byte*) "Hello "
(const byte*) print_msg::$3[(byte) 7]  = (byte*) "World!"
(label) print_msg::@1
(label) print_msg::@2
(label) print_msg::@3
(label) print_msg::@4
(label) print_msg::@return
(byte) print_msg::idx
(byte) print_msg::idx#0
(byte) print_msg::idx#1
(byte) print_msg::idx#2
(byte*) print_msg::msg
(byte*) print_msg::msg#0
(byte*) print_msg::msg#1
(byte*) print_msg::msg#2
(byte*) print_msg::msg#3
(byte*) screen
(byte*) screen#0
(byte*) screen#1
(byte*) screen#10
(byte*) screen#11
(byte*) screen#12
(byte*) screen#13
(byte*) screen#14
(byte*) screen#15
(byte*) screen#16
(byte*) screen#17
(byte*) screen#18
(byte*) screen#19
(byte*) screen#2
(byte*) screen#20
(byte*) screen#21
(byte*) screen#22
(byte*) screen#23
(byte*) screen#24
(byte*) screen#25
(byte*) screen#26
(byte*) screen#3
(byte*) screen#4
(byte*) screen#5
(byte*) screen#6
(byte*) screen#7
(byte*) screen#8
(byte*) screen#9

Adding number conversion cast (unumber) 1 in (byte) print_msg::idx#0 ← (number) 1
Adding number conversion cast (unumber) 2 in (byte) print_msg::idx#1 ← (number) 2
Adding number conversion cast (unumber) 1 in (bool~) print_msg::$0 ← (byte) print_msg::idx#2 == (number) 1
Adding number conversion cast (unumber) 0 in (bool~) print::$0 ← (number) 0 != *((byte*) print::msg#2)
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) print_msg::idx#0 ← (unumber)(number) 1
Inlining cast (byte) print_msg::idx#1 ← (unumber)(number) 2
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias screen#0 = screen#10 
Alias screen#1 = screen#11 screen#12 screen#2 
Alias screen#23 = screen#26 screen#24 
Alias screen#13 = screen#3 screen#14 screen#4 
Alias print::msg#2 = print::msg#3 
Alias screen#15 = screen#21 screen#16 screen#6 
Alias screen#22 = screen#7 
Alias screen#17 = screen#8 screen#18 screen#9 
Successful SSA optimization Pass2AliasElimination
Alias screen#20 = screen#23 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) screen#19 (byte*) screen#22
Identical Phi Values (byte*) screen#0 (byte*) screen#13
Identical Phi Values (byte*) screen#1 (byte*) screen#13
Identical Phi Values (byte*) screen#13 (byte*) screen#15
Identical Phi Values (byte*) print::msg#4 (byte*) print::msg#0
Identical Phi Values (byte*) screen#25 (byte*) screen#20
Identical Phi Values (byte*) screen#17 (byte*) screen#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) print_msg::$0 [11] if((byte) print_msg::idx#2==(byte) 1) goto print_msg::@1
Simple Condition (bool~) print::$0 [22] if((byte) 0!=*((byte*) print::msg#2)) goto print::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) print_msg::idx#0 = 1
Constant (const byte) print_msg::idx#1 = 2
Constant (const byte*) print_msg::msg#0 = (byte*) 0
Constant (const byte*) print_msg::msg#1 = print_msg::$2
Constant (const byte*) print_msg::msg#2 = print_msg::$3
Constant (const byte*) screen#22 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte*) print_msg::msg#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings (const byte) print_msg::idx#0
Inlining constant with var siblings (const byte) print_msg::idx#1
Inlining constant with var siblings (const byte*) print_msg::msg#1
Inlining constant with var siblings (const byte*) print_msg::msg#2
Inlining constant with var siblings (const byte*) screen#22
Constant inlined print_msg::idx#1 = (byte) 2
Constant inlined screen#22 = (byte*) 1024
Constant inlined print_msg::idx#0 = (byte) 1
Constant inlined print_msg::$3 = (const byte*) print_msg::msg#2
Constant inlined print_msg::$2 = (const byte*) print_msg::msg#1
Successful SSA optimization Pass2ConstantInlining
Inlining constant with var siblings (const byte*) print_msg::msg#1
Inlining constant with var siblings (const byte*) print_msg::msg#2
Inlining constant with var siblings (const byte*) print_msg::msg#1
Inlining constant with var siblings (const byte*) print_msg::msg#2
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of print_msg::@3
Adding NOP phi() at start of print_msg::@4
Adding NOP phi() at start of print_msg::@1
CALL GRAPH
Calls in [main] to print_msg:1 print_msg:3 
Calls in [print_msg] to print:11 

Created 5 initial phi equivalence classes
Coalesced [2] screen#27 ← screen#15
Coalesced [15] print::msg#5 ← print::msg#0
Coalesced (already) [16] screen#28 ← screen#20
Coalesced [23] print::msg#6 ← print::msg#1
Coalesced [24] screen#29 ← screen#5
Coalesced down to 4 phi equivalence classes
Culled Empty Block (label) main::@2
Culled Empty Block (label) print_msg::@3
Culled Empty Block (label) print_msg::@4
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of print_msg::@1
Adding NOP phi() at start of print

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call print_msg 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call print_msg 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return

(void()) print_msg((byte) print_msg::idx)
print_msg: scope:[print_msg]  from main main::@1
  [5] (byte*) screen#20 ← phi( main/(byte*) 1024 main::@1/(byte*) screen#15 )
  [5] (byte) print_msg::idx#2 ← phi( main/(byte) 1 main::@1/(byte) 2 )
  [6] if((byte) print_msg::idx#2==(byte) 1) goto print_msg::@1
  to:print_msg::@2
print_msg::@1: scope:[print_msg]  from print_msg
  [7] phi()
  to:print_msg::@2
print_msg::@2: scope:[print_msg]  from print_msg print_msg::@1
  [8] (byte*) print_msg::msg#3 ← phi( print_msg::@1/(const byte*) print_msg::msg#1 print_msg/(const byte*) print_msg::msg#2 )
  [9] (byte*) print::msg#0 ← (byte*) print_msg::msg#3
  [10] call print 
  to:print_msg::@return
print_msg::@return: scope:[print_msg]  from print_msg::@2
  [11] return 
  to:@return

(void()) print((byte*) print::msg)
print: scope:[print]  from print_msg::@2
  [12] phi()
  to:print::@1
print::@1: scope:[print]  from print print::@2
  [13] (byte*) screen#15 ← phi( print/(byte*) screen#20 print::@2/(byte*) screen#5 )
  [13] (byte*) print::msg#2 ← phi( print/(byte*) print::msg#0 print::@2/(byte*) print::msg#1 )
  [14] if((byte) 0!=*((byte*) print::msg#2)) goto print::@2
  to:print::@return
print::@return: scope:[print]  from print::@1
  [15] return 
  to:@return
print::@2: scope:[print]  from print::@1
  [16] *((byte*) screen#15) ← *((byte*) print::msg#2)
  [17] (byte*) screen#5 ← ++ (byte*) screen#15
  [18] (byte*) print::msg#1 ← ++ (byte*) print::msg#2
  to:print::@1


VARIABLE REGISTER WEIGHTS
(void()) main()
(void()) print((byte*) print::msg)
(byte*) print::msg
(byte*) print::msg#0 56.0
(byte*) print::msg#1 2002.0
(byte*) print::msg#2 1026.25
(void()) print_msg((byte) print_msg::idx)
(byte) print_msg::idx
(byte) print_msg::idx#2 11.0
(byte*) print_msg::msg
(byte*) print_msg::msg#3 11.0
(byte*) screen
(byte*) screen#15 388.25
(byte*) screen#20 17.166666666666664
(byte*) screen#5 1001.0

Initial phi equivalence classes
[ print_msg::idx#2 ]
[ screen#20 screen#15 screen#5 ]
[ print_msg::msg#3 ]
[ print::msg#2 print::msg#0 print::msg#1 ]
Complete equivalence classes
[ print_msg::idx#2 ]
[ screen#20 screen#15 screen#5 ]
[ print_msg::msg#3 ]
[ print::msg#2 print::msg#0 print::msg#1 ]
Allocated zp[1]:2 [ print_msg::idx#2 ]
Allocated zp[2]:3 [ screen#20 screen#15 screen#5 ]
Allocated zp[2]:5 [ print_msg::msg#3 ]
Allocated zp[2]:7 [ print::msg#2 print::msg#0 print::msg#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Inline Strings in assignments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = 3
  // main
main: {
    // [1] call print_msg 
    // [5] phi from main to print_msg [phi:main->print_msg]
  print_msg_from_main:
    // [5] phi (byte*) screen#20 = (byte*) 1024 [phi:main->print_msg#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [5] phi (byte) print_msg::idx#2 = (byte) 1 [phi:main->print_msg#1] -- vbuz1=vbuc1 
    lda #1
    sta.z print_msg.idx
    jsr print_msg
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call print_msg 
    // [5] phi from main::@1 to print_msg [phi:main::@1->print_msg]
  print_msg_from___b1:
    // [5] phi (byte*) screen#20 = (byte*) screen#15 [phi:main::@1->print_msg#0] -- register_copy 
    // [5] phi (byte) print_msg::idx#2 = (byte) 2 [phi:main::@1->print_msg#1] -- vbuz1=vbuc1 
    lda #2
    sta.z print_msg.idx
    jsr print_msg
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // print_msg
// print_msg(byte zp(2) idx)
print_msg: {
    .label idx = 2
    .label msg = 5
    // [6] if((byte) print_msg::idx#2==(byte) 1) goto print_msg::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #1
    cmp.z idx
    beq __b1_from_print_msg
    // [8] phi from print_msg to print_msg::@2 [phi:print_msg->print_msg::@2]
  __b2_from_print_msg:
    // [8] phi (byte*) print_msg::msg#3 = (const byte*) print_msg::msg#2 [phi:print_msg->print_msg::@2#0] -- pbuz1=pbuc1 
    lda #<msg_2
    sta.z msg
    lda #>msg_2
    sta.z msg+1
    jmp __b2
    // [7] phi from print_msg to print_msg::@1 [phi:print_msg->print_msg::@1]
  __b1_from_print_msg:
    jmp __b1
    // print_msg::@1
  __b1:
    // [8] phi from print_msg::@1 to print_msg::@2 [phi:print_msg::@1->print_msg::@2]
  __b2_from___b1:
    // [8] phi (byte*) print_msg::msg#3 = (const byte*) print_msg::msg#1 [phi:print_msg::@1->print_msg::@2#0] -- pbuz1=pbuc1 
    lda #<msg_1
    sta.z msg
    lda #>msg_1
    sta.z msg+1
    jmp __b2
    // print_msg::@2
  __b2:
    // [9] (byte*) print::msg#0 ← (byte*) print_msg::msg#3 -- pbuz1=pbuz2 
    lda.z msg
    sta.z print.msg
    lda.z msg+1
    sta.z print.msg+1
    // [10] call print 
    // [12] phi from print_msg::@2 to print [phi:print_msg::@2->print]
  print_from___b2:
    jsr print
    jmp __breturn
    // print_msg::@return
  __breturn:
    // [11] return 
    rts
    msg_1: .text "Hello "
    .byte 0
    msg_2: .text "World!"
    .byte 0
}
  // print
// print(byte* zp(7) msg)
print: {
    .label msg = 7
    // [13] phi from print print::@2 to print::@1 [phi:print/print::@2->print::@1]
  __b1_from_print:
  __b1_from___b2:
    // [13] phi (byte*) screen#15 = (byte*) screen#20 [phi:print/print::@2->print::@1#0] -- register_copy 
    // [13] phi (byte*) print::msg#2 = (byte*) print::msg#0 [phi:print/print::@2->print::@1#1] -- register_copy 
    jmp __b1
    // print::@1
  __b1:
    // [14] if((byte) 0!=*((byte*) print::msg#2)) goto print::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (msg),y
    cmp #0
    bne __b2
    jmp __breturn
    // print::@return
  __breturn:
    // [15] return 
    rts
    // print::@2
  __b2:
    // [16] *((byte*) screen#15) ← *((byte*) print::msg#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (msg),y
    ldy #0
    sta (screen),y
    // [17] (byte*) screen#5 ← ++ (byte*) screen#15 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [18] (byte*) print::msg#1 ← ++ (byte*) print::msg#2 -- pbuz1=_inc_pbuz1 
    inc.z msg
    bne !+
    inc.z msg+1
  !:
    jmp __b1_from___b2
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [9] (byte*) print::msg#0 ← (byte*) print_msg::msg#3 [ screen#20 print::msg#0 ] ( print_msg:1 [ screen#20 print::msg#0 ] { { print::msg#0 = print_msg::msg#3 } }  print_msg:3 [ screen#20 print::msg#0 ] { { screen#15 = screen#20 } { print::msg#0 = print_msg::msg#3 } }  ) always clobbers reg byte a 
Statement [14] if((byte) 0!=*((byte*) print::msg#2)) goto print::@2 [ screen#15 print::msg#2 ] ( print_msg:1::print:10 [ screen#15 print::msg#2 ] { { print::msg#0 = print_msg::msg#3 } }  print_msg:3::print:10 [ screen#15 print::msg#2 ] { { screen#15 = screen#20 } { print::msg#0 = print_msg::msg#3 } }  ) always clobbers reg byte a reg byte y 
Statement [16] *((byte*) screen#15) ← *((byte*) print::msg#2) [ screen#15 print::msg#2 ] ( print_msg:1::print:10 [ screen#15 print::msg#2 ] { { print::msg#0 = print_msg::msg#3 } }  print_msg:3::print:10 [ screen#15 print::msg#2 ] { { screen#15 = screen#20 } { print::msg#0 = print_msg::msg#3 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ print_msg::idx#2 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:3 [ screen#20 screen#15 screen#5 ] : zp[2]:3 , 
Potential registers zp[2]:5 [ print_msg::msg#3 ] : zp[2]:5 , 
Potential registers zp[2]:7 [ print::msg#2 print::msg#0 print::msg#1 ] : zp[2]:7 , 

REGISTER UPLIFT SCOPES
Uplift Scope [print] 3,084.25: zp[2]:7 [ print::msg#2 print::msg#0 print::msg#1 ] 
Uplift Scope [] 1,406.42: zp[2]:3 [ screen#20 screen#15 screen#5 ] 
Uplift Scope [print_msg] 11: zp[1]:2 [ print_msg::idx#2 ] 11: zp[2]:5 [ print_msg::msg#3 ] 
Uplift Scope [main] 

Uplifting [print] best 728 combination zp[2]:7 [ print::msg#2 print::msg#0 print::msg#1 ] 
Uplifting [] best 728 combination zp[2]:3 [ screen#20 screen#15 screen#5 ] 
Uplifting [print_msg] best 719 combination reg byte x [ print_msg::idx#2 ] zp[2]:5 [ print_msg::msg#3 ] 
Uplifting [main] best 719 combination 
Coalescing zero page register [ zp[2]:5 [ print_msg::msg#3 ] ] with [ zp[2]:7 [ print::msg#2 print::msg#0 print::msg#1 ] ] - score: 1
Allocated (was zp[2]:3) zp[2]:2 [ screen#20 screen#15 screen#5 ]
Allocated (was zp[2]:5) zp[2]:4 [ print_msg::msg#3 print::msg#2 print::msg#0 print::msg#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Inline Strings in assignments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = 2
  // main
main: {
    // [1] call print_msg 
    // [5] phi from main to print_msg [phi:main->print_msg]
  print_msg_from_main:
    // [5] phi (byte*) screen#20 = (byte*) 1024 [phi:main->print_msg#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [5] phi (byte) print_msg::idx#2 = (byte) 1 [phi:main->print_msg#1] -- vbuxx=vbuc1 
    ldx #1
    jsr print_msg
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call print_msg 
    // [5] phi from main::@1 to print_msg [phi:main::@1->print_msg]
  print_msg_from___b1:
    // [5] phi (byte*) screen#20 = (byte*) screen#15 [phi:main::@1->print_msg#0] -- register_copy 
    // [5] phi (byte) print_msg::idx#2 = (byte) 2 [phi:main::@1->print_msg#1] -- vbuxx=vbuc1 
    ldx #2
    jsr print_msg
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // print_msg
// print_msg(byte register(X) idx)
print_msg: {
    .label msg = 4
    // [6] if((byte) print_msg::idx#2==(byte) 1) goto print_msg::@1 -- vbuxx_eq_vbuc1_then_la1 
    cpx #1
    beq __b1_from_print_msg
    // [8] phi from print_msg to print_msg::@2 [phi:print_msg->print_msg::@2]
  __b2_from_print_msg:
    // [8] phi (byte*) print_msg::msg#3 = (const byte*) print_msg::msg#2 [phi:print_msg->print_msg::@2#0] -- pbuz1=pbuc1 
    lda #<msg_2
    sta.z msg
    lda #>msg_2
    sta.z msg+1
    jmp __b2
    // [7] phi from print_msg to print_msg::@1 [phi:print_msg->print_msg::@1]
  __b1_from_print_msg:
    jmp __b1
    // print_msg::@1
  __b1:
    // [8] phi from print_msg::@1 to print_msg::@2 [phi:print_msg::@1->print_msg::@2]
  __b2_from___b1:
    // [8] phi (byte*) print_msg::msg#3 = (const byte*) print_msg::msg#1 [phi:print_msg::@1->print_msg::@2#0] -- pbuz1=pbuc1 
    lda #<msg_1
    sta.z msg
    lda #>msg_1
    sta.z msg+1
    jmp __b2
    // print_msg::@2
  __b2:
    // [9] (byte*) print::msg#0 ← (byte*) print_msg::msg#3
    // [10] call print 
    // [12] phi from print_msg::@2 to print [phi:print_msg::@2->print]
  print_from___b2:
    jsr print
    jmp __breturn
    // print_msg::@return
  __breturn:
    // [11] return 
    rts
    msg_1: .text "Hello "
    .byte 0
    msg_2: .text "World!"
    .byte 0
}
  // print
// print(byte* zp(4) msg)
print: {
    .label msg = 4
    // [13] phi from print print::@2 to print::@1 [phi:print/print::@2->print::@1]
  __b1_from_print:
  __b1_from___b2:
    // [13] phi (byte*) screen#15 = (byte*) screen#20 [phi:print/print::@2->print::@1#0] -- register_copy 
    // [13] phi (byte*) print::msg#2 = (byte*) print::msg#0 [phi:print/print::@2->print::@1#1] -- register_copy 
    jmp __b1
    // print::@1
  __b1:
    // [14] if((byte) 0!=*((byte*) print::msg#2)) goto print::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (msg),y
    cmp #0
    bne __b2
    jmp __breturn
    // print::@return
  __breturn:
    // [15] return 
    rts
    // print::@2
  __b2:
    // [16] *((byte*) screen#15) ← *((byte*) print::msg#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (msg),y
    ldy #0
    sta (screen),y
    // [17] (byte*) screen#5 ← ++ (byte*) screen#15 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [18] (byte*) print::msg#1 ← ++ (byte*) print::msg#2 -- pbuz1=_inc_pbuz1 
    inc.z msg
    bne !+
    inc.z msg+1
  !:
    jmp __b1_from___b2
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from_print_msg with __b1
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from_main:
Removing instruction print_msg_from___b1:
Removing instruction __b1_from_print_msg:
Removing instruction __b2_from___b1:
Removing instruction print_from___b2:
Removing instruction __b1_from_print:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction print_msg_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b2_from_print_msg:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) main()
(label) main::@1
(label) main::@return
(void()) print((byte*) print::msg)
(label) print::@1
(label) print::@2
(label) print::@return
(byte*) print::msg
(byte*) print::msg#0 msg zp[2]:4 56.0
(byte*) print::msg#1 msg zp[2]:4 2002.0
(byte*) print::msg#2 msg zp[2]:4 1026.25
(void()) print_msg((byte) print_msg::idx)
(label) print_msg::@1
(label) print_msg::@2
(label) print_msg::@return
(byte) print_msg::idx
(byte) print_msg::idx#2 reg byte x 11.0
(byte*) print_msg::msg
(const byte*) print_msg::msg#1 msg_1 = (byte*) "Hello "
(const byte*) print_msg::msg#2 msg_2 = (byte*) "World!"
(byte*) print_msg::msg#3 msg zp[2]:4 11.0
(byte*) screen
(byte*) screen#15 screen zp[2]:2 388.25
(byte*) screen#20 screen zp[2]:2 17.166666666666664
(byte*) screen#5 screen zp[2]:2 1001.0

reg byte x [ print_msg::idx#2 ]
zp[2]:2 [ screen#20 screen#15 screen#5 ]
zp[2]:4 [ print_msg::msg#3 print::msg#2 print::msg#0 print::msg#1 ]


FINAL ASSEMBLER
Score: 612

  // File Comments
// Inline Strings in assignments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = 2
  // main
main: {
    // print_msg(1)
    // [1] call print_msg 
    // [5] phi from main to print_msg [phi:main->print_msg]
    // [5] phi (byte*) screen#20 = (byte*) 1024 [phi:main->print_msg#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [5] phi (byte) print_msg::idx#2 = (byte) 1 [phi:main->print_msg#1] -- vbuxx=vbuc1 
    ldx #1
    jsr print_msg
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // print_msg(2)
    // [3] call print_msg 
    // [5] phi from main::@1 to print_msg [phi:main::@1->print_msg]
    // [5] phi (byte*) screen#20 = (byte*) screen#15 [phi:main::@1->print_msg#0] -- register_copy 
    // [5] phi (byte) print_msg::idx#2 = (byte) 2 [phi:main::@1->print_msg#1] -- vbuxx=vbuc1 
    ldx #2
    jsr print_msg
    // main::@return
    // }
    // [4] return 
    rts
}
  // print_msg
// print_msg(byte register(X) idx)
print_msg: {
    .label msg = 4
    // if(idx==1)
    // [6] if((byte) print_msg::idx#2==(byte) 1) goto print_msg::@1 -- vbuxx_eq_vbuc1_then_la1 
    cpx #1
    beq __b1
    // [8] phi from print_msg to print_msg::@2 [phi:print_msg->print_msg::@2]
    // [8] phi (byte*) print_msg::msg#3 = (const byte*) print_msg::msg#2 [phi:print_msg->print_msg::@2#0] -- pbuz1=pbuc1 
    lda #<msg_2
    sta.z msg
    lda #>msg_2
    sta.z msg+1
    jmp __b2
    // [7] phi from print_msg to print_msg::@1 [phi:print_msg->print_msg::@1]
    // print_msg::@1
  __b1:
    // [8] phi from print_msg::@1 to print_msg::@2 [phi:print_msg::@1->print_msg::@2]
    // [8] phi (byte*) print_msg::msg#3 = (const byte*) print_msg::msg#1 [phi:print_msg::@1->print_msg::@2#0] -- pbuz1=pbuc1 
    lda #<msg_1
    sta.z msg
    lda #>msg_1
    sta.z msg+1
    // print_msg::@2
  __b2:
    // print(msg)
    // [9] (byte*) print::msg#0 ← (byte*) print_msg::msg#3
    // [10] call print 
    // [12] phi from print_msg::@2 to print [phi:print_msg::@2->print]
    jsr print
    // print_msg::@return
    // }
    // [11] return 
    rts
    msg_1: .text "Hello "
    .byte 0
    msg_2: .text "World!"
    .byte 0
}
  // print
// print(byte* zp(4) msg)
print: {
    .label msg = 4
    // [13] phi from print print::@2 to print::@1 [phi:print/print::@2->print::@1]
    // [13] phi (byte*) screen#15 = (byte*) screen#20 [phi:print/print::@2->print::@1#0] -- register_copy 
    // [13] phi (byte*) print::msg#2 = (byte*) print::msg#0 [phi:print/print::@2->print::@1#1] -- register_copy 
    // print::@1
  __b1:
    // while(*msg)
    // [14] if((byte) 0!=*((byte*) print::msg#2)) goto print::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (msg),y
    cmp #0
    bne __b2
    // print::@return
    // }
    // [15] return 
    rts
    // print::@2
  __b2:
    // *(screen++) = *(msg++)
    // [16] *((byte*) screen#15) ← *((byte*) print::msg#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (msg),y
    sta (screen),y
    // *(screen++) = *(msg++);
    // [17] (byte*) screen#5 ← ++ (byte*) screen#15 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [18] (byte*) print::msg#1 ← ++ (byte*) print::msg#2 -- pbuz1=_inc_pbuz1 
    inc.z msg
    bne !+
    inc.z msg+1
  !:
    jmp __b1
}
  // File Data

