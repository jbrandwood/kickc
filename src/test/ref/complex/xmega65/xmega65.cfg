@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] *((const byte*) VIC_MEMORY#0) ← (byte) $14
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte*) main::cols#2 ← phi( main/(const byte*) COLS#0 main::@2/(byte*) main::cols#1 )
  [5] (byte*) main::sc#2 ← phi( main/(const byte*) SCREEN#0 main::@2/(byte*) main::sc#1 )
  [5] (byte*) main::msg#2 ← phi( main/(const byte[]) MESSAGE#0 main::@2/(byte*) main::msg#1 )
  [6] if((byte) 0!=*((byte*) main::msg#2)) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@3
  [7] phi()
  to:main::@3
main::@2: scope:[main]  from main::@1
  [8] *((byte*) main::sc#2) ← *((byte*) main::msg#2)
  [9] *((byte*) main::cols#2) ← (const byte) WHITE#0
  [10] (byte*) main::msg#1 ← ++ (byte*) main::msg#2
  [11] (byte*) main::sc#1 ← ++ (byte*) main::sc#2
  [12] (byte*) main::cols#1 ← ++ (byte*) main::cols#2
  to:main::@1
syscall2: scope:[syscall2]  from
  [13] *((const byte*) syscall2::BGCOL#0) ← ++ *((const byte*) syscall2::BGCOL#0)
  to:syscall2::@return
syscall2::@return: scope:[syscall2]  from syscall2
  [14] return 
  to:@return
syscall1: scope:[syscall1]  from
  [15] *((const byte*) syscall1::BORDERCOL#0) ← ++ *((const byte*) syscall1::BORDERCOL#0)
  to:syscall1::@return
syscall1::@return: scope:[syscall1]  from syscall1
  [16] return 
  to:@return
