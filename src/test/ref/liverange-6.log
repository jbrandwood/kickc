Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  idx#15 = phi( __start::@1/idx#14 )
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  idx#13 = phi( main/idx#15, main::@2/idx#0 )
  main::i#2 = phi( main/main::i#0, main::@2/main::i#1 )
  out::c#0 = msg[main::i#2]
  call out 
  to:main::@2
main::@2: scope:[main]  from main::@1
  main::i#3 = phi( main::@1/main::i#2 )
  idx#7 = phi( main::@1/idx#3 )
  idx#0 = idx#7
  main::i#1 = main::i#3 + rangenext(0,$b)
  main::$1 = main::i#1 != rangelast(0,$b)
  if(main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  idx#8 = phi( main::@2/idx#0 )
  idx#1 = idx#8
  return 
  to:@return

void out(byte out::c)
out: scope:[out]  from main::@1
  idx#9 = phi( main::@1/idx#13 )
  out::c#1 = phi( main::@1/out::c#0 )
  SCREEN[idx#9] = out::c#1
  idx#2 = ++ idx#9
  to:out::@return
out::@return: scope:[out]  from out
  idx#10 = phi( out/idx#2 )
  idx#3 = idx#10
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  idx#4 = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  idx#14 = phi( __start::__init1/idx#4 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  idx#11 = phi( __start::@1/idx#1 )
  idx#5 = idx#11
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  idx#12 = phi( __start::@2/idx#5 )
  idx#6 = idx#12
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* SCREEN = (byte*)$400
void __start()
label __start::@1
label __start::@2
label __start::@return
label __start::__init1
byte idx
byte idx#0
byte idx#1
byte idx#10
byte idx#11
byte idx#12
byte idx#13
byte idx#14
byte idx#15
byte idx#2
byte idx#3
byte idx#4
byte idx#5
byte idx#6
byte idx#7
byte idx#8
byte idx#9
void main()
bool~ main::$1
label main::@1
label main::@2
label main::@return
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
const byte* msg[]  = "hello world!"
void out(byte out::c)
label out::@return
byte out::c
byte out::c#0
byte out::c#1

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Alias main::i#2 = main::i#3 
Alias idx#0 = idx#7 idx#8 idx#1 
Alias idx#10 = idx#2 idx#3 
Alias idx#14 = idx#4 
Alias idx#11 = idx#5 idx#12 idx#6 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values idx#15 idx#14
Identical Phi Values idx#0 idx#10
Identical Phi Values out::c#1 out::c#0
Identical Phi Values idx#9 idx#13
Identical Phi Values idx#11 idx#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$1 [8] if(main::i#1!=rangelast(0,$b)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Constant idx#14 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [6] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [8] if(main::i#1!=rangelast(0,$b)) goto main::@1 to $c
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $c in [4] if(main::i#1!=$c) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $c
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $c
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::i#0
Inlining constant with var siblings idx#14
Constant inlined main::i#0 = 0
Constant inlined idx#14 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@3(between main::@2 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH
Calls in [main] to out:3 

Created 2 initial phi equivalence classes
Coalesced [7] main::i#4 = main::i#1
Coalesced [8] idx#16 = idx#10
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@3
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] idx#13 = phi( main/0, main::@2/idx#10 )
  [1] main::i#2 = phi( main/0, main::@2/main::i#1 )
  [2] out::c#0 = msg[main::i#2]
  [3] call out 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] main::i#1 = ++ main::i#2
  [5] if(main::i#1!=$c) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [6] return 
  to:@return

void out(byte out::c)
out: scope:[out]  from main::@1
  [7] SCREEN[idx#13] = out::c#0
  [8] idx#10 = ++ idx#13
  to:out::@return
out::@return: scope:[out]  from out
  [9] return 
  to:@return


VARIABLE REGISTER WEIGHTS
byte idx
byte idx#10 22.4
byte idx#13 71.0
void main()
byte main::i
byte main::i#1 16.5
byte main::i#2 11.0
void out(byte out::c)
byte out::c
byte out::c#0 112.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ idx#13 idx#10 ]
Added variable out::c#0 to live range equivalence class [ out::c#0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ idx#13 idx#10 ]
[ out::c#0 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ idx#13 idx#10 ]
Allocated zp[1]:4 [ out::c#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ idx#13 idx#10 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ out::c#0 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [out] 112: zp[1]:4 [ out::c#0 ] 
Uplift Scope [] 93.4: zp[1]:3 [ idx#13 idx#10 ] 
Uplift Scope [main] 27.5: zp[1]:2 [ main::i#2 main::i#1 ] 

Uplifting [out] best 508 combination reg byte a [ out::c#0 ] 
Uplifting [] best 472 combination reg byte x [ idx#13 idx#10 ] 
Uplifting [main] best 352 combination reg byte y [ main::i#2 main::i#1 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test effective live range and register allocation
// out::c should be a hardware register, main::i should be a hardware register, global idx should be a hardware register
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi idx#13 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi main::i#2 = 0 [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi idx#13 = idx#10 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] out::c#0 = msg[main::i#2] -- vbuaa=pbuc1_derefidx_vbuyy 
    lda msg,y
    // [3] call out 
    jsr out
    jmp __b2
    // main::@2
  __b2:
    // [4] main::i#1 = ++ main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [5] if(main::i#1!=$c) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$c
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // out
// out(byte register(A) c)
out: {
    // [7] SCREEN[idx#13] = out::c#0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // [8] idx#10 = ++ idx#13 -- vbuxx=_inc_vbuxx 
    inx
    jmp __breturn
    // out::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data
  msg: .text "hello world!"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const nomodify byte* SCREEN = (byte*) 1024
byte idx
byte idx#10 reg byte x 22.4
byte idx#13 reg byte x 71.0
void main()
label main::@1
label main::@2
label main::@return
byte main::i
byte main::i#1 reg byte y 16.5
byte main::i#2 reg byte y 11.0
const byte* msg[]  = "hello world!"
void out(byte out::c)
label out::@return
byte out::c
byte out::c#0 reg byte a 112.0

reg byte y [ main::i#2 main::i#1 ]
reg byte x [ idx#13 idx#10 ]
reg byte a [ out::c#0 ]


FINAL ASSEMBLER
Score: 229

  // File Comments
// Test effective live range and register allocation
// out::c should be a hardware register, main::i should be a hardware register, global idx should be a hardware register
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi idx#13 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi main::i#2 = 0 [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #0
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi idx#13 = idx#10 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // out(msg[i])
    // [2] out::c#0 = msg[main::i#2] -- vbuaa=pbuc1_derefidx_vbuyy 
    lda msg,y
    // [3] call out 
    jsr out
    // main::@2
    // for( byte i: 0..11)
    // [4] main::i#1 = ++ main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [5] if(main::i#1!=$c) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$c
    bne __b1
    // main::@return
    // }
    // [6] return 
    rts
}
  // out
// out(byte register(A) c)
out: {
    // SCREEN[idx++] = c
    // [7] SCREEN[idx#13] = out::c#0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // SCREEN[idx++] = c;
    // [8] idx#10 = ++ idx#13 -- vbuxx=_inc_vbuxx 
    inx
    // out::@return
    // }
    // [9] return 
    rts
}
  // File Data
  msg: .text "hello world!"
  .byte 0

