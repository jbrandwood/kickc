
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (byte*~) main::$2 ← (byte*)(const struct PointDef*) main::SCREEN
  (byte*~) main::$0 ← (byte*~) main::$2 + (const byte) OFFSET_STRUCT_POINTDEF_X
  *((byte*~) main::$0) ← (const byte) main::p_x
  (byte*~) main::$3 ← (byte*)(const struct PointDef*) main::SCREEN
  (byte*~) main::$1 ← (byte*~) main::$3 + (const byte) OFFSET_STRUCT_POINTDEF_Y
  *((byte*~) main::$1) ← (const byte) main::p_y
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const byte) OFFSET_STRUCT_POINTDEF_X = (byte) 0
(const byte) OFFSET_STRUCT_POINTDEF_Y = (byte) 1
(byte) PointDef::x
(byte) PointDef::y
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(byte*~) main::$0
(byte*~) main::$1
(byte*~) main::$2
(byte*~) main::$3
(label) main::@return
(const struct PointDef*) main::SCREEN = (struct PointDef*)(number) $400
(const byte) main::p_x = (byte) 4
(const byte) main::p_y = (byte) 7

Simplifying constant pointer cast (struct PointDef*) 1024
Successful SSA optimization PassNCastSimplification
Constant right-side identified [0] (byte*~) main::$2 ← (byte*)(const struct PointDef*) main::SCREEN
Constant right-side identified [3] (byte*~) main::$3 ← (byte*)(const struct PointDef*) main::SCREEN
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::$2 = (byte*)main::SCREEN
Constant (const byte*) main::$3 = (byte*)main::SCREEN
Successful SSA optimization Pass2ConstantIdentification
Converting *(pointer+n) to pointer[n] [2] *((byte*~) main::$0) ← (const byte) main::p_x  -- *(main::$2 + OFFSET_STRUCT_POINTDEF_X)
Converting *(pointer+n) to pointer[n] [5] *((byte*~) main::$1) ← (const byte) main::p_y  -- *(main::$3 + OFFSET_STRUCT_POINTDEF_Y)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero main::$2 in [1] (byte*~) main::$0 ← (const byte*) main::$2 + (const byte) OFFSET_STRUCT_POINTDEF_X
Simplifying expression containing zero main::$2 in [2] *((const byte*) main::$2 + (const byte) OFFSET_STRUCT_POINTDEF_X) ← (const byte) main::p_x
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte*~) main::$0 and assignment [0] (byte*~) main::$0 ← (const byte*) main::$2
Eliminating unused variable (byte*~) main::$1 and assignment [2] (byte*~) main::$1 ← (const byte*) main::$3 + (const byte) OFFSET_STRUCT_POINTDEF_Y
Eliminating unused constant (const byte) OFFSET_STRUCT_POINTDEF_X
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant inlined main::$2 = (byte*)(const struct PointDef*) main::SCREEN
Constant inlined main::$3 = (byte*)(const struct PointDef*) main::SCREEN
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((byte*)main::SCREEN+OFFSET_STRUCT_POINTDEF_Y)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((byte*)(const struct PointDef*) main::SCREEN) ← (const byte) main::p_x
  [1] *((byte*)(const struct PointDef*) main::SCREEN+(const byte) OFFSET_STRUCT_POINTDEF_Y) ← (const byte) main::p_y
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) PointDef::x
(byte) PointDef::y
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINTDEF_Y = 1
  // main
main: {
    .const p_x = 4
    .const p_y = 7
    .label SCREEN = $400
    // [0] *((byte*)(const struct PointDef*) main::SCREEN) ← (const byte) main::p_x -- _deref_pbuc1=vbuc2 
    lda #p_x
    sta SCREEN
    // [1] *((byte*)(const struct PointDef*) main::SCREEN+(const byte) OFFSET_STRUCT_POINTDEF_Y) ← (const byte) main::p_y -- _deref_pbuc1=vbuc2 
    lda #p_y
    sta SCREEN+OFFSET_STRUCT_POINTDEF_Y
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((byte*)(const struct PointDef*) main::SCREEN) ← (const byte) main::p_x [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((byte*)(const struct PointDef*) main::SCREEN+(const byte) OFFSET_STRUCT_POINTDEF_Y) ← (const byte) main::p_y [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [PointDef] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [PointDef] best 21 combination 
Uplifting [main] best 21 combination 
Uplifting [] best 21 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINTDEF_Y = 1
  // main
main: {
    .const p_x = 4
    .const p_y = 7
    .label SCREEN = $400
    // [0] *((byte*)(const struct PointDef*) main::SCREEN) ← (const byte) main::p_x -- _deref_pbuc1=vbuc2 
    lda #p_x
    sta SCREEN
    // [1] *((byte*)(const struct PointDef*) main::SCREEN+(const byte) OFFSET_STRUCT_POINTDEF_Y) ← (const byte) main::p_y -- _deref_pbuc1=vbuc2 
    lda #p_y
    sta SCREEN+OFFSET_STRUCT_POINTDEF_Y
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const byte) OFFSET_STRUCT_POINTDEF_Y = (byte) 1
(byte) PointDef::x
(byte) PointDef::y
(void()) main()
(label) main::@return
(const struct PointDef*) main::SCREEN = (struct PointDef*) 1024
(const byte) main::p_x = (byte) 4
(const byte) main::p_y = (byte) 7



FINAL ASSEMBLER
Score: 18

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINTDEF_Y = 1
  // main
main: {
    .const p_x = 4
    .const p_y = 7
    .label SCREEN = $400
    // *SCREEN = p
    // [0] *((byte*)(const struct PointDef*) main::SCREEN) ← (const byte) main::p_x -- _deref_pbuc1=vbuc2 
    lda #p_x
    sta SCREEN
    // [1] *((byte*)(const struct PointDef*) main::SCREEN+(const byte) OFFSET_STRUCT_POINTDEF_Y) ← (const byte) main::p_y -- _deref_pbuc1=vbuc2 
    lda #p_y
    sta SCREEN+OFFSET_STRUCT_POINTDEF_Y
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data

