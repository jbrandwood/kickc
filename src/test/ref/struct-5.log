Eliminating unused variable with no statement (struct Point~) main::$0
Unwinding list assignment { (byte~) main::$0_x, (byte~) main::$0_y } ← { (byte) point::return_x, (byte) point::return_y }
Unwinding list assignment { (byte) point::return_x#0, (byte) point::return_y#0 } ← { (byte) point::return_x#2, (byte) point::return_y#2 }

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (byte) main::q_x#0 ← (byte) 0
  (byte) main::q_y#0 ← (byte) 0
  call point 
  (byte) point::return_x#0 ← (byte) point::return_x#2
  (byte) point::return_y#0 ← (byte) point::return_y#2
  to:main::@1
main::@1: scope:[main]  from main
  (byte) point::return_y#3 ← phi( main/(byte) point::return_y#0 )
  (byte) point::return_x#3 ← phi( main/(byte) point::return_x#0 )
  (byte~) main::$0_x ← (byte) point::return_x#3
  (byte~) main::$0_y ← (byte) point::return_y#3
  (byte) main::q_x#1 ← (byte~) main::$0_x
  (byte) main::q_y#1 ← (byte~) main::$0_y
  *((const nomodify byte*) main::SCREEN + (number) 0) ← (byte) main::q_x#1
  *((const nomodify byte*) main::SCREEN + (number) 1) ← (byte) main::q_y#1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

(struct Point()) point()
point: scope:[point]  from main
  (byte) point::return_x#1 ← (const byte) point::p_x
  (byte) point::return_y#1 ← (const byte) point::p_y
  (struct Point) point::return#0 ← struct-unwound {(byte) point::return_x#1, (byte) point::return_y#1}
  to:point::@return
point::@return: scope:[point]  from point
  (byte) point::return_y#4 ← phi( point/(byte) point::return_y#1 )
  (byte) point::return_x#4 ← phi( point/(byte) point::return_x#1 )
  (byte) point::return_x#2 ← (byte) point::return_x#4
  (byte) point::return_y#2 ← (byte) point::return_y#4
  (struct Point) point::return#1 ← struct-unwound {(byte) point::return_x#2, (byte) point::return_y#2}
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(byte) Point::x
(byte) Point::y
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(byte~) main::$0_x
(byte~) main::$0_y
(label) main::@1
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*)(number) $400
(byte) main::q_x
(byte) main::q_x#0
(byte) main::q_x#1
(byte) main::q_y
(byte) main::q_y#0
(byte) main::q_y#1
(struct Point()) point()
(label) point::@return
(const byte) point::p_x = (byte) 2
(const byte) point::p_y = (byte) 3
(struct Point) point::return
(struct Point) point::return#0
(struct Point) point::return#1
(byte) point::return_x
(byte) point::return_x#0
(byte) point::return_x#1
(byte) point::return_x#2
(byte) point::return_x#3
(byte) point::return_x#4
(byte) point::return_y
(byte) point::return_y#0
(byte) point::return_y#1
(byte) point::return_y#2
(byte) point::return_y#3
(byte) point::return_y#4

Adding number conversion cast (unumber) 0 in *((const nomodify byte*) main::SCREEN + (number) 0) ← (byte) main::q_x#1
Adding number conversion cast (unumber) 1 in *((const nomodify byte*) main::SCREEN + (number) 1) ← (byte) main::q_y#1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias point::return_x#0 = point::return_x#3 
Alias point::return_y#0 = point::return_y#3 
Alias main::q_x#1 = main::$0_x 
Alias main::q_y#1 = main::$0_y 
Alias point::return_x#1 = point::return_x#4 point::return_x#2 
Alias point::return_y#1 = point::return_y#4 point::return_y#2 
Successful SSA optimization Pass2AliasElimination
Constant (const byte) main::q_x#0 = 0
Constant (const byte) main::q_y#0 = 0
Constant (const byte) point::return_x#1 = point::p_x
Constant (const byte) point::return_y#1 = point::p_y
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) point::return_x#0 = point::return_x#1
Constant (const byte) point::return_y#0 = point::return_y#1
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::q_x#1 = point::return_x#0
Constant (const byte) main::q_y#1 = point::return_y#0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::SCREEN in [7] *((const nomodify byte*) main::SCREEN + (byte) 0) ← (const byte) main::q_x#1
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (struct Point) point::return#0 and assignment [4] (struct Point) point::return#0 ← struct-unwound {(const byte) point::return_x#1, (const byte) point::return_y#1}
Eliminating unused variable (struct Point) point::return#1 and assignment [5] (struct Point) point::return#1 ← struct-unwound {(const byte) point::return_x#1, (const byte) point::return_y#1}
Eliminating unused constant (const byte) main::q_x#0
Eliminating unused constant (const byte) main::q_y#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant inlined main::q_x#1 = (const byte) point::p_x
Constant inlined point::return_x#1 = (const byte) point::p_x
Constant inlined point::return_y#0 = (const byte) point::p_y
Constant inlined point::return_x#0 = (const byte) point::p_x
Constant inlined point::return_y#1 = (const byte) point::p_y
Constant inlined main::q_y#1 = (const byte) point::p_y
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::SCREEN+1)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of main
Adding NOP phi() at start of point
CALL GRAPH
Calls in [main] to point:1 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Adding NOP phi() at start of main
Adding NOP phi() at start of point

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call point 
  to:main::@1
main::@1: scope:[main]  from main
  [2] *((const nomodify byte*) main::SCREEN) ← (const byte) point::p_x
  [3] *((const nomodify byte*) main::SCREEN+(byte) 1) ← (const byte) point::p_y
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return

(struct Point()) point()
point: scope:[point]  from main
  [5] phi()
  to:point::@return
point::@return: scope:[point]  from point
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) Point::x
(byte) Point::y
(void()) main()
(byte) main::q_x
(byte) main::q_y
(struct Point()) point()
(struct Point) point::return
(byte) point::return_x
(byte) point::return_y

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Minimal struct - struct return value
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    // [1] call point 
    // [5] phi from main to point [phi:main->point]
  point_from_main:
    jsr point
    jmp __b1
    // main::@1
  __b1:
    // [2] *((const nomodify byte*) main::SCREEN) ← (const byte) point::p_x -- _deref_pbuc1=vbuc2 
    lda #point.p_x
    sta SCREEN
    // [3] *((const nomodify byte*) main::SCREEN+(byte) 1) ← (const byte) point::p_y -- _deref_pbuc1=vbuc2 
    lda #point.p_y
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // point
point: {
    .label p_x = 2
    .label p_y = 3
    jmp __breturn
    // point::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] *((const nomodify byte*) main::SCREEN) ← (const byte) point::p_x [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *((const nomodify byte*) main::SCREEN+(byte) 1) ← (const byte) point::p_y [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [Point] 
Uplift Scope [main] 
Uplift Scope [point] 
Uplift Scope [] 

Uplifting [Point] best 66 combination 
Uplifting [main] best 66 combination 
Uplifting [point] best 66 combination 
Uplifting [] best 66 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct - struct return value
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    // [1] call point 
    // [5] phi from main to point [phi:main->point]
  point_from_main:
    jsr point
    jmp __b1
    // main::@1
  __b1:
    // [2] *((const nomodify byte*) main::SCREEN) ← (const byte) point::p_x -- _deref_pbuc1=vbuc2 
    lda #point.p_x
    sta SCREEN
    // [3] *((const nomodify byte*) main::SCREEN+(byte) 1) ← (const byte) point::p_y -- _deref_pbuc1=vbuc2 
    lda #point.p_y
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // point
point: {
    .label p_x = 2
    .label p_y = 3
    jmp __breturn
    // point::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction point_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(byte) Point::x
(byte) Point::y
(void()) main()
(label) main::@1
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*) 1024
(byte) main::q_x
(byte) main::q_y
(struct Point()) point()
(label) point::@return
(const byte) point::p_x = (byte) 2
(const byte) point::p_y = (byte) 3
(struct Point) point::return
(byte) point::return_x
(byte) point::return_y



FINAL ASSEMBLER
Score: 30

  // File Comments
// Minimal struct - struct return value
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    // point()
    // [1] call point 
    // [5] phi from main to point [phi:main->point]
    jsr point
    // main::@1
    // SCREEN[0] = q.x
    // [2] *((const nomodify byte*) main::SCREEN) ← (const byte) point::p_x -- _deref_pbuc1=vbuc2 
    lda #point.p_x
    sta SCREEN
    // SCREEN[1] = q.y
    // [3] *((const nomodify byte*) main::SCREEN+(byte) 1) ← (const byte) point::p_y -- _deref_pbuc1=vbuc2 
    lda #point.p_y
    sta SCREEN+1
    // main::@return
    // }
    // [4] return 
    rts
}
  // point
point: {
    .label p_x = 2
    .label p_y = 3
    // point::@return
    // [6] return 
    rts
}
  // File Data

