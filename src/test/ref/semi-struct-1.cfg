@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call init_points 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call print_points 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [8] return 
  to:@return
print_points: scope:[print_points]  from main::@1
  [9] phi()
  [10] call print_cls 
  to:print_points::@1
print_points::@1: scope:[print_points]  from print_points print_points::@7
  [11] (byte*) print_line_cursor#24 ← phi( print_points::@7/(byte*) print_line_cursor#1 print_points/((byte*))(word/signed word/dword/signed dword) $400 )
  [11] (byte*) print_char_cursor#45 ← phi( print_points::@7/(byte*~) print_char_cursor#60 print_points/((byte*))(word/signed word/dword/signed dword) $400 )
  [11] (byte) print_points::i#10 ← phi( print_points::@7/(byte) print_points::i#1 print_points/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  to:print_points::getPoint1
print_points::getPoint1: scope:[print_points]  from print_points::@1
  [12] (byte) print_points::getPoint1_$0#0 ← (byte) print_points::i#10 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [13] (byte*) print_points::pointXpos1_$0#0 ← (const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte) print_points::getPoint1_$0#0
  to:print_points::pointXpos1
print_points::pointXpos1: scope:[print_points]  from print_points::getPoint1
  [14] phi()
  to:print_points::@2
print_points::@2: scope:[print_points]  from print_points::pointXpos1
  [15] (byte) print_byte::b#0 ← *((const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte) print_points::getPoint1_$0#0)
  [16] call print_byte 
  to:print_points::@4
print_points::@4: scope:[print_points]  from print_points::@2
  [17] phi()
  [18] call print_str 
  to:print_points::pointYpos1
print_points::pointYpos1: scope:[print_points]  from print_points::@4
  [19] phi()
  to:print_points::@3
print_points::@3: scope:[print_points]  from print_points::pointYpos1
  [20] (byte) print_byte::b#1 ← *((byte*) print_points::pointXpos1_$0#0 + (byte/signed byte/word/signed word/dword/signed dword) 1)
  [21] call print_byte 
  to:print_points::@5
print_points::@5: scope:[print_points]  from print_points::@3
  [22] phi()
  [23] call print_ln 
  to:print_points::@6
print_points::@6: scope:[print_points]  from print_points::@5
  [24] (byte) print_points::i#1 ← ++ (byte) print_points::i#10
  [25] if((byte) print_points::i#1!=(const byte) NUM_POINTS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto print_points::@7
  to:print_points::@return
print_points::@return: scope:[print_points]  from print_points::@6
  [26] return 
  to:@return
print_points::@7: scope:[print_points]  from print_points::@6
  [27] (byte*~) print_char_cursor#60 ← (byte*) print_line_cursor#1
  to:print_points::@1
print_ln: scope:[print_ln]  from print_points::@5
  [28] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [29] (byte*) print_line_cursor#11 ← phi( print_ln/(byte*) print_line_cursor#24 print_ln::@1/(byte*) print_line_cursor#1 )
  [30] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#11 + (byte/signed byte/word/signed word/dword/signed dword) $28
  [31] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#29) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [32] return 
  to:@return
print_byte: scope:[print_byte]  from print_points::@2 print_points::@3
  [33] (byte*) print_char_cursor#42 ← phi( print_points::@2/(byte*) print_char_cursor#45 print_points::@3/(byte*) print_char_cursor#2 )
  [33] (byte) print_byte::b#2 ← phi( print_points::@2/(byte) print_byte::b#0 print_points::@3/(byte) print_byte::b#1 )
  [34] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  [35] (byte) print_char::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0)
  [36] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [37] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word/dword/signed dword) $f
  [38] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2)
  [39] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [40] return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1
  [41] (byte*) print_char_cursor#28 ← phi( print_byte/(byte*) print_char_cursor#42 print_byte::@1/(byte*) print_char_cursor#29 )
  [41] (byte) print_char::ch#2 ← phi( print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 )
  [42] *((byte*) print_char_cursor#28) ← (byte) print_char::ch#2
  [43] (byte*) print_char_cursor#29 ← ++ (byte*) print_char_cursor#28
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [44] return 
  to:@return
print_str: scope:[print_str]  from print_points::@4
  [45] phi()
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [46] (byte*) print_char_cursor#2 ← phi( print_str/(byte*) print_char_cursor#29 print_str::@2/(byte*) print_char_cursor#1 )
  [46] (byte*) print_str::str#2 ← phi( print_str/(const string) print_points::str print_str::@2/(byte*) print_str::str#0 )
  [47] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [48] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [49] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2)
  [50] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2
  [51] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2
  to:print_str::@1
print_cls: scope:[print_cls]  from print_points
  [52] phi()
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [53] (byte*) print_cls::sc#2 ← phi( print_cls/((byte*))(word/signed word/dword/signed dword) $400 print_cls::@1/(byte*) print_cls::sc#1 )
  [54] *((byte*) print_cls::sc#2) ← (byte) ' '
  [55] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  [56] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) $400+(word/signed word/dword/signed dword) $3e8) goto print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [57] return 
  to:@return
init_points: scope:[init_points]  from main
  [58] phi()
  to:init_points::@1
init_points::@1: scope:[init_points]  from init_points init_points::@3
  [59] (byte) init_points::pos#10 ← phi( init_points/(byte/signed byte/word/signed word/dword/signed dword) $a init_points::@3/(byte) init_points::pos#2 )
  [59] (byte) init_points::i#10 ← phi( init_points/(byte/signed byte/word/signed word/dword/signed dword) 0 init_points::@3/(byte) init_points::i#1 )
  to:init_points::getPoint1
init_points::getPoint1: scope:[init_points]  from init_points::@1
  [60] (byte) init_points::getPoint1_$0#0 ← (byte) init_points::i#10 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [61] (byte*) init_points::pointXpos1_$0#0 ← (const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte) init_points::getPoint1_$0#0
  to:init_points::pointXpos1
init_points::pointXpos1: scope:[init_points]  from init_points::getPoint1
  [62] phi()
  to:init_points::@2
init_points::@2: scope:[init_points]  from init_points::pointXpos1
  [63] *((const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte) init_points::getPoint1_$0#0) ← (byte) init_points::pos#10
  [64] (byte) init_points::pos#1 ← (byte) init_points::pos#10 + (byte/signed byte/word/signed word/dword/signed dword) $a
  to:init_points::pointYpos1
init_points::pointYpos1: scope:[init_points]  from init_points::@2
  [65] phi()
  to:init_points::@3
init_points::@3: scope:[init_points]  from init_points::pointYpos1
  [66] *((byte*) init_points::pointXpos1_$0#0 + (byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) init_points::pos#1
  [67] (byte) init_points::pos#2 ← (byte) init_points::pos#1 + (byte/signed byte/word/signed word/dword/signed dword) $a
  [68] (byte) init_points::i#1 ← ++ (byte) init_points::i#10
  [69] if((byte) init_points::i#1!=(const byte) NUM_POINTS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto init_points::@1
  to:init_points::@return
init_points::@return: scope:[init_points]  from init_points::@3
  [70] return 
  to:@return
