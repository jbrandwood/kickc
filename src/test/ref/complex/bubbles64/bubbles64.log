Inlined call call __init 

CONTROL FLOW GRAPH SSA

byte lcSync(byte lcSync::flags)
lcSync: scope:[lcSync]  from main::@11 main::@42
  lcSync::return#0 = 0
  to:lcSync::@return
lcSync::@return: scope:[lcSync]  from lcSync
  lcSync::return#4 = phi( lcSync/lcSync::return#0 )
  lcSync::return#1 = lcSync::return#4
  return 
  to:@return

void Print00(byte* Print00::p , byte Print00::v0)
Print00: scope:[Print00]  from main::@45
  Print00::p#7 = phi( main::@45/Print00::p#2 )
  Print00::v0#1 = phi( main::@45/Print00::v0#0 )
  Print00::c#0 = 0
  Print00::v#0 = Print00::v0#1
  Print00::c#1 = '0'
  to:Print00::@1
Print00::@1: scope:[Print00]  from Print00 Print00::@2
  Print00::p#5 = phi( Print00/Print00::p#7, Print00::@2/Print00::p#8 )
  Print00::c#9 = phi( Print00/Print00::c#1, Print00::@2/Print00::c#2 )
  Print00::v#3 = phi( Print00/Print00::v#0, Print00::@2/Print00::v#1 )
  Print00::$0 = Print00::v#3 >= $a
  if(Print00::$0) goto Print00::@2
  to:Print00::@3
Print00::@2: scope:[Print00]  from Print00::@1
  Print00::p#8 = phi( Print00::@1/Print00::p#5 )
  Print00::v#4 = phi( Print00::@1/Print00::v#3 )
  Print00::c#5 = phi( Print00::@1/Print00::c#9 )
  Print00::c#2 = ++ Print00::c#5
  Print00::v#1 = Print00::v#4 - $a
  to:Print00::@1
Print00::@3: scope:[Print00]  from Print00::@1
  Print00::v#7 = phi( Print00::@1/Print00::v#3 )
  Print00::p#3 = phi( Print00::@1/Print00::p#5 )
  Print00::c#6 = phi( Print00::@1/Print00::c#9 )
  *Print00::p#3 = Print00::c#6
  Print00::p#0 = ++ Print00::p#3
  Print00::c#3 = '0'
  to:Print00::@4
Print00::@4: scope:[Print00]  from Print00::@3 Print00::@5
  Print00::p#6 = phi( Print00::@3/Print00::p#0, Print00::@5/Print00::p#9 )
  Print00::c#10 = phi( Print00::@3/Print00::c#3, Print00::@5/Print00::c#4 )
  Print00::v#5 = phi( Print00::@3/Print00::v#7, Print00::@5/Print00::v#2 )
  Print00::$1 = Print00::v#5 >= 1
  if(Print00::$1) goto Print00::@5
  to:Print00::@6
Print00::@5: scope:[Print00]  from Print00::@4
  Print00::p#9 = phi( Print00::@4/Print00::p#6 )
  Print00::v#6 = phi( Print00::@4/Print00::v#5 )
  Print00::c#7 = phi( Print00::@4/Print00::c#10 )
  Print00::c#4 = ++ Print00::c#7
  Print00::v#2 = Print00::v#6 - 1
  to:Print00::@4
Print00::@6: scope:[Print00]  from Print00::@4
  Print00::p#4 = phi( Print00::@4/Print00::p#6 )
  Print00::c#8 = phi( Print00::@4/Print00::c#10 )
  *Print00::p#4 = Print00::c#8
  Print00::p#1 = ++ Print00::p#4
  to:Print00::@return
Print00::@return: scope:[Print00]  from Print00::@6
  return 
  to:@return

byte GetSprite()
GetSprite: scope:[GetSprite]  from main::@22 main::@40
  GetSprite::t0#0 = 0
  GetSprite::t0#1 = 0
  to:GetSprite::@1
GetSprite::@1: scope:[GetSprite]  from GetSprite GetSprite::@4
  GetSprite::t0#3 = phi( GetSprite/GetSprite::t0#1, GetSprite::@4/GetSprite::t0#2 )
  GetSprite::$0 = GetSprite::t0#3 < maxSprites
  if(GetSprite::$0) goto GetSprite::@2
  to:GetSprite::@3
GetSprite::@2: scope:[GetSprite]  from GetSprite::@1
  GetSprite::t0#4 = phi( GetSprite::@1/GetSprite::t0#3 )
  GetSprite::$1 = cmRF[GetSprite::t0#4] >= rfDrop
  GetSprite::$2 = ! GetSprite::$1
  if(GetSprite::$2) goto GetSprite::@4
  to:GetSprite::@5
GetSprite::@3: scope:[GetSprite]  from GetSprite::@1
  GetSprite::return#0 = $ff
  to:GetSprite::@return
GetSprite::@4: scope:[GetSprite]  from GetSprite::@2
  GetSprite::t0#5 = phi( GetSprite::@2/GetSprite::t0#4 )
  GetSprite::t0#2 = ++ GetSprite::t0#5
  to:GetSprite::@1
GetSprite::@5: scope:[GetSprite]  from GetSprite::@2
  GetSprite::t0#6 = phi( GetSprite::@2/GetSprite::t0#4 )
  cmRF[GetSprite::t0#6] = 0
  GetSprite::return#1 = GetSprite::t0#6
  to:GetSprite::@return
GetSprite::@return: scope:[GetSprite]  from GetSprite::@3 GetSprite::@5
  GetSprite::return#5 = phi( GetSprite::@3/GetSprite::return#0, GetSprite::@5/GetSprite::return#1 )
  GetSprite::return#2 = GetSprite::return#5
  return 
  to:@return

void AddSprite(byte AddSprite::sn)
AddSprite: scope:[AddSprite]  from main::@23 main::@41
  AddSprite::sn#2 = phi( main::@23/AddSprite::sn#0, main::@41/AddSprite::sn#1 )
  AddSprite::t0#0 = 0
  AddSprite::$0 = rfDrop == cmRF[AddSprite::sn#2]
  if(AddSprite::$0) goto AddSprite::@1
  to:AddSprite::@2
AddSprite::@1: scope:[AddSprite]  from AddSprite
  AddSprite::sn#3 = phi( AddSprite/AddSprite::sn#2 )
  cmRF[AddSprite::sn#3] = 0
  to:AddSprite::@return
AddSprite::@2: scope:[AddSprite]  from AddSprite
  AddSprite::sn#7 = phi( AddSprite/AddSprite::sn#2 )
  AddSprite::t0#1 = 0
  to:AddSprite::@3
AddSprite::@3: scope:[AddSprite]  from AddSprite::@2 AddSprite::@5
  AddSprite::sn#6 = phi( AddSprite::@2/AddSprite::sn#7, AddSprite::@5/AddSprite::sn#8 )
  AddSprite::t0#3 = phi( AddSprite::@2/AddSprite::t0#1, AddSprite::@5/AddSprite::t0#2 )
  AddSprite::$1 = AddSprite::t0#3 < maxSprites
  if(AddSprite::$1) goto AddSprite::@4
  to:AddSprite::@return
AddSprite::@4: scope:[AddSprite]  from AddSprite::@3
  AddSprite::sn#5 = phi( AddSprite::@3/AddSprite::sn#6 )
  AddSprite::t0#4 = phi( AddSprite::@3/AddSprite::t0#3 )
  AddSprite::$2 = cmIT[AddSprite::t0#4] >= $80
  AddSprite::$3 = ! AddSprite::$2
  if(AddSprite::$3) goto AddSprite::@5
  to:AddSprite::@6
AddSprite::@5: scope:[AddSprite]  from AddSprite::@4
  AddSprite::sn#8 = phi( AddSprite::@4/AddSprite::sn#5 )
  AddSprite::t0#5 = phi( AddSprite::@4/AddSprite::t0#4 )
  AddSprite::t0#2 = AddSprite::t0#5 + 1
  to:AddSprite::@3
AddSprite::@6: scope:[AddSprite]  from AddSprite::@4
  AddSprite::t0#6 = phi( AddSprite::@4/AddSprite::t0#4 )
  AddSprite::sn#4 = phi( AddSprite::@4/AddSprite::sn#5 )
  cmRF[AddSprite::sn#4] = 0
  cmIT[AddSprite::t0#6] = AddSprite::sn#4
  to:AddSprite::@return
AddSprite::@return: scope:[AddSprite]  from AddSprite::@1 AddSprite::@3 AddSprite::@6
  return 
  to:@return

void DelSprite(byte DelSprite::sn)
DelSprite: scope:[DelSprite]  from main::@48
  DelSprite::sn#1 = phi( main::@48/DelSprite::sn#0 )
  cmRY[DelSprite::sn#1] = $ff
  cmRF[DelSprite::sn#1] = rfDrop
  to:DelSprite::@return
DelSprite::@return: scope:[DelSprite]  from DelSprite
  return 
  to:@return

signed word main()
main: scope:[main]  from __start::@1
  main::d#0 = (struct $5*) 0
  main::i#0 = 0
  main::type#0 = 0
  main::stopIt#0 = 0
  main::objects#0 = 0
  main::oCount#0 = 0
  main::c#0 = 0
  lcSprMapTab[0] = sprOff+0
  lcSprMapTab[1] = sprOff+1
  lcSprMapTab[2] = sprOff+2
  lcSprMapTab[3] = sprOff+3
  lcSprMapTab[4] = sprOff+4
  lcSprMapTab[5] = sprOff+5
  lcSprColTab[sprOff+1] = $a|lfMC
  lcSprColTab[sprOff+0] = lcSprColTab[sprOff+1]
  lcSprColTab[sprOff+3] = 5|lfMC
  lcSprColTab[sprOff+2] = lcSprColTab[sprOff+3]
  lcSprColTab[sprOff+5] = $e|lfMC
  lcSprColTab[sprOff+4] = lcSprColTab[sprOff+5]
  main::i#1 = 0
  to:main::@3
main::@3: scope:[main]  from main main::@4
  main::oCount#55 = phi( main/main::oCount#0, main::@4/main::oCount#56 )
  main::stopIt#53 = phi( main/main::stopIt#0, main::@4/main::stopIt#54 )
  main::objects#56 = phi( main/main::objects#0, main::@4/main::objects#57 )
  main::i#12 = phi( main/main::i#1, main::@4/main::i#2 )
  main::$2 = main::i#12 < maxSprites+1
  if(main::$2) goto main::@4
  to:main::@5
main::@4: scope:[main]  from main::@3
  main::oCount#56 = phi( main::@3/main::oCount#55 )
  main::stopIt#54 = phi( main::@3/main::stopIt#53 )
  main::objects#57 = phi( main::@3/main::objects#56 )
  main::i#13 = phi( main::@3/main::i#12 )
  cmIT[main::i#13] = $ff
  main::i#2 = main::i#13 + 1
  to:main::@3
main::@5: scope:[main]  from main::@3
  main::oCount#53 = phi( main::@3/main::oCount#55 )
  main::stopIt#51 = phi( main::@3/main::stopIt#53 )
  main::objects#54 = phi( main::@3/main::objects#56 )
  main::i#3 = 0
  to:main::@6
main::@6: scope:[main]  from main::@5 main::@7
  main::oCount#52 = phi( main::@5/main::oCount#53, main::@7/main::oCount#54 )
  main::stopIt#50 = phi( main::@5/main::stopIt#51, main::@7/main::stopIt#52 )
  main::objects#53 = phi( main::@5/main::objects#54, main::@7/main::objects#55 )
  main::i#14 = phi( main::@5/main::i#3, main::@7/main::i#4 )
  main::$3 = main::i#14 < maxSprites
  if(main::$3) goto main::@7
  to:main::@8
main::@7: scope:[main]  from main::@6
  main::oCount#54 = phi( main::@6/main::oCount#52 )
  main::stopIt#52 = phi( main::@6/main::stopIt#50 )
  main::objects#55 = phi( main::@6/main::objects#53 )
  main::i#15 = phi( main::@6/main::i#14 )
  cmRF[main::i#15] = $ff
  main::i#4 = main::i#15 + 1
  to:main::@6
main::@8: scope:[main]  from main::@6
  main::oCount#51 = phi( main::@6/main::oCount#52 )
  main::stopIt#49 = phi( main::@6/main::stopIt#50 )
  main::objects#52 = phi( main::@6/main::objects#53 )
  main::c#1 = 0
  to:main::@9
main::@9: scope:[main]  from main::@10 main::@8
  main::oCount#49 = phi( main::@10/main::oCount#50, main::@8/main::oCount#51 )
  main::stopIt#47 = phi( main::@10/main::stopIt#48, main::@8/main::stopIt#49 )
  main::objects#50 = phi( main::@10/main::objects#51, main::@8/main::objects#52 )
  main::c#9 = phi( main::@10/main::c#2, main::@8/main::c#1 )
  main::$4 = main::c#9 < $3e8
  if(main::$4) goto main::@10
  to:main::@11
main::@10: scope:[main]  from main::@9
  main::oCount#50 = phi( main::@9/main::oCount#49 )
  main::stopIt#48 = phi( main::@9/main::stopIt#47 )
  main::objects#51 = phi( main::@9/main::objects#50 )
  main::c#10 = phi( main::@9/main::c#9 )
  ((byte*)$e000)[main::c#10] = $20
  ((byte*)$d800)[main::c#10] = $e
  main::c#2 = main::c#10 + 1
  to:main::@9
main::@11: scope:[main]  from main::@9
  main::oCount#48 = phi( main::@9/main::oCount#49 )
  main::stopIt#44 = phi( main::@9/main::stopIt#47 )
  main::objects#49 = phi( main::@9/main::objects#50 )
  lcSync::flags#0 = 0
  call lcSync 
  lcSync::return#2 = lcSync::return#1
  to:main::@49
main::@49: scope:[main]  from main::@11
  main::oCount#47 = phi( main::@11/main::oCount#48 )
  main::stopIt#41 = phi( main::@11/main::stopIt#44 )
  main::objects#48 = phi( main::@11/main::objects#49 )
  lcSync::return#5 = phi( main::@11/lcSync::return#2 )
  main::$0 = lcSync::return#5
  main::i#5 = main::$0
  *((byte*)1) = $33
  main::c#3 = 0
  to:main::@12
main::@12: scope:[main]  from main::@13 main::@49
  main::oCount#45 = phi( main::@13/main::oCount#46, main::@49/main::oCount#47 )
  main::stopIt#38 = phi( main::@13/main::stopIt#40, main::@49/main::stopIt#41 )
  main::objects#46 = phi( main::@13/main::objects#47, main::@49/main::objects#48 )
  main::i#28 = phi( main::@13/main::i#35, main::@49/main::i#5 )
  main::c#11 = phi( main::@13/main::c#4, main::@49/main::c#3 )
  main::$5 = main::c#11 < $7f8
  if(main::$5) goto main::@13
  to:main::@14
main::@13: scope:[main]  from main::@12
  main::oCount#46 = phi( main::@12/main::oCount#45 )
  main::stopIt#40 = phi( main::@12/main::stopIt#38 )
  main::objects#47 = phi( main::@12/main::objects#46 )
  main::i#35 = phi( main::@12/main::i#28 )
  main::c#12 = phi( main::@12/main::c#11 )
  ((byte*)$f800)[main::c#12] = ((byte*)$d000)[main::c#12]
  main::c#4 = main::c#12 + 1
  to:main::@12
main::@14: scope:[main]  from main::@12
  main::oCount#39 = phi( main::@12/main::oCount#45 )
  main::stopIt#31 = phi( main::@12/main::stopIt#38 )
  main::objects#40 = phi( main::@12/main::objects#46 )
  main::i#16 = phi( main::@12/main::i#28 )
  *((byte*)1) = $35
  ((byte*)$d000)[$d02] = ((byte*)$d000)[$d02] | 3
  ((byte*)$d000)[$d00] = ((byte*)$d000)[$d00] & ~3
  main::$1 = main::i#16 & $80
  main::$107 = 0 != main::$1
  if(main::$107) goto main::@1
  to:main::@15
main::@1: scope:[main]  from main::@14
  main::oCount#31 = phi( main::@14/main::oCount#39 )
  main::stopIt#20 = phi( main::@14/main::stopIt#31 )
  main::objects#31 = phi( main::@14/main::objects#40 )
  ((byte*)$e000)[$3e4] = 'N'-'A'+1
  ((byte*)$e000)[$3e5] = 'T'-'A'+1
  ((byte*)$e000)[$3e6] = 'S'-'A'+1
  ((byte*)$e000)[$3e7] = 'C'-'A'+1
  to:main::@2
main::@15: scope:[main]  from main::@14
  main::oCount#32 = phi( main::@14/main::oCount#39 )
  main::stopIt#21 = phi( main::@14/main::stopIt#31 )
  main::objects#32 = phi( main::@14/main::objects#40 )
  ((byte*)$e000)[$3e5] = 'P'-'A'+1
  ((byte*)$e000)[$3e6] = 'A'-'A'+1
  ((byte*)$e000)[$3e7] = 'L'-'A'+1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@15
  main::oCount#28 = phi( main::@1/main::oCount#31, main::@15/main::oCount#32 )
  main::stopIt#16 = phi( main::@1/main::stopIt#20, main::@15/main::stopIt#21 )
  main::objects#26 = phi( main::@1/main::objects#31, main::@15/main::objects#32 )
  ((byte*)$e000)[$3cf+0] = 'B'-'A'+1
  ((byte*)$e000)[$3cf+1] = 'U'-'A'+1
  ((byte*)$e000)[$3cf+2] = 'B'-'A'+1
  ((byte*)$e000)[$3cf+3] = 'B'-'A'+1
  ((byte*)$e000)[$3cf+4] = 'L'-'A'+1
  ((byte*)$e000)[$3cf+5] = 'E'-'A'+1
  ((byte*)$e000)[$3cf+6] = 'S'-'A'+1
  ((byte*)$e000)[$3cf+7] = ':'
  main::type#1 = 0
  main::i#6 = 0
  to:main::@16
main::@16: scope:[main]  from main::@2 main::@20
  main::oCount#23 = phi( main::@2/main::oCount#28, main::@20/main::oCount#29 )
  main::stopIt#11 = phi( main::@2/main::stopIt#16, main::@20/main::stopIt#17 )
  main::objects#21 = phi( main::@2/main::objects#26, main::@20/main::objects#27 )
  main::type#5 = phi( main::@2/main::type#1, main::@20/main::type#6 )
  main::i#17 = phi( main::@2/main::i#6, main::@20/main::i#7 )
  main::$6 = main::i#17 < maxDrawObjects
  if(main::$6) goto main::@17
  to:main::@18
main::@17: scope:[main]  from main::@16
  main::oCount#40 = phi( main::@16/main::oCount#23 )
  main::stopIt#32 = phi( main::@16/main::stopIt#11 )
  main::objects#41 = phi( main::@16/main::objects#21 )
  main::type#4 = phi( main::@16/main::type#5 )
  main::i#18 = phi( main::@16/main::i#17 )
  main::$52 = main::i#18 * SIZEOF_STRUCT_$5
  main::$7 = & dTab[main::$52]
  main::d1#0 = main::$7
  main::$80 = (byte*)main::d1#0
  main::$53 = main::$80 + OFFSET_STRUCT_$5_S
  *main::$53 = main::type#4
  main::type#2 = main::type#4 + 1
  main::$8 = main::type#2 >= 6
  main::$9 = ! main::$8
  if(main::$9) goto main::@19
  to:main::@21
main::@18: scope:[main]  from main::@16
  main::oCount#19 = phi( main::@16/main::oCount#23 )
  main::stopIt#7 = phi( main::@16/main::stopIt#11 )
  main::objects#16 = phi( main::@16/main::objects#21 )
  main::c#5 = 0
  to:main::@24
main::@19: scope:[main]  from main::@17 main::@21
  main::oCount#33 = phi( main::@17/main::oCount#40, main::@21/main::oCount#41 )
  main::stopIt#22 = phi( main::@17/main::stopIt#32, main::@21/main::stopIt#33 )
  main::objects#33 = phi( main::@17/main::objects#41, main::@21/main::objects#42 )
  main::type#7 = phi( main::@17/main::type#2, main::@21/main::type#3 )
  main::i#19 = phi( main::@17/main::i#18, main::@21/main::i#29 )
  main::d1#1 = phi( main::@17/main::d1#0, main::@21/main::d1#2 )
  main::$81 = (signed word*)main::d1#1
  main::$54 = main::$81 + OFFSET_STRUCT_$5_X
  *main::$54 = $70<<F
  main::$82 = (signed byte*)main::d1#1
  main::$55 = main::$82 + OFFSET_STRUCT_$5_VX
  *main::$55 = (signed byte)main::i#19
  main::$83 = (signed byte*)main::d1#1
  main::$56 = main::$83 + OFFSET_STRUCT_$5_AX
  *main::$56 = 1
  main::$84 = (signed word*)main::d1#1
  main::$57 = main::$84 + OFFSET_STRUCT_$5_Y
  *main::$57 = $18<<F
  main::$85 = (signed byte*)main::d1#1
  main::$58 = main::$85 + OFFSET_STRUCT_$5_VY
  *main::$58 = 1<<F
  main::$86 = (signed byte*)main::d1#1
  main::$59 = main::$86 + OFFSET_STRUCT_$5_AY
  *main::$59 = 1
  main::$10 = main::i#19 < $14
  main::$11 = main::preset && main::$10
  main::$12 = ! main::$11
  if(main::$12) goto main::@20
  to:main::@22
main::@21: scope:[main]  from main::@17
  main::oCount#41 = phi( main::@17/main::oCount#40 )
  main::stopIt#33 = phi( main::@17/main::stopIt#32 )
  main::objects#42 = phi( main::@17/main::objects#41 )
  main::i#29 = phi( main::@17/main::i#18 )
  main::d1#2 = phi( main::@17/main::d1#0 )
  main::type#3 = 0
  to:main::@19
main::@20: scope:[main]  from main::@19 main::@50 main::@51
  main::oCount#29 = phi( main::@19/main::oCount#33, main::@50/main::oCount#34, main::@51/main::oCount#35 )
  main::stopIt#17 = phi( main::@19/main::stopIt#22, main::@50/main::stopIt#23, main::@51/main::stopIt#24 )
  main::objects#27 = phi( main::@19/main::objects#33, main::@50/main::objects#34, main::@51/main::objects#35 )
  main::type#6 = phi( main::@19/main::type#7, main::@50/main::type#8, main::@51/main::type#9 )
  main::i#20 = phi( main::@19/main::i#19, main::@50/main::i#30, main::@51/main::i#21 )
  main::i#7 = main::i#20 + 1
  to:main::@16
main::@22: scope:[main]  from main::@19
  main::oCount#42 = phi( main::@19/main::oCount#33 )
  main::stopIt#34 = phi( main::@19/main::stopIt#22 )
  main::objects#43 = phi( main::@19/main::objects#33 )
  main::type#10 = phi( main::@19/main::type#7 )
  main::i#36 = phi( main::@19/main::i#19 )
  call GetSprite 
  GetSprite::return#3 = GetSprite::return#2
  to:main::@50
main::@50: scope:[main]  from main::@22
  main::oCount#34 = phi( main::@22/main::oCount#42 )
  main::stopIt#23 = phi( main::@22/main::stopIt#34 )
  main::objects#34 = phi( main::@22/main::objects#43 )
  main::type#8 = phi( main::@22/main::type#10 )
  main::i#30 = phi( main::@22/main::i#36 )
  GetSprite::return#6 = phi( main::@22/GetSprite::return#3 )
  main::$13 = GetSprite::return#6
  main::c#6 = main::$13
  main::$14 = main::c#6 < $80
  main::$15 = ! main::$14
  if(main::$15) goto main::@20
  to:main::@23
main::@23: scope:[main]  from main::@50
  main::oCount#43 = phi( main::@50/main::oCount#34 )
  main::stopIt#35 = phi( main::@50/main::stopIt#23 )
  main::objects#44 = phi( main::@50/main::objects#34 )
  main::type#11 = phi( main::@50/main::type#8 )
  main::i#31 = phi( main::@50/main::i#30 )
  main::c#13 = phi( main::@50/main::c#6 )
  AddSprite::sn#0 = (byte)main::c#13
  call AddSprite 
  to:main::@51
main::@51: scope:[main]  from main::@23
  main::oCount#35 = phi( main::@23/main::oCount#43 )
  main::stopIt#24 = phi( main::@23/main::stopIt#35 )
  main::objects#35 = phi( main::@23/main::objects#44 )
  main::type#9 = phi( main::@23/main::type#11 )
  main::i#21 = phi( main::@23/main::i#31 )
  cmRF[main::i#21] = 0
  cmRX[main::i#21] = cmRF[main::i#21]
  cmSI[main::i#21] = cmRX[main::i#21]
  main::$17 = main::i#21 << 4
  cmRY[main::i#21] = main::$17
  to:main::@20
main::@24: scope:[main]  from main::@18 main::@55
  main::oCount#17 = phi( main::@18/main::oCount#19, main::@55/main::oCount#20 )
  main::stopIt#5 = phi( main::@18/main::stopIt#7, main::@55/main::stopIt#8 )
  main::c#16 = phi( main::@18/main::c#5, main::@55/main::c#18 )
  main::objects#9 = phi( main::@18/main::objects#16, main::@55/main::objects#17 )
  main::i#8 = 0
  main::d#1 = dTab
  to:main::@26
main::@26: scope:[main]  from main::@24 main::@33
  main::oCount#14 = phi( main::@24/main::oCount#17, main::@33/main::oCount#18 )
  main::stopIt#4 = phi( main::@24/main::stopIt#5, main::@33/main::stopIt#6 )
  main::c#15 = phi( main::@24/main::c#16, main::@33/main::c#17 )
  main::d#14 = phi( main::@24/main::d#1, main::@33/main::d#2 )
  main::objects#3 = phi( main::@24/main::objects#9, main::@33/main::objects#10 )
  main::i#22 = phi( main::@24/main::i#8, main::@33/main::i#9 )
  main::$18 = main::i#22 < main::objects#3
  if(main::$18) goto main::@27
  to:main::@28
main::@27: scope:[main]  from main::@26
  main::oCount#44 = phi( main::@26/main::oCount#14 )
  main::stopIt#36 = phi( main::@26/main::stopIt#4 )
  main::c#35 = phi( main::@26/main::c#15 )
  main::objects#45 = phi( main::@26/main::objects#3 )
  main::i#41 = phi( main::@26/main::i#22 )
  main::d#3 = phi( main::@26/main::d#14 )
  main::$87 = (signed byte*)main::d#3
  main::$60 = main::$87 + OFFSET_STRUCT_$5_VX
  main::$88 = (signed byte*)main::d#3
  main::$61 = main::$88 + OFFSET_STRUCT_$5_AX
  main::$89 = (signed byte*)main::d#3
  main::$62 = main::$89 + OFFSET_STRUCT_$5_VX
  *main::$62 = *main::$60 + *main::$61
  main::$90 = (signed byte*)main::d#3
  main::$63 = main::$90 + OFFSET_STRUCT_$5_VX
  main::$19 = *main::$63 < -$20
  if(main::$19) goto main::@29
  to:main::@34
main::@28: scope:[main]  from main::@26
  main::oCount#10 = phi( main::@26/main::oCount#14 )
  main::objects#11 = phi( main::@26/main::objects#3 )
  main::stopIt#3 = phi( main::@26/main::stopIt#4 )
  main::c#14 = phi( main::@26/main::c#15 )
  main::c#7 = main::c#14 + 1
  main::$29 = main::c#7 >= $e
  main::$30 = ! main::$29
  if(main::$30) goto main::@42
  to:main::@39
main::@29: scope:[main]  from main::@27
  main::oCount#36 = phi( main::@27/main::oCount#44 )
  main::stopIt#25 = phi( main::@27/main::stopIt#36 )
  main::c#28 = phi( main::@27/main::c#35 )
  main::objects#36 = phi( main::@27/main::objects#45 )
  main::i#38 = phi( main::@27/main::i#41 )
  main::d#4 = phi( main::@27/main::d#3 )
  main::$91 = (signed byte*)main::d#4
  main::$64 = main::$91 + OFFSET_STRUCT_$5_AX
  *main::$64 = 1
  to:main::@30
main::@34: scope:[main]  from main::@27
  main::oCount#37 = phi( main::@27/main::oCount#44 )
  main::stopIt#26 = phi( main::@27/main::stopIt#36 )
  main::c#29 = phi( main::@27/main::c#35 )
  main::objects#37 = phi( main::@27/main::objects#45 )
  main::i#39 = phi( main::@27/main::i#41 )
  main::d#5 = phi( main::@27/main::d#3 )
  main::$92 = (signed byte*)main::d#5
  main::$65 = main::$92 + OFFSET_STRUCT_$5_VX
  main::$20 = *main::$65 > $20
  main::$21 = ! main::$20
  if(main::$21) goto main::@30
  to:main::@35
main::@35: scope:[main]  from main::@34
  main::oCount#38 = phi( main::@34/main::oCount#37 )
  main::stopIt#27 = phi( main::@34/main::stopIt#26 )
  main::c#30 = phi( main::@34/main::c#29 )
  main::objects#38 = phi( main::@34/main::objects#37 )
  main::i#40 = phi( main::@34/main::i#39 )
  main::d#6 = phi( main::@34/main::d#5 )
  main::$93 = (signed byte*)main::d#6
  main::$66 = main::$93 + OFFSET_STRUCT_$5_AX
  *main::$66 = -1
  to:main::@30
main::@30: scope:[main]  from main::@29 main::@34 main::@35
  main::oCount#30 = phi( main::@29/main::oCount#36, main::@34/main::oCount#37, main::@35/main::oCount#38 )
  main::stopIt#18 = phi( main::@29/main::stopIt#25, main::@34/main::stopIt#26, main::@35/main::stopIt#27 )
  main::c#25 = phi( main::@29/main::c#28, main::@34/main::c#29, main::@35/main::c#30 )
  main::objects#28 = phi( main::@29/main::objects#36, main::@34/main::objects#37, main::@35/main::objects#38 )
  main::i#37 = phi( main::@29/main::i#38, main::@34/main::i#39, main::@35/main::i#40 )
  main::d#7 = phi( main::@29/main::d#4, main::@34/main::d#5, main::@35/main::d#6 )
  main::$94 = (signed word*)main::d#7
  main::$67 = main::$94 + OFFSET_STRUCT_$5_Y
  main::$22 = *main::$67 > $f8<<F
  if(main::$22) goto main::@31
  to:main::@36
main::@31: scope:[main]  from main::@30
  main::oCount#24 = phi( main::@30/main::oCount#30 )
  main::stopIt#12 = phi( main::@30/main::stopIt#18 )
  main::c#21 = phi( main::@30/main::c#25 )
  main::objects#22 = phi( main::@30/main::objects#28 )
  main::i#32 = phi( main::@30/main::i#37 )
  main::d#8 = phi( main::@30/main::d#7 )
  main::$95 = (signed byte*)main::d#8
  main::$68 = main::$95 + OFFSET_STRUCT_$5_VY
  *main::$68 = -1<<F
  to:main::@32
main::@36: scope:[main]  from main::@30
  main::oCount#25 = phi( main::@30/main::oCount#30 )
  main::stopIt#13 = phi( main::@30/main::stopIt#18 )
  main::c#22 = phi( main::@30/main::c#25 )
  main::objects#23 = phi( main::@30/main::objects#28 )
  main::i#33 = phi( main::@30/main::i#37 )
  main::d#9 = phi( main::@30/main::d#7 )
  main::$96 = (signed word*)main::d#9
  main::$69 = main::$96 + OFFSET_STRUCT_$5_Y
  main::$23 = *main::$69 < $18<<F
  main::$24 = ! main::$23
  if(main::$24) goto main::@32
  to:main::@37
main::@37: scope:[main]  from main::@36
  main::oCount#26 = phi( main::@36/main::oCount#25 )
  main::stopIt#14 = phi( main::@36/main::stopIt#13 )
  main::c#23 = phi( main::@36/main::c#22 )
  main::objects#24 = phi( main::@36/main::objects#23 )
  main::i#34 = phi( main::@36/main::i#33 )
  main::d#10 = phi( main::@36/main::d#9 )
  main::$97 = (signed byte*)main::d#10
  main::$70 = main::$97 + OFFSET_STRUCT_$5_VY
  *main::$70 = 1<<F
  to:main::@32
main::@32: scope:[main]  from main::@31 main::@36 main::@37
  main::oCount#21 = phi( main::@31/main::oCount#24, main::@36/main::oCount#25, main::@37/main::oCount#26 )
  main::stopIt#9 = phi( main::@31/main::stopIt#12, main::@36/main::stopIt#13, main::@37/main::stopIt#14 )
  main::c#19 = phi( main::@31/main::c#21, main::@36/main::c#22, main::@37/main::c#23 )
  main::objects#18 = phi( main::@31/main::objects#22, main::@36/main::objects#23, main::@37/main::objects#24 )
  main::i#23 = phi( main::@31/main::i#32, main::@36/main::i#33, main::@37/main::i#34 )
  main::d#11 = phi( main::@31/main::d#8, main::@36/main::d#9, main::@37/main::d#10 )
  main::$98 = (signed word*)main::d#11
  main::$71 = main::$98 + OFFSET_STRUCT_$5_X
  main::$99 = (signed byte*)main::d#11
  main::$72 = main::$99 + OFFSET_STRUCT_$5_VX
  main::$100 = (signed word*)main::d#11
  main::$73 = main::$100 + OFFSET_STRUCT_$5_X
  *main::$73 = *main::$71 + *main::$72
  main::$101 = (signed word*)main::d#11
  main::$74 = main::$101 + OFFSET_STRUCT_$5_Y
  main::$102 = (signed byte*)main::d#11
  main::$75 = main::$102 + OFFSET_STRUCT_$5_VY
  main::$103 = (signed word*)main::d#11
  main::$76 = main::$103 + OFFSET_STRUCT_$5_Y
  *main::$76 = *main::$74 + *main::$75
  main::$25 = cmRF[main::i#23] < $80
  main::$26 = ! main::$25
  if(main::$26) goto main::@33
  to:main::@38
main::@33: scope:[main]  from main::@32 main::@38
  main::oCount#18 = phi( main::@32/main::oCount#21, main::@38/main::oCount#22 )
  main::stopIt#6 = phi( main::@32/main::stopIt#9, main::@38/main::stopIt#10 )
  main::c#17 = phi( main::@32/main::c#19, main::@38/main::c#20 )
  main::objects#10 = phi( main::@32/main::objects#18, main::@38/main::objects#19 )
  main::i#24 = phi( main::@32/main::i#23, main::@38/main::i#25 )
  main::d#12 = phi( main::@32/main::d#11, main::@38/main::d#13 )
  main::d#2 = main::d#12 + SIZEOF_STRUCT_$5
  main::i#9 = main::i#24 + 1
  to:main::@26
main::@38: scope:[main]  from main::@32
  main::oCount#22 = phi( main::@32/main::oCount#21 )
  main::stopIt#10 = phi( main::@32/main::stopIt#9 )
  main::c#20 = phi( main::@32/main::c#19 )
  main::objects#19 = phi( main::@32/main::objects#18 )
  main::i#25 = phi( main::@32/main::i#23 )
  main::d#13 = phi( main::@32/main::d#11 )
  main::$104 = (byte*)main::d#13
  main::$77 = main::$104 + OFFSET_STRUCT_$5_S
  cmSI[main::i#25] = *main::$77
  main::$105 = (signed word*)main::d#13
  main::$78 = main::$105 + OFFSET_STRUCT_$5_X
  main::$27 = *main::$78 >> F
  cmRX[main::i#25] = (byte)main::$27
  main::$106 = (signed word*)main::d#13
  main::$79 = main::$106 + OFFSET_STRUCT_$5_Y
  main::$28 = *main::$79 >> F
  cmRY[main::i#25] = (byte)main::$28
  to:main::@33
main::@42: scope:[main]  from main::@28 main::@39 main::@53 main::@54
  main::stopIt#39 = phi( main::@28/main::stopIt#3, main::@39/main::stopIt#2, main::@53/main::stopIt#42, main::@54/main::stopIt#43 )
  main::c#37 = phi( main::@28/main::c#7, main::@39/main::c#8, main::@53/main::c#38, main::@54/main::c#39 )
  main::objects#25 = phi( main::@28/main::objects#11, main::@39/main::objects#4, main::@53/main::objects#29, main::@54/main::objects#30 )
  main::oCount#9 = phi( main::@28/main::oCount#10, main::@39/main::oCount#11, main::@53/main::oCount#12, main::@54/main::oCount#13 )
  lcSync::flags#1 = 0
  call lcSync 
  lcSync::return#3 = lcSync::return#1
  to:main::@52
main::@52: scope:[main]  from main::@42
  main::stopIt#37 = phi( main::@42/main::stopIt#39 )
  main::c#36 = phi( main::@42/main::c#37 )
  main::objects#20 = phi( main::@42/main::objects#25 )
  main::oCount#8 = phi( main::@42/main::oCount#9 )
  lcSync::return#6 = phi( main::@42/lcSync::return#3 )
  main::$41 = lcSync::return#6
  main::$42 = main::$41 & $1f
  main::i#10 = main::$42
  main::$43 = main::i#10 > 1
  if(main::$43) goto main::@43
  to:main::@46
main::@39: scope:[main]  from main::@28
  main::oCount#11 = phi( main::@28/main::oCount#10 )
  main::objects#4 = phi( main::@28/main::objects#11 )
  main::stopIt#2 = phi( main::@28/main::stopIt#3 )
  main::c#8 = 0
  main::$31 = 0 == main::stopIt#2
  main::$32 = main::objects#4 < maxDrawObjects
  main::$33 = main::$31 && main::$32
  main::$34 = ! main::$33
  if(main::$34) goto main::@42
  to:main::@40
main::@40: scope:[main]  from main::@39
  main::stopIt#45 = phi( main::@39/main::stopIt#2 )
  main::c#40 = phi( main::@39/main::c#8 )
  main::oCount#15 = phi( main::@39/main::oCount#11 )
  main::objects#5 = phi( main::@39/main::objects#4 )
  main::objects#1 = main::objects#5 + 1
  main::$35 = 0 == main::preset
  call GetSprite 
  GetSprite::return#4 = GetSprite::return#2
  to:main::@53
main::@53: scope:[main]  from main::@40
  main::stopIt#42 = phi( main::@40/main::stopIt#45 )
  main::c#38 = phi( main::@40/main::c#40 )
  main::objects#29 = phi( main::@40/main::objects#1 )
  main::oCount#12 = phi( main::@40/main::oCount#15 )
  GetSprite::return#7 = phi( main::@40/GetSprite::return#4 )
  main::$36 = GetSprite::return#7
  main::i#11 = main::$36
  main::$37 = main::i#11 < $80
  main::$38 = main::$35 && main::$37
  main::$39 = ! main::$38
  if(main::$39) goto main::@42
  to:main::@41
main::@41: scope:[main]  from main::@53
  main::stopIt#46 = phi( main::@53/main::stopIt#42 )
  main::c#41 = phi( main::@53/main::c#38 )
  main::objects#39 = phi( main::@53/main::objects#29 )
  main::oCount#16 = phi( main::@53/main::oCount#12 )
  main::i#26 = phi( main::@53/main::i#11 )
  AddSprite::sn#1 = main::i#26
  call AddSprite 
  to:main::@54
main::@54: scope:[main]  from main::@41
  main::stopIt#43 = phi( main::@41/main::stopIt#46 )
  main::c#39 = phi( main::@41/main::c#41 )
  main::objects#30 = phi( main::@41/main::objects#39 )
  main::oCount#13 = phi( main::@41/main::oCount#16 )
  main::i#27 = phi( main::@41/main::i#26 )
  cmRY[main::i#27] = 0
  cmRF[main::i#27] = cmRY[main::i#27]
  cmRX[main::i#27] = cmRF[main::i#27]
  cmSI[main::i#27] = cmRX[main::i#27]
  to:main::@42
main::@43: scope:[main]  from main::@52
  main::stopIt#28 = phi( main::@52/main::stopIt#37 )
  main::c#31 = phi( main::@52/main::c#36 )
  main::objects#12 = phi( main::@52/main::objects#20 )
  main::oCount#4 = phi( main::@52/main::oCount#8 )
  main::oCount#1 = main::oCount#4 + 2
  to:main::@44
main::@46: scope:[main]  from main::@52
  main::stopIt#29 = phi( main::@52/main::stopIt#37 )
  main::c#32 = phi( main::@52/main::c#36 )
  main::objects#13 = phi( main::@52/main::objects#20 )
  main::oCount#5 = phi( main::@52/main::oCount#8 )
  main::$44 = main::oCount#5 > 0
  main::$45 = ! main::$44
  if(main::$45) goto main::@44
  to:main::@47
main::@47: scope:[main]  from main::@46
  main::stopIt#30 = phi( main::@46/main::stopIt#29 )
  main::c#33 = phi( main::@46/main::c#32 )
  main::objects#14 = phi( main::@46/main::objects#13 )
  main::oCount#6 = phi( main::@46/main::oCount#5 )
  main::oCount#2 = main::oCount#6 - 1
  to:main::@44
main::@44: scope:[main]  from main::@43 main::@46 main::@47
  main::stopIt#19 = phi( main::@43/main::stopIt#28, main::@46/main::stopIt#29, main::@47/main::stopIt#30 )
  main::c#26 = phi( main::@43/main::c#31, main::@46/main::c#32, main::@47/main::c#33 )
  main::objects#6 = phi( main::@43/main::objects#12, main::@46/main::objects#13, main::@47/main::objects#14 )
  main::oCount#7 = phi( main::@43/main::oCount#1, main::@46/main::oCount#5, main::@47/main::oCount#2 )
  main::$46 = main::oCount#7 > 2
  main::$47 = main::objects#6 > 0
  main::$48 = main::$46 && main::$47
  main::$49 = ! main::$48
  if(main::$49) goto main::@45
  to:main::@48
main::@45: scope:[main]  from main::@44 main::@56
  main::oCount#27 = phi( main::@44/main::oCount#7, main::@56/main::oCount#3 )
  main::stopIt#15 = phi( main::@44/main::stopIt#19, main::@56/main::stopIt#1 )
  main::c#24 = phi( main::@44/main::c#26, main::@56/main::c#27 )
  main::objects#7 = phi( main::@44/main::objects#6, main::@56/main::objects#15 )
  Print00::p#2 = $e000+(byte*)$3d7
  Print00::v0#0 = main::objects#7
  call Print00 
  to:main::@55
main::@55: scope:[main]  from main::@45
  main::oCount#20 = phi( main::@45/main::oCount#27 )
  main::stopIt#8 = phi( main::@45/main::stopIt#15 )
  main::c#18 = phi( main::@45/main::c#24 )
  main::objects#17 = phi( main::@45/main::objects#7 )
  to:main::@24
main::@48: scope:[main]  from main::@44
  main::c#34 = phi( main::@44/main::c#26 )
  main::objects#8 = phi( main::@44/main::objects#6 )
  main::objects#2 = main::objects#8 - 1
  DelSprite::sn#0 = main::objects#2
  call DelSprite 
  to:main::@56
main::@56: scope:[main]  from main::@48
  main::c#27 = phi( main::@48/main::c#34 )
  main::objects#15 = phi( main::@48/main::objects#2 )
  main::stopIt#1 = 1
  main::oCount#3 = 0
  to:main::@45
main::@25: scope:[main]  from
  main::return#0 = 0
  to:main::@return
main::@return: scope:[main]  from main::@25
  main::return#3 = phi( main::@25/main::return#0 )
  main::return#1 = main::return#3
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  main::return#2 = main::return#1
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const byte $0::lfMC = $10
const byte $0::lfOL = $20
const byte $1::rfDrop = $fe
const byte $1::rfNull = $ff
const byte $1::rfXMSB = $10
const byte $2::lfA = $10
const byte $2::lfB = $20
const byte $2::lfD = 2
const byte $2::lfL = 4
const byte $2::lfR = 8
const byte $2::lfU = 1
const byte $3::maxC64Images = $100
const byte $3::maxSprImages = 8
const byte $3::maxSprites = $20
const byte $3::sprOff = $40
const byte $4::F = 3
const byte $4::maxDrawObjects = $18
void AddSprite(byte AddSprite::sn)
bool~ AddSprite::$0
bool~ AddSprite::$1
bool~ AddSprite::$2
bool~ AddSprite::$3
byte AddSprite::sn
byte AddSprite::sn#0
byte AddSprite::sn#1
byte AddSprite::sn#2
byte AddSprite::sn#3
byte AddSprite::sn#4
byte AddSprite::sn#5
byte AddSprite::sn#6
byte AddSprite::sn#7
byte AddSprite::sn#8
byte AddSprite::t0
byte AddSprite::t0#0
byte AddSprite::t0#1
byte AddSprite::t0#2
byte AddSprite::t0#3
byte AddSprite::t0#4
byte AddSprite::t0#5
byte AddSprite::t0#6
void DelSprite(byte DelSprite::sn)
byte DelSprite::sn
byte DelSprite::sn#0
byte DelSprite::sn#1
const byte F = 3
byte GetSprite()
bool~ GetSprite::$0
bool~ GetSprite::$1
bool~ GetSprite::$2
byte GetSprite::return
byte GetSprite::return#0
byte GetSprite::return#1
byte GetSprite::return#2
byte GetSprite::return#3
byte GetSprite::return#4
byte GetSprite::return#5
byte GetSprite::return#6
byte GetSprite::return#7
byte GetSprite::t0
byte GetSprite::t0#0
byte GetSprite::t0#1
byte GetSprite::t0#2
byte GetSprite::t0#3
byte GetSprite::t0#4
byte GetSprite::t0#5
byte GetSprite::t0#6
const byte OFFSET_STRUCT_$5_AX = 7
const byte OFFSET_STRUCT_$5_AY = 8
const byte OFFSET_STRUCT_$5_S = 0
const byte OFFSET_STRUCT_$5_VX = 5
const byte OFFSET_STRUCT_$5_VY = 6
const byte OFFSET_STRUCT_$5_X = 1
const byte OFFSET_STRUCT_$5_Y = 3
void Print00(byte* Print00::p , byte Print00::v0)
bool~ Print00::$0
bool~ Print00::$1
byte Print00::c
byte Print00::c#0
byte Print00::c#1
byte Print00::c#10
byte Print00::c#2
byte Print00::c#3
byte Print00::c#4
byte Print00::c#5
byte Print00::c#6
byte Print00::c#7
byte Print00::c#8
byte Print00::c#9
byte* Print00::p
byte* Print00::p#0
byte* Print00::p#1
byte* Print00::p#2
byte* Print00::p#3
byte* Print00::p#4
byte* Print00::p#5
byte* Print00::p#6
byte* Print00::p#7
byte* Print00::p#8
byte* Print00::p#9
byte Print00::v
byte Print00::v#0
byte Print00::v#1
byte Print00::v#2
byte Print00::v#3
byte Print00::v#4
byte Print00::v#5
byte Print00::v#6
byte Print00::v#7
byte Print00::v0
byte Print00::v0#0
byte Print00::v0#1
const byte SIZEOF_STRUCT_$5 = 9
void __start()
const byte* cmIT[maxSprites+1]  = { fill( maxSprites+1, 0) }
const byte* cmRF[maxSprites]  = { fill( maxSprites, 0) }
const byte* cmRX[maxSprites]  = { fill( maxSprites, 0) }
const byte* cmRY[maxSprites]  = { fill( maxSprites, 0) }
const byte* cmSI[maxSprites]  = { fill( maxSprites, 0) }
const struct $5* dTab[maxDrawObjects]  = { fill( maxDrawObjects, 0) }
const byte* lcSprColTab[maxC64Images]  = { fill( maxC64Images, 0) }
const byte* lcSprMapTab[maxSprImages]  = { fill( maxSprImages, 0) }
byte lcSync(byte lcSync::flags)
byte lcSync::flags
byte lcSync::flags#0
byte lcSync::flags#1
byte lcSync::return
byte lcSync::return#0
byte lcSync::return#1
byte lcSync::return#2
byte lcSync::return#3
byte lcSync::return#4
byte lcSync::return#5
byte lcSync::return#6
const byte lfMC = $10
signed word main()
byte~ main::$0
number~ main::$1
bool~ main::$10
signed word*~ main::$100
signed word*~ main::$101
signed byte*~ main::$102
signed word*~ main::$103
byte*~ main::$104
signed word*~ main::$105
signed word*~ main::$106
bool~ main::$107
bool~ main::$11
bool~ main::$12
byte~ main::$13
bool~ main::$14
bool~ main::$15
byte~ main::$17
bool~ main::$18
bool~ main::$19
bool~ main::$2
bool~ main::$20
bool~ main::$21
bool~ main::$22
bool~ main::$23
bool~ main::$24
bool~ main::$25
bool~ main::$26
signed word~ main::$27
signed word~ main::$28
bool~ main::$29
bool~ main::$3
bool~ main::$30
bool~ main::$31
bool~ main::$32
bool~ main::$33
bool~ main::$34
bool~ main::$35
byte~ main::$36
bool~ main::$37
bool~ main::$38
bool~ main::$39
bool~ main::$4
byte~ main::$41
number~ main::$42
bool~ main::$43
bool~ main::$44
bool~ main::$45
bool~ main::$46
bool~ main::$47
bool~ main::$48
bool~ main::$49
bool~ main::$5
byte~ main::$52
byte*~ main::$53
signed word*~ main::$54
signed byte*~ main::$55
signed byte*~ main::$56
signed word*~ main::$57
signed byte*~ main::$58
signed byte*~ main::$59
bool~ main::$6
signed byte*~ main::$60
signed byte*~ main::$61
signed byte*~ main::$62
signed byte*~ main::$63
signed byte*~ main::$64
signed byte*~ main::$65
signed byte*~ main::$66
signed word*~ main::$67
signed byte*~ main::$68
signed word*~ main::$69
struct $5*~ main::$7
signed byte*~ main::$70
signed word*~ main::$71
signed byte*~ main::$72
signed word*~ main::$73
signed word*~ main::$74
signed byte*~ main::$75
signed word*~ main::$76
byte*~ main::$77
signed word*~ main::$78
signed word*~ main::$79
bool~ main::$8
byte*~ main::$80
signed word*~ main::$81
signed byte*~ main::$82
signed byte*~ main::$83
signed word*~ main::$84
signed byte*~ main::$85
signed byte*~ main::$86
signed byte*~ main::$87
signed byte*~ main::$88
signed byte*~ main::$89
bool~ main::$9
signed byte*~ main::$90
signed byte*~ main::$91
signed byte*~ main::$92
signed byte*~ main::$93
signed word*~ main::$94
signed byte*~ main::$95
signed word*~ main::$96
signed byte*~ main::$97
signed word*~ main::$98
signed byte*~ main::$99
word main::c
word main::c#0
word main::c#1
word main::c#10
word main::c#11
word main::c#12
word main::c#13
word main::c#14
word main::c#15
word main::c#16
word main::c#17
word main::c#18
word main::c#19
word main::c#2
word main::c#20
word main::c#21
word main::c#22
word main::c#23
word main::c#24
word main::c#25
word main::c#26
word main::c#27
word main::c#28
word main::c#29
word main::c#3
word main::c#30
word main::c#31
word main::c#32
word main::c#33
word main::c#34
word main::c#35
word main::c#36
word main::c#37
word main::c#38
word main::c#39
word main::c#4
word main::c#40
word main::c#41
word main::c#5
word main::c#6
word main::c#7
word main::c#8
word main::c#9
struct $5* main::d
struct $5* main::d#0
struct $5* main::d#1
struct $5* main::d#10
struct $5* main::d#11
struct $5* main::d#12
struct $5* main::d#13
struct $5* main::d#14
struct $5* main::d#2
struct $5* main::d#3
struct $5* main::d#4
struct $5* main::d#5
struct $5* main::d#6
struct $5* main::d#7
struct $5* main::d#8
struct $5* main::d#9
struct $5* main::d1
struct $5* main::d1#0
struct $5* main::d1#1
struct $5* main::d1#2
byte main::i
byte main::i#0
byte main::i#1
byte main::i#10
byte main::i#11
byte main::i#12
byte main::i#13
byte main::i#14
byte main::i#15
byte main::i#16
byte main::i#17
byte main::i#18
byte main::i#19
byte main::i#2
byte main::i#20
byte main::i#21
byte main::i#22
byte main::i#23
byte main::i#24
byte main::i#25
byte main::i#26
byte main::i#27
byte main::i#28
byte main::i#29
byte main::i#3
byte main::i#30
byte main::i#31
byte main::i#32
byte main::i#33
byte main::i#34
byte main::i#35
byte main::i#36
byte main::i#37
byte main::i#38
byte main::i#39
byte main::i#4
byte main::i#40
byte main::i#41
byte main::i#5
byte main::i#6
byte main::i#7
byte main::i#8
byte main::i#9
word main::oCount
word main::oCount#0
word main::oCount#1
word main::oCount#10
word main::oCount#11
word main::oCount#12
word main::oCount#13
word main::oCount#14
word main::oCount#15
word main::oCount#16
word main::oCount#17
word main::oCount#18
word main::oCount#19
word main::oCount#2
word main::oCount#20
word main::oCount#21
word main::oCount#22
word main::oCount#23
word main::oCount#24
word main::oCount#25
word main::oCount#26
word main::oCount#27
word main::oCount#28
word main::oCount#29
word main::oCount#3
word main::oCount#30
word main::oCount#31
word main::oCount#32
word main::oCount#33
word main::oCount#34
word main::oCount#35
word main::oCount#36
word main::oCount#37
word main::oCount#38
word main::oCount#39
word main::oCount#4
word main::oCount#40
word main::oCount#41
word main::oCount#42
word main::oCount#43
word main::oCount#44
word main::oCount#45
word main::oCount#46
word main::oCount#47
word main::oCount#48
word main::oCount#49
word main::oCount#5
word main::oCount#50
word main::oCount#51
word main::oCount#52
word main::oCount#53
word main::oCount#54
word main::oCount#55
word main::oCount#56
word main::oCount#6
word main::oCount#7
word main::oCount#8
word main::oCount#9
byte main::objects
byte main::objects#0
byte main::objects#1
byte main::objects#10
byte main::objects#11
byte main::objects#12
byte main::objects#13
byte main::objects#14
byte main::objects#15
byte main::objects#16
byte main::objects#17
byte main::objects#18
byte main::objects#19
byte main::objects#2
byte main::objects#20
byte main::objects#21
byte main::objects#22
byte main::objects#23
byte main::objects#24
byte main::objects#25
byte main::objects#26
byte main::objects#27
byte main::objects#28
byte main::objects#29
byte main::objects#3
byte main::objects#30
byte main::objects#31
byte main::objects#32
byte main::objects#33
byte main::objects#34
byte main::objects#35
byte main::objects#36
byte main::objects#37
byte main::objects#38
byte main::objects#39
byte main::objects#4
byte main::objects#40
byte main::objects#41
byte main::objects#42
byte main::objects#43
byte main::objects#44
byte main::objects#45
byte main::objects#46
byte main::objects#47
byte main::objects#48
byte main::objects#49
byte main::objects#5
byte main::objects#50
byte main::objects#51
byte main::objects#52
byte main::objects#53
byte main::objects#54
byte main::objects#55
byte main::objects#56
byte main::objects#57
byte main::objects#6
byte main::objects#7
byte main::objects#8
byte main::objects#9
const byte main::preset = 0
signed word main::return
signed word main::return#0
signed word main::return#1
signed word main::return#2
signed word main::return#3
byte main::stopIt
byte main::stopIt#0
byte main::stopIt#1
byte main::stopIt#10
byte main::stopIt#11
byte main::stopIt#12
byte main::stopIt#13
byte main::stopIt#14
byte main::stopIt#15
byte main::stopIt#16
byte main::stopIt#17
byte main::stopIt#18
byte main::stopIt#19
byte main::stopIt#2
byte main::stopIt#20
byte main::stopIt#21
byte main::stopIt#22
byte main::stopIt#23
byte main::stopIt#24
byte main::stopIt#25
byte main::stopIt#26
byte main::stopIt#27
byte main::stopIt#28
byte main::stopIt#29
byte main::stopIt#3
byte main::stopIt#30
byte main::stopIt#31
byte main::stopIt#32
byte main::stopIt#33
byte main::stopIt#34
byte main::stopIt#35
byte main::stopIt#36
byte main::stopIt#37
byte main::stopIt#38
byte main::stopIt#39
byte main::stopIt#4
byte main::stopIt#40
byte main::stopIt#41
byte main::stopIt#42
byte main::stopIt#43
byte main::stopIt#44
byte main::stopIt#45
byte main::stopIt#46
byte main::stopIt#47
byte main::stopIt#48
byte main::stopIt#49
byte main::stopIt#5
byte main::stopIt#50
byte main::stopIt#51
byte main::stopIt#52
byte main::stopIt#53
byte main::stopIt#54
byte main::stopIt#6
byte main::stopIt#7
byte main::stopIt#8
byte main::stopIt#9
byte main::type
byte main::type#0
byte main::type#1
byte main::type#10
byte main::type#11
byte main::type#2
byte main::type#3
byte main::type#4
byte main::type#5
byte main::type#6
byte main::type#7
byte main::type#8
byte main::type#9
const byte maxC64Images = $100
const byte maxDrawObjects = $18
const byte maxSprImages = 8
const byte maxSprites = $20
const byte rfDrop = $fe
const byte sprOff = $40

Adding number conversion cast (unumber) 1 in 
Adding number conversion cast (unumber) 0 in lcSync::return#0 = 0
Adding number conversion cast (unumber) $a in Print00::$0 = Print00::v#3 >= $a
Adding number conversion cast (unumber) $a in Print00::v#1 = Print00::v#4 - $a
Adding number conversion cast (unumber) 1 in Print00::$1 = Print00::v#5 >= 1
Adding number conversion cast (unumber) 1 in Print00::v#2 = Print00::v#6 - 1
Adding number conversion cast (unumber) 0 in GetSprite::t0#1 = 0
Adding number conversion cast (unumber) $ff in GetSprite::return#0 = $ff
Adding number conversion cast (unumber) 0 in cmRF[GetSprite::t0#6] = 0
Adding number conversion cast (unumber) 0 in cmRF[AddSprite::sn#3] = 0
Adding number conversion cast (unumber) 0 in AddSprite::t0#1 = 0
Adding number conversion cast (unumber) $80 in AddSprite::$2 = cmIT[AddSprite::t0#4] >= $80
Adding number conversion cast (unumber) 1 in AddSprite::t0#2 = AddSprite::t0#5 + 1
Adding number conversion cast (unumber) 0 in cmRF[AddSprite::sn#4] = 0
Adding number conversion cast (unumber) $ff in cmRY[DelSprite::sn#1] = $ff
Adding number conversion cast (unumber) sprOff+0 in lcSprMapTab[0] = sprOff+0
Adding number conversion cast (unumber) 0 in lcSprMapTab[0] = ((unumber)) sprOff+0
Adding number conversion cast (unumber) 0 in lcSprMapTab[0] = ((unumber)) sprOff+(unumber)0
Adding number conversion cast (unumber) sprOff+1 in lcSprMapTab[1] = sprOff+1
Adding number conversion cast (unumber) 1 in lcSprMapTab[1] = ((unumber)) sprOff+1
Adding number conversion cast (unumber) 1 in lcSprMapTab[1] = ((unumber)) sprOff+(unumber)1
Adding number conversion cast (unumber) sprOff+2 in lcSprMapTab[2] = sprOff+2
Adding number conversion cast (unumber) 2 in lcSprMapTab[2] = ((unumber)) sprOff+2
Adding number conversion cast (unumber) 2 in lcSprMapTab[2] = ((unumber)) sprOff+(unumber)2
Adding number conversion cast (unumber) sprOff+3 in lcSprMapTab[3] = sprOff+3
Adding number conversion cast (unumber) 3 in lcSprMapTab[3] = ((unumber)) sprOff+3
Adding number conversion cast (unumber) 3 in lcSprMapTab[3] = ((unumber)) sprOff+(unumber)3
Adding number conversion cast (unumber) sprOff+4 in lcSprMapTab[4] = sprOff+4
Adding number conversion cast (unumber) 4 in lcSprMapTab[4] = ((unumber)) sprOff+4
Adding number conversion cast (unumber) 4 in lcSprMapTab[4] = ((unumber)) sprOff+(unumber)4
Adding number conversion cast (unumber) sprOff+5 in lcSprMapTab[5] = sprOff+5
Adding number conversion cast (unumber) 5 in lcSprMapTab[5] = ((unumber)) sprOff+5
Adding number conversion cast (unumber) 5 in lcSprMapTab[5] = ((unumber)) sprOff+(unumber)5
Adding number conversion cast (unumber) $a|lfMC in lcSprColTab[sprOff+1] = $a|lfMC
Adding number conversion cast (unumber) $a in lcSprColTab[sprOff+1] = ((unumber)) $a|lfMC
Adding number conversion cast (unumber) sprOff+1 in lcSprColTab[sprOff+1] = ((unumber)) (unumber)$a|lfMC
Adding number conversion cast (unumber) 1 in lcSprColTab[(unumber)sprOff+1] = ((unumber)) (unumber)$a|lfMC
Adding number conversion cast (unumber) sprOff+0 in lcSprColTab[sprOff+0] = lcSprColTab[(unumber)sprOff+(unumber)1]
Adding number conversion cast (unumber) 0 in lcSprColTab[(unumber)sprOff+0] = lcSprColTab[(unumber)sprOff+(unumber)1]
Adding number conversion cast (unumber) 5|lfMC in lcSprColTab[sprOff+3] = 5|lfMC
Adding number conversion cast (unumber) 5 in lcSprColTab[sprOff+3] = ((unumber)) 5|lfMC
Adding number conversion cast (unumber) sprOff+3 in lcSprColTab[sprOff+3] = ((unumber)) (unumber)5|lfMC
Adding number conversion cast (unumber) 3 in lcSprColTab[(unumber)sprOff+3] = ((unumber)) (unumber)5|lfMC
Adding number conversion cast (unumber) sprOff+2 in lcSprColTab[sprOff+2] = lcSprColTab[(unumber)sprOff+(unumber)3]
Adding number conversion cast (unumber) 2 in lcSprColTab[(unumber)sprOff+2] = lcSprColTab[(unumber)sprOff+(unumber)3]
Adding number conversion cast (unumber) $e|lfMC in lcSprColTab[sprOff+5] = $e|lfMC
Adding number conversion cast (unumber) $e in lcSprColTab[sprOff+5] = ((unumber)) $e|lfMC
Adding number conversion cast (unumber) sprOff+5 in lcSprColTab[sprOff+5] = ((unumber)) (unumber)$e|lfMC
Adding number conversion cast (unumber) 5 in lcSprColTab[(unumber)sprOff+5] = ((unumber)) (unumber)$e|lfMC
Adding number conversion cast (unumber) sprOff+4 in lcSprColTab[sprOff+4] = lcSprColTab[(unumber)sprOff+(unumber)5]
Adding number conversion cast (unumber) 4 in lcSprColTab[(unumber)sprOff+4] = lcSprColTab[(unumber)sprOff+(unumber)5]
Adding number conversion cast (unumber) 0 in main::i#1 = 0
Adding number conversion cast (unumber) maxSprites+1 in main::$2 = main::i#12 < maxSprites+1
Adding number conversion cast (unumber) 1 in main::$2 = main::i#12 < (unumber)maxSprites+1
Adding number conversion cast (unumber) $ff in cmIT[main::i#13] = $ff
Adding number conversion cast (unumber) 1 in main::i#2 = main::i#13 + 1
Adding number conversion cast (unumber) 0 in main::i#3 = 0
Adding number conversion cast (unumber) $ff in cmRF[main::i#15] = $ff
Adding number conversion cast (unumber) 1 in main::i#4 = main::i#15 + 1
Adding number conversion cast (unumber) 0 in main::c#1 = 0
Adding number conversion cast (unumber) $3e8 in main::$4 = main::c#9 < $3e8
Adding number conversion cast (unumber) $20 in ((byte*)$e000)[main::c#10] = $20
Adding number conversion cast (unumber) $e in ((byte*)$d800)[main::c#10] = $e
Adding number conversion cast (unumber) 1 in main::c#2 = main::c#10 + 1
Adding number conversion cast (unumber) 0 in lcSync::flags#0 = 0
Adding number conversion cast (unumber) $33 in *((byte*)1) = $33
Adding number conversion cast (unumber) 0 in main::c#3 = 0
Adding number conversion cast (unumber) $7f8 in main::$5 = main::c#11 < $7f8
Adding number conversion cast (unumber) 1 in main::c#4 = main::c#12 + 1
Adding number conversion cast (unumber) $35 in *((byte*)1) = $35
Adding number conversion cast (unumber) 3 in ((byte*)$d000)[$d02] = ((byte*)$d000)[$d02] | 3
Adding number conversion cast (unumber) $d02 in ((byte*)$d000)[$d02] = ((byte*)$d000)[$d02] | (unumber)3
Adding number conversion cast (unumber) $d02 in ((byte*)$d000)[$d02] = ((byte*)$d000)[(unumber)$d02] | (unumber)3
Adding number conversion cast (unumber) $d00 in ((byte*)$d000)[$d00] = ((byte*)$d000)[$d00] & ~3
Adding number conversion cast (unumber) $d00 in ((byte*)$d000)[$d00] = ((byte*)$d000)[(unumber)$d00] & ~3
Adding number conversion cast (unumber) $80 in main::$1 = main::i#16 & $80
Adding number conversion cast (unumber) main::$1 in main::$1 = main::i#16 & (unumber)$80
Adding number conversion cast (unumber) 0 in main::$107 = 0 != main::$1
Adding number conversion cast (unumber) 'N'-'A'+1 in ((byte*)$e000)[$3e4] = 'N'-'A'+1
Adding number conversion cast (unumber) 1 in ((byte*)$e000)[$3e4] = ((unumber)) 'N'-'A'+1
Adding number conversion cast (unumber) $3e4 in ((byte*)$e000)[$3e4] = ((unumber)) 'N'-'A'+(unumber)1
Adding number conversion cast (unumber) 'T'-'A'+1 in ((byte*)$e000)[$3e5] = 'T'-'A'+1
Adding number conversion cast (unumber) 1 in ((byte*)$e000)[$3e5] = ((unumber)) 'T'-'A'+1
Adding number conversion cast (unumber) $3e5 in ((byte*)$e000)[$3e5] = ((unumber)) 'T'-'A'+(unumber)1
Adding number conversion cast (unumber) 'S'-'A'+1 in ((byte*)$e000)[$3e6] = 'S'-'A'+1
Adding number conversion cast (unumber) 1 in ((byte*)$e000)[$3e6] = ((unumber)) 'S'-'A'+1
Adding number conversion cast (unumber) $3e6 in ((byte*)$e000)[$3e6] = ((unumber)) 'S'-'A'+(unumber)1
Adding number conversion cast (unumber) 'C'-'A'+1 in ((byte*)$e000)[$3e7] = 'C'-'A'+1
Adding number conversion cast (unumber) 1 in ((byte*)$e000)[$3e7] = ((unumber)) 'C'-'A'+1
Adding number conversion cast (unumber) $3e7 in ((byte*)$e000)[$3e7] = ((unumber)) 'C'-'A'+(unumber)1
Adding number conversion cast (unumber) 'P'-'A'+1 in ((byte*)$e000)[$3e5] = 'P'-'A'+1
Adding number conversion cast (unumber) 1 in ((byte*)$e000)[$3e5] = ((unumber)) 'P'-'A'+1
Adding number conversion cast (unumber) $3e5 in ((byte*)$e000)[$3e5] = ((unumber)) 'P'-'A'+(unumber)1
Adding number conversion cast (unumber) 'A'-'A'+1 in ((byte*)$e000)[$3e6] = 'A'-'A'+1
Adding number conversion cast (unumber) 1 in ((byte*)$e000)[$3e6] = ((unumber)) 'A'-'A'+1
Adding number conversion cast (unumber) $3e6 in ((byte*)$e000)[$3e6] = ((unumber)) 'A'-'A'+(unumber)1
Adding number conversion cast (unumber) 'L'-'A'+1 in ((byte*)$e000)[$3e7] = 'L'-'A'+1
Adding number conversion cast (unumber) 1 in ((byte*)$e000)[$3e7] = ((unumber)) 'L'-'A'+1
Adding number conversion cast (unumber) $3e7 in ((byte*)$e000)[$3e7] = ((unumber)) 'L'-'A'+(unumber)1
Adding number conversion cast (unumber) 'B'-'A'+1 in ((byte*)$e000)[$3cf+0] = 'B'-'A'+1
Adding number conversion cast (unumber) 1 in ((byte*)$e000)[$3cf+0] = ((unumber)) 'B'-'A'+1
Adding number conversion cast (unumber) $3cf+0 in ((byte*)$e000)[$3cf+0] = ((unumber)) 'B'-'A'+(unumber)1
Adding number conversion cast (unumber) 'U'-'A'+1 in ((byte*)$e000)[$3cf+1] = 'U'-'A'+1
Adding number conversion cast (unumber) 1 in ((byte*)$e000)[$3cf+1] = ((unumber)) 'U'-'A'+1
Adding number conversion cast (unumber) $3cf+1 in ((byte*)$e000)[$3cf+1] = ((unumber)) 'U'-'A'+(unumber)1
Adding number conversion cast (unumber) 'B'-'A'+1 in ((byte*)$e000)[$3cf+2] = 'B'-'A'+1
Adding number conversion cast (unumber) 1 in ((byte*)$e000)[$3cf+2] = ((unumber)) 'B'-'A'+1
Adding number conversion cast (unumber) $3cf+2 in ((byte*)$e000)[$3cf+2] = ((unumber)) 'B'-'A'+(unumber)1
Adding number conversion cast (unumber) 'B'-'A'+1 in ((byte*)$e000)[$3cf+3] = 'B'-'A'+1
Adding number conversion cast (unumber) 1 in ((byte*)$e000)[$3cf+3] = ((unumber)) 'B'-'A'+1
Adding number conversion cast (unumber) $3cf+3 in ((byte*)$e000)[$3cf+3] = ((unumber)) 'B'-'A'+(unumber)1
Adding number conversion cast (unumber) 'L'-'A'+1 in ((byte*)$e000)[$3cf+4] = 'L'-'A'+1
Adding number conversion cast (unumber) 1 in ((byte*)$e000)[$3cf+4] = ((unumber)) 'L'-'A'+1
Adding number conversion cast (unumber) $3cf+4 in ((byte*)$e000)[$3cf+4] = ((unumber)) 'L'-'A'+(unumber)1
Adding number conversion cast (unumber) 'E'-'A'+1 in ((byte*)$e000)[$3cf+5] = 'E'-'A'+1
Adding number conversion cast (unumber) 1 in ((byte*)$e000)[$3cf+5] = ((unumber)) 'E'-'A'+1
Adding number conversion cast (unumber) $3cf+5 in ((byte*)$e000)[$3cf+5] = ((unumber)) 'E'-'A'+(unumber)1
Adding number conversion cast (unumber) 'S'-'A'+1 in ((byte*)$e000)[$3cf+6] = 'S'-'A'+1
Adding number conversion cast (unumber) 1 in ((byte*)$e000)[$3cf+6] = ((unumber)) 'S'-'A'+1
Adding number conversion cast (unumber) $3cf+6 in ((byte*)$e000)[$3cf+6] = ((unumber)) 'S'-'A'+(unumber)1
Adding number conversion cast (unumber) $3cf+7 in ((byte*)$e000)[$3cf+7] = ':'
Adding number conversion cast (unumber) 0 in main::type#1 = 0
Adding number conversion cast (unumber) 0 in main::i#6 = 0
Adding number conversion cast (unumber) 1 in main::type#2 = main::type#4 + 1
Adding number conversion cast (unumber) 6 in main::$8 = main::type#2 >= 6
Adding number conversion cast (unumber) 0 in main::c#5 = 0
Adding number conversion cast (snumber) $70<<F in *main::$54 = $70<<F
Adding number conversion cast (unumber) $70 in *main::$54 = ((snumber)) $70<<F
Adding number conversion cast (snumber) 1 in *main::$56 = 1
Adding number conversion cast (snumber) $18<<F in *main::$57 = $18<<F
Adding number conversion cast (unumber) $18 in *main::$57 = ((snumber)) $18<<F
Adding number conversion cast (snumber) 1<<F in *main::$58 = 1<<F
Adding number conversion cast (unumber) 1 in *main::$58 = ((snumber)) 1<<F
Adding number conversion cast (snumber) 1 in *main::$59 = 1
Adding number conversion cast (unumber) $14 in main::$10 = main::i#19 < $14
Adding number conversion cast (unumber) 0 in main::type#3 = 0
Adding number conversion cast (unumber) 1 in main::i#7 = main::i#20 + 1
Adding number conversion cast (unumber) $80 in main::$14 = main::c#6 < $80
Adding number conversion cast (unumber) 0 in cmRF[main::i#21] = 0
Adding number conversion cast (unumber) 4 in main::$17 = main::i#21 << 4
Adding number conversion cast (unumber) 0 in main::i#8 = 0
Adding number conversion cast (snumber) -$20 in main::$19 = *main::$63 < -$20
Adding number conversion cast (unumber) 1 in main::c#7 = main::c#14 + 1
Adding number conversion cast (unumber) $e in main::$29 = main::c#7 >= $e
Adding number conversion cast (snumber) 1 in *main::$64 = 1
Adding number conversion cast (snumber) $20 in main::$20 = *main::$65 > $20
Adding number conversion cast (snumber) -1 in *main::$66 = -1
Adding number conversion cast (snumber) $f8<<F in main::$22 = *main::$67 > $f8<<F
Adding number conversion cast (unumber) $f8 in main::$22 = *main::$67 > (snumber)$f8<<F
Adding number conversion cast (snumber) -1<<F in *main::$68 = -1<<F
Adding number conversion cast (unumber) -1 in *main::$68 = ((snumber)) -1<<F
Adding number conversion cast (snumber) $18<<F in main::$23 = *main::$69 < $18<<F
Adding number conversion cast (unumber) $18 in main::$23 = *main::$69 < (snumber)$18<<F
Adding number conversion cast (snumber) 1<<F in *main::$70 = 1<<F
Adding number conversion cast (unumber) 1 in *main::$70 = ((snumber)) 1<<F
Adding number conversion cast (unumber) $80 in main::$25 = cmRF[main::i#23] < $80
Adding number conversion cast (unumber) 1 in main::i#9 = main::i#24 + 1
Adding number conversion cast (unumber) 0 in lcSync::flags#1 = 0
Adding number conversion cast (unumber) $1f in main::$42 = main::$41 & $1f
Adding number conversion cast (unumber) main::$42 in main::$42 = main::$41 & (unumber)$1f
Adding number conversion cast (unumber) 1 in main::$43 = main::i#10 > 1
Adding number conversion cast (unumber) 0 in main::c#8 = 0
Adding number conversion cast (unumber) 0 in main::$31 = 0 == main::stopIt#2
Adding number conversion cast (unumber) 1 in main::objects#1 = main::objects#5 + 1
Adding number conversion cast (unumber) 0 in main::$35 = 0 == main::preset
Adding number conversion cast (unumber) $80 in main::$37 = main::i#11 < $80
Adding number conversion cast (unumber) 0 in cmRY[main::i#27] = 0
Adding number conversion cast (unumber) 2 in main::oCount#1 = main::oCount#4 + 2
Adding number conversion cast (unumber) 0 in main::$44 = main::oCount#5 > 0
Adding number conversion cast (unumber) 1 in main::oCount#2 = main::oCount#6 - 1
Adding number conversion cast (unumber) 2 in main::$46 = main::oCount#7 > 2
Adding number conversion cast (unumber) 0 in main::$47 = main::objects#6 > 0
Adding number conversion cast (unumber) $e000 in Print00::p#2 = $e000+(byte*)$3d7
Adding number conversion cast (unumber) 1 in main::objects#2 = main::objects#8 - 1
Adding number conversion cast (unumber) 1 in main::stopIt#1 = 1
Adding number conversion cast (unumber) 0 in main::oCount#3 = 0
Adding number conversion cast (snumber) 0 in main::return#0 = 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast lcSync::return#0 = (unumber)0
Inlining cast GetSprite::t0#1 = (unumber)0
Inlining cast GetSprite::return#0 = (unumber)$ff
Inlining cast cmRF[GetSprite::t0#6] = (unumber)0
Inlining cast cmRF[AddSprite::sn#3] = (unumber)0
Inlining cast AddSprite::t0#1 = (unumber)0
Inlining cast cmRF[AddSprite::sn#4] = (unumber)0
Inlining cast cmRY[DelSprite::sn#1] = (unumber)$ff
Inlining cast lcSprMapTab[(unumber)0] = (unumber)sprOff+(unumber)0
Inlining cast lcSprMapTab[(unumber)1] = (unumber)sprOff+(unumber)1
Inlining cast lcSprMapTab[(unumber)2] = (unumber)sprOff+(unumber)2
Inlining cast lcSprMapTab[(unumber)3] = (unumber)sprOff+(unumber)3
Inlining cast lcSprMapTab[(unumber)4] = (unumber)sprOff+(unumber)4
Inlining cast lcSprMapTab[(unumber)5] = (unumber)sprOff+(unumber)5
Inlining cast lcSprColTab[(unumber)sprOff+(unumber)1] = (unumber)(unumber)$a|lfMC
Inlining cast lcSprColTab[(unumber)sprOff+(unumber)3] = (unumber)(unumber)5|lfMC
Inlining cast lcSprColTab[(unumber)sprOff+(unumber)5] = (unumber)(unumber)$e|lfMC
Inlining cast main::i#1 = (unumber)0
Inlining cast cmIT[main::i#13] = (unumber)$ff
Inlining cast main::i#3 = (unumber)0
Inlining cast cmRF[main::i#15] = (unumber)$ff
Inlining cast main::c#1 = (unumber)0
Inlining cast ((byte*)$e000)[main::c#10] = (unumber)$20
Inlining cast ((byte*)$d800)[main::c#10] = (unumber)$e
Inlining cast lcSync::flags#0 = (unumber)0
Inlining cast *((byte*)1) = (unumber)$33
Inlining cast main::c#3 = (unumber)0
Inlining cast *((byte*)1) = (unumber)$35
Inlining cast ((byte*)$e000)[(unumber)$3e4] = (unumber)'N'-'A'+(unumber)1
Inlining cast ((byte*)$e000)[(unumber)$3e5] = (unumber)'T'-'A'+(unumber)1
Inlining cast ((byte*)$e000)[(unumber)$3e6] = (unumber)'S'-'A'+(unumber)1
Inlining cast ((byte*)$e000)[(unumber)$3e7] = (unumber)'C'-'A'+(unumber)1
Inlining cast ((byte*)$e000)[(unumber)$3e5] = (unumber)'P'-'A'+(unumber)1
Inlining cast ((byte*)$e000)[(unumber)$3e6] = (unumber)'A'-'A'+(unumber)1
Inlining cast ((byte*)$e000)[(unumber)$3e7] = (unumber)'L'-'A'+(unumber)1
Inlining cast ((byte*)$e000)[(unumber)$3cf+0] = (unumber)'B'-'A'+(unumber)1
Inlining cast ((byte*)$e000)[(unumber)$3cf+1] = (unumber)'U'-'A'+(unumber)1
Inlining cast ((byte*)$e000)[(unumber)$3cf+2] = (unumber)'B'-'A'+(unumber)1
Inlining cast ((byte*)$e000)[(unumber)$3cf+3] = (unumber)'B'-'A'+(unumber)1
Inlining cast ((byte*)$e000)[(unumber)$3cf+4] = (unumber)'L'-'A'+(unumber)1
Inlining cast ((byte*)$e000)[(unumber)$3cf+5] = (unumber)'E'-'A'+(unumber)1
Inlining cast ((byte*)$e000)[(unumber)$3cf+6] = (unumber)'S'-'A'+(unumber)1
Inlining cast main::type#1 = (unumber)0
Inlining cast main::i#6 = (unumber)0
Inlining cast main::c#5 = (unumber)0
Inlining cast *main::$54 = (snumber)(unumber)$70<<F
Inlining cast *main::$56 = (snumber)1
Inlining cast *main::$57 = (snumber)(unumber)$18<<F
Inlining cast *main::$58 = (snumber)(unumber)1<<F
Inlining cast *main::$59 = (snumber)1
Inlining cast main::type#3 = (unumber)0
Inlining cast cmRF[main::i#21] = (unumber)0
Inlining cast main::i#8 = (unumber)0
Inlining cast *main::$64 = (snumber)1
Inlining cast *main::$66 = (snumber)-1
Inlining cast *main::$68 = (snumber)(unumber)-1<<F
Inlining cast *main::$70 = (snumber)(unumber)1<<F
Inlining cast lcSync::flags#1 = (unumber)0
Inlining cast main::c#8 = (unumber)0
Inlining cast cmRY[main::i#27] = (unumber)0
Inlining cast main::stopIt#1 = (unumber)1
Inlining cast main::oCount#3 = (unumber)0
Inlining cast main::return#0 = (snumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $a
Simplifying constant integer cast $a
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast sprOff+(unumber)0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast sprOff+(unumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast sprOff+(unumber)2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast sprOff+(unumber)3
Simplifying constant integer cast 3
Simplifying constant integer cast 3
Simplifying constant integer cast sprOff+(unumber)4
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast sprOff+(unumber)5
Simplifying constant integer cast 5
Simplifying constant integer cast 5
Simplifying constant integer cast (unumber)$a|lfMC
Simplifying constant integer cast $a
Simplifying constant integer cast sprOff+(unumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast sprOff+(unumber)0
Simplifying constant integer cast 0
Simplifying constant integer cast (unumber)5|lfMC
Simplifying constant integer cast 5
Simplifying constant integer cast sprOff+(unumber)3
Simplifying constant integer cast 3
Simplifying constant integer cast sprOff+(unumber)2
Simplifying constant integer cast 2
Simplifying constant integer cast (unumber)$e|lfMC
Simplifying constant integer cast $e
Simplifying constant integer cast sprOff+(unumber)5
Simplifying constant integer cast 5
Simplifying constant integer cast sprOff+(unumber)4
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast maxSprites+(unumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast $ff
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $3e8
Simplifying constant integer cast $20
Simplifying constant pointer cast (byte*) 57344
Simplifying constant integer cast $e
Simplifying constant pointer cast (byte*) 55296
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $33
Simplifying constant pointer cast (byte*) 1
Simplifying constant integer cast 0
Simplifying constant integer cast $7f8
Simplifying constant pointer cast (byte*) 53248
Simplifying constant pointer cast (byte*) 63488
Simplifying constant integer cast 1
Simplifying constant integer cast $35
Simplifying constant pointer cast (byte*) 1
Simplifying constant pointer cast (byte*) 53248
Simplifying constant integer cast $d02
Simplifying constant integer cast 3
Simplifying constant pointer cast (byte*) 53248
Simplifying constant integer cast $d02
Simplifying constant pointer cast (byte*) 53248
Simplifying constant integer cast $d00
Simplifying constant pointer cast (byte*) 53248
Simplifying constant integer cast $d00
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 'N'-'A'+(unumber)1
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 57344
Simplifying constant integer cast $3e4
Simplifying constant integer cast 'T'-'A'+(unumber)1
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 57344
Simplifying constant integer cast $3e5
Simplifying constant integer cast 'S'-'A'+(unumber)1
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 57344
Simplifying constant integer cast $3e6
Simplifying constant integer cast 'C'-'A'+(unumber)1
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 57344
Simplifying constant integer cast $3e7
Simplifying constant integer cast 'P'-'A'+(unumber)1
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 57344
Simplifying constant integer cast $3e5
Simplifying constant integer cast 'A'-'A'+(unumber)1
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 57344
Simplifying constant integer cast $3e6
Simplifying constant integer cast 'L'-'A'+(unumber)1
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 57344
Simplifying constant integer cast $3e7
Simplifying constant integer cast 'B'-'A'+(unumber)1
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 57344
Simplifying constant integer cast 'U'-'A'+(unumber)1
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 57344
Simplifying constant integer cast 'B'-'A'+(unumber)1
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 57344
Simplifying constant integer cast 'B'-'A'+(unumber)1
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 57344
Simplifying constant integer cast 'L'-'A'+(unumber)1
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 57344
Simplifying constant integer cast 'E'-'A'+(unumber)1
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 57344
Simplifying constant integer cast 'S'-'A'+(unumber)1
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 57344
Simplifying constant pointer cast (byte*) 57344
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 6
Simplifying constant integer cast 0
Simplifying constant integer cast $70
Simplifying constant integer cast 1
Simplifying constant integer cast $18
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $14
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast -$20
Simplifying constant integer cast 1
Simplifying constant integer cast $e
Simplifying constant integer cast 1
Simplifying constant integer cast $20
Simplifying constant integer cast -1
Simplifying constant integer cast $f8
Simplifying constant integer cast -1
Simplifying constant integer cast $18
Simplifying constant integer cast 1
Simplifying constant integer cast $80
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $1f
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast $e000
Simplifying constant pointer cast (byte*) 983
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $e
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) $e
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $33
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $7f8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $35
Finalized unsigned number type (word) $d02
Finalized unsigned number type (byte) 3
Finalized unsigned number type (word) $d02
Finalized unsigned number type (word) $d00
Finalized unsigned number type (word) $d00
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $3e4
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $3e5
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $3e6
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $3e7
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $3e5
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $3e6
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $3e7
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $70
Finalized signed number type (signed byte) 1
Finalized unsigned number type (byte) $18
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 1
Finalized unsigned number type (byte) $14
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) -$20
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $e
Finalized signed number type (signed byte) 1
Finalized signed number type (signed byte) $20
Finalized signed number type (signed byte) -1
Finalized unsigned number type (byte) $f8
Finalized unsigned number type (byte) -1
Finalized unsigned number type (byte) $18
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $1f
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $e000
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$1 = main::i#16 & $80
Inferred type updated to byte in main::$42 = main::$41 & $1f
Inversing boolean not [35] GetSprite::$2 = cmRF[GetSprite::t0#4] < rfDrop from [34] GetSprite::$1 = cmRF[GetSprite::t0#4] >= rfDrop
Inversing boolean not [59] AddSprite::$3 = cmIT[AddSprite::t0#4] < $80 from [58] AddSprite::$2 = cmIT[AddSprite::t0#4] >= $80
Inversing boolean not [168] main::$9 = main::type#2 < 6 from [167] main::$8 = main::type#2 >= 6
Inversing boolean not [206] main::$15 = main::c#6 >= $80 from [205] main::$14 = main::c#6 < $80
Inversing boolean not [238] main::$30 = main::c#7 < $e from [237] main::$29 = main::c#7 >= $e
Inversing boolean not [248] main::$21 = *main::$65 <= $20 from [247] main::$20 = *main::$65 > $20
Inversing boolean not [267] main::$24 = *main::$69 >= (signed word)$18<<F from [266] main::$23 = *main::$69 < (signed word)$18<<F
Inversing boolean not [289] main::$26 = cmRF[main::i#23] >= $80 from [288] main::$25 = cmRF[main::i#23] < $80
Inversing boolean not [347] main::$45 = main::oCount#5 <= 0 from [346] main::$44 = main::oCount#5 > 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias lcSync::return#0 = lcSync::return#4 lcSync::return#1 
Alias Print00::v#0 = Print00::v0#1 
Alias Print00::c#5 = Print00::c#9 Print00::c#6 
Alias Print00::v#3 = Print00::v#4 Print00::v#7 
Alias Print00::p#3 = Print00::p#8 Print00::p#5 
Alias Print00::c#10 = Print00::c#7 Print00::c#8 
Alias Print00::v#5 = Print00::v#6 
Alias Print00::p#4 = Print00::p#9 Print00::p#6 
Alias GetSprite::t0#3 = GetSprite::t0#4 GetSprite::t0#5 GetSprite::t0#6 GetSprite::return#1 
Alias GetSprite::return#2 = GetSprite::return#5 
Alias AddSprite::sn#2 = AddSprite::sn#3 AddSprite::sn#7 
Alias AddSprite::t0#3 = AddSprite::t0#4 AddSprite::t0#5 AddSprite::t0#6 
Alias AddSprite::sn#4 = AddSprite::sn#5 AddSprite::sn#6 AddSprite::sn#8 
Alias main::i#12 = main::i#13 
Alias main::objects#54 = main::objects#57 main::objects#56 
Alias main::stopIt#51 = main::stopIt#54 main::stopIt#53 
Alias main::oCount#53 = main::oCount#56 main::oCount#55 
Alias main::i#14 = main::i#15 
Alias main::objects#52 = main::objects#55 main::objects#53 
Alias main::stopIt#49 = main::stopIt#52 main::stopIt#50 
Alias main::oCount#51 = main::oCount#54 main::oCount#52 
Alias main::c#10 = main::c#9 
Alias main::objects#48 = main::objects#51 main::objects#50 main::objects#49 
Alias main::stopIt#41 = main::stopIt#48 main::stopIt#47 main::stopIt#44 
Alias main::oCount#47 = main::oCount#50 main::oCount#49 main::oCount#48 
Alias lcSync::return#2 = lcSync::return#5 
Alias main::i#5 = main::$0 
Alias main::c#11 = main::c#12 
Alias main::i#16 = main::i#35 main::i#28 
Alias main::objects#31 = main::objects#47 main::objects#46 main::objects#40 main::objects#32 
Alias main::stopIt#20 = main::stopIt#40 main::stopIt#38 main::stopIt#31 main::stopIt#21 
Alias main::oCount#31 = main::oCount#46 main::oCount#45 main::oCount#39 main::oCount#32 
Alias main::i#17 = main::i#18 main::i#29 
Alias main::type#4 = main::type#5 
Alias main::objects#16 = main::objects#41 main::objects#21 main::objects#42 
Alias main::stopIt#11 = main::stopIt#32 main::stopIt#7 main::stopIt#33 
Alias main::oCount#19 = main::oCount#40 main::oCount#23 main::oCount#41 
Alias main::d1#0 = main::$7 main::d1#2 
Alias main::i#19 = main::i#36 main::i#30 main::i#31 main::i#21 
Alias main::type#10 = main::type#7 main::type#8 main::type#11 main::type#9 
Alias main::objects#33 = main::objects#43 main::objects#34 main::objects#44 main::objects#35 
Alias main::stopIt#22 = main::stopIt#34 main::stopIt#23 main::stopIt#35 main::stopIt#24 
Alias main::oCount#33 = main::oCount#42 main::oCount#34 main::oCount#43 main::oCount#35 
Alias GetSprite::return#3 = GetSprite::return#6 
Alias main::c#13 = main::c#6 main::$13 
Alias main::d#14 = main::d#3 main::d#4 main::d#5 main::d#6 
Alias main::i#22 = main::i#41 main::i#38 main::i#39 main::i#40 
Alias main::objects#11 = main::objects#45 main::objects#3 main::objects#36 main::objects#37 main::objects#38 main::objects#4 main::objects#5 
Alias main::c#14 = main::c#35 main::c#15 main::c#28 main::c#29 main::c#30 
Alias main::stopIt#2 = main::stopIt#36 main::stopIt#4 main::stopIt#3 main::stopIt#25 main::stopIt#26 main::stopIt#27 main::stopIt#45 main::stopIt#42 main::stopIt#46 main::stopIt#43 
Alias main::oCount#10 = main::oCount#44 main::oCount#14 main::oCount#36 main::oCount#37 main::oCount#38 main::oCount#11 main::oCount#15 main::oCount#12 main::oCount#16 main::oCount#13 
Alias main::d#10 = main::d#8 main::d#7 main::d#9 
Alias main::i#32 = main::i#37 main::i#33 main::i#34 
Alias main::objects#22 = main::objects#28 main::objects#23 main::objects#24 
Alias main::c#21 = main::c#25 main::c#22 main::c#23 
Alias main::stopIt#12 = main::stopIt#18 main::stopIt#13 main::stopIt#14 
Alias main::oCount#24 = main::oCount#30 main::oCount#25 main::oCount#26 
Alias main::d#11 = main::d#13 
Alias main::i#23 = main::i#25 
Alias main::objects#18 = main::objects#19 
Alias main::c#19 = main::c#20 
Alias main::stopIt#10 = main::stopIt#9 
Alias main::oCount#21 = main::oCount#22 
Alias lcSync::return#3 = lcSync::return#6 
Alias main::oCount#4 = main::oCount#8 main::oCount#9 main::oCount#5 main::oCount#6 
Alias main::objects#12 = main::objects#20 main::objects#25 main::objects#13 main::objects#14 
Alias main::c#31 = main::c#36 main::c#37 main::c#32 main::c#33 
Alias main::stopIt#28 = main::stopIt#37 main::stopIt#39 main::stopIt#29 main::stopIt#30 
Alias main::i#10 = main::$42 
Alias main::c#38 = main::c#40 main::c#8 main::c#41 main::c#39 
Alias GetSprite::return#4 = GetSprite::return#7 
Alias main::objects#1 = main::objects#29 main::objects#39 main::objects#30 
Alias main::i#11 = main::$36 main::i#26 main::i#27 
Alias main::objects#17 = main::objects#7 
Alias main::c#18 = main::c#24 
Alias main::stopIt#15 = main::stopIt#8 
Alias main::oCount#20 = main::oCount#27 
Alias main::objects#6 = main::objects#8 
Alias main::c#26 = main::c#34 main::c#27 
Alias main::objects#15 = main::objects#2 
Alias main::return#0 = main::return#3 main::return#1 
Successful SSA optimization Pass2AliasElimination
Alias main::objects#26 = main::objects#31 
Alias main::stopIt#16 = main::stopIt#20 
Alias main::oCount#28 = main::oCount#31 
Alias main::d1#0 = main::d1#1 
Alias main::i#17 = main::i#19 main::i#20 
Alias main::objects#16 = main::objects#33 main::objects#27 
Alias main::stopIt#11 = main::stopIt#22 main::stopIt#17 
Alias main::oCount#19 = main::oCount#33 main::oCount#29 
Alias main::type#10 = main::type#6 
Alias main::d#10 = main::d#14 main::d#11 main::d#12 
Alias main::i#22 = main::i#32 main::i#23 main::i#24 
Alias main::objects#10 = main::objects#22 main::objects#11 main::objects#18 
Alias main::c#14 = main::c#21 main::c#19 main::c#17 
Alias main::stopIt#10 = main::stopIt#12 main::stopIt#2 main::stopIt#6 main::stopIt#28 main::stopIt#19 
Alias main::oCount#10 = main::oCount#24 main::oCount#21 main::oCount#18 main::oCount#4 
Alias main::objects#12 = main::objects#6 
Alias main::c#18 = main::c#26 main::c#31 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values Print00::v#0 Print00::v0#0
Identical Phi Values Print00::p#7 Print00::p#2
Identical Phi Values Print00::p#3 Print00::p#7
Identical Phi Values Print00::p#4 Print00::p#0
Identical Phi Values AddSprite::sn#4 AddSprite::sn#2
Identical Phi Values DelSprite::sn#1 DelSprite::sn#0
Identical Phi Values main::objects#54 main::objects#0
Identical Phi Values main::stopIt#51 main::stopIt#0
Identical Phi Values main::oCount#53 main::oCount#0
Identical Phi Values main::objects#52 main::objects#54
Identical Phi Values main::stopIt#49 main::stopIt#51
Identical Phi Values main::oCount#51 main::oCount#53
Identical Phi Values main::objects#48 main::objects#52
Identical Phi Values main::stopIt#41 main::stopIt#49
Identical Phi Values main::oCount#47 main::oCount#51
Identical Phi Values main::i#16 main::i#5
Identical Phi Values main::objects#26 main::objects#48
Identical Phi Values main::stopIt#16 main::stopIt#41
Identical Phi Values main::oCount#28 main::oCount#47
Identical Phi Values main::objects#16 main::objects#26
Identical Phi Values main::stopIt#11 main::stopIt#16
Identical Phi Values main::oCount#19 main::oCount#28
Identical Phi Values main::objects#10 main::objects#9
Identical Phi Values main::c#14 main::c#16
Identical Phi Values main::stopIt#10 main::stopIt#5
Identical Phi Values main::oCount#10 main::oCount#17
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition Print00::$0 [7] if(Print00::v#3>=$a) goto Print00::@2
Simple Condition Print00::$1 [15] if(Print00::v#5>=1) goto Print00::@5
Simple Condition GetSprite::$0 [25] if(GetSprite::t0#3<maxSprites) goto GetSprite::@2
Simple Condition GetSprite::$2 [27] if(cmRF[GetSprite::t0#3]<rfDrop) goto GetSprite::@4
Simple Condition AddSprite::$0 [36] if(rfDrop==cmRF[AddSprite::sn#2]) goto AddSprite::@1
Simple Condition AddSprite::$1 [41] if(AddSprite::t0#3<maxSprites) goto AddSprite::@4
Simple Condition AddSprite::$3 [43] if(cmIT[AddSprite::t0#3]<$80) goto AddSprite::@5
Simple Condition main::$2 [74] if(main::i#12<maxSprites+1) goto main::@4
Simple Condition main::$3 [80] if(main::i#14<maxSprites) goto main::@7
Simple Condition main::$4 [86] if(main::c#10<$3e8) goto main::@10
Simple Condition main::$5 [98] if(main::c#11<$7f8) goto main::@13
Simple Condition main::$107 [106] if(0!=main::$1) goto main::@1
Simple Condition main::$6 [126] if(main::i#17<maxDrawObjects) goto main::@17
Simple Condition main::$9 [134] if(main::type#2<6) goto main::@19
Simple Condition main::$15 [165] if(main::c#13>=$80) goto main::@20
Simple Condition main::$18 [178] if(main::i#22<main::objects#9) goto main::@27
Simple Condition main::$19 [189] if(*main::$63<-$20) goto main::@29
Simple Condition main::$30 [192] if(main::c#7<$e) goto main::@42
Simple Condition main::$21 [199] if(*main::$65<=$20) goto main::@30
Simple Condition main::$22 [206] if(*main::$67>(signed word)$f8<<F) goto main::@31
Simple Condition main::$24 [213] if(*main::$69>=(signed word)$18<<F) goto main::@32
Simple Condition main::$26 [232] if(cmRF[main::i#22]>=$80) goto main::@33
Simple Condition main::$43 [253] if(main::i#10>1) goto main::@43
Simple Condition main::$45 [277] if(main::oCount#17<=0) goto main::@44
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting ! if()-condition to reversed if() [157] main::$12 = ! main::$11
Rewriting && if()-condition to two if()s [156] main::$11 = main::preset && main::$10
Rewriting ! if()-condition to reversed if() [258] main::$34 = ! main::$33
Rewriting && if()-condition to two if()s [257] main::$33 = main::$31 && main::$32
Rewriting ! if()-condition to reversed if() [267] main::$39 = ! main::$38
Rewriting && if()-condition to two if()s [266] main::$38 = main::$35 && main::$37
Rewriting ! if()-condition to reversed if() [283] main::$49 = ! main::$48
Rewriting && if()-condition to two if()s [282] main::$48 = main::$46 && main::$47
Successful SSA optimization Pass2ConditionalAndOrRewriting
Warning! Adding boolean cast to non-boolean condition main::preset
Rewriting array member address-of to pointer addition [128] main::d1#0 = dTab + main::$52
Successful SSA optimization PassNArrayElementAddressOfRewriting
Constant right-side identified [139] *main::$54 = (snumber)$70<<F
Constant right-side identified [148] *main::$57 = (snumber)$18<<F
Constant right-side identified [151] *main::$58 = (snumber)1<<F
Constant right-side identified main::$108 = 0 != main::preset
Constant right-side identified [209] *main::$68 = (snumber)-1<<F
Constant right-side identified [216] *main::$70 = (snumber)1<<F
Constant right-side identified [261] main::$35 = 0 == main::preset
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant lcSync::return#0 = 0
Constant Print00::c#0 = 0
Constant Print00::c#1 = '0'
Constant Print00::c#3 = '0'
Constant GetSprite::t0#0 = 0
Constant GetSprite::t0#1 = 0
Constant GetSprite::return#0 = $ff
Constant AddSprite::t0#0 = 0
Constant AddSprite::t0#1 = 0
Constant main::d#0 = (struct $5*) 0
Constant main::i#0 = 0
Constant main::type#0 = 0
Constant main::stopIt#0 = 0
Constant main::objects#0 = 0
Constant main::oCount#0 = 0
Constant main::c#0 = 0
Constant main::i#1 = 0
Constant main::i#3 = 0
Constant main::c#1 = 0
Constant lcSync::flags#0 = 0
Constant main::c#3 = 0
Constant main::type#1 = 0
Constant main::i#6 = 0
Constant main::c#5 = 0
Constant main::$108 = 0!=main::preset
Constant main::type#3 = 0
Constant main::i#8 = 0
Constant main::d#1 = dTab
Constant lcSync::flags#1 = 0
Constant main::c#38 = 0
Constant main::$35 = 0==main::preset
Constant Print00::p#2 = $e000+(byte*) 983
Constant main::stopIt#1 = 1
Constant main::oCount#3 = 0
Constant main::return#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant lcSync::return#2 = lcSync::return#0
Constant lcSync::return#3 = lcSync::return#0
Constant main::return#2 = main::return#0
Successful SSA optimization Pass2ConstantIdentification
Constant main::i#5 = lcSync::return#2
Constant main::$41 = lcSync::return#3
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [158] if(main::$108) goto main::@57
Removing PHI-reference to removed block (main::@53) in block main::@42
Removing PHI-reference to removed block (main::@53) in block main::@42
if() condition always true - replacing block destination [268] if(main::$35) goto main::@59
Successful SSA optimization Pass2ConstantIfs
Rewriting conditional comparison [199] if(*main::$65<=$20) goto main::@30
Rewriting conditional comparison [253] if(main::i#10>1) goto main::@43
Converting *(pointer+n) to pointer[n] [131] *main::$53 = main::type#4  -- main::$80[OFFSET_STRUCT_$5_S]
Converting *(pointer+n) to pointer[n] [139] *main::$54 = (snumber)$70<<F  -- main::$81[OFFSET_STRUCT_$5_X]
Converting *(pointer+n) to pointer[n] [142] *main::$55 = (signed byte)main::i#17  -- main::$82[OFFSET_STRUCT_$5_VX]
Converting *(pointer+n) to pointer[n] [145] *main::$56 = 1  -- main::$83[OFFSET_STRUCT_$5_AX]
Converting *(pointer+n) to pointer[n] [148] *main::$57 = (snumber)$18<<F  -- main::$84[OFFSET_STRUCT_$5_Y]
Converting *(pointer+n) to pointer[n] [151] *main::$58 = (snumber)1<<F  -- main::$85[OFFSET_STRUCT_$5_VY]
Converting *(pointer+n) to pointer[n] [154] *main::$59 = 1  -- main::$86[OFFSET_STRUCT_$5_AY]
Converting *(pointer+n) to pointer[n] [185] *main::$62 = *main::$60 + *main::$61  -- main::$87[OFFSET_STRUCT_$5_VX]
Converting *(pointer+n) to pointer[n] [185] *main::$62 = main::$87[OFFSET_STRUCT_$5_VX] + *main::$61  -- main::$88[OFFSET_STRUCT_$5_AX]
Converting *(pointer+n) to pointer[n] [185] *main::$62 = main::$87[OFFSET_STRUCT_$5_VX] + main::$88[OFFSET_STRUCT_$5_AX]  -- main::$89[OFFSET_STRUCT_$5_VX]
Converting *(pointer+n) to pointer[n] [189] if(*main::$63<-$20) goto main::@29  -- main::$90[OFFSET_STRUCT_$5_VX]
Converting *(pointer+n) to pointer[n] [195] *main::$64 = 1  -- main::$91[OFFSET_STRUCT_$5_AX]
Converting *(pointer+n) to pointer[n] [199] if(*main::$65<$20+1) goto main::@30  -- main::$92[OFFSET_STRUCT_$5_VX]
Converting *(pointer+n) to pointer[n] [202] *main::$66 = -1  -- main::$93[OFFSET_STRUCT_$5_AX]
Converting *(pointer+n) to pointer[n] [206] if(*main::$67>(signed word)$f8<<F) goto main::@31  -- main::$94[OFFSET_STRUCT_$5_Y]
Converting *(pointer+n) to pointer[n] [209] *main::$68 = (snumber)-1<<F  -- main::$95[OFFSET_STRUCT_$5_VY]
Converting *(pointer+n) to pointer[n] [213] if(*main::$69>=(signed word)$18<<F) goto main::@32  -- main::$96[OFFSET_STRUCT_$5_Y]
Converting *(pointer+n) to pointer[n] [216] *main::$70 = (snumber)1<<F  -- main::$97[OFFSET_STRUCT_$5_VY]
Converting *(pointer+n) to pointer[n] [223] *main::$73 = *main::$71 + *main::$72  -- main::$98[OFFSET_STRUCT_$5_X]
Converting *(pointer+n) to pointer[n] [223] *main::$73 = main::$98[OFFSET_STRUCT_$5_X] + *main::$72  -- main::$99[OFFSET_STRUCT_$5_VX]
Converting *(pointer+n) to pointer[n] [223] *main::$73 = main::$98[OFFSET_STRUCT_$5_X] + main::$99[OFFSET_STRUCT_$5_VX]  -- main::$100[OFFSET_STRUCT_$5_X]
Converting *(pointer+n) to pointer[n] [230] *main::$76 = *main::$74 + *main::$75  -- main::$101[OFFSET_STRUCT_$5_Y]
Converting *(pointer+n) to pointer[n] [230] *main::$76 = main::$101[OFFSET_STRUCT_$5_Y] + *main::$75  -- main::$102[OFFSET_STRUCT_$5_VY]
Converting *(pointer+n) to pointer[n] [230] *main::$76 = main::$101[OFFSET_STRUCT_$5_Y] + main::$102[OFFSET_STRUCT_$5_VY]  -- main::$103[OFFSET_STRUCT_$5_Y]
Converting *(pointer+n) to pointer[n] [237] cmSI[main::i#22] = *main::$77  -- main::$104[OFFSET_STRUCT_$5_S]
Converting *(pointer+n) to pointer[n] [240] main::$27 = *main::$78 >> F  -- main::$105[OFFSET_STRUCT_$5_X]
Converting *(pointer+n) to pointer[n] [244] main::$28 = *main::$79 >> F  -- main::$106[OFFSET_STRUCT_$5_Y]
Successful SSA optimization Pass2InlineDerefIdx
De-inlining pointer[w] to *(pointer+w)   [87] ((byte*) 57344)[main::c#10] = $20
De-inlining pointer[w] to *(pointer+w)   [88] ((byte*) 55296)[main::c#10] = $e
De-inlining pointer[w] to *(pointer+w)   [99] ((byte*) 63488)[main::c#11] = ((byte*) 53248)[main::c#11]
De-inlining pointer[w] to *(pointer+w)   [99] ((byte*) 63488)[main::c#11] = *main::$111
De-inlining pointer[w] to *(pointer+w)   [102] ((byte*) 53248)[$d02] = ((byte*) 53248)[$d02] | 3
De-inlining pointer[w] to *(pointer+w)   [102] ((byte*) 53248)[$d02] = *main::$113 | 3
De-inlining pointer[w] to *(pointer+w)   [103] ((byte*) 53248)[$d00] = ((byte*) 53248)[$d00] & ~3
De-inlining pointer[w] to *(pointer+w)   [103] ((byte*) 53248)[$d00] = *main::$115 & ~3
De-inlining pointer[w] to *(pointer+w)   [107] ((byte*) 57344)[$3e4] = 'N'-'A'+1
De-inlining pointer[w] to *(pointer+w)   [108] ((byte*) 57344)[$3e5] = 'T'-'A'+1
De-inlining pointer[w] to *(pointer+w)   [109] ((byte*) 57344)[$3e6] = 'S'-'A'+1
De-inlining pointer[w] to *(pointer+w)   [110] ((byte*) 57344)[$3e7] = 'C'-'A'+1
De-inlining pointer[w] to *(pointer+w)   [111] ((byte*) 57344)[$3e5] = 'P'-'A'+1
De-inlining pointer[w] to *(pointer+w)   [112] ((byte*) 57344)[$3e6] = 'A'-'A'+1
De-inlining pointer[w] to *(pointer+w)   [113] ((byte*) 57344)[$3e7] = 'L'-'A'+1
De-inlining pointer[w] to *(pointer+w)   [114] ((byte*) 57344)[(word)$3cf+0] = 'B'-'A'+1
De-inlining pointer[w] to *(pointer+w)   [115] ((byte*) 57344)[(word)$3cf+1] = 'U'-'A'+1
De-inlining pointer[w] to *(pointer+w)   [116] ((byte*) 57344)[(word)$3cf+2] = 'B'-'A'+1
De-inlining pointer[w] to *(pointer+w)   [117] ((byte*) 57344)[(word)$3cf+3] = 'B'-'A'+1
De-inlining pointer[w] to *(pointer+w)   [118] ((byte*) 57344)[(word)$3cf+4] = 'L'-'A'+1
De-inlining pointer[w] to *(pointer+w)   [119] ((byte*) 57344)[(word)$3cf+5] = 'E'-'A'+1
De-inlining pointer[w] to *(pointer+w)   [120] ((byte*) 57344)[(word)$3cf+6] = 'S'-'A'+1
De-inlining pointer[w] to *(pointer+w)   [121] ((byte*) 57344)[(word)$3cf+7] = ':'
Successful SSA optimization Pass2DeInlineWordDerefIdx
Simplifying constant evaluating to zero 'A'-'A' in [112] *main::$122 = 'A'-'A'+1
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero sprOff in [59] lcSprMapTab[0] = sprOff+0
Simplifying expression containing zero lcSprMapTab in [59] lcSprMapTab[0] = sprOff
Simplifying expression containing zero sprOff in [66] lcSprColTab[sprOff+0] = lcSprColTab[sprOff+1]
Simplifying expression containing zero 1 in [112] *main::$122 = 0+1
Simplifying expression containing zero $3cf in main::$124 = (byte*) 57344 + (word)$3cf+0
Simplifying expression containing zero main::$80 in [130] main::$53 = main::$80 + OFFSET_STRUCT_$5_S
Simplifying expression containing zero main::$80 in [131] main::$80[OFFSET_STRUCT_$5_S] = main::type#4
Simplifying expression containing zero main::$104 in [236] main::$77 = main::$104 + OFFSET_STRUCT_$5_S
Simplifying expression containing zero main::$104 in [237] cmSI[main::i#22] = main::$104[OFFSET_STRUCT_$5_S]
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable Print00::p#1 and assignment [12] Print00::p#1 = ++ Print00::p#0
Eliminating unused variable main::$53 and assignment [113] main::$53 = main::$80
Eliminating unused variable main::$54 and assignment [119] main::$54 = main::$81 + OFFSET_STRUCT_$5_X
Eliminating unused variable main::$55 and assignment [122] main::$55 = main::$82 + OFFSET_STRUCT_$5_VX
Eliminating unused variable main::$56 and assignment [125] main::$56 = main::$83 + OFFSET_STRUCT_$5_AX
Eliminating unused variable main::$57 and assignment [128] main::$57 = main::$84 + OFFSET_STRUCT_$5_Y
Eliminating unused variable main::$58 and assignment [131] main::$58 = main::$85 + OFFSET_STRUCT_$5_VY
Eliminating unused variable main::$59 and assignment [134] main::$59 = main::$86 + OFFSET_STRUCT_$5_AY
Eliminating unused variable main::$60 and assignment [153] main::$60 = main::$87 + OFFSET_STRUCT_$5_VX
Eliminating unused variable main::$61 and assignment [155] main::$61 = main::$88 + OFFSET_STRUCT_$5_AX
Eliminating unused variable main::$62 and assignment [157] main::$62 = main::$89 + OFFSET_STRUCT_$5_VX
Eliminating unused variable main::$63 and assignment [160] main::$63 = main::$90 + OFFSET_STRUCT_$5_VX
Eliminating unused variable main::$64 and assignment [165] main::$64 = main::$91 + OFFSET_STRUCT_$5_AX
Eliminating unused variable main::$65 and assignment [168] main::$65 = main::$92 + OFFSET_STRUCT_$5_VX
Eliminating unused variable main::$66 and assignment [171] main::$66 = main::$93 + OFFSET_STRUCT_$5_AX
Eliminating unused variable main::$67 and assignment [174] main::$67 = main::$94 + OFFSET_STRUCT_$5_Y
Eliminating unused variable main::$68 and assignment [177] main::$68 = main::$95 + OFFSET_STRUCT_$5_VY
Eliminating unused variable main::$69 and assignment [180] main::$69 = main::$96 + OFFSET_STRUCT_$5_Y
Eliminating unused variable main::$70 and assignment [183] main::$70 = main::$97 + OFFSET_STRUCT_$5_VY
Eliminating unused variable main::$71 and assignment [186] main::$71 = main::$98 + OFFSET_STRUCT_$5_X
Eliminating unused variable main::$72 and assignment [188] main::$72 = main::$99 + OFFSET_STRUCT_$5_VX
Eliminating unused variable main::$73 and assignment [190] main::$73 = main::$100 + OFFSET_STRUCT_$5_X
Eliminating unused variable main::$74 and assignment [193] main::$74 = main::$101 + OFFSET_STRUCT_$5_Y
Eliminating unused variable main::$75 and assignment [195] main::$75 = main::$102 + OFFSET_STRUCT_$5_VY
Eliminating unused variable main::$76 and assignment [197] main::$76 = main::$103 + OFFSET_STRUCT_$5_Y
Eliminating unused variable main::$77 and assignment [203] main::$77 = main::$104
Eliminating unused variable main::$78 and assignment [206] main::$78 = main::$105 + OFFSET_STRUCT_$5_X
Eliminating unused variable main::$79 and assignment [210] main::$79 = main::$106 + OFFSET_STRUCT_$5_Y
Eliminating unused constant lcSync::flags#0
Eliminating unused constant lcSync::flags#1
Eliminating unused constant Print00::c#0
Eliminating unused constant GetSprite::t0#0
Eliminating unused constant AddSprite::t0#0
Eliminating unused constant main::d#0
Eliminating unused constant main::i#0
Eliminating unused constant main::type#0
Eliminating unused constant main::c#0
Eliminating unused constant main::$108
Eliminating unused constant main::$35
Eliminating unused constant main::return#2
Eliminating unused constant OFFSET_STRUCT_$5_S
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant main::preset
Eliminating unused constant main::return#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable GetSprite::return#3 from unused block main::@22
Eliminating variable main::c#13 from unused block main::@50
Eliminating variable AddSprite::sn#0 from unused block main::@23
Eliminating variable main::$17 from unused block main::@51
Removing unused block main::@22
Removing unused block main::@50
Removing PHI-reference to removed block (main::@23) in block AddSprite
Removing unused block main::@23
Removing unused block main::@51
Removing unused block main::@25
Removing unused block main::@return
Removing unused block main::@57
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (snumber) $20+1 in [144] if(main::$92[OFFSET_STRUCT_$5_VX]<$20+1) goto main::@30
Adding number conversion cast (snumber) 1 in [144] if(main::$92[OFFSET_STRUCT_$5_VX]<(snumber)$20+1) goto main::@30
Adding number conversion cast (unumber) 1+1 in [177] if(main::i#10>=1+1) goto main::@43
Adding number conversion cast (unumber) 1 in [177] if(main::i#10>=(unumber)1+1) goto main::@43
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $3cf
Simplifying constant integer cast $20+(snumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast 1+(unumber)1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized signed number type (signed byte) 1
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Identical Phi Values AddSprite::sn#2 AddSprite::sn#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$31 [180] if(0==main::stopIt#5) goto main::@58
Simple Condition main::$46 [198] if(main::oCount#7>2) goto main::@60
Simple Condition main::$32 [205] if(main::objects#9<maxDrawObjects) goto main::@40
Simple Condition main::$37 [206] if(main::i#11<$80) goto main::@41
Simple Condition main::$47 [207] if(main::objects#12>0) goto main::@48
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [180] if(0!=main::stopIt#5) goto main::@42
Negating conditional jump and destination [198] if(main::oCount#7<=2) goto main::@45
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [6] Print00::p#0 = ++ Print00::p#2
Constant right-side identified [69] main::$113 = (byte*) 53248 + $d02
Constant right-side identified [70] main::$114 = (byte*) 53248 + $d02
Constant right-side identified [72] main::$115 = (byte*) 53248 + $d00
Constant right-side identified [73] main::$116 = (byte*) 53248 + $d00
Constant right-side identified [75] main::$1 = main::i#5 & $80
Constant right-side identified [77] main::$117 = (byte*) 57344 + $3e4
Constant right-side identified [79] main::$118 = (byte*) 57344 + $3e5
Constant right-side identified [81] main::$119 = (byte*) 57344 + $3e6
Constant right-side identified [83] main::$120 = (byte*) 57344 + $3e7
Constant right-side identified [85] main::$121 = (byte*) 57344 + $3e5
Constant right-side identified [87] main::$122 = (byte*) 57344 + $3e6
Constant right-side identified [89] main::$123 = (byte*) 57344 + $3e7
Constant right-side identified [91] main::$124 = (byte*) 57344 + $3cf
Constant right-side identified [93] main::$125 = (byte*) 57344 + (word)$3cf+1
Constant right-side identified [95] main::$126 = (byte*) 57344 + (word)$3cf+2
Constant right-side identified [97] main::$127 = (byte*) 57344 + (word)$3cf+3
Constant right-side identified [99] main::$128 = (byte*) 57344 + (word)$3cf+4
Constant right-side identified [101] main::$129 = (byte*) 57344 + (word)$3cf+5
Constant right-side identified [103] main::$130 = (byte*) 57344 + (word)$3cf+6
Constant right-side identified [105] main::$131 = (byte*) 57344 + (word)$3cf+7
Constant right-side identified [176] main::i#10 = main::$41 & $1f
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant Print00::p#0 = ++Print00::p#2
Constant main::$113 = (byte*) 53248+$d02
Constant main::$114 = (byte*) 53248+$d02
Constant main::$115 = (byte*) 53248+$d00
Constant main::$116 = (byte*) 53248+$d00
Constant main::$1 = main::i#5&$80
Constant main::$117 = (byte*) 57344+$3e4
Constant main::$118 = (byte*) 57344+$3e5
Constant main::$119 = (byte*) 57344+$3e6
Constant main::$120 = (byte*) 57344+$3e7
Constant main::$121 = (byte*) 57344+$3e5
Constant main::$122 = (byte*) 57344+$3e6
Constant main::$123 = (byte*) 57344+$3e7
Constant main::$124 = (byte*) 57344+$3cf
Constant main::$125 = (byte*) 57344+(word)$3cf+1
Constant main::$126 = (byte*) 57344+(word)$3cf+2
Constant main::$127 = (byte*) 57344+(word)$3cf+3
Constant main::$128 = (byte*) 57344+(word)$3cf+4
Constant main::$129 = (byte*) 57344+(word)$3cf+5
Constant main::$130 = (byte*) 57344+(word)$3cf+6
Constant main::$131 = (byte*) 57344+(word)$3cf+7
Constant main::i#10 = main::$41&$1f
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [76] if(0!=main::$1) goto main::@1
if() condition always false - eliminating [177] if(main::i#10>=1+1) goto main::@43
Successful SSA optimization Pass2ConstantIfs
Rewriting conditional comparison [198] if(main::oCount#7<=2) goto main::@45
Simplifying constant evaluating to zero main::i#5&$80 in 
Simplifying constant evaluating to zero main::$41&$1f in 
Successful SSA optimization PassNSimplifyConstantZero
Eliminating unused variable main::$10 and assignment [105] main::$10 = main::i#17 < $14
Eliminating unused constant main::i#5
Eliminating unused constant main::$41
Eliminating unused constant main::$1
Eliminating unused constant main::i#10
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant lcSync::return#2
Eliminating unused constant lcSync::return#3
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant lcSync::return#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable main::oCount#1 from unused block main::@43
Removing unused block main::@1
Removing PHI-reference to removed block (main::@43) in block main::@44
Removing unused block main::@43
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing call to empty procedure [58] call lcSync 
Removing call to empty procedure [147] call lcSync 
Removing unused procedure lcSync
Removing unused procedure block lcSync
Removing unused procedure block lcSync::@return
Successful SSA optimization PassNEliminateEmptyProcedure
Adding number conversion cast (unumber) 2+1 in [162] if(main::oCount#7<2+1) goto main::@45
Adding number conversion cast (unumber) 1 in [162] if(main::oCount#7<(unumber)2+1) goto main::@45
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 2+(unumber)1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Eliminating unused constant main::$117
Eliminating unused constant main::$118
Eliminating unused constant main::$119
Eliminating unused constant main::$120
Successful SSA optimization PassNEliminateUnusedVars
Inlining Noop Cast [82] main::$80 = (byte*)main::d1#0 keeping main::d1#0
Inlining Noop Cast [87] main::$81 = (signed word*)main::d1#0 keeping main::d1#0
Inlining Noop Cast [89] main::$82 = (signed byte*)main::d1#0 keeping main::d1#0
Inlining Noop Cast [91] main::$83 = (signed byte*)main::d1#0 keeping main::d1#0
Inlining Noop Cast [93] main::$84 = (signed word*)main::d1#0 keeping main::d1#0
Inlining Noop Cast [95] main::$85 = (signed byte*)main::d1#0 keeping main::d1#0
Inlining Noop Cast [97] main::$86 = (signed byte*)main::d1#0 keeping main::d1#0
Inlining Noop Cast [103] main::$87 = (signed byte*)main::d#10 keeping main::d#10
Inlining Noop Cast [104] main::$88 = (signed byte*)main::d#10 keeping main::d#10
Inlining Noop Cast [105] main::$89 = (signed byte*)main::d#10 keeping main::d#10
Inlining Noop Cast [107] main::$90 = (signed byte*)main::d#10 keeping main::d#10
Inlining Noop Cast [111] main::$91 = (signed byte*)main::d#10 keeping main::d#10
Inlining Noop Cast [113] main::$92 = (signed byte*)main::d#10 keeping main::d#10
Inlining Noop Cast [115] main::$93 = (signed byte*)main::d#10 keeping main::d#10
Inlining Noop Cast [117] main::$94 = (signed word*)main::d#10 keeping main::d#10
Inlining Noop Cast [119] main::$95 = (signed byte*)main::d#10 keeping main::d#10
Inlining Noop Cast [121] main::$96 = (signed word*)main::d#10 keeping main::d#10
Inlining Noop Cast [123] main::$97 = (signed byte*)main::d#10 keeping main::d#10
Inlining Noop Cast [125] main::$98 = (signed word*)main::d#10 keeping main::d#10
Inlining Noop Cast [126] main::$99 = (signed byte*)main::d#10 keeping main::d#10
Inlining Noop Cast [127] main::$100 = (signed word*)main::d#10 keeping main::d#10
Inlining Noop Cast [129] main::$101 = (signed word*)main::d#10 keeping main::d#10
Inlining Noop Cast [130] main::$102 = (signed byte*)main::d#10 keeping main::d#10
Inlining Noop Cast [131] main::$103 = (signed word*)main::d#10 keeping main::d#10
Inlining Noop Cast [136] main::$104 = (byte*)main::d#10 keeping main::d#10
Inlining Noop Cast [138] main::$105 = (signed word*)main::d#10 keeping main::d#10
Inlining Noop Cast [141] main::$106 = (signed word*)main::d#10 keeping main::d#10
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift and addition[80] main::$52 = main::i#17 * SIZEOF_STRUCT_$5
Inlining constant with var siblings Print00::c#1
Inlining constant with var siblings Print00::c#3
Inlining constant with different constant siblings Print00::p#2
Inlining constant with different constant siblings Print00::p#0
Inlining constant with var siblings GetSprite::t0#1
Inlining constant with var siblings GetSprite::return#0
Inlining constant with var siblings AddSprite::t0#1
Inlining constant with var siblings main::stopIt#0
Inlining constant with var siblings main::objects#0
Inlining constant with var siblings main::oCount#0
Inlining constant with var siblings main::i#1
Inlining constant with var siblings main::i#3
Inlining constant with var siblings main::c#1
Inlining constant with var siblings main::c#3
Inlining constant with var siblings main::type#1
Inlining constant with var siblings main::i#6
Inlining constant with var siblings main::c#5
Inlining constant with var siblings main::type#3
Inlining constant with var siblings main::i#8
Inlining constant with var siblings main::d#1
Inlining constant with var siblings main::c#38
Inlining constant with var siblings main::stopIt#1
Inlining constant with var siblings main::oCount#3
Constant inlined $2::lfD = 2
Constant inlined $2::lfB = $20
Constant inlined $2::lfA = $10
Constant inlined $4::maxDrawObjects = $18
Constant inlined $3::maxC64Images = $100
Constant inlined $3::sprOff = $40
Constant inlined $0::lfOL = $20
Constant inlined main::d#1 = dTab
Constant inlined main::$116 = (byte*) 53248+$d00
Constant inlined GetSprite::return#0 = $ff
Constant inlined main::$115 = (byte*) 53248+$d00
Constant inlined main::$114 = (byte*) 53248+$d02
Constant inlined main::$113 = (byte*) 53248+$d02
Constant inlined main::i#8 = 0
Constant inlined GetSprite::t0#1 = 0
Constant inlined AddSprite::t0#1 = 0
Constant inlined SIZEOF_STRUCT_$5 = 9
Constant inlined OFFSET_STRUCT_$5_AY = 8
Constant inlined main::i#3 = 0
Constant inlined main::i#6 = 0
Constant inlined OFFSET_STRUCT_$5_X = 1
Constant inlined OFFSET_STRUCT_$5_AX = 7
Constant inlined OFFSET_STRUCT_$5_Y = 3
Constant inlined main::stopIt#0 = 0
Constant inlined Print00::p#2 = $e000+(byte*) 983
Constant inlined Print00::p#0 = ++$e000+(byte*) 983
Constant inlined OFFSET_STRUCT_$5_VX = 5
Constant inlined OFFSET_STRUCT_$5_VY = 6
Constant inlined main::stopIt#1 = 1
Constant inlined $3::maxSprImages = 8
Constant inlined main::oCount#3 = 0
Constant inlined main::oCount#0 = 0
Constant inlined $1::rfNull = $ff
Constant inlined $3::maxSprites = $20
Constant inlined main::$131 = (byte*) 57344+(word)$3cf+7
Constant inlined main::$130 = (byte*) 57344+(word)$3cf+6
Constant inlined main::c#5 = 0
Constant inlined main::objects#0 = 0
Constant inlined main::i#1 = 0
Constant inlined main::c#1 = 0
Constant inlined main::c#3 = 0
Constant inlined $4::F = 3
Constant inlined main::c#38 = 0
Constant inlined $1::rfXMSB = $10
Constant inlined main::type#3 = 0
Constant inlined Print00::c#3 = '0'
Constant inlined $0::lfMC = $10
Constant inlined main::type#1 = 0
Constant inlined Print00::c#1 = '0'
Constant inlined main::$123 = (byte*) 57344+$3e7
Constant inlined $1::rfDrop = $fe
Constant inlined main::$122 = (byte*) 57344+$3e6
Constant inlined $2::lfU = 1
Constant inlined main::$121 = (byte*) 57344+$3e5
Constant inlined $2::lfR = 8
Constant inlined main::$129 = (byte*) 57344+(word)$3cf+5
Constant inlined $2::lfL = 4
Constant inlined main::$128 = (byte*) 57344+(word)$3cf+4
Constant inlined main::$127 = (byte*) 57344+(word)$3cf+3
Constant inlined main::$126 = (byte*) 57344+(word)$3cf+2
Constant inlined main::$125 = (byte*) 57344+(word)$3cf+1
Constant inlined main::$124 = (byte*) 57344+$3cf
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(lcSprMapTab+1)
Consolidated array index constant in *(lcSprMapTab+2)
Consolidated array index constant in *(lcSprMapTab+3)
Consolidated array index constant in *(lcSprMapTab+4)
Consolidated array index constant in *(lcSprMapTab+5)
Consolidated array index constant in *(lcSprColTab+sprOff+1)
Consolidated array index constant in *(lcSprColTab+sprOff+1)
Consolidated array index constant in *(lcSprColTab+sprOff)
Consolidated array index constant in *(lcSprColTab+sprOff+3)
Consolidated array index constant in *(lcSprColTab+sprOff+3)
Consolidated array index constant in *(lcSprColTab+sprOff+2)
Consolidated array index constant in *(lcSprColTab+sprOff+5)
Consolidated array index constant in *(lcSprColTab+sprOff+5)
Consolidated array index constant in *(lcSprColTab+sprOff+4)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++$e000+(byte*) 983
Successful SSA optimization Pass2ConstantSimplification
Adding number conversion cast (unumber) 1 in [9] *($e000+(byte*) 983+1) = Print00::c#10
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::$52 = main::$133 
Successful SSA optimization Pass2AliasElimination
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $fe
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 8
Finalized unsigned number type (word) $100
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $18
Finalized unsigned number type (byte) 3
Finalized unsigned number type (word) $3cf
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $3cf
Finalized unsigned number type (byte) 2
Finalized unsigned number type (word) $3cf
Finalized unsigned number type (byte) 3
Finalized unsigned number type (word) $3cf
Finalized unsigned number type (byte) 4
Finalized unsigned number type (word) $3cf
Finalized unsigned number type (byte) 5
Finalized unsigned number type (word) $3cf
Finalized unsigned number type (byte) 6
Finalized unsigned number type (word) $3cf
Finalized unsigned number type (byte) 7
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying constant integer cast $3cf+1
Simplifying constant integer cast $3cf+2
Simplifying constant integer cast $3cf+3
Simplifying constant integer cast $3cf+4
Simplifying constant integer cast $3cf+5
Simplifying constant integer cast $3cf+6
Simplifying constant integer cast $3cf+7
Successful SSA optimization PassNCastSimplification
Added new block during phi lifting main::@61(between main::@17 and main::@19)
Added new block during phi lifting main::@62(between main::@28 and main::@42)
Added new block during phi lifting main::@63(between main::@39 and main::@42)
Fixing phi predecessor for main::c#18 to new block ( main::@39 -> main::@63 ) during phi lifting.
Added new block during phi lifting main::@64(between main::@46 and main::@44)
Added new block during phi lifting main::@65(between main::@44 and main::@45)
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@18
Adding NOP phi() at start of main::@52
Adding NOP phi() at start of main::@21
Adding NOP phi() at start of GetSprite
Adding NOP phi() at start of GetSprite::@3
Adding NOP phi() at start of AddSprite::@2
CALL GRAPH
Calls in [main] to Print00:58 DelSprite:65 GetSprite:72 AddSprite:77 

Created 26 initial phi equivalence classes
Coalesced [52] main::oCount#59 = main::oCount#2
Coalesced [59] main::objects#58 = main::objects#17
Coalesced [60] main::c#44 = main::c#18
Coalesced [61] main::stopIt#55 = main::stopIt#15
Coalesced [62] main::oCount#57 = main::oCount#20
Coalesced [66] main::objects#63 = main::objects#15
Coalesced [67] main::objects#62 = main::objects#12
Coalesced (already) [68] main::stopIt#56 = main::stopIt#5
Coalesced [69] main::oCount#60 = main::oCount#7
Coalesced (already) [70] main::oCount#58 = main::oCount#17
Coalesced [82] main::objects#61 = main::objects#1
Coalesced (already) [83] main::objects#60 = main::objects#9
Coalesced (already) [84] main::objects#59 = main::objects#9
Coalesced [85] main::c#45 = main::c#7
Coalesced [103] main::i#45 = main::i#9
Coalesced [104] main::d#15 = main::d#2
Coalesced [122] main::i#44 = main::i#7
Coalesced [123] main::type#12 = main::type#10
Coalesced [124] main::type#13 = main::type#2
Coalesced [129] main::c#43 = main::c#4
Coalesced [135] main::c#42 = main::c#2
Coalesced [138] main::i#43 = main::i#4
Coalesced [141] main::i#42 = main::i#2
Coalesced [142] Print00::v#8 = Print00::v0#0
Coalesced [146] Print00::v#10 = Print00::v#3
Coalesced [153] Print00::v#11 = Print00::v#2
Coalesced [154] Print00::c#12 = Print00::c#4
Coalesced [157] Print00::v#9 = Print00::v#1
Coalesced [158] Print00::c#11 = Print00::c#2
Coalesced [170] GetSprite::return#8 = GetSprite::t0#3
Coalesced [172] GetSprite::t0#7 = GetSprite::t0#2
Coalesced [182] AddSprite::t0#7 = AddSprite::t0#2
Coalesced down to 17 phi equivalence classes
Culled Empty Block label main::@5
Culled Empty Block label main::@8
Culled Empty Block label main::@11
Culled Empty Block label main::@18
Culled Empty Block label main::@52
Culled Empty Block label main::@55
Culled Empty Block label main::@56
Culled Empty Block label main::@65
Culled Empty Block label main::@64
Culled Empty Block label main::@63
Culled Empty Block label main::@62
Culled Empty Block label main::@21
Culled Empty Block label GetSprite::@3
Culled Empty Block label AddSprite::@2
Renumbering block GetSprite::@4 to GetSprite::@3
Renumbering block GetSprite::@5 to GetSprite::@4
Renumbering block AddSprite::@3 to AddSprite::@2
Renumbering block AddSprite::@4 to AddSprite::@3
Renumbering block AddSprite::@5 to AddSprite::@4
Renumbering block AddSprite::@6 to AddSprite::@5
Renumbering block main::@2 to main::@1
Renumbering block main::@3 to main::@2
Renumbering block main::@4 to main::@3
Renumbering block main::@6 to main::@4
Renumbering block main::@7 to main::@5
Renumbering block main::@9 to main::@6
Renumbering block main::@10 to main::@7
Renumbering block main::@12 to main::@8
Renumbering block main::@13 to main::@9
Renumbering block main::@14 to main::@10
Renumbering block main::@15 to main::@11
Renumbering block main::@16 to main::@12
Renumbering block main::@17 to main::@13
Renumbering block main::@19 to main::@14
Renumbering block main::@20 to main::@15
Renumbering block main::@24 to main::@16
Renumbering block main::@26 to main::@17
Renumbering block main::@27 to main::@18
Renumbering block main::@28 to main::@19
Renumbering block main::@29 to main::@20
Renumbering block main::@30 to main::@21
Renumbering block main::@31 to main::@22
Renumbering block main::@32 to main::@23
Renumbering block main::@33 to main::@24
Renumbering block main::@34 to main::@25
Renumbering block main::@35 to main::@26
Renumbering block main::@36 to main::@27
Renumbering block main::@37 to main::@28
Renumbering block main::@38 to main::@29
Renumbering block main::@39 to main::@30
Renumbering block main::@40 to main::@31
Renumbering block main::@41 to main::@32
Renumbering block main::@42 to main::@33
Renumbering block main::@44 to main::@34
Renumbering block main::@45 to main::@35
Renumbering block main::@46 to main::@36
Renumbering block main::@47 to main::@37
Renumbering block main::@48 to main::@38
Renumbering block main::@49 to main::@39
Renumbering block main::@53 to main::@40
Renumbering block main::@54 to main::@41
Renumbering block main::@58 to main::@42
Renumbering block main::@59 to main::@43
Renumbering block main::@60 to main::@44
Renumbering block main::@61 to main::@45
Adding NOP phi() at start of main::@45
Adding NOP phi() at start of Print00
Adding NOP phi() at start of GetSprite

FINAL CONTROL FLOW GRAPH

signed word main()
main: scope:[main]  from
  [0] *lcSprMapTab = sprOff
  [1] *(lcSprMapTab+1) = sprOff+1
  [2] *(lcSprMapTab+2) = sprOff+2
  [3] *(lcSprMapTab+3) = sprOff+3
  [4] *(lcSprMapTab+4) = sprOff+4
  [5] *(lcSprMapTab+5) = sprOff+5
  [6] *(lcSprColTab+sprOff+1) = $a|lfMC
  [7] *(lcSprColTab+sprOff) = *(lcSprColTab+sprOff+1)
  [8] *(lcSprColTab+sprOff+3) = 5|lfMC
  [9] *(lcSprColTab+sprOff+2) = *(lcSprColTab+sprOff+3)
  [10] *(lcSprColTab+sprOff+5) = $e|lfMC
  [11] *(lcSprColTab+sprOff+4) = *(lcSprColTab+sprOff+5)
  to:main::@2
main::@2: scope:[main]  from main main::@3
  [12] main::i#12 = phi( main/0, main::@3/main::i#2 )
  [13] if(main::i#12<maxSprites+1) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@5
  [14] main::i#14 = phi( main::@2/0, main::@5/main::i#4 )
  [15] if(main::i#14<maxSprites) goto main::@5
  to:main::@6
main::@6: scope:[main]  from main::@4 main::@7
  [16] main::c#10 = phi( main::@7/main::c#2, main::@4/0 )
  [17] if(main::c#10<$3e8) goto main::@7
  to:main::@39
main::@39: scope:[main]  from main::@6
  [18] *((byte*) 1) = $33
  to:main::@8
main::@8: scope:[main]  from main::@39 main::@9
  [19] main::c#11 = phi( main::@9/main::c#4, main::@39/0 )
  [20] if(main::c#11<$7f8) goto main::@9
  to:main::@10
main::@10: scope:[main]  from main::@8
  [21] *((byte*) 1) = $35
  [22] *((byte*) 53248+$d02) = *((byte*) 53248+$d02) | 3
  [23] *((byte*) 53248+$d00) = *((byte*) 53248+$d00) & ~3
  to:main::@11
main::@11: scope:[main]  from main::@10
  [24] *((byte*) 57344+$3e5) = 'P'-'A'+1
  [25] *((byte*) 57344+$3e6) = 1
  [26] *((byte*) 57344+$3e7) = 'L'-'A'+1
  to:main::@1
main::@1: scope:[main]  from main::@11
  [27] *((byte*) 57344+$3cf) = 'B'-'A'+1
  [28] *((byte*) 57344+$3cf+1) = 'U'-'A'+1
  [29] *((byte*) 57344+$3cf+2) = 'B'-'A'+1
  [30] *((byte*) 57344+$3cf+3) = 'B'-'A'+1
  [31] *((byte*) 57344+$3cf+4) = 'L'-'A'+1
  [32] *((byte*) 57344+$3cf+5) = 'E'-'A'+1
  [33] *((byte*) 57344+$3cf+6) = 'S'-'A'+1
  [34] *((byte*) 57344+$3cf+7) = ':'
  to:main::@12
main::@12: scope:[main]  from main::@1 main::@15
  [35] main::type#4 = phi( main::@1/0, main::@15/main::type#10 )
  [35] main::i#17 = phi( main::@1/0, main::@15/main::i#7 )
  [36] if(main::i#17<maxDrawObjects) goto main::@13
  to:main::@16
main::@16: scope:[main]  from main::@12 main::@35
  [37] main::oCount#17 = phi( main::@12/0, main::@35/main::oCount#20 )
  [37] main::stopIt#5 = phi( main::@12/0, main::@35/main::stopIt#15 )
  [37] main::c#16 = phi( main::@12/0, main::@35/main::c#18 )
  [37] main::objects#9 = phi( main::@12/0, main::@35/main::objects#17 )
  to:main::@17
main::@17: scope:[main]  from main::@16 main::@24
  [38] main::d#10 = phi( main::@16/dTab, main::@24/main::d#2 )
  [38] main::i#22 = phi( main::@16/0, main::@24/main::i#9 )
  [39] if(main::i#22<main::objects#9) goto main::@18
  to:main::@19
main::@19: scope:[main]  from main::@17
  [40] main::c#7 = main::c#16 + 1
  [41] if(main::c#7<$e) goto main::@33
  to:main::@30
main::@30: scope:[main]  from main::@19
  [42] if(0!=main::stopIt#5) goto main::@33
  to:main::@42
main::@42: scope:[main]  from main::@30
  [43] if(main::objects#9<maxDrawObjects) goto main::@31
  to:main::@33
main::@33: scope:[main]  from main::@19 main::@30 main::@41 main::@42 main::@43
  [44] main::c#18 = phi( main::@19/main::c#7, main::@30/0, main::@41/0 )
  [44] main::objects#12 = phi( main::@19/main::objects#9, main::@30/main::objects#9, main::@41/main::objects#1 )
  to:main::@36
main::@36: scope:[main]  from main::@33
  [45] if(main::oCount#17<=0) goto main::@34
  to:main::@37
main::@37: scope:[main]  from main::@36
  [46] main::oCount#2 = main::oCount#17 - 1
  to:main::@34
main::@34: scope:[main]  from main::@36 main::@37
  [47] main::oCount#7 = phi( main::@36/main::oCount#17, main::@37/main::oCount#2 )
  [48] if(main::oCount#7<2+1) goto main::@35
  to:main::@44
main::@44: scope:[main]  from main::@34
  [49] if(main::objects#12>0) goto main::@38
  to:main::@35
main::@38: scope:[main]  from main::@44
  [50] main::objects#15 = main::objects#12 - 1
  [51] DelSprite::sn#0 = main::objects#15
  [52] call DelSprite 
  to:main::@35
main::@35: scope:[main]  from main::@34 main::@38 main::@44
  [53] main::oCount#20 = phi( main::@34/main::oCount#7, main::@38/0 )
  [53] main::stopIt#15 = phi( main::@34/main::stopIt#5, main::@38/1 )
  [53] main::objects#17 = phi( main::@34/main::objects#12, main::@38/main::objects#15 )
  [54] Print00::v0#0 = main::objects#17
  [55] call Print00 
  to:main::@16
main::@31: scope:[main]  from main::@42
  [56] main::objects#1 = main::objects#9 + 1
  [57] call GetSprite 
  [58] GetSprite::return#4 = GetSprite::return#2
  to:main::@40
main::@40: scope:[main]  from main::@31
  [59] main::i#11 = GetSprite::return#4
  to:main::@43
main::@43: scope:[main]  from main::@40
  [60] if(main::i#11<$80) goto main::@32
  to:main::@33
main::@32: scope:[main]  from main::@43
  [61] AddSprite::sn#1 = main::i#11
  [62] call AddSprite 
  to:main::@41
main::@41: scope:[main]  from main::@32
  [63] cmRY[main::i#11] = 0
  [64] cmRF[main::i#11] = cmRY[main::i#11]
  [65] cmRX[main::i#11] = cmRF[main::i#11]
  [66] cmSI[main::i#11] = cmRX[main::i#11]
  to:main::@33
main::@18: scope:[main]  from main::@17
  [67] ((signed byte*)main::d#10)[5] = ((signed byte*)main::d#10)[5] + ((signed byte*)main::d#10)[7]
  [68] if(((signed byte*)main::d#10)[5]<-$20) goto main::@20
  to:main::@25
main::@25: scope:[main]  from main::@18
  [69] if(((signed byte*)main::d#10)[5]<$20+1) goto main::@21
  to:main::@26
main::@26: scope:[main]  from main::@25
  [70] ((signed byte*)main::d#10)[7] = -1
  to:main::@21
main::@21: scope:[main]  from main::@20 main::@25 main::@26
  [71] if(((signed word*)main::d#10)[3]>(signed word)$f8<<F) goto main::@22
  to:main::@27
main::@27: scope:[main]  from main::@21
  [72] if(((signed word*)main::d#10)[3]>=(signed word)$18<<F) goto main::@23
  to:main::@28
main::@28: scope:[main]  from main::@27
  [73] ((signed byte*)main::d#10)[6] = (signed byte)1<<F
  to:main::@23
main::@23: scope:[main]  from main::@22 main::@27 main::@28
  [74] ((signed word*)main::d#10)[1] = ((signed word*)main::d#10)[1] + ((signed byte*)main::d#10)[5]
  [75] ((signed word*)main::d#10)[3] = ((signed word*)main::d#10)[3] + ((signed byte*)main::d#10)[6]
  [76] if(cmRF[main::i#22]>=$80) goto main::@24
  to:main::@29
main::@29: scope:[main]  from main::@23
  [77] cmSI[main::i#22] = *((byte*)main::d#10)
  [78] main::$27 = ((signed word*)main::d#10)[1] >> F
  [79] cmRX[main::i#22] = (byte)main::$27
  [80] main::$28 = ((signed word*)main::d#10)[3] >> F
  [81] cmRY[main::i#22] = (byte)main::$28
  to:main::@24
main::@24: scope:[main]  from main::@23 main::@29
  [82] main::d#2 = main::d#10 + 9
  [83] main::i#9 = main::i#22 + 1
  to:main::@17
main::@22: scope:[main]  from main::@21
  [84] ((signed byte*)main::d#10)[6] = (signed byte)-1<<F
  to:main::@23
main::@20: scope:[main]  from main::@18
  [85] ((signed byte*)main::d#10)[7] = 1
  to:main::@21
main::@13: scope:[main]  from main::@12
  [86] main::$132 = main::i#17 << 3
  [87] main::$52 = main::$132 + main::i#17
  [88] main::d1#0 = dTab + main::$52
  [89] *((byte*)main::d1#0) = main::type#4
  [90] main::type#2 = main::type#4 + 1
  [91] if(main::type#2<6) goto main::@45
  to:main::@14
main::@45: scope:[main]  from main::@13
  [92] phi()
  to:main::@14
main::@14: scope:[main]  from main::@13 main::@45
  [93] main::type#10 = phi( main::@45/main::type#2, main::@13/0 )
  [94] ((signed word*)main::d1#0)[1] = (signed word)$70<<F
  [95] ((signed byte*)main::d1#0)[5] = (signed byte)main::i#17
  [96] ((signed byte*)main::d1#0)[7] = 1
  [97] ((signed word*)main::d1#0)[3] = (signed word)$18<<F
  [98] ((signed byte*)main::d1#0)[6] = (signed byte)1<<F
  [99] ((signed byte*)main::d1#0)[8] = 1
  to:main::@15
main::@15: scope:[main]  from main::@14
  [100] main::i#7 = main::i#17 + 1
  to:main::@12
main::@9: scope:[main]  from main::@8
  [101] main::$111 = (byte*) 53248 + main::c#11
  [102] main::$112 = (byte*) 63488 + main::c#11
  [103] *main::$112 = *main::$111
  [104] main::c#4 = main::c#11 + 1
  to:main::@8
main::@7: scope:[main]  from main::@6
  [105] main::$109 = (byte*) 57344 + main::c#10
  [106] *main::$109 = $20
  [107] main::$110 = (byte*) 55296 + main::c#10
  [108] *main::$110 = $e
  [109] main::c#2 = main::c#10 + 1
  to:main::@6
main::@5: scope:[main]  from main::@4
  [110] cmRF[main::i#14] = $ff
  [111] main::i#4 = main::i#14 + 1
  to:main::@4
main::@3: scope:[main]  from main::@2
  [112] cmIT[main::i#12] = $ff
  [113] main::i#2 = main::i#12 + 1
  to:main::@2

void DelSprite(byte DelSprite::sn)
DelSprite: scope:[DelSprite]  from main::@38
  [114] cmRY[DelSprite::sn#0] = $ff
  [115] cmRF[DelSprite::sn#0] = rfDrop
  to:DelSprite::@return
DelSprite::@return: scope:[DelSprite]  from DelSprite
  [116] return 
  to:@return

void Print00(byte* Print00::p , byte Print00::v0)
Print00: scope:[Print00]  from main::@35
  [117] phi()
  to:Print00::@1
Print00::@1: scope:[Print00]  from Print00 Print00::@2
  [118] Print00::c#5 = phi( Print00/'0', Print00::@2/Print00::c#2 )
  [118] Print00::v#3 = phi( Print00/Print00::v0#0, Print00::@2/Print00::v#1 )
  [119] if(Print00::v#3>=$a) goto Print00::@2
  to:Print00::@3
Print00::@3: scope:[Print00]  from Print00::@1
  [120] *($e000+(byte*) 983) = Print00::c#5
  to:Print00::@4
Print00::@4: scope:[Print00]  from Print00::@3 Print00::@5
  [121] Print00::c#10 = phi( Print00::@3/'0', Print00::@5/Print00::c#4 )
  [121] Print00::v#5 = phi( Print00::@3/Print00::v#3, Print00::@5/Print00::v#2 )
  [122] if(Print00::v#5>=1) goto Print00::@5
  to:Print00::@6
Print00::@6: scope:[Print00]  from Print00::@4
  [123] *($e000+(byte*) 983+1) = Print00::c#10
  to:Print00::@return
Print00::@return: scope:[Print00]  from Print00::@6
  [124] return 
  to:@return
Print00::@5: scope:[Print00]  from Print00::@4
  [125] Print00::c#4 = ++ Print00::c#10
  [126] Print00::v#2 = Print00::v#5 - 1
  to:Print00::@4
Print00::@2: scope:[Print00]  from Print00::@1
  [127] Print00::c#2 = ++ Print00::c#5
  [128] Print00::v#1 = Print00::v#3 - $a
  to:Print00::@1

byte GetSprite()
GetSprite: scope:[GetSprite]  from main::@31
  [129] phi()
  to:GetSprite::@1
GetSprite::@1: scope:[GetSprite]  from GetSprite GetSprite::@3
  [130] GetSprite::t0#3 = phi( GetSprite/0, GetSprite::@3/GetSprite::t0#2 )
  [131] if(GetSprite::t0#3<maxSprites) goto GetSprite::@2
  to:GetSprite::@return
GetSprite::@return: scope:[GetSprite]  from GetSprite::@1 GetSprite::@4
  [132] GetSprite::return#2 = phi( GetSprite::@1/$ff, GetSprite::@4/GetSprite::t0#3 )
  [133] return 
  to:@return
GetSprite::@2: scope:[GetSprite]  from GetSprite::@1
  [134] if(cmRF[GetSprite::t0#3]<rfDrop) goto GetSprite::@3
  to:GetSprite::@4
GetSprite::@4: scope:[GetSprite]  from GetSprite::@2
  [135] cmRF[GetSprite::t0#3] = 0
  to:GetSprite::@return
GetSprite::@3: scope:[GetSprite]  from GetSprite::@2
  [136] GetSprite::t0#2 = ++ GetSprite::t0#3
  to:GetSprite::@1

void AddSprite(byte AddSprite::sn)
AddSprite: scope:[AddSprite]  from main::@32
  [137] if(rfDrop==cmRF[AddSprite::sn#1]) goto AddSprite::@1
  to:AddSprite::@2
AddSprite::@2: scope:[AddSprite]  from AddSprite AddSprite::@4
  [138] AddSprite::t0#3 = phi( AddSprite/0, AddSprite::@4/AddSprite::t0#2 )
  [139] if(AddSprite::t0#3<maxSprites) goto AddSprite::@3
  to:AddSprite::@return
AddSprite::@return: scope:[AddSprite]  from AddSprite::@1 AddSprite::@2 AddSprite::@5
  [140] return 
  to:@return
AddSprite::@3: scope:[AddSprite]  from AddSprite::@2
  [141] if(cmIT[AddSprite::t0#3]<$80) goto AddSprite::@4
  to:AddSprite::@5
AddSprite::@5: scope:[AddSprite]  from AddSprite::@3
  [142] cmRF[AddSprite::sn#1] = 0
  [143] cmIT[AddSprite::t0#3] = AddSprite::sn#1
  to:AddSprite::@return
AddSprite::@4: scope:[AddSprite]  from AddSprite::@3
  [144] AddSprite::t0#2 = AddSprite::t0#3 + 1
  to:AddSprite::@2
AddSprite::@1: scope:[AddSprite]  from AddSprite
  [145] cmRF[AddSprite::sn#1] = 0
  to:AddSprite::@return


VARIABLE REGISTER WEIGHTS
void AddSprite(byte AddSprite::sn)
byte AddSprite::sn
byte AddSprite::sn#1 59.28571428571429
byte AddSprite::t0
byte AddSprite::t0#2 20002.0
byte AddSprite::t0#3 10026.25
void DelSprite(byte DelSprite::sn)
byte DelSprite::sn
byte DelSprite::sn#0 106.5
byte GetSprite()
byte GetSprite::return
byte GetSprite::return#2 37.33333333333333
byte GetSprite::return#4 22.0
byte GetSprite::t0
byte GetSprite::t0#2 20002.0
byte GetSprite::t0#3 10051.5
void Print00(byte* Print00::p , byte Print00::v0)
byte Print00::c
byte Print00::c#10 10051.5
byte Print00::c#2 10001.0
byte Print00::c#4 10001.0
byte Print00::c#5 10051.5
byte* Print00::p
byte Print00::v
byte Print00::v#1 20002.0
byte Print00::v#2 20002.0
byte Print00::v#3 7551.25
byte Print00::v#5 10034.666666666666
byte Print00::v0
byte Print00::v0#0 56.0
signed word main()
byte*~ main::$109 22.0
byte*~ main::$110 22.0
byte*~ main::$111 11.0
byte*~ main::$112 22.0
byte~ main::$132 22.0
signed word~ main::$27 101.0
signed word~ main::$28 101.0
byte~ main::$52 22.0
word main::c
word main::c#10 9.166666666666666
word main::c#11 11.0
word main::c#16 1.0
word main::c#18 1.8333333333333333
word main::c#2 22.0
word main::c#4 22.0
word main::c#7 16.5
struct $5* main::d
struct $5* main::d#10 10.631578947368421
struct $5* main::d#2 101.0
struct $5* main::d1
struct $5* main::d1#0 1.0
byte main::i
byte main::i#11 15.714285714285714
byte main::i#12 14.666666666666666
byte main::i#14 14.666666666666666
byte main::i#17 3.4375
byte main::i#2 22.0
byte main::i#22 35.35
byte main::i#4 22.0
byte main::i#7 22.0
byte main::i#9 202.0
word main::oCount
word main::oCount#17 1.1282051282051282
word main::oCount#2 22.0
word main::oCount#20 7.333333333333333
word main::oCount#7 22.0
byte main::objects
byte main::objects#1 2.0
byte main::objects#12 11.0
byte main::objects#15 11.0
byte main::objects#17 14.666666666666666
byte main::objects#9 6.000000000000001
signed word main::return
byte main::stopIt
byte main::stopIt#15 7.333333333333333
byte main::stopIt#5 0.7857142857142858
byte main::type
byte main::type#10 2.75
byte main::type#2 11.0
byte main::type#4 5.5

Initial phi equivalence classes
[ main::i#12 main::i#2 ]
[ main::i#14 main::i#4 ]
[ main::c#10 main::c#2 ]
[ main::c#11 main::c#4 ]
[ main::i#17 main::i#7 ]
[ main::type#4 main::type#10 main::type#2 ]
[ main::c#16 main::c#18 main::c#7 ]
[ main::stopIt#5 main::stopIt#15 ]
[ main::i#22 main::i#9 ]
[ main::d#10 main::d#2 ]
[ main::objects#12 main::objects#9 main::objects#17 main::objects#1 main::objects#15 ]
[ main::oCount#7 main::oCount#17 main::oCount#20 main::oCount#2 ]
[ Print00::c#5 Print00::c#2 ]
[ Print00::v#5 Print00::v#3 Print00::v0#0 Print00::v#1 Print00::v#2 ]
[ Print00::c#10 Print00::c#4 ]
[ GetSprite::return#2 GetSprite::t0#3 GetSprite::t0#2 ]
[ AddSprite::t0#3 AddSprite::t0#2 ]
Added variable DelSprite::sn#0 to live range equivalence class [ DelSprite::sn#0 ]
Added variable GetSprite::return#4 to live range equivalence class [ GetSprite::return#4 ]
Added variable main::i#11 to live range equivalence class [ main::i#11 ]
Added variable AddSprite::sn#1 to live range equivalence class [ AddSprite::sn#1 ]
Added variable main::$27 to live range equivalence class [ main::$27 ]
Added variable main::$28 to live range equivalence class [ main::$28 ]
Added variable main::$132 to live range equivalence class [ main::$132 ]
Added variable main::$52 to live range equivalence class [ main::$52 ]
Added variable main::d1#0 to live range equivalence class [ main::d1#0 ]
Added variable main::$111 to live range equivalence class [ main::$111 ]
Added variable main::$112 to live range equivalence class [ main::$112 ]
Added variable main::$109 to live range equivalence class [ main::$109 ]
Added variable main::$110 to live range equivalence class [ main::$110 ]
Complete equivalence classes
[ main::i#12 main::i#2 ]
[ main::i#14 main::i#4 ]
[ main::c#10 main::c#2 ]
[ main::c#11 main::c#4 ]
[ main::i#17 main::i#7 ]
[ main::type#4 main::type#10 main::type#2 ]
[ main::c#16 main::c#18 main::c#7 ]
[ main::stopIt#5 main::stopIt#15 ]
[ main::i#22 main::i#9 ]
[ main::d#10 main::d#2 ]
[ main::objects#12 main::objects#9 main::objects#17 main::objects#1 main::objects#15 ]
[ main::oCount#7 main::oCount#17 main::oCount#20 main::oCount#2 ]
[ Print00::c#5 Print00::c#2 ]
[ Print00::v#5 Print00::v#3 Print00::v0#0 Print00::v#1 Print00::v#2 ]
[ Print00::c#10 Print00::c#4 ]
[ GetSprite::return#2 GetSprite::t0#3 GetSprite::t0#2 ]
[ AddSprite::t0#3 AddSprite::t0#2 ]
[ DelSprite::sn#0 ]
[ GetSprite::return#4 ]
[ main::i#11 ]
[ AddSprite::sn#1 ]
[ main::$27 ]
[ main::$28 ]
[ main::$132 ]
[ main::$52 ]
[ main::d1#0 ]
[ main::$111 ]
[ main::$112 ]
[ main::$109 ]
[ main::$110 ]
Allocated zp[1]:2 [ main::i#12 main::i#2 ]
Allocated zp[1]:3 [ main::i#14 main::i#4 ]
Allocated zp[2]:4 [ main::c#10 main::c#2 ]
Allocated zp[2]:6 [ main::c#11 main::c#4 ]
Allocated zp[1]:8 [ main::i#17 main::i#7 ]
Allocated zp[1]:9 [ main::type#4 main::type#10 main::type#2 ]
Allocated zp[2]:10 [ main::c#16 main::c#18 main::c#7 ]
Allocated zp[1]:12 [ main::stopIt#5 main::stopIt#15 ]
Allocated zp[1]:13 [ main::i#22 main::i#9 ]
Allocated zp[2]:14 [ main::d#10 main::d#2 ]
Allocated zp[1]:16 [ main::objects#12 main::objects#9 main::objects#17 main::objects#1 main::objects#15 ]
Allocated zp[2]:17 [ main::oCount#7 main::oCount#17 main::oCount#20 main::oCount#2 ]
Allocated zp[1]:19 [ Print00::c#5 Print00::c#2 ]
Allocated zp[1]:20 [ Print00::v#5 Print00::v#3 Print00::v0#0 Print00::v#1 Print00::v#2 ]
Allocated zp[1]:21 [ Print00::c#10 Print00::c#4 ]
Allocated zp[1]:22 [ GetSprite::return#2 GetSprite::t0#3 GetSprite::t0#2 ]
Allocated zp[1]:23 [ AddSprite::t0#3 AddSprite::t0#2 ]
Allocated zp[1]:24 [ DelSprite::sn#0 ]
Allocated zp[1]:25 [ GetSprite::return#4 ]
Allocated zp[1]:26 [ main::i#11 ]
Allocated zp[1]:27 [ AddSprite::sn#1 ]
Allocated zp[2]:28 [ main::$27 ]
Allocated zp[2]:30 [ main::$28 ]
Allocated zp[1]:32 [ main::$132 ]
Allocated zp[1]:33 [ main::$52 ]
Allocated zp[2]:34 [ main::d1#0 ]
Allocated zp[2]:36 [ main::$111 ]
Allocated zp[2]:38 [ main::$112 ]
Allocated zp[2]:40 [ main::$109 ]
Allocated zp[2]:42 [ main::$110 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *lcSprMapTab = sprOff [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(lcSprMapTab+1) = sprOff+1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *(lcSprMapTab+2) = sprOff+2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *(lcSprMapTab+3) = sprOff+3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] *(lcSprMapTab+4) = sprOff+4 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] *(lcSprMapTab+5) = sprOff+5 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [6] *(lcSprColTab+sprOff+1) = $a|lfMC [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [7] *(lcSprColTab+sprOff) = *(lcSprColTab+sprOff+1) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] *(lcSprColTab+sprOff+3) = 5|lfMC [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [9] *(lcSprColTab+sprOff+2) = *(lcSprColTab+sprOff+3) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [10] *(lcSprColTab+sprOff+5) = $e|lfMC [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [11] *(lcSprColTab+sprOff+4) = *(lcSprColTab+sprOff+5) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [17] if(main::c#10<$3e8) goto main::@7 [ main::c#10 ] (  [ main::c#10 ] { }  ) always clobbers reg byte a 
Statement [18] *((byte*) 1) = $33 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [20] if(main::c#11<$7f8) goto main::@9 [ main::c#11 ] (  [ main::c#11 ] { }  ) always clobbers reg byte a 
Statement [21] *((byte*) 1) = $35 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [22] *((byte*) 53248+$d02) = *((byte*) 53248+$d02) | 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [23] *((byte*) 53248+$d00) = *((byte*) 53248+$d00) & ~3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [24] *((byte*) 57344+$3e5) = 'P'-'A'+1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [25] *((byte*) 57344+$3e6) = 1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [26] *((byte*) 57344+$3e7) = 'L'-'A'+1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [27] *((byte*) 57344+$3cf) = 'B'-'A'+1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [28] *((byte*) 57344+$3cf+1) = 'U'-'A'+1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [29] *((byte*) 57344+$3cf+2) = 'B'-'A'+1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [30] *((byte*) 57344+$3cf+3) = 'B'-'A'+1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [31] *((byte*) 57344+$3cf+4) = 'L'-'A'+1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [32] *((byte*) 57344+$3cf+5) = 'E'-'A'+1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [33] *((byte*) 57344+$3cf+6) = 'S'-'A'+1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [34] *((byte*) 57344+$3cf+7) = ':' [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [41] if(main::c#7<$e) goto main::@33 [ main::objects#9 main::stopIt#5 main::oCount#17 main::c#7 ] (  [ main::objects#9 main::stopIt#5 main::oCount#17 main::c#7 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:16 [ main::objects#12 main::objects#9 main::objects#17 main::objects#1 main::objects#15 ]
Removing always clobbered register reg byte a as potential for zp[1]:12 [ main::stopIt#5 main::stopIt#15 ]
Statement [45] if(main::oCount#17<=0) goto main::@34 [ main::stopIt#5 main::oCount#17 main::c#18 main::objects#12 ] (  [ main::stopIt#5 main::oCount#17 main::c#18 main::objects#12 ] { }  ) always clobbers reg byte a 
Statement [46] main::oCount#2 = main::oCount#17 - 1 [ main::stopIt#5 main::c#18 main::objects#12 main::oCount#2 ] (  [ main::stopIt#5 main::c#18 main::objects#12 main::oCount#2 ] { }  ) always clobbers reg byte a 
Statement [48] if(main::oCount#7<2+1) goto main::@35 [ main::stopIt#5 main::c#18 main::objects#12 main::oCount#7 ] (  [ main::stopIt#5 main::c#18 main::objects#12 main::oCount#7 ] { }  ) always clobbers reg byte a 
Statement [63] cmRY[main::i#11] = 0 [ main::stopIt#5 main::oCount#17 main::objects#1 main::i#11 ] (  [ main::stopIt#5 main::oCount#17 main::objects#1 main::i#11 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:26 [ main::i#11 ]
Statement [64] cmRF[main::i#11] = cmRY[main::i#11] [ main::stopIt#5 main::oCount#17 main::objects#1 main::i#11 ] (  [ main::stopIt#5 main::oCount#17 main::objects#1 main::i#11 ] { }  ) always clobbers reg byte a 
Statement [65] cmRX[main::i#11] = cmRF[main::i#11] [ main::stopIt#5 main::oCount#17 main::objects#1 main::i#11 ] (  [ main::stopIt#5 main::oCount#17 main::objects#1 main::i#11 ] { }  ) always clobbers reg byte a 
Statement [66] cmSI[main::i#11] = cmRX[main::i#11] [ main::stopIt#5 main::oCount#17 main::objects#1 ] (  [ main::stopIt#5 main::oCount#17 main::objects#1 ] { }  ) always clobbers reg byte a 
Statement [67] ((signed byte*)main::d#10)[5] = ((signed byte*)main::d#10)[5] + ((signed byte*)main::d#10)[7] [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Removing always clobbered register reg byte x as potential for zp[1]:16 [ main::objects#12 main::objects#9 main::objects#17 main::objects#1 main::objects#15 ]
Removing always clobbered register reg byte y as potential for zp[1]:16 [ main::objects#12 main::objects#9 main::objects#17 main::objects#1 main::objects#15 ]
Removing always clobbered register reg byte x as potential for zp[1]:12 [ main::stopIt#5 main::stopIt#15 ]
Removing always clobbered register reg byte y as potential for zp[1]:12 [ main::stopIt#5 main::stopIt#15 ]
Removing always clobbered register reg byte a as potential for zp[1]:13 [ main::i#22 main::i#9 ]
Removing always clobbered register reg byte x as potential for zp[1]:13 [ main::i#22 main::i#9 ]
Removing always clobbered register reg byte y as potential for zp[1]:13 [ main::i#22 main::i#9 ]
Statement [68] if(((signed byte*)main::d#10)[5]<-$20) goto main::@20 [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [69] if(((signed byte*)main::d#10)[5]<$20+1) goto main::@21 [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [70] ((signed byte*)main::d#10)[7] = -1 [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [71] if(((signed word*)main::d#10)[3]>(signed word)$f8<<F) goto main::@22 [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [72] if(((signed word*)main::d#10)[3]>=(signed word)$18<<F) goto main::@23 [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [73] ((signed byte*)main::d#10)[6] = (signed byte)1<<F [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [74] ((signed word*)main::d#10)[1] = ((signed word*)main::d#10)[1] + ((signed byte*)main::d#10)[5] [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [75] ((signed word*)main::d#10)[3] = ((signed word*)main::d#10)[3] + ((signed byte*)main::d#10)[6] [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [76] if(cmRF[main::i#22]>=$80) goto main::@24 [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [77] cmSI[main::i#22] = *((byte*)main::d#10) [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [78] main::$27 = ((signed word*)main::d#10)[1] >> F [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 main::$27 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 main::$27 ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [79] cmRX[main::i#22] = (byte)main::$27 [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [80] main::$28 = ((signed word*)main::d#10)[3] >> F [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 main::$28 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 main::$28 ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [81] cmRY[main::i#22] = (byte)main::$28 [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [82] main::d#2 = main::d#10 + 9 [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#2 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#2 ] { }  ) always clobbers reg byte a 
Statement [84] ((signed byte*)main::d#10)[6] = (signed byte)-1<<F [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [85] ((signed byte*)main::d#10)[7] = 1 [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [86] main::$132 = main::i#17 << 3 [ main::i#17 main::type#4 main::$132 ] (  [ main::i#17 main::type#4 main::$132 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:8 [ main::i#17 main::i#7 ]
Removing always clobbered register reg byte a as potential for zp[1]:9 [ main::type#4 main::type#10 main::type#2 ]
Statement [87] main::$52 = main::$132 + main::i#17 [ main::i#17 main::type#4 main::$52 ] (  [ main::i#17 main::type#4 main::$52 ] { }  ) always clobbers reg byte a 
Statement [88] main::d1#0 = dTab + main::$52 [ main::i#17 main::type#4 main::d1#0 ] (  [ main::i#17 main::type#4 main::d1#0 ] { }  ) always clobbers reg byte a 
Statement [89] *((byte*)main::d1#0) = main::type#4 [ main::i#17 main::type#4 main::d1#0 ] (  [ main::i#17 main::type#4 main::d1#0 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:8 [ main::i#17 main::i#7 ]
Removing always clobbered register reg byte y as potential for zp[1]:9 [ main::type#4 main::type#10 main::type#2 ]
Statement [94] ((signed word*)main::d1#0)[1] = (signed word)$70<<F [ main::i#17 main::type#10 main::d1#0 ] (  [ main::i#17 main::type#10 main::d1#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [95] ((signed byte*)main::d1#0)[5] = (signed byte)main::i#17 [ main::i#17 main::type#10 main::d1#0 ] (  [ main::i#17 main::type#10 main::d1#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [96] ((signed byte*)main::d1#0)[7] = 1 [ main::i#17 main::type#10 main::d1#0 ] (  [ main::i#17 main::type#10 main::d1#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [97] ((signed word*)main::d1#0)[3] = (signed word)$18<<F [ main::i#17 main::type#10 main::d1#0 ] (  [ main::i#17 main::type#10 main::d1#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [98] ((signed byte*)main::d1#0)[6] = (signed byte)1<<F [ main::i#17 main::type#10 main::d1#0 ] (  [ main::i#17 main::type#10 main::d1#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [99] ((signed byte*)main::d1#0)[8] = 1 [ main::i#17 main::type#10 ] (  [ main::i#17 main::type#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [101] main::$111 = (byte*) 53248 + main::c#11 [ main::c#11 main::$111 ] (  [ main::c#11 main::$111 ] { }  ) always clobbers reg byte a 
Statement [102] main::$112 = (byte*) 63488 + main::c#11 [ main::c#11 main::$111 main::$112 ] (  [ main::c#11 main::$111 main::$112 ] { }  ) always clobbers reg byte a 
Statement [103] *main::$112 = *main::$111 [ main::c#11 ] (  [ main::c#11 ] { }  ) always clobbers reg byte a reg byte y 
Statement [105] main::$109 = (byte*) 57344 + main::c#10 [ main::c#10 main::$109 ] (  [ main::c#10 main::$109 ] { }  ) always clobbers reg byte a 
Statement [106] *main::$109 = $20 [ main::c#10 ] (  [ main::c#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [107] main::$110 = (byte*) 55296 + main::c#10 [ main::c#10 main::$110 ] (  [ main::c#10 main::$110 ] { }  ) always clobbers reg byte a 
Statement [108] *main::$110 = $e [ main::c#10 ] (  [ main::c#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [110] cmRF[main::i#14] = $ff [ main::i#14 ] (  [ main::i#14 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::i#14 main::i#4 ]
Statement [112] cmIT[main::i#12] = $ff [ main::i#12 ] (  [ main::i#12 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#12 main::i#2 ]
Statement [114] cmRY[DelSprite::sn#0] = $ff [ DelSprite::sn#0 ] ( DelSprite:52 [ main::c#18 main::objects#15 DelSprite::sn#0 ] { { DelSprite::sn#0 = main::objects#15 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:24 [ DelSprite::sn#0 ]
Statement [115] cmRF[DelSprite::sn#0] = rfDrop [ ] ( DelSprite:52 [ main::c#18 main::objects#15 ] { { DelSprite::sn#0 = main::objects#15 } }  ) always clobbers reg byte a 
Statement [128] Print00::v#1 = Print00::v#3 - $a [ Print00::v#1 Print00::c#2 ] ( Print00:55 [ main::objects#17 main::c#18 main::stopIt#15 main::oCount#20 Print00::v#1 Print00::c#2 ] { { Print00::v0#0 = main::objects#17 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:19 [ Print00::c#5 Print00::c#2 ]
Statement [134] if(cmRF[GetSprite::t0#3]<rfDrop) goto GetSprite::@3 [ GetSprite::t0#3 ] ( GetSprite:57 [ main::stopIt#5 main::oCount#17 main::objects#1 GetSprite::t0#3 ] { { GetSprite::return#2 = GetSprite::return#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:22 [ GetSprite::return#2 GetSprite::t0#3 GetSprite::t0#2 ]
Statement [135] cmRF[GetSprite::t0#3] = 0 [ GetSprite::t0#3 ] ( GetSprite:57 [ main::stopIt#5 main::oCount#17 main::objects#1 GetSprite::t0#3 ] { { GetSprite::return#2 = GetSprite::return#4 } }  ) always clobbers reg byte a 
Statement [137] if(rfDrop==cmRF[AddSprite::sn#1]) goto AddSprite::@1 [ AddSprite::sn#1 ] ( AddSprite:62 [ main::stopIt#5 main::oCount#17 main::objects#1 main::i#11 AddSprite::sn#1 ] { { AddSprite::sn#1 = main::i#11 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:27 [ AddSprite::sn#1 ]
Statement [141] if(cmIT[AddSprite::t0#3]<$80) goto AddSprite::@4 [ AddSprite::sn#1 AddSprite::t0#3 ] ( AddSprite:62 [ main::stopIt#5 main::oCount#17 main::objects#1 main::i#11 AddSprite::sn#1 AddSprite::t0#3 ] { { AddSprite::sn#1 = main::i#11 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:23 [ AddSprite::t0#3 AddSprite::t0#2 ]
Statement [142] cmRF[AddSprite::sn#1] = 0 [ AddSprite::sn#1 AddSprite::t0#3 ] ( AddSprite:62 [ main::stopIt#5 main::oCount#17 main::objects#1 main::i#11 AddSprite::sn#1 AddSprite::t0#3 ] { { AddSprite::sn#1 = main::i#11 } }  ) always clobbers reg byte a 
Statement [143] cmIT[AddSprite::t0#3] = AddSprite::sn#1 [ ] ( AddSprite:62 [ main::stopIt#5 main::oCount#17 main::objects#1 main::i#11 ] { { AddSprite::sn#1 = main::i#11 } }  ) always clobbers reg byte a 
Statement [145] cmRF[AddSprite::sn#1] = 0 [ ] ( AddSprite:62 [ main::stopIt#5 main::oCount#17 main::objects#1 main::i#11 ] { { AddSprite::sn#1 = main::i#11 } }  ) always clobbers reg byte a 
Statement [0] *lcSprMapTab = sprOff [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(lcSprMapTab+1) = sprOff+1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *(lcSprMapTab+2) = sprOff+2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *(lcSprMapTab+3) = sprOff+3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] *(lcSprMapTab+4) = sprOff+4 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] *(lcSprMapTab+5) = sprOff+5 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [6] *(lcSprColTab+sprOff+1) = $a|lfMC [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [7] *(lcSprColTab+sprOff) = *(lcSprColTab+sprOff+1) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] *(lcSprColTab+sprOff+3) = 5|lfMC [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [9] *(lcSprColTab+sprOff+2) = *(lcSprColTab+sprOff+3) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [10] *(lcSprColTab+sprOff+5) = $e|lfMC [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [11] *(lcSprColTab+sprOff+4) = *(lcSprColTab+sprOff+5) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [17] if(main::c#10<$3e8) goto main::@7 [ main::c#10 ] (  [ main::c#10 ] { }  ) always clobbers reg byte a 
Statement [18] *((byte*) 1) = $33 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [20] if(main::c#11<$7f8) goto main::@9 [ main::c#11 ] (  [ main::c#11 ] { }  ) always clobbers reg byte a 
Statement [21] *((byte*) 1) = $35 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [22] *((byte*) 53248+$d02) = *((byte*) 53248+$d02) | 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [23] *((byte*) 53248+$d00) = *((byte*) 53248+$d00) & ~3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [24] *((byte*) 57344+$3e5) = 'P'-'A'+1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [25] *((byte*) 57344+$3e6) = 1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [26] *((byte*) 57344+$3e7) = 'L'-'A'+1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [27] *((byte*) 57344+$3cf) = 'B'-'A'+1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [28] *((byte*) 57344+$3cf+1) = 'U'-'A'+1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [29] *((byte*) 57344+$3cf+2) = 'B'-'A'+1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [30] *((byte*) 57344+$3cf+3) = 'B'-'A'+1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [31] *((byte*) 57344+$3cf+4) = 'L'-'A'+1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [32] *((byte*) 57344+$3cf+5) = 'E'-'A'+1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [33] *((byte*) 57344+$3cf+6) = 'S'-'A'+1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [34] *((byte*) 57344+$3cf+7) = ':' [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [39] if(main::i#22<main::objects#9) goto main::@18 [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a 
Statement [41] if(main::c#7<$e) goto main::@33 [ main::objects#9 main::stopIt#5 main::oCount#17 main::c#7 ] (  [ main::objects#9 main::stopIt#5 main::oCount#17 main::c#7 ] { }  ) always clobbers reg byte a 
Statement [42] if(0!=main::stopIt#5) goto main::@33 [ main::objects#9 main::stopIt#5 main::oCount#17 ] (  [ main::objects#9 main::stopIt#5 main::oCount#17 ] { }  ) always clobbers reg byte a 
Statement [43] if(main::objects#9<maxDrawObjects) goto main::@31 [ main::objects#9 main::stopIt#5 main::oCount#17 ] (  [ main::objects#9 main::stopIt#5 main::oCount#17 ] { }  ) always clobbers reg byte a 
Statement [45] if(main::oCount#17<=0) goto main::@34 [ main::stopIt#5 main::oCount#17 main::c#18 main::objects#12 ] (  [ main::stopIt#5 main::oCount#17 main::c#18 main::objects#12 ] { }  ) always clobbers reg byte a 
Statement [46] main::oCount#2 = main::oCount#17 - 1 [ main::stopIt#5 main::c#18 main::objects#12 main::oCount#2 ] (  [ main::stopIt#5 main::c#18 main::objects#12 main::oCount#2 ] { }  ) always clobbers reg byte a 
Statement [48] if(main::oCount#7<2+1) goto main::@35 [ main::stopIt#5 main::c#18 main::objects#12 main::oCount#7 ] (  [ main::stopIt#5 main::c#18 main::objects#12 main::oCount#7 ] { }  ) always clobbers reg byte a 
Statement [49] if(main::objects#12>0) goto main::@38 [ main::c#18 main::objects#12 ] (  [ main::c#18 main::objects#12 ] { }  ) always clobbers reg byte a 
Statement [63] cmRY[main::i#11] = 0 [ main::stopIt#5 main::oCount#17 main::objects#1 main::i#11 ] (  [ main::stopIt#5 main::oCount#17 main::objects#1 main::i#11 ] { }  ) always clobbers reg byte a 
Statement [64] cmRF[main::i#11] = cmRY[main::i#11] [ main::stopIt#5 main::oCount#17 main::objects#1 main::i#11 ] (  [ main::stopIt#5 main::oCount#17 main::objects#1 main::i#11 ] { }  ) always clobbers reg byte a 
Statement [65] cmRX[main::i#11] = cmRF[main::i#11] [ main::stopIt#5 main::oCount#17 main::objects#1 main::i#11 ] (  [ main::stopIt#5 main::oCount#17 main::objects#1 main::i#11 ] { }  ) always clobbers reg byte a 
Statement [66] cmSI[main::i#11] = cmRX[main::i#11] [ main::stopIt#5 main::oCount#17 main::objects#1 ] (  [ main::stopIt#5 main::oCount#17 main::objects#1 ] { }  ) always clobbers reg byte a 
Statement [67] ((signed byte*)main::d#10)[5] = ((signed byte*)main::d#10)[5] + ((signed byte*)main::d#10)[7] [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [68] if(((signed byte*)main::d#10)[5]<-$20) goto main::@20 [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [69] if(((signed byte*)main::d#10)[5]<$20+1) goto main::@21 [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [70] ((signed byte*)main::d#10)[7] = -1 [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [71] if(((signed word*)main::d#10)[3]>(signed word)$f8<<F) goto main::@22 [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [72] if(((signed word*)main::d#10)[3]>=(signed word)$18<<F) goto main::@23 [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [73] ((signed byte*)main::d#10)[6] = (signed byte)1<<F [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [74] ((signed word*)main::d#10)[1] = ((signed word*)main::d#10)[1] + ((signed byte*)main::d#10)[5] [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [75] ((signed word*)main::d#10)[3] = ((signed word*)main::d#10)[3] + ((signed byte*)main::d#10)[6] [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [76] if(cmRF[main::i#22]>=$80) goto main::@24 [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [77] cmSI[main::i#22] = *((byte*)main::d#10) [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [78] main::$27 = ((signed word*)main::d#10)[1] >> F [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 main::$27 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 main::$27 ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [79] cmRX[main::i#22] = (byte)main::$27 [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [80] main::$28 = ((signed word*)main::d#10)[3] >> F [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 main::$28 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 main::$28 ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [81] cmRY[main::i#22] = (byte)main::$28 [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [82] main::d#2 = main::d#10 + 9 [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#2 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#2 ] { }  ) always clobbers reg byte a 
Statement [84] ((signed byte*)main::d#10)[6] = (signed byte)-1<<F [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [85] ((signed byte*)main::d#10)[7] = 1 [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] (  [ main::objects#9 main::c#16 main::stopIt#5 main::oCount#17 main::i#22 main::d#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [86] main::$132 = main::i#17 << 3 [ main::i#17 main::type#4 main::$132 ] (  [ main::i#17 main::type#4 main::$132 ] { }  ) always clobbers reg byte a 
Statement [87] main::$52 = main::$132 + main::i#17 [ main::i#17 main::type#4 main::$52 ] (  [ main::i#17 main::type#4 main::$52 ] { }  ) always clobbers reg byte a 
Statement [88] main::d1#0 = dTab + main::$52 [ main::i#17 main::type#4 main::d1#0 ] (  [ main::i#17 main::type#4 main::d1#0 ] { }  ) always clobbers reg byte a 
Statement [89] *((byte*)main::d1#0) = main::type#4 [ main::i#17 main::type#4 main::d1#0 ] (  [ main::i#17 main::type#4 main::d1#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [94] ((signed word*)main::d1#0)[1] = (signed word)$70<<F [ main::i#17 main::type#10 main::d1#0 ] (  [ main::i#17 main::type#10 main::d1#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [95] ((signed byte*)main::d1#0)[5] = (signed byte)main::i#17 [ main::i#17 main::type#10 main::d1#0 ] (  [ main::i#17 main::type#10 main::d1#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [96] ((signed byte*)main::d1#0)[7] = 1 [ main::i#17 main::type#10 main::d1#0 ] (  [ main::i#17 main::type#10 main::d1#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [97] ((signed word*)main::d1#0)[3] = (signed word)$18<<F [ main::i#17 main::type#10 main::d1#0 ] (  [ main::i#17 main::type#10 main::d1#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [98] ((signed byte*)main::d1#0)[6] = (signed byte)1<<F [ main::i#17 main::type#10 main::d1#0 ] (  [ main::i#17 main::type#10 main::d1#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [99] ((signed byte*)main::d1#0)[8] = 1 [ main::i#17 main::type#10 ] (  [ main::i#17 main::type#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [101] main::$111 = (byte*) 53248 + main::c#11 [ main::c#11 main::$111 ] (  [ main::c#11 main::$111 ] { }  ) always clobbers reg byte a 
Statement [102] main::$112 = (byte*) 63488 + main::c#11 [ main::c#11 main::$111 main::$112 ] (  [ main::c#11 main::$111 main::$112 ] { }  ) always clobbers reg byte a 
Statement [103] *main::$112 = *main::$111 [ main::c#11 ] (  [ main::c#11 ] { }  ) always clobbers reg byte a reg byte y 
Statement [105] main::$109 = (byte*) 57344 + main::c#10 [ main::c#10 main::$109 ] (  [ main::c#10 main::$109 ] { }  ) always clobbers reg byte a 
Statement [106] *main::$109 = $20 [ main::c#10 ] (  [ main::c#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [107] main::$110 = (byte*) 55296 + main::c#10 [ main::c#10 main::$110 ] (  [ main::c#10 main::$110 ] { }  ) always clobbers reg byte a 
Statement [108] *main::$110 = $e [ main::c#10 ] (  [ main::c#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [110] cmRF[main::i#14] = $ff [ main::i#14 ] (  [ main::i#14 ] { }  ) always clobbers reg byte a 
Statement [112] cmIT[main::i#12] = $ff [ main::i#12 ] (  [ main::i#12 ] { }  ) always clobbers reg byte a 
Statement [114] cmRY[DelSprite::sn#0] = $ff [ DelSprite::sn#0 ] ( DelSprite:52 [ main::c#18 main::objects#15 DelSprite::sn#0 ] { { DelSprite::sn#0 = main::objects#15 } }  ) always clobbers reg byte a 
Statement [115] cmRF[DelSprite::sn#0] = rfDrop [ ] ( DelSprite:52 [ main::c#18 main::objects#15 ] { { DelSprite::sn#0 = main::objects#15 } }  ) always clobbers reg byte a 
Statement [128] Print00::v#1 = Print00::v#3 - $a [ Print00::v#1 Print00::c#2 ] ( Print00:55 [ main::objects#17 main::c#18 main::stopIt#15 main::oCount#20 Print00::v#1 Print00::c#2 ] { { Print00::v0#0 = main::objects#17 } }  ) always clobbers reg byte a 
Statement [134] if(cmRF[GetSprite::t0#3]<rfDrop) goto GetSprite::@3 [ GetSprite::t0#3 ] ( GetSprite:57 [ main::stopIt#5 main::oCount#17 main::objects#1 GetSprite::t0#3 ] { { GetSprite::return#2 = GetSprite::return#4 } }  ) always clobbers reg byte a 
Statement [135] cmRF[GetSprite::t0#3] = 0 [ GetSprite::t0#3 ] ( GetSprite:57 [ main::stopIt#5 main::oCount#17 main::objects#1 GetSprite::t0#3 ] { { GetSprite::return#2 = GetSprite::return#4 } }  ) always clobbers reg byte a 
Statement [137] if(rfDrop==cmRF[AddSprite::sn#1]) goto AddSprite::@1 [ AddSprite::sn#1 ] ( AddSprite:62 [ main::stopIt#5 main::oCount#17 main::objects#1 main::i#11 AddSprite::sn#1 ] { { AddSprite::sn#1 = main::i#11 } }  ) always clobbers reg byte a 
Statement [141] if(cmIT[AddSprite::t0#3]<$80) goto AddSprite::@4 [ AddSprite::sn#1 AddSprite::t0#3 ] ( AddSprite:62 [ main::stopIt#5 main::oCount#17 main::objects#1 main::i#11 AddSprite::sn#1 AddSprite::t0#3 ] { { AddSprite::sn#1 = main::i#11 } }  ) always clobbers reg byte a 
Statement [142] cmRF[AddSprite::sn#1] = 0 [ AddSprite::sn#1 AddSprite::t0#3 ] ( AddSprite:62 [ main::stopIt#5 main::oCount#17 main::objects#1 main::i#11 AddSprite::sn#1 AddSprite::t0#3 ] { { AddSprite::sn#1 = main::i#11 } }  ) always clobbers reg byte a 
Statement [143] cmIT[AddSprite::t0#3] = AddSprite::sn#1 [ ] ( AddSprite:62 [ main::stopIt#5 main::oCount#17 main::objects#1 main::i#11 ] { { AddSprite::sn#1 = main::i#11 } }  ) always clobbers reg byte a 
Statement [145] cmRF[AddSprite::sn#1] = 0 [ ] ( AddSprite:62 [ main::stopIt#5 main::oCount#17 main::objects#1 main::i#11 ] { { AddSprite::sn#1 = main::i#11 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#12 main::i#2 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::i#14 main::i#4 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[2]:4 [ main::c#10 main::c#2 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ main::c#11 main::c#4 ] : zp[2]:6 , 
Potential registers zp[1]:8 [ main::i#17 main::i#7 ] : zp[1]:8 , reg byte x , 
Potential registers zp[1]:9 [ main::type#4 main::type#10 main::type#2 ] : zp[1]:9 , reg byte x , 
Potential registers zp[2]:10 [ main::c#16 main::c#18 main::c#7 ] : zp[2]:10 , 
Potential registers zp[1]:12 [ main::stopIt#5 main::stopIt#15 ] : zp[1]:12 , 
Potential registers zp[1]:13 [ main::i#22 main::i#9 ] : zp[1]:13 , 
Potential registers zp[2]:14 [ main::d#10 main::d#2 ] : zp[2]:14 , 
Potential registers zp[1]:16 [ main::objects#12 main::objects#9 main::objects#17 main::objects#1 main::objects#15 ] : zp[1]:16 , 
Potential registers zp[2]:17 [ main::oCount#7 main::oCount#17 main::oCount#20 main::oCount#2 ] : zp[2]:17 , 
Potential registers zp[1]:19 [ Print00::c#5 Print00::c#2 ] : zp[1]:19 , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ Print00::v#5 Print00::v#3 Print00::v0#0 Print00::v#1 Print00::v#2 ] : zp[1]:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:21 [ Print00::c#10 Print00::c#4 ] : zp[1]:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:22 [ GetSprite::return#2 GetSprite::t0#3 GetSprite::t0#2 ] : zp[1]:22 , reg byte x , reg byte y , 
Potential registers zp[1]:23 [ AddSprite::t0#3 AddSprite::t0#2 ] : zp[1]:23 , reg byte x , reg byte y , 
Potential registers zp[1]:24 [ DelSprite::sn#0 ] : zp[1]:24 , reg byte x , reg byte y , 
Potential registers zp[1]:25 [ GetSprite::return#4 ] : zp[1]:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:26 [ main::i#11 ] : zp[1]:26 , reg byte x , reg byte y , 
Potential registers zp[1]:27 [ AddSprite::sn#1 ] : zp[1]:27 , reg byte x , reg byte y , 
Potential registers zp[2]:28 [ main::$27 ] : zp[2]:28 , 
Potential registers zp[2]:30 [ main::$28 ] : zp[2]:30 , 
Potential registers zp[1]:32 [ main::$132 ] : zp[1]:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:33 [ main::$52 ] : zp[1]:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:34 [ main::d1#0 ] : zp[2]:34 , 
Potential registers zp[2]:36 [ main::$111 ] : zp[2]:36 , 
Potential registers zp[2]:38 [ main::$112 ] : zp[2]:38 , 
Potential registers zp[2]:40 [ main::$109 ] : zp[2]:40 , 
Potential registers zp[2]:42 [ main::$110 ] : zp[2]:42 , 

REGISTER UPLIFT SCOPES
Uplift Scope [Print00] 57,645.92: zp[1]:20 [ Print00::v#5 Print00::v#3 Print00::v0#0 Print00::v#1 Print00::v#2 ] 20,052.5: zp[1]:19 [ Print00::c#5 Print00::c#2 ] 20,052.5: zp[1]:21 [ Print00::c#10 Print00::c#4 ] 
Uplift Scope [GetSprite] 30,090.83: zp[1]:22 [ GetSprite::return#2 GetSprite::t0#3 GetSprite::t0#2 ] 22: zp[1]:25 [ GetSprite::return#4 ] 
Uplift Scope [AddSprite] 30,028.25: zp[1]:23 [ AddSprite::t0#3 AddSprite::t0#2 ] 59.29: zp[1]:27 [ AddSprite::sn#1 ] 
Uplift Scope [main] 237.35: zp[1]:13 [ main::i#22 main::i#9 ] 111.63: zp[2]:14 [ main::d#10 main::d#2 ] 101: zp[2]:28 [ main::$27 ] 101: zp[2]:30 [ main::$28 ] 52.46: zp[2]:17 [ main::oCount#7 main::oCount#17 main::oCount#20 main::oCount#2 ] 44.67: zp[1]:16 [ main::objects#12 main::objects#9 main::objects#17 main::objects#1 main::objects#15 ] 36.67: zp[1]:2 [ main::i#12 main::i#2 ] 36.67: zp[1]:3 [ main::i#14 main::i#4 ] 33: zp[2]:6 [ main::c#11 main::c#4 ] 31.17: zp[2]:4 [ main::c#10 main::c#2 ] 25.44: zp[1]:8 [ main::i#17 main::i#7 ] 22: zp[1]:32 [ main::$132 ] 22: zp[1]:33 [ main::$52 ] 22: zp[2]:38 [ main::$112 ] 22: zp[2]:40 [ main::$109 ] 22: zp[2]:42 [ main::$110 ] 19.33: zp[2]:10 [ main::c#16 main::c#18 main::c#7 ] 19.25: zp[1]:9 [ main::type#4 main::type#10 main::type#2 ] 15.71: zp[1]:26 [ main::i#11 ] 11: zp[2]:36 [ main::$111 ] 8.12: zp[1]:12 [ main::stopIt#5 main::stopIt#15 ] 1: zp[2]:34 [ main::d1#0 ] 
Uplift Scope [DelSprite] 106.5: zp[1]:24 [ DelSprite::sn#0 ] 
Uplift Scope [$0] 
Uplift Scope [$1] 
Uplift Scope [$2] 
Uplift Scope [$3] 
Uplift Scope [$4] 
Uplift Scope [$5] 
Uplift Scope [] 

Uplifting [Print00] best 69937 combination reg byte x [ Print00::v#5 Print00::v#3 Print00::v0#0 Print00::v#1 Print00::v#2 ] reg byte y [ Print00::c#5 Print00::c#2 ] reg byte y [ Print00::c#10 Print00::c#4 ] 
Uplifting [GetSprite] best 68641 combination reg byte x [ GetSprite::return#2 GetSprite::t0#3 GetSprite::t0#2 ] reg byte x [ GetSprite::return#4 ] 
Uplifting [AddSprite] best 67398 combination reg byte y [ AddSprite::t0#3 AddSprite::t0#2 ] reg byte x [ AddSprite::sn#1 ] 
Uplifting [main] best 66978 combination zp[1]:13 [ main::i#22 main::i#9 ] zp[2]:14 [ main::d#10 main::d#2 ] zp[2]:28 [ main::$27 ] zp[2]:30 [ main::$28 ] zp[2]:17 [ main::oCount#7 main::oCount#17 main::oCount#20 main::oCount#2 ] zp[1]:16 [ main::objects#12 main::objects#9 main::objects#17 main::objects#1 main::objects#15 ] reg byte x [ main::i#12 main::i#2 ] reg byte x [ main::i#14 main::i#4 ] zp[2]:6 [ main::c#11 main::c#4 ] zp[2]:4 [ main::c#10 main::c#2 ] reg byte x [ main::i#17 main::i#7 ] zp[1]:32 [ main::$132 ] reg byte a [ main::$52 ] zp[2]:38 [ main::$112 ] zp[2]:40 [ main::$109 ] zp[2]:42 [ main::$110 ] zp[2]:10 [ main::c#16 main::c#18 main::c#7 ] zp[1]:9 [ main::type#4 main::type#10 main::type#2 ] zp[1]:26 [ main::i#11 ] zp[2]:36 [ main::$111 ] zp[1]:12 [ main::stopIt#5 main::stopIt#15 ] zp[2]:34 [ main::d1#0 ] 
Limited combination testing to 100 combinations of 1728 possible.
Uplifting [DelSprite] best 66942 combination reg byte x [ DelSprite::sn#0 ] 
Uplifting [$0] best 66942 combination 
Uplifting [$1] best 66942 combination 
Uplifting [$2] best 66942 combination 
Uplifting [$3] best 66942 combination 
Uplifting [$4] best 66942 combination 
Uplifting [$5] best 66942 combination 
Uplifting [] best 66942 combination 
Attempting to uplift remaining variables inzp[1]:13 [ main::i#22 main::i#9 ]
Uplifting [main] best 66942 combination zp[1]:13 [ main::i#22 main::i#9 ] 
Attempting to uplift remaining variables inzp[1]:16 [ main::objects#12 main::objects#9 main::objects#17 main::objects#1 main::objects#15 ]
Uplifting [main] best 66942 combination zp[1]:16 [ main::objects#12 main::objects#9 main::objects#17 main::objects#1 main::objects#15 ] 
Attempting to uplift remaining variables inzp[1]:32 [ main::$132 ]
Uplifting [main] best 66922 combination reg byte a [ main::$132 ] 
Attempting to uplift remaining variables inzp[1]:9 [ main::type#4 main::type#10 main::type#2 ]
Uplifting [main] best 66922 combination zp[1]:9 [ main::type#4 main::type#10 main::type#2 ] 
Attempting to uplift remaining variables inzp[1]:26 [ main::i#11 ]
Uplifting [main] best 66712 combination reg byte x [ main::i#11 ] 
Attempting to uplift remaining variables inzp[1]:12 [ main::stopIt#5 main::stopIt#15 ]
Uplifting [main] best 66712 combination zp[1]:12 [ main::stopIt#5 main::stopIt#15 ] 
Allocated (was zp[2]:4) zp[2]:2 [ main::c#10 main::c#2 ]
Allocated (was zp[2]:6) zp[2]:4 [ main::c#11 main::c#4 ]
Allocated (was zp[1]:9) zp[1]:6 [ main::type#4 main::type#10 main::type#2 ]
Allocated (was zp[2]:10) zp[2]:7 [ main::c#16 main::c#18 main::c#7 ]
Allocated (was zp[1]:12) zp[1]:9 [ main::stopIt#5 main::stopIt#15 ]
Allocated (was zp[1]:13) zp[1]:10 [ main::i#22 main::i#9 ]
Allocated (was zp[2]:14) zp[2]:11 [ main::d#10 main::d#2 ]
Allocated (was zp[1]:16) zp[1]:13 [ main::objects#12 main::objects#9 main::objects#17 main::objects#1 main::objects#15 ]
Allocated (was zp[2]:17) zp[2]:14 [ main::oCount#7 main::oCount#17 main::oCount#20 main::oCount#2 ]
Allocated (was zp[2]:28) zp[2]:16 [ main::$27 ]
Allocated (was zp[2]:30) zp[2]:18 [ main::$28 ]
Allocated (was zp[2]:34) zp[2]:20 [ main::d1#0 ]
Allocated (was zp[2]:36) zp[2]:22 [ main::$111 ]
Allocated (was zp[2]:38) zp[2]:24 [ main::$112 ]
Allocated (was zp[2]:40) zp[2]:26 [ main::$109 ]
Allocated (was zp[2]:42) zp[2]:28 [ main::$110 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// bubbles64 - Q&D C64 port of the bubbles demo from vbcc6502's NES exmaples
// Coded by Lazycow
// Source https://www.lemon64.com/forum/viewtopic.php?t=75283&start=15
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const lfMC = $10
  .const rfDrop = $fe
  .const maxSprites = $20
  .const maxSprImages = 8
  .const maxC64Images = $100
  .const sprOff = $40
  .const maxDrawObjects = $18
  .const F = 3
  // main
//
//
main: {
    .label __27 = $10
    .label __28 = $12
    // main loop
    .label c = 2
    // main loop
    .label c_1 = 4
    .label d1 = $14
    // setup bubbles
    .label type = 6
    // main loop
    .label c_2 = 7
    .label d = $b
    .label i = $a
    .label objects = $d
    // 1 == preallocate 20 sprites (only for better benchmarking)
    //  0 == allocate sprites on the fly (prefered)
    .label oCount = $e
    .label stopIt = 9
    .label __109 = $1a
    .label __110 = $1c
    .label __111 = $16
    .label __112 = $18
    // [0] *lcSprMapTab = sprOff -- _deref_pbuc1=vbuc2 
    // setup sprite images
    lda #sprOff
    sta lcSprMapTab
    // [1] *(lcSprMapTab+1) = sprOff+1 -- _deref_pbuc1=vbuc2 
    lda #sprOff+1
    sta lcSprMapTab+1
    // [2] *(lcSprMapTab+2) = sprOff+2 -- _deref_pbuc1=vbuc2 
    lda #sprOff+2
    sta lcSprMapTab+2
    // [3] *(lcSprMapTab+3) = sprOff+3 -- _deref_pbuc1=vbuc2 
    lda #sprOff+3
    sta lcSprMapTab+3
    // [4] *(lcSprMapTab+4) = sprOff+4 -- _deref_pbuc1=vbuc2 
    lda #sprOff+4
    sta lcSprMapTab+4
    // [5] *(lcSprMapTab+5) = sprOff+5 -- _deref_pbuc1=vbuc2 
    lda #sprOff+5
    sta lcSprMapTab+5
    // [6] *(lcSprColTab+sprOff+1) = $a|lfMC -- _deref_pbuc1=vbuc2 
    lda #$a|lfMC
    sta lcSprColTab+sprOff+1
    // [7] *(lcSprColTab+sprOff) = *(lcSprColTab+sprOff+1) -- _deref_pbuc1=_deref_pbuc2 
    // setup sprite colors + flags
    lda lcSprColTab+sprOff+1
    sta lcSprColTab+sprOff
    // [8] *(lcSprColTab+sprOff+3) = 5|lfMC -- _deref_pbuc1=vbuc2 
    lda #5|lfMC
    sta lcSprColTab+sprOff+3
    // [9] *(lcSprColTab+sprOff+2) = *(lcSprColTab+sprOff+3) -- _deref_pbuc1=_deref_pbuc2 
    lda lcSprColTab+sprOff+3
    sta lcSprColTab+sprOff+2
    // [10] *(lcSprColTab+sprOff+5) = $e|lfMC -- _deref_pbuc1=vbuc2 
    lda #$e|lfMC
    sta lcSprColTab+sprOff+5
    // [11] *(lcSprColTab+sprOff+4) = *(lcSprColTab+sprOff+5) -- _deref_pbuc1=_deref_pbuc2 
    lda lcSprColTab+sprOff+5
    sta lcSprColTab+sprOff+4
    // [12] phi from main to main::@2 [phi:main->main::@2]
  __b2_from_main:
    // [12] phi main::i#12 = 0 [phi:main->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b2
    // main::@2
  __b2:
    // [13] if(main::i#12<maxSprites+1) goto main::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #maxSprites+1
    bcc __b3
    // [14] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
  __b4_from___b2:
    // [14] phi main::i#14 = 0 [phi:main::@2->main::@4#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b4
  // clear (i)ndex (t)able
    // main::@4
  __b4:
    // [15] if(main::i#14<maxSprites) goto main::@5 -- vbuxx_lt_vbuc1_then_la1 
    cpx #maxSprites
    bcc __b5
    // [16] phi from main::@4 to main::@6 [phi:main::@4->main::@6]
  __b6_from___b4:
    // [16] phi main::c#10 = 0 [phi:main::@4->main::@6#0] -- vwuz1=vbuc1 
    lda #<0
    sta.z c
    lda #>0
    sta.z c+1
    jmp __b6
    // main::@6
  __b6:
    // [17] if(main::c#10<$3e8) goto main::@7 -- vwuz1_lt_vwuc1_then_la1 
    lda.z c+1
    cmp #>$3e8
    bcc __b7
    bne !+
    lda.z c
    cmp #<$3e8
    bcc __b7
  !:
    jmp __b39
    // main::@39
  __b39:
    // [18] *((byte*) 1) = $33 -- _deref_pbuc1=vbuc2 
    // install IRQ
    lda #$33
    sta 1
    // [19] phi from main::@39 to main::@8 [phi:main::@39->main::@8]
  __b8_from___b39:
    // [19] phi main::c#11 = 0 [phi:main::@39->main::@8#0] -- vwuz1=vbuc1 
    lda #<0
    sta.z c_1
    lda #>0
    sta.z c_1+1
    jmp __b8
  // now it's save to change "01"
    // main::@8
  __b8:
    // [20] if(main::c#11<$7f8) goto main::@9 -- vwuz1_lt_vwuc1_then_la1 
    lda.z c_1+1
    cmp #>$7f8
    bcc __b9
    bne !+
    lda.z c_1
    cmp #<$7f8
    bcc __b9
  !:
    jmp __b10
    // main::@10
  __b10:
    // [21] *((byte*) 1) = $35 -- _deref_pbuc1=vbuc2 
    lda #$35
    sta 1
    // [22] *((byte*) 53248+$d02) = *((byte*) 53248+$d02) | 3 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    lda #3
    ora $d000+$d02
    sta $d000+$d02
    // [23] *((byte*) 53248+$d00) = *((byte*) 53248+$d00) & ~3 -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    lda #3^$ff
    and $d000+$d00
    sta $d000+$d00
    jmp __b11
    // main::@11
  __b11:
    // [24] *((byte*) 57344+$3e5) = 'P'-'A'+1 -- _deref_pbuc1=vbuc2 
    lda #'P'-'A'+1
    sta $e000+$3e5
    // [25] *((byte*) 57344+$3e6) = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta $e000+$3e6
    // [26] *((byte*) 57344+$3e7) = 'L'-'A'+1 -- _deref_pbuc1=vbuc2 
    lda #'L'-'A'+1
    sta $e000+$3e7
    jmp __b1
    // main::@1
  __b1:
    // [27] *((byte*) 57344+$3cf) = 'B'-'A'+1 -- _deref_pbuc1=vbuc2 
    lda #'B'-'A'+1
    sta $e000+$3cf
    // [28] *((byte*) 57344+$3cf+1) = 'U'-'A'+1 -- _deref_pbuc1=vbuc2 
    lda #'U'-'A'+1
    sta $e000+$3cf+1
    // [29] *((byte*) 57344+$3cf+2) = 'B'-'A'+1 -- _deref_pbuc1=vbuc2 
    lda #'B'-'A'+1
    sta $e000+$3cf+2
    // [30] *((byte*) 57344+$3cf+3) = 'B'-'A'+1 -- _deref_pbuc1=vbuc2 
    lda #'B'-'A'+1
    sta $e000+$3cf+3
    // [31] *((byte*) 57344+$3cf+4) = 'L'-'A'+1 -- _deref_pbuc1=vbuc2 
    lda #'L'-'A'+1
    sta $e000+$3cf+4
    // [32] *((byte*) 57344+$3cf+5) = 'E'-'A'+1 -- _deref_pbuc1=vbuc2 
    lda #'E'-'A'+1
    sta $e000+$3cf+5
    // [33] *((byte*) 57344+$3cf+6) = 'S'-'A'+1 -- _deref_pbuc1=vbuc2 
    lda #'S'-'A'+1
    sta $e000+$3cf+6
    // [34] *((byte*) 57344+$3cf+7) = ':' -- _deref_pbuc1=vbuc2 
    lda #':'
    sta $e000+$3cf+7
    // [35] phi from main::@1 to main::@12 [phi:main::@1->main::@12]
  __b12_from___b1:
    // [35] phi main::type#4 = 0 [phi:main::@1->main::@12#0] -- vbuz1=vbuc1 
    lda #0
    sta.z type
    // [35] phi main::i#17 = 0 [phi:main::@1->main::@12#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b12
    // main::@12
  __b12:
    // [36] if(main::i#17<maxDrawObjects) goto main::@13 -- vbuxx_lt_vbuc1_then_la1 
    cpx #maxDrawObjects
    bcc __b13
    // [37] phi from main::@12 to main::@16 [phi:main::@12->main::@16]
  __b16_from___b12:
    // [37] phi main::oCount#17 = 0 [phi:main::@12->main::@16#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z oCount
    lda #>0
    sta.z oCount+1
    // [37] phi main::stopIt#5 = 0 [phi:main::@12->main::@16#1] -- vbuz1=vbuc1 
    lda #0
    sta.z stopIt
    // [37] phi main::c#16 = 0 [phi:main::@12->main::@16#2] -- vwuz1=vbuc1 
    lda #<0
    sta.z c_2
    lda #>0
    sta.z c_2+1
    // [37] phi main::objects#9 = 0 [phi:main::@12->main::@16#3] -- vbuz1=vbuc1 
    lda #0
    sta.z objects
    jmp __b16
    // main::@16
  __b16:
    // [38] phi from main::@16 to main::@17 [phi:main::@16->main::@17]
  __b17_from___b16:
    // [38] phi main::d#10 = dTab [phi:main::@16->main::@17#0] -- pssz1=pssc1 
    lda #<dTab
    sta.z d
    lda #>dTab
    sta.z d+1
    // [38] phi main::i#22 = 0 [phi:main::@16->main::@17#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b17
  // move objects
    // main::@17
  __b17:
    // [39] if(main::i#22<main::objects#9) goto main::@18 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z objects
    bcc __b18
    jmp __b19
    // main::@19
  __b19:
    // [40] main::c#7 = main::c#16 + 1 -- vwuz1=vwuz1_plus_1 
    // activate new bubble?
    inc.z c_2
    bne !+
    inc.z c_2+1
  !:
    // [41] if(main::c#7<$e) goto main::@33 -- vwuz1_lt_vbuc1_then_la1 
    lda.z c_2+1
    bne !+
    lda.z c_2
    cmp #$e
    bcc __b33_from___b19
  !:
    jmp __b30
    // main::@30
  __b30:
    // [42] if(0!=main::stopIt#5) goto main::@33 -- 0_neq_vbuz1_then_la1 
    lda.z stopIt
    cmp #0
    bne __b33_from___b30
    jmp __b42
    // main::@42
  __b42:
    // [43] if(main::objects#9<maxDrawObjects) goto main::@31 -- vbuz1_lt_vbuc1_then_la1 
    lda.z objects
    cmp #maxDrawObjects
    bcc __b31
    // [44] phi from main::@42 main::@43 to main::@33 [phi:main::@42/main::@43->main::@33]
  __b33_from___b42:
  __b33_from___b43:
    jmp __b33
    // [44] phi from main::@19 to main::@33 [phi:main::@19->main::@33]
  __b33_from___b19:
    // [44] phi main::c#18 = main::c#7 [phi:main::@19->main::@33#0] -- register_copy 
    // [44] phi main::objects#12 = main::objects#9 [phi:main::@19->main::@33#1] -- register_copy 
    jmp __b33
    // [44] phi from main::@30 main::@41 to main::@33 [phi:main::@30/main::@41->main::@33]
  __b33_from___b30:
  __b33_from___b41:
    // [44] phi main::c#18 = 0 [phi:main::@30/main::@41->main::@33#0] -- vwuz1=vbuc1 
    lda #<0
    sta.z c_2
    lda #>0
    sta.z c_2+1
    // [44] phi main::objects#12 = main::objects#9 [phi:main::@30/main::@41->main::@33#1] -- register_copy 
    jmp __b33
    // main::@33
  __b33:
    jmp __b36
    // main::@36
  __b36:
    // [45] if(main::oCount#17<=0) goto main::@34 -- vwuz1_le_0_then_la1 
    lda.z oCount
    bne !+
    lda.z oCount+1
    beq __b34_from___b36
  !:
    jmp __b37
    // main::@37
  __b37:
    // [46] main::oCount#2 = main::oCount#17 - 1 -- vwuz1=vwuz1_minus_1 
    lda.z oCount
    sec
    sbc #1
    sta.z oCount
    lda.z oCount+1
    sbc #0
    sta.z oCount+1
    // [47] phi from main::@36 main::@37 to main::@34 [phi:main::@36/main::@37->main::@34]
  __b34_from___b36:
  __b34_from___b37:
    // [47] phi main::oCount#7 = main::oCount#17 [phi:main::@36/main::@37->main::@34#0] -- register_copy 
    jmp __b34
    // main::@34
  __b34:
    // [48] if(main::oCount#7<2+1) goto main::@35 -- vwuz1_lt_vbuc1_then_la1 
    lda.z oCount+1
    bne !+
    lda.z oCount
    cmp #2+1
    bcc __b35_from___b34
  !:
    jmp __b44
    // main::@44
  __b44:
    // [49] if(main::objects#12>0) goto main::@38 -- vbuz1_gt_0_then_la1 
    lda.z objects
    bne __b38
    // [53] phi from main::@44 to main::@35 [phi:main::@44->main::@35]
  __b35_from___b44:
    jmp __b35
    // main::@38
  __b38:
    // [50] main::objects#15 = main::objects#12 - 1 -- vbuz1=vbuz1_minus_1 
    dec.z objects
    // [51] DelSprite::sn#0 = main::objects#15 -- vbuxx=vbuz1 
    ldx.z objects
    // [52] call DelSprite 
    jsr DelSprite
    // [53] phi from main::@38 to main::@35 [phi:main::@38->main::@35]
  __b35_from___b38:
    // [53] phi main::oCount#20 = 0 [phi:main::@38->main::@35#0] -- vwuz1=vbuc1 
    lda #<0
    sta.z oCount
    lda #>0
    sta.z oCount+1
    // [53] phi main::stopIt#15 = 1 [phi:main::@38->main::@35#1] -- vbuz1=vbuc1 
    lda #1
    sta.z stopIt
    // [53] phi main::objects#17 = main::objects#15 [phi:main::@38->main::@35#2] -- register_copy 
    jmp __b35
    // [53] phi from main::@34 to main::@35 [phi:main::@34->main::@35]
  __b35_from___b34:
    // [53] phi main::oCount#20 = main::oCount#7 [phi:main::@34->main::@35#0] -- register_copy 
    // [53] phi main::stopIt#15 = main::stopIt#5 [phi:main::@34->main::@35#1] -- register_copy 
    // [53] phi main::objects#17 = main::objects#12 [phi:main::@34->main::@35#2] -- register_copy 
    jmp __b35
    // main::@35
  __b35:
    // [54] Print00::v0#0 = main::objects#17 -- vbuxx=vbuz1 
    ldx.z objects
    // [55] call Print00 
    // [117] phi from main::@35 to Print00 [phi:main::@35->Print00]
  Print00_from___b35:
    jsr Print00
    // [37] phi from main::@35 to main::@16 [phi:main::@35->main::@16]
  __b16_from___b35:
    // [37] phi main::oCount#17 = main::oCount#20 [phi:main::@35->main::@16#0] -- register_copy 
    // [37] phi main::stopIt#5 = main::stopIt#15 [phi:main::@35->main::@16#1] -- register_copy 
    // [37] phi main::c#16 = main::c#18 [phi:main::@35->main::@16#2] -- register_copy 
    // [37] phi main::objects#9 = main::objects#17 [phi:main::@35->main::@16#3] -- register_copy 
    jmp __b16
    // main::@31
  __b31:
    // [56] main::objects#1 = main::objects#9 + 1 -- vbuz1=vbuz1_plus_1 
    inc.z objects
    // [57] call GetSprite 
    // [129] phi from main::@31 to GetSprite [phi:main::@31->GetSprite]
  GetSprite_from___b31:
    jsr GetSprite
    // [58] GetSprite::return#4 = GetSprite::return#2
    jmp __b40
    // main::@40
  __b40:
    // [59] main::i#11 = GetSprite::return#4
    jmp __b43
    // main::@43
  __b43:
    // [60] if(main::i#11<$80) goto main::@32 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$80
    bcc __b32
    jmp __b33_from___b43
    // main::@32
  __b32:
    // [61] AddSprite::sn#1 = main::i#11
    // [62] call AddSprite 
    jsr AddSprite
    jmp __b41
    // main::@41
  __b41:
    // [63] cmRY[main::i#11] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta cmRY,x
    // [64] cmRF[main::i#11] = cmRY[main::i#11] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda cmRY,x
    sta cmRF,x
    // [65] cmRX[main::i#11] = cmRF[main::i#11] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda cmRF,x
    sta cmRX,x
    // [66] cmSI[main::i#11] = cmRX[main::i#11] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda cmRX,x
    sta cmSI,x
    jmp __b33_from___b41
    // main::@18
  __b18:
    // [67] ((signed byte*)main::d#10)[5] = ((signed byte*)main::d#10)[5] + ((signed byte*)main::d#10)[7] -- pbsz1_derefidx_vbuc1=pbsz1_derefidx_vbuc1_plus_pbsz1_derefidx_vbuc2 
    ldy #7
    lda (d),y
    ldy #5
    tax
    lda (d),y
    stx.z $ff
    clc
    adc.z $ff
    sta (d),y
    // [68] if(((signed byte*)main::d#10)[5]<-$20) goto main::@20 -- pbsz1_derefidx_vbuc1_lt_vbsc2_then_la1 
    ldy #5
    lda (d),y
    sec
    sbc #-$20
    bvc !+
    eor #$80
  !:
    bmi __b20
    jmp __b25
    // main::@25
  __b25:
    // [69] if(((signed byte*)main::d#10)[5]<$20+1) goto main::@21 -- pbsz1_derefidx_vbuc1_lt_vbsc2_then_la1 
    ldy #5
    lda (d),y
    sec
    sbc #$20+1
    bvc !+
    eor #$80
  !:
    bmi __b21
    jmp __b26
    // main::@26
  __b26:
    // [70] ((signed byte*)main::d#10)[7] = -1 -- pbsz1_derefidx_vbuc1=vbsc2 
    lda #-1
    ldy #7
    sta (d),y
    jmp __b21
    // main::@21
  __b21:
    // [71] if(((signed word*)main::d#10)[3]>(signed word)$f8<<F) goto main::@22 -- pwsz1_derefidx_vbuc1_gt_vwsc2_then_la1 
    ldy #3
    lda #<$f8<<F
    cmp (d),y
    iny
    lda #>$f8<<F
    sbc (d),y
    bvc !+
    eor #$80
  !:
    bmi __b22
  !e:
    jmp __b27
    // main::@27
  __b27:
    // [72] if(((signed word*)main::d#10)[3]>=(signed word)$18<<F) goto main::@23 -- pwsz1_derefidx_vbuc1_ge_vwsc2_then_la1 
    ldy #3
    lda (d),y
    cmp #<$18<<F
    iny
    lda (d),y
    sbc #>$18<<F
    bvc !+
    eor #$80
  !:
    bpl __b23
    jmp __b28
    // main::@28
  __b28:
    // [73] ((signed byte*)main::d#10)[6] = (signed byte)1<<F -- pbsz1_derefidx_vbuc1=vbsc2 
    lda #1<<F
    ldy #6
    sta (d),y
    jmp __b23
    // main::@23
  __b23:
    // [74] ((signed word*)main::d#10)[1] = ((signed word*)main::d#10)[1] + ((signed byte*)main::d#10)[5] -- pwsz1_derefidx_vbuc1=pwsz1_derefidx_vbuc1_plus_pbsz1_derefidx_vbuc2 
    ldy #5
    lda (d),y
    sta.z $fe
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z $ff
    ldy #1
    clc
    lda (d),y
    adc.z $fe
    sta (d),y
    iny
    lda (d),y
    adc.z $fe
    sta (d),y
    // [75] ((signed word*)main::d#10)[3] = ((signed word*)main::d#10)[3] + ((signed byte*)main::d#10)[6] -- pwsz1_derefidx_vbuc1=pwsz1_derefidx_vbuc1_plus_pbsz1_derefidx_vbuc2 
    ldy #6
    lda (d),y
    sta.z $fe
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z $ff
    ldy #3
    clc
    lda (d),y
    adc.z $fe
    sta (d),y
    iny
    lda (d),y
    adc.z $fe
    sta (d),y
    // [76] if(cmRF[main::i#22]>=$80) goto main::@24 -- pbuc1_derefidx_vbuz1_ge_vbuc2_then_la1 
    ldy.z i
    lda cmRF,y
    cmp #$80
    bcs __b24
    jmp __b29
    // main::@29
  __b29:
    // [77] cmSI[main::i#22] = *((byte*)main::d#10) -- pbuc1_derefidx_vbuz1=_deref_pbuz2 
    ldy #0
    lda (d),y
    ldy.z i
    sta cmSI,y
    // [78] main::$27 = ((signed word*)main::d#10)[1] >> F -- vwsz1=pwsz2_derefidx_vbuc1_ror_vbuc2 
    ldx #F
    ldy #1
    lda (d),y
    sta.z __27
    iny
    lda (d),y
    sta.z __27+1
    cpx #0
    beq !e+
  !:
    lda.z __27+1
    cmp #$80
    ror.z __27+1
    ror.z __27
    dex
    bne !-
  !e:
    // [79] cmRX[main::i#22] = (byte)main::$27 -- pbuc1_derefidx_vbuz1=_byte_vwsz2 
    ldy.z i
    lda.z __27
    sta cmRX,y
    // [80] main::$28 = ((signed word*)main::d#10)[3] >> F -- vwsz1=pwsz2_derefidx_vbuc1_ror_vbuc2 
    ldx #F
    ldy #3
    lda (d),y
    sta.z __28
    iny
    lda (d),y
    sta.z __28+1
    cpx #0
    beq !e+
  !:
    lda.z __28+1
    cmp #$80
    ror.z __28+1
    ror.z __28
    dex
    bne !-
  !e:
    // [81] cmRY[main::i#22] = (byte)main::$28 -- pbuc1_derefidx_vbuz1=_byte_vwsz2 
    ldy.z i
    lda.z __28
    sta cmRY,y
    jmp __b24
    // main::@24
  __b24:
    // [82] main::d#2 = main::d#10 + 9 -- pssz1=pssz1_plus_vbuc1 
    lda #9
    clc
    adc.z d
    sta.z d
    bcc !+
    inc.z d+1
  !:
    // [83] main::i#9 = main::i#22 + 1 -- vbuz1=vbuz1_plus_1 
    inc.z i
    // [38] phi from main::@24 to main::@17 [phi:main::@24->main::@17]
  __b17_from___b24:
    // [38] phi main::d#10 = main::d#2 [phi:main::@24->main::@17#0] -- register_copy 
    // [38] phi main::i#22 = main::i#9 [phi:main::@24->main::@17#1] -- register_copy 
    jmp __b17
    // main::@22
  __b22:
    // [84] ((signed byte*)main::d#10)[6] = (signed byte)-1<<F -- pbsz1_derefidx_vbuc1=vbsc2 
    lda #-1<<F
    ldy #6
    sta (d),y
    jmp __b23
    // main::@20
  __b20:
    // [85] ((signed byte*)main::d#10)[7] = 1 -- pbsz1_derefidx_vbuc1=vbsc2 
    lda #1
    ldy #7
    sta (d),y
    jmp __b21
    // main::@13
  __b13:
    // [86] main::$132 = main::i#17 << 3 -- vbuaa=vbuxx_rol_3 
    txa
    asl
    asl
    asl
    // [87] main::$52 = main::$132 + main::i#17 -- vbuaa=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    // [88] main::d1#0 = dTab + main::$52 -- pssz1=pssc1_plus_vbuaa 
    clc
    adc #<dTab
    sta.z d1
    lda #>dTab
    adc #0
    sta.z d1+1
    // [89] *((byte*)main::d1#0) = main::type#4 -- _deref_pbuz1=vbuz2 
    lda.z type
    ldy #0
    sta (d1),y
    // [90] main::type#2 = main::type#4 + 1 -- vbuz1=vbuz1_plus_1 
    inc.z type
    // [91] if(main::type#2<6) goto main::@45 -- vbuz1_lt_vbuc1_then_la1 
    lda.z type
    cmp #6
    bcc __b45_from___b13
    // [93] phi from main::@13 to main::@14 [phi:main::@13->main::@14]
  __b14_from___b13:
    // [93] phi main::type#10 = 0 [phi:main::@13->main::@14#0] -- vbuz1=vbuc1 
    lda #0
    sta.z type
    jmp __b14
    // [92] phi from main::@13 to main::@45 [phi:main::@13->main::@45]
  __b45_from___b13:
    jmp __b45
    // main::@45
  __b45:
    // [93] phi from main::@45 to main::@14 [phi:main::@45->main::@14]
  __b14_from___b45:
    // [93] phi main::type#10 = main::type#2 [phi:main::@45->main::@14#0] -- register_copy 
    jmp __b14
    // main::@14
  __b14:
    // [94] ((signed word*)main::d1#0)[1] = (signed word)$70<<F -- pwsz1_derefidx_vbuc1=vwsc2 
    ldy #1
    lda #<$70<<F
    sta (d1),y
    iny
    lda #>$70<<F
    sta (d1),y
    // [95] ((signed byte*)main::d1#0)[5] = (signed byte)main::i#17 -- pbsz1_derefidx_vbuc1=vbsxx 
    ldy #5
    txa
    sta (d1),y
    // [96] ((signed byte*)main::d1#0)[7] = 1 -- pbsz1_derefidx_vbuc1=vbsc2 
    lda #1
    ldy #7
    sta (d1),y
    // [97] ((signed word*)main::d1#0)[3] = (signed word)$18<<F -- pwsz1_derefidx_vbuc1=vwsc2 
    ldy #3
    lda #<$18<<F
    sta (d1),y
    iny
    lda #>$18<<F
    sta (d1),y
    // [98] ((signed byte*)main::d1#0)[6] = (signed byte)1<<F -- pbsz1_derefidx_vbuc1=vbsc2 
    lda #1<<F
    ldy #6
    sta (d1),y
    // [99] ((signed byte*)main::d1#0)[8] = 1 -- pbsz1_derefidx_vbuc1=vbsc2 
    lda #1
    ldy #8
    sta (d1),y
    jmp __b15
    // main::@15
  __b15:
    // [100] main::i#7 = main::i#17 + 1 -- vbuxx=vbuxx_plus_1 
    inx
    // [35] phi from main::@15 to main::@12 [phi:main::@15->main::@12]
  __b12_from___b15:
    // [35] phi main::type#4 = main::type#10 [phi:main::@15->main::@12#0] -- register_copy 
    // [35] phi main::i#17 = main::i#7 [phi:main::@15->main::@12#1] -- register_copy 
    jmp __b12
    // main::@9
  __b9:
    // [101] main::$111 = (byte*) 53248 + main::c#11 -- pbuz1=pbuc1_plus_vwuz2 
    clc
    lda.z c_1
    adc #<$d000
    sta.z __111
    lda.z c_1+1
    adc #>$d000
    sta.z __111+1
    // [102] main::$112 = (byte*) 63488 + main::c#11 -- pbuz1=pbuc1_plus_vwuz2 
    clc
    lda.z c_1
    adc #<$f800
    sta.z __112
    lda.z c_1+1
    adc #>$f800
    sta.z __112+1
    // [103] *main::$112 = *main::$111 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (__111),y
    ldy #0
    sta (__112),y
    // [104] main::c#4 = main::c#11 + 1 -- vwuz1=vwuz1_plus_1 
    inc.z c_1
    bne !+
    inc.z c_1+1
  !:
    // [19] phi from main::@9 to main::@8 [phi:main::@9->main::@8]
  __b8_from___b9:
    // [19] phi main::c#11 = main::c#4 [phi:main::@9->main::@8#0] -- register_copy 
    jmp __b8
    // main::@7
  __b7:
    // [105] main::$109 = (byte*) 57344 + main::c#10 -- pbuz1=pbuc1_plus_vwuz2 
    clc
    lda.z c
    adc #<$e000
    sta.z __109
    lda.z c+1
    adc #>$e000
    sta.z __109+1
    // [106] *main::$109 = $20 -- _deref_pbuz1=vbuc1 
    lda #$20
    ldy #0
    sta (__109),y
    // [107] main::$110 = (byte*) 55296 + main::c#10 -- pbuz1=pbuc1_plus_vwuz2 
    clc
    lda.z c
    adc #<$d800
    sta.z __110
    lda.z c+1
    adc #>$d800
    sta.z __110+1
    // [108] *main::$110 = $e -- _deref_pbuz1=vbuc1 
    lda #$e
    ldy #0
    sta (__110),y
    // [109] main::c#2 = main::c#10 + 1 -- vwuz1=vwuz1_plus_1 
    inc.z c
    bne !+
    inc.z c+1
  !:
    // [16] phi from main::@7 to main::@6 [phi:main::@7->main::@6]
  __b6_from___b7:
    // [16] phi main::c#10 = main::c#2 [phi:main::@7->main::@6#0] -- register_copy 
    jmp __b6
    // main::@5
  __b5:
    // [110] cmRF[main::i#14] = $ff -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$ff
    sta cmRF,x
    // [111] main::i#4 = main::i#14 + 1 -- vbuxx=vbuxx_plus_1 
    inx
    // [14] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
  __b4_from___b5:
    // [14] phi main::i#14 = main::i#4 [phi:main::@5->main::@4#0] -- register_copy 
    jmp __b4
    // main::@3
  __b3:
    // [112] cmIT[main::i#12] = $ff -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$ff
    sta cmIT,x
    // [113] main::i#2 = main::i#12 + 1 -- vbuxx=vbuxx_plus_1 
    inx
    // [12] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
  __b2_from___b3:
    // [12] phi main::i#12 = main::i#2 [phi:main::@3->main::@2#0] -- register_copy 
    jmp __b2
}
  // DelSprite
// DelSprite(byte register(X) sn)
DelSprite: {
    // [114] cmRY[DelSprite::sn#0] = $ff -- pbuc1_derefidx_vbuxx=vbuc2 
    // drop sprite, will be removed from IT in IRQ
    lda #$ff
    sta cmRY,x
    // [115] cmRF[DelSprite::sn#0] = rfDrop -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #rfDrop
    sta cmRF,x
    jmp __breturn
    // DelSprite::@return
  __breturn:
    // [116] return 
    rts
}
  // Print00
// Print00(byte register(X) v0)
Print00: {
    // [118] phi from Print00 to Print00::@1 [phi:Print00->Print00::@1]
  __b1_from_Print00:
    // [118] phi Print00::c#5 = '0' [phi:Print00->Print00::@1#0] -- vbuyy=vbuc1 
    ldy #'0'
    // [118] phi Print00::v#3 = Print00::v0#0 [phi:Print00->Print00::@1#1] -- register_copy 
    jmp __b1
    // Print00::@1
  __b1:
    // [119] if(Print00::v#3>=$a) goto Print00::@2 -- vbuxx_ge_vbuc1_then_la1 
    cpx #$a
    bcs __b2
    jmp __b3
    // Print00::@3
  __b3:
    // [120] *($e000+(byte*) 983) = Print00::c#5 -- _deref_pbuc1=vbuyy 
    sty $e000+$3d7
    // [121] phi from Print00::@3 to Print00::@4 [phi:Print00::@3->Print00::@4]
  __b4_from___b3:
    // [121] phi Print00::c#10 = '0' [phi:Print00::@3->Print00::@4#0] -- vbuyy=vbuc1 
    ldy #'0'
    // [121] phi Print00::v#5 = Print00::v#3 [phi:Print00::@3->Print00::@4#1] -- register_copy 
    jmp __b4
    // Print00::@4
  __b4:
    // [122] if(Print00::v#5>=1) goto Print00::@5 -- vbuxx_ge_vbuc1_then_la1 
    cpx #1
    bcs __b5
    jmp __b6
    // Print00::@6
  __b6:
    // [123] *($e000+(byte*) 983+1) = Print00::c#10 -- _deref_pbuc1=vbuyy 
    sty $e000+$3d7+1
    jmp __breturn
    // Print00::@return
  __breturn:
    // [124] return 
    rts
    // Print00::@5
  __b5:
    // [125] Print00::c#4 = ++ Print00::c#10 -- vbuyy=_inc_vbuyy 
    iny
    // [126] Print00::v#2 = Print00::v#5 - 1 -- vbuxx=vbuxx_minus_1 
    dex
    // [121] phi from Print00::@5 to Print00::@4 [phi:Print00::@5->Print00::@4]
  __b4_from___b5:
    // [121] phi Print00::c#10 = Print00::c#4 [phi:Print00::@5->Print00::@4#0] -- register_copy 
    // [121] phi Print00::v#5 = Print00::v#2 [phi:Print00::@5->Print00::@4#1] -- register_copy 
    jmp __b4
    // Print00::@2
  __b2:
    // [127] Print00::c#2 = ++ Print00::c#5 -- vbuyy=_inc_vbuyy 
    iny
    // [128] Print00::v#1 = Print00::v#3 - $a -- vbuxx=vbuxx_minus_vbuc1 
    txa
    axs #$a
    // [118] phi from Print00::@2 to Print00::@1 [phi:Print00::@2->Print00::@1]
  __b1_from___b2:
    // [118] phi Print00::c#5 = Print00::c#2 [phi:Print00::@2->Print00::@1#0] -- register_copy 
    // [118] phi Print00::v#3 = Print00::v#1 [phi:Print00::@2->Print00::@1#1] -- register_copy 
    jmp __b1
}
  // GetSprite
// sprite support functions
//
GetSprite: {
    // [130] phi from GetSprite to GetSprite::@1 [phi:GetSprite->GetSprite::@1]
  __b1_from_GetSprite:
    // [130] phi GetSprite::t0#3 = 0 [phi:GetSprite->GetSprite::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // GetSprite::@1
  __b1:
    // [131] if(GetSprite::t0#3<maxSprites) goto GetSprite::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #maxSprites
    bcc __b2
    // [132] phi from GetSprite::@1 to GetSprite::@return [phi:GetSprite::@1->GetSprite::@return]
  __breturn_from___b1:
    // [132] phi GetSprite::return#2 = $ff [phi:GetSprite::@1->GetSprite::@return#0] -- vbuxx=vbuc1 
    ldx #$ff
    jmp __breturn
    // GetSprite::@return
  __breturn:
    // [133] return 
    rts
    // GetSprite::@2
  __b2:
    // [134] if(cmRF[GetSprite::t0#3]<rfDrop) goto GetSprite::@3 -- pbuc1_derefidx_vbuxx_lt_vbuc2_then_la1 
    lda cmRF,x
    cmp #rfDrop
    bcc __b3
    jmp __b4
    // GetSprite::@4
  __b4:
    // [135] cmRF[GetSprite::t0#3] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta cmRF,x
    // [132] phi from GetSprite::@4 to GetSprite::@return [phi:GetSprite::@4->GetSprite::@return]
  __breturn_from___b4:
    // [132] phi GetSprite::return#2 = GetSprite::t0#3 [phi:GetSprite::@4->GetSprite::@return#0] -- register_copy 
    jmp __breturn
    // GetSprite::@3
  __b3:
    // [136] GetSprite::t0#2 = ++ GetSprite::t0#3 -- vbuxx=_inc_vbuxx 
    inx
    // [130] phi from GetSprite::@3 to GetSprite::@1 [phi:GetSprite::@3->GetSprite::@1]
  __b1_from___b3:
    // [130] phi GetSprite::t0#3 = GetSprite::t0#2 [phi:GetSprite::@3->GetSprite::@1#0] -- register_copy 
    jmp __b1
}
  // AddSprite
// AddSprite(byte register(X) sn)
AddSprite: {
    // [137] if(rfDrop==cmRF[AddSprite::sn#1]) goto AddSprite::@1 -- vbuc1_eq_pbuc2_derefidx_vbuxx_then_la1 
    lda cmRF,x
    cmp #rfDrop
    beq __b1
    // [138] phi from AddSprite to AddSprite::@2 [phi:AddSprite->AddSprite::@2]
  __b2_from_AddSprite:
    // [138] phi AddSprite::t0#3 = 0 [phi:AddSprite->AddSprite::@2#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b2
    // AddSprite::@2
  __b2:
    // [139] if(AddSprite::t0#3<maxSprites) goto AddSprite::@3 -- vbuyy_lt_vbuc1_then_la1 
    cpy #maxSprites
    bcc __b3
    jmp __breturn
    // AddSprite::@return
  __breturn:
    // [140] return 
    rts
    // AddSprite::@3
  __b3:
    // [141] if(cmIT[AddSprite::t0#3]<$80) goto AddSprite::@4 -- pbuc1_derefidx_vbuyy_lt_vbuc2_then_la1 
    lda cmIT,y
    cmp #$80
    bcc __b4
    jmp __b5
    // AddSprite::@5
  __b5:
    // [142] cmRF[AddSprite::sn#1] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta cmRF,x
    // [143] cmIT[AddSprite::t0#3] = AddSprite::sn#1 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta cmIT,y
    jmp __breturn
    // AddSprite::@4
  __b4:
    // [144] AddSprite::t0#2 = AddSprite::t0#3 + 1 -- vbuyy=vbuyy_plus_1 
    iny
    // [138] phi from AddSprite::@4 to AddSprite::@2 [phi:AddSprite::@4->AddSprite::@2]
  __b2_from___b4:
    // [138] phi AddSprite::t0#3 = AddSprite::t0#2 [phi:AddSprite::@4->AddSprite::@2#0] -- register_copy 
    jmp __b2
    // AddSprite::@1
  __b1:
    // [145] cmRF[AddSprite::sn#1] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta cmRF,x
    jmp __breturn
}
  // File Data
  lcSprMapTab: .fill maxSprImages, 0
  lcSprColTab: .fill maxC64Images, 0
  cmIT: .fill maxSprites+1, 0
  cmSI: .fill maxSprites, 0
  cmRX: .fill maxSprites, 0
  cmRY: .fill maxSprites, 0
  cmRF: .fill maxSprites, 0
  dTab: .fill 9*maxDrawObjects, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b39
Removing instruction jmp __b8
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b1
Removing instruction jmp __b12
Removing instruction jmp __b16
Removing instruction jmp __b17
Removing instruction jmp __b19
Removing instruction jmp __b30
Removing instruction jmp __b42
Removing instruction jmp __b33
Removing instruction jmp __b36
Removing instruction jmp __b37
Removing instruction jmp __b34
Removing instruction jmp __b44
Removing instruction jmp __b35
Removing instruction jmp __b40
Removing instruction jmp __b43
Removing instruction jmp __b41
Removing instruction jmp __b25
Removing instruction jmp __b26
Removing instruction jmp __b21
Removing instruction jmp __b27
Removing instruction jmp __b28
Removing instruction jmp __b23
Removing instruction jmp __b29
Removing instruction jmp __b24
Removing instruction jmp __b45
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b5
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda lcSprColTab+sprOff+1
Removing instruction lda lcSprColTab+sprOff+3
Removing instruction lda lcSprColTab+sprOff+5
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction lda #'B'-'A'+1
Replacing instruction ldx #0 with TAX
Removing instruction lda #>0
Removing instruction lda #0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda #0
Removing instruction lda #>0
Removing instruction lda #>0
Removing instruction ldy #5
Removing instruction ldy #0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b33_from___b30 with __b33_from___b41
Replacing label __b33 with __b36
Replacing label __b33 with __b36
Replacing label __b34_from___b36 with __b34
Replacing label __b35_from___b34 with __b35
Replacing label __b45_from___b13 with __b14
Removing instruction __b17_from___b16:
Removing instruction __b33_from___b42:
Removing instruction __b33_from___b30:
Removing instruction __b33:
Removing instruction __b34_from___b36:
Removing instruction __b34_from___b37:
Removing instruction __b35_from___b34:
Removing instruction __b40:
Removing instruction __b45_from___b13:
Removing instruction __b45:
Removing instruction __b14_from___b45:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b2_from_main:
Removing instruction __b4_from___b2:
Removing instruction __b6_from___b4:
Removing instruction __b39:
Removing instruction __b8_from___b39:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b1:
Removing instruction __b12_from___b1:
Removing instruction __b16_from___b12:
Removing instruction __b19:
Removing instruction __b30:
Removing instruction __b42:
Removing instruction __b37:
Removing instruction __b44:
Removing instruction __b35_from___b44:
Removing instruction __b35_from___b38:
Removing instruction Print00_from___b35:
Removing instruction __b16_from___b35:
Removing instruction GetSprite_from___b31:
Removing instruction __b43:
Removing instruction __b41:
Removing instruction __b25:
Removing instruction __b26:
Removing instruction __b27:
Removing instruction __b28:
Removing instruction __b29:
Removing instruction __b17_from___b24:
Removing instruction __b14_from___b13:
Removing instruction __b15:
Removing instruction __b12_from___b15:
Removing instruction __b8_from___b9:
Removing instruction __b6_from___b7:
Removing instruction __b4_from___b5:
Removing instruction __b2_from___b3:
Removing instruction __breturn:
Removing instruction __b1_from_Print00:
Removing instruction __b3:
Removing instruction __b4_from___b3:
Removing instruction __b6:
Removing instruction __breturn:
Removing instruction __b4_from___b5:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_GetSprite:
Removing instruction __breturn_from___b1:
Removing instruction __b4:
Removing instruction __breturn_from___b4:
Removing instruction __b1_from___b3:
Removing instruction __b2_from_AddSprite:
Removing instruction __b5:
Removing instruction __b2_from___b4:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to __b36 in bcc __b33_from___b19
Skipping double jump to __b36 in jmp __b33_from___b43
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b33_from___b43 to __b1
Relabelling long label __b33_from___b19 to __b10
Relabelling long label __b33_from___b41 to __b11
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b35
Removing instruction jmp __b14
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda #0 with TYA
Removing instruction __b1:
Removing instruction __b10:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp __b36
Succesful ASM optimization Pass5UnreachableCodeElimination
Fixing long branch [65] bcc __b3 to bcs
Fixing long branch [72] bcc __b5 to bcs
Fixing long branch [81] bcc __b7 to bcs
Fixing long branch [87] bcc __b7 to bcs
Fixing long branch [101] bcc __b9 to bcs
Fixing long branch [107] bcc __b9 to bcs
Fixing long branch [145] bcc __b13 to bcs
Fixing long branch [166] bcc __b18 to bcs
Fixing long branch [260] bmi __b20 to bpl
Fixing long branch [284] bmi __b22 to bpl

FINAL SYMBOL TABLE
void AddSprite(byte AddSprite::sn)
byte AddSprite::sn
byte AddSprite::sn#1 reg byte x 59.28571428571429
byte AddSprite::t0
byte AddSprite::t0#2 reg byte y 20002.0
byte AddSprite::t0#3 reg byte y 10026.25
void DelSprite(byte DelSprite::sn)
byte DelSprite::sn
byte DelSprite::sn#0 reg byte x 106.5
const byte F = 3
byte GetSprite()
byte GetSprite::return
byte GetSprite::return#2 reg byte x 37.33333333333333
byte GetSprite::return#4 reg byte x 22.0
byte GetSprite::t0
byte GetSprite::t0#2 reg byte x 20002.0
byte GetSprite::t0#3 reg byte x 10051.5
void Print00(byte* Print00::p , byte Print00::v0)
byte Print00::c
byte Print00::c#10 reg byte y 10051.5
byte Print00::c#2 reg byte y 10001.0
byte Print00::c#4 reg byte y 10001.0
byte Print00::c#5 reg byte y 10051.5
byte* Print00::p
byte Print00::v
byte Print00::v#1 reg byte x 20002.0
byte Print00::v#2 reg byte x 20002.0
byte Print00::v#3 reg byte x 7551.25
byte Print00::v#5 reg byte x 10034.666666666666
byte Print00::v0
byte Print00::v0#0 reg byte x 56.0
const byte* cmIT[maxSprites+1]  = { fill( maxSprites+1, 0) }
const byte* cmRF[maxSprites]  = { fill( maxSprites, 0) }
const byte* cmRX[maxSprites]  = { fill( maxSprites, 0) }
const byte* cmRY[maxSprites]  = { fill( maxSprites, 0) }
const byte* cmSI[maxSprites]  = { fill( maxSprites, 0) }
const struct $5* dTab[maxDrawObjects]  = { fill( maxDrawObjects, 0) }
const byte* lcSprColTab[maxC64Images]  = { fill( maxC64Images, 0) }
const byte* lcSprMapTab[maxSprImages]  = { fill( maxSprImages, 0) }
const byte lfMC = $10
signed word main()
byte*~ main::$109 zp[2]:26 22.0
byte*~ main::$110 zp[2]:28 22.0
byte*~ main::$111 zp[2]:22 11.0
byte*~ main::$112 zp[2]:24 22.0
byte~ main::$132 reg byte a 22.0
signed word~ main::$27 zp[2]:16 101.0
signed word~ main::$28 zp[2]:18 101.0
byte~ main::$52 reg byte a 22.0
word main::c
word main::c#10 c zp[2]:2 9.166666666666666
word main::c#11 c_1 zp[2]:4 11.0
word main::c#16 c_2 zp[2]:7 1.0
word main::c#18 c_2 zp[2]:7 1.8333333333333333
word main::c#2 c zp[2]:2 22.0
word main::c#4 c_1 zp[2]:4 22.0
word main::c#7 c_2 zp[2]:7 16.5
struct $5* main::d
struct $5* main::d#10 d zp[2]:11 10.631578947368421
struct $5* main::d#2 d zp[2]:11 101.0
struct $5* main::d1
struct $5* main::d1#0 d1 zp[2]:20 1.0
byte main::i
byte main::i#11 reg byte x 15.714285714285714
byte main::i#12 reg byte x 14.666666666666666
byte main::i#14 reg byte x 14.666666666666666
byte main::i#17 reg byte x 3.4375
byte main::i#2 reg byte x 22.0
byte main::i#22 i zp[1]:10 35.35
byte main::i#4 reg byte x 22.0
byte main::i#7 reg byte x 22.0
byte main::i#9 i zp[1]:10 202.0
word main::oCount
word main::oCount#17 oCount zp[2]:14 1.1282051282051282
word main::oCount#2 oCount zp[2]:14 22.0
word main::oCount#20 oCount zp[2]:14 7.333333333333333
word main::oCount#7 oCount zp[2]:14 22.0
byte main::objects
byte main::objects#1 objects zp[1]:13 2.0
byte main::objects#12 objects zp[1]:13 11.0
byte main::objects#15 objects zp[1]:13 11.0
byte main::objects#17 objects zp[1]:13 14.666666666666666
byte main::objects#9 objects zp[1]:13 6.000000000000001
signed word main::return
byte main::stopIt
byte main::stopIt#15 stopIt zp[1]:9 7.333333333333333
byte main::stopIt#5 stopIt zp[1]:9 0.7857142857142858
byte main::type
byte main::type#10 type zp[1]:6 2.75
byte main::type#2 type zp[1]:6 11.0
byte main::type#4 type zp[1]:6 5.5
const byte maxC64Images = $100
const byte maxDrawObjects = $18
const byte maxSprImages = 8
const byte maxSprites = $20
const byte rfDrop = $fe
const byte sprOff = $40

reg byte x [ main::i#12 main::i#2 ]
reg byte x [ main::i#14 main::i#4 ]
zp[2]:2 [ main::c#10 main::c#2 ]
zp[2]:4 [ main::c#11 main::c#4 ]
reg byte x [ main::i#17 main::i#7 ]
zp[1]:6 [ main::type#4 main::type#10 main::type#2 ]
zp[2]:7 [ main::c#16 main::c#18 main::c#7 ]
zp[1]:9 [ main::stopIt#5 main::stopIt#15 ]
zp[1]:10 [ main::i#22 main::i#9 ]
zp[2]:11 [ main::d#10 main::d#2 ]
zp[1]:13 [ main::objects#12 main::objects#9 main::objects#17 main::objects#1 main::objects#15 ]
zp[2]:14 [ main::oCount#7 main::oCount#17 main::oCount#20 main::oCount#2 ]
reg byte y [ Print00::c#5 Print00::c#2 ]
reg byte x [ Print00::v#5 Print00::v#3 Print00::v0#0 Print00::v#1 Print00::v#2 ]
reg byte y [ Print00::c#10 Print00::c#4 ]
reg byte x [ GetSprite::return#2 GetSprite::t0#3 GetSprite::t0#2 ]
reg byte y [ AddSprite::t0#3 AddSprite::t0#2 ]
reg byte x [ DelSprite::sn#0 ]
reg byte x [ GetSprite::return#4 ]
reg byte x [ main::i#11 ]
reg byte x [ AddSprite::sn#1 ]
zp[2]:16 [ main::$27 ]
zp[2]:18 [ main::$28 ]
reg byte a [ main::$132 ]
reg byte a [ main::$52 ]
zp[2]:20 [ main::d1#0 ]
zp[2]:22 [ main::$111 ]
zp[2]:24 [ main::$112 ]
zp[2]:26 [ main::$109 ]
zp[2]:28 [ main::$110 ]


FINAL ASSEMBLER
Score: 60932

  // File Comments
// bubbles64 - Q&D C64 port of the bubbles demo from vbcc6502's NES exmaples
// Coded by Lazycow
// Source https://www.lemon64.com/forum/viewtopic.php?t=75283&start=15
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const lfMC = $10
  .const rfDrop = $fe
  .const maxSprites = $20
  .const maxSprImages = 8
  .const maxC64Images = $100
  .const sprOff = $40
  .const maxDrawObjects = $18
  .const F = 3
  // main
//
//
main: {
    .label __27 = $10
    .label __28 = $12
    // main loop
    .label c = 2
    // main loop
    .label c_1 = 4
    .label d1 = $14
    // setup bubbles
    .label type = 6
    // main loop
    .label c_2 = 7
    .label d = $b
    .label i = $a
    .label objects = $d
    // 1 == preallocate 20 sprites (only for better benchmarking)
    //  0 == allocate sprites on the fly (prefered)
    .label oCount = $e
    .label stopIt = 9
    .label __109 = $1a
    .label __110 = $1c
    .label __111 = $16
    .label __112 = $18
    // lcSprMapTab[0]=sprOff+0
    // [0] *lcSprMapTab = sprOff -- _deref_pbuc1=vbuc2 
    // setup sprite images
    lda #sprOff
    sta lcSprMapTab
    // lcSprMapTab[1]=sprOff+1
    // [1] *(lcSprMapTab+1) = sprOff+1 -- _deref_pbuc1=vbuc2 
    lda #sprOff+1
    sta lcSprMapTab+1
    // lcSprMapTab[2]=sprOff+2
    // [2] *(lcSprMapTab+2) = sprOff+2 -- _deref_pbuc1=vbuc2 
    lda #sprOff+2
    sta lcSprMapTab+2
    // lcSprMapTab[3]=sprOff+3
    // [3] *(lcSprMapTab+3) = sprOff+3 -- _deref_pbuc1=vbuc2 
    lda #sprOff+3
    sta lcSprMapTab+3
    // lcSprMapTab[4]=sprOff+4
    // [4] *(lcSprMapTab+4) = sprOff+4 -- _deref_pbuc1=vbuc2 
    lda #sprOff+4
    sta lcSprMapTab+4
    // lcSprMapTab[5]=sprOff+5
    // [5] *(lcSprMapTab+5) = sprOff+5 -- _deref_pbuc1=vbuc2 
    lda #sprOff+5
    sta lcSprMapTab+5
    // lcSprColTab[sprOff+1]=10|lfMC
    // [6] *(lcSprColTab+sprOff+1) = $a|lfMC -- _deref_pbuc1=vbuc2 
    lda #$a|lfMC
    sta lcSprColTab+sprOff+1
    // lcSprColTab[sprOff+0]=lcSprColTab[sprOff+1]=10|lfMC
    // [7] *(lcSprColTab+sprOff) = *(lcSprColTab+sprOff+1) -- _deref_pbuc1=_deref_pbuc2 
    // setup sprite colors + flags
    sta lcSprColTab+sprOff
    // lcSprColTab[sprOff+3]=5|lfMC
    // [8] *(lcSprColTab+sprOff+3) = 5|lfMC -- _deref_pbuc1=vbuc2 
    lda #5|lfMC
    sta lcSprColTab+sprOff+3
    // lcSprColTab[sprOff+2]=lcSprColTab[sprOff+3]=5|lfMC
    // [9] *(lcSprColTab+sprOff+2) = *(lcSprColTab+sprOff+3) -- _deref_pbuc1=_deref_pbuc2 
    sta lcSprColTab+sprOff+2
    // lcSprColTab[sprOff+5]=14|lfMC
    // [10] *(lcSprColTab+sprOff+5) = $e|lfMC -- _deref_pbuc1=vbuc2 
    lda #$e|lfMC
    sta lcSprColTab+sprOff+5
    // lcSprColTab[sprOff+4]=lcSprColTab[sprOff+5]=14|lfMC
    // [11] *(lcSprColTab+sprOff+4) = *(lcSprColTab+sprOff+5) -- _deref_pbuc1=_deref_pbuc2 
    sta lcSprColTab+sprOff+4
    // [12] phi from main to main::@2 [phi:main->main::@2]
    // [12] phi main::i#12 = 0 [phi:main->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // main::@2
  __b2:
    // for (i=0;i<maxSprites+1;i+=1)
    // [13] if(main::i#12<maxSprites+1) goto main::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #maxSprites+1
    bcs !__b3+
    jmp __b3
  !__b3:
    // [14] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
    // [14] phi main::i#14 = 0 [phi:main::@2->main::@4#0] -- vbuxx=vbuc1 
    ldx #0
  // clear (i)ndex (t)able
    // main::@4
  __b4:
    // for (i=0;i<maxSprites  ;i+=1)
    // [15] if(main::i#14<maxSprites) goto main::@5 -- vbuxx_lt_vbuc1_then_la1 
    cpx #maxSprites
    bcs !__b5+
    jmp __b5
  !__b5:
    // [16] phi from main::@4 to main::@6 [phi:main::@4->main::@6]
    // [16] phi main::c#10 = 0 [phi:main::@4->main::@6#0] -- vwuz1=vbuc1 
    lda #<0
    sta.z c
    sta.z c+1
    // main::@6
  __b6:
    // for (c=0;c<1000;c+=1)
    // [17] if(main::c#10<$3e8) goto main::@7 -- vwuz1_lt_vwuc1_then_la1 
    lda.z c+1
    cmp #>$3e8
    bcs !__b7+
    jmp __b7
  !__b7:
    bne !+
    lda.z c
    cmp #<$3e8
    bcs !__b7+
    jmp __b7
  !__b7:
  !:
    // main::@39
    // *onePtr=0x33
    // [18] *((byte*) 1) = $33 -- _deref_pbuc1=vbuc2 
    // install IRQ
    lda #$33
    sta 1
    // [19] phi from main::@39 to main::@8 [phi:main::@39->main::@8]
    // [19] phi main::c#11 = 0 [phi:main::@39->main::@8#0] -- vwuz1=vbuc1 
    lda #<0
    sta.z c_1
    sta.z c_1+1
  // now it's save to change "01"
    // main::@8
  __b8:
    // for (c=0;c<2040;c+=1)
    // [20] if(main::c#11<$7f8) goto main::@9 -- vwuz1_lt_vwuc1_then_la1 
    lda.z c_1+1
    cmp #>$7f8
    bcs !__b9+
    jmp __b9
  !__b9:
    bne !+
    lda.z c_1
    cmp #<$7f8
    bcs !__b9+
    jmp __b9
  !__b9:
  !:
    // main::@10
    // *onePtr=0x35
    // [21] *((byte*) 1) = $35 -- _deref_pbuc1=vbuc2 
    lda #$35
    sta 1
    // vicPtr[0xd02]|=3
    // [22] *((byte*) 53248+$d02) = *((byte*) 53248+$d02) | 3 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    lda #3
    ora $d000+$d02
    sta $d000+$d02
    // vicPtr[0xd00]&=~3ub
    // [23] *((byte*) 53248+$d00) = *((byte*) 53248+$d00) & ~3 -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    lda #3^$ff
    and $d000+$d00
    sta $d000+$d00
    // main::@11
    // scrPtr[997]='P'-'A'+1
    // [24] *((byte*) 57344+$3e5) = 'P'-'A'+1 -- _deref_pbuc1=vbuc2 
    lda #'P'-'A'+1
    sta $e000+$3e5
    // scrPtr[998]='A'-'A'+1
    // [25] *((byte*) 57344+$3e6) = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta $e000+$3e6
    // scrPtr[999]='L'-'A'+1
    // [26] *((byte*) 57344+$3e7) = 'L'-'A'+1 -- _deref_pbuc1=vbuc2 
    lda #'L'-'A'+1
    sta $e000+$3e7
    // main::@1
    // scrPtr[975+0]='B'-'A'+1
    // [27] *((byte*) 57344+$3cf) = 'B'-'A'+1 -- _deref_pbuc1=vbuc2 
    lda #'B'-'A'+1
    sta $e000+$3cf
    // scrPtr[975+1]='U'-'A'+1
    // [28] *((byte*) 57344+$3cf+1) = 'U'-'A'+1 -- _deref_pbuc1=vbuc2 
    lda #'U'-'A'+1
    sta $e000+$3cf+1
    // scrPtr[975+2]='B'-'A'+1
    // [29] *((byte*) 57344+$3cf+2) = 'B'-'A'+1 -- _deref_pbuc1=vbuc2 
    lda #'B'-'A'+1
    sta $e000+$3cf+2
    // scrPtr[975+3]='B'-'A'+1
    // [30] *((byte*) 57344+$3cf+3) = 'B'-'A'+1 -- _deref_pbuc1=vbuc2 
    sta $e000+$3cf+3
    // scrPtr[975+4]='L'-'A'+1
    // [31] *((byte*) 57344+$3cf+4) = 'L'-'A'+1 -- _deref_pbuc1=vbuc2 
    lda #'L'-'A'+1
    sta $e000+$3cf+4
    // scrPtr[975+5]='E'-'A'+1
    // [32] *((byte*) 57344+$3cf+5) = 'E'-'A'+1 -- _deref_pbuc1=vbuc2 
    lda #'E'-'A'+1
    sta $e000+$3cf+5
    // scrPtr[975+6]='S'-'A'+1
    // [33] *((byte*) 57344+$3cf+6) = 'S'-'A'+1 -- _deref_pbuc1=vbuc2 
    lda #'S'-'A'+1
    sta $e000+$3cf+6
    // scrPtr[975+7]=':'
    // [34] *((byte*) 57344+$3cf+7) = ':' -- _deref_pbuc1=vbuc2 
    lda #':'
    sta $e000+$3cf+7
    // [35] phi from main::@1 to main::@12 [phi:main::@1->main::@12]
    // [35] phi main::type#4 = 0 [phi:main::@1->main::@12#0] -- vbuz1=vbuc1 
    lda #0
    sta.z type
    // [35] phi main::i#17 = 0 [phi:main::@1->main::@12#1] -- vbuxx=vbuc1 
    tax
    // main::@12
  __b12:
    // for (i=0;i<maxDrawObjects;i+=1)
    // [36] if(main::i#17<maxDrawObjects) goto main::@13 -- vbuxx_lt_vbuc1_then_la1 
    cpx #maxDrawObjects
    bcs !__b13+
    jmp __b13
  !__b13:
    // [37] phi from main::@12 to main::@16 [phi:main::@12->main::@16]
    // [37] phi main::oCount#17 = 0 [phi:main::@12->main::@16#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z oCount
    sta.z oCount+1
    // [37] phi main::stopIt#5 = 0 [phi:main::@12->main::@16#1] -- vbuz1=vbuc1 
    sta.z stopIt
    // [37] phi main::c#16 = 0 [phi:main::@12->main::@16#2] -- vwuz1=vbuc1 
    sta.z c_2
    sta.z c_2+1
    // [37] phi main::objects#9 = 0 [phi:main::@12->main::@16#3] -- vbuz1=vbuc1 
    sta.z objects
    // main::@16
  __b16:
    // [38] phi from main::@16 to main::@17 [phi:main::@16->main::@17]
    // [38] phi main::d#10 = dTab [phi:main::@16->main::@17#0] -- pssz1=pssc1 
    lda #<dTab
    sta.z d
    lda #>dTab
    sta.z d+1
    // [38] phi main::i#22 = 0 [phi:main::@16->main::@17#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
  // move objects
    // main::@17
  __b17:
    // for (i=0,d=dTab; i<objects ;i+=1,++d)
    // [39] if(main::i#22<main::objects#9) goto main::@18 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z objects
    bcs !__b18+
    jmp __b18
  !__b18:
    // main::@19
    // c+=1
    // [40] main::c#7 = main::c#16 + 1 -- vwuz1=vwuz1_plus_1 
    // activate new bubble?
    inc.z c_2
    bne !+
    inc.z c_2+1
  !:
    // if (c>=14)
    // [41] if(main::c#7<$e) goto main::@33 -- vwuz1_lt_vbuc1_then_la1 
    lda.z c_2+1
    bne !+
    lda.z c_2
    cmp #$e
    bcc __b36
  !:
    // main::@30
    // if (0==stopIt && objects<maxDrawObjects)
    // [42] if(0!=main::stopIt#5) goto main::@33 -- 0_neq_vbuz1_then_la1 
    lda.z stopIt
    cmp #0
    bne __b11
    // main::@42
    // [43] if(main::objects#9<maxDrawObjects) goto main::@31 -- vbuz1_lt_vbuc1_then_la1 
    lda.z objects
    cmp #maxDrawObjects
    bcc __b31
    // [44] phi from main::@42 main::@43 to main::@33 [phi:main::@42/main::@43->main::@33]
    jmp __b36
    // [44] phi from main::@19 to main::@33 [phi:main::@19->main::@33]
    // [44] phi main::c#18 = main::c#7 [phi:main::@19->main::@33#0] -- register_copy 
    // [44] phi main::objects#12 = main::objects#9 [phi:main::@19->main::@33#1] -- register_copy 
    // [44] phi from main::@30 main::@41 to main::@33 [phi:main::@30/main::@41->main::@33]
  __b11:
    // [44] phi main::c#18 = 0 [phi:main::@30/main::@41->main::@33#0] -- vwuz1=vbuc1 
    lda #<0
    sta.z c_2
    sta.z c_2+1
    // [44] phi main::objects#12 = main::objects#9 [phi:main::@30/main::@41->main::@33#1] -- register_copy 
    // main::@33
    // main::@36
  __b36:
    // if (oCount>0)
    // [45] if(main::oCount#17<=0) goto main::@34 -- vwuz1_le_0_then_la1 
    lda.z oCount
    bne !+
    lda.z oCount+1
    beq __b34
  !:
    // main::@37
    // oCount-=1
    // [46] main::oCount#2 = main::oCount#17 - 1 -- vwuz1=vwuz1_minus_1 
    lda.z oCount
    sec
    sbc #1
    sta.z oCount
    lda.z oCount+1
    sbc #0
    sta.z oCount+1
    // [47] phi from main::@36 main::@37 to main::@34 [phi:main::@36/main::@37->main::@34]
    // [47] phi main::oCount#7 = main::oCount#17 [phi:main::@36/main::@37->main::@34#0] -- register_copy 
    // main::@34
  __b34:
    // if (oCount>2 && objects>0)
    // [48] if(main::oCount#7<2+1) goto main::@35 -- vwuz1_lt_vbuc1_then_la1 
    lda.z oCount+1
    bne !+
    lda.z oCount
    cmp #2+1
    bcc __b35
  !:
    // main::@44
    // [49] if(main::objects#12>0) goto main::@38 -- vbuz1_gt_0_then_la1 
    lda.z objects
    bne __b38
    // [53] phi from main::@44 to main::@35 [phi:main::@44->main::@35]
    jmp __b35
    // main::@38
  __b38:
    // objects-=1
    // [50] main::objects#15 = main::objects#12 - 1 -- vbuz1=vbuz1_minus_1 
    dec.z objects
    // DelSprite(objects)
    // [51] DelSprite::sn#0 = main::objects#15 -- vbuxx=vbuz1 
    ldx.z objects
    // [52] call DelSprite 
    jsr DelSprite
    // [53] phi from main::@38 to main::@35 [phi:main::@38->main::@35]
    // [53] phi main::oCount#20 = 0 [phi:main::@38->main::@35#0] -- vwuz1=vbuc1 
    lda #<0
    sta.z oCount
    sta.z oCount+1
    // [53] phi main::stopIt#15 = 1 [phi:main::@38->main::@35#1] -- vbuz1=vbuc1 
    lda #1
    sta.z stopIt
    // [53] phi main::objects#17 = main::objects#15 [phi:main::@38->main::@35#2] -- register_copy 
    // [53] phi from main::@34 to main::@35 [phi:main::@34->main::@35]
    // [53] phi main::oCount#20 = main::oCount#7 [phi:main::@34->main::@35#0] -- register_copy 
    // [53] phi main::stopIt#15 = main::stopIt#5 [phi:main::@34->main::@35#1] -- register_copy 
    // [53] phi main::objects#17 = main::objects#12 [phi:main::@34->main::@35#2] -- register_copy 
    // main::@35
  __b35:
    // Print00(scr+(char*)983,objects)
    // [54] Print00::v0#0 = main::objects#17 -- vbuxx=vbuz1 
    ldx.z objects
    // [55] call Print00 
    // [117] phi from main::@35 to Print00 [phi:main::@35->Print00]
    jsr Print00
    // [37] phi from main::@35 to main::@16 [phi:main::@35->main::@16]
    // [37] phi main::oCount#17 = main::oCount#20 [phi:main::@35->main::@16#0] -- register_copy 
    // [37] phi main::stopIt#5 = main::stopIt#15 [phi:main::@35->main::@16#1] -- register_copy 
    // [37] phi main::c#16 = main::c#18 [phi:main::@35->main::@16#2] -- register_copy 
    // [37] phi main::objects#9 = main::objects#17 [phi:main::@35->main::@16#3] -- register_copy 
    jmp __b16
    // main::@31
  __b31:
    // objects+=1
    // [56] main::objects#1 = main::objects#9 + 1 -- vbuz1=vbuz1_plus_1 
    inc.z objects
    // GetSprite()
    // [57] call GetSprite 
    // [129] phi from main::@31 to GetSprite [phi:main::@31->GetSprite]
    jsr GetSprite
    // GetSprite()
    // [58] GetSprite::return#4 = GetSprite::return#2
    // main::@40
    // i=GetSprite()
    // [59] main::i#11 = GetSprite::return#4
    // main::@43
    // if (0==preset && (i=GetSprite())<128)
    // [60] if(main::i#11<$80) goto main::@32 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$80
    bcc __b32
    jmp __b36
    // main::@32
  __b32:
    // AddSprite(i)
    // [61] AddSprite::sn#1 = main::i#11
    // [62] call AddSprite 
    jsr AddSprite
    // main::@41
    // cmRY[i]=0
    // [63] cmRY[main::i#11] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta cmRY,x
    // cmRF[i]=cmRY[i]=0
    // [64] cmRF[main::i#11] = cmRY[main::i#11] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda cmRY,x
    sta cmRF,x
    // cmRX[i]=cmRF[i]=cmRY[i]=0
    // [65] cmRX[main::i#11] = cmRF[main::i#11] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda cmRF,x
    sta cmRX,x
    // cmSI[i]=cmRX[i]=cmRF[i]=cmRY[i]=0
    // [66] cmSI[main::i#11] = cmRX[main::i#11] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda cmRX,x
    sta cmSI,x
    jmp __b11
    // main::@18
  __b18:
    // d->vx+=d->ax
    // [67] ((signed byte*)main::d#10)[5] = ((signed byte*)main::d#10)[5] + ((signed byte*)main::d#10)[7] -- pbsz1_derefidx_vbuc1=pbsz1_derefidx_vbuc1_plus_pbsz1_derefidx_vbuc2 
    ldy #7
    lda (d),y
    ldy #5
    tax
    lda (d),y
    stx.z $ff
    clc
    adc.z $ff
    sta (d),y
    // if (d->vx<-32)
    // [68] if(((signed byte*)main::d#10)[5]<-$20) goto main::@20 -- pbsz1_derefidx_vbuc1_lt_vbsc2_then_la1 
    lda (d),y
    sec
    sbc #-$20
    bvc !+
    eor #$80
  !:
    bpl !__b20+
    jmp __b20
  !__b20:
    // main::@25
    // if (d->vx>32)
    // [69] if(((signed byte*)main::d#10)[5]<$20+1) goto main::@21 -- pbsz1_derefidx_vbuc1_lt_vbsc2_then_la1 
    ldy #5
    lda (d),y
    sec
    sbc #$20+1
    bvc !+
    eor #$80
  !:
    bmi __b21
    // main::@26
    // d->ax=-1
    // [70] ((signed byte*)main::d#10)[7] = -1 -- pbsz1_derefidx_vbuc1=vbsc2 
    lda #-1
    ldy #7
    sta (d),y
    // main::@21
  __b21:
    // if (d->y>248<<F)
    // [71] if(((signed word*)main::d#10)[3]>(signed word)$f8<<F) goto main::@22 -- pwsz1_derefidx_vbuc1_gt_vwsc2_then_la1 
    ldy #3
    lda #<$f8<<F
    cmp (d),y
    iny
    lda #>$f8<<F
    sbc (d),y
    bvc !+
    eor #$80
  !:
    bpl !__b22+
    jmp __b22
  !__b22:
  !e:
    // main::@27
    // if (d->y<24<<F)
    // [72] if(((signed word*)main::d#10)[3]>=(signed word)$18<<F) goto main::@23 -- pwsz1_derefidx_vbuc1_ge_vwsc2_then_la1 
    ldy #3
    lda (d),y
    cmp #<$18<<F
    iny
    lda (d),y
    sbc #>$18<<F
    bvc !+
    eor #$80
  !:
    bpl __b23
    // main::@28
    // d->vy=1<<F
    // [73] ((signed byte*)main::d#10)[6] = (signed byte)1<<F -- pbsz1_derefidx_vbuc1=vbsc2 
    lda #1<<F
    ldy #6
    sta (d),y
    // main::@23
  __b23:
    // d->x+=d->vx
    // [74] ((signed word*)main::d#10)[1] = ((signed word*)main::d#10)[1] + ((signed byte*)main::d#10)[5] -- pwsz1_derefidx_vbuc1=pwsz1_derefidx_vbuc1_plus_pbsz1_derefidx_vbuc2 
    ldy #5
    lda (d),y
    sta.z $fe
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z $ff
    ldy #1
    clc
    lda (d),y
    adc.z $fe
    sta (d),y
    iny
    lda (d),y
    adc.z $fe
    sta (d),y
    // d->y+=d->vy
    // [75] ((signed word*)main::d#10)[3] = ((signed word*)main::d#10)[3] + ((signed byte*)main::d#10)[6] -- pwsz1_derefidx_vbuc1=pwsz1_derefidx_vbuc1_plus_pbsz1_derefidx_vbuc2 
    ldy #6
    lda (d),y
    sta.z $fe
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z $ff
    ldy #3
    clc
    lda (d),y
    adc.z $fe
    sta (d),y
    iny
    lda (d),y
    adc.z $fe
    sta (d),y
    // if (cmRF[i]<128)
    // [76] if(cmRF[main::i#22]>=$80) goto main::@24 -- pbuc1_derefidx_vbuz1_ge_vbuc2_then_la1 
    ldy.z i
    lda cmRF,y
    cmp #$80
    bcs __b24
    // main::@29
    // cmSI[i]=d->s
    // [77] cmSI[main::i#22] = *((byte*)main::d#10) -- pbuc1_derefidx_vbuz1=_deref_pbuz2 
    ldy #0
    lda (d),y
    ldy.z i
    sta cmSI,y
    // d->x>>F
    // [78] main::$27 = ((signed word*)main::d#10)[1] >> F -- vwsz1=pwsz2_derefidx_vbuc1_ror_vbuc2 
    ldx #F
    ldy #1
    lda (d),y
    sta.z __27
    iny
    lda (d),y
    sta.z __27+1
    cpx #0
    beq !e+
  !:
    lda.z __27+1
    cmp #$80
    ror.z __27+1
    ror.z __27
    dex
    bne !-
  !e:
    // cmRX[i]=(ubyte)(d->x>>F)
    // [79] cmRX[main::i#22] = (byte)main::$27 -- pbuc1_derefidx_vbuz1=_byte_vwsz2 
    ldy.z i
    lda.z __27
    sta cmRX,y
    // d->y>>F
    // [80] main::$28 = ((signed word*)main::d#10)[3] >> F -- vwsz1=pwsz2_derefidx_vbuc1_ror_vbuc2 
    ldx #F
    ldy #3
    lda (d),y
    sta.z __28
    iny
    lda (d),y
    sta.z __28+1
    cpx #0
    beq !e+
  !:
    lda.z __28+1
    cmp #$80
    ror.z __28+1
    ror.z __28
    dex
    bne !-
  !e:
    // cmRY[i]=(ubyte)(d->y>>F)
    // [81] cmRY[main::i#22] = (byte)main::$28 -- pbuc1_derefidx_vbuz1=_byte_vwsz2 
    ldy.z i
    lda.z __28
    sta cmRY,y
    // main::@24
  __b24:
    // for (i=0,d=dTab; i<objects ;i+=1,++d)
    // [82] main::d#2 = main::d#10 + 9 -- pssz1=pssz1_plus_vbuc1 
    lda #9
    clc
    adc.z d
    sta.z d
    bcc !+
    inc.z d+1
  !:
    // i+=1
    // [83] main::i#9 = main::i#22 + 1 -- vbuz1=vbuz1_plus_1 
    inc.z i
    // [38] phi from main::@24 to main::@17 [phi:main::@24->main::@17]
    // [38] phi main::d#10 = main::d#2 [phi:main::@24->main::@17#0] -- register_copy 
    // [38] phi main::i#22 = main::i#9 [phi:main::@24->main::@17#1] -- register_copy 
    jmp __b17
    // main::@22
  __b22:
    // d->vy=-1<<F
    // [84] ((signed byte*)main::d#10)[6] = (signed byte)-1<<F -- pbsz1_derefidx_vbuc1=vbsc2 
    lda #-1<<F
    ldy #6
    sta (d),y
    jmp __b23
    // main::@20
  __b20:
    // d->ax=1
    // [85] ((signed byte*)main::d#10)[7] = 1 -- pbsz1_derefidx_vbuc1=vbsc2 
    lda #1
    ldy #7
    sta (d),y
    jmp __b21
    // main::@13
  __b13:
    // &dTab[i]
    // [86] main::$132 = main::i#17 << 3 -- vbuaa=vbuxx_rol_3 
    txa
    asl
    asl
    asl
    // [87] main::$52 = main::$132 + main::i#17 -- vbuaa=vbuaa_plus_vbuxx 
    stx.z $ff
    clc
    adc.z $ff
    // d=&dTab[i]
    // [88] main::d1#0 = dTab + main::$52 -- pssz1=pssc1_plus_vbuaa 
    clc
    adc #<dTab
    sta.z d1
    lda #>dTab
    adc #0
    sta.z d1+1
    // d->s=type
    // [89] *((byte*)main::d1#0) = main::type#4 -- _deref_pbuz1=vbuz2 
    lda.z type
    ldy #0
    sta (d1),y
    // type+=1
    // [90] main::type#2 = main::type#4 + 1 -- vbuz1=vbuz1_plus_1 
    inc.z type
    // if (type>=6)
    // [91] if(main::type#2<6) goto main::@45 -- vbuz1_lt_vbuc1_then_la1 
    lda.z type
    cmp #6
    bcc __b14
    // [93] phi from main::@13 to main::@14 [phi:main::@13->main::@14]
    // [93] phi main::type#10 = 0 [phi:main::@13->main::@14#0] -- vbuz1=vbuc1 
    tya
    sta.z type
    // [92] phi from main::@13 to main::@45 [phi:main::@13->main::@45]
    // main::@45
    // [93] phi from main::@45 to main::@14 [phi:main::@45->main::@14]
    // [93] phi main::type#10 = main::type#2 [phi:main::@45->main::@14#0] -- register_copy 
    // main::@14
  __b14:
    // d->x=112<<F
    // [94] ((signed word*)main::d1#0)[1] = (signed word)$70<<F -- pwsz1_derefidx_vbuc1=vwsc2 
    ldy #1
    lda #<$70<<F
    sta (d1),y
    iny
    lda #>$70<<F
    sta (d1),y
    // d->vx=(sbyte)i
    // [95] ((signed byte*)main::d1#0)[5] = (signed byte)main::i#17 -- pbsz1_derefidx_vbuc1=vbsxx 
    ldy #5
    txa
    sta (d1),y
    // d->ax=1
    // [96] ((signed byte*)main::d1#0)[7] = 1 -- pbsz1_derefidx_vbuc1=vbsc2 
    lda #1
    ldy #7
    sta (d1),y
    // d->y=24<<F
    // [97] ((signed word*)main::d1#0)[3] = (signed word)$18<<F -- pwsz1_derefidx_vbuc1=vwsc2 
    ldy #3
    lda #<$18<<F
    sta (d1),y
    iny
    lda #>$18<<F
    sta (d1),y
    // d->vy=1<<F
    // [98] ((signed byte*)main::d1#0)[6] = (signed byte)1<<F -- pbsz1_derefidx_vbuc1=vbsc2 
    lda #1<<F
    ldy #6
    sta (d1),y
    // d->ay=1
    // [99] ((signed byte*)main::d1#0)[8] = 1 -- pbsz1_derefidx_vbuc1=vbsc2 
    lda #1
    ldy #8
    sta (d1),y
    // main::@15
    // i+=1
    // [100] main::i#7 = main::i#17 + 1 -- vbuxx=vbuxx_plus_1 
    inx
    // [35] phi from main::@15 to main::@12 [phi:main::@15->main::@12]
    // [35] phi main::type#4 = main::type#10 [phi:main::@15->main::@12#0] -- register_copy 
    // [35] phi main::i#17 = main::i#7 [phi:main::@15->main::@12#1] -- register_copy 
    jmp __b12
    // main::@9
  __b9:
    // chrPtr[c]=vicPtr[c]
    // [101] main::$111 = (byte*) 53248 + main::c#11 -- pbuz1=pbuc1_plus_vwuz2 
    clc
    lda.z c_1
    adc #<$d000
    sta.z __111
    lda.z c_1+1
    adc #>$d000
    sta.z __111+1
    // [102] main::$112 = (byte*) 63488 + main::c#11 -- pbuz1=pbuc1_plus_vwuz2 
    clc
    lda.z c_1
    adc #<$f800
    sta.z __112
    lda.z c_1+1
    adc #>$f800
    sta.z __112+1
    // [103] *main::$112 = *main::$111 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (__111),y
    sta (__112),y
    // c+=1
    // [104] main::c#4 = main::c#11 + 1 -- vwuz1=vwuz1_plus_1 
    inc.z c_1
    bne !+
    inc.z c_1+1
  !:
    // [19] phi from main::@9 to main::@8 [phi:main::@9->main::@8]
    // [19] phi main::c#11 = main::c#4 [phi:main::@9->main::@8#0] -- register_copy 
    jmp __b8
    // main::@7
  __b7:
    // scrPtr[c]=32
    // [105] main::$109 = (byte*) 57344 + main::c#10 -- pbuz1=pbuc1_plus_vwuz2 
    clc
    lda.z c
    adc #<$e000
    sta.z __109
    lda.z c+1
    adc #>$e000
    sta.z __109+1
    // [106] *main::$109 = $20 -- _deref_pbuz1=vbuc1 
    lda #$20
    ldy #0
    sta (__109),y
    // colPtr[c]=14
    // [107] main::$110 = (byte*) 55296 + main::c#10 -- pbuz1=pbuc1_plus_vwuz2 
    clc
    lda.z c
    adc #<$d800
    sta.z __110
    lda.z c+1
    adc #>$d800
    sta.z __110+1
    // [108] *main::$110 = $e -- _deref_pbuz1=vbuc1 
    lda #$e
    sta (__110),y
    // c+=1
    // [109] main::c#2 = main::c#10 + 1 -- vwuz1=vwuz1_plus_1 
    inc.z c
    bne !+
    inc.z c+1
  !:
    // [16] phi from main::@7 to main::@6 [phi:main::@7->main::@6]
    // [16] phi main::c#10 = main::c#2 [phi:main::@7->main::@6#0] -- register_copy 
    jmp __b6
    // main::@5
  __b5:
    // cmRF[i]=255
    // [110] cmRF[main::i#14] = $ff -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$ff
    sta cmRF,x
    // i+=1
    // [111] main::i#4 = main::i#14 + 1 -- vbuxx=vbuxx_plus_1 
    inx
    // [14] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
    // [14] phi main::i#14 = main::i#4 [phi:main::@5->main::@4#0] -- register_copy 
    jmp __b4
    // main::@3
  __b3:
    // cmIT[i]=255
    // [112] cmIT[main::i#12] = $ff -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$ff
    sta cmIT,x
    // i+=1
    // [113] main::i#2 = main::i#12 + 1 -- vbuxx=vbuxx_plus_1 
    inx
    // [12] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
    // [12] phi main::i#12 = main::i#2 [phi:main::@3->main::@2#0] -- register_copy 
    jmp __b2
}
  // DelSprite
// DelSprite(byte register(X) sn)
DelSprite: {
    // cmRY[sn]=255
    // [114] cmRY[DelSprite::sn#0] = $ff -- pbuc1_derefidx_vbuxx=vbuc2 
    // drop sprite, will be removed from IT in IRQ
    lda #$ff
    sta cmRY,x
    // cmRF[sn]=rfDrop
    // [115] cmRF[DelSprite::sn#0] = rfDrop -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #rfDrop
    sta cmRF,x
    // DelSprite::@return
    // }
    // [116] return 
    rts
}
  // Print00
// Print00(byte register(X) v0)
Print00: {
    // [118] phi from Print00 to Print00::@1 [phi:Print00->Print00::@1]
    // [118] phi Print00::c#5 = '0' [phi:Print00->Print00::@1#0] -- vbuyy=vbuc1 
    ldy #'0'
    // [118] phi Print00::v#3 = Print00::v0#0 [phi:Print00->Print00::@1#1] -- register_copy 
    // Print00::@1
  __b1:
    // while (v>=10)
    // [119] if(Print00::v#3>=$a) goto Print00::@2 -- vbuxx_ge_vbuc1_then_la1 
    cpx #$a
    bcs __b2
    // Print00::@3
    // *p++=c
    // [120] *($e000+(byte*) 983) = Print00::c#5 -- _deref_pbuc1=vbuyy 
    sty $e000+$3d7
    // [121] phi from Print00::@3 to Print00::@4 [phi:Print00::@3->Print00::@4]
    // [121] phi Print00::c#10 = '0' [phi:Print00::@3->Print00::@4#0] -- vbuyy=vbuc1 
    ldy #'0'
    // [121] phi Print00::v#5 = Print00::v#3 [phi:Print00::@3->Print00::@4#1] -- register_copy 
    // Print00::@4
  __b4:
    // while (v>=1)
    // [122] if(Print00::v#5>=1) goto Print00::@5 -- vbuxx_ge_vbuc1_then_la1 
    cpx #1
    bcs __b5
    // Print00::@6
    // *p++=c
    // [123] *($e000+(byte*) 983+1) = Print00::c#10 -- _deref_pbuc1=vbuyy 
    sty $e000+$3d7+1
    // Print00::@return
    // }
    // [124] return 
    rts
    // Print00::@5
  __b5:
    // ++c;
    // [125] Print00::c#4 = ++ Print00::c#10 -- vbuyy=_inc_vbuyy 
    iny
    // v-=1
    // [126] Print00::v#2 = Print00::v#5 - 1 -- vbuxx=vbuxx_minus_1 
    dex
    // [121] phi from Print00::@5 to Print00::@4 [phi:Print00::@5->Print00::@4]
    // [121] phi Print00::c#10 = Print00::c#4 [phi:Print00::@5->Print00::@4#0] -- register_copy 
    // [121] phi Print00::v#5 = Print00::v#2 [phi:Print00::@5->Print00::@4#1] -- register_copy 
    jmp __b4
    // Print00::@2
  __b2:
    // ++c;
    // [127] Print00::c#2 = ++ Print00::c#5 -- vbuyy=_inc_vbuyy 
    iny
    // v-=10
    // [128] Print00::v#1 = Print00::v#3 - $a -- vbuxx=vbuxx_minus_vbuc1 
    txa
    axs #$a
    // [118] phi from Print00::@2 to Print00::@1 [phi:Print00::@2->Print00::@1]
    // [118] phi Print00::c#5 = Print00::c#2 [phi:Print00::@2->Print00::@1#0] -- register_copy 
    // [118] phi Print00::v#3 = Print00::v#1 [phi:Print00::@2->Print00::@1#1] -- register_copy 
    jmp __b1
}
  // GetSprite
// sprite support functions
//
GetSprite: {
    // [130] phi from GetSprite to GetSprite::@1 [phi:GetSprite->GetSprite::@1]
    // [130] phi GetSprite::t0#3 = 0 [phi:GetSprite->GetSprite::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // GetSprite::@1
  __b1:
    // for (t0=0;t0<maxSprites;++t0)
    // [131] if(GetSprite::t0#3<maxSprites) goto GetSprite::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #maxSprites
    bcc __b2
    // [132] phi from GetSprite::@1 to GetSprite::@return [phi:GetSprite::@1->GetSprite::@return]
    // [132] phi GetSprite::return#2 = $ff [phi:GetSprite::@1->GetSprite::@return#0] -- vbuxx=vbuc1 
    ldx #$ff
    // GetSprite::@return
    // }
    // [133] return 
    rts
    // GetSprite::@2
  __b2:
    // if (cmRF[t0]>=rfDrop)
    // [134] if(cmRF[GetSprite::t0#3]<rfDrop) goto GetSprite::@3 -- pbuc1_derefidx_vbuxx_lt_vbuc2_then_la1 
    lda cmRF,x
    cmp #rfDrop
    bcc __b3
    // GetSprite::@4
    // cmRF[t0]=0
    // [135] cmRF[GetSprite::t0#3] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta cmRF,x
    // [132] phi from GetSprite::@4 to GetSprite::@return [phi:GetSprite::@4->GetSprite::@return]
    // [132] phi GetSprite::return#2 = GetSprite::t0#3 [phi:GetSprite::@4->GetSprite::@return#0] -- register_copy 
    rts
    // GetSprite::@3
  __b3:
    // for (t0=0;t0<maxSprites;++t0)
    // [136] GetSprite::t0#2 = ++ GetSprite::t0#3 -- vbuxx=_inc_vbuxx 
    inx
    // [130] phi from GetSprite::@3 to GetSprite::@1 [phi:GetSprite::@3->GetSprite::@1]
    // [130] phi GetSprite::t0#3 = GetSprite::t0#2 [phi:GetSprite::@3->GetSprite::@1#0] -- register_copy 
    jmp __b1
}
  // AddSprite
// AddSprite(byte register(X) sn)
AddSprite: {
    // if (rfDrop==cmRF[sn])
    // [137] if(rfDrop==cmRF[AddSprite::sn#1]) goto AddSprite::@1 -- vbuc1_eq_pbuc2_derefidx_vbuxx_then_la1 
    lda cmRF,x
    cmp #rfDrop
    beq __b1
    // [138] phi from AddSprite to AddSprite::@2 [phi:AddSprite->AddSprite::@2]
    // [138] phi AddSprite::t0#3 = 0 [phi:AddSprite->AddSprite::@2#0] -- vbuyy=vbuc1 
    ldy #0
    // AddSprite::@2
  __b2:
    // for
    // 		(t0=0;t0<maxSprites;t0+=1)
    // [139] if(AddSprite::t0#3<maxSprites) goto AddSprite::@3 -- vbuyy_lt_vbuc1_then_la1 
    cpy #maxSprites
    bcc __b3
    // AddSprite::@return
    // }
    // [140] return 
    rts
    // AddSprite::@3
  __b3:
    // if (cmIT[t0]>=128)
    // [141] if(cmIT[AddSprite::t0#3]<$80) goto AddSprite::@4 -- pbuc1_derefidx_vbuyy_lt_vbuc2_then_la1 
    lda cmIT,y
    cmp #$80
    bcc __b4
    // AddSprite::@5
    // cmRF[sn]=0
    // [142] cmRF[AddSprite::sn#1] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta cmRF,x
    // cmIT[t0]=sn
    // [143] cmIT[AddSprite::t0#3] = AddSprite::sn#1 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta cmIT,y
    rts
    // AddSprite::@4
  __b4:
    // t0+=1
    // [144] AddSprite::t0#2 = AddSprite::t0#3 + 1 -- vbuyy=vbuyy_plus_1 
    iny
    // [138] phi from AddSprite::@4 to AddSprite::@2 [phi:AddSprite::@4->AddSprite::@2]
    // [138] phi AddSprite::t0#3 = AddSprite::t0#2 [phi:AddSprite::@4->AddSprite::@2#0] -- register_copy 
    jmp __b2
    // AddSprite::@1
  __b1:
    // cmRF[sn]=0
    // [145] cmRF[AddSprite::sn#1] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta cmRF,x
    rts
}
  // File Data
  lcSprMapTab: .fill maxSprImages, 0
  lcSprColTab: .fill maxC64Images, 0
  cmIT: .fill maxSprites+1, 0
  cmSI: .fill maxSprites, 0
  cmRX: .fill maxSprites, 0
  cmRY: .fill maxSprites, 0
  cmRF: .fill maxSprites, 0
  dTab: .fill 9*maxDrawObjects, 0

