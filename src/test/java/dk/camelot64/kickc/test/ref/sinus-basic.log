PARSING src/test/java/dk/camelot64/kickc/test/sinus-basic.kc
import "print"
import "basic-floats"

void main() {
    byte[] f_i = {0, 0, 0, 0, 0};
    byte[] f_127 = {0, 0, 0, 0, 0};
    const byte* f_2pi = $e2e5;
    setFAC(1275);
    divFACby10();
    setMEMtoFAC(f_127);
    for(byte i : 1..25) {
        setFAC((word)i);
        mulFACbyMEM(f_2pi);
        setMEMtoFAC(f_i);
        setFAC(25);
        divMEMbyFAC(f_i);
        sinFAC();
        mulFACbyMEM(f_127);
        addMEMtoFAC(f_127);
        print_word(getFAC());
        print_ln();
    }
}

Importing print
PARSING src/test/java/dk/camelot64/kickc/test/print.kc

byte* line_cursor = $0400;
byte* char_cursor = line_cursor;

// Print a zero-terminated string
void print_str(byte* str) {
    while(*str!='@') {
        *(char_cursor++) = *(str++);
    }
}

// Print a newline
void print_ln() {
    do {
        line_cursor = line_cursor + $28;
    } while (line_cursor<char_cursor);
    char_cursor = line_cursor;
}

// Print a signed word as HEX
void print_sword(signed word w) {
    if(w<0) {
        print_char('-');
        w = -w;
    }
    print_word((word)w);
}

// Print a signed byte as HEX
void print_sbyte(signed byte b) {
    if(b<0) {
        print_char('-');
        b = -b;
    }
    print_byte((byte)b);
}

// Print a word as HEX
void print_word(word w) {
    print_byte(>w);
    print_byte(<w);
}

// Print a byte as HEX
void print_byte(byte b) {
    // Table of hexadecimal digits
    const byte[] hextab = "0123456789abcdef";
    print_char(hextab[b>>4]);
    print_char(hextab[b&$f]);
}

// Print a single char
void print_char(byte ch) {
    *(char_cursor++) = ch;
}

// Clear the screen
void print_cls() {
    for(byte* sc=$0400; sc!=$0400+1000; sc++) {
        *sc = ' ';
    }
}



Adding pre/post-modifier (byte*) char_cursor ← ++ (byte*) char_cursor
Adding pre/post-modifier (byte*) print_str::str ← ++ (byte*) print_str::str
Adding pre/post-modifier (byte*) char_cursor ← ++ (byte*) char_cursor
Adding pre/post-modifier (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
Importing basic-floats
PARSING src/test/java/dk/camelot64/kickc/test/basic-floats.kc
// Library wrapping the BASIC floating point functions
// See https://www.c64-wiki.com/wiki/Floating_point_arithmetic
// See http://www.pagetable.com/c64rom/c64rom_sc.html

// Zeropage addresses used to hold lo/hi-bytes of addresses of float numbers in MEM
const byte* memLo = $fe;
const byte* memHi = $ff;

// Prepare MEM pointers for operations using MEM
void prepareMEM(byte* mem) {
    *memLo = <mem;
    *memHi = >mem;
}

// FAC = word
// Set the FAC (floating point accumulator) to the integer value of a 16bit word
void setFAC(word w) {
    prepareMEM((byte*)w);
    // Load word register Y,A into FAC (floating point accumulator)
    asm {
        ldy $fe
        lda $ff
        jsr $b391
    }
}

// word = FAC
// Get the value of the FAC (floating point accumulator) as an integer 16bit word
// Destroys the value in the FAC in the process
word getFAC() {
    // Load FAC (floating point accumulator) integer part into word register Y,A
    asm {
        jsr $b1aa
        sty $fe
        sta $ff
    }
    word w = { *memHi, *memLo};
    return w;
}

// ARG = FAC
// Set the ARG (floating point argument) to the value of the FAC (floating point accumulator)
void setARGtoFAC() {
    asm {
        jsr $bc0f
    }
}

// FAC = ARG
// Set the FAC (floating point accumulator) to the value of the ARG (floating point argument)
void setFACtoARG() {
    asm {
        jsr $bbfc
    }
}

// MEM = FAC
// Stores the value of the FAC to memory
// Stores 5 bytes (means it is necessary to allocate 5 bytes to avoid clobbering other data using eg. byte[] mem = {0, 0, 0, 0, 0};)
void setMEMtoFAC(byte* mem) {
    prepareMEM(mem);
    asm {
        ldx $fe
        ldy $ff
        jsr $bbd4
    }
}

// FAC = MEM
// Set the FAC to value from MEM (float saved in memory)
// Reads 5 bytes
void setFACtoMEM(byte* mem) {
    prepareMEM(mem);
    asm {
        lda $fe
        ldy $ff
        jsr $bba2
    }
}

// FAC = PI/2
// Set the FAC to PI/2
// Reads 5 bytes from the BASIC ROM
void setFACtoPIhalf() {
    asm {
        lda #$e0
        ldy #$e2
        jsr $bba2
    }
}

// FAC = 2*PI
// Set the FAC to 2*PI
// Reads 5 bytes from the BASIC ROM
void setFACto2PI() {
    asm {
        lda #$e5
        ldy #$e2
        jsr $bba2
    }
}

// ARG = MEM
// Load the ARG from memory
// Reads 5 bytes
void setARGtoMEM(byte* mem) {
    prepareMEM(mem);
    asm {
        lda $fe
        ldy $ff
        jsr $ba8c
    }
}

// FAC = MEM+FAC
// Set FAC to MEM (float saved in memory) plus FAC (float accumulator)
// Reads 5 bytes from memory
void addMEMtoFAC(byte* mem) {
    prepareMEM(mem);
    asm {
        lda $fe //memLo
        ldy $ff //memHi
        jsr $b867
    }
}

// FAC = ARG+FAC
// Add ARG (floating point argument) to FAC (floating point accumulator)
void addARGtoFAC() {
    asm {
        jsr $b86a
    }
}

// FAC = MEM-FAC
// Set FAC to MEM (float saved in memory) minus FAC (float accumulator)
// Reads 5 bytes from memory
void subFACfromMEM(byte* mem) {
    prepareMEM(mem);
    asm {
        lda $fe
        ldy $ff
        jsr $b850
    }
}

// FAC = ARG-FAC
// Set FAC to ARG minus FAC
void subFACfromARG() {
    asm {
        jsr $b853
    }
}

// FAC = MEM/FAC
// Set FAC to MEM (float saved in memory) divided by FAC (float accumulator)
// Reads 5 bytes from memory
void divMEMbyFAC(byte* mem) {
    prepareMEM(mem);
    asm {
        lda $fe
        ldy $ff
        jsr $bb0f
    }
}

// FAC = MEM*FAC
// Set FAC to MEM (float saved in memory) multiplied by FAC (float accumulator)
// Reads 5 bytes from memory
void mulFACbyMEM(byte* mem) {
    prepareMEM(mem);
    asm {
        lda $fe
        ldy $ff
        jsr $ba28
    }
}

// FAC = MEM^FAC
// Set FAC to MEM (float saved in memory) raised to power of FAC (float accumulator)
// Reads 5 bytes from memory
void pwrMEMbyFAC(byte* mem) {
    prepareMEM(mem);
    asm {
        lda $fe
        ldy $ff
        jsr $bf78
    }
}

// FAC = int(FAC)
// Set FAC to integer part of the FAC - int(FAC)
// The integer part is defined as the next lower integer - like java floor()
void intFAC() {
    asm {
        jsr $bccc
    }
}

// FAC = sin(FAC)
// Set FAC to sinus of the FAC - sin(FAC)
// Sinus is calculated on radians (0-2*PI)
void sinFAC() {
    asm {
        jsr $e26b
    }
}

// FAC = cos(FAC)
// Set FAC to cosinus of the FAC - cos(FAC)
// Cosinus is calculated on radians (0-2*PI)
void cosFAC() {
    asm {
        jsr $e264
    }
}

// FAC = tan(FAC)
// Set FAC to the tangens of FAC - tan(FAC)
// Tangens is calculated on radians (0-2*PI)
void tanFAC() {
    asm {
        jsr $e2b4
    }
}

// FAC = atn(FAC)
// Set FAC to the arc tangens of FAC - atn(FAC)
// Arc Tangens is calculated on radians (0-2*PI)
void atnFAC() {
    asm {
        jsr $e303
    }
}

// FAC = sqr(FAC)
// Set FAC to the square root of FAC - sqr(FAC)
void sqrFAC() {
    asm {
        jsr $bf71
    }
}

// FAC = exp(FAC)
// Set FAC to the exponential function of FAC - exp(FAC)
// Exp is based on the natural logarithm e=2.71828183
void expFAC() {
    asm {
        jsr $bfed
    }
}

// FAC = log(FAC)
// Set FAC to the logarithm of FAC - log(FAC)
// Log is based on the natural logarithm e=2.71828183
void logFAC() {
    asm {
        jsr $b9ea
    }
}

// FAC = FAC/10
// Set FAC to FAC divided by 10
void divFACby10() {
    asm {
        jsr $bafe
    }
}

// FAC = FAC*10
// Set FAC to FAC multiplied by 10
void mulFACby10() {
    asm {
        jsr $bae2
    }
}


STATEMENTS
  (byte*) line_cursor ← (word/signed word) 1024
  (byte*) char_cursor ← (byte*) line_cursor
proc (void()) print_str((byte*) print_str::str)
print_str::@1:
  (boolean~) print_str::$0 ← *((byte*) print_str::str) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  goto print_str::@3
print_str::@2:
  *((byte*) char_cursor) ← *((byte*) print_str::str)
  (byte*) char_cursor ← ++ (byte*) char_cursor
  (byte*) print_str::str ← ++ (byte*) print_str::str
  goto print_str::@1
print_str::@3:
print_str::@return:
  return 
endproc // print_str()
proc (void()) print_ln()
print_ln::@1:
  (byte*~) print_ln::$0 ← (byte*) line_cursor + (byte/signed byte/word/signed word) 40
  (byte*) line_cursor ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) line_cursor < (byte*) char_cursor
  if((boolean~) print_ln::$1) goto print_ln::@1
  (byte*) char_cursor ← (byte*) line_cursor
print_ln::@return:
  return 
endproc // print_ln()
proc (void()) print_sword((signed word) print_sword::w)
  (boolean~) print_sword::$0 ← (signed word) print_sword::w < (byte/signed byte/word/signed word) 0
  (boolean~) print_sword::$1 ← ! (boolean~) print_sword::$0
  if((boolean~) print_sword::$1) goto print_sword::@1
  (void~) print_sword::$2 ← call print_char (byte) '-' 
  (signed word~) print_sword::$3 ← - (signed word) print_sword::w
  (signed word) print_sword::w ← (signed word~) print_sword::$3
print_sword::@1:
  (word~) print_sword::$4 ← ((word)) (signed word) print_sword::w
  (void~) print_sword::$5 ← call print_word (word~) print_sword::$4 
print_sword::@return:
  return 
endproc // print_sword()
proc (void()) print_sbyte((signed byte) print_sbyte::b)
  (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b < (byte/signed byte/word/signed word) 0
  (boolean~) print_sbyte::$1 ← ! (boolean~) print_sbyte::$0
  if((boolean~) print_sbyte::$1) goto print_sbyte::@1
  (void~) print_sbyte::$2 ← call print_char (byte) '-' 
  (signed byte~) print_sbyte::$3 ← - (signed byte) print_sbyte::b
  (signed byte) print_sbyte::b ← (signed byte~) print_sbyte::$3
print_sbyte::@1:
  (byte~) print_sbyte::$4 ← ((byte)) (signed byte) print_sbyte::b
  (void~) print_sbyte::$5 ← call print_byte (byte~) print_sbyte::$4 
print_sbyte::@return:
  return 
endproc // print_sbyte()
proc (void()) print_word((word) print_word::w)
  (byte~) print_word::$0 ← > (word) print_word::w
  (void~) print_word::$1 ← call print_byte (byte~) print_word::$0 
  (byte~) print_word::$2 ← < (word) print_word::w
  (void~) print_word::$3 ← call print_byte (byte~) print_word::$2 
print_word::@return:
  return 
endproc // print_word()
proc (void()) print_byte((byte) print_byte::b)
  (byte[]) print_byte::hextab ← (string) "0123456789abcdef"
  (byte~) print_byte::$0 ← (byte) print_byte::b >> (byte/signed byte/word/signed word) 4
  (void~) print_byte::$1 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$0) 
  (byte~) print_byte::$2 ← (byte) print_byte::b & (byte/signed byte/word/signed word) 15
  (void~) print_byte::$3 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$2) 
print_byte::@return:
  return 
endproc // print_byte()
proc (void()) print_char((byte) print_char::ch)
  *((byte*) char_cursor) ← (byte) print_char::ch
  (byte*) char_cursor ← ++ (byte*) char_cursor
print_char::@return:
  return 
endproc // print_char()
proc (void()) print_cls()
  (byte*) print_cls::sc ← (word/signed word) 1024
print_cls::@1:
  *((byte*) print_cls::sc) ← (byte) ' '
  (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
  (word/signed word~) print_cls::$0 ← (word/signed word) 1024 + (word/signed word) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc != (word/signed word~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
print_cls::@return:
  return 
endproc // print_cls()
  (byte*) memLo ← (byte/word/signed word) 254
  (byte*) memHi ← (byte/word/signed word) 255
proc (void()) prepareMEM((byte*) prepareMEM::mem)
  (byte~) prepareMEM::$0 ← < (byte*) prepareMEM::mem
  *((byte*) memLo) ← (byte~) prepareMEM::$0
  (byte~) prepareMEM::$1 ← > (byte*) prepareMEM::mem
  *((byte*) memHi) ← (byte~) prepareMEM::$1
prepareMEM::@return:
  return 
endproc // prepareMEM()
proc (void()) setFAC((word) setFAC::w)
  (byte*~) setFAC::$0 ← ((byte*)) (word) setFAC::w
  (void~) setFAC::$1 ← call prepareMEM (byte*~) setFAC::$0 
  asm { ldy$fe lda$ff jsr$b391  }
setFAC::@return:
  return 
endproc // setFAC()
proc (word()) getFAC()
  asm { jsr$b1aa sty$fe sta$ff  }
  (word) getFAC::w ← { *((byte*) memHi), *((byte*) memLo) }
  (word) getFAC::return ← (word) getFAC::w
  goto getFAC::@return
getFAC::@return:
  (word) getFAC::return ← (word) getFAC::return
  return (word) getFAC::return
endproc // getFAC()
proc (void()) setARGtoFAC()
  asm { jsr$bc0f  }
setARGtoFAC::@return:
  return 
endproc // setARGtoFAC()
proc (void()) setFACtoARG()
  asm { jsr$bbfc  }
setFACtoARG::@return:
  return 
endproc // setFACtoARG()
proc (void()) setMEMtoFAC((byte*) setMEMtoFAC::mem)
  (void~) setMEMtoFAC::$0 ← call prepareMEM (byte*) setMEMtoFAC::mem 
  asm { ldx$fe ldy$ff jsr$bbd4  }
setMEMtoFAC::@return:
  return 
endproc // setMEMtoFAC()
proc (void()) setFACtoMEM((byte*) setFACtoMEM::mem)
  (void~) setFACtoMEM::$0 ← call prepareMEM (byte*) setFACtoMEM::mem 
  asm { lda$fe ldy$ff jsr$bba2  }
setFACtoMEM::@return:
  return 
endproc // setFACtoMEM()
proc (void()) setFACtoPIhalf()
  asm { lda#$e0 ldy#$e2 jsr$bba2  }
setFACtoPIhalf::@return:
  return 
endproc // setFACtoPIhalf()
proc (void()) setFACto2PI()
  asm { lda#$e5 ldy#$e2 jsr$bba2  }
setFACto2PI::@return:
  return 
endproc // setFACto2PI()
proc (void()) setARGtoMEM((byte*) setARGtoMEM::mem)
  (void~) setARGtoMEM::$0 ← call prepareMEM (byte*) setARGtoMEM::mem 
  asm { lda$fe ldy$ff jsr$ba8c  }
setARGtoMEM::@return:
  return 
endproc // setARGtoMEM()
proc (void()) addMEMtoFAC((byte*) addMEMtoFAC::mem)
  (void~) addMEMtoFAC::$0 ← call prepareMEM (byte*) addMEMtoFAC::mem 
  asm { lda$fe ldy$ff jsr$b867  }
addMEMtoFAC::@return:
  return 
endproc // addMEMtoFAC()
proc (void()) addARGtoFAC()
  asm { jsr$b86a  }
addARGtoFAC::@return:
  return 
endproc // addARGtoFAC()
proc (void()) subFACfromMEM((byte*) subFACfromMEM::mem)
  (void~) subFACfromMEM::$0 ← call prepareMEM (byte*) subFACfromMEM::mem 
  asm { lda$fe ldy$ff jsr$b850  }
subFACfromMEM::@return:
  return 
endproc // subFACfromMEM()
proc (void()) subFACfromARG()
  asm { jsr$b853  }
subFACfromARG::@return:
  return 
endproc // subFACfromARG()
proc (void()) divMEMbyFAC((byte*) divMEMbyFAC::mem)
  (void~) divMEMbyFAC::$0 ← call prepareMEM (byte*) divMEMbyFAC::mem 
  asm { lda$fe ldy$ff jsr$bb0f  }
divMEMbyFAC::@return:
  return 
endproc // divMEMbyFAC()
proc (void()) mulFACbyMEM((byte*) mulFACbyMEM::mem)
  (void~) mulFACbyMEM::$0 ← call prepareMEM (byte*) mulFACbyMEM::mem 
  asm { lda$fe ldy$ff jsr$ba28  }
mulFACbyMEM::@return:
  return 
endproc // mulFACbyMEM()
proc (void()) pwrMEMbyFAC((byte*) pwrMEMbyFAC::mem)
  (void~) pwrMEMbyFAC::$0 ← call prepareMEM (byte*) pwrMEMbyFAC::mem 
  asm { lda$fe ldy$ff jsr$bf78  }
pwrMEMbyFAC::@return:
  return 
endproc // pwrMEMbyFAC()
proc (void()) intFAC()
  asm { jsr$bccc  }
intFAC::@return:
  return 
endproc // intFAC()
proc (void()) sinFAC()
  asm { jsr$e26b  }
sinFAC::@return:
  return 
endproc // sinFAC()
proc (void()) cosFAC()
  asm { jsr$e264  }
cosFAC::@return:
  return 
endproc // cosFAC()
proc (void()) tanFAC()
  asm { jsr$e2b4  }
tanFAC::@return:
  return 
endproc // tanFAC()
proc (void()) atnFAC()
  asm { jsr$e303  }
atnFAC::@return:
  return 
endproc // atnFAC()
proc (void()) sqrFAC()
  asm { jsr$bf71  }
sqrFAC::@return:
  return 
endproc // sqrFAC()
proc (void()) expFAC()
  asm { jsr$bfed  }
expFAC::@return:
  return 
endproc // expFAC()
proc (void()) logFAC()
  asm { jsr$b9ea  }
logFAC::@return:
  return 
endproc // logFAC()
proc (void()) divFACby10()
  asm { jsr$bafe  }
divFACby10::@return:
  return 
endproc // divFACby10()
proc (void()) mulFACby10()
  asm { jsr$bae2  }
mulFACby10::@return:
  return 
endproc // mulFACby10()
proc (void()) main()
  (byte[]) main::f_i ← { (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0 }
  (byte[]) main::f_127 ← { (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0 }
  (byte*) main::f_2pi ← (word) 58085
  (void~) main::$0 ← call setFAC (word/signed word) 1275 
  (void~) main::$1 ← call divFACby10 
  (void~) main::$2 ← call setMEMtoFAC (byte[]) main::f_127 
  (byte) main::i ← (byte/signed byte/word/signed word) 1
main::@1:
  (word~) main::$3 ← ((word)) (byte) main::i
  (void~) main::$4 ← call setFAC (word~) main::$3 
  (void~) main::$5 ← call mulFACbyMEM (byte*) main::f_2pi 
  (void~) main::$6 ← call setMEMtoFAC (byte[]) main::f_i 
  (void~) main::$7 ← call setFAC (byte/signed byte/word/signed word) 25 
  (void~) main::$8 ← call divMEMbyFAC (byte[]) main::f_i 
  (void~) main::$9 ← call sinFAC 
  (void~) main::$10 ← call mulFACbyMEM (byte[]) main::f_127 
  (void~) main::$11 ← call addMEMtoFAC (byte[]) main::f_127 
  (word~) main::$12 ← call getFAC 
  (void~) main::$13 ← call print_word (word~) main::$12 
  (void~) main::$14 ← call print_ln 
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$15 ← (byte) main::i != (byte/signed byte/word/signed word) 26
  if((boolean~) main::$15) goto main::@1
main::@return:
  return 
endproc // main()
  call main 

SYMBOLS
(void()) addARGtoFAC()
(label) addARGtoFAC::@return
(void()) addMEMtoFAC((byte*) addMEMtoFAC::mem)
(void~) addMEMtoFAC::$0
(label) addMEMtoFAC::@return
(byte*) addMEMtoFAC::mem
(void()) atnFAC()
(label) atnFAC::@return
(byte*) char_cursor
(void()) cosFAC()
(label) cosFAC::@return
(void()) divFACby10()
(label) divFACby10::@return
(void()) divMEMbyFAC((byte*) divMEMbyFAC::mem)
(void~) divMEMbyFAC::$0
(label) divMEMbyFAC::@return
(byte*) divMEMbyFAC::mem
(void()) expFAC()
(label) expFAC::@return
(word()) getFAC()
(label) getFAC::@return
(word) getFAC::return
(word) getFAC::w
(void()) intFAC()
(label) intFAC::@return
(byte*) line_cursor
(void()) logFAC()
(label) logFAC::@return
(void()) main()
(void~) main::$0
(void~) main::$1
(void~) main::$10
(void~) main::$11
(word~) main::$12
(void~) main::$13
(void~) main::$14
(boolean~) main::$15
(void~) main::$2
(word~) main::$3
(void~) main::$4
(void~) main::$5
(void~) main::$6
(void~) main::$7
(void~) main::$8
(void~) main::$9
(label) main::@1
(label) main::@return
(byte[]) main::f_127
(byte*) main::f_2pi
(byte[]) main::f_i
(byte) main::i
(byte*) memHi
(byte*) memLo
(void()) mulFACby10()
(label) mulFACby10::@return
(void()) mulFACbyMEM((byte*) mulFACbyMEM::mem)
(void~) mulFACbyMEM::$0
(label) mulFACbyMEM::@return
(byte*) mulFACbyMEM::mem
(void()) prepareMEM((byte*) prepareMEM::mem)
(byte~) prepareMEM::$0
(byte~) prepareMEM::$1
(label) prepareMEM::@return
(byte*) prepareMEM::mem
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(void~) print_byte::$1
(byte~) print_byte::$2
(void~) print_byte::$3
(label) print_byte::@return
(byte) print_byte::b
(byte[]) print_byte::hextab
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(void()) print_cls()
(word/signed word~) print_cls::$0
(boolean~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(void()) print_ln()
(byte*~) print_ln::$0
(boolean~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(boolean~) print_sbyte::$0
(boolean~) print_sbyte::$1
(void~) print_sbyte::$2
(signed byte~) print_sbyte::$3
(byte~) print_sbyte::$4
(void~) print_sbyte::$5
(label) print_sbyte::@1
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(void()) print_str((byte*) print_str::str)
(boolean~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(void()) print_sword((signed word) print_sword::w)
(boolean~) print_sword::$0
(boolean~) print_sword::$1
(void~) print_sword::$2
(signed word~) print_sword::$3
(word~) print_sword::$4
(void~) print_sword::$5
(label) print_sword::@1
(label) print_sword::@return
(signed word) print_sword::w
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(void~) print_word::$1
(byte~) print_word::$2
(void~) print_word::$3
(label) print_word::@return
(word) print_word::w
(void()) pwrMEMbyFAC((byte*) pwrMEMbyFAC::mem)
(void~) pwrMEMbyFAC::$0
(label) pwrMEMbyFAC::@return
(byte*) pwrMEMbyFAC::mem
(void()) setARGtoFAC()
(label) setARGtoFAC::@return
(void()) setARGtoMEM((byte*) setARGtoMEM::mem)
(void~) setARGtoMEM::$0
(label) setARGtoMEM::@return
(byte*) setARGtoMEM::mem
(void()) setFAC((word) setFAC::w)
(byte*~) setFAC::$0
(void~) setFAC::$1
(label) setFAC::@return
(word) setFAC::w
(void()) setFACto2PI()
(label) setFACto2PI::@return
(void()) setFACtoARG()
(label) setFACtoARG::@return
(void()) setFACtoMEM((byte*) setFACtoMEM::mem)
(void~) setFACtoMEM::$0
(label) setFACtoMEM::@return
(byte*) setFACtoMEM::mem
(void()) setFACtoPIhalf()
(label) setFACtoPIhalf::@return
(void()) setMEMtoFAC((byte*) setMEMtoFAC::mem)
(void~) setMEMtoFAC::$0
(label) setMEMtoFAC::@return
(byte*) setMEMtoFAC::mem
(void()) sinFAC()
(label) sinFAC::@return
(void()) sqrFAC()
(label) sqrFAC::@return
(void()) subFACfromARG()
(label) subFACfromARG::@return
(void()) subFACfromMEM((byte*) subFACfromMEM::mem)
(void~) subFACfromMEM::$0
(label) subFACfromMEM::@return
(byte*) subFACfromMEM::mem
(void()) tanFAC()
(label) tanFAC::@return

Promoting word/signed word to byte* in line_cursor ← ((byte*)) 1024
Promoting word/signed word to byte* in print_cls::sc ← ((byte*)) 1024
Promoting byte/word/signed word to byte* in memLo ← ((byte*)) 254
Promoting byte/word/signed word to byte* in memHi ← ((byte*)) 255
Promoting word to byte* in main::f_2pi ← ((byte*)) 58085
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) line_cursor ← ((byte*)) (word/signed word) 1024
  (byte*) char_cursor ← (byte*) line_cursor
  to:@1
print_str: scope:[print_str]  from
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (boolean~) print_str::$0 ← *((byte*) print_str::str) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  to:print_str::@4
print_str::@2: scope:[print_str]  from print_str::@1 print_str::@5
  *((byte*) char_cursor) ← *((byte*) print_str::str)
  (byte*) char_cursor ← ++ (byte*) char_cursor
  (byte*) print_str::str ← ++ (byte*) print_str::str
  to:print_str::@1
print_str::@4: scope:[print_str]  from print_str::@1
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@4 print_str::@6
  to:print_str::@return
print_str::@5: scope:[print_str]  from
  to:print_str::@2
print_str::@6: scope:[print_str]  from
  to:print_str::@3
print_str::@return: scope:[print_str]  from print_str::@3
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
print_ln: scope:[print_ln]  from
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*~) print_ln::$0 ← (byte*) line_cursor + (byte/signed byte/word/signed word) 40
  (byte*) line_cursor ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) line_cursor < (byte*) char_cursor
  if((boolean~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) char_cursor ← (byte*) line_cursor
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  return 
  to:@return
@2: scope:[]  from @1
  to:@3
print_sword: scope:[print_sword]  from
  (boolean~) print_sword::$0 ← (signed word) print_sword::w < (byte/signed byte/word/signed word) 0
  (boolean~) print_sword::$1 ← ! (boolean~) print_sword::$0
  if((boolean~) print_sword::$1) goto print_sword::@1
  to:print_sword::@2
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@2
  (word~) print_sword::$4 ← ((word)) (signed word) print_sword::w
  (void~) print_sword::$5 ← call print_word (word~) print_sword::$4 
  to:print_sword::@return
print_sword::@2: scope:[print_sword]  from print_sword
  (void~) print_sword::$2 ← call print_char (byte) '-' 
  (signed word~) print_sword::$3 ← - (signed word) print_sword::w
  (signed word) print_sword::w ← (signed word~) print_sword::$3
  to:print_sword::@1
print_sword::@return: scope:[print_sword]  from print_sword::@1
  return 
  to:@return
@3: scope:[]  from @2
  to:@4
print_sbyte: scope:[print_sbyte]  from
  (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b < (byte/signed byte/word/signed word) 0
  (boolean~) print_sbyte::$1 ← ! (boolean~) print_sbyte::$0
  if((boolean~) print_sbyte::$1) goto print_sbyte::@1
  to:print_sbyte::@2
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte print_sbyte::@2
  (byte~) print_sbyte::$4 ← ((byte)) (signed byte) print_sbyte::b
  (void~) print_sbyte::$5 ← call print_byte (byte~) print_sbyte::$4 
  to:print_sbyte::@return
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte
  (void~) print_sbyte::$2 ← call print_char (byte) '-' 
  (signed byte~) print_sbyte::$3 ← - (signed byte) print_sbyte::b
  (signed byte) print_sbyte::b ← (signed byte~) print_sbyte::$3
  to:print_sbyte::@1
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@1
  return 
  to:@return
@4: scope:[]  from @3
  to:@5
print_word: scope:[print_word]  from
  (byte~) print_word::$0 ← > (word) print_word::w
  (void~) print_word::$1 ← call print_byte (byte~) print_word::$0 
  (byte~) print_word::$2 ← < (word) print_word::w
  (void~) print_word::$3 ← call print_byte (byte~) print_word::$2 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word
  return 
  to:@return
@5: scope:[]  from @4
  to:@6
print_byte: scope:[print_byte]  from
  (byte[]) print_byte::hextab ← (string) "0123456789abcdef"
  (byte~) print_byte::$0 ← (byte) print_byte::b >> (byte/signed byte/word/signed word) 4
  (void~) print_byte::$1 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$0) 
  (byte~) print_byte::$2 ← (byte) print_byte::b & (byte/signed byte/word/signed word) 15
  (void~) print_byte::$3 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$2) 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte
  return 
  to:@return
@6: scope:[]  from @5
  to:@7
print_char: scope:[print_char]  from
  *((byte*) char_cursor) ← (byte) print_char::ch
  (byte*) char_cursor ← ++ (byte*) char_cursor
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  return 
  to:@return
@7: scope:[]  from @6
  to:@8
print_cls: scope:[print_cls]  from
  (byte*) print_cls::sc ← ((byte*)) (word/signed word) 1024
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  *((byte*) print_cls::sc) ← (byte) ' '
  (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
  (word/signed word~) print_cls::$0 ← (word/signed word) 1024 + (word/signed word) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc != (word/signed word~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  return 
  to:@return
@8: scope:[]  from @7
  (byte*) memLo ← ((byte*)) (byte/word/signed word) 254
  (byte*) memHi ← ((byte*)) (byte/word/signed word) 255
  to:@9
prepareMEM: scope:[prepareMEM]  from
  (byte~) prepareMEM::$0 ← < (byte*) prepareMEM::mem
  *((byte*) memLo) ← (byte~) prepareMEM::$0
  (byte~) prepareMEM::$1 ← > (byte*) prepareMEM::mem
  *((byte*) memHi) ← (byte~) prepareMEM::$1
  to:prepareMEM::@return
prepareMEM::@return: scope:[prepareMEM]  from prepareMEM
  return 
  to:@return
@9: scope:[]  from @8
  to:@10
setFAC: scope:[setFAC]  from
  (byte*~) setFAC::$0 ← ((byte*)) (word) setFAC::w
  (void~) setFAC::$1 ← call prepareMEM (byte*~) setFAC::$0 
  asm { ldy$fe lda$ff jsr$b391  }
  to:setFAC::@return
setFAC::@return: scope:[setFAC]  from setFAC
  return 
  to:@return
@10: scope:[]  from @9
  to:@11
getFAC: scope:[getFAC]  from
  asm { jsr$b1aa sty$fe sta$ff  }
  (word) getFAC::w ← { *((byte*) memHi), *((byte*) memLo) }
  (word) getFAC::return ← (word) getFAC::w
  to:getFAC::@return
getFAC::@return: scope:[getFAC]  from getFAC getFAC::@1
  (word) getFAC::return ← (word) getFAC::return
  return (word) getFAC::return
  to:@return
getFAC::@1: scope:[getFAC]  from
  to:getFAC::@return
@11: scope:[]  from @10
  to:@12
setARGtoFAC: scope:[setARGtoFAC]  from
  asm { jsr$bc0f  }
  to:setARGtoFAC::@return
setARGtoFAC::@return: scope:[setARGtoFAC]  from setARGtoFAC
  return 
  to:@return
@12: scope:[]  from @11
  to:@13
setFACtoARG: scope:[setFACtoARG]  from
  asm { jsr$bbfc  }
  to:setFACtoARG::@return
setFACtoARG::@return: scope:[setFACtoARG]  from setFACtoARG
  return 
  to:@return
@13: scope:[]  from @12
  to:@14
setMEMtoFAC: scope:[setMEMtoFAC]  from
  (void~) setMEMtoFAC::$0 ← call prepareMEM (byte*) setMEMtoFAC::mem 
  asm { ldx$fe ldy$ff jsr$bbd4  }
  to:setMEMtoFAC::@return
setMEMtoFAC::@return: scope:[setMEMtoFAC]  from setMEMtoFAC
  return 
  to:@return
@14: scope:[]  from @13
  to:@15
setFACtoMEM: scope:[setFACtoMEM]  from
  (void~) setFACtoMEM::$0 ← call prepareMEM (byte*) setFACtoMEM::mem 
  asm { lda$fe ldy$ff jsr$bba2  }
  to:setFACtoMEM::@return
setFACtoMEM::@return: scope:[setFACtoMEM]  from setFACtoMEM
  return 
  to:@return
@15: scope:[]  from @14
  to:@16
setFACtoPIhalf: scope:[setFACtoPIhalf]  from
  asm { lda#$e0 ldy#$e2 jsr$bba2  }
  to:setFACtoPIhalf::@return
setFACtoPIhalf::@return: scope:[setFACtoPIhalf]  from setFACtoPIhalf
  return 
  to:@return
@16: scope:[]  from @15
  to:@17
setFACto2PI: scope:[setFACto2PI]  from
  asm { lda#$e5 ldy#$e2 jsr$bba2  }
  to:setFACto2PI::@return
setFACto2PI::@return: scope:[setFACto2PI]  from setFACto2PI
  return 
  to:@return
@17: scope:[]  from @16
  to:@18
setARGtoMEM: scope:[setARGtoMEM]  from
  (void~) setARGtoMEM::$0 ← call prepareMEM (byte*) setARGtoMEM::mem 
  asm { lda$fe ldy$ff jsr$ba8c  }
  to:setARGtoMEM::@return
setARGtoMEM::@return: scope:[setARGtoMEM]  from setARGtoMEM
  return 
  to:@return
@18: scope:[]  from @17
  to:@19
addMEMtoFAC: scope:[addMEMtoFAC]  from
  (void~) addMEMtoFAC::$0 ← call prepareMEM (byte*) addMEMtoFAC::mem 
  asm { lda$fe ldy$ff jsr$b867  }
  to:addMEMtoFAC::@return
addMEMtoFAC::@return: scope:[addMEMtoFAC]  from addMEMtoFAC
  return 
  to:@return
@19: scope:[]  from @18
  to:@20
addARGtoFAC: scope:[addARGtoFAC]  from
  asm { jsr$b86a  }
  to:addARGtoFAC::@return
addARGtoFAC::@return: scope:[addARGtoFAC]  from addARGtoFAC
  return 
  to:@return
@20: scope:[]  from @19
  to:@21
subFACfromMEM: scope:[subFACfromMEM]  from
  (void~) subFACfromMEM::$0 ← call prepareMEM (byte*) subFACfromMEM::mem 
  asm { lda$fe ldy$ff jsr$b850  }
  to:subFACfromMEM::@return
subFACfromMEM::@return: scope:[subFACfromMEM]  from subFACfromMEM
  return 
  to:@return
@21: scope:[]  from @20
  to:@22
subFACfromARG: scope:[subFACfromARG]  from
  asm { jsr$b853  }
  to:subFACfromARG::@return
subFACfromARG::@return: scope:[subFACfromARG]  from subFACfromARG
  return 
  to:@return
@22: scope:[]  from @21
  to:@23
divMEMbyFAC: scope:[divMEMbyFAC]  from
  (void~) divMEMbyFAC::$0 ← call prepareMEM (byte*) divMEMbyFAC::mem 
  asm { lda$fe ldy$ff jsr$bb0f  }
  to:divMEMbyFAC::@return
divMEMbyFAC::@return: scope:[divMEMbyFAC]  from divMEMbyFAC
  return 
  to:@return
@23: scope:[]  from @22
  to:@24
mulFACbyMEM: scope:[mulFACbyMEM]  from
  (void~) mulFACbyMEM::$0 ← call prepareMEM (byte*) mulFACbyMEM::mem 
  asm { lda$fe ldy$ff jsr$ba28  }
  to:mulFACbyMEM::@return
mulFACbyMEM::@return: scope:[mulFACbyMEM]  from mulFACbyMEM
  return 
  to:@return
@24: scope:[]  from @23
  to:@25
pwrMEMbyFAC: scope:[pwrMEMbyFAC]  from
  (void~) pwrMEMbyFAC::$0 ← call prepareMEM (byte*) pwrMEMbyFAC::mem 
  asm { lda$fe ldy$ff jsr$bf78  }
  to:pwrMEMbyFAC::@return
pwrMEMbyFAC::@return: scope:[pwrMEMbyFAC]  from pwrMEMbyFAC
  return 
  to:@return
@25: scope:[]  from @24
  to:@26
intFAC: scope:[intFAC]  from
  asm { jsr$bccc  }
  to:intFAC::@return
intFAC::@return: scope:[intFAC]  from intFAC
  return 
  to:@return
@26: scope:[]  from @25
  to:@27
sinFAC: scope:[sinFAC]  from
  asm { jsr$e26b  }
  to:sinFAC::@return
sinFAC::@return: scope:[sinFAC]  from sinFAC
  return 
  to:@return
@27: scope:[]  from @26
  to:@28
cosFAC: scope:[cosFAC]  from
  asm { jsr$e264  }
  to:cosFAC::@return
cosFAC::@return: scope:[cosFAC]  from cosFAC
  return 
  to:@return
@28: scope:[]  from @27
  to:@29
tanFAC: scope:[tanFAC]  from
  asm { jsr$e2b4  }
  to:tanFAC::@return
tanFAC::@return: scope:[tanFAC]  from tanFAC
  return 
  to:@return
@29: scope:[]  from @28
  to:@30
atnFAC: scope:[atnFAC]  from
  asm { jsr$e303  }
  to:atnFAC::@return
atnFAC::@return: scope:[atnFAC]  from atnFAC
  return 
  to:@return
@30: scope:[]  from @29
  to:@31
sqrFAC: scope:[sqrFAC]  from
  asm { jsr$bf71  }
  to:sqrFAC::@return
sqrFAC::@return: scope:[sqrFAC]  from sqrFAC
  return 
  to:@return
@31: scope:[]  from @30
  to:@32
expFAC: scope:[expFAC]  from
  asm { jsr$bfed  }
  to:expFAC::@return
expFAC::@return: scope:[expFAC]  from expFAC
  return 
  to:@return
@32: scope:[]  from @31
  to:@33
logFAC: scope:[logFAC]  from
  asm { jsr$b9ea  }
  to:logFAC::@return
logFAC::@return: scope:[logFAC]  from logFAC
  return 
  to:@return
@33: scope:[]  from @32
  to:@34
divFACby10: scope:[divFACby10]  from
  asm { jsr$bafe  }
  to:divFACby10::@return
divFACby10::@return: scope:[divFACby10]  from divFACby10
  return 
  to:@return
@34: scope:[]  from @33
  to:@35
mulFACby10: scope:[mulFACby10]  from
  asm { jsr$bae2  }
  to:mulFACby10::@return
mulFACby10::@return: scope:[mulFACby10]  from mulFACby10
  return 
  to:@return
@35: scope:[]  from @34
  to:@36
main: scope:[main]  from
  (byte[]) main::f_i ← { (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0 }
  (byte[]) main::f_127 ← { (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0 }
  (byte*) main::f_2pi ← ((byte*)) (word) 58085
  (void~) main::$0 ← call setFAC (word/signed word) 1275 
  (void~) main::$1 ← call divFACby10 
  (void~) main::$2 ← call setMEMtoFAC (byte[]) main::f_127 
  (byte) main::i ← (byte/signed byte/word/signed word) 1
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (word~) main::$3 ← ((word)) (byte) main::i
  (void~) main::$4 ← call setFAC (word~) main::$3 
  (void~) main::$5 ← call mulFACbyMEM (byte*) main::f_2pi 
  (void~) main::$6 ← call setMEMtoFAC (byte[]) main::f_i 
  (void~) main::$7 ← call setFAC (byte/signed byte/word/signed word) 25 
  (void~) main::$8 ← call divMEMbyFAC (byte[]) main::f_i 
  (void~) main::$9 ← call sinFAC 
  (void~) main::$10 ← call mulFACbyMEM (byte[]) main::f_127 
  (void~) main::$11 ← call addMEMtoFAC (byte[]) main::f_127 
  (word~) main::$12 ← call getFAC 
  (void~) main::$13 ← call print_word (word~) main::$12 
  (void~) main::$14 ← call print_ln 
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$15 ← (byte) main::i != (byte/signed byte/word/signed word) 26
  if((boolean~) main::$15) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@36: scope:[]  from @35
  call main 
  to:@end
@end: scope:[]  from @36

Removing unused procedure print_str
Removing unused procedure print_sword
Removing unused procedure print_sbyte
Removing unused procedure print_cls
Removing unused procedure setARGtoFAC
Removing unused procedure setFACtoARG
Removing unused procedure setFACtoMEM
Removing unused procedure setFACtoPIhalf
Removing unused procedure setFACto2PI
Removing unused procedure setARGtoMEM
Removing unused procedure addARGtoFAC
Removing unused procedure subFACfromMEM
Removing unused procedure subFACfromARG
Removing unused procedure pwrMEMbyFAC
Removing unused procedure intFAC
Removing unused procedure cosFAC
Removing unused procedure tanFAC
Removing unused procedure atnFAC
Removing unused procedure sqrFAC
Removing unused procedure expFAC
Removing unused procedure logFAC
Removing unused procedure mulFACby10
Eliminating unused variable - keeping the call (void~) print_word::$1
Eliminating unused variable - keeping the call (void~) print_word::$3
Eliminating unused variable - keeping the call (void~) print_byte::$1
Eliminating unused variable - keeping the call (void~) print_byte::$3
Eliminating unused variable - keeping the call (void~) setFAC::$1
Eliminating unused variable - keeping the call (void~) setMEMtoFAC::$0
Eliminating unused variable - keeping the call (void~) addMEMtoFAC::$0
Eliminating unused variable - keeping the call (void~) divMEMbyFAC::$0
Eliminating unused variable - keeping the call (void~) mulFACbyMEM::$0
Eliminating unused variable - keeping the call (void~) main::$0
Eliminating unused variable - keeping the call (void~) main::$1
Eliminating unused variable - keeping the call (void~) main::$2
Eliminating unused variable - keeping the call (void~) main::$4
Eliminating unused variable - keeping the call (void~) main::$5
Eliminating unused variable - keeping the call (void~) main::$6
Eliminating unused variable - keeping the call (void~) main::$7
Eliminating unused variable - keeping the call (void~) main::$8
Eliminating unused variable - keeping the call (void~) main::$9
Eliminating unused variable - keeping the call (void~) main::$10
Eliminating unused variable - keeping the call (void~) main::$11
Eliminating unused variable - keeping the call (void~) main::$13
Eliminating unused variable - keeping the call (void~) main::$14
Creating constant string variable for inline (const string) print_byte::$4 "0123456789abcdef"
Removing empty block @1
Removing empty block @2
Removing empty block @3
Removing empty block @4
Removing empty block @5
Removing empty block @6
Removing empty block @7
Removing empty block @9
Removing empty block @10
Removing empty block getFAC::@1
Removing empty block @11
Removing empty block @12
Removing empty block @13
Removing empty block @14
Removing empty block @15
Removing empty block @16
Removing empty block @17
Removing empty block @18
Removing empty block @19
Removing empty block @20
Removing empty block @21
Removing empty block @22
Removing empty block @23
Removing empty block @24
Removing empty block @25
Removing empty block @26
Removing empty block @27
Removing empty block @28
Removing empty block @29
Removing empty block @30
Removing empty block @31
Removing empty block @32
Removing empty block @33
Removing empty block @34
Removing empty block @35
Removing empty block main::@2
PROCEDURE MODIFY VARIABLE ANALYSIS
print_ln modifies line_cursor
print_ln modifies char_cursor
print_word modifies char_cursor
print_byte modifies char_cursor
print_char modifies char_cursor
main modifies char_cursor
main modifies line_cursor

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) line_cursor#0 ← ((byte*)) (word/signed word) 1024
  (byte*) char_cursor#0 ← (byte*) line_cursor#0
  to:@8
print_ln: scope:[print_ln]  from main::@15
  (byte*) char_cursor#29 ← phi( main::@15/(byte*) char_cursor#11 )
  (byte*) line_cursor#12 ← phi( main::@15/(byte*) line_cursor#13 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) char_cursor#15 ← phi( print_ln/(byte*) char_cursor#29 print_ln::@1/(byte*) char_cursor#15 )
  (byte*) line_cursor#6 ← phi( print_ln/(byte*) line_cursor#12 print_ln::@1/(byte*) line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) line_cursor#6 + (byte/signed byte/word/signed word) 40
  (byte*) line_cursor#1 ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) line_cursor#1 < (byte*) char_cursor#15
  if((boolean~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) line_cursor#7 ← phi( print_ln::@1/(byte*) line_cursor#1 )
  (byte*) char_cursor#1 ← (byte*) line_cursor#7
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) char_cursor#16 ← phi( print_ln::@2/(byte*) char_cursor#1 )
  (byte*) line_cursor#8 ← phi( print_ln::@2/(byte*) line_cursor#7 )
  (byte*) line_cursor#2 ← (byte*) line_cursor#8
  (byte*) char_cursor#2 ← (byte*) char_cursor#16
  return 
  to:@return
print_word: scope:[print_word]  from main::@14
  (byte*) char_cursor#30 ← phi( main::@14/(byte*) char_cursor#32 )
  (word) print_word::w#1 ← phi( main::@14/(word) print_word::w#0 )
  (byte~) print_word::$0 ← > (word) print_word::w#1
  (byte) print_byte::b#0 ← (byte~) print_word::$0
  call print_byte param-assignment
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  (word) print_word::w#2 ← phi( print_word/(word) print_word::w#1 )
  (byte*) char_cursor#17 ← phi( print_word/(byte*) char_cursor#8 )
  (byte*) char_cursor#3 ← (byte*) char_cursor#17
  (byte~) print_word::$2 ← < (word) print_word::w#2
  (byte) print_byte::b#1 ← (byte~) print_word::$2
  call print_byte param-assignment
  to:print_word::@2
print_word::@2: scope:[print_word]  from print_word::@1
  (byte*) char_cursor#18 ← phi( print_word::@1/(byte*) char_cursor#8 )
  (byte*) char_cursor#4 ← (byte*) char_cursor#18
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@2
  (byte*) char_cursor#19 ← phi( print_word::@2/(byte*) char_cursor#4 )
  (byte*) char_cursor#5 ← (byte*) char_cursor#19
  return 
  to:@return
print_byte: scope:[print_byte]  from print_word print_word::@1
  (byte*) char_cursor#31 ← phi( print_word/(byte*) char_cursor#30 print_word::@1/(byte*) char_cursor#3 )
  (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  (byte[]) print_byte::hextab#0 ← (const string) print_byte::$4
  (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word) 4
  (byte) print_char::ch#0 ← *((byte[]) print_byte::hextab#0 + (byte~) print_byte::$0)
  call print_char param-assignment
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#3 ← phi( print_byte/(byte) print_byte::b#2 )
  (byte*) char_cursor#20 ← phi( print_byte/(byte*) char_cursor#10 )
  (byte*) char_cursor#6 ← (byte*) char_cursor#20
  (byte~) print_byte::$2 ← (byte) print_byte::b#3 & (byte/signed byte/word/signed word) 15
  (byte) print_char::ch#1 ← *((byte[]) print_byte::hextab#0 + (byte~) print_byte::$2)
  call print_char param-assignment
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) char_cursor#21 ← phi( print_byte::@1/(byte*) char_cursor#10 )
  (byte*) char_cursor#7 ← (byte*) char_cursor#21
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) char_cursor#22 ← phi( print_byte::@2/(byte*) char_cursor#7 )
  (byte*) char_cursor#8 ← (byte*) char_cursor#22
  return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1
  (byte*) char_cursor#23 ← phi( print_byte/(byte*) char_cursor#31 print_byte::@1/(byte*) char_cursor#6 )
  (byte) print_char::ch#2 ← phi( print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 )
  *((byte*) char_cursor#23) ← (byte) print_char::ch#2
  (byte*) char_cursor#9 ← ++ (byte*) char_cursor#23
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) char_cursor#24 ← phi( print_char/(byte*) char_cursor#9 )
  (byte*) char_cursor#10 ← (byte*) char_cursor#24
  return 
  to:@return
@8: scope:[]  from @begin
  (byte*) line_cursor#16 ← phi( @begin/(byte*) line_cursor#0 )
  (byte*) char_cursor#35 ← phi( @begin/(byte*) char_cursor#0 )
  (byte*) memLo#0 ← ((byte*)) (byte/word/signed word) 254
  (byte*) memHi#0 ← ((byte*)) (byte/word/signed word) 255
  to:@36
prepareMEM: scope:[prepareMEM]  from addMEMtoFAC divMEMbyFAC mulFACbyMEM setFAC setMEMtoFAC
  (byte*) prepareMEM::mem#5 ← phi( addMEMtoFAC/(byte*) prepareMEM::mem#2 divMEMbyFAC/(byte*) prepareMEM::mem#3 mulFACbyMEM/(byte*) prepareMEM::mem#4 setFAC/(byte*) prepareMEM::mem#0 setMEMtoFAC/(byte*) prepareMEM::mem#1 )
  (byte~) prepareMEM::$0 ← < (byte*) prepareMEM::mem#5
  *((byte*) memLo#0) ← (byte~) prepareMEM::$0
  (byte~) prepareMEM::$1 ← > (byte*) prepareMEM::mem#5
  *((byte*) memHi#0) ← (byte~) prepareMEM::$1
  to:prepareMEM::@return
prepareMEM::@return: scope:[prepareMEM]  from prepareMEM
  return 
  to:@return
setFAC: scope:[setFAC]  from main main::@1 main::@8
  (word) setFAC::w#3 ← phi( main/(word) setFAC::w#0 main::@1/(word) setFAC::w#1 main::@8/(word) setFAC::w#2 )
  (byte*~) setFAC::$0 ← ((byte*)) (word) setFAC::w#3
  (byte*) prepareMEM::mem#0 ← (byte*~) setFAC::$0
  call prepareMEM param-assignment
  to:setFAC::@1
setFAC::@1: scope:[setFAC]  from setFAC
  asm { ldy$fe lda$ff jsr$b391  }
  to:setFAC::@return
setFAC::@return: scope:[setFAC]  from setFAC::@1
  return 
  to:@return
getFAC: scope:[getFAC]  from main::@13
  asm { jsr$b1aa sty$fe sta$ff  }
  (word) getFAC::w#0 ← { *((byte*) memHi#0), *((byte*) memLo#0) }
  (word) getFAC::return#0 ← (word) getFAC::w#0
  to:getFAC::@return
getFAC::@return: scope:[getFAC]  from getFAC
  (word) getFAC::return#3 ← phi( getFAC/(word) getFAC::return#0 )
  (word) getFAC::return#1 ← (word) getFAC::return#3
  return 
  to:@return
setMEMtoFAC: scope:[setMEMtoFAC]  from main::@4 main::@7
  (byte*) setMEMtoFAC::mem#2 ← phi( main::@4/(byte*) setMEMtoFAC::mem#0 main::@7/(byte*) setMEMtoFAC::mem#1 )
  (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#2
  call prepareMEM param-assignment
  to:setMEMtoFAC::@1
setMEMtoFAC::@1: scope:[setMEMtoFAC]  from setMEMtoFAC
  asm { ldx$fe ldy$ff jsr$bbd4  }
  to:setMEMtoFAC::@return
setMEMtoFAC::@return: scope:[setMEMtoFAC]  from setMEMtoFAC::@1
  return 
  to:@return
addMEMtoFAC: scope:[addMEMtoFAC]  from main::@12
  (byte*) addMEMtoFAC::mem#1 ← phi( main::@12/(byte*) addMEMtoFAC::mem#0 )
  (byte*) prepareMEM::mem#2 ← (byte*) addMEMtoFAC::mem#1
  call prepareMEM param-assignment
  to:addMEMtoFAC::@1
addMEMtoFAC::@1: scope:[addMEMtoFAC]  from addMEMtoFAC
  asm { lda$fe ldy$ff jsr$b867  }
  to:addMEMtoFAC::@return
addMEMtoFAC::@return: scope:[addMEMtoFAC]  from addMEMtoFAC::@1
  return 
  to:@return
divMEMbyFAC: scope:[divMEMbyFAC]  from main::@9
  (byte*) divMEMbyFAC::mem#1 ← phi( main::@9/(byte*) divMEMbyFAC::mem#0 )
  (byte*) prepareMEM::mem#3 ← (byte*) divMEMbyFAC::mem#1
  call prepareMEM param-assignment
  to:divMEMbyFAC::@1
divMEMbyFAC::@1: scope:[divMEMbyFAC]  from divMEMbyFAC
  asm { lda$fe ldy$ff jsr$bb0f  }
  to:divMEMbyFAC::@return
divMEMbyFAC::@return: scope:[divMEMbyFAC]  from divMEMbyFAC::@1
  return 
  to:@return
mulFACbyMEM: scope:[mulFACbyMEM]  from main::@11 main::@6
  (byte*) mulFACbyMEM::mem#2 ← phi( main::@11/(byte*) mulFACbyMEM::mem#1 main::@6/(byte*) mulFACbyMEM::mem#0 )
  (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2
  call prepareMEM param-assignment
  to:mulFACbyMEM::@1
mulFACbyMEM::@1: scope:[mulFACbyMEM]  from mulFACbyMEM
  asm { lda$fe ldy$ff jsr$ba28  }
  to:mulFACbyMEM::@return
mulFACbyMEM::@return: scope:[mulFACbyMEM]  from mulFACbyMEM::@1
  return 
  to:@return
sinFAC: scope:[sinFAC]  from main::@10
  asm { jsr$e26b  }
  to:sinFAC::@return
sinFAC::@return: scope:[sinFAC]  from sinFAC
  return 
  to:@return
divFACby10: scope:[divFACby10]  from main::@3
  asm { jsr$bafe  }
  to:divFACby10::@return
divFACby10::@return: scope:[divFACby10]  from divFACby10
  return 
  to:@return
main: scope:[main]  from @36
  (byte*) line_cursor#29 ← phi( @36/(byte*) line_cursor#14 )
  (byte*) char_cursor#47 ← phi( @36/(byte*) char_cursor#33 )
  (byte[]) main::f_i#0 ← { (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0 }
  (byte[]) main::f_127#0 ← { (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0 }
  (byte*) main::f_2pi#0 ← ((byte*)) (word) 58085
  (word) setFAC::w#0 ← (word/signed word) 1275
  call setFAC param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte*) line_cursor#28 ← phi( main/(byte*) line_cursor#29 )
  (byte*) char_cursor#46 ← phi( main/(byte*) char_cursor#47 )
  call divFACby10 param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) line_cursor#27 ← phi( main::@3/(byte*) line_cursor#28 )
  (byte*) char_cursor#45 ← phi( main::@3/(byte*) char_cursor#46 )
  (byte*) setMEMtoFAC::mem#0 ← (byte[]) main::f_127#0
  call setMEMtoFAC param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte*) line_cursor#26 ← phi( main::@4/(byte*) line_cursor#27 )
  (byte*) char_cursor#44 ← phi( main::@4/(byte*) char_cursor#45 )
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 1
  to:main::@1
main::@1: scope:[main]  from main::@16 main::@5
  (byte*) line_cursor#25 ← phi( main::@16/(byte*) line_cursor#3 main::@5/(byte*) line_cursor#26 )
  (byte*) char_cursor#43 ← phi( main::@16/(byte*) char_cursor#12 main::@5/(byte*) char_cursor#44 )
  (byte) main::i#2 ← phi( main::@16/(byte) main::i#1 main::@5/(byte) main::i#0 )
  (word~) main::$3 ← ((word)) (byte) main::i#2
  (word) setFAC::w#1 ← (word~) main::$3
  call setFAC param-assignment
  to:main::@6
main::@6: scope:[main]  from main::@1
  (byte) main::i#13 ← phi( main::@1/(byte) main::i#2 )
  (byte*) line_cursor#24 ← phi( main::@1/(byte*) line_cursor#25 )
  (byte*) char_cursor#42 ← phi( main::@1/(byte*) char_cursor#43 )
  (byte*) mulFACbyMEM::mem#0 ← (byte*) main::f_2pi#0
  call mulFACbyMEM param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte) main::i#12 ← phi( main::@6/(byte) main::i#13 )
  (byte*) line_cursor#23 ← phi( main::@6/(byte*) line_cursor#24 )
  (byte*) char_cursor#41 ← phi( main::@6/(byte*) char_cursor#42 )
  (byte*) setMEMtoFAC::mem#1 ← (byte[]) main::f_i#0
  call setMEMtoFAC param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte) main::i#11 ← phi( main::@7/(byte) main::i#12 )
  (byte*) line_cursor#22 ← phi( main::@7/(byte*) line_cursor#23 )
  (byte*) char_cursor#40 ← phi( main::@7/(byte*) char_cursor#41 )
  (word) setFAC::w#2 ← (byte/signed byte/word/signed word) 25
  call setFAC param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@8
  (byte) main::i#10 ← phi( main::@8/(byte) main::i#11 )
  (byte*) line_cursor#21 ← phi( main::@8/(byte*) line_cursor#22 )
  (byte*) char_cursor#39 ← phi( main::@8/(byte*) char_cursor#40 )
  (byte*) divMEMbyFAC::mem#0 ← (byte[]) main::f_i#0
  call divMEMbyFAC param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@9
  (byte) main::i#9 ← phi( main::@9/(byte) main::i#10 )
  (byte*) line_cursor#20 ← phi( main::@9/(byte*) line_cursor#21 )
  (byte*) char_cursor#38 ← phi( main::@9/(byte*) char_cursor#39 )
  call sinFAC param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte) main::i#8 ← phi( main::@10/(byte) main::i#9 )
  (byte*) line_cursor#19 ← phi( main::@10/(byte*) line_cursor#20 )
  (byte*) char_cursor#37 ← phi( main::@10/(byte*) char_cursor#38 )
  (byte*) mulFACbyMEM::mem#1 ← (byte[]) main::f_127#0
  call mulFACbyMEM param-assignment
  to:main::@12
main::@12: scope:[main]  from main::@11
  (byte) main::i#7 ← phi( main::@11/(byte) main::i#8 )
  (byte*) line_cursor#18 ← phi( main::@11/(byte*) line_cursor#19 )
  (byte*) char_cursor#36 ← phi( main::@11/(byte*) char_cursor#37 )
  (byte*) addMEMtoFAC::mem#0 ← (byte[]) main::f_127#0
  call addMEMtoFAC param-assignment
  to:main::@13
main::@13: scope:[main]  from main::@12
  (byte) main::i#6 ← phi( main::@12/(byte) main::i#7 )
  (byte*) line_cursor#17 ← phi( main::@12/(byte*) line_cursor#18 )
  (byte*) char_cursor#34 ← phi( main::@12/(byte*) char_cursor#36 )
  call getFAC param-assignment
  (word) getFAC::return#2 ← (word) getFAC::return#1
  to:main::@14
main::@14: scope:[main]  from main::@13
  (byte) main::i#5 ← phi( main::@13/(byte) main::i#6 )
  (byte*) line_cursor#15 ← phi( main::@13/(byte*) line_cursor#17 )
  (byte*) char_cursor#32 ← phi( main::@13/(byte*) char_cursor#34 )
  (word) getFAC::return#4 ← phi( main::@13/(word) getFAC::return#2 )
  (word~) main::$12 ← (word) getFAC::return#4
  (word) print_word::w#0 ← (word~) main::$12
  call print_word param-assignment
  to:main::@15
main::@15: scope:[main]  from main::@14
  (byte) main::i#4 ← phi( main::@14/(byte) main::i#5 )
  (byte*) line_cursor#13 ← phi( main::@14/(byte*) line_cursor#15 )
  (byte*) char_cursor#25 ← phi( main::@14/(byte*) char_cursor#5 )
  (byte*) char_cursor#11 ← (byte*) char_cursor#25
  call print_ln param-assignment
  to:main::@16
main::@16: scope:[main]  from main::@15
  (byte) main::i#3 ← phi( main::@15/(byte) main::i#4 )
  (byte*) char_cursor#26 ← phi( main::@15/(byte*) char_cursor#2 )
  (byte*) line_cursor#9 ← phi( main::@15/(byte*) line_cursor#2 )
  (byte*) line_cursor#3 ← (byte*) line_cursor#9
  (byte*) char_cursor#12 ← (byte*) char_cursor#26
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$15 ← (byte) main::i#1 != (byte/signed byte/word/signed word) 26
  if((boolean~) main::$15) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@16
  (byte*) line_cursor#10 ← phi( main::@16/(byte*) line_cursor#3 )
  (byte*) char_cursor#27 ← phi( main::@16/(byte*) char_cursor#12 )
  (byte*) char_cursor#13 ← (byte*) char_cursor#27
  (byte*) line_cursor#4 ← (byte*) line_cursor#10
  return 
  to:@return
@36: scope:[]  from @8
  (byte*) line_cursor#14 ← phi( @8/(byte*) line_cursor#16 )
  (byte*) char_cursor#33 ← phi( @8/(byte*) char_cursor#35 )
  call main param-assignment
  to:@37
@37: scope:[]  from @36
  (byte*) line_cursor#11 ← phi( @36/(byte*) line_cursor#4 )
  (byte*) char_cursor#28 ← phi( @36/(byte*) char_cursor#13 )
  (byte*) char_cursor#14 ← (byte*) char_cursor#28
  (byte*) line_cursor#5 ← (byte*) line_cursor#11
  to:@end
@end: scope:[]  from @37

SYMBOL TABLE SSA
(label) @36
(label) @37
(label) @8
(label) @begin
(label) @end
(void()) addMEMtoFAC((byte*) addMEMtoFAC::mem)
(label) addMEMtoFAC::@1
(label) addMEMtoFAC::@return
(byte*) addMEMtoFAC::mem
(byte*) addMEMtoFAC::mem#0
(byte*) addMEMtoFAC::mem#1
(byte*) char_cursor
(byte*) char_cursor#0
(byte*) char_cursor#1
(byte*) char_cursor#10
(byte*) char_cursor#11
(byte*) char_cursor#12
(byte*) char_cursor#13
(byte*) char_cursor#14
(byte*) char_cursor#15
(byte*) char_cursor#16
(byte*) char_cursor#17
(byte*) char_cursor#18
(byte*) char_cursor#19
(byte*) char_cursor#2
(byte*) char_cursor#20
(byte*) char_cursor#21
(byte*) char_cursor#22
(byte*) char_cursor#23
(byte*) char_cursor#24
(byte*) char_cursor#25
(byte*) char_cursor#26
(byte*) char_cursor#27
(byte*) char_cursor#28
(byte*) char_cursor#29
(byte*) char_cursor#3
(byte*) char_cursor#30
(byte*) char_cursor#31
(byte*) char_cursor#32
(byte*) char_cursor#33
(byte*) char_cursor#34
(byte*) char_cursor#35
(byte*) char_cursor#36
(byte*) char_cursor#37
(byte*) char_cursor#38
(byte*) char_cursor#39
(byte*) char_cursor#4
(byte*) char_cursor#40
(byte*) char_cursor#41
(byte*) char_cursor#42
(byte*) char_cursor#43
(byte*) char_cursor#44
(byte*) char_cursor#45
(byte*) char_cursor#46
(byte*) char_cursor#47
(byte*) char_cursor#5
(byte*) char_cursor#6
(byte*) char_cursor#7
(byte*) char_cursor#8
(byte*) char_cursor#9
(void()) divFACby10()
(label) divFACby10::@return
(void()) divMEMbyFAC((byte*) divMEMbyFAC::mem)
(label) divMEMbyFAC::@1
(label) divMEMbyFAC::@return
(byte*) divMEMbyFAC::mem
(byte*) divMEMbyFAC::mem#0
(byte*) divMEMbyFAC::mem#1
(word()) getFAC()
(label) getFAC::@return
(word) getFAC::return
(word) getFAC::return#0
(word) getFAC::return#1
(word) getFAC::return#2
(word) getFAC::return#3
(word) getFAC::return#4
(word) getFAC::w
(word) getFAC::w#0
(byte*) line_cursor
(byte*) line_cursor#0
(byte*) line_cursor#1
(byte*) line_cursor#10
(byte*) line_cursor#11
(byte*) line_cursor#12
(byte*) line_cursor#13
(byte*) line_cursor#14
(byte*) line_cursor#15
(byte*) line_cursor#16
(byte*) line_cursor#17
(byte*) line_cursor#18
(byte*) line_cursor#19
(byte*) line_cursor#2
(byte*) line_cursor#20
(byte*) line_cursor#21
(byte*) line_cursor#22
(byte*) line_cursor#23
(byte*) line_cursor#24
(byte*) line_cursor#25
(byte*) line_cursor#26
(byte*) line_cursor#27
(byte*) line_cursor#28
(byte*) line_cursor#29
(byte*) line_cursor#3
(byte*) line_cursor#4
(byte*) line_cursor#5
(byte*) line_cursor#6
(byte*) line_cursor#7
(byte*) line_cursor#8
(byte*) line_cursor#9
(void()) main()
(word~) main::$12
(boolean~) main::$15
(word~) main::$3
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte[]) main::f_127
(byte[]) main::f_127#0
(byte*) main::f_2pi
(byte*) main::f_2pi#0
(byte[]) main::f_i
(byte[]) main::f_i#0
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#10
(byte) main::i#11
(byte) main::i#12
(byte) main::i#13
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6
(byte) main::i#7
(byte) main::i#8
(byte) main::i#9
(byte*) memHi
(byte*) memHi#0
(byte*) memLo
(byte*) memLo#0
(void()) mulFACbyMEM((byte*) mulFACbyMEM::mem)
(label) mulFACbyMEM::@1
(label) mulFACbyMEM::@return
(byte*) mulFACbyMEM::mem
(byte*) mulFACbyMEM::mem#0
(byte*) mulFACbyMEM::mem#1
(byte*) mulFACbyMEM::mem#2
(void()) prepareMEM((byte*) prepareMEM::mem)
(byte~) prepareMEM::$0
(byte~) prepareMEM::$1
(label) prepareMEM::@return
(byte*) prepareMEM::mem
(byte*) prepareMEM::mem#0
(byte*) prepareMEM::mem#1
(byte*) prepareMEM::mem#2
(byte*) prepareMEM::mem#3
(byte*) prepareMEM::mem#4
(byte*) prepareMEM::mem#5
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(byte~) print_byte::$2
(const string) print_byte::$4 = (string) "0123456789abcdef"
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(byte[]) print_byte::hextab
(byte[]) print_byte::hextab#0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(void()) print_ln()
(byte*~) print_ln::$0
(boolean~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(byte~) print_word::$2
(label) print_word::@1
(label) print_word::@2
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0
(word) print_word::w#1
(word) print_word::w#2
(void()) setFAC((word) setFAC::w)
(byte*~) setFAC::$0
(label) setFAC::@1
(label) setFAC::@return
(word) setFAC::w
(word) setFAC::w#0
(word) setFAC::w#1
(word) setFAC::w#2
(word) setFAC::w#3
(void()) setMEMtoFAC((byte*) setMEMtoFAC::mem)
(label) setMEMtoFAC::@1
(label) setMEMtoFAC::@return
(byte*) setMEMtoFAC::mem
(byte*) setMEMtoFAC::mem#0
(byte*) setMEMtoFAC::mem#1
(byte*) setMEMtoFAC::mem#2
(void()) sinFAC()
(label) sinFAC::@return

OPTIMIZING CONTROL FLOW GRAPH
Not aliassing across scopes: line_cursor#12 line_cursor#13
Not aliassing across scopes: char_cursor#29 char_cursor#11
Not aliassing across scopes: print_word::w#1 print_word::w#0
Not aliassing across scopes: char_cursor#30 char_cursor#32
Not aliassing across scopes: char_cursor#17 char_cursor#8
Not aliassing across scopes: char_cursor#18 char_cursor#8
Not aliassing across scopes: print_byte::b#2 print_byte::b#0
Not aliassing across scopes: char_cursor#31 char_cursor#30
Not aliassing across scopes: char_cursor#20 char_cursor#10
Not aliassing across scopes: char_cursor#21 char_cursor#10
Not aliassing across scopes: print_char::ch#2 print_char::ch#0
Not aliassing across scopes: char_cursor#23 char_cursor#31
Not aliassing across scopes: prepareMEM::mem#5 prepareMEM::mem#2
Not aliassing across scopes: setFAC::w#3 setFAC::w#0
Not aliassing across scopes: setMEMtoFAC::mem#2 setMEMtoFAC::mem#0
Not aliassing across scopes: prepareMEM::mem#1 setMEMtoFAC::mem#2
Not aliassing across scopes: addMEMtoFAC::mem#1 addMEMtoFAC::mem#0
Not aliassing across scopes: prepareMEM::mem#2 addMEMtoFAC::mem#1
Not aliassing across scopes: divMEMbyFAC::mem#1 divMEMbyFAC::mem#0
Not aliassing across scopes: prepareMEM::mem#3 divMEMbyFAC::mem#1
Not aliassing across scopes: mulFACbyMEM::mem#2 mulFACbyMEM::mem#1
Not aliassing across scopes: prepareMEM::mem#4 mulFACbyMEM::mem#2
Not aliassing across scopes: char_cursor#47 char_cursor#33
Not aliassing across scopes: line_cursor#29 line_cursor#14
Not aliassing across scopes: setMEMtoFAC::mem#0 main::f_127#0
Not aliassing across scopes: mulFACbyMEM::mem#0 main::f_2pi#0
Not aliassing across scopes: setMEMtoFAC::mem#1 main::f_i#0
Not aliassing across scopes: divMEMbyFAC::mem#0 main::f_i#0
Not aliassing across scopes: mulFACbyMEM::mem#1 main::f_127#0
Not aliassing across scopes: addMEMtoFAC::mem#0 main::f_127#0
Not aliassing across scopes: getFAC::return#2 getFAC::return#1
Not aliassing across scopes: main::$12 getFAC::return#4
Not aliassing across scopes: char_cursor#25 char_cursor#5
Not aliassing across scopes: line_cursor#9 line_cursor#2
Not aliassing across scopes: char_cursor#26 char_cursor#2
Not aliassing across scopes: char_cursor#28 char_cursor#13
Not aliassing across scopes: line_cursor#11 line_cursor#4
Alias (byte*) char_cursor#0 = (byte*) line_cursor#0 (byte*) char_cursor#35 (byte*) line_cursor#16 (byte*) char_cursor#33 (byte*) line_cursor#14 
Alias (byte*) line_cursor#1 = (byte*~) print_ln::$0 (byte*) line_cursor#7 (byte*) char_cursor#1 (byte*) line_cursor#8 (byte*) char_cursor#16 (byte*) line_cursor#2 (byte*) char_cursor#2 
Alias (byte) print_byte::b#0 = (byte~) print_word::$0 
Alias (word) print_word::w#1 = (word) print_word::w#2 
Alias (byte*) char_cursor#17 = (byte*) char_cursor#3 
Alias (byte) print_byte::b#1 = (byte~) print_word::$2 
Alias (byte*) char_cursor#18 = (byte*) char_cursor#4 (byte*) char_cursor#19 (byte*) char_cursor#5 
Alias (byte) print_byte::b#2 = (byte) print_byte::b#3 
Alias (byte*) char_cursor#20 = (byte*) char_cursor#6 
Alias (byte*) char_cursor#21 = (byte*) char_cursor#7 (byte*) char_cursor#22 (byte*) char_cursor#8 
Alias (byte*) char_cursor#10 = (byte*) char_cursor#24 (byte*) char_cursor#9 
Alias (byte*) prepareMEM::mem#0 = (byte*~) setFAC::$0 
Alias (word) getFAC::return#0 = (word) getFAC::w#0 (word) getFAC::return#3 (word) getFAC::return#1 
Alias (byte*) char_cursor#44 = (byte*) char_cursor#46 (byte*) char_cursor#47 (byte*) char_cursor#45 
Alias (byte*) line_cursor#26 = (byte*) line_cursor#28 (byte*) line_cursor#29 (byte*) line_cursor#27 
Alias (word) setFAC::w#1 = (word~) main::$3 
Alias (byte*) char_cursor#32 = (byte*) char_cursor#42 (byte*) char_cursor#43 (byte*) char_cursor#41 (byte*) char_cursor#40 (byte*) char_cursor#39 (byte*) char_cursor#38 (byte*) char_cursor#37 (byte*) char_cursor#36 (byte*) char_cursor#34 
Alias (byte*) line_cursor#13 = (byte*) line_cursor#24 (byte*) line_cursor#25 (byte*) line_cursor#23 (byte*) line_cursor#22 (byte*) line_cursor#21 (byte*) line_cursor#20 (byte*) line_cursor#19 (byte*) line_cursor#18 (byte*) line_cursor#17 (byte*) line_cursor#15 
Alias (byte) main::i#10 = (byte) main::i#13 (byte) main::i#2 (byte) main::i#12 (byte) main::i#11 (byte) main::i#9 (byte) main::i#8 (byte) main::i#7 (byte) main::i#6 (byte) main::i#5 (byte) main::i#4 (byte) main::i#3 
Alias (word) getFAC::return#2 = (word) getFAC::return#4 
Alias (word) print_word::w#0 = (word~) main::$12 
Alias (byte*) char_cursor#11 = (byte*) char_cursor#25 
Alias (byte*) line_cursor#10 = (byte*) line_cursor#3 (byte*) line_cursor#9 (byte*) line_cursor#4 
Alias (byte*) char_cursor#12 = (byte*) char_cursor#26 (byte*) char_cursor#27 (byte*) char_cursor#13 
Alias (byte*) char_cursor#14 = (byte*) char_cursor#28 
Alias (byte*) line_cursor#11 = (byte*) line_cursor#5 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: line_cursor#12 line_cursor#13
Not aliassing across scopes: char_cursor#29 char_cursor#11
Not aliassing across scopes: print_word::w#1 print_word::w#0
Not aliassing across scopes: char_cursor#30 char_cursor#32
Not aliassing across scopes: char_cursor#17 char_cursor#21
Not aliassing across scopes: char_cursor#18 char_cursor#21
Not aliassing across scopes: print_byte::b#2 print_byte::b#0
Not aliassing across scopes: char_cursor#31 char_cursor#30
Not aliassing across scopes: char_cursor#20 char_cursor#10
Not aliassing across scopes: char_cursor#21 char_cursor#10
Not aliassing across scopes: print_char::ch#2 print_char::ch#0
Not aliassing across scopes: char_cursor#23 char_cursor#31
Not aliassing across scopes: prepareMEM::mem#5 prepareMEM::mem#2
Not aliassing across scopes: setFAC::w#3 setFAC::w#0
Not aliassing across scopes: setMEMtoFAC::mem#2 setMEMtoFAC::mem#0
Not aliassing across scopes: prepareMEM::mem#1 setMEMtoFAC::mem#2
Not aliassing across scopes: addMEMtoFAC::mem#1 addMEMtoFAC::mem#0
Not aliassing across scopes: prepareMEM::mem#2 addMEMtoFAC::mem#1
Not aliassing across scopes: divMEMbyFAC::mem#1 divMEMbyFAC::mem#0
Not aliassing across scopes: prepareMEM::mem#3 divMEMbyFAC::mem#1
Not aliassing across scopes: mulFACbyMEM::mem#2 mulFACbyMEM::mem#1
Not aliassing across scopes: prepareMEM::mem#4 mulFACbyMEM::mem#2
Not aliassing across scopes: char_cursor#44 char_cursor#0
Not aliassing across scopes: line_cursor#26 char_cursor#0
Not aliassing across scopes: setMEMtoFAC::mem#0 main::f_127#0
Not aliassing across scopes: mulFACbyMEM::mem#0 main::f_2pi#0
Not aliassing across scopes: setMEMtoFAC::mem#1 main::f_i#0
Not aliassing across scopes: divMEMbyFAC::mem#0 main::f_i#0
Not aliassing across scopes: mulFACbyMEM::mem#1 main::f_127#0
Not aliassing across scopes: addMEMtoFAC::mem#0 main::f_127#0
Not aliassing across scopes: getFAC::return#2 getFAC::return#0
Not aliassing across scopes: print_word::w#0 getFAC::return#2
Not aliassing across scopes: char_cursor#11 char_cursor#18
Not aliassing across scopes: line_cursor#10 line_cursor#1
Not aliassing across scopes: char_cursor#12 line_cursor#1
Not aliassing across scopes: char_cursor#14 char_cursor#12
Not aliassing across scopes: line_cursor#11 line_cursor#10
Self Phi Eliminated (byte*) char_cursor#15
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) line_cursor#12 (byte*) line_cursor#13
Redundant Phi (byte*) char_cursor#29 (byte*) char_cursor#11
Redundant Phi (byte*) char_cursor#15 (byte*) char_cursor#29
Redundant Phi (word) print_word::w#1 (word) print_word::w#0
Redundant Phi (byte*) char_cursor#30 (byte*) char_cursor#32
Redundant Phi (byte*) char_cursor#17 (byte*) char_cursor#21
Redundant Phi (byte*) char_cursor#18 (byte*) char_cursor#21
Redundant Phi (byte*) char_cursor#20 (byte*) char_cursor#10
Redundant Phi (byte*) char_cursor#21 (byte*) char_cursor#10
Redundant Phi (byte*) addMEMtoFAC::mem#1 (byte*) addMEMtoFAC::mem#0
Redundant Phi (byte*) divMEMbyFAC::mem#1 (byte*) divMEMbyFAC::mem#0
Redundant Phi (byte*) char_cursor#44 (byte*) char_cursor#0
Redundant Phi (byte*) line_cursor#26 (byte*) char_cursor#0
Redundant Phi (byte*) char_cursor#11 (byte*) char_cursor#18
Redundant Phi (byte*) line_cursor#10 (byte*) line_cursor#1
Redundant Phi (byte*) char_cursor#12 (byte*) line_cursor#1
Redundant Phi (byte*) char_cursor#14 (byte*) char_cursor#12
Redundant Phi (byte*) line_cursor#11 (byte*) line_cursor#10
Succesful SSA optimization Pass2RedundantPhiElimination
Simple Condition (boolean~) print_ln::$1 if((byte*) line_cursor#1<(byte*) char_cursor#10) goto print_ln::@1
Simple Condition (boolean~) main::$15 if((byte) main::i#1!=(byte/signed byte/word/signed word) 26) goto main::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) char_cursor#0 = ((byte*))1024
Constant (const string) print_byte::hextab#0 = print_byte::$4
Constant (const byte*) memLo#0 = ((byte*))254
Constant (const byte*) memHi#0 = ((byte*))255
Constant (const byte[]) main::f_i#0 = { 0, 0, 0, 0, 0 }
Constant (const byte[]) main::f_127#0 = { 0, 0, 0, 0, 0 }
Constant (const byte*) main::f_2pi#0 = ((byte*))58085
Constant (const word) setFAC::w#0 = 1275
Constant (const byte) main::i#0 = 1
Constant (const word) setFAC::w#2 = 25
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte[]) setMEMtoFAC::mem#0 = main::f_127#0
Constant (const byte*) mulFACbyMEM::mem#0 = main::f_2pi#0
Constant (const byte[]) setMEMtoFAC::mem#1 = main::f_i#0
Constant (const byte[]) divMEMbyFAC::mem#0 = main::f_i#0
Constant (const byte[]) mulFACbyMEM::mem#1 = main::f_127#0
Constant (const byte[]) addMEMtoFAC::mem#0 = main::f_127#0
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte[]) prepareMEM::mem#2 = addMEMtoFAC::mem#0
Constant (const byte[]) prepareMEM::mem#3 = divMEMbyFAC::mem#0
Succesful SSA optimization Pass2ConstantIdentification
Fixing word constructor with getFAC::$0 ← *(memHi#0) w= *(memLo#0)
Succesful SSA optimization Pass2FixWordConstructors
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_word::@2
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) @8
Culled Empty Block (label) main::@5
Culled Empty Block (label) @37
Succesful SSA optimization Pass2CullEmptyBlocks
Not aliassing across scopes: line_cursor#6 line_cursor#13
Not aliassing across scopes: print_byte::b#2 print_byte::b#0
Not aliassing across scopes: char_cursor#31 char_cursor#32
Not aliassing across scopes: print_char::ch#2 print_char::ch#0
Not aliassing across scopes: char_cursor#23 char_cursor#31
Not aliassing across scopes: prepareMEM::mem#1 setMEMtoFAC::mem#2
Not aliassing across scopes: prepareMEM::mem#4 mulFACbyMEM::mem#2
Not aliassing across scopes: char_cursor#32 line_cursor#1
Not aliassing across scopes: line_cursor#13 line_cursor#1
Not aliassing across scopes: getFAC::return#2 getFAC::return#0
Not aliassing across scopes: print_word::w#0 getFAC::return#2
Alias (word) getFAC::return#0 = (word~) getFAC::$0 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: line_cursor#6 line_cursor#13
Not aliassing across scopes: print_byte::b#2 print_byte::b#0
Not aliassing across scopes: char_cursor#31 char_cursor#32
Not aliassing across scopes: print_char::ch#2 print_char::ch#0
Not aliassing across scopes: char_cursor#23 char_cursor#31
Not aliassing across scopes: prepareMEM::mem#1 setMEMtoFAC::mem#2
Not aliassing across scopes: prepareMEM::mem#4 mulFACbyMEM::mem#2
Not aliassing across scopes: char_cursor#32 line_cursor#1
Not aliassing across scopes: line_cursor#13 line_cursor#1
Not aliassing across scopes: getFAC::return#2 getFAC::return#0
Not aliassing across scopes: print_word::w#0 getFAC::return#2
Not aliassing across scopes: line_cursor#6 line_cursor#13
Not aliassing across scopes: print_byte::b#2 print_byte::b#0
Not aliassing across scopes: char_cursor#31 char_cursor#32
Not aliassing across scopes: print_char::ch#2 print_char::ch#0
Not aliassing across scopes: char_cursor#23 char_cursor#31
Not aliassing across scopes: prepareMEM::mem#1 setMEMtoFAC::mem#2
Not aliassing across scopes: prepareMEM::mem#4 mulFACbyMEM::mem#2
Not aliassing across scopes: char_cursor#32 line_cursor#1
Not aliassing across scopes: line_cursor#13 line_cursor#1
Not aliassing across scopes: getFAC::return#2 getFAC::return#0
Not aliassing across scopes: print_word::w#0 getFAC::return#2
OPTIMIZING CONTROL FLOW GRAPH
Inlining constant with var siblings (const byte[]) prepareMEM::mem#2
Inlining constant with var siblings (const byte[]) prepareMEM::mem#2
Inlining constant with var siblings (const byte[]) prepareMEM::mem#2
Inlining constant with var siblings (const byte[]) prepareMEM::mem#2
Inlining constant with var siblings (const byte[]) prepareMEM::mem#3
Inlining constant with var siblings (const byte[]) prepareMEM::mem#3
Inlining constant with var siblings (const byte[]) prepareMEM::mem#3
Inlining constant with var siblings (const byte[]) prepareMEM::mem#3
Inlining constant with var siblings (const word) setFAC::w#0
Inlining constant with var siblings (const word) setFAC::w#0
Inlining constant with different constant siblings (const word) setFAC::w#0
Inlining constant with var siblings (const word) setFAC::w#2
Inlining constant with var siblings (const word) setFAC::w#2
Inlining constant with different constant siblings (const word) setFAC::w#2
Inlining constant with var siblings (const byte[]) setMEMtoFAC::mem#0
Inlining constant with var siblings (const byte[]) setMEMtoFAC::mem#1
Inlining constant with var siblings (const byte*) mulFACbyMEM::mem#0
Inlining constant with var siblings (const byte[]) mulFACbyMEM::mem#1
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte*) char_cursor#0
Inlining constant with var siblings (const byte*) char_cursor#0
Inlining constant with var siblings (const byte*) char_cursor#0
Inlining constant with var siblings (const byte*) char_cursor#0
Constant inlined addMEMtoFAC::mem#0 = (const byte[]) main::f_127#0
Constant inlined setFAC::w#2 = (byte/signed byte/word/signed word) 25
Constant inlined prepareMEM::mem#2 = (const byte[]) main::f_127#0
Constant inlined prepareMEM::mem#3 = (const byte[]) main::f_i#0
Constant inlined divMEMbyFAC::mem#0 = (const byte[]) main::f_i#0
Constant inlined main::i#0 = (byte/signed byte/word/signed word) 1
Constant inlined setMEMtoFAC::mem#1 = (const byte[]) main::f_i#0
Constant inlined mulFACbyMEM::mem#0 = (const byte*) main::f_2pi#0
Constant inlined char_cursor#0 = ((byte*))(word/signed word) 1024
Constant inlined print_byte::$4 = (const string) print_byte::hextab#0
Constant inlined setMEMtoFAC::mem#0 = (const byte[]) main::f_127#0
Constant inlined mulFACbyMEM::mem#1 = (const byte[]) main::f_127#0
Constant inlined setFAC::w#0 = (word/signed word) 1275
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @36 @end main main::@3 main::@4 main::@1 main::@6 main::@7 main::@8 main::@9 main::@10 main::@11 main::@12 main::@13 main::@14 main::@15 main::@16 main::@return print_ln print_ln::@1 print_ln::@return print_word print_word::@1 print_word::@return print_byte print_byte::@1 print_byte::@return print_char print_char::@return getFAC getFAC::@return addMEMtoFAC addMEMtoFAC::@1 addMEMtoFAC::@return prepareMEM prepareMEM::@return mulFACbyMEM mulFACbyMEM::@1 mulFACbyMEM::@return sinFAC sinFAC::@return divMEMbyFAC divMEMbyFAC::@1 divMEMbyFAC::@return setFAC setFAC::@1 setFAC::@return setMEMtoFAC setMEMtoFAC::@1 setMEMtoFAC::@return divFACby10 divFACby10::@return 
Added new block during phi lifting main::@17(between main::@16 and main::@1)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Block Sequence Planned @begin @36 @end main main::@3 main::@4 main::@1 main::@6 main::@7 main::@8 main::@9 main::@10 main::@11 main::@12 main::@13 main::@14 main::@15 main::@16 main::@return main::@17 print_ln print_ln::@1 print_ln::@return print_ln::@3 print_word print_word::@1 print_word::@return print_byte print_byte::@1 print_byte::@return print_char print_char::@return getFAC getFAC::@return addMEMtoFAC addMEMtoFAC::@1 addMEMtoFAC::@return prepareMEM prepareMEM::@return mulFACbyMEM mulFACbyMEM::@1 mulFACbyMEM::@return sinFAC sinFAC::@return divMEMbyFAC divMEMbyFAC::@1 divMEMbyFAC::@return setFAC setFAC::@1 setFAC::@return setMEMtoFAC setMEMtoFAC::@1 setMEMtoFAC::@return divFACby10 divFACby10::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @36
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of addMEMtoFAC
Adding NOP phi() at start of divMEMbyFAC
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to setFAC:5 divFACby10:7 setMEMtoFAC:9 setFAC:13 mulFACbyMEM:15 setMEMtoFAC:17 setFAC:19 divMEMbyFAC:21 sinFAC:23 mulFACbyMEM:25 addMEMtoFAC:27 getFAC:29 print_word:32 print_ln:34 
Calls in [print_word] to print_byte:50 print_byte:54 
Calls in [print_byte] to print_char:61 print_char:66 
Calls in [addMEMtoFAC] to prepareMEM:76 
Calls in [mulFACbyMEM] to prepareMEM:88 
Calls in [divMEMbyFAC] to prepareMEM:94 
Calls in [setFAC] to prepareMEM:100 
Calls in [setMEMtoFAC] to prepareMEM:106 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 12 initial phi equivalence classes
Coalesced [12] setFAC::w#4 ← setFAC::w#1
Coalesced [38] main::i#14 ← main::i#1
Not coalescing [39] char_cursor#48 ← line_cursor#1
Coalesced [40] line_cursor#30 ← line_cursor#1
Coalesced [41] line_cursor#31 ← line_cursor#13
Coalesced (already) [46] line_cursor#32 ← line_cursor#1
Coalesced [48] print_byte::b#4 ← print_byte::b#0
Coalesced [49] char_cursor#49 ← char_cursor#32
Coalesced [52] print_byte::b#5 ← print_byte::b#1
Coalesced [53] char_cursor#50 ← char_cursor#10
Coalesced [59] print_char::ch#3 ← print_char::ch#0
Coalesced [60] char_cursor#51 ← char_cursor#31
Coalesced [64] print_char::ch#4 ← print_char::ch#1
Coalesced (already) [65] char_cursor#52 ← char_cursor#10
Coalesced [87] prepareMEM::mem#6 ← prepareMEM::mem#4
Coalesced [99] prepareMEM::mem#7 ← prepareMEM::mem#0
Coalesced [105] prepareMEM::mem#8 ← prepareMEM::mem#1
Coalesced down to 9 phi equivalence classes
Culled Empty Block (label) print_ln::@3
Block Sequence Planned @begin @36 @end main main::@3 main::@4 main::@1 main::@6 main::@7 main::@8 main::@9 main::@10 main::@11 main::@12 main::@13 main::@14 main::@15 main::@16 main::@return main::@17 print_ln print_ln::@1 print_ln::@return print_word print_word::@1 print_word::@return print_byte print_byte::@1 print_byte::@return print_char print_char::@return getFAC getFAC::@return addMEMtoFAC addMEMtoFAC::@1 addMEMtoFAC::@return prepareMEM prepareMEM::@return mulFACbyMEM mulFACbyMEM::@1 mulFACbyMEM::@return sinFAC sinFAC::@return divMEMbyFAC divMEMbyFAC::@1 divMEMbyFAC::@return setFAC setFAC::@1 setFAC::@return setMEMtoFAC setMEMtoFAC::@1 setMEMtoFAC::@return divFACby10 divFACby10::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @36
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of addMEMtoFAC
Adding NOP phi() at start of divMEMbyFAC
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@36
@36: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @36
  [3] phi() [ ] ( )
main: scope:[main]  from @36
  [4] phi() [ ] ( main:2 [ ] )
  [5] call setFAC param-assignment [ ] ( main:2 [ ] )
  to:main::@3
main::@3: scope:[main]  from main
  [6] phi() [ ] ( main:2 [ ] )
  [7] call divFACby10 param-assignment [ ] ( main:2 [ ] )
  to:main::@4
main::@4: scope:[main]  from main::@3
  [8] phi() [ ] ( main:2 [ ] )
  [9] call setMEMtoFAC param-assignment [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main::@17 main::@4
  [10] (byte*) line_cursor#13 ← phi( main::@17/(byte*) line_cursor#1 main::@4/((byte*))(word/signed word) 1024 ) [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  [10] (byte*) char_cursor#32 ← phi( main::@17/(byte*~) char_cursor#48 main::@4/((byte*))(word/signed word) 1024 ) [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  [10] (byte) main::i#10 ← phi( main::@17/(byte) main::i#1 main::@4/(byte/signed byte/word/signed word) 1 ) [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  [11] (word) setFAC::w#1 ← ((word)) (byte) main::i#10 [ main::i#10 char_cursor#32 line_cursor#13 setFAC::w#1 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 setFAC::w#1 ] )
  [12] call setFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  to:main::@6
main::@6: scope:[main]  from main::@1
  [13] phi() [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  [14] call mulFACbyMEM param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  to:main::@7
main::@7: scope:[main]  from main::@6
  [15] phi() [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  [16] call setMEMtoFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  to:main::@8
main::@8: scope:[main]  from main::@7
  [17] phi() [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  [18] call setFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  to:main::@9
main::@9: scope:[main]  from main::@8
  [19] phi() [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  [20] call divMEMbyFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  to:main::@10
main::@10: scope:[main]  from main::@9
  [21] phi() [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  [22] call sinFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  to:main::@11
main::@11: scope:[main]  from main::@10
  [23] phi() [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  [24] call mulFACbyMEM param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  to:main::@12
main::@12: scope:[main]  from main::@11
  [25] phi() [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  [26] call addMEMtoFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  to:main::@13
main::@13: scope:[main]  from main::@12
  [27] phi() [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  [28] call getFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#0 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#0 ] )
  [29] (word) getFAC::return#2 ← (word) getFAC::return#0 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#2 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#2 ] )
  to:main::@14
main::@14: scope:[main]  from main::@13
  [30] (word) print_word::w#0 ← (word) getFAC::return#2 [ main::i#10 char_cursor#32 line_cursor#13 print_word::w#0 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 print_word::w#0 ] )
  [31] call print_word param-assignment [ main::i#10 line_cursor#13 char_cursor#10 ] ( main:2 [ main::i#10 line_cursor#13 char_cursor#10 ] )
  to:main::@15
main::@15: scope:[main]  from main::@14
  [32] phi() [ main::i#10 line_cursor#13 char_cursor#10 ] ( main:2 [ main::i#10 line_cursor#13 char_cursor#10 ] )
  [33] call print_ln param-assignment [ main::i#10 line_cursor#1 ] ( main:2 [ main::i#10 line_cursor#1 ] )
  to:main::@16
main::@16: scope:[main]  from main::@15
  [34] (byte) main::i#1 ← ++ (byte) main::i#10 [ main::i#1 line_cursor#1 ] ( main:2 [ main::i#1 line_cursor#1 ] )
  [35] if((byte) main::i#1!=(byte/signed byte/word/signed word) 26) goto main::@17 [ main::i#1 line_cursor#1 ] ( main:2 [ main::i#1 line_cursor#1 ] )
  to:main::@return
main::@return: scope:[main]  from main::@16
  [36] return  [ ] ( main:2 [ ] )
  to:@return
main::@17: scope:[main]  from main::@16
  [37] (byte*~) char_cursor#48 ← (byte*) line_cursor#1 [ main::i#1 char_cursor#48 line_cursor#1 ] ( main:2 [ main::i#1 char_cursor#48 line_cursor#1 ] )
  to:main::@1
print_ln: scope:[print_ln]  from main::@15
  [38] phi() [ line_cursor#13 char_cursor#10 ] ( main:2::print_ln:33 [ main::i#10 line_cursor#13 char_cursor#10 ] )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [39] (byte*) line_cursor#6 ← phi( print_ln/(byte*) line_cursor#13 print_ln::@1/(byte*) line_cursor#1 ) [ line_cursor#6 char_cursor#10 ] ( main:2::print_ln:33 [ main::i#10 line_cursor#6 char_cursor#10 ] )
  [40] (byte*) line_cursor#1 ← (byte*) line_cursor#6 + (byte/signed byte/word/signed word) 40 [ line_cursor#1 char_cursor#10 ] ( main:2::print_ln:33 [ main::i#10 line_cursor#1 char_cursor#10 ] )
  [41] if((byte*) line_cursor#1<(byte*) char_cursor#10) goto print_ln::@1 [ line_cursor#1 char_cursor#10 ] ( main:2::print_ln:33 [ main::i#10 line_cursor#1 char_cursor#10 ] )
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [42] return  [ line_cursor#1 ] ( main:2::print_ln:33 [ main::i#10 line_cursor#1 ] )
  to:@return
print_word: scope:[print_word]  from main::@14
  [43] (byte) print_byte::b#0 ← > (word) print_word::w#0 [ char_cursor#32 print_word::w#0 print_byte::b#0 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 char_cursor#32 print_word::w#0 print_byte::b#0 ] )
  [44] call print_byte param-assignment [ print_word::w#0 char_cursor#10 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 ] )
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [45] (byte) print_byte::b#1 ← < (word) print_word::w#0 [ char_cursor#10 print_byte::b#1 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 char_cursor#10 print_byte::b#1 ] )
  [46] call print_byte param-assignment [ char_cursor#10 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 char_cursor#10 ] )
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [47] return  [ char_cursor#10 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 char_cursor#10 ] )
  to:@return
print_byte: scope:[print_byte]  from print_word print_word::@1
  [48] (byte*) char_cursor#31 ← phi( print_word/(byte*) char_cursor#32 print_word::@1/(byte*) char_cursor#10 ) [ print_byte::b#2 char_cursor#31 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#31 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#31 ] )
  [48] (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 ) [ print_byte::b#2 char_cursor#31 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#31 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#31 ] )
  [49] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word) 4 [ print_byte::b#2 char_cursor#31 print_byte::$0 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#31 print_byte::$0 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#31 print_byte::$0 ] )
  [50] (byte) print_char::ch#0 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ print_byte::b#2 char_cursor#31 print_char::ch#0 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#31 print_char::ch#0 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#31 print_char::ch#0 ] )
  [51] call print_char param-assignment [ char_cursor#10 print_byte::b#2 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 print_byte::b#2 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 char_cursor#10 print_byte::b#2 ] )
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [52] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word) 15 [ char_cursor#10 print_byte::$2 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 print_byte::$2 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 char_cursor#10 print_byte::$2 ] )
  [53] (byte) print_char::ch#1 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#10 print_char::ch#1 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 print_char::ch#1 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 char_cursor#10 print_char::ch#1 ] )
  [54] call print_char param-assignment [ char_cursor#10 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 char_cursor#10 ] )
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [55] return  [ char_cursor#10 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 char_cursor#10 ] )
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1
  [56] (byte*) char_cursor#23 ← phi( print_byte/(byte*) char_cursor#31 print_byte::@1/(byte*) char_cursor#10 ) [ print_char::ch#2 char_cursor#23 ] ( main:2::print_word:31::print_byte:44::print_char:51 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 print_char::ch#2 char_cursor#23 ] main:2::print_word:31::print_byte:46::print_char:51 [ main::i#10 line_cursor#13 print_byte::b#2 print_char::ch#2 char_cursor#23 ] main:2::print_word:31::print_byte:44::print_char:54 [ main::i#10 line_cursor#13 print_word::w#0 print_char::ch#2 char_cursor#23 ] main:2::print_word:31::print_byte:46::print_char:54 [ main::i#10 line_cursor#13 print_char::ch#2 char_cursor#23 ] )
  [56] (byte) print_char::ch#2 ← phi( print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 ) [ print_char::ch#2 char_cursor#23 ] ( main:2::print_word:31::print_byte:44::print_char:51 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 print_char::ch#2 char_cursor#23 ] main:2::print_word:31::print_byte:46::print_char:51 [ main::i#10 line_cursor#13 print_byte::b#2 print_char::ch#2 char_cursor#23 ] main:2::print_word:31::print_byte:44::print_char:54 [ main::i#10 line_cursor#13 print_word::w#0 print_char::ch#2 char_cursor#23 ] main:2::print_word:31::print_byte:46::print_char:54 [ main::i#10 line_cursor#13 print_char::ch#2 char_cursor#23 ] )
  [57] *((byte*) char_cursor#23) ← (byte) print_char::ch#2 [ char_cursor#23 ] ( main:2::print_word:31::print_byte:44::print_char:51 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#23 ] main:2::print_word:31::print_byte:46::print_char:51 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#23 ] main:2::print_word:31::print_byte:44::print_char:54 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#23 ] main:2::print_word:31::print_byte:46::print_char:54 [ main::i#10 line_cursor#13 char_cursor#23 ] )
  [58] (byte*) char_cursor#10 ← ++ (byte*) char_cursor#23 [ char_cursor#10 ] ( main:2::print_word:31::print_byte:44::print_char:51 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#10 ] main:2::print_word:31::print_byte:46::print_char:51 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#10 ] main:2::print_word:31::print_byte:44::print_char:54 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 ] main:2::print_word:31::print_byte:46::print_char:54 [ main::i#10 line_cursor#13 char_cursor#10 ] )
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [59] return  [ char_cursor#10 ] ( main:2::print_word:31::print_byte:44::print_char:51 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#10 ] main:2::print_word:31::print_byte:46::print_char:51 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#10 ] main:2::print_word:31::print_byte:44::print_char:54 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 ] main:2::print_word:31::print_byte:46::print_char:54 [ main::i#10 line_cursor#13 char_cursor#10 ] )
  to:@return
getFAC: scope:[getFAC]  from main::@13
  asm { jsr$b1aa sty$fe sta$ff  }
  [61] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0) [ getFAC::return#0 ] ( main:2::getFAC:28 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#0 ] )
  to:getFAC::@return
getFAC::@return: scope:[getFAC]  from getFAC
  [62] return  [ getFAC::return#0 ] ( main:2::getFAC:28 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#0 ] )
  to:@return
addMEMtoFAC: scope:[addMEMtoFAC]  from main::@12
  [63] phi() [ ] ( main:2::addMEMtoFAC:26 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  [64] call prepareMEM param-assignment [ ] ( main:2::addMEMtoFAC:26 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  to:addMEMtoFAC::@1
addMEMtoFAC::@1: scope:[addMEMtoFAC]  from addMEMtoFAC
  asm { lda$fe ldy$ff jsr$b867  }
  to:addMEMtoFAC::@return
addMEMtoFAC::@return: scope:[addMEMtoFAC]  from addMEMtoFAC::@1
  [66] return  [ ] ( main:2::addMEMtoFAC:26 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  to:@return
prepareMEM: scope:[prepareMEM]  from addMEMtoFAC divMEMbyFAC mulFACbyMEM setFAC setMEMtoFAC
  [67] (byte*) prepareMEM::mem#5 ← phi( addMEMtoFAC/(const byte[]) main::f_127#0 divMEMbyFAC/(const byte[]) main::f_i#0 mulFACbyMEM/(byte*) prepareMEM::mem#4 setFAC/(byte*) prepareMEM::mem#0 setMEMtoFAC/(byte*) prepareMEM::mem#1 ) [ prepareMEM::mem#5 ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::setFAC:5::prepareMEM:86 [ prepareMEM::mem#5 ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ prepareMEM::mem#5 ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] )
  [68] (byte~) prepareMEM::$0 ← < (byte*) prepareMEM::mem#5 [ prepareMEM::mem#5 prepareMEM::$0 ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::setFAC:5::prepareMEM:86 [ prepareMEM::mem#5 prepareMEM::$0 ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ prepareMEM::mem#5 prepareMEM::$0 ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] )
  [69] *((const byte*) memLo#0) ← (byte~) prepareMEM::$0 [ prepareMEM::mem#5 ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::setFAC:5::prepareMEM:86 [ prepareMEM::mem#5 ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ prepareMEM::mem#5 ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] )
  [70] (byte~) prepareMEM::$1 ← > (byte*) prepareMEM::mem#5 [ prepareMEM::$1 ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::setFAC:5::prepareMEM:86 [ prepareMEM::$1 ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ prepareMEM::$1 ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] )
  [71] *((const byte*) memHi#0) ← (byte~) prepareMEM::$1 [ ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:5::prepareMEM:86 [ ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  to:prepareMEM::@return
prepareMEM::@return: scope:[prepareMEM]  from prepareMEM
  [72] return  [ ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:5::prepareMEM:86 [ ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  to:@return
mulFACbyMEM: scope:[mulFACbyMEM]  from main::@11 main::@6
  [73] (byte*) mulFACbyMEM::mem#2 ← phi( main::@11/(const byte[]) main::f_127#0 main::@6/(const byte*) main::f_2pi#0 ) [ mulFACbyMEM::mem#2 ] ( main:2::mulFACbyMEM:14 [ main::i#10 char_cursor#32 line_cursor#13 mulFACbyMEM::mem#2 ] main:2::mulFACbyMEM:24 [ main::i#10 char_cursor#32 line_cursor#13 mulFACbyMEM::mem#2 ] )
  [74] (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2 [ prepareMEM::mem#4 ] ( main:2::mulFACbyMEM:14 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#4 ] main:2::mulFACbyMEM:24 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#4 ] )
  [75] call prepareMEM param-assignment [ ] ( main:2::mulFACbyMEM:14 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:24 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  to:mulFACbyMEM::@1
mulFACbyMEM::@1: scope:[mulFACbyMEM]  from mulFACbyMEM
  asm { lda$fe ldy$ff jsr$ba28  }
  to:mulFACbyMEM::@return
mulFACbyMEM::@return: scope:[mulFACbyMEM]  from mulFACbyMEM::@1
  [77] return  [ ] ( main:2::mulFACbyMEM:14 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:24 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  to:@return
sinFAC: scope:[sinFAC]  from main::@10
  asm { jsr$e26b  }
  to:sinFAC::@return
sinFAC::@return: scope:[sinFAC]  from sinFAC
  [79] return  [ ] ( main:2::sinFAC:22 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  to:@return
divMEMbyFAC: scope:[divMEMbyFAC]  from main::@9
  [80] phi() [ ] ( main:2::divMEMbyFAC:20 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  [81] call prepareMEM param-assignment [ ] ( main:2::divMEMbyFAC:20 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  to:divMEMbyFAC::@1
divMEMbyFAC::@1: scope:[divMEMbyFAC]  from divMEMbyFAC
  asm { lda$fe ldy$ff jsr$bb0f  }
  to:divMEMbyFAC::@return
divMEMbyFAC::@return: scope:[divMEMbyFAC]  from divMEMbyFAC::@1
  [83] return  [ ] ( main:2::divMEMbyFAC:20 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  to:@return
setFAC: scope:[setFAC]  from main main::@1 main::@8
  [84] (word) setFAC::w#3 ← phi( main/(word/signed word) 1275 main::@1/(word) setFAC::w#1 main::@8/(byte/signed byte/word/signed word) 25 ) [ setFAC::w#3 ] ( main:2::setFAC:5 [ setFAC::w#3 ] main:2::setFAC:12 [ main::i#10 char_cursor#32 line_cursor#13 setFAC::w#3 ] main:2::setFAC:18 [ main::i#10 char_cursor#32 line_cursor#13 setFAC::w#3 ] )
  [85] (byte*) prepareMEM::mem#0 ← ((byte*)) (word) setFAC::w#3 [ prepareMEM::mem#0 ] ( main:2::setFAC:5 [ prepareMEM::mem#0 ] main:2::setFAC:12 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#0 ] main:2::setFAC:18 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#0 ] )
  [86] call prepareMEM param-assignment [ ] ( main:2::setFAC:5 [ ] main:2::setFAC:12 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:18 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  to:setFAC::@1
setFAC::@1: scope:[setFAC]  from setFAC
  asm { ldy$fe lda$ff jsr$b391  }
  to:setFAC::@return
setFAC::@return: scope:[setFAC]  from setFAC::@1
  [88] return  [ ] ( main:2::setFAC:5 [ ] main:2::setFAC:12 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:18 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  to:@return
setMEMtoFAC: scope:[setMEMtoFAC]  from main::@4 main::@7
  [89] (byte*) setMEMtoFAC::mem#2 ← phi( main::@4/(const byte[]) main::f_127#0 main::@7/(const byte[]) main::f_i#0 ) [ setMEMtoFAC::mem#2 ] ( main:2::setMEMtoFAC:9 [ setMEMtoFAC::mem#2 ] main:2::setMEMtoFAC:16 [ main::i#10 char_cursor#32 line_cursor#13 setMEMtoFAC::mem#2 ] )
  [90] (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#2 [ prepareMEM::mem#1 ] ( main:2::setMEMtoFAC:9 [ prepareMEM::mem#1 ] main:2::setMEMtoFAC:16 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#1 ] )
  [91] call prepareMEM param-assignment [ ] ( main:2::setMEMtoFAC:9 [ ] main:2::setMEMtoFAC:16 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  to:setMEMtoFAC::@1
setMEMtoFAC::@1: scope:[setMEMtoFAC]  from setMEMtoFAC
  asm { ldx$fe ldy$ff jsr$bbd4  }
  to:setMEMtoFAC::@return
setMEMtoFAC::@return: scope:[setMEMtoFAC]  from setMEMtoFAC::@1
  [93] return  [ ] ( main:2::setMEMtoFAC:9 [ ] main:2::setMEMtoFAC:16 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  to:@return
divFACby10: scope:[divFACby10]  from main::@3
  asm { jsr$bafe  }
  to:divFACby10::@return
divFACby10::@return: scope:[divFACby10]  from divFACby10
  [95] return  [ ] ( main:2::divFACby10:7 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@36 dominated by  @begin @36 
@end dominated by  @end @begin @36 
main dominated by  main @begin @36 
main::@3 dominated by  main main::@3 @begin @36 
main::@4 dominated by  main main::@3 main::@4 @begin @36 
main::@1 dominated by  main main::@1 main::@3 main::@4 @begin @36 
main::@6 dominated by  main main::@1 main::@6 main::@3 main::@4 @begin @36 
main::@7 dominated by  main::@7 main main::@1 main::@6 main::@3 main::@4 @begin @36 
main::@8 dominated by  main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 
main::@9 dominated by  main::@9 main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 
main::@10 dominated by  main::@9 main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 main::@10 
main::@11 dominated by  main::@9 main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 main::@11 main::@10 
main::@12 dominated by  main::@9 main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 main::@11 main::@10 main::@12 
main::@13 dominated by  main::@9 main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 main::@11 main::@10 main::@13 main::@12 
main::@14 dominated by  main::@9 main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 main::@11 main::@10 main::@13 main::@12 main::@14 
main::@15 dominated by  main::@9 main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 main::@11 main::@10 main::@13 main::@12 main::@15 main::@14 
main::@16 dominated by  main::@9 main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 main::@11 main::@10 main::@16 main::@13 main::@12 main::@15 main::@14 
main::@return dominated by  main::@9 main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 main::@return main::@11 main::@10 main::@16 main::@13 main::@12 main::@15 main::@14 
main::@17 dominated by  main::@9 main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 main::@11 main::@10 main::@17 main::@16 main::@13 main::@12 main::@15 main::@14 
print_ln dominated by  main::@9 main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 print_ln main::@11 main::@10 main::@13 main::@12 main::@15 main::@14 
print_ln::@1 dominated by  main::@9 print_ln::@1 main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 print_ln main::@11 main::@10 main::@13 main::@12 main::@15 main::@14 
print_ln::@return dominated by  main::@9 print_ln::@1 main::@7 main::@8 main print_ln::@return main::@1 main::@6 main::@3 main::@4 @begin @36 print_ln main::@11 main::@10 main::@13 main::@12 main::@15 main::@14 
print_word dominated by  main::@9 main::@7 main::@8 main print_word main::@1 main::@6 main::@3 main::@4 @begin @36 main::@11 main::@10 main::@13 main::@12 main::@14 
print_word::@1 dominated by  main::@9 main::@7 main::@8 main print_word main::@1 main::@6 main::@3 main::@4 @begin @36 print_word::@1 main::@11 main::@10 main::@13 main::@12 main::@14 
print_word::@return dominated by  main::@9 main::@7 main::@8 main print_word main::@1 main::@6 main::@3 main::@4 @begin @36 print_word::@return print_word::@1 main::@11 main::@10 main::@13 main::@12 main::@14 
print_byte dominated by  main::@9 main::@7 main::@8 main print_word main::@1 main::@6 main::@3 main::@4 @begin @36 main::@11 main::@10 print_byte main::@13 main::@12 main::@14 
print_byte::@1 dominated by  main::@9 main::@7 main::@8 main print_word main::@1 main::@6 main::@3 main::@4 @begin @36 print_byte::@1 main::@11 main::@10 print_byte main::@13 main::@12 main::@14 
print_byte::@return dominated by  main::@9 main::@7 main::@8 main print_word main::@1 main::@6 main::@3 main::@4 @begin @36 print_byte::@return print_byte::@1 main::@11 main::@10 print_byte main::@13 main::@12 main::@14 
print_char dominated by  main::@9 main::@7 main::@8 main print_word print_char main::@1 main::@6 main::@3 main::@4 @begin @36 main::@11 main::@10 print_byte main::@13 main::@12 main::@14 
print_char::@return dominated by  main::@9 main::@7 main::@8 main print_word print_char main::@1 main::@6 main::@3 main::@4 print_char::@return @begin @36 main::@11 main::@10 print_byte main::@13 main::@12 main::@14 
getFAC dominated by  main::@9 main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 getFAC main::@11 main::@10 main::@13 main::@12 
getFAC::@return dominated by  main::@9 main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 getFAC main::@11 main::@10 main::@13 main::@12 getFAC::@return 
addMEMtoFAC dominated by  main::@9 main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 addMEMtoFAC main::@11 main::@10 main::@12 
addMEMtoFAC::@1 dominated by  main::@9 main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 addMEMtoFAC::@1 addMEMtoFAC main::@11 main::@10 main::@12 
addMEMtoFAC::@return dominated by  main::@9 main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 addMEMtoFAC::@1 addMEMtoFAC main::@11 main::@10 addMEMtoFAC::@return main::@12 
prepareMEM dominated by  main @begin @36 prepareMEM 
prepareMEM::@return dominated by  main @begin @36 prepareMEM::@return prepareMEM 
mulFACbyMEM dominated by  main mulFACbyMEM main::@1 main::@6 main::@3 main::@4 @begin @36 
mulFACbyMEM::@1 dominated by  main mulFACbyMEM main::@1 main::@6 main::@3 main::@4 @begin @36 mulFACbyMEM::@1 
mulFACbyMEM::@return dominated by  main mulFACbyMEM::@return mulFACbyMEM main::@1 main::@6 main::@3 main::@4 @begin @36 mulFACbyMEM::@1 
sinFAC dominated by  main::@9 main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 sinFAC main::@10 
sinFAC::@return dominated by  main::@9 main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 sinFAC sinFAC::@return main::@10 
divMEMbyFAC dominated by  main::@9 main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 divMEMbyFAC 
divMEMbyFAC::@1 dominated by  main::@9 main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 divMEMbyFAC::@1 divMEMbyFAC 
divMEMbyFAC::@return dominated by  main::@9 main::@7 main::@8 main main::@1 main::@6 main::@3 main::@4 @begin @36 divMEMbyFAC::@1 divMEMbyFAC divMEMbyFAC::@return 
setFAC dominated by  main @begin @36 setFAC 
setFAC::@1 dominated by  main @begin @36 setFAC setFAC::@1 
setFAC::@return dominated by  setFAC::@return main @begin @36 setFAC setFAC::@1 
setMEMtoFAC dominated by  main main::@3 main::@4 @begin @36 setMEMtoFAC 
setMEMtoFAC::@1 dominated by  main main::@3 main::@4 @begin @36 setMEMtoFAC setMEMtoFAC::@1 
setMEMtoFAC::@return dominated by  main main::@3 main::@4 @begin @36 setMEMtoFAC setMEMtoFAC::@1 setMEMtoFAC::@return 
divFACby10 dominated by  main main::@3 @begin @36 divFACby10 
divFACby10::@return dominated by  divFACby10::@return main main::@3 @begin @36 divFACby10 

NATURAL LOOPS
Found back edge: Loop head: main::@1 tails: main::@17 blocks: null
Found back edge: Loop head: print_ln::@1 tails: print_ln::@1 blocks: null
Populated: Loop head: main::@1 tails: main::@17 blocks: main::@17 main::@16 main::@15 main::@14 main::@13 main::@12 main::@11 main::@10 main::@9 main::@8 main::@7 main::@6 main::@1 
Populated: Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Loop head: main::@1 tails: main::@17 blocks: main::@17 main::@16 main::@15 main::@14 main::@13 main::@12 main::@11 main::@10 main::@9 main::@8 main::@7 main::@6 main::@1 
Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 

NATURAL LOOPS WITH DEPTH
Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@17 blocks: main::@17 main::@16 main::@15 main::@14 main::@13 main::@12 main::@11 main::@10 main::@9 main::@8 main::@7 main::@6 main::@1 
Found 0 loops in scope [setFAC]
Found 0 loops in scope [divFACby10]
Found 0 loops in scope [setMEMtoFAC]
Found 0 loops in scope [mulFACbyMEM]
Found 0 loops in scope [divMEMbyFAC]
Found 0 loops in scope [sinFAC]
Found 0 loops in scope [addMEMtoFAC]
Found 0 loops in scope [getFAC]
Found 0 loops in scope [print_word]
Found 1 loops in scope [print_ln]
  Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Found 0 loops in scope [prepareMEM]
Found 0 loops in scope [print_byte]
Found 0 loops in scope [print_char]
Loop head: main::@1 tails: main::@17 blocks: main::@17 main::@16 main::@15 main::@14 main::@13 main::@12 main::@11 main::@10 main::@9 main::@8 main::@7 main::@6 main::@1  depth: 1
Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1  depth: 2


VARIABLE REGISTER WEIGHTS
(void()) addMEMtoFAC((byte*) addMEMtoFAC::mem)
(byte*) addMEMtoFAC::mem
(byte*) char_cursor
(byte*) char_cursor#10 6.2941176470588225
(byte*) char_cursor#23 4.0
(byte*) char_cursor#31 2.0
(byte*) char_cursor#32 0.5909090909090909
(byte*~) char_cursor#48 22.0
(void()) divFACby10()
(void()) divMEMbyFAC((byte*) divMEMbyFAC::mem)
(byte*) divMEMbyFAC::mem
(word()) getFAC()
(word) getFAC::return
(word) getFAC::return#0 4.333333333333333
(word) getFAC::return#2 22.0
(word) getFAC::w
(byte*) line_cursor
(byte*) line_cursor#1 46.42857142857143
(byte*) line_cursor#13 0.5416666666666666
(byte*) line_cursor#6 204.0
(void()) main()
(byte[]) main::f_127
(byte*) main::f_2pi
(byte[]) main::f_i
(byte) main::i
(byte) main::i#1 11.0
(byte) main::i#10 1.375
(byte*) memHi
(byte*) memLo
(void()) mulFACbyMEM((byte*) mulFACbyMEM::mem)
(byte*) mulFACbyMEM::mem
(byte*) mulFACbyMEM::mem#2 2.0
(void()) prepareMEM((byte*) prepareMEM::mem)
(byte~) prepareMEM::$0 4.0
(byte~) prepareMEM::$1 4.0
(byte*) prepareMEM::mem
(byte*) prepareMEM::mem#0 4.0
(byte*) prepareMEM::mem#1 4.0
(byte*) prepareMEM::mem#4 4.0
(byte*) prepareMEM::mem#5 3.333333333333333
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#0 4.0
(byte) print_byte::b#1 4.0
(byte) print_byte::b#2 2.0
(byte[]) print_byte::hextab
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 4.0
(byte) print_char::ch#1 4.0
(byte) print_char::ch#2 6.0
(void()) print_ln()
(void()) print_word((word) print_word::w)
(word) print_word::w
(word) print_word::w#0 5.0
(void()) setFAC((word) setFAC::w)
(word) setFAC::w
(word) setFAC::w#1 22.0
(word) setFAC::w#3 13.0
(void()) setMEMtoFAC((byte*) setMEMtoFAC::mem)
(byte*) setMEMtoFAC::mem
(byte*) setMEMtoFAC::mem#2 2.0
(void()) sinFAC()

Initial phi equivalence classes
[ main::i#10 main::i#1 ]
[ line_cursor#6 line_cursor#13 line_cursor#1 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
[ char_cursor#23 char_cursor#31 char_cursor#32 char_cursor#48 char_cursor#10 ]
[ prepareMEM::mem#5 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 ]
[ mulFACbyMEM::mem#2 ]
[ setFAC::w#3 setFAC::w#1 ]
[ setMEMtoFAC::mem#2 ]
Added variable getFAC::return#2 to zero page equivalence class [ getFAC::return#2 ]
Added variable print_word::w#0 to zero page equivalence class [ print_word::w#0 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Added variable getFAC::return#0 to zero page equivalence class [ getFAC::return#0 ]
Added variable prepareMEM::$0 to zero page equivalence class [ prepareMEM::$0 ]
Added variable prepareMEM::$1 to zero page equivalence class [ prepareMEM::$1 ]
Complete equivalence classes
[ main::i#10 main::i#1 ]
[ line_cursor#6 line_cursor#13 line_cursor#1 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
[ char_cursor#23 char_cursor#31 char_cursor#32 char_cursor#48 char_cursor#10 ]
[ prepareMEM::mem#5 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 ]
[ mulFACbyMEM::mem#2 ]
[ setFAC::w#3 setFAC::w#1 ]
[ setMEMtoFAC::mem#2 ]
[ getFAC::return#2 ]
[ print_word::w#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
[ getFAC::return#0 ]
[ prepareMEM::$0 ]
[ prepareMEM::$1 ]
Allocated zp ZP_BYTE:2 [ main::i#10 main::i#1 ]
Allocated zp ZP_WORD:3 [ line_cursor#6 line_cursor#13 line_cursor#1 ]
Allocated zp ZP_BYTE:5 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Allocated zp ZP_BYTE:6 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
Allocated zp ZP_WORD:7 [ char_cursor#23 char_cursor#31 char_cursor#32 char_cursor#48 char_cursor#10 ]
Allocated zp ZP_WORD:9 [ prepareMEM::mem#5 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 ]
Allocated zp ZP_WORD:11 [ mulFACbyMEM::mem#2 ]
Allocated zp ZP_WORD:13 [ setFAC::w#3 setFAC::w#1 ]
Allocated zp ZP_WORD:15 [ setMEMtoFAC::mem#2 ]
Allocated zp ZP_WORD:17 [ getFAC::return#2 ]
Allocated zp ZP_WORD:19 [ print_word::w#0 ]
Allocated zp ZP_BYTE:21 [ print_byte::$0 ]
Allocated zp ZP_BYTE:22 [ print_byte::$2 ]
Allocated zp ZP_WORD:23 [ getFAC::return#0 ]
Allocated zp ZP_BYTE:25 [ prepareMEM::$0 ]
Allocated zp ZP_BYTE:26 [ prepareMEM::$1 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const memLo = $fe
  .const memHi = $ff
  .label line_cursor = 3
  .label char_cursor = 7
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @36 [phi:@begin->@36]
b36_from_bbegin:
  jmp b36
//SEG4 @36
b36:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @36 to main [phi:@36->main]
main_from_b36:
  jsr main
//SEG7 [3] phi from @36 to @end [phi:@36->@end]
bend_from_b36:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .const f_2pi = $e2e5
    .label i = 2
  //SEG10 [5] call setFAC param-assignment [ ] ( main:2 [ ] )
  //SEG11 [84] phi from main to setFAC [phi:main->setFAC]
  setFAC_from_main:
  //SEG12 [84] phi (word) setFAC::w#3 = (word/signed word) 1275 [phi:main->setFAC#0] -- vwuz1=vwuc1 
    lda #<$4fb
    sta setFAC.w
    lda #>$4fb
    sta setFAC.w+1
    jsr setFAC
  //SEG13 [6] phi from main to main::@3 [phi:main->main::@3]
  b3_from_main:
    jmp b3
  //SEG14 main::@3
  b3:
  //SEG15 [7] call divFACby10 param-assignment [ ] ( main:2 [ ] )
    jsr divFACby10
  //SEG16 [8] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
  //SEG17 main::@4
  b4:
  //SEG18 [9] call setMEMtoFAC param-assignment [ ] ( main:2 [ ] )
  //SEG19 [89] phi from main::@4 to setMEMtoFAC [phi:main::@4->setMEMtoFAC]
  setMEMtoFAC_from_b4:
  //SEG20 [89] phi (byte*) setMEMtoFAC::mem#2 = (const byte[]) main::f_127#0 [phi:main::@4->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_127
    sta setMEMtoFAC.mem
    lda #>f_127
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
  //SEG21 [10] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  b1_from_b4:
  //SEG22 [10] phi (byte*) line_cursor#13 = ((byte*))(word/signed word) 1024 [phi:main::@4->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta line_cursor
    lda #>$400
    sta line_cursor+1
  //SEG23 [10] phi (byte*) char_cursor#32 = ((byte*))(word/signed word) 1024 [phi:main::@4->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta char_cursor
    lda #>$400
    sta char_cursor+1
  //SEG24 [10] phi (byte) main::i#10 = (byte/signed byte/word/signed word) 1 [phi:main::@4->main::@1#2] -- vbuz1=vbuc1 
    lda #1
    sta i
    jmp b1
  //SEG25 main::@1
  b1:
  //SEG26 [11] (word) setFAC::w#1 ← ((word)) (byte) main::i#10 [ main::i#10 char_cursor#32 line_cursor#13 setFAC::w#1 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 setFAC::w#1 ] ) -- vwuz1=_word_vbuz2 
    lda i
    sta setFAC.w
    lda #0
    sta setFAC.w+1
  //SEG27 [12] call setFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG28 [84] phi from main::@1 to setFAC [phi:main::@1->setFAC]
  setFAC_from_b1:
  //SEG29 [84] phi (word) setFAC::w#3 = (word) setFAC::w#1 [phi:main::@1->setFAC#0] -- register_copy 
    jsr setFAC
  //SEG30 [13] phi from main::@1 to main::@6 [phi:main::@1->main::@6]
  b6_from_b1:
    jmp b6
  //SEG31 main::@6
  b6:
  //SEG32 [14] call mulFACbyMEM param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG33 [73] phi from main::@6 to mulFACbyMEM [phi:main::@6->mulFACbyMEM]
  mulFACbyMEM_from_b6:
  //SEG34 [73] phi (byte*) mulFACbyMEM::mem#2 = (const byte*) main::f_2pi#0 [phi:main::@6->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_2pi
    sta mulFACbyMEM.mem
    lda #>f_2pi
    sta mulFACbyMEM.mem+1
    jsr mulFACbyMEM
  //SEG35 [15] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  b7_from_b6:
    jmp b7
  //SEG36 main::@7
  b7:
  //SEG37 [16] call setMEMtoFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG38 [89] phi from main::@7 to setMEMtoFAC [phi:main::@7->setMEMtoFAC]
  setMEMtoFAC_from_b7:
  //SEG39 [89] phi (byte*) setMEMtoFAC::mem#2 = (const byte[]) main::f_i#0 [phi:main::@7->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_i
    sta setMEMtoFAC.mem
    lda #>f_i
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
  //SEG40 [17] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  b8_from_b7:
    jmp b8
  //SEG41 main::@8
  b8:
  //SEG42 [18] call setFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG43 [84] phi from main::@8 to setFAC [phi:main::@8->setFAC]
  setFAC_from_b8:
  //SEG44 [84] phi (word) setFAC::w#3 = (byte/signed byte/word/signed word) 25 [phi:main::@8->setFAC#0] -- vwuz1=vbuc1 
    lda #$19
    sta setFAC.w
    lda #0
    sta setFAC.w+1
    jsr setFAC
  //SEG45 [19] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  b9_from_b8:
    jmp b9
  //SEG46 main::@9
  b9:
  //SEG47 [20] call divMEMbyFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG48 [80] phi from main::@9 to divMEMbyFAC [phi:main::@9->divMEMbyFAC]
  divMEMbyFAC_from_b9:
    jsr divMEMbyFAC
  //SEG49 [21] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  b10_from_b9:
    jmp b10
  //SEG50 main::@10
  b10:
  //SEG51 [22] call sinFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    jsr sinFAC
  //SEG52 [23] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  b11_from_b10:
    jmp b11
  //SEG53 main::@11
  b11:
  //SEG54 [24] call mulFACbyMEM param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG55 [73] phi from main::@11 to mulFACbyMEM [phi:main::@11->mulFACbyMEM]
  mulFACbyMEM_from_b11:
  //SEG56 [73] phi (byte*) mulFACbyMEM::mem#2 = (const byte[]) main::f_127#0 [phi:main::@11->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_127
    sta mulFACbyMEM.mem
    lda #>f_127
    sta mulFACbyMEM.mem+1
    jsr mulFACbyMEM
  //SEG57 [25] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  b12_from_b11:
    jmp b12
  //SEG58 main::@12
  b12:
  //SEG59 [26] call addMEMtoFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG60 [63] phi from main::@12 to addMEMtoFAC [phi:main::@12->addMEMtoFAC]
  addMEMtoFAC_from_b12:
    jsr addMEMtoFAC
  //SEG61 [27] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  b13_from_b12:
    jmp b13
  //SEG62 main::@13
  b13:
  //SEG63 [28] call getFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#0 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#0 ] )
    jsr getFAC
  //SEG64 [29] (word) getFAC::return#2 ← (word) getFAC::return#0 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#2 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#2 ] ) -- vwuz1=vwuz2 
    lda getFAC.return
    sta getFAC.return_2
    lda getFAC.return+1
    sta getFAC.return_2+1
    jmp b14
  //SEG65 main::@14
  b14:
  //SEG66 [30] (word) print_word::w#0 ← (word) getFAC::return#2 [ main::i#10 char_cursor#32 line_cursor#13 print_word::w#0 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 print_word::w#0 ] ) -- vwuz1=vwuz2 
    lda getFAC.return_2
    sta print_word.w
    lda getFAC.return_2+1
    sta print_word.w+1
  //SEG67 [31] call print_word param-assignment [ main::i#10 line_cursor#13 char_cursor#10 ] ( main:2 [ main::i#10 line_cursor#13 char_cursor#10 ] )
    jsr print_word
  //SEG68 [32] phi from main::@14 to main::@15 [phi:main::@14->main::@15]
  b15_from_b14:
    jmp b15
  //SEG69 main::@15
  b15:
  //SEG70 [33] call print_ln param-assignment [ main::i#10 line_cursor#1 ] ( main:2 [ main::i#10 line_cursor#1 ] )
  //SEG71 [38] phi from main::@15 to print_ln [phi:main::@15->print_ln]
  print_ln_from_b15:
    jsr print_ln
    jmp b16
  //SEG72 main::@16
  b16:
  //SEG73 [34] (byte) main::i#1 ← ++ (byte) main::i#10 [ main::i#1 line_cursor#1 ] ( main:2 [ main::i#1 line_cursor#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG74 [35] if((byte) main::i#1!=(byte/signed byte/word/signed word) 26) goto main::@17 [ main::i#1 line_cursor#1 ] ( main:2 [ main::i#1 line_cursor#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$1a
    bne b17
    jmp breturn
  //SEG75 main::@return
  breturn:
  //SEG76 [36] return  [ ] ( main:2 [ ] )
    rts
  //SEG77 main::@17
  b17:
  //SEG78 [37] (byte*~) char_cursor#48 ← (byte*) line_cursor#1 [ main::i#1 char_cursor#48 line_cursor#1 ] ( main:2 [ main::i#1 char_cursor#48 line_cursor#1 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG79 [10] phi from main::@17 to main::@1 [phi:main::@17->main::@1]
  b1_from_b17:
  //SEG80 [10] phi (byte*) line_cursor#13 = (byte*) line_cursor#1 [phi:main::@17->main::@1#0] -- register_copy 
  //SEG81 [10] phi (byte*) char_cursor#32 = (byte*~) char_cursor#48 [phi:main::@17->main::@1#1] -- register_copy 
  //SEG82 [10] phi (byte) main::i#10 = (byte) main::i#1 [phi:main::@17->main::@1#2] -- register_copy 
    jmp b1
    f_i: .byte 0, 0, 0, 0, 0
    f_127: .byte 0, 0, 0, 0, 0
}
//SEG83 print_ln
print_ln: {
  //SEG84 [39] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG85 [39] phi (byte*) line_cursor#6 = (byte*) line_cursor#13 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG86 print_ln::@1
  b1:
  //SEG87 [40] (byte*) line_cursor#1 ← (byte*) line_cursor#6 + (byte/signed byte/word/signed word) 40 [ line_cursor#1 char_cursor#10 ] ( main:2::print_ln:33 [ main::i#10 line_cursor#1 char_cursor#10 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda line_cursor
    clc
    adc #$28
    sta line_cursor
    bcc !+
    inc line_cursor+1
  !:
  //SEG88 [41] if((byte*) line_cursor#1<(byte*) char_cursor#10) goto print_ln::@1 [ line_cursor#1 char_cursor#10 ] ( main:2::print_ln:33 [ main::i#10 line_cursor#1 char_cursor#10 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda line_cursor+1
    cmp char_cursor+1
    bcc b1_from_b1
    bne !+
    lda line_cursor
    cmp char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG89 print_ln::@return
  breturn:
  //SEG90 [42] return  [ line_cursor#1 ] ( main:2::print_ln:33 [ main::i#10 line_cursor#1 ] )
    rts
}
//SEG91 print_word
print_word: {
    .label w = $13
  //SEG92 [43] (byte) print_byte::b#0 ← > (word) print_word::w#0 [ char_cursor#32 print_word::w#0 print_byte::b#0 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 char_cursor#32 print_word::w#0 print_byte::b#0 ] ) -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG93 [44] call print_byte param-assignment [ print_word::w#0 char_cursor#10 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 ] )
  //SEG94 [48] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG95 [48] phi (byte*) char_cursor#31 = (byte*) char_cursor#32 [phi:print_word->print_byte#0] -- register_copy 
  //SEG96 [48] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG97 print_word::@1
  b1:
  //SEG98 [45] (byte) print_byte::b#1 ← < (word) print_word::w#0 [ char_cursor#10 print_byte::b#1 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 char_cursor#10 print_byte::b#1 ] ) -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG99 [46] call print_byte param-assignment [ char_cursor#10 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 char_cursor#10 ] )
  //SEG100 [48] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG101 [48] phi (byte*) char_cursor#31 = (byte*) char_cursor#10 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG102 [48] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG103 print_word::@return
  breturn:
  //SEG104 [47] return  [ char_cursor#10 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 char_cursor#10 ] )
    rts
}
//SEG105 print_byte
print_byte: {
    .label _0 = $15
    .label _2 = $16
    .label b = 5
  //SEG106 [49] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word) 4 [ print_byte::b#2 char_cursor#31 print_byte::$0 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#31 print_byte::$0 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#31 print_byte::$0 ] ) -- vbuz1=vbuz2_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    sta _0
  //SEG107 [50] (byte) print_char::ch#0 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ print_byte::b#2 char_cursor#31 print_char::ch#0 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#31 print_char::ch#0 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#31 print_char::ch#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda hextab,y
    sta print_char.ch
  //SEG108 [51] call print_char param-assignment [ char_cursor#10 print_byte::b#2 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 print_byte::b#2 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 char_cursor#10 print_byte::b#2 ] )
  //SEG109 [56] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG110 [56] phi (byte*) char_cursor#23 = (byte*) char_cursor#31 [phi:print_byte->print_char#0] -- register_copy 
  //SEG111 [56] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG112 print_byte::@1
  b1:
  //SEG113 [52] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word) 15 [ char_cursor#10 print_byte::$2 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 print_byte::$2 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 char_cursor#10 print_byte::$2 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda b
    and #$f
    sta _2
  //SEG114 [53] (byte) print_char::ch#1 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#10 print_char::ch#1 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 print_char::ch#1 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 char_cursor#10 print_char::ch#1 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda hextab,y
    sta print_char.ch
  //SEG115 [54] call print_char param-assignment [ char_cursor#10 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 char_cursor#10 ] )
  //SEG116 [56] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG117 [56] phi (byte*) char_cursor#23 = (byte*) char_cursor#10 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG118 [56] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG119 print_byte::@return
  breturn:
  //SEG120 [55] return  [ char_cursor#10 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 char_cursor#10 ] )
    rts
    hextab: .text "0123456789abcdef"
}
//SEG121 print_char
print_char: {
    .label ch = 6
  //SEG122 [57] *((byte*) char_cursor#23) ← (byte) print_char::ch#2 [ char_cursor#23 ] ( main:2::print_word:31::print_byte:44::print_char:51 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#23 ] main:2::print_word:31::print_byte:46::print_char:51 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#23 ] main:2::print_word:31::print_byte:44::print_char:54 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#23 ] main:2::print_word:31::print_byte:46::print_char:54 [ main::i#10 line_cursor#13 char_cursor#23 ] ) -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (char_cursor),y
  //SEG123 [58] (byte*) char_cursor#10 ← ++ (byte*) char_cursor#23 [ char_cursor#10 ] ( main:2::print_word:31::print_byte:44::print_char:51 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#10 ] main:2::print_word:31::print_byte:46::print_char:51 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#10 ] main:2::print_word:31::print_byte:44::print_char:54 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 ] main:2::print_word:31::print_byte:46::print_char:54 [ main::i#10 line_cursor#13 char_cursor#10 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
    jmp breturn
  //SEG124 print_char::@return
  breturn:
  //SEG125 [59] return  [ char_cursor#10 ] ( main:2::print_word:31::print_byte:44::print_char:51 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#10 ] main:2::print_word:31::print_byte:46::print_char:51 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#10 ] main:2::print_word:31::print_byte:44::print_char:54 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 ] main:2::print_word:31::print_byte:46::print_char:54 [ main::i#10 line_cursor#13 char_cursor#10 ] )
    rts
}
//SEG126 getFAC
getFAC: {
    .label return = $17
    .label return_2 = $11
  //SEG127 asm { jsr$b1aa sty$fe sta$ff  }
    jsr $b1aa
    sty $fe
    sta $ff
  //SEG128 [61] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0) [ getFAC::return#0 ] ( main:2::getFAC:28 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#0 ] ) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda memLo
    sta return
    lda memHi
    sta return+1
    jmp breturn
  //SEG129 getFAC::@return
  breturn:
  //SEG130 [62] return  [ getFAC::return#0 ] ( main:2::getFAC:28 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#0 ] )
    rts
}
//SEG131 addMEMtoFAC
addMEMtoFAC: {
  //SEG132 [64] call prepareMEM param-assignment [ ] ( main:2::addMEMtoFAC:26 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG133 [67] phi from addMEMtoFAC to prepareMEM [phi:addMEMtoFAC->prepareMEM]
  prepareMEM_from_addMEMtoFAC:
  //SEG134 [67] phi (byte*) prepareMEM::mem#5 = (const byte[]) main::f_127#0 [phi:addMEMtoFAC->prepareMEM#0] -- pbuz1=pbuc1 
    lda #<main.f_127
    sta prepareMEM.mem
    lda #>main.f_127
    sta prepareMEM.mem+1
    jsr prepareMEM
    jmp b1
  //SEG135 addMEMtoFAC::@1
  b1:
  //SEG136 asm { lda$fe ldy$ff jsr$b867  }
    lda $fe
    ldy $ff
    jsr $b867
    jmp breturn
  //SEG137 addMEMtoFAC::@return
  breturn:
  //SEG138 [66] return  [ ] ( main:2::addMEMtoFAC:26 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    rts
}
//SEG139 prepareMEM
prepareMEM: {
    .label _0 = $19
    .label _1 = $1a
    .label mem = 9
  //SEG140 [68] (byte~) prepareMEM::$0 ← < (byte*) prepareMEM::mem#5 [ prepareMEM::mem#5 prepareMEM::$0 ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::setFAC:5::prepareMEM:86 [ prepareMEM::mem#5 prepareMEM::$0 ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ prepareMEM::mem#5 prepareMEM::$0 ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] ) -- vbuz1=_lo_pbuz2 
    lda mem
    sta _0
  //SEG141 [69] *((const byte*) memLo#0) ← (byte~) prepareMEM::$0 [ prepareMEM::mem#5 ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::setFAC:5::prepareMEM:86 [ prepareMEM::mem#5 ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ prepareMEM::mem#5 ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] ) -- _deref_pbuc1=vbuz1 
    lda _0
    sta memLo
  //SEG142 [70] (byte~) prepareMEM::$1 ← > (byte*) prepareMEM::mem#5 [ prepareMEM::$1 ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::setFAC:5::prepareMEM:86 [ prepareMEM::$1 ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ prepareMEM::$1 ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] ) -- vbuz1=_hi_pbuz2 
    lda mem+1
    sta _1
  //SEG143 [71] *((const byte*) memHi#0) ← (byte~) prepareMEM::$1 [ ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:5::prepareMEM:86 [ ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 ] ) -- _deref_pbuc1=vbuz1 
    lda _1
    sta memHi
    jmp breturn
  //SEG144 prepareMEM::@return
  breturn:
  //SEG145 [72] return  [ ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:5::prepareMEM:86 [ ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    rts
}
//SEG146 mulFACbyMEM
mulFACbyMEM: {
    .label mem = $b
  //SEG147 [74] (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2 [ prepareMEM::mem#4 ] ( main:2::mulFACbyMEM:14 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#4 ] main:2::mulFACbyMEM:24 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#4 ] ) -- pbuz1=pbuz2 
    lda mem
    sta prepareMEM.mem
    lda mem+1
    sta prepareMEM.mem+1
  //SEG148 [75] call prepareMEM param-assignment [ ] ( main:2::mulFACbyMEM:14 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:24 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG149 [67] phi from mulFACbyMEM to prepareMEM [phi:mulFACbyMEM->prepareMEM]
  prepareMEM_from_mulFACbyMEM:
  //SEG150 [67] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#4 [phi:mulFACbyMEM->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    jmp b1
  //SEG151 mulFACbyMEM::@1
  b1:
  //SEG152 asm { lda$fe ldy$ff jsr$ba28  }
    lda $fe
    ldy $ff
    jsr $ba28
    jmp breturn
  //SEG153 mulFACbyMEM::@return
  breturn:
  //SEG154 [77] return  [ ] ( main:2::mulFACbyMEM:14 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:24 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    rts
}
//SEG155 sinFAC
sinFAC: {
  //SEG156 asm { jsr$e26b  }
    jsr $e26b
    jmp breturn
  //SEG157 sinFAC::@return
  breturn:
  //SEG158 [79] return  [ ] ( main:2::sinFAC:22 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    rts
}
//SEG159 divMEMbyFAC
divMEMbyFAC: {
  //SEG160 [81] call prepareMEM param-assignment [ ] ( main:2::divMEMbyFAC:20 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG161 [67] phi from divMEMbyFAC to prepareMEM [phi:divMEMbyFAC->prepareMEM]
  prepareMEM_from_divMEMbyFAC:
  //SEG162 [67] phi (byte*) prepareMEM::mem#5 = (const byte[]) main::f_i#0 [phi:divMEMbyFAC->prepareMEM#0] -- pbuz1=pbuc1 
    lda #<main.f_i
    sta prepareMEM.mem
    lda #>main.f_i
    sta prepareMEM.mem+1
    jsr prepareMEM
    jmp b1
  //SEG163 divMEMbyFAC::@1
  b1:
  //SEG164 asm { lda$fe ldy$ff jsr$bb0f  }
    lda $fe
    ldy $ff
    jsr $bb0f
    jmp breturn
  //SEG165 divMEMbyFAC::@return
  breturn:
  //SEG166 [83] return  [ ] ( main:2::divMEMbyFAC:20 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    rts
}
//SEG167 setFAC
setFAC: {
    .label w = $d
  //SEG168 [85] (byte*) prepareMEM::mem#0 ← ((byte*)) (word) setFAC::w#3 [ prepareMEM::mem#0 ] ( main:2::setFAC:5 [ prepareMEM::mem#0 ] main:2::setFAC:12 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#0 ] main:2::setFAC:18 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#0 ] ) -- pbuz1=_ptrby_vwuz2 
    lda w
    sta prepareMEM.mem
    lda w+1
    sta prepareMEM.mem+1
  //SEG169 [86] call prepareMEM param-assignment [ ] ( main:2::setFAC:5 [ ] main:2::setFAC:12 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:18 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG170 [67] phi from setFAC to prepareMEM [phi:setFAC->prepareMEM]
  prepareMEM_from_setFAC:
  //SEG171 [67] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#0 [phi:setFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    jmp b1
  //SEG172 setFAC::@1
  b1:
  //SEG173 asm { ldy$fe lda$ff jsr$b391  }
    ldy $fe
    lda $ff
    jsr $b391
    jmp breturn
  //SEG174 setFAC::@return
  breturn:
  //SEG175 [88] return  [ ] ( main:2::setFAC:5 [ ] main:2::setFAC:12 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:18 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    rts
}
//SEG176 setMEMtoFAC
setMEMtoFAC: {
    .label mem = $f
  //SEG177 [90] (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#2 [ prepareMEM::mem#1 ] ( main:2::setMEMtoFAC:9 [ prepareMEM::mem#1 ] main:2::setMEMtoFAC:16 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#1 ] ) -- pbuz1=pbuz2 
    lda mem
    sta prepareMEM.mem
    lda mem+1
    sta prepareMEM.mem+1
  //SEG178 [91] call prepareMEM param-assignment [ ] ( main:2::setMEMtoFAC:9 [ ] main:2::setMEMtoFAC:16 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG179 [67] phi from setMEMtoFAC to prepareMEM [phi:setMEMtoFAC->prepareMEM]
  prepareMEM_from_setMEMtoFAC:
  //SEG180 [67] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#1 [phi:setMEMtoFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    jmp b1
  //SEG181 setMEMtoFAC::@1
  b1:
  //SEG182 asm { ldx$fe ldy$ff jsr$bbd4  }
    ldx $fe
    ldy $ff
    jsr $bbd4
    jmp breturn
  //SEG183 setMEMtoFAC::@return
  breturn:
  //SEG184 [93] return  [ ] ( main:2::setMEMtoFAC:9 [ ] main:2::setMEMtoFAC:16 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    rts
}
//SEG185 divFACby10
divFACby10: {
  //SEG186 asm { jsr$bafe  }
    jsr $bafe
    jmp breturn
  //SEG187 divFACby10::@return
  breturn:
  //SEG188 [95] return  [ ] ( main:2::divFACby10:7 [ ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Potential register analysis [11] setFAC::w#1 ← ((word)) main::i#10 missing fragment vwuz1=_word_vbuxx(main:: vwuz1=(word) setFAC::w#1 vbuxx=(byte) main::i#10 )  allocation: reg byte x [ main::i#10 main::i#1 ] zp ZP_WORD:13 [ setFAC::w#3 setFAC::w#1 ] 
Potential register analysis [11] setFAC::w#1 ← ((word)) main::i#10 missing fragment vwuz1=_word_vbuyy(main:: vwuz1=(word) setFAC::w#1 vbuyy=(byte) main::i#10 )  allocation: reg byte y [ main::i#10 main::i#1 ] zp ZP_WORD:13 [ setFAC::w#3 setFAC::w#1 ] 
MISSING FRAGMENTS
  vwuz1=_word_vbuxx(main:: vwuz1=(word) setFAC::w#1 vbuxx=(byte) main::i#10 ) 
  vwuz1=_word_vbuyy(main:: vwuz1=(word) setFAC::w#1 vbuyy=(byte) main::i#10 ) 
Statement [11] (word) setFAC::w#1 ← ((word)) (byte) main::i#10 [ main::i#10 char_cursor#32 line_cursor#13 setFAC::w#1 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 setFAC::w#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#10 main::i#1 ]
Statement [29] (word) getFAC::return#2 ← (word) getFAC::return#0 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#2 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#2 ] ) always clobbers reg byte a 
Statement [30] (word) print_word::w#0 ← (word) getFAC::return#2 [ main::i#10 char_cursor#32 line_cursor#13 print_word::w#0 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 print_word::w#0 ] ) always clobbers reg byte a 
Statement [37] (byte*~) char_cursor#48 ← (byte*) line_cursor#1 [ main::i#1 char_cursor#48 line_cursor#1 ] ( main:2 [ main::i#1 char_cursor#48 line_cursor#1 ] ) always clobbers reg byte a 
Statement [40] (byte*) line_cursor#1 ← (byte*) line_cursor#6 + (byte/signed byte/word/signed word) 40 [ line_cursor#1 char_cursor#10 ] ( main:2::print_ln:33 [ main::i#10 line_cursor#1 char_cursor#10 ] ) always clobbers reg byte a 
Statement [41] if((byte*) line_cursor#1<(byte*) char_cursor#10) goto print_ln::@1 [ line_cursor#1 char_cursor#10 ] ( main:2::print_ln:33 [ main::i#10 line_cursor#1 char_cursor#10 ] ) always clobbers reg byte a 
Statement [43] (byte) print_byte::b#0 ← > (word) print_word::w#0 [ char_cursor#32 print_word::w#0 print_byte::b#0 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 char_cursor#32 print_word::w#0 print_byte::b#0 ] ) always clobbers reg byte a 
Statement [45] (byte) print_byte::b#1 ← < (word) print_word::w#0 [ char_cursor#10 print_byte::b#1 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 char_cursor#10 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [52] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word) 15 [ char_cursor#10 print_byte::$2 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 print_byte::$2 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 char_cursor#10 print_byte::$2 ] ) always clobbers reg byte a 
Statement [57] *((byte*) char_cursor#23) ← (byte) print_char::ch#2 [ char_cursor#23 ] ( main:2::print_word:31::print_byte:44::print_char:51 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#23 ] main:2::print_word:31::print_byte:46::print_char:51 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#23 ] main:2::print_word:31::print_byte:44::print_char:54 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#23 ] main:2::print_word:31::print_byte:46::print_char:54 [ main::i#10 line_cursor#13 char_cursor#23 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ main::i#10 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:5 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [61] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0) [ getFAC::return#0 ] ( main:2::getFAC:28 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#0 ] ) always clobbers reg byte a 
Statement asm { lda$fe ldy$ff jsr$b867  } always clobbers reg byte a reg byte y 
Statement [68] (byte~) prepareMEM::$0 ← < (byte*) prepareMEM::mem#5 [ prepareMEM::mem#5 prepareMEM::$0 ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::setFAC:5::prepareMEM:86 [ prepareMEM::mem#5 prepareMEM::$0 ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ prepareMEM::mem#5 prepareMEM::$0 ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] ) always clobbers reg byte a 
Statement [70] (byte~) prepareMEM::$1 ← > (byte*) prepareMEM::mem#5 [ prepareMEM::$1 ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::setFAC:5::prepareMEM:86 [ prepareMEM::$1 ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ prepareMEM::$1 ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] ) always clobbers reg byte a 
Statement [74] (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2 [ prepareMEM::mem#4 ] ( main:2::mulFACbyMEM:14 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#4 ] main:2::mulFACbyMEM:24 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#4 ] ) always clobbers reg byte a 
Statement asm { lda$fe ldy$ff jsr$ba28  } always clobbers reg byte a reg byte y 
Statement asm { lda$fe ldy$ff jsr$bb0f  } always clobbers reg byte a reg byte y 
Statement [85] (byte*) prepareMEM::mem#0 ← ((byte*)) (word) setFAC::w#3 [ prepareMEM::mem#0 ] ( main:2::setFAC:5 [ prepareMEM::mem#0 ] main:2::setFAC:12 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#0 ] main:2::setFAC:18 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#0 ] ) always clobbers reg byte a 
Statement asm { ldy$fe lda$ff jsr$b391  } always clobbers reg byte a reg byte y 
Statement [90] (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#2 [ prepareMEM::mem#1 ] ( main:2::setMEMtoFAC:9 [ prepareMEM::mem#1 ] main:2::setMEMtoFAC:16 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#1 ] ) always clobbers reg byte a 
Statement asm { ldx$fe ldy$ff jsr$bbd4  } always clobbers reg byte x reg byte y 
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:2 [ main::i#10 main::i#1 ]
Statement [11] (word) setFAC::w#1 ← ((word)) (byte) main::i#10 [ main::i#10 char_cursor#32 line_cursor#13 setFAC::w#1 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 setFAC::w#1 ] ) always clobbers reg byte a 
Statement [29] (word) getFAC::return#2 ← (word) getFAC::return#0 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#2 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#2 ] ) always clobbers reg byte a 
Statement [30] (word) print_word::w#0 ← (word) getFAC::return#2 [ main::i#10 char_cursor#32 line_cursor#13 print_word::w#0 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 print_word::w#0 ] ) always clobbers reg byte a 
Statement [35] if((byte) main::i#1!=(byte/signed byte/word/signed word) 26) goto main::@17 [ main::i#1 line_cursor#1 ] ( main:2 [ main::i#1 line_cursor#1 ] ) always clobbers reg byte a 
Statement [37] (byte*~) char_cursor#48 ← (byte*) line_cursor#1 [ main::i#1 char_cursor#48 line_cursor#1 ] ( main:2 [ main::i#1 char_cursor#48 line_cursor#1 ] ) always clobbers reg byte a 
Statement [40] (byte*) line_cursor#1 ← (byte*) line_cursor#6 + (byte/signed byte/word/signed word) 40 [ line_cursor#1 char_cursor#10 ] ( main:2::print_ln:33 [ main::i#10 line_cursor#1 char_cursor#10 ] ) always clobbers reg byte a 
Statement [41] if((byte*) line_cursor#1<(byte*) char_cursor#10) goto print_ln::@1 [ line_cursor#1 char_cursor#10 ] ( main:2::print_ln:33 [ main::i#10 line_cursor#1 char_cursor#10 ] ) always clobbers reg byte a 
Statement [43] (byte) print_byte::b#0 ← > (word) print_word::w#0 [ char_cursor#32 print_word::w#0 print_byte::b#0 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 char_cursor#32 print_word::w#0 print_byte::b#0 ] ) always clobbers reg byte a 
Statement [45] (byte) print_byte::b#1 ← < (word) print_word::w#0 [ char_cursor#10 print_byte::b#1 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 char_cursor#10 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [52] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word) 15 [ char_cursor#10 print_byte::$2 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 print_byte::$2 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 char_cursor#10 print_byte::$2 ] ) always clobbers reg byte a 
Statement [57] *((byte*) char_cursor#23) ← (byte) print_char::ch#2 [ char_cursor#23 ] ( main:2::print_word:31::print_byte:44::print_char:51 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#23 ] main:2::print_word:31::print_byte:46::print_char:51 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#23 ] main:2::print_word:31::print_byte:44::print_char:54 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#23 ] main:2::print_word:31::print_byte:46::print_char:54 [ main::i#10 line_cursor#13 char_cursor#23 ] ) always clobbers reg byte y 
Statement [61] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0) [ getFAC::return#0 ] ( main:2::getFAC:28 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#0 ] ) always clobbers reg byte a 
Statement asm { lda$fe ldy$ff jsr$b867  } always clobbers reg byte a reg byte y 
Statement [68] (byte~) prepareMEM::$0 ← < (byte*) prepareMEM::mem#5 [ prepareMEM::mem#5 prepareMEM::$0 ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::setFAC:5::prepareMEM:86 [ prepareMEM::mem#5 prepareMEM::$0 ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ prepareMEM::mem#5 prepareMEM::$0 ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] ) always clobbers reg byte a 
Statement [70] (byte~) prepareMEM::$1 ← > (byte*) prepareMEM::mem#5 [ prepareMEM::$1 ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::setFAC:5::prepareMEM:86 [ prepareMEM::$1 ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ prepareMEM::$1 ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] ) always clobbers reg byte a 
Statement [74] (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2 [ prepareMEM::mem#4 ] ( main:2::mulFACbyMEM:14 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#4 ] main:2::mulFACbyMEM:24 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#4 ] ) always clobbers reg byte a 
Statement asm { lda$fe ldy$ff jsr$ba28  } always clobbers reg byte a reg byte y 
Statement asm { lda$fe ldy$ff jsr$bb0f  } always clobbers reg byte a reg byte y 
Statement [85] (byte*) prepareMEM::mem#0 ← ((byte*)) (word) setFAC::w#3 [ prepareMEM::mem#0 ] ( main:2::setFAC:5 [ prepareMEM::mem#0 ] main:2::setFAC:12 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#0 ] main:2::setFAC:18 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#0 ] ) always clobbers reg byte a 
Statement asm { ldy$fe lda$ff jsr$b391  } always clobbers reg byte a reg byte y 
Statement [90] (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#2 [ prepareMEM::mem#1 ] ( main:2::setMEMtoFAC:9 [ prepareMEM::mem#1 ] main:2::setMEMtoFAC:16 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#1 ] ) always clobbers reg byte a 
Statement asm { ldx$fe ldy$ff jsr$bbd4  } always clobbers reg byte x reg byte y 
Potential registers zp ZP_BYTE:2 [ main::i#10 main::i#1 ] : zp ZP_BYTE:2 , 
Potential registers zp ZP_WORD:3 [ line_cursor#6 line_cursor#13 line_cursor#1 ] : zp ZP_WORD:3 , 
Potential registers zp ZP_BYTE:5 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] : zp ZP_BYTE:5 , reg byte a , reg byte x , 
Potential registers zp ZP_BYTE:6 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:7 [ char_cursor#23 char_cursor#31 char_cursor#32 char_cursor#48 char_cursor#10 ] : zp ZP_WORD:7 , 
Potential registers zp ZP_WORD:9 [ prepareMEM::mem#5 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 ] : zp ZP_WORD:9 , 
Potential registers zp ZP_WORD:11 [ mulFACbyMEM::mem#2 ] : zp ZP_WORD:11 , 
Potential registers zp ZP_WORD:13 [ setFAC::w#3 setFAC::w#1 ] : zp ZP_WORD:13 , 
Potential registers zp ZP_WORD:15 [ setMEMtoFAC::mem#2 ] : zp ZP_WORD:15 , 
Potential registers zp ZP_WORD:17 [ getFAC::return#2 ] : zp ZP_WORD:17 , 
Potential registers zp ZP_WORD:19 [ print_word::w#0 ] : zp ZP_WORD:19 , 
Potential registers zp ZP_BYTE:21 [ print_byte::$0 ] : zp ZP_BYTE:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:22 [ print_byte::$2 ] : zp ZP_BYTE:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:23 [ getFAC::return#0 ] : zp ZP_WORD:23 , 
Potential registers zp ZP_BYTE:25 [ prepareMEM::$0 ] : zp ZP_BYTE:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:26 [ prepareMEM::$1 ] : zp ZP_BYTE:26 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 250.97: zp ZP_WORD:3 [ line_cursor#6 line_cursor#13 line_cursor#1 ] 34.89: zp ZP_WORD:7 [ char_cursor#23 char_cursor#31 char_cursor#32 char_cursor#48 char_cursor#10 ] 
Uplift Scope [setFAC] 35: zp ZP_WORD:13 [ setFAC::w#3 setFAC::w#1 ] 
Uplift Scope [getFAC] 22: zp ZP_WORD:17 [ getFAC::return#2 ] 4.33: zp ZP_WORD:23 [ getFAC::return#0 ] 
Uplift Scope [prepareMEM] 15.33: zp ZP_WORD:9 [ prepareMEM::mem#5 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 ] 4: zp ZP_BYTE:25 [ prepareMEM::$0 ] 4: zp ZP_BYTE:26 [ prepareMEM::$1 ] 
Uplift Scope [print_byte] 10: zp ZP_BYTE:5 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 4: zp ZP_BYTE:21 [ print_byte::$0 ] 4: zp ZP_BYTE:22 [ print_byte::$2 ] 
Uplift Scope [print_char] 14: zp ZP_BYTE:6 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] 
Uplift Scope [main] 12.38: zp ZP_BYTE:2 [ main::i#10 main::i#1 ] 
Uplift Scope [print_word] 5: zp ZP_WORD:19 [ print_word::w#0 ] 
Uplift Scope [setMEMtoFAC] 2: zp ZP_WORD:15 [ setMEMtoFAC::mem#2 ] 
Uplift Scope [mulFACbyMEM] 2: zp ZP_WORD:11 [ mulFACbyMEM::mem#2 ] 
Uplift Scope [print_ln] 
Uplift Scope [addMEMtoFAC] 
Uplift Scope [divMEMbyFAC] 
Uplift Scope [sinFAC] 
Uplift Scope [divFACby10] 

Uplifting [] best 6314 combination zp ZP_WORD:3 [ line_cursor#6 line_cursor#13 line_cursor#1 ] zp ZP_WORD:7 [ char_cursor#23 char_cursor#31 char_cursor#32 char_cursor#48 char_cursor#10 ] 
Uplifting [setFAC] best 6314 combination zp ZP_WORD:13 [ setFAC::w#3 setFAC::w#1 ] 
Uplifting [getFAC] best 6314 combination zp ZP_WORD:17 [ getFAC::return#2 ] zp ZP_WORD:23 [ getFAC::return#0 ] 
Uplifting [prepareMEM] best 6302 combination zp ZP_WORD:9 [ prepareMEM::mem#5 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 ] reg byte a [ prepareMEM::$0 ] reg byte a [ prepareMEM::$1 ] 
Uplifting [print_byte] best 6290 combination reg byte x [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] reg byte y [ print_byte::$0 ] reg byte a [ print_byte::$2 ] 
Uplifting [print_char] best 6281 combination reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] 
Uplifting [main] best 6281 combination zp ZP_BYTE:2 [ main::i#10 main::i#1 ] 
Uplifting [print_word] best 6281 combination zp ZP_WORD:19 [ print_word::w#0 ] 
Uplifting [setMEMtoFAC] best 6281 combination zp ZP_WORD:15 [ setMEMtoFAC::mem#2 ] 
Uplifting [mulFACbyMEM] best 6281 combination zp ZP_WORD:11 [ mulFACbyMEM::mem#2 ] 
Uplifting [print_ln] best 6281 combination 
Uplifting [addMEMtoFAC] best 6281 combination 
Uplifting [divMEMbyFAC] best 6281 combination 
Uplifting [sinFAC] best 6281 combination 
Uplifting [divFACby10] best 6281 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ main::i#10 main::i#1 ]
Uplifting [main] best 6281 combination zp ZP_BYTE:2 [ main::i#10 main::i#1 ] 
Coalescing zero page register [ zp ZP_WORD:9 [ prepareMEM::mem#5 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 ] ] with [ zp ZP_WORD:11 [ mulFACbyMEM::mem#2 ] ]
Coalescing zero page register [ zp ZP_WORD:9 [ prepareMEM::mem#5 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 mulFACbyMEM::mem#2 ] ] with [ zp ZP_WORD:13 [ setFAC::w#3 setFAC::w#1 ] ]
Coalescing zero page register [ zp ZP_WORD:9 [ prepareMEM::mem#5 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 mulFACbyMEM::mem#2 setFAC::w#3 setFAC::w#1 ] ] with [ zp ZP_WORD:15 [ setMEMtoFAC::mem#2 ] ]
Coalescing zero page register [ zp ZP_WORD:9 [ prepareMEM::mem#5 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 mulFACbyMEM::mem#2 setFAC::w#3 setFAC::w#1 setMEMtoFAC::mem#2 ] ] with [ zp ZP_WORD:17 [ getFAC::return#2 ] ]
Coalescing zero page register [ zp ZP_WORD:9 [ prepareMEM::mem#5 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 mulFACbyMEM::mem#2 setFAC::w#3 setFAC::w#1 setMEMtoFAC::mem#2 getFAC::return#2 ] ] with [ zp ZP_WORD:19 [ print_word::w#0 ] ]
Coalescing zero page register [ zp ZP_WORD:9 [ prepareMEM::mem#5 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 mulFACbyMEM::mem#2 setFAC::w#3 setFAC::w#1 setMEMtoFAC::mem#2 getFAC::return#2 print_word::w#0 ] ] with [ zp ZP_WORD:23 [ getFAC::return#0 ] ]
Allocated (was zp ZP_WORD:7) zp ZP_WORD:5 [ char_cursor#23 char_cursor#31 char_cursor#32 char_cursor#48 char_cursor#10 ]
Allocated (was zp ZP_WORD:9) zp ZP_WORD:7 [ prepareMEM::mem#5 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 mulFACbyMEM::mem#2 setFAC::w#3 setFAC::w#1 setMEMtoFAC::mem#2 getFAC::return#2 print_word::w#0 getFAC::return#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const memLo = $fe
  .const memHi = $ff
  .label line_cursor = 3
  .label char_cursor = 5
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @36 [phi:@begin->@36]
b36_from_bbegin:
  jmp b36
//SEG4 @36
b36:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @36 to main [phi:@36->main]
main_from_b36:
  jsr main
//SEG7 [3] phi from @36 to @end [phi:@36->@end]
bend_from_b36:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .const f_2pi = $e2e5
    .label i = 2
  //SEG10 [5] call setFAC param-assignment [ ] ( main:2 [ ] )
  //SEG11 [84] phi from main to setFAC [phi:main->setFAC]
  setFAC_from_main:
  //SEG12 [84] phi (word) setFAC::w#3 = (word/signed word) 1275 [phi:main->setFAC#0] -- vwuz1=vwuc1 
    lda #<$4fb
    sta setFAC.w
    lda #>$4fb
    sta setFAC.w+1
    jsr setFAC
  //SEG13 [6] phi from main to main::@3 [phi:main->main::@3]
  b3_from_main:
    jmp b3
  //SEG14 main::@3
  b3:
  //SEG15 [7] call divFACby10 param-assignment [ ] ( main:2 [ ] )
    jsr divFACby10
  //SEG16 [8] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
  //SEG17 main::@4
  b4:
  //SEG18 [9] call setMEMtoFAC param-assignment [ ] ( main:2 [ ] )
  //SEG19 [89] phi from main::@4 to setMEMtoFAC [phi:main::@4->setMEMtoFAC]
  setMEMtoFAC_from_b4:
  //SEG20 [89] phi (byte*) setMEMtoFAC::mem#2 = (const byte[]) main::f_127#0 [phi:main::@4->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_127
    sta setMEMtoFAC.mem
    lda #>f_127
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
  //SEG21 [10] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  b1_from_b4:
  //SEG22 [10] phi (byte*) line_cursor#13 = ((byte*))(word/signed word) 1024 [phi:main::@4->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta line_cursor
    lda #>$400
    sta line_cursor+1
  //SEG23 [10] phi (byte*) char_cursor#32 = ((byte*))(word/signed word) 1024 [phi:main::@4->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta char_cursor
    lda #>$400
    sta char_cursor+1
  //SEG24 [10] phi (byte) main::i#10 = (byte/signed byte/word/signed word) 1 [phi:main::@4->main::@1#2] -- vbuz1=vbuc1 
    lda #1
    sta i
    jmp b1
  //SEG25 main::@1
  b1:
  //SEG26 [11] (word) setFAC::w#1 ← ((word)) (byte) main::i#10 [ main::i#10 char_cursor#32 line_cursor#13 setFAC::w#1 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 setFAC::w#1 ] ) -- vwuz1=_word_vbuz2 
    lda i
    sta setFAC.w
    lda #0
    sta setFAC.w+1
  //SEG27 [12] call setFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG28 [84] phi from main::@1 to setFAC [phi:main::@1->setFAC]
  setFAC_from_b1:
  //SEG29 [84] phi (word) setFAC::w#3 = (word) setFAC::w#1 [phi:main::@1->setFAC#0] -- register_copy 
    jsr setFAC
  //SEG30 [13] phi from main::@1 to main::@6 [phi:main::@1->main::@6]
  b6_from_b1:
    jmp b6
  //SEG31 main::@6
  b6:
  //SEG32 [14] call mulFACbyMEM param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG33 [73] phi from main::@6 to mulFACbyMEM [phi:main::@6->mulFACbyMEM]
  mulFACbyMEM_from_b6:
  //SEG34 [73] phi (byte*) mulFACbyMEM::mem#2 = (const byte*) main::f_2pi#0 [phi:main::@6->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_2pi
    sta mulFACbyMEM.mem
    lda #>f_2pi
    sta mulFACbyMEM.mem+1
    jsr mulFACbyMEM
  //SEG35 [15] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  b7_from_b6:
    jmp b7
  //SEG36 main::@7
  b7:
  //SEG37 [16] call setMEMtoFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG38 [89] phi from main::@7 to setMEMtoFAC [phi:main::@7->setMEMtoFAC]
  setMEMtoFAC_from_b7:
  //SEG39 [89] phi (byte*) setMEMtoFAC::mem#2 = (const byte[]) main::f_i#0 [phi:main::@7->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_i
    sta setMEMtoFAC.mem
    lda #>f_i
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
  //SEG40 [17] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  b8_from_b7:
    jmp b8
  //SEG41 main::@8
  b8:
  //SEG42 [18] call setFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG43 [84] phi from main::@8 to setFAC [phi:main::@8->setFAC]
  setFAC_from_b8:
  //SEG44 [84] phi (word) setFAC::w#3 = (byte/signed byte/word/signed word) 25 [phi:main::@8->setFAC#0] -- vwuz1=vbuc1 
    lda #$19
    sta setFAC.w
    lda #0
    sta setFAC.w+1
    jsr setFAC
  //SEG45 [19] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  b9_from_b8:
    jmp b9
  //SEG46 main::@9
  b9:
  //SEG47 [20] call divMEMbyFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG48 [80] phi from main::@9 to divMEMbyFAC [phi:main::@9->divMEMbyFAC]
  divMEMbyFAC_from_b9:
    jsr divMEMbyFAC
  //SEG49 [21] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  b10_from_b9:
    jmp b10
  //SEG50 main::@10
  b10:
  //SEG51 [22] call sinFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    jsr sinFAC
  //SEG52 [23] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  b11_from_b10:
    jmp b11
  //SEG53 main::@11
  b11:
  //SEG54 [24] call mulFACbyMEM param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG55 [73] phi from main::@11 to mulFACbyMEM [phi:main::@11->mulFACbyMEM]
  mulFACbyMEM_from_b11:
  //SEG56 [73] phi (byte*) mulFACbyMEM::mem#2 = (const byte[]) main::f_127#0 [phi:main::@11->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_127
    sta mulFACbyMEM.mem
    lda #>f_127
    sta mulFACbyMEM.mem+1
    jsr mulFACbyMEM
  //SEG57 [25] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  b12_from_b11:
    jmp b12
  //SEG58 main::@12
  b12:
  //SEG59 [26] call addMEMtoFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG60 [63] phi from main::@12 to addMEMtoFAC [phi:main::@12->addMEMtoFAC]
  addMEMtoFAC_from_b12:
    jsr addMEMtoFAC
  //SEG61 [27] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  b13_from_b12:
    jmp b13
  //SEG62 main::@13
  b13:
  //SEG63 [28] call getFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#0 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#0 ] )
    jsr getFAC
  //SEG64 [29] (word) getFAC::return#2 ← (word) getFAC::return#0 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#2 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#2 ] )
    // (word) getFAC::return#2 = (word) getFAC::return#0  // register copy zp ZP_WORD:7
    jmp b14
  //SEG65 main::@14
  b14:
  //SEG66 [30] (word) print_word::w#0 ← (word) getFAC::return#2 [ main::i#10 char_cursor#32 line_cursor#13 print_word::w#0 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 print_word::w#0 ] )
    // (word) print_word::w#0 = (word) getFAC::return#2  // register copy zp ZP_WORD:7
  //SEG67 [31] call print_word param-assignment [ main::i#10 line_cursor#13 char_cursor#10 ] ( main:2 [ main::i#10 line_cursor#13 char_cursor#10 ] )
    jsr print_word
  //SEG68 [32] phi from main::@14 to main::@15 [phi:main::@14->main::@15]
  b15_from_b14:
    jmp b15
  //SEG69 main::@15
  b15:
  //SEG70 [33] call print_ln param-assignment [ main::i#10 line_cursor#1 ] ( main:2 [ main::i#10 line_cursor#1 ] )
  //SEG71 [38] phi from main::@15 to print_ln [phi:main::@15->print_ln]
  print_ln_from_b15:
    jsr print_ln
    jmp b16
  //SEG72 main::@16
  b16:
  //SEG73 [34] (byte) main::i#1 ← ++ (byte) main::i#10 [ main::i#1 line_cursor#1 ] ( main:2 [ main::i#1 line_cursor#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG74 [35] if((byte) main::i#1!=(byte/signed byte/word/signed word) 26) goto main::@17 [ main::i#1 line_cursor#1 ] ( main:2 [ main::i#1 line_cursor#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$1a
    bne b17
    jmp breturn
  //SEG75 main::@return
  breturn:
  //SEG76 [36] return  [ ] ( main:2 [ ] )
    rts
  //SEG77 main::@17
  b17:
  //SEG78 [37] (byte*~) char_cursor#48 ← (byte*) line_cursor#1 [ main::i#1 char_cursor#48 line_cursor#1 ] ( main:2 [ main::i#1 char_cursor#48 line_cursor#1 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG79 [10] phi from main::@17 to main::@1 [phi:main::@17->main::@1]
  b1_from_b17:
  //SEG80 [10] phi (byte*) line_cursor#13 = (byte*) line_cursor#1 [phi:main::@17->main::@1#0] -- register_copy 
  //SEG81 [10] phi (byte*) char_cursor#32 = (byte*~) char_cursor#48 [phi:main::@17->main::@1#1] -- register_copy 
  //SEG82 [10] phi (byte) main::i#10 = (byte) main::i#1 [phi:main::@17->main::@1#2] -- register_copy 
    jmp b1
    f_i: .byte 0, 0, 0, 0, 0
    f_127: .byte 0, 0, 0, 0, 0
}
//SEG83 print_ln
print_ln: {
  //SEG84 [39] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG85 [39] phi (byte*) line_cursor#6 = (byte*) line_cursor#13 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG86 print_ln::@1
  b1:
  //SEG87 [40] (byte*) line_cursor#1 ← (byte*) line_cursor#6 + (byte/signed byte/word/signed word) 40 [ line_cursor#1 char_cursor#10 ] ( main:2::print_ln:33 [ main::i#10 line_cursor#1 char_cursor#10 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda line_cursor
    clc
    adc #$28
    sta line_cursor
    bcc !+
    inc line_cursor+1
  !:
  //SEG88 [41] if((byte*) line_cursor#1<(byte*) char_cursor#10) goto print_ln::@1 [ line_cursor#1 char_cursor#10 ] ( main:2::print_ln:33 [ main::i#10 line_cursor#1 char_cursor#10 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda line_cursor+1
    cmp char_cursor+1
    bcc b1_from_b1
    bne !+
    lda line_cursor
    cmp char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG89 print_ln::@return
  breturn:
  //SEG90 [42] return  [ line_cursor#1 ] ( main:2::print_ln:33 [ main::i#10 line_cursor#1 ] )
    rts
}
//SEG91 print_word
print_word: {
    .label w = 7
  //SEG92 [43] (byte) print_byte::b#0 ← > (word) print_word::w#0 [ char_cursor#32 print_word::w#0 print_byte::b#0 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 char_cursor#32 print_word::w#0 print_byte::b#0 ] ) -- vbuxx=_hi_vwuz1 
    lda w+1
    tax
  //SEG93 [44] call print_byte param-assignment [ print_word::w#0 char_cursor#10 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 ] )
  //SEG94 [48] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG95 [48] phi (byte*) char_cursor#31 = (byte*) char_cursor#32 [phi:print_word->print_byte#0] -- register_copy 
  //SEG96 [48] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG97 print_word::@1
  b1:
  //SEG98 [45] (byte) print_byte::b#1 ← < (word) print_word::w#0 [ char_cursor#10 print_byte::b#1 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 char_cursor#10 print_byte::b#1 ] ) -- vbuxx=_lo_vwuz1 
    lda w
    tax
  //SEG99 [46] call print_byte param-assignment [ char_cursor#10 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 char_cursor#10 ] )
  //SEG100 [48] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG101 [48] phi (byte*) char_cursor#31 = (byte*) char_cursor#10 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG102 [48] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG103 print_word::@return
  breturn:
  //SEG104 [47] return  [ char_cursor#10 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 char_cursor#10 ] )
    rts
}
//SEG105 print_byte
print_byte: {
  //SEG106 [49] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word) 4 [ print_byte::b#2 char_cursor#31 print_byte::$0 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#31 print_byte::$0 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#31 print_byte::$0 ] ) -- vbuyy=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    tay
  //SEG107 [50] (byte) print_char::ch#0 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ print_byte::b#2 char_cursor#31 print_char::ch#0 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#31 print_char::ch#0 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#31 print_char::ch#0 ] ) -- vbuaa=pbuc1_derefidx_vbuyy 
    lda hextab,y
  //SEG108 [51] call print_char param-assignment [ char_cursor#10 print_byte::b#2 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 print_byte::b#2 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 char_cursor#10 print_byte::b#2 ] )
  //SEG109 [56] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG110 [56] phi (byte*) char_cursor#23 = (byte*) char_cursor#31 [phi:print_byte->print_char#0] -- register_copy 
  //SEG111 [56] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG112 print_byte::@1
  b1:
  //SEG113 [52] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word) 15 [ char_cursor#10 print_byte::$2 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 print_byte::$2 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 char_cursor#10 print_byte::$2 ] ) -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG114 [53] (byte) print_char::ch#1 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#10 print_char::ch#1 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 print_char::ch#1 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 char_cursor#10 print_char::ch#1 ] ) -- vbuaa=pbuc1_derefidx_vbuaa 
    tax
    lda hextab,x
  //SEG115 [54] call print_char param-assignment [ char_cursor#10 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 char_cursor#10 ] )
  //SEG116 [56] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG117 [56] phi (byte*) char_cursor#23 = (byte*) char_cursor#10 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG118 [56] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG119 print_byte::@return
  breturn:
  //SEG120 [55] return  [ char_cursor#10 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 char_cursor#10 ] )
    rts
    hextab: .text "0123456789abcdef"
}
//SEG121 print_char
print_char: {
  //SEG122 [57] *((byte*) char_cursor#23) ← (byte) print_char::ch#2 [ char_cursor#23 ] ( main:2::print_word:31::print_byte:44::print_char:51 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#23 ] main:2::print_word:31::print_byte:46::print_char:51 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#23 ] main:2::print_word:31::print_byte:44::print_char:54 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#23 ] main:2::print_word:31::print_byte:46::print_char:54 [ main::i#10 line_cursor#13 char_cursor#23 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (char_cursor),y
  //SEG123 [58] (byte*) char_cursor#10 ← ++ (byte*) char_cursor#23 [ char_cursor#10 ] ( main:2::print_word:31::print_byte:44::print_char:51 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#10 ] main:2::print_word:31::print_byte:46::print_char:51 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#10 ] main:2::print_word:31::print_byte:44::print_char:54 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 ] main:2::print_word:31::print_byte:46::print_char:54 [ main::i#10 line_cursor#13 char_cursor#10 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
    jmp breturn
  //SEG124 print_char::@return
  breturn:
  //SEG125 [59] return  [ char_cursor#10 ] ( main:2::print_word:31::print_byte:44::print_char:51 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#10 ] main:2::print_word:31::print_byte:46::print_char:51 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#10 ] main:2::print_word:31::print_byte:44::print_char:54 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 ] main:2::print_word:31::print_byte:46::print_char:54 [ main::i#10 line_cursor#13 char_cursor#10 ] )
    rts
}
//SEG126 getFAC
getFAC: {
    .label return = 7
  //SEG127 asm { jsr$b1aa sty$fe sta$ff  }
    jsr $b1aa
    sty $fe
    sta $ff
  //SEG128 [61] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0) [ getFAC::return#0 ] ( main:2::getFAC:28 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#0 ] ) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda memLo
    sta return
    lda memHi
    sta return+1
    jmp breturn
  //SEG129 getFAC::@return
  breturn:
  //SEG130 [62] return  [ getFAC::return#0 ] ( main:2::getFAC:28 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#0 ] )
    rts
}
//SEG131 addMEMtoFAC
addMEMtoFAC: {
  //SEG132 [64] call prepareMEM param-assignment [ ] ( main:2::addMEMtoFAC:26 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG133 [67] phi from addMEMtoFAC to prepareMEM [phi:addMEMtoFAC->prepareMEM]
  prepareMEM_from_addMEMtoFAC:
  //SEG134 [67] phi (byte*) prepareMEM::mem#5 = (const byte[]) main::f_127#0 [phi:addMEMtoFAC->prepareMEM#0] -- pbuz1=pbuc1 
    lda #<main.f_127
    sta prepareMEM.mem
    lda #>main.f_127
    sta prepareMEM.mem+1
    jsr prepareMEM
    jmp b1
  //SEG135 addMEMtoFAC::@1
  b1:
  //SEG136 asm { lda$fe ldy$ff jsr$b867  }
    lda $fe
    ldy $ff
    jsr $b867
    jmp breturn
  //SEG137 addMEMtoFAC::@return
  breturn:
  //SEG138 [66] return  [ ] ( main:2::addMEMtoFAC:26 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    rts
}
//SEG139 prepareMEM
prepareMEM: {
    .label mem = 7
  //SEG140 [68] (byte~) prepareMEM::$0 ← < (byte*) prepareMEM::mem#5 [ prepareMEM::mem#5 prepareMEM::$0 ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::setFAC:5::prepareMEM:86 [ prepareMEM::mem#5 prepareMEM::$0 ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ prepareMEM::mem#5 prepareMEM::$0 ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] ) -- vbuaa=_lo_pbuz1 
    lda mem
  //SEG141 [69] *((const byte*) memLo#0) ← (byte~) prepareMEM::$0 [ prepareMEM::mem#5 ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::setFAC:5::prepareMEM:86 [ prepareMEM::mem#5 ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ prepareMEM::mem#5 ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] ) -- _deref_pbuc1=vbuaa 
    sta memLo
  //SEG142 [70] (byte~) prepareMEM::$1 ← > (byte*) prepareMEM::mem#5 [ prepareMEM::$1 ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::setFAC:5::prepareMEM:86 [ prepareMEM::$1 ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ prepareMEM::$1 ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] ) -- vbuaa=_hi_pbuz1 
    lda mem+1
  //SEG143 [71] *((const byte*) memHi#0) ← (byte~) prepareMEM::$1 [ ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:5::prepareMEM:86 [ ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 ] ) -- _deref_pbuc1=vbuaa 
    sta memHi
    jmp breturn
  //SEG144 prepareMEM::@return
  breturn:
  //SEG145 [72] return  [ ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:5::prepareMEM:86 [ ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    rts
}
//SEG146 mulFACbyMEM
mulFACbyMEM: {
    .label mem = 7
  //SEG147 [74] (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2 [ prepareMEM::mem#4 ] ( main:2::mulFACbyMEM:14 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#4 ] main:2::mulFACbyMEM:24 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#4 ] )
    // (byte*) prepareMEM::mem#4 = (byte*) mulFACbyMEM::mem#2  // register copy zp ZP_WORD:7
  //SEG148 [75] call prepareMEM param-assignment [ ] ( main:2::mulFACbyMEM:14 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:24 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG149 [67] phi from mulFACbyMEM to prepareMEM [phi:mulFACbyMEM->prepareMEM]
  prepareMEM_from_mulFACbyMEM:
  //SEG150 [67] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#4 [phi:mulFACbyMEM->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    jmp b1
  //SEG151 mulFACbyMEM::@1
  b1:
  //SEG152 asm { lda$fe ldy$ff jsr$ba28  }
    lda $fe
    ldy $ff
    jsr $ba28
    jmp breturn
  //SEG153 mulFACbyMEM::@return
  breturn:
  //SEG154 [77] return  [ ] ( main:2::mulFACbyMEM:14 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:24 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    rts
}
//SEG155 sinFAC
sinFAC: {
  //SEG156 asm { jsr$e26b  }
    jsr $e26b
    jmp breturn
  //SEG157 sinFAC::@return
  breturn:
  //SEG158 [79] return  [ ] ( main:2::sinFAC:22 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    rts
}
//SEG159 divMEMbyFAC
divMEMbyFAC: {
  //SEG160 [81] call prepareMEM param-assignment [ ] ( main:2::divMEMbyFAC:20 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG161 [67] phi from divMEMbyFAC to prepareMEM [phi:divMEMbyFAC->prepareMEM]
  prepareMEM_from_divMEMbyFAC:
  //SEG162 [67] phi (byte*) prepareMEM::mem#5 = (const byte[]) main::f_i#0 [phi:divMEMbyFAC->prepareMEM#0] -- pbuz1=pbuc1 
    lda #<main.f_i
    sta prepareMEM.mem
    lda #>main.f_i
    sta prepareMEM.mem+1
    jsr prepareMEM
    jmp b1
  //SEG163 divMEMbyFAC::@1
  b1:
  //SEG164 asm { lda$fe ldy$ff jsr$bb0f  }
    lda $fe
    ldy $ff
    jsr $bb0f
    jmp breturn
  //SEG165 divMEMbyFAC::@return
  breturn:
  //SEG166 [83] return  [ ] ( main:2::divMEMbyFAC:20 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    rts
}
//SEG167 setFAC
setFAC: {
    .label w = 7
  //SEG168 [85] (byte*) prepareMEM::mem#0 ← ((byte*)) (word) setFAC::w#3 [ prepareMEM::mem#0 ] ( main:2::setFAC:5 [ prepareMEM::mem#0 ] main:2::setFAC:12 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#0 ] main:2::setFAC:18 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#0 ] ) -- pbuz1=_ptrby_vwuz1 
  //SEG169 [86] call prepareMEM param-assignment [ ] ( main:2::setFAC:5 [ ] main:2::setFAC:12 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:18 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG170 [67] phi from setFAC to prepareMEM [phi:setFAC->prepareMEM]
  prepareMEM_from_setFAC:
  //SEG171 [67] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#0 [phi:setFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    jmp b1
  //SEG172 setFAC::@1
  b1:
  //SEG173 asm { ldy$fe lda$ff jsr$b391  }
    ldy $fe
    lda $ff
    jsr $b391
    jmp breturn
  //SEG174 setFAC::@return
  breturn:
  //SEG175 [88] return  [ ] ( main:2::setFAC:5 [ ] main:2::setFAC:12 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:18 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    rts
}
//SEG176 setMEMtoFAC
setMEMtoFAC: {
    .label mem = 7
  //SEG177 [90] (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#2 [ prepareMEM::mem#1 ] ( main:2::setMEMtoFAC:9 [ prepareMEM::mem#1 ] main:2::setMEMtoFAC:16 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#1 ] )
    // (byte*) prepareMEM::mem#1 = (byte*) setMEMtoFAC::mem#2  // register copy zp ZP_WORD:7
  //SEG178 [91] call prepareMEM param-assignment [ ] ( main:2::setMEMtoFAC:9 [ ] main:2::setMEMtoFAC:16 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG179 [67] phi from setMEMtoFAC to prepareMEM [phi:setMEMtoFAC->prepareMEM]
  prepareMEM_from_setMEMtoFAC:
  //SEG180 [67] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#1 [phi:setMEMtoFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
    jmp b1
  //SEG181 setMEMtoFAC::@1
  b1:
  //SEG182 asm { ldx$fe ldy$ff jsr$bbd4  }
    ldx $fe
    ldy $ff
    jsr $bbd4
    jmp breturn
  //SEG183 setMEMtoFAC::@return
  breturn:
  //SEG184 [93] return  [ ] ( main:2::setMEMtoFAC:9 [ ] main:2::setMEMtoFAC:16 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    rts
}
//SEG185 divFACby10
divFACby10: {
  //SEG186 asm { jsr$bafe  }
    jsr $bafe
    jmp breturn
  //SEG187 divFACby10::@return
  breturn:
  //SEG188 [95] return  [ ] ( main:2::divFACby10:7 [ ] )
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b36
Removing instruction jmp bend
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp b12
Removing instruction jmp b13
Removing instruction jmp b14
Removing instruction jmp b15
Removing instruction jmp b16
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction b36_from_bbegin:
Removing instruction main_from_b36:
Removing instruction bend_from_b36:
Removing instruction b3_from_main:
Removing instruction b4_from_b3:
Removing instruction setMEMtoFAC_from_b4:
Removing instruction b6_from_b1:
Removing instruction mulFACbyMEM_from_b6:
Removing instruction b7_from_b6:
Removing instruction setMEMtoFAC_from_b7:
Removing instruction b8_from_b7:
Removing instruction setFAC_from_b8:
Removing instruction b9_from_b8:
Removing instruction divMEMbyFAC_from_b9:
Removing instruction b10_from_b9:
Removing instruction b11_from_b10:
Removing instruction mulFACbyMEM_from_b11:
Removing instruction b12_from_b11:
Removing instruction addMEMtoFAC_from_b12:
Removing instruction b13_from_b12:
Removing instruction b15_from_b14:
Removing instruction print_ln_from_b15:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b36:
Removing instruction bend:
Removing instruction setFAC_from_main:
Removing instruction b3:
Removing instruction b4:
Removing instruction b1_from_b4:
Removing instruction setFAC_from_b1:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction b12:
Removing instruction b13:
Removing instruction b14:
Removing instruction b15:
Removing instruction b16:
Removing instruction breturn:
Removing instruction b1_from_b17:
Removing instruction breturn:
Removing instruction print_byte_from_print_word:
Removing instruction b1:
Removing instruction print_byte_from_b1:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction prepareMEM_from_addMEMtoFAC:
Removing instruction b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction prepareMEM_from_mulFACbyMEM:
Removing instruction b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction prepareMEM_from_divMEMbyFAC:
Removing instruction b1:
Removing instruction breturn:
Removing instruction prepareMEM_from_setFAC:
Removing instruction b1:
Removing instruction breturn:
Removing instruction prepareMEM_from_setMEMtoFAC:
Removing instruction b1:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @36
(label) @begin
(label) @end
(void()) addMEMtoFAC((byte*) addMEMtoFAC::mem)
(label) addMEMtoFAC::@1
(label) addMEMtoFAC::@return
(byte*) addMEMtoFAC::mem
(byte*) char_cursor
(byte*) char_cursor#10 char_cursor zp ZP_WORD:5 6.2941176470588225
(byte*) char_cursor#23 char_cursor zp ZP_WORD:5 4.0
(byte*) char_cursor#31 char_cursor zp ZP_WORD:5 2.0
(byte*) char_cursor#32 char_cursor zp ZP_WORD:5 0.5909090909090909
(byte*~) char_cursor#48 char_cursor zp ZP_WORD:5 22.0
(void()) divFACby10()
(label) divFACby10::@return
(void()) divMEMbyFAC((byte*) divMEMbyFAC::mem)
(label) divMEMbyFAC::@1
(label) divMEMbyFAC::@return
(byte*) divMEMbyFAC::mem
(word()) getFAC()
(label) getFAC::@return
(word) getFAC::return
(word) getFAC::return#0 return zp ZP_WORD:7 4.333333333333333
(word) getFAC::return#2 return zp ZP_WORD:7 22.0
(word) getFAC::w
(byte*) line_cursor
(byte*) line_cursor#1 line_cursor zp ZP_WORD:3 46.42857142857143
(byte*) line_cursor#13 line_cursor zp ZP_WORD:3 0.5416666666666666
(byte*) line_cursor#6 line_cursor zp ZP_WORD:3 204.0
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@3
(label) main::@4
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte[]) main::f_127
(const byte[]) main::f_127#0 f_127 = { (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0 }
(byte*) main::f_2pi
(const byte*) main::f_2pi#0 f_2pi = ((byte*))(word) 58085
(byte[]) main::f_i
(const byte[]) main::f_i#0 f_i = { (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0, (byte/signed byte/word/signed word) 0 }
(byte) main::i
(byte) main::i#1 i zp ZP_BYTE:2 11.0
(byte) main::i#10 i zp ZP_BYTE:2 1.375
(byte*) memHi
(const byte*) memHi#0 memHi = ((byte*))(byte/word/signed word) 255
(byte*) memLo
(const byte*) memLo#0 memLo = ((byte*))(byte/word/signed word) 254
(void()) mulFACbyMEM((byte*) mulFACbyMEM::mem)
(label) mulFACbyMEM::@1
(label) mulFACbyMEM::@return
(byte*) mulFACbyMEM::mem
(byte*) mulFACbyMEM::mem#2 mem zp ZP_WORD:7 2.0
(void()) prepareMEM((byte*) prepareMEM::mem)
(byte~) prepareMEM::$0 reg byte a 4.0
(byte~) prepareMEM::$1 reg byte a 4.0
(label) prepareMEM::@return
(byte*) prepareMEM::mem
(byte*) prepareMEM::mem#0 mem zp ZP_WORD:7 4.0
(byte*) prepareMEM::mem#1 mem zp ZP_WORD:7 4.0
(byte*) prepareMEM::mem#4 mem zp ZP_WORD:7 4.0
(byte*) prepareMEM::mem#5 mem zp ZP_WORD:7 3.333333333333333
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte y 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 reg byte x 4.0
(byte) print_byte::b#1 reg byte x 4.0
(byte) print_byte::b#2 reg byte x 2.0
(byte[]) print_byte::hextab
(const string) print_byte::hextab#0 hextab = (string) "0123456789abcdef"
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 4.0
(byte) print_char::ch#1 reg byte a 4.0
(byte) print_char::ch#2 reg byte a 6.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0 w zp ZP_WORD:7 5.0
(void()) setFAC((word) setFAC::w)
(label) setFAC::@1
(label) setFAC::@return
(word) setFAC::w
(word) setFAC::w#1 w zp ZP_WORD:7 22.0
(word) setFAC::w#3 w zp ZP_WORD:7 13.0
(void()) setMEMtoFAC((byte*) setMEMtoFAC::mem)
(label) setMEMtoFAC::@1
(label) setMEMtoFAC::@return
(byte*) setMEMtoFAC::mem
(byte*) setMEMtoFAC::mem#2 mem zp ZP_WORD:7 2.0
(void()) sinFAC()
(label) sinFAC::@return

zp ZP_BYTE:2 [ main::i#10 main::i#1 ]
zp ZP_WORD:3 [ line_cursor#6 line_cursor#13 line_cursor#1 ]
reg byte x [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
zp ZP_WORD:5 [ char_cursor#23 char_cursor#31 char_cursor#32 char_cursor#48 char_cursor#10 ]
zp ZP_WORD:7 [ prepareMEM::mem#5 prepareMEM::mem#4 prepareMEM::mem#0 prepareMEM::mem#1 mulFACbyMEM::mem#2 setFAC::w#3 setFAC::w#1 setMEMtoFAC::mem#2 getFAC::return#2 print_word::w#0 getFAC::return#0 ]
reg byte y [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]
reg byte a [ prepareMEM::$0 ]
reg byte a [ prepareMEM::$1 ]


FINAL ASSEMBLER
Score: 4973

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const memLo = $fe
  .const memHi = $ff
  .label line_cursor = 3
  .label char_cursor = 5
//SEG2 @begin
//SEG3 [1] phi from @begin to @36 [phi:@begin->@36]
//SEG4 @36
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @36 to main [phi:@36->main]
  jsr main
//SEG7 [3] phi from @36 to @end [phi:@36->@end]
//SEG8 @end
//SEG9 main
main: {
    .const f_2pi = $e2e5
    .label i = 2
  //SEG10 [5] call setFAC param-assignment [ ] ( main:2 [ ] )
  //SEG11 [84] phi from main to setFAC [phi:main->setFAC]
  //SEG12 [84] phi (word) setFAC::w#3 = (word/signed word) 1275 [phi:main->setFAC#0] -- vwuz1=vwuc1 
    lda #<$4fb
    sta setFAC.w
    lda #>$4fb
    sta setFAC.w+1
    jsr setFAC
  //SEG13 [6] phi from main to main::@3 [phi:main->main::@3]
  //SEG14 main::@3
  //SEG15 [7] call divFACby10 param-assignment [ ] ( main:2 [ ] )
    jsr divFACby10
  //SEG16 [8] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  //SEG17 main::@4
  //SEG18 [9] call setMEMtoFAC param-assignment [ ] ( main:2 [ ] )
  //SEG19 [89] phi from main::@4 to setMEMtoFAC [phi:main::@4->setMEMtoFAC]
  //SEG20 [89] phi (byte*) setMEMtoFAC::mem#2 = (const byte[]) main::f_127#0 [phi:main::@4->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_127
    sta setMEMtoFAC.mem
    lda #>f_127
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
  //SEG21 [10] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  //SEG22 [10] phi (byte*) line_cursor#13 = ((byte*))(word/signed word) 1024 [phi:main::@4->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta line_cursor
    lda #>$400
    sta line_cursor+1
  //SEG23 [10] phi (byte*) char_cursor#32 = ((byte*))(word/signed word) 1024 [phi:main::@4->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta char_cursor
    lda #>$400
    sta char_cursor+1
  //SEG24 [10] phi (byte) main::i#10 = (byte/signed byte/word/signed word) 1 [phi:main::@4->main::@1#2] -- vbuz1=vbuc1 
    lda #1
    sta i
  //SEG25 main::@1
  b1:
  //SEG26 [11] (word) setFAC::w#1 ← ((word)) (byte) main::i#10 [ main::i#10 char_cursor#32 line_cursor#13 setFAC::w#1 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 setFAC::w#1 ] ) -- vwuz1=_word_vbuz2 
    lda i
    sta setFAC.w
    lda #0
    sta setFAC.w+1
  //SEG27 [12] call setFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG28 [84] phi from main::@1 to setFAC [phi:main::@1->setFAC]
  //SEG29 [84] phi (word) setFAC::w#3 = (word) setFAC::w#1 [phi:main::@1->setFAC#0] -- register_copy 
    jsr setFAC
  //SEG30 [13] phi from main::@1 to main::@6 [phi:main::@1->main::@6]
  //SEG31 main::@6
  //SEG32 [14] call mulFACbyMEM param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG33 [73] phi from main::@6 to mulFACbyMEM [phi:main::@6->mulFACbyMEM]
  //SEG34 [73] phi (byte*) mulFACbyMEM::mem#2 = (const byte*) main::f_2pi#0 [phi:main::@6->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_2pi
    sta mulFACbyMEM.mem
    lda #>f_2pi
    sta mulFACbyMEM.mem+1
    jsr mulFACbyMEM
  //SEG35 [15] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  //SEG36 main::@7
  //SEG37 [16] call setMEMtoFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG38 [89] phi from main::@7 to setMEMtoFAC [phi:main::@7->setMEMtoFAC]
  //SEG39 [89] phi (byte*) setMEMtoFAC::mem#2 = (const byte[]) main::f_i#0 [phi:main::@7->setMEMtoFAC#0] -- pbuz1=pbuc1 
    lda #<f_i
    sta setMEMtoFAC.mem
    lda #>f_i
    sta setMEMtoFAC.mem+1
    jsr setMEMtoFAC
  //SEG40 [17] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  //SEG41 main::@8
  //SEG42 [18] call setFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG43 [84] phi from main::@8 to setFAC [phi:main::@8->setFAC]
  //SEG44 [84] phi (word) setFAC::w#3 = (byte/signed byte/word/signed word) 25 [phi:main::@8->setFAC#0] -- vwuz1=vbuc1 
    lda #$19
    sta setFAC.w
    lda #0
    sta setFAC.w+1
    jsr setFAC
  //SEG45 [19] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  //SEG46 main::@9
  //SEG47 [20] call divMEMbyFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG48 [80] phi from main::@9 to divMEMbyFAC [phi:main::@9->divMEMbyFAC]
    jsr divMEMbyFAC
  //SEG49 [21] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  //SEG50 main::@10
  //SEG51 [22] call sinFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    jsr sinFAC
  //SEG52 [23] phi from main::@10 to main::@11 [phi:main::@10->main::@11]
  //SEG53 main::@11
  //SEG54 [24] call mulFACbyMEM param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG55 [73] phi from main::@11 to mulFACbyMEM [phi:main::@11->mulFACbyMEM]
  //SEG56 [73] phi (byte*) mulFACbyMEM::mem#2 = (const byte[]) main::f_127#0 [phi:main::@11->mulFACbyMEM#0] -- pbuz1=pbuc1 
    lda #<f_127
    sta mulFACbyMEM.mem
    lda #>f_127
    sta mulFACbyMEM.mem+1
    jsr mulFACbyMEM
  //SEG57 [25] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  //SEG58 main::@12
  //SEG59 [26] call addMEMtoFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG60 [63] phi from main::@12 to addMEMtoFAC [phi:main::@12->addMEMtoFAC]
    jsr addMEMtoFAC
  //SEG61 [27] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  //SEG62 main::@13
  //SEG63 [28] call getFAC param-assignment [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#0 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#0 ] )
    jsr getFAC
  //SEG64 [29] (word) getFAC::return#2 ← (word) getFAC::return#0 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#2 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#2 ] )
    // (word) getFAC::return#2 = (word) getFAC::return#0  // register copy zp ZP_WORD:7
  //SEG65 main::@14
  //SEG66 [30] (word) print_word::w#0 ← (word) getFAC::return#2 [ main::i#10 char_cursor#32 line_cursor#13 print_word::w#0 ] ( main:2 [ main::i#10 char_cursor#32 line_cursor#13 print_word::w#0 ] )
    // (word) print_word::w#0 = (word) getFAC::return#2  // register copy zp ZP_WORD:7
  //SEG67 [31] call print_word param-assignment [ main::i#10 line_cursor#13 char_cursor#10 ] ( main:2 [ main::i#10 line_cursor#13 char_cursor#10 ] )
    jsr print_word
  //SEG68 [32] phi from main::@14 to main::@15 [phi:main::@14->main::@15]
  //SEG69 main::@15
  //SEG70 [33] call print_ln param-assignment [ main::i#10 line_cursor#1 ] ( main:2 [ main::i#10 line_cursor#1 ] )
  //SEG71 [38] phi from main::@15 to print_ln [phi:main::@15->print_ln]
    jsr print_ln
  //SEG72 main::@16
  //SEG73 [34] (byte) main::i#1 ← ++ (byte) main::i#10 [ main::i#1 line_cursor#1 ] ( main:2 [ main::i#1 line_cursor#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG74 [35] if((byte) main::i#1!=(byte/signed byte/word/signed word) 26) goto main::@17 [ main::i#1 line_cursor#1 ] ( main:2 [ main::i#1 line_cursor#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$1a
    bne b17
  //SEG75 main::@return
  //SEG76 [36] return  [ ] ( main:2 [ ] )
    rts
  //SEG77 main::@17
  b17:
  //SEG78 [37] (byte*~) char_cursor#48 ← (byte*) line_cursor#1 [ main::i#1 char_cursor#48 line_cursor#1 ] ( main:2 [ main::i#1 char_cursor#48 line_cursor#1 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG79 [10] phi from main::@17 to main::@1 [phi:main::@17->main::@1]
  //SEG80 [10] phi (byte*) line_cursor#13 = (byte*) line_cursor#1 [phi:main::@17->main::@1#0] -- register_copy 
  //SEG81 [10] phi (byte*) char_cursor#32 = (byte*~) char_cursor#48 [phi:main::@17->main::@1#1] -- register_copy 
  //SEG82 [10] phi (byte) main::i#10 = (byte) main::i#1 [phi:main::@17->main::@1#2] -- register_copy 
    jmp b1
    f_i: .byte 0, 0, 0, 0, 0
    f_127: .byte 0, 0, 0, 0, 0
}
//SEG83 print_ln
print_ln: {
  //SEG84 [39] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  //SEG85 [39] phi (byte*) line_cursor#6 = (byte*) line_cursor#13 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
  //SEG86 print_ln::@1
  b1:
  //SEG87 [40] (byte*) line_cursor#1 ← (byte*) line_cursor#6 + (byte/signed byte/word/signed word) 40 [ line_cursor#1 char_cursor#10 ] ( main:2::print_ln:33 [ main::i#10 line_cursor#1 char_cursor#10 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda line_cursor
    clc
    adc #$28
    sta line_cursor
    bcc !+
    inc line_cursor+1
  !:
  //SEG88 [41] if((byte*) line_cursor#1<(byte*) char_cursor#10) goto print_ln::@1 [ line_cursor#1 char_cursor#10 ] ( main:2::print_ln:33 [ main::i#10 line_cursor#1 char_cursor#10 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda line_cursor+1
    cmp char_cursor+1
    bcc b1
    bne !+
    lda line_cursor
    cmp char_cursor
    bcc b1
  !:
  //SEG89 print_ln::@return
  //SEG90 [42] return  [ line_cursor#1 ] ( main:2::print_ln:33 [ main::i#10 line_cursor#1 ] )
    rts
}
//SEG91 print_word
print_word: {
    .label w = 7
  //SEG92 [43] (byte) print_byte::b#0 ← > (word) print_word::w#0 [ char_cursor#32 print_word::w#0 print_byte::b#0 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 char_cursor#32 print_word::w#0 print_byte::b#0 ] ) -- vbuxx=_hi_vwuz1 
    lda w+1
    tax
  //SEG93 [44] call print_byte param-assignment [ print_word::w#0 char_cursor#10 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 ] )
  //SEG94 [48] phi from print_word to print_byte [phi:print_word->print_byte]
  //SEG95 [48] phi (byte*) char_cursor#31 = (byte*) char_cursor#32 [phi:print_word->print_byte#0] -- register_copy 
  //SEG96 [48] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG97 print_word::@1
  //SEG98 [45] (byte) print_byte::b#1 ← < (word) print_word::w#0 [ char_cursor#10 print_byte::b#1 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 char_cursor#10 print_byte::b#1 ] ) -- vbuxx=_lo_vwuz1 
    lda w
    tax
  //SEG99 [46] call print_byte param-assignment [ char_cursor#10 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 char_cursor#10 ] )
  //SEG100 [48] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  //SEG101 [48] phi (byte*) char_cursor#31 = (byte*) char_cursor#10 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG102 [48] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG103 print_word::@return
  //SEG104 [47] return  [ char_cursor#10 ] ( main:2::print_word:31 [ main::i#10 line_cursor#13 char_cursor#10 ] )
    rts
}
//SEG105 print_byte
print_byte: {
  //SEG106 [49] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte/signed byte/word/signed word) 4 [ print_byte::b#2 char_cursor#31 print_byte::$0 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#31 print_byte::$0 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#31 print_byte::$0 ] ) -- vbuyy=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    tay
  //SEG107 [50] (byte) print_char::ch#0 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ print_byte::b#2 char_cursor#31 print_char::ch#0 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#31 print_char::ch#0 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#31 print_char::ch#0 ] ) -- vbuaa=pbuc1_derefidx_vbuyy 
    lda hextab,y
  //SEG108 [51] call print_char param-assignment [ char_cursor#10 print_byte::b#2 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 print_byte::b#2 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 char_cursor#10 print_byte::b#2 ] )
  //SEG109 [56] phi from print_byte to print_char [phi:print_byte->print_char]
  //SEG110 [56] phi (byte*) char_cursor#23 = (byte*) char_cursor#31 [phi:print_byte->print_char#0] -- register_copy 
  //SEG111 [56] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
  //SEG112 print_byte::@1
  //SEG113 [52] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte/signed byte/word/signed word) 15 [ char_cursor#10 print_byte::$2 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 print_byte::$2 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 char_cursor#10 print_byte::$2 ] ) -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG114 [53] (byte) print_char::ch#1 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#10 print_char::ch#1 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 print_char::ch#1 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 char_cursor#10 print_char::ch#1 ] ) -- vbuaa=pbuc1_derefidx_vbuaa 
    tax
    lda hextab,x
  //SEG115 [54] call print_char param-assignment [ char_cursor#10 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 char_cursor#10 ] )
  //SEG116 [56] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  //SEG117 [56] phi (byte*) char_cursor#23 = (byte*) char_cursor#10 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG118 [56] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
  //SEG119 print_byte::@return
  //SEG120 [55] return  [ char_cursor#10 ] ( main:2::print_word:31::print_byte:44 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 ] main:2::print_word:31::print_byte:46 [ main::i#10 line_cursor#13 char_cursor#10 ] )
    rts
    hextab: .text "0123456789abcdef"
}
//SEG121 print_char
print_char: {
  //SEG122 [57] *((byte*) char_cursor#23) ← (byte) print_char::ch#2 [ char_cursor#23 ] ( main:2::print_word:31::print_byte:44::print_char:51 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#23 ] main:2::print_word:31::print_byte:46::print_char:51 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#23 ] main:2::print_word:31::print_byte:44::print_char:54 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#23 ] main:2::print_word:31::print_byte:46::print_char:54 [ main::i#10 line_cursor#13 char_cursor#23 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (char_cursor),y
  //SEG123 [58] (byte*) char_cursor#10 ← ++ (byte*) char_cursor#23 [ char_cursor#10 ] ( main:2::print_word:31::print_byte:44::print_char:51 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#10 ] main:2::print_word:31::print_byte:46::print_char:51 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#10 ] main:2::print_word:31::print_byte:44::print_char:54 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 ] main:2::print_word:31::print_byte:46::print_char:54 [ main::i#10 line_cursor#13 char_cursor#10 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
  //SEG124 print_char::@return
  //SEG125 [59] return  [ char_cursor#10 ] ( main:2::print_word:31::print_byte:44::print_char:51 [ main::i#10 line_cursor#13 print_word::w#0 print_byte::b#2 char_cursor#10 ] main:2::print_word:31::print_byte:46::print_char:51 [ main::i#10 line_cursor#13 print_byte::b#2 char_cursor#10 ] main:2::print_word:31::print_byte:44::print_char:54 [ main::i#10 line_cursor#13 print_word::w#0 char_cursor#10 ] main:2::print_word:31::print_byte:46::print_char:54 [ main::i#10 line_cursor#13 char_cursor#10 ] )
    rts
}
//SEG126 getFAC
getFAC: {
    .label return = 7
  //SEG127 asm { jsr$b1aa sty$fe sta$ff  }
    jsr $b1aa
    sty $fe
    sta $ff
  //SEG128 [61] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0) [ getFAC::return#0 ] ( main:2::getFAC:28 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#0 ] ) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda memLo
    sta return
    lda memHi
    sta return+1
  //SEG129 getFAC::@return
  //SEG130 [62] return  [ getFAC::return#0 ] ( main:2::getFAC:28 [ main::i#10 char_cursor#32 line_cursor#13 getFAC::return#0 ] )
    rts
}
//SEG131 addMEMtoFAC
addMEMtoFAC: {
  //SEG132 [64] call prepareMEM param-assignment [ ] ( main:2::addMEMtoFAC:26 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG133 [67] phi from addMEMtoFAC to prepareMEM [phi:addMEMtoFAC->prepareMEM]
  //SEG134 [67] phi (byte*) prepareMEM::mem#5 = (const byte[]) main::f_127#0 [phi:addMEMtoFAC->prepareMEM#0] -- pbuz1=pbuc1 
    lda #<main.f_127
    sta prepareMEM.mem
    lda #>main.f_127
    sta prepareMEM.mem+1
    jsr prepareMEM
  //SEG135 addMEMtoFAC::@1
  //SEG136 asm { lda$fe ldy$ff jsr$b867  }
    lda $fe
    ldy $ff
    jsr $b867
  //SEG137 addMEMtoFAC::@return
  //SEG138 [66] return  [ ] ( main:2::addMEMtoFAC:26 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    rts
}
//SEG139 prepareMEM
prepareMEM: {
    .label mem = 7
  //SEG140 [68] (byte~) prepareMEM::$0 ← < (byte*) prepareMEM::mem#5 [ prepareMEM::mem#5 prepareMEM::$0 ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::setFAC:5::prepareMEM:86 [ prepareMEM::mem#5 prepareMEM::$0 ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ prepareMEM::mem#5 prepareMEM::$0 ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 prepareMEM::$0 ] ) -- vbuaa=_lo_pbuz1 
    lda mem
  //SEG141 [69] *((const byte*) memLo#0) ← (byte~) prepareMEM::$0 [ prepareMEM::mem#5 ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::setFAC:5::prepareMEM:86 [ prepareMEM::mem#5 ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ prepareMEM::mem#5 ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#5 ] ) -- _deref_pbuc1=vbuaa 
    sta memLo
  //SEG142 [70] (byte~) prepareMEM::$1 ← > (byte*) prepareMEM::mem#5 [ prepareMEM::$1 ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::setFAC:5::prepareMEM:86 [ prepareMEM::$1 ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ prepareMEM::$1 ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::$1 ] ) -- vbuaa=_hi_pbuz1 
    lda mem+1
  //SEG143 [71] *((const byte*) memHi#0) ← (byte~) prepareMEM::$1 [ ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:5::prepareMEM:86 [ ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 ] ) -- _deref_pbuc1=vbuaa 
    sta memHi
  //SEG144 prepareMEM::@return
  //SEG145 [72] return  [ ] ( main:2::addMEMtoFAC:26::prepareMEM:64 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:14::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:24::prepareMEM:75 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::divMEMbyFAC:20::prepareMEM:81 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:5::prepareMEM:86 [ ] main:2::setFAC:12::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:18::prepareMEM:86 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setMEMtoFAC:9::prepareMEM:91 [ ] main:2::setMEMtoFAC:16::prepareMEM:91 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    rts
}
//SEG146 mulFACbyMEM
mulFACbyMEM: {
    .label mem = 7
  //SEG147 [74] (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2 [ prepareMEM::mem#4 ] ( main:2::mulFACbyMEM:14 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#4 ] main:2::mulFACbyMEM:24 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#4 ] )
    // (byte*) prepareMEM::mem#4 = (byte*) mulFACbyMEM::mem#2  // register copy zp ZP_WORD:7
  //SEG148 [75] call prepareMEM param-assignment [ ] ( main:2::mulFACbyMEM:14 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:24 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG149 [67] phi from mulFACbyMEM to prepareMEM [phi:mulFACbyMEM->prepareMEM]
  //SEG150 [67] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#4 [phi:mulFACbyMEM->prepareMEM#0] -- register_copy 
    jsr prepareMEM
  //SEG151 mulFACbyMEM::@1
  //SEG152 asm { lda$fe ldy$ff jsr$ba28  }
    lda $fe
    ldy $ff
    jsr $ba28
  //SEG153 mulFACbyMEM::@return
  //SEG154 [77] return  [ ] ( main:2::mulFACbyMEM:14 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::mulFACbyMEM:24 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    rts
}
//SEG155 sinFAC
sinFAC: {
  //SEG156 asm { jsr$e26b  }
    jsr $e26b
  //SEG157 sinFAC::@return
  //SEG158 [79] return  [ ] ( main:2::sinFAC:22 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    rts
}
//SEG159 divMEMbyFAC
divMEMbyFAC: {
  //SEG160 [81] call prepareMEM param-assignment [ ] ( main:2::divMEMbyFAC:20 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG161 [67] phi from divMEMbyFAC to prepareMEM [phi:divMEMbyFAC->prepareMEM]
  //SEG162 [67] phi (byte*) prepareMEM::mem#5 = (const byte[]) main::f_i#0 [phi:divMEMbyFAC->prepareMEM#0] -- pbuz1=pbuc1 
    lda #<main.f_i
    sta prepareMEM.mem
    lda #>main.f_i
    sta prepareMEM.mem+1
    jsr prepareMEM
  //SEG163 divMEMbyFAC::@1
  //SEG164 asm { lda$fe ldy$ff jsr$bb0f  }
    lda $fe
    ldy $ff
    jsr $bb0f
  //SEG165 divMEMbyFAC::@return
  //SEG166 [83] return  [ ] ( main:2::divMEMbyFAC:20 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    rts
}
//SEG167 setFAC
setFAC: {
    .label w = 7
  //SEG168 [85] (byte*) prepareMEM::mem#0 ← ((byte*)) (word) setFAC::w#3 [ prepareMEM::mem#0 ] ( main:2::setFAC:5 [ prepareMEM::mem#0 ] main:2::setFAC:12 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#0 ] main:2::setFAC:18 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#0 ] ) -- pbuz1=_ptrby_vwuz1 
  //SEG169 [86] call prepareMEM param-assignment [ ] ( main:2::setFAC:5 [ ] main:2::setFAC:12 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:18 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG170 [67] phi from setFAC to prepareMEM [phi:setFAC->prepareMEM]
  //SEG171 [67] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#0 [phi:setFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
  //SEG172 setFAC::@1
  //SEG173 asm { ldy$fe lda$ff jsr$b391  }
    ldy $fe
    lda $ff
    jsr $b391
  //SEG174 setFAC::@return
  //SEG175 [88] return  [ ] ( main:2::setFAC:5 [ ] main:2::setFAC:12 [ main::i#10 char_cursor#32 line_cursor#13 ] main:2::setFAC:18 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    rts
}
//SEG176 setMEMtoFAC
setMEMtoFAC: {
    .label mem = 7
  //SEG177 [90] (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#2 [ prepareMEM::mem#1 ] ( main:2::setMEMtoFAC:9 [ prepareMEM::mem#1 ] main:2::setMEMtoFAC:16 [ main::i#10 char_cursor#32 line_cursor#13 prepareMEM::mem#1 ] )
    // (byte*) prepareMEM::mem#1 = (byte*) setMEMtoFAC::mem#2  // register copy zp ZP_WORD:7
  //SEG178 [91] call prepareMEM param-assignment [ ] ( main:2::setMEMtoFAC:9 [ ] main:2::setMEMtoFAC:16 [ main::i#10 char_cursor#32 line_cursor#13 ] )
  //SEG179 [67] phi from setMEMtoFAC to prepareMEM [phi:setMEMtoFAC->prepareMEM]
  //SEG180 [67] phi (byte*) prepareMEM::mem#5 = (byte*) prepareMEM::mem#1 [phi:setMEMtoFAC->prepareMEM#0] -- register_copy 
    jsr prepareMEM
  //SEG181 setMEMtoFAC::@1
  //SEG182 asm { ldx$fe ldy$ff jsr$bbd4  }
    ldx $fe
    ldy $ff
    jsr $bbd4
  //SEG183 setMEMtoFAC::@return
  //SEG184 [93] return  [ ] ( main:2::setMEMtoFAC:9 [ ] main:2::setMEMtoFAC:16 [ main::i#10 char_cursor#32 line_cursor#13 ] )
    rts
}
//SEG185 divFACby10
divFACby10: {
  //SEG186 asm { jsr$bafe  }
    jsr $bafe
  //SEG187 divFACby10::@return
  //SEG188 [95] return  [ ] ( main:2::divFACby10:7 [ ] )
    rts
}

