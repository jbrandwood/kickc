@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [5] (byte) y#12 ← phi( main/(byte) 0 main::@5/(byte) y#1 )
  [5] (byte) idx#12 ← phi( main/(byte) 0 main::@5/(byte) idx#11 )
  [5] (byte) x#3 ← phi( main/(byte) 0 main::@5/(byte) x#10 )
  [5] (byte) line#11 ← phi( main/(byte) 0 main::@5/(byte) line#2 )
  [6] if((byte) line#11<(byte) 8) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [8] (byte) x#1 ← ++ (byte) x#3
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [9] (byte) x#10 ← phi( main::@2/(byte) x#1 main::@4/(byte) x#2 )
  [9] (byte) idx#11 ← phi( main::@2/(byte) idx#12 main::@4/(byte) idx#1 )
  [9] (byte) row#12 ← phi( main::@2/(byte) 0 main::@4/(byte) row#2 )
  [10] if((byte) row#12<(byte) 8) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@3
  [11] (byte) y#1 ← (byte) y#12 + (const byte) YSPACE
  [12] (byte) line#2 ← ++ (byte) line#11
  to:main::@1
main::@4: scope:[main]  from main::@3
  [13] (byte~) main::$3 ← (byte) idx#11 << (byte) 1
  [14] *((byte*)(const struct pos*) p+(const byte) OFFSET_STRUCT_POS_Y + (byte~) main::$3) ← (byte) y#12
  [15] *((byte*)(const struct pos*) p + (byte~) main::$3) ← (byte) x#10
  [16] (byte) idx#1 ← ++ (byte) idx#11
  [17] (byte) x#2 ← (byte) x#10 + (const byte) XSPACE
  [18] (byte) row#2 ← ++ (byte) row#12
  to:main::@3
