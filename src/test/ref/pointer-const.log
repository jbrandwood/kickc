
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#4 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (bool~) main::$3 ← (number) 0 != *((const to_nomodify byte*) MSG + (byte) main::i#4)
  if((bool~) main::$3) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  (byte) main::i#5 ← phi( main::@1/(byte) main::i#4 )
  *((const nomodify byte*) SCREEN + (byte) main::i#5) ← *((const to_nomodify byte*) MSG + (byte) main::i#5)
  (byte) main::i#1 ← ++ (byte) main::i#5
  to:main::@1
main::@3: scope:[main]  from main::@1
  (byte) main::i#2 ← (number) 0
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@5
  (byte) main::i#6 ← phi( main::@3/(byte) main::i#2 main::@5/(byte) main::i#3 )
  (bool~) main::$0 ← *((const nomodify to_nomodify byte*) BASIC + (byte) main::i#6) != (byte) '0'
  if((bool~) main::$0) goto main::@5
  to:main::@return
main::@5: scope:[main]  from main::@4
  (byte) main::i#7 ← phi( main::@4/(byte) main::i#6 )
  (number~) main::$1 ← (number) $28 + (byte) main::i#7
  (number~) main::$2 ← *((const nomodify to_nomodify byte*) BASIC + (byte) main::i#7) & (number) $3f
  *((const nomodify byte*) SCREEN + (number~) main::$1) ← (number~) main::$2
  (byte) main::i#3 ← ++ (byte) main::i#7
  to:main::@4
main::@return: scope:[main]  from main::@4
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const nomodify to_nomodify byte*) BASIC = (byte*)(number) $a004
(const to_nomodify byte*) MSG = (byte*) "hello world!"
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) main()
(bool~) main::$0
(number~) main::$1
(number~) main::$2
(bool~) main::$3
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6
(byte) main::i#7

Adding number conversion cast (unumber) 0 in (bool~) main::$3 ← (number) 0 != *((const to_nomodify byte*) MSG + (byte) main::i#4)
Adding number conversion cast (unumber) 0 in (byte) main::i#2 ← (number) 0
Adding number conversion cast (unumber) $28 in (number~) main::$1 ← (number) $28 + (byte) main::i#7
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (unumber)(number) $28 + (byte) main::i#7
Adding number conversion cast (unumber) $3f in (number~) main::$2 ← *((const nomodify to_nomodify byte*) BASIC + (byte) main::i#7) & (number) $3f
Adding number conversion cast (unumber) main::$2 in (number~) main::$2 ← *((const nomodify to_nomodify byte*) BASIC + (byte) main::i#7) & (unumber)(number) $3f
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) main::i#2 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 40964
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $3f
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $3f
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$1 ← (byte) $28 + (byte) main::i#7
Inferred type updated to byte in (unumber~) main::$2 ← *((const nomodify to_nomodify byte*) BASIC + (byte) main::i#7) & (byte) $3f
Alias main::i#4 = main::i#5 
Alias main::i#6 = main::i#7 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$3 [3] if((byte) 0!=*((const to_nomodify byte*) MSG + (byte) main::i#4)) goto main::@2
Simple Condition (bool~) main::$0 [9] if(*((const nomodify to_nomodify byte*) BASIC + (byte) main::i#6)!=(byte) '0') goto main::@5
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::i#0 = 0
Constant (const byte) main::i#2 = 0
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#2
Constant inlined main::i#0 = (byte) 0
Constant inlined main::i#2 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in assignment *(SCREEN+$28 + main::$1)
Successful SSA optimization Pass2ConstantAdditionElimination
Alias main::i#6 = main::$1 
Successful SSA optimization Pass2AliasElimination
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
CALL GRAPH
Calls in [] to main:2 

Created 2 initial phi equivalence classes
Coalesced [15] main::i#9 ← main::i#3
Coalesced [18] main::i#8 ← main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@3
Renumbering block main::@4 to main::@3
Renumbering block main::@5 to main::@4
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::i#4 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  [6] if((byte) 0!=*((const to_nomodify byte*) MSG + (byte) main::i#4)) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@4
  [7] (byte) main::i#6 ← phi( main::@1/(byte) 0 main::@4/(byte) main::i#3 )
  [8] if(*((const nomodify to_nomodify byte*) BASIC + (byte) main::i#6)!=(byte) '0') goto main::@4
  to:main::@return
main::@return: scope:[main]  from main::@3
  [9] return 
  to:@return
main::@4: scope:[main]  from main::@3
  [10] (byte~) main::$2 ← *((const nomodify to_nomodify byte*) BASIC + (byte) main::i#6) & (byte) $3f
  [11] *((const nomodify byte*) SCREEN+(byte) $28 + (byte) main::i#6) ← (byte~) main::$2
  [12] (byte) main::i#3 ← ++ (byte) main::i#6
  to:main::@3
main::@2: scope:[main]  from main::@1
  [13] *((const nomodify byte*) SCREEN + (byte) main::i#4) ← *((const to_nomodify byte*) MSG + (byte) main::i#4)
  [14] (byte) main::i#1 ← ++ (byte) main::i#4
  to:main::@1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$2 202.0
(byte) main::i
(byte) main::i#1 202.0
(byte) main::i#3 202.0
(byte) main::i#4 168.33333333333331
(byte) main::i#6 126.25

Initial phi equivalence classes
[ main::i#4 main::i#1 ]
[ main::i#6 main::i#3 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Complete equivalence classes
[ main::i#4 main::i#1 ]
[ main::i#6 main::i#3 ]
[ main::$2 ]
Allocated zp[1]:2 [ main::i#4 main::i#1 ]
Allocated zp[1]:3 [ main::i#6 main::i#3 ]
Allocated zp[1]:4 [ main::$2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test pointer to const and const pointer
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // Const pointer
  .label SCREEN = $400
  // Const pointer to const
  .label BASIC = $a004
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label __2 = 4
    .label i = 2
    .label i_1 = 3
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#4 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // [6] if((byte) 0!=*((const to_nomodify byte*) MSG + (byte) main::i#4)) goto main::@2 -- vbuc1_neq_pbuc2_derefidx_vbuz1_then_la1 
    lda #0
    ldy.z i
    cmp MSG,y
    bne __b2
    // [7] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    // [7] phi (byte) main::i#6 = (byte) 0 [phi:main::@1->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i_1
    jmp __b3
    // main::@3
  __b3:
    // [8] if(*((const nomodify to_nomodify byte*) BASIC + (byte) main::i#6)!=(byte) '0') goto main::@4 -- pbuc1_derefidx_vbuz1_neq_vbuc2_then_la1 
    lda #'0'
    ldy.z i_1
    cmp BASIC,y
    bne __b4
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
    // main::@4
  __b4:
    // [10] (byte~) main::$2 ← *((const nomodify to_nomodify byte*) BASIC + (byte) main::i#6) & (byte) $3f -- vbuz1=pbuc1_derefidx_vbuz2_band_vbuc2 
    lda #$3f
    ldy.z i_1
    and BASIC,y
    sta.z __2
    // [11] *((const nomodify byte*) SCREEN+(byte) $28 + (byte) main::i#6) ← (byte~) main::$2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __2
    ldy.z i_1
    sta SCREEN+$28,y
    // [12] (byte) main::i#3 ← ++ (byte) main::i#6 -- vbuz1=_inc_vbuz1 
    inc.z i_1
    // [7] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  __b3_from___b4:
    // [7] phi (byte) main::i#6 = (byte) main::i#3 [phi:main::@4->main::@3#0] -- register_copy 
    jmp __b3
    // main::@2
  __b2:
    // [13] *((const nomodify byte*) SCREEN + (byte) main::i#4) ← *((const to_nomodify byte*) MSG + (byte) main::i#4) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda MSG,y
    sta SCREEN,y
    // [14] (byte) main::i#1 ← ++ (byte) main::i#4 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [5] phi (byte) main::i#4 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  // Pointer to const
  MSG: .text "hello world!"
  .byte 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] if((byte) 0!=*((const to_nomodify byte*) MSG + (byte) main::i#4)) goto main::@2 [ main::i#4 ] ( main:2 [ main::i#4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#4 main::i#1 ]
Statement [8] if(*((const nomodify to_nomodify byte*) BASIC + (byte) main::i#6)!=(byte) '0') goto main::@4 [ main::i#6 ] ( main:2 [ main::i#6 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::i#6 main::i#3 ]
Statement [10] (byte~) main::$2 ← *((const nomodify to_nomodify byte*) BASIC + (byte) main::i#6) & (byte) $3f [ main::i#6 main::$2 ] ( main:2 [ main::i#6 main::$2 ] { }  ) always clobbers reg byte a 
Statement [13] *((const nomodify byte*) SCREEN + (byte) main::i#4) ← *((const to_nomodify byte*) MSG + (byte) main::i#4) [ main::i#4 ] ( main:2 [ main::i#4 ] { }  ) always clobbers reg byte a 
Statement [6] if((byte) 0!=*((const to_nomodify byte*) MSG + (byte) main::i#4)) goto main::@2 [ main::i#4 ] ( main:2 [ main::i#4 ] { }  ) always clobbers reg byte a 
Statement [8] if(*((const nomodify to_nomodify byte*) BASIC + (byte) main::i#6)!=(byte) '0') goto main::@4 [ main::i#6 ] ( main:2 [ main::i#6 ] { }  ) always clobbers reg byte a 
Statement [10] (byte~) main::$2 ← *((const nomodify to_nomodify byte*) BASIC + (byte) main::i#6) & (byte) $3f [ main::i#6 main::$2 ] ( main:2 [ main::i#6 main::$2 ] { }  ) always clobbers reg byte a 
Statement [13] *((const nomodify byte*) SCREEN + (byte) main::i#4) ← *((const to_nomodify byte*) MSG + (byte) main::i#4) [ main::i#4 ] ( main:2 [ main::i#4 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#4 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::i#6 main::i#3 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::$2 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 370.33: zp[1]:2 [ main::i#4 main::i#1 ] 328.25: zp[1]:3 [ main::i#6 main::i#3 ] 202: zp[1]:4 [ main::$2 ] 
Uplift Scope [] 

Uplifting [main] best 638 combination reg byte x [ main::i#4 main::i#1 ] reg byte x [ main::i#6 main::i#3 ] reg byte a [ main::$2 ] 
Uplifting [] best 638 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test pointer to const and const pointer
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // Const pointer
  .label SCREEN = $400
  // Const pointer to const
  .label BASIC = $a004
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#4 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // main::@1
  __b1:
    // [6] if((byte) 0!=*((const to_nomodify byte*) MSG + (byte) main::i#4)) goto main::@2 -- vbuc1_neq_pbuc2_derefidx_vbuxx_then_la1 
    lda MSG,x
    cmp #0
    bne __b2
    // [7] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    // [7] phi (byte) main::i#6 = (byte) 0 [phi:main::@1->main::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // main::@3
  __b3:
    // [8] if(*((const nomodify to_nomodify byte*) BASIC + (byte) main::i#6)!=(byte) '0') goto main::@4 -- pbuc1_derefidx_vbuxx_neq_vbuc2_then_la1 
    lda BASIC,x
    cmp #'0'
    bne __b4
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
    // main::@4
  __b4:
    // [10] (byte~) main::$2 ← *((const nomodify to_nomodify byte*) BASIC + (byte) main::i#6) & (byte) $3f -- vbuaa=pbuc1_derefidx_vbuxx_band_vbuc2 
    lda #$3f
    and BASIC,x
    // [11] *((const nomodify byte*) SCREEN+(byte) $28 + (byte) main::i#6) ← (byte~) main::$2 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+$28,x
    // [12] (byte) main::i#3 ← ++ (byte) main::i#6 -- vbuxx=_inc_vbuxx 
    inx
    // [7] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
  __b3_from___b4:
    // [7] phi (byte) main::i#6 = (byte) main::i#3 [phi:main::@4->main::@3#0] -- register_copy 
    jmp __b3
    // main::@2
  __b2:
    // [13] *((const nomodify byte*) SCREEN + (byte) main::i#4) ← *((const to_nomodify byte*) MSG + (byte) main::i#4) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MSG,x
    sta SCREEN,x
    // [14] (byte) main::i#1 ← ++ (byte) main::i#4 -- vbuxx=_inc_vbuxx 
    inx
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [5] phi (byte) main::i#4 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  // Pointer to const
  MSG: .text "hello world!"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bbegin:
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __b3_from___b1:
Removing instruction __breturn:
Removing instruction __b3_from___b4:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const nomodify to_nomodify byte*) BASIC = (byte*) 40964
(const to_nomodify byte*) MSG = (byte*) "hello world!"
(const nomodify byte*) SCREEN = (byte*) 1024
(void()) main()
(byte~) main::$2 reg byte a 202.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 202.0
(byte) main::i#3 reg byte x 202.0
(byte) main::i#4 reg byte x 168.33333333333331
(byte) main::i#6 reg byte x 126.25

reg byte x [ main::i#4 main::i#1 ]
reg byte x [ main::i#6 main::i#3 ]
reg byte a [ main::$2 ]


FINAL ASSEMBLER
Score: 536

  // File Comments
// Test pointer to const and const pointer
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // Const pointer
  .label SCREEN = $400
  // Const pointer to const
  .label BASIC = $a004
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::i#4 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // main::@1
  __b1:
    // while(MSG[i])
    // [6] if((byte) 0!=*((const to_nomodify byte*) MSG + (byte) main::i#4)) goto main::@2 -- vbuc1_neq_pbuc2_derefidx_vbuxx_then_la1 
    lda MSG,x
    cmp #0
    bne __b2
    // [7] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // [7] phi (byte) main::i#6 = (byte) 0 [phi:main::@1->main::@3#0] -- vbuxx=vbuc1 
    ldx #0
    // main::@3
  __b3:
    // while(BASIC[i]!='0')
    // [8] if(*((const nomodify to_nomodify byte*) BASIC + (byte) main::i#6)!=(byte) '0') goto main::@4 -- pbuc1_derefidx_vbuxx_neq_vbuc2_then_la1 
    lda BASIC,x
    cmp #'0'
    bne __b4
    // main::@return
    // }
    // [9] return 
    rts
    // main::@4
  __b4:
    // BASIC[i]&0x3f
    // [10] (byte~) main::$2 ← *((const nomodify to_nomodify byte*) BASIC + (byte) main::i#6) & (byte) $3f -- vbuaa=pbuc1_derefidx_vbuxx_band_vbuc2 
    lda #$3f
    and BASIC,x
    // SCREEN[40+i] = BASIC[i]&0x3f
    // [11] *((const nomodify byte*) SCREEN+(byte) $28 + (byte) main::i#6) ← (byte~) main::$2 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+$28,x
    // i++;
    // [12] (byte) main::i#3 ← ++ (byte) main::i#6 -- vbuxx=_inc_vbuxx 
    inx
    // [7] phi from main::@4 to main::@3 [phi:main::@4->main::@3]
    // [7] phi (byte) main::i#6 = (byte) main::i#3 [phi:main::@4->main::@3#0] -- register_copy 
    jmp __b3
    // main::@2
  __b2:
    // SCREEN[i] = MSG[i]
    // [13] *((const nomodify byte*) SCREEN + (byte) main::i#4) ← *((const to_nomodify byte*) MSG + (byte) main::i#4) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MSG,x
    sta SCREEN,x
    // i++;
    // [14] (byte) main::i#1 ← ++ (byte) main::i#4 -- vbuxx=_inc_vbuxx 
    inx
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [5] phi (byte) main::i#4 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  // Pointer to const
  MSG: .text "hello world!"
  .byte 0

