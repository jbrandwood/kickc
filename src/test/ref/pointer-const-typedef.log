Identified constant variable (byte*) pc1
Identified constant variable (byte*) pc2
Identified constant variable (byte*) cp1
Identified constant variable (byte*) SCREEN

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte) main::idx#0 ← (byte) 0
  *((const byte*) SCREEN + (byte) main::idx#0) ← *((const byte*) pc0)
  (byte) main::idx#1 ← ++ (byte) main::idx#0
  *((const byte*) SCREEN + (byte) main::idx#1) ← *((const byte*) pc1)
  (byte) main::idx#2 ← ++ (byte) main::idx#1
  *((const byte*) SCREEN + (byte) main::idx#2) ← *((const byte*) pc2)
  (byte) main::idx#3 ← ++ (byte) main::idx#2
  *((const byte*) SCREEN + (byte) main::idx#3) ← *((const byte*) cp0)
  (byte) main::idx#4 ← ++ (byte) main::idx#3
  *((const byte*) SCREEN + (byte) main::idx#4) ← *((const byte*) cp1)
  (byte) main::idx#5 ← ++ (byte) main::idx#4
  *((const byte*) SCREEN + (byte) main::idx#5) ← *((const byte*) cp2)
  (byte) main::idx#6 ← ++ (byte) main::idx#5
  *((const byte*) SCREEN + (byte) main::idx#6) ← *((const byte*) cpc0)
  (byte) main::idx#7 ← ++ (byte) main::idx#6
  *((const byte*) SCREEN + (byte) main::idx#7) ← *((const byte*) cpc1)
  (byte) main::idx#8 ← ++ (byte) main::idx#7
  *((const byte*) SCREEN + (byte) main::idx#8) ← *((const byte*) cpc2)
  (byte) main::idx#9 ← ++ (byte) main::idx#8
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte*) SCREEN = (byte*)(number) $400
(const byte*) cp0 = (byte*)(number) $400
(const byte*) cp1 = (byte*)(number) $400
(const byte*) cp2 = (byte*)(number) $400
(const byte*) cpc0 = (byte*)(number) $400
(const byte*) cpc1 = (byte*)(number) $400
(const byte*) cpc2 = (byte*)(number) $400
(void()) main()
(label) main::@return
(byte) main::idx
(byte) main::idx#0
(byte) main::idx#1
(byte) main::idx#2
(byte) main::idx#3
(byte) main::idx#4
(byte) main::idx#5
(byte) main::idx#6
(byte) main::idx#7
(byte) main::idx#8
(byte) main::idx#9
(const byte*) pc0 = (byte*)(number) $400
(const byte*) pc1 = (byte*)(number) $400
(const byte*) pc2 = (byte*)(number) $400

Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Constant (const byte) main::idx#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN in [1] *((const byte*) SCREEN + (const byte) main::idx#0) ← *((const byte*) pc0)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte) main::idx#9 and assignment [17] (byte) main::idx#9 ← ++ (byte) main::idx#8
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [1] (byte) main::idx#1 ← ++ (const byte) main::idx#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#1 = ++main::idx#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [2] (byte) main::idx#2 ← ++ (const byte) main::idx#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#2 = ++main::idx#1
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [3] (byte) main::idx#3 ← ++ (const byte) main::idx#2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#3 = ++main::idx#2
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [4] (byte) main::idx#4 ← ++ (const byte) main::idx#3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#4 = ++main::idx#3
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [5] (byte) main::idx#5 ← ++ (const byte) main::idx#4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#5 = ++main::idx#4
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [6] (byte) main::idx#6 ← ++ (const byte) main::idx#5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#6 = ++main::idx#5
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [7] (byte) main::idx#7 ← ++ (const byte) main::idx#6
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#7 = ++main::idx#6
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [8] (byte) main::idx#8 ← ++ (const byte) main::idx#7
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#8 = ++main::idx#7
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings (const byte) main::idx#0
Inlining constant with different constant siblings (const byte) main::idx#1
Inlining constant with different constant siblings (const byte) main::idx#2
Inlining constant with different constant siblings (const byte) main::idx#3
Inlining constant with different constant siblings (const byte) main::idx#4
Inlining constant with different constant siblings (const byte) main::idx#5
Inlining constant with different constant siblings (const byte) main::idx#6
Inlining constant with different constant siblings (const byte) main::idx#7
Inlining constant with different constant siblings (const byte) main::idx#8
Constant inlined main::idx#0 = (byte) 0
Constant inlined main::idx#1 = ++(byte) 0
Constant inlined main::idx#2 = ++++(byte) 0
Constant inlined main::idx#3 = ++++++(byte) 0
Constant inlined main::idx#4 = ++++++++(byte) 0
Constant inlined main::idx#5 = ++++++++++(byte) 0
Constant inlined main::idx#6 = ++++++++++++(byte) 0
Constant inlined main::idx#7 = ++++++++++++++(byte) 0
Constant inlined main::idx#8 = ++++++++++++++++(byte) 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN+++0)
Consolidated array index constant in *(SCREEN+++++0)
Consolidated array index constant in *(SCREEN+++++++0)
Consolidated array index constant in *(SCREEN+++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++0)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Simplifying constant integer increment ++7
Successful SSA optimization Pass2ConstantSimplification
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((const byte*) SCREEN) ← *((const byte*) pc0)
  [5] *((const byte*) SCREEN+(byte) 1) ← *((const byte*) pc1)
  [6] *((const byte*) SCREEN+(byte) 2) ← *((const byte*) pc2)
  [7] *((const byte*) SCREEN+(byte) 3) ← *((const byte*) cp0)
  [8] *((const byte*) SCREEN+(byte) 4) ← *((const byte*) cp1)
  [9] *((const byte*) SCREEN+(byte) 5) ← *((const byte*) cp2)
  [10] *((const byte*) SCREEN+(byte) 6) ← *((const byte*) cpc0)
  [11] *((const byte*) SCREEN+(byte) 7) ← *((const byte*) cpc1)
  [12] *((const byte*) SCREEN+(byte) 8) ← *((const byte*) cpc2)
  to:main::@return
main::@return: scope:[main]  from main
  [13] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::idx

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test pointer to const and const pointer combined with typedef
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // Pointer to const
  .label pc0 = $400
  // Const pointer
  .label cp0 = $400
  .label cp2 = $400
  // Const pointer to const
  .label cpc0 = $400
  .label cpc1 = $400
  .label cpc2 = $400
  .label pc1 = $400
  .label pc2 = $400
  .label cp1 = $400
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [4] *((const byte*) SCREEN) ← *((const byte*) pc0) -- _deref_pbuc1=_deref_pbuc2 
    lda pc0
    sta SCREEN
    // [5] *((const byte*) SCREEN+(byte) 1) ← *((const byte*) pc1) -- _deref_pbuc1=_deref_pbuc2 
    lda pc1
    sta SCREEN+1
    // [6] *((const byte*) SCREEN+(byte) 2) ← *((const byte*) pc2) -- _deref_pbuc1=_deref_pbuc2 
    lda pc2
    sta SCREEN+2
    // [7] *((const byte*) SCREEN+(byte) 3) ← *((const byte*) cp0) -- _deref_pbuc1=_deref_pbuc2 
    lda cp0
    sta SCREEN+3
    // [8] *((const byte*) SCREEN+(byte) 4) ← *((const byte*) cp1) -- _deref_pbuc1=_deref_pbuc2 
    lda cp1
    sta SCREEN+4
    // [9] *((const byte*) SCREEN+(byte) 5) ← *((const byte*) cp2) -- _deref_pbuc1=_deref_pbuc2 
    lda cp2
    sta SCREEN+5
    // [10] *((const byte*) SCREEN+(byte) 6) ← *((const byte*) cpc0) -- _deref_pbuc1=_deref_pbuc2 
    lda cpc0
    sta SCREEN+6
    // [11] *((const byte*) SCREEN+(byte) 7) ← *((const byte*) cpc1) -- _deref_pbuc1=_deref_pbuc2 
    lda cpc1
    sta SCREEN+7
    // [12] *((const byte*) SCREEN+(byte) 8) ← *((const byte*) cpc2) -- _deref_pbuc1=_deref_pbuc2 
    lda cpc2
    sta SCREEN+8
    jmp __breturn
    // main::@return
  __breturn:
    // [13] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) SCREEN) ← *((const byte*) pc0) [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [5] *((const byte*) SCREEN+(byte) 1) ← *((const byte*) pc1) [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [6] *((const byte*) SCREEN+(byte) 2) ← *((const byte*) pc2) [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [7] *((const byte*) SCREEN+(byte) 3) ← *((const byte*) cp0) [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [8] *((const byte*) SCREEN+(byte) 4) ← *((const byte*) cp1) [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [9] *((const byte*) SCREEN+(byte) 5) ← *((const byte*) cp2) [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [10] *((const byte*) SCREEN+(byte) 6) ← *((const byte*) cpc0) [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [11] *((const byte*) SCREEN+(byte) 7) ← *((const byte*) cpc1) [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [12] *((const byte*) SCREEN+(byte) 8) ← *((const byte*) cpc2) [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 93 combination 
Uplifting [] best 93 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test pointer to const and const pointer combined with typedef
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // Pointer to const
  .label pc0 = $400
  // Const pointer
  .label cp0 = $400
  .label cp2 = $400
  // Const pointer to const
  .label cpc0 = $400
  .label cpc1 = $400
  .label cpc2 = $400
  .label pc1 = $400
  .label pc2 = $400
  .label cp1 = $400
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [4] *((const byte*) SCREEN) ← *((const byte*) pc0) -- _deref_pbuc1=_deref_pbuc2 
    lda pc0
    sta SCREEN
    // [5] *((const byte*) SCREEN+(byte) 1) ← *((const byte*) pc1) -- _deref_pbuc1=_deref_pbuc2 
    lda pc1
    sta SCREEN+1
    // [6] *((const byte*) SCREEN+(byte) 2) ← *((const byte*) pc2) -- _deref_pbuc1=_deref_pbuc2 
    lda pc2
    sta SCREEN+2
    // [7] *((const byte*) SCREEN+(byte) 3) ← *((const byte*) cp0) -- _deref_pbuc1=_deref_pbuc2 
    lda cp0
    sta SCREEN+3
    // [8] *((const byte*) SCREEN+(byte) 4) ← *((const byte*) cp1) -- _deref_pbuc1=_deref_pbuc2 
    lda cp1
    sta SCREEN+4
    // [9] *((const byte*) SCREEN+(byte) 5) ← *((const byte*) cp2) -- _deref_pbuc1=_deref_pbuc2 
    lda cp2
    sta SCREEN+5
    // [10] *((const byte*) SCREEN+(byte) 6) ← *((const byte*) cpc0) -- _deref_pbuc1=_deref_pbuc2 
    lda cpc0
    sta SCREEN+6
    // [11] *((const byte*) SCREEN+(byte) 7) ← *((const byte*) cpc1) -- _deref_pbuc1=_deref_pbuc2 
    lda cpc1
    sta SCREEN+7
    // [12] *((const byte*) SCREEN+(byte) 8) ← *((const byte*) cpc2) -- _deref_pbuc1=_deref_pbuc2 
    lda cpc2
    sta SCREEN+8
    jmp __breturn
    // main::@return
  __breturn:
    // [13] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte*) SCREEN = (byte*) 1024
(const byte*) cp0 = (byte*) 1024
(const byte*) cp1 = (byte*) 1024
(const byte*) cp2 = (byte*) 1024
(const byte*) cpc0 = (byte*) 1024
(const byte*) cpc1 = (byte*) 1024
(const byte*) cpc2 = (byte*) 1024
(void()) main()
(label) main::@return
(byte) main::idx
(const byte*) pc0 = (byte*) 1024
(const byte*) pc1 = (byte*) 1024
(const byte*) pc2 = (byte*) 1024



FINAL ASSEMBLER
Score: 78

  // File Comments
// Test pointer to const and const pointer combined with typedef
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // Pointer to const
  .label pc0 = $400
  // Const pointer
  .label cp0 = $400
  .label cp2 = $400
  // Const pointer to const
  .label cpc0 = $400
  .label cpc1 = $400
  .label cpc2 = $400
  .label pc1 = $400
  .label pc2 = $400
  .label cp1 = $400
  .label SCREEN = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // SCREEN[idx++] = *pc0
    // [4] *((const byte*) SCREEN) ← *((const byte*) pc0) -- _deref_pbuc1=_deref_pbuc2 
    lda pc0
    sta SCREEN
    // SCREEN[idx++] = *pc1
    // [5] *((const byte*) SCREEN+(byte) 1) ← *((const byte*) pc1) -- _deref_pbuc1=_deref_pbuc2 
    lda pc1
    sta SCREEN+1
    // SCREEN[idx++] = *pc2
    // [6] *((const byte*) SCREEN+(byte) 2) ← *((const byte*) pc2) -- _deref_pbuc1=_deref_pbuc2 
    lda pc2
    sta SCREEN+2
    // SCREEN[idx++] = *cp0
    // [7] *((const byte*) SCREEN+(byte) 3) ← *((const byte*) cp0) -- _deref_pbuc1=_deref_pbuc2 
    lda cp0
    sta SCREEN+3
    // SCREEN[idx++] = *cp1
    // [8] *((const byte*) SCREEN+(byte) 4) ← *((const byte*) cp1) -- _deref_pbuc1=_deref_pbuc2 
    lda cp1
    sta SCREEN+4
    // SCREEN[idx++] = *cp2
    // [9] *((const byte*) SCREEN+(byte) 5) ← *((const byte*) cp2) -- _deref_pbuc1=_deref_pbuc2 
    lda cp2
    sta SCREEN+5
    // SCREEN[idx++] = *cpc0
    // [10] *((const byte*) SCREEN+(byte) 6) ← *((const byte*) cpc0) -- _deref_pbuc1=_deref_pbuc2 
    lda cpc0
    sta SCREEN+6
    // SCREEN[idx++] = *cpc1
    // [11] *((const byte*) SCREEN+(byte) 7) ← *((const byte*) cpc1) -- _deref_pbuc1=_deref_pbuc2 
    lda cpc1
    sta SCREEN+7
    // SCREEN[idx++] = *cpc2
    // [12] *((const byte*) SCREEN+(byte) 8) ← *((const byte*) cpc2) -- _deref_pbuc1=_deref_pbuc2 
    lda cpc2
    sta SCREEN+8
    // main::@return
    // }
    // [13] return 
    rts
}
  // File Data

