const nomodify byte* COLORRAM = (byte*) 55296
const nomodify byte* DEFAULT_SCREEN = (byte*) 1024
const byte* DIGITS[]  = "0123456789abcdef"z
const nomodify byte LIGHT_BLUE = $e
const byte OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const word* RADIX_DECIMAL_VALUES[]  = { $2710, $3e8, $64, $a }
const nomodify byte* SCREEN = (byte*) 1024
const byte SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
void __start()
byte conio_cursor_x loadstore zp[1]:9 340911.5681818182
byte conio_cursor_y loadstore zp[1]:10 5333335.133333334
byte* conio_line_color loadstore zp[2]:13 3810346.6896551726
byte* conio_line_text loadstore zp[2]:11 3745764.5423728814
void cputc(byte cputc::c)
byte cputc::c
byte cputc::c#0 reg byte a 200002.0
byte cputc::c#2 reg byte a 2002.0
byte cputc::c#3 reg byte a 1050502.0
void cputln()
void cputs(to_nomodify byte* cputs::s)
byte cputs::c
byte cputs::c#1 reg byte a 100001.0
to_nomodify byte* cputs::s
to_nomodify byte* cputs::s#0 s zp[2]:7 50000.5
to_nomodify byte* cputs::s#3 s zp[2]:7 155002.0
to_nomodify byte* cputs::s#4 s zp[2]:7 10001.0
void cscroll()
void gotoxy(byte gotoxy::x , byte gotoxy::y)
word gotoxy::line_offset
byte gotoxy::x
const byte gotoxy::x#2 x = 0
byte gotoxy::y
const byte gotoxy::y#2 y = 0
void main()
signed word~ main::$10 zp[2]:4 2002.0
signed byte~ main::$5 reg byte a 2002.0
signed byte~ main::$7 reg byte a 2002.0
signed word~ main::$9 zp[2]:16 400.4
word main::count
word main::count#1 count zp[2]:2 2002.0
word main::count#10 count zp[2]:2 178.05555555555557
word main::count#11 count zp[2]:2 53.25
word main::count#12 count zp[2]:2 1001.0
signed word main::dist_sq
signed word main::dist_sq#0 dist_sq zp[2]:16 2002.0
const byte* main::s[7]  = " chars"
byte* main::sc
byte* main::sc#1 sc zp[2]:11 1001.0
byte* main::sc#10 sc zp[2]:11 160.25
byte* main::sc#8 sc zp[2]:11 101.0
signed byte main::x
signed byte main::x#1 x zp[1]:10 2002.0
signed byte main::x#2 x zp[1]:10 200.2
signed byte main::xd
signed byte main::xd#0 reg byte x 750.75
signed byte main::y
signed byte main::y#1 y zp[1]:9 202.0
signed byte main::y#2 y zp[1]:9 56.69565217391305
signed byte main::yd
signed byte main::yd#0 yd zp[1]:15 500.5
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
void* memcpy::destination#2 destination zp[2]:18
byte* memcpy::dst
byte* memcpy::dst#1 dst zp[2]:18 1.00000000001E11
byte* memcpy::dst#2 dst zp[2]:18 1.0033333333466667E11
byte* memcpy::dst#4 dst zp[2]:18 2.000000002E9
word memcpy::num
void* memcpy::return
void* memcpy::source
void* memcpy::source#2 source zp[2]:16
byte* memcpy::src
byte* memcpy::src#1 src zp[2]:16 2.00000000002E11
byte* memcpy::src#2 src zp[2]:16 1.0025000000125E11
byte* memcpy::src#4 src zp[2]:16 1.000000001E9
byte* memcpy::src_end
byte* memcpy::src_end#0 src_end zp[2]:20 1.262500000025E10
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#5 reg byte x 1.250000000125E9
byte* memset::dst
byte* memset::dst#1 dst zp[2]:16 2.0000000002E10
byte* memset::dst#2 dst zp[2]:16 1.3666666668333332E10
byte* memset::dst#4 dst zp[2]:16 2.000000002E9
byte* memset::end
byte* memset::end#0 end zp[2]:4 1.8333333336666665E9
word memset::num
word memset::num#3 num zp[2]:4 1.000000001E9
void* memset::return
void* memset::str
void* memset::str#4 str zp[2]:16
signed word mul8s(signed byte mul8s::a , signed byte mul8s::b)
byte~ mul8s::$11 reg byte a 20002.0
byte~ mul8s::$12 reg byte a 20002.0
byte~ mul8s::$6 reg byte a 20002.0
byte~ mul8s::$9 reg byte a 20002.0
signed byte mul8s::a
signed byte mul8s::a#0 a zp[1]:6 1001.0
signed byte mul8s::a#1 a zp[1]:6 1001.0
signed byte mul8s::a#2 a zp[1]:6 923.3076923076923
signed byte mul8s::b
signed byte mul8s::b#0 reg byte y 2002.0
signed byte mul8s::b#1 reg byte y 2002.0
signed byte mul8s::b#2 reg byte y 1091.181818181818
word mul8s::m
word mul8s::m#0 m zp[2]:4 10001.0
word mul8s::m#1 m zp[2]:4 20002.0
word mul8s::m#2 m zp[2]:4 20002.0
word mul8s::m#4 m zp[2]:4 5000.5
word mul8s::m#5 m zp[2]:4 12501.25
signed word mul8s::return
word mul8u(byte mul8u::a , byte mul8u::b)
byte~ mul8u::$1 reg byte a 2.00000002E8
byte mul8u::a
byte mul8u::a#0 reg byte x 1.00000001E8
byte mul8u::a#1 reg byte x 36667.33333333333
byte mul8u::a#2 reg byte x 6.668333416666667E7
byte mul8u::b
byte mul8u::b#0 reg byte a 10001.0
word mul8u::mb
word mul8u::mb#0 mb zp[2]:7 200002.0
word mul8u::mb#1 mb zp[2]:7 2.00000002E8
word mul8u::mb#2 mb zp[2]:7 4.287142914285715E7
word mul8u::res
word mul8u::res#1 res zp[2]:4 2.00000002E8
word mul8u::res#2 res zp[2]:4 5.0001667333333336E7
word mul8u::res#6 res zp[2]:4 1.00000001E8
word mul8u::return
word mul8u::return#2 return zp[2]:4 20002.0
struct printf_buffer_number printf_buffer loadstore mem[12] = {}
void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
struct printf_buffer_number printf_number_buffer::buffer
byte* printf_number_buffer::buffer_digits
const byte* printf_number_buffer::buffer_digits#0 buffer_digits = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
byte printf_number_buffer::buffer_sign
byte printf_number_buffer::buffer_sign#0 reg byte a 701.0
struct printf_format_number printf_number_buffer::format
byte printf_number_buffer::format_justify_left
byte printf_number_buffer::format_min_length
byte printf_number_buffer::format_radix
byte printf_number_buffer::format_sign_always
byte printf_number_buffer::format_upper_case
byte printf_number_buffer::format_zero_padding
signed byte printf_number_buffer::len
signed byte printf_number_buffer::padding
void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
struct printf_format_number printf_uint::format
byte printf_uint::format_justify_left
byte printf_uint::format_min_length
byte printf_uint::format_radix
byte printf_uint::format_sign_always
byte printf_uint::format_upper_case
byte printf_uint::format_zero_padding
word printf_uint::uvalue
word printf_uint::uvalue#0 uvalue zp[2]:2 37.33333333333333
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
byte~ utoa::$10 reg byte a 20002.0
byte~ utoa::$11 reg byte a 2002.0
byte* utoa::buffer
byte* utoa::buffer#11 buffer zp[2]:16 3000.4285714285716
byte* utoa::buffer#14 buffer zp[2]:16 15001.5
byte* utoa::buffer#3 buffer zp[2]:16 2002.0
byte* utoa::buffer#4 buffer zp[2]:16 20002.0
byte utoa::digit
byte utoa::digit#1 digit zp[1]:6 20002.0
byte utoa::digit#2 digit zp[1]:6 2857.4285714285716
word utoa::digit_value
word utoa::digit_value#0 digit_value zp[2]:18 6000.6
word* utoa::digit_values
byte utoa::max_digits
const byte utoa::max_digits#1 max_digits = 5
byte utoa::radix
byte utoa::started
byte utoa::started#2 reg byte x 5000.5
byte utoa::started#4 reg byte x 10001.0
word utoa::value
word utoa::value#0 value zp[2]:2 10001.0
word utoa::value#1 value zp[2]:2 551.0
word utoa::value#2 value zp[2]:2 5857.857142857143
word utoa::value#6 value zp[2]:2 15001.5
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
byte* utoa_append::buffer
byte* utoa_append::buffer#0 buffer zp[2]:16 13750.25
byte utoa_append::digit
byte utoa_append::digit#1 reg byte x 1.0000001E7
byte utoa_append::digit#2 reg byte x 1.00500015E7
word utoa_append::return
word utoa_append::return#0 return zp[2]:2 20002.0
word utoa_append::sub
word utoa_append::sub#0 sub zp[2]:18 3335000.5
word utoa_append::value
word utoa_append::value#0 value zp[2]:2 36667.33333333333
word utoa_append::value#1 value zp[2]:2 2.0000002E7
word utoa_append::value#2 value zp[2]:2 5018334.166666666

zp[2]:2 [ main::count#11 main::count#10 main::count#12 main::count#1 printf_uint::uvalue#0 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 ]
reg byte x [ memset::c#5 ]
reg byte y [ mul8s::b#2 mul8s::b#1 mul8s::b#0 ]
zp[2]:4 [ mul8s::m#4 mul8s::m#5 mul8s::m#1 mul8s::m#0 mul8s::m#2 main::$10 mul8u::return#2 mul8u::res#2 mul8u::res#6 mul8u::res#1 memset::num#3 memset::end#0 ]
zp[1]:6 [ utoa::digit#2 utoa::digit#1 mul8s::a#2 mul8s::a#1 mul8s::a#0 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
reg byte a [ cputc::c#3 cputc::c#0 cputc::c#2 ]
reg byte x [ mul8u::a#2 mul8u::a#1 mul8u::a#0 ]
zp[2]:7 [ mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 cputs::s#3 cputs::s#4 cputs::s#0 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
zp[1]:9 [ conio_cursor_x main::y#2 main::y#1 ]
zp[1]:10 [ conio_cursor_y main::x#2 main::x#1 ]
zp[2]:11 [ conio_line_text main::sc#8 main::sc#10 main::sc#1 ]
zp[2]:13 [ conio_line_color ]
reg byte a [ main::$5 ]
reg byte x [ main::xd#0 ]
reg byte a [ main::$7 ]
zp[1]:15 [ main::yd#0 ]
zp[2]:16 [ main::$9 main::dist_sq#0 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 memset::str#4 memset::dst#2 memset::dst#4 memset::dst#1 ]
reg byte a [ printf_number_buffer::buffer_sign#0 ]
reg byte a [ cputs::c#1 ]
reg byte a [ mul8u::b#0 ]
reg byte a [ mul8s::$6 ]
reg byte a [ mul8s::$11 ]
reg byte a [ mul8s::$9 ]
reg byte a [ mul8s::$12 ]
reg byte a [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:18 [ utoa::digit_value#0 utoa_append::sub#0 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
reg byte a [ mul8u::$1 ]
zp[2]:20 [ memcpy::src_end#0 ]
mem[12] [ printf_buffer ]
