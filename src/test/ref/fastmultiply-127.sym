const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
void main()
const byte* main::str[9]  = "unsigned"
const byte* main::str1[7]  = "signed"
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
const byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:6 2002.0
byte* memset::dst#2 dst zp[2]:6 1334.6666666666667
byte* memset::end
const byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
const word memset::num#0 num = $3e8
void* memset::return
void* memset::str
const void* memset::str#0 str = (void*)print_screen#0
const byte* mulf127_sqr1_hi[$200]  = kickasm {{ .fill 512, >round((i/127*i/127)*127/4)  }}
const byte* mulf127_sqr1_lo[$200]  = kickasm {{ .fill 512, <round((i/127*i/127)*127/4)  }}
const byte* mulf127_sqr2_hi[$200]  = kickasm {{ .fill 512, >round(((i-255)/127*(i-255)/127)*127/4)  }}
const byte* mulf127_sqr2_lo[$200]  = kickasm {{ .fill 512, <round(((i-255)/127*(i-255)/127)*127/4)  }}
signed word mulf8s127(signed byte mulf8s127::a , signed byte mulf8s127::b)
signed word~ mulf8s127::$10 zp[2]:10 202.0
signed word~ mulf8s127::$11 zp[2]:8 202.0
signed word~ mulf8s127::$12 zp[2]:10 202.0
signed word~ mulf8s127::$9 zp[2]:8 202.0
signed byte mulf8s127::a
signed byte mulf8s127::a#0 a zp[1]:4 11.833333333333332
signed byte mulf8s127::b
signed byte mulf8s127::b#0 reg byte y 11.833333333333332
signed word mulf8s127::c
word mulf8s127::c#0 c zp[2]:6 25.25
signed word mulf8s127::c#1 c zp[2]:6 202.0
signed word mulf8s127::c#11 c zp[2]:6 202.0
signed word mulf8s127::c#2 c zp[2]:6 202.0
signed word mulf8s127::c#3 c zp[2]:6 202.0
signed word mulf8s127::c#5 c zp[2]:6 101.0
signed word mulf8s127::c#7 c zp[2]:6 134.66666666666666
signed word mulf8s127::return
signed word mulf8s127::return#0 return zp[2]:6 22.0
signed word mulf8s127::return#1 return zp[2]:6 71.0
word mulf8u127(byte mulf8u127::a , byte mulf8u127::b)
byte mulf8u127::a
byte mulf8u127::a#0 reg byte x 11.0
byte mulf8u127::a#1 reg byte x 101.0
byte mulf8u127::a#2 reg byte x 1113.0
byte mulf8u127::b
byte mulf8u127::b#0 reg byte a 22.0
byte mulf8u127::b#1 reg byte a 202.0
byte mulf8u127::b#2 reg byte a 556.5
const nomodify byte* mulf8u127::memA = (byte*) 252
const nomodify byte* mulf8u127::memB = (byte*) 253
const nomodify word* mulf8u127::res = (word*) 254
const nomodify byte* mulf8u127::resH = (byte*) 255
const nomodify byte* mulf8u127::resL = (byte*) 254
word mulf8u127::return
word mulf8u127::return#0 return zp[2]:6 22.0
word mulf8u127::return#1 return zp[2]:6 278.25
word mulf8u127::return#3 return zp[2]:6 202.0
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 202.0
byte print_char::ch#11 reg byte a 120104.0
byte print_char::ch#5 reg byte a 20002.0
byte print_char::ch#6 reg byte a 20002.0
byte* print_char_cursor
byte* print_char_cursor#1 print_char_cursor zp[2]:8 27.125
byte* print_char_cursor#126 print_char_cursor zp[2]:8 256.75
byte* print_char_cursor#130 print_char_cursor zp[2]:8 56.0
byte* print_char_cursor#134 print_char_cursor zp[2]:8 4041.999999999999
byte* print_char_cursor#139 print_char_cursor zp[2]:8 13.0
byte* print_char_cursor#144 print_char_cursor zp[2]:8 4.0
byte* print_char_cursor#151 print_char_cursor zp[2]:8 22.0
byte* print_char_cursor#153 print_char_cursor zp[2]:8 22.0
byte* print_char_cursor#18 print_char_cursor zp[2]:8 2163.3846153846152
byte* print_char_cursor#81 print_char_cursor zp[2]:8 110276.5
void print_cls()
const to_nomodify byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_line_cursor#0 print_line_cursor zp[2]:2 36.759036144578324
byte* print_line_cursor#33 print_line_cursor zp[2]:2 2103.0
byte* print_line_cursor#65 print_line_cursor zp[2]:2 125.0
void print_ln()
void print_mulf8s127(signed byte print_mulf8s127::a , signed byte print_mulf8s127::b)
signed byte print_mulf8s127::a
signed byte print_mulf8s127::a#10 a zp[1]:4 3.6666666666666665
signed byte print_mulf8s127::b
signed byte print_mulf8s127::b#10 b zp[1]:5 2.0
signed word print_mulf8s127::c
signed word print_mulf8s127::c#0 c zp[2]:6 2.2
void print_mulf8u127(byte print_mulf8u127::a , byte print_mulf8u127::b)
byte print_mulf8u127::a
byte print_mulf8u127::a#8 reg byte y 3.6666666666666665
byte print_mulf8u127::b
byte print_mulf8u127::b#10 b zp[1]:4 2.0
word print_mulf8u127::c
word print_mulf8u127::c#0 c zp[2]:6 2.2
void print_schar(signed byte print_schar::b)
signed byte print_schar::b
signed byte print_schar::b#0 reg byte x 202.0
signed byte print_schar::b#1 reg byte x 11.0
signed byte print_schar::b#2 reg byte x 22.0
signed byte print_schar::b#3 reg byte x 54.16666666666666
signed byte print_schar::b#5 reg byte x 202.0
byte* print_screen
const byte* print_screen#0 print_screen = (byte*) 1024
void print_sint(signed word print_sint::w)
signed word print_sint::w
signed word print_sint::w#0 w zp[2]:6 202.0
signed word print_sint::w#1 w zp[2]:6 52.33333333333333
signed word print_sint::w#4 w zp[2]:6 202.0
void print_str(byte* print_str::str)
byte* print_str::str
byte* print_str::str#0 str zp[2]:6 202.0
byte* print_str::str#3 str zp[2]:6 103.75
byte* print_str::str#6 str zp[2]:6 11.0
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 20002.0
byte~ print_uchar::$2 reg byte x 20002.0
byte print_uchar::b
byte print_uchar::b#0 reg byte x 202.0
byte print_uchar::b#1 reg byte x 2002.0
byte print_uchar::b#2 reg byte x 2002.0
byte print_uchar::b#3 reg byte x 11.0
byte print_uchar::b#4 reg byte x 22.0
byte print_uchar::b#5 reg byte x 5531.75
void print_uint(word print_uint::w)
word print_uint::w
word print_uint::w#0 w zp[2]:6 202.0
word print_uint::w#1 w zp[2]:6 22.0
word print_uint::w#2 w zp[2]:6 704.6666666666667

zp[2]:2 [ print_line_cursor#33 print_line_cursor#65 print_line_cursor#0 ]
reg byte y [ print_mulf8u127::a#8 ]
zp[1]:4 [ print_mulf8s127::a#10 mulf8s127::a#0 print_mulf8u127::b#10 ]
zp[1]:5 [ print_mulf8s127::b#10 ]
reg byte a [ print_char::ch#11 print_char::ch#0 print_char::ch#5 print_char::ch#6 ]
reg byte x [ mulf8u127::a#2 mulf8u127::a#1 mulf8u127::a#0 ]
reg byte a [ mulf8u127::b#2 mulf8u127::b#1 mulf8u127::b#0 ]
reg byte x [ print_uchar::b#5 print_uchar::b#3 print_uchar::b#4 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 ]
zp[2]:6 [ print_uint::w#2 print_uint::w#1 print_uint::w#0 print_sint::w#4 print_sint::w#0 print_sint::w#1 print_mulf8u127::c#0 mulf8u127::return#0 mulf8u127::return#1 print_mulf8s127::c#0 mulf8s127::return#1 mulf8s127::c#7 mulf8s127::c#5 mulf8s127::c#1 mulf8s127::c#11 mulf8s127::c#2 mulf8s127::c#3 mulf8s127::c#0 mulf8s127::return#0 mulf8u127::return#3 memset::dst#2 memset::dst#1 print_str::str#3 print_str::str#6 print_str::str#0 ]
reg byte x [ print_schar::b#5 print_schar::b#0 print_schar::b#3 print_schar::b#1 print_schar::b#2 ]
reg byte y [ mulf8s127::b#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
zp[2]:8 [ mulf8s127::$11 mulf8s127::$9 print_char_cursor#81 print_char_cursor#126 print_char_cursor#1 print_char_cursor#139 print_char_cursor#144 print_char_cursor#18 print_char_cursor#130 print_char_cursor#134 print_char_cursor#153 print_char_cursor#151 ]
zp[2]:10 [ mulf8s127::$12 mulf8s127::$10 ]
