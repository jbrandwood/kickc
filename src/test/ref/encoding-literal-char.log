
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (byte) main::idx#0 ← (byte) 0
  *((const nomodify byte*) screen + (byte) main::idx#0) ← (const nomodify byte) cpm
  (byte) main::idx#1 ← ++ (byte) main::idx#0
  *((const nomodify byte*) screen + (byte) main::idx#1) ← (const nomodify byte) ccpu
  (byte) main::idx#2 ← ++ (byte) main::idx#1
  *((const nomodify byte*) screen + (byte) main::idx#2) ← (const nomodify byte) csm
  (byte) main::idx#3 ← ++ (byte) main::idx#2
  *((const nomodify byte*) screen + (byte) main::idx#3) ← (const nomodify byte) csu
  (byte) main::idx#4 ← ++ (byte) main::idx#3
  (byte) main::idx#5 ← (number) $28
  *((const nomodify byte*) screen + (byte) main::idx#5) ← *((const to_nomodify byte*) spm + (number) 0)
  (byte) main::idx#6 ← ++ (byte) main::idx#5
  *((const nomodify byte*) screen + (byte) main::idx#6) ← *((const to_nomodify byte*) spu + (number) 0)
  (byte) main::idx#7 ← ++ (byte) main::idx#6
  *((const nomodify byte*) screen + (byte) main::idx#7) ← *((const to_nomodify byte*) ssm + (number) 0)
  (byte) main::idx#8 ← ++ (byte) main::idx#7
  *((const nomodify byte*) screen + (byte) main::idx#8) ← *((const to_nomodify byte*) ssu + (number) 0)
  (byte) main::idx#9 ← ++ (byte) main::idx#8
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@return
(const nomodify byte) ccpu = (byte) 'A'pu
(const nomodify byte) cpm = (byte) 'A'pm
(const nomodify byte) csm = (byte) 'A'
(const nomodify byte) csu = (byte) 'A'su
(void()) main()
(label) main::@return
(byte) main::idx
(byte) main::idx#0
(byte) main::idx#1
(byte) main::idx#2
(byte) main::idx#3
(byte) main::idx#4
(byte) main::idx#5
(byte) main::idx#6
(byte) main::idx#7
(byte) main::idx#8
(byte) main::idx#9
(const nomodify byte*) screen = (byte*)(number) $400
(const to_nomodify byte*) spm[]  = (byte*) "A"pm
(const to_nomodify byte*) spu[]  = (byte*) "A"pu
(const to_nomodify byte*) ssm[]  = (byte*) "A"
(const to_nomodify byte*) ssu[]  = (byte*) "A"su

Adding number conversion cast (unumber) $28 in (byte) main::idx#5 ← (number) $28
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) screen + (byte) main::idx#5) ← *((const to_nomodify byte*) spm + (number) 0)
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) screen + (byte) main::idx#6) ← *((const to_nomodify byte*) spu + (number) 0)
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) screen + (byte) main::idx#7) ← *((const to_nomodify byte*) ssm + (number) 0)
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) screen + (byte) main::idx#8) ← *((const to_nomodify byte*) ssu + (number) 0)
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) main::idx#5 ← (unumber)(number) $28
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant (const byte) main::idx#0 = 0
Constant (const byte) main::idx#5 = $28
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero screen in [1] *((const nomodify byte*) screen + (const byte) main::idx#0) ← (const nomodify byte) cpm
Simplifying expression containing zero spm in [10] *((const nomodify byte*) screen + (const byte) main::idx#5) ← *((const to_nomodify byte*) spm + (byte) 0)
Simplifying expression containing zero spu in [12] *((const nomodify byte*) screen + (byte) main::idx#6) ← *((const to_nomodify byte*) spu + (byte) 0)
Simplifying expression containing zero ssm in [14] *((const nomodify byte*) screen + (byte) main::idx#7) ← *((const to_nomodify byte*) ssm + (byte) 0)
Simplifying expression containing zero ssu in [16] *((const nomodify byte*) screen + (byte) main::idx#8) ← *((const to_nomodify byte*) ssu + (byte) 0)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte) main::idx#4 and assignment [7] (byte) main::idx#4 ← ++ (byte) main::idx#3
Eliminating unused variable (byte) main::idx#9 and assignment [15] (byte) main::idx#9 ← ++ (byte) main::idx#8
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant right-side identified [1] (byte) main::idx#1 ← ++ (const byte) main::idx#0
Constant right-side identified [8] (byte) main::idx#6 ← ++ (const byte) main::idx#5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#1 = ++main::idx#0
Constant (const byte) main::idx#6 = ++main::idx#5
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [2] (byte) main::idx#2 ← ++ (const byte) main::idx#1
Constant right-side identified [8] (byte) main::idx#7 ← ++ (const byte) main::idx#6
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#2 = ++main::idx#1
Constant (const byte) main::idx#7 = ++main::idx#6
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [3] (byte) main::idx#3 ← ++ (const byte) main::idx#2
Constant right-side identified [8] (byte) main::idx#8 ← ++ (const byte) main::idx#7
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#3 = ++main::idx#2
Constant (const byte) main::idx#8 = ++main::idx#7
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings (const byte) main::idx#0
Inlining constant with different constant siblings (const byte) main::idx#5
Inlining constant with different constant siblings (const byte) main::idx#1
Inlining constant with different constant siblings (const byte) main::idx#6
Inlining constant with different constant siblings (const byte) main::idx#2
Inlining constant with different constant siblings (const byte) main::idx#7
Inlining constant with different constant siblings (const byte) main::idx#3
Inlining constant with different constant siblings (const byte) main::idx#8
Constant inlined main::idx#0 = (byte) 0
Constant inlined main::idx#1 = ++(byte) 0
Constant inlined main::idx#2 = ++++(byte) 0
Constant inlined main::idx#3 = ++++++(byte) 0
Constant inlined main::idx#5 = (byte) $28
Constant inlined main::idx#6 = ++(byte) $28
Constant inlined main::idx#7 = ++++(byte) $28
Constant inlined main::idx#8 = ++++++(byte) $28
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(screen+++0)
Consolidated array index constant in *(screen+++++0)
Consolidated array index constant in *(screen+++++++0)
Consolidated array index constant in *(screen+$28)
Consolidated array index constant in *(screen+++$28)
Consolidated array index constant in *(screen+++++$28)
Consolidated array index constant in *(screen+++++++$28)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++$28
Simplifying constant integer increment ++$28
Simplifying constant integer increment ++$29
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++$29
Simplifying constant integer increment ++$2a
Successful SSA optimization Pass2ConstantSimplification
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const nomodify byte*) screen) ← (const nomodify byte) cpm
  [1] *((const nomodify byte*) screen+(byte) 1) ← (const nomodify byte) ccpu
  [2] *((const nomodify byte*) screen+(byte) 2) ← (const nomodify byte) csm
  [3] *((const nomodify byte*) screen+(byte) 3) ← (const nomodify byte) csu
  [4] *((const nomodify byte*) screen+(byte) $28) ← *((const to_nomodify byte*) spm)
  [5] *((const nomodify byte*) screen+(byte) $29) ← *((const to_nomodify byte*) spu)
  [6] *((const nomodify byte*) screen+(byte) $2a) ← *((const to_nomodify byte*) ssm)
  [7] *((const nomodify byte*) screen+(byte) $2b) ← *((const to_nomodify byte*) ssu)
  to:main::@return
main::@return: scope:[main]  from main
  [8] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::idx

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests encoding of literal chars
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
.encoding "petscii_mixed"
  .const cpm = 'A'
.encoding "petscii_upper"
  .const ccpu = 'A'
.encoding "screencode_mixed"
  .const csm = 'A'
.encoding "screencode_upper"
  .const csu = 'A'
  .label screen = $400
  // main
main: {
    // [0] *((const nomodify byte*) screen) ← (const nomodify byte) cpm -- _deref_pbuc1=vbuc2 
    lda #cpm
    sta screen
    // [1] *((const nomodify byte*) screen+(byte) 1) ← (const nomodify byte) ccpu -- _deref_pbuc1=vbuc2 
    lda #ccpu
    sta screen+1
    // [2] *((const nomodify byte*) screen+(byte) 2) ← (const nomodify byte) csm -- _deref_pbuc1=vbuc2 
    lda #csm
    sta screen+2
    // [3] *((const nomodify byte*) screen+(byte) 3) ← (const nomodify byte) csu -- _deref_pbuc1=vbuc2 
    lda #csu
    sta screen+3
    // [4] *((const nomodify byte*) screen+(byte) $28) ← *((const to_nomodify byte*) spm) -- _deref_pbuc1=_deref_pbuc2 
    lda spm
    sta screen+$28
    // [5] *((const nomodify byte*) screen+(byte) $29) ← *((const to_nomodify byte*) spu) -- _deref_pbuc1=_deref_pbuc2 
    lda spu
    sta screen+$29
    // [6] *((const nomodify byte*) screen+(byte) $2a) ← *((const to_nomodify byte*) ssm) -- _deref_pbuc1=_deref_pbuc2 
    lda ssm
    sta screen+$2a
    // [7] *((const nomodify byte*) screen+(byte) $2b) ← *((const to_nomodify byte*) ssu) -- _deref_pbuc1=_deref_pbuc2 
    lda ssu
    sta screen+$2b
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // File Data
.encoding "petscii_mixed"
  spm: .text "A"
  .byte 0
.encoding "petscii_upper"
  spu: .text "A"
  .byte 0
.encoding "screencode_mixed"
  ssm: .text "A"
  .byte 0
.encoding "screencode_upper"
  ssu: .text "A"
  .byte 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const nomodify byte*) screen) ← (const nomodify byte) cpm [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const nomodify byte*) screen+(byte) 1) ← (const nomodify byte) ccpu [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((const nomodify byte*) screen+(byte) 2) ← (const nomodify byte) csm [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *((const nomodify byte*) screen+(byte) 3) ← (const nomodify byte) csu [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] *((const nomodify byte*) screen+(byte) $28) ← *((const to_nomodify byte*) spm) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] *((const nomodify byte*) screen+(byte) $29) ← *((const to_nomodify byte*) spu) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [6] *((const nomodify byte*) screen+(byte) $2a) ← *((const to_nomodify byte*) ssm) [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [7] *((const nomodify byte*) screen+(byte) $2b) ← *((const to_nomodify byte*) ssu) [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 65 combination 
Uplifting [] best 65 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests encoding of literal chars
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
.encoding "petscii_mixed"
  .const cpm = 'A'
.encoding "petscii_upper"
  .const ccpu = 'A'
.encoding "screencode_mixed"
  .const csm = 'A'
.encoding "screencode_upper"
  .const csu = 'A'
  .label screen = $400
  // main
main: {
    // [0] *((const nomodify byte*) screen) ← (const nomodify byte) cpm -- _deref_pbuc1=vbuc2 
    lda #cpm
    sta screen
    // [1] *((const nomodify byte*) screen+(byte) 1) ← (const nomodify byte) ccpu -- _deref_pbuc1=vbuc2 
    lda #ccpu
    sta screen+1
    // [2] *((const nomodify byte*) screen+(byte) 2) ← (const nomodify byte) csm -- _deref_pbuc1=vbuc2 
    lda #csm
    sta screen+2
    // [3] *((const nomodify byte*) screen+(byte) 3) ← (const nomodify byte) csu -- _deref_pbuc1=vbuc2 
    lda #csu
    sta screen+3
    // [4] *((const nomodify byte*) screen+(byte) $28) ← *((const to_nomodify byte*) spm) -- _deref_pbuc1=_deref_pbuc2 
    lda spm
    sta screen+$28
    // [5] *((const nomodify byte*) screen+(byte) $29) ← *((const to_nomodify byte*) spu) -- _deref_pbuc1=_deref_pbuc2 
    lda spu
    sta screen+$29
    // [6] *((const nomodify byte*) screen+(byte) $2a) ← *((const to_nomodify byte*) ssm) -- _deref_pbuc1=_deref_pbuc2 
    lda ssm
    sta screen+$2a
    // [7] *((const nomodify byte*) screen+(byte) $2b) ← *((const to_nomodify byte*) ssu) -- _deref_pbuc1=_deref_pbuc2 
    lda ssu
    sta screen+$2b
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // File Data
.encoding "petscii_mixed"
  spm: .text "A"
  .byte 0
.encoding "petscii_upper"
  spu: .text "A"
  .byte 0
.encoding "screencode_mixed"
  ssm: .text "A"
  .byte 0
.encoding "screencode_upper"
  ssu: .text "A"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify byte) ccpu = (byte) 'A'pu
(const nomodify byte) cpm = (byte) 'A'pm
(const nomodify byte) csm = (byte) 'A'
(const nomodify byte) csu = (byte) 'A'su
(void()) main()
(label) main::@return
(byte) main::idx
(const nomodify byte*) screen = (byte*) 1024
(const to_nomodify byte*) spm[]  = (byte*) "A"pm
(const to_nomodify byte*) spu[]  = (byte*) "A"pu
(const to_nomodify byte*) ssm[]  = (byte*) "A"
(const to_nomodify byte*) ssu[]  = (byte*) "A"su



FINAL ASSEMBLER
Score: 62

  // File Comments
// Tests encoding of literal chars
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
.encoding "petscii_mixed"
  .const cpm = 'A'
.encoding "petscii_upper"
  .const ccpu = 'A'
.encoding "screencode_mixed"
  .const csm = 'A'
.encoding "screencode_upper"
  .const csu = 'A'
  .label screen = $400
  // main
main: {
    // screen[idx++] = cpm
    // [0] *((const nomodify byte*) screen) ← (const nomodify byte) cpm -- _deref_pbuc1=vbuc2 
    lda #cpm
    sta screen
    // screen[idx++] = ccpu
    // [1] *((const nomodify byte*) screen+(byte) 1) ← (const nomodify byte) ccpu -- _deref_pbuc1=vbuc2 
    lda #ccpu
    sta screen+1
    // screen[idx++] = csm
    // [2] *((const nomodify byte*) screen+(byte) 2) ← (const nomodify byte) csm -- _deref_pbuc1=vbuc2 
    lda #csm
    sta screen+2
    // screen[idx++] = csu
    // [3] *((const nomodify byte*) screen+(byte) 3) ← (const nomodify byte) csu -- _deref_pbuc1=vbuc2 
    lda #csu
    sta screen+3
    // screen[idx++] = spm[0]
    // [4] *((const nomodify byte*) screen+(byte) $28) ← *((const to_nomodify byte*) spm) -- _deref_pbuc1=_deref_pbuc2 
    lda spm
    sta screen+$28
    // screen[idx++] = spu[0]
    // [5] *((const nomodify byte*) screen+(byte) $29) ← *((const to_nomodify byte*) spu) -- _deref_pbuc1=_deref_pbuc2 
    lda spu
    sta screen+$29
    // screen[idx++] = ssm[0]
    // [6] *((const nomodify byte*) screen+(byte) $2a) ← *((const to_nomodify byte*) ssm) -- _deref_pbuc1=_deref_pbuc2 
    lda ssm
    sta screen+$2a
    // screen[idx++] = ssu[0]
    // [7] *((const nomodify byte*) screen+(byte) $2b) ← *((const to_nomodify byte*) ssu) -- _deref_pbuc1=_deref_pbuc2 
    lda ssu
    sta screen+$2b
    // main::@return
    // }
    // [8] return 
    rts
}
  // File Data
.encoding "petscii_mixed"
  spm: .text "A"
  .byte 0
.encoding "petscii_upper"
  spu: .text "A"
  .byte 0
.encoding "screencode_mixed"
  ssm: .text "A"
  .byte 0
.encoding "screencode_upper"
  ssu: .text "A"
  .byte 0

