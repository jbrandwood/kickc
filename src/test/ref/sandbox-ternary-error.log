Culled Empty Block (label) main::@8
Culled Empty Block (label) main::@9
Culled Empty Block (label) main::@10
Culled Empty Block (label) main::@11
Culled Empty Block (label) main::@12

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte*) main::SCREEN#0 ← ((byte*)) (number) $400
  (byte) main::b#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@4
  (byte) main::b#2 ← phi( main/(byte) main::b#0 main::@4/(byte) main::b#1 )
  (bool~) main::$0 ← (byte) main::b#2 == (number) 0
  if((bool~) main::$0) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  (byte) main::b#5 ← phi( main::@1/(byte) main::b#2 )
  (byte~) main::$6 ← (byte) 'a'
  to:main::@4
main::@3: scope:[main]  from main::@1
  (byte) main::b#3 ← phi( main::@1/(byte) main::b#2 )
  (bool~) main::$1 ← (byte) main::b#3 == (number) 1
  if((bool~) main::$1) goto main::@5
  to:main::@6
main::@5: scope:[main]  from main::@3
  (byte) main::b#7 ← phi( main::@3/(byte) main::b#3 )
  (byte~) main::$3 ← (byte) 'b'
  to:main::@7
main::@6: scope:[main]  from main::@3
  (byte) main::b#8 ← phi( main::@3/(byte) main::b#3 )
  (byte~) main::$2 ← (byte) 'c'
  to:main::@7
main::@7: scope:[main]  from main::@5 main::@6
  (byte) main::b#6 ← phi( main::@5/(byte) main::b#7 main::@6/(byte) main::b#8 )
  (byte~) main::$4 ← phi( main::@5/(byte~) main::$3 main::@6/(byte~) main::$2 )
  (byte~) main::$5 ← (byte~) main::$4
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@7
  (byte) main::b#4 ← phi( main::@2/(byte) main::b#5 main::@7/(byte) main::b#6 )
  (byte~) main::$7 ← phi( main::@2/(byte~) main::$6 main::@7/(byte~) main::$5 )
  *((byte*) main::SCREEN#0) ← (byte~) main::$7
  (byte) main::b#1 ← (byte) main::b#4 + rangenext(0,2)
  (bool~) main::$8 ← (byte) main::b#1 != rangelast(0,2)
  if((bool~) main::$8) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(bool~) main::$0
(bool~) main::$1
(byte~) main::$2
(byte~) main::$3
(byte~) main::$4
(byte~) main::$5
(byte~) main::$6
(byte~) main::$7
(bool~) main::$8
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@return
(byte*) main::SCREEN
(byte*) main::SCREEN#0
(byte) main::b
(byte) main::b#0
(byte) main::b#1
(byte) main::b#2
(byte) main::b#3
(byte) main::b#4
(byte) main::b#5
(byte) main::b#6
(byte) main::b#7
(byte) main::b#8

Adding number conversion cast (unumber) 0 in (bool~) main::$0 ← (byte) main::b#2 == (number) 0
Adding number conversion cast (unumber) 1 in (bool~) main::$1 ← (byte) main::b#3 == (number) 1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) main::SCREEN#0 ← (byte*)(number) $400
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (byte) main::b#2 = (byte) main::b#5 (byte) main::b#3 (byte) main::b#7 (byte) main::b#8 
Alias (byte~) main::$5 = (byte~) main::$4 
Successful SSA optimization Pass2AliasElimination
Alias (byte) main::b#2 = (byte) main::b#6 
Successful SSA optimization Pass2AliasElimination
Alias (byte) main::b#2 = (byte) main::b#4 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$0 [4] if((byte) main::b#2==(byte) 0) goto main::@2
Simple Condition (bool~) main::$1 [9] if((byte) main::b#2==(byte) 1) goto main::@5
Simple Condition (bool~) main::$8 [20] if((byte) main::b#1!=rangelast(0,2)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) main::SCREEN#0 = (byte*) 1024
Constant (const byte) main::b#0 = 0
Constant (const byte) main::$6 = 'a'
Constant (const byte) main::$3 = 'b'
Constant (const byte) main::$2 = 'c'
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [18] main::b#1 ← ++ main::b#2 to ++
Resolved ranged comparison value [20] if(main::b#1!=rangelast(0,2)) goto main::@1 to (number) 3
GRAPH (NEW VERSIONS for main::b#2)
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [0] (byte) main::b#2 ← phi( main/(const byte) main::b#0 main::@4/(byte) main::b#1 )
  [1] if((byte) main::b#2==(byte) 0) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  to:main::@4
main::@3: scope:[main]  from main::@1
  (byte) main::b#9 ← phi( )
  [2] if((byte) main::b#9==(byte) 1) goto main::@5
  to:main::@6
main::@5: scope:[main]  from main::@3
  to:main::@7
main::@6: scope:[main]  from main::@3
  to:main::@7
main::@7: scope:[main]  from main::@5 main::@6
  [3] (byte~) main::$5 ← phi( main::@5/(const byte) main::$3 main::@6/(const byte) main::$2 )
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@7
  [4] (byte) main::b#10 ← phi( )
  [4] (byte~) main::$7 ← phi( main::@2/(const byte) main::$6 main::@7/(byte~) main::$5 )
  [5] *((const byte*) main::SCREEN#0) ← (byte~) main::$7
  [6] (byte) main::b#1 ← ++ (byte) main::b#10
  [7] if((byte) main::b#1!=(number) 3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  [8] return 
  to:@return
@1: scope:[]  from @begin
  [9] call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

Successful SSA optimization Pass2LoopHeadConstantIdentification
Adding number conversion cast (unumber) 3 in if((byte) main::b#1!=(number) 3) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (byte) main::b#1 = (byte) main::b#2 
Alias (byte) main::b#13 = (byte) main::b#9 (byte) main::b#14 
Successful SSA optimization Pass2AliasElimination
Alias (byte) main::b#12 = (byte) main::b#13 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) main::b#15 (const byte) main::b#0
Successful SSA optimization Pass2IdenticalPhiElimination
Removing PHI-reference to removed block (main::@1_1) in block main::@3
if() condition always true - replacing block destination [15] if((const byte) main::b#0==(byte) 0) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Alias (byte) main::b#1 = (byte) main::b#12 
Successful SSA optimization Pass2AliasElimination
Inlining constant with var siblings (const byte) main::b#0
Constant inlined main::$6 = (byte) 'a'
Constant inlined main::$3 = (byte) 'b'
Constant inlined main::b#0 = (byte) 0
Constant inlined main::$2 = (byte) 'c'
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@13(between main::@1 and main::@2)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1_1
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@5
CALL GRAPH
Calls in [] to main:2 

Created 4 initial phi equivalence classes
Coalesced [8] main::b#17 ← main::b#11
Coalesced [18] main::$9 ← main::$5
Coalesced [19] main::b#18 ← main::b#1
Coalesced (already) [21] main::b#16 ← main::b#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@1_1
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@13
Renumbering block main::@7 to main::@6
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@5

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@2
main::@2: scope:[main]  from main main::@1
  [5] (byte) main::b#11 ← phi( main::@1/(byte) main::b#1 main/(byte) 0 )
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@6
  [6] (byte) main::b#10 ← phi( main::@2/(byte) main::b#11 main::@6/(byte) main::b#1 )
  [6] (byte~) main::$7 ← phi( main::@2/(byte) 'a' main::@6/(byte~) main::$5 )
  [7] *((const byte*) main::SCREEN#0) ← (byte~) main::$7
  [8] (byte) main::b#1 ← ++ (byte) main::b#10
  [9] if((byte) main::b#1!=(byte) 3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  [10] return 
  to:@return
main::@1: scope:[main]  from main::@4
  [11] if((byte) main::b#1==(byte) 0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [12] if((byte) main::b#1==(byte) 1) goto main::@5
  to:main::@6
main::@5: scope:[main]  from main::@3
  [13] phi()
  to:main::@6
main::@6: scope:[main]  from main::@3 main::@5
  [14] (byte~) main::$5 ← phi( main::@5/(byte) 'b' main::@3/(byte) 'c' )
  to:main::@4


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$5 101.0
(byte~) main::$7 202.0
(byte*) main::SCREEN
(byte) main::b
(byte) main::b#1 100.99999999999999
(byte) main::b#10 106.5
(byte) main::b#11 112.0

Initial phi equivalence classes
[ main::$7 main::$5 ]
[ main::b#10 main::b#11 main::b#1 ]
Complete equivalence classes
[ main::$7 main::$5 ]
[ main::b#10 main::b#11 main::b#1 ]
Allocated zp ZP_BYTE:2 [ main::$7 main::$5 ]
Allocated zp ZP_BYTE:3 [ main::b#10 main::b#11 main::b#1 ]

INITIAL ASM
Target platform is c64basic
  // File Comments
// Demonstrates error with nested ternary operator
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label SCREEN = $400
    .label _5 = 2
    .label _7 = 2
    .label b = 3
    // [5] phi from main to main::@2 [phi:main->main::@2]
  b2_from_main:
    // [5] phi (byte) main::b#11 = (byte) 0 [phi:main->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta b
    jmp b2
    // [5] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    // [5] phi (byte) main::b#11 = (byte) main::b#1 [phi:main::@1->main::@2#0] -- register_copy 
    jmp b2
    // main::@2
  b2:
    // [6] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
  b4_from_b2:
    // [6] phi (byte) main::b#10 = (byte) main::b#11 [phi:main::@2->main::@4#0] -- register_copy 
    // [6] phi (byte~) main::$7 = (byte) 'a' [phi:main::@2->main::@4#1] -- vbuz1=vbuc1 
    lda #'a'
    sta _7
    jmp b4
    // main::@4
  b4:
    // [7] *((const byte*) main::SCREEN#0) ← (byte~) main::$7 -- _deref_pbuc1=vbuz1 
    lda _7
    sta SCREEN
    // [8] (byte) main::b#1 ← ++ (byte) main::b#10 -- vbuz1=_inc_vbuz1 
    inc b
    // [9] if((byte) main::b#1!=(byte) 3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp b
    bne b1
    jmp breturn
    // main::@return
  breturn:
    // [10] return 
    rts
    // main::@1
  b1:
    // [11] if((byte) main::b#1==(byte) 0) goto main::@2 -- vbuz1_eq_0_then_la1 
    lda b
    cmp #0
    beq b2_from_b1
    jmp b3
    // main::@3
  b3:
    // [12] if((byte) main::b#1==(byte) 1) goto main::@5 -- vbuz1_eq_vbuc1_then_la1 
    lda #1
    cmp b
    beq b5_from_b3
    // [14] phi from main::@3 to main::@6 [phi:main::@3->main::@6]
  b6_from_b3:
    // [14] phi (byte~) main::$5 = (byte) 'c' [phi:main::@3->main::@6#0] -- vbuz1=vbuc1 
    lda #'c'
    sta _5
    jmp b6
    // [13] phi from main::@3 to main::@5 [phi:main::@3->main::@5]
  b5_from_b3:
    jmp b5
    // main::@5
  b5:
    // [14] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  b6_from_b5:
    // [14] phi (byte~) main::$5 = (byte) 'b' [phi:main::@5->main::@6#0] -- vbuz1=vbuc1 
    lda #'b'
    sta _5
    jmp b6
    // main::@6
  b6:
    // [6] phi from main::@6 to main::@4 [phi:main::@6->main::@4]
  b4_from_b6:
    // [6] phi (byte) main::b#10 = (byte) main::b#1 [phi:main::@6->main::@4#0] -- register_copy 
    // [6] phi (byte~) main::$7 = (byte~) main::$5 [phi:main::@6->main::@4#1] -- register_copy 
    jmp b4
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 [ main::$7 main::$5 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::b#10 main::b#11 main::b#1 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 319.5: zp ZP_BYTE:3 [ main::b#10 main::b#11 main::b#1 ] 303: zp ZP_BYTE:2 [ main::$7 main::$5 ] 
Uplift Scope [] 

Uplifting [main] best 4748 combination reg byte x [ main::b#10 main::b#11 main::b#1 ] reg byte a [ main::$7 main::$5 ] 
Uplifting [] best 4748 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Demonstrates error with nested ternary operator
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label SCREEN = $400
    // [5] phi from main to main::@2 [phi:main->main::@2]
  b2_from_main:
    // [5] phi (byte) main::b#11 = (byte) 0 [phi:main->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b2
    // [5] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    // [5] phi (byte) main::b#11 = (byte) main::b#1 [phi:main::@1->main::@2#0] -- register_copy 
    jmp b2
    // main::@2
  b2:
    // [6] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
  b4_from_b2:
    // [6] phi (byte) main::b#10 = (byte) main::b#11 [phi:main::@2->main::@4#0] -- register_copy 
    // [6] phi (byte~) main::$7 = (byte) 'a' [phi:main::@2->main::@4#1] -- vbuaa=vbuc1 
    lda #'a'
    jmp b4
    // main::@4
  b4:
    // [7] *((const byte*) main::SCREEN#0) ← (byte~) main::$7 -- _deref_pbuc1=vbuaa 
    sta SCREEN
    // [8] (byte) main::b#1 ← ++ (byte) main::b#10 -- vbuxx=_inc_vbuxx 
    inx
    // [9] if((byte) main::b#1!=(byte) 3) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #3
    bne b1
    jmp breturn
    // main::@return
  breturn:
    // [10] return 
    rts
    // main::@1
  b1:
    // [11] if((byte) main::b#1==(byte) 0) goto main::@2 -- vbuxx_eq_0_then_la1 
    cpx #0
    beq b2_from_b1
    jmp b3
    // main::@3
  b3:
    // [12] if((byte) main::b#1==(byte) 1) goto main::@5 -- vbuxx_eq_vbuc1_then_la1 
    cpx #1
    beq b5_from_b3
    // [14] phi from main::@3 to main::@6 [phi:main::@3->main::@6]
  b6_from_b3:
    // [14] phi (byte~) main::$5 = (byte) 'c' [phi:main::@3->main::@6#0] -- vbuaa=vbuc1 
    lda #'c'
    jmp b6
    // [13] phi from main::@3 to main::@5 [phi:main::@3->main::@5]
  b5_from_b3:
    jmp b5
    // main::@5
  b5:
    // [14] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  b6_from_b5:
    // [14] phi (byte~) main::$5 = (byte) 'b' [phi:main::@5->main::@6#0] -- vbuaa=vbuc1 
    lda #'b'
    jmp b6
    // main::@6
  b6:
    // [6] phi from main::@6 to main::@4 [phi:main::@6->main::@4]
  b4_from_b6:
    // [6] phi (byte) main::b#10 = (byte) main::b#1 [phi:main::@6->main::@4#0] -- register_copy 
    // [6] phi (byte~) main::$7 = (byte~) main::$5 [phi:main::@6->main::@4#1] -- register_copy 
    jmp b4
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b6
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b2_from_b1 with b2
Replacing label b5_from_b3 with b5
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b2_from_b1:
Removing instruction b4_from_b2:
Removing instruction b5_from_b3:
Removing instruction b6_from_b5:
Removing instruction b4_from_b6:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b2_from_main:
Removing instruction breturn:
Removing instruction b3:
Removing instruction b6_from_b3:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Skipping double jump to b4 in jmp b6
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction jmp b2
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Removing instruction b6:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(byte~) main::$5 reg byte a 101.0
(byte~) main::$7 reg byte a 202.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(byte*) main::SCREEN
(const byte*) main::SCREEN#0 SCREEN = (byte*) 1024
(byte) main::b
(byte) main::b#1 reg byte x 100.99999999999999
(byte) main::b#10 reg byte x 106.5
(byte) main::b#11 reg byte x 112.0

reg byte a [ main::$7 main::$5 ]
reg byte x [ main::b#10 main::b#11 main::b#1 ]


FINAL ASSEMBLER
Score: 3176

  // File Comments
// Demonstrates error with nested ternary operator
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label SCREEN = $400
    // [5] phi from main to main::@2 [phi:main->main::@2]
    // [5] phi (byte) main::b#11 = (byte) 0 [phi:main->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [5] phi (byte) main::b#11 = (byte) main::b#1 [phi:main::@1->main::@2#0] -- register_copy 
    // main::@2
  b2:
    // [6] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
    // [6] phi (byte) main::b#10 = (byte) main::b#11 [phi:main::@2->main::@4#0] -- register_copy 
    // [6] phi (byte~) main::$7 = (byte) 'a' [phi:main::@2->main::@4#1] -- vbuaa=vbuc1 
    lda #'a'
    // main::@4
  b4:
    // *SCREEN = (b == 0) ? 'a' : ((b == 1) ? 'b' : 'c')
    // [7] *((const byte*) main::SCREEN#0) ← (byte~) main::$7 -- _deref_pbuc1=vbuaa 
    sta SCREEN
    // for ( byte b: 0..2 )
    // [8] (byte) main::b#1 ← ++ (byte) main::b#10 -- vbuxx=_inc_vbuxx 
    inx
    // [9] if((byte) main::b#1!=(byte) 3) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #3
    bne b1
    // main::@return
    // }
    // [10] return 
    rts
    // main::@1
  b1:
    // (b == 0) ? 'a' : ((b == 1) ? 'b' : 'c')
    // [11] if((byte) main::b#1==(byte) 0) goto main::@2 -- vbuxx_eq_0_then_la1 
    cpx #0
    beq b2
    // main::@3
    // (b == 1) ? 'b' : 'c'
    // [12] if((byte) main::b#1==(byte) 1) goto main::@5 -- vbuxx_eq_vbuc1_then_la1 
    cpx #1
    beq b5
    // [14] phi from main::@3 to main::@6 [phi:main::@3->main::@6]
    // [14] phi (byte~) main::$5 = (byte) 'c' [phi:main::@3->main::@6#0] -- vbuaa=vbuc1 
    lda #'c'
    jmp b4
    // [13] phi from main::@3 to main::@5 [phi:main::@3->main::@5]
    // main::@5
  b5:
    // [14] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
    // [14] phi (byte~) main::$5 = (byte) 'b' [phi:main::@5->main::@6#0] -- vbuaa=vbuc1 
    lda #'b'
    // main::@6
    // [6] phi from main::@6 to main::@4 [phi:main::@6->main::@4]
    // [6] phi (byte) main::b#10 = (byte) main::b#1 [phi:main::@6->main::@4#0] -- register_copy 
    // [6] phi (byte~) main::$7 = (byte~) main::$5 [phi:main::@6->main::@4#1] -- register_copy 
    jmp b4
}
  // File Data

