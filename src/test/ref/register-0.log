Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  print::ch#0 = 'c'
  call print 
  to:main::@1
main::@1: scope:[main]  from main
  print::ch#1 = 'm'
  call print 
  to:main::@2
main::@2: scope:[main]  from main::@1
  print::ch#2 = 'l'
  call print 
  to:main::@3
main::@3: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

void print(byte print::ch)
print: scope:[print]  from main main::@1 main::@2
  print::ch#3 = phi( main/print::ch#0, main::@1/print::ch#1, main::@2/print::ch#2 )
  kickasm( uses print::ch#3) {{  }}
  asm { ldxidx staSCREEN,x incidx  }
  to:print::@return
print::@return: scope:[print]  from print
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  idx = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* SCREEN = (byte*)$400
void __start()
label __start::@1
label __start::@2
label __start::@return
label __start::__init1
volatile byte idx loadstore !zp[-1]:3
void main()
label main::@1
label main::@2
label main::@3
label main::@return
void print(byte print::ch)
label print::@return
byte print::ch !reg byte a
byte print::ch#0 !reg byte a
byte print::ch#1 !reg byte a
byte print::ch#2 !reg byte a
byte print::ch#3 !reg byte a

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Constant print::ch#0 = 'c'
Constant print::ch#1 = 'm'
Constant print::ch#2 = 'l'
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings print::ch#0
Inlining constant with var siblings print::ch#1
Inlining constant with var siblings print::ch#2
Constant inlined print::ch#2 = 'l'
Constant inlined print::ch#1 = 'm'
Constant inlined print::ch#0 = 'c'
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
CALL GRAPH
Calls in [__start] to main:3 
Calls in [main] to print:7 print:9 print:11 

Created 1 initial phi equivalence classes
Coalesced down to 1 phi equivalence classes
Culled Empty Block label __start::@2
Culled Empty Block label main::@3
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] idx = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [2] phi()
  [3] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [4] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [5] phi()
  [6] call print 
  to:main::@1
main::@1: scope:[main]  from main
  [7] phi()
  [8] call print 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [9] phi()
  [10] call print 
  to:main::@return
main::@return: scope:[main]  from main::@2
  [11] return 
  to:@return

void print(byte print::ch)
print: scope:[print]  from main main::@1 main::@2
  [12] print::ch#3 = phi( main/'c', main::@1/'m', main::@2/'l' )
  kickasm( uses print::ch#3) {{  }}
  asm { ldxidx staSCREEN,x incidx  }
  to:print::@return
print::@return: scope:[print]  from print
  [15] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void __start()
volatile byte idx loadstore !zp[-1]:3 0.18181818181818182
void main()
void print(byte print::ch)
byte print::ch !reg byte a
byte print::ch#3 !reg byte a

Initial phi equivalence classes
[ print::ch#3 ]
Added variable idx to live range equivalence class [ idx ]
Complete equivalence classes
[ print::ch#3 ]
[ idx ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] idx = 0 [ idx ] (  [ idx ] { }  ) always clobbers reg byte a 
Statement asm { ldxidx staSCREEN,x incidx  } always clobbers reg byte x 
Potential registers reg byte a [ print::ch#3 ] : reg byte a , 
Potential registers zp[1]:3 [ idx ] : zp[1]:3 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 0.18: zp[1]:3 [ idx ] 
Uplift Scope [main] 
Uplift Scope [print] 0: reg byte a [ print::ch#3 ] 
Uplift Scope [__start] 

Uplifting [] best 372 combination zp[1]:3 [ idx ] 
Uplifting [main] best 372 combination 
Uplifting [print] best 372 combination reg byte a [ print::ch#3 ] 
Uplifting [__start] best 372 combination 
Attempting to uplift remaining variables inzp[1]:3 [ idx ]
Uplifting [] best 372 combination zp[1]:3 [ idx ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test declaring a variable as at a hard-coded register
// hard-coded register parameter
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label idx = 3
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] idx = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [3] call main 
    // [5] phi from __start::@1 to main [phi:__start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [4] return 
    rts
}
  // main
main: {
    // [6] call print 
    // [12] phi from main to print [phi:main->print]
  print_from_main:
    // [12] phi print::ch#3 = 'c' [phi:main->print#0] -- vbuaa=vbuc1 
    lda #'c'
    jsr print
    // [7] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [8] call print 
    // [12] phi from main::@1 to print [phi:main::@1->print]
  print_from___b1:
    // [12] phi print::ch#3 = 'm' [phi:main::@1->print#0] -- vbuaa=vbuc1 
    lda #'m'
    jsr print
    // [9] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [10] call print 
    // [12] phi from main::@2 to print [phi:main::@2->print]
  print_from___b2:
    // [12] phi print::ch#3 = 'l' [phi:main::@2->print#0] -- vbuaa=vbuc1 
    lda #'l'
    jsr print
    jmp __breturn
    // main::@return
  __breturn:
    // [11] return 
    rts
}
  // print
// print(byte register(A) ch)
print: {
    // kickasm( uses print::ch#3) {{  }}
    // Force usage of ch
    
    // asm { ldxidx staSCREEN,x incidx  }
    ldx idx
    sta SCREEN,x
    inc idx
    jmp __breturn
    // print::@return
  __breturn:
    // [15] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___init1:
Removing instruction main_from___b1:
Removing instruction __b1_from_main:
Removing instruction print_from___b1:
Removing instruction __b2_from___b1:
Removing instruction print_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction print_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const nomodify byte* SCREEN = (byte*) 1024
void __start()
label __start::@1
label __start::@return
label __start::__init1
volatile byte idx loadstore !zp[-1]:3 zp[1]:3 0.18181818181818182
void main()
label main::@1
label main::@2
label main::@return
void print(byte print::ch)
label print::@return
byte print::ch !reg byte a
byte print::ch#3 !reg byte a

reg byte a [ print::ch#3 ]
zp[1]:3 [ idx ]


FINAL ASSEMBLER
Score: 324

  // File Comments
// Test declaring a variable as at a hard-coded register
// hard-coded register parameter
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label idx = 3
  // __start
__start: {
    // __start::__init1
    // idx
    // [1] idx = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [3] call main 
    // [5] phi from __start::@1 to main [phi:__start::@1->main]
    jsr main
    // __start::@return
    // [4] return 
    rts
}
  // main
main: {
    // print('c')
    // [6] call print 
    // [12] phi from main to print [phi:main->print]
    // [12] phi print::ch#3 = 'c' [phi:main->print#0] -- vbuaa=vbuc1 
    lda #'c'
    jsr print
    // [7] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // print('m')
    // [8] call print 
    // [12] phi from main::@1 to print [phi:main::@1->print]
    // [12] phi print::ch#3 = 'm' [phi:main::@1->print#0] -- vbuaa=vbuc1 
    lda #'m'
    jsr print
    // [9] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // print('l')
    // [10] call print 
    // [12] phi from main::@2 to print [phi:main::@2->print]
    // [12] phi print::ch#3 = 'l' [phi:main::@2->print#0] -- vbuaa=vbuc1 
    lda #'l'
    jsr print
    // main::@return
    // }
    // [11] return 
    rts
}
  // print
// print(byte register(A) ch)
print: {
    // kickasm
    // kickasm( uses print::ch#3) {{  }}
    // Force usage of ch
    
    // asm
    // asm { ldxidx staSCREEN,x incidx  }
    ldx idx
    sta SCREEN,x
    inc idx
    // print::@return
    // }
    // [15] return 
    rts
}
  // File Data

