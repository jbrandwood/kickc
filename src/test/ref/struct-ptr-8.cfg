@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [6] (byte~) main::$0 ← (byte) 2 + (byte) main::i#2
  [7] (byte~) main::$5 ← (byte) main::i#2 << (byte) 1
  [8] *((byte*)(const struct Point[2]) points#0 + (byte~) main::$5) ← (byte~) main::$0
  [9] (byte~) main::$1 ← (byte) 3 + (byte) main::i#2
  [10] *((byte*)(const struct Point[2]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$5) ← (byte~) main::$1
  [11] (byte) main::i#1 ← ++ (byte) main::i#2
  [12] if((byte) main::i#1!=(byte) 2) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [13] (byte) main::idx#4 ← phi( main::@1/(byte) 0 main::@2/(byte) main::idx#3 )
  [13] (byte) main::i1#2 ← phi( main::@1/(byte) 0 main::@2/(byte) main::i1#1 )
  [14] (byte~) main::$7 ← (byte) main::i1#2 << (byte) 1
  [15] *((const byte*) main::SCREEN#0 + (byte) main::idx#4) ← *((byte*)(const struct Point[2]) points#0 + (byte~) main::$7)
  [16] (byte) main::idx#1 ← ++ (byte) main::idx#4
  [17] *((const byte*) main::SCREEN#0 + (byte) main::idx#1) ← *((byte*)(const struct Point[2]) points#0+(const byte) OFFSET_STRUCT_POINT_Y + (byte~) main::$7)
  [18] (byte) main::idx#2 ← ++ (byte) main::idx#1
  [19] *((const byte*) main::SCREEN#0 + (byte) main::idx#2) ← (byte) ' '
  [20] (byte) main::idx#3 ← ++ (byte) main::idx#2
  [21] (byte) main::i1#1 ← ++ (byte) main::i1#2
  [22] if((byte) main::i1#1!=(byte) 2) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@2
  [23] return 
  to:@return
