Identified constant variable (byte) main::sz

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (number) $400
  to:@1
main: scope:[main]  from @1
  (byte) main::idx#0 ← (number) 0
  (byte[3]) main::ba#0 ← { fill( 3, 0) }
  (byte~) main::$0 ← sizeof  (byte[3]) main::ba#0
  (byte~) main::$1 ← (byte~) main::$0 / (const byte) SIZEOF_BYTE
  (byte~) main::$2 ← (byte) '0' + (byte~) main::$1
  *((byte*) SCREEN#0 + (byte) main::idx#0) ← (byte~) main::$2
  (byte) main::idx#1 ← ++ (byte) main::idx#0
  (word[3]) main::wa#0 ← { fill( 3, 0) }
  (byte~) main::$3 ← sizeof  (word[3]) main::wa#0
  (byte~) main::$4 ← (byte~) main::$3 / (const byte) SIZEOF_WORD
  (byte~) main::$5 ← (byte) '0' + (byte~) main::$4
  *((byte*) SCREEN#0 + (byte) main::idx#1) ← (byte~) main::$5
  (byte) main::idx#2 ← ++ (byte) main::idx#1
  (byte) main::sz#0 ← (number) 7
  (number~) main::$6 ← (byte) main::sz#0 + (number) 2
  (byte[main::$6]) main::bb#0 ← { fill( main::$6, 0) }
  (byte~) main::$7 ← sizeof  (byte[main::$6]) main::bb#0
  (byte~) main::$8 ← (byte~) main::$7 / (const byte) SIZEOF_BYTE
  (byte~) main::$9 ← (byte) '0' + (byte~) main::$8
  *((byte*) SCREEN#0 + (byte) main::idx#2) ← (byte~) main::$9
  (byte) main::idx#3 ← ++ (byte) main::idx#2
  (word[]) main::wb#0 ← { (number) 1, (number) 2, (number) 3, (number) 4 }
  (byte~) main::$10 ← sizeof  (word[]) main::wb#0
  (byte~) main::$11 ← (byte~) main::$10 / (const byte) SIZEOF_WORD
  (byte~) main::$12 ← (byte) '0' + (byte~) main::$11
  *((byte*) SCREEN#0 + (byte) main::idx#3) ← (byte~) main::$12
  (byte) main::idx#4 ← ++ (byte) main::idx#3
  (byte[]) main::sa#0 ← (const string) main::$19
  (byte~) main::$13 ← sizeof  (byte[]) main::sa#0
  (byte~) main::$14 ← (byte~) main::$13 / (const byte) SIZEOF_BYTE
  (byte~) main::$15 ← (byte) '0' + (byte~) main::$14
  *((byte*) SCREEN#0 + (byte) main::idx#4) ← (byte~) main::$15
  (byte) main::idx#5 ← ++ (byte) main::idx#4
  (byte[]) main::sb#0 ← { (byte) 'a', (byte) 'b', (byte) 'c', (number) 0 }
  (byte~) main::$16 ← sizeof  (byte[]) main::sb#0
  (byte~) main::$17 ← (byte~) main::$16 / (const byte) SIZEOF_BYTE
  (byte~) main::$18 ← (byte) '0' + (byte~) main::$17
  *((byte*) SCREEN#0 + (byte) main::idx#5) ← (byte~) main::$18
  (byte) main::idx#6 ← ++ (byte) main::idx#5
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(const byte) SIZEOF_BYTE = (byte) 1
(const byte) SIZEOF_WORD = (byte) 2
(void()) main()
(byte~) main::$0
(byte~) main::$1
(byte~) main::$10
(byte~) main::$11
(byte~) main::$12
(byte~) main::$13
(byte~) main::$14
(byte~) main::$15
(byte~) main::$16
(byte~) main::$17
(byte~) main::$18
(const string) main::$19 = (string) "camelot@"
(byte~) main::$2
(byte~) main::$3
(byte~) main::$4
(byte~) main::$5
(number~) main::$6
(byte~) main::$7
(byte~) main::$8
(byte~) main::$9
(label) main::@return
(byte[3]) main::ba
(byte[3]) main::ba#0
(byte[main::$6]) main::bb
(byte[main::$6]) main::bb#0
(byte) main::idx
(byte) main::idx#0
(byte) main::idx#1
(byte) main::idx#2
(byte) main::idx#3
(byte) main::idx#4
(byte) main::idx#5
(byte) main::idx#6
(byte[]) main::sa
(byte[]) main::sa#0
(byte[]) main::sb
(byte[]) main::sb#0
(byte) main::sz
(byte) main::sz#0
(word[3]) main::wa
(word[3]) main::wa#0
(word[]) main::wb
(word[]) main::wb#0

Adding number conversion cast (unumber) 0 in (byte) main::idx#0 ← (number) 0
Adding number conversion cast (unumber) 7 in (byte) main::sz#0 ← (number) 7
Adding number conversion cast (unumber) 2 in (number~) main::$6 ← (byte) main::sz#0 + (number) 2
Adding number conversion cast (unumber) main::$6 in (number~) main::$6 ← (byte) main::sz#0 + (unumber)(number) 2
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (word) to elements in (word[]) main::wb#0 ← { (word)(number) 1, (word)(number) 2, (word)(number) 3, (word)(number) 4 }
Adding number conversion cast (byte) to elements in (byte[]) main::sb#0 ← { (byte) 'a', (byte) 'b', (byte) 'c', (byte)(number) 0 }
Successful SSA optimization PassNAddArrayNumberTypeConversions
Inlining cast (byte*) SCREEN#0 ← (byte*)(number) $400
Inlining cast (byte) main::idx#0 ← (unumber)(number) 0
Inlining cast (byte) main::sz#0 ← (unumber)(number) 7
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$6 ← (byte) main::sz#0 + (byte) 2
Constant right-side identified [2] (byte[3]) main::ba#0 ← { fill( 3, 0) }
Constant right-side identified [8] (word[3]) main::wa#0 ← { fill( 3, 0) }
Constant right-side identified [22] (word[]) main::wb#0 ← { (word) 1, (word) 2, (word) 3, (word) 4 }
Constant right-side identified [34] (byte[]) main::sb#0 ← { (byte) 'a', (byte) 'b', (byte) 'c', (byte) 0 }
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) SCREEN#0 = (byte*) 1024
Constant (const byte) main::idx#0 = 0
Constant (const byte[3]) main::ba#0 = { fill( 3, 0) }
Constant (const word[3]) main::wa#0 = { fill( 3, 0) }
Constant (const byte) main::sz#0 = 7
Constant (const word[]) main::wb#0 = { 1, 2, 3, 4 }
Constant (const byte[]) main::sa#0 = main::$19
Constant (const byte[]) main::sb#0 = { 'a', 'b', 'c', 0 }
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN#0 in [6] *((const byte*) SCREEN#0 + (const byte) main::idx#0) ← (byte~) main::$2
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte) main::idx#6 and assignment [31] (byte) main::idx#6 ← ++ (byte) main::idx#5
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [0] (byte~) main::$0 ← sizeof  (const byte[3]) main::ba#0
Constant right-side identified [4] (byte) main::idx#1 ← ++ (const byte) main::idx#0
Constant right-side identified [5] (byte~) main::$3 ← sizeof  (const word[3]) main::wa#0
Constant right-side identified [10] (byte~) main::$6 ← (const byte) main::sz#0 + (byte) 2
Constant right-side identified [17] (byte~) main::$10 ← sizeof  (const word[]) main::wb#0
Constant right-side identified [22] (byte~) main::$13 ← sizeof  (const byte[]) main::sa#0
Constant right-side identified [27] (byte~) main::$16 ← sizeof  (const byte[]) main::sb#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::$0 = sizeof main::ba#0
Constant (const byte) main::idx#1 = ++main::idx#0
Constant (const byte) main::$3 = sizeof main::wa#0
Constant (const byte) main::$6 = main::sz#0+2
Constant (const byte) main::$10 = sizeof main::wb#0
Constant (const byte) main::$13 = sizeof main::sa#0
Constant (const byte) main::$16 = sizeof main::sb#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified { fill( main::$6, 0) } in [11] (byte[main::$6]) main::bb#0 ← { fill( main::$6, 0) }
Successful SSA optimization Pass2ConstantValues
Resolving array sizeof() sizeof (const byte[3]) main::ba#0
Resolving array sizeof() sizeof (const word[3]) main::wa#0
Resolving array sizeof() sizeof (const word[]) main::wb#0
Resolving string sizeof() sizeof (const byte[]) main::sa#0
Resolving array sizeof() sizeof (const byte[]) main::sb#0
Successful SSA optimization PassNSizeOfSimplification
Constant right-side identified [0] (byte~) main::$1 ← (const byte) main::$0 / (const byte) SIZEOF_BYTE
Constant right-side identified [3] (byte~) main::$4 ← (const byte) main::$3 / (const byte) SIZEOF_WORD
Constant right-side identified [6] (byte) main::idx#2 ← ++ (const byte) main::idx#1
Constant right-side identified [13] (byte~) main::$11 ← (const byte) main::$10 / (const byte) SIZEOF_WORD
Constant right-side identified [17] (byte~) main::$14 ← (const byte) main::$13 / (const byte) SIZEOF_BYTE
Constant right-side identified [21] (byte~) main::$17 ← (const byte) main::$16 / (const byte) SIZEOF_BYTE
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::$1 = main::$0/SIZEOF_BYTE
Constant (const byte) main::$4 = main::$3/SIZEOF_WORD
Constant (const byte) main::idx#2 = ++main::idx#1
Constant (const byte[main::$6]) main::bb#0 = { fill( main::$6, 0) }
Constant (const byte) main::$11 = main::$10/SIZEOF_WORD
Constant (const byte) main::$14 = main::$13/SIZEOF_BYTE
Constant (const byte) main::$17 = main::$16/SIZEOF_BYTE
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte[3]) main::ba#0
Eliminating unused constant (const word[3]) main::wa#0
Eliminating unused constant (const word[]) main::wb#0
Eliminating unused constant (const byte[]) main::sa#0
Eliminating unused constant (const byte[]) main::sb#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const string) main::$19
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) 3 in 
Adding number conversion cast (unumber) 3 in 
Adding number conversion cast (unumber) 4 in 
Adding number conversion cast (unumber) 8 in 
Adding number conversion cast (unumber) 4 in 
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 3
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 8
Simplifying constant integer cast 4
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 4
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [0] (byte~) main::$2 ← (byte) '0' + (const byte) main::$1
Constant right-side identified [2] (byte~) main::$5 ← (byte) '0' + (const byte) main::$4
Constant right-side identified [4] (byte~) main::$7 ← sizeof  (const byte[main::$6]) main::bb#0
Constant right-side identified [8] (byte) main::idx#3 ← ++ (const byte) main::idx#2
Constant right-side identified [9] (byte~) main::$12 ← (byte) '0' + (const byte) main::$11
Constant right-side identified [12] (byte~) main::$15 ← (byte) '0' + (const byte) main::$14
Constant right-side identified [15] (byte~) main::$18 ← (byte) '0' + (const byte) main::$17
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::$2 = '0'+main::$1
Constant (const byte) main::$5 = '0'+main::$4
Constant (const byte) main::$7 = sizeof main::bb#0
Constant (const byte) main::idx#3 = ++main::idx#2
Constant (const byte) main::$12 = '0'+main::$11
Constant (const byte) main::$15 = '0'+main::$14
Constant (const byte) main::$18 = '0'+main::$17
Successful SSA optimization Pass2ConstantIdentification
Resolving array sizeof() sizeof (const byte[main::$6]) main::bb#0
Successful SSA optimization PassNSizeOfSimplification
Constant right-side identified [2] (byte~) main::$8 ← (const byte) main::$7 / (const byte) SIZEOF_BYTE
Constant right-side identified [6] (byte) main::idx#4 ← ++ (const byte) main::idx#3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::$8 = main::$7/SIZEOF_BYTE
Constant (const byte) main::idx#4 = ++main::idx#3
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte[main::$6]) main::bb#0
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [2] (byte~) main::$9 ← (byte) '0' + (const byte) main::$8
Constant right-side identified [6] (byte) main::idx#5 ← ++ (const byte) main::idx#4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::$9 = '0'+main::$8
Constant (const byte) main::idx#5 = ++main::idx#4
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings (const byte) main::idx#0
Inlining constant with different constant siblings (const byte) main::idx#1
Inlining constant with different constant siblings (const byte) main::idx#2
Inlining constant with different constant siblings (const byte) main::idx#3
Inlining constant with different constant siblings (const byte) main::idx#4
Inlining constant with different constant siblings (const byte) main::idx#5
Constant inlined main::$12 = (byte) '0'+(byte) 4*(const byte) SIZEOF_WORD/(const byte) SIZEOF_WORD
Constant inlined main::$13 = (byte) 8*(const byte) SIZEOF_BYTE
Constant inlined main::$14 = (byte) 8*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE
Constant inlined main::$15 = (byte) '0'+(byte) 8*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE
Constant inlined main::$10 = (byte) 4*(const byte) SIZEOF_WORD
Constant inlined main::$11 = (byte) 4*(const byte) SIZEOF_WORD/(const byte) SIZEOF_WORD
Constant inlined main::$16 = (byte) 4*(const byte) SIZEOF_BYTE
Constant inlined main::$17 = (byte) 4*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE
Constant inlined main::$18 = (byte) '0'+(byte) 4*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE
Constant inlined main::idx#0 = (byte) 0
Constant inlined main::idx#1 = ++(byte) 0
Constant inlined main::idx#2 = ++++(byte) 0
Constant inlined main::$1 = (byte) 3*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE
Constant inlined main::idx#3 = ++++++(byte) 0
Constant inlined main::$2 = (byte) '0'+(byte) 3*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE
Constant inlined main::idx#4 = ++++++++(byte) 0
Constant inlined main::idx#5 = ++++++++++(byte) 0
Constant inlined main::$0 = (byte) 3*(const byte) SIZEOF_BYTE
Constant inlined main::$5 = (byte) '0'+(byte) 3*(const byte) SIZEOF_WORD/(const byte) SIZEOF_WORD
Constant inlined main::$6 = (const byte) main::sz#0+(byte) 2
Constant inlined main::$3 = (byte) 3*(const byte) SIZEOF_WORD
Constant inlined main::$4 = (byte) 3*(const byte) SIZEOF_WORD/(const byte) SIZEOF_WORD
Constant inlined main::$9 = (byte) '0'+(const byte) main::sz#0+(byte) 2*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE
Constant inlined main::$7 = (const byte) main::sz#0+(byte) 2*(const byte) SIZEOF_BYTE
Constant inlined main::$8 = (const byte) main::sz#0+(byte) 2*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN#0+++0)
Consolidated array index constant in *(SCREEN#0+++++0)
Consolidated array index constant in *(SCREEN#0+++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++0)
Consolidated array index constant in *(SCREEN#0+++++++++++0)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Successful SSA optimization Pass2ConstantSimplification
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] *((const byte*) SCREEN#0) ← (byte) '0'+(byte) 3*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE
  [5] *((const byte*) SCREEN#0+(byte) 1) ← (byte) '0'+(byte) 3*(const byte) SIZEOF_WORD/(const byte) SIZEOF_WORD
  [6] *((const byte*) SCREEN#0+(byte) 2) ← (byte) '0'+(const byte) main::sz#0+(byte) 2*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE
  [7] *((const byte*) SCREEN#0+(byte) 3) ← (byte) '0'+(byte) 4*(const byte) SIZEOF_WORD/(const byte) SIZEOF_WORD
  [8] *((const byte*) SCREEN#0+(byte) 4) ← (byte) '0'+(byte) 8*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE
  [9] *((const byte*) SCREEN#0+(byte) 5) ← (byte) '0'+(byte) 4*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE
  to:main::@return
main::@return: scope:[main]  from main
  [10] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(void()) main()
(byte[3]) main::ba
(byte[main::sz#0+2]) main::bb
(byte) main::idx
(byte[]) main::sa
(byte[]) main::sb
(byte) main::sz
(word[3]) main::wa
(word[]) main::wb

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
//SEG0 File Comments
// Tests the sizeof() operator on arrays
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const SIZEOF_BYTE = 1
  .const SIZEOF_WORD = 2
  .label SCREEN = $400
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .const sz = 7
  //SEG10 [4] *((const byte*) SCREEN#0) ← (byte) '0'+(byte) 3*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+3*SIZEOF_BYTE/SIZEOF_BYTE
    sta SCREEN
  //SEG11 [5] *((const byte*) SCREEN#0+(byte) 1) ← (byte) '0'+(byte) 3*(const byte) SIZEOF_WORD/(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+3*SIZEOF_WORD/SIZEOF_WORD
    sta SCREEN+1
  //SEG12 [6] *((const byte*) SCREEN#0+(byte) 2) ← (byte) '0'+(const byte) main::sz#0+(byte) 2*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+(sz+2)*SIZEOF_BYTE/SIZEOF_BYTE
    sta SCREEN+2
  //SEG13 [7] *((const byte*) SCREEN#0+(byte) 3) ← (byte) '0'+(byte) 4*(const byte) SIZEOF_WORD/(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+4*SIZEOF_WORD/SIZEOF_WORD
    sta SCREEN+3
  //SEG14 [8] *((const byte*) SCREEN#0+(byte) 4) ← (byte) '0'+(byte) 8*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+8*SIZEOF_BYTE/SIZEOF_BYTE
    sta SCREEN+4
  //SEG15 [9] *((const byte*) SCREEN#0+(byte) 5) ← (byte) '0'+(byte) 4*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+4*SIZEOF_BYTE/SIZEOF_BYTE
    sta SCREEN+5
    jmp breturn
  //SEG16 main::@return
  breturn:
  //SEG17 [10] return 
    rts
}
//SEG18 File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) SCREEN#0) ← (byte) '0'+(byte) 3*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) SCREEN#0+(byte) 1) ← (byte) '0'+(byte) 3*(const byte) SIZEOF_WORD/(const byte) SIZEOF_WORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) SCREEN#0+(byte) 2) ← (byte) '0'+(const byte) main::sz#0+(byte) 2*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) SCREEN#0+(byte) 3) ← (byte) '0'+(byte) 4*(const byte) SIZEOF_WORD/(const byte) SIZEOF_WORD [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [8] *((const byte*) SCREEN#0+(byte) 4) ← (byte) '0'+(byte) 8*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [9] *((const byte*) SCREEN#0+(byte) 5) ← (byte) '0'+(byte) 4*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 57 combination 
Uplifting [] best 57 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Tests the sizeof() operator on arrays
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const SIZEOF_BYTE = 1
  .const SIZEOF_WORD = 2
  .label SCREEN = $400
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .const sz = 7
  //SEG10 [4] *((const byte*) SCREEN#0) ← (byte) '0'+(byte) 3*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+3*SIZEOF_BYTE/SIZEOF_BYTE
    sta SCREEN
  //SEG11 [5] *((const byte*) SCREEN#0+(byte) 1) ← (byte) '0'+(byte) 3*(const byte) SIZEOF_WORD/(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+3*SIZEOF_WORD/SIZEOF_WORD
    sta SCREEN+1
  //SEG12 [6] *((const byte*) SCREEN#0+(byte) 2) ← (byte) '0'+(const byte) main::sz#0+(byte) 2*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+(sz+2)*SIZEOF_BYTE/SIZEOF_BYTE
    sta SCREEN+2
  //SEG13 [7] *((const byte*) SCREEN#0+(byte) 3) ← (byte) '0'+(byte) 4*(const byte) SIZEOF_WORD/(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+4*SIZEOF_WORD/SIZEOF_WORD
    sta SCREEN+3
  //SEG14 [8] *((const byte*) SCREEN#0+(byte) 4) ← (byte) '0'+(byte) 8*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+8*SIZEOF_BYTE/SIZEOF_BYTE
    sta SCREEN+4
  //SEG15 [9] *((const byte*) SCREEN#0+(byte) 5) ← (byte) '0'+(byte) 4*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+4*SIZEOF_BYTE/SIZEOF_BYTE
    sta SCREEN+5
    jmp breturn
  //SEG16 main::@return
  breturn:
  //SEG17 [10] return 
    rts
}
//SEG18 File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (byte*) 1024
(const byte) SIZEOF_BYTE SIZEOF_BYTE = (byte) 1
(const byte) SIZEOF_WORD SIZEOF_WORD = (byte) 2
(void()) main()
(label) main::@return
(byte[3]) main::ba
(byte[main::sz#0+2]) main::bb
(byte) main::idx
(byte[]) main::sa
(byte[]) main::sb
(byte) main::sz
(const byte) main::sz#0 sz = (byte) 7
(word[3]) main::wa
(word[]) main::wb



FINAL ASSEMBLER
Score: 42

//SEG0 File Comments
// Tests the sizeof() operator on arrays
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .const SIZEOF_BYTE = 1
  .const SIZEOF_WORD = 2
  .label SCREEN = $400
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
    .const sz = 7
  //SEG10 [4] *((const byte*) SCREEN#0) ← (byte) '0'+(byte) 3*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+3*SIZEOF_BYTE/SIZEOF_BYTE
    sta SCREEN
  //SEG11 [5] *((const byte*) SCREEN#0+(byte) 1) ← (byte) '0'+(byte) 3*(const byte) SIZEOF_WORD/(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+3*SIZEOF_WORD/SIZEOF_WORD
    sta SCREEN+1
  //SEG12 [6] *((const byte*) SCREEN#0+(byte) 2) ← (byte) '0'+(const byte) main::sz#0+(byte) 2*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+(sz+2)*SIZEOF_BYTE/SIZEOF_BYTE
    sta SCREEN+2
  //SEG13 [7] *((const byte*) SCREEN#0+(byte) 3) ← (byte) '0'+(byte) 4*(const byte) SIZEOF_WORD/(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+4*SIZEOF_WORD/SIZEOF_WORD
    sta SCREEN+3
  //SEG14 [8] *((const byte*) SCREEN#0+(byte) 4) ← (byte) '0'+(byte) 8*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+8*SIZEOF_BYTE/SIZEOF_BYTE
    sta SCREEN+4
  //SEG15 [9] *((const byte*) SCREEN#0+(byte) 5) ← (byte) '0'+(byte) 4*(const byte) SIZEOF_BYTE/(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+4*SIZEOF_BYTE/SIZEOF_BYTE
    sta SCREEN+5
  //SEG16 main::@return
  //SEG17 [10] return 
    rts
}
//SEG18 File Data

