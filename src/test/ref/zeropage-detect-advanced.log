Setting inferred volatile on symbol affected by address-of (dword*~) main::$0 ← & (dword) main::t

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (dword) main::t#0 ← (dword) 0
  (dword*~) main::$0 ← & (dword) main::t#0
  (byte*~) main::$1 ← ((byte*)) (dword*~) main::$0
  (byte*) main::c#0 ← (byte*~) main::$1
  (byte*~) main::$2 ← ((byte*)) (number) $400
  *((byte*~) main::$2) ← *((byte*) main::c#0 + (number) 0)
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(dword*~) main::$0
(byte*~) main::$1
(byte*~) main::$2
(label) main::@return
(byte*) main::c
(byte*) main::c#0
(dword) main::t
(dword) main::t#0

Adding number conversion cast (unumber) 0 in *((byte*~) main::$2) ← *((byte*) main::c#0 + (number) 0)
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*~) main::$1 ← (byte*)(dword*~) main::$0
Inlining cast (byte*~) main::$2 ← (byte*)(number) $400
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (byte*) main::c#0 = (byte*~) main::$1 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [1] (dword*~) main::$0 ← & (dword) main::t#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const dword*) main::$0 = &main::t#0
Constant (const byte*) main::$2 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) main::c#0 = (byte*)main::$0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::c#0 in [5] *((const byte*) main::$2) ← *((const byte*) main::c#0 + (byte) 0)
Successful SSA optimization PassNSimplifyExpressionWithZero
Constant inlined main::$2 = (byte*) 1024
Constant inlined main::$0 = &(dword) main::t#0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] (dword) main::t#0 ← (dword) 0
  [5] *((byte*) 1024) ← *((const byte*) main::c#0)
  to:main::@return
main::@return: scope:[main]  from main
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte*) main::c
(dword) main::t
(dword) main::t#0 20.0

Initial phi equivalence classes
Complete equivalence classes
[ main::t#0 ]
Allocated zp[4]:2 [ main::t#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Illustrates a problem where absolute addressing is used for zeropage-access
// This is caused by the compiler believing the pointer is into memory" (not knowing the upper part is 0x00 )
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label c = t
    .label t = 2
    // [4] (dword) main::t#0 ← (dword) 0 -- vduz1=vduc1 
    lda #<0
    sta.z t
    lda #>0
    sta.z t+1
    lda #<0>>$10
    sta.z t+2
    lda #>0>>$10
    sta.z t+3
    // [5] *((byte*) 1024) ← *((const byte*) main::c#0) -- _deref_pbuc1=_deref_pbuc2 
    lda.z c
    sta $400
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] (dword) main::t#0 ← (dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((byte*) 1024) ← *((const byte*) main::c#0) [ ] ( main:2 [ ] ) always clobbers reg byte a 
Potential registers zp[4]:2 [ main::t#0 ] : zp[4]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 20: zp[4]:2 [ main::t#0 ] 
Uplift Scope [] 

Uplifting [main] best 48 combination zp[4]:2 [ main::t#0 ] 
Uplifting [] best 48 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Illustrates a problem where absolute addressing is used for zeropage-access
// This is caused by the compiler believing the pointer is into memory" (not knowing the upper part is 0x00 )
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label c = t
    .label t = 2
    // [4] (dword) main::t#0 ← (dword) 0 -- vduz1=vduc1 
    lda #<0
    sta.z t
    lda #>0
    sta.z t+1
    lda #<0>>$10
    sta.z t+2
    lda #>0>>$10
    sta.z t+3
    // [5] *((byte*) 1024) ← *((const byte*) main::c#0) -- _deref_pbuc1=_deref_pbuc2 
    lda.z c
    sta $400
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __bbegin with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@return
(byte*) main::c
(const byte*) main::c#0 c = (byte*)&(dword) main::t#0
(dword) main::t
(dword) main::t#0 t zp[4]:2 20.0

zp[4]:2 [ main::t#0 ]


FINAL ASSEMBLER
Score: 31

  // File Comments
// Illustrates a problem where absolute addressing is used for zeropage-access
// This is caused by the compiler believing the pointer is into memory" (not knowing the upper part is 0x00 )
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label c = t
    .label t = 2
    // t
    // [4] (dword) main::t#0 ← (dword) 0 -- vduz1=vduc1 
    lda #<0
    sta.z t
    sta.z t+1
    lda #<0>>$10
    sta.z t+2
    lda #>0>>$10
    sta.z t+3
    // *(unsigned char *)0x0400 = c[0]
    // [5] *((byte*) 1024) ← *((const byte*) main::c#0) -- _deref_pbuc1=_deref_pbuc2 
    lda.z c
    sta $400
    // main::@return
    // }
    // [6] return 
    rts
}
  // File Data

