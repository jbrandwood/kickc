Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  (byte) idx#15 ← phi( _start::@1/(byte) idx#16 )
  (byte) out::c#0 ← (byte) 'c'
  call out 
  to:main::@1
main::@1: scope:[main]  from main
  (byte) idx#8 ← phi( main/(byte) idx#4 )
  (byte) idx#0 ← (byte) idx#8
  (byte) out::c#1 ← (byte) 'm'
  call out 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) idx#9 ← phi( main::@1/(byte) idx#4 )
  (byte) idx#1 ← (byte) idx#9
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte) idx#10 ← phi( main::@2/(byte) idx#1 )
  (byte) idx#2 ← (byte) idx#10
  return 
  to:@return

(void()) out((byte) out::c)
out: scope:[out]  from main main::@1
  (byte) idx#11 ← phi( main/(byte) idx#15 main::@1/(byte) idx#0 )
  (byte) out::c#2 ← phi( main/(byte) out::c#0 main::@1/(byte) out::c#1 )
  *((const nomodify byte*) SCREEN + (byte) idx#11) ← (byte) out::c#2
  (byte) idx#3 ← ++ (byte) idx#11
  to:out::@return
out::@return: scope:[out]  from out
  (byte) idx#12 ← phi( out/(byte) idx#3 )
  (byte) idx#4 ← (byte) idx#12
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (byte) idx#5 ← (byte) 0
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  (byte) idx#16 ← phi( _start::_init1/(byte) idx#5 )
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  (byte) idx#13 ← phi( _start::@1/(byte) idx#2 )
  (byte) idx#6 ← (byte) idx#13
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  (byte) idx#14 ← phi( _start::@2/(byte) idx#6 )
  (byte) idx#7 ← (byte) idx#14
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(byte) idx
(byte) idx#0
(byte) idx#1
(byte) idx#10
(byte) idx#11
(byte) idx#12
(byte) idx#13
(byte) idx#14
(byte) idx#15
(byte) idx#16
(byte) idx#2
(byte) idx#3
(byte) idx#4
(byte) idx#5
(byte) idx#6
(byte) idx#7
(byte) idx#8
(byte) idx#9
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(void()) out((byte) out::c)
(label) out::@return
(byte) out::c
(byte) out::c#0
(byte) out::c#1
(byte) out::c#2

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Alias idx#0 = idx#8 
Alias idx#1 = idx#9 idx#10 idx#2 
Alias idx#12 = idx#3 idx#4 
Alias idx#16 = idx#5 
Alias idx#13 = idx#6 idx#14 idx#7 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) idx#15 (byte) idx#16
Identical Phi Values (byte) idx#0 (byte) idx#12
Identical Phi Values (byte) idx#1 (byte) idx#12
Identical Phi Values (byte) idx#13 (byte) idx#1
Successful SSA optimization Pass2IdenticalPhiElimination
Constant (const byte) out::c#0 = 'c'
Constant (const byte) out::c#1 = 'm'
Constant (const byte) idx#16 = 0
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings (const byte) out::c#0
Inlining constant with var siblings (const byte) out::c#1
Inlining constant with var siblings (const byte) idx#16
Constant inlined out::c#0 = (byte) 'c'
Constant inlined out::c#1 = (byte) 'm'
Constant inlined idx#16 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
CALL GRAPH
Calls in [main] to out:1 out:3 

Created 2 initial phi equivalence classes
Coalesced [2] idx#17 ← idx#12
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) main::@2
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call out 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call out 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return

(void()) out((byte) out::c)
out: scope:[out]  from main main::@1
  [5] (byte) idx#11 ← phi( main/(byte) 0 main::@1/(byte) idx#12 )
  [5] (byte) out::c#2 ← phi( main/(byte) 'c' main::@1/(byte) 'm' )
  [6] *((const nomodify byte*) SCREEN + (byte) idx#11) ← (byte) out::c#2
  [7] (byte) idx#12 ← ++ (byte) idx#11
  to:out::@return
out::@return: scope:[out]  from out
  [8] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) idx
(byte) idx#11 12.0
(byte) idx#12 3.25
(void()) main()
(void()) out((byte) out::c)
(byte) out::c
(byte) out::c#2 11.0

Initial phi equivalence classes
[ out::c#2 ]
[ idx#11 idx#12 ]
Complete equivalence classes
[ out::c#2 ]
[ idx#11 idx#12 ]
Allocated zp[1]:2 [ out::c#2 ]
Allocated zp[1]:3 [ idx#11 idx#12 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test propagation of live ranges back over PHI-calls
// The idx-variable is alive between the two calls to out() - but not before the first call.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label idx = 3
  // main
main: {
    // [1] call out 
    // [5] phi from main to out [phi:main->out]
  out_from_main:
    // [5] phi (byte) idx#11 = (byte) 0 [phi:main->out#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [5] phi (byte) out::c#2 = (byte) 'c' [phi:main->out#1] -- vbuz1=vbuc1 
    lda #'c'
    sta.z out.c
    jsr out
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call out 
    // [5] phi from main::@1 to out [phi:main::@1->out]
  out_from___b1:
    // [5] phi (byte) idx#11 = (byte) idx#12 [phi:main::@1->out#0] -- register_copy 
    // [5] phi (byte) out::c#2 = (byte) 'm' [phi:main::@1->out#1] -- vbuz1=vbuc1 
    lda #'m'
    sta.z out.c
    jsr out
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // out
// out(byte zp(2) c)
out: {
    .label c = 2
    // [6] *((const nomodify byte*) SCREEN + (byte) idx#11) ← (byte) out::c#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z c
    ldy.z idx
    sta SCREEN,y
    // [7] (byte) idx#12 ← ++ (byte) idx#11 -- vbuz1=_inc_vbuz1 
    inc.z idx
    jmp __breturn
    // out::@return
  __breturn:
    // [8] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ out::c#2 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ idx#11 idx#12 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 15.25: zp[1]:3 [ idx#11 idx#12 ] 
Uplift Scope [out] 11: zp[1]:2 [ out::c#2 ] 
Uplift Scope [main] 

Uplifting [] best 55 combination reg byte x [ idx#11 idx#12 ] 
Uplifting [out] best 46 combination reg byte a [ out::c#2 ] 
Uplifting [main] best 46 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test propagation of live ranges back over PHI-calls
// The idx-variable is alive between the two calls to out() - but not before the first call.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] call out 
    // [5] phi from main to out [phi:main->out]
  out_from_main:
    // [5] phi (byte) idx#11 = (byte) 0 [phi:main->out#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi (byte) out::c#2 = (byte) 'c' [phi:main->out#1] -- vbuaa=vbuc1 
    lda #'c'
    jsr out
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call out 
    // [5] phi from main::@1 to out [phi:main::@1->out]
  out_from___b1:
    // [5] phi (byte) idx#11 = (byte) idx#12 [phi:main::@1->out#0] -- register_copy 
    // [5] phi (byte) out::c#2 = (byte) 'm' [phi:main::@1->out#1] -- vbuaa=vbuc1 
    lda #'m'
    jsr out
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // out
// out(byte register(A) c)
out: {
    // [6] *((const nomodify byte*) SCREEN + (byte) idx#11) ← (byte) out::c#2 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // [7] (byte) idx#12 ← ++ (byte) idx#11 -- vbuxx=_inc_vbuxx 
    inx
    jmp __breturn
    // out::@return
  __breturn:
    // [8] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Removing instruction out_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction out_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify byte*) SCREEN = (byte*) 1024
(byte) idx
(byte) idx#11 reg byte x 12.0
(byte) idx#12 reg byte x 3.25
(void()) main()
(label) main::@1
(label) main::@return
(void()) out((byte) out::c)
(label) out::@return
(byte) out::c
(byte) out::c#2 reg byte a 11.0

reg byte a [ out::c#2 ]
reg byte x [ idx#11 idx#12 ]


FINAL ASSEMBLER
Score: 37

  // File Comments
// Test propagation of live ranges back over PHI-calls
// The idx-variable is alive between the two calls to out() - but not before the first call.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // out('c')
    // [1] call out 
    // [5] phi from main to out [phi:main->out]
    // [5] phi (byte) idx#11 = (byte) 0 [phi:main->out#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi (byte) out::c#2 = (byte) 'c' [phi:main->out#1] -- vbuaa=vbuc1 
    lda #'c'
    jsr out
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // out('m')
    // [3] call out 
    // [5] phi from main::@1 to out [phi:main::@1->out]
    // [5] phi (byte) idx#11 = (byte) idx#12 [phi:main::@1->out#0] -- register_copy 
    // [5] phi (byte) out::c#2 = (byte) 'm' [phi:main::@1->out#1] -- vbuaa=vbuc1 
    lda #'m'
    jsr out
    // main::@return
    // }
    // [4] return 
    rts
}
  // out
// out(byte register(A) c)
out: {
    // SCREEN[idx++] = c
    // [6] *((const nomodify byte*) SCREEN + (byte) idx#11) ← (byte) out::c#2 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // SCREEN[idx++] = c;
    // [7] (byte) idx#12 ← ++ (byte) idx#11 -- vbuxx=_inc_vbuxx 
    inx
    // out::@return
    // }
    // [8] return 
    rts
}
  // File Data

