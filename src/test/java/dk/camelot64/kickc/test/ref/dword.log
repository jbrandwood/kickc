PARSING src/test/java/dk/camelot64/kickc/test/kc/dword.kc


void main() {
    dword a = 100000;
    for( byte i: 0..100) {
        dword b = a + i;
        byte c = (byte) b;
        const byte* SCREEN = $400;
        SCREEN[i] = c;
    }
}

STATEMENTS
proc (void()) main()
  (dword) main::a ← (dword/signed dword) 100000
  (byte) main::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
main::@1:
  (dword~) main::$0 ← (dword) main::a + (byte) main::i
  (dword) main::b ← (dword~) main::$0
  (byte~) main::$1 ← ((byte)) (dword) main::b
  (byte) main::c ← (byte~) main::$1
  (byte*) main::SCREEN ← (word/signed word/dword/signed dword) 1024
  *((byte*) main::SCREEN + (byte) main::i) ← (byte) main::c
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$2 ← (byte) main::i != (byte/signed byte/word/signed word/dword/signed dword) 101
  if((boolean~) main::$2) goto main::@1
main::@return:
  return 
endproc // main()
  call main 

SYMBOLS
(void()) main()
(dword~) main::$0
(byte~) main::$1
(boolean~) main::$2
(label) main::@1
(label) main::@return
(byte*) main::SCREEN
(dword) main::a
(dword) main::b
(byte) main::c
(byte) main::i

Promoting word/signed word/dword/signed dword to byte* in main::SCREEN ← ((byte*)) 1024
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from
  (dword) main::a ← (dword/signed dword) 100000
  (byte) main::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (dword~) main::$0 ← (dword) main::a + (byte) main::i
  (dword) main::b ← (dword~) main::$0
  (byte~) main::$1 ← ((byte)) (dword) main::b
  (byte) main::c ← (byte~) main::$1
  (byte*) main::SCREEN ← ((byte*)) (word/signed word/dword/signed dword) 1024
  *((byte*) main::SCREEN + (byte) main::i) ← (byte) main::c
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$2 ← (byte) main::i != (byte/signed byte/word/signed word/dword/signed dword) 101
  if((boolean~) main::$2) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

Removing empty block main::@2
PROCEDURE MODIFY VARIABLE ANALYSIS

Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (dword) main::a#0 ← (dword/signed dword) 100000
  (byte) main::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (dword) main::a#1 ← phi( main/(dword) main::a#0 main::@1/(dword) main::a#1 )
  (dword~) main::$0 ← (dword) main::a#1 + (byte) main::i#2
  (dword) main::b#0 ← (dword~) main::$0
  (byte~) main::$1 ← ((byte)) (dword) main::b#0
  (byte) main::c#0 ← (byte~) main::$1
  (byte*) main::SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  *((byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::c#0
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$2 ← (byte) main::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 101
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(dword~) main::$0
(byte~) main::$1
(boolean~) main::$2
(label) main::@1
(label) main::@return
(byte*) main::SCREEN
(byte*) main::SCREEN#0
(dword) main::a
(dword) main::a#0
(dword) main::a#1
(dword) main::b
(dword) main::b#0
(byte) main::c
(byte) main::c#0
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2

OPTIMIZING CONTROL FLOW GRAPH
Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
Alias (dword) main::b#0 = (dword~) main::$0 
Alias (byte) main::c#0 = (byte~) main::$1 
Succesful SSA optimization Pass2AliasElimination
Self Phi Eliminated (dword) main::a#1
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (dword) main::a#1 (dword) main::a#0
Succesful SSA optimization Pass2RedundantPhiElimination
Simple Condition (boolean~) main::$2 if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 101) goto main::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
Constant (const dword) main::a#0 = 100000
Constant (const byte) main::i#0 = 0
Constant (const byte*) main::SCREEN#0 = ((byte*))1024
Succesful SSA optimization Pass2ConstantIdentification
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
OPTIMIZING CONTROL FLOW GRAPH
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @1 @end main main::@1 main::@return 
Added new block during phi lifting main::@3(between main::@1 and main::@1)
Block Sequence Planned @begin @1 @end main main::@1 main::@return main::@3 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 1 initial phi equivalence classes
Coalesced [12] main::i#3 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) main::@3
Block Sequence Planned @begin @1 @end main main::@1 main::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ] ( )
main: scope:[main]  from @1
  [4] phi() [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@1/(byte) main::i#1 ) [ main::i#2 ] ( main:2 [ main::i#2 ] )
  [6] (dword) main::b#0 ← (const dword) main::a#0 + (byte) main::i#2 [ main::i#2 main::b#0 ] ( main:2 [ main::i#2 main::b#0 ] )
  [7] (byte) main::c#0 ← ((byte)) (dword) main::b#0 [ main::i#2 main::c#0 ] ( main:2 [ main::i#2 main::c#0 ] )
  [8] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::c#0 [ main::i#2 ] ( main:2 [ main::i#2 ] )
  [9] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] )
  [10] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 101) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] )
  to:main::@return
main::@return: scope:[main]  from main::@1
  [11] return  [ ] ( main:2 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@1 dominated by  @1 @begin 
@end dominated by  @1 @begin @end 
main dominated by  @1 @begin main 
main::@1 dominated by  @1 @begin main::@1 main 
main::@return dominated by  main::@return @1 @begin main::@1 main 

NATURAL LOOPS
Found back edge: Loop head: main::@1 tails: main::@1 blocks: null
Populated: Loop head: main::@1 tails: main::@1 blocks: main::@1 
Loop head: main::@1 tails: main::@1 blocks: main::@1 

NATURAL LOOPS WITH DEPTH
Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@1 blocks: main::@1 
Loop head: main::@1 tails: main::@1 blocks: main::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte*) main::SCREEN
(dword) main::a
(dword) main::b
(dword) main::b#0 22.0
(byte) main::c
(byte) main::c#0 22.0
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 11.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::b#0 to zero page equivalence class [ main::b#0 ]
Added variable main::c#0 to zero page equivalence class [ main::c#0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::b#0 ]
[ main::c#0 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_DWORD:3 [ main::b#0 ]
Allocated zp ZP_BYTE:7 [ main::c#0 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .const a = $186a0
    .const SCREEN = $400
    .label b = 3
    .label c = 7
    .label i = 2
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG12 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG13 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [6] (dword) main::b#0 ← (const dword) main::a#0 + (byte) main::i#2 [ main::i#2 main::b#0 ] ( main:2 [ main::i#2 main::b#0 ] ) -- vluz1=vluc1_plus_vbuz2 
    lda i
    clc
    adc #<a
    sta b
    lda #>a
    adc #0
    sta b+1
    lda #<a>>$10
    adc #0
    sta b+2
    lda #>a>>$10
    adc #0
    sta b+3
  //SEG16 [7] (byte) main::c#0 ← ((byte)) (dword) main::b#0 [ main::i#2 main::c#0 ] ( main:2 [ main::i#2 main::c#0 ] ) -- vbuz1=_byte_vluz2 
    lda b
    sta c
  //SEG17 [8] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::c#0 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda c
    ldy i
    sta SCREEN,y
  //SEG18 [9] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG19 [10] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 101) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$65
    bne b1_from_b1
    jmp breturn
  //SEG20 main::@return
  breturn:
  //SEG21 [11] return  [ ] ( main:2 [ ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] (dword) main::b#0 ← (const dword) main::a#0 + (byte) main::i#2 [ main::i#2 main::b#0 ] ( main:2 [ main::i#2 main::b#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [7] (byte) main::c#0 ← ((byte)) (dword) main::b#0 [ main::i#2 main::c#0 ] ( main:2 [ main::i#2 main::c#0 ] ) always clobbers reg byte a 
Statement [6] (dword) main::b#0 ← (const dword) main::a#0 + (byte) main::i#2 [ main::i#2 main::b#0 ] ( main:2 [ main::i#2 main::b#0 ] ) always clobbers reg byte a 
Statement [7] (byte) main::c#0 ← ((byte)) (dword) main::b#0 [ main::i#2 main::c#0 ] ( main:2 [ main::i#2 main::c#0 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_DWORD:3 [ main::b#0 ] : zp ZP_DWORD:3 , 
Potential registers zp ZP_BYTE:7 [ main::c#0 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 27.5: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 22: zp ZP_DWORD:3 [ main::b#0 ] 22: zp ZP_BYTE:7 [ main::c#0 ] 
Uplift Scope [] 

Uplifting [main] best 573 combination reg byte x [ main::i#2 main::i#1 ] zp ZP_DWORD:3 [ main::b#0 ] reg byte a [ main::c#0 ] 
Uplifting [] best 573 combination 
Allocated (was zp ZP_DWORD:3) zp ZP_DWORD:2 [ main::b#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .const a = $186a0
    .const SCREEN = $400
    .label b = 2
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG12 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG13 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [6] (dword) main::b#0 ← (const dword) main::a#0 + (byte) main::i#2 [ main::i#2 main::b#0 ] ( main:2 [ main::i#2 main::b#0 ] ) -- vluz1=vluc1_plus_vbuxx 
    txa
    clc
    adc #<a
    sta b
    lda #>a
    adc #0
    sta b+1
    lda #<a>>$10
    adc #0
    sta b+2
    lda #>a>>$10
    adc #0
    sta b+3
  //SEG16 [7] (byte) main::c#0 ← ((byte)) (dword) main::b#0 [ main::i#2 main::c#0 ] ( main:2 [ main::i#2 main::c#0 ] ) -- vbuaa=_byte_vluz1 
    lda b
  //SEG17 [8] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::c#0 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
  //SEG18 [9] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG19 [10] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 101) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$65
    bne b1_from_b1
    jmp breturn
  //SEG20 main::@return
  breturn:
  //SEG21 [11] return  [ ] ( main:2 [ ] )
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction b1_from_bbegin:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b1:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@return
(byte*) main::SCREEN
(const byte*) main::SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) 1024
(dword) main::a
(const dword) main::a#0 a = (dword/signed dword) 100000
(dword) main::b
(dword) main::b#0 b zp ZP_DWORD:2 22.0
(byte) main::c
(byte) main::c#0 reg byte a 22.0
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 11.0

reg byte x [ main::i#2 main::i#1 ]
zp ZP_DWORD:2 [ main::b#0 ]
reg byte a [ main::c#0 ]


FINAL ASSEMBLER
Score: 477

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
    .const a = $186a0
    .const SCREEN = $400
    .label b = 2
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG12 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG13 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG14 main::@1
  b1:
  //SEG15 [6] (dword) main::b#0 ← (const dword) main::a#0 + (byte) main::i#2 [ main::i#2 main::b#0 ] ( main:2 [ main::i#2 main::b#0 ] ) -- vluz1=vluc1_plus_vbuxx 
    txa
    clc
    adc #<a
    sta b
    lda #>a
    adc #0
    sta b+1
    lda #<a>>$10
    adc #0
    sta b+2
    lda #>a>>$10
    adc #0
    sta b+3
  //SEG16 [7] (byte) main::c#0 ← ((byte)) (dword) main::b#0 [ main::i#2 main::c#0 ] ( main:2 [ main::i#2 main::c#0 ] ) -- vbuaa=_byte_vluz1 
    lda b
  //SEG17 [8] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::c#0 [ main::i#2 ] ( main:2 [ main::i#2 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
  //SEG18 [9] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG19 [10] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 101) goto main::@1 [ main::i#1 ] ( main:2 [ main::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$65
    bne b1
  //SEG20 main::@return
  //SEG21 [11] return  [ ] ( main:2 [ ] )
    rts
}

