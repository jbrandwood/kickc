
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (bool~) main::$0 ← (number) 0 != *((const byte*) MESSAGE + (byte) main::i#2)
  if((bool~) main::$0) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  *((const nomodify byte*) DEFAULT_SCREEN + (byte) main::i#3) ← *((const byte*) MESSAGE + (byte) main::i#3)
  *((const nomodify byte*) DEFAULT_COLORRAM + (byte) main::i#3) ← (const nomodify byte) RED
  (byte) main::i#1 ← ++ (byte) main::i#3
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) DEFAULT_COLORRAM = (byte*)(number) $9600
(const nomodify byte*) DEFAULT_SCREEN = (byte*)(number) $1e00
(const byte*) MESSAGE[]  = (byte*) "hello world!"
(byte) MOS6522_VIA::AUX_CONTROL
(byte) MOS6522_VIA::INTERRUPT_ENABLE
(byte) MOS6522_VIA::INTERRUPT_FLAG
(byte) MOS6522_VIA::PERIPHERAL_CONTROL
(byte) MOS6522_VIA::PORT_A
(byte) MOS6522_VIA::PORT_A_DDR
(byte) MOS6522_VIA::PORT_A_OUTPUT
(byte) MOS6522_VIA::PORT_B
(byte) MOS6522_VIA::PORT_B_DDR
(byte) MOS6522_VIA::SHIFT
(byte) MOS6522_VIA::TIMER1_HIGH
(byte) MOS6522_VIA::TIMER1_LATCH_HIGH
(byte) MOS6522_VIA::TIMER1_LATCH_LOW
(byte) MOS6522_VIA::TIMER1_LOW
(byte) MOS6522_VIA::TIMER2_HIGH
(byte) MOS6522_VIA::TIMER2_LOW
(byte) MOS6561_VIC::BORDER_BACKGROUND_COLOR
(byte) MOS6561_VIC::CH1_FREQ
(byte) MOS6561_VIC::CH2_FREQ
(byte) MOS6561_VIC::CH3_FREQ
(byte) MOS6561_VIC::CH4_FREQ
(byte) MOS6561_VIC::LIGHTPEN_X
(byte) MOS6561_VIC::LIGHTPEN_Y
(byte) MOS6561_VIC::MATRIX_COLUMNS
(byte) MOS6561_VIC::MATRIX_ROWS
(byte) MOS6561_VIC::MEMORY
(byte) MOS6561_VIC::ORIGIN_X
(byte) MOS6561_VIC::ORIGIN_Y
(byte) MOS6561_VIC::PADDLE_X
(byte) MOS6561_VIC::PADDLE_Y
(byte) MOS6561_VIC::RASTER
(byte) MOS6561_VIC::VOLUME_COLOR
(const nomodify byte) RED = (byte) 2
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(bool~) main::$0
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3

Adding number conversion cast (unumber) 0 in (bool~) main::$0 ← (number) 0 != *((const byte*) MESSAGE + (byte) main::i#2)
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 38400
Simplifying constant pointer cast (byte*) 7680
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$0 [3] if((byte) 0!=*((const byte*) MESSAGE + (byte) main::i#2)) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [7] main::i#4 ← main::i#1
Coalesced down to 1 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  [2] if((byte) 0!=*((const byte*) MESSAGE + (byte) main::i#2)) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [3] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [4] *((const nomodify byte*) DEFAULT_SCREEN + (byte) main::i#2) ← *((const byte*) MESSAGE + (byte) main::i#2)
  [5] *((const nomodify byte*) DEFAULT_COLORRAM + (byte) main::i#2) ← (const nomodify byte) RED
  [6] (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@1


VARIABLE REGISTER WEIGHTS
(byte) MOS6522_VIA::AUX_CONTROL
(byte) MOS6522_VIA::INTERRUPT_ENABLE
(byte) MOS6522_VIA::INTERRUPT_FLAG
(byte) MOS6522_VIA::PERIPHERAL_CONTROL
(byte) MOS6522_VIA::PORT_A
(byte) MOS6522_VIA::PORT_A_DDR
(byte) MOS6522_VIA::PORT_A_OUTPUT
(byte) MOS6522_VIA::PORT_B
(byte) MOS6522_VIA::PORT_B_DDR
(byte) MOS6522_VIA::SHIFT
(byte) MOS6522_VIA::TIMER1_HIGH
(byte) MOS6522_VIA::TIMER1_LATCH_HIGH
(byte) MOS6522_VIA::TIMER1_LATCH_LOW
(byte) MOS6522_VIA::TIMER1_LOW
(byte) MOS6522_VIA::TIMER2_HIGH
(byte) MOS6522_VIA::TIMER2_LOW
(byte) MOS6561_VIC::BORDER_BACKGROUND_COLOR
(byte) MOS6561_VIC::CH1_FREQ
(byte) MOS6561_VIC::CH2_FREQ
(byte) MOS6561_VIC::CH3_FREQ
(byte) MOS6561_VIC::CH4_FREQ
(byte) MOS6561_VIC::LIGHTPEN_X
(byte) MOS6561_VIC::LIGHTPEN_Y
(byte) MOS6561_VIC::MATRIX_COLUMNS
(byte) MOS6561_VIC::MATRIX_ROWS
(byte) MOS6561_VIC::MEMORY
(byte) MOS6561_VIC::ORIGIN_X
(byte) MOS6561_VIC::ORIGIN_Y
(byte) MOS6561_VIC::PADDLE_X
(byte) MOS6561_VIC::PADDLE_Y
(byte) MOS6561_VIC::RASTER
(byte) MOS6561_VIC::VOLUME_COLOR
(void()) main()
(byte) main::i
(byte) main::i#1 22.0
(byte) main::i#2 16.5

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]

INITIAL ASM
Target platform is vic20 / MOS6502X
  // File Comments
// Trivial VIC 20 program
// Commodore VIC 20 registers and memory layout
// http://sleepingelephant.com/denial/wiki/index.php?title=Memory_Map
// http://www.zimmers.net/anonftp/pub/cbm/vic20/manuals/VIC-20_Programmers_Reference_Guide_1st_Edition_6th_Printing.pdf
// MOS 6560/6561 VIDEO INTERFACE CHIP
// Used in VIC 20
// http://archive.6502.org/datasheets/mos_6560_6561_vic.pdf
  // Upstart
  .file [name="vic20-simple.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$1001]
.segmentdef Code [start=$100e]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
.segment Code


  // Global Constants & labels
  .const RED = 2
  // Default address of screen color matrix
  .label DEFAULT_COLORRAM = $9600
  // Default address of screen character matrix
  .label DEFAULT_SCREEN = $1e00
.segment Code
  // main
main: {
    .label i = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // [2] if((byte) 0!=*((const byte*) MESSAGE + (byte) main::i#2)) goto main::@2 -- vbuc1_neq_pbuc2_derefidx_vbuz1_then_la1 
    lda #0
    ldy.z i
    cmp MESSAGE,y
    bne __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
    // main::@2
  __b2:
    // [4] *((const nomodify byte*) DEFAULT_SCREEN + (byte) main::i#2) ← *((const byte*) MESSAGE + (byte) main::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda MESSAGE,y
    sta DEFAULT_SCREEN,y
    // [5] *((const nomodify byte*) DEFAULT_COLORRAM + (byte) main::i#2) ← (const nomodify byte) RED -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #RED
    ldy.z i
    sta DEFAULT_COLORRAM,y
    // [6] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  MESSAGE: .text "hello world!"
  .byte 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] if((byte) 0!=*((const byte*) MESSAGE + (byte) main::i#2)) goto main::@2 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [4] *((const nomodify byte*) DEFAULT_SCREEN + (byte) main::i#2) ← *((const byte*) MESSAGE + (byte) main::i#2) [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [5] *((const nomodify byte*) DEFAULT_COLORRAM + (byte) main::i#2) ← (const nomodify byte) RED [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [2] if((byte) 0!=*((const byte*) MESSAGE + (byte) main::i#2)) goto main::@2 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [4] *((const nomodify byte*) DEFAULT_SCREEN + (byte) main::i#2) ← *((const byte*) MESSAGE + (byte) main::i#2) [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [5] *((const nomodify byte*) DEFAULT_COLORRAM + (byte) main::i#2) ← (const nomodify byte) RED [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 38.5: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [MOS6561_VIC] 
Uplift Scope [MOS6522_VIA] 
Uplift Scope [] 

Uplifting [main] best 391 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [MOS6561_VIC] best 391 combination 
Uplifting [MOS6522_VIA] best 391 combination 
Uplifting [] best 391 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Trivial VIC 20 program
// Commodore VIC 20 registers and memory layout
// http://sleepingelephant.com/denial/wiki/index.php?title=Memory_Map
// http://www.zimmers.net/anonftp/pub/cbm/vic20/manuals/VIC-20_Programmers_Reference_Guide_1st_Edition_6th_Printing.pdf
// MOS 6560/6561 VIDEO INTERFACE CHIP
// Used in VIC 20
// http://archive.6502.org/datasheets/mos_6560_6561_vic.pdf
  // Upstart
  .file [name="vic20-simple.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$1001]
.segmentdef Code [start=$100e]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
.segment Code


  // Global Constants & labels
  .const RED = 2
  // Default address of screen color matrix
  .label DEFAULT_COLORRAM = $9600
  // Default address of screen character matrix
  .label DEFAULT_SCREEN = $1e00
.segment Code
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // main::@1
  __b1:
    // [2] if((byte) 0!=*((const byte*) MESSAGE + (byte) main::i#2)) goto main::@2 -- vbuc1_neq_pbuc2_derefidx_vbuxx_then_la1 
    lda MESSAGE,x
    cmp #0
    bne __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
    // main::@2
  __b2:
    // [4] *((const nomodify byte*) DEFAULT_SCREEN + (byte) main::i#2) ← *((const byte*) MESSAGE + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MESSAGE,x
    sta DEFAULT_SCREEN,x
    // [5] *((const nomodify byte*) DEFAULT_COLORRAM + (byte) main::i#2) ← (const nomodify byte) RED -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #RED
    sta DEFAULT_COLORRAM,x
    // [6] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  MESSAGE: .text "hello world!"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify byte*) DEFAULT_COLORRAM = (byte*) 38400
(const nomodify byte*) DEFAULT_SCREEN = (byte*) 7680
(const byte*) MESSAGE[]  = (byte*) "hello world!"
(byte) MOS6522_VIA::AUX_CONTROL
(byte) MOS6522_VIA::INTERRUPT_ENABLE
(byte) MOS6522_VIA::INTERRUPT_FLAG
(byte) MOS6522_VIA::PERIPHERAL_CONTROL
(byte) MOS6522_VIA::PORT_A
(byte) MOS6522_VIA::PORT_A_DDR
(byte) MOS6522_VIA::PORT_A_OUTPUT
(byte) MOS6522_VIA::PORT_B
(byte) MOS6522_VIA::PORT_B_DDR
(byte) MOS6522_VIA::SHIFT
(byte) MOS6522_VIA::TIMER1_HIGH
(byte) MOS6522_VIA::TIMER1_LATCH_HIGH
(byte) MOS6522_VIA::TIMER1_LATCH_LOW
(byte) MOS6522_VIA::TIMER1_LOW
(byte) MOS6522_VIA::TIMER2_HIGH
(byte) MOS6522_VIA::TIMER2_LOW
(byte) MOS6561_VIC::BORDER_BACKGROUND_COLOR
(byte) MOS6561_VIC::CH1_FREQ
(byte) MOS6561_VIC::CH2_FREQ
(byte) MOS6561_VIC::CH3_FREQ
(byte) MOS6561_VIC::CH4_FREQ
(byte) MOS6561_VIC::LIGHTPEN_X
(byte) MOS6561_VIC::LIGHTPEN_Y
(byte) MOS6561_VIC::MATRIX_COLUMNS
(byte) MOS6561_VIC::MATRIX_ROWS
(byte) MOS6561_VIC::MEMORY
(byte) MOS6561_VIC::ORIGIN_X
(byte) MOS6561_VIC::ORIGIN_Y
(byte) MOS6561_VIC::PADDLE_X
(byte) MOS6561_VIC::PADDLE_Y
(byte) MOS6561_VIC::RASTER
(byte) MOS6561_VIC::VOLUME_COLOR
(const nomodify byte) RED = (byte) 2
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 22.0
(byte) main::i#2 reg byte x 16.5

reg byte x [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 331

  // File Comments
// Trivial VIC 20 program
// Commodore VIC 20 registers and memory layout
// http://sleepingelephant.com/denial/wiki/index.php?title=Memory_Map
// http://www.zimmers.net/anonftp/pub/cbm/vic20/manuals/VIC-20_Programmers_Reference_Guide_1st_Edition_6th_Printing.pdf
// MOS 6560/6561 VIDEO INTERFACE CHIP
// Used in VIC 20
// http://archive.6502.org/datasheets/mos_6560_6561_vic.pdf
  // Upstart
  .file [name="vic20-simple.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$1001]
.segmentdef Code [start=$100e]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
.segment Code


  // Global Constants & labels
  .const RED = 2
  // Default address of screen color matrix
  .label DEFAULT_COLORRAM = $9600
  // Default address of screen character matrix
  .label DEFAULT_SCREEN = $1e00
.segment Code
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // main::@1
  __b1:
    // for(char i=0; MESSAGE[i]; i++)
    // [2] if((byte) 0!=*((const byte*) MESSAGE + (byte) main::i#2)) goto main::@2 -- vbuc1_neq_pbuc2_derefidx_vbuxx_then_la1 
    lda MESSAGE,x
    cmp #0
    bne __b2
    // main::@return
    // }
    // [3] return 
    rts
    // main::@2
  __b2:
    // DEFAULT_SCREEN[i] = MESSAGE[i]
    // [4] *((const nomodify byte*) DEFAULT_SCREEN + (byte) main::i#2) ← *((const byte*) MESSAGE + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda MESSAGE,x
    sta DEFAULT_SCREEN,x
    // DEFAULT_COLORRAM[i] = RED
    // [5] *((const nomodify byte*) DEFAULT_COLORRAM + (byte) main::i#2) ← (const nomodify byte) RED -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #RED
    sta DEFAULT_COLORRAM,x
    // for(char i=0; MESSAGE[i]; i++)
    // [6] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  MESSAGE: .text "hello world!"
  .byte 0

