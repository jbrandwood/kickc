byte[1000] SCREEN = $0400;
byte[16*16] buffer1 = $1000;
byte[16*16] buffer2 = $1100;
byte *RASTER = $d012;

main();

void main() {
  prepare();
  do {
    for( byte c : 25..1) {
      do { } while(*RASTER!=254)
      do { } while(*RASTER!=255)
    }
    flip();
    plot();
  } while(true)
}

// Prepare buffer
void prepare() {
   for( byte i : 0..255) {
      buffer1[i] = i;
   }
}

// Flip buffer
void flip() {
   byte srcIdx = 0;
   byte dstIdx = 15;
   for( byte r : 16..1) {
      for( byte c : 16..1) {
         buffer2[dstIdx] = buffer1[srcIdx++];
         dstIdx = dstIdx+16;
      }
      dstIdx--;
     }
   for(byte i : 0..255) {
      buffer1[i] = buffer2[i];
   }
}

// Plot buffer on screen
void plot() {
   byte* line = SCREEN+5*40+12;
   byte i=0;
   for(byte y : 16..1) {
     for(byte x=0; x<16; x++ ) {
       line[x] = buffer1[i++];
     }
     line = line+40;
   }
}
Adding pre/post-modifier (byte) flip::srcIdx ← ++ (byte) flip::srcIdx
Adding pre/post-modifier (byte) flip::dstIdx ← -- (byte) flip::dstIdx
Adding pre/post-modifier (byte) plot::i ← ++ (byte) plot::i
Adding pre/post-modifier (byte) plot::x ← ++ (byte) plot::x
PROGRAM
  (byte[1000]) SCREEN ← (word) 1024
  (byte[256]) buffer1 ← (word) 4096
  (byte[256]) buffer2 ← (word) 4352
  (byte*) RASTER ← (word) 53266
  (void~) $0 ← call main 
proc (void()) main()
  (void~) main::$0 ← call prepare 
main::@1:
  (byte) main::c ← (byte) 25
main::@2:
main::@3:
  (byte~) main::$1 ← * (byte*) RASTER
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
main::@4:
  (byte~) main::$3 ← * (byte*) RASTER
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  (byte) main::c ← -- (byte) main::c
  (boolean~) main::$5 ← (byte) main::c != (byte) 0
  if((boolean~) main::$5) goto main::@2
  (void~) main::$6 ← call flip 
  (void~) main::$7 ← call plot 
  if(true) goto main::@1
main::@return:
  return 
endproc // main()
proc (void()) prepare()
  (byte) prepare::i ← (byte) 0
prepare::@1:
  *((byte[256]) buffer1 + (byte) prepare::i) ← (byte) prepare::i
  (byte) prepare::i ← ++ (byte) prepare::i
  (boolean~) prepare::$0 ← (byte) prepare::i != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
prepare::@return:
  return 
endproc // prepare()
proc (void()) flip()
  (byte) flip::srcIdx ← (byte) 0
  (byte) flip::dstIdx ← (byte) 15
  (byte) flip::r ← (byte) 16
flip::@1:
  (byte) flip::c ← (byte) 16
flip::@2:
  (byte~) flip::$0 ← (byte[256]) buffer1 *idx (byte) flip::srcIdx
  *((byte[256]) buffer2 + (byte) flip::dstIdx) ← (byte~) flip::$0
  (byte) flip::srcIdx ← ++ (byte) flip::srcIdx
  (byte~) flip::$1 ← (byte) flip::dstIdx + (byte) 16
  (byte) flip::dstIdx ← (byte~) flip::$1
  (byte) flip::c ← -- (byte) flip::c
  (boolean~) flip::$2 ← (byte) flip::c != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  (byte) flip::dstIdx ← -- (byte) flip::dstIdx
  (byte) flip::r ← -- (byte) flip::r
  (boolean~) flip::$3 ← (byte) flip::r != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  (byte) flip::i ← (byte) 0
flip::@3:
  (byte~) flip::$4 ← (byte[256]) buffer2 *idx (byte) flip::i
  *((byte[256]) buffer1 + (byte) flip::i) ← (byte~) flip::$4
  (byte) flip::i ← ++ (byte) flip::i
  (boolean~) flip::$5 ← (byte) flip::i != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
flip::@return:
  return 
endproc // flip()
proc (void()) plot()
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line ← (byte*~) plot::$2
  (byte) plot::i ← (byte) 0
  (byte) plot::y ← (byte) 16
plot::@1:
  (byte) plot::x ← (byte) 0
plot::@2:
  (byte~) plot::$3 ← (byte[256]) buffer1 *idx (byte) plot::i
  *((byte*) plot::line + (byte) plot::x) ← (byte~) plot::$3
  (byte) plot::i ← ++ (byte) plot::i
  (byte) plot::x ← ++ (byte) plot::x
  (boolean~) plot::$4 ← (byte) plot::x < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  (byte*~) plot::$5 ← (byte*) plot::line + (byte) 40
  (byte*) plot::line ← (byte*~) plot::$5
  (byte) plot::y ← -- (byte) plot::y
  (boolean~) plot::$6 ← (byte) plot::y != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
plot::@return:
  return 
endproc // plot()

SYMBOLS
(void~) $0
(byte*) RASTER
(byte[1000]) SCREEN
(byte[256]) buffer1
(byte[256]) buffer2
(void()) flip()
(byte~) flip::$0
(byte~) flip::$1
(boolean~) flip::$2
(boolean~) flip::$3
(byte~) flip::$4
(boolean~) flip::$5
(label) flip::@1
(label) flip::@2
(label) flip::@3
(label) flip::@return
(byte) flip::c
(byte) flip::dstIdx
(byte) flip::i
(byte) flip::r
(byte) flip::srcIdx
(void()) main()
(void~) main::$0
(byte~) main::$1
(boolean~) main::$2
(byte~) main::$3
(boolean~) main::$4
(boolean~) main::$5
(void~) main::$6
(void~) main::$7
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(byte) main::c
(void()) plot()
(byte~) plot::$0
(byte*~) plot::$1
(byte*~) plot::$2
(byte~) plot::$3
(boolean~) plot::$4
(byte*~) plot::$5
(boolean~) plot::$6
(label) plot::@1
(label) plot::@2
(label) plot::@return
(byte) plot::i
(byte*) plot::line
(byte) plot::x
(byte) plot::y
(void()) prepare()
(boolean~) prepare::$0
(label) prepare::@1
(label) prepare::@return
(byte) prepare::i

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[1000]) SCREEN ← (word) 1024
  (byte[256]) buffer1 ← (word) 4096
  (byte[256]) buffer2 ← (word) 4352
  (byte*) RASTER ← (word) 53266
  (void~) $0 ← call main 
  to:@1
main: scope:[main]  from
  (void~) main::$0 ← call prepare 
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte) main::c ← (byte) 25
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@6
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte~) main::$1 ← * (byte*) RASTER
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@5
main::@5: scope:[main]  from main::@3
  to:main::@4
main::@4: scope:[main]  from main::@4 main::@5
  (byte~) main::$3 ← * (byte*) RASTER
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c ← -- (byte) main::c
  (boolean~) main::$5 ← (byte) main::c != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  (void~) main::$6 ← call flip 
  (void~) main::$7 ← call plot 
  if(true) goto main::@1
  to:main::@8
main::@8: scope:[main]  from main::@7
  to:main::@return
main::@return: scope:[main]  from main::@8
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
prepare: scope:[prepare]  from
  (byte) prepare::i ← (byte) 0
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  *((byte[256]) buffer1 + (byte) prepare::i) ← (byte) prepare::i
  (byte) prepare::i ← ++ (byte) prepare::i
  (boolean~) prepare::$0 ← (byte) prepare::i != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@2
prepare::@2: scope:[prepare]  from prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@2
  return 
  to:@return
@2: scope:[]  from @1
  to:@3
flip: scope:[flip]  from
  (byte) flip::srcIdx ← (byte) 0
  (byte) flip::dstIdx ← (byte) 15
  (byte) flip::r ← (byte) 16
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::c ← (byte) 16
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte~) flip::$0 ← (byte[256]) buffer1 *idx (byte) flip::srcIdx
  *((byte[256]) buffer2 + (byte) flip::dstIdx) ← (byte~) flip::$0
  (byte) flip::srcIdx ← ++ (byte) flip::srcIdx
  (byte~) flip::$1 ← (byte) flip::dstIdx + (byte) 16
  (byte) flip::dstIdx ← (byte~) flip::$1
  (byte) flip::c ← -- (byte) flip::c
  (boolean~) flip::$2 ← (byte) flip::c != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx ← -- (byte) flip::dstIdx
  (byte) flip::r ← -- (byte) flip::r
  (boolean~) flip::$3 ← (byte) flip::r != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  (byte) flip::i ← (byte) 0
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte~) flip::$4 ← (byte[256]) buffer2 *idx (byte) flip::i
  *((byte[256]) buffer1 + (byte) flip::i) ← (byte~) flip::$4
  (byte) flip::i ← ++ (byte) flip::i
  (boolean~) flip::$5 ← (byte) flip::i != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@6
flip::@6: scope:[flip]  from flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@6
  return 
  to:@return
@3: scope:[]  from @2
  to:@4
plot: scope:[plot]  from
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line ← (byte*~) plot::$2
  (byte) plot::i ← (byte) 0
  (byte) plot::y ← (byte) 16
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::x ← (byte) 0
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte~) plot::$3 ← (byte[256]) buffer1 *idx (byte) plot::i
  *((byte*) plot::line + (byte) plot::x) ← (byte~) plot::$3
  (byte) plot::i ← ++ (byte) plot::i
  (byte) plot::x ← ++ (byte) plot::x
  (boolean~) plot::$4 ← (byte) plot::x < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*~) plot::$5 ← (byte*) plot::line + (byte) 40
  (byte*) plot::line ← (byte*~) plot::$5
  (byte) plot::y ← -- (byte) plot::y
  (boolean~) plot::$6 ← (byte) plot::y != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@4
plot::@4: scope:[plot]  from plot::@3
  to:plot::@return
plot::@return: scope:[plot]  from plot::@4
  return 
  to:@return
@4: scope:[]  from @3
  to:@end
@end: scope:[]  from @4

Removing empty block main::@5
Removing empty block main::@8
Removing empty block @1
Removing empty block prepare::@2
Removing empty block @2
Removing empty block flip::@6
Removing empty block @3
Removing empty block plot::@4
Removing empty block @4
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[1000]) SCREEN ← (word) 1024
  (byte[256]) buffer1 ← (word) 4096
  (byte[256]) buffer2 ← (word) 4352
  (byte*) RASTER ← (word) 53266
  (void~) $0 ← call main 
  to:@end
main: scope:[main]  from
  (void~) main::$0 ← call prepare 
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte) main::c ← (byte) 25
  to:main::@3
main::@2: scope:[main]  from main::@6
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2 main::@3
  (byte~) main::$1 ← * (byte*) RASTER
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c ← -- (byte) main::c
  (boolean~) main::$5 ← (byte) main::c != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  (void~) main::$6 ← call flip 
  (void~) main::$7 ← call plot 
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return
prepare: scope:[prepare]  from
  (byte) prepare::i ← (byte) 0
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  *((byte[256]) buffer1 + (byte) prepare::i) ← (byte) prepare::i
  (byte) prepare::i ← ++ (byte) prepare::i
  (boolean~) prepare::$0 ← (byte) prepare::i != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from
  (byte) flip::srcIdx ← (byte) 0
  (byte) flip::dstIdx ← (byte) 15
  (byte) flip::r ← (byte) 16
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::c ← (byte) 16
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte~) flip::$0 ← (byte[256]) buffer1 *idx (byte) flip::srcIdx
  *((byte[256]) buffer2 + (byte) flip::dstIdx) ← (byte~) flip::$0
  (byte) flip::srcIdx ← ++ (byte) flip::srcIdx
  (byte~) flip::$1 ← (byte) flip::dstIdx + (byte) 16
  (byte) flip::dstIdx ← (byte~) flip::$1
  (byte) flip::c ← -- (byte) flip::c
  (boolean~) flip::$2 ← (byte) flip::c != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx ← -- (byte) flip::dstIdx
  (byte) flip::r ← -- (byte) flip::r
  (boolean~) flip::$3 ← (byte) flip::r != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  (byte) flip::i ← (byte) 0
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte~) flip::$4 ← (byte[256]) buffer2 *idx (byte) flip::i
  *((byte[256]) buffer1 + (byte) flip::i) ← (byte~) flip::$4
  (byte) flip::i ← ++ (byte) flip::i
  (boolean~) flip::$5 ← (byte) flip::i != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line ← (byte*~) plot::$2
  (byte) plot::i ← (byte) 0
  (byte) plot::y ← (byte) 16
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::x ← (byte) 0
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte~) plot::$3 ← (byte[256]) buffer1 *idx (byte) plot::i
  *((byte*) plot::line + (byte) plot::x) ← (byte~) plot::$3
  (byte) plot::i ← ++ (byte) plot::i
  (byte) plot::x ← ++ (byte) plot::x
  (boolean~) plot::$4 ← (byte) plot::x < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*~) plot::$5 ← (byte*) plot::line + (byte) 40
  (byte*) plot::line ← (byte*~) plot::$5
  (byte) plot::y ← -- (byte) plot::y
  (boolean~) plot::$6 ← (byte) plot::y != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@end: scope:[]  from @begin

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte[1000]) SCREEN ← (word) 1024
  (byte[256]) buffer1 ← (word) 4096
  (byte[256]) buffer2 ← (word) 4352
  (byte*) RASTER ← (word) 53266
  call main param-assignment
  to:@5
@5: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  call prepare param-assignment
  to:main::@9
main::@9: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte) main::c ← (byte) 25
  to:main::@3
main::@2: scope:[main]  from main::@6
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2 main::@3
  (byte~) main::$1 ← * (byte*) RASTER
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c ← -- (byte) main::c
  (boolean~) main::$5 ← (byte) main::c != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  (byte) prepare::i ← (byte) 0
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  *((byte[256]) buffer1 + (byte) prepare::i) ← (byte) prepare::i
  (byte) prepare::i ← ++ (byte) prepare::i
  (boolean~) prepare::$0 ← (byte) prepare::i != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  (byte) flip::srcIdx ← (byte) 0
  (byte) flip::dstIdx ← (byte) 15
  (byte) flip::r ← (byte) 16
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::c ← (byte) 16
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte~) flip::$0 ← (byte[256]) buffer1 *idx (byte) flip::srcIdx
  *((byte[256]) buffer2 + (byte) flip::dstIdx) ← (byte~) flip::$0
  (byte) flip::srcIdx ← ++ (byte) flip::srcIdx
  (byte~) flip::$1 ← (byte) flip::dstIdx + (byte) 16
  (byte) flip::dstIdx ← (byte~) flip::$1
  (byte) flip::c ← -- (byte) flip::c
  (boolean~) flip::$2 ← (byte) flip::c != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx ← -- (byte) flip::dstIdx
  (byte) flip::r ← -- (byte) flip::r
  (boolean~) flip::$3 ← (byte) flip::r != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  (byte) flip::i ← (byte) 0
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte~) flip::$4 ← (byte[256]) buffer2 *idx (byte) flip::i
  *((byte[256]) buffer1 + (byte) flip::i) ← (byte~) flip::$4
  (byte) flip::i ← ++ (byte) flip::i
  (boolean~) flip::$5 ← (byte) flip::i != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line ← (byte*~) plot::$2
  (byte) plot::i ← (byte) 0
  (byte) plot::y ← (byte) 16
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::x ← (byte) 0
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte~) plot::$3 ← (byte[256]) buffer1 *idx (byte) plot::i
  *((byte*) plot::line + (byte) plot::x) ← (byte~) plot::$3
  (byte) plot::i ← ++ (byte) plot::i
  (byte) plot::x ← ++ (byte) plot::x
  (boolean~) plot::$4 ← (byte) plot::x < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*~) plot::$5 ← (byte*) plot::line + (byte) 40
  (byte*) plot::line ← (byte*~) plot::$5
  (byte) plot::y ← -- (byte) plot::y
  (boolean~) plot::$6 ← (byte) plot::y != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@end: scope:[]  from @5

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte[1000]) SCREEN#0 ← (word) 1024
  (byte[256]) buffer1#0 ← (word) 4096
  (byte[256]) buffer2#0 ← (word) 4352
  (byte*) RASTER#0 ← (word) 53266
  call main param-assignment
  to:@5
@5: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte[256]) buffer2#15 ← phi( @begin/(byte[256]) buffer2#0 )
  (byte[1000]) SCREEN#11 ← phi( @begin/(byte[1000]) SCREEN#0 )
  (byte*) RASTER#8 ← phi( @begin/(byte*) RASTER#0 )
  (byte[256]) buffer1#9 ← phi( @begin/(byte[256]) buffer1#0 )
  call prepare param-assignment
  to:main::@9
main::@9: scope:[main]  from main
  (byte[256]) buffer2#14 ← phi( main/(byte[256]) buffer2#15 )
  (byte[256]) buffer1#22 ← phi( main/(byte[256]) buffer1#9 )
  (byte[1000]) SCREEN#10 ← phi( main/(byte[1000]) SCREEN#11 )
  (byte*) RASTER#6 ← phi( main/(byte*) RASTER#8 )
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#13 main::@9/(byte[256]) buffer2#14 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#21 main::@9/(byte[256]) buffer1#22 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#9 main::@9/(byte[1000]) SCREEN#10 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#5 main::@9/(byte*) RASTER#6 )
  (byte) main::c#0 ← (byte) 25
  to:main::@3
main::@2: scope:[main]  from main::@6
  (byte[256]) buffer2#12 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#20 ← phi( main::@6/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#8 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  (byte) main::c#5 ← phi( main::@6/(byte) main::c#1 )
  (byte*) RASTER#4 ← phi( main::@6/(byte*) RASTER#7 )
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#18 ← phi( main::@1/(byte[256]) buffer1#19 main::@2/(byte[256]) buffer1#20 main::@3/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#8 main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(byte) main::c#0 main::@2/(byte) main::c#5 main::@3/(byte) main::c#4 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#4 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte[256]) buffer2#9 ← phi( main::@3/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#17 ← phi( main::@3/(byte[256]) buffer1#18 main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#5 ← phi( main::@3/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#5 )
  (byte) main::c#3 ← phi( main::@3/(byte) main::c#4 main::@4/(byte) main::c#3 )
  (byte*) RASTER#2 ← phi( main::@3/(byte*) RASTER#1 main::@4/(byte*) RASTER#2 )
  (byte~) main::$3 ← * (byte*) RASTER#2
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte[256]) buffer2#8 ← phi( main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#16 ← phi( main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#4 ← phi( main::@4/(byte[1000]) SCREEN#5 )
  (byte*) RASTER#7 ← phi( main::@4/(byte*) RASTER#2 )
  (byte) main::c#2 ← phi( main::@4/(byte) main::c#3 )
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) RASTER#10 ← phi( main::@6/(byte*) RASTER#7 )
  (byte[256]) buffer2#7 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#14 ← phi( main::@6/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#3 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  (byte[256]) buffer2#16 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#15 ← phi( main::@7/(byte[256]) buffer1#14 )
  (byte*) RASTER#9 ← phi( main::@7/(byte*) RASTER#10 )
  (byte[1000]) SCREEN#2 ← phi( main::@7/(byte[1000]) SCREEN#3 )
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte[256]) buffer2#13 ← phi( main::@10/(byte[256]) buffer2#16 )
  (byte[256]) buffer1#21 ← phi( main::@10/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#9 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte*) RASTER#5 ← phi( main::@10/(byte*) RASTER#9 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  (byte[256]) buffer1#5 ← phi( main/(byte[256]) buffer1#9 )
  (byte) prepare::i#0 ← (byte) 0
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#5 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  (byte[256]) buffer2#5 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#10 ← phi( main::@7/(byte[256]) buffer1#14 )
  (byte) flip::srcIdx#0 ← (byte) 0
  (byte) flip::dstIdx#0 ← (byte) 15
  (byte) flip::r#0 ← (byte) 16
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#5 flip::@4/(byte[256]) buffer2#6 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#4 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  (byte) flip::c#0 ← (byte) 16
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::r#3 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#3 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#2 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#2 )
  (byte~) flip::$0 ← (byte[256]) buffer1#2 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte~) flip::$1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::dstIdx#1 ← (byte~) flip::$1
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte[256]) buffer2#6 ← phi( flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#4 ← phi( flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@2/(byte[256]) buffer1#2 )
  (byte) flip::r#2 ← phi( flip::@2/(byte) flip::r#3 )
  (byte) flip::dstIdx#4 ← phi( flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#4
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  (byte[256]) buffer1#7 ← phi( flip::@4/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#4 ← phi( flip::@4/(byte[256]) buffer2#6 )
  (byte) flip::i#0 ← (byte) 0
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@3/(byte[256]) buffer1#3 flip::@5/(byte[256]) buffer1#7 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) flip::i#0 )
  (byte[256]) buffer2#2 ← phi( flip::@3/(byte[256]) buffer2#2 flip::@5/(byte[256]) buffer2#4 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte[256]) buffer1#12 ← phi( main::@10/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#1 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1 + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line#0 ← (byte*~) plot::$2
  (byte) plot::i#0 ← (byte) 0
  (byte) plot::y#0 ← (byte) 16
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) plot::i#0 plot::@3/(byte) plot::i#4 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#12 plot::@3/(byte[256]) buffer1#13 )
  (byte) plot::x#0 ← (byte) 0
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::y#3 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#3 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#4 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#4 )
  (byte~) plot::$3 ← (byte[256]) buffer1#4 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte) plot::i#4 ← phi( plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@2/(byte[256]) buffer1#4 )
  (byte) plot::y#2 ← phi( plot::@2/(byte) plot::y#3 )
  (byte*) plot::line#3 ← phi( plot::@2/(byte*) plot::line#2 )
  (byte*~) plot::$5 ← (byte*) plot::line#3 + (byte) 40
  (byte*) plot::line#1 ← (byte*~) plot::$5
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@end: scope:[]  from @5

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte[1000]) SCREEN#0 ← (word) 1024
  (byte[256]) buffer1#0 ← (word) 4096
  (byte[256]) buffer2#0 ← (word) 4352
  (byte*) RASTER#0 ← (word) 53266
  call main param-assignment
  to:@5
@5: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte[256]) buffer2#15 ← phi( @begin/(byte[256]) buffer2#0 )
  (byte[1000]) SCREEN#11 ← phi( @begin/(byte[1000]) SCREEN#0 )
  (byte*) RASTER#8 ← phi( @begin/(byte*) RASTER#0 )
  (byte[256]) buffer1#9 ← phi( @begin/(byte[256]) buffer1#0 )
  call prepare param-assignment
  to:main::@9
main::@9: scope:[main]  from main
  (byte[256]) buffer2#14 ← phi( main/(byte[256]) buffer2#15 )
  (byte[256]) buffer1#22 ← phi( main/(byte[256]) buffer1#9 )
  (byte[1000]) SCREEN#10 ← phi( main/(byte[1000]) SCREEN#11 )
  (byte*) RASTER#6 ← phi( main/(byte*) RASTER#8 )
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#13 main::@9/(byte[256]) buffer2#14 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#21 main::@9/(byte[256]) buffer1#22 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#9 main::@9/(byte[1000]) SCREEN#10 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#5 main::@9/(byte*) RASTER#6 )
  (byte) main::c#0 ← (byte) 25
  to:main::@3
main::@2: scope:[main]  from main::@6
  (byte[256]) buffer2#12 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#20 ← phi( main::@6/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#8 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  (byte) main::c#5 ← phi( main::@6/(byte) main::c#1 )
  (byte*) RASTER#4 ← phi( main::@6/(byte*) RASTER#7 )
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#18 ← phi( main::@1/(byte[256]) buffer1#19 main::@2/(byte[256]) buffer1#20 main::@3/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#8 main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(byte) main::c#0 main::@2/(byte) main::c#5 main::@3/(byte) main::c#4 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#4 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte[256]) buffer2#9 ← phi( main::@3/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#17 ← phi( main::@3/(byte[256]) buffer1#18 main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#5 ← phi( main::@3/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#5 )
  (byte) main::c#3 ← phi( main::@3/(byte) main::c#4 main::@4/(byte) main::c#3 )
  (byte*) RASTER#2 ← phi( main::@3/(byte*) RASTER#1 main::@4/(byte*) RASTER#2 )
  (byte~) main::$3 ← * (byte*) RASTER#2
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte[256]) buffer2#8 ← phi( main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#16 ← phi( main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#4 ← phi( main::@4/(byte[1000]) SCREEN#5 )
  (byte*) RASTER#7 ← phi( main::@4/(byte*) RASTER#2 )
  (byte) main::c#2 ← phi( main::@4/(byte) main::c#3 )
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) RASTER#10 ← phi( main::@6/(byte*) RASTER#7 )
  (byte[256]) buffer2#7 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#14 ← phi( main::@6/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#3 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  (byte[256]) buffer2#16 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#15 ← phi( main::@7/(byte[256]) buffer1#14 )
  (byte*) RASTER#9 ← phi( main::@7/(byte*) RASTER#10 )
  (byte[1000]) SCREEN#2 ← phi( main::@7/(byte[1000]) SCREEN#3 )
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte[256]) buffer2#13 ← phi( main::@10/(byte[256]) buffer2#16 )
  (byte[256]) buffer1#21 ← phi( main::@10/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#9 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte*) RASTER#5 ← phi( main::@10/(byte*) RASTER#9 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  (byte[256]) buffer1#5 ← phi( main/(byte[256]) buffer1#9 )
  (byte) prepare::i#0 ← (byte) 0
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#5 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  (byte[256]) buffer2#5 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#10 ← phi( main::@7/(byte[256]) buffer1#14 )
  (byte) flip::srcIdx#0 ← (byte) 0
  (byte) flip::dstIdx#0 ← (byte) 15
  (byte) flip::r#0 ← (byte) 16
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#5 flip::@4/(byte[256]) buffer2#6 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#4 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  (byte) flip::c#0 ← (byte) 16
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::r#3 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#3 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#2 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#2 )
  (byte~) flip::$0 ← (byte[256]) buffer1#2 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte~) flip::$1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::dstIdx#1 ← (byte~) flip::$1
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte[256]) buffer2#6 ← phi( flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#4 ← phi( flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@2/(byte[256]) buffer1#2 )
  (byte) flip::r#2 ← phi( flip::@2/(byte) flip::r#3 )
  (byte) flip::dstIdx#4 ← phi( flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#4
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  (byte[256]) buffer1#7 ← phi( flip::@4/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#4 ← phi( flip::@4/(byte[256]) buffer2#6 )
  (byte) flip::i#0 ← (byte) 0
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@3/(byte[256]) buffer1#3 flip::@5/(byte[256]) buffer1#7 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) flip::i#0 )
  (byte[256]) buffer2#2 ← phi( flip::@3/(byte[256]) buffer2#2 flip::@5/(byte[256]) buffer2#4 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte[256]) buffer1#12 ← phi( main::@10/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#1 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1 + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line#0 ← (byte*~) plot::$2
  (byte) plot::i#0 ← (byte) 0
  (byte) plot::y#0 ← (byte) 16
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) plot::i#0 plot::@3/(byte) plot::i#4 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#12 plot::@3/(byte[256]) buffer1#13 )
  (byte) plot::x#0 ← (byte) 0
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::y#3 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#3 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#4 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#4 )
  (byte~) plot::$3 ← (byte[256]) buffer1#4 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte) plot::i#4 ← phi( plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@2/(byte[256]) buffer1#4 )
  (byte) plot::y#2 ← phi( plot::@2/(byte) plot::y#3 )
  (byte*) plot::line#3 ← phi( plot::@2/(byte*) plot::line#2 )
  (byte*~) plot::$5 ← (byte*) plot::line#3 + (byte) 40
  (byte*) plot::line#1 ← (byte*~) plot::$5
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@end: scope:[]  from @5

INITIAL SSA SYMBOL TABLE
(label) @5
(label) @begin
(label) @end
(byte*) RASTER
(byte*) RASTER#0
(byte*) RASTER#1
(byte*) RASTER#10
(byte*) RASTER#2
(byte*) RASTER#3
(byte*) RASTER#4
(byte*) RASTER#5
(byte*) RASTER#6
(byte*) RASTER#7
(byte*) RASTER#8
(byte*) RASTER#9
(byte[1000]) SCREEN
(byte[1000]) SCREEN#0
(byte[1000]) SCREEN#1
(byte[1000]) SCREEN#10
(byte[1000]) SCREEN#11
(byte[1000]) SCREEN#2
(byte[1000]) SCREEN#3
(byte[1000]) SCREEN#4
(byte[1000]) SCREEN#5
(byte[1000]) SCREEN#6
(byte[1000]) SCREEN#7
(byte[1000]) SCREEN#8
(byte[1000]) SCREEN#9
(byte[256]) buffer1
(byte[256]) buffer1#0
(byte[256]) buffer1#1
(byte[256]) buffer1#10
(byte[256]) buffer1#11
(byte[256]) buffer1#12
(byte[256]) buffer1#13
(byte[256]) buffer1#14
(byte[256]) buffer1#15
(byte[256]) buffer1#16
(byte[256]) buffer1#17
(byte[256]) buffer1#18
(byte[256]) buffer1#19
(byte[256]) buffer1#2
(byte[256]) buffer1#20
(byte[256]) buffer1#21
(byte[256]) buffer1#22
(byte[256]) buffer1#3
(byte[256]) buffer1#4
(byte[256]) buffer1#5
(byte[256]) buffer1#6
(byte[256]) buffer1#7
(byte[256]) buffer1#8
(byte[256]) buffer1#9
(byte[256]) buffer2
(byte[256]) buffer2#0
(byte[256]) buffer2#1
(byte[256]) buffer2#10
(byte[256]) buffer2#11
(byte[256]) buffer2#12
(byte[256]) buffer2#13
(byte[256]) buffer2#14
(byte[256]) buffer2#15
(byte[256]) buffer2#16
(byte[256]) buffer2#2
(byte[256]) buffer2#3
(byte[256]) buffer2#4
(byte[256]) buffer2#5
(byte[256]) buffer2#6
(byte[256]) buffer2#7
(byte[256]) buffer2#8
(byte[256]) buffer2#9
(void()) flip()
(byte~) flip::$0
(byte~) flip::$1
(boolean~) flip::$2
(boolean~) flip::$3
(byte~) flip::$4
(boolean~) flip::$5
(label) flip::@1
(label) flip::@2
(label) flip::@3
(label) flip::@4
(label) flip::@5
(label) flip::@return
(byte) flip::c
(byte) flip::c#0
(byte) flip::c#1
(byte) flip::c#2
(byte) flip::dstIdx
(byte) flip::dstIdx#0
(byte) flip::dstIdx#1
(byte) flip::dstIdx#2
(byte) flip::dstIdx#3
(byte) flip::dstIdx#4
(byte) flip::dstIdx#5
(byte) flip::i
(byte) flip::i#0
(byte) flip::i#1
(byte) flip::i#2
(byte) flip::r
(byte) flip::r#0
(byte) flip::r#1
(byte) flip::r#2
(byte) flip::r#3
(byte) flip::r#4
(byte) flip::srcIdx
(byte) flip::srcIdx#0
(byte) flip::srcIdx#1
(byte) flip::srcIdx#2
(byte) flip::srcIdx#3
(byte) flip::srcIdx#4
(void()) main()
(byte~) main::$1
(boolean~) main::$2
(byte~) main::$3
(boolean~) main::$4
(boolean~) main::$5
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@6
(label) main::@7
(label) main::@9
(label) main::@return
(byte) main::c
(byte) main::c#0
(byte) main::c#1
(byte) main::c#2
(byte) main::c#3
(byte) main::c#4
(byte) main::c#5
(void()) plot()
(byte~) plot::$0
(byte*~) plot::$1
(byte*~) plot::$2
(byte~) plot::$3
(boolean~) plot::$4
(byte*~) plot::$5
(boolean~) plot::$6
(label) plot::@1
(label) plot::@2
(label) plot::@3
(label) plot::@return
(byte) plot::i
(byte) plot::i#0
(byte) plot::i#1
(byte) plot::i#2
(byte) plot::i#3
(byte) plot::i#4
(byte*) plot::line
(byte*) plot::line#0
(byte*) plot::line#1
(byte*) plot::line#2
(byte*) plot::line#3
(byte*) plot::line#4
(byte) plot::x
(byte) plot::x#0
(byte) plot::x#1
(byte) plot::x#2
(byte) plot::y
(byte) plot::y#0
(byte) plot::y#1
(byte) plot::y#2
(byte) plot::y#3
(byte) plot::y#4
(void()) prepare()
(boolean~) prepare::$0
(label) prepare::@1
(label) prepare::@return
(byte) prepare::i
(byte) prepare::i#0
(byte) prepare::i#1
(byte) prepare::i#2

Culled Empty Block (label) @5
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte[1000]) SCREEN#0 ← (word) 1024
  (byte[256]) buffer1#0 ← (word) 4096
  (byte[256]) buffer2#0 ← (word) 4352
  (byte*) RASTER#0 ← (word) 53266
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte[256]) buffer2#15 ← phi( @begin/(byte[256]) buffer2#0 )
  (byte[1000]) SCREEN#11 ← phi( @begin/(byte[1000]) SCREEN#0 )
  (byte*) RASTER#8 ← phi( @begin/(byte*) RASTER#0 )
  (byte[256]) buffer1#9 ← phi( @begin/(byte[256]) buffer1#0 )
  call prepare param-assignment
  to:main::@9
main::@9: scope:[main]  from main
  (byte[256]) buffer2#14 ← phi( main/(byte[256]) buffer2#15 )
  (byte[256]) buffer1#22 ← phi( main/(byte[256]) buffer1#9 )
  (byte[1000]) SCREEN#10 ← phi( main/(byte[1000]) SCREEN#11 )
  (byte*) RASTER#6 ← phi( main/(byte*) RASTER#8 )
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#13 main::@9/(byte[256]) buffer2#14 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#21 main::@9/(byte[256]) buffer1#22 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#9 main::@9/(byte[1000]) SCREEN#10 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#5 main::@9/(byte*) RASTER#6 )
  (byte) main::c#0 ← (byte) 25
  to:main::@3
main::@2: scope:[main]  from main::@6
  (byte[256]) buffer2#12 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#20 ← phi( main::@6/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#8 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  (byte) main::c#5 ← phi( main::@6/(byte) main::c#1 )
  (byte*) RASTER#4 ← phi( main::@6/(byte*) RASTER#7 )
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#18 ← phi( main::@1/(byte[256]) buffer1#19 main::@2/(byte[256]) buffer1#20 main::@3/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#8 main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(byte) main::c#0 main::@2/(byte) main::c#5 main::@3/(byte) main::c#4 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#4 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte[256]) buffer2#9 ← phi( main::@3/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#17 ← phi( main::@3/(byte[256]) buffer1#18 main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#5 ← phi( main::@3/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#5 )
  (byte) main::c#3 ← phi( main::@3/(byte) main::c#4 main::@4/(byte) main::c#3 )
  (byte*) RASTER#2 ← phi( main::@3/(byte*) RASTER#1 main::@4/(byte*) RASTER#2 )
  (byte~) main::$3 ← * (byte*) RASTER#2
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte[256]) buffer2#8 ← phi( main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#16 ← phi( main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#4 ← phi( main::@4/(byte[1000]) SCREEN#5 )
  (byte*) RASTER#7 ← phi( main::@4/(byte*) RASTER#2 )
  (byte) main::c#2 ← phi( main::@4/(byte) main::c#3 )
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) RASTER#10 ← phi( main::@6/(byte*) RASTER#7 )
  (byte[256]) buffer2#7 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#14 ← phi( main::@6/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#3 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  (byte[256]) buffer2#16 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#15 ← phi( main::@7/(byte[256]) buffer1#14 )
  (byte*) RASTER#9 ← phi( main::@7/(byte*) RASTER#10 )
  (byte[1000]) SCREEN#2 ← phi( main::@7/(byte[1000]) SCREEN#3 )
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte[256]) buffer2#13 ← phi( main::@10/(byte[256]) buffer2#16 )
  (byte[256]) buffer1#21 ← phi( main::@10/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#9 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte*) RASTER#5 ← phi( main::@10/(byte*) RASTER#9 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  (byte[256]) buffer1#5 ← phi( main/(byte[256]) buffer1#9 )
  (byte) prepare::i#0 ← (byte) 0
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#5 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) prepare::i#0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  (byte[256]) buffer2#5 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#10 ← phi( main::@7/(byte[256]) buffer1#14 )
  (byte) flip::srcIdx#0 ← (byte) 0
  (byte) flip::dstIdx#0 ← (byte) 15
  (byte) flip::r#0 ← (byte) 16
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) flip::r#0 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) flip::dstIdx#0 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#5 flip::@4/(byte[256]) buffer2#6 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) flip::srcIdx#0 flip::@4/(byte) flip::srcIdx#4 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  (byte) flip::c#0 ← (byte) 16
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::r#3 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#3 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) flip::c#0 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#2 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#2 )
  (byte~) flip::$0 ← (byte[256]) buffer1#2 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte~) flip::$1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::dstIdx#1 ← (byte~) flip::$1
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte[256]) buffer2#6 ← phi( flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#4 ← phi( flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@2/(byte[256]) buffer1#2 )
  (byte) flip::r#2 ← phi( flip::@2/(byte) flip::r#3 )
  (byte) flip::dstIdx#4 ← phi( flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#4
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  (byte[256]) buffer1#7 ← phi( flip::@4/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#4 ← phi( flip::@4/(byte[256]) buffer2#6 )
  (byte) flip::i#0 ← (byte) 0
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@3/(byte[256]) buffer1#3 flip::@5/(byte[256]) buffer1#7 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) flip::i#0 )
  (byte[256]) buffer2#2 ← phi( flip::@3/(byte[256]) buffer2#2 flip::@5/(byte[256]) buffer2#4 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte[256]) buffer1#12 ← phi( main::@10/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#1 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte~) plot::$0 ← (byte) 5 * (byte) 40
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1 + (byte~) plot::$0
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line#0 ← (byte*~) plot::$2
  (byte) plot::i#0 ← (byte) 0
  (byte) plot::y#0 ← (byte) 16
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) plot::y#0 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) plot::i#0 plot::@3/(byte) plot::i#4 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#12 plot::@3/(byte[256]) buffer1#13 )
  (byte) plot::x#0 ← (byte) 0
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::y#3 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#3 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) plot::x#0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#4 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#4 )
  (byte~) plot::$3 ← (byte[256]) buffer1#4 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte) plot::i#4 ← phi( plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@2/(byte[256]) buffer1#4 )
  (byte) plot::y#2 ← phi( plot::@2/(byte) plot::y#3 )
  (byte*) plot::line#3 ← phi( plot::@2/(byte*) plot::line#2 )
  (byte*~) plot::$5 ← (byte*) plot::line#3 + (byte) 40
  (byte*) plot::line#1 ← (byte*~) plot::$5
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@end: scope:[]  from @begin

Constant (byte[1000]) SCREEN#0 (word) 1024
Constant (byte[256]) buffer1#0 (word) 4096
Constant (byte[256]) buffer2#0 (word) 4352
Constant (byte*) RASTER#0 (word) 53266
Constant (byte) main::c#0 (byte) 25
Constant (byte) prepare::i#0 (byte) 0
Constant (byte) flip::srcIdx#0 (byte) 0
Constant (byte) flip::dstIdx#0 (byte) 15
Constant (byte) flip::r#0 (byte) 16
Constant (byte) flip::c#0 (byte) 16
Constant (byte) flip::i#0 (byte) 0
Constant (byte~) plot::$0 (byte) 200
Constant (byte) plot::i#0 (byte) 0
Constant (byte) plot::y#0 (byte) 16
Constant (byte) plot::x#0 (byte) 0
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte[256]) buffer2#15 ← phi( @begin/(word) 4352 )
  (byte[1000]) SCREEN#11 ← phi( @begin/(word) 1024 )
  (byte*) RASTER#8 ← phi( @begin/(word) 53266 )
  (byte[256]) buffer1#9 ← phi( @begin/(word) 4096 )
  call prepare param-assignment
  to:main::@9
main::@9: scope:[main]  from main
  (byte[256]) buffer2#14 ← phi( main/(byte[256]) buffer2#15 )
  (byte[256]) buffer1#22 ← phi( main/(byte[256]) buffer1#9 )
  (byte[1000]) SCREEN#10 ← phi( main/(byte[1000]) SCREEN#11 )
  (byte*) RASTER#6 ← phi( main/(byte*) RASTER#8 )
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#13 main::@9/(byte[256]) buffer2#14 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#21 main::@9/(byte[256]) buffer1#22 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#9 main::@9/(byte[1000]) SCREEN#10 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#5 main::@9/(byte*) RASTER#6 )
  to:main::@3
main::@2: scope:[main]  from main::@6
  (byte[256]) buffer2#12 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#20 ← phi( main::@6/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#8 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  (byte) main::c#5 ← phi( main::@6/(byte) main::c#1 )
  (byte*) RASTER#4 ← phi( main::@6/(byte*) RASTER#7 )
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#18 ← phi( main::@1/(byte[256]) buffer1#19 main::@2/(byte[256]) buffer1#20 main::@3/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#8 main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(byte) 25 main::@2/(byte) main::c#5 main::@3/(byte) main::c#4 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#4 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte[256]) buffer2#9 ← phi( main::@3/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#17 ← phi( main::@3/(byte[256]) buffer1#18 main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#5 ← phi( main::@3/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#5 )
  (byte) main::c#3 ← phi( main::@3/(byte) main::c#4 main::@4/(byte) main::c#3 )
  (byte*) RASTER#2 ← phi( main::@3/(byte*) RASTER#1 main::@4/(byte*) RASTER#2 )
  (byte~) main::$3 ← * (byte*) RASTER#2
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte[256]) buffer2#8 ← phi( main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#16 ← phi( main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#4 ← phi( main::@4/(byte[1000]) SCREEN#5 )
  (byte*) RASTER#7 ← phi( main::@4/(byte*) RASTER#2 )
  (byte) main::c#2 ← phi( main::@4/(byte) main::c#3 )
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) RASTER#10 ← phi( main::@6/(byte*) RASTER#7 )
  (byte[256]) buffer2#7 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#14 ← phi( main::@6/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#3 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  (byte[256]) buffer2#16 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#15 ← phi( main::@7/(byte[256]) buffer1#14 )
  (byte*) RASTER#9 ← phi( main::@7/(byte*) RASTER#10 )
  (byte[1000]) SCREEN#2 ← phi( main::@7/(byte[1000]) SCREEN#3 )
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte[256]) buffer2#13 ← phi( main::@10/(byte[256]) buffer2#16 )
  (byte[256]) buffer1#21 ← phi( main::@10/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#9 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte*) RASTER#5 ← phi( main::@10/(byte*) RASTER#9 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  (byte[256]) buffer1#5 ← phi( main/(byte[256]) buffer1#9 )
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#5 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  (byte[256]) buffer2#5 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#10 ← phi( main::@7/(byte[256]) buffer1#14 )
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#5 flip::@4/(byte[256]) buffer2#6 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#4 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::r#3 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#3 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#2 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#2 )
  (byte~) flip::$0 ← (byte[256]) buffer1#2 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte~) flip::$1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::dstIdx#1 ← (byte~) flip::$1
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte[256]) buffer2#6 ← phi( flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#4 ← phi( flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@2/(byte[256]) buffer1#2 )
  (byte) flip::r#2 ← phi( flip::@2/(byte) flip::r#3 )
  (byte) flip::dstIdx#4 ← phi( flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#4
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  (byte[256]) buffer1#7 ← phi( flip::@4/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#4 ← phi( flip::@4/(byte[256]) buffer2#6 )
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@3/(byte[256]) buffer1#3 flip::@5/(byte[256]) buffer1#7 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) 0 )
  (byte[256]) buffer2#2 ← phi( flip::@3/(byte[256]) buffer2#2 flip::@5/(byte[256]) buffer2#4 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte[256]) buffer1#12 ← phi( main::@10/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#1 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1 + (byte) 200
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 12
  (byte*) plot::line#0 ← (byte*~) plot::$2
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#4 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#12 plot::@3/(byte[256]) buffer1#13 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::y#3 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#3 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#4 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#4 )
  (byte~) plot::$3 ← (byte[256]) buffer1#4 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte) plot::i#4 ← phi( plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@2/(byte[256]) buffer1#4 )
  (byte) plot::y#2 ← phi( plot::@2/(byte) plot::y#3 )
  (byte*) plot::line#3 ← phi( plot::@2/(byte*) plot::line#2 )
  (byte*~) plot::$5 ← (byte*) plot::line#3 + (byte) 40
  (byte*) plot::line#1 ← (byte*~) plot::$5
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@end: scope:[]  from @begin

Consolidated constant in assignment plot::$2
Succesful SSA optimization Pass2ConstantAdditionElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte[256]) buffer2#15 ← phi( @begin/(word) 4352 )
  (byte[1000]) SCREEN#11 ← phi( @begin/(word) 1024 )
  (byte*) RASTER#8 ← phi( @begin/(word) 53266 )
  (byte[256]) buffer1#9 ← phi( @begin/(word) 4096 )
  call prepare param-assignment
  to:main::@9
main::@9: scope:[main]  from main
  (byte[256]) buffer2#14 ← phi( main/(byte[256]) buffer2#15 )
  (byte[256]) buffer1#22 ← phi( main/(byte[256]) buffer1#9 )
  (byte[1000]) SCREEN#10 ← phi( main/(byte[1000]) SCREEN#11 )
  (byte*) RASTER#6 ← phi( main/(byte*) RASTER#8 )
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#13 main::@9/(byte[256]) buffer2#14 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#21 main::@9/(byte[256]) buffer1#22 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#9 main::@9/(byte[1000]) SCREEN#10 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#5 main::@9/(byte*) RASTER#6 )
  to:main::@3
main::@2: scope:[main]  from main::@6
  (byte[256]) buffer2#12 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#20 ← phi( main::@6/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#8 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  (byte) main::c#5 ← phi( main::@6/(byte) main::c#1 )
  (byte*) RASTER#4 ← phi( main::@6/(byte*) RASTER#7 )
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#18 ← phi( main::@1/(byte[256]) buffer1#19 main::@2/(byte[256]) buffer1#20 main::@3/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#8 main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(byte) 25 main::@2/(byte) main::c#5 main::@3/(byte) main::c#4 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#4 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte[256]) buffer2#9 ← phi( main::@3/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#17 ← phi( main::@3/(byte[256]) buffer1#18 main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#5 ← phi( main::@3/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#5 )
  (byte) main::c#3 ← phi( main::@3/(byte) main::c#4 main::@4/(byte) main::c#3 )
  (byte*) RASTER#2 ← phi( main::@3/(byte*) RASTER#1 main::@4/(byte*) RASTER#2 )
  (byte~) main::$3 ← * (byte*) RASTER#2
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte[256]) buffer2#8 ← phi( main::@4/(byte[256]) buffer2#9 )
  (byte[256]) buffer1#16 ← phi( main::@4/(byte[256]) buffer1#17 )
  (byte[1000]) SCREEN#4 ← phi( main::@4/(byte[1000]) SCREEN#5 )
  (byte*) RASTER#7 ← phi( main::@4/(byte*) RASTER#2 )
  (byte) main::c#2 ← phi( main::@4/(byte) main::c#3 )
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) RASTER#10 ← phi( main::@6/(byte*) RASTER#7 )
  (byte[256]) buffer2#7 ← phi( main::@6/(byte[256]) buffer2#8 )
  (byte[256]) buffer1#14 ← phi( main::@6/(byte[256]) buffer1#16 )
  (byte[1000]) SCREEN#3 ← phi( main::@6/(byte[1000]) SCREEN#4 )
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  (byte[256]) buffer2#16 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#15 ← phi( main::@7/(byte[256]) buffer1#14 )
  (byte*) RASTER#9 ← phi( main::@7/(byte*) RASTER#10 )
  (byte[1000]) SCREEN#2 ← phi( main::@7/(byte[1000]) SCREEN#3 )
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte[256]) buffer2#13 ← phi( main::@10/(byte[256]) buffer2#16 )
  (byte[256]) buffer1#21 ← phi( main::@10/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#9 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte*) RASTER#5 ← phi( main::@10/(byte*) RASTER#9 )
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  (byte[256]) buffer1#5 ← phi( main/(byte[256]) buffer1#9 )
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#5 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  (byte[256]) buffer2#5 ← phi( main::@7/(byte[256]) buffer2#7 )
  (byte[256]) buffer1#10 ← phi( main::@7/(byte[256]) buffer1#14 )
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#5 flip::@4/(byte[256]) buffer2#6 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#4 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::r#3 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#3 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#2 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#2 )
  (byte~) flip::$0 ← (byte[256]) buffer1#2 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte~) flip::$1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::dstIdx#1 ← (byte~) flip::$1
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte[256]) buffer2#6 ← phi( flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#4 ← phi( flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@2/(byte[256]) buffer1#2 )
  (byte) flip::r#2 ← phi( flip::@2/(byte) flip::r#3 )
  (byte) flip::dstIdx#4 ← phi( flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#4
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  (byte[256]) buffer1#7 ← phi( flip::@4/(byte[256]) buffer1#11 )
  (byte[256]) buffer2#4 ← phi( flip::@4/(byte[256]) buffer2#6 )
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@3/(byte[256]) buffer1#3 flip::@5/(byte[256]) buffer1#7 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) 0 )
  (byte[256]) buffer2#2 ← phi( flip::@3/(byte[256]) buffer2#2 flip::@5/(byte[256]) buffer2#4 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte[256]) buffer1#12 ← phi( main::@10/(byte[256]) buffer1#15 )
  (byte[1000]) SCREEN#1 ← phi( main::@10/(byte[1000]) SCREEN#2 )
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*~) plot::$2 ← (byte*~) plot::$1 + (byte) 212
  (byte*) plot::line#0 ← (byte*~) plot::$2
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#4 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#12 plot::@3/(byte[256]) buffer1#13 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::y#3 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#3 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#4 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#4 )
  (byte~) plot::$3 ← (byte[256]) buffer1#4 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte) plot::i#4 ← phi( plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@2/(byte[256]) buffer1#4 )
  (byte) plot::y#2 ← phi( plot::@2/(byte) plot::y#3 )
  (byte*) plot::line#3 ← phi( plot::@2/(byte*) plot::line#2 )
  (byte*~) plot::$5 ← (byte*) plot::line#3 + (byte) 40
  (byte*) plot::line#1 ← (byte*~) plot::$5
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@end: scope:[]  from @begin

Not aliassing across scopes: plot::$1 SCREEN#1
Alias (byte*) RASTER#6 = (byte*) RASTER#8 
Alias (byte[1000]) SCREEN#10 = (byte[1000]) SCREEN#11 
Alias (byte[256]) buffer1#22 = (byte[256]) buffer1#9 (byte[256]) buffer1#5 
Alias (byte[256]) buffer2#14 = (byte[256]) buffer2#15 
Alias (byte*) RASTER#10 = (byte*) RASTER#4 (byte*) RASTER#7 (byte*) RASTER#2 (byte*) RASTER#9 (byte*) RASTER#5 
Alias (byte) main::c#1 = (byte) main::c#5 
Alias (byte[1000]) SCREEN#1 = (byte[1000]) SCREEN#8 (byte[1000]) SCREEN#4 (byte[1000]) SCREEN#5 (byte[1000]) SCREEN#3 (byte[1000]) SCREEN#2 (byte[1000]) SCREEN#9 
Alias (byte[256]) buffer1#10 = (byte[256]) buffer1#20 (byte[256]) buffer1#16 (byte[256]) buffer1#17 (byte[256]) buffer1#14 (byte[256]) buffer1#15 (byte[256]) buffer1#21 (byte[256]) buffer1#12 
Alias (byte[256]) buffer2#12 = (byte[256]) buffer2#8 (byte[256]) buffer2#9 (byte[256]) buffer2#7 (byte[256]) buffer2#16 (byte[256]) buffer2#13 (byte[256]) buffer2#5 
Alias (byte) main::c#2 = (byte) main::c#3 
Alias (byte) flip::dstIdx#1 = (byte~) flip::$1 (byte) flip::dstIdx#4 
Alias (byte) flip::r#2 = (byte) flip::r#3 
Alias (byte[256]) buffer1#11 = (byte[256]) buffer1#2 (byte[256]) buffer1#7 
Alias (byte) flip::srcIdx#1 = (byte) flip::srcIdx#4 
Alias (byte[256]) buffer2#1 = (byte[256]) buffer2#6 (byte[256]) buffer2#4 
Alias (byte*) plot::line#0 = (byte*~) plot::$2 
Alias (byte*) plot::line#2 = (byte*) plot::line#3 
Alias (byte) plot::y#2 = (byte) plot::y#3 
Alias (byte[256]) buffer1#13 = (byte[256]) buffer1#4 
Alias (byte) plot::i#1 = (byte) plot::i#4 
Alias (byte*) plot::line#1 = (byte*~) plot::$5 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte[256]) buffer2#14 ← phi( @begin/(word) 4352 )
  (byte[1000]) SCREEN#10 ← phi( @begin/(word) 1024 )
  (byte*) RASTER#6 ← phi( @begin/(word) 53266 )
  (byte[256]) buffer1#22 ← phi( @begin/(word) 4096 )
  call prepare param-assignment
  to:main::@9
main::@9: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#12 main::@9/(byte[256]) buffer2#14 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#10 main::@9/(byte[256]) buffer1#22 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#1 main::@9/(byte[1000]) SCREEN#10 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#10 main::@9/(byte*) RASTER#6 )
  to:main::@3
main::@2: scope:[main]  from main::@6
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#18 ← phi( main::@1/(byte[256]) buffer1#19 main::@2/(byte[256]) buffer1#10 main::@3/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#1 main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(byte) 25 main::@2/(byte) main::c#1 main::@3/(byte) main::c#4 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#10 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte[256]) buffer2#12 ← phi( main::@3/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#12 )
  (byte[256]) buffer1#10 ← phi( main::@3/(byte[256]) buffer1#18 main::@4/(byte[256]) buffer1#10 )
  (byte[1000]) SCREEN#1 ← phi( main::@3/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#1 )
  (byte) main::c#2 ← phi( main::@3/(byte) main::c#4 main::@4/(byte) main::c#2 )
  (byte*) RASTER#10 ← phi( main::@3/(byte*) RASTER#1 main::@4/(byte*) RASTER#10 )
  (byte~) main::$3 ← * (byte*) RASTER#10
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(byte[256]) buffer1#22 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#12 flip::@4/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::r#2 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#2 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#11 )
  (byte~) flip::$0 ← (byte[256]) buffer1#11 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@3/(byte[256]) buffer1#3 flip::@5/(byte[256]) buffer1#11 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) 0 )
  (byte[256]) buffer2#2 ← phi( flip::@3/(byte[256]) buffer2#2 flip::@5/(byte[256]) buffer2#1 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#10 plot::@3/(byte[256]) buffer1#13 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::y#2 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#2 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#13 )
  (byte~) plot::$3 ← (byte[256]) buffer1#13 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@end: scope:[]  from @begin

Redundant Phi (byte[256]) buffer1#22 (word) 4096
Redundant Phi (byte*) RASTER#6 (word) 53266
Redundant Phi (byte[1000]) SCREEN#10 (word) 1024
Redundant Phi (byte[256]) buffer2#14 (word) 4352
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call prepare param-assignment
  to:main::@9
main::@9: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#12 main::@9/(word) 4352 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#10 main::@9/(word) 4096 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#1 main::@9/(word) 1024 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#10 main::@9/(word) 53266 )
  to:main::@3
main::@2: scope:[main]  from main::@6
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#18 ← phi( main::@1/(byte[256]) buffer1#19 main::@2/(byte[256]) buffer1#10 main::@3/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#1 main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#4 ← phi( main::@1/(byte) 25 main::@2/(byte) main::c#1 main::@3/(byte) main::c#4 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#10 main::@3/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte[256]) buffer2#12 ← phi( main::@3/(byte[256]) buffer2#10 main::@4/(byte[256]) buffer2#12 )
  (byte[256]) buffer1#10 ← phi( main::@3/(byte[256]) buffer1#18 main::@4/(byte[256]) buffer1#10 )
  (byte[1000]) SCREEN#1 ← phi( main::@3/(byte[1000]) SCREEN#6 main::@4/(byte[1000]) SCREEN#1 )
  (byte) main::c#2 ← phi( main::@3/(byte) main::c#4 main::@4/(byte) main::c#2 )
  (byte*) RASTER#10 ← phi( main::@3/(byte*) RASTER#1 main::@4/(byte*) RASTER#10 )
  (byte~) main::$3 ← * (byte*) RASTER#10
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(word) 4096 prepare::@1/(byte[256]) buffer1#1 )
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#12 flip::@4/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::r#2 ← phi( flip::@1/(byte) flip::r#4 flip::@2/(byte) flip::r#2 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 flip::@2/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@1/(byte[256]) buffer1#6 flip::@2/(byte[256]) buffer1#11 )
  (byte~) flip::$0 ← (byte[256]) buffer1#11 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@3/(byte[256]) buffer1#3 flip::@5/(byte[256]) buffer1#11 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) 0 )
  (byte[256]) buffer2#2 ← phi( flip::@3/(byte[256]) buffer2#2 flip::@5/(byte[256]) buffer2#1 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#10 plot::@3/(byte[256]) buffer1#13 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::y#2 ← phi( plot::@1/(byte) plot::y#4 plot::@2/(byte) plot::y#2 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 plot::@2/(byte*) plot::line#2 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@1/(byte[256]) buffer1#8 plot::@2/(byte[256]) buffer1#13 )
  (byte~) plot::$3 ← (byte[256]) buffer1#13 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@end: scope:[]  from @begin

Self Phi Eliminated (byte*) RASTER#1
Self Phi Eliminated (byte) main::c#4
Self Phi Eliminated (byte[1000]) SCREEN#6
Self Phi Eliminated (byte[256]) buffer1#18
Self Phi Eliminated (byte[256]) buffer2#10
Self Phi Eliminated (byte*) RASTER#10
Self Phi Eliminated (byte) main::c#2
Self Phi Eliminated (byte[1000]) SCREEN#1
Self Phi Eliminated (byte[256]) buffer1#10
Self Phi Eliminated (byte[256]) buffer2#12
Self Phi Eliminated (byte[256]) buffer1#1
Self Phi Eliminated (byte[256]) buffer1#11
Self Phi Eliminated (byte[256]) buffer2#1
Self Phi Eliminated (byte) flip::r#2
Self Phi Eliminated (byte[256]) buffer2#2
Self Phi Eliminated (byte[256]) buffer1#3
Self Phi Eliminated (byte[256]) buffer1#13
Self Phi Eliminated (byte*) plot::line#2
Self Phi Eliminated (byte) plot::y#2
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call prepare param-assignment
  to:main::@9
main::@9: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#12 main::@9/(word) 4352 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#10 main::@9/(word) 4096 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#1 main::@9/(word) 1024 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#10 main::@9/(word) 53266 )
  to:main::@3
main::@2: scope:[main]  from main::@6
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 )
  (byte[256]) buffer1#18 ← phi( main::@1/(byte[256]) buffer1#19 main::@2/(byte[256]) buffer1#10 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#1 )
  (byte) main::c#4 ← phi( main::@1/(byte) 25 main::@2/(byte) main::c#1 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#10 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  (boolean~) main::$2 ← (byte~) main::$1 != (byte) 254
  if((boolean~) main::$2) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte[256]) buffer2#12 ← phi( main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#10 ← phi( main::@3/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#1 ← phi( main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#2 ← phi( main::@3/(byte) main::c#4 )
  (byte*) RASTER#10 ← phi( main::@3/(byte*) RASTER#1 )
  (byte~) main::$3 ← * (byte*) RASTER#10
  (boolean~) main::$4 ← (byte~) main::$3 != (byte) 255
  if((boolean~) main::$4) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  (boolean~) main::$5 ← (byte) main::c#1 != (byte) 0
  if((boolean~) main::$5) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(word) 4096 )
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  (boolean~) prepare::$0 ← (byte) prepare::i#1 != (byte) 0
  if((boolean~) prepare::$0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#12 flip::@4/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::r#2 ← phi( flip::@1/(byte) flip::r#4 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@1/(byte[256]) buffer1#6 )
  (byte~) flip::$0 ← (byte[256]) buffer1#11 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  (boolean~) flip::$2 ← (byte) flip::c#1 != (byte) 0
  if((boolean~) flip::$2) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  (boolean~) flip::$3 ← (byte) flip::r#1 != (byte) 0
  if((boolean~) flip::$3) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@5/(byte[256]) buffer1#11 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) 0 )
  (byte[256]) buffer2#2 ← phi( flip::@5/(byte[256]) buffer2#1 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  (boolean~) flip::$5 ← (byte) flip::i#1 != (byte) 0
  if((boolean~) flip::$5) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#10 plot::@3/(byte[256]) buffer1#13 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::y#2 ← phi( plot::@1/(byte) plot::y#4 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@1/(byte[256]) buffer1#8 )
  (byte~) plot::$3 ← (byte[256]) buffer1#13 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  (boolean~) plot::$4 ← (byte) plot::x#1 < (byte) 16
  if((boolean~) plot::$4) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  (boolean~) plot::$6 ← (byte) plot::y#1 != (byte) 0
  if((boolean~) plot::$6) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@end: scope:[]  from @begin

Simple Condition (boolean~) main::$2 if((byte~) main::$1!=(byte) 254) goto main::@3
Simple Condition (boolean~) main::$4 if((byte~) main::$3!=(byte) 255) goto main::@4
Simple Condition (boolean~) main::$5 if((byte) main::c#1!=(byte) 0) goto main::@2
Simple Condition (boolean~) prepare::$0 if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
Simple Condition (boolean~) flip::$2 if((byte) flip::c#1!=(byte) 0) goto flip::@2
Simple Condition (boolean~) flip::$3 if((byte) flip::r#1!=(byte) 0) goto flip::@1
Simple Condition (boolean~) flip::$5 if((byte) flip::i#1!=(byte) 0) goto flip::@3
Simple Condition (boolean~) plot::$4 if((byte) plot::x#1<(byte) 16) goto plot::@2
Simple Condition (boolean~) plot::$6 if((byte) plot::y#1!=(byte) 0) goto plot::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call prepare param-assignment
  to:main::@9
main::@9: scope:[main]  from main
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@9
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#12 main::@9/(word) 4352 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#10 main::@9/(word) 4096 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#1 main::@9/(word) 1024 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#10 main::@9/(word) 53266 )
  to:main::@3
main::@2: scope:[main]  from main::@6
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2 main::@3
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@2/(byte[256]) buffer2#12 )
  (byte[256]) buffer1#18 ← phi( main::@1/(byte[256]) buffer1#19 main::@2/(byte[256]) buffer1#10 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@2/(byte[1000]) SCREEN#1 )
  (byte) main::c#4 ← phi( main::@1/(byte) 25 main::@2/(byte) main::c#1 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@2/(byte*) RASTER#10 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte[256]) buffer2#12 ← phi( main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#10 ← phi( main::@3/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#1 ← phi( main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#2 ← phi( main::@3/(byte) main::c#4 )
  (byte*) RASTER#10 ← phi( main::@3/(byte*) RASTER#1 )
  (byte~) main::$3 ← * (byte*) RASTER#10
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(word) 4096 )
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#12 flip::@4/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::r#2 ← phi( flip::@1/(byte) flip::r#4 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@1/(byte[256]) buffer1#6 )
  (byte~) flip::$0 ← (byte[256]) buffer1#11 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@5
flip::@5: scope:[flip]  from flip::@4
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@5
  (byte[256]) buffer1#3 ← phi( flip::@5/(byte[256]) buffer1#11 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@5/(byte) 0 )
  (byte[256]) buffer2#2 ← phi( flip::@5/(byte[256]) buffer2#1 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#10 plot::@3/(byte[256]) buffer1#13 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::y#2 ← phi( plot::@1/(byte) plot::y#4 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@1/(byte[256]) buffer1#8 )
  (byte~) plot::$3 ← (byte[256]) buffer1#13 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@end: scope:[]  from @begin

Culled Empty Block (label) main::@9
Culled Empty Block (label) main::@2
Culled Empty Block (label) flip::@5
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call prepare param-assignment
  to:main::@1
main::@1: scope:[main]  from main main::@11
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#12 main/(word) 4352 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#10 main/(word) 4096 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#1 main/(word) 1024 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#10 main/(word) 53266 )
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@3 main::@6
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@6/(byte[256]) buffer2#12 )
  (byte[256]) buffer1#18 ← phi( main::@1/(byte[256]) buffer1#19 main::@6/(byte[256]) buffer1#10 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@6/(byte[1000]) SCREEN#1 )
  (byte) main::c#4 ← phi( main::@1/(byte) 25 main::@6/(byte) main::c#1 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@6/(byte*) RASTER#10 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte[256]) buffer2#12 ← phi( main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#10 ← phi( main::@3/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#1 ← phi( main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#2 ← phi( main::@3/(byte) main::c#4 )
  (byte*) RASTER#10 ← phi( main::@3/(byte*) RASTER#1 )
  (byte~) main::$3 ← * (byte*) RASTER#10
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte[256]) buffer1#1 ← phi( prepare/(word) 4096 )
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((byte[256]) buffer1#1 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#12 flip::@4/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::r#2 ← phi( flip::@1/(byte) flip::r#4 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@1/(byte[256]) buffer1#6 )
  (byte~) flip::$0 ← (byte[256]) buffer1#11 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  (byte[256]) buffer1#3 ← phi( flip::@4/(byte[256]) buffer1#11 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 )
  (byte[256]) buffer2#2 ← phi( flip::@4/(byte[256]) buffer2#1 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#10 plot::@3/(byte[256]) buffer1#13 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::y#2 ← phi( plot::@1/(byte) plot::y#4 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@1/(byte[256]) buffer1#8 )
  (byte~) plot::$3 ← (byte[256]) buffer1#13 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@end: scope:[]  from @begin

Constant (byte[256]) buffer1#1 (word) 4096
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call prepare param-assignment
  to:main::@1
main::@1: scope:[main]  from main main::@11
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#12 main/(word) 4352 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#10 main/(word) 4096 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#1 main/(word) 1024 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#10 main/(word) 53266 )
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@3 main::@6
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@6/(byte[256]) buffer2#12 )
  (byte[256]) buffer1#18 ← phi( main::@1/(byte[256]) buffer1#19 main::@6/(byte[256]) buffer1#10 )
  (byte[1000]) SCREEN#6 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@6/(byte[1000]) SCREEN#1 )
  (byte) main::c#4 ← phi( main::@1/(byte) 25 main::@6/(byte) main::c#1 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@6/(byte*) RASTER#10 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte[256]) buffer2#12 ← phi( main::@3/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#10 ← phi( main::@3/(byte[256]) buffer1#18 )
  (byte[1000]) SCREEN#1 ← phi( main::@3/(byte[1000]) SCREEN#6 )
  (byte) main::c#2 ← phi( main::@3/(byte) main::c#4 )
  (byte*) RASTER#10 ← phi( main::@3/(byte*) RASTER#1 )
  (byte~) main::$3 ← * (byte*) RASTER#10
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#4 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#3 ← phi( flip/(byte[256]) buffer2#12 flip::@4/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#6 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::r#2 ← phi( flip::@1/(byte) flip::r#4 )
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte[256]) buffer2#1 ← phi( flip::@1/(byte[256]) buffer2#3 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip::@1/(byte[256]) buffer1#6 )
  (byte~) flip::$0 ← (byte[256]) buffer1#11 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  (byte[256]) buffer1#3 ← phi( flip::@4/(byte[256]) buffer1#11 )
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 )
  (byte[256]) buffer2#2 ← phi( flip::@4/(byte[256]) buffer2#1 )
  (byte~) flip::$4 ← (byte[256]) buffer2#2 *idx (byte) flip::i#2
  *((byte[256]) buffer1#3 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#4 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#4 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#8 ← phi( plot/(byte[256]) buffer1#10 plot::@3/(byte[256]) buffer1#13 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::y#2 ← phi( plot::@1/(byte) plot::y#4 )
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte*) plot::line#2 ← phi( plot::@1/(byte*) plot::line#4 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot::@1/(byte[256]) buffer1#8 )
  (byte~) plot::$3 ← (byte[256]) buffer1#13 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@end: scope:[]  from @begin

Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Not aliassing across scopes: plot::$1 SCREEN#1
Alias (byte*) RASTER#1 = (byte*) RASTER#10 
Alias (byte) main::c#2 = (byte) main::c#4 
Alias (byte[1000]) SCREEN#1 = (byte[1000]) SCREEN#6 
Alias (byte[256]) buffer1#10 = (byte[256]) buffer1#18 
Alias (byte[256]) buffer2#10 = (byte[256]) buffer2#12 
Alias (byte[256]) buffer1#11 = (byte[256]) buffer1#6 (byte[256]) buffer1#3 
Alias (byte[256]) buffer2#1 = (byte[256]) buffer2#3 (byte[256]) buffer2#2 
Alias (byte) flip::r#2 = (byte) flip::r#4 
Alias (byte[256]) buffer1#13 = (byte[256]) buffer1#8 
Alias (byte*) plot::line#2 = (byte*) plot::line#4 
Alias (byte) plot::y#2 = (byte) plot::y#4 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call prepare param-assignment
  to:main::@1
main::@1: scope:[main]  from main main::@11
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#10 main/(word) 4352 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#10 main/(word) 4096 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#1 main/(word) 1024 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#1 main/(word) 53266 )
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@3 main::@6
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 main::@6/(byte[256]) buffer2#10 )
  (byte[256]) buffer1#10 ← phi( main::@1/(byte[256]) buffer1#19 main::@6/(byte[256]) buffer1#10 )
  (byte[1000]) SCREEN#1 ← phi( main::@1/(byte[1000]) SCREEN#7 main::@6/(byte[1000]) SCREEN#1 )
  (byte) main::c#2 ← phi( main::@1/(byte) 25 main::@6/(byte) main::c#1 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 main::@6/(byte*) RASTER#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER#1
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#2 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#1 ← phi( flip/(byte[256]) buffer2#10 flip::@4/(byte[256]) buffer2#1 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip/(byte[256]) buffer1#10 flip::@4/(byte[256]) buffer1#11 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (byte[256]) buffer1#11 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 )
  (byte~) flip::$4 ← (byte[256]) buffer2#1 *idx (byte) flip::i#2
  *((byte[256]) buffer1#11 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#2 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#2 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot/(byte[256]) buffer1#10 plot::@3/(byte[256]) buffer1#13 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (byte[256]) buffer1#13 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@end: scope:[]  from @begin

Self Phi Eliminated (byte*) RASTER#1
Self Phi Eliminated (byte[1000]) SCREEN#1
Self Phi Eliminated (byte[256]) buffer1#10
Self Phi Eliminated (byte[256]) buffer2#10
Self Phi Eliminated (byte[256]) buffer1#11
Self Phi Eliminated (byte[256]) buffer2#1
Self Phi Eliminated (byte[256]) buffer1#13
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call prepare param-assignment
  to:main::@1
main::@1: scope:[main]  from main main::@11
  (byte[256]) buffer2#11 ← phi( main::@11/(byte[256]) buffer2#10 main/(word) 4352 )
  (byte[256]) buffer1#19 ← phi( main::@11/(byte[256]) buffer1#10 main/(word) 4096 )
  (byte[1000]) SCREEN#7 ← phi( main::@11/(byte[1000]) SCREEN#1 main/(word) 1024 )
  (byte*) RASTER#3 ← phi( main::@11/(byte*) RASTER#1 main/(word) 53266 )
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@3 main::@6
  (byte[256]) buffer2#10 ← phi( main::@1/(byte[256]) buffer2#11 )
  (byte[256]) buffer1#10 ← phi( main::@1/(byte[256]) buffer1#19 )
  (byte[1000]) SCREEN#1 ← phi( main::@1/(byte[1000]) SCREEN#7 )
  (byte) main::c#2 ← phi( main::@1/(byte) 25 main::@6/(byte) main::c#1 )
  (byte*) RASTER#1 ← phi( main::@1/(byte*) RASTER#3 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER#1
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#2 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte[256]) buffer2#1 ← phi( flip/(byte[256]) buffer2#10 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  (byte[256]) buffer1#11 ← phi( flip/(byte[256]) buffer1#10 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (byte[256]) buffer1#11 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 )
  (byte~) flip::$4 ← (byte[256]) buffer2#1 *idx (byte) flip::i#2
  *((byte[256]) buffer1#11 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#2 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#2 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  (byte[256]) buffer1#13 ← phi( plot/(byte[256]) buffer1#10 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (byte[256]) buffer1#13 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@end: scope:[]  from @begin

Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Not aliassing across scopes: plot::$1 SCREEN#1
Alias (byte*) RASTER#1 = (byte*) RASTER#3 
Alias (byte[1000]) SCREEN#1 = (byte[1000]) SCREEN#7 
Alias (byte[256]) buffer1#10 = (byte[256]) buffer1#19 (byte[256]) buffer1#11 (byte[256]) buffer1#13 
Alias (byte[256]) buffer2#1 = (byte[256]) buffer2#10 (byte[256]) buffer2#11 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call prepare param-assignment
  to:main::@1
main::@1: scope:[main]  from main main::@11
  (byte[256]) buffer2#1 ← phi( main::@11/(byte[256]) buffer2#1 main/(word) 4352 )
  (byte[256]) buffer1#10 ← phi( main::@11/(byte[256]) buffer1#10 main/(word) 4096 )
  (byte[1000]) SCREEN#1 ← phi( main::@11/(byte[1000]) SCREEN#1 main/(word) 1024 )
  (byte*) RASTER#1 ← phi( main::@11/(byte*) RASTER#1 main/(word) 53266 )
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@3 main::@6
  (byte) main::c#2 ← phi( main::@1/(byte) 25 main::@6/(byte) main::c#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER#1
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#2 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (byte[256]) buffer1#10 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 )
  (byte~) flip::$4 ← (byte[256]) buffer2#1 *idx (byte) flip::i#2
  *((byte[256]) buffer1#10 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#2 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#2 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (byte[256]) buffer1#10 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@end: scope:[]  from @begin

Self Phi Eliminated (byte*) RASTER#1
Self Phi Eliminated (byte[1000]) SCREEN#1
Self Phi Eliminated (byte[256]) buffer1#10
Self Phi Eliminated (byte[256]) buffer2#1
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call prepare param-assignment
  to:main::@1
main::@1: scope:[main]  from main main::@11
  (byte[256]) buffer2#1 ← phi( main/(word) 4352 )
  (byte[256]) buffer1#10 ← phi( main/(word) 4096 )
  (byte[1000]) SCREEN#1 ← phi( main/(word) 1024 )
  (byte*) RASTER#1 ← phi( main/(word) 53266 )
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@3 main::@6
  (byte) main::c#2 ← phi( main::@1/(byte) 25 main::@6/(byte) main::c#1 )
  (byte~) main::$1 ← * (byte*) RASTER#1
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (byte*) RASTER#1
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#2 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (byte[256]) buffer1#10 *idx (byte) flip::srcIdx#2
  *((byte[256]) buffer2#1 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 )
  (byte~) flip::$4 ← (byte[256]) buffer2#1 *idx (byte) flip::i#2
  *((byte[256]) buffer1#10 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte*~) plot::$1 ← (byte[1000]) SCREEN#1
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#2 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#2 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (byte[256]) buffer1#10 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@end: scope:[]  from @begin

Constant (byte*) RASTER#1 (word) 53266
Constant (byte[1000]) SCREEN#1 (word) 1024
Constant (byte[256]) buffer1#10 (word) 4096
Constant (byte[256]) buffer2#1 (word) 4352
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call prepare param-assignment
  to:main::@1
main::@1: scope:[main]  from main main::@11
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@3 main::@6
  (byte) main::c#2 ← phi( main::@1/(byte) 25 main::@6/(byte) main::c#1 )
  (byte~) main::$1 ← * (word) 53266
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (word) 53266
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#2 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2
  *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 )
  (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2
  *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte*~) plot::$1 ← (word) 1024
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#2 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#2 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@end: scope:[]  from @begin

Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::srcIdx#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) plot::i#2
Culled Empty Block (label) main::@1
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call prepare param-assignment
  to:main::@3
main::@3: scope:[main]  from main main::@11 main::@3 main::@6
  (byte) main::c#2 ← phi( main/(byte) 25 main::@6/(byte) main::c#1 main::@11/(byte) 25 )
  (byte~) main::$1 ← * (word) 53266
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (word) 53266
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#2 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2
  *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 )
  (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2
  *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte*~) plot::$1 ← (word) 1024
  (byte*) plot::line#0 ← (byte*~) plot::$1 + (byte) 212
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#2 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#2 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@end: scope:[]  from @begin

Constant (byte*~) plot::$1 (word) 1024
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call prepare param-assignment
  to:main::@3
main::@3: scope:[main]  from main main::@11 main::@3 main::@6
  (byte) main::c#2 ← phi( main/(byte) 25 main::@6/(byte) main::c#1 main::@11/(byte) 25 )
  (byte~) main::$1 ← * (word) 53266
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (word) 53266
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#2 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2
  *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 )
  (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2
  *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  (byte*) plot::line#0 ← (word) 1024 + (byte) 212
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#2 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#2 ← phi( plot/(byte*) plot::line#0 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@end: scope:[]  from @begin

Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::srcIdx#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) plot::i#2
Constant (byte*) plot::line#0 (word) 1236
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  call prepare param-assignment
  to:main::@3
main::@3: scope:[main]  from main main::@11 main::@3 main::@6
  (byte) main::c#2 ← phi( main/(byte) 25 main::@6/(byte) main::c#1 main::@11/(byte) 25 )
  (byte~) main::$1 ← * (word) 53266
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (word) 53266
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@3
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@1
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  (byte) flip::r#2 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 )
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 )
  (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2
  *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@2
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@1
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 )
  (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2
  *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@3
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
plot: scope:[plot]  from main::@10
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  (byte) plot::y#2 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 )
  (byte*) plot::line#2 ← phi( plot/(word) 1236 plot::@3/(byte*) plot::line#1 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 )
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 )
  (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 )
  (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@2
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@1
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
@end: scope:[]  from @begin

Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::srcIdx#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) plot::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) prepare::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::srcIdx#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) flip::i#2
Multiple usages for variable. Not optimizing sub-constant (byte) plot::i#2
FINAL SYMBOL TABLE
(label) @begin
(label) @end
(byte*) RASTER
(byte[1000]) SCREEN
(byte[256]) buffer1
(byte[256]) buffer2
(void()) flip()
(byte~) flip::$0
(byte~) flip::$4
(label) flip::@1
(label) flip::@2
(label) flip::@3
(label) flip::@4
(label) flip::@return
(byte) flip::c
(byte) flip::c#1
(byte) flip::c#2
(byte) flip::dstIdx
(byte) flip::dstIdx#1
(byte) flip::dstIdx#2
(byte) flip::dstIdx#3
(byte) flip::dstIdx#5
(byte) flip::i
(byte) flip::i#1
(byte) flip::i#2
(byte) flip::r
(byte) flip::r#1
(byte) flip::r#2
(byte) flip::srcIdx
(byte) flip::srcIdx#1
(byte) flip::srcIdx#2
(byte) flip::srcIdx#3
(void()) main()
(byte~) main::$1
(byte~) main::$3
(label) main::@10
(label) main::@11
(label) main::@3
(label) main::@4
(label) main::@6
(label) main::@7
(label) main::@return
(byte) main::c
(byte) main::c#1
(byte) main::c#2
(void()) plot()
(byte~) plot::$3
(label) plot::@1
(label) plot::@2
(label) plot::@3
(label) plot::@return
(byte) plot::i
(byte) plot::i#1
(byte) plot::i#2
(byte) plot::i#3
(byte*) plot::line
(byte*) plot::line#1
(byte*) plot::line#2
(byte) plot::x
(byte) plot::x#1
(byte) plot::x#2
(byte) plot::y
(byte) plot::y#1
(byte) plot::y#2
(void()) prepare()
(label) prepare::@1
(label) prepare::@return
(byte) prepare::i
(byte) prepare::i#1
(byte) prepare::i#2

Block Sequence Planned @begin @end main main::@3 main::@4 main::@6 main::@7 main::@10 main::@11 main::@return plot plot::@1 plot::@2 plot::@3 plot::@return flip flip::@1 flip::@2 flip::@4 flip::@3 flip::@return prepare prepare::@1 prepare::@return 
Added new block during phi lifting main::@12(between main::@6 and main::@3)
Added new block during phi lifting plot::@5(between plot::@3 and plot::@1)
Added new block during phi lifting plot::@6(between plot::@2 and plot::@2)
Added new block during phi lifting flip::@7(between flip::@4 and flip::@1)
Added new block during phi lifting flip::@8(between flip::@2 and flip::@2)
Added new block during phi lifting flip::@9(between flip::@3 and flip::@3)
Added new block during phi lifting prepare::@3(between prepare::@1 and prepare::@1)
Block Sequence Planned @begin @end main main::@3 main::@4 main::@6 main::@7 main::@10 main::@11 main::@return main::@12 plot plot::@1 plot::@2 plot::@3 plot::@return plot::@5 plot::@6 flip flip::@1 flip::@2 flip::@4 flip::@3 flip::@return flip::@9 flip::@7 flip::@8 prepare prepare::@1 prepare::@return prepare::@3 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  call main param-assignment
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  call prepare param-assignment
  to:main::@3
main::@3: scope:[main]  from main main::@11 main::@12 main::@3
  (byte) main::c#2 ← phi( main/(byte) 25 main::@12/(byte~) main::c#6 main::@11/(byte) 25 )
  (byte~) main::$1 ← * (word) 53266
  if((byte~) main::$1!=(byte) 254) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte~) main::$3 ← * (word) 53266
  if((byte~) main::$3!=(byte) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  (byte) main::c#1 ← -- (byte) main::c#2
  if((byte) main::c#1!=(byte) 0) goto main::@12
  to:main::@7
main::@7: scope:[main]  from main::@6
  call flip param-assignment
  to:main::@10
main::@10: scope:[main]  from main::@7
  call plot param-assignment
  to:main::@11
main::@11: scope:[main]  from main::@10
  if(true) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@11
  return 
  to:@return
main::@12: scope:[main]  from main::@6
  (byte~) main::c#6 ← (byte) main::c#1
  to:main::@3
plot: scope:[plot]  from main::@10
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@5
  (byte) plot::y#2 ← phi( plot/(byte) 16 plot::@5/(byte~) plot::y#5 )
  (byte*) plot::line#2 ← phi( plot/(word) 1236 plot::@5/(byte*~) plot::line#5 )
  (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@5/(byte~) plot::i#5 )
  (byte~) plot::i#6 ← (byte) plot::i#3
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@6
  (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@6/(byte~) plot::x#3 )
  (byte) plot::i#2 ← phi( plot::@1/(byte~) plot::i#6 plot::@6/(byte~) plot::i#7 )
  (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2
  *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3
  (byte) plot::i#1 ← ++ (byte) plot::i#2
  (byte) plot::x#1 ← ++ (byte) plot::x#2
  if((byte) plot::x#1<(byte) 16) goto plot::@6
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40
  (byte) plot::y#1 ← -- (byte) plot::y#2
  if((byte) plot::y#1!=(byte) 0) goto plot::@5
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  return 
  to:@return
plot::@5: scope:[plot]  from plot::@3
  (byte~) plot::i#5 ← (byte) plot::i#1
  (byte*~) plot::line#5 ← (byte*) plot::line#1
  (byte~) plot::y#5 ← (byte) plot::y#1
  to:plot::@1
plot::@6: scope:[plot]  from plot::@2
  (byte~) plot::i#7 ← (byte) plot::i#1
  (byte~) plot::x#3 ← (byte) plot::x#1
  to:plot::@2
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@7
  (byte) flip::r#2 ← phi( flip/(byte) 16 flip::@7/(byte~) flip::r#5 )
  (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@7/(byte~) flip::dstIdx#6 )
  (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@7/(byte~) flip::srcIdx#5 )
  (byte~) flip::srcIdx#6 ← (byte) flip::srcIdx#3
  (byte~) flip::dstIdx#7 ← (byte) flip::dstIdx#5
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@8
  (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@8/(byte~) flip::c#3 )
  (byte) flip::dstIdx#3 ← phi( flip::@1/(byte~) flip::dstIdx#7 flip::@8/(byte~) flip::dstIdx#8 )
  (byte) flip::srcIdx#2 ← phi( flip::@1/(byte~) flip::srcIdx#6 flip::@8/(byte~) flip::srcIdx#7 )
  (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2
  *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0
  (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2
  (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16
  (byte) flip::c#1 ← -- (byte) flip::c#2
  if((byte) flip::c#1!=(byte) 0) goto flip::@8
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1
  (byte) flip::r#1 ← -- (byte) flip::r#2
  if((byte) flip::r#1!=(byte) 0) goto flip::@7
  to:flip::@3
flip::@3: scope:[flip]  from flip::@4 flip::@9
  (byte) flip::i#2 ← phi( flip::@9/(byte~) flip::i#3 flip::@4/(byte) 0 )
  (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2
  *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4
  (byte) flip::i#1 ← ++ (byte) flip::i#2
  if((byte) flip::i#1!=(byte) 0) goto flip::@9
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  return 
  to:@return
flip::@9: scope:[flip]  from flip::@3
  (byte~) flip::i#3 ← (byte) flip::i#1
  to:flip::@3
flip::@7: scope:[flip]  from flip::@4
  (byte~) flip::srcIdx#5 ← (byte) flip::srcIdx#1
  (byte~) flip::dstIdx#6 ← (byte) flip::dstIdx#2
  (byte~) flip::r#5 ← (byte) flip::r#1
  to:flip::@1
flip::@8: scope:[flip]  from flip::@2
  (byte~) flip::srcIdx#7 ← (byte) flip::srcIdx#1
  (byte~) flip::dstIdx#8 ← (byte) flip::dstIdx#1
  (byte~) flip::c#3 ← (byte) flip::c#1
  to:flip::@2
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@3
  (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@3/(byte~) prepare::i#3 )
  *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2
  (byte) prepare::i#1 ← ++ (byte) prepare::i#2
  if((byte) prepare::i#1!=(byte) 0) goto prepare::@3
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  return 
  to:@return
prepare::@3: scope:[prepare]  from prepare::@1
  (byte~) prepare::i#3 ← (byte) prepare::i#1
  to:prepare::@1

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  [1] call prepare param-assignment [ ]
  to:main::@3
main::@3: scope:[main]  from main main::@11 main::@12 main::@3
  [2] (byte) main::c#2 ← phi( main/(byte) 25 main::@12/(byte~) main::c#6 main::@11/(byte) 25 ) [ main::c#2 ]
  [3] (byte~) main::$1 ← * (word) 53266 [ main::$1 main::c#2 ]
  [4] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#2 ]
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  [5] (byte~) main::$3 ← * (word) 53266 [ main::$3 main::c#2 ]
  [6] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#2 ]
  to:main::@6
main::@6: scope:[main]  from main::@4
  [7] (byte) main::c#1 ← -- (byte) main::c#2 [ main::c#1 ]
  [8] if((byte) main::c#1!=(byte) 0) goto main::@12 [ main::c#1 ]
  to:main::@7
main::@7: scope:[main]  from main::@6
  [9] call flip param-assignment [ ]
  to:main::@10
main::@10: scope:[main]  from main::@7
  [10] call plot param-assignment [ ]
  to:main::@11
main::@11: scope:[main]  from main::@10
  [11] if(true) goto main::@3 [ ]
  to:main::@return
main::@return: scope:[main]  from main::@11
  [12] return  [ ]
  to:@return
main::@12: scope:[main]  from main::@6
  [13] (byte~) main::c#6 ← (byte) main::c#1 [ main::c#6 ]
  to:main::@3
plot: scope:[plot]  from main::@10
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@5
  [14] (byte) plot::y#2 ← phi( plot/(byte) 16 plot::@5/(byte~) plot::y#5 ) [ plot::i#3 plot::line#2 plot::y#2 ]
  [14] (byte*) plot::line#2 ← phi( plot/(word) 1236 plot::@5/(byte*~) plot::line#5 ) [ plot::i#3 plot::line#2 plot::y#2 ]
  [14] (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@5/(byte~) plot::i#5 ) [ plot::i#3 plot::line#2 plot::y#2 ]
  [15] (byte~) plot::i#6 ← (byte) plot::i#3 [ plot::i#6 plot::line#2 plot::y#2 ]
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@6
  [16] (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@6/(byte~) plot::x#3 ) [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ]
  [16] (byte) plot::i#2 ← phi( plot::@1/(byte~) plot::i#6 plot::@6/(byte~) plot::i#7 ) [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ]
  [17] (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2 [ plot::i#2 plot::line#2 plot::x#2 plot::$3 plot::y#2 ]
  [18] *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ]
  [19] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::line#2 plot::x#2 plot::y#2 plot::i#1 ]
  [20] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::line#2 plot::x#1 plot::y#2 plot::i#1 ]
  [21] if((byte) plot::x#1<(byte) 16) goto plot::@6 [ plot::line#2 plot::x#1 plot::y#2 plot::i#1 ]
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  [22] (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40 [ plot::y#2 plot::i#1 plot::line#1 ]
  [23] (byte) plot::y#1 ← -- (byte) plot::y#2 [ plot::y#1 plot::i#1 plot::line#1 ]
  [24] if((byte) plot::y#1!=(byte) 0) goto plot::@5 [ plot::y#1 plot::i#1 plot::line#1 ]
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  [25] return  [ ]
  to:@return
plot::@5: scope:[plot]  from plot::@3
  [26] (byte~) plot::i#5 ← (byte) plot::i#1 [ plot::i#5 plot::y#1 plot::line#1 ]
  [27] (byte*~) plot::line#5 ← (byte*) plot::line#1 [ plot::i#5 plot::line#5 plot::y#1 ]
  [28] (byte~) plot::y#5 ← (byte) plot::y#1 [ plot::i#5 plot::line#5 plot::y#5 ]
  to:plot::@1
plot::@6: scope:[plot]  from plot::@2
  [29] (byte~) plot::i#7 ← (byte) plot::i#1 [ plot::i#7 plot::line#2 plot::x#1 plot::y#2 ]
  [30] (byte~) plot::x#3 ← (byte) plot::x#1 [ plot::i#7 plot::x#3 plot::line#2 plot::y#2 ]
  to:plot::@2
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@7
  [31] (byte) flip::r#2 ← phi( flip/(byte) 16 flip::@7/(byte~) flip::r#5 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#2 ]
  [31] (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@7/(byte~) flip::dstIdx#6 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#2 ]
  [31] (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@7/(byte~) flip::srcIdx#5 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#2 ]
  [32] (byte~) flip::srcIdx#6 ← (byte) flip::srcIdx#3 [ flip::dstIdx#5 flip::srcIdx#6 flip::r#2 ]
  [33] (byte~) flip::dstIdx#7 ← (byte) flip::dstIdx#5 [ flip::srcIdx#6 flip::dstIdx#7 flip::r#2 ]
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@8
  [34] (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@8/(byte~) flip::c#3 ) [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ]
  [34] (byte) flip::dstIdx#3 ← phi( flip::@1/(byte~) flip::dstIdx#7 flip::@8/(byte~) flip::dstIdx#8 ) [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ]
  [34] (byte) flip::srcIdx#2 ← phi( flip::@1/(byte~) flip::srcIdx#6 flip::@8/(byte~) flip::srcIdx#7 ) [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ]
  [35] (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2 [ flip::srcIdx#2 flip::dstIdx#3 flip::$0 flip::c#2 flip::r#2 ]
  [36] *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ]
  [37] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::dstIdx#3 flip::c#2 flip::r#2 flip::srcIdx#1 ]
  [38] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::c#2 flip::dstIdx#1 flip::r#2 flip::srcIdx#1 ]
  [39] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::c#1 flip::dstIdx#1 flip::r#2 flip::srcIdx#1 ]
  [40] if((byte) flip::c#1!=(byte) 0) goto flip::@8 [ flip::c#1 flip::dstIdx#1 flip::r#2 flip::srcIdx#1 ]
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  [41] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::r#2 flip::srcIdx#1 flip::dstIdx#2 ]
  [42] (byte) flip::r#1 ← -- (byte) flip::r#2 [ flip::r#1 flip::srcIdx#1 flip::dstIdx#2 ]
  [43] if((byte) flip::r#1!=(byte) 0) goto flip::@7 [ flip::r#1 flip::srcIdx#1 flip::dstIdx#2 ]
  to:flip::@3
flip::@3: scope:[flip]  from flip::@4 flip::@9
  [44] (byte) flip::i#2 ← phi( flip::@9/(byte~) flip::i#3 flip::@4/(byte) 0 ) [ flip::i#2 ]
  [45] (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ]
  [46] *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ]
  [47] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ]
  [48] if((byte) flip::i#1!=(byte) 0) goto flip::@9 [ flip::i#1 ]
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  [49] return  [ ]
  to:@return
flip::@9: scope:[flip]  from flip::@3
  [50] (byte~) flip::i#3 ← (byte) flip::i#1 [ flip::i#3 ]
  to:flip::@3
flip::@7: scope:[flip]  from flip::@4
  [51] (byte~) flip::srcIdx#5 ← (byte) flip::srcIdx#1 [ flip::srcIdx#5 flip::r#1 flip::dstIdx#2 ]
  [52] (byte~) flip::dstIdx#6 ← (byte) flip::dstIdx#2 [ flip::srcIdx#5 flip::dstIdx#6 flip::r#1 ]
  [53] (byte~) flip::r#5 ← (byte) flip::r#1 [ flip::srcIdx#5 flip::dstIdx#6 flip::r#5 ]
  to:flip::@1
flip::@8: scope:[flip]  from flip::@2
  [54] (byte~) flip::srcIdx#7 ← (byte) flip::srcIdx#1 [ flip::srcIdx#7 flip::c#1 flip::dstIdx#1 flip::r#2 ]
  [55] (byte~) flip::dstIdx#8 ← (byte) flip::dstIdx#1 [ flip::srcIdx#7 flip::dstIdx#8 flip::c#1 flip::r#2 ]
  [56] (byte~) flip::c#3 ← (byte) flip::c#1 [ flip::srcIdx#7 flip::dstIdx#8 flip::c#3 flip::r#2 ]
  to:flip::@2
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@3
  [57] (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@3/(byte~) prepare::i#3 ) [ prepare::i#2 ]
  [58] *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ]
  [59] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ]
  [60] if((byte) prepare::i#1!=(byte) 0) goto prepare::@3 [ prepare::i#1 ]
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  [61] return  [ ]
  to:@return
prepare::@3: scope:[prepare]  from prepare::@1
  [62] (byte~) prepare::i#3 ← (byte) prepare::i#1 [ prepare::i#3 ]
  to:prepare::@1

Created 14 initial phi equivalence classes
Coalesced [13] main::c#6 ← main::c#1
Coalesced [15] plot::i#6 ← plot::i#3
Coalesced [26] plot::i#5 ← plot::i#1
Coalesced [27] plot::line#5 ← plot::line#1
Coalesced [28] plot::y#5 ← plot::y#1
Coalesced (already) [29] plot::i#7 ← plot::i#1
Coalesced [30] plot::x#3 ← plot::x#1
Coalesced [32] flip::srcIdx#6 ← flip::srcIdx#3
Coalesced [33] flip::dstIdx#7 ← flip::dstIdx#5
Coalesced [50] flip::i#3 ← flip::i#1
Coalesced [51] flip::srcIdx#5 ← flip::srcIdx#1
Coalesced [52] flip::dstIdx#6 ← flip::dstIdx#2
Coalesced [53] flip::r#5 ← flip::r#1
Coalesced (already) [54] flip::srcIdx#7 ← flip::srcIdx#1
Coalesced [55] flip::dstIdx#8 ← flip::dstIdx#1
Coalesced [56] flip::c#3 ← flip::c#1
Coalesced [62] prepare::i#3 ← prepare::i#1
Coalesced down to 11 phi equivalence classes
Culled Empty Block (label) main::@12
Culled Empty Block (label) plot::@5
Culled Empty Block (label) plot::@6
Culled Empty Block (label) flip::@9
Culled Empty Block (label) flip::@7
Culled Empty Block (label) flip::@8
Culled Empty Block (label) prepare::@3
Block Sequence Planned @begin @end main main::@3 main::@4 main::@6 main::@7 main::@10 main::@11 main::@return plot plot::@1 plot::@2 plot::@3 plot::@return flip flip::@1 flip::@2 flip::@4 flip::@3 flip::@return prepare prepare::@1 prepare::@return 
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  [1] call prepare param-assignment [ ]
  to:main::@3
main::@3: scope:[main]  from main main::@11 main::@3 main::@6
  [2] (byte) main::c#2 ← phi( main/(byte) 25 main::@6/(byte) main::c#1 main::@11/(byte) 25 ) [ main::c#2 ]
  [3] (byte~) main::$1 ← * (word) 53266 [ main::$1 main::c#2 ]
  [4] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#2 ]
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  [5] (byte~) main::$3 ← * (word) 53266 [ main::$3 main::c#2 ]
  [6] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#2 ]
  to:main::@6
main::@6: scope:[main]  from main::@4
  [7] (byte) main::c#1 ← -- (byte) main::c#2 [ main::c#1 ]
  [8] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ]
  to:main::@7
main::@7: scope:[main]  from main::@6
  [9] call flip param-assignment [ ]
  to:main::@10
main::@10: scope:[main]  from main::@7
  [10] call plot param-assignment [ ]
  to:main::@11
main::@11: scope:[main]  from main::@10
  [11] if(true) goto main::@3 [ ]
  to:main::@return
main::@return: scope:[main]  from main::@11
  [12] return  [ ]
  to:@return
plot: scope:[plot]  from main::@10
  to:plot::@1
plot::@1: scope:[plot]  from plot plot::@3
  [13] (byte) plot::y#2 ← phi( plot/(byte) 16 plot::@3/(byte) plot::y#1 ) [ plot::i#3 plot::line#2 plot::y#2 ]
  [13] (byte*) plot::line#2 ← phi( plot/(word) 1236 plot::@3/(byte*) plot::line#1 ) [ plot::i#3 plot::line#2 plot::y#2 ]
  [13] (byte) plot::i#3 ← phi( plot/(byte) 0 plot::@3/(byte) plot::i#1 ) [ plot::i#3 plot::line#2 plot::y#2 ]
  to:plot::@2
plot::@2: scope:[plot]  from plot::@1 plot::@2
  [14] (byte) plot::x#2 ← phi( plot::@1/(byte) 0 plot::@2/(byte) plot::x#1 ) [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ]
  [14] (byte) plot::i#2 ← phi( plot::@1/(byte) plot::i#3 plot::@2/(byte) plot::i#1 ) [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ]
  [15] (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2 [ plot::i#2 plot::line#2 plot::x#2 plot::$3 plot::y#2 ]
  [16] *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ]
  [17] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::i#1 plot::line#2 plot::x#2 plot::y#2 ]
  [18] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ]
  [19] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ]
  to:plot::@3
plot::@3: scope:[plot]  from plot::@2
  [20] (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40 [ plot::i#1 plot::line#1 plot::y#2 ]
  [21] (byte) plot::y#1 ← -- (byte) plot::y#2 [ plot::i#1 plot::line#1 plot::y#1 ]
  [22] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ]
  to:plot::@return
plot::@return: scope:[plot]  from plot::@3
  [23] return  [ ]
  to:@return
flip: scope:[flip]  from main::@7
  to:flip::@1
flip::@1: scope:[flip]  from flip flip::@4
  [24] (byte) flip::r#2 ← phi( flip/(byte) 16 flip::@4/(byte) flip::r#1 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#2 ]
  [24] (byte) flip::dstIdx#5 ← phi( flip/(byte) 15 flip::@4/(byte) flip::dstIdx#2 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#2 ]
  [24] (byte) flip::srcIdx#3 ← phi( flip/(byte) 0 flip::@4/(byte) flip::srcIdx#1 ) [ flip::srcIdx#3 flip::dstIdx#5 flip::r#2 ]
  to:flip::@2
flip::@2: scope:[flip]  from flip::@1 flip::@2
  [25] (byte) flip::c#2 ← phi( flip::@1/(byte) 16 flip::@2/(byte) flip::c#1 ) [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ]
  [25] (byte) flip::dstIdx#3 ← phi( flip::@1/(byte) flip::dstIdx#5 flip::@2/(byte) flip::dstIdx#1 ) [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ]
  [25] (byte) flip::srcIdx#2 ← phi( flip::@1/(byte) flip::srcIdx#3 flip::@2/(byte) flip::srcIdx#1 ) [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ]
  [26] (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2 [ flip::srcIdx#2 flip::dstIdx#3 flip::$0 flip::c#2 flip::r#2 ]
  [27] *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ]
  [28] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::srcIdx#1 flip::dstIdx#3 flip::c#2 flip::r#2 ]
  [29] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#2 flip::r#2 ]
  [30] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ]
  [31] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ]
  to:flip::@4
flip::@4: scope:[flip]  from flip::@2
  [32] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#2 ]
  [33] (byte) flip::r#1 ← -- (byte) flip::r#2 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ]
  [34] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ]
  to:flip::@3
flip::@3: scope:[flip]  from flip::@3 flip::@4
  [35] (byte) flip::i#2 ← phi( flip::@3/(byte) flip::i#1 flip::@4/(byte) 0 ) [ flip::i#2 ]
  [36] (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ]
  [37] *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ]
  [38] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ]
  [39] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ]
  to:flip::@return
flip::@return: scope:[flip]  from flip::@3
  [40] return  [ ]
  to:@return
prepare: scope:[prepare]  from main
  to:prepare::@1
prepare::@1: scope:[prepare]  from prepare prepare::@1
  [41] (byte) prepare::i#2 ← phi( prepare/(byte) 0 prepare::@1/(byte) prepare::i#1 ) [ prepare::i#2 ]
  [42] *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ]
  [43] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ]
  [44] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ]
  to:prepare::@return
prepare::@return: scope:[prepare]  from prepare::@1
  [45] return  [ ]
  to:@return

CALL GRAPH
Calls in [] to 0:main 
Calls in [main] to 1:prepare 9:flip 10:plot 

DOMINATORS
@begin dominated by  @begin 
@end dominated by  @end @begin 
main dominated by  @begin main 
main::@3 dominated by  @begin main::@3 main 
main::@4 dominated by  @begin main::@4 main::@3 main 
main::@6 dominated by  @begin main::@4 main::@3 main::@6 main 
main::@7 dominated by  @begin main::@4 main::@3 main::@6 main main::@7 
main::@10 dominated by  @begin main::@4 main::@3 main::@6 main main::@7 main::@10 
main::@11 dominated by  @begin main::@4 main::@3 main::@6 main main::@7 main::@10 main::@11 
main::@return dominated by  @begin main::@4 main::@3 main::@6 main main::@7 main::@return main::@10 main::@11 
plot dominated by  @begin main::@4 main::@3 main::@6 plot main main::@7 main::@10 
plot::@1 dominated by  @begin main::@4 main::@3 main::@6 main plot main::@7 plot::@1 main::@10 
plot::@2 dominated by  @begin main::@4 main::@3 main::@6 main plot main::@7 plot::@2 plot::@1 main::@10 
plot::@3 dominated by  @begin main::@4 main::@3 main::@6 main plot main::@7 plot::@2 plot::@1 main::@10 plot::@3 
plot::@return dominated by  @begin main::@4 main::@3 plot::@return main::@6 main plot main::@7 plot::@2 plot::@1 main::@10 plot::@3 
flip dominated by  @begin main::@4 main::@3 main::@6 main main::@7 flip 
flip::@1 dominated by  @begin main::@4 main::@3 main::@6 main main::@7 flip::@1 flip 
flip::@2 dominated by  @begin main::@4 main::@3 main::@6 main main::@7 flip::@1 flip::@2 flip 
flip::@4 dominated by  flip::@4 @begin main::@4 main::@3 main::@6 main main::@7 flip::@1 flip::@2 flip 
flip::@3 dominated by  flip::@4 flip::@3 @begin main::@4 main::@3 main::@6 main main::@7 flip::@1 flip::@2 flip 
flip::@return dominated by  flip::@4 flip::@3 @begin main::@4 main::@3 main::@6 main main::@7 flip::@return flip::@1 flip::@2 flip 
prepare dominated by  @begin prepare main 
prepare::@1 dominated by  @begin prepare main prepare::@1 
prepare::@return dominated by  @begin prepare::@return prepare main prepare::@1 

Found back edge: Loop head: main::@3 tails: main::@3 blocks: null
Found back edge: Loop head: main::@4 tails: main::@4 blocks: null
Found back edge: Loop head: main::@3 tails: main::@6 blocks: null
Found back edge: Loop head: main::@3 tails: main::@11 blocks: null
Found back edge: Loop head: plot::@2 tails: plot::@2 blocks: null
Found back edge: Loop head: plot::@1 tails: plot::@3 blocks: null
Found back edge: Loop head: flip::@2 tails: flip::@2 blocks: null
Found back edge: Loop head: flip::@1 tails: flip::@4 blocks: null
Found back edge: Loop head: flip::@3 tails: flip::@3 blocks: null
Found back edge: Loop head: prepare::@1 tails: prepare::@1 blocks: null
Populated: Loop head: main::@3 tails: main::@3 blocks: main::@3 
Populated: Loop head: main::@4 tails: main::@4 blocks: main::@4 
Populated: Loop head: main::@3 tails: main::@6 blocks: main::@6 main::@4 main::@3 
Populated: Loop head: main::@3 tails: main::@11 blocks: main::@11 main::@10 main::@7 main::@6 main::@4 main::@3 
Populated: Loop head: plot::@2 tails: plot::@2 blocks: plot::@2 
Populated: Loop head: plot::@1 tails: plot::@3 blocks: plot::@3 plot::@2 plot::@1 
Populated: Loop head: flip::@2 tails: flip::@2 blocks: flip::@2 
Populated: Loop head: flip::@1 tails: flip::@4 blocks: flip::@4 flip::@2 flip::@1 
Populated: Loop head: flip::@3 tails: flip::@3 blocks: flip::@3 
Populated: Loop head: prepare::@1 tails: prepare::@1 blocks: prepare::@1 
NATURAL LOOPS
Loop head: main::@3 tails: main::@3 blocks: main::@3 
Loop head: main::@4 tails: main::@4 blocks: main::@4 
Loop head: main::@3 tails: main::@6 blocks: main::@6 main::@4 main::@3 
Loop head: main::@3 tails: main::@11 blocks: main::@11 main::@10 main::@7 main::@6 main::@4 main::@3 
Loop head: plot::@2 tails: plot::@2 blocks: plot::@2 
Loop head: plot::@1 tails: plot::@3 blocks: plot::@3 plot::@2 plot::@1 
Loop head: flip::@2 tails: flip::@2 blocks: flip::@2 
Loop head: flip::@1 tails: flip::@4 blocks: flip::@4 flip::@2 flip::@1 
Loop head: flip::@3 tails: flip::@3 blocks: flip::@3 
Loop head: prepare::@1 tails: prepare::@1 blocks: prepare::@1 

Found 0 loops in scope []
Found 4 loops in scope [main]
  Loop head: main::@3 tails: main::@3 blocks: main::@3 
  Loop head: main::@4 tails: main::@4 blocks: main::@4 
  Loop head: main::@3 tails: main::@6 blocks: main::@6 main::@4 main::@3 
  Loop head: main::@3 tails: main::@11 blocks: main::@11 main::@10 main::@7 main::@6 main::@4 main::@3 
Found 1 loops in scope [prepare]
  Loop head: prepare::@1 tails: prepare::@1 blocks: prepare::@1 
Found 3 loops in scope [flip]
  Loop head: flip::@2 tails: flip::@2 blocks: flip::@2 
  Loop head: flip::@1 tails: flip::@4 blocks: flip::@4 flip::@2 flip::@1 
  Loop head: flip::@3 tails: flip::@3 blocks: flip::@3 
Found 2 loops in scope [plot]
  Loop head: plot::@2 tails: plot::@2 blocks: plot::@2 
  Loop head: plot::@1 tails: plot::@3 blocks: plot::@3 plot::@2 plot::@1 
NATURAL LOOPS WITH DEPTH
Loop head: main::@3 tails: main::@3 blocks: main::@3  depth: 3
Loop head: main::@4 tails: main::@4 blocks: main::@4  depth: 3
Loop head: main::@3 tails: main::@6 blocks: main::@6 main::@4 main::@3  depth: 2
Loop head: main::@3 tails: main::@11 blocks: main::@11 main::@10 main::@7 main::@6 main::@4 main::@3  depth: 1
Loop head: plot::@2 tails: plot::@2 blocks: plot::@2  depth: 3
Loop head: plot::@1 tails: plot::@3 blocks: plot::@3 plot::@2 plot::@1  depth: 2
Loop head: flip::@2 tails: flip::@2 blocks: flip::@2  depth: 3
Loop head: flip::@1 tails: flip::@4 blocks: flip::@4 flip::@2 flip::@1  depth: 2
Loop head: flip::@3 tails: flip::@3 blocks: flip::@3  depth: 2
Loop head: prepare::@1 tails: prepare::@1 blocks: prepare::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) RASTER
(byte[1000]) SCREEN
(byte[256]) buffer1
(byte[256]) buffer2
(void()) flip()
(byte~) flip::$0 2002.0
(byte~) flip::$4 202.0
(byte) flip::c
(byte) flip::c#1 1501.5
(byte) flip::c#2 400.4
(byte) flip::dstIdx
(byte) flip::dstIdx#1 701.0
(byte) flip::dstIdx#2 67.33333333333333
(byte) flip::dstIdx#3 776.0
(byte) flip::dstIdx#5 202.0
(byte) flip::i
(byte) flip::i#1 151.5
(byte) flip::i#2 134.66666666666666
(byte) flip::r
(byte) flip::r#1 151.5
(byte) flip::r#2 22.444444444444443
(byte) flip::srcIdx
(byte) flip::srcIdx#1 300.42857142857144
(byte) flip::srcIdx#2 1034.6666666666667
(byte) flip::srcIdx#3 202.0
(void()) main()
(byte~) main::$1 2002.0
(byte~) main::$3 2002.0
(byte) main::c
(byte) main::c#1 151.5
(byte) main::c#2 40.4
(void()) plot()
(byte~) plot::$3 2002.0
(byte) plot::i
(byte) plot::i#1 350.5
(byte) plot::i#2 1034.6666666666667
(byte) plot::i#3 202.0
(byte*) plot::line
(byte*) plot::line#1 67.33333333333333
(byte*) plot::line#2 171.85714285714283
(byte) plot::x
(byte) plot::x#1 1501.5
(byte) plot::x#2 750.75
(byte) plot::y
(byte) plot::y#1 151.5
(byte) plot::y#2 25.25
(void()) prepare()
(byte) prepare::i
(byte) prepare::i#1 16.5
(byte) prepare::i#2 22.0

Initial phi equivalence classes
[ main::c#2 main::c#1 ]
[ plot::line#2 plot::line#1 ]
[ plot::y#2 plot::y#1 ]
[ plot::i#2 plot::i#3 plot::i#1 ]
[ plot::x#2 plot::x#1 ]
[ flip::r#2 flip::r#1 ]
[ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ]
[ flip::dstIdx#3 flip::dstIdx#5 flip::dstIdx#2 flip::dstIdx#1 ]
[ flip::c#2 flip::c#1 ]
[ flip::i#2 flip::i#1 ]
[ prepare::i#2 prepare::i#1 ]
Added variable main::$1 to zero page equivalence class [ main::$1 ]
Added variable main::$3 to zero page equivalence class [ main::$3 ]
Added variable plot::$3 to zero page equivalence class [ plot::$3 ]
Added variable flip::$0 to zero page equivalence class [ flip::$0 ]
Added variable flip::$4 to zero page equivalence class [ flip::$4 ]
Complete equivalence classes
[ main::c#2 main::c#1 ]
[ plot::line#2 plot::line#1 ]
[ plot::y#2 plot::y#1 ]
[ plot::i#2 plot::i#3 plot::i#1 ]
[ plot::x#2 plot::x#1 ]
[ flip::r#2 flip::r#1 ]
[ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ]
[ flip::dstIdx#3 flip::dstIdx#5 flip::dstIdx#2 flip::dstIdx#1 ]
[ flip::c#2 flip::c#1 ]
[ flip::i#2 flip::i#1 ]
[ prepare::i#2 prepare::i#1 ]
[ main::$1 ]
[ main::$3 ]
[ plot::$3 ]
[ flip::$0 ]
[ flip::$4 ]
Allocated zp ZP_BYTE:2 [ main::c#2 main::c#1 ]
Allocated zp ZP_PTR_BYTE:3 [ plot::line#2 plot::line#1 ]
Allocated zp ZP_BYTE:5 [ plot::y#2 plot::y#1 ]
Allocated zp ZP_BYTE:6 [ plot::i#2 plot::i#3 plot::i#1 ]
Allocated zp ZP_BYTE:7 [ plot::x#2 plot::x#1 ]
Allocated zp ZP_BYTE:8 [ flip::r#2 flip::r#1 ]
Allocated zp ZP_BYTE:9 [ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ]
Allocated zp ZP_BYTE:10 [ flip::dstIdx#3 flip::dstIdx#5 flip::dstIdx#2 flip::dstIdx#1 ]
Allocated zp ZP_BYTE:11 [ flip::c#2 flip::c#1 ]
Allocated zp ZP_BYTE:12 [ flip::i#2 flip::i#1 ]
Allocated zp ZP_BYTE:13 [ prepare::i#2 prepare::i#1 ]
Allocated zp ZP_BYTE:14 [ main::$1 ]
Allocated zp ZP_BYTE:15 [ main::$3 ]
Allocated zp ZP_BYTE:16 [ plot::$3 ]
Allocated zp ZP_BYTE:17 [ flip::$0 ]
Allocated zp ZP_BYTE:18 [ flip::$4 ]
INITIAL ASM
//SEG0 Global ZP labels
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
  jsr main
  jmp bend
//SEG3 @end
bend:
//SEG4 main
main: {
    .label $1 = 14
    .label $3 = 15
    .label c = 2
  //SEG5 [1] call prepare param-assignment [ ]
    jsr prepare
  //SEG6 [2] phi from main to main::@3
  b3_from_main:
  //SEG7 [2] phi (byte) main::c#2 = (byte) 25 -- zpby1=coby1 
    lda #$19
    sta c
    jmp b3
  //SEG8 [2] phi from main::@11 to main::@3
  b3_from_b11:
  //SEG9 [2] phi (byte) main::c#2 = (byte) 25 -- zpby1=coby1 
    lda #$19
    sta c
    jmp b3
  //SEG10 [2] phi from main::@3 to main::@3
  b3_from_b3:
    jmp b3
  //SEG11 [2] phi from main::@6 to main::@3
  b3_from_b6:
  //SEG12 [2] phi (byte) main::c#2 = (byte) main::c#1 -- register_copy 
    jmp b3
  //SEG13 main::@3
  b3:
  //SEG14 [3] (byte~) main::$1 ← * (word) 53266 [ main::$1 main::c#2 ] -- zpby1=_star_cowo1 
    lda $d012
    sta $1
  //SEG15 [4] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#2 ] -- zpby1_neq_coby1_then_la1 
    lda $1
    cmp #$fe
    bne b3_from_b3
    jmp b4
  //SEG16 main::@4
  b4:
  //SEG17 [5] (byte~) main::$3 ← * (word) 53266 [ main::$3 main::c#2 ] -- zpby1=_star_cowo1 
    lda $d012
    sta $3
  //SEG18 [6] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#2 ] -- zpby1_neq_coby1_then_la1 
    lda $3
    cmp #$ff
    bne b4
    jmp b6
  //SEG19 main::@6
  b6:
  //SEG20 [7] (byte) main::c#1 ← -- (byte) main::c#2 [ main::c#1 ] -- zpby1=_dec_zpby1 
    dec c
  //SEG21 [8] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ] -- zpby1_neq_0_then_la1 
    lda c
    bne b3_from_b6
    jmp b7
  //SEG22 main::@7
  b7:
  //SEG23 [9] call flip param-assignment [ ]
    jsr flip
    jmp b10
  //SEG24 main::@10
  b10:
  //SEG25 [10] call plot param-assignment [ ]
    jsr plot
    jmp b11
  //SEG26 main::@11
  b11:
  //SEG27 [11] if(true) goto main::@3 [ ] -- true_then_la1 
    jmp b3_from_b11
    jmp breturn
  //SEG28 main::@return
  breturn:
  //SEG29 [12] return  [ ]
    rts
}
//SEG30 plot
plot: {
    .label $3 = 16
    .label i = 6
    .label x = 7
    .label line = 3
    .label y = 5
  //SEG31 [13] phi from plot to plot::@1
  b1_from_plot:
  //SEG32 [13] phi (byte) plot::y#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta y
  //SEG33 [13] phi (byte*) plot::line#2 = (word) 1236 -- zpptrby1=cowo1 
    lda #<$4d4
    sta line
    lda #>$4d4
    sta line+$1
  //SEG34 [13] phi (byte) plot::i#3 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta i
    jmp b1
  //SEG35 [13] phi from plot::@3 to plot::@1
  b1_from_b3:
  //SEG36 [13] phi (byte) plot::y#2 = (byte) plot::y#1 -- register_copy 
  //SEG37 [13] phi (byte*) plot::line#2 = (byte*) plot::line#1 -- register_copy 
  //SEG38 [13] phi (byte) plot::i#3 = (byte) plot::i#1 -- register_copy 
    jmp b1
  //SEG39 plot::@1
  b1:
  //SEG40 [14] phi from plot::@1 to plot::@2
  b2_from_b1:
  //SEG41 [14] phi (byte) plot::x#2 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta x
  //SEG42 [14] phi (byte) plot::i#2 = (byte) plot::i#3 -- register_copy 
    jmp b2
  //SEG43 [14] phi from plot::@2 to plot::@2
  b2_from_b2:
  //SEG44 [14] phi (byte) plot::x#2 = (byte) plot::x#1 -- register_copy 
  //SEG45 [14] phi (byte) plot::i#2 = (byte) plot::i#1 -- register_copy 
    jmp b2
  //SEG46 plot::@2
  b2:
  //SEG47 [15] (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2 [ plot::i#2 plot::line#2 plot::x#2 plot::$3 plot::y#2 ] -- zpby1=cowo1_staridx_zpby2 
    ldx i
    lda $1000,x
    sta $3
  //SEG48 [16] *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ] -- zpptrby1_staridx_zpby1=zpby2 
    lda $3
    ldy x
    sta (line),y
  //SEG49 [17] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::i#1 plot::line#2 plot::x#2 plot::y#2 ] -- zpby1=_inc_zpby1 
    inc i
  //SEG50 [18] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- zpby1=_inc_zpby1 
    inc x
  //SEG51 [19] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- zpby1_lt_coby1_then_la1 
    lda x
    cmp #$10
    bcc b2_from_b2
    jmp b3
  //SEG52 plot::@3
  b3:
  //SEG53 [20] (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40 [ plot::i#1 plot::line#1 plot::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+$1
  !:
  //SEG54 [21] (byte) plot::y#1 ← -- (byte) plot::y#2 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1=_dec_zpby1 
    dec y
  //SEG55 [22] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1_neq_0_then_la1 
    lda y
    bne b1_from_b3
    jmp breturn
  //SEG56 plot::@return
  breturn:
  //SEG57 [23] return  [ ]
    rts
}
//SEG58 flip
flip: {
    .label $0 = 17
    .label $4 = 18
    .label srcIdx = 9
    .label dstIdx = 10
    .label c = 11
    .label r = 8
    .label i = 12
  //SEG59 [24] phi from flip to flip::@1
  b1_from_flip:
  //SEG60 [24] phi (byte) flip::r#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta r
  //SEG61 [24] phi (byte) flip::dstIdx#5 = (byte) 15 -- zpby1=coby1 
    lda #$f
    sta dstIdx
  //SEG62 [24] phi (byte) flip::srcIdx#3 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta srcIdx
    jmp b1
  //SEG63 [24] phi from flip::@4 to flip::@1
  b1_from_b4:
  //SEG64 [24] phi (byte) flip::r#2 = (byte) flip::r#1 -- register_copy 
  //SEG65 [24] phi (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2 -- register_copy 
  //SEG66 [24] phi (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1 -- register_copy 
    jmp b1
  //SEG67 flip::@1
  b1:
  //SEG68 [25] phi from flip::@1 to flip::@2
  b2_from_b1:
  //SEG69 [25] phi (byte) flip::c#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta c
  //SEG70 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5 -- register_copy 
  //SEG71 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3 -- register_copy 
    jmp b2
  //SEG72 [25] phi from flip::@2 to flip::@2
  b2_from_b2:
  //SEG73 [25] phi (byte) flip::c#2 = (byte) flip::c#1 -- register_copy 
  //SEG74 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1 -- register_copy 
  //SEG75 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1 -- register_copy 
    jmp b2
  //SEG76 flip::@2
  b2:
  //SEG77 [26] (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2 [ flip::srcIdx#2 flip::dstIdx#3 flip::$0 flip::c#2 flip::r#2 ] -- zpby1=cowo1_staridx_zpby2 
    ldx srcIdx
    lda $1000,x
    sta $0
  //SEG78 [27] *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- cowo1_staridx_zpby1=zpby2 
    lda $0
    ldx dstIdx
    sta $1100,x
  //SEG79 [28] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::srcIdx#1 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- zpby1=_inc_zpby1 
    inc srcIdx
  //SEG80 [29] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#2 flip::r#2 ] -- zpby1=zpby1_plus_coby1 
    lda dstIdx
    clc
    adc #$10
    sta dstIdx
  //SEG81 [30] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1=_dec_zpby1 
    dec c
  //SEG82 [31] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1_neq_0_then_la1 
    lda c
    bne b2_from_b2
    jmp b4
  //SEG83 flip::@4
  b4:
  //SEG84 [32] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#2 ] -- zpby1=_dec_zpby1 
    dec dstIdx
  //SEG85 [33] (byte) flip::r#1 ← -- (byte) flip::r#2 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1=_dec_zpby1 
    dec r
  //SEG86 [34] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1_neq_0_then_la1 
    lda r
    bne b1_from_b4
  //SEG87 [35] phi from flip::@4 to flip::@3
  b3_from_b4:
  //SEG88 [35] phi (byte) flip::i#2 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta i
    jmp b3
  //SEG89 [35] phi from flip::@3 to flip::@3
  b3_from_b3:
  //SEG90 [35] phi (byte) flip::i#2 = (byte) flip::i#1 -- register_copy 
    jmp b3
  //SEG91 flip::@3
  b3:
  //SEG92 [36] (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ] -- zpby1=cowo1_staridx_zpby2 
    ldx i
    lda $1100,x
    sta $4
  //SEG93 [37] *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ] -- cowo1_staridx_zpby1=zpby2 
    lda $4
    ldx i
    sta $1000,x
  //SEG94 [38] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] -- zpby1=_inc_zpby1 
    inc i
  //SEG95 [39] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ] -- zpby1_neq_0_then_la1 
    lda i
    bne b3_from_b3
    jmp breturn
  //SEG96 flip::@return
  breturn:
  //SEG97 [40] return  [ ]
    rts
}
//SEG98 prepare
prepare: {
    .label i = 13
  //SEG99 [41] phi from prepare to prepare::@1
  b1_from_prepare:
  //SEG100 [41] phi (byte) prepare::i#2 = (byte) 0 -- zpby1=coby1 
    lda #$0
    sta i
    jmp b1
  //SEG101 [41] phi from prepare::@1 to prepare::@1
  b1_from_b1:
  //SEG102 [41] phi (byte) prepare::i#2 = (byte) prepare::i#1 -- register_copy 
    jmp b1
  //SEG103 prepare::@1
  b1:
  //SEG104 [42] *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] -- cowo1_staridx_zpby1=zpby1 
    ldx i
    txa
    sta $1000,x
  //SEG105 [43] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] -- zpby1=_inc_zpby1 
    inc i
  //SEG106 [44] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ] -- zpby1_neq_0_then_la1 
    lda i
    bne b1_from_b1
    jmp breturn
  //SEG107 prepare::@return
  breturn:
  //SEG108 [45] return  [ ]
    rts
}

Statement [20] (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40 [ plot::i#1 plot::line#1 plot::y#2 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ plot::i#2 plot::i#3 plot::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ plot::y#2 plot::y#1 ]
Statement [29] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#2 flip::r#2 ] always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:11 [ flip::c#2 flip::c#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ flip::r#2 flip::r#1 ]
Statement [20] (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40 [ plot::i#1 plot::line#1 plot::y#2 ] always clobbers reg byte a 
Statement [29] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#2 flip::r#2 ] always clobbers reg byte a 
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 [ main::c#2 main::c#1 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_PTR_BYTE:3 [ plot::line#2 plot::line#1 ] : zp ZP_PTR_BYTE:3 , 
Potential registers zp ZP_BYTE:5 [ plot::y#2 plot::y#1 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ plot::i#2 plot::i#3 plot::i#1 ] : zp ZP_BYTE:6 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ plot::x#2 plot::x#1 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ flip::r#2 flip::r#1 ] : zp ZP_BYTE:8 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ] : zp ZP_BYTE:9 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:10 [ flip::dstIdx#3 flip::dstIdx#5 flip::dstIdx#2 flip::dstIdx#1 ] : zp ZP_BYTE:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:11 [ flip::c#2 flip::c#1 ] : zp ZP_BYTE:11 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:12 [ flip::i#2 flip::i#1 ] : zp ZP_BYTE:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ prepare::i#2 prepare::i#1 ] : zp ZP_BYTE:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:14 [ main::$1 ] : zp ZP_BYTE:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:15 [ main::$3 ] : zp ZP_BYTE:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:16 [ plot::$3 ] : zp ZP_BYTE:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:17 [ flip::$0 ] : zp ZP_BYTE:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:18 [ flip::$4 ] : zp ZP_BYTE:18 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [flip] 2,002: zp ZP_BYTE:17 [ flip::$0 ] 1,901.9: zp ZP_BYTE:11 [ flip::c#2 flip::c#1 ] 1,746.33: zp ZP_BYTE:10 [ flip::dstIdx#3 flip::dstIdx#5 flip::dstIdx#2 flip::dstIdx#1 ] 1,537.1: zp ZP_BYTE:9 [ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ] 286.17: zp ZP_BYTE:12 [ flip::i#2 flip::i#1 ] 202: zp ZP_BYTE:18 [ flip::$4 ] 173.94: zp ZP_BYTE:8 [ flip::r#2 flip::r#1 ] 
Uplift Scope [plot] 2,252.25: zp ZP_BYTE:7 [ plot::x#2 plot::x#1 ] 2,002: zp ZP_BYTE:16 [ plot::$3 ] 1,587.17: zp ZP_BYTE:6 [ plot::i#2 plot::i#3 plot::i#1 ] 239.19: zp ZP_PTR_BYTE:3 [ plot::line#2 plot::line#1 ] 176.75: zp ZP_BYTE:5 [ plot::y#2 plot::y#1 ] 
Uplift Scope [main] 2,002: zp ZP_BYTE:14 [ main::$1 ] 2,002: zp ZP_BYTE:15 [ main::$3 ] 191.9: zp ZP_BYTE:2 [ main::c#2 main::c#1 ] 
Uplift Scope [prepare] 38.5: zp ZP_BYTE:13 [ prepare::i#2 prepare::i#1 ] 
Uplift Scope [] 

Uplifting [flip] best 180564 combination reg byte a [ flip::$0 ] zp ZP_BYTE:11 [ flip::c#2 flip::c#1 ] reg byte y [ flip::dstIdx#3 flip::dstIdx#5 flip::dstIdx#2 flip::dstIdx#1 ] reg byte x [ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ] reg byte x [ flip::i#2 flip::i#1 ] reg byte a [ flip::$4 ] zp ZP_BYTE:8 [ flip::r#2 flip::r#1 ] 
Uplifting [plot] best 150164 combination reg byte y [ plot::x#2 plot::x#1 ] reg byte a [ plot::$3 ] reg byte x [ plot::i#2 plot::i#3 plot::i#1 ] zp ZP_PTR_BYTE:3 [ plot::line#2 plot::line#1 ] zp ZP_BYTE:5 [ plot::y#2 plot::y#1 ] 
Uplifting [main] best 129564 combination reg byte a [ main::$1 ] reg byte a [ main::$3 ] reg byte x [ main::c#2 main::c#1 ] 
Uplifting [prepare] best 129424 combination reg byte x [ prepare::i#2 prepare::i#1 ] 
Uplifting [] best 129424 combination 
Coalescing zero page register [ zp ZP_BYTE:5 [ plot::y#2 plot::y#1 ] ] with [ zp ZP_BYTE:8 [ flip::r#2 flip::r#1 ] ]
Allocated (was zp ZP_PTR_BYTE:3) zp ZP_PTR_BYTE:2 [ plot::line#2 plot::line#1 ]
Allocated (was zp ZP_BYTE:5) zp ZP_BYTE:4 [ plot::y#2 plot::y#1 flip::r#2 flip::r#1 ]
Allocated (was zp ZP_BYTE:11) zp ZP_BYTE:5 [ flip::c#2 flip::c#1 ]
Removing instruction jmp bend
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global ZP labels
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
bend:
//SEG4 main
main: {
  //SEG5 [1] call prepare param-assignment [ ]
    jsr prepare
  //SEG6 [2] phi from main to main::@3
  b3_from_main:
  //SEG7 [2] phi (byte) main::c#2 = (byte) 25 -- xby=coby1 
    ldx #$19
    jmp b3
  //SEG8 [2] phi from main::@11 to main::@3
  b3_from_b11:
  //SEG9 [2] phi (byte) main::c#2 = (byte) 25 -- xby=coby1 
    ldx #$19
    jmp b3
  //SEG10 [2] phi from main::@3 to main::@3
  b3_from_b3:
    jmp b3
  //SEG11 [2] phi from main::@6 to main::@3
  b3_from_b6:
  //SEG12 [2] phi (byte) main::c#2 = (byte) main::c#1 -- register_copy 
  //SEG13 main::@3
  b3:
  //SEG14 [3] (byte~) main::$1 ← * (word) 53266 [ main::$1 main::c#2 ] -- aby=_star_cowo1 
    lda $d012
  //SEG15 [4] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#2 ] -- aby_neq_coby1_then_la1 
    cmp #$fe
    bne b3_from_b3
  //SEG16 main::@4
  b4:
  //SEG17 [5] (byte~) main::$3 ← * (word) 53266 [ main::$3 main::c#2 ] -- aby=_star_cowo1 
    lda $d012
  //SEG18 [6] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#2 ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b4
  //SEG19 main::@6
  b6:
  //SEG20 [7] (byte) main::c#1 ← -- (byte) main::c#2 [ main::c#1 ] -- xby=_dec_xby 
    dex
  //SEG21 [8] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ] -- xby_neq_0_then_la1 
    cpx #$0
    bne b3_from_b6
  //SEG22 main::@7
  b7:
  //SEG23 [9] call flip param-assignment [ ]
    jsr flip
  //SEG24 main::@10
  b10:
  //SEG25 [10] call plot param-assignment [ ]
    jsr plot
  //SEG26 main::@11
  b11:
  //SEG27 [11] if(true) goto main::@3 [ ] -- true_then_la1 
    jmp b3_from_b11
  //SEG28 main::@return
  breturn:
  //SEG29 [12] return  [ ]
    rts
}
//SEG30 plot
plot: {
    .label line = 2
    .label y = 4
  //SEG31 [13] phi from plot to plot::@1
  b1_from_plot:
  //SEG32 [13] phi (byte) plot::y#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta y
  //SEG33 [13] phi (byte*) plot::line#2 = (word) 1236 -- zpptrby1=cowo1 
    lda #<$4d4
    sta line
    lda #>$4d4
    sta line+$1
  //SEG34 [13] phi (byte) plot::i#3 = (byte) 0 -- xby=coby1 
    ldx #$0
    jmp b1
  //SEG35 [13] phi from plot::@3 to plot::@1
  b1_from_b3:
  //SEG36 [13] phi (byte) plot::y#2 = (byte) plot::y#1 -- register_copy 
  //SEG37 [13] phi (byte*) plot::line#2 = (byte*) plot::line#1 -- register_copy 
  //SEG38 [13] phi (byte) plot::i#3 = (byte) plot::i#1 -- register_copy 
  //SEG39 plot::@1
  b1:
  //SEG40 [14] phi from plot::@1 to plot::@2
  b2_from_b1:
  //SEG41 [14] phi (byte) plot::x#2 = (byte) 0 -- yby=coby1 
    ldy #$0
  //SEG42 [14] phi (byte) plot::i#2 = (byte) plot::i#3 -- register_copy 
    jmp b2
  //SEG43 [14] phi from plot::@2 to plot::@2
  b2_from_b2:
  //SEG44 [14] phi (byte) plot::x#2 = (byte) plot::x#1 -- register_copy 
  //SEG45 [14] phi (byte) plot::i#2 = (byte) plot::i#1 -- register_copy 
  //SEG46 plot::@2
  b2:
  //SEG47 [15] (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2 [ plot::i#2 plot::line#2 plot::x#2 plot::$3 plot::y#2 ] -- aby=cowo1_staridx_xby 
    lda $1000,x
  //SEG48 [16] *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ] -- zpptrby1_staridx_yby=aby 
    sta (line),y
  //SEG49 [17] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::i#1 plot::line#2 plot::x#2 plot::y#2 ] -- xby=_inc_xby 
    inx
  //SEG50 [18] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- yby=_inc_yby 
    iny
  //SEG51 [19] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- yby_lt_coby1_then_la1 
    cpy #$10
    bcc b2_from_b2
  //SEG52 plot::@3
  b3:
  //SEG53 [20] (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40 [ plot::i#1 plot::line#1 plot::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+$1
  !:
  //SEG54 [21] (byte) plot::y#1 ← -- (byte) plot::y#2 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1=_dec_zpby1 
    dec y
  //SEG55 [22] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1_neq_0_then_la1 
    lda y
    bne b1_from_b3
  //SEG56 plot::@return
  breturn:
  //SEG57 [23] return  [ ]
    rts
}
//SEG58 flip
flip: {
    .label c = 5
    .label r = 4
  //SEG59 [24] phi from flip to flip::@1
  b1_from_flip:
  //SEG60 [24] phi (byte) flip::r#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta r
  //SEG61 [24] phi (byte) flip::dstIdx#5 = (byte) 15 -- yby=coby1 
    ldy #$f
  //SEG62 [24] phi (byte) flip::srcIdx#3 = (byte) 0 -- xby=coby1 
    ldx #$0
    jmp b1
  //SEG63 [24] phi from flip::@4 to flip::@1
  b1_from_b4:
  //SEG64 [24] phi (byte) flip::r#2 = (byte) flip::r#1 -- register_copy 
  //SEG65 [24] phi (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2 -- register_copy 
  //SEG66 [24] phi (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1 -- register_copy 
  //SEG67 flip::@1
  b1:
  //SEG68 [25] phi from flip::@1 to flip::@2
  b2_from_b1:
  //SEG69 [25] phi (byte) flip::c#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta c
  //SEG70 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5 -- register_copy 
  //SEG71 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3 -- register_copy 
    jmp b2
  //SEG72 [25] phi from flip::@2 to flip::@2
  b2_from_b2:
  //SEG73 [25] phi (byte) flip::c#2 = (byte) flip::c#1 -- register_copy 
  //SEG74 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1 -- register_copy 
  //SEG75 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1 -- register_copy 
  //SEG76 flip::@2
  b2:
  //SEG77 [26] (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2 [ flip::srcIdx#2 flip::dstIdx#3 flip::$0 flip::c#2 flip::r#2 ] -- aby=cowo1_staridx_xby 
    lda $1000,x
  //SEG78 [27] *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- cowo1_staridx_yby=aby 
    sta $1100,y
  //SEG79 [28] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::srcIdx#1 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- xby=_inc_xby 
    inx
  //SEG80 [29] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#2 flip::r#2 ] -- yby=yby_plus_coby1 
    tya
    clc
    adc #$10
    tay
  //SEG81 [30] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1=_dec_zpby1 
    dec c
  //SEG82 [31] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1_neq_0_then_la1 
    lda c
    bne b2_from_b2
  //SEG83 flip::@4
  b4:
  //SEG84 [32] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#2 ] -- yby=_dec_yby 
    dey
  //SEG85 [33] (byte) flip::r#1 ← -- (byte) flip::r#2 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1=_dec_zpby1 
    dec r
  //SEG86 [34] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1_neq_0_then_la1 
    lda r
    bne b1_from_b4
  //SEG87 [35] phi from flip::@4 to flip::@3
  b3_from_b4:
  //SEG88 [35] phi (byte) flip::i#2 = (byte) 0 -- xby=coby1 
    ldx #$0
    jmp b3
  //SEG89 [35] phi from flip::@3 to flip::@3
  b3_from_b3:
  //SEG90 [35] phi (byte) flip::i#2 = (byte) flip::i#1 -- register_copy 
  //SEG91 flip::@3
  b3:
  //SEG92 [36] (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ] -- aby=cowo1_staridx_xby 
    lda $1100,x
  //SEG93 [37] *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ] -- cowo1_staridx_xby=aby 
    sta $1000,x
  //SEG94 [38] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] -- xby=_inc_xby 
    inx
  //SEG95 [39] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ] -- xby_neq_0_then_la1 
    cpx #$0
    bne b3_from_b3
  //SEG96 flip::@return
  breturn:
  //SEG97 [40] return  [ ]
    rts
}
//SEG98 prepare
prepare: {
  //SEG99 [41] phi from prepare to prepare::@1
  b1_from_prepare:
  //SEG100 [41] phi (byte) prepare::i#2 = (byte) 0 -- xby=coby1 
    ldx #$0
    jmp b1
  //SEG101 [41] phi from prepare::@1 to prepare::@1
  b1_from_b1:
  //SEG102 [41] phi (byte) prepare::i#2 = (byte) prepare::i#1 -- register_copy 
  //SEG103 prepare::@1
  b1:
  //SEG104 [42] *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] -- cowo1_staridx_xby=xby 
    txa
    sta $1000,x
  //SEG105 [43] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] -- xby=_inc_xby 
    inx
  //SEG106 [44] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ] -- xby_neq_0_then_la1 
    cpx #$0
    bne b1_from_b1
  //SEG107 prepare::@return
  breturn:
  //SEG108 [45] return  [ ]
    rts
}

Replacing label b3_from_b6 with b3
Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Replacing label b2_from_b2 with b2
Replacing label b1_from_b4 with b1
Replacing label b3_from_b3 with b3
Replacing label b1_from_b1 with b1
Removing instruction b3_from_b6:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Removing instruction b1_from_b4:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Removing instruction b3_from_b3:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Global ZP labels
//SEG1 @begin
bbegin:
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
bend:
//SEG4 main
main: {
  //SEG5 [1] call prepare param-assignment [ ]
    jsr prepare
  //SEG6 [2] phi from main to main::@3
  b3_from_main:
  //SEG7 [2] phi (byte) main::c#2 = (byte) 25 -- xby=coby1 
    ldx #$19
    jmp b3
  //SEG8 [2] phi from main::@11 to main::@3
  b3_from_b11:
  //SEG9 [2] phi (byte) main::c#2 = (byte) 25 -- xby=coby1 
    ldx #$19
    jmp b3
  //SEG10 [2] phi from main::@3 to main::@3
  b3_from_b3:
    jmp b3
  //SEG11 [2] phi from main::@6 to main::@3
  //SEG12 [2] phi (byte) main::c#2 = (byte) main::c#1 -- register_copy 
  //SEG13 main::@3
  b3:
  //SEG14 [3] (byte~) main::$1 ← * (word) 53266 [ main::$1 main::c#2 ] -- aby=_star_cowo1 
    lda $d012
  //SEG15 [4] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#2 ] -- aby_neq_coby1_then_la1 
    cmp #$fe
    bne b3_from_b3
  //SEG16 main::@4
  b4:
  //SEG17 [5] (byte~) main::$3 ← * (word) 53266 [ main::$3 main::c#2 ] -- aby=_star_cowo1 
    lda $d012
  //SEG18 [6] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#2 ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b4
  //SEG19 main::@6
  b6:
  //SEG20 [7] (byte) main::c#1 ← -- (byte) main::c#2 [ main::c#1 ] -- xby=_dec_xby 
    dex
  //SEG21 [8] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ] -- xby_neq_0_then_la1 
    cpx #$0
    bne b3
  //SEG22 main::@7
  b7:
  //SEG23 [9] call flip param-assignment [ ]
    jsr flip
  //SEG24 main::@10
  b10:
  //SEG25 [10] call plot param-assignment [ ]
    jsr plot
  //SEG26 main::@11
  b11:
  //SEG27 [11] if(true) goto main::@3 [ ] -- true_then_la1 
    jmp b3_from_b11
  //SEG28 main::@return
  breturn:
  //SEG29 [12] return  [ ]
    rts
}
//SEG30 plot
plot: {
    .label line = 2
    .label y = 4
  //SEG31 [13] phi from plot to plot::@1
  b1_from_plot:
  //SEG32 [13] phi (byte) plot::y#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta y
  //SEG33 [13] phi (byte*) plot::line#2 = (word) 1236 -- zpptrby1=cowo1 
    lda #<$4d4
    sta line
    lda #>$4d4
    sta line+$1
  //SEG34 [13] phi (byte) plot::i#3 = (byte) 0 -- xby=coby1 
    ldx #$0
    jmp b1
  //SEG35 [13] phi from plot::@3 to plot::@1
  //SEG36 [13] phi (byte) plot::y#2 = (byte) plot::y#1 -- register_copy 
  //SEG37 [13] phi (byte*) plot::line#2 = (byte*) plot::line#1 -- register_copy 
  //SEG38 [13] phi (byte) plot::i#3 = (byte) plot::i#1 -- register_copy 
  //SEG39 plot::@1
  b1:
  //SEG40 [14] phi from plot::@1 to plot::@2
  //SEG41 [14] phi (byte) plot::x#2 = (byte) 0 -- yby=coby1 
    ldy #$0
  //SEG42 [14] phi (byte) plot::i#2 = (byte) plot::i#3 -- register_copy 
    jmp b2
  //SEG43 [14] phi from plot::@2 to plot::@2
  //SEG44 [14] phi (byte) plot::x#2 = (byte) plot::x#1 -- register_copy 
  //SEG45 [14] phi (byte) plot::i#2 = (byte) plot::i#1 -- register_copy 
  //SEG46 plot::@2
  b2:
  //SEG47 [15] (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2 [ plot::i#2 plot::line#2 plot::x#2 plot::$3 plot::y#2 ] -- aby=cowo1_staridx_xby 
    lda $1000,x
  //SEG48 [16] *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ] -- zpptrby1_staridx_yby=aby 
    sta (line),y
  //SEG49 [17] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::i#1 plot::line#2 plot::x#2 plot::y#2 ] -- xby=_inc_xby 
    inx
  //SEG50 [18] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- yby=_inc_yby 
    iny
  //SEG51 [19] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- yby_lt_coby1_then_la1 
    cpy #$10
    bcc b2
  //SEG52 plot::@3
  b3:
  //SEG53 [20] (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40 [ plot::i#1 plot::line#1 plot::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+$1
  !:
  //SEG54 [21] (byte) plot::y#1 ← -- (byte) plot::y#2 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1=_dec_zpby1 
    dec y
  //SEG55 [22] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1_neq_0_then_la1 
    lda y
    bne b1
  //SEG56 plot::@return
  breturn:
  //SEG57 [23] return  [ ]
    rts
}
//SEG58 flip
flip: {
    .label c = 5
    .label r = 4
  //SEG59 [24] phi from flip to flip::@1
  b1_from_flip:
  //SEG60 [24] phi (byte) flip::r#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta r
  //SEG61 [24] phi (byte) flip::dstIdx#5 = (byte) 15 -- yby=coby1 
    ldy #$f
  //SEG62 [24] phi (byte) flip::srcIdx#3 = (byte) 0 -- xby=coby1 
    ldx #$0
    jmp b1
  //SEG63 [24] phi from flip::@4 to flip::@1
  //SEG64 [24] phi (byte) flip::r#2 = (byte) flip::r#1 -- register_copy 
  //SEG65 [24] phi (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2 -- register_copy 
  //SEG66 [24] phi (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1 -- register_copy 
  //SEG67 flip::@1
  b1:
  //SEG68 [25] phi from flip::@1 to flip::@2
  //SEG69 [25] phi (byte) flip::c#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta c
  //SEG70 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5 -- register_copy 
  //SEG71 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3 -- register_copy 
    jmp b2
  //SEG72 [25] phi from flip::@2 to flip::@2
  //SEG73 [25] phi (byte) flip::c#2 = (byte) flip::c#1 -- register_copy 
  //SEG74 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1 -- register_copy 
  //SEG75 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1 -- register_copy 
  //SEG76 flip::@2
  b2:
  //SEG77 [26] (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2 [ flip::srcIdx#2 flip::dstIdx#3 flip::$0 flip::c#2 flip::r#2 ] -- aby=cowo1_staridx_xby 
    lda $1000,x
  //SEG78 [27] *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- cowo1_staridx_yby=aby 
    sta $1100,y
  //SEG79 [28] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::srcIdx#1 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- xby=_inc_xby 
    inx
  //SEG80 [29] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#2 flip::r#2 ] -- yby=yby_plus_coby1 
    tya
    clc
    adc #$10
    tay
  //SEG81 [30] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1=_dec_zpby1 
    dec c
  //SEG82 [31] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1_neq_0_then_la1 
    lda c
    bne b2
  //SEG83 flip::@4
  b4:
  //SEG84 [32] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#2 ] -- yby=_dec_yby 
    dey
  //SEG85 [33] (byte) flip::r#1 ← -- (byte) flip::r#2 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1=_dec_zpby1 
    dec r
  //SEG86 [34] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1_neq_0_then_la1 
    lda r
    bne b1
  //SEG87 [35] phi from flip::@4 to flip::@3
  b3_from_b4:
  //SEG88 [35] phi (byte) flip::i#2 = (byte) 0 -- xby=coby1 
    ldx #$0
    jmp b3
  //SEG89 [35] phi from flip::@3 to flip::@3
  //SEG90 [35] phi (byte) flip::i#2 = (byte) flip::i#1 -- register_copy 
  //SEG91 flip::@3
  b3:
  //SEG92 [36] (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ] -- aby=cowo1_staridx_xby 
    lda $1100,x
  //SEG93 [37] *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ] -- cowo1_staridx_xby=aby 
    sta $1000,x
  //SEG94 [38] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] -- xby=_inc_xby 
    inx
  //SEG95 [39] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ] -- xby_neq_0_then_la1 
    cpx #$0
    bne b3
  //SEG96 flip::@return
  breturn:
  //SEG97 [40] return  [ ]
    rts
}
//SEG98 prepare
prepare: {
  //SEG99 [41] phi from prepare to prepare::@1
  b1_from_prepare:
  //SEG100 [41] phi (byte) prepare::i#2 = (byte) 0 -- xby=coby1 
    ldx #$0
    jmp b1
  //SEG101 [41] phi from prepare::@1 to prepare::@1
  //SEG102 [41] phi (byte) prepare::i#2 = (byte) prepare::i#1 -- register_copy 
  //SEG103 prepare::@1
  b1:
  //SEG104 [42] *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] -- cowo1_staridx_xby=xby 
    txa
    sta $1000,x
  //SEG105 [43] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] -- xby=_inc_xby 
    inx
  //SEG106 [44] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ] -- xby_neq_0_then_la1 
    cpx #$0
    bne b1
  //SEG107 prepare::@return
  breturn:
  //SEG108 [45] return  [ ]
    rts
}

Removing instruction bbegin:
Removing instruction bend:
Removing instruction b3_from_main:
Removing instruction b6:
Removing instruction b7:
Removing instruction b10:
Removing instruction b11:
Removing instruction breturn:
Removing instruction b1_from_plot:
Removing instruction b3:
Removing instruction breturn:
Removing instruction b1_from_flip:
Removing instruction b4:
Removing instruction b3_from_b4:
Removing instruction breturn:
Removing instruction b1_from_prepare:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Global ZP labels
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
//SEG4 main
main: {
  //SEG5 [1] call prepare param-assignment [ ]
    jsr prepare
  //SEG6 [2] phi from main to main::@3
  //SEG7 [2] phi (byte) main::c#2 = (byte) 25 -- xby=coby1 
    ldx #$19
    jmp b3
  //SEG8 [2] phi from main::@11 to main::@3
  b3_from_b11:
  //SEG9 [2] phi (byte) main::c#2 = (byte) 25 -- xby=coby1 
    ldx #$19
    jmp b3
  //SEG10 [2] phi from main::@3 to main::@3
  b3_from_b3:
    jmp b3
  //SEG11 [2] phi from main::@6 to main::@3
  //SEG12 [2] phi (byte) main::c#2 = (byte) main::c#1 -- register_copy 
  //SEG13 main::@3
  b3:
  //SEG14 [3] (byte~) main::$1 ← * (word) 53266 [ main::$1 main::c#2 ] -- aby=_star_cowo1 
    lda $d012
  //SEG15 [4] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#2 ] -- aby_neq_coby1_then_la1 
    cmp #$fe
    bne b3_from_b3
  //SEG16 main::@4
  b4:
  //SEG17 [5] (byte~) main::$3 ← * (word) 53266 [ main::$3 main::c#2 ] -- aby=_star_cowo1 
    lda $d012
  //SEG18 [6] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#2 ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b4
  //SEG19 main::@6
  //SEG20 [7] (byte) main::c#1 ← -- (byte) main::c#2 [ main::c#1 ] -- xby=_dec_xby 
    dex
  //SEG21 [8] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ] -- xby_neq_0_then_la1 
    cpx #$0
    bne b3
  //SEG22 main::@7
  //SEG23 [9] call flip param-assignment [ ]
    jsr flip
  //SEG24 main::@10
  //SEG25 [10] call plot param-assignment [ ]
    jsr plot
  //SEG26 main::@11
  //SEG27 [11] if(true) goto main::@3 [ ] -- true_then_la1 
    jmp b3_from_b11
  //SEG28 main::@return
  //SEG29 [12] return  [ ]
    rts
}
//SEG30 plot
plot: {
    .label line = 2
    .label y = 4
  //SEG31 [13] phi from plot to plot::@1
  //SEG32 [13] phi (byte) plot::y#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta y
  //SEG33 [13] phi (byte*) plot::line#2 = (word) 1236 -- zpptrby1=cowo1 
    lda #<$4d4
    sta line
    lda #>$4d4
    sta line+$1
  //SEG34 [13] phi (byte) plot::i#3 = (byte) 0 -- xby=coby1 
    ldx #$0
    jmp b1
  //SEG35 [13] phi from plot::@3 to plot::@1
  //SEG36 [13] phi (byte) plot::y#2 = (byte) plot::y#1 -- register_copy 
  //SEG37 [13] phi (byte*) plot::line#2 = (byte*) plot::line#1 -- register_copy 
  //SEG38 [13] phi (byte) plot::i#3 = (byte) plot::i#1 -- register_copy 
  //SEG39 plot::@1
  b1:
  //SEG40 [14] phi from plot::@1 to plot::@2
  //SEG41 [14] phi (byte) plot::x#2 = (byte) 0 -- yby=coby1 
    ldy #$0
  //SEG42 [14] phi (byte) plot::i#2 = (byte) plot::i#3 -- register_copy 
    jmp b2
  //SEG43 [14] phi from plot::@2 to plot::@2
  //SEG44 [14] phi (byte) plot::x#2 = (byte) plot::x#1 -- register_copy 
  //SEG45 [14] phi (byte) plot::i#2 = (byte) plot::i#1 -- register_copy 
  //SEG46 plot::@2
  b2:
  //SEG47 [15] (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2 [ plot::i#2 plot::line#2 plot::x#2 plot::$3 plot::y#2 ] -- aby=cowo1_staridx_xby 
    lda $1000,x
  //SEG48 [16] *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ] -- zpptrby1_staridx_yby=aby 
    sta (line),y
  //SEG49 [17] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::i#1 plot::line#2 plot::x#2 plot::y#2 ] -- xby=_inc_xby 
    inx
  //SEG50 [18] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- yby=_inc_yby 
    iny
  //SEG51 [19] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- yby_lt_coby1_then_la1 
    cpy #$10
    bcc b2
  //SEG52 plot::@3
  //SEG53 [20] (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40 [ plot::i#1 plot::line#1 plot::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+$1
  !:
  //SEG54 [21] (byte) plot::y#1 ← -- (byte) plot::y#2 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1=_dec_zpby1 
    dec y
  //SEG55 [22] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1_neq_0_then_la1 
    lda y
    bne b1
  //SEG56 plot::@return
  //SEG57 [23] return  [ ]
    rts
}
//SEG58 flip
flip: {
    .label c = 5
    .label r = 4
  //SEG59 [24] phi from flip to flip::@1
  //SEG60 [24] phi (byte) flip::r#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta r
  //SEG61 [24] phi (byte) flip::dstIdx#5 = (byte) 15 -- yby=coby1 
    ldy #$f
  //SEG62 [24] phi (byte) flip::srcIdx#3 = (byte) 0 -- xby=coby1 
    ldx #$0
    jmp b1
  //SEG63 [24] phi from flip::@4 to flip::@1
  //SEG64 [24] phi (byte) flip::r#2 = (byte) flip::r#1 -- register_copy 
  //SEG65 [24] phi (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2 -- register_copy 
  //SEG66 [24] phi (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1 -- register_copy 
  //SEG67 flip::@1
  b1:
  //SEG68 [25] phi from flip::@1 to flip::@2
  //SEG69 [25] phi (byte) flip::c#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta c
  //SEG70 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5 -- register_copy 
  //SEG71 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3 -- register_copy 
    jmp b2
  //SEG72 [25] phi from flip::@2 to flip::@2
  //SEG73 [25] phi (byte) flip::c#2 = (byte) flip::c#1 -- register_copy 
  //SEG74 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1 -- register_copy 
  //SEG75 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1 -- register_copy 
  //SEG76 flip::@2
  b2:
  //SEG77 [26] (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2 [ flip::srcIdx#2 flip::dstIdx#3 flip::$0 flip::c#2 flip::r#2 ] -- aby=cowo1_staridx_xby 
    lda $1000,x
  //SEG78 [27] *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- cowo1_staridx_yby=aby 
    sta $1100,y
  //SEG79 [28] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::srcIdx#1 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- xby=_inc_xby 
    inx
  //SEG80 [29] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#2 flip::r#2 ] -- yby=yby_plus_coby1 
    tya
    clc
    adc #$10
    tay
  //SEG81 [30] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1=_dec_zpby1 
    dec c
  //SEG82 [31] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1_neq_0_then_la1 
    lda c
    bne b2
  //SEG83 flip::@4
  //SEG84 [32] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#2 ] -- yby=_dec_yby 
    dey
  //SEG85 [33] (byte) flip::r#1 ← -- (byte) flip::r#2 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1=_dec_zpby1 
    dec r
  //SEG86 [34] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1_neq_0_then_la1 
    lda r
    bne b1
  //SEG87 [35] phi from flip::@4 to flip::@3
  //SEG88 [35] phi (byte) flip::i#2 = (byte) 0 -- xby=coby1 
    ldx #$0
    jmp b3
  //SEG89 [35] phi from flip::@3 to flip::@3
  //SEG90 [35] phi (byte) flip::i#2 = (byte) flip::i#1 -- register_copy 
  //SEG91 flip::@3
  b3:
  //SEG92 [36] (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ] -- aby=cowo1_staridx_xby 
    lda $1100,x
  //SEG93 [37] *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ] -- cowo1_staridx_xby=aby 
    sta $1000,x
  //SEG94 [38] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] -- xby=_inc_xby 
    inx
  //SEG95 [39] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ] -- xby_neq_0_then_la1 
    cpx #$0
    bne b3
  //SEG96 flip::@return
  //SEG97 [40] return  [ ]
    rts
}
//SEG98 prepare
prepare: {
  //SEG99 [41] phi from prepare to prepare::@1
  //SEG100 [41] phi (byte) prepare::i#2 = (byte) 0 -- xby=coby1 
    ldx #$0
    jmp b1
  //SEG101 [41] phi from prepare::@1 to prepare::@1
  //SEG102 [41] phi (byte) prepare::i#2 = (byte) prepare::i#1 -- register_copy 
  //SEG103 prepare::@1
  b1:
  //SEG104 [42] *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] -- cowo1_staridx_xby=xby 
    txa
    sta $1000,x
  //SEG105 [43] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] -- xby=_inc_xby 
    inx
  //SEG106 [44] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ] -- xby_neq_0_then_la1 
    cpx #$0
    bne b1
  //SEG107 prepare::@return
  //SEG108 [45] return  [ ]
    rts
}

Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global ZP labels
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
//SEG4 main
main: {
  //SEG5 [1] call prepare param-assignment [ ]
    jsr prepare
  //SEG6 [2] phi from main to main::@3
  //SEG7 [2] phi (byte) main::c#2 = (byte) 25 -- xby=coby1 
    ldx #$19
    jmp b3
  //SEG8 [2] phi from main::@11 to main::@3
  b3_from_b11:
  //SEG9 [2] phi (byte) main::c#2 = (byte) 25 -- xby=coby1 
    ldx #$19
    jmp b3
  //SEG10 [2] phi from main::@3 to main::@3
  b3_from_b3:
  //SEG11 [2] phi from main::@6 to main::@3
  //SEG12 [2] phi (byte) main::c#2 = (byte) main::c#1 -- register_copy 
  //SEG13 main::@3
  b3:
  //SEG14 [3] (byte~) main::$1 ← * (word) 53266 [ main::$1 main::c#2 ] -- aby=_star_cowo1 
    lda $d012
  //SEG15 [4] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#2 ] -- aby_neq_coby1_then_la1 
    cmp #$fe
    bne b3_from_b3
  //SEG16 main::@4
  b4:
  //SEG17 [5] (byte~) main::$3 ← * (word) 53266 [ main::$3 main::c#2 ] -- aby=_star_cowo1 
    lda $d012
  //SEG18 [6] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#2 ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b4
  //SEG19 main::@6
  //SEG20 [7] (byte) main::c#1 ← -- (byte) main::c#2 [ main::c#1 ] -- xby=_dec_xby 
    dex
  //SEG21 [8] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ] -- xby_neq_0_then_la1 
    cpx #$0
    bne b3
  //SEG22 main::@7
  //SEG23 [9] call flip param-assignment [ ]
    jsr flip
  //SEG24 main::@10
  //SEG25 [10] call plot param-assignment [ ]
    jsr plot
  //SEG26 main::@11
  //SEG27 [11] if(true) goto main::@3 [ ] -- true_then_la1 
    jmp b3_from_b11
  //SEG28 main::@return
  //SEG29 [12] return  [ ]
    rts
}
//SEG30 plot
plot: {
    .label line = 2
    .label y = 4
  //SEG31 [13] phi from plot to plot::@1
  //SEG32 [13] phi (byte) plot::y#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta y
  //SEG33 [13] phi (byte*) plot::line#2 = (word) 1236 -- zpptrby1=cowo1 
    lda #<$4d4
    sta line
    lda #>$4d4
    sta line+$1
  //SEG34 [13] phi (byte) plot::i#3 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG35 [13] phi from plot::@3 to plot::@1
  //SEG36 [13] phi (byte) plot::y#2 = (byte) plot::y#1 -- register_copy 
  //SEG37 [13] phi (byte*) plot::line#2 = (byte*) plot::line#1 -- register_copy 
  //SEG38 [13] phi (byte) plot::i#3 = (byte) plot::i#1 -- register_copy 
  //SEG39 plot::@1
  b1:
  //SEG40 [14] phi from plot::@1 to plot::@2
  //SEG41 [14] phi (byte) plot::x#2 = (byte) 0 -- yby=coby1 
    ldy #$0
  //SEG42 [14] phi (byte) plot::i#2 = (byte) plot::i#3 -- register_copy 
  //SEG43 [14] phi from plot::@2 to plot::@2
  //SEG44 [14] phi (byte) plot::x#2 = (byte) plot::x#1 -- register_copy 
  //SEG45 [14] phi (byte) plot::i#2 = (byte) plot::i#1 -- register_copy 
  //SEG46 plot::@2
  b2:
  //SEG47 [15] (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2 [ plot::i#2 plot::line#2 plot::x#2 plot::$3 plot::y#2 ] -- aby=cowo1_staridx_xby 
    lda $1000,x
  //SEG48 [16] *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ] -- zpptrby1_staridx_yby=aby 
    sta (line),y
  //SEG49 [17] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::i#1 plot::line#2 plot::x#2 plot::y#2 ] -- xby=_inc_xby 
    inx
  //SEG50 [18] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- yby=_inc_yby 
    iny
  //SEG51 [19] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- yby_lt_coby1_then_la1 
    cpy #$10
    bcc b2
  //SEG52 plot::@3
  //SEG53 [20] (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40 [ plot::i#1 plot::line#1 plot::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+$1
  !:
  //SEG54 [21] (byte) plot::y#1 ← -- (byte) plot::y#2 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1=_dec_zpby1 
    dec y
  //SEG55 [22] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1_neq_0_then_la1 
    lda y
    bne b1
  //SEG56 plot::@return
  //SEG57 [23] return  [ ]
    rts
}
//SEG58 flip
flip: {
    .label c = 5
    .label r = 4
  //SEG59 [24] phi from flip to flip::@1
  //SEG60 [24] phi (byte) flip::r#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta r
  //SEG61 [24] phi (byte) flip::dstIdx#5 = (byte) 15 -- yby=coby1 
    ldy #$f
  //SEG62 [24] phi (byte) flip::srcIdx#3 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG63 [24] phi from flip::@4 to flip::@1
  //SEG64 [24] phi (byte) flip::r#2 = (byte) flip::r#1 -- register_copy 
  //SEG65 [24] phi (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2 -- register_copy 
  //SEG66 [24] phi (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1 -- register_copy 
  //SEG67 flip::@1
  b1:
  //SEG68 [25] phi from flip::@1 to flip::@2
  //SEG69 [25] phi (byte) flip::c#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta c
  //SEG70 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5 -- register_copy 
  //SEG71 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3 -- register_copy 
  //SEG72 [25] phi from flip::@2 to flip::@2
  //SEG73 [25] phi (byte) flip::c#2 = (byte) flip::c#1 -- register_copy 
  //SEG74 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1 -- register_copy 
  //SEG75 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1 -- register_copy 
  //SEG76 flip::@2
  b2:
  //SEG77 [26] (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2 [ flip::srcIdx#2 flip::dstIdx#3 flip::$0 flip::c#2 flip::r#2 ] -- aby=cowo1_staridx_xby 
    lda $1000,x
  //SEG78 [27] *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- cowo1_staridx_yby=aby 
    sta $1100,y
  //SEG79 [28] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::srcIdx#1 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- xby=_inc_xby 
    inx
  //SEG80 [29] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#2 flip::r#2 ] -- yby=yby_plus_coby1 
    tya
    clc
    adc #$10
    tay
  //SEG81 [30] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1=_dec_zpby1 
    dec c
  //SEG82 [31] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1_neq_0_then_la1 
    lda c
    bne b2
  //SEG83 flip::@4
  //SEG84 [32] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#2 ] -- yby=_dec_yby 
    dey
  //SEG85 [33] (byte) flip::r#1 ← -- (byte) flip::r#2 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1=_dec_zpby1 
    dec r
  //SEG86 [34] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1_neq_0_then_la1 
    lda r
    bne b1
  //SEG87 [35] phi from flip::@4 to flip::@3
  //SEG88 [35] phi (byte) flip::i#2 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG89 [35] phi from flip::@3 to flip::@3
  //SEG90 [35] phi (byte) flip::i#2 = (byte) flip::i#1 -- register_copy 
  //SEG91 flip::@3
  b3:
  //SEG92 [36] (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ] -- aby=cowo1_staridx_xby 
    lda $1100,x
  //SEG93 [37] *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ] -- cowo1_staridx_xby=aby 
    sta $1000,x
  //SEG94 [38] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] -- xby=_inc_xby 
    inx
  //SEG95 [39] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ] -- xby_neq_0_then_la1 
    cpx #$0
    bne b3
  //SEG96 flip::@return
  //SEG97 [40] return  [ ]
    rts
}
//SEG98 prepare
prepare: {
  //SEG99 [41] phi from prepare to prepare::@1
  //SEG100 [41] phi (byte) prepare::i#2 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG101 [41] phi from prepare::@1 to prepare::@1
  //SEG102 [41] phi (byte) prepare::i#2 = (byte) prepare::i#1 -- register_copy 
  //SEG103 prepare::@1
  b1:
  //SEG104 [42] *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] -- cowo1_staridx_xby=xby 
    txa
    sta $1000,x
  //SEG105 [43] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] -- xby=_inc_xby 
    inx
  //SEG106 [44] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ] -- xby_neq_0_then_la1 
    cpx #$0
    bne b1
  //SEG107 prepare::@return
  //SEG108 [45] return  [ ]
    rts
}

Replacing label b3_from_b3 with b3
Removing instruction b3_from_b3:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Global ZP labels
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
//SEG4 main
main: {
  //SEG5 [1] call prepare param-assignment [ ]
    jsr prepare
  //SEG6 [2] phi from main to main::@3
  //SEG7 [2] phi (byte) main::c#2 = (byte) 25 -- xby=coby1 
    ldx #$19
    jmp b3
  //SEG8 [2] phi from main::@11 to main::@3
  b3_from_b11:
  //SEG9 [2] phi (byte) main::c#2 = (byte) 25 -- xby=coby1 
    ldx #$19
    jmp b3
  //SEG10 [2] phi from main::@3 to main::@3
  //SEG11 [2] phi from main::@6 to main::@3
  //SEG12 [2] phi (byte) main::c#2 = (byte) main::c#1 -- register_copy 
  //SEG13 main::@3
  b3:
  //SEG14 [3] (byte~) main::$1 ← * (word) 53266 [ main::$1 main::c#2 ] -- aby=_star_cowo1 
    lda $d012
  //SEG15 [4] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#2 ] -- aby_neq_coby1_then_la1 
    cmp #$fe
    bne b3
  //SEG16 main::@4
  b4:
  //SEG17 [5] (byte~) main::$3 ← * (word) 53266 [ main::$3 main::c#2 ] -- aby=_star_cowo1 
    lda $d012
  //SEG18 [6] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#2 ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b4
  //SEG19 main::@6
  //SEG20 [7] (byte) main::c#1 ← -- (byte) main::c#2 [ main::c#1 ] -- xby=_dec_xby 
    dex
  //SEG21 [8] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ] -- xby_neq_0_then_la1 
    cpx #$0
    bne b3
  //SEG22 main::@7
  //SEG23 [9] call flip param-assignment [ ]
    jsr flip
  //SEG24 main::@10
  //SEG25 [10] call plot param-assignment [ ]
    jsr plot
  //SEG26 main::@11
  //SEG27 [11] if(true) goto main::@3 [ ] -- true_then_la1 
    jmp b3_from_b11
  //SEG28 main::@return
  //SEG29 [12] return  [ ]
    rts
}
//SEG30 plot
plot: {
    .label line = 2
    .label y = 4
  //SEG31 [13] phi from plot to plot::@1
  //SEG32 [13] phi (byte) plot::y#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta y
  //SEG33 [13] phi (byte*) plot::line#2 = (word) 1236 -- zpptrby1=cowo1 
    lda #<$4d4
    sta line
    lda #>$4d4
    sta line+$1
  //SEG34 [13] phi (byte) plot::i#3 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG35 [13] phi from plot::@3 to plot::@1
  //SEG36 [13] phi (byte) plot::y#2 = (byte) plot::y#1 -- register_copy 
  //SEG37 [13] phi (byte*) plot::line#2 = (byte*) plot::line#1 -- register_copy 
  //SEG38 [13] phi (byte) plot::i#3 = (byte) plot::i#1 -- register_copy 
  //SEG39 plot::@1
  b1:
  //SEG40 [14] phi from plot::@1 to plot::@2
  //SEG41 [14] phi (byte) plot::x#2 = (byte) 0 -- yby=coby1 
    ldy #$0
  //SEG42 [14] phi (byte) plot::i#2 = (byte) plot::i#3 -- register_copy 
  //SEG43 [14] phi from plot::@2 to plot::@2
  //SEG44 [14] phi (byte) plot::x#2 = (byte) plot::x#1 -- register_copy 
  //SEG45 [14] phi (byte) plot::i#2 = (byte) plot::i#1 -- register_copy 
  //SEG46 plot::@2
  b2:
  //SEG47 [15] (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2 [ plot::i#2 plot::line#2 plot::x#2 plot::$3 plot::y#2 ] -- aby=cowo1_staridx_xby 
    lda $1000,x
  //SEG48 [16] *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ] -- zpptrby1_staridx_yby=aby 
    sta (line),y
  //SEG49 [17] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::i#1 plot::line#2 plot::x#2 plot::y#2 ] -- xby=_inc_xby 
    inx
  //SEG50 [18] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- yby=_inc_yby 
    iny
  //SEG51 [19] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- yby_lt_coby1_then_la1 
    cpy #$10
    bcc b2
  //SEG52 plot::@3
  //SEG53 [20] (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40 [ plot::i#1 plot::line#1 plot::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+$1
  !:
  //SEG54 [21] (byte) plot::y#1 ← -- (byte) plot::y#2 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1=_dec_zpby1 
    dec y
  //SEG55 [22] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1_neq_0_then_la1 
    lda y
    bne b1
  //SEG56 plot::@return
  //SEG57 [23] return  [ ]
    rts
}
//SEG58 flip
flip: {
    .label c = 5
    .label r = 4
  //SEG59 [24] phi from flip to flip::@1
  //SEG60 [24] phi (byte) flip::r#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta r
  //SEG61 [24] phi (byte) flip::dstIdx#5 = (byte) 15 -- yby=coby1 
    ldy #$f
  //SEG62 [24] phi (byte) flip::srcIdx#3 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG63 [24] phi from flip::@4 to flip::@1
  //SEG64 [24] phi (byte) flip::r#2 = (byte) flip::r#1 -- register_copy 
  //SEG65 [24] phi (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2 -- register_copy 
  //SEG66 [24] phi (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1 -- register_copy 
  //SEG67 flip::@1
  b1:
  //SEG68 [25] phi from flip::@1 to flip::@2
  //SEG69 [25] phi (byte) flip::c#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta c
  //SEG70 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5 -- register_copy 
  //SEG71 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3 -- register_copy 
  //SEG72 [25] phi from flip::@2 to flip::@2
  //SEG73 [25] phi (byte) flip::c#2 = (byte) flip::c#1 -- register_copy 
  //SEG74 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1 -- register_copy 
  //SEG75 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1 -- register_copy 
  //SEG76 flip::@2
  b2:
  //SEG77 [26] (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2 [ flip::srcIdx#2 flip::dstIdx#3 flip::$0 flip::c#2 flip::r#2 ] -- aby=cowo1_staridx_xby 
    lda $1000,x
  //SEG78 [27] *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- cowo1_staridx_yby=aby 
    sta $1100,y
  //SEG79 [28] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::srcIdx#1 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- xby=_inc_xby 
    inx
  //SEG80 [29] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#2 flip::r#2 ] -- yby=yby_plus_coby1 
    tya
    clc
    adc #$10
    tay
  //SEG81 [30] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1=_dec_zpby1 
    dec c
  //SEG82 [31] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1_neq_0_then_la1 
    lda c
    bne b2
  //SEG83 flip::@4
  //SEG84 [32] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#2 ] -- yby=_dec_yby 
    dey
  //SEG85 [33] (byte) flip::r#1 ← -- (byte) flip::r#2 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1=_dec_zpby1 
    dec r
  //SEG86 [34] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1_neq_0_then_la1 
    lda r
    bne b1
  //SEG87 [35] phi from flip::@4 to flip::@3
  //SEG88 [35] phi (byte) flip::i#2 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG89 [35] phi from flip::@3 to flip::@3
  //SEG90 [35] phi (byte) flip::i#2 = (byte) flip::i#1 -- register_copy 
  //SEG91 flip::@3
  b3:
  //SEG92 [36] (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ] -- aby=cowo1_staridx_xby 
    lda $1100,x
  //SEG93 [37] *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ] -- cowo1_staridx_xby=aby 
    sta $1000,x
  //SEG94 [38] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] -- xby=_inc_xby 
    inx
  //SEG95 [39] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ] -- xby_neq_0_then_la1 
    cpx #$0
    bne b3
  //SEG96 flip::@return
  //SEG97 [40] return  [ ]
    rts
}
//SEG98 prepare
prepare: {
  //SEG99 [41] phi from prepare to prepare::@1
  //SEG100 [41] phi (byte) prepare::i#2 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG101 [41] phi from prepare::@1 to prepare::@1
  //SEG102 [41] phi (byte) prepare::i#2 = (byte) prepare::i#1 -- register_copy 
  //SEG103 prepare::@1
  b1:
  //SEG104 [42] *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] -- cowo1_staridx_xby=xby 
    txa
    sta $1000,x
  //SEG105 [43] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] -- xby=_inc_xby 
    inx
  //SEG106 [44] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ] -- xby_neq_0_then_la1 
    cpx #$0
    bne b1
  //SEG107 prepare::@return
  //SEG108 [45] return  [ ]
    rts
}

Removing instruction jmp b3
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Global ZP labels
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
//SEG4 main
main: {
  //SEG5 [1] call prepare param-assignment [ ]
    jsr prepare
  //SEG6 [2] phi from main to main::@3
  //SEG7 [2] phi (byte) main::c#2 = (byte) 25 -- xby=coby1 
    ldx #$19
    jmp b3
  //SEG8 [2] phi from main::@11 to main::@3
  b3_from_b11:
  //SEG9 [2] phi (byte) main::c#2 = (byte) 25 -- xby=coby1 
    ldx #$19
  //SEG10 [2] phi from main::@3 to main::@3
  //SEG11 [2] phi from main::@6 to main::@3
  //SEG12 [2] phi (byte) main::c#2 = (byte) main::c#1 -- register_copy 
  //SEG13 main::@3
  b3:
  //SEG14 [3] (byte~) main::$1 ← * (word) 53266 [ main::$1 main::c#2 ] -- aby=_star_cowo1 
    lda $d012
  //SEG15 [4] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#2 ] -- aby_neq_coby1_then_la1 
    cmp #$fe
    bne b3
  //SEG16 main::@4
  b4:
  //SEG17 [5] (byte~) main::$3 ← * (word) 53266 [ main::$3 main::c#2 ] -- aby=_star_cowo1 
    lda $d012
  //SEG18 [6] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#2 ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b4
  //SEG19 main::@6
  //SEG20 [7] (byte) main::c#1 ← -- (byte) main::c#2 [ main::c#1 ] -- xby=_dec_xby 
    dex
  //SEG21 [8] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ] -- xby_neq_0_then_la1 
    cpx #$0
    bne b3
  //SEG22 main::@7
  //SEG23 [9] call flip param-assignment [ ]
    jsr flip
  //SEG24 main::@10
  //SEG25 [10] call plot param-assignment [ ]
    jsr plot
  //SEG26 main::@11
  //SEG27 [11] if(true) goto main::@3 [ ] -- true_then_la1 
    jmp b3_from_b11
  //SEG28 main::@return
  //SEG29 [12] return  [ ]
    rts
}
//SEG30 plot
plot: {
    .label line = 2
    .label y = 4
  //SEG31 [13] phi from plot to plot::@1
  //SEG32 [13] phi (byte) plot::y#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta y
  //SEG33 [13] phi (byte*) plot::line#2 = (word) 1236 -- zpptrby1=cowo1 
    lda #<$4d4
    sta line
    lda #>$4d4
    sta line+$1
  //SEG34 [13] phi (byte) plot::i#3 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG35 [13] phi from plot::@3 to plot::@1
  //SEG36 [13] phi (byte) plot::y#2 = (byte) plot::y#1 -- register_copy 
  //SEG37 [13] phi (byte*) plot::line#2 = (byte*) plot::line#1 -- register_copy 
  //SEG38 [13] phi (byte) plot::i#3 = (byte) plot::i#1 -- register_copy 
  //SEG39 plot::@1
  b1:
  //SEG40 [14] phi from plot::@1 to plot::@2
  //SEG41 [14] phi (byte) plot::x#2 = (byte) 0 -- yby=coby1 
    ldy #$0
  //SEG42 [14] phi (byte) plot::i#2 = (byte) plot::i#3 -- register_copy 
  //SEG43 [14] phi from plot::@2 to plot::@2
  //SEG44 [14] phi (byte) plot::x#2 = (byte) plot::x#1 -- register_copy 
  //SEG45 [14] phi (byte) plot::i#2 = (byte) plot::i#1 -- register_copy 
  //SEG46 plot::@2
  b2:
  //SEG47 [15] (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2 [ plot::i#2 plot::line#2 plot::x#2 plot::$3 plot::y#2 ] -- aby=cowo1_staridx_xby 
    lda $1000,x
  //SEG48 [16] *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ] -- zpptrby1_staridx_yby=aby 
    sta (line),y
  //SEG49 [17] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::i#1 plot::line#2 plot::x#2 plot::y#2 ] -- xby=_inc_xby 
    inx
  //SEG50 [18] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- yby=_inc_yby 
    iny
  //SEG51 [19] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- yby_lt_coby1_then_la1 
    cpy #$10
    bcc b2
  //SEG52 plot::@3
  //SEG53 [20] (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40 [ plot::i#1 plot::line#1 plot::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+$1
  !:
  //SEG54 [21] (byte) plot::y#1 ← -- (byte) plot::y#2 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1=_dec_zpby1 
    dec y
  //SEG55 [22] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1_neq_0_then_la1 
    lda y
    bne b1
  //SEG56 plot::@return
  //SEG57 [23] return  [ ]
    rts
}
//SEG58 flip
flip: {
    .label c = 5
    .label r = 4
  //SEG59 [24] phi from flip to flip::@1
  //SEG60 [24] phi (byte) flip::r#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta r
  //SEG61 [24] phi (byte) flip::dstIdx#5 = (byte) 15 -- yby=coby1 
    ldy #$f
  //SEG62 [24] phi (byte) flip::srcIdx#3 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG63 [24] phi from flip::@4 to flip::@1
  //SEG64 [24] phi (byte) flip::r#2 = (byte) flip::r#1 -- register_copy 
  //SEG65 [24] phi (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2 -- register_copy 
  //SEG66 [24] phi (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1 -- register_copy 
  //SEG67 flip::@1
  b1:
  //SEG68 [25] phi from flip::@1 to flip::@2
  //SEG69 [25] phi (byte) flip::c#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta c
  //SEG70 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5 -- register_copy 
  //SEG71 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3 -- register_copy 
  //SEG72 [25] phi from flip::@2 to flip::@2
  //SEG73 [25] phi (byte) flip::c#2 = (byte) flip::c#1 -- register_copy 
  //SEG74 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1 -- register_copy 
  //SEG75 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1 -- register_copy 
  //SEG76 flip::@2
  b2:
  //SEG77 [26] (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2 [ flip::srcIdx#2 flip::dstIdx#3 flip::$0 flip::c#2 flip::r#2 ] -- aby=cowo1_staridx_xby 
    lda $1000,x
  //SEG78 [27] *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- cowo1_staridx_yby=aby 
    sta $1100,y
  //SEG79 [28] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::srcIdx#1 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- xby=_inc_xby 
    inx
  //SEG80 [29] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#2 flip::r#2 ] -- yby=yby_plus_coby1 
    tya
    clc
    adc #$10
    tay
  //SEG81 [30] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1=_dec_zpby1 
    dec c
  //SEG82 [31] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1_neq_0_then_la1 
    lda c
    bne b2
  //SEG83 flip::@4
  //SEG84 [32] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#2 ] -- yby=_dec_yby 
    dey
  //SEG85 [33] (byte) flip::r#1 ← -- (byte) flip::r#2 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1=_dec_zpby1 
    dec r
  //SEG86 [34] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1_neq_0_then_la1 
    lda r
    bne b1
  //SEG87 [35] phi from flip::@4 to flip::@3
  //SEG88 [35] phi (byte) flip::i#2 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG89 [35] phi from flip::@3 to flip::@3
  //SEG90 [35] phi (byte) flip::i#2 = (byte) flip::i#1 -- register_copy 
  //SEG91 flip::@3
  b3:
  //SEG92 [36] (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ] -- aby=cowo1_staridx_xby 
    lda $1100,x
  //SEG93 [37] *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ] -- cowo1_staridx_xby=aby 
    sta $1000,x
  //SEG94 [38] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] -- xby=_inc_xby 
    inx
  //SEG95 [39] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ] -- xby_neq_0_then_la1 
    cpx #$0
    bne b3
  //SEG96 flip::@return
  //SEG97 [40] return  [ ]
    rts
}
//SEG98 prepare
prepare: {
  //SEG99 [41] phi from prepare to prepare::@1
  //SEG100 [41] phi (byte) prepare::i#2 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG101 [41] phi from prepare::@1 to prepare::@1
  //SEG102 [41] phi (byte) prepare::i#2 = (byte) prepare::i#1 -- register_copy 
  //SEG103 prepare::@1
  b1:
  //SEG104 [42] *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] -- cowo1_staridx_xby=xby 
    txa
    sta $1000,x
  //SEG105 [43] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] -- xby=_inc_xby 
    inx
  //SEG106 [44] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ] -- xby_neq_0_then_la1 
    cpx #$0
    bne b1
  //SEG107 prepare::@return
  //SEG108 [45] return  [ ]
    rts
}

FINAL SYMBOL TABLE
(label) @begin
(label) @end
(byte*) RASTER
(byte[1000]) SCREEN
(byte[256]) buffer1
(byte[256]) buffer2
(void()) flip()
(byte~) flip::$0 reg byte a 2002.0
(byte~) flip::$4 reg byte a 202.0
(label) flip::@1
(label) flip::@2
(label) flip::@3
(label) flip::@4
(label) flip::@return
(byte) flip::c
(byte) flip::c#1 c zp ZP_BYTE:5 1501.5
(byte) flip::c#2 c zp ZP_BYTE:5 400.4
(byte) flip::dstIdx
(byte) flip::dstIdx#1 reg byte y 701.0
(byte) flip::dstIdx#2 reg byte y 67.33333333333333
(byte) flip::dstIdx#3 reg byte y 776.0
(byte) flip::dstIdx#5 reg byte y 202.0
(byte) flip::i
(byte) flip::i#1 reg byte x 151.5
(byte) flip::i#2 reg byte x 134.66666666666666
(byte) flip::r
(byte) flip::r#1 r zp ZP_BYTE:4 151.5
(byte) flip::r#2 r zp ZP_BYTE:4 22.444444444444443
(byte) flip::srcIdx
(byte) flip::srcIdx#1 reg byte x 300.42857142857144
(byte) flip::srcIdx#2 reg byte x 1034.6666666666667
(byte) flip::srcIdx#3 reg byte x 202.0
(void()) main()
(byte~) main::$1 reg byte a 2002.0
(byte~) main::$3 reg byte a 2002.0
(label) main::@10
(label) main::@11
(label) main::@3
(label) main::@4
(label) main::@6
(label) main::@7
(label) main::@return
(byte) main::c
(byte) main::c#1 reg byte x 151.5
(byte) main::c#2 reg byte x 40.4
(void()) plot()
(byte~) plot::$3 reg byte a 2002.0
(label) plot::@1
(label) plot::@2
(label) plot::@3
(label) plot::@return
(byte) plot::i
(byte) plot::i#1 reg byte x 350.5
(byte) plot::i#2 reg byte x 1034.6666666666667
(byte) plot::i#3 reg byte x 202.0
(byte*) plot::line
(byte*) plot::line#1 line zp ZP_PTR_BYTE:2 67.33333333333333
(byte*) plot::line#2 line zp ZP_PTR_BYTE:2 171.85714285714283
(byte) plot::x
(byte) plot::x#1 reg byte y 1501.5
(byte) plot::x#2 reg byte y 750.75
(byte) plot::y
(byte) plot::y#1 y zp ZP_BYTE:4 151.5
(byte) plot::y#2 y zp ZP_BYTE:4 25.25
(void()) prepare()
(label) prepare::@1
(label) prepare::@return
(byte) prepare::i
(byte) prepare::i#1 reg byte x 16.5
(byte) prepare::i#2 reg byte x 22.0

reg byte x [ main::c#2 main::c#1 ]
zp ZP_PTR_BYTE:2 [ plot::line#2 plot::line#1 ]
zp ZP_BYTE:4 [ plot::y#2 plot::y#1 flip::r#2 flip::r#1 ]
reg byte x [ plot::i#2 plot::i#3 plot::i#1 ]
reg byte y [ plot::x#2 plot::x#1 ]
reg byte x [ flip::srcIdx#2 flip::srcIdx#3 flip::srcIdx#1 ]
reg byte y [ flip::dstIdx#3 flip::dstIdx#5 flip::dstIdx#2 flip::dstIdx#1 ]
zp ZP_BYTE:5 [ flip::c#2 flip::c#1 ]
reg byte x [ flip::i#2 flip::i#1 ]
reg byte x [ prepare::i#2 prepare::i#1 ]
reg byte a [ main::$1 ]
reg byte a [ main::$3 ]
reg byte a [ plot::$3 ]
reg byte a [ flip::$0 ]
reg byte a [ flip::$4 ]

FINAL CODE
//SEG0 Global ZP labels
//SEG1 @begin
//SEG2 [0] call main param-assignment [ ]
  jsr main
//SEG3 @end
//SEG4 main
main: {
  //SEG5 [1] call prepare param-assignment [ ]
    jsr prepare
  //SEG6 [2] phi from main to main::@3
  //SEG7 [2] phi (byte) main::c#2 = (byte) 25 -- xby=coby1 
    ldx #$19
    jmp b3
  //SEG8 [2] phi from main::@11 to main::@3
  b3_from_b11:
  //SEG9 [2] phi (byte) main::c#2 = (byte) 25 -- xby=coby1 
    ldx #$19
  //SEG10 [2] phi from main::@3 to main::@3
  //SEG11 [2] phi from main::@6 to main::@3
  //SEG12 [2] phi (byte) main::c#2 = (byte) main::c#1 -- register_copy 
  //SEG13 main::@3
  b3:
  //SEG14 [3] (byte~) main::$1 ← * (word) 53266 [ main::$1 main::c#2 ] -- aby=_star_cowo1 
    lda $d012
  //SEG15 [4] if((byte~) main::$1!=(byte) 254) goto main::@3 [ main::c#2 ] -- aby_neq_coby1_then_la1 
    cmp #$fe
    bne b3
  //SEG16 main::@4
  b4:
  //SEG17 [5] (byte~) main::$3 ← * (word) 53266 [ main::$3 main::c#2 ] -- aby=_star_cowo1 
    lda $d012
  //SEG18 [6] if((byte~) main::$3!=(byte) 255) goto main::@4 [ main::c#2 ] -- aby_neq_coby1_then_la1 
    cmp #$ff
    bne b4
  //SEG19 main::@6
  //SEG20 [7] (byte) main::c#1 ← -- (byte) main::c#2 [ main::c#1 ] -- xby=_dec_xby 
    dex
  //SEG21 [8] if((byte) main::c#1!=(byte) 0) goto main::@3 [ main::c#1 ] -- xby_neq_0_then_la1 
    cpx #$0
    bne b3
  //SEG22 main::@7
  //SEG23 [9] call flip param-assignment [ ]
    jsr flip
  //SEG24 main::@10
  //SEG25 [10] call plot param-assignment [ ]
    jsr plot
  //SEG26 main::@11
  //SEG27 [11] if(true) goto main::@3 [ ] -- true_then_la1 
    jmp b3_from_b11
  //SEG28 main::@return
  //SEG29 [12] return  [ ]
    rts
}
//SEG30 plot
plot: {
    .label line = 2
    .label y = 4
  //SEG31 [13] phi from plot to plot::@1
  //SEG32 [13] phi (byte) plot::y#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta y
  //SEG33 [13] phi (byte*) plot::line#2 = (word) 1236 -- zpptrby1=cowo1 
    lda #<$4d4
    sta line
    lda #>$4d4
    sta line+$1
  //SEG34 [13] phi (byte) plot::i#3 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG35 [13] phi from plot::@3 to plot::@1
  //SEG36 [13] phi (byte) plot::y#2 = (byte) plot::y#1 -- register_copy 
  //SEG37 [13] phi (byte*) plot::line#2 = (byte*) plot::line#1 -- register_copy 
  //SEG38 [13] phi (byte) plot::i#3 = (byte) plot::i#1 -- register_copy 
  //SEG39 plot::@1
  b1:
  //SEG40 [14] phi from plot::@1 to plot::@2
  //SEG41 [14] phi (byte) plot::x#2 = (byte) 0 -- yby=coby1 
    ldy #$0
  //SEG42 [14] phi (byte) plot::i#2 = (byte) plot::i#3 -- register_copy 
  //SEG43 [14] phi from plot::@2 to plot::@2
  //SEG44 [14] phi (byte) plot::x#2 = (byte) plot::x#1 -- register_copy 
  //SEG45 [14] phi (byte) plot::i#2 = (byte) plot::i#1 -- register_copy 
  //SEG46 plot::@2
  b2:
  //SEG47 [15] (byte~) plot::$3 ← (word) 4096 *idx (byte) plot::i#2 [ plot::i#2 plot::line#2 plot::x#2 plot::$3 plot::y#2 ] -- aby=cowo1_staridx_xby 
    lda $1000,x
  //SEG48 [16] *((byte*) plot::line#2 + (byte) plot::x#2) ← (byte~) plot::$3 [ plot::i#2 plot::line#2 plot::x#2 plot::y#2 ] -- zpptrby1_staridx_yby=aby 
    sta (line),y
  //SEG49 [17] (byte) plot::i#1 ← ++ (byte) plot::i#2 [ plot::i#1 plot::line#2 plot::x#2 plot::y#2 ] -- xby=_inc_xby 
    inx
  //SEG50 [18] (byte) plot::x#1 ← ++ (byte) plot::x#2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- yby=_inc_yby 
    iny
  //SEG51 [19] if((byte) plot::x#1<(byte) 16) goto plot::@2 [ plot::i#1 plot::x#1 plot::line#2 plot::y#2 ] -- yby_lt_coby1_then_la1 
    cpy #$10
    bcc b2
  //SEG52 plot::@3
  //SEG53 [20] (byte*) plot::line#1 ← (byte*) plot::line#2 + (byte) 40 [ plot::i#1 plot::line#1 plot::y#2 ] -- zpptrby1=zpptrby1_plus_coby1 
    lda line
    clc
    adc #$28
    sta line
    bcc !+
    inc line+$1
  !:
  //SEG54 [21] (byte) plot::y#1 ← -- (byte) plot::y#2 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1=_dec_zpby1 
    dec y
  //SEG55 [22] if((byte) plot::y#1!=(byte) 0) goto plot::@1 [ plot::i#1 plot::line#1 plot::y#1 ] -- zpby1_neq_0_then_la1 
    lda y
    bne b1
  //SEG56 plot::@return
  //SEG57 [23] return  [ ]
    rts
}
//SEG58 flip
flip: {
    .label c = 5
    .label r = 4
  //SEG59 [24] phi from flip to flip::@1
  //SEG60 [24] phi (byte) flip::r#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta r
  //SEG61 [24] phi (byte) flip::dstIdx#5 = (byte) 15 -- yby=coby1 
    ldy #$f
  //SEG62 [24] phi (byte) flip::srcIdx#3 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG63 [24] phi from flip::@4 to flip::@1
  //SEG64 [24] phi (byte) flip::r#2 = (byte) flip::r#1 -- register_copy 
  //SEG65 [24] phi (byte) flip::dstIdx#5 = (byte) flip::dstIdx#2 -- register_copy 
  //SEG66 [24] phi (byte) flip::srcIdx#3 = (byte) flip::srcIdx#1 -- register_copy 
  //SEG67 flip::@1
  b1:
  //SEG68 [25] phi from flip::@1 to flip::@2
  //SEG69 [25] phi (byte) flip::c#2 = (byte) 16 -- zpby1=coby1 
    lda #$10
    sta c
  //SEG70 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#5 -- register_copy 
  //SEG71 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#3 -- register_copy 
  //SEG72 [25] phi from flip::@2 to flip::@2
  //SEG73 [25] phi (byte) flip::c#2 = (byte) flip::c#1 -- register_copy 
  //SEG74 [25] phi (byte) flip::dstIdx#3 = (byte) flip::dstIdx#1 -- register_copy 
  //SEG75 [25] phi (byte) flip::srcIdx#2 = (byte) flip::srcIdx#1 -- register_copy 
  //SEG76 flip::@2
  b2:
  //SEG77 [26] (byte~) flip::$0 ← (word) 4096 *idx (byte) flip::srcIdx#2 [ flip::srcIdx#2 flip::dstIdx#3 flip::$0 flip::c#2 flip::r#2 ] -- aby=cowo1_staridx_xby 
    lda $1000,x
  //SEG78 [27] *((word) 4352 + (byte) flip::dstIdx#3) ← (byte~) flip::$0 [ flip::srcIdx#2 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- cowo1_staridx_yby=aby 
    sta $1100,y
  //SEG79 [28] (byte) flip::srcIdx#1 ← ++ (byte) flip::srcIdx#2 [ flip::srcIdx#1 flip::dstIdx#3 flip::c#2 flip::r#2 ] -- xby=_inc_xby 
    inx
  //SEG80 [29] (byte) flip::dstIdx#1 ← (byte) flip::dstIdx#3 + (byte) 16 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#2 flip::r#2 ] -- yby=yby_plus_coby1 
    tya
    clc
    adc #$10
    tay
  //SEG81 [30] (byte) flip::c#1 ← -- (byte) flip::c#2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1=_dec_zpby1 
    dec c
  //SEG82 [31] if((byte) flip::c#1!=(byte) 0) goto flip::@2 [ flip::srcIdx#1 flip::dstIdx#1 flip::c#1 flip::r#2 ] -- zpby1_neq_0_then_la1 
    lda c
    bne b2
  //SEG83 flip::@4
  //SEG84 [32] (byte) flip::dstIdx#2 ← -- (byte) flip::dstIdx#1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#2 ] -- yby=_dec_yby 
    dey
  //SEG85 [33] (byte) flip::r#1 ← -- (byte) flip::r#2 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1=_dec_zpby1 
    dec r
  //SEG86 [34] if((byte) flip::r#1!=(byte) 0) goto flip::@1 [ flip::srcIdx#1 flip::dstIdx#2 flip::r#1 ] -- zpby1_neq_0_then_la1 
    lda r
    bne b1
  //SEG87 [35] phi from flip::@4 to flip::@3
  //SEG88 [35] phi (byte) flip::i#2 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG89 [35] phi from flip::@3 to flip::@3
  //SEG90 [35] phi (byte) flip::i#2 = (byte) flip::i#1 -- register_copy 
  //SEG91 flip::@3
  b3:
  //SEG92 [36] (byte~) flip::$4 ← (word) 4352 *idx (byte) flip::i#2 [ flip::i#2 flip::$4 ] -- aby=cowo1_staridx_xby 
    lda $1100,x
  //SEG93 [37] *((word) 4096 + (byte) flip::i#2) ← (byte~) flip::$4 [ flip::i#2 ] -- cowo1_staridx_xby=aby 
    sta $1000,x
  //SEG94 [38] (byte) flip::i#1 ← ++ (byte) flip::i#2 [ flip::i#1 ] -- xby=_inc_xby 
    inx
  //SEG95 [39] if((byte) flip::i#1!=(byte) 0) goto flip::@3 [ flip::i#1 ] -- xby_neq_0_then_la1 
    cpx #$0
    bne b3
  //SEG96 flip::@return
  //SEG97 [40] return  [ ]
    rts
}
//SEG98 prepare
prepare: {
  //SEG99 [41] phi from prepare to prepare::@1
  //SEG100 [41] phi (byte) prepare::i#2 = (byte) 0 -- xby=coby1 
    ldx #$0
  //SEG101 [41] phi from prepare::@1 to prepare::@1
  //SEG102 [41] phi (byte) prepare::i#2 = (byte) prepare::i#1 -- register_copy 
  //SEG103 prepare::@1
  b1:
  //SEG104 [42] *((word) 4096 + (byte) prepare::i#2) ← (byte) prepare::i#2 [ prepare::i#2 ] -- cowo1_staridx_xby=xby 
    txa
    sta $1000,x
  //SEG105 [43] (byte) prepare::i#1 ← ++ (byte) prepare::i#2 [ prepare::i#1 ] -- xby=_inc_xby 
    inx
  //SEG106 [44] if((byte) prepare::i#1!=(byte) 0) goto prepare::@1 [ prepare::i#1 ] -- xby_neq_0_then_la1 
    cpx #$0
    bne b1
  //SEG107 prepare::@return
  //SEG108 [45] return  [ ]
    rts
}

