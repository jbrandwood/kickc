Identified constant variable (byte*) main::screen
Culled Empty Block (label) main::@11
Culled Empty Block (label) main::@12
Culled Empty Block (label) main::@7
Culled Empty Block (label) main::@8
Culled Empty Block (label) main::@9
Culled Empty Block (label) main::@10
Culled Empty Block (label) main::@16
Culled Empty Block (label) main::@15
Culled Empty Block (label) main::@17
Culled Empty Block (label) main::@18

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte*) main::screen#0 ← ((byte*)) (number) $400
  (word) main::line#0 ← (word) 0
  (word) main::line#1 ← (number) 0
  to:main::@1
main::@1: scope:[main]  from main main::@6
  (word) main::line#3 ← phi( main/(word) main::line#1 main::@6/(word) main::line#2 )
  (bool~) main::$0 ← (word) main::line#3 < (number) $28*(number) $18
  if((bool~) main::$0) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  (word) main::line#9 ← phi( main::@1/(word) main::line#3 )
  (byte) main::c#0 ← (number) 0
  to:main::@4
main::@3: scope:[main]  from main::@1
  (word) main::line#10 ← phi( main::@1/(word) main::line#3 )
  (byte) main::c1#0 ← (number) 0
  to:main::@13
main::@4: scope:[main]  from main::@2 main::@5
  (word) main::line#7 ← phi( main::@2/(word) main::line#9 main::@5/(word) main::line#4 )
  (byte) main::c#2 ← phi( main::@2/(byte) main::c#0 main::@5/(byte) main::c#1 )
  (bool~) main::$1 ← (byte) main::c#2 < (number) $28
  if((bool~) main::$1) goto main::@5
  to:main::@6
main::@5: scope:[main]  from main::@4
  (byte) main::c#3 ← phi( main::@4/(byte) main::c#2 )
  (word) main::line#4 ← phi( main::@4/(word) main::line#7 )
  (word~) main::$2 ← (word) main::line#4 + (byte) main::c#3
  (word~) main::$3 ← (word) main::line#4 + (byte) main::c#3
  (number~) main::$4 ← (word~) main::$3 + (number) $28
  *((byte*) main::screen#0 + (word~) main::$2) ← *((byte*) main::screen#0 + (number~) main::$4)
  (byte) main::c#1 ← ++ (byte) main::c#3
  to:main::@4
main::@6: scope:[main]  from main::@4
  (word) main::line#5 ← phi( main::@4/(word) main::line#7 )
  (word) main::line#2 ← (word) main::line#5 + (number) $28
  to:main::@1
main::@13: scope:[main]  from main::@14 main::@3
  (word) main::line#8 ← phi( main::@14/(word) main::line#6 main::@3/(word) main::line#10 )
  (byte) main::c1#2 ← phi( main::@14/(byte) main::c1#1 main::@3/(byte) main::c1#0 )
  (bool~) main::$5 ← (byte) main::c1#2 < (number) $28
  if((bool~) main::$5) goto main::@14
  to:main::@return
main::@14: scope:[main]  from main::@13
  (byte) main::c1#3 ← phi( main::@13/(byte) main::c1#2 )
  (word) main::line#6 ← phi( main::@13/(word) main::line#8 )
  (word~) main::$6 ← (word) main::line#6 + (byte) main::c1#3
  *((byte*) main::screen#0 + (word~) main::$6) ← (byte) ' '
  (byte) main::c1#1 ← ++ (byte) main::c1#3
  to:main::@13
main::@return: scope:[main]  from main::@13
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(bool~) main::$0
(bool~) main::$1
(word~) main::$2
(word~) main::$3
(number~) main::$4
(bool~) main::$5
(word~) main::$6
(label) main::@1
(label) main::@13
(label) main::@14
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(byte) main::c
(byte) main::c#0
(byte) main::c#1
(byte) main::c#2
(byte) main::c#3
(byte) main::c1
(byte) main::c1#0
(byte) main::c1#1
(byte) main::c1#2
(byte) main::c1#3
(word) main::line
(word) main::line#0
(word) main::line#1
(word) main::line#10
(word) main::line#2
(word) main::line#3
(word) main::line#4
(word) main::line#5
(word) main::line#6
(word) main::line#7
(word) main::line#8
(word) main::line#9
(byte*) main::screen
(byte*) main::screen#0

Adding number conversion cast (unumber) 0 in (word) main::line#1 ← (number) 0
Adding number conversion cast (unumber) $28*$18 in (bool~) main::$0 ← (word) main::line#3 < (number) $28*(number) $18
Adding number conversion cast (unumber) 0 in (byte) main::c#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) main::c1#0 ← (number) 0
Adding number conversion cast (unumber) $28 in (bool~) main::$1 ← (byte) main::c#2 < (number) $28
Adding number conversion cast (unumber) $28 in (number~) main::$4 ← (word~) main::$3 + (number) $28
Adding number conversion cast (unumber) main::$4 in (number~) main::$4 ← (word~) main::$3 + (unumber)(number) $28
Adding number conversion cast (unumber) $28 in (word) main::line#2 ← (word) main::line#5 + (number) $28
Adding number conversion cast (unumber) $28 in (bool~) main::$5 ← (byte) main::c1#2 < (number) $28
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) main::screen#0 ← (byte*)(number) $400
Inlining cast (word) main::line#1 ← (unumber)(number) 0
Inlining cast (byte) main::c#0 ← (unumber)(number) 0
Inlining cast (byte) main::c1#0 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to word in (unumber~) main::$4 ← (word~) main::$3 + (byte) $28
Alias (word) main::line#10 = (word) main::line#9 (word) main::line#3 
Alias (word) main::line#4 = (word) main::line#7 (word) main::line#5 
Alias (byte) main::c#2 = (byte) main::c#3 
Alias (word) main::line#6 = (word) main::line#8 
Alias (byte) main::c1#2 = (byte) main::c1#3 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) main::line#4 (word) main::line#10
Identical Phi Values (word) main::line#6 (word) main::line#10
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$0 [5] if((word) main::line#10<(word)(number) $28*(number) $18) goto main::@2
Simple Condition (bool~) main::$1 [12] if((byte) main::c#2<(byte) $28) goto main::@5
Simple Condition (bool~) main::$5 [23] if((byte) main::c1#2<(byte) $28) goto main::@14
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) main::screen#0 = (byte*) 1024
Constant (const word) main::line#0 = 0
Constant (const word) main::line#1 = 0
Constant (const byte) main::c#0 = 0
Constant (const byte) main::c1#0 = 0
Successful SSA optimization Pass2ConstantIdentification
De-inlining pointer[w] to *(pointer+w)   [17] *((const byte*) main::screen#0 + (word~) main::$2) ← *((const byte*) main::screen#0 + (word~) main::$4)
De-inlining pointer[w] to *(pointer+w)   [17] *((const byte*) main::screen#0 + (word~) main::$2) ← *((byte*~) main::$7)
De-inlining pointer[w] to *(pointer+w)   [26] *((const byte*) main::screen#0 + (word~) main::$6) ← (byte) ' '
Successful SSA optimization Pass2DeInlineWordDerefIdx
Eliminating unused constant (const word) main::line#0
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with var siblings (const word) main::line#1
Inlining constant with var siblings (const byte) main::c#0
Inlining constant with var siblings (const byte) main::c1#0
Constant inlined main::c1#0 = (byte) 0
Constant inlined main::c#0 = (byte) 0
Constant inlined main::line#1 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Consolidated constant in assignment main::$7
Successful SSA optimization Pass2ConstantAdditionElimination
Alias (word~) main::$4 = (word~) main::$3 
Successful SSA optimization Pass2AliasElimination
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@2
CALL GRAPH
Calls in [] to main:2 

Created 3 initial phi equivalence classes
Coalesced [16] main::c1#4 ← main::c1#1
Coalesced [21] main::line#11 ← main::line#2
Coalesced [28] main::c#4 ← main::c#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@2
Renumbering block main::@4 to main::@2
Renumbering block main::@5 to main::@3
Renumbering block main::@6 to main::@4
Renumbering block main::@13 to main::@5
Renumbering block main::@14 to main::@6
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [5] (word) main::line#10 ← phi( main/(byte) 0 main::@4/(word) main::line#2 )
  [6] if((word) main::line#10<(word)(number) $28*(number) $18) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@1 main::@6
  [7] (byte) main::c1#2 ← phi( main::@6/(byte) main::c1#1 main::@1/(byte) 0 )
  [8] if((byte) main::c1#2<(byte) $28) goto main::@6
  to:main::@return
main::@return: scope:[main]  from main::@5
  [9] return 
  to:@return
main::@6: scope:[main]  from main::@5
  [10] (word~) main::$6 ← (word) main::line#10 + (byte) main::c1#2
  [11] (byte*~) main::$9 ← (const byte*) main::screen#0 + (word~) main::$6
  [12] *((byte*~) main::$9) ← (byte) ' '
  [13] (byte) main::c1#1 ← ++ (byte) main::c1#2
  to:main::@5
main::@2: scope:[main]  from main::@1 main::@3
  [14] (byte) main::c#2 ← phi( main::@1/(byte) 0 main::@3/(byte) main::c#1 )
  [15] if((byte) main::c#2<(byte) $28) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@2
  [16] (word) main::line#2 ← (word) main::line#10 + (byte) $28
  to:main::@1
main::@3: scope:[main]  from main::@2
  [17] (word~) main::$2 ← (word) main::line#10 + (byte) main::c#2
  [18] (word~) main::$4 ← (word) main::line#10 + (byte) main::c#2
  [19] (byte*~) main::$7 ← (const byte*) main::screen#0+(byte) $28 + (word~) main::$4
  [20] (byte*~) main::$8 ← (const byte*) main::screen#0 + (word~) main::$2
  [21] *((byte*~) main::$8) ← *((byte*~) main::$7)
  [22] (byte) main::c#1 ← ++ (byte) main::c#2
  to:main::@2


VARIABLE REGISTER WEIGHTS
(void()) main()
(word~) main::$2 67.33333333333333
(word~) main::$4 202.0
(word~) main::$6 22.0
(byte*~) main::$7 101.0
(byte*~) main::$8 202.0
(byte*~) main::$9 22.0
(byte) main::c
(byte) main::c#1 202.0
(byte) main::c#2 72.14285714285714
(byte) main::c1
(byte) main::c1#1 22.0
(byte) main::c1#2 8.8
(word) main::line
(word) main::line#10 15.375
(word) main::line#2 22.0
(byte*) main::screen

Initial phi equivalence classes
[ main::line#10 main::line#2 ]
[ main::c1#2 main::c1#1 ]
[ main::c#2 main::c#1 ]
Added variable main::$6 to zero page equivalence class [ main::$6 ]
Added variable main::$9 to zero page equivalence class [ main::$9 ]
Added variable main::$2 to zero page equivalence class [ main::$2 ]
Added variable main::$4 to zero page equivalence class [ main::$4 ]
Added variable main::$7 to zero page equivalence class [ main::$7 ]
Added variable main::$8 to zero page equivalence class [ main::$8 ]
Complete equivalence classes
[ main::line#10 main::line#2 ]
[ main::c1#2 main::c1#1 ]
[ main::c#2 main::c#1 ]
[ main::$6 ]
[ main::$9 ]
[ main::$2 ]
[ main::$4 ]
[ main::$7 ]
[ main::$8 ]
Allocated zp ZP_WORD:2 [ main::line#10 main::line#2 ]
Allocated zp ZP_BYTE:4 [ main::c1#2 main::c1#1 ]
Allocated zp ZP_BYTE:5 [ main::c#2 main::c#1 ]
Allocated zp ZP_WORD:6 [ main::$6 ]
Allocated zp ZP_WORD:8 [ main::$9 ]
Allocated zp ZP_WORD:10 [ main::$2 ]
Allocated zp ZP_WORD:12 [ main::$4 ]
Allocated zp ZP_WORD:14 [ main::$7 ]
Allocated zp ZP_WORD:16 [ main::$8 ]

INITIAL ASM
Target platform is c64basic
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label screen = $400
    .label _2 = $a
    .label _4 = $c
    .label _6 = 6
    .label c = 5
    .label line = 2
    .label c1 = 4
    .label _7 = $e
    .label _8 = $10
    .label _9 = 8
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (word) main::line#10 = (byte) 0 [phi:main->main::@1#0] -- vwuz1=vbuc1 
    lda #<0
    sta.z line
    lda #>0
    sta.z line+1
    jmp b1
    // main::@1
  b1:
    // [6] if((word) main::line#10<(word)(number) $28*(number) $18) goto main::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z line+1
    cmp #>$28*$18
    bcc b2_from_b1
    bne !+
    lda.z line
    cmp #<$28*$18
    bcc b2_from_b1
  !:
    // [7] phi from main::@1 to main::@5 [phi:main::@1->main::@5]
  b5_from_b1:
    // [7] phi (byte) main::c1#2 = (byte) 0 [phi:main::@1->main::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c1
    jmp b5
  // Cleare the bottom line
    // main::@5
  b5:
    // [8] if((byte) main::c1#2<(byte) $28) goto main::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z c1
    cmp #$28
    bcc b6
    jmp breturn
    // main::@return
  breturn:
    // [9] return 
    rts
    // main::@6
  b6:
    // [10] (word~) main::$6 ← (word) main::line#10 + (byte) main::c1#2 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z c1
    clc
    adc.z line
    sta.z _6
    lda #0
    adc.z line+1
    sta.z _6+1
    // [11] (byte*~) main::$9 ← (const byte*) main::screen#0 + (word~) main::$6 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z _6
    clc
    adc #<screen
    sta.z _9
    lda.z _6+1
    adc #>screen
    sta.z _9+1
    // [12] *((byte*~) main::$9) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (_9),y
    // [13] (byte) main::c1#1 ← ++ (byte) main::c1#2 -- vbuz1=_inc_vbuz1 
    inc.z c1
    // [7] phi from main::@6 to main::@5 [phi:main::@6->main::@5]
  b5_from_b6:
    // [7] phi (byte) main::c1#2 = (byte) main::c1#1 [phi:main::@6->main::@5#0] -- register_copy 
    jmp b5
    // [14] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    // [14] phi (byte) main::c#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp b2
    // main::@2
  b2:
    // [15] if((byte) main::c#2<(byte) $28) goto main::@3 -- vbuz1_lt_vbuc1_then_la1 
    lda.z c
    cmp #$28
    bcc b3
    jmp b4
    // main::@4
  b4:
    // [16] (word) main::line#2 ← (word) main::line#10 + (byte) $28 -- vwuz1=vwuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z line
    bcc !+
    inc.z line+1
  !:
    // [5] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  b1_from_b4:
    // [5] phi (word) main::line#10 = (word) main::line#2 [phi:main::@4->main::@1#0] -- register_copy 
    jmp b1
    // main::@3
  b3:
    // [17] (word~) main::$2 ← (word) main::line#10 + (byte) main::c#2 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z c
    clc
    adc.z line
    sta.z _2
    lda #0
    adc.z line+1
    sta.z _2+1
    // [18] (word~) main::$4 ← (word) main::line#10 + (byte) main::c#2 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z c
    clc
    adc.z line
    sta.z _4
    lda #0
    adc.z line+1
    sta.z _4+1
    // [19] (byte*~) main::$7 ← (const byte*) main::screen#0+(byte) $28 + (word~) main::$4 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z _4
    clc
    adc #<screen+$28
    sta.z _7
    lda.z _4+1
    adc #>screen+$28
    sta.z _7+1
    // [20] (byte*~) main::$8 ← (const byte*) main::screen#0 + (word~) main::$2 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z _2
    clc
    adc #<screen
    sta.z _8
    lda.z _2+1
    adc #>screen
    sta.z _8+1
    // [21] *((byte*~) main::$8) ← *((byte*~) main::$7) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (_7),y
    ldy #0
    sta (_8),y
    // [22] (byte) main::c#1 ← ++ (byte) main::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [14] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
  b2_from_b3:
    // [14] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@3->main::@2#0] -- register_copy 
    jmp b2
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] if((word) main::line#10<(word)(number) $28*(number) $18) goto main::@2 [ main::line#10 ] ( main:2 [ main::line#10 ] ) always clobbers reg byte a 
Statement [10] (word~) main::$6 ← (word) main::line#10 + (byte) main::c1#2 [ main::line#10 main::c1#2 main::$6 ] ( main:2 [ main::line#10 main::c1#2 main::$6 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ main::c1#2 main::c1#1 ]
Statement [11] (byte*~) main::$9 ← (const byte*) main::screen#0 + (word~) main::$6 [ main::line#10 main::c1#2 main::$9 ] ( main:2 [ main::line#10 main::c1#2 main::$9 ] ) always clobbers reg byte a 
Statement [12] *((byte*~) main::$9) ← (byte) ' ' [ main::line#10 main::c1#2 ] ( main:2 [ main::line#10 main::c1#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:4 [ main::c1#2 main::c1#1 ]
Statement [16] (word) main::line#2 ← (word) main::line#10 + (byte) $28 [ main::line#2 ] ( main:2 [ main::line#2 ] ) always clobbers reg byte a 
Statement [17] (word~) main::$2 ← (word) main::line#10 + (byte) main::c#2 [ main::line#10 main::c#2 main::$2 ] ( main:2 [ main::line#10 main::c#2 main::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ main::c#2 main::c#1 ]
Statement [18] (word~) main::$4 ← (word) main::line#10 + (byte) main::c#2 [ main::line#10 main::c#2 main::$2 main::$4 ] ( main:2 [ main::line#10 main::c#2 main::$2 main::$4 ] ) always clobbers reg byte a 
Statement [19] (byte*~) main::$7 ← (const byte*) main::screen#0+(byte) $28 + (word~) main::$4 [ main::line#10 main::c#2 main::$2 main::$7 ] ( main:2 [ main::line#10 main::c#2 main::$2 main::$7 ] ) always clobbers reg byte a 
Statement [20] (byte*~) main::$8 ← (const byte*) main::screen#0 + (word~) main::$2 [ main::line#10 main::c#2 main::$7 main::$8 ] ( main:2 [ main::line#10 main::c#2 main::$7 main::$8 ] ) always clobbers reg byte a 
Statement [21] *((byte*~) main::$8) ← *((byte*~) main::$7) [ main::line#10 main::c#2 ] ( main:2 [ main::line#10 main::c#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:5 [ main::c#2 main::c#1 ]
Statement [6] if((word) main::line#10<(word)(number) $28*(number) $18) goto main::@2 [ main::line#10 ] ( main:2 [ main::line#10 ] ) always clobbers reg byte a 
Statement [10] (word~) main::$6 ← (word) main::line#10 + (byte) main::c1#2 [ main::line#10 main::c1#2 main::$6 ] ( main:2 [ main::line#10 main::c1#2 main::$6 ] ) always clobbers reg byte a 
Statement [11] (byte*~) main::$9 ← (const byte*) main::screen#0 + (word~) main::$6 [ main::line#10 main::c1#2 main::$9 ] ( main:2 [ main::line#10 main::c1#2 main::$9 ] ) always clobbers reg byte a 
Statement [12] *((byte*~) main::$9) ← (byte) ' ' [ main::line#10 main::c1#2 ] ( main:2 [ main::line#10 main::c1#2 ] ) always clobbers reg byte a reg byte y 
Statement [16] (word) main::line#2 ← (word) main::line#10 + (byte) $28 [ main::line#2 ] ( main:2 [ main::line#2 ] ) always clobbers reg byte a 
Statement [17] (word~) main::$2 ← (word) main::line#10 + (byte) main::c#2 [ main::line#10 main::c#2 main::$2 ] ( main:2 [ main::line#10 main::c#2 main::$2 ] ) always clobbers reg byte a 
Statement [18] (word~) main::$4 ← (word) main::line#10 + (byte) main::c#2 [ main::line#10 main::c#2 main::$2 main::$4 ] ( main:2 [ main::line#10 main::c#2 main::$2 main::$4 ] ) always clobbers reg byte a 
Statement [19] (byte*~) main::$7 ← (const byte*) main::screen#0+(byte) $28 + (word~) main::$4 [ main::line#10 main::c#2 main::$2 main::$7 ] ( main:2 [ main::line#10 main::c#2 main::$2 main::$7 ] ) always clobbers reg byte a 
Statement [20] (byte*~) main::$8 ← (const byte*) main::screen#0 + (word~) main::$2 [ main::line#10 main::c#2 main::$7 main::$8 ] ( main:2 [ main::line#10 main::c#2 main::$7 main::$8 ] ) always clobbers reg byte a 
Statement [21] *((byte*~) main::$8) ← *((byte*~) main::$7) [ main::line#10 main::c#2 ] ( main:2 [ main::line#10 main::c#2 ] ) always clobbers reg byte a reg byte y 
Potential registers zp ZP_WORD:2 [ main::line#10 main::line#2 ] : zp ZP_WORD:2 , 
Potential registers zp ZP_BYTE:4 [ main::c1#2 main::c1#1 ] : zp ZP_BYTE:4 , reg byte x , 
Potential registers zp ZP_BYTE:5 [ main::c#2 main::c#1 ] : zp ZP_BYTE:5 , reg byte x , 
Potential registers zp ZP_WORD:6 [ main::$6 ] : zp ZP_WORD:6 , 
Potential registers zp ZP_WORD:8 [ main::$9 ] : zp ZP_WORD:8 , 
Potential registers zp ZP_WORD:10 [ main::$2 ] : zp ZP_WORD:10 , 
Potential registers zp ZP_WORD:12 [ main::$4 ] : zp ZP_WORD:12 , 
Potential registers zp ZP_WORD:14 [ main::$7 ] : zp ZP_WORD:14 , 
Potential registers zp ZP_WORD:16 [ main::$8 ] : zp ZP_WORD:16 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 274.14: zp ZP_BYTE:5 [ main::c#2 main::c#1 ] 202: zp ZP_WORD:12 [ main::$4 ] 202: zp ZP_WORD:16 [ main::$8 ] 101: zp ZP_WORD:14 [ main::$7 ] 67.33: zp ZP_WORD:10 [ main::$2 ] 37.38: zp ZP_WORD:2 [ main::line#10 main::line#2 ] 30.8: zp ZP_BYTE:4 [ main::c1#2 main::c1#1 ] 22: zp ZP_WORD:6 [ main::$6 ] 22: zp ZP_WORD:8 [ main::$9 ] 
Uplift Scope [] 

Uplifting [main] best 11663 combination reg byte x [ main::c#2 main::c#1 ] zp ZP_WORD:12 [ main::$4 ] zp ZP_WORD:16 [ main::$8 ] zp ZP_WORD:14 [ main::$7 ] zp ZP_WORD:10 [ main::$2 ] zp ZP_WORD:2 [ main::line#10 main::line#2 ] reg byte x [ main::c1#2 main::c1#1 ] zp ZP_WORD:6 [ main::$6 ] zp ZP_WORD:8 [ main::$9 ] 
Uplifting [] best 11663 combination 
Coalescing zero page register [ zp ZP_WORD:6 [ main::$6 ] ] with [ zp ZP_WORD:8 [ main::$9 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:10 [ main::$2 ] ] with [ zp ZP_WORD:16 [ main::$8 ] ] - score: 1
Coalescing zero page register [ zp ZP_WORD:12 [ main::$4 ] ] with [ zp ZP_WORD:14 [ main::$7 ] ] - score: 1
Allocated (was zp ZP_WORD:6) zp ZP_WORD:4 [ main::$6 main::$9 ]
Allocated (was zp ZP_WORD:10) zp ZP_WORD:6 [ main::$2 main::$8 ]
Allocated (was zp ZP_WORD:12) zp ZP_WORD:8 [ main::$4 main::$7 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label screen = $400
    .label _2 = 6
    .label _4 = 8
    .label _6 = 4
    .label line = 2
    .label _7 = 8
    .label _8 = 6
    .label _9 = 4
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (word) main::line#10 = (byte) 0 [phi:main->main::@1#0] -- vwuz1=vbuc1 
    lda #<0
    sta.z line
    lda #>0
    sta.z line+1
    jmp b1
    // main::@1
  b1:
    // [6] if((word) main::line#10<(word)(number) $28*(number) $18) goto main::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z line+1
    cmp #>$28*$18
    bcc b2_from_b1
    bne !+
    lda.z line
    cmp #<$28*$18
    bcc b2_from_b1
  !:
    // [7] phi from main::@1 to main::@5 [phi:main::@1->main::@5]
  b5_from_b1:
    // [7] phi (byte) main::c1#2 = (byte) 0 [phi:main::@1->main::@5#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b5
  // Cleare the bottom line
    // main::@5
  b5:
    // [8] if((byte) main::c1#2<(byte) $28) goto main::@6 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28
    bcc b6
    jmp breturn
    // main::@return
  breturn:
    // [9] return 
    rts
    // main::@6
  b6:
    // [10] (word~) main::$6 ← (word) main::line#10 + (byte) main::c1#2 -- vwuz1=vwuz2_plus_vbuxx 
    txa
    clc
    adc.z line
    sta.z _6
    lda #0
    adc.z line+1
    sta.z _6+1
    // [11] (byte*~) main::$9 ← (const byte*) main::screen#0 + (word~) main::$6 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z _9
    adc #<screen
    sta.z _9
    lda.z _9+1
    adc #>screen
    sta.z _9+1
    // [12] *((byte*~) main::$9) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (_9),y
    // [13] (byte) main::c1#1 ← ++ (byte) main::c1#2 -- vbuxx=_inc_vbuxx 
    inx
    // [7] phi from main::@6 to main::@5 [phi:main::@6->main::@5]
  b5_from_b6:
    // [7] phi (byte) main::c1#2 = (byte) main::c1#1 [phi:main::@6->main::@5#0] -- register_copy 
    jmp b5
    // [14] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    // [14] phi (byte) main::c#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b2
    // main::@2
  b2:
    // [15] if((byte) main::c#2<(byte) $28) goto main::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28
    bcc b3
    jmp b4
    // main::@4
  b4:
    // [16] (word) main::line#2 ← (word) main::line#10 + (byte) $28 -- vwuz1=vwuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z line
    bcc !+
    inc.z line+1
  !:
    // [5] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  b1_from_b4:
    // [5] phi (word) main::line#10 = (word) main::line#2 [phi:main::@4->main::@1#0] -- register_copy 
    jmp b1
    // main::@3
  b3:
    // [17] (word~) main::$2 ← (word) main::line#10 + (byte) main::c#2 -- vwuz1=vwuz2_plus_vbuxx 
    txa
    clc
    adc.z line
    sta.z _2
    lda #0
    adc.z line+1
    sta.z _2+1
    // [18] (word~) main::$4 ← (word) main::line#10 + (byte) main::c#2 -- vwuz1=vwuz2_plus_vbuxx 
    txa
    clc
    adc.z line
    sta.z _4
    lda #0
    adc.z line+1
    sta.z _4+1
    // [19] (byte*~) main::$7 ← (const byte*) main::screen#0+(byte) $28 + (word~) main::$4 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z _7
    adc #<screen+$28
    sta.z _7
    lda.z _7+1
    adc #>screen+$28
    sta.z _7+1
    // [20] (byte*~) main::$8 ← (const byte*) main::screen#0 + (word~) main::$2 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z _8
    adc #<screen
    sta.z _8
    lda.z _8+1
    adc #>screen
    sta.z _8+1
    // [21] *((byte*~) main::$8) ← *((byte*~) main::$7) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (_7),y
    ldy #0
    sta (_8),y
    // [22] (byte) main::c#1 ← ++ (byte) main::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [14] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
  b2_from_b3:
    // [14] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@3->main::@2#0] -- register_copy 
    jmp b2
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b4
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b5_from_b1:
Removing instruction breturn:
Removing instruction b5_from_b6:
Removing instruction b4:
Removing instruction b1_from_b4:
Removing instruction b2_from_b3:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Relabelling long label b2_from_b1 to b4
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(word~) main::$2 $2 zp ZP_WORD:6 67.33333333333333
(word~) main::$4 $4 zp ZP_WORD:8 202.0
(word~) main::$6 $6 zp ZP_WORD:4 22.0
(byte*~) main::$7 $7 zp ZP_WORD:8 101.0
(byte*~) main::$8 $8 zp ZP_WORD:6 202.0
(byte*~) main::$9 $9 zp ZP_WORD:4 22.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(byte) main::c
(byte) main::c#1 reg byte x 202.0
(byte) main::c#2 reg byte x 72.14285714285714
(byte) main::c1
(byte) main::c1#1 reg byte x 22.0
(byte) main::c1#2 reg byte x 8.8
(word) main::line
(word) main::line#10 line zp ZP_WORD:2 15.375
(word) main::line#2 line zp ZP_WORD:2 22.0
(byte*) main::screen
(const byte*) main::screen#0 screen = (byte*) 1024

zp ZP_WORD:2 [ main::line#10 main::line#2 ]
reg byte x [ main::c1#2 main::c1#1 ]
reg byte x [ main::c#2 main::c#1 ]
zp ZP_WORD:4 [ main::$6 main::$9 ]
zp ZP_WORD:6 [ main::$2 main::$8 ]
zp ZP_WORD:8 [ main::$4 main::$7 ]


FINAL ASSEMBLER
Score: 10741

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label screen = $400
    .label _2 = 6
    .label _4 = 8
    .label _6 = 4
    .label line = 2
    .label _7 = 8
    .label _8 = 6
    .label _9 = 4
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (word) main::line#10 = (byte) 0 [phi:main->main::@1#0] -- vwuz1=vbuc1 
    lda #<0
    sta.z line
    sta.z line+1
    // main::@1
  b1:
    // for (line = 0; line < 40*24; line += 40)
    // [6] if((word) main::line#10<(word)(number) $28*(number) $18) goto main::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z line+1
    cmp #>$28*$18
    bcc b4
    bne !+
    lda.z line
    cmp #<$28*$18
    bcc b4
  !:
    // [7] phi from main::@1 to main::@5 [phi:main::@1->main::@5]
    // [7] phi (byte) main::c1#2 = (byte) 0 [phi:main::@1->main::@5#0] -- vbuxx=vbuc1 
    ldx #0
  // Cleare the bottom line
    // main::@5
  b5:
    // for (byte c=0; c<40; ++c)
    // [8] if((byte) main::c1#2<(byte) $28) goto main::@6 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28
    bcc b6
    // main::@return
    // }
    // [9] return 
    rts
    // main::@6
  b6:
    // line+c
    // [10] (word~) main::$6 ← (word) main::line#10 + (byte) main::c1#2 -- vwuz1=vwuz2_plus_vbuxx 
    txa
    clc
    adc.z line
    sta.z _6
    lda #0
    adc.z line+1
    sta.z _6+1
    // screen[line+c] = ' '
    // [11] (byte*~) main::$9 ← (const byte*) main::screen#0 + (word~) main::$6 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z _9
    adc #<screen
    sta.z _9
    lda.z _9+1
    adc #>screen
    sta.z _9+1
    // [12] *((byte*~) main::$9) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (_9),y
    // for (byte c=0; c<40; ++c)
    // [13] (byte) main::c1#1 ← ++ (byte) main::c1#2 -- vbuxx=_inc_vbuxx 
    inx
    // [7] phi from main::@6 to main::@5 [phi:main::@6->main::@5]
    // [7] phi (byte) main::c1#2 = (byte) main::c1#1 [phi:main::@6->main::@5#0] -- register_copy 
    jmp b5
    // [14] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b4:
    // [14] phi (byte) main::c#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // main::@2
  b2:
    // for (byte c=0; c<40; ++c)
    // [15] if((byte) main::c#2<(byte) $28) goto main::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28
    bcc b3
    // main::@4
    // line += 40
    // [16] (word) main::line#2 ← (word) main::line#10 + (byte) $28 -- vwuz1=vwuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z line
    bcc !+
    inc.z line+1
  !:
    // [5] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [5] phi (word) main::line#10 = (word) main::line#2 [phi:main::@4->main::@1#0] -- register_copy 
    jmp b1
    // main::@3
  b3:
    // line+c
    // [17] (word~) main::$2 ← (word) main::line#10 + (byte) main::c#2 -- vwuz1=vwuz2_plus_vbuxx 
    txa
    clc
    adc.z line
    sta.z _2
    lda #0
    adc.z line+1
    sta.z _2+1
    // line+c+40
    // [18] (word~) main::$4 ← (word) main::line#10 + (byte) main::c#2 -- vwuz1=vwuz2_plus_vbuxx 
    txa
    clc
    adc.z line
    sta.z _4
    lda #0
    adc.z line+1
    sta.z _4+1
    // screen[line+c] = screen[line+c+40]
    // [19] (byte*~) main::$7 ← (const byte*) main::screen#0+(byte) $28 + (word~) main::$4 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z _7
    adc #<screen+$28
    sta.z _7
    lda.z _7+1
    adc #>screen+$28
    sta.z _7+1
    // [20] (byte*~) main::$8 ← (const byte*) main::screen#0 + (word~) main::$2 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z _8
    adc #<screen
    sta.z _8
    lda.z _8+1
    adc #>screen
    sta.z _8+1
    // [21] *((byte*~) main::$8) ← *((byte*~) main::$7) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (_7),y
    sta (_8),y
    // for (byte c=0; c<40; ++c)
    // [22] (byte) main::c#1 ← ++ (byte) main::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [14] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
    // [14] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@3->main::@2#0] -- register_copy 
    jmp b2
}
  // File Data

