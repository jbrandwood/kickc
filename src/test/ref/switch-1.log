
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  main::i#2 = phi( main/main::i#0, main::@5/main::i#1 )
  if(main::i#2==1) goto main::@2
  to:main::@6
main::@6: scope:[main]  from main::@1
  main::i#3 = phi( main::@1/main::i#2 )
  if(main::i#3==4) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@6
  main::i#4 = phi( main::@1/main::i#2, main::@6/main::i#3 )
  main::SCREEN[main::i#4] = '1'
  to:main::@4
main::@3: scope:[main]  from main::@6
  main::i#5 = phi( main::@6/main::i#3 )
  main::SCREEN[main::i#5] = 'a'
  to:main::@5
main::@4: scope:[main]  from main::@2
  main::i#6 = phi( main::@2/main::i#4 )
  main::SCREEN[main::i#6] = main::SCREEN[main::i#6] | $80
  to:main::@5
main::@5: scope:[main]  from main::@3 main::@4
  main::i#7 = phi( main::@3/main::i#5, main::@4/main::i#6 )
  main::i#1 = main::i#7 + rangenext(0,5)
  main::$0 = main::i#1 != rangelast(0,5)
  if(main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
bool~ main::$0
const nomodify byte* main::SCREEN = (byte*)$400
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte main::i#4
byte main::i#5
byte main::i#6
byte main::i#7

Adding number conversion cast (unumber) 1 in if(main::i#2==1) goto main::@2
Adding number conversion cast (unumber) 4 in if(main::i#3==4) goto main::@2
Adding number conversion cast (unumber) $80 in main::SCREEN[main::i#6] = main::SCREEN[main::i#6] | $80
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast 4
Simplifying constant integer cast $80
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $80
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::i#2 = main::i#3 main::i#5 
Alias main::i#4 = main::i#6 
Successful SSA optimization Pass2AliasElimination
Alias main::i#2 = main::i#4 
Successful SSA optimization Pass2AliasElimination
Alias main::i#2 = main::i#7 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$0 [9] if(main::i#1!=rangelast(0,5)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [7] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [9] if(main::i#1!=rangelast(0,5)) goto main::@1 to 6
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 6 in [7] if(main::i#1!=6) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 6
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 6
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@7(between main::@5 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [8] main::i#8 = main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@7
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [1] main::i#2 = phi( main/0, main::@5/main::i#1 )
  [2] if(main::i#2==1) goto main::@2
  to:main::@6
main::@6: scope:[main]  from main::@1
  [3] if(main::i#2==4) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@6
  [4] main::SCREEN[main::i#2] = 'a'
  to:main::@5
main::@5: scope:[main]  from main::@3 main::@4
  [5] main::i#1 = ++ main::i#2
  [6] if(main::i#1!=6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  [7] return 
  to:@return
main::@2: scope:[main]  from main::@1 main::@6
  [8] main::SCREEN[main::i#2] = '1'
  to:main::@4
main::@4: scope:[main]  from main::@2
  [9] main::SCREEN[main::i#2] = main::SCREEN[main::i#2] | $80
  to:main::@5


VARIABLE REGISTER WEIGHTS
void main()
byte main::i
byte main::i#1 16.5
byte main::i#2 14.666666666666668

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] main::SCREEN[main::i#2] = 'a' [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [8] main::SCREEN[main::i#2] = '1' [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [9] main::SCREEN[main::i#2] = main::SCREEN[main::i#2] | $80 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [4] main::SCREEN[main::i#2] = 'a' [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [8] main::SCREEN[main::i#2] = '1' [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [9] main::SCREEN[main::i#2] = main::SCREEN[main::i#2] | $80 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 31.17: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 676 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 676 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests simple switch()-statement - including a continue statement for the enclosing loop
// Expected output 'a1aa1a' (numbers should be inverted)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [1] phi main::i#2 = main::i#1 [phi:main::@5->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] if(main::i#2==1) goto main::@2 -- vbuxx_eq_vbuc1_then_la1 
    cpx #1
    beq __b2
    jmp __b6
    // main::@6
  __b6:
    // [3] if(main::i#2==4) goto main::@2 -- vbuxx_eq_vbuc1_then_la1 
    cpx #4
    beq __b2
    jmp __b3
    // main::@3
  __b3:
    // [4] main::SCREEN[main::i#2] = 'a' -- pbuc1_derefidx_vbuxx=vbuc2 
    // No case for 0 & 5
    lda #'a'
    sta SCREEN,x
    jmp __b5
    // main::@5
  __b5:
    // [5] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [6] if(main::i#1!=6) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #6
    bne __b1_from___b5
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
    // main::@2
  __b2:
    // [8] main::SCREEN[main::i#2] = '1' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'1'
    sta SCREEN,x
    jmp __b4
    // main::@4
  __b4:
    // [9] main::SCREEN[main::i#2] = main::SCREEN[main::i#2] | $80 -- pbuc1_derefidx_vbuxx=pbuc1_derefidx_vbuxx_bor_vbuc2 
    // Invert the screen character
    lda #$80
    ora SCREEN,x
    sta SCREEN,x
    jmp __b5
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b6
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b4
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b5 with __b1
Removing instruction __b1_from___b5:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b6:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
const nomodify byte* main::SCREEN = (byte*) 1024
byte main::i
byte main::i#1 reg byte x 16.5
byte main::i#2 reg byte x 14.666666666666668

reg byte x [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 466

  // File Comments
// Tests simple switch()-statement - including a continue statement for the enclosing loop
// Expected output 'a1aa1a' (numbers should be inverted)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@5->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // case 1:
    // [2] if(main::i#2==1) goto main::@2 -- vbuxx_eq_vbuc1_then_la1 
    cpx #1
    beq __b2
    // main::@6
    // case 4:
    //                 SCREEN[i] = '1';
    //                 break;
    // [3] if(main::i#2==4) goto main::@2 -- vbuxx_eq_vbuc1_then_la1 
    cpx #4
    beq __b2
    // main::@3
    // SCREEN[i] = 'a'
    // [4] main::SCREEN[main::i#2] = 'a' -- pbuc1_derefidx_vbuxx=vbuc2 
    // No case for 0 & 5
    lda #'a'
    sta SCREEN,x
    // main::@5
  __b5:
    // for(char i:0..5)
    // [5] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [6] if(main::i#1!=6) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #6
    bne __b1
    // main::@return
    // }
    // [7] return 
    rts
    // main::@2
  __b2:
    // SCREEN[i] = '1'
    // [8] main::SCREEN[main::i#2] = '1' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'1'
    sta SCREEN,x
    // main::@4
    // SCREEN[i] |= 0x80
    // [9] main::SCREEN[main::i#2] = main::SCREEN[main::i#2] | $80 -- pbuc1_derefidx_vbuxx=pbuc1_derefidx_vbuxx_bor_vbuc2 
    // Invert the screen character
    lda #$80
    ora SCREEN,x
    sta SCREEN,x
    jmp __b5
}
  // File Data

