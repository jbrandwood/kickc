Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 
Inlined call call sei 
Inlined call main::$2 = call toD018 MAIN_SCREEN0 MAIN_CHARSET 
Inlined call main::$48 = call toD018 MAIN_SCREEN1 MAIN_CHARSET 
Inlined call main::$47 = call toD018 MAIN_SCREEN0 MAIN_CHARSET 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from main::@33
  memset::c#4 = phi( main::@33/memset::c#0 )
  memset::str#3 = phi( main::@33/memset::str#0 )
  memset::num#1 = phi( main::@33/memset::num#0 )
  memset::$0 = memset::num#1 > 0
  memset::$1 = ! memset::$0
  if(memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  memset::str#1 = phi( memset/memset::str#3, memset::@3/memset::str#4 )
  memset::return#0 = memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  memset::c#3 = phi( memset/memset::c#4 )
  memset::num#2 = phi( memset/memset::num#1 )
  memset::str#2 = phi( memset/memset::str#3 )
  memset::$4 = (byte*)memset::str#2
  memset::$2 = memset::$4 + memset::num#2
  memset::end#0 = memset::$2
  memset::dst#0 = ((byte*)) memset::str#2
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  memset::c#2 = phi( memset::@2/memset::c#3, memset::@4/memset::c#1 )
  memset::str#4 = phi( memset::@2/memset::str#2, memset::@4/memset::str#5 )
  memset::end#1 = phi( memset::@2/memset::end#0, memset::@4/memset::end#2 )
  memset::dst#2 = phi( memset::@2/memset::dst#0, memset::@4/memset::dst#1 )
  memset::$3 = memset::dst#2 != memset::end#1
  if(memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  memset::str#5 = phi( memset::@3/memset::str#4 )
  memset::end#2 = phi( memset::@3/memset::end#1 )
  memset::dst#3 = phi( memset::@3/memset::dst#2 )
  memset::c#1 = phi( memset::@3/memset::c#2 )
  *memset::dst#3 = memset::c#1
  memset::dst#1 = ++ memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  memset::return#3 = phi( memset::@1/memset::return#0 )
  memset::return#1 = memset::return#3
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  screen_buffer#60 = phi( __start::@1/screen_buffer#18 )
  y_pos_coarse#51 = phi( __start::@1/y_pos_coarse#23 )
  y_pos_fine#50 = phi( __start::@1/y_pos_fine#18 )
  x_pos_coarse#55 = phi( __start::@1/x_pos_coarse#27 )
  x_pos_fine#50 = phi( __start::@1/x_pos_fine#18 )
  y_pos#31 = phi( __start::@1/y_pos#16 )
  x_pos#31 = phi( __start::@1/x_pos#16 )
  y_sin_idx#37 = phi( __start::@1/y_sin_idx#22 )
  x_sin_idx#37 = phi( __start::@1/x_sin_idx#22 )
  to:main::sei1
main::sei1: scope:[main]  from main
  screen_buffer#59 = phi( main/screen_buffer#60 )
  y_pos_coarse#47 = phi( main/y_pos_coarse#51 )
  y_pos_fine#42 = phi( main/y_pos_fine#50 )
  x_pos_coarse#51 = phi( main/x_pos_coarse#55 )
  x_pos_fine#42 = phi( main/x_pos_fine#50 )
  y_pos#28 = phi( main/y_pos#31 )
  x_pos#28 = phi( main/x_pos#31 )
  y_sin_idx#34 = phi( main/y_sin_idx#37 )
  x_sin_idx#34 = phi( main/x_sin_idx#37 )
  asm { sei  }
  to:main::@33
main::@33: scope:[main]  from main::sei1
  screen_buffer#58 = phi( main::sei1/screen_buffer#59 )
  y_pos_coarse#41 = phi( main::sei1/y_pos_coarse#47 )
  y_pos_fine#35 = phi( main::sei1/y_pos_fine#42 )
  x_pos_coarse#45 = phi( main::sei1/x_pos_coarse#51 )
  x_pos_fine#35 = phi( main::sei1/x_pos_fine#42 )
  y_pos#25 = phi( main::sei1/y_pos#28 )
  x_pos#25 = phi( main::sei1/x_pos#28 )
  y_sin_idx#31 = phi( main::sei1/y_sin_idx#34 )
  x_sin_idx#31 = phi( main::sei1/x_sin_idx#34 )
  memset::str#0 = (void*)MAIN_SCREEN0
  memset::c#0 = ' '
  memset::num#0 = $3e8
  call memset 
  memset::return#2 = memset::return#1
  to:main::@37
main::@37: scope:[main]  from main::@33
  screen_buffer#55 = phi( main::@33/screen_buffer#58 )
  y_pos_coarse#34 = phi( main::@33/y_pos_coarse#41 )
  y_pos_fine#27 = phi( main::@33/y_pos_fine#35 )
  x_pos_coarse#38 = phi( main::@33/x_pos_coarse#45 )
  x_pos_fine#27 = phi( main::@33/x_pos_fine#35 )
  y_pos#22 = phi( main::@33/y_pos#25 )
  x_pos#22 = phi( main::@33/x_pos#25 )
  y_sin_idx#28 = phi( main::@33/y_sin_idx#31 )
  x_sin_idx#28 = phi( main::@33/x_sin_idx#31 )
  main::toD0181_screen#0 = MAIN_SCREEN0
  main::toD0181_gfx#0 = MAIN_CHARSET
  to:main::toD0181
main::toD0181: scope:[main]  from main::@37
  screen_buffer#52 = phi( main::@37/screen_buffer#55 )
  y_pos_coarse#29 = phi( main::@37/y_pos_coarse#34 )
  y_pos_fine#22 = phi( main::@37/y_pos_fine#27 )
  x_pos_coarse#33 = phi( main::@37/x_pos_coarse#38 )
  x_pos_fine#22 = phi( main::@37/x_pos_fine#27 )
  y_pos#19 = phi( main::@37/y_pos#22 )
  x_pos#19 = phi( main::@37/x_pos#22 )
  y_sin_idx#25 = phi( main::@37/y_sin_idx#28 )
  x_sin_idx#25 = phi( main::@37/x_sin_idx#28 )
  main::toD0181_gfx#1 = phi( main::@37/main::toD0181_gfx#0 )
  main::toD0181_screen#1 = phi( main::@37/main::toD0181_screen#0 )
  main::toD0181_$7 = (word)main::toD0181_screen#1
  main::toD0181_$0 = main::toD0181_$7 & $3fff
  main::toD0181_$1 = main::toD0181_$0 * 4
  main::toD0181_$2 = > main::toD0181_$1
  main::toD0181_$3 = > (word)main::toD0181_gfx#1
  main::toD0181_$4 = main::toD0181_$3 / 4
  main::toD0181_$5 = main::toD0181_$4 & $f
  main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
  main::toD0181_return#0 = main::toD0181_$6
  to:main::toD0181_@return
main::toD0181_@return: scope:[main]  from main::toD0181
  screen_buffer#49 = phi( main::toD0181/screen_buffer#52 )
  y_pos_coarse#24 = phi( main::toD0181/y_pos_coarse#29 )
  y_pos_fine#19 = phi( main::toD0181/y_pos_fine#22 )
  x_pos_coarse#28 = phi( main::toD0181/x_pos_coarse#33 )
  x_pos_fine#19 = phi( main::toD0181/x_pos_fine#22 )
  y_pos#17 = phi( main::toD0181/y_pos#19 )
  x_pos#17 = phi( main::toD0181/x_pos#19 )
  y_sin_idx#23 = phi( main::toD0181/y_sin_idx#25 )
  x_sin_idx#23 = phi( main::toD0181/x_sin_idx#25 )
  main::toD0181_return#2 = phi( main::toD0181/main::toD0181_return#0 )
  main::toD0181_return#1 = main::toD0181_return#2
  to:main::@34
main::@34: scope:[main]  from main::toD0181_@return
  screen_buffer#45 = phi( main::toD0181_@return/screen_buffer#49 )
  y_pos_coarse#19 = phi( main::toD0181_@return/y_pos_coarse#24 )
  y_pos_fine#15 = phi( main::toD0181_@return/y_pos_fine#19 )
  x_pos_coarse#20 = phi( main::toD0181_@return/x_pos_coarse#28 )
  x_pos_fine#15 = phi( main::toD0181_@return/x_pos_fine#19 )
  y_pos#14 = phi( main::toD0181_@return/y_pos#17 )
  x_pos#14 = phi( main::toD0181_@return/x_pos#17 )
  y_sin_idx#18 = phi( main::toD0181_@return/y_sin_idx#23 )
  x_sin_idx#18 = phi( main::toD0181_@return/x_sin_idx#23 )
  main::toD0181_return#3 = phi( main::toD0181_@return/main::toD0181_return#1 )
  main::$2 = main::toD0181_return#3
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = main::$2
  call next_position 
  to:main::@38
main::@38: scope:[main]  from main::@34
  screen_buffer#41 = phi( main::@34/screen_buffer#45 )
  y_pos_coarse#8 = phi( main::@34/y_pos_coarse#4 )
  y_pos_fine#8 = phi( main::@34/y_pos_fine#4 )
  x_pos_coarse#8 = phi( main::@34/x_pos_coarse#4 )
  x_pos_fine#8 = phi( main::@34/x_pos_fine#4 )
  y_pos#8 = phi( main::@34/y_pos#4 )
  x_pos#8 = phi( main::@34/x_pos#4 )
  y_sin_idx#9 = phi( main::@34/y_sin_idx#5 )
  x_sin_idx#9 = phi( main::@34/x_sin_idx#5 )
  x_sin_idx#0 = x_sin_idx#9
  y_sin_idx#0 = y_sin_idx#9
  x_pos#0 = x_pos#8
  y_pos#0 = y_pos#8
  x_pos_fine#0 = x_pos_fine#8
  x_pos_coarse#0 = x_pos_coarse#8
  y_pos_fine#0 = y_pos_fine#8
  y_pos_coarse#0 = y_pos_coarse#8
  to:main::@1
main::@1: scope:[main]  from main::@29 main::@38
  screen_buffer#33 = phi( main::@29/screen_buffer#40, main::@38/screen_buffer#41 )
  y_pos_fine#16 = phi( main::@29/y_pos_fine#20, main::@38/y_pos_fine#0 )
  x_pos_fine#16 = phi( main::@29/x_pos_fine#20, main::@38/x_pos_fine#0 )
  y_pos#15 = phi( main::@29/y_pos#18, main::@38/y_pos#0 )
  x_pos#15 = phi( main::@29/x_pos#18, main::@38/x_pos#0 )
  y_sin_idx#19 = phi( main::@29/y_sin_idx#24, main::@38/y_sin_idx#0 )
  x_sin_idx#19 = phi( main::@29/x_sin_idx#24, main::@38/x_sin_idx#0 )
  y_pos_coarse#9 = phi( main::@29/y_pos_coarse#20, main::@38/y_pos_coarse#0 )
  x_pos_coarse#9 = phi( main::@29/x_pos_coarse#21, main::@38/x_pos_coarse#0 )
  main::x_pos_coarse_old#0 = x_pos_coarse#9
  main::y_pos_coarse_old#0 = y_pos_coarse#9
  call next_position 
  to:main::@39
main::@39: scope:[main]  from main::@1
  screen_buffer#27 = phi( main::@1/screen_buffer#33 )
  main::x_pos_coarse_old#5 = phi( main::@1/main::x_pos_coarse_old#0 )
  main::y_pos_coarse_old#1 = phi( main::@1/main::y_pos_coarse_old#0 )
  y_pos_coarse#10 = phi( main::@1/y_pos_coarse#4 )
  y_pos_fine#9 = phi( main::@1/y_pos_fine#4 )
  x_pos_coarse#10 = phi( main::@1/x_pos_coarse#4 )
  x_pos_fine#9 = phi( main::@1/x_pos_fine#4 )
  y_pos#9 = phi( main::@1/y_pos#4 )
  x_pos#9 = phi( main::@1/x_pos#4 )
  y_sin_idx#10 = phi( main::@1/y_sin_idx#5 )
  x_sin_idx#10 = phi( main::@1/x_sin_idx#5 )
  x_sin_idx#1 = x_sin_idx#10
  y_sin_idx#1 = y_sin_idx#10
  x_pos#1 = x_pos#9
  y_pos#1 = y_pos#9
  x_pos_fine#1 = x_pos_fine#9
  x_pos_coarse#1 = x_pos_coarse#10
  y_pos_fine#1 = y_pos_fine#9
  y_pos_coarse#1 = y_pos_coarse#10
  main::$5 = main::y_pos_coarse_old#1 - y_pos_coarse#1
  main::y_movement#0 = (signed byte)main::$5
  main::movement#0 = 0
  main::$6 = main::y_movement#0 == 1
  if(main::$6) goto main::@2
  to:main::@30
main::@2: scope:[main]  from main::@39
  y_pos#37 = phi( main::@39/y_pos#1 )
  x_pos#37 = phi( main::@39/x_pos#1 )
  y_sin_idx#43 = phi( main::@39/y_sin_idx#1 )
  x_sin_idx#43 = phi( main::@39/x_sin_idx#1 )
  y_pos_coarse#56 = phi( main::@39/y_pos_coarse#1 )
  main::y_movement#12 = phi( main::@39/main::y_movement#0 )
  x_pos_fine#28 = phi( main::@39/x_pos_fine#1 )
  y_pos_fine#28 = phi( main::@39/y_pos_fine#1 )
  screen_buffer#19 = phi( main::@39/screen_buffer#27 )
  x_pos_coarse#22 = phi( main::@39/x_pos_coarse#1 )
  main::x_pos_coarse_old#2 = phi( main::@39/main::x_pos_coarse_old#5 )
  main::movement#1 = -$28
  to:main::@3
main::@30: scope:[main]  from main::@39
  y_pos#38 = phi( main::@39/y_pos#1 )
  x_pos#38 = phi( main::@39/x_pos#1 )
  y_sin_idx#44 = phi( main::@39/y_sin_idx#1 )
  x_sin_idx#44 = phi( main::@39/x_sin_idx#1 )
  y_pos_coarse#57 = phi( main::@39/y_pos_coarse#1 )
  x_pos_fine#29 = phi( main::@39/x_pos_fine#1 )
  y_pos_fine#29 = phi( main::@39/y_pos_fine#1 )
  screen_buffer#20 = phi( main::@39/screen_buffer#27 )
  main::movement#6 = phi( main::@39/main::movement#0 )
  x_pos_coarse#23 = phi( main::@39/x_pos_coarse#1 )
  main::x_pos_coarse_old#3 = phi( main::@39/main::x_pos_coarse_old#5 )
  main::y_movement#1 = phi( main::@39/main::y_movement#0 )
  main::$7 = main::y_movement#1 == -1
  main::$8 = ! main::$7
  if(main::$8) goto main::@3
  to:main::@31
main::@31: scope:[main]  from main::@30
  y_pos#39 = phi( main::@30/y_pos#38 )
  x_pos#39 = phi( main::@30/x_pos#38 )
  y_sin_idx#45 = phi( main::@30/y_sin_idx#44 )
  x_sin_idx#45 = phi( main::@30/x_sin_idx#44 )
  y_pos_coarse#58 = phi( main::@30/y_pos_coarse#57 )
  main::y_movement#13 = phi( main::@30/main::y_movement#1 )
  x_pos_fine#30 = phi( main::@30/x_pos_fine#29 )
  y_pos_fine#30 = phi( main::@30/y_pos_fine#29 )
  screen_buffer#21 = phi( main::@30/screen_buffer#20 )
  x_pos_coarse#24 = phi( main::@30/x_pos_coarse#23 )
  main::x_pos_coarse_old#4 = phi( main::@30/main::x_pos_coarse_old#3 )
  main::movement#2 = $28
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@30 main::@31
  y_pos#36 = phi( main::@2/y_pos#37, main::@30/y_pos#38, main::@31/y_pos#39 )
  x_pos#36 = phi( main::@2/x_pos#37, main::@30/x_pos#38, main::@31/x_pos#39 )
  y_sin_idx#42 = phi( main::@2/y_sin_idx#43, main::@30/y_sin_idx#44, main::@31/y_sin_idx#45 )
  x_sin_idx#42 = phi( main::@2/x_sin_idx#43, main::@30/x_sin_idx#44, main::@31/x_sin_idx#45 )
  y_pos_coarse#54 = phi( main::@2/y_pos_coarse#56, main::@30/y_pos_coarse#57, main::@31/y_pos_coarse#58 )
  main::y_movement#11 = phi( main::@2/main::y_movement#12, main::@30/main::y_movement#1, main::@31/main::y_movement#13 )
  x_pos_fine#24 = phi( main::@2/x_pos_fine#28, main::@30/x_pos_fine#29, main::@31/x_pos_fine#30 )
  y_pos_fine#24 = phi( main::@2/y_pos_fine#28, main::@30/y_pos_fine#29, main::@31/y_pos_fine#30 )
  screen_buffer#12 = phi( main::@2/screen_buffer#19, main::@30/screen_buffer#20, main::@31/screen_buffer#21 )
  main::movement#4 = phi( main::@2/main::movement#1, main::@30/main::movement#6, main::@31/main::movement#2 )
  x_pos_coarse#11 = phi( main::@2/x_pos_coarse#22, main::@30/x_pos_coarse#23, main::@31/x_pos_coarse#24 )
  main::x_pos_coarse_old#1 = phi( main::@2/main::x_pos_coarse_old#2, main::@30/main::x_pos_coarse_old#3, main::@31/main::x_pos_coarse_old#4 )
  main::$9 = main::x_pos_coarse_old#1 - x_pos_coarse#11
  main::x_movement#0 = (signed byte)main::$9
  main::movement#3 = main::movement#4 - main::x_movement#0
  main::$52 = 0 != main::movement#3
  main::$10 = ! main::$52
  if(main::$10) goto main::@24
  to:main::@32
main::@32: scope:[main]  from main::@3
  y_pos#64 = phi( main::@3/y_pos#36 )
  x_pos#64 = phi( main::@3/x_pos#36 )
  y_sin_idx#70 = phi( main::@3/y_sin_idx#42 )
  x_sin_idx#70 = phi( main::@3/x_sin_idx#42 )
  x_pos_fine#64 = phi( main::@3/x_pos_fine#24 )
  y_pos_fine#64 = phi( main::@3/y_pos_fine#24 )
  y_pos_coarse#52 = phi( main::@3/y_pos_coarse#54 )
  x_pos_coarse#56 = phi( main::@3/x_pos_coarse#11 )
  main::x_movement#18 = phi( main::@3/main::x_movement#0 )
  main::y_movement#10 = phi( main::@3/main::y_movement#11 )
  main::movement#9 = phi( main::@3/main::movement#3 )
  screen_buffer#5 = phi( main::@3/screen_buffer#12 )
  main::$49 = 0 != screen_buffer#5
  if(main::$49) goto main::@4
  to:main::@5
main::@4: scope:[main]  from main::@32
  y_pos#61 = phi( main::@32/y_pos#64 )
  x_pos#61 = phi( main::@32/x_pos#64 )
  y_sin_idx#67 = phi( main::@32/y_sin_idx#70 )
  x_sin_idx#67 = phi( main::@32/x_sin_idx#70 )
  x_pos_fine#61 = phi( main::@32/x_pos_fine#64 )
  y_pos_fine#61 = phi( main::@32/y_pos_fine#64 )
  y_pos_coarse#48 = phi( main::@32/y_pos_coarse#52 )
  x_pos_coarse#52 = phi( main::@32/x_pos_coarse#56 )
  main::x_movement#15 = phi( main::@32/main::x_movement#18 )
  main::y_movement#8 = phi( main::@32/main::y_movement#10 )
  screen_buffer#13 = phi( main::@32/screen_buffer#5 )
  main::movement#7 = phi( main::@32/main::movement#9 )
  main::$12 = MAIN_SCREEN1
  to:main::@6
main::@5: scope:[main]  from main::@32
  y_pos#62 = phi( main::@32/y_pos#64 )
  x_pos#62 = phi( main::@32/x_pos#64 )
  y_sin_idx#68 = phi( main::@32/y_sin_idx#70 )
  x_sin_idx#68 = phi( main::@32/x_sin_idx#70 )
  x_pos_fine#62 = phi( main::@32/x_pos_fine#64 )
  y_pos_fine#62 = phi( main::@32/y_pos_fine#64 )
  y_pos_coarse#49 = phi( main::@32/y_pos_coarse#52 )
  x_pos_coarse#53 = phi( main::@32/x_pos_coarse#56 )
  main::x_movement#16 = phi( main::@32/main::x_movement#18 )
  main::y_movement#9 = phi( main::@32/main::y_movement#10 )
  screen_buffer#14 = phi( main::@32/screen_buffer#5 )
  main::movement#8 = phi( main::@32/main::movement#9 )
  main::$11 = MAIN_SCREEN0
  to:main::@6
main::@6: scope:[main]  from main::@4 main::@5
  y_pos#57 = phi( main::@4/y_pos#61, main::@5/y_pos#62 )
  x_pos#57 = phi( main::@4/x_pos#61, main::@5/x_pos#62 )
  y_sin_idx#63 = phi( main::@4/y_sin_idx#67, main::@5/y_sin_idx#68 )
  x_sin_idx#63 = phi( main::@4/x_sin_idx#67, main::@5/x_sin_idx#68 )
  x_pos_fine#57 = phi( main::@4/x_pos_fine#61, main::@5/x_pos_fine#62 )
  y_pos_fine#57 = phi( main::@4/y_pos_fine#61, main::@5/y_pos_fine#62 )
  y_pos_coarse#42 = phi( main::@4/y_pos_coarse#48, main::@5/y_pos_coarse#49 )
  x_pos_coarse#46 = phi( main::@4/x_pos_coarse#52, main::@5/x_pos_coarse#53 )
  main::x_movement#12 = phi( main::@4/main::x_movement#15, main::@5/main::x_movement#16 )
  main::y_movement#7 = phi( main::@4/main::y_movement#8, main::@5/main::y_movement#9 )
  screen_buffer#6 = phi( main::@4/screen_buffer#13, main::@5/screen_buffer#14 )
  main::movement#5 = phi( main::@4/main::movement#7, main::@5/main::movement#8 )
  main::$13 = phi( main::@4/main::$12, main::@5/main::$11 )
  main::$14 = main::$13 + main::movement#5
  main::screen_active#0 = main::$14
  main::$50 = 0 != screen_buffer#6
  if(main::$50) goto main::@7
  to:main::@8
main::@7: scope:[main]  from main::@6
  y_pos#51 = phi( main::@6/y_pos#57 )
  x_pos#51 = phi( main::@6/x_pos#57 )
  y_sin_idx#57 = phi( main::@6/y_sin_idx#63 )
  x_sin_idx#57 = phi( main::@6/x_sin_idx#63 )
  x_pos_fine#51 = phi( main::@6/x_pos_fine#57 )
  y_pos_fine#51 = phi( main::@6/y_pos_fine#57 )
  y_pos_coarse#35 = phi( main::@6/y_pos_coarse#42 )
  x_pos_coarse#39 = phi( main::@6/x_pos_coarse#46 )
  screen_buffer#34 = phi( main::@6/screen_buffer#6 )
  main::x_movement#8 = phi( main::@6/main::x_movement#12 )
  main::y_movement#5 = phi( main::@6/main::y_movement#7 )
  main::screen_active#2 = phi( main::@6/main::screen_active#0 )
  main::$16 = MAIN_SCREEN0
  to:main::@9
main::@8: scope:[main]  from main::@6
  y_pos#52 = phi( main::@6/y_pos#57 )
  x_pos#52 = phi( main::@6/x_pos#57 )
  y_sin_idx#58 = phi( main::@6/y_sin_idx#63 )
  x_sin_idx#58 = phi( main::@6/x_sin_idx#63 )
  x_pos_fine#52 = phi( main::@6/x_pos_fine#57 )
  y_pos_fine#52 = phi( main::@6/y_pos_fine#57 )
  y_pos_coarse#36 = phi( main::@6/y_pos_coarse#42 )
  x_pos_coarse#40 = phi( main::@6/x_pos_coarse#46 )
  screen_buffer#35 = phi( main::@6/screen_buffer#6 )
  main::x_movement#9 = phi( main::@6/main::x_movement#12 )
  main::y_movement#6 = phi( main::@6/main::y_movement#7 )
  main::screen_active#3 = phi( main::@6/main::screen_active#0 )
  main::$15 = MAIN_SCREEN1
  to:main::@9
main::@9: scope:[main]  from main::@7 main::@8
  y_pos#46 = phi( main::@7/y_pos#51, main::@8/y_pos#52 )
  x_pos#46 = phi( main::@7/x_pos#51, main::@8/x_pos#52 )
  y_sin_idx#52 = phi( main::@7/y_sin_idx#57, main::@8/y_sin_idx#58 )
  x_sin_idx#52 = phi( main::@7/x_sin_idx#57, main::@8/x_sin_idx#58 )
  x_pos_fine#43 = phi( main::@7/x_pos_fine#51, main::@8/x_pos_fine#52 )
  y_pos_fine#43 = phi( main::@7/y_pos_fine#51, main::@8/y_pos_fine#52 )
  y_pos_coarse#30 = phi( main::@7/y_pos_coarse#35, main::@8/y_pos_coarse#36 )
  x_pos_coarse#34 = phi( main::@7/x_pos_coarse#39, main::@8/x_pos_coarse#40 )
  screen_buffer#28 = phi( main::@7/screen_buffer#34, main::@8/screen_buffer#35 )
  main::x_movement#5 = phi( main::@7/main::x_movement#8, main::@8/main::x_movement#9 )
  main::y_movement#4 = phi( main::@7/main::y_movement#5, main::@8/main::y_movement#6 )
  main::screen_active#1 = phi( main::@7/main::screen_active#2, main::@8/main::screen_active#3 )
  main::$17 = phi( main::@7/main::$16, main::@8/main::$15 )
  main::screen_hidden#0 = main::$17
  screencpy::dst#0 = main::screen_hidden#0
  screencpy::src#0 = main::screen_active#1
  call screencpy 
  to:main::@40
main::@40: scope:[main]  from main::@9
  y_pos#43 = phi( main::@9/y_pos#46 )
  x_pos#43 = phi( main::@9/x_pos#46 )
  y_sin_idx#49 = phi( main::@9/y_sin_idx#52 )
  x_sin_idx#49 = phi( main::@9/x_sin_idx#52 )
  x_pos_fine#37 = phi( main::@9/x_pos_fine#43 )
  y_pos_fine#37 = phi( main::@9/y_pos_fine#43 )
  main::screen_hidden#11 = phi( main::@9/main::screen_hidden#0 )
  y_pos_coarse#25 = phi( main::@9/y_pos_coarse#30 )
  x_pos_coarse#29 = phi( main::@9/x_pos_coarse#34 )
  screen_buffer#23 = phi( main::@9/screen_buffer#28 )
  main::x_movement#4 = phi( main::@9/main::x_movement#5 )
  main::y_movement#2 = phi( main::@9/main::y_movement#4 )
  main::petscii#0 = (byte*) 0
  main::scrn#0 = (byte*) 0
  main::$53 = 0 != main::y_movement#2
  main::$19 = ! main::$53
  if(main::$19) goto main::@10
  to:main::@20
main::@10: scope:[main]  from main::@13 main::@40
  y_pos#40 = phi( main::@13/y_pos#42, main::@40/y_pos#43 )
  x_pos#40 = phi( main::@13/x_pos#42, main::@40/x_pos#43 )
  y_sin_idx#46 = phi( main::@13/y_sin_idx#48, main::@40/y_sin_idx#49 )
  x_sin_idx#46 = phi( main::@13/x_sin_idx#48, main::@40/x_sin_idx#49 )
  x_pos_fine#31 = phi( main::@13/x_pos_fine#36, main::@40/x_pos_fine#37 )
  y_pos_fine#31 = phi( main::@13/y_pos_fine#36, main::@40/y_pos_fine#37 )
  main::screen_hidden#12 = phi( main::@13/main::screen_hidden#13, main::@40/main::screen_hidden#11 )
  y_pos_coarse#26 = phi( main::@13/y_pos_coarse#31, main::@40/y_pos_coarse#25 )
  x_pos_coarse#30 = phi( main::@13/x_pos_coarse#35, main::@40/x_pos_coarse#29 )
  screen_buffer#15 = phi( main::@13/screen_buffer#22, main::@40/screen_buffer#23 )
  main::x_movement#1 = phi( main::@13/main::x_movement#3, main::@40/main::x_movement#4 )
  main::$54 = 0 != main::x_movement#1
  main::$29 = ! main::$54
  if(main::$29) goto main::@15
  to:main::@22
main::@20: scope:[main]  from main::@40
  y_pos#63 = phi( main::@40/y_pos#43 )
  x_pos#63 = phi( main::@40/x_pos#43 )
  y_sin_idx#69 = phi( main::@40/y_sin_idx#49 )
  x_sin_idx#69 = phi( main::@40/x_sin_idx#49 )
  x_pos_fine#63 = phi( main::@40/x_pos_fine#37 )
  y_pos_fine#63 = phi( main::@40/y_pos_fine#37 )
  screen_buffer#46 = phi( main::@40/screen_buffer#23 )
  main::x_movement#17 = phi( main::@40/main::x_movement#4 )
  main::screen_hidden#9 = phi( main::@40/main::screen_hidden#11 )
  y_pos_coarse#21 = phi( main::@40/y_pos_coarse#25 )
  x_pos_coarse#25 = phi( main::@40/x_pos_coarse#29 )
  main::y_movement#3 = phi( main::@40/main::y_movement#2 )
  main::$20 = main::y_movement#3 == -1
  if(main::$20) goto main::@11
  to:main::@21
main::@11: scope:[main]  from main::@20
  y_pos#58 = phi( main::@20/y_pos#63 )
  x_pos#58 = phi( main::@20/x_pos#63 )
  y_sin_idx#64 = phi( main::@20/y_sin_idx#69 )
  x_sin_idx#64 = phi( main::@20/x_sin_idx#69 )
  x_pos_fine#58 = phi( main::@20/x_pos_fine#63 )
  y_pos_fine#58 = phi( main::@20/y_pos_fine#63 )
  screen_buffer#42 = phi( main::@20/screen_buffer#46 )
  main::x_movement#13 = phi( main::@20/main::x_movement#17 )
  main::screen_hidden#5 = phi( main::@20/main::screen_hidden#9 )
  y_pos_coarse#11 = phi( main::@20/y_pos_coarse#21 )
  x_pos_coarse#12 = phi( main::@20/x_pos_coarse#25 )
  main::$24 = x_pos_coarse#12 - $14
  main::$25 = y_pos_coarse#11 + $c
  petscii_ptr::row_x#0 = main::$24
  petscii_ptr::row_y#0 = main::$25
  call petscii_ptr 
  petscii_ptr::return#0 = petscii_ptr::return#5
  to:main::@41
main::@41: scope:[main]  from main::@11
  y_pos#53 = phi( main::@11/y_pos#58 )
  x_pos#53 = phi( main::@11/x_pos#58 )
  y_sin_idx#59 = phi( main::@11/y_sin_idx#64 )
  x_sin_idx#59 = phi( main::@11/x_sin_idx#64 )
  x_pos_fine#53 = phi( main::@11/x_pos_fine#58 )
  y_pos_fine#53 = phi( main::@11/y_pos_fine#58 )
  y_pos_coarse#43 = phi( main::@11/y_pos_coarse#11 )
  x_pos_coarse#47 = phi( main::@11/x_pos_coarse#12 )
  screen_buffer#36 = phi( main::@11/screen_buffer#42 )
  main::x_movement#10 = phi( main::@11/main::x_movement#13 )
  main::screen_hidden#1 = phi( main::@11/main::screen_hidden#5 )
  petscii_ptr::return#6 = phi( main::@11/petscii_ptr::return#0 )
  main::$26 = petscii_ptr::return#6
  main::petscii#1 = main::$26
  main::$27 = main::screen_hidden#1 + $18*$28
  main::scrn#1 = main::$27
  to:main::@12
main::@21: scope:[main]  from main::@20
  y_pos#59 = phi( main::@20/y_pos#63 )
  x_pos#59 = phi( main::@20/x_pos#63 )
  y_sin_idx#65 = phi( main::@20/y_sin_idx#69 )
  x_sin_idx#65 = phi( main::@20/x_sin_idx#69 )
  x_pos_fine#59 = phi( main::@20/x_pos_fine#63 )
  y_pos_fine#59 = phi( main::@20/y_pos_fine#63 )
  screen_buffer#43 = phi( main::@20/screen_buffer#46 )
  main::x_movement#14 = phi( main::@20/main::x_movement#17 )
  main::screen_hidden#6 = phi( main::@20/main::screen_hidden#9 )
  y_pos_coarse#12 = phi( main::@20/y_pos_coarse#21 )
  x_pos_coarse#13 = phi( main::@20/x_pos_coarse#25 )
  main::$21 = x_pos_coarse#13 - $14
  main::$22 = y_pos_coarse#12 - $c
  petscii_ptr::row_x#1 = main::$21
  petscii_ptr::row_y#1 = main::$22
  call petscii_ptr 
  petscii_ptr::return#1 = petscii_ptr::return#5
  to:main::@42
main::@42: scope:[main]  from main::@21
  y_pos#54 = phi( main::@21/y_pos#59 )
  x_pos#54 = phi( main::@21/x_pos#59 )
  y_sin_idx#60 = phi( main::@21/y_sin_idx#65 )
  x_sin_idx#60 = phi( main::@21/x_sin_idx#65 )
  x_pos_fine#54 = phi( main::@21/x_pos_fine#59 )
  y_pos_fine#54 = phi( main::@21/y_pos_fine#59 )
  y_pos_coarse#44 = phi( main::@21/y_pos_coarse#12 )
  x_pos_coarse#48 = phi( main::@21/x_pos_coarse#13 )
  screen_buffer#37 = phi( main::@21/screen_buffer#43 )
  main::x_movement#11 = phi( main::@21/main::x_movement#14 )
  main::screen_hidden#2 = phi( main::@21/main::screen_hidden#6 )
  petscii_ptr::return#7 = phi( main::@21/petscii_ptr::return#1 )
  main::$23 = petscii_ptr::return#7
  main::petscii#2 = main::$23
  main::scrn#2 = main::screen_hidden#2
  to:main::@12
main::@12: scope:[main]  from main::@41 main::@42
  y_pos#47 = phi( main::@41/y_pos#53, main::@42/y_pos#54 )
  x_pos#47 = phi( main::@41/x_pos#53, main::@42/x_pos#54 )
  y_sin_idx#53 = phi( main::@41/y_sin_idx#59, main::@42/y_sin_idx#60 )
  x_sin_idx#53 = phi( main::@41/x_sin_idx#59, main::@42/x_sin_idx#60 )
  x_pos_fine#44 = phi( main::@41/x_pos_fine#53, main::@42/x_pos_fine#54 )
  y_pos_fine#44 = phi( main::@41/y_pos_fine#53, main::@42/y_pos_fine#54 )
  main::screen_hidden#14 = phi( main::@41/main::screen_hidden#1, main::@42/main::screen_hidden#2 )
  y_pos_coarse#37 = phi( main::@41/y_pos_coarse#43, main::@42/y_pos_coarse#44 )
  x_pos_coarse#41 = phi( main::@41/x_pos_coarse#47, main::@42/x_pos_coarse#48 )
  screen_buffer#29 = phi( main::@41/screen_buffer#36, main::@42/screen_buffer#37 )
  main::scrn#10 = phi( main::@41/main::scrn#1, main::@42/main::scrn#2 )
  main::petscii#10 = phi( main::@41/main::petscii#1, main::@42/main::petscii#2 )
  main::x_movement#6 = phi( main::@41/main::x_movement#10, main::@42/main::x_movement#11 )
  main::i#0 = 0
  to:main::@13
main::@13: scope:[main]  from main::@12 main::@14
  y_pos#42 = phi( main::@12/y_pos#47, main::@14/y_pos#48 )
  x_pos#42 = phi( main::@12/x_pos#47, main::@14/x_pos#48 )
  y_sin_idx#48 = phi( main::@12/y_sin_idx#53, main::@14/y_sin_idx#54 )
  x_sin_idx#48 = phi( main::@12/x_sin_idx#53, main::@14/x_sin_idx#54 )
  x_pos_fine#36 = phi( main::@12/x_pos_fine#44, main::@14/x_pos_fine#45 )
  y_pos_fine#36 = phi( main::@12/y_pos_fine#44, main::@14/y_pos_fine#45 )
  main::screen_hidden#13 = phi( main::@12/main::screen_hidden#14, main::@14/main::screen_hidden#15 )
  y_pos_coarse#31 = phi( main::@12/y_pos_coarse#37, main::@14/y_pos_coarse#38 )
  x_pos_coarse#35 = phi( main::@12/x_pos_coarse#41, main::@14/x_pos_coarse#42 )
  screen_buffer#22 = phi( main::@12/screen_buffer#29, main::@14/screen_buffer#30 )
  main::scrn#8 = phi( main::@12/main::scrn#10, main::@14/main::scrn#6 )
  main::petscii#8 = phi( main::@12/main::petscii#10, main::@14/main::petscii#6 )
  main::x_movement#3 = phi( main::@12/main::x_movement#6, main::@14/main::x_movement#7 )
  main::i#2 = phi( main::@12/main::i#0, main::@14/main::i#1 )
  main::$28 = main::i#2 < $28
  if(main::$28) goto main::@14
  to:main::@10
main::@14: scope:[main]  from main::@13
  y_pos#48 = phi( main::@13/y_pos#42 )
  x_pos#48 = phi( main::@13/x_pos#42 )
  y_sin_idx#54 = phi( main::@13/y_sin_idx#48 )
  x_sin_idx#54 = phi( main::@13/x_sin_idx#48 )
  x_pos_fine#45 = phi( main::@13/x_pos_fine#36 )
  y_pos_fine#45 = phi( main::@13/y_pos_fine#36 )
  main::screen_hidden#15 = phi( main::@13/main::screen_hidden#13 )
  y_pos_coarse#38 = phi( main::@13/y_pos_coarse#31 )
  x_pos_coarse#42 = phi( main::@13/x_pos_coarse#35 )
  screen_buffer#30 = phi( main::@13/screen_buffer#22 )
  main::x_movement#7 = phi( main::@13/main::x_movement#3 )
  main::scrn#6 = phi( main::@13/main::scrn#8 )
  main::i#3 = phi( main::@13/main::i#2 )
  main::petscii#6 = phi( main::@13/main::petscii#8 )
  main::scrn#6[main::i#3] = main::petscii#6[main::i#3]
  main::i#1 = ++ main::i#3
  to:main::@13
main::@15: scope:[main]  from main::@10 main::@18
  y_pos#35 = phi( main::@10/y_pos#40, main::@18/y_pos#41 )
  x_pos#35 = phi( main::@10/x_pos#40, main::@18/x_pos#41 )
  y_sin_idx#41 = phi( main::@10/y_sin_idx#46, main::@18/y_sin_idx#47 )
  x_sin_idx#41 = phi( main::@10/x_sin_idx#46, main::@18/x_sin_idx#47 )
  y_pos_coarse#59 = phi( main::@10/y_pos_coarse#26, main::@18/y_pos_coarse#60 )
  x_pos_coarse#59 = phi( main::@10/x_pos_coarse#30, main::@18/x_pos_coarse#60 )
  x_pos_fine#23 = phi( main::@10/x_pos_fine#31, main::@18/x_pos_fine#32 )
  y_pos_fine#23 = phi( main::@10/y_pos_fine#31, main::@18/y_pos_fine#32 )
  screen_buffer#7 = phi( main::@10/screen_buffer#15, main::@18/screen_buffer#16 )
  screen_buffer#0 = screen_buffer#7 ^ 1
  to:main::@24
main::@22: scope:[main]  from main::@10
  y_pos#60 = phi( main::@10/y_pos#40 )
  x_pos#60 = phi( main::@10/x_pos#40 )
  y_sin_idx#66 = phi( main::@10/y_sin_idx#46 )
  x_sin_idx#66 = phi( main::@10/x_sin_idx#46 )
  x_pos_fine#60 = phi( main::@10/x_pos_fine#31 )
  y_pos_fine#60 = phi( main::@10/y_pos_fine#31 )
  screen_buffer#44 = phi( main::@10/screen_buffer#15 )
  main::screen_hidden#10 = phi( main::@10/main::screen_hidden#12 )
  y_pos_coarse#22 = phi( main::@10/y_pos_coarse#26 )
  x_pos_coarse#26 = phi( main::@10/x_pos_coarse#30 )
  main::x_movement#2 = phi( main::@10/main::x_movement#1 )
  main::$30 = main::x_movement#2 == -1
  if(main::$30) goto main::@16
  to:main::@23
main::@16: scope:[main]  from main::@22
  y_pos#55 = phi( main::@22/y_pos#60 )
  x_pos#55 = phi( main::@22/x_pos#60 )
  y_sin_idx#61 = phi( main::@22/y_sin_idx#66 )
  x_sin_idx#61 = phi( main::@22/x_sin_idx#66 )
  x_pos_fine#55 = phi( main::@22/x_pos_fine#60 )
  y_pos_fine#55 = phi( main::@22/y_pos_fine#60 )
  screen_buffer#38 = phi( main::@22/screen_buffer#44 )
  main::screen_hidden#7 = phi( main::@22/main::screen_hidden#10 )
  y_pos_coarse#13 = phi( main::@22/y_pos_coarse#22 )
  x_pos_coarse#14 = phi( main::@22/x_pos_coarse#26 )
  main::$34 = x_pos_coarse#14 + $13
  main::$35 = y_pos_coarse#13 - $c
  petscii_ptr::row_x#2 = main::$34
  petscii_ptr::row_y#2 = main::$35
  call petscii_ptr 
  petscii_ptr::return#2 = petscii_ptr::return#5
  to:main::@43
main::@43: scope:[main]  from main::@16
  y_pos#49 = phi( main::@16/y_pos#55 )
  x_pos#49 = phi( main::@16/x_pos#55 )
  y_sin_idx#55 = phi( main::@16/y_sin_idx#61 )
  x_sin_idx#55 = phi( main::@16/x_sin_idx#61 )
  y_pos_coarse#63 = phi( main::@16/y_pos_coarse#13 )
  x_pos_coarse#63 = phi( main::@16/x_pos_coarse#14 )
  x_pos_fine#46 = phi( main::@16/x_pos_fine#55 )
  y_pos_fine#46 = phi( main::@16/y_pos_fine#55 )
  screen_buffer#31 = phi( main::@16/screen_buffer#38 )
  main::screen_hidden#3 = phi( main::@16/main::screen_hidden#7 )
  petscii_ptr::return#8 = phi( main::@16/petscii_ptr::return#2 )
  main::$36 = petscii_ptr::return#8
  main::petscii#3 = main::$36
  main::$37 = main::screen_hidden#3 + $27
  main::scrn#3 = main::$37
  to:main::@17
main::@23: scope:[main]  from main::@22
  y_pos#56 = phi( main::@22/y_pos#60 )
  x_pos#56 = phi( main::@22/x_pos#60 )
  y_sin_idx#62 = phi( main::@22/y_sin_idx#66 )
  x_sin_idx#62 = phi( main::@22/x_sin_idx#66 )
  x_pos_fine#56 = phi( main::@22/x_pos_fine#60 )
  y_pos_fine#56 = phi( main::@22/y_pos_fine#60 )
  screen_buffer#39 = phi( main::@22/screen_buffer#44 )
  main::screen_hidden#8 = phi( main::@22/main::screen_hidden#10 )
  y_pos_coarse#14 = phi( main::@22/y_pos_coarse#22 )
  x_pos_coarse#15 = phi( main::@22/x_pos_coarse#26 )
  main::$31 = x_pos_coarse#15 - $14
  main::$32 = y_pos_coarse#14 - $c
  petscii_ptr::row_x#3 = main::$31
  petscii_ptr::row_y#3 = main::$32
  call petscii_ptr 
  petscii_ptr::return#3 = petscii_ptr::return#5
  to:main::@44
main::@44: scope:[main]  from main::@23
  y_pos#50 = phi( main::@23/y_pos#56 )
  x_pos#50 = phi( main::@23/x_pos#56 )
  y_sin_idx#56 = phi( main::@23/y_sin_idx#62 )
  x_sin_idx#56 = phi( main::@23/x_sin_idx#62 )
  y_pos_coarse#64 = phi( main::@23/y_pos_coarse#14 )
  x_pos_coarse#64 = phi( main::@23/x_pos_coarse#15 )
  x_pos_fine#47 = phi( main::@23/x_pos_fine#56 )
  y_pos_fine#47 = phi( main::@23/y_pos_fine#56 )
  screen_buffer#32 = phi( main::@23/screen_buffer#39 )
  main::screen_hidden#4 = phi( main::@23/main::screen_hidden#8 )
  petscii_ptr::return#9 = phi( main::@23/petscii_ptr::return#3 )
  main::$33 = petscii_ptr::return#9
  main::petscii#4 = main::$33
  main::scrn#4 = main::screen_hidden#4
  to:main::@17
main::@17: scope:[main]  from main::@43 main::@44
  y_pos#44 = phi( main::@43/y_pos#49, main::@44/y_pos#50 )
  x_pos#44 = phi( main::@43/x_pos#49, main::@44/x_pos#50 )
  y_sin_idx#50 = phi( main::@43/y_sin_idx#55, main::@44/y_sin_idx#56 )
  x_sin_idx#50 = phi( main::@43/x_sin_idx#55, main::@44/x_sin_idx#56 )
  y_pos_coarse#61 = phi( main::@43/y_pos_coarse#63, main::@44/y_pos_coarse#64 )
  x_pos_coarse#61 = phi( main::@43/x_pos_coarse#63, main::@44/x_pos_coarse#64 )
  x_pos_fine#38 = phi( main::@43/x_pos_fine#46, main::@44/x_pos_fine#47 )
  y_pos_fine#38 = phi( main::@43/y_pos_fine#46, main::@44/y_pos_fine#47 )
  main::scrn#11 = phi( main::@43/main::scrn#3, main::@44/main::scrn#4 )
  main::petscii#11 = phi( main::@43/main::petscii#3, main::@44/main::petscii#4 )
  screen_buffer#24 = phi( main::@43/screen_buffer#31, main::@44/screen_buffer#32 )
  main::i1#0 = 0
  to:main::@18
main::@18: scope:[main]  from main::@17 main::@19
  y_pos#41 = phi( main::@17/y_pos#44, main::@19/y_pos#45 )
  x_pos#41 = phi( main::@17/x_pos#44, main::@19/x_pos#45 )
  y_sin_idx#47 = phi( main::@17/y_sin_idx#50, main::@19/y_sin_idx#51 )
  x_sin_idx#47 = phi( main::@17/x_sin_idx#50, main::@19/x_sin_idx#51 )
  y_pos_coarse#60 = phi( main::@17/y_pos_coarse#61, main::@19/y_pos_coarse#62 )
  x_pos_coarse#60 = phi( main::@17/x_pos_coarse#61, main::@19/x_pos_coarse#62 )
  x_pos_fine#32 = phi( main::@17/x_pos_fine#38, main::@19/x_pos_fine#39 )
  y_pos_fine#32 = phi( main::@17/y_pos_fine#38, main::@19/y_pos_fine#39 )
  main::scrn#9 = phi( main::@17/main::scrn#11, main::@19/main::scrn#5 )
  main::petscii#9 = phi( main::@17/main::petscii#11, main::@19/main::petscii#5 )
  screen_buffer#16 = phi( main::@17/screen_buffer#24, main::@19/screen_buffer#25 )
  main::i1#2 = phi( main::@17/main::i1#0, main::@19/main::i1#1 )
  main::$38 = main::i1#2 < $19
  if(main::$38) goto main::@19
  to:main::@15
main::@19: scope:[main]  from main::@18
  y_pos#45 = phi( main::@18/y_pos#41 )
  x_pos#45 = phi( main::@18/x_pos#41 )
  y_sin_idx#51 = phi( main::@18/y_sin_idx#47 )
  x_sin_idx#51 = phi( main::@18/x_sin_idx#47 )
  y_pos_coarse#62 = phi( main::@18/y_pos_coarse#60 )
  x_pos_coarse#62 = phi( main::@18/x_pos_coarse#60 )
  x_pos_fine#39 = phi( main::@18/x_pos_fine#32 )
  y_pos_fine#39 = phi( main::@18/y_pos_fine#32 )
  screen_buffer#25 = phi( main::@18/screen_buffer#16 )
  main::i1#3 = phi( main::@18/main::i1#2 )
  main::scrn#7 = phi( main::@18/main::scrn#9 )
  main::petscii#7 = phi( main::@18/main::petscii#9 )
  *main::scrn#7 = *main::petscii#7
  main::scrn#5 = main::scrn#7 + $28
  main::petscii#5 = main::petscii#7 + $8c
  main::i1#1 = ++ main::i1#3
  to:main::@18
main::@24: scope:[main]  from main::@15 main::@24 main::@3
  y_pos#34 = phi( main::@15/y_pos#35, main::@24/y_pos#34, main::@3/y_pos#36 )
  x_pos#34 = phi( main::@15/x_pos#35, main::@24/x_pos#34, main::@3/x_pos#36 )
  y_sin_idx#40 = phi( main::@15/y_sin_idx#41, main::@24/y_sin_idx#40, main::@3/y_sin_idx#42 )
  x_sin_idx#40 = phi( main::@15/x_sin_idx#41, main::@24/x_sin_idx#40, main::@3/x_sin_idx#42 )
  y_pos_coarse#55 = phi( main::@15/y_pos_coarse#59, main::@24/y_pos_coarse#55, main::@3/y_pos_coarse#54 )
  x_pos_coarse#58 = phi( main::@15/x_pos_coarse#59, main::@24/x_pos_coarse#58, main::@3/x_pos_coarse#11 )
  screen_buffer#26 = phi( main::@15/screen_buffer#0, main::@24/screen_buffer#26, main::@3/screen_buffer#12 )
  x_pos_fine#21 = phi( main::@15/x_pos_fine#23, main::@24/x_pos_fine#21, main::@3/x_pos_fine#24 )
  y_pos_fine#21 = phi( main::@15/y_pos_fine#23, main::@24/y_pos_fine#21, main::@3/y_pos_fine#24 )
  main::$39 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) != $fe
  if(main::$39) goto main::@24
  to:main::@25
main::@25: scope:[main]  from main::@24 main::@25
  y_pos#33 = phi( main::@24/y_pos#34, main::@25/y_pos#33 )
  x_pos#33 = phi( main::@24/x_pos#34, main::@25/x_pos#33 )
  y_sin_idx#39 = phi( main::@24/y_sin_idx#40, main::@25/y_sin_idx#39 )
  x_sin_idx#39 = phi( main::@24/x_sin_idx#40, main::@25/x_sin_idx#39 )
  y_pos_coarse#53 = phi( main::@24/y_pos_coarse#55, main::@25/y_pos_coarse#53 )
  x_pos_coarse#57 = phi( main::@24/x_pos_coarse#58, main::@25/x_pos_coarse#57 )
  screen_buffer#17 = phi( main::@24/screen_buffer#26, main::@25/screen_buffer#17 )
  x_pos_fine#17 = phi( main::@24/x_pos_fine#21, main::@25/x_pos_fine#17 )
  y_pos_fine#17 = phi( main::@24/y_pos_fine#21, main::@25/y_pos_fine#17 )
  main::$40 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) != $ff
  if(main::$40) goto main::@25
  to:main::@26
main::@26: scope:[main]  from main::@25
  y_pos#32 = phi( main::@25/y_pos#33 )
  x_pos#32 = phi( main::@25/x_pos#33 )
  y_sin_idx#38 = phi( main::@25/y_sin_idx#39 )
  x_sin_idx#38 = phi( main::@25/x_sin_idx#39 )
  y_pos_coarse#50 = phi( main::@25/y_pos_coarse#53 )
  x_pos_coarse#54 = phi( main::@25/x_pos_coarse#57 )
  screen_buffer#8 = phi( main::@25/screen_buffer#17 )
  x_pos_fine#10 = phi( main::@25/x_pos_fine#17 )
  y_pos_fine#10 = phi( main::@25/y_pos_fine#17 )
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = WHITE
  main::$41 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & $f0
  main::$42 = 7 - y_pos_fine#10
  main::$43 = main::$41 | main::$42
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) = main::$43
  main::$44 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2) & $f0
  main::$45 = 7 - x_pos_fine#10
  main::$46 = main::$44 | main::$45
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2) = main::$46
  main::$51 = 0 != screen_buffer#8
  if(main::$51) goto main::@28
  to:main::@27
main::@28: scope:[main]  from main::@26
  screen_buffer#56 = phi( main::@26/screen_buffer#8 )
  y_pos_fine#48 = phi( main::@26/y_pos_fine#10 )
  x_pos_fine#48 = phi( main::@26/x_pos_fine#10 )
  y_pos#29 = phi( main::@26/y_pos#32 )
  x_pos#29 = phi( main::@26/x_pos#32 )
  y_sin_idx#35 = phi( main::@26/y_sin_idx#38 )
  x_sin_idx#35 = phi( main::@26/x_sin_idx#38 )
  y_pos_coarse#45 = phi( main::@26/y_pos_coarse#50 )
  x_pos_coarse#49 = phi( main::@26/x_pos_coarse#54 )
  main::toD0182_screen#0 = MAIN_SCREEN1
  main::toD0182_gfx#0 = MAIN_CHARSET
  to:main::toD0182
main::toD0182: scope:[main]  from main::@28
  screen_buffer#53 = phi( main::@28/screen_buffer#56 )
  y_pos_fine#40 = phi( main::@28/y_pos_fine#48 )
  x_pos_fine#40 = phi( main::@28/x_pos_fine#48 )
  y_pos#26 = phi( main::@28/y_pos#29 )
  x_pos#26 = phi( main::@28/x_pos#29 )
  y_sin_idx#32 = phi( main::@28/y_sin_idx#35 )
  x_sin_idx#32 = phi( main::@28/x_sin_idx#35 )
  y_pos_coarse#39 = phi( main::@28/y_pos_coarse#45 )
  x_pos_coarse#43 = phi( main::@28/x_pos_coarse#49 )
  main::toD0182_gfx#1 = phi( main::@28/main::toD0182_gfx#0 )
  main::toD0182_screen#1 = phi( main::@28/main::toD0182_screen#0 )
  main::toD0182_$7 = (word)main::toD0182_screen#1
  main::toD0182_$0 = main::toD0182_$7 & $3fff
  main::toD0182_$1 = main::toD0182_$0 * 4
  main::toD0182_$2 = > main::toD0182_$1
  main::toD0182_$3 = > (word)main::toD0182_gfx#1
  main::toD0182_$4 = main::toD0182_$3 / 4
  main::toD0182_$5 = main::toD0182_$4 & $f
  main::toD0182_$6 = main::toD0182_$2 | main::toD0182_$5
  main::toD0182_return#0 = main::toD0182_$6
  to:main::toD0182_@return
main::toD0182_@return: scope:[main]  from main::toD0182
  screen_buffer#50 = phi( main::toD0182/screen_buffer#53 )
  y_pos_fine#33 = phi( main::toD0182/y_pos_fine#40 )
  x_pos_fine#33 = phi( main::toD0182/x_pos_fine#40 )
  y_pos#23 = phi( main::toD0182/y_pos#26 )
  x_pos#23 = phi( main::toD0182/x_pos#26 )
  y_sin_idx#29 = phi( main::toD0182/y_sin_idx#32 )
  x_sin_idx#29 = phi( main::toD0182/x_sin_idx#32 )
  y_pos_coarse#32 = phi( main::toD0182/y_pos_coarse#39 )
  x_pos_coarse#36 = phi( main::toD0182/x_pos_coarse#43 )
  main::toD0182_return#2 = phi( main::toD0182/main::toD0182_return#0 )
  main::toD0182_return#1 = main::toD0182_return#2
  to:main::@35
main::@35: scope:[main]  from main::toD0182_@return
  screen_buffer#47 = phi( main::toD0182_@return/screen_buffer#50 )
  y_pos_fine#25 = phi( main::toD0182_@return/y_pos_fine#33 )
  x_pos_fine#25 = phi( main::toD0182_@return/x_pos_fine#33 )
  y_pos#20 = phi( main::toD0182_@return/y_pos#23 )
  x_pos#20 = phi( main::toD0182_@return/x_pos#23 )
  y_sin_idx#26 = phi( main::toD0182_@return/y_sin_idx#29 )
  x_sin_idx#26 = phi( main::toD0182_@return/x_sin_idx#29 )
  y_pos_coarse#27 = phi( main::toD0182_@return/y_pos_coarse#32 )
  x_pos_coarse#31 = phi( main::toD0182_@return/x_pos_coarse#36 )
  main::toD0182_return#3 = phi( main::toD0182_@return/main::toD0182_return#1 )
  main::$48 = main::toD0182_return#3
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = main::$48
  to:main::@29
main::@27: scope:[main]  from main::@26
  screen_buffer#57 = phi( main::@26/screen_buffer#8 )
  y_pos_fine#49 = phi( main::@26/y_pos_fine#10 )
  x_pos_fine#49 = phi( main::@26/x_pos_fine#10 )
  y_pos#30 = phi( main::@26/y_pos#32 )
  x_pos#30 = phi( main::@26/x_pos#32 )
  y_sin_idx#36 = phi( main::@26/y_sin_idx#38 )
  x_sin_idx#36 = phi( main::@26/x_sin_idx#38 )
  y_pos_coarse#46 = phi( main::@26/y_pos_coarse#50 )
  x_pos_coarse#50 = phi( main::@26/x_pos_coarse#54 )
  main::toD0183_screen#0 = MAIN_SCREEN0
  main::toD0183_gfx#0 = MAIN_CHARSET
  to:main::toD0183
main::toD0183: scope:[main]  from main::@27
  screen_buffer#54 = phi( main::@27/screen_buffer#57 )
  y_pos_fine#41 = phi( main::@27/y_pos_fine#49 )
  x_pos_fine#41 = phi( main::@27/x_pos_fine#49 )
  y_pos#27 = phi( main::@27/y_pos#30 )
  x_pos#27 = phi( main::@27/x_pos#30 )
  y_sin_idx#33 = phi( main::@27/y_sin_idx#36 )
  x_sin_idx#33 = phi( main::@27/x_sin_idx#36 )
  y_pos_coarse#40 = phi( main::@27/y_pos_coarse#46 )
  x_pos_coarse#44 = phi( main::@27/x_pos_coarse#50 )
  main::toD0183_gfx#1 = phi( main::@27/main::toD0183_gfx#0 )
  main::toD0183_screen#1 = phi( main::@27/main::toD0183_screen#0 )
  main::toD0183_$7 = (word)main::toD0183_screen#1
  main::toD0183_$0 = main::toD0183_$7 & $3fff
  main::toD0183_$1 = main::toD0183_$0 * 4
  main::toD0183_$2 = > main::toD0183_$1
  main::toD0183_$3 = > (word)main::toD0183_gfx#1
  main::toD0183_$4 = main::toD0183_$3 / 4
  main::toD0183_$5 = main::toD0183_$4 & $f
  main::toD0183_$6 = main::toD0183_$2 | main::toD0183_$5
  main::toD0183_return#0 = main::toD0183_$6
  to:main::toD0183_@return
main::toD0183_@return: scope:[main]  from main::toD0183
  screen_buffer#51 = phi( main::toD0183/screen_buffer#54 )
  y_pos_fine#34 = phi( main::toD0183/y_pos_fine#41 )
  x_pos_fine#34 = phi( main::toD0183/x_pos_fine#41 )
  y_pos#24 = phi( main::toD0183/y_pos#27 )
  x_pos#24 = phi( main::toD0183/x_pos#27 )
  y_sin_idx#30 = phi( main::toD0183/y_sin_idx#33 )
  x_sin_idx#30 = phi( main::toD0183/x_sin_idx#33 )
  y_pos_coarse#33 = phi( main::toD0183/y_pos_coarse#40 )
  x_pos_coarse#37 = phi( main::toD0183/x_pos_coarse#44 )
  main::toD0183_return#2 = phi( main::toD0183/main::toD0183_return#0 )
  main::toD0183_return#1 = main::toD0183_return#2
  to:main::@36
main::@36: scope:[main]  from main::toD0183_@return
  screen_buffer#48 = phi( main::toD0183_@return/screen_buffer#51 )
  y_pos_fine#26 = phi( main::toD0183_@return/y_pos_fine#34 )
  x_pos_fine#26 = phi( main::toD0183_@return/x_pos_fine#34 )
  y_pos#21 = phi( main::toD0183_@return/y_pos#24 )
  x_pos#21 = phi( main::toD0183_@return/x_pos#24 )
  y_sin_idx#27 = phi( main::toD0183_@return/y_sin_idx#30 )
  x_sin_idx#27 = phi( main::toD0183_@return/x_sin_idx#30 )
  y_pos_coarse#28 = phi( main::toD0183_@return/y_pos_coarse#33 )
  x_pos_coarse#32 = phi( main::toD0183_@return/x_pos_coarse#37 )
  main::toD0183_return#3 = phi( main::toD0183_@return/main::toD0183_return#1 )
  main::$47 = main::toD0183_return#3
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = main::$47
  to:main::@29
main::@29: scope:[main]  from main::@35 main::@36
  screen_buffer#40 = phi( main::@35/screen_buffer#47, main::@36/screen_buffer#48 )
  y_pos_fine#20 = phi( main::@35/y_pos_fine#25, main::@36/y_pos_fine#26 )
  x_pos_fine#20 = phi( main::@35/x_pos_fine#25, main::@36/x_pos_fine#26 )
  y_pos#18 = phi( main::@35/y_pos#20, main::@36/y_pos#21 )
  x_pos#18 = phi( main::@35/x_pos#20, main::@36/x_pos#21 )
  y_sin_idx#24 = phi( main::@35/y_sin_idx#26, main::@36/y_sin_idx#27 )
  x_sin_idx#24 = phi( main::@35/x_sin_idx#26, main::@36/x_sin_idx#27 )
  y_pos_coarse#20 = phi( main::@35/y_pos_coarse#27, main::@36/y_pos_coarse#28 )
  x_pos_coarse#21 = phi( main::@35/x_pos_coarse#31, main::@36/x_pos_coarse#32 )
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK
  to:main::@1
main::@return: scope:[main]  from
  screen_buffer#9 = phi( )
  y_pos_coarse#15 = phi( )
  y_pos_fine#11 = phi( )
  x_pos_coarse#16 = phi( )
  x_pos_fine#11 = phi( )
  y_pos#10 = phi( )
  x_pos#10 = phi( )
  y_sin_idx#11 = phi( )
  x_sin_idx#11 = phi( )
  x_sin_idx#2 = x_sin_idx#11
  y_sin_idx#2 = y_sin_idx#11
  x_pos#2 = x_pos#10
  y_pos#2 = y_pos#10
  x_pos_fine#2 = x_pos_fine#11
  x_pos_coarse#2 = x_pos_coarse#16
  y_pos_fine#2 = y_pos_fine#11
  y_pos_coarse#2 = y_pos_coarse#15
  screen_buffer#1 = screen_buffer#9
  return 
  to:@return

byte* petscii_ptr(word petscii_ptr::row_x , word petscii_ptr::row_y)
petscii_ptr: scope:[petscii_ptr]  from main::@11 main::@16 main::@21 main::@23
  petscii_ptr::row_x#4 = phi( main::@11/petscii_ptr::row_x#0, main::@16/petscii_ptr::row_x#2, main::@21/petscii_ptr::row_x#1, main::@23/petscii_ptr::row_x#3 )
  petscii_ptr::row_y#4 = phi( main::@11/petscii_ptr::row_y#0, main::@16/petscii_ptr::row_y#2, main::@21/petscii_ptr::row_y#1, main::@23/petscii_ptr::row_y#3 )
  petscii_ptr::$0 = petscii_ptr::row_y#4 * $8c
  petscii_ptr::$1 = PETSCII_ART + petscii_ptr::$0
  petscii_ptr::$2 = petscii_ptr::$1 + petscii_ptr::row_x#4
  petscii_ptr::return#4 = petscii_ptr::$2
  to:petscii_ptr::@return
petscii_ptr::@return: scope:[petscii_ptr]  from petscii_ptr
  petscii_ptr::return#10 = phi( petscii_ptr/petscii_ptr::return#4 )
  petscii_ptr::return#5 = petscii_ptr::return#10
  return 
  to:@return

void screencpy(byte* screencpy::dst , byte* screencpy::src)
screencpy: scope:[screencpy]  from main::@9
  screencpy::dst#1 = phi( main::@9/screencpy::dst#0 )
  screencpy::src#1 = phi( main::@9/screencpy::src#0 )
  screencpy::$0 = screencpy::src#1 + $fa
  screencpy::src_250#0 = screencpy::$0
  screencpy::$1 = screencpy::dst#1 + $fa
  screencpy::dst_250#0 = screencpy::$1
  screencpy::$2 = screencpy::src#1 + $1f4
  screencpy::src_500#0 = screencpy::$2
  screencpy::$3 = screencpy::dst#1 + $1f4
  screencpy::dst_500#0 = screencpy::$3
  screencpy::$4 = screencpy::src#1 + $2ee
  screencpy::src_750#0 = screencpy::$4
  screencpy::$5 = screencpy::dst#1 + $2ee
  screencpy::dst_750#0 = screencpy::$5
  screencpy::i#0 = 0
  to:screencpy::@1
screencpy::@1: scope:[screencpy]  from screencpy screencpy::@2
  screencpy::dst_750#2 = phi( screencpy/screencpy::dst_750#0, screencpy::@2/screencpy::dst_750#1 )
  screencpy::src_750#2 = phi( screencpy/screencpy::src_750#0, screencpy::@2/screencpy::src_750#1 )
  screencpy::dst_500#2 = phi( screencpy/screencpy::dst_500#0, screencpy::@2/screencpy::dst_500#1 )
  screencpy::src_500#2 = phi( screencpy/screencpy::src_500#0, screencpy::@2/screencpy::src_500#1 )
  screencpy::dst_250#2 = phi( screencpy/screencpy::dst_250#0, screencpy::@2/screencpy::dst_250#1 )
  screencpy::src_250#2 = phi( screencpy/screencpy::src_250#0, screencpy::@2/screencpy::src_250#1 )
  screencpy::dst#3 = phi( screencpy/screencpy::dst#1, screencpy::@2/screencpy::dst#2 )
  screencpy::src#3 = phi( screencpy/screencpy::src#1, screencpy::@2/screencpy::src#2 )
  screencpy::i#2 = phi( screencpy/screencpy::i#0, screencpy::@2/screencpy::i#1 )
  screencpy::$6 = screencpy::i#2 < $fa
  if(screencpy::$6) goto screencpy::@2
  to:screencpy::@return
screencpy::@2: scope:[screencpy]  from screencpy::@1
  screencpy::dst_750#1 = phi( screencpy::@1/screencpy::dst_750#2 )
  screencpy::src_750#1 = phi( screencpy::@1/screencpy::src_750#2 )
  screencpy::dst_500#1 = phi( screencpy::@1/screencpy::dst_500#2 )
  screencpy::src_500#1 = phi( screencpy::@1/screencpy::src_500#2 )
  screencpy::dst_250#1 = phi( screencpy::@1/screencpy::dst_250#2 )
  screencpy::src_250#1 = phi( screencpy::@1/screencpy::src_250#2 )
  screencpy::dst#2 = phi( screencpy::@1/screencpy::dst#3 )
  screencpy::i#3 = phi( screencpy::@1/screencpy::i#2 )
  screencpy::src#2 = phi( screencpy::@1/screencpy::src#3 )
  screencpy::dst#2[screencpy::i#3] = screencpy::src#2[screencpy::i#3]
  screencpy::dst_250#1[screencpy::i#3] = screencpy::src_250#1[screencpy::i#3]
  screencpy::dst_500#1[screencpy::i#3] = screencpy::src_500#1[screencpy::i#3]
  screencpy::dst_750#1[screencpy::i#3] = screencpy::src_750#1[screencpy::i#3]
  screencpy::i#1 = ++ screencpy::i#3
  to:screencpy::@1
screencpy::@return: scope:[screencpy]  from screencpy::@1
  return 
  to:@return

void next_position()
next_position: scope:[next_position]  from main::@1 main::@34
  y_sin_idx#20 = phi( main::@1/y_sin_idx#19, main::@34/y_sin_idx#18 )
  x_sin_idx#12 = phi( main::@1/x_sin_idx#19, main::@34/x_sin_idx#18 )
  x_sin_idx#3 = ++ x_sin_idx#12
  next_position::$0 = x_sin_idx#3 >= SINSIZE
  next_position::$1 = ! next_position::$0
  if(next_position::$1) goto next_position::@1
  to:next_position::@3
next_position::@1: scope:[next_position]  from next_position next_position::@3
  x_sin_idx#20 = phi( next_position/x_sin_idx#3, next_position::@3/x_sin_idx#4 )
  y_sin_idx#12 = phi( next_position/y_sin_idx#20, next_position::@3/y_sin_idx#21 )
  y_sin_idx#3 = ++ y_sin_idx#12
  next_position::$2 = y_sin_idx#3 >= SINSIZE
  next_position::$3 = ! next_position::$2
  if(next_position::$3) goto next_position::@2
  to:next_position::@4
next_position::@3: scope:[next_position]  from next_position
  y_sin_idx#21 = phi( next_position/y_sin_idx#20 )
  x_sin_idx#13 = phi( next_position/x_sin_idx#3 )
  x_sin_idx#4 = x_sin_idx#13 - SINSIZE
  to:next_position::@1
next_position::@2: scope:[next_position]  from next_position::@1 next_position::@4
  y_sin_idx#13 = phi( next_position::@1/y_sin_idx#3, next_position::@4/y_sin_idx#4 )
  x_sin_idx#14 = phi( next_position::@1/x_sin_idx#20, next_position::@4/x_sin_idx#21 )
  next_position::$12 = x_sin_idx#14 * SIZEOF_SIGNED_WORD
  x_pos#3 = SINTAB[next_position::$12]
  next_position::$13 = y_sin_idx#13 * SIZEOF_SIGNED_WORD
  y_pos#3 = SINTAB[next_position::$13]
  next_position::$14 = (word)x_pos#3
  next_position::$4 = next_position::$14 + $190
  next_position::$5 = next_position::$4 + $14*8
  next_position::x_pos_u#0 = next_position::$5
  next_position::$15 = (byte)next_position::x_pos_u#0
  next_position::$6 = next_position::$15 & 7
  x_pos_fine#3 = next_position::$6
  next_position::$7 = next_position::x_pos_u#0 / 8
  x_pos_coarse#3 = next_position::$7
  next_position::$16 = (word)y_pos#3
  next_position::$8 = next_position::$16 + $190
  next_position::$9 = next_position::$8 + $c*8
  next_position::y_pos_u#0 = next_position::$9
  next_position::$17 = (byte)next_position::y_pos_u#0
  next_position::$10 = next_position::$17 & 7
  y_pos_fine#3 = next_position::$10
  next_position::$11 = next_position::y_pos_u#0 / 8
  y_pos_coarse#3 = next_position::$11
  to:next_position::@return
next_position::@4: scope:[next_position]  from next_position::@1
  x_sin_idx#21 = phi( next_position::@1/x_sin_idx#20 )
  y_sin_idx#14 = phi( next_position::@1/y_sin_idx#3 )
  y_sin_idx#4 = y_sin_idx#14 - SINSIZE
  to:next_position::@2
next_position::@return: scope:[next_position]  from next_position::@2
  y_pos_coarse#16 = phi( next_position::@2/y_pos_coarse#3 )
  y_pos_fine#12 = phi( next_position::@2/y_pos_fine#3 )
  x_pos_coarse#17 = phi( next_position::@2/x_pos_coarse#3 )
  x_pos_fine#12 = phi( next_position::@2/x_pos_fine#3 )
  y_pos#11 = phi( next_position::@2/y_pos#3 )
  x_pos#11 = phi( next_position::@2/x_pos#3 )
  y_sin_idx#15 = phi( next_position::@2/y_sin_idx#13 )
  x_sin_idx#15 = phi( next_position::@2/x_sin_idx#14 )
  x_sin_idx#5 = x_sin_idx#15
  y_sin_idx#5 = y_sin_idx#15
  x_pos#4 = x_pos#11
  y_pos#4 = y_pos#11
  x_pos_fine#4 = x_pos_fine#12
  x_pos_coarse#4 = x_pos_coarse#17
  y_pos_fine#4 = y_pos_fine#12
  y_pos_coarse#4 = y_pos_coarse#16
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  x_sin_idx#6 = 0
  y_sin_idx#6 = (word)SINSIZE/4
  x_pos#5 = 0
  y_pos#5 = 0
  x_pos_fine#5 = 0
  y_pos_fine#5 = 0
  x_pos_coarse#5 = 0
  y_pos_coarse#5 = 0
  screen_buffer#2 = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  screen_buffer#18 = phi( __start::__init1/screen_buffer#2 )
  y_pos_coarse#23 = phi( __start::__init1/y_pos_coarse#5 )
  y_pos_fine#18 = phi( __start::__init1/y_pos_fine#5 )
  x_pos_coarse#27 = phi( __start::__init1/x_pos_coarse#5 )
  x_pos_fine#18 = phi( __start::__init1/x_pos_fine#5 )
  y_pos#16 = phi( __start::__init1/y_pos#5 )
  x_pos#16 = phi( __start::__init1/x_pos#5 )
  y_sin_idx#22 = phi( __start::__init1/y_sin_idx#6 )
  x_sin_idx#22 = phi( __start::__init1/x_sin_idx#6 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  screen_buffer#10 = phi( __start::@1/screen_buffer#1 )
  y_pos_coarse#17 = phi( __start::@1/y_pos_coarse#2 )
  y_pos_fine#13 = phi( __start::@1/y_pos_fine#2 )
  x_pos_coarse#18 = phi( __start::@1/x_pos_coarse#2 )
  x_pos_fine#13 = phi( __start::@1/x_pos_fine#2 )
  y_pos#12 = phi( __start::@1/y_pos#2 )
  x_pos#12 = phi( __start::@1/x_pos#2 )
  y_sin_idx#16 = phi( __start::@1/y_sin_idx#2 )
  x_sin_idx#16 = phi( __start::@1/x_sin_idx#2 )
  x_sin_idx#7 = x_sin_idx#16
  y_sin_idx#7 = y_sin_idx#16
  x_pos#6 = x_pos#12
  y_pos#6 = y_pos#12
  x_pos_fine#6 = x_pos_fine#13
  x_pos_coarse#6 = x_pos_coarse#18
  y_pos_fine#6 = y_pos_fine#13
  y_pos_coarse#6 = y_pos_coarse#17
  screen_buffer#3 = screen_buffer#10
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  screen_buffer#11 = phi( __start::@2/screen_buffer#3 )
  y_pos_coarse#18 = phi( __start::@2/y_pos_coarse#6 )
  x_pos_coarse#19 = phi( __start::@2/x_pos_coarse#6 )
  y_pos_fine#14 = phi( __start::@2/y_pos_fine#6 )
  x_pos_fine#14 = phi( __start::@2/x_pos_fine#6 )
  y_pos#13 = phi( __start::@2/y_pos#6 )
  x_pos#13 = phi( __start::@2/x_pos#6 )
  y_sin_idx#17 = phi( __start::@2/y_sin_idx#7 )
  x_sin_idx#17 = phi( __start::@2/x_sin_idx#7 )
  x_sin_idx#8 = x_sin_idx#17
  y_sin_idx#8 = y_sin_idx#17
  x_pos#7 = x_pos#13
  y_pos#7 = y_pos#13
  x_pos_fine#7 = x_pos_fine#14
  y_pos_fine#7 = y_pos_fine#14
  x_pos_coarse#7 = x_pos_coarse#19
  y_pos_coarse#7 = y_pos_coarse#18
  screen_buffer#4 = screen_buffer#11
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte BLACK = 0
const nomodify byte* MAIN_CHARSET = (byte*)$1000
const nomodify byte* MAIN_SCREEN0 = (byte*)$3800
const nomodify byte* MAIN_SCREEN1 = (byte*)$3c00
const byte OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
const byte OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = $11
const byte OFFSET_STRUCT_MOS6569_VICII_CONTROL2 = $16
const byte OFFSET_STRUCT_MOS6569_VICII_MEMORY = $18
const byte OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
const byte* PETSCII_ART[$8c*$7d]  = kickasm {{ .var petsciiPic = LoadPicture("cml.png")
    .print "width: "+petsciiPic.width + " height: "+petsciiPic.height
    .for (var y=0; y<petsciiPic.height; y++)
        .for (var x=0; x<petsciiPic.width; x++)
            .byte petsciiPic.getPixel(x,y)==0?' ':$a0;
 }}
const nomodify word SINSIZE = $800
const signed word* SINTAB[SINSIZE]  = kickasm(  uses SINSIZE) {{ .fillword SINSIZE, 399*sin(i*2*PI/SINSIZE)
 }}
const byte SIZEOF_SIGNED_WORD = 2
const nomodify struct MOS6569_VICII* VICII = (struct MOS6569_VICII*)$d000
const nomodify byte WHITE = 1
void __start()
void main()
bool~ main::$10
byte*~ main::$11
byte*~ main::$12
byte*~ main::$13
byte*~ main::$14
byte*~ main::$15
byte*~ main::$16
byte*~ main::$17
bool~ main::$19
byte~ main::$2
bool~ main::$20
number~ main::$21
number~ main::$22
byte*~ main::$23
number~ main::$24
number~ main::$25
byte*~ main::$26
byte*~ main::$27
bool~ main::$28
bool~ main::$29
bool~ main::$30
number~ main::$31
number~ main::$32
byte*~ main::$33
number~ main::$34
number~ main::$35
byte*~ main::$36
byte*~ main::$37
bool~ main::$38
bool~ main::$39
bool~ main::$40
number~ main::$41
number~ main::$42
number~ main::$43
number~ main::$44
number~ main::$45
number~ main::$46
byte~ main::$47
byte~ main::$48
bool~ main::$49
word~ main::$5
bool~ main::$50
bool~ main::$51
bool~ main::$52
bool~ main::$53
bool~ main::$54
bool~ main::$6
bool~ main::$7
bool~ main::$8
word~ main::$9
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte main::i1
byte main::i1#0
byte main::i1#1
byte main::i1#2
byte main::i1#3
signed byte main::movement
signed byte main::movement#0
signed byte main::movement#1
signed byte main::movement#2
signed byte main::movement#3
signed byte main::movement#4
signed byte main::movement#5
signed byte main::movement#6
signed byte main::movement#7
signed byte main::movement#8
signed byte main::movement#9
byte* main::petscii
byte* main::petscii#0
byte* main::petscii#1
byte* main::petscii#10
byte* main::petscii#11
byte* main::petscii#2
byte* main::petscii#3
byte* main::petscii#4
byte* main::petscii#5
byte* main::petscii#6
byte* main::petscii#7
byte* main::petscii#8
byte* main::petscii#9
byte* main::screen_active
byte* main::screen_active#0
byte* main::screen_active#1
byte* main::screen_active#2
byte* main::screen_active#3
byte* main::screen_hidden
byte* main::screen_hidden#0
byte* main::screen_hidden#1
byte* main::screen_hidden#10
byte* main::screen_hidden#11
byte* main::screen_hidden#12
byte* main::screen_hidden#13
byte* main::screen_hidden#14
byte* main::screen_hidden#15
byte* main::screen_hidden#2
byte* main::screen_hidden#3
byte* main::screen_hidden#4
byte* main::screen_hidden#5
byte* main::screen_hidden#6
byte* main::screen_hidden#7
byte* main::screen_hidden#8
byte* main::screen_hidden#9
byte* main::scrn
byte* main::scrn#0
byte* main::scrn#1
byte* main::scrn#10
byte* main::scrn#11
byte* main::scrn#2
byte* main::scrn#3
byte* main::scrn#4
byte* main::scrn#5
byte* main::scrn#6
byte* main::scrn#7
byte* main::scrn#8
byte* main::scrn#9
number~ main::toD0181_$0
number~ main::toD0181_$1
number~ main::toD0181_$2
byte~ main::toD0181_$3
number~ main::toD0181_$4
number~ main::toD0181_$5
number~ main::toD0181_$6
word~ main::toD0181_$7
byte* main::toD0181_gfx
byte* main::toD0181_gfx#0
byte* main::toD0181_gfx#1
byte main::toD0181_return
byte main::toD0181_return#0
byte main::toD0181_return#1
byte main::toD0181_return#2
byte main::toD0181_return#3
byte* main::toD0181_screen
byte* main::toD0181_screen#0
byte* main::toD0181_screen#1
number~ main::toD0182_$0
number~ main::toD0182_$1
number~ main::toD0182_$2
byte~ main::toD0182_$3
number~ main::toD0182_$4
number~ main::toD0182_$5
number~ main::toD0182_$6
word~ main::toD0182_$7
byte* main::toD0182_gfx
byte* main::toD0182_gfx#0
byte* main::toD0182_gfx#1
byte main::toD0182_return
byte main::toD0182_return#0
byte main::toD0182_return#1
byte main::toD0182_return#2
byte main::toD0182_return#3
byte* main::toD0182_screen
byte* main::toD0182_screen#0
byte* main::toD0182_screen#1
number~ main::toD0183_$0
number~ main::toD0183_$1
number~ main::toD0183_$2
byte~ main::toD0183_$3
number~ main::toD0183_$4
number~ main::toD0183_$5
number~ main::toD0183_$6
word~ main::toD0183_$7
byte* main::toD0183_gfx
byte* main::toD0183_gfx#0
byte* main::toD0183_gfx#1
byte main::toD0183_return
byte main::toD0183_return#0
byte main::toD0183_return#1
byte main::toD0183_return#2
byte main::toD0183_return#3
byte* main::toD0183_screen
byte* main::toD0183_screen#0
byte* main::toD0183_screen#1
signed byte main::x_movement
signed byte main::x_movement#0
signed byte main::x_movement#1
signed byte main::x_movement#10
signed byte main::x_movement#11
signed byte main::x_movement#12
signed byte main::x_movement#13
signed byte main::x_movement#14
signed byte main::x_movement#15
signed byte main::x_movement#16
signed byte main::x_movement#17
signed byte main::x_movement#18
signed byte main::x_movement#2
signed byte main::x_movement#3
signed byte main::x_movement#4
signed byte main::x_movement#5
signed byte main::x_movement#6
signed byte main::x_movement#7
signed byte main::x_movement#8
signed byte main::x_movement#9
word main::x_pos_coarse_old
word main::x_pos_coarse_old#0
word main::x_pos_coarse_old#1
word main::x_pos_coarse_old#2
word main::x_pos_coarse_old#3
word main::x_pos_coarse_old#4
word main::x_pos_coarse_old#5
signed byte main::y_movement
signed byte main::y_movement#0
signed byte main::y_movement#1
signed byte main::y_movement#10
signed byte main::y_movement#11
signed byte main::y_movement#12
signed byte main::y_movement#13
signed byte main::y_movement#2
signed byte main::y_movement#3
signed byte main::y_movement#4
signed byte main::y_movement#5
signed byte main::y_movement#6
signed byte main::y_movement#7
signed byte main::y_movement#8
signed byte main::y_movement#9
word main::y_pos_coarse_old
word main::y_pos_coarse_old#0
word main::y_pos_coarse_old#1
void* memset(void* memset::str , byte memset::c , word memset::num)
bool~ memset::$0
bool~ memset::$1
byte*~ memset::$2
bool~ memset::$3
byte*~ memset::$4
byte memset::c
byte memset::c#0
byte memset::c#1
byte memset::c#2
byte memset::c#3
byte memset::c#4
byte* memset::dst
byte* memset::dst#0
byte* memset::dst#1
byte* memset::dst#2
byte* memset::dst#3
byte* memset::end
byte* memset::end#0
byte* memset::end#1
byte* memset::end#2
word memset::num
word memset::num#0
word memset::num#1
word memset::num#2
void* memset::return
void* memset::return#0
void* memset::return#1
void* memset::return#2
void* memset::return#3
void* memset::str
void* memset::str#0
void* memset::str#1
void* memset::str#2
void* memset::str#3
void* memset::str#4
void* memset::str#5
void next_position()
bool~ next_position::$0
bool~ next_position::$1
number~ next_position::$10
number~ next_position::$11
word~ next_position::$12
word~ next_position::$13
word~ next_position::$14
byte~ next_position::$15
word~ next_position::$16
byte~ next_position::$17
bool~ next_position::$2
bool~ next_position::$3
number~ next_position::$4
number~ next_position::$5
number~ next_position::$6
number~ next_position::$7
number~ next_position::$8
number~ next_position::$9
word next_position::x_pos_u
word next_position::x_pos_u#0
word next_position::y_pos_u
word next_position::y_pos_u#0
byte* petscii_ptr(word petscii_ptr::row_x , word petscii_ptr::row_y)
number~ petscii_ptr::$0
byte*~ petscii_ptr::$1
byte*~ petscii_ptr::$2
byte* petscii_ptr::return
byte* petscii_ptr::return#0
byte* petscii_ptr::return#1
byte* petscii_ptr::return#10
byte* petscii_ptr::return#2
byte* petscii_ptr::return#3
byte* petscii_ptr::return#4
byte* petscii_ptr::return#5
byte* petscii_ptr::return#6
byte* petscii_ptr::return#7
byte* petscii_ptr::return#8
byte* petscii_ptr::return#9
word petscii_ptr::row_x
word petscii_ptr::row_x#0
word petscii_ptr::row_x#1
word petscii_ptr::row_x#2
word petscii_ptr::row_x#3
word petscii_ptr::row_x#4
word petscii_ptr::row_y
word petscii_ptr::row_y#0
word petscii_ptr::row_y#1
word petscii_ptr::row_y#2
word petscii_ptr::row_y#3
word petscii_ptr::row_y#4
byte screen_buffer
byte screen_buffer#0
byte screen_buffer#1
byte screen_buffer#10
byte screen_buffer#11
byte screen_buffer#12
byte screen_buffer#13
byte screen_buffer#14
byte screen_buffer#15
byte screen_buffer#16
byte screen_buffer#17
byte screen_buffer#18
byte screen_buffer#19
byte screen_buffer#2
byte screen_buffer#20
byte screen_buffer#21
byte screen_buffer#22
byte screen_buffer#23
byte screen_buffer#24
byte screen_buffer#25
byte screen_buffer#26
byte screen_buffer#27
byte screen_buffer#28
byte screen_buffer#29
byte screen_buffer#3
byte screen_buffer#30
byte screen_buffer#31
byte screen_buffer#32
byte screen_buffer#33
byte screen_buffer#34
byte screen_buffer#35
byte screen_buffer#36
byte screen_buffer#37
byte screen_buffer#38
byte screen_buffer#39
byte screen_buffer#4
byte screen_buffer#40
byte screen_buffer#41
byte screen_buffer#42
byte screen_buffer#43
byte screen_buffer#44
byte screen_buffer#45
byte screen_buffer#46
byte screen_buffer#47
byte screen_buffer#48
byte screen_buffer#49
byte screen_buffer#5
byte screen_buffer#50
byte screen_buffer#51
byte screen_buffer#52
byte screen_buffer#53
byte screen_buffer#54
byte screen_buffer#55
byte screen_buffer#56
byte screen_buffer#57
byte screen_buffer#58
byte screen_buffer#59
byte screen_buffer#6
byte screen_buffer#60
byte screen_buffer#7
byte screen_buffer#8
byte screen_buffer#9
void screencpy(byte* screencpy::dst , byte* screencpy::src)
byte*~ screencpy::$0
byte*~ screencpy::$1
byte*~ screencpy::$2
byte*~ screencpy::$3
byte*~ screencpy::$4
byte*~ screencpy::$5
bool~ screencpy::$6
byte* screencpy::dst
byte* screencpy::dst#0
byte* screencpy::dst#1
byte* screencpy::dst#2
byte* screencpy::dst#3
byte* screencpy::dst_250
byte* screencpy::dst_250#0
byte* screencpy::dst_250#1
byte* screencpy::dst_250#2
byte* screencpy::dst_500
byte* screencpy::dst_500#0
byte* screencpy::dst_500#1
byte* screencpy::dst_500#2
byte* screencpy::dst_750
byte* screencpy::dst_750#0
byte* screencpy::dst_750#1
byte* screencpy::dst_750#2
byte screencpy::i
byte screencpy::i#0
byte screencpy::i#1
byte screencpy::i#2
byte screencpy::i#3
byte* screencpy::src
byte* screencpy::src#0
byte* screencpy::src#1
byte* screencpy::src#2
byte* screencpy::src#3
byte* screencpy::src_250
byte* screencpy::src_250#0
byte* screencpy::src_250#1
byte* screencpy::src_250#2
byte* screencpy::src_500
byte* screencpy::src_500#0
byte* screencpy::src_500#1
byte* screencpy::src_500#2
byte* screencpy::src_750
byte* screencpy::src_750#0
byte* screencpy::src_750#1
byte* screencpy::src_750#2
signed word x_pos
signed word x_pos#0
signed word x_pos#1
signed word x_pos#10
signed word x_pos#11
signed word x_pos#12
signed word x_pos#13
signed word x_pos#14
signed word x_pos#15
signed word x_pos#16
signed word x_pos#17
signed word x_pos#18
signed word x_pos#19
signed word x_pos#2
signed word x_pos#20
signed word x_pos#21
signed word x_pos#22
signed word x_pos#23
signed word x_pos#24
signed word x_pos#25
signed word x_pos#26
signed word x_pos#27
signed word x_pos#28
signed word x_pos#29
signed word x_pos#3
signed word x_pos#30
signed word x_pos#31
signed word x_pos#32
signed word x_pos#33
signed word x_pos#34
signed word x_pos#35
signed word x_pos#36
signed word x_pos#37
signed word x_pos#38
signed word x_pos#39
signed word x_pos#4
signed word x_pos#40
signed word x_pos#41
signed word x_pos#42
signed word x_pos#43
signed word x_pos#44
signed word x_pos#45
signed word x_pos#46
signed word x_pos#47
signed word x_pos#48
signed word x_pos#49
signed word x_pos#5
signed word x_pos#50
signed word x_pos#51
signed word x_pos#52
signed word x_pos#53
signed word x_pos#54
signed word x_pos#55
signed word x_pos#56
signed word x_pos#57
signed word x_pos#58
signed word x_pos#59
signed word x_pos#6
signed word x_pos#60
signed word x_pos#61
signed word x_pos#62
signed word x_pos#63
signed word x_pos#64
signed word x_pos#7
signed word x_pos#8
signed word x_pos#9
word x_pos_coarse
word x_pos_coarse#0
word x_pos_coarse#1
word x_pos_coarse#10
word x_pos_coarse#11
word x_pos_coarse#12
word x_pos_coarse#13
word x_pos_coarse#14
word x_pos_coarse#15
word x_pos_coarse#16
word x_pos_coarse#17
word x_pos_coarse#18
word x_pos_coarse#19
word x_pos_coarse#2
word x_pos_coarse#20
word x_pos_coarse#21
word x_pos_coarse#22
word x_pos_coarse#23
word x_pos_coarse#24
word x_pos_coarse#25
word x_pos_coarse#26
word x_pos_coarse#27
word x_pos_coarse#28
word x_pos_coarse#29
word x_pos_coarse#3
word x_pos_coarse#30
word x_pos_coarse#31
word x_pos_coarse#32
word x_pos_coarse#33
word x_pos_coarse#34
word x_pos_coarse#35
word x_pos_coarse#36
word x_pos_coarse#37
word x_pos_coarse#38
word x_pos_coarse#39
word x_pos_coarse#4
word x_pos_coarse#40
word x_pos_coarse#41
word x_pos_coarse#42
word x_pos_coarse#43
word x_pos_coarse#44
word x_pos_coarse#45
word x_pos_coarse#46
word x_pos_coarse#47
word x_pos_coarse#48
word x_pos_coarse#49
word x_pos_coarse#5
word x_pos_coarse#50
word x_pos_coarse#51
word x_pos_coarse#52
word x_pos_coarse#53
word x_pos_coarse#54
word x_pos_coarse#55
word x_pos_coarse#56
word x_pos_coarse#57
word x_pos_coarse#58
word x_pos_coarse#59
word x_pos_coarse#6
word x_pos_coarse#60
word x_pos_coarse#61
word x_pos_coarse#62
word x_pos_coarse#63
word x_pos_coarse#64
word x_pos_coarse#7
word x_pos_coarse#8
word x_pos_coarse#9
byte x_pos_fine
byte x_pos_fine#0
byte x_pos_fine#1
byte x_pos_fine#10
byte x_pos_fine#11
byte x_pos_fine#12
byte x_pos_fine#13
byte x_pos_fine#14
byte x_pos_fine#15
byte x_pos_fine#16
byte x_pos_fine#17
byte x_pos_fine#18
byte x_pos_fine#19
byte x_pos_fine#2
byte x_pos_fine#20
byte x_pos_fine#21
byte x_pos_fine#22
byte x_pos_fine#23
byte x_pos_fine#24
byte x_pos_fine#25
byte x_pos_fine#26
byte x_pos_fine#27
byte x_pos_fine#28
byte x_pos_fine#29
byte x_pos_fine#3
byte x_pos_fine#30
byte x_pos_fine#31
byte x_pos_fine#32
byte x_pos_fine#33
byte x_pos_fine#34
byte x_pos_fine#35
byte x_pos_fine#36
byte x_pos_fine#37
byte x_pos_fine#38
byte x_pos_fine#39
byte x_pos_fine#4
byte x_pos_fine#40
byte x_pos_fine#41
byte x_pos_fine#42
byte x_pos_fine#43
byte x_pos_fine#44
byte x_pos_fine#45
byte x_pos_fine#46
byte x_pos_fine#47
byte x_pos_fine#48
byte x_pos_fine#49
byte x_pos_fine#5
byte x_pos_fine#50
byte x_pos_fine#51
byte x_pos_fine#52
byte x_pos_fine#53
byte x_pos_fine#54
byte x_pos_fine#55
byte x_pos_fine#56
byte x_pos_fine#57
byte x_pos_fine#58
byte x_pos_fine#59
byte x_pos_fine#6
byte x_pos_fine#60
byte x_pos_fine#61
byte x_pos_fine#62
byte x_pos_fine#63
byte x_pos_fine#64
byte x_pos_fine#7
byte x_pos_fine#8
byte x_pos_fine#9
word x_sin_idx
word x_sin_idx#0
word x_sin_idx#1
word x_sin_idx#10
word x_sin_idx#11
word x_sin_idx#12
word x_sin_idx#13
word x_sin_idx#14
word x_sin_idx#15
word x_sin_idx#16
word x_sin_idx#17
word x_sin_idx#18
word x_sin_idx#19
word x_sin_idx#2
word x_sin_idx#20
word x_sin_idx#21
word x_sin_idx#22
word x_sin_idx#23
word x_sin_idx#24
word x_sin_idx#25
word x_sin_idx#26
word x_sin_idx#27
word x_sin_idx#28
word x_sin_idx#29
word x_sin_idx#3
word x_sin_idx#30
word x_sin_idx#31
word x_sin_idx#32
word x_sin_idx#33
word x_sin_idx#34
word x_sin_idx#35
word x_sin_idx#36
word x_sin_idx#37
word x_sin_idx#38
word x_sin_idx#39
word x_sin_idx#4
word x_sin_idx#40
word x_sin_idx#41
word x_sin_idx#42
word x_sin_idx#43
word x_sin_idx#44
word x_sin_idx#45
word x_sin_idx#46
word x_sin_idx#47
word x_sin_idx#48
word x_sin_idx#49
word x_sin_idx#5
word x_sin_idx#50
word x_sin_idx#51
word x_sin_idx#52
word x_sin_idx#53
word x_sin_idx#54
word x_sin_idx#55
word x_sin_idx#56
word x_sin_idx#57
word x_sin_idx#58
word x_sin_idx#59
word x_sin_idx#6
word x_sin_idx#60
word x_sin_idx#61
word x_sin_idx#62
word x_sin_idx#63
word x_sin_idx#64
word x_sin_idx#65
word x_sin_idx#66
word x_sin_idx#67
word x_sin_idx#68
word x_sin_idx#69
word x_sin_idx#7
word x_sin_idx#70
word x_sin_idx#8
word x_sin_idx#9
signed word y_pos
signed word y_pos#0
signed word y_pos#1
signed word y_pos#10
signed word y_pos#11
signed word y_pos#12
signed word y_pos#13
signed word y_pos#14
signed word y_pos#15
signed word y_pos#16
signed word y_pos#17
signed word y_pos#18
signed word y_pos#19
signed word y_pos#2
signed word y_pos#20
signed word y_pos#21
signed word y_pos#22
signed word y_pos#23
signed word y_pos#24
signed word y_pos#25
signed word y_pos#26
signed word y_pos#27
signed word y_pos#28
signed word y_pos#29
signed word y_pos#3
signed word y_pos#30
signed word y_pos#31
signed word y_pos#32
signed word y_pos#33
signed word y_pos#34
signed word y_pos#35
signed word y_pos#36
signed word y_pos#37
signed word y_pos#38
signed word y_pos#39
signed word y_pos#4
signed word y_pos#40
signed word y_pos#41
signed word y_pos#42
signed word y_pos#43
signed word y_pos#44
signed word y_pos#45
signed word y_pos#46
signed word y_pos#47
signed word y_pos#48
signed word y_pos#49
signed word y_pos#5
signed word y_pos#50
signed word y_pos#51
signed word y_pos#52
signed word y_pos#53
signed word y_pos#54
signed word y_pos#55
signed word y_pos#56
signed word y_pos#57
signed word y_pos#58
signed word y_pos#59
signed word y_pos#6
signed word y_pos#60
signed word y_pos#61
signed word y_pos#62
signed word y_pos#63
signed word y_pos#64
signed word y_pos#7
signed word y_pos#8
signed word y_pos#9
word y_pos_coarse
word y_pos_coarse#0
word y_pos_coarse#1
word y_pos_coarse#10
word y_pos_coarse#11
word y_pos_coarse#12
word y_pos_coarse#13
word y_pos_coarse#14
word y_pos_coarse#15
word y_pos_coarse#16
word y_pos_coarse#17
word y_pos_coarse#18
word y_pos_coarse#19
word y_pos_coarse#2
word y_pos_coarse#20
word y_pos_coarse#21
word y_pos_coarse#22
word y_pos_coarse#23
word y_pos_coarse#24
word y_pos_coarse#25
word y_pos_coarse#26
word y_pos_coarse#27
word y_pos_coarse#28
word y_pos_coarse#29
word y_pos_coarse#3
word y_pos_coarse#30
word y_pos_coarse#31
word y_pos_coarse#32
word y_pos_coarse#33
word y_pos_coarse#34
word y_pos_coarse#35
word y_pos_coarse#36
word y_pos_coarse#37
word y_pos_coarse#38
word y_pos_coarse#39
word y_pos_coarse#4
word y_pos_coarse#40
word y_pos_coarse#41
word y_pos_coarse#42
word y_pos_coarse#43
word y_pos_coarse#44
word y_pos_coarse#45
word y_pos_coarse#46
word y_pos_coarse#47
word y_pos_coarse#48
word y_pos_coarse#49
word y_pos_coarse#5
word y_pos_coarse#50
word y_pos_coarse#51
word y_pos_coarse#52
word y_pos_coarse#53
word y_pos_coarse#54
word y_pos_coarse#55
word y_pos_coarse#56
word y_pos_coarse#57
word y_pos_coarse#58
word y_pos_coarse#59
word y_pos_coarse#6
word y_pos_coarse#60
word y_pos_coarse#61
word y_pos_coarse#62
word y_pos_coarse#63
word y_pos_coarse#64
word y_pos_coarse#7
word y_pos_coarse#8
word y_pos_coarse#9
byte y_pos_fine
byte y_pos_fine#0
byte y_pos_fine#1
byte y_pos_fine#10
byte y_pos_fine#11
byte y_pos_fine#12
byte y_pos_fine#13
byte y_pos_fine#14
byte y_pos_fine#15
byte y_pos_fine#16
byte y_pos_fine#17
byte y_pos_fine#18
byte y_pos_fine#19
byte y_pos_fine#2
byte y_pos_fine#20
byte y_pos_fine#21
byte y_pos_fine#22
byte y_pos_fine#23
byte y_pos_fine#24
byte y_pos_fine#25
byte y_pos_fine#26
byte y_pos_fine#27
byte y_pos_fine#28
byte y_pos_fine#29
byte y_pos_fine#3
byte y_pos_fine#30
byte y_pos_fine#31
byte y_pos_fine#32
byte y_pos_fine#33
byte y_pos_fine#34
byte y_pos_fine#35
byte y_pos_fine#36
byte y_pos_fine#37
byte y_pos_fine#38
byte y_pos_fine#39
byte y_pos_fine#4
byte y_pos_fine#40
byte y_pos_fine#41
byte y_pos_fine#42
byte y_pos_fine#43
byte y_pos_fine#44
byte y_pos_fine#45
byte y_pos_fine#46
byte y_pos_fine#47
byte y_pos_fine#48
byte y_pos_fine#49
byte y_pos_fine#5
byte y_pos_fine#50
byte y_pos_fine#51
byte y_pos_fine#52
byte y_pos_fine#53
byte y_pos_fine#54
byte y_pos_fine#55
byte y_pos_fine#56
byte y_pos_fine#57
byte y_pos_fine#58
byte y_pos_fine#59
byte y_pos_fine#6
byte y_pos_fine#60
byte y_pos_fine#61
byte y_pos_fine#62
byte y_pos_fine#63
byte y_pos_fine#64
byte y_pos_fine#7
byte y_pos_fine#8
byte y_pos_fine#9
word y_sin_idx
word y_sin_idx#0
word y_sin_idx#1
word y_sin_idx#10
word y_sin_idx#11
word y_sin_idx#12
word y_sin_idx#13
word y_sin_idx#14
word y_sin_idx#15
word y_sin_idx#16
word y_sin_idx#17
word y_sin_idx#18
word y_sin_idx#19
word y_sin_idx#2
word y_sin_idx#20
word y_sin_idx#21
word y_sin_idx#22
word y_sin_idx#23
word y_sin_idx#24
word y_sin_idx#25
word y_sin_idx#26
word y_sin_idx#27
word y_sin_idx#28
word y_sin_idx#29
word y_sin_idx#3
word y_sin_idx#30
word y_sin_idx#31
word y_sin_idx#32
word y_sin_idx#33
word y_sin_idx#34
word y_sin_idx#35
word y_sin_idx#36
word y_sin_idx#37
word y_sin_idx#38
word y_sin_idx#39
word y_sin_idx#4
word y_sin_idx#40
word y_sin_idx#41
word y_sin_idx#42
word y_sin_idx#43
word y_sin_idx#44
word y_sin_idx#45
word y_sin_idx#46
word y_sin_idx#47
word y_sin_idx#48
word y_sin_idx#49
word y_sin_idx#5
word y_sin_idx#50
word y_sin_idx#51
word y_sin_idx#52
word y_sin_idx#53
word y_sin_idx#54
word y_sin_idx#55
word y_sin_idx#56
word y_sin_idx#57
word y_sin_idx#58
word y_sin_idx#59
word y_sin_idx#6
word y_sin_idx#60
word y_sin_idx#61
word y_sin_idx#62
word y_sin_idx#63
word y_sin_idx#64
word y_sin_idx#65
word y_sin_idx#66
word y_sin_idx#67
word y_sin_idx#68
word y_sin_idx#69
word y_sin_idx#7
word y_sin_idx#70
word y_sin_idx#8
word y_sin_idx#9

Adding number conversion cast (unumber) 0 in memset::$0 = memset::num#1 > 0
Adding number conversion cast (unumber) $3e8 in memset::num#0 = $3e8
Adding number conversion cast (unumber) $3fff in main::toD0181_$0 = main::toD0181_$7 & $3fff
Adding number conversion cast (unumber) main::toD0181_$0 in main::toD0181_$0 = main::toD0181_$7 & (unumber)$3fff
Adding number conversion cast (unumber) 4 in main::toD0181_$1 = main::toD0181_$0 * 4
Adding number conversion cast (unumber) main::toD0181_$1 in main::toD0181_$1 = main::toD0181_$0 * (unumber)4
Adding number conversion cast (unumber) main::toD0181_$2 in main::toD0181_$2 = > main::toD0181_$1
Adding number conversion cast (unumber) 4 in main::toD0181_$4 = main::toD0181_$3 / 4
Adding number conversion cast (unumber) main::toD0181_$4 in main::toD0181_$4 = main::toD0181_$3 / (unumber)4
Adding number conversion cast (unumber) $f in main::toD0181_$5 = main::toD0181_$4 & $f
Adding number conversion cast (unumber) main::toD0181_$5 in main::toD0181_$5 = main::toD0181_$4 & (unumber)$f
Adding number conversion cast (unumber) main::toD0181_$6 in main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
Adding number conversion cast (snumber) 1 in main::$6 = main::y_movement#0 == 1
Adding number conversion cast (snumber) -$28 in main::movement#1 = -$28
Adding number conversion cast (snumber) -1 in main::$7 = main::y_movement#1 == -1
Adding number conversion cast (snumber) $28 in main::movement#2 = $28
Adding number conversion cast (snumber) 0 in main::$52 = 0 != main::movement#3
Adding number conversion cast (unumber) 0 in main::$49 = 0 != screen_buffer#5
Adding number conversion cast (unumber) 0 in main::$50 = 0 != screen_buffer#6
Adding number conversion cast (snumber) 0 in main::$53 = 0 != main::y_movement#2
Adding number conversion cast (snumber) 0 in main::$54 = 0 != main::x_movement#1
Adding number conversion cast (snumber) -1 in main::$20 = main::y_movement#3 == -1
Adding number conversion cast (unumber) $14 in main::$24 = x_pos_coarse#12 - $14
Adding number conversion cast (unumber) main::$24 in main::$24 = x_pos_coarse#12 - (unumber)$14
Adding number conversion cast (unumber) $c in main::$25 = y_pos_coarse#11 + $c
Adding number conversion cast (unumber) main::$25 in main::$25 = y_pos_coarse#11 + (unumber)$c
Adding number conversion cast (unumber) $18*$28 in main::$27 = main::screen_hidden#1 + $18*$28
Adding number conversion cast (unumber) $14 in main::$21 = x_pos_coarse#13 - $14
Adding number conversion cast (unumber) main::$21 in main::$21 = x_pos_coarse#13 - (unumber)$14
Adding number conversion cast (unumber) $c in main::$22 = y_pos_coarse#12 - $c
Adding number conversion cast (unumber) main::$22 in main::$22 = y_pos_coarse#12 - (unumber)$c
Adding number conversion cast (unumber) $28 in main::$28 = main::i#2 < $28
Adding number conversion cast (unumber) 1 in screen_buffer#0 = screen_buffer#7 ^ 1
Adding number conversion cast (snumber) -1 in main::$30 = main::x_movement#2 == -1
Adding number conversion cast (unumber) $13 in main::$34 = x_pos_coarse#14 + $13
Adding number conversion cast (unumber) main::$34 in main::$34 = x_pos_coarse#14 + (unumber)$13
Adding number conversion cast (unumber) $c in main::$35 = y_pos_coarse#13 - $c
Adding number conversion cast (unumber) main::$35 in main::$35 = y_pos_coarse#13 - (unumber)$c
Adding number conversion cast (unumber) $27 in main::$37 = main::screen_hidden#3 + $27
Adding number conversion cast (unumber) $14 in main::$31 = x_pos_coarse#15 - $14
Adding number conversion cast (unumber) main::$31 in main::$31 = x_pos_coarse#15 - (unumber)$14
Adding number conversion cast (unumber) $c in main::$32 = y_pos_coarse#14 - $c
Adding number conversion cast (unumber) main::$32 in main::$32 = y_pos_coarse#14 - (unumber)$c
Adding number conversion cast (unumber) $19 in main::$38 = main::i1#2 < $19
Adding number conversion cast (unumber) $28 in main::scrn#5 = main::scrn#7 + $28
Adding number conversion cast (unumber) $8c in main::petscii#5 = main::petscii#7 + $8c
Adding number conversion cast (unumber) $fe in main::$39 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) != $fe
Adding number conversion cast (unumber) $ff in main::$40 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) != $ff
Adding number conversion cast (unumber) $f0 in main::$41 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & $f0
Adding number conversion cast (unumber) main::$41 in main::$41 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & (unumber)$f0
Adding number conversion cast (unumber) 7 in main::$42 = 7 - y_pos_fine#10
Adding number conversion cast (unumber) main::$42 in main::$42 = (unumber)7 - y_pos_fine#10
Adding number conversion cast (unumber) main::$43 in main::$43 = main::$41 | main::$42
Adding number conversion cast (unumber) $f0 in main::$44 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2) & $f0
Adding number conversion cast (unumber) main::$44 in main::$44 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2) & (unumber)$f0
Adding number conversion cast (unumber) 7 in main::$45 = 7 - x_pos_fine#10
Adding number conversion cast (unumber) main::$45 in main::$45 = (unumber)7 - x_pos_fine#10
Adding number conversion cast (unumber) main::$46 in main::$46 = main::$44 | main::$45
Adding number conversion cast (unumber) 0 in main::$51 = 0 != screen_buffer#8
Adding number conversion cast (unumber) $3fff in main::toD0182_$0 = main::toD0182_$7 & $3fff
Adding number conversion cast (unumber) main::toD0182_$0 in main::toD0182_$0 = main::toD0182_$7 & (unumber)$3fff
Adding number conversion cast (unumber) 4 in main::toD0182_$1 = main::toD0182_$0 * 4
Adding number conversion cast (unumber) main::toD0182_$1 in main::toD0182_$1 = main::toD0182_$0 * (unumber)4
Adding number conversion cast (unumber) main::toD0182_$2 in main::toD0182_$2 = > main::toD0182_$1
Adding number conversion cast (unumber) 4 in main::toD0182_$4 = main::toD0182_$3 / 4
Adding number conversion cast (unumber) main::toD0182_$4 in main::toD0182_$4 = main::toD0182_$3 / (unumber)4
Adding number conversion cast (unumber) $f in main::toD0182_$5 = main::toD0182_$4 & $f
Adding number conversion cast (unumber) main::toD0182_$5 in main::toD0182_$5 = main::toD0182_$4 & (unumber)$f
Adding number conversion cast (unumber) main::toD0182_$6 in main::toD0182_$6 = main::toD0182_$2 | main::toD0182_$5
Adding number conversion cast (unumber) $3fff in main::toD0183_$0 = main::toD0183_$7 & $3fff
Adding number conversion cast (unumber) main::toD0183_$0 in main::toD0183_$0 = main::toD0183_$7 & (unumber)$3fff
Adding number conversion cast (unumber) 4 in main::toD0183_$1 = main::toD0183_$0 * 4
Adding number conversion cast (unumber) main::toD0183_$1 in main::toD0183_$1 = main::toD0183_$0 * (unumber)4
Adding number conversion cast (unumber) main::toD0183_$2 in main::toD0183_$2 = > main::toD0183_$1
Adding number conversion cast (unumber) 4 in main::toD0183_$4 = main::toD0183_$3 / 4
Adding number conversion cast (unumber) main::toD0183_$4 in main::toD0183_$4 = main::toD0183_$3 / (unumber)4
Adding number conversion cast (unumber) $f in main::toD0183_$5 = main::toD0183_$4 & $f
Adding number conversion cast (unumber) main::toD0183_$5 in main::toD0183_$5 = main::toD0183_$4 & (unumber)$f
Adding number conversion cast (unumber) main::toD0183_$6 in main::toD0183_$6 = main::toD0183_$2 | main::toD0183_$5
Adding number conversion cast (unumber) $8c in petscii_ptr::$0 = petscii_ptr::row_y#4 * $8c
Adding number conversion cast (unumber) petscii_ptr::$0 in petscii_ptr::$0 = petscii_ptr::row_y#4 * (unumber)$8c
Adding number conversion cast (unumber) $fa in screencpy::$0 = screencpy::src#1 + $fa
Adding number conversion cast (unumber) $fa in screencpy::$1 = screencpy::dst#1 + $fa
Adding number conversion cast (unumber) $1f4 in screencpy::$2 = screencpy::src#1 + $1f4
Adding number conversion cast (unumber) $1f4 in screencpy::$3 = screencpy::dst#1 + $1f4
Adding number conversion cast (unumber) $2ee in screencpy::$4 = screencpy::src#1 + $2ee
Adding number conversion cast (unumber) $2ee in screencpy::$5 = screencpy::dst#1 + $2ee
Adding number conversion cast (unumber) $fa in screencpy::$6 = screencpy::i#2 < $fa
Adding number conversion cast (unumber) $190 in next_position::$4 = next_position::$14 + $190
Adding number conversion cast (unumber) next_position::$4 in next_position::$4 = next_position::$14 + (unumber)$190
Adding number conversion cast (unumber) $14*8 in next_position::$5 = next_position::$4 + $14*8
Adding number conversion cast (unumber) next_position::$5 in next_position::$5 = next_position::$4 + (unumber)$14*8
Adding number conversion cast (unumber) 7 in next_position::$6 = next_position::$15 & 7
Adding number conversion cast (unumber) next_position::$6 in next_position::$6 = next_position::$15 & (unumber)7
Adding number conversion cast (unumber) 8 in next_position::$7 = next_position::x_pos_u#0 / 8
Adding number conversion cast (unumber) next_position::$7 in next_position::$7 = next_position::x_pos_u#0 / (unumber)8
Adding number conversion cast (unumber) $190 in next_position::$8 = next_position::$16 + $190
Adding number conversion cast (unumber) next_position::$8 in next_position::$8 = next_position::$16 + (unumber)$190
Adding number conversion cast (unumber) $c*8 in next_position::$9 = next_position::$8 + $c*8
Adding number conversion cast (unumber) next_position::$9 in next_position::$9 = next_position::$8 + (unumber)$c*8
Adding number conversion cast (unumber) 7 in next_position::$10 = next_position::$17 & 7
Adding number conversion cast (unumber) next_position::$10 in next_position::$10 = next_position::$17 & (unumber)7
Adding number conversion cast (unumber) 8 in next_position::$11 = next_position::y_pos_u#0 / 8
Adding number conversion cast (unumber) next_position::$11 in next_position::$11 = next_position::y_pos_u#0 / (unumber)8
Adding number conversion cast (unumber) 4 in y_sin_idx#6 = (word)SINSIZE/4
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast memset::dst#0 = (byte*)memset::str#2
Inlining cast memset::num#0 = (unumber)$3e8
Inlining cast main::movement#1 = (snumber)-$28
Inlining cast main::movement#2 = (snumber)$28
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (struct MOS6569_VICII*) 53248
Simplifying constant pointer cast (byte*) 14336
Simplifying constant pointer cast (byte*) 15360
Simplifying constant pointer cast (byte*) 4096
Simplifying constant integer cast 0
Simplifying constant integer cast $3e8
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 1
Simplifying constant integer cast -$28
Simplifying constant integer cast -1
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast -1
Simplifying constant integer cast $14
Simplifying constant integer cast $c
Simplifying constant integer cast $14
Simplifying constant integer cast $c
Simplifying constant integer cast $28
Simplifying constant integer cast 1
Simplifying constant integer cast -1
Simplifying constant integer cast $13
Simplifying constant integer cast $c
Simplifying constant integer cast $27
Simplifying constant integer cast $14
Simplifying constant integer cast $c
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast $8c
Simplifying constant integer cast $fe
Simplifying constant integer cast $ff
Simplifying constant integer cast $f0
Simplifying constant integer cast 7
Simplifying constant integer cast $f0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $8c
Simplifying constant integer cast $fa
Simplifying constant integer cast $fa
Simplifying constant integer cast $1f4
Simplifying constant integer cast $1f4
Simplifying constant integer cast $2ee
Simplifying constant integer cast $2ee
Simplifying constant integer cast $fa
Simplifying constant integer cast $190
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast $190
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 4
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Finalized unsigned number type $3e8
Finalized unsigned number type $3fff
Finalized unsigned number type 4
Finalized unsigned number type 4
Finalized unsigned number type $f
Finalized signed number type 1
Finalized signed number type -$28
Finalized signed number type -1
Finalized signed number type $28
Finalized signed number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized signed number type 0
Finalized signed number type 0
Finalized signed number type -1
Finalized unsigned number type $14
Finalized unsigned number type $c
Finalized unsigned number type $14
Finalized unsigned number type $c
Finalized unsigned number type $28
Finalized unsigned number type 1
Finalized signed number type -1
Finalized unsigned number type $13
Finalized unsigned number type $c
Finalized unsigned number type $27
Finalized unsigned number type $14
Finalized unsigned number type $c
Finalized unsigned number type $19
Finalized unsigned number type $28
Finalized unsigned number type $8c
Finalized unsigned number type $fe
Finalized unsigned number type $ff
Finalized unsigned number type $f0
Finalized unsigned number type 7
Finalized unsigned number type $f0
Finalized unsigned number type 7
Finalized unsigned number type 0
Finalized unsigned number type $3fff
Finalized unsigned number type 4
Finalized unsigned number type 4
Finalized unsigned number type $f
Finalized unsigned number type $3fff
Finalized unsigned number type 4
Finalized unsigned number type 4
Finalized unsigned number type $f
Finalized unsigned number type $8c
Finalized unsigned number type $fa
Finalized unsigned number type $fa
Finalized unsigned number type $1f4
Finalized unsigned number type $1f4
Finalized unsigned number type $2ee
Finalized unsigned number type $2ee
Finalized unsigned number type $fa
Finalized unsigned number type $190
Finalized unsigned number type 7
Finalized unsigned number type 8
Finalized unsigned number type $190
Finalized unsigned number type 7
Finalized unsigned number type 8
Finalized unsigned number type 4
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to word in main::toD0181_$0 = main::toD0181_$7 & $3fff
Inferred type updated to word in main::toD0181_$1 = main::toD0181_$0 * 4
Inferred type updated to byte in main::toD0181_$2 = > main::toD0181_$1
Inferred type updated to byte in main::toD0181_$4 = main::toD0181_$3 / 4
Inferred type updated to byte in main::toD0181_$5 = main::toD0181_$4 & $f
Inferred type updated to byte in main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
Inferred type updated to word in main::$24 = x_pos_coarse#12 - $14
Inferred type updated to word in main::$25 = y_pos_coarse#11 + $c
Inferred type updated to word in main::$21 = x_pos_coarse#13 - $14
Inferred type updated to word in main::$22 = y_pos_coarse#12 - $c
Inferred type updated to word in main::$34 = x_pos_coarse#14 + $13
Inferred type updated to word in main::$35 = y_pos_coarse#13 - $c
Inferred type updated to word in main::$31 = x_pos_coarse#15 - $14
Inferred type updated to word in main::$32 = y_pos_coarse#14 - $c
Inferred type updated to byte in main::$41 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & $f0
Inferred type updated to byte in main::$42 = 7 - y_pos_fine#10
Inferred type updated to byte in main::$43 = main::$41 | main::$42
Inferred type updated to byte in main::$44 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2) & $f0
Inferred type updated to byte in main::$45 = 7 - x_pos_fine#10
Inferred type updated to byte in main::$46 = main::$44 | main::$45
Inferred type updated to word in main::toD0182_$0 = main::toD0182_$7 & $3fff
Inferred type updated to word in main::toD0182_$1 = main::toD0182_$0 * 4
Inferred type updated to byte in main::toD0182_$2 = > main::toD0182_$1
Inferred type updated to byte in main::toD0182_$4 = main::toD0182_$3 / 4
Inferred type updated to byte in main::toD0182_$5 = main::toD0182_$4 & $f
Inferred type updated to byte in main::toD0182_$6 = main::toD0182_$2 | main::toD0182_$5
Inferred type updated to word in main::toD0183_$0 = main::toD0183_$7 & $3fff
Inferred type updated to word in main::toD0183_$1 = main::toD0183_$0 * 4
Inferred type updated to byte in main::toD0183_$2 = > main::toD0183_$1
Inferred type updated to byte in main::toD0183_$4 = main::toD0183_$3 / 4
Inferred type updated to byte in main::toD0183_$5 = main::toD0183_$4 & $f
Inferred type updated to byte in main::toD0183_$6 = main::toD0183_$2 | main::toD0183_$5
Inferred type updated to word in petscii_ptr::$0 = petscii_ptr::row_y#4 * $8c
Inferred type updated to word in next_position::$4 = next_position::$14 + $190
Inferred type updated to word in next_position::$5 = next_position::$4 + (byte)$14*8
Inferred type updated to byte in next_position::$6 = next_position::$15 & 7
Inferred type updated to word in next_position::$7 = next_position::x_pos_u#0 / 8
Inferred type updated to word in next_position::$8 = next_position::$16 + $190
Inferred type updated to word in next_position::$9 = next_position::$8 + (byte)$c*8
Inferred type updated to byte in next_position::$10 = next_position::$17 & 7
Inferred type updated to word in next_position::$11 = next_position::y_pos_u#0 / 8
Inversing boolean not [2] memset::$1 = memset::num#1 <= 0 from [1] memset::$0 = memset::num#1 > 0
Inversing boolean not [79] main::$8 = main::y_movement#1 != -1 from [78] main::$7 = main::y_movement#1 == -1
Inversing boolean not [88] main::$10 = 0 == main::movement#3 from [87] main::$52 = 0 != main::movement#3
Inversing boolean not [115] main::$19 = 0 == main::y_movement#2 from [114] main::$53 = 0 != main::y_movement#2
Inversing boolean not [119] main::$29 = 0 == main::x_movement#1 from [118] main::$54 = 0 != main::x_movement#1
Inversing boolean not [295] next_position::$1 = x_sin_idx#3 < SINSIZE from [294] next_position::$0 = x_sin_idx#3 >= SINSIZE
Inversing boolean not [300] next_position::$3 = y_sin_idx#3 < SINSIZE from [299] next_position::$2 = y_sin_idx#3 >= SINSIZE
Successful SSA optimization Pass2UnaryNotSimplification
Alias memset::return#0 = memset::str#1 memset::return#3 memset::return#1 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::end#0 = memset::$2 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias x_sin_idx#18 = x_sin_idx#34 x_sin_idx#37 x_sin_idx#31 x_sin_idx#28 x_sin_idx#25 x_sin_idx#23 
Alias y_sin_idx#18 = y_sin_idx#34 y_sin_idx#37 y_sin_idx#31 y_sin_idx#28 y_sin_idx#25 y_sin_idx#23 
Alias x_pos#14 = x_pos#28 x_pos#31 x_pos#25 x_pos#22 x_pos#19 x_pos#17 
Alias y_pos#14 = y_pos#28 y_pos#31 y_pos#25 y_pos#22 y_pos#19 y_pos#17 
Alias x_pos_fine#15 = x_pos_fine#42 x_pos_fine#50 x_pos_fine#35 x_pos_fine#27 x_pos_fine#22 x_pos_fine#19 
Alias x_pos_coarse#20 = x_pos_coarse#51 x_pos_coarse#55 x_pos_coarse#45 x_pos_coarse#38 x_pos_coarse#33 x_pos_coarse#28 
Alias y_pos_fine#15 = y_pos_fine#42 y_pos_fine#50 y_pos_fine#35 y_pos_fine#27 y_pos_fine#22 y_pos_fine#19 
Alias y_pos_coarse#19 = y_pos_coarse#47 y_pos_coarse#51 y_pos_coarse#41 y_pos_coarse#34 y_pos_coarse#29 y_pos_coarse#24 
Alias screen_buffer#41 = screen_buffer#59 screen_buffer#60 screen_buffer#58 screen_buffer#55 screen_buffer#52 screen_buffer#49 screen_buffer#45 
Alias main::toD0181_screen#0 = main::toD0181_screen#1 
Alias main::toD0181_gfx#0 = main::toD0181_gfx#1 
Alias main::toD0181_return#0 = main::toD0181_$6 main::toD0181_return#2 main::toD0181_return#1 main::toD0181_return#3 main::$2 
Alias x_sin_idx#0 = x_sin_idx#9 
Alias y_sin_idx#0 = y_sin_idx#9 
Alias x_pos#0 = x_pos#8 
Alias y_pos#0 = y_pos#8 
Alias x_pos_fine#0 = x_pos_fine#8 
Alias x_pos_coarse#0 = x_pos_coarse#8 
Alias y_pos_fine#0 = y_pos_fine#8 
Alias y_pos_coarse#0 = y_pos_coarse#8 
Alias main::y_pos_coarse_old#0 = main::y_pos_coarse_old#1 
Alias main::x_pos_coarse_old#0 = main::x_pos_coarse_old#5 main::x_pos_coarse_old#2 main::x_pos_coarse_old#3 main::x_pos_coarse_old#4 
Alias screen_buffer#19 = screen_buffer#27 screen_buffer#33 screen_buffer#20 screen_buffer#21 
Alias x_sin_idx#1 = x_sin_idx#10 x_sin_idx#43 x_sin_idx#44 x_sin_idx#45 
Alias y_sin_idx#1 = y_sin_idx#10 y_sin_idx#43 y_sin_idx#44 y_sin_idx#45 
Alias x_pos#1 = x_pos#9 x_pos#37 x_pos#38 x_pos#39 
Alias y_pos#1 = y_pos#9 y_pos#37 y_pos#38 y_pos#39 
Alias x_pos_fine#1 = x_pos_fine#9 x_pos_fine#28 x_pos_fine#29 x_pos_fine#30 
Alias x_pos_coarse#1 = x_pos_coarse#10 x_pos_coarse#22 x_pos_coarse#23 x_pos_coarse#24 
Alias y_pos_fine#1 = y_pos_fine#9 y_pos_fine#28 y_pos_fine#29 y_pos_fine#30 
Alias y_pos_coarse#1 = y_pos_coarse#10 y_pos_coarse#56 y_pos_coarse#57 y_pos_coarse#58 
Alias main::y_movement#0 = main::y_movement#12 main::y_movement#1 main::y_movement#13 
Alias main::movement#0 = main::movement#6 
Alias screen_buffer#12 = screen_buffer#5 screen_buffer#13 screen_buffer#14 
Alias main::movement#3 = main::movement#9 main::movement#7 main::movement#8 
Alias main::y_movement#10 = main::y_movement#11 main::y_movement#8 main::y_movement#9 
Alias main::x_movement#0 = main::x_movement#18 main::x_movement#15 main::x_movement#16 
Alias x_pos_coarse#11 = x_pos_coarse#56 x_pos_coarse#52 x_pos_coarse#53 
Alias y_pos_coarse#48 = y_pos_coarse#52 y_pos_coarse#54 y_pos_coarse#49 
Alias y_pos_fine#24 = y_pos_fine#64 y_pos_fine#61 y_pos_fine#62 
Alias x_pos_fine#24 = x_pos_fine#64 x_pos_fine#61 x_pos_fine#62 
Alias x_sin_idx#42 = x_sin_idx#70 x_sin_idx#67 x_sin_idx#68 
Alias y_sin_idx#42 = y_sin_idx#70 y_sin_idx#67 y_sin_idx#68 
Alias x_pos#36 = x_pos#64 x_pos#61 x_pos#62 
Alias y_pos#36 = y_pos#64 y_pos#61 y_pos#62 
Alias main::screen_active#0 = main::$14 main::screen_active#2 main::screen_active#3 
Alias main::y_movement#5 = main::y_movement#7 main::y_movement#6 
Alias main::x_movement#12 = main::x_movement#8 main::x_movement#9 
Alias screen_buffer#34 = screen_buffer#6 screen_buffer#35 
Alias x_pos_coarse#39 = x_pos_coarse#46 x_pos_coarse#40 
Alias y_pos_coarse#35 = y_pos_coarse#42 y_pos_coarse#36 
Alias y_pos_fine#51 = y_pos_fine#57 y_pos_fine#52 
Alias x_pos_fine#51 = x_pos_fine#57 x_pos_fine#52 
Alias x_sin_idx#57 = x_sin_idx#63 x_sin_idx#58 
Alias y_sin_idx#57 = y_sin_idx#63 y_sin_idx#58 
Alias x_pos#51 = x_pos#57 x_pos#52 
Alias y_pos#51 = y_pos#57 y_pos#52 
Alias main::screen_hidden#0 = main::$17 main::screen_hidden#11 main::screen_hidden#9 main::screen_hidden#5 main::screen_hidden#1 main::screen_hidden#6 main::screen_hidden#2 main::scrn#2 
Alias main::y_movement#2 = main::y_movement#4 main::y_movement#3 
Alias main::x_movement#10 = main::x_movement#4 main::x_movement#5 main::x_movement#17 main::x_movement#13 main::x_movement#14 main::x_movement#11 
Alias screen_buffer#23 = screen_buffer#28 screen_buffer#46 screen_buffer#42 screen_buffer#36 screen_buffer#43 screen_buffer#37 
Alias x_pos_coarse#12 = x_pos_coarse#29 x_pos_coarse#34 x_pos_coarse#25 x_pos_coarse#47 x_pos_coarse#13 x_pos_coarse#48 
Alias y_pos_coarse#11 = y_pos_coarse#25 y_pos_coarse#30 y_pos_coarse#21 y_pos_coarse#43 y_pos_coarse#12 y_pos_coarse#44 
Alias y_pos_fine#37 = y_pos_fine#43 y_pos_fine#63 y_pos_fine#58 y_pos_fine#53 y_pos_fine#59 y_pos_fine#54 
Alias x_pos_fine#37 = x_pos_fine#43 x_pos_fine#63 x_pos_fine#58 x_pos_fine#53 x_pos_fine#59 x_pos_fine#54 
Alias x_sin_idx#49 = x_sin_idx#52 x_sin_idx#69 x_sin_idx#64 x_sin_idx#59 x_sin_idx#65 x_sin_idx#60 
Alias y_sin_idx#49 = y_sin_idx#52 y_sin_idx#69 y_sin_idx#64 y_sin_idx#59 y_sin_idx#65 y_sin_idx#60 
Alias x_pos#43 = x_pos#46 x_pos#63 x_pos#58 x_pos#53 x_pos#59 x_pos#54 
Alias y_pos#43 = y_pos#46 y_pos#63 y_pos#58 y_pos#53 y_pos#59 y_pos#54 
Alias petscii_ptr::row_x#0 = main::$24 
Alias petscii_ptr::row_y#0 = main::$25 
Alias petscii_ptr::return#0 = petscii_ptr::return#6 
Alias main::petscii#1 = main::$26 
Alias main::scrn#1 = main::$27 
Alias petscii_ptr::row_x#1 = main::$21 
Alias petscii_ptr::row_y#1 = main::$22 
Alias petscii_ptr::return#1 = petscii_ptr::return#7 
Alias main::petscii#2 = main::$23 
Alias main::petscii#6 = main::petscii#8 
Alias main::i#2 = main::i#3 
Alias main::scrn#6 = main::scrn#8 
Alias main::x_movement#3 = main::x_movement#7 
Alias screen_buffer#22 = screen_buffer#30 
Alias x_pos_coarse#35 = x_pos_coarse#42 
Alias y_pos_coarse#31 = y_pos_coarse#38 
Alias main::screen_hidden#13 = main::screen_hidden#15 
Alias y_pos_fine#36 = y_pos_fine#45 
Alias x_pos_fine#36 = x_pos_fine#45 
Alias x_sin_idx#48 = x_sin_idx#54 
Alias y_sin_idx#48 = y_sin_idx#54 
Alias x_pos#42 = x_pos#48 
Alias y_pos#42 = y_pos#48 
Alias main::x_movement#1 = main::x_movement#2 
Alias x_pos_coarse#14 = x_pos_coarse#26 x_pos_coarse#30 x_pos_coarse#63 x_pos_coarse#15 x_pos_coarse#64 
Alias y_pos_coarse#13 = y_pos_coarse#22 y_pos_coarse#26 y_pos_coarse#63 y_pos_coarse#14 y_pos_coarse#64 
Alias main::screen_hidden#10 = main::screen_hidden#12 main::screen_hidden#7 main::screen_hidden#3 main::screen_hidden#8 main::screen_hidden#4 main::scrn#4 
Alias screen_buffer#15 = screen_buffer#44 screen_buffer#38 screen_buffer#31 screen_buffer#39 screen_buffer#32 
Alias y_pos_fine#31 = y_pos_fine#60 y_pos_fine#55 y_pos_fine#46 y_pos_fine#56 y_pos_fine#47 
Alias x_pos_fine#31 = x_pos_fine#60 x_pos_fine#55 x_pos_fine#46 x_pos_fine#56 x_pos_fine#47 
Alias x_sin_idx#46 = x_sin_idx#66 x_sin_idx#61 x_sin_idx#55 x_sin_idx#62 x_sin_idx#56 
Alias y_sin_idx#46 = y_sin_idx#66 y_sin_idx#61 y_sin_idx#55 y_sin_idx#62 y_sin_idx#56 
Alias x_pos#40 = x_pos#60 x_pos#55 x_pos#49 x_pos#56 x_pos#50 
Alias y_pos#40 = y_pos#60 y_pos#55 y_pos#49 y_pos#56 y_pos#50 
Alias petscii_ptr::row_x#2 = main::$34 
Alias petscii_ptr::row_y#2 = main::$35 
Alias petscii_ptr::return#2 = petscii_ptr::return#8 
Alias main::petscii#3 = main::$36 
Alias main::scrn#3 = main::$37 
Alias petscii_ptr::row_x#3 = main::$31 
Alias petscii_ptr::row_y#3 = main::$32 
Alias petscii_ptr::return#3 = petscii_ptr::return#9 
Alias main::petscii#4 = main::$33 
Alias main::petscii#7 = main::petscii#9 
Alias main::scrn#7 = main::scrn#9 
Alias main::i1#2 = main::i1#3 
Alias screen_buffer#16 = screen_buffer#25 
Alias y_pos_fine#32 = y_pos_fine#39 
Alias x_pos_fine#32 = x_pos_fine#39 
Alias x_pos_coarse#60 = x_pos_coarse#62 
Alias y_pos_coarse#60 = y_pos_coarse#62 
Alias x_sin_idx#47 = x_sin_idx#51 
Alias y_sin_idx#47 = y_sin_idx#51 
Alias x_pos#41 = x_pos#45 
Alias y_pos#41 = y_pos#45 
Alias y_pos_fine#10 = y_pos_fine#17 y_pos_fine#48 y_pos_fine#40 y_pos_fine#33 y_pos_fine#25 y_pos_fine#49 y_pos_fine#41 y_pos_fine#34 y_pos_fine#26 
Alias x_pos_fine#10 = x_pos_fine#17 x_pos_fine#48 x_pos_fine#40 x_pos_fine#33 x_pos_fine#25 x_pos_fine#49 x_pos_fine#41 x_pos_fine#34 x_pos_fine#26 
Alias screen_buffer#17 = screen_buffer#8 screen_buffer#56 screen_buffer#53 screen_buffer#50 screen_buffer#47 screen_buffer#57 screen_buffer#54 screen_buffer#51 screen_buffer#48 
Alias x_pos_coarse#31 = x_pos_coarse#54 x_pos_coarse#57 x_pos_coarse#49 x_pos_coarse#43 x_pos_coarse#36 x_pos_coarse#50 x_pos_coarse#44 x_pos_coarse#37 x_pos_coarse#32 
Alias y_pos_coarse#27 = y_pos_coarse#50 y_pos_coarse#53 y_pos_coarse#45 y_pos_coarse#39 y_pos_coarse#32 y_pos_coarse#46 y_pos_coarse#40 y_pos_coarse#33 y_pos_coarse#28 
Alias x_sin_idx#26 = x_sin_idx#38 x_sin_idx#39 x_sin_idx#35 x_sin_idx#32 x_sin_idx#29 x_sin_idx#36 x_sin_idx#33 x_sin_idx#30 x_sin_idx#27 
Alias y_sin_idx#26 = y_sin_idx#38 y_sin_idx#39 y_sin_idx#35 y_sin_idx#32 y_sin_idx#29 y_sin_idx#36 y_sin_idx#33 y_sin_idx#30 y_sin_idx#27 
Alias x_pos#20 = x_pos#32 x_pos#33 x_pos#29 x_pos#26 x_pos#23 x_pos#30 x_pos#27 x_pos#24 x_pos#21 
Alias y_pos#20 = y_pos#32 y_pos#33 y_pos#29 y_pos#26 y_pos#23 y_pos#30 y_pos#27 y_pos#24 y_pos#21 
Alias main::toD0182_screen#0 = main::toD0182_screen#1 
Alias main::toD0182_gfx#0 = main::toD0182_gfx#1 
Alias main::toD0182_return#0 = main::toD0182_$6 main::toD0182_return#2 main::toD0182_return#1 main::toD0182_return#3 main::$48 
Alias main::toD0183_screen#0 = main::toD0183_screen#1 
Alias main::toD0183_gfx#0 = main::toD0183_gfx#1 
Alias main::toD0183_return#0 = main::toD0183_$6 main::toD0183_return#2 main::toD0183_return#1 main::toD0183_return#3 main::$47 
Alias x_sin_idx#11 = x_sin_idx#2 
Alias y_sin_idx#11 = y_sin_idx#2 
Alias x_pos#10 = x_pos#2 
Alias y_pos#10 = y_pos#2 
Alias x_pos_fine#11 = x_pos_fine#2 
Alias x_pos_coarse#16 = x_pos_coarse#2 
Alias y_pos_fine#11 = y_pos_fine#2 
Alias y_pos_coarse#15 = y_pos_coarse#2 
Alias screen_buffer#1 = screen_buffer#9 
Alias petscii_ptr::return#10 = petscii_ptr::return#4 petscii_ptr::$2 petscii_ptr::return#5 
Alias screencpy::src_250#0 = screencpy::$0 
Alias screencpy::dst_250#0 = screencpy::$1 
Alias screencpy::src_500#0 = screencpy::$2 
Alias screencpy::dst_500#0 = screencpy::$3 
Alias screencpy::src_750#0 = screencpy::$4 
Alias screencpy::dst_750#0 = screencpy::$5 
Alias screencpy::src#2 = screencpy::src#3 
Alias screencpy::i#2 = screencpy::i#3 
Alias screencpy::dst#2 = screencpy::dst#3 
Alias screencpy::src_250#1 = screencpy::src_250#2 
Alias screencpy::dst_250#1 = screencpy::dst_250#2 
Alias screencpy::src_500#1 = screencpy::src_500#2 
Alias screencpy::dst_500#1 = screencpy::dst_500#2 
Alias screencpy::src_750#1 = screencpy::src_750#2 
Alias screencpy::dst_750#1 = screencpy::dst_750#2 
Alias x_sin_idx#13 = x_sin_idx#3 
Alias y_sin_idx#20 = y_sin_idx#21 
Alias next_position::x_pos_u#0 = next_position::$5 
Alias x_pos_fine#12 = x_pos_fine#3 next_position::$6 x_pos_fine#4 
Alias x_pos_coarse#17 = x_pos_coarse#3 next_position::$7 x_pos_coarse#4 
Alias next_position::y_pos_u#0 = next_position::$9 
Alias y_pos_fine#12 = y_pos_fine#3 next_position::$10 y_pos_fine#4 
Alias y_pos_coarse#16 = y_pos_coarse#3 next_position::$11 y_pos_coarse#4 
Alias y_sin_idx#14 = y_sin_idx#3 
Alias x_sin_idx#20 = x_sin_idx#21 
Alias x_sin_idx#14 = x_sin_idx#15 x_sin_idx#5 
Alias y_sin_idx#13 = y_sin_idx#15 y_sin_idx#5 
Alias x_pos#11 = x_pos#3 x_pos#4 
Alias y_pos#11 = y_pos#3 y_pos#4 
Alias x_sin_idx#22 = x_sin_idx#6 
Alias y_sin_idx#22 = y_sin_idx#6 
Alias x_pos#16 = x_pos#5 
Alias y_pos#16 = y_pos#5 
Alias x_pos_fine#18 = x_pos_fine#5 
Alias x_pos_coarse#27 = x_pos_coarse#5 
Alias y_pos_fine#18 = y_pos_fine#5 
Alias y_pos_coarse#23 = y_pos_coarse#5 
Alias screen_buffer#18 = screen_buffer#2 
Alias x_sin_idx#16 = x_sin_idx#7 x_sin_idx#17 x_sin_idx#8 
Alias y_sin_idx#16 = y_sin_idx#7 y_sin_idx#17 y_sin_idx#8 
Alias x_pos#12 = x_pos#6 x_pos#13 x_pos#7 
Alias y_pos#12 = y_pos#6 y_pos#13 y_pos#7 
Alias x_pos_fine#13 = x_pos_fine#6 x_pos_fine#14 x_pos_fine#7 
Alias x_pos_coarse#18 = x_pos_coarse#6 x_pos_coarse#19 x_pos_coarse#7 
Alias y_pos_fine#13 = y_pos_fine#6 y_pos_fine#14 y_pos_fine#7 
Alias y_pos_coarse#17 = y_pos_coarse#6 y_pos_coarse#18 y_pos_coarse#7 
Alias screen_buffer#10 = screen_buffer#3 screen_buffer#11 screen_buffer#4 
Successful SSA optimization Pass2AliasElimination
Alias main::x_pos_coarse_old#0 = main::x_pos_coarse_old#1 
Alias x_pos_coarse#1 = x_pos_coarse#11 x_pos_coarse#39 x_pos_coarse#12 x_pos_coarse#41 
Alias screen_buffer#12 = screen_buffer#19 screen_buffer#34 screen_buffer#23 screen_buffer#29 
Alias y_pos_fine#1 = y_pos_fine#24 y_pos_fine#51 y_pos_fine#37 y_pos_fine#44 
Alias x_pos_fine#1 = x_pos_fine#24 x_pos_fine#51 x_pos_fine#37 x_pos_fine#44 
Alias main::y_movement#0 = main::y_movement#10 main::y_movement#5 main::y_movement#2 
Alias y_pos_coarse#1 = y_pos_coarse#48 y_pos_coarse#35 y_pos_coarse#11 y_pos_coarse#37 
Alias x_sin_idx#1 = x_sin_idx#42 x_sin_idx#57 x_sin_idx#49 x_sin_idx#53 
Alias y_sin_idx#1 = y_sin_idx#42 y_sin_idx#57 y_sin_idx#49 y_sin_idx#53 
Alias x_pos#1 = x_pos#36 x_pos#51 x_pos#43 x_pos#47 
Alias y_pos#1 = y_pos#36 y_pos#51 y_pos#43 y_pos#47 
Alias main::movement#3 = main::movement#5 
Alias main::x_movement#0 = main::x_movement#12 main::x_movement#10 main::x_movement#6 
Alias main::screen_active#0 = main::screen_active#1 
Alias main::screen_hidden#0 = main::screen_hidden#14 
Alias screen_buffer#15 = screen_buffer#24 
Alias y_pos_fine#31 = y_pos_fine#38 
Alias x_pos_fine#31 = x_pos_fine#38 
Alias x_pos_coarse#14 = x_pos_coarse#61 
Alias y_pos_coarse#13 = y_pos_coarse#61 
Alias x_sin_idx#46 = x_sin_idx#50 
Alias y_sin_idx#46 = y_sin_idx#50 
Alias x_pos#40 = x_pos#44 
Alias y_pos#40 = y_pos#44 
Alias x_pos_coarse#21 = x_pos_coarse#31 
Alias y_pos_coarse#20 = y_pos_coarse#27 
Alias x_sin_idx#24 = x_sin_idx#26 
Alias y_sin_idx#24 = y_sin_idx#26 
Alias x_pos#18 = x_pos#20 
Alias y_pos#18 = y_pos#20 
Alias x_pos_fine#10 = x_pos_fine#20 
Alias y_pos_fine#10 = y_pos_fine#20 
Alias screen_buffer#17 = screen_buffer#40 
Alias y_sin_idx#12 = y_sin_idx#20 
Alias x_sin_idx#14 = x_sin_idx#20 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values memset::num#1 memset::num#0
Identical Phi Values memset::str#2 memset::str#0
Identical Phi Values memset::c#3 memset::c#0
Identical Phi Values memset::end#1 memset::end#0
Identical Phi Values memset::str#4 memset::str#2
Identical Phi Values memset::c#1 memset::c#3
Identical Phi Values x_sin_idx#18 x_sin_idx#22
Identical Phi Values y_sin_idx#18 y_sin_idx#22
Identical Phi Values x_pos#14 x_pos#16
Identical Phi Values y_pos#14 y_pos#16
Identical Phi Values x_pos_fine#15 x_pos_fine#18
Identical Phi Values x_pos_coarse#20 x_pos_coarse#27
Identical Phi Values y_pos_fine#15 y_pos_fine#18
Identical Phi Values y_pos_coarse#19 y_pos_coarse#23
Identical Phi Values screen_buffer#41 screen_buffer#18
Identical Phi Values x_sin_idx#0 x_sin_idx#14
Identical Phi Values y_sin_idx#0 y_sin_idx#13
Identical Phi Values x_pos#0 x_pos#11
Identical Phi Values y_pos#0 y_pos#11
Identical Phi Values x_pos_fine#0 x_pos_fine#12
Identical Phi Values x_pos_coarse#0 x_pos_coarse#17
Identical Phi Values y_pos_fine#0 y_pos_fine#12
Identical Phi Values y_pos_coarse#0 y_pos_coarse#16
Identical Phi Values x_sin_idx#1 x_sin_idx#14
Identical Phi Values y_sin_idx#1 y_sin_idx#13
Identical Phi Values x_pos#1 x_pos#11
Identical Phi Values y_pos#1 y_pos#11
Identical Phi Values x_pos_fine#1 x_pos_fine#12
Identical Phi Values x_pos_coarse#1 x_pos_coarse#17
Identical Phi Values y_pos_fine#1 y_pos_fine#12
Identical Phi Values y_pos_coarse#1 y_pos_coarse#16
Identical Phi Values main::x_movement#3 main::x_movement#0
Identical Phi Values main::petscii#6 main::petscii#10
Identical Phi Values main::scrn#6 main::scrn#10
Identical Phi Values screen_buffer#22 screen_buffer#12
Identical Phi Values x_pos_coarse#35 x_pos_coarse#1
Identical Phi Values y_pos_coarse#31 y_pos_coarse#1
Identical Phi Values main::screen_hidden#13 main::screen_hidden#0
Identical Phi Values y_pos_fine#36 y_pos_fine#1
Identical Phi Values x_pos_fine#36 x_pos_fine#1
Identical Phi Values x_sin_idx#48 x_sin_idx#1
Identical Phi Values y_sin_idx#48 y_sin_idx#1
Identical Phi Values x_pos#42 x_pos#1
Identical Phi Values y_pos#42 y_pos#1
Identical Phi Values screen_buffer#16 screen_buffer#15
Identical Phi Values y_pos_fine#32 y_pos_fine#31
Identical Phi Values x_pos_fine#32 x_pos_fine#31
Identical Phi Values x_pos_coarse#60 x_pos_coarse#14
Identical Phi Values y_pos_coarse#60 y_pos_coarse#13
Identical Phi Values x_sin_idx#47 x_sin_idx#46
Identical Phi Values y_sin_idx#47 y_sin_idx#46
Identical Phi Values x_pos#41 x_pos#40
Identical Phi Values y_pos#41 y_pos#40
Identical Phi Values y_pos_fine#10 y_pos_fine#21
Identical Phi Values x_pos_fine#10 x_pos_fine#21
Identical Phi Values screen_buffer#17 screen_buffer#26
Identical Phi Values x_pos_coarse#21 x_pos_coarse#58
Identical Phi Values y_pos_coarse#20 y_pos_coarse#55
Identical Phi Values x_sin_idx#24 x_sin_idx#40
Identical Phi Values y_sin_idx#24 y_sin_idx#40
Identical Phi Values x_pos#18 x_pos#34
Identical Phi Values y_pos#18 y_pos#34
Identical Phi Values screencpy::src#1 screencpy::src#0
Identical Phi Values screencpy::dst#1 screencpy::dst#0
Identical Phi Values screencpy::src#2 screencpy::src#1
Identical Phi Values screencpy::dst#2 screencpy::dst#1
Identical Phi Values screencpy::src_250#1 screencpy::src_250#0
Identical Phi Values screencpy::dst_250#1 screencpy::dst_250#0
Identical Phi Values screencpy::src_500#1 screencpy::src_500#0
Identical Phi Values screencpy::dst_500#1 screencpy::dst_500#0
Identical Phi Values screencpy::src_750#1 screencpy::src_750#0
Identical Phi Values screencpy::dst_750#1 screencpy::dst_750#0
Identical Phi Values x_sin_idx#16 x_sin_idx#11
Identical Phi Values y_sin_idx#16 y_sin_idx#11
Identical Phi Values x_pos#12 x_pos#10
Identical Phi Values y_pos#12 y_pos#10
Identical Phi Values x_pos_fine#13 x_pos_fine#11
Identical Phi Values x_pos_coarse#18 x_pos_coarse#16
Identical Phi Values y_pos_fine#13 y_pos_fine#11
Identical Phi Values y_pos_coarse#17 y_pos_coarse#15
Identical Phi Values screen_buffer#10 screen_buffer#1
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values memset::return#0 memset::str#0
Identical Phi Values main::x_movement#1 main::x_movement#0
Identical Phi Values screen_buffer#15 screen_buffer#12
Identical Phi Values x_pos_coarse#14 x_pos_coarse#17
Identical Phi Values y_pos_coarse#13 y_pos_coarse#16
Identical Phi Values main::screen_hidden#10 main::screen_hidden#0
Identical Phi Values y_pos_fine#31 y_pos_fine#12
Identical Phi Values x_pos_fine#31 x_pos_fine#12
Identical Phi Values x_sin_idx#46 x_sin_idx#14
Identical Phi Values y_sin_idx#46 y_sin_idx#13
Identical Phi Values x_pos#40 x_pos#11
Identical Phi Values y_pos#40 y_pos#11
Identical Phi Values screen_buffer#7 screen_buffer#15
Identical Phi Values y_pos_fine#23 y_pos_fine#31
Identical Phi Values x_pos_fine#23 x_pos_fine#31
Identical Phi Values x_pos_coarse#59 x_pos_coarse#14
Identical Phi Values y_pos_coarse#59 y_pos_coarse#13
Identical Phi Values x_sin_idx#41 x_sin_idx#46
Identical Phi Values y_sin_idx#41 y_sin_idx#46
Identical Phi Values x_pos#35 x_pos#40
Identical Phi Values y_pos#35 y_pos#40
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values y_pos_fine#21 y_pos_fine#12
Identical Phi Values x_pos_fine#21 x_pos_fine#12
Identical Phi Values x_pos_coarse#58 x_pos_coarse#17
Identical Phi Values y_pos_coarse#55 y_pos_coarse#16
Identical Phi Values x_sin_idx#40 x_sin_idx#14
Identical Phi Values y_sin_idx#40 y_sin_idx#13
Identical Phi Values x_pos#34 x_pos#11
Identical Phi Values y_pos#34 y_pos#11
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values x_pos_coarse#9 x_pos_coarse#17
Identical Phi Values y_pos_coarse#9 y_pos_coarse#16
Identical Phi Values x_sin_idx#19 x_sin_idx#14
Identical Phi Values y_sin_idx#19 y_sin_idx#13
Identical Phi Values x_pos#15 x_pos#11
Identical Phi Values y_pos#15 y_pos#11
Identical Phi Values x_pos_fine#16 x_pos_fine#12
Identical Phi Values y_pos_fine#16 y_pos_fine#12
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition memset::$1 [2] if(memset::num#0<=0) goto memset::@1
Simple Condition memset::$3 [9] if(memset::dst#2!=memset::end#0) goto memset::@4
Simple Condition main::$6 [42] if(main::y_movement#0==1) goto main::@2
Simple Condition main::$8 [45] if(main::y_movement#0!=-1) goto main::@3
Simple Condition main::$10 [52] if(0==main::movement#3) goto main::@24
Simple Condition main::$49 [54] if(0!=screen_buffer#12) goto main::@4
Simple Condition main::$50 [60] if(0!=screen_buffer#12) goto main::@7
Simple Condition main::$19 [70] if(0==main::y_movement#0) goto main::@10
Simple Condition main::$29 [73] if(0==main::x_movement#0) goto main::@15
Simple Condition main::$20 [75] if(main::y_movement#0==-1) goto main::@11
Simple Condition main::$28 [91] if(main::i#2<$28) goto main::@14
Simple Condition main::$30 [97] if(main::x_movement#0==-1) goto main::@16
Simple Condition main::$38 [113] if(main::i1#2<$19) goto main::@19
Simple Condition main::$39 [120] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$fe) goto main::@24
Simple Condition main::$40 [123] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto main::@25
Simple Condition main::$51 [134] if(0!=screen_buffer#26) goto main::@28
Simple Condition screencpy::$6 [175] if(screencpy::i#2<$fa) goto screencpy::@2
Simple Condition next_position::$1 [185] if(x_sin_idx#13<SINSIZE) goto next_position::@1
Simple Condition next_position::$3 [189] if(y_sin_idx#14<SINSIZE) goto next_position::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant memset::str#0 = (void*)MAIN_SCREEN0
Constant memset::c#0 = ' '
Constant memset::num#0 = $3e8
Constant main::toD0181_screen#0 = MAIN_SCREEN0
Constant main::toD0181_gfx#0 = MAIN_CHARSET
Constant main::movement#0 = 0
Constant main::movement#1 = -$28
Constant main::movement#2 = $28
Constant main::$12 = MAIN_SCREEN1
Constant main::$11 = MAIN_SCREEN0
Constant main::$16 = MAIN_SCREEN0
Constant main::$15 = MAIN_SCREEN1
Constant main::petscii#0 = (byte*) 0
Constant main::scrn#0 = (byte*) 0
Constant main::i#0 = 0
Constant main::i1#0 = 0
Constant main::toD0182_screen#0 = MAIN_SCREEN1
Constant main::toD0182_gfx#0 = MAIN_CHARSET
Constant main::toD0183_screen#0 = MAIN_SCREEN0
Constant main::toD0183_gfx#0 = MAIN_CHARSET
Constant screencpy::i#0 = 0
Constant x_sin_idx#22 = 0
Constant y_sin_idx#22 = (word)SINSIZE/4
Constant x_pos#16 = 0
Constant y_pos#16 = 0
Constant x_pos_fine#18 = 0
Constant y_pos_fine#18 = 0
Constant x_pos_coarse#27 = 0
Constant y_pos_coarse#23 = 0
Constant screen_buffer#18 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant memset::$4 = (byte*)memset::str#0
Constant memset::dst#0 = (byte*)memset::str#0
Constant memset::return#2 = memset::str#0
Constant main::toD0181_$7 = (word)main::toD0181_screen#0
Constant main::toD0182_$7 = (word)main::toD0182_screen#0
Constant main::toD0183_$7 = (word)main::toD0183_screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)main::toD0181_gfx#0 in [26] main::toD0181_$3 = > (word)main::toD0181_gfx#0
Constant value identified (word)main::toD0182_gfx#0 in [141] main::toD0182_$3 = > (word)main::toD0182_gfx#0
Constant value identified (word)main::toD0183_gfx#0 in [152] main::toD0183_$3 = > (word)main::toD0183_gfx#0
Successful SSA optimization Pass2ConstantValues
if() condition always false - eliminating [2] if(memset::num#0<=0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
De-inlining pointer[w] to *(pointer+w)   [193] x_pos#11 = SINTAB[next_position::$12]
De-inlining pointer[w] to *(pointer+w)   [195] y_pos#11 = SINTAB[next_position::$13]
Successful SSA optimization Pass2DeInlineWordDerefIdx
Eliminating unused variable - keeping the phi block x_sin_idx#11
Eliminating unused variable - keeping the phi block y_sin_idx#11
Eliminating unused variable - keeping the phi block x_pos#10
Eliminating unused variable - keeping the phi block y_pos#10
Eliminating unused variable - keeping the phi block x_pos_fine#11
Eliminating unused variable - keeping the phi block x_pos_coarse#16
Eliminating unused variable - keeping the phi block y_pos_fine#11
Eliminating unused variable - keeping the phi block y_pos_coarse#15
Eliminating unused variable - keeping the phi block screen_buffer#1
Eliminating unused constant memset::return#2
Eliminating unused constant main::petscii#0
Eliminating unused constant main::scrn#0
Eliminating unused constant x_pos#16
Eliminating unused constant y_pos#16
Eliminating unused constant x_pos_fine#18
Eliminating unused constant y_pos_fine#18
Eliminating unused constant x_pos_coarse#27
Eliminating unused constant y_pos_coarse#23
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Simplifying constant integer cast SINSIZE/4
Successful SSA optimization PassNCastSimplification
Constant right-side identified [0] memset::end#0 = memset::$4 + memset::num#0
Constant right-side identified [8] main::toD0181_$0 = main::toD0181_$7 & $3fff
Constant right-side identified [11] main::toD0181_$3 = > (word)main::toD0181_gfx#0
Constant right-side identified [90] main::toD0182_$0 = main::toD0182_$7 & $3fff
Constant right-side identified [93] main::toD0182_$3 = > (word)main::toD0182_gfx#0
Constant right-side identified [98] main::toD0183_$0 = main::toD0183_$7 & $3fff
Constant right-side identified [101] main::toD0183_$3 = > (word)main::toD0183_gfx#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant memset::end#0 = memset::$4+memset::num#0
Constant main::toD0181_$0 = main::toD0181_$7&$3fff
Constant main::toD0181_$3 = >(word)main::toD0181_gfx#0
Constant main::toD0182_$0 = main::toD0182_$7&$3fff
Constant main::toD0182_$3 = >(word)main::toD0182_gfx#0
Constant main::toD0183_$0 = main::toD0183_$7&$3fff
Constant main::toD0183_$3 = >(word)main::toD0183_gfx#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [7] main::toD0181_$1 = main::toD0181_$0 * 4
Constant right-side identified [9] main::toD0181_$4 = main::toD0181_$3 / 4
Constant right-side identified [87] main::toD0182_$1 = main::toD0182_$0 * 4
Constant right-side identified [89] main::toD0182_$4 = main::toD0182_$3 / 4
Constant right-side identified [93] main::toD0183_$1 = main::toD0183_$0 * 4
Constant right-side identified [95] main::toD0183_$4 = main::toD0183_$3 / 4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_$1 = main::toD0181_$0*4
Constant main::toD0181_$4 = main::toD0181_$3/4
Constant main::toD0182_$1 = main::toD0182_$0*4
Constant main::toD0182_$4 = main::toD0182_$3/4
Constant main::toD0183_$1 = main::toD0183_$0*4
Constant main::toD0183_$4 = main::toD0183_$3/4
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [7] main::toD0181_$2 = > main::toD0181_$1
Constant right-side identified [8] main::toD0181_$5 = main::toD0181_$4 & $f
Constant right-side identified [85] main::toD0182_$2 = > main::toD0182_$1
Constant right-side identified [86] main::toD0182_$5 = main::toD0182_$4 & $f
Constant right-side identified [89] main::toD0183_$2 = > main::toD0183_$1
Constant right-side identified [90] main::toD0183_$5 = main::toD0183_$4 & $f
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_$2 = >main::toD0181_$1
Constant main::toD0181_$5 = main::toD0181_$4&$f
Constant main::toD0182_$2 = >main::toD0182_$1
Constant main::toD0182_$5 = main::toD0182_$4&$f
Constant main::toD0183_$2 = >main::toD0183_$1
Constant main::toD0183_$5 = main::toD0183_$4&$f
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [7] main::toD0181_return#0 = main::toD0181_$2 | main::toD0181_$5
Constant right-side identified [83] main::toD0182_return#0 = main::toD0182_$2 | main::toD0182_$5
Constant right-side identified [85] main::toD0183_return#0 = main::toD0183_$2 | main::toD0183_$5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_return#0 = main::toD0181_$2|main::toD0181_$5
Constant main::toD0182_return#0 = main::toD0182_$2|main::toD0182_$5
Constant main::toD0183_return#0 = main::toD0183_$2|main::toD0183_$5
Successful SSA optimization Pass2ConstantIdentification
Rewriting multiplication to use shift and addition[86] petscii_ptr::$0 = petscii_ptr::row_y#4 * $8c
Rewriting multiplication to use shift [112] next_position::$12 = x_sin_idx#14 * SIZEOF_SIGNED_WORD
Rewriting multiplication to use shift [115] next_position::$13 = y_sin_idx#13 * SIZEOF_SIGNED_WORD
Rewriting division to use shift [123] x_pos_coarse#17 = next_position::x_pos_u#0 / 8
Rewriting division to use shift [129] y_pos_coarse#16 = next_position::y_pos_u#0 / 8
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings memset::dst#0
Inlining constant with var siblings main::movement#0
Inlining constant with var siblings main::movement#1
Inlining constant with var siblings main::movement#2
Inlining constant with var siblings main::i#0
Inlining constant with var siblings main::i1#0
Inlining constant with var siblings screencpy::i#0
Inlining constant with var siblings x_sin_idx#22
Inlining constant with var siblings y_sin_idx#22
Inlining constant with var siblings screen_buffer#18
Constant inlined main::toD0181_screen#0 = MAIN_SCREEN0
Constant inlined main::toD0181_gfx#0 = MAIN_CHARSET
Constant inlined main::$12 = MAIN_SCREEN1
Constant inlined main::toD0182_$4 = >(word)MAIN_CHARSET/4
Constant inlined main::toD0182_$5 = >(word)MAIN_CHARSET/4&$f
Constant inlined main::$15 = MAIN_SCREEN1
Constant inlined main::toD0182_$7 = (word)MAIN_SCREEN1
Constant inlined main::toD0182_$0 = (word)MAIN_SCREEN1&$3fff
Constant inlined screencpy::i#0 = 0
Constant inlined main::toD0182_$1 = (word)MAIN_SCREEN1&$3fff*4
Constant inlined main::toD0182_$2 = >(word)MAIN_SCREEN1&$3fff*4
Constant inlined main::$11 = MAIN_SCREEN0
Constant inlined main::toD0183_gfx#0 = MAIN_CHARSET
Constant inlined main::toD0182_$3 = >(word)MAIN_CHARSET
Constant inlined main::toD0183_$0 = (word)MAIN_SCREEN0&$3fff
Constant inlined main::$16 = MAIN_SCREEN0
Constant inlined memset::$4 = (byte*)memset::str#0
Constant inlined main::i#0 = 0
Constant inlined main::i1#0 = 0
Constant inlined main::toD0181_$7 = (word)MAIN_SCREEN0
Constant inlined main::toD0182_gfx#0 = MAIN_CHARSET
Constant inlined main::toD0181_$2 = >(word)MAIN_SCREEN0&$3fff*4
Constant inlined main::toD0183_$5 = >(word)MAIN_CHARSET/4&$f
Constant inlined y_sin_idx#22 = SINSIZE/4
Constant inlined main::toD0181_$1 = (word)MAIN_SCREEN0&$3fff*4
Constant inlined main::toD0183_$7 = (word)MAIN_SCREEN0
Constant inlined main::toD0181_$0 = (word)MAIN_SCREEN0&$3fff
Constant inlined main::toD0183_$1 = (word)MAIN_SCREEN0&$3fff*4
Constant inlined screen_buffer#18 = 0
Constant inlined main::toD0181_$5 = >(word)MAIN_CHARSET/4&$f
Constant inlined main::toD0183_$2 = >(word)MAIN_SCREEN0&$3fff*4
Constant inlined main::toD0183_screen#0 = MAIN_SCREEN0
Constant inlined main::toD0183_$3 = >(word)MAIN_CHARSET
Constant inlined main::toD0181_$4 = >(word)MAIN_CHARSET/4
Constant inlined main::toD0181_$3 = >(word)MAIN_CHARSET
Constant inlined main::toD0183_$4 = >(word)MAIN_CHARSET/4
Constant inlined main::movement#2 = $28
Constant inlined main::movement#1 = -$28
Constant inlined main::movement#0 = 0
Constant inlined main::toD0182_screen#0 = MAIN_SCREEN1
Constant inlined memset::dst#0 = (byte*)memset::str#0
Constant inlined x_sin_idx#22 = 0
Successful SSA optimization Pass2ConstantInlining
Consolidated constant in assignment next_position::x_pos_u#0
Consolidated constant in assignment next_position::y_pos_u#0
Successful SSA optimization Pass2ConstantAdditionElimination
Alias petscii_ptr::$0 = petscii_ptr::$7 
Alias next_position::$4 = next_position::$14 
Alias next_position::$8 = next_position::$16 
Successful SSA optimization Pass2AliasElimination
Eliminating unused constant SIZEOF_SIGNED_WORD
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting main::@45(between main::@24 and main::@24)
Added new block during phi lifting main::@46(between main::@3 and main::@24)
Added new block during phi lifting next_position::@5(between next_position and next_position::@1)
Added new block during phi lifting next_position::@6(between next_position::@1 and next_position::@2)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@33
Adding NOP phi() at start of main::@37
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0181_@return
Adding NOP phi() at start of main::@38
Adding NOP phi() at start of main::@31
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@27
Adding NOP phi() at start of main::toD0183
Adding NOP phi() at start of main::toD0183_@return
Adding NOP phi() at start of main::@28
Adding NOP phi() at start of main::toD0182
Adding NOP phi() at start of main::toD0182_@return
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [main] to memset:3 next_position:8 next_position:15 screencpy:35 petscii_ptr:42 petscii_ptr:56 petscii_ptr:103 petscii_ptr:116 

Created 21 initial phi equivalence classes
Coalesced [13] x_sin_idx#71 = x_sin_idx#14
Coalesced [14] y_sin_idx#71 = y_sin_idx#13
Coalesced [40] petscii_ptr::row_y#7 = petscii_ptr::row_y#1
Coalesced [41] petscii_ptr::row_x#7 = petscii_ptr::row_x#1
Coalesced [45] main::petscii#13 = main::petscii#2
Not coalescing [46] main::scrn#13 = main::screen_hidden#0
Coalesced [54] petscii_ptr::row_y#8 = petscii_ptr::row_y#3
Coalesced [55] petscii_ptr::row_x#8 = petscii_ptr::row_x#3
Coalesced [59] main::petscii#15 = main::petscii#4
Coalesced [60] main::scrn#15 = main::screen_hidden#0
Coalesced [62] main::petscii#16 = main::petscii#11
Coalesced [63] main::scrn#16 = main::scrn#11
Coalesced [67] screen_buffer#62 = screen_buffer#0
Coalesced [86] screen_buffer#61 = screen_buffer#26
Coalesced (already) [91] screen_buffer#63 = screen_buffer#26
Coalesced [96] main::i1#4 = main::i1#1
Coalesced [97] main::petscii#17 = main::petscii#5
Coalesced [98] main::scrn#17 = main::scrn#5
Coalesced [101] petscii_ptr::row_y#6 = petscii_ptr::row_y#2
Coalesced [102] petscii_ptr::row_x#6 = petscii_ptr::row_x#2
Coalesced [107] main::petscii#14 = main::petscii#3
Coalesced [108] main::scrn#14 = main::scrn#3
Coalesced [111] main::i#4 = main::i#1
Coalesced [114] petscii_ptr::row_y#5 = petscii_ptr::row_y#0
Coalesced [115] petscii_ptr::row_x#5 = petscii_ptr::row_x#0
Coalesced [120] main::petscii#12 = main::petscii#1
Coalesced [121] main::scrn#12 = main::scrn#1
Coalesced (already) [124] screen_buffer#64 = screen_buffer#12
Coalesced [134] memset::dst#4 = memset::dst#1
Coalesced [139] x_sin_idx#73 = x_sin_idx#4
Coalesced [144] y_sin_idx#73 = y_sin_idx#4
Coalesced [163] y_sin_idx#72 = y_sin_idx#14
Coalesced [164] x_sin_idx#72 = x_sin_idx#13
Coalesced [179] screencpy::i#4 = screencpy::i#1
Coalesced down to 15 phi equivalence classes
Culled Empty Block label main::@37
Culled Empty Block label main::toD0181_@return
Culled Empty Block label main::@38
Culled Empty Block label main::@5
Culled Empty Block label main::@8
Culled Empty Block label main::@27
Culled Empty Block label main::toD0183_@return
Culled Empty Block label main::@28
Culled Empty Block label main::toD0182_@return
Culled Empty Block label main::@45
Culled Empty Block label main::@46
Culled Empty Block label main::@2
Culled Empty Block label memset::@2
Culled Empty Block label memset::@1
Culled Empty Block label next_position::@6
Culled Empty Block label next_position::@5
Renumbering block memset::@3 to memset::@1
Renumbering block memset::@4 to memset::@2
Renumbering block main::@3 to main::@2
Renumbering block main::@4 to main::@3
Renumbering block main::@6 to main::@4
Renumbering block main::@7 to main::@5
Renumbering block main::@9 to main::@6
Renumbering block main::@10 to main::@7
Renumbering block main::@11 to main::@8
Renumbering block main::@12 to main::@9
Renumbering block main::@13 to main::@10
Renumbering block main::@14 to main::@11
Renumbering block main::@15 to main::@12
Renumbering block main::@16 to main::@13
Renumbering block main::@17 to main::@14
Renumbering block main::@18 to main::@15
Renumbering block main::@19 to main::@16
Renumbering block main::@20 to main::@17
Renumbering block main::@21 to main::@18
Renumbering block main::@22 to main::@19
Renumbering block main::@23 to main::@20
Renumbering block main::@24 to main::@21
Renumbering block main::@25 to main::@22
Renumbering block main::@26 to main::@23
Renumbering block main::@29 to main::@24
Renumbering block main::@30 to main::@25
Renumbering block main::@31 to main::@26
Renumbering block main::@32 to main::@27
Renumbering block main::@33 to main::@28
Renumbering block main::@34 to main::@29
Renumbering block main::@35 to main::@30
Renumbering block main::@36 to main::@31
Renumbering block main::@39 to main::@32
Renumbering block main::@40 to main::@33
Renumbering block main::@41 to main::@34
Renumbering block main::@42 to main::@35
Renumbering block main::@43 to main::@36
Renumbering block main::@44 to main::@37
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@28
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::@26
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::toD0183
Adding NOP phi() at start of main::toD0182
Adding NOP phi() at start of memset

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::sei1
main::sei1: scope:[main]  from main
  asm { sei  }
  to:main::@28
main::@28: scope:[main]  from main::sei1
  [2] phi()
  [3] call memset 
  to:main::toD0181
main::toD0181: scope:[main]  from main::@28
  [4] phi()
  to:main::@29
main::@29: scope:[main]  from main::toD0181
  [5] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = main::toD0181_return#0
  [6] call next_position 
  to:main::@1
main::@1: scope:[main]  from main::@24 main::@29
  [7] screen_buffer#12 = phi( main::@24/screen_buffer#26, main::@29/0 )
  [8] main::x_pos_coarse_old#0 = x_pos_coarse#17
  [9] main::y_pos_coarse_old#0 = y_pos_coarse#16
  [10] call next_position 
  to:main::@32
main::@32: scope:[main]  from main::@1
  [11] main::$5 = main::y_pos_coarse_old#0 - y_pos_coarse#16
  [12] main::y_movement#0 = (signed byte)main::$5
  [13] if(main::y_movement#0==1) goto main::@2
  to:main::@25
main::@25: scope:[main]  from main::@32
  [14] if(main::y_movement#0!=-1) goto main::@2
  to:main::@26
main::@26: scope:[main]  from main::@25
  [15] phi()
  to:main::@2
main::@2: scope:[main]  from main::@25 main::@26 main::@32
  [16] main::movement#4 = phi( main::@32/-$28, main::@25/0, main::@26/$28 )
  [17] main::$9 = main::x_pos_coarse_old#0 - x_pos_coarse#17
  [18] main::x_movement#0 = (signed byte)main::$9
  [19] main::movement#3 = main::movement#4 - main::x_movement#0
  [20] if(0==main::movement#3) goto main::@21
  to:main::@27
main::@27: scope:[main]  from main::@2
  [21] if(0!=screen_buffer#12) goto main::@3
  to:main::@4
main::@3: scope:[main]  from main::@27
  [22] phi()
  to:main::@4
main::@4: scope:[main]  from main::@27 main::@3
  [23] main::$13 = phi( main::@3/MAIN_SCREEN1, main::@27/MAIN_SCREEN0 )
  [24] main::screen_active#0 = main::$13 + main::movement#3
  [25] if(0!=screen_buffer#12) goto main::@5
  to:main::@6
main::@5: scope:[main]  from main::@4
  [26] phi()
  to:main::@6
main::@6: scope:[main]  from main::@4 main::@5
  [27] main::screen_hidden#0 = phi( main::@5/MAIN_SCREEN0, main::@4/MAIN_SCREEN1 )
  [28] screencpy::dst#0 = main::screen_hidden#0
  [29] screencpy::src#0 = main::screen_active#0
  [30] call screencpy 
  to:main::@33
main::@33: scope:[main]  from main::@6
  [31] if(0==main::y_movement#0) goto main::@7
  to:main::@17
main::@17: scope:[main]  from main::@33
  [32] if(main::y_movement#0==-1) goto main::@8
  to:main::@18
main::@18: scope:[main]  from main::@17
  [33] petscii_ptr::row_x#1 = x_pos_coarse#17 - $14
  [34] petscii_ptr::row_y#1 = y_pos_coarse#16 - $c
  [35] call petscii_ptr 
  [36] petscii_ptr::return#1 = petscii_ptr::return#10
  to:main::@35
main::@35: scope:[main]  from main::@18
  [37] main::petscii#2 = petscii_ptr::return#1
  [38] main::scrn#13 = main::screen_hidden#0
  to:main::@9
main::@9: scope:[main]  from main::@34 main::@35
  [39] main::scrn#10 = phi( main::@34/main::scrn#1, main::@35/main::scrn#13 )
  [39] main::petscii#10 = phi( main::@34/main::petscii#1, main::@35/main::petscii#2 )
  to:main::@10
main::@10: scope:[main]  from main::@11 main::@9
  [40] main::i#2 = phi( main::@9/0, main::@11/main::i#1 )
  [41] if(main::i#2<$28) goto main::@11
  to:main::@7
main::@7: scope:[main]  from main::@10 main::@33
  [42] if(0==main::x_movement#0) goto main::@12
  to:main::@19
main::@19: scope:[main]  from main::@7
  [43] if(main::x_movement#0==-1) goto main::@13
  to:main::@20
main::@20: scope:[main]  from main::@19
  [44] petscii_ptr::row_x#3 = x_pos_coarse#17 - $14
  [45] petscii_ptr::row_y#3 = y_pos_coarse#16 - $c
  [46] call petscii_ptr 
  [47] petscii_ptr::return#3 = petscii_ptr::return#10
  to:main::@37
main::@37: scope:[main]  from main::@20
  [48] main::petscii#4 = petscii_ptr::return#3
  to:main::@14
main::@14: scope:[main]  from main::@36 main::@37
  [49] main::scrn#11 = phi( main::@36/main::scrn#3, main::@37/main::screen_hidden#0 )
  [49] main::petscii#11 = phi( main::@36/main::petscii#3, main::@37/main::petscii#4 )
  to:main::@15
main::@15: scope:[main]  from main::@14 main::@16
  [50] main::scrn#7 = phi( main::@14/main::scrn#11, main::@16/main::scrn#5 )
  [50] main::petscii#7 = phi( main::@14/main::petscii#11, main::@16/main::petscii#5 )
  [50] main::i1#2 = phi( main::@14/0, main::@16/main::i1#1 )
  [51] if(main::i1#2<$19) goto main::@16
  to:main::@12
main::@12: scope:[main]  from main::@15 main::@7
  [52] screen_buffer#0 = screen_buffer#12 ^ 1
  to:main::@21
main::@21: scope:[main]  from main::@12 main::@2 main::@21
  [53] screen_buffer#26 = phi( main::@12/screen_buffer#0, main::@21/screen_buffer#26, main::@2/screen_buffer#12 )
  [54] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$fe) goto main::@21
  to:main::@22
main::@22: scope:[main]  from main::@21 main::@22
  [55] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto main::@22
  to:main::@23
main::@23: scope:[main]  from main::@22
  [56] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = WHITE
  [57] main::$41 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & $f0
  [58] main::$42 = 7 - y_pos_fine#12
  [59] main::$43 = main::$41 | main::$42
  [60] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) = main::$43
  [61] main::$44 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2) & $f0
  [62] main::$45 = 7 - x_pos_fine#12
  [63] main::$46 = main::$44 | main::$45
  [64] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2) = main::$46
  [65] if(0!=screen_buffer#26) goto main::toD0182
  to:main::toD0183
main::toD0183: scope:[main]  from main::@23
  [66] phi()
  to:main::@31
main::@31: scope:[main]  from main::toD0183
  [67] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = main::toD0183_return#0
  to:main::@24
main::@24: scope:[main]  from main::@30 main::@31
  [68] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK
  to:main::@1
main::toD0182: scope:[main]  from main::@23
  [69] phi()
  to:main::@30
main::@30: scope:[main]  from main::toD0182
  [70] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = main::toD0182_return#0
  to:main::@24
main::@16: scope:[main]  from main::@15
  [71] *main::scrn#7 = *main::petscii#7
  [72] main::scrn#5 = main::scrn#7 + $28
  [73] main::petscii#5 = main::petscii#7 + $8c
  [74] main::i1#1 = ++ main::i1#2
  to:main::@15
main::@13: scope:[main]  from main::@19
  [75] petscii_ptr::row_x#2 = x_pos_coarse#17 + $13
  [76] petscii_ptr::row_y#2 = y_pos_coarse#16 - $c
  [77] call petscii_ptr 
  [78] petscii_ptr::return#2 = petscii_ptr::return#10
  to:main::@36
main::@36: scope:[main]  from main::@13
  [79] main::petscii#3 = petscii_ptr::return#2
  [80] main::scrn#3 = main::screen_hidden#0 + $27
  to:main::@14
main::@11: scope:[main]  from main::@10
  [81] main::scrn#10[main::i#2] = main::petscii#10[main::i#2]
  [82] main::i#1 = ++ main::i#2
  to:main::@10
main::@8: scope:[main]  from main::@17
  [83] petscii_ptr::row_x#0 = x_pos_coarse#17 - $14
  [84] petscii_ptr::row_y#0 = y_pos_coarse#16 + $c
  [85] call petscii_ptr 
  [86] petscii_ptr::return#0 = petscii_ptr::return#10
  to:main::@34
main::@34: scope:[main]  from main::@8
  [87] main::petscii#1 = petscii_ptr::return#0
  [88] main::scrn#1 = main::screen_hidden#0 + (word)$18*$28
  to:main::@9

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from main::@28
  [89] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [90] memset::dst#2 = phi( memset/(byte*)memset::str#0, memset::@2/memset::dst#1 )
  [91] if(memset::dst#2!=memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [92] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [93] *memset::dst#2 = memset::c#0
  [94] memset::dst#1 = ++ memset::dst#2
  to:memset::@1

void next_position()
next_position: scope:[next_position]  from main::@1 main::@29
  [95] y_sin_idx#12 = phi( main::@1/y_sin_idx#13, main::@29/SINSIZE/4 )
  [95] x_sin_idx#12 = phi( main::@1/x_sin_idx#14, main::@29/0 )
  [96] x_sin_idx#13 = ++ x_sin_idx#12
  [97] if(x_sin_idx#13<SINSIZE) goto next_position::@1
  to:next_position::@3
next_position::@3: scope:[next_position]  from next_position
  [98] x_sin_idx#4 = x_sin_idx#13 - SINSIZE
  to:next_position::@1
next_position::@1: scope:[next_position]  from next_position next_position::@3
  [99] x_sin_idx#14 = phi( next_position/x_sin_idx#13, next_position::@3/x_sin_idx#4 )
  [100] y_sin_idx#14 = ++ y_sin_idx#12
  [101] if(y_sin_idx#14<SINSIZE) goto next_position::@2
  to:next_position::@4
next_position::@4: scope:[next_position]  from next_position::@1
  [102] y_sin_idx#4 = y_sin_idx#14 - SINSIZE
  to:next_position::@2
next_position::@2: scope:[next_position]  from next_position::@1 next_position::@4
  [103] y_sin_idx#13 = phi( next_position::@1/y_sin_idx#14, next_position::@4/y_sin_idx#4 )
  [104] next_position::$12 = x_sin_idx#14 << 1
  [105] next_position::$18 = SINTAB + next_position::$12
  [106] x_pos#11 = *next_position::$18
  [107] next_position::$13 = y_sin_idx#13 << 1
  [108] next_position::$19 = SINTAB + next_position::$13
  [109] y_pos#11 = *next_position::$19
  [110] next_position::$4 = (word)x_pos#11
  [111] next_position::x_pos_u#0 = next_position::$4 + $190+(byte)$14*8
  [112] next_position::$15 = (byte)next_position::x_pos_u#0
  [113] x_pos_fine#12 = next_position::$15 & 7
  [114] x_pos_coarse#17 = next_position::x_pos_u#0 >> 3
  [115] next_position::$8 = (word)y_pos#11
  [116] next_position::y_pos_u#0 = next_position::$8 + $190+(byte)$c*8
  [117] next_position::$17 = (byte)next_position::y_pos_u#0
  [118] y_pos_fine#12 = next_position::$17 & 7
  [119] y_pos_coarse#16 = next_position::y_pos_u#0 >> 3
  to:next_position::@return
next_position::@return: scope:[next_position]  from next_position::@2
  [120] return 
  to:@return

void screencpy(byte* screencpy::dst , byte* screencpy::src)
screencpy: scope:[screencpy]  from main::@6
  [121] screencpy::src_250#0 = screencpy::src#0 + $fa
  [122] screencpy::dst_250#0 = screencpy::dst#0 + $fa
  [123] screencpy::src_500#0 = screencpy::src#0 + $1f4
  [124] screencpy::dst_500#0 = screencpy::dst#0 + $1f4
  [125] screencpy::src_750#0 = screencpy::src#0 + $2ee
  [126] screencpy::dst_750#0 = screencpy::dst#0 + $2ee
  to:screencpy::@1
screencpy::@1: scope:[screencpy]  from screencpy screencpy::@2
  [127] screencpy::i#2 = phi( screencpy/0, screencpy::@2/screencpy::i#1 )
  [128] if(screencpy::i#2<$fa) goto screencpy::@2
  to:screencpy::@return
screencpy::@return: scope:[screencpy]  from screencpy::@1
  [129] return 
  to:@return
screencpy::@2: scope:[screencpy]  from screencpy::@1
  [130] screencpy::dst#0[screencpy::i#2] = screencpy::src#0[screencpy::i#2]
  [131] screencpy::dst_250#0[screencpy::i#2] = screencpy::src_250#0[screencpy::i#2]
  [132] screencpy::dst_500#0[screencpy::i#2] = screencpy::src_500#0[screencpy::i#2]
  [133] screencpy::dst_750#0[screencpy::i#2] = screencpy::src_750#0[screencpy::i#2]
  [134] screencpy::i#1 = ++ screencpy::i#2
  to:screencpy::@1

byte* petscii_ptr(word petscii_ptr::row_x , word petscii_ptr::row_y)
petscii_ptr: scope:[petscii_ptr]  from main::@13 main::@18 main::@20 main::@8
  [135] petscii_ptr::row_x#4 = phi( main::@8/petscii_ptr::row_x#0, main::@13/petscii_ptr::row_x#2, main::@18/petscii_ptr::row_x#1, main::@20/petscii_ptr::row_x#3 )
  [135] petscii_ptr::row_y#4 = phi( main::@8/petscii_ptr::row_y#0, main::@13/petscii_ptr::row_y#2, main::@18/petscii_ptr::row_y#1, main::@20/petscii_ptr::row_y#3 )
  [136] petscii_ptr::$3 = petscii_ptr::row_y#4 << 4
  [137] petscii_ptr::$4 = petscii_ptr::$3 + petscii_ptr::row_y#4
  [138] petscii_ptr::$5 = petscii_ptr::$4 << 1
  [139] petscii_ptr::$6 = petscii_ptr::$5 + petscii_ptr::row_y#4
  [140] petscii_ptr::$0 = petscii_ptr::$6 << 2
  [141] petscii_ptr::$1 = PETSCII_ART + petscii_ptr::$0
  [142] petscii_ptr::return#10 = petscii_ptr::$1 + petscii_ptr::row_x#4
  to:petscii_ptr::@return
petscii_ptr::@return: scope:[petscii_ptr]  from petscii_ptr
  [143] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte*~ main::$13 11.0
byte~ main::$41 11.0
byte~ main::$42 22.0
byte~ main::$43 22.0
byte~ main::$44 11.0
byte~ main::$45 22.0
byte~ main::$46 22.0
word~ main::$5 11.0
word~ main::$9 11.0
byte main::i
byte main::i#1 202.0
byte main::i#2 168.33333333333331
byte main::i1
byte main::i1#1 202.0
byte main::i1#2 60.599999999999994
signed byte main::movement
signed byte main::movement#3 6.6000000000000005
signed byte main::movement#4 3.6666666666666665
byte* main::petscii
byte* main::petscii#1 11.0
byte* main::petscii#10 24.6
byte* main::petscii#11 33.0
byte* main::petscii#2 11.0
byte* main::petscii#3 11.0
byte* main::petscii#4 22.0
byte* main::petscii#5 101.0
byte* main::petscii#7 78.5
byte* main::screen_active
byte* main::screen_active#0 4.4
byte* main::screen_hidden
byte* main::screen_hidden#0 1.5714285714285714
byte* main::scrn
byte* main::scrn#1 22.0
byte* main::scrn#10 24.6
byte* main::scrn#11 33.0
byte* main::scrn#13 22.0
byte* main::scrn#3 22.0
byte* main::scrn#5 67.33333333333333
byte* main::scrn#7 104.66666666666666
byte* main::toD0181_gfx
byte main::toD0181_return
byte* main::toD0181_screen
byte* main::toD0182_gfx
byte main::toD0182_return
byte* main::toD0182_screen
byte* main::toD0183_gfx
byte main::toD0183_return
byte* main::toD0183_screen
signed byte main::x_movement
signed byte main::x_movement#0 1.3333333333333333
word main::x_pos_coarse_old
word main::x_pos_coarse_old#0 2.4444444444444446
signed byte main::y_movement
signed byte main::y_movement#0 2.75
word main::y_pos_coarse_old
word main::y_pos_coarse_old#0 11.0
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte* memset::dst
byte* memset::dst#1 202.0
byte* memset::dst#2 134.66666666666666
byte* memset::end
word memset::num
void* memset::return
void* memset::str
void next_position()
word~ next_position::$12 202.0
word~ next_position::$13 202.0
byte~ next_position::$15 202.0
byte~ next_position::$17 202.0
signed word*~ next_position::$18 202.0
signed word*~ next_position::$19 202.0
word~ next_position::$4 202.0
word~ next_position::$8 202.0
word next_position::x_pos_u
word next_position::x_pos_u#0 67.33333333333333
word next_position::y_pos_u
word next_position::y_pos_u#0 67.33333333333333
byte* petscii_ptr(word petscii_ptr::row_x , word petscii_ptr::row_y)
word~ petscii_ptr::$0 202.0
byte*~ petscii_ptr::$1 202.0
word~ petscii_ptr::$3 202.0
word~ petscii_ptr::$4 202.0
word~ petscii_ptr::$5 202.0
word~ petscii_ptr::$6 202.0
byte* petscii_ptr::return
byte* petscii_ptr::return#0 22.0
byte* petscii_ptr::return#1 22.0
byte* petscii_ptr::return#10 24.166666666666664
byte* petscii_ptr::return#2 22.0
byte* petscii_ptr::return#3 22.0
word petscii_ptr::row_x
word petscii_ptr::row_x#0 11.0
word petscii_ptr::row_x#1 11.0
word petscii_ptr::row_x#2 11.0
word petscii_ptr::row_x#3 11.0
word petscii_ptr::row_x#4 20.714285714285715
word petscii_ptr::row_y
word petscii_ptr::row_y#0 22.0
word petscii_ptr::row_y#1 22.0
word petscii_ptr::row_y#2 22.0
word petscii_ptr::row_y#3 22.0
word petscii_ptr::row_y#4 86.75
byte screen_buffer
byte screen_buffer#0 22.0
byte screen_buffer#12 0.873015873015873
byte screen_buffer#26 13.666666666666666
void screencpy(byte* screencpy::dst , byte* screencpy::src)
byte* screencpy::dst
byte* screencpy::dst#0 687.6666666666666
byte* screencpy::dst_250
byte* screencpy::dst_250#0 841.8333333333333
byte* screencpy::dst_500
byte* screencpy::dst_500#0 1010.2
byte* screencpy::dst_750
byte* screencpy::dst_750#0 1262.75
byte screencpy::i
byte screencpy::i#1 20002.0
byte screencpy::i#2 18335.166666666668
byte* screencpy::src
byte* screencpy::src#0 736.7857142857143
byte* screencpy::src_250
byte* screencpy::src_250#0 777.076923076923
byte* screencpy::src_500
byte* screencpy::src_500#0 918.3636363636363
byte* screencpy::src_750
byte* screencpy::src_750#0 1122.4444444444443
signed word x_pos
signed word x_pos#11 25.25
word x_pos_coarse
word x_pos_coarse#17 1.8977272727272727
byte x_pos_fine
byte x_pos_fine#12 1.435897435897436
word x_sin_idx
word x_sin_idx#12 112.0
word x_sin_idx#13 202.0
word x_sin_idx#14 2.9904761904761905
word x_sin_idx#4 202.0
signed word y_pos
signed word y_pos#11 16.833333333333332
word y_pos_coarse
word y_pos_coarse#16 1.9880952380952381
byte y_pos_fine
byte y_pos_fine#12 1.6231884057971016
word y_sin_idx
word y_sin_idx#12 22.4
word y_sin_idx#13 3.108910891089109
word y_sin_idx#14 202.0
word y_sin_idx#4 202.0

Initial phi equivalence classes
[ screen_buffer#12 screen_buffer#26 screen_buffer#0 ]
[ main::movement#4 ]
[ main::$13 ]
[ main::petscii#10 main::petscii#1 main::petscii#2 ]
[ main::scrn#10 main::scrn#1 main::scrn#13 ]
[ main::i#2 main::i#1 ]
[ main::i1#2 main::i1#1 ]
[ main::petscii#7 main::petscii#11 main::petscii#3 main::petscii#4 main::petscii#5 ]
[ main::scrn#7 main::scrn#11 main::scrn#3 main::screen_hidden#0 main::scrn#5 ]
[ memset::dst#2 memset::dst#1 ]
[ x_sin_idx#12 x_sin_idx#14 x_sin_idx#13 x_sin_idx#4 ]
[ y_sin_idx#12 y_sin_idx#13 y_sin_idx#14 y_sin_idx#4 ]
[ screencpy::i#2 screencpy::i#1 ]
[ petscii_ptr::row_y#4 petscii_ptr::row_y#0 petscii_ptr::row_y#2 petscii_ptr::row_y#1 petscii_ptr::row_y#3 ]
[ petscii_ptr::row_x#4 petscii_ptr::row_x#0 petscii_ptr::row_x#2 petscii_ptr::row_x#1 petscii_ptr::row_x#3 ]
Added variable main::x_pos_coarse_old#0 to live range equivalence class [ main::x_pos_coarse_old#0 ]
Added variable main::y_pos_coarse_old#0 to live range equivalence class [ main::y_pos_coarse_old#0 ]
Added variable main::$5 to live range equivalence class [ main::$5 ]
Added variable main::y_movement#0 to live range equivalence class [ main::y_movement#0 ]
Added variable main::$9 to live range equivalence class [ main::$9 ]
Added variable main::x_movement#0 to live range equivalence class [ main::x_movement#0 ]
Added variable main::movement#3 to live range equivalence class [ main::movement#3 ]
Added variable main::screen_active#0 to live range equivalence class [ main::screen_active#0 ]
Added variable screencpy::dst#0 to live range equivalence class [ screencpy::dst#0 ]
Added variable screencpy::src#0 to live range equivalence class [ screencpy::src#0 ]
Added variable petscii_ptr::return#1 to live range equivalence class [ petscii_ptr::return#1 ]
Added variable petscii_ptr::return#3 to live range equivalence class [ petscii_ptr::return#3 ]
Added variable main::$41 to live range equivalence class [ main::$41 ]
Added variable main::$42 to live range equivalence class [ main::$42 ]
Added variable main::$43 to live range equivalence class [ main::$43 ]
Added variable main::$44 to live range equivalence class [ main::$44 ]
Added variable main::$45 to live range equivalence class [ main::$45 ]
Added variable main::$46 to live range equivalence class [ main::$46 ]
Added variable petscii_ptr::return#2 to live range equivalence class [ petscii_ptr::return#2 ]
Added variable petscii_ptr::return#0 to live range equivalence class [ petscii_ptr::return#0 ]
Added variable next_position::$12 to live range equivalence class [ next_position::$12 ]
Added variable next_position::$18 to live range equivalence class [ next_position::$18 ]
Added variable x_pos#11 to live range equivalence class [ x_pos#11 ]
Added variable next_position::$13 to live range equivalence class [ next_position::$13 ]
Added variable next_position::$19 to live range equivalence class [ next_position::$19 ]
Added variable y_pos#11 to live range equivalence class [ y_pos#11 ]
Added variable next_position::$4 to live range equivalence class [ next_position::$4 ]
Added variable next_position::x_pos_u#0 to live range equivalence class [ next_position::x_pos_u#0 ]
Added variable next_position::$15 to live range equivalence class [ next_position::$15 ]
Added variable x_pos_fine#12 to live range equivalence class [ x_pos_fine#12 ]
Added variable x_pos_coarse#17 to live range equivalence class [ x_pos_coarse#17 ]
Added variable next_position::$8 to live range equivalence class [ next_position::$8 ]
Added variable next_position::y_pos_u#0 to live range equivalence class [ next_position::y_pos_u#0 ]
Added variable next_position::$17 to live range equivalence class [ next_position::$17 ]
Added variable y_pos_fine#12 to live range equivalence class [ y_pos_fine#12 ]
Added variable y_pos_coarse#16 to live range equivalence class [ y_pos_coarse#16 ]
Added variable screencpy::src_250#0 to live range equivalence class [ screencpy::src_250#0 ]
Added variable screencpy::dst_250#0 to live range equivalence class [ screencpy::dst_250#0 ]
Added variable screencpy::src_500#0 to live range equivalence class [ screencpy::src_500#0 ]
Added variable screencpy::dst_500#0 to live range equivalence class [ screencpy::dst_500#0 ]
Added variable screencpy::src_750#0 to live range equivalence class [ screencpy::src_750#0 ]
Added variable screencpy::dst_750#0 to live range equivalence class [ screencpy::dst_750#0 ]
Added variable petscii_ptr::$3 to live range equivalence class [ petscii_ptr::$3 ]
Added variable petscii_ptr::$4 to live range equivalence class [ petscii_ptr::$4 ]
Added variable petscii_ptr::$5 to live range equivalence class [ petscii_ptr::$5 ]
Added variable petscii_ptr::$6 to live range equivalence class [ petscii_ptr::$6 ]
Added variable petscii_ptr::$0 to live range equivalence class [ petscii_ptr::$0 ]
Added variable petscii_ptr::$1 to live range equivalence class [ petscii_ptr::$1 ]
Added variable petscii_ptr::return#10 to live range equivalence class [ petscii_ptr::return#10 ]
Complete equivalence classes
[ screen_buffer#12 screen_buffer#26 screen_buffer#0 ]
[ main::movement#4 ]
[ main::$13 ]
[ main::petscii#10 main::petscii#1 main::petscii#2 ]
[ main::scrn#10 main::scrn#1 main::scrn#13 ]
[ main::i#2 main::i#1 ]
[ main::i1#2 main::i1#1 ]
[ main::petscii#7 main::petscii#11 main::petscii#3 main::petscii#4 main::petscii#5 ]
[ main::scrn#7 main::scrn#11 main::scrn#3 main::screen_hidden#0 main::scrn#5 ]
[ memset::dst#2 memset::dst#1 ]
[ x_sin_idx#12 x_sin_idx#14 x_sin_idx#13 x_sin_idx#4 ]
[ y_sin_idx#12 y_sin_idx#13 y_sin_idx#14 y_sin_idx#4 ]
[ screencpy::i#2 screencpy::i#1 ]
[ petscii_ptr::row_y#4 petscii_ptr::row_y#0 petscii_ptr::row_y#2 petscii_ptr::row_y#1 petscii_ptr::row_y#3 ]
[ petscii_ptr::row_x#4 petscii_ptr::row_x#0 petscii_ptr::row_x#2 petscii_ptr::row_x#1 petscii_ptr::row_x#3 ]
[ main::x_pos_coarse_old#0 ]
[ main::y_pos_coarse_old#0 ]
[ main::$5 ]
[ main::y_movement#0 ]
[ main::$9 ]
[ main::x_movement#0 ]
[ main::movement#3 ]
[ main::screen_active#0 ]
[ screencpy::dst#0 ]
[ screencpy::src#0 ]
[ petscii_ptr::return#1 ]
[ petscii_ptr::return#3 ]
[ main::$41 ]
[ main::$42 ]
[ main::$43 ]
[ main::$44 ]
[ main::$45 ]
[ main::$46 ]
[ petscii_ptr::return#2 ]
[ petscii_ptr::return#0 ]
[ next_position::$12 ]
[ next_position::$18 ]
[ x_pos#11 ]
[ next_position::$13 ]
[ next_position::$19 ]
[ y_pos#11 ]
[ next_position::$4 ]
[ next_position::x_pos_u#0 ]
[ next_position::$15 ]
[ x_pos_fine#12 ]
[ x_pos_coarse#17 ]
[ next_position::$8 ]
[ next_position::y_pos_u#0 ]
[ next_position::$17 ]
[ y_pos_fine#12 ]
[ y_pos_coarse#16 ]
[ screencpy::src_250#0 ]
[ screencpy::dst_250#0 ]
[ screencpy::src_500#0 ]
[ screencpy::dst_500#0 ]
[ screencpy::src_750#0 ]
[ screencpy::dst_750#0 ]
[ petscii_ptr::$3 ]
[ petscii_ptr::$4 ]
[ petscii_ptr::$5 ]
[ petscii_ptr::$6 ]
[ petscii_ptr::$0 ]
[ petscii_ptr::$1 ]
[ petscii_ptr::return#10 ]
Allocated zp[1]:2 [ screen_buffer#12 screen_buffer#26 screen_buffer#0 ]
Allocated zp[1]:3 [ main::movement#4 ]
Allocated zp[2]:4 [ main::$13 ]
Allocated zp[2]:6 [ main::petscii#10 main::petscii#1 main::petscii#2 ]
Allocated zp[2]:8 [ main::scrn#10 main::scrn#1 main::scrn#13 ]
Allocated zp[1]:10 [ main::i#2 main::i#1 ]
Allocated zp[1]:11 [ main::i1#2 main::i1#1 ]
Allocated zp[2]:12 [ main::petscii#7 main::petscii#11 main::petscii#3 main::petscii#4 main::petscii#5 ]
Allocated zp[2]:14 [ main::scrn#7 main::scrn#11 main::scrn#3 main::screen_hidden#0 main::scrn#5 ]
Allocated zp[2]:16 [ memset::dst#2 memset::dst#1 ]
Allocated zp[2]:18 [ x_sin_idx#12 x_sin_idx#14 x_sin_idx#13 x_sin_idx#4 ]
Allocated zp[2]:20 [ y_sin_idx#12 y_sin_idx#13 y_sin_idx#14 y_sin_idx#4 ]
Allocated zp[1]:22 [ screencpy::i#2 screencpy::i#1 ]
Allocated zp[2]:23 [ petscii_ptr::row_y#4 petscii_ptr::row_y#0 petscii_ptr::row_y#2 petscii_ptr::row_y#1 petscii_ptr::row_y#3 ]
Allocated zp[2]:25 [ petscii_ptr::row_x#4 petscii_ptr::row_x#0 petscii_ptr::row_x#2 petscii_ptr::row_x#1 petscii_ptr::row_x#3 ]
Allocated zp[2]:27 [ main::x_pos_coarse_old#0 ]
Allocated zp[2]:29 [ main::y_pos_coarse_old#0 ]
Allocated zp[2]:31 [ main::$5 ]
Allocated zp[1]:33 [ main::y_movement#0 ]
Allocated zp[2]:34 [ main::$9 ]
Allocated zp[1]:36 [ main::x_movement#0 ]
Allocated zp[1]:37 [ main::movement#3 ]
Allocated zp[2]:38 [ main::screen_active#0 ]
Allocated zp[2]:40 [ screencpy::dst#0 ]
Allocated zp[2]:42 [ screencpy::src#0 ]
Allocated zp[2]:44 [ petscii_ptr::return#1 ]
Allocated zp[2]:46 [ petscii_ptr::return#3 ]
Allocated zp[1]:48 [ main::$41 ]
Allocated zp[1]:49 [ main::$42 ]
Allocated zp[1]:50 [ main::$43 ]
Allocated zp[1]:51 [ main::$44 ]
Allocated zp[1]:52 [ main::$45 ]
Allocated zp[1]:53 [ main::$46 ]
Allocated zp[2]:54 [ petscii_ptr::return#2 ]
Allocated zp[2]:56 [ petscii_ptr::return#0 ]
Allocated zp[2]:58 [ next_position::$12 ]
Allocated zp[2]:60 [ next_position::$18 ]
Allocated zp[2]:62 [ x_pos#11 ]
Allocated zp[2]:64 [ next_position::$13 ]
Allocated zp[2]:66 [ next_position::$19 ]
Allocated zp[2]:68 [ y_pos#11 ]
Allocated zp[2]:70 [ next_position::$4 ]
Allocated zp[2]:72 [ next_position::x_pos_u#0 ]
Allocated zp[1]:74 [ next_position::$15 ]
Allocated zp[1]:75 [ x_pos_fine#12 ]
Allocated zp[2]:76 [ x_pos_coarse#17 ]
Allocated zp[2]:78 [ next_position::$8 ]
Allocated zp[2]:80 [ next_position::y_pos_u#0 ]
Allocated zp[1]:82 [ next_position::$17 ]
Allocated zp[1]:83 [ y_pos_fine#12 ]
Allocated zp[2]:84 [ y_pos_coarse#16 ]
Allocated zp[2]:86 [ screencpy::src_250#0 ]
Allocated zp[2]:88 [ screencpy::dst_250#0 ]
Allocated zp[2]:90 [ screencpy::src_500#0 ]
Allocated zp[2]:92 [ screencpy::dst_500#0 ]
Allocated zp[2]:94 [ screencpy::src_750#0 ]
Allocated zp[2]:96 [ screencpy::dst_750#0 ]
Allocated zp[2]:98 [ petscii_ptr::$3 ]
Allocated zp[2]:100 [ petscii_ptr::$4 ]
Allocated zp[2]:102 [ petscii_ptr::$5 ]
Allocated zp[2]:104 [ petscii_ptr::$6 ]
Allocated zp[2]:106 [ petscii_ptr::$0 ]
Allocated zp[2]:108 [ petscii_ptr::$1 ]
Allocated zp[2]:110 [ petscii_ptr::return#10 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [5] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = main::toD0181_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] main::x_pos_coarse_old#0 = x_pos_coarse#17 [ screen_buffer#12 main::x_pos_coarse_old#0 y_pos_coarse#16 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 main::x_pos_coarse_old#0 y_pos_coarse#16 x_sin_idx#14 y_sin_idx#13 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ screen_buffer#12 screen_buffer#26 screen_buffer#0 ]
Statement [9] main::y_pos_coarse_old#0 = y_pos_coarse#16 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#13 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [11] main::$5 = main::y_pos_coarse_old#0 - y_pos_coarse#16 [ screen_buffer#12 main::x_pos_coarse_old#0 x_pos_coarse#17 y_pos_coarse#16 main::$5 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 main::x_pos_coarse_old#0 x_pos_coarse#17 y_pos_coarse#16 main::$5 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:83 [ y_pos_fine#12 ]
Removing always clobbered register reg byte a as potential for zp[1]:75 [ x_pos_fine#12 ]
Statement [17] main::$9 = main::x_pos_coarse_old#0 - x_pos_coarse#17 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::movement#4 main::$9 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::movement#4 main::$9 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:33 [ main::y_movement#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::movement#4 ]
Statement [19] main::movement#3 = main::movement#4 - main::x_movement#0 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::movement#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::movement#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:36 [ main::x_movement#0 ]
Statement [24] main::screen_active#0 = main::$13 + main::movement#3 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_active#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_active#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [28] screencpy::dst#0 = main::screen_hidden#0 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_active#0 main::screen_hidden#0 screencpy::dst#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_active#0 main::screen_hidden#0 screencpy::dst#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [29] screencpy::src#0 = main::screen_active#0 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 screencpy::dst#0 screencpy::src#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 screencpy::dst#0 screencpy::src#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [33] petscii_ptr::row_x#1 = x_pos_coarse#17 - $14 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 petscii_ptr::row_x#1 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 petscii_ptr::row_x#1 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#1 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#1 = petscii_ptr::row_x#4 } { petscii_ptr::return#1 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [34] petscii_ptr::row_y#1 = y_pos_coarse#16 - $c [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 petscii_ptr::row_x#1 petscii_ptr::row_y#1 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 petscii_ptr::row_x#1 petscii_ptr::row_y#1 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#1 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#1 = petscii_ptr::row_x#4 } { petscii_ptr::return#1 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [36] petscii_ptr::return#1 = petscii_ptr::return#10 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 petscii_ptr::return#1 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 petscii_ptr::return#1 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#1 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#1 = petscii_ptr::row_x#4 } { petscii_ptr::return#1 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [37] main::petscii#2 = petscii_ptr::return#1 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 main::petscii#2 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 main::petscii#2 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [38] main::scrn#13 = main::screen_hidden#0 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 main::petscii#2 main::scrn#13 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 main::petscii#2 main::scrn#13 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [44] petscii_ptr::row_x#3 = x_pos_coarse#17 - $14 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 petscii_ptr::row_x#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 petscii_ptr::row_x#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#3 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#3 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#3 } }  ) always clobbers reg byte a 
Statement [45] petscii_ptr::row_y#3 = y_pos_coarse#16 - $c [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 petscii_ptr::row_x#3 petscii_ptr::row_y#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 petscii_ptr::row_x#3 petscii_ptr::row_y#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#3 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#3 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#3 } }  ) always clobbers reg byte a 
Statement [47] petscii_ptr::return#3 = petscii_ptr::return#10 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 petscii_ptr::return#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 petscii_ptr::return#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#3 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#3 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#3 } }  ) always clobbers reg byte a 
Statement [48] main::petscii#4 = petscii_ptr::return#3 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 main::petscii#4 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 main::petscii#4 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [52] screen_buffer#0 = screen_buffer#12 ^ 1 [ x_pos_coarse#17 y_pos_coarse#16 screen_buffer#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ x_pos_coarse#17 y_pos_coarse#16 screen_buffer#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [54] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$fe) goto main::@21 [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [55] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto main::@22 [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [56] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = WHITE [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [57] main::$41 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & $f0 [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 main::$41 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 main::$41 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [58] main::$42 = 7 - y_pos_fine#12 [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 main::$41 main::$42 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 main::$41 main::$42 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:48 [ main::$41 ]
Statement [61] main::$44 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2) & $f0 [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 main::$44 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 main::$44 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [62] main::$45 = 7 - x_pos_fine#12 [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 main::$44 main::$45 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 main::$44 main::$45 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:51 [ main::$44 ]
Statement [67] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = main::toD0183_return#0 [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [68] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [70] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = main::toD0182_return#0 [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [71] *main::scrn#7 = *main::petscii#7 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::i1#2 main::petscii#7 main::scrn#7 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::i1#2 main::petscii#7 main::scrn#7 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ screen_buffer#12 screen_buffer#26 screen_buffer#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:11 [ main::i1#2 main::i1#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:11 [ main::i1#2 main::i1#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:83 [ y_pos_fine#12 ]
Removing always clobbered register reg byte y as potential for zp[1]:75 [ x_pos_fine#12 ]
Statement [72] main::scrn#5 = main::scrn#7 + $28 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::i1#2 main::petscii#7 main::scrn#5 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::i1#2 main::petscii#7 main::scrn#5 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [73] main::petscii#5 = main::petscii#7 + $8c [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::i1#2 main::petscii#5 main::scrn#5 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::i1#2 main::petscii#5 main::scrn#5 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [75] petscii_ptr::row_x#2 = x_pos_coarse#17 + $13 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::row_x#2 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::row_x#2 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#2 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#2 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#2 } }  ) always clobbers reg byte a 
Statement [76] petscii_ptr::row_y#2 = y_pos_coarse#16 - $c [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::row_x#2 petscii_ptr::row_y#2 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::row_x#2 petscii_ptr::row_y#2 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#2 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#2 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#2 } }  ) always clobbers reg byte a 
Statement [78] petscii_ptr::return#2 = petscii_ptr::return#10 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::return#2 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::return#2 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#2 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#2 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#2 } }  ) always clobbers reg byte a 
Statement [79] main::petscii#3 = petscii_ptr::return#2 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 main::petscii#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 main::petscii#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [80] main::scrn#3 = main::screen_hidden#0 + $27 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::petscii#3 main::scrn#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::petscii#3 main::scrn#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [81] main::scrn#10[main::i#2] = main::petscii#10[main::i#2] [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 main::petscii#10 main::scrn#10 main::i#2 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 main::petscii#10 main::scrn#10 main::i#2 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:10 [ main::i#2 main::i#1 ]
Statement [83] petscii_ptr::row_x#0 = x_pos_coarse#17 - $14 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::row_x#0 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::row_x#0 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#0 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#0 = petscii_ptr::row_x#4 } { petscii_ptr::return#0 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [84] petscii_ptr::row_y#0 = y_pos_coarse#16 + $c [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::row_x#0 petscii_ptr::row_y#0 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::row_x#0 petscii_ptr::row_y#0 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#0 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#0 = petscii_ptr::row_x#4 } { petscii_ptr::return#0 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [86] petscii_ptr::return#0 = petscii_ptr::return#10 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::return#0 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::return#0 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#0 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#0 = petscii_ptr::row_x#4 } { petscii_ptr::return#0 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [87] main::petscii#1 = petscii_ptr::return#0 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 main::petscii#1 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 main::petscii#1 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [88] main::scrn#1 = main::screen_hidden#0 + (word)$18*$28 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 main::petscii#1 main::scrn#1 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 main::petscii#1 main::scrn#1 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [91] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::dst#2 ] ( memset:3 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [93] *memset::dst#2 = memset::c#0 [ memset::dst#2 ] ( memset:3 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [97] if(x_sin_idx#13<SINSIZE) goto next_position::@1 [ y_sin_idx#12 x_sin_idx#13 ] ( next_position:6 [ y_sin_idx#12 x_sin_idx#13 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 y_sin_idx#12 x_sin_idx#13 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [98] x_sin_idx#4 = x_sin_idx#13 - SINSIZE [ y_sin_idx#12 x_sin_idx#4 ] ( next_position:6 [ y_sin_idx#12 x_sin_idx#4 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 y_sin_idx#12 x_sin_idx#4 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [101] if(y_sin_idx#14<SINSIZE) goto next_position::@2 [ x_sin_idx#14 y_sin_idx#14 ] ( next_position:6 [ x_sin_idx#14 y_sin_idx#14 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#14 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [102] y_sin_idx#4 = y_sin_idx#14 - SINSIZE [ x_sin_idx#14 y_sin_idx#4 ] ( next_position:6 [ x_sin_idx#14 y_sin_idx#4 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#4 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [104] next_position::$12 = x_sin_idx#14 << 1 [ x_sin_idx#14 y_sin_idx#13 next_position::$12 ] ( next_position:6 [ x_sin_idx#14 y_sin_idx#13 next_position::$12 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#13 next_position::$12 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [105] next_position::$18 = SINTAB + next_position::$12 [ x_sin_idx#14 y_sin_idx#13 next_position::$18 ] ( next_position:6 [ x_sin_idx#14 y_sin_idx#13 next_position::$18 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#13 next_position::$18 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [106] x_pos#11 = *next_position::$18 [ x_sin_idx#14 y_sin_idx#13 x_pos#11 ] ( next_position:6 [ x_sin_idx#14 y_sin_idx#13 x_pos#11 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#13 x_pos#11 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a reg byte y 
Statement [107] next_position::$13 = y_sin_idx#13 << 1 [ x_sin_idx#14 y_sin_idx#13 x_pos#11 next_position::$13 ] ( next_position:6 [ x_sin_idx#14 y_sin_idx#13 x_pos#11 next_position::$13 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#13 x_pos#11 next_position::$13 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [108] next_position::$19 = SINTAB + next_position::$13 [ x_sin_idx#14 y_sin_idx#13 x_pos#11 next_position::$19 ] ( next_position:6 [ x_sin_idx#14 y_sin_idx#13 x_pos#11 next_position::$19 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#13 x_pos#11 next_position::$19 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [109] y_pos#11 = *next_position::$19 [ x_sin_idx#14 y_sin_idx#13 x_pos#11 y_pos#11 ] ( next_position:6 [ x_sin_idx#14 y_sin_idx#13 x_pos#11 y_pos#11 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#13 x_pos#11 y_pos#11 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a reg byte y 
Statement [110] next_position::$4 = (word)x_pos#11 [ x_sin_idx#14 y_sin_idx#13 y_pos#11 next_position::$4 ] ( next_position:6 [ x_sin_idx#14 y_sin_idx#13 y_pos#11 next_position::$4 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#13 y_pos#11 next_position::$4 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [111] next_position::x_pos_u#0 = next_position::$4 + $190+(byte)$14*8 [ x_sin_idx#14 y_sin_idx#13 y_pos#11 next_position::x_pos_u#0 ] ( next_position:6 [ x_sin_idx#14 y_sin_idx#13 y_pos#11 next_position::x_pos_u#0 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#13 y_pos#11 next_position::x_pos_u#0 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [112] next_position::$15 = (byte)next_position::x_pos_u#0 [ x_sin_idx#14 y_sin_idx#13 y_pos#11 next_position::x_pos_u#0 next_position::$15 ] ( next_position:6 [ x_sin_idx#14 y_sin_idx#13 y_pos#11 next_position::x_pos_u#0 next_position::$15 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#13 y_pos#11 next_position::x_pos_u#0 next_position::$15 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [114] x_pos_coarse#17 = next_position::x_pos_u#0 >> 3 [ x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 y_pos#11 ] ( next_position:6 [ x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 y_pos#11 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 y_pos#11 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [115] next_position::$8 = (word)y_pos#11 [ x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 next_position::$8 ] ( next_position:6 [ x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 next_position::$8 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 next_position::$8 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [116] next_position::y_pos_u#0 = next_position::$8 + $190+(byte)$c*8 [ x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 next_position::y_pos_u#0 ] ( next_position:6 [ x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 next_position::y_pos_u#0 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 next_position::y_pos_u#0 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [117] next_position::$17 = (byte)next_position::y_pos_u#0 [ x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 next_position::y_pos_u#0 next_position::$17 ] ( next_position:6 [ x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 next_position::y_pos_u#0 next_position::$17 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 next_position::y_pos_u#0 next_position::$17 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [119] y_pos_coarse#16 = next_position::y_pos_u#0 >> 3 [ x_pos_coarse#17 y_pos_coarse#16 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] ( next_position:6 [ x_pos_coarse#17 y_pos_coarse#16 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_pos_coarse#17 y_pos_coarse#16 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [121] screencpy::src_250#0 = screencpy::src#0 + $fa [ screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 ] ( screencpy:30 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [122] screencpy::dst_250#0 = screencpy::dst#0 + $fa [ screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 ] ( screencpy:30 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [123] screencpy::src_500#0 = screencpy::src#0 + $1f4 [ screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 ] ( screencpy:30 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [124] screencpy::dst_500#0 = screencpy::dst#0 + $1f4 [ screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 ] ( screencpy:30 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [125] screencpy::src_750#0 = screencpy::src#0 + $2ee [ screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 ] ( screencpy:30 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [126] screencpy::dst_750#0 = screencpy::dst#0 + $2ee [ screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 screencpy::dst_750#0 ] ( screencpy:30 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 screencpy::dst_750#0 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [130] screencpy::dst#0[screencpy::i#2] = screencpy::src#0[screencpy::i#2] [ screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 screencpy::dst_750#0 screencpy::i#2 ] ( screencpy:30 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 screencpy::dst_750#0 screencpy::i#2 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:22 [ screencpy::i#2 screencpy::i#1 ]
Statement [131] screencpy::dst_250#0[screencpy::i#2] = screencpy::src_250#0[screencpy::i#2] [ screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 screencpy::dst_750#0 screencpy::i#2 ] ( screencpy:30 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 screencpy::dst_750#0 screencpy::i#2 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [132] screencpy::dst_500#0[screencpy::i#2] = screencpy::src_500#0[screencpy::i#2] [ screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 screencpy::dst_750#0 screencpy::i#2 ] ( screencpy:30 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 screencpy::dst_750#0 screencpy::i#2 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [133] screencpy::dst_750#0[screencpy::i#2] = screencpy::src_750#0[screencpy::i#2] [ screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 screencpy::dst_750#0 screencpy::i#2 ] ( screencpy:30 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 screencpy::dst_750#0 screencpy::i#2 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [136] petscii_ptr::$3 = petscii_ptr::row_y#4 << 4 [ petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$3 ] ( petscii_ptr:35 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$3 ] { { petscii_ptr::row_y#1 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#1 = petscii_ptr::row_x#4 } { petscii_ptr::return#1 = petscii_ptr::return#10 } }  petscii_ptr:46 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$3 ] { { petscii_ptr::row_y#3 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#3 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#3 } }  petscii_ptr:77 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$3 ] { { petscii_ptr::row_y#2 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#2 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#2 } }  petscii_ptr:85 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$3 ] { { petscii_ptr::row_y#0 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#0 = petscii_ptr::row_x#4 } { petscii_ptr::return#0 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [137] petscii_ptr::$4 = petscii_ptr::$3 + petscii_ptr::row_y#4 [ petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$4 ] ( petscii_ptr:35 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$4 ] { { petscii_ptr::row_y#1 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#1 = petscii_ptr::row_x#4 } { petscii_ptr::return#1 = petscii_ptr::return#10 } }  petscii_ptr:46 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$4 ] { { petscii_ptr::row_y#3 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#3 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#3 } }  petscii_ptr:77 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$4 ] { { petscii_ptr::row_y#2 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#2 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#2 } }  petscii_ptr:85 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$4 ] { { petscii_ptr::row_y#0 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#0 = petscii_ptr::row_x#4 } { petscii_ptr::return#0 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [138] petscii_ptr::$5 = petscii_ptr::$4 << 1 [ petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$5 ] ( petscii_ptr:35 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$5 ] { { petscii_ptr::row_y#1 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#1 = petscii_ptr::row_x#4 } { petscii_ptr::return#1 = petscii_ptr::return#10 } }  petscii_ptr:46 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$5 ] { { petscii_ptr::row_y#3 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#3 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#3 } }  petscii_ptr:77 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$5 ] { { petscii_ptr::row_y#2 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#2 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#2 } }  petscii_ptr:85 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$5 ] { { petscii_ptr::row_y#0 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#0 = petscii_ptr::row_x#4 } { petscii_ptr::return#0 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [139] petscii_ptr::$6 = petscii_ptr::$5 + petscii_ptr::row_y#4 [ petscii_ptr::row_x#4 petscii_ptr::$6 ] ( petscii_ptr:35 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$6 ] { { petscii_ptr::row_y#1 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#1 = petscii_ptr::row_x#4 } { petscii_ptr::return#1 = petscii_ptr::return#10 } }  petscii_ptr:46 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$6 ] { { petscii_ptr::row_y#3 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#3 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#3 } }  petscii_ptr:77 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$6 ] { { petscii_ptr::row_y#2 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#2 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#2 } }  petscii_ptr:85 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$6 ] { { petscii_ptr::row_y#0 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#0 = petscii_ptr::row_x#4 } { petscii_ptr::return#0 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [140] petscii_ptr::$0 = petscii_ptr::$6 << 2 [ petscii_ptr::row_x#4 petscii_ptr::$0 ] ( petscii_ptr:35 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$0 ] { { petscii_ptr::row_y#1 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#1 = petscii_ptr::row_x#4 } { petscii_ptr::return#1 = petscii_ptr::return#10 } }  petscii_ptr:46 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$0 ] { { petscii_ptr::row_y#3 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#3 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#3 } }  petscii_ptr:77 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$0 ] { { petscii_ptr::row_y#2 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#2 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#2 } }  petscii_ptr:85 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$0 ] { { petscii_ptr::row_y#0 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#0 = petscii_ptr::row_x#4 } { petscii_ptr::return#0 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [141] petscii_ptr::$1 = PETSCII_ART + petscii_ptr::$0 [ petscii_ptr::row_x#4 petscii_ptr::$1 ] ( petscii_ptr:35 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$1 ] { { petscii_ptr::row_y#1 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#1 = petscii_ptr::row_x#4 } { petscii_ptr::return#1 = petscii_ptr::return#10 } }  petscii_ptr:46 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$1 ] { { petscii_ptr::row_y#3 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#3 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#3 } }  petscii_ptr:77 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$1 ] { { petscii_ptr::row_y#2 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#2 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#2 } }  petscii_ptr:85 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$1 ] { { petscii_ptr::row_y#0 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#0 = petscii_ptr::row_x#4 } { petscii_ptr::return#0 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [142] petscii_ptr::return#10 = petscii_ptr::$1 + petscii_ptr::row_x#4 [ petscii_ptr::return#10 ] ( petscii_ptr:35 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::return#10 ] { { petscii_ptr::row_y#1 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#1 = petscii_ptr::row_x#4 } { petscii_ptr::return#1 = petscii_ptr::return#10 } }  petscii_ptr:46 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::return#10 ] { { petscii_ptr::row_y#3 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#3 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#3 } }  petscii_ptr:77 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::return#10 ] { { petscii_ptr::row_y#2 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#2 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#2 } }  petscii_ptr:85 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::return#10 ] { { petscii_ptr::row_y#0 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#0 = petscii_ptr::row_x#4 } { petscii_ptr::return#0 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [5] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = main::toD0181_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] main::x_pos_coarse_old#0 = x_pos_coarse#17 [ screen_buffer#12 main::x_pos_coarse_old#0 y_pos_coarse#16 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 main::x_pos_coarse_old#0 y_pos_coarse#16 x_sin_idx#14 y_sin_idx#13 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [9] main::y_pos_coarse_old#0 = y_pos_coarse#16 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#13 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [11] main::$5 = main::y_pos_coarse_old#0 - y_pos_coarse#16 [ screen_buffer#12 main::x_pos_coarse_old#0 x_pos_coarse#17 y_pos_coarse#16 main::$5 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 main::x_pos_coarse_old#0 x_pos_coarse#17 y_pos_coarse#16 main::$5 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [17] main::$9 = main::x_pos_coarse_old#0 - x_pos_coarse#17 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::movement#4 main::$9 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::movement#4 main::$9 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [19] main::movement#3 = main::movement#4 - main::x_movement#0 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::movement#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::movement#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [24] main::screen_active#0 = main::$13 + main::movement#3 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_active#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_active#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [28] screencpy::dst#0 = main::screen_hidden#0 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_active#0 main::screen_hidden#0 screencpy::dst#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_active#0 main::screen_hidden#0 screencpy::dst#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [29] screencpy::src#0 = main::screen_active#0 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 screencpy::dst#0 screencpy::src#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 screencpy::dst#0 screencpy::src#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [33] petscii_ptr::row_x#1 = x_pos_coarse#17 - $14 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 petscii_ptr::row_x#1 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 petscii_ptr::row_x#1 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#1 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#1 = petscii_ptr::row_x#4 } { petscii_ptr::return#1 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [34] petscii_ptr::row_y#1 = y_pos_coarse#16 - $c [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 petscii_ptr::row_x#1 petscii_ptr::row_y#1 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 petscii_ptr::row_x#1 petscii_ptr::row_y#1 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#1 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#1 = petscii_ptr::row_x#4 } { petscii_ptr::return#1 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [36] petscii_ptr::return#1 = petscii_ptr::return#10 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 petscii_ptr::return#1 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 petscii_ptr::return#1 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#1 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#1 = petscii_ptr::row_x#4 } { petscii_ptr::return#1 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [37] main::petscii#2 = petscii_ptr::return#1 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 main::petscii#2 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 main::petscii#2 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [38] main::scrn#13 = main::screen_hidden#0 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 main::petscii#2 main::scrn#13 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 main::petscii#2 main::scrn#13 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [44] petscii_ptr::row_x#3 = x_pos_coarse#17 - $14 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 petscii_ptr::row_x#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 petscii_ptr::row_x#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#3 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#3 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#3 } }  ) always clobbers reg byte a 
Statement [45] petscii_ptr::row_y#3 = y_pos_coarse#16 - $c [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 petscii_ptr::row_x#3 petscii_ptr::row_y#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 petscii_ptr::row_x#3 petscii_ptr::row_y#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#3 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#3 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#3 } }  ) always clobbers reg byte a 
Statement [47] petscii_ptr::return#3 = petscii_ptr::return#10 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 petscii_ptr::return#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 petscii_ptr::return#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#3 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#3 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#3 } }  ) always clobbers reg byte a 
Statement [48] main::petscii#4 = petscii_ptr::return#3 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 main::petscii#4 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 main::petscii#4 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [52] screen_buffer#0 = screen_buffer#12 ^ 1 [ x_pos_coarse#17 y_pos_coarse#16 screen_buffer#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ x_pos_coarse#17 y_pos_coarse#16 screen_buffer#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [54] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$fe) goto main::@21 [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [55] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto main::@22 [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [56] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = WHITE [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [57] main::$41 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & $f0 [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 main::$41 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 main::$41 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [58] main::$42 = 7 - y_pos_fine#12 [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 main::$41 main::$42 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 main::$41 main::$42 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [61] main::$44 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2) & $f0 [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 main::$44 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 main::$44 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [62] main::$45 = 7 - x_pos_fine#12 [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 main::$44 main::$45 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 main::$44 main::$45 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [67] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = main::toD0183_return#0 [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [68] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [70] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = main::toD0182_return#0 [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#26 x_pos_coarse#17 y_pos_coarse#16 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [71] *main::scrn#7 = *main::petscii#7 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::i1#2 main::petscii#7 main::scrn#7 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::i1#2 main::petscii#7 main::scrn#7 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a reg byte y 
Statement [72] main::scrn#5 = main::scrn#7 + $28 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::i1#2 main::petscii#7 main::scrn#5 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::i1#2 main::petscii#7 main::scrn#5 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [73] main::petscii#5 = main::petscii#7 + $8c [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::i1#2 main::petscii#5 main::scrn#5 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::i1#2 main::petscii#5 main::scrn#5 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [75] petscii_ptr::row_x#2 = x_pos_coarse#17 + $13 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::row_x#2 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::row_x#2 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#2 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#2 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#2 } }  ) always clobbers reg byte a 
Statement [76] petscii_ptr::row_y#2 = y_pos_coarse#16 - $c [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::row_x#2 petscii_ptr::row_y#2 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::row_x#2 petscii_ptr::row_y#2 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#2 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#2 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#2 } }  ) always clobbers reg byte a 
Statement [78] petscii_ptr::return#2 = petscii_ptr::return#10 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::return#2 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::return#2 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#2 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#2 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#2 } }  ) always clobbers reg byte a 
Statement [79] main::petscii#3 = petscii_ptr::return#2 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 main::petscii#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 main::petscii#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [80] main::scrn#3 = main::screen_hidden#0 + $27 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::petscii#3 main::scrn#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::petscii#3 main::scrn#3 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [81] main::scrn#10[main::i#2] = main::petscii#10[main::i#2] [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 main::petscii#10 main::scrn#10 main::i#2 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 main::petscii#10 main::scrn#10 main::i#2 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [83] petscii_ptr::row_x#0 = x_pos_coarse#17 - $14 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::row_x#0 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::row_x#0 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#0 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#0 = petscii_ptr::row_x#4 } { petscii_ptr::return#0 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [84] petscii_ptr::row_y#0 = y_pos_coarse#16 + $c [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::row_x#0 petscii_ptr::row_y#0 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::row_x#0 petscii_ptr::row_y#0 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#0 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#0 = petscii_ptr::row_x#4 } { petscii_ptr::return#0 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [86] petscii_ptr::return#0 = petscii_ptr::return#10 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::return#0 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 petscii_ptr::return#0 x_sin_idx#14 y_sin_idx#13 ] { { petscii_ptr::row_y#0 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#0 = petscii_ptr::row_x#4 } { petscii_ptr::return#0 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [87] main::petscii#1 = petscii_ptr::return#0 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 main::petscii#1 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 main::petscii#1 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [88] main::scrn#1 = main::screen_hidden#0 + (word)$18*$28 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 main::petscii#1 main::scrn#1 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] (  [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 main::petscii#1 main::scrn#1 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  ) always clobbers reg byte a 
Statement [91] if(memset::dst#2!=memset::end#0) goto memset::@2 [ memset::dst#2 ] ( memset:3 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [93] *memset::dst#2 = memset::c#0 [ memset::dst#2 ] ( memset:3 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [97] if(x_sin_idx#13<SINSIZE) goto next_position::@1 [ y_sin_idx#12 x_sin_idx#13 ] ( next_position:6 [ y_sin_idx#12 x_sin_idx#13 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 y_sin_idx#12 x_sin_idx#13 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [98] x_sin_idx#4 = x_sin_idx#13 - SINSIZE [ y_sin_idx#12 x_sin_idx#4 ] ( next_position:6 [ y_sin_idx#12 x_sin_idx#4 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 y_sin_idx#12 x_sin_idx#4 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [101] if(y_sin_idx#14<SINSIZE) goto next_position::@2 [ x_sin_idx#14 y_sin_idx#14 ] ( next_position:6 [ x_sin_idx#14 y_sin_idx#14 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#14 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [102] y_sin_idx#4 = y_sin_idx#14 - SINSIZE [ x_sin_idx#14 y_sin_idx#4 ] ( next_position:6 [ x_sin_idx#14 y_sin_idx#4 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#4 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [104] next_position::$12 = x_sin_idx#14 << 1 [ x_sin_idx#14 y_sin_idx#13 next_position::$12 ] ( next_position:6 [ x_sin_idx#14 y_sin_idx#13 next_position::$12 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#13 next_position::$12 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [105] next_position::$18 = SINTAB + next_position::$12 [ x_sin_idx#14 y_sin_idx#13 next_position::$18 ] ( next_position:6 [ x_sin_idx#14 y_sin_idx#13 next_position::$18 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#13 next_position::$18 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [106] x_pos#11 = *next_position::$18 [ x_sin_idx#14 y_sin_idx#13 x_pos#11 ] ( next_position:6 [ x_sin_idx#14 y_sin_idx#13 x_pos#11 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#13 x_pos#11 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a reg byte y 
Statement [107] next_position::$13 = y_sin_idx#13 << 1 [ x_sin_idx#14 y_sin_idx#13 x_pos#11 next_position::$13 ] ( next_position:6 [ x_sin_idx#14 y_sin_idx#13 x_pos#11 next_position::$13 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#13 x_pos#11 next_position::$13 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [108] next_position::$19 = SINTAB + next_position::$13 [ x_sin_idx#14 y_sin_idx#13 x_pos#11 next_position::$19 ] ( next_position:6 [ x_sin_idx#14 y_sin_idx#13 x_pos#11 next_position::$19 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#13 x_pos#11 next_position::$19 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [109] y_pos#11 = *next_position::$19 [ x_sin_idx#14 y_sin_idx#13 x_pos#11 y_pos#11 ] ( next_position:6 [ x_sin_idx#14 y_sin_idx#13 x_pos#11 y_pos#11 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#13 x_pos#11 y_pos#11 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a reg byte y 
Statement [110] next_position::$4 = (word)x_pos#11 [ x_sin_idx#14 y_sin_idx#13 y_pos#11 next_position::$4 ] ( next_position:6 [ x_sin_idx#14 y_sin_idx#13 y_pos#11 next_position::$4 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#13 y_pos#11 next_position::$4 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [111] next_position::x_pos_u#0 = next_position::$4 + $190+(byte)$14*8 [ x_sin_idx#14 y_sin_idx#13 y_pos#11 next_position::x_pos_u#0 ] ( next_position:6 [ x_sin_idx#14 y_sin_idx#13 y_pos#11 next_position::x_pos_u#0 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#13 y_pos#11 next_position::x_pos_u#0 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [112] next_position::$15 = (byte)next_position::x_pos_u#0 [ x_sin_idx#14 y_sin_idx#13 y_pos#11 next_position::x_pos_u#0 next_position::$15 ] ( next_position:6 [ x_sin_idx#14 y_sin_idx#13 y_pos#11 next_position::x_pos_u#0 next_position::$15 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_sin_idx#14 y_sin_idx#13 y_pos#11 next_position::x_pos_u#0 next_position::$15 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [114] x_pos_coarse#17 = next_position::x_pos_u#0 >> 3 [ x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 y_pos#11 ] ( next_position:6 [ x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 y_pos#11 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 y_pos#11 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [115] next_position::$8 = (word)y_pos#11 [ x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 next_position::$8 ] ( next_position:6 [ x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 next_position::$8 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 next_position::$8 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [116] next_position::y_pos_u#0 = next_position::$8 + $190+(byte)$c*8 [ x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 next_position::y_pos_u#0 ] ( next_position:6 [ x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 next_position::y_pos_u#0 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 next_position::y_pos_u#0 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [117] next_position::$17 = (byte)next_position::y_pos_u#0 [ x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 next_position::y_pos_u#0 next_position::$17 ] ( next_position:6 [ x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 next_position::y_pos_u#0 next_position::$17 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_pos_coarse#17 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 next_position::y_pos_u#0 next_position::$17 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [119] y_pos_coarse#16 = next_position::y_pos_u#0 >> 3 [ x_pos_coarse#17 y_pos_coarse#16 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] ( next_position:6 [ x_pos_coarse#17 y_pos_coarse#16 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { }  next_position:10 [ screen_buffer#12 main::x_pos_coarse_old#0 main::y_pos_coarse_old#0 x_pos_coarse#17 y_pos_coarse#16 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 ] { { x_sin_idx#12 = x_sin_idx#14 } { y_sin_idx#12 = y_sin_idx#13 } }  ) always clobbers reg byte a 
Statement [121] screencpy::src_250#0 = screencpy::src#0 + $fa [ screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 ] ( screencpy:30 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [122] screencpy::dst_250#0 = screencpy::dst#0 + $fa [ screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 ] ( screencpy:30 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [123] screencpy::src_500#0 = screencpy::src#0 + $1f4 [ screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 ] ( screencpy:30 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [124] screencpy::dst_500#0 = screencpy::dst#0 + $1f4 [ screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 ] ( screencpy:30 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [125] screencpy::src_750#0 = screencpy::src#0 + $2ee [ screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 ] ( screencpy:30 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [126] screencpy::dst_750#0 = screencpy::dst#0 + $2ee [ screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 screencpy::dst_750#0 ] ( screencpy:30 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 screencpy::dst_750#0 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [130] screencpy::dst#0[screencpy::i#2] = screencpy::src#0[screencpy::i#2] [ screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 screencpy::dst_750#0 screencpy::i#2 ] ( screencpy:30 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 screencpy::dst_750#0 screencpy::i#2 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [131] screencpy::dst_250#0[screencpy::i#2] = screencpy::src_250#0[screencpy::i#2] [ screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 screencpy::dst_750#0 screencpy::i#2 ] ( screencpy:30 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 screencpy::dst_750#0 screencpy::i#2 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [132] screencpy::dst_500#0[screencpy::i#2] = screencpy::src_500#0[screencpy::i#2] [ screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 screencpy::dst_750#0 screencpy::i#2 ] ( screencpy:30 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 screencpy::dst_750#0 screencpy::i#2 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [133] screencpy::dst_750#0[screencpy::i#2] = screencpy::src_750#0[screencpy::i#2] [ screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 screencpy::dst_750#0 screencpy::i#2 ] ( screencpy:30 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::y_movement#0 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 screencpy::dst#0 screencpy::src#0 screencpy::src_250#0 screencpy::dst_250#0 screencpy::src_500#0 screencpy::dst_500#0 screencpy::src_750#0 screencpy::dst_750#0 screencpy::i#2 ] { { screencpy::dst#0 = main::screen_hidden#0 } { screencpy::src#0 = main::screen_active#0 } }  ) always clobbers reg byte a 
Statement [136] petscii_ptr::$3 = petscii_ptr::row_y#4 << 4 [ petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$3 ] ( petscii_ptr:35 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$3 ] { { petscii_ptr::row_y#1 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#1 = petscii_ptr::row_x#4 } { petscii_ptr::return#1 = petscii_ptr::return#10 } }  petscii_ptr:46 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$3 ] { { petscii_ptr::row_y#3 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#3 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#3 } }  petscii_ptr:77 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$3 ] { { petscii_ptr::row_y#2 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#2 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#2 } }  petscii_ptr:85 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$3 ] { { petscii_ptr::row_y#0 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#0 = petscii_ptr::row_x#4 } { petscii_ptr::return#0 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [137] petscii_ptr::$4 = petscii_ptr::$3 + petscii_ptr::row_y#4 [ petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$4 ] ( petscii_ptr:35 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$4 ] { { petscii_ptr::row_y#1 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#1 = petscii_ptr::row_x#4 } { petscii_ptr::return#1 = petscii_ptr::return#10 } }  petscii_ptr:46 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$4 ] { { petscii_ptr::row_y#3 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#3 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#3 } }  petscii_ptr:77 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$4 ] { { petscii_ptr::row_y#2 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#2 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#2 } }  petscii_ptr:85 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$4 ] { { petscii_ptr::row_y#0 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#0 = petscii_ptr::row_x#4 } { petscii_ptr::return#0 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [138] petscii_ptr::$5 = petscii_ptr::$4 << 1 [ petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$5 ] ( petscii_ptr:35 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$5 ] { { petscii_ptr::row_y#1 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#1 = petscii_ptr::row_x#4 } { petscii_ptr::return#1 = petscii_ptr::return#10 } }  petscii_ptr:46 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$5 ] { { petscii_ptr::row_y#3 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#3 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#3 } }  petscii_ptr:77 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$5 ] { { petscii_ptr::row_y#2 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#2 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#2 } }  petscii_ptr:85 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_y#4 petscii_ptr::row_x#4 petscii_ptr::$5 ] { { petscii_ptr::row_y#0 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#0 = petscii_ptr::row_x#4 } { petscii_ptr::return#0 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [139] petscii_ptr::$6 = petscii_ptr::$5 + petscii_ptr::row_y#4 [ petscii_ptr::row_x#4 petscii_ptr::$6 ] ( petscii_ptr:35 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$6 ] { { petscii_ptr::row_y#1 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#1 = petscii_ptr::row_x#4 } { petscii_ptr::return#1 = petscii_ptr::return#10 } }  petscii_ptr:46 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$6 ] { { petscii_ptr::row_y#3 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#3 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#3 } }  petscii_ptr:77 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$6 ] { { petscii_ptr::row_y#2 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#2 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#2 } }  petscii_ptr:85 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$6 ] { { petscii_ptr::row_y#0 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#0 = petscii_ptr::row_x#4 } { petscii_ptr::return#0 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [140] petscii_ptr::$0 = petscii_ptr::$6 << 2 [ petscii_ptr::row_x#4 petscii_ptr::$0 ] ( petscii_ptr:35 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$0 ] { { petscii_ptr::row_y#1 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#1 = petscii_ptr::row_x#4 } { petscii_ptr::return#1 = petscii_ptr::return#10 } }  petscii_ptr:46 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$0 ] { { petscii_ptr::row_y#3 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#3 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#3 } }  petscii_ptr:77 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$0 ] { { petscii_ptr::row_y#2 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#2 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#2 } }  petscii_ptr:85 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$0 ] { { petscii_ptr::row_y#0 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#0 = petscii_ptr::row_x#4 } { petscii_ptr::return#0 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [141] petscii_ptr::$1 = PETSCII_ART + petscii_ptr::$0 [ petscii_ptr::row_x#4 petscii_ptr::$1 ] ( petscii_ptr:35 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$1 ] { { petscii_ptr::row_y#1 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#1 = petscii_ptr::row_x#4 } { petscii_ptr::return#1 = petscii_ptr::return#10 } }  petscii_ptr:46 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$1 ] { { petscii_ptr::row_y#3 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#3 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#3 } }  petscii_ptr:77 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$1 ] { { petscii_ptr::row_y#2 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#2 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#2 } }  petscii_ptr:85 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::row_x#4 petscii_ptr::$1 ] { { petscii_ptr::row_y#0 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#0 = petscii_ptr::row_x#4 } { petscii_ptr::return#0 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Statement [142] petscii_ptr::return#10 = petscii_ptr::$1 + petscii_ptr::row_x#4 [ petscii_ptr::return#10 ] ( petscii_ptr:35 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::return#10 ] { { petscii_ptr::row_y#1 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#1 = petscii_ptr::row_x#4 } { petscii_ptr::return#1 = petscii_ptr::return#10 } }  petscii_ptr:46 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::return#10 ] { { petscii_ptr::row_y#3 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#3 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#3 } }  petscii_ptr:77 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::return#10 ] { { petscii_ptr::row_y#2 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#2 = petscii_ptr::row_x#4 } { petscii_ptr::return#10 = petscii_ptr::return#2 } }  petscii_ptr:85 [ screen_buffer#12 x_pos_coarse#17 y_pos_coarse#16 main::x_movement#0 main::screen_hidden#0 y_pos_fine#12 x_pos_fine#12 x_sin_idx#14 y_sin_idx#13 petscii_ptr::return#10 ] { { petscii_ptr::row_y#0 = petscii_ptr::row_y#4 } { petscii_ptr::row_x#0 = petscii_ptr::row_x#4 } { petscii_ptr::return#0 = petscii_ptr::return#10 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ screen_buffer#12 screen_buffer#26 screen_buffer#0 ] : zp[1]:2 , reg byte x , 
Potential registers zp[1]:3 [ main::movement#4 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[2]:4 [ main::$13 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ main::petscii#10 main::petscii#1 main::petscii#2 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ main::scrn#10 main::scrn#1 main::scrn#13 ] : zp[2]:8 , 
Potential registers zp[1]:10 [ main::i#2 main::i#1 ] : zp[1]:10 , reg byte x , reg byte y , 
Potential registers zp[1]:11 [ main::i1#2 main::i1#1 ] : zp[1]:11 , reg byte x , 
Potential registers zp[2]:12 [ main::petscii#7 main::petscii#11 main::petscii#3 main::petscii#4 main::petscii#5 ] : zp[2]:12 , 
Potential registers zp[2]:14 [ main::scrn#7 main::scrn#11 main::scrn#3 main::screen_hidden#0 main::scrn#5 ] : zp[2]:14 , 
Potential registers zp[2]:16 [ memset::dst#2 memset::dst#1 ] : zp[2]:16 , 
Potential registers zp[2]:18 [ x_sin_idx#12 x_sin_idx#14 x_sin_idx#13 x_sin_idx#4 ] : zp[2]:18 , 
Potential registers zp[2]:20 [ y_sin_idx#12 y_sin_idx#13 y_sin_idx#14 y_sin_idx#4 ] : zp[2]:20 , 
Potential registers zp[1]:22 [ screencpy::i#2 screencpy::i#1 ] : zp[1]:22 , reg byte x , reg byte y , 
Potential registers zp[2]:23 [ petscii_ptr::row_y#4 petscii_ptr::row_y#0 petscii_ptr::row_y#2 petscii_ptr::row_y#1 petscii_ptr::row_y#3 ] : zp[2]:23 , 
Potential registers zp[2]:25 [ petscii_ptr::row_x#4 petscii_ptr::row_x#0 petscii_ptr::row_x#2 petscii_ptr::row_x#1 petscii_ptr::row_x#3 ] : zp[2]:25 , 
Potential registers zp[2]:27 [ main::x_pos_coarse_old#0 ] : zp[2]:27 , 
Potential registers zp[2]:29 [ main::y_pos_coarse_old#0 ] : zp[2]:29 , 
Potential registers zp[2]:31 [ main::$5 ] : zp[2]:31 , 
Potential registers zp[1]:33 [ main::y_movement#0 ] : zp[1]:33 , reg byte x , reg byte y , 
Potential registers zp[2]:34 [ main::$9 ] : zp[2]:34 , 
Potential registers zp[1]:36 [ main::x_movement#0 ] : zp[1]:36 , reg byte x , reg byte y , 
Potential registers zp[1]:37 [ main::movement#3 ] : zp[1]:37 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:38 [ main::screen_active#0 ] : zp[2]:38 , 
Potential registers zp[2]:40 [ screencpy::dst#0 ] : zp[2]:40 , 
Potential registers zp[2]:42 [ screencpy::src#0 ] : zp[2]:42 , 
Potential registers zp[2]:44 [ petscii_ptr::return#1 ] : zp[2]:44 , 
Potential registers zp[2]:46 [ petscii_ptr::return#3 ] : zp[2]:46 , 
Potential registers zp[1]:48 [ main::$41 ] : zp[1]:48 , reg byte x , reg byte y , 
Potential registers zp[1]:49 [ main::$42 ] : zp[1]:49 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:50 [ main::$43 ] : zp[1]:50 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:51 [ main::$44 ] : zp[1]:51 , reg byte x , reg byte y , 
Potential registers zp[1]:52 [ main::$45 ] : zp[1]:52 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:53 [ main::$46 ] : zp[1]:53 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:54 [ petscii_ptr::return#2 ] : zp[2]:54 , 
Potential registers zp[2]:56 [ petscii_ptr::return#0 ] : zp[2]:56 , 
Potential registers zp[2]:58 [ next_position::$12 ] : zp[2]:58 , 
Potential registers zp[2]:60 [ next_position::$18 ] : zp[2]:60 , 
Potential registers zp[2]:62 [ x_pos#11 ] : zp[2]:62 , 
Potential registers zp[2]:64 [ next_position::$13 ] : zp[2]:64 , 
Potential registers zp[2]:66 [ next_position::$19 ] : zp[2]:66 , 
Potential registers zp[2]:68 [ y_pos#11 ] : zp[2]:68 , 
Potential registers zp[2]:70 [ next_position::$4 ] : zp[2]:70 , 
Potential registers zp[2]:72 [ next_position::x_pos_u#0 ] : zp[2]:72 , 
Potential registers zp[1]:74 [ next_position::$15 ] : zp[1]:74 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:75 [ x_pos_fine#12 ] : zp[1]:75 , reg byte x , 
Potential registers zp[2]:76 [ x_pos_coarse#17 ] : zp[2]:76 , 
Potential registers zp[2]:78 [ next_position::$8 ] : zp[2]:78 , 
Potential registers zp[2]:80 [ next_position::y_pos_u#0 ] : zp[2]:80 , 
Potential registers zp[1]:82 [ next_position::$17 ] : zp[1]:82 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:83 [ y_pos_fine#12 ] : zp[1]:83 , reg byte x , 
Potential registers zp[2]:84 [ y_pos_coarse#16 ] : zp[2]:84 , 
Potential registers zp[2]:86 [ screencpy::src_250#0 ] : zp[2]:86 , 
Potential registers zp[2]:88 [ screencpy::dst_250#0 ] : zp[2]:88 , 
Potential registers zp[2]:90 [ screencpy::src_500#0 ] : zp[2]:90 , 
Potential registers zp[2]:92 [ screencpy::dst_500#0 ] : zp[2]:92 , 
Potential registers zp[2]:94 [ screencpy::src_750#0 ] : zp[2]:94 , 
Potential registers zp[2]:96 [ screencpy::dst_750#0 ] : zp[2]:96 , 
Potential registers zp[2]:98 [ petscii_ptr::$3 ] : zp[2]:98 , 
Potential registers zp[2]:100 [ petscii_ptr::$4 ] : zp[2]:100 , 
Potential registers zp[2]:102 [ petscii_ptr::$5 ] : zp[2]:102 , 
Potential registers zp[2]:104 [ petscii_ptr::$6 ] : zp[2]:104 , 
Potential registers zp[2]:106 [ petscii_ptr::$0 ] : zp[2]:106 , 
Potential registers zp[2]:108 [ petscii_ptr::$1 ] : zp[2]:108 , 
Potential registers zp[2]:110 [ petscii_ptr::return#10 ] : zp[2]:110 , 

REGISTER UPLIFT SCOPES
Uplift Scope [screencpy] 38,337.17: zp[1]:22 [ screencpy::i#2 screencpy::i#1 ] 1,262.75: zp[2]:96 [ screencpy::dst_750#0 ] 1,122.44: zp[2]:94 [ screencpy::src_750#0 ] 1,010.2: zp[2]:92 [ screencpy::dst_500#0 ] 918.36: zp[2]:90 [ screencpy::src_500#0 ] 841.83: zp[2]:88 [ screencpy::dst_250#0 ] 777.08: zp[2]:86 [ screencpy::src_250#0 ] 736.79: zp[2]:42 [ screencpy::src#0 ] 687.67: zp[2]:40 [ screencpy::dst#0 ] 
Uplift Scope [next_position] 202: zp[2]:58 [ next_position::$12 ] 202: zp[2]:60 [ next_position::$18 ] 202: zp[2]:64 [ next_position::$13 ] 202: zp[2]:66 [ next_position::$19 ] 202: zp[2]:70 [ next_position::$4 ] 202: zp[1]:74 [ next_position::$15 ] 202: zp[2]:78 [ next_position::$8 ] 202: zp[1]:82 [ next_position::$17 ] 67.33: zp[2]:72 [ next_position::x_pos_u#0 ] 67.33: zp[2]:80 [ next_position::y_pos_u#0 ] 
Uplift Scope [petscii_ptr] 202: zp[2]:98 [ petscii_ptr::$3 ] 202: zp[2]:100 [ petscii_ptr::$4 ] 202: zp[2]:102 [ petscii_ptr::$5 ] 202: zp[2]:104 [ petscii_ptr::$6 ] 202: zp[2]:106 [ petscii_ptr::$0 ] 202: zp[2]:108 [ petscii_ptr::$1 ] 174.75: zp[2]:23 [ petscii_ptr::row_y#4 petscii_ptr::row_y#0 petscii_ptr::row_y#2 petscii_ptr::row_y#1 petscii_ptr::row_y#3 ] 64.71: zp[2]:25 [ petscii_ptr::row_x#4 petscii_ptr::row_x#0 petscii_ptr::row_x#2 petscii_ptr::row_x#1 petscii_ptr::row_x#3 ] 24.17: zp[2]:110 [ petscii_ptr::return#10 ] 22: zp[2]:44 [ petscii_ptr::return#1 ] 22: zp[2]:46 [ petscii_ptr::return#3 ] 22: zp[2]:54 [ petscii_ptr::return#2 ] 22: zp[2]:56 [ petscii_ptr::return#0 ] 
Uplift Scope [main] 370.33: zp[1]:10 [ main::i#2 main::i#1 ] 262.6: zp[1]:11 [ main::i1#2 main::i1#1 ] 245.5: zp[2]:12 [ main::petscii#7 main::petscii#11 main::petscii#3 main::petscii#4 main::petscii#5 ] 228.57: zp[2]:14 [ main::scrn#7 main::scrn#11 main::scrn#3 main::screen_hidden#0 main::scrn#5 ] 68.6: zp[2]:8 [ main::scrn#10 main::scrn#1 main::scrn#13 ] 46.6: zp[2]:6 [ main::petscii#10 main::petscii#1 main::petscii#2 ] 22: zp[1]:49 [ main::$42 ] 22: zp[1]:50 [ main::$43 ] 22: zp[1]:52 [ main::$45 ] 22: zp[1]:53 [ main::$46 ] 11: zp[2]:4 [ main::$13 ] 11: zp[2]:29 [ main::y_pos_coarse_old#0 ] 11: zp[2]:31 [ main::$5 ] 11: zp[2]:34 [ main::$9 ] 11: zp[1]:48 [ main::$41 ] 11: zp[1]:51 [ main::$44 ] 6.6: zp[1]:37 [ main::movement#3 ] 4.4: zp[2]:38 [ main::screen_active#0 ] 3.67: zp[1]:3 [ main::movement#4 ] 2.75: zp[1]:33 [ main::y_movement#0 ] 2.44: zp[2]:27 [ main::x_pos_coarse_old#0 ] 1.33: zp[1]:36 [ main::x_movement#0 ] 
Uplift Scope [] 518.99: zp[2]:18 [ x_sin_idx#12 x_sin_idx#14 x_sin_idx#13 x_sin_idx#4 ] 429.51: zp[2]:20 [ y_sin_idx#12 y_sin_idx#13 y_sin_idx#14 y_sin_idx#4 ] 36.54: zp[1]:2 [ screen_buffer#12 screen_buffer#26 screen_buffer#0 ] 25.25: zp[2]:62 [ x_pos#11 ] 16.83: zp[2]:68 [ y_pos#11 ] 1.99: zp[2]:84 [ y_pos_coarse#16 ] 1.9: zp[2]:76 [ x_pos_coarse#17 ] 1.62: zp[1]:83 [ y_pos_fine#12 ] 1.44: zp[1]:75 [ x_pos_fine#12 ] 
Uplift Scope [memset] 336.67: zp[2]:16 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 

Uplifting [screencpy] best 29844 combination reg byte y [ screencpy::i#2 screencpy::i#1 ] zp[2]:96 [ screencpy::dst_750#0 ] zp[2]:94 [ screencpy::src_750#0 ] zp[2]:92 [ screencpy::dst_500#0 ] zp[2]:90 [ screencpy::src_500#0 ] zp[2]:88 [ screencpy::dst_250#0 ] zp[2]:86 [ screencpy::src_250#0 ] zp[2]:42 [ screencpy::src#0 ] zp[2]:40 [ screencpy::dst#0 ] 
Uplifting [next_position] best 29832 combination zp[2]:58 [ next_position::$12 ] zp[2]:60 [ next_position::$18 ] zp[2]:64 [ next_position::$13 ] zp[2]:66 [ next_position::$19 ] zp[2]:70 [ next_position::$4 ] reg byte a [ next_position::$15 ] zp[2]:78 [ next_position::$8 ] reg byte a [ next_position::$17 ] zp[2]:72 [ next_position::x_pos_u#0 ] zp[2]:80 [ next_position::y_pos_u#0 ] 
Uplifting [petscii_ptr] best 29832 combination zp[2]:98 [ petscii_ptr::$3 ] zp[2]:100 [ petscii_ptr::$4 ] zp[2]:102 [ petscii_ptr::$5 ] zp[2]:104 [ petscii_ptr::$6 ] zp[2]:106 [ petscii_ptr::$0 ] zp[2]:108 [ petscii_ptr::$1 ] zp[2]:23 [ petscii_ptr::row_y#4 petscii_ptr::row_y#0 petscii_ptr::row_y#2 petscii_ptr::row_y#1 petscii_ptr::row_y#3 ] zp[2]:25 [ petscii_ptr::row_x#4 petscii_ptr::row_x#0 petscii_ptr::row_x#2 petscii_ptr::row_x#1 petscii_ptr::row_x#3 ] zp[2]:110 [ petscii_ptr::return#10 ] zp[2]:44 [ petscii_ptr::return#1 ] zp[2]:46 [ petscii_ptr::return#3 ] zp[2]:54 [ petscii_ptr::return#2 ] zp[2]:56 [ petscii_ptr::return#0 ] 
Uplifting [main] best 27612 combination reg byte y [ main::i#2 main::i#1 ] reg byte x [ main::i1#2 main::i1#1 ] zp[2]:12 [ main::petscii#7 main::petscii#11 main::petscii#3 main::petscii#4 main::petscii#5 ] zp[2]:14 [ main::scrn#7 main::scrn#11 main::scrn#3 main::screen_hidden#0 main::scrn#5 ] zp[2]:8 [ main::scrn#10 main::scrn#1 main::scrn#13 ] zp[2]:6 [ main::petscii#10 main::petscii#1 main::petscii#2 ] reg byte a [ main::$42 ] reg byte a [ main::$43 ] zp[1]:52 [ main::$45 ] zp[1]:53 [ main::$46 ] zp[2]:4 [ main::$13 ] zp[2]:29 [ main::y_pos_coarse_old#0 ] zp[2]:31 [ main::$5 ] zp[2]:34 [ main::$9 ] zp[1]:48 [ main::$41 ] zp[1]:51 [ main::$44 ] zp[1]:37 [ main::movement#3 ] zp[2]:38 [ main::screen_active#0 ] zp[1]:3 [ main::movement#4 ] zp[1]:33 [ main::y_movement#0 ] zp[2]:27 [ main::x_pos_coarse_old#0 ] zp[1]:36 [ main::x_movement#0 ] 
Limited combination testing to 100 combinations of 1492992 possible.
Uplifting [] best 27612 combination zp[2]:18 [ x_sin_idx#12 x_sin_idx#14 x_sin_idx#13 x_sin_idx#4 ] zp[2]:20 [ y_sin_idx#12 y_sin_idx#13 y_sin_idx#14 y_sin_idx#4 ] zp[1]:2 [ screen_buffer#12 screen_buffer#26 screen_buffer#0 ] zp[2]:62 [ x_pos#11 ] zp[2]:68 [ y_pos#11 ] zp[2]:84 [ y_pos_coarse#16 ] zp[2]:76 [ x_pos_coarse#17 ] zp[1]:83 [ y_pos_fine#12 ] zp[1]:75 [ x_pos_fine#12 ] 
Uplifting [memset] best 27612 combination zp[2]:16 [ memset::dst#2 memset::dst#1 ] 
Uplifting [MOS6526_CIA] best 27612 combination 
Uplifting [MOS6569_VICII] best 27612 combination 
Uplifting [MOS6581_SID] best 27612 combination 
Attempting to uplift remaining variables inzp[1]:2 [ screen_buffer#12 screen_buffer#26 screen_buffer#0 ]
Uplifting [] best 27612 combination zp[1]:2 [ screen_buffer#12 screen_buffer#26 screen_buffer#0 ] 
Attempting to uplift remaining variables inzp[1]:52 [ main::$45 ]
Uplifting [main] best 27552 combination reg byte a [ main::$45 ] 
Attempting to uplift remaining variables inzp[1]:53 [ main::$46 ]
Uplifting [main] best 27492 combination reg byte a [ main::$46 ] 
Attempting to uplift remaining variables inzp[1]:48 [ main::$41 ]
Uplifting [main] best 27492 combination zp[1]:48 [ main::$41 ] 
Attempting to uplift remaining variables inzp[1]:51 [ main::$44 ]
Uplifting [main] best 27492 combination zp[1]:51 [ main::$44 ] 
Attempting to uplift remaining variables inzp[1]:37 [ main::movement#3 ]
Uplifting [main] best 27442 combination reg byte x [ main::movement#3 ] 
Attempting to uplift remaining variables inzp[1]:3 [ main::movement#4 ]
Uplifting [main] best 27342 combination reg byte x [ main::movement#4 ] 
Attempting to uplift remaining variables inzp[1]:33 [ main::y_movement#0 ]
Uplifting [main] best 27342 combination zp[1]:33 [ main::y_movement#0 ] 
Attempting to uplift remaining variables inzp[1]:83 [ y_pos_fine#12 ]
Uplifting [] best 27342 combination zp[1]:83 [ y_pos_fine#12 ] 
Attempting to uplift remaining variables inzp[1]:75 [ x_pos_fine#12 ]
Uplifting [] best 27342 combination zp[1]:75 [ x_pos_fine#12 ] 
Attempting to uplift remaining variables inzp[1]:36 [ main::x_movement#0 ]
Uplifting [main] best 27342 combination zp[1]:36 [ main::x_movement#0 ] 
Coalescing zero page register [ zp[2]:4 [ main::$13 ] ] with [ zp[2]:38 [ main::screen_active#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:6 [ main::petscii#10 main::petscii#1 main::petscii#2 ] ] with [ zp[2]:44 [ petscii_ptr::return#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:6 [ main::petscii#10 main::petscii#1 main::petscii#2 petscii_ptr::return#1 ] ] with [ zp[2]:56 [ petscii_ptr::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:12 [ main::petscii#7 main::petscii#11 main::petscii#3 main::petscii#4 main::petscii#5 ] ] with [ zp[2]:46 [ petscii_ptr::return#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:12 [ main::petscii#7 main::petscii#11 main::petscii#3 main::petscii#4 main::petscii#5 petscii_ptr::return#3 ] ] with [ zp[2]:54 [ petscii_ptr::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:14 [ main::scrn#7 main::scrn#11 main::scrn#3 main::screen_hidden#0 main::scrn#5 ] ] with [ zp[2]:40 [ screencpy::dst#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:23 [ petscii_ptr::row_y#4 petscii_ptr::row_y#0 petscii_ptr::row_y#2 petscii_ptr::row_y#1 petscii_ptr::row_y#3 ] ] with [ zp[2]:104 [ petscii_ptr::$6 ] ] - score: 1
Coalescing zero page register [ zp[2]:25 [ petscii_ptr::row_x#4 petscii_ptr::row_x#0 petscii_ptr::row_x#2 petscii_ptr::row_x#1 petscii_ptr::row_x#3 ] ] with [ zp[2]:110 [ petscii_ptr::return#10 ] ] - score: 1
Coalescing zero page register [ zp[2]:27 [ main::x_pos_coarse_old#0 ] ] with [ zp[2]:34 [ main::$9 ] ] - score: 1
Coalescing zero page register [ zp[2]:29 [ main::y_pos_coarse_old#0 ] ] with [ zp[2]:31 [ main::$5 ] ] - score: 1
Coalescing zero page register [ zp[2]:58 [ next_position::$12 ] ] with [ zp[2]:60 [ next_position::$18 ] ] - score: 1
Coalescing zero page register [ zp[2]:62 [ x_pos#11 ] ] with [ zp[2]:70 [ next_position::$4 ] ] - score: 1
Coalescing zero page register [ zp[2]:64 [ next_position::$13 ] ] with [ zp[2]:66 [ next_position::$19 ] ] - score: 1
Coalescing zero page register [ zp[2]:68 [ y_pos#11 ] ] with [ zp[2]:78 [ next_position::$8 ] ] - score: 1
Coalescing zero page register [ zp[2]:72 [ next_position::x_pos_u#0 ] ] with [ zp[2]:76 [ x_pos_coarse#17 ] ] - score: 1
Coalescing zero page register [ zp[2]:80 [ next_position::y_pos_u#0 ] ] with [ zp[2]:84 [ y_pos_coarse#16 ] ] - score: 1
Coalescing zero page register [ zp[2]:98 [ petscii_ptr::$3 ] ] with [ zp[2]:100 [ petscii_ptr::$4 ] ] - score: 1
Coalescing zero page register [ zp[2]:106 [ petscii_ptr::$0 ] ] with [ zp[2]:108 [ petscii_ptr::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:6 [ main::petscii#10 main::petscii#1 main::petscii#2 petscii_ptr::return#1 petscii_ptr::return#0 ] ] with [ zp[2]:25 [ petscii_ptr::row_x#4 petscii_ptr::row_x#0 petscii_ptr::row_x#2 petscii_ptr::row_x#1 petscii_ptr::row_x#3 petscii_ptr::return#10 ] ] - score: 2
Coalescing zero page register [ zp[2]:4 [ main::$13 main::screen_active#0 ] ] with [ zp[2]:42 [ screencpy::src#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:23 [ petscii_ptr::row_y#4 petscii_ptr::row_y#0 petscii_ptr::row_y#2 petscii_ptr::row_y#1 petscii_ptr::row_y#3 petscii_ptr::$6 ] ] with [ zp[2]:106 [ petscii_ptr::$0 petscii_ptr::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:58 [ next_position::$12 next_position::$18 ] ] with [ zp[2]:62 [ x_pos#11 next_position::$4 ] ] - score: 1
Coalescing zero page register [ zp[2]:64 [ next_position::$13 next_position::$19 ] ] with [ zp[2]:68 [ y_pos#11 next_position::$8 ] ] - score: 1
Coalescing zero page register [ zp[2]:98 [ petscii_ptr::$3 petscii_ptr::$4 ] ] with [ zp[2]:102 [ petscii_ptr::$5 ] ] - score: 1
Coalescing zero page register [ zp[2]:6 [ main::petscii#10 main::petscii#1 main::petscii#2 petscii_ptr::return#1 petscii_ptr::return#0 petscii_ptr::row_x#4 petscii_ptr::row_x#0 petscii_ptr::row_x#2 petscii_ptr::row_x#1 petscii_ptr::row_x#3 petscii_ptr::return#10 ] ] with [ zp[2]:12 [ main::petscii#7 main::petscii#11 main::petscii#3 main::petscii#4 main::petscii#5 petscii_ptr::return#3 petscii_ptr::return#2 ] ] - score: 2
Coalescing zero page register [ zp[2]:58 [ next_position::$12 next_position::$18 x_pos#11 next_position::$4 ] ] with [ zp[2]:72 [ next_position::x_pos_u#0 x_pos_coarse#17 ] ] - score: 1
Coalescing zero page register [ zp[2]:64 [ next_position::$13 next_position::$19 y_pos#11 next_position::$8 ] ] with [ zp[2]:80 [ next_position::y_pos_u#0 y_pos_coarse#16 ] ] - score: 1
Coalescing zero page register [ zp[2]:18 [ x_sin_idx#12 x_sin_idx#14 x_sin_idx#13 x_sin_idx#4 ] ] with [ zp[2]:16 [ memset::dst#2 memset::dst#1 ] ]
Coalescing zero page register [ zp[2]:27 [ main::x_pos_coarse_old#0 main::$9 ] ] with [ zp[2]:23 [ petscii_ptr::row_y#4 petscii_ptr::row_y#0 petscii_ptr::row_y#2 petscii_ptr::row_y#1 petscii_ptr::row_y#3 petscii_ptr::$6 petscii_ptr::$0 petscii_ptr::$1 ] ]
Coalescing zero page register [ zp[1]:83 [ y_pos_fine#12 ] ] with [ zp[1]:51 [ main::$44 ] ]
Coalescing zero page register [ zp[2]:98 [ petscii_ptr::$3 petscii_ptr::$4 petscii_ptr::$5 ] ] with [ zp[2]:86 [ screencpy::src_250#0 ] ]
Allocated (was zp[2]:4) zp[2]:3 [ main::$13 main::screen_active#0 screencpy::src#0 ]
Allocated (was zp[2]:6) zp[2]:5 [ main::petscii#10 main::petscii#1 main::petscii#2 petscii_ptr::return#1 petscii_ptr::return#0 petscii_ptr::row_x#4 petscii_ptr::row_x#0 petscii_ptr::row_x#2 petscii_ptr::row_x#1 petscii_ptr::row_x#3 petscii_ptr::return#10 main::petscii#7 main::petscii#11 main::petscii#3 main::petscii#4 main::petscii#5 petscii_ptr::return#3 petscii_ptr::return#2 ]
Allocated (was zp[2]:8) zp[2]:7 [ main::scrn#10 main::scrn#1 main::scrn#13 ]
Allocated (was zp[2]:14) zp[2]:9 [ main::scrn#7 main::scrn#11 main::scrn#3 main::screen_hidden#0 main::scrn#5 screencpy::dst#0 ]
Allocated (was zp[2]:18) zp[2]:11 [ x_sin_idx#12 x_sin_idx#14 x_sin_idx#13 x_sin_idx#4 memset::dst#2 memset::dst#1 ]
Allocated (was zp[2]:20) zp[2]:13 [ y_sin_idx#12 y_sin_idx#13 y_sin_idx#14 y_sin_idx#4 ]
Allocated (was zp[2]:27) zp[2]:15 [ main::x_pos_coarse_old#0 main::$9 petscii_ptr::row_y#4 petscii_ptr::row_y#0 petscii_ptr::row_y#2 petscii_ptr::row_y#1 petscii_ptr::row_y#3 petscii_ptr::$6 petscii_ptr::$0 petscii_ptr::$1 ]
Allocated (was zp[2]:29) zp[2]:17 [ main::y_pos_coarse_old#0 main::$5 ]
Allocated (was zp[1]:33) zp[1]:19 [ main::y_movement#0 ]
Allocated (was zp[1]:36) zp[1]:20 [ main::x_movement#0 ]
Allocated (was zp[1]:48) zp[1]:21 [ main::$41 ]
Allocated (was zp[2]:58) zp[2]:22 [ next_position::$12 next_position::$18 x_pos#11 next_position::$4 next_position::x_pos_u#0 x_pos_coarse#17 ]
Allocated (was zp[2]:64) zp[2]:24 [ next_position::$13 next_position::$19 y_pos#11 next_position::$8 next_position::y_pos_u#0 y_pos_coarse#16 ]
Allocated (was zp[1]:75) zp[1]:26 [ x_pos_fine#12 ]
Allocated (was zp[1]:83) zp[1]:27 [ y_pos_fine#12 main::$44 ]
Allocated (was zp[2]:88) zp[2]:28 [ screencpy::dst_250#0 ]
Allocated (was zp[2]:90) zp[2]:30 [ screencpy::src_500#0 ]
Allocated (was zp[2]:92) zp[2]:32 [ screencpy::dst_500#0 ]
Allocated (was zp[2]:94) zp[2]:34 [ screencpy::src_750#0 ]
Allocated (was zp[2]:96) zp[2]:36 [ screencpy::dst_750#0 ]
Allocated (was zp[2]:98) zp[2]:38 [ petscii_ptr::$3 petscii_ptr::$4 petscii_ptr::$5 screencpy::src_250#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// A full-screen x/y-scroller
// World space is a 16-bit signed coordinate system [-32768, 32767] x [-32768, 32767]
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // The colors of the C64
  .const BLACK = 0
  .const WHITE = 1
  // The number of sinus values in the table
  .const SINSIZE = $800
  .const OFFSET_STRUCT_MOS6569_VICII_MEMORY = $18
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = $11
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL2 = $16
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // Display screen #0 (double buffered)
  .label MAIN_SCREEN0 = $3800
  // Display screen #1 (double buffered)
  .label MAIN_SCREEN1 = $3c00
  // Display charset
  .label MAIN_CHARSET = $1000
  // The current screen displayed (0/1)
  .label screen_buffer = 2
  // Current index into the sinus
  .label x_sin_idx = $b
  .label y_sin_idx = $d
  // Current x/y-position (the center of the screen)
  .label x_pos = $16
  .label y_pos = $18
  // The current scroll fine values [0-7] (converted to unsigned)
  .label x_pos_fine = $1a
  // The current scroll coarse values (converted to unsigned)
  .label x_pos_coarse = $16
  .label y_pos_fine = $1b
  .label y_pos_coarse = $18
  // main
main: {
    .const toD0181_return = (>(MAIN_SCREEN0&$3fff)*4)|(>MAIN_CHARSET)/4&$f
    .const toD0182_return = (>(MAIN_SCREEN1&$3fff)*4)|(>MAIN_CHARSET)/4&$f
    .const toD0183_return = (>(MAIN_SCREEN0&$3fff)*4)|(>MAIN_CHARSET)/4&$f
    .label __5 = $11
    .label __9 = $f
    .label __13 = 3
    .label __41 = $15
    .label __44 = $1b
    .label x_pos_coarse_old = $f
    .label y_pos_coarse_old = $11
    .label y_movement = $13
    .label x_movement = $14
    .label screen_active = 3
    .label screen_hidden = 9
    // Update any new row if needed
    .label petscii = 5
    .label scrn = 7
    .label scrn_1 = 9
    jmp sei1
    // main::sei1
  sei1:
    // asm { sei  }
    sei
    // [2] phi from main::sei1 to main::@28 [phi:main::sei1->main::@28]
  __b28_from_sei1:
    jmp __b28
    // main::@28
  __b28:
    // [3] call memset 
  // Clear screen
    // [89] phi from main::@28 to memset [phi:main::@28->memset]
  memset_from___b28:
    jsr memset
    // [4] phi from main::@28 to main::toD0181 [phi:main::@28->main::toD0181]
  toD0181_from___b28:
    jmp toD0181
    // main::toD0181
  toD0181:
    jmp __b29
    // main::@29
  __b29:
    // [5] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    // Display initial screen
    lda #toD0181_return
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    // [6] call next_position 
  // Find initial position
    // [95] phi from main::@29 to next_position [phi:main::@29->next_position]
  next_position_from___b29:
    // [95] phi y_sin_idx#12 = SINSIZE/4 [phi:main::@29->next_position#0] -- vwuz1=vwuc1 
    lda #<SINSIZE/4
    sta.z y_sin_idx
    lda #>SINSIZE/4
    sta.z y_sin_idx+1
    // [95] phi x_sin_idx#12 = 0 [phi:main::@29->next_position#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x_sin_idx
    lda #>0
    sta.z x_sin_idx+1
    jsr next_position
    // [7] phi from main::@29 to main::@1 [phi:main::@29->main::@1]
  __b1_from___b29:
    // [7] phi screen_buffer#12 = 0 [phi:main::@29->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z screen_buffer
    jmp __b1
    // main::@1
  __b1:
    // [8] main::x_pos_coarse_old#0 = x_pos_coarse#17 -- vwuz1=vwuz2 
    // The old coarse values x/y-positions
    lda.z x_pos_coarse
    sta.z x_pos_coarse_old
    lda.z x_pos_coarse+1
    sta.z x_pos_coarse_old+1
    // [9] main::y_pos_coarse_old#0 = y_pos_coarse#16 -- vwuz1=vwuz2 
    lda.z y_pos_coarse
    sta.z y_pos_coarse_old
    lda.z y_pos_coarse+1
    sta.z y_pos_coarse_old+1
    // [10] call next_position 
  // Update the position
    // [95] phi from main::@1 to next_position [phi:main::@1->next_position]
  next_position_from___b1:
    // [95] phi y_sin_idx#12 = y_sin_idx#13 [phi:main::@1->next_position#0] -- register_copy 
    // [95] phi x_sin_idx#12 = x_sin_idx#14 [phi:main::@1->next_position#1] -- register_copy 
    jsr next_position
    jmp __b32
    // main::@32
  __b32:
    // [11] main::$5 = main::y_pos_coarse_old#0 - y_pos_coarse#16 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z __5
    sec
    sbc.z y_pos_coarse
    sta.z __5
    lda.z __5+1
    sbc.z y_pos_coarse+1
    sta.z __5+1
    // [12] main::y_movement#0 = (signed byte)main::$5 -- vbsz1=_sbyte_vwuz2 
    // Detect the need for coarse scrolling (moving chars on the entire screen) and the direction of the scroll 
    // Movement is the offset that the screen data should be moved (-40: down, 40: up, -1: right, 1: left, 0: none)
    lda.z __5
    sta.z y_movement
    // [13] if(main::y_movement#0==1) goto main::@2 -- vbsz1_eq_vbsc1_then_la1 
    lda #1
    cmp.z y_movement
    beq __b2_from___b32
    jmp __b25
    // main::@25
  __b25:
    // [14] if(main::y_movement#0!=-1) goto main::@2 -- vbsz1_neq_vbsc1_then_la1 
    lda #-1
    cmp.z y_movement
    bne __b2_from___b25
    // [15] phi from main::@25 to main::@26 [phi:main::@25->main::@26]
  __b26_from___b25:
    jmp __b26
    // main::@26
  __b26:
    // [16] phi from main::@26 to main::@2 [phi:main::@26->main::@2]
  __b2_from___b26:
    // [16] phi main::movement#4 = $28 [phi:main::@26->main::@2#0] -- vbsxx=vbsc1 
    ldx #$28
    jmp __b2
    // [16] phi from main::@25 to main::@2 [phi:main::@25->main::@2]
  __b2_from___b25:
    // [16] phi main::movement#4 = 0 [phi:main::@25->main::@2#0] -- vbsxx=vbsc1 
    ldx #0
    jmp __b2
    // [16] phi from main::@32 to main::@2 [phi:main::@32->main::@2]
  __b2_from___b32:
    // [16] phi main::movement#4 = -$28 [phi:main::@32->main::@2#0] -- vbsxx=vbsc1 
    ldx #-$28
    jmp __b2
    // main::@2
  __b2:
    // [17] main::$9 = main::x_pos_coarse_old#0 - x_pos_coarse#17 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z __9
    sec
    sbc.z x_pos_coarse
    sta.z __9
    lda.z __9+1
    sbc.z x_pos_coarse+1
    sta.z __9+1
    // [18] main::x_movement#0 = (signed byte)main::$9 -- vbsz1=_sbyte_vwuz2 
    lda.z __9
    sta.z x_movement
    // [19] main::movement#3 = main::movement#4 - main::x_movement#0 -- vbsxx=vbsxx_minus_vbsz1 
    // will be -1/0/1
    txa
    sec
    sbc.z x_movement
    tax
    // [20] if(0==main::movement#3) goto main::@21 -- vbsc1_eq_vbsxx_then_la1 
    cpx #0
    beq __b21_from___b2
    jmp __b27
    // main::@27
  __b27:
    // [21] if(0!=screen_buffer#12) goto main::@3 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z screen_buffer
    bne __b3_from___b27
    // [23] phi from main::@27 to main::@4 [phi:main::@27->main::@4]
  __b4_from___b27:
    // [23] phi main::$13 = MAIN_SCREEN0 [phi:main::@27->main::@4#0] -- pbuz1=pbuc1 
    lda #<MAIN_SCREEN0
    sta.z __13
    lda #>MAIN_SCREEN0
    sta.z __13+1
    jmp __b4
    // [22] phi from main::@27 to main::@3 [phi:main::@27->main::@3]
  __b3_from___b27:
    jmp __b3
    // main::@3
  __b3:
    // [23] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    // [23] phi main::$13 = MAIN_SCREEN1 [phi:main::@3->main::@4#0] -- pbuz1=pbuc1 
    lda #<MAIN_SCREEN1
    sta.z __13
    lda #>MAIN_SCREEN1
    sta.z __13+1
    jmp __b4
    // main::@4
  __b4:
    // [24] main::screen_active#0 = main::$13 + main::movement#3 -- pbuz1=pbuz1_plus_vbsxx 
    txa
    pha
    clc
    adc.z screen_active
    sta.z screen_active
    pla
    ora #$7f
    bmi !+
    lda #0
  !:
    adc.z screen_active+1
    sta.z screen_active+1
    // [25] if(0!=screen_buffer#12) goto main::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z screen_buffer
    bne __b5_from___b4
    // [27] phi from main::@4 to main::@6 [phi:main::@4->main::@6]
  __b6_from___b4:
    // [27] phi main::screen_hidden#0 = MAIN_SCREEN1 [phi:main::@4->main::@6#0] -- pbuz1=pbuc1 
    lda #<MAIN_SCREEN1
    sta.z screen_hidden
    lda #>MAIN_SCREEN1
    sta.z screen_hidden+1
    jmp __b6
    // [26] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [27] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    // [27] phi main::screen_hidden#0 = MAIN_SCREEN0 [phi:main::@5->main::@6#0] -- pbuz1=pbuc1 
    lda #<MAIN_SCREEN0
    sta.z screen_hidden
    lda #>MAIN_SCREEN0
    sta.z screen_hidden+1
    jmp __b6
    // main::@6
  __b6:
    // [28] screencpy::dst#0 = main::screen_hidden#0
    // [29] screencpy::src#0 = main::screen_active#0
    // [30] call screencpy 
    jsr screencpy
    jmp __b33
    // main::@33
  __b33:
    // [31] if(0==main::y_movement#0) goto main::@7 -- vbsc1_eq_vbsz1_then_la1 
    lda #0
    cmp.z y_movement
    beq __b7
    jmp __b17
    // main::@17
  __b17:
    // [32] if(main::y_movement#0==-1) goto main::@8 -- vbsz1_eq_vbsc1_then_la1 
    lda #-1
    cmp.z y_movement
    beq __b8
    jmp __b18
    // main::@18
  __b18:
    // [33] petscii_ptr::row_x#1 = x_pos_coarse#17 - $14 -- vwuz1=vwuz2_minus_vbuc1 
    sec
    lda.z x_pos_coarse
    sbc #$14
    sta.z petscii_ptr.row_x
    lda.z x_pos_coarse+1
    sbc #0
    sta.z petscii_ptr.row_x+1
    // [34] petscii_ptr::row_y#1 = y_pos_coarse#16 - $c -- vwuz1=vwuz2_minus_vbuc1 
    sec
    lda.z y_pos_coarse
    sbc #$c
    sta.z petscii_ptr.row_y
    lda.z y_pos_coarse+1
    sbc #0
    sta.z petscii_ptr.row_y+1
    // [35] call petscii_ptr 
    // [135] phi from main::@18 to petscii_ptr [phi:main::@18->petscii_ptr]
  petscii_ptr_from___b18:
    // [135] phi petscii_ptr::row_x#4 = petscii_ptr::row_x#1 [phi:main::@18->petscii_ptr#0] -- register_copy 
    // [135] phi petscii_ptr::row_y#4 = petscii_ptr::row_y#1 [phi:main::@18->petscii_ptr#1] -- register_copy 
    jsr petscii_ptr
    // [36] petscii_ptr::return#1 = petscii_ptr::return#10
    jmp __b35
    // main::@35
  __b35:
    // [37] main::petscii#2 = petscii_ptr::return#1
    // [38] main::scrn#13 = main::screen_hidden#0 -- pbuz1=pbuz2 
    lda.z screen_hidden
    sta.z scrn
    lda.z screen_hidden+1
    sta.z scrn+1
    // [39] phi from main::@34 main::@35 to main::@9 [phi:main::@34/main::@35->main::@9]
  __b9_from___b34:
  __b9_from___b35:
    // [39] phi main::scrn#10 = main::scrn#1 [phi:main::@34/main::@35->main::@9#0] -- register_copy 
    // [39] phi main::petscii#10 = main::petscii#1 [phi:main::@34/main::@35->main::@9#1] -- register_copy 
    jmp __b9
    // main::@9
  __b9:
    // [40] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  __b10_from___b9:
    // [40] phi main::i#2 = 0 [phi:main::@9->main::@10#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b10
    // main::@10
  __b10:
    // [41] if(main::i#2<$28) goto main::@11 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc __b11
    jmp __b7
    // main::@7
  __b7:
    // [42] if(0==main::x_movement#0) goto main::@12 -- vbsc1_eq_vbsz1_then_la1 
    lda #0
    cmp.z x_movement
    beq __b12
    jmp __b19
    // main::@19
  __b19:
    // [43] if(main::x_movement#0==-1) goto main::@13 -- vbsz1_eq_vbsc1_then_la1 
    lda #-1
    cmp.z x_movement
    beq __b13
    jmp __b20
    // main::@20
  __b20:
    // [44] petscii_ptr::row_x#3 = x_pos_coarse#17 - $14 -- vwuz1=vwuz2_minus_vbuc1 
    sec
    lda.z x_pos_coarse
    sbc #$14
    sta.z petscii_ptr.row_x
    lda.z x_pos_coarse+1
    sbc #0
    sta.z petscii_ptr.row_x+1
    // [45] petscii_ptr::row_y#3 = y_pos_coarse#16 - $c -- vwuz1=vwuz2_minus_vbuc1 
    sec
    lda.z y_pos_coarse
    sbc #$c
    sta.z petscii_ptr.row_y
    lda.z y_pos_coarse+1
    sbc #0
    sta.z petscii_ptr.row_y+1
    // [46] call petscii_ptr 
    // [135] phi from main::@20 to petscii_ptr [phi:main::@20->petscii_ptr]
  petscii_ptr_from___b20:
    // [135] phi petscii_ptr::row_x#4 = petscii_ptr::row_x#3 [phi:main::@20->petscii_ptr#0] -- register_copy 
    // [135] phi petscii_ptr::row_y#4 = petscii_ptr::row_y#3 [phi:main::@20->petscii_ptr#1] -- register_copy 
    jsr petscii_ptr
    // [47] petscii_ptr::return#3 = petscii_ptr::return#10
    jmp __b37
    // main::@37
  __b37:
    // [48] main::petscii#4 = petscii_ptr::return#3
    // [49] phi from main::@36 main::@37 to main::@14 [phi:main::@36/main::@37->main::@14]
  __b14_from___b36:
  __b14_from___b37:
    // [49] phi main::scrn#11 = main::scrn#3 [phi:main::@36/main::@37->main::@14#0] -- register_copy 
    // [49] phi main::petscii#11 = main::petscii#3 [phi:main::@36/main::@37->main::@14#1] -- register_copy 
    jmp __b14
    // main::@14
  __b14:
    // [50] phi from main::@14 to main::@15 [phi:main::@14->main::@15]
  __b15_from___b14:
    // [50] phi main::scrn#7 = main::scrn#11 [phi:main::@14->main::@15#0] -- register_copy 
    // [50] phi main::petscii#7 = main::petscii#11 [phi:main::@14->main::@15#1] -- register_copy 
    // [50] phi main::i1#2 = 0 [phi:main::@14->main::@15#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b15
    // main::@15
  __b15:
    // [51] if(main::i1#2<$19) goto main::@16 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b16
    jmp __b12
    // main::@12
  __b12:
    // [52] screen_buffer#0 = screen_buffer#12 ^ 1 -- vbuz1=vbuz1_bxor_vbuc1 
    // Change current screen
    lda #1
    eor.z screen_buffer
    sta.z screen_buffer
    // [53] phi from main::@12 main::@2 main::@21 to main::@21 [phi:main::@12/main::@2/main::@21->main::@21]
  __b21_from___b12:
  __b21_from___b2:
  __b21_from___b21:
    // [53] phi screen_buffer#26 = screen_buffer#0 [phi:main::@12/main::@2/main::@21->main::@21#0] -- register_copy 
    jmp __b21
  // Update the display - wait for the raster
    // main::@21
  __b21:
    // [54] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$fe) goto main::@21 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$fe
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b21_from___b21
    jmp __b22
    // main::@22
  __b22:
    // [55] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto main::@22 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b22
    jmp __b23
    // main::@23
  __b23:
    // [56] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = WHITE -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [57] main::$41 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & $f0 -- vbuz1=_deref_pbuc1_band_vbuc2 
    lda #$f0
    and VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    sta.z __41
    // [58] main::$42 = 7 - y_pos_fine#12 -- vbuaa=vbuc1_minus_vbuz1 
    lda #7
    sec
    sbc.z y_pos_fine
    // [59] main::$43 = main::$41 | main::$42 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __41
    // [60] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) = main::$43 -- _deref_pbuc1=vbuaa 
    // Y-scroll fine
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    // [61] main::$44 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2) & $f0 -- vbuz1=_deref_pbuc1_band_vbuc2 
    lda #$f0
    and VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2
    sta.z __44
    // [62] main::$45 = 7 - x_pos_fine#12 -- vbuaa=vbuc1_minus_vbuz1 
    lda #7
    sec
    sbc.z x_pos_fine
    // [63] main::$46 = main::$44 | main::$45 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __44
    // [64] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2) = main::$46 -- _deref_pbuc1=vbuaa 
    // X-scroll fine
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2
    // [65] if(0!=screen_buffer#26) goto main::toD0182 -- vbuc1_neq_vbuz1_then_la1 
    // Display current screen
    lda #0
    cmp.z screen_buffer
    bne toD0182_from___b23
    // [66] phi from main::@23 to main::toD0183 [phi:main::@23->main::toD0183]
  toD0183_from___b23:
    jmp toD0183
    // main::toD0183
  toD0183:
    jmp __b31
    // main::@31
  __b31:
    // [67] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = main::toD0183_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0183_return
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    jmp __b24
    // main::@24
  __b24:
    // [68] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [7] phi from main::@24 to main::@1 [phi:main::@24->main::@1]
  __b1_from___b24:
    // [7] phi screen_buffer#12 = screen_buffer#26 [phi:main::@24->main::@1#0] -- register_copy 
    jmp __b1
    // [69] phi from main::@23 to main::toD0182 [phi:main::@23->main::toD0182]
  toD0182_from___b23:
    jmp toD0182
    // main::toD0182
  toD0182:
    jmp __b30
    // main::@30
  __b30:
    // [70] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = main::toD0182_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0182_return
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    jmp __b24
    // main::@16
  __b16:
    // [71] *main::scrn#7 = *main::petscii#7 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (petscii),y
    ldy #0
    sta (scrn_1),y
    // [72] main::scrn#5 = main::scrn#7 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z scrn_1
    sta.z scrn_1
    bcc !+
    inc.z scrn_1+1
  !:
    // [73] main::petscii#5 = main::petscii#7 + $8c -- pbuz1=pbuz1_plus_vbuc1 
    lda #$8c
    clc
    adc.z petscii
    sta.z petscii
    bcc !+
    inc.z petscii+1
  !:
    // [74] main::i1#1 = ++ main::i1#2 -- vbuxx=_inc_vbuxx 
    inx
    // [50] phi from main::@16 to main::@15 [phi:main::@16->main::@15]
  __b15_from___b16:
    // [50] phi main::scrn#7 = main::scrn#5 [phi:main::@16->main::@15#0] -- register_copy 
    // [50] phi main::petscii#7 = main::petscii#5 [phi:main::@16->main::@15#1] -- register_copy 
    // [50] phi main::i1#2 = main::i1#1 [phi:main::@16->main::@15#2] -- register_copy 
    jmp __b15
    // main::@13
  __b13:
    // [75] petscii_ptr::row_x#2 = x_pos_coarse#17 + $13 -- vwuz1=vwuz2_plus_vbuc1 
    lda #$13
    clc
    adc.z x_pos_coarse
    sta.z petscii_ptr.row_x
    lda #0
    adc.z x_pos_coarse+1
    sta.z petscii_ptr.row_x+1
    // [76] petscii_ptr::row_y#2 = y_pos_coarse#16 - $c -- vwuz1=vwuz2_minus_vbuc1 
    sec
    lda.z y_pos_coarse
    sbc #$c
    sta.z petscii_ptr.row_y
    lda.z y_pos_coarse+1
    sbc #0
    sta.z petscii_ptr.row_y+1
    // [77] call petscii_ptr 
    // [135] phi from main::@13 to petscii_ptr [phi:main::@13->petscii_ptr]
  petscii_ptr_from___b13:
    // [135] phi petscii_ptr::row_x#4 = petscii_ptr::row_x#2 [phi:main::@13->petscii_ptr#0] -- register_copy 
    // [135] phi petscii_ptr::row_y#4 = petscii_ptr::row_y#2 [phi:main::@13->petscii_ptr#1] -- register_copy 
    jsr petscii_ptr
    // [78] petscii_ptr::return#2 = petscii_ptr::return#10
    jmp __b36
    // main::@36
  __b36:
    // [79] main::petscii#3 = petscii_ptr::return#2
    // [80] main::scrn#3 = main::screen_hidden#0 + $27 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$27
    clc
    adc.z scrn_1
    sta.z scrn_1
    bcc !+
    inc.z scrn_1+1
  !:
    jmp __b14_from___b36
    // main::@11
  __b11:
    // [81] main::scrn#10[main::i#2] = main::petscii#10[main::i#2] -- pbuz1_derefidx_vbuyy=pbuz2_derefidx_vbuyy 
    lda (petscii),y
    sta (scrn),y
    // [82] main::i#1 = ++ main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [40] phi from main::@11 to main::@10 [phi:main::@11->main::@10]
  __b10_from___b11:
    // [40] phi main::i#2 = main::i#1 [phi:main::@11->main::@10#0] -- register_copy 
    jmp __b10
    // main::@8
  __b8:
    // [83] petscii_ptr::row_x#0 = x_pos_coarse#17 - $14 -- vwuz1=vwuz2_minus_vbuc1 
    sec
    lda.z x_pos_coarse
    sbc #$14
    sta.z petscii_ptr.row_x
    lda.z x_pos_coarse+1
    sbc #0
    sta.z petscii_ptr.row_x+1
    // [84] petscii_ptr::row_y#0 = y_pos_coarse#16 + $c -- vwuz1=vwuz2_plus_vbuc1 
    lda #$c
    clc
    adc.z y_pos_coarse
    sta.z petscii_ptr.row_y
    lda #0
    adc.z y_pos_coarse+1
    sta.z petscii_ptr.row_y+1
    // [85] call petscii_ptr 
    // [135] phi from main::@8 to petscii_ptr [phi:main::@8->petscii_ptr]
  petscii_ptr_from___b8:
    // [135] phi petscii_ptr::row_x#4 = petscii_ptr::row_x#0 [phi:main::@8->petscii_ptr#0] -- register_copy 
    // [135] phi petscii_ptr::row_y#4 = petscii_ptr::row_y#0 [phi:main::@8->petscii_ptr#1] -- register_copy 
    jsr petscii_ptr
    // [86] petscii_ptr::return#0 = petscii_ptr::return#10
    jmp __b34
    // main::@34
  __b34:
    // [87] main::petscii#1 = petscii_ptr::return#0
    // [88] main::scrn#1 = main::screen_hidden#0 + (word)$18*$28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z screen_hidden
    clc
    adc #<$18*$28
    sta.z scrn
    lda.z screen_hidden+1
    adc #>$18*$28
    sta.z scrn+1
    jmp __b9_from___b34
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = MAIN_SCREEN0
    .label end = str+num
    .label dst = $b
    // [90] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [90] phi memset::dst#2 = (byte*)memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [91] if(memset::dst#2!=memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [92] return 
    rts
    // memset::@2
  __b2:
    // [93] *memset::dst#2 = memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [94] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [90] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [90] phi memset::dst#2 = memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // next_position
// Update the x_pos, y_pos variables to reflect the next position on the curve 
// The position represents the center of the screen
next_position: {
    .label __4 = $16
    .label __8 = $18
    .label __12 = $16
    .label __13 = $18
    .label x_pos_u = $16
    .label y_pos_u = $18
    .label __18 = $16
    .label __19 = $18
    // [96] x_sin_idx#13 = ++ x_sin_idx#12 -- vwuz1=_inc_vwuz1 
    inc.z x_sin_idx
    bne !+
    inc.z x_sin_idx+1
  !:
    // [97] if(x_sin_idx#13<SINSIZE) goto next_position::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x_sin_idx+1
    cmp #>SINSIZE
    bcc __b1_from_next_position
    bne !+
    lda.z x_sin_idx
    cmp #<SINSIZE
    bcc __b1_from_next_position
  !:
    jmp __b3
    // next_position::@3
  __b3:
    // [98] x_sin_idx#4 = x_sin_idx#13 - SINSIZE -- vwuz1=vwuz1_minus_vwuc1 
    lda.z x_sin_idx
    sec
    sbc #<SINSIZE
    sta.z x_sin_idx
    lda.z x_sin_idx+1
    sbc #>SINSIZE
    sta.z x_sin_idx+1
    // [99] phi from next_position next_position::@3 to next_position::@1 [phi:next_position/next_position::@3->next_position::@1]
  __b1_from_next_position:
  __b1_from___b3:
    // [99] phi x_sin_idx#14 = x_sin_idx#13 [phi:next_position/next_position::@3->next_position::@1#0] -- register_copy 
    jmp __b1
    // next_position::@1
  __b1:
    // [100] y_sin_idx#14 = ++ y_sin_idx#12 -- vwuz1=_inc_vwuz1 
    inc.z y_sin_idx
    bne !+
    inc.z y_sin_idx+1
  !:
    // [101] if(y_sin_idx#14<SINSIZE) goto next_position::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z y_sin_idx+1
    cmp #>SINSIZE
    bcc __b2_from___b1
    bne !+
    lda.z y_sin_idx
    cmp #<SINSIZE
    bcc __b2_from___b1
  !:
    jmp __b4
    // next_position::@4
  __b4:
    // [102] y_sin_idx#4 = y_sin_idx#14 - SINSIZE -- vwuz1=vwuz1_minus_vwuc1 
    lda.z y_sin_idx
    sec
    sbc #<SINSIZE
    sta.z y_sin_idx
    lda.z y_sin_idx+1
    sbc #>SINSIZE
    sta.z y_sin_idx+1
    // [103] phi from next_position::@1 next_position::@4 to next_position::@2 [phi:next_position::@1/next_position::@4->next_position::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [103] phi y_sin_idx#13 = y_sin_idx#14 [phi:next_position::@1/next_position::@4->next_position::@2#0] -- register_copy 
    jmp __b2
    // next_position::@2
  __b2:
    // [104] next_position::$12 = x_sin_idx#14 << 1 -- vwuz1=vwuz2_rol_1 
    lda.z x_sin_idx
    asl
    sta.z __12
    lda.z x_sin_idx+1
    rol
    sta.z __12+1
    // [105] next_position::$18 = SINTAB + next_position::$12 -- pwsz1=pwsc1_plus_vwuz1 
    clc
    lda.z __18
    adc #<SINTAB
    sta.z __18
    lda.z __18+1
    adc #>SINTAB
    sta.z __18+1
    // [106] x_pos#11 = *next_position::$18 -- vwsz1=_deref_pwsz1 
    // Find the next point
    ldy #0
    lda (x_pos),y
    pha
    iny
    lda (x_pos),y
    sta.z x_pos+1
    pla
    sta.z x_pos
    // [107] next_position::$13 = y_sin_idx#13 << 1 -- vwuz1=vwuz2_rol_1 
    lda.z y_sin_idx
    asl
    sta.z __13
    lda.z y_sin_idx+1
    rol
    sta.z __13+1
    // [108] next_position::$19 = SINTAB + next_position::$13 -- pwsz1=pwsc1_plus_vwuz1 
    clc
    lda.z __19
    adc #<SINTAB
    sta.z __19
    lda.z __19+1
    adc #>SINTAB
    sta.z __19+1
    // [109] y_pos#11 = *next_position::$19 -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (y_pos),y
    pha
    iny
    lda (y_pos),y
    sta.z y_pos+1
    pla
    sta.z y_pos
    // [110] next_position::$4 = (word)x_pos#11
    // [111] next_position::x_pos_u#0 = next_position::$4 + $190+(byte)$14*8 -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda.z x_pos_u
    adc #<$190+$14*8
    sta.z x_pos_u
    lda.z x_pos_u+1
    adc #>$190+$14*8
    sta.z x_pos_u+1
    // [112] next_position::$15 = (byte)next_position::x_pos_u#0 -- vbuaa=_byte_vwuz1 
    lda.z x_pos_u
    // [113] x_pos_fine#12 = next_position::$15 & 7 -- vbuz1=vbuaa_band_vbuc1 
    and #7
    sta.z x_pos_fine
    // [114] x_pos_coarse#17 = next_position::x_pos_u#0 >> 3 -- vwuz1=vwuz1_ror_3 
    lsr.z x_pos_coarse+1
    ror.z x_pos_coarse
    lsr.z x_pos_coarse+1
    ror.z x_pos_coarse
    lsr.z x_pos_coarse+1
    ror.z x_pos_coarse
    // [115] next_position::$8 = (word)y_pos#11
    // [116] next_position::y_pos_u#0 = next_position::$8 + $190+(byte)$c*8 -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda.z y_pos_u
    adc #<$190+$c*8
    sta.z y_pos_u
    lda.z y_pos_u+1
    adc #>$190+$c*8
    sta.z y_pos_u+1
    // [117] next_position::$17 = (byte)next_position::y_pos_u#0 -- vbuaa=_byte_vwuz1 
    lda.z y_pos_u
    // [118] y_pos_fine#12 = next_position::$17 & 7 -- vbuz1=vbuaa_band_vbuc1 
    and #7
    sta.z y_pos_fine
    // [119] y_pos_coarse#16 = next_position::y_pos_u#0 >> 3 -- vwuz1=vwuz1_ror_3 
    lsr.z y_pos_coarse+1
    ror.z y_pos_coarse
    lsr.z y_pos_coarse+1
    ror.z y_pos_coarse
    lsr.z y_pos_coarse+1
    ror.z y_pos_coarse
    jmp __breturn
    // next_position::@return
  __breturn:
    // [120] return 
    rts
}
  // screencpy
// Copy an entire screen (40x25 = 1000 chars)
// - dst - destination
// - src - source
// screencpy(byte* zp(9) dst, byte* zp(3) src)
screencpy: {
    .label dst = 9
    .label src = 3
    .label src_250 = $26
    .label dst_250 = $1c
    .label src_500 = $1e
    .label dst_500 = $20
    .label src_750 = $22
    .label dst_750 = $24
    // [121] screencpy::src_250#0 = screencpy::src#0 + $fa -- pbuz1=pbuz2_plus_vbuc1 
    lda #$fa
    clc
    adc.z src
    sta.z src_250
    lda #0
    adc.z src+1
    sta.z src_250+1
    // [122] screencpy::dst_250#0 = screencpy::dst#0 + $fa -- pbuz1=pbuz2_plus_vbuc1 
    lda #$fa
    clc
    adc.z dst
    sta.z dst_250
    lda #0
    adc.z dst+1
    sta.z dst_250+1
    // [123] screencpy::src_500#0 = screencpy::src#0 + $1f4 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z src
    clc
    adc #<$1f4
    sta.z src_500
    lda.z src+1
    adc #>$1f4
    sta.z src_500+1
    // [124] screencpy::dst_500#0 = screencpy::dst#0 + $1f4 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z dst
    clc
    adc #<$1f4
    sta.z dst_500
    lda.z dst+1
    adc #>$1f4
    sta.z dst_500+1
    // [125] screencpy::src_750#0 = screencpy::src#0 + $2ee -- pbuz1=pbuz2_plus_vwuc1 
    lda.z src
    clc
    adc #<$2ee
    sta.z src_750
    lda.z src+1
    adc #>$2ee
    sta.z src_750+1
    // [126] screencpy::dst_750#0 = screencpy::dst#0 + $2ee -- pbuz1=pbuz2_plus_vwuc1 
    lda.z dst
    clc
    adc #<$2ee
    sta.z dst_750
    lda.z dst+1
    adc #>$2ee
    sta.z dst_750+1
    // [127] phi from screencpy to screencpy::@1 [phi:screencpy->screencpy::@1]
  __b1_from_screencpy:
    // [127] phi screencpy::i#2 = 0 [phi:screencpy->screencpy::@1#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // screencpy::@1
  __b1:
    // [128] if(screencpy::i#2<$fa) goto screencpy::@2 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$fa
    bcc __b2
    jmp __breturn
    // screencpy::@return
  __breturn:
    // [129] return 
    rts
    // screencpy::@2
  __b2:
    // [130] screencpy::dst#0[screencpy::i#2] = screencpy::src#0[screencpy::i#2] -- pbuz1_derefidx_vbuyy=pbuz2_derefidx_vbuyy 
    lda (src),y
    sta (dst),y
    // [131] screencpy::dst_250#0[screencpy::i#2] = screencpy::src_250#0[screencpy::i#2] -- pbuz1_derefidx_vbuyy=pbuz2_derefidx_vbuyy 
    lda (src_250),y
    sta (dst_250),y
    // [132] screencpy::dst_500#0[screencpy::i#2] = screencpy::src_500#0[screencpy::i#2] -- pbuz1_derefidx_vbuyy=pbuz2_derefidx_vbuyy 
    lda (src_500),y
    sta (dst_500),y
    // [133] screencpy::dst_750#0[screencpy::i#2] = screencpy::src_750#0[screencpy::i#2] -- pbuz1_derefidx_vbuyy=pbuz2_derefidx_vbuyy 
    lda (src_750),y
    sta (dst_750),y
    // [134] screencpy::i#1 = ++ screencpy::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [127] phi from screencpy::@2 to screencpy::@1 [phi:screencpy::@2->screencpy::@1]
  __b1_from___b2:
    // [127] phi screencpy::i#2 = screencpy::i#1 [phi:screencpy::@2->screencpy::@1#0] -- register_copy 
    jmp __b1
}
  // petscii_ptr
// Get a pointer to a specific x,y-position in the PETSCII art
// petscii_ptr(word zp(5) row_x, word zp($f) row_y)
petscii_ptr: {
    .label __0 = $f
    .label __1 = $f
    .label row_x = 5
    .label row_y = $f
    .label return = 5
    .label __3 = $26
    .label __4 = $26
    .label __5 = $26
    .label __6 = $f
    // [136] petscii_ptr::$3 = petscii_ptr::row_y#4 << 4 -- vwuz1=vwuz2_rol_4 
    lda.z row_y
    asl
    sta.z __3
    lda.z row_y+1
    rol
    sta.z __3+1
    asl.z __3
    rol.z __3+1
    asl.z __3
    rol.z __3+1
    asl.z __3
    rol.z __3+1
    // [137] petscii_ptr::$4 = petscii_ptr::$3 + petscii_ptr::row_y#4 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z __4
    clc
    adc.z row_y
    sta.z __4
    lda.z __4+1
    adc.z row_y+1
    sta.z __4+1
    // [138] petscii_ptr::$5 = petscii_ptr::$4 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z __5
    rol.z __5+1
    // [139] petscii_ptr::$6 = petscii_ptr::$5 + petscii_ptr::row_y#4 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __6
    clc
    adc.z __5
    sta.z __6
    lda.z __6+1
    adc.z __5+1
    sta.z __6+1
    // [140] petscii_ptr::$0 = petscii_ptr::$6 << 2 -- vwuz1=vwuz1_rol_2 
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    // [141] petscii_ptr::$1 = PETSCII_ART + petscii_ptr::$0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __1
    adc #<PETSCII_ART
    sta.z __1
    lda.z __1+1
    adc #>PETSCII_ART
    sta.z __1+1
    // [142] petscii_ptr::return#10 = petscii_ptr::$1 + petscii_ptr::row_x#4 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z return
    clc
    adc.z __1
    sta.z return
    lda.z return+1
    adc.z __1+1
    sta.z return+1
    jmp __breturn
    // petscii_ptr::@return
  __breturn:
    // [143] return 
    rts
}
  // File Data
// Sinus table [-399,399]
SINTAB:
.fillword SINSIZE, 399*sin(i*2*PI/SINSIZE)

.pc = $4000 "PETSCII_ART"
// 140x125 PETSCII art
PETSCII_ART:
.var petsciiPic = LoadPicture("cml.png")
    .print "width: "+petsciiPic.width + " height: "+petsciiPic.height
    .for (var y=0; y<petsciiPic.height; y++)
        .for (var x=0; x<petsciiPic.width; x++)
            .byte petsciiPic.getPixel(x,y)==0?' ':$a0;


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp sei1
Removing instruction jmp __b28
Removing instruction jmp toD0181
Removing instruction jmp __b29
Removing instruction jmp __b1
Removing instruction jmp __b32
Removing instruction jmp __b25
Removing instruction jmp __b26
Removing instruction jmp __b2
Removing instruction jmp __b27
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b33
Removing instruction jmp __b17
Removing instruction jmp __b18
Removing instruction jmp __b35
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b7
Removing instruction jmp __b19
Removing instruction jmp __b20
Removing instruction jmp __b37
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __b12
Removing instruction jmp __b21
Removing instruction jmp __b22
Removing instruction jmp __b23
Removing instruction jmp toD0183
Removing instruction jmp __b31
Removing instruction jmp __b24
Removing instruction jmp toD0182
Removing instruction jmp __b30
Removing instruction jmp __b36
Removing instruction jmp __b34
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b3_from___b27 with __b3
Replacing label __b5_from___b4 with __b5
Replacing label __b21_from___b21 with __b21_from___b2
Replacing label toD0182_from___b23 with __b30
Replacing label __b14_from___b36 with __b14
Replacing label __b9_from___b34 with __b9
Replacing label __b1_from_next_position with __b1
Replacing label __b1_from_next_position with __b1
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b1 with __b2
Removing instruction __b28_from_sei1:
Removing instruction toD0181_from___b28:
Removing instruction toD0181:
Removing instruction __b26_from___b25:
Removing instruction __b2_from___b26:
Removing instruction __b3_from___b27:
Removing instruction __b4_from___b3:
Removing instruction __b5_from___b4:
Removing instruction __b6_from___b5:
Removing instruction __b9_from___b34:
Removing instruction __b9_from___b35:
Removing instruction __b10_from___b9:
Removing instruction __b37:
Removing instruction __b14_from___b36:
Removing instruction __b14_from___b37:
Removing instruction __b15_from___b14:
Removing instruction __b21_from___b12:
Removing instruction __b21_from___b21:
Removing instruction toD0183_from___b23:
Removing instruction toD0183:
Removing instruction toD0182_from___b23:
Removing instruction toD0182:
Removing instruction __b1_from_next_position:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction sei1:
Removing instruction __b28:
Removing instruction memset_from___b28:
Removing instruction __b29:
Removing instruction next_position_from___b29:
Removing instruction __b1_from___b29:
Removing instruction next_position_from___b1:
Removing instruction __b32:
Removing instruction __b25:
Removing instruction __b26:
Removing instruction __b27:
Removing instruction __b4_from___b27:
Removing instruction __b6_from___b4:
Removing instruction __b33:
Removing instruction __b17:
Removing instruction __b18:
Removing instruction petscii_ptr_from___b18:
Removing instruction __b35:
Removing instruction __b19:
Removing instruction __b20:
Removing instruction petscii_ptr_from___b20:
Removing instruction __b21:
Removing instruction __b23:
Removing instruction __b31:
Removing instruction __b1_from___b24:
Removing instruction __b15_from___b16:
Removing instruction petscii_ptr_from___b13:
Removing instruction __b36:
Removing instruction __b10_from___b11:
Removing instruction petscii_ptr_from___b8:
Removing instruction __b34:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction __b1_from_screencpy:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Relabelling long label __b2_from___b25 to __b17
Relabelling long label __b2_from___b32 to __b18
Relabelling long label __b21_from___b2 to __b19
Succesful ASM optimization Pass5RelabelLongLabels
Fixing long branch [125] beq __b19 to bne
Fixing long branch [174] beq __b8 to bne
Fixing long branch [200] bcc __b11 to bcs
Fixing long branch [209] beq __b13 to bne

FINAL SYMBOL TABLE
const nomodify byte BLACK = 0
const nomodify byte* MAIN_CHARSET = (byte*) 4096
const nomodify byte* MAIN_SCREEN0 = (byte*) 14336
const nomodify byte* MAIN_SCREEN1 = (byte*) 15360
const byte OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
const byte OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = $11
const byte OFFSET_STRUCT_MOS6569_VICII_CONTROL2 = $16
const byte OFFSET_STRUCT_MOS6569_VICII_MEMORY = $18
const byte OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
const byte* PETSCII_ART[$8c*$7d]  = kickasm {{ .var petsciiPic = LoadPicture("cml.png")
    .print "width: "+petsciiPic.width + " height: "+petsciiPic.height
    .for (var y=0; y<petsciiPic.height; y++)
        .for (var x=0; x<petsciiPic.width; x++)
            .byte petsciiPic.getPixel(x,y)==0?' ':$a0;
 }}
const nomodify word SINSIZE = $800
const signed word* SINTAB[SINSIZE]  = kickasm(  uses SINSIZE) {{ .fillword SINSIZE, 399*sin(i*2*PI/SINSIZE)
 }}
const nomodify struct MOS6569_VICII* VICII = (struct MOS6569_VICII*) 53248
const nomodify byte WHITE = 1
void main()
byte*~ main::$13 zp[2]:3 11.0
byte~ main::$41 zp[1]:21 11.0
byte~ main::$42 reg byte a 22.0
byte~ main::$43 reg byte a 22.0
byte~ main::$44 zp[1]:27 11.0
byte~ main::$45 reg byte a 22.0
byte~ main::$46 reg byte a 22.0
word~ main::$5 zp[2]:17 11.0
word~ main::$9 zp[2]:15 11.0
byte main::i
byte main::i#1 reg byte y 202.0
byte main::i#2 reg byte y 168.33333333333331
byte main::i1
byte main::i1#1 reg byte x 202.0
byte main::i1#2 reg byte x 60.599999999999994
signed byte main::movement
signed byte main::movement#3 reg byte x 6.6000000000000005
signed byte main::movement#4 reg byte x 3.6666666666666665
byte* main::petscii
byte* main::petscii#1 petscii zp[2]:5 11.0
byte* main::petscii#10 petscii zp[2]:5 24.6
byte* main::petscii#11 petscii zp[2]:5 33.0
byte* main::petscii#2 petscii zp[2]:5 11.0
byte* main::petscii#3 petscii zp[2]:5 11.0
byte* main::petscii#4 petscii zp[2]:5 22.0
byte* main::petscii#5 petscii zp[2]:5 101.0
byte* main::petscii#7 petscii zp[2]:5 78.5
byte* main::screen_active
byte* main::screen_active#0 screen_active zp[2]:3 4.4
byte* main::screen_hidden
byte* main::screen_hidden#0 screen_hidden zp[2]:9 1.5714285714285714
byte* main::scrn
byte* main::scrn#1 scrn zp[2]:7 22.0
byte* main::scrn#10 scrn zp[2]:7 24.6
byte* main::scrn#11 scrn_1 zp[2]:9 33.0
byte* main::scrn#13 scrn zp[2]:7 22.0
byte* main::scrn#3 scrn_1 zp[2]:9 22.0
byte* main::scrn#5 scrn_1 zp[2]:9 67.33333333333333
byte* main::scrn#7 scrn_1 zp[2]:9 104.66666666666666
byte* main::toD0181_gfx
byte main::toD0181_return
const byte main::toD0181_return#0 toD0181_return = >(word)MAIN_SCREEN0&$3fff*4|>(word)MAIN_CHARSET/4&$f
byte* main::toD0181_screen
byte* main::toD0182_gfx
byte main::toD0182_return
const byte main::toD0182_return#0 toD0182_return = >(word)MAIN_SCREEN1&$3fff*4|>(word)MAIN_CHARSET/4&$f
byte* main::toD0182_screen
byte* main::toD0183_gfx
byte main::toD0183_return
const byte main::toD0183_return#0 toD0183_return = >(word)MAIN_SCREEN0&$3fff*4|>(word)MAIN_CHARSET/4&$f
byte* main::toD0183_screen
signed byte main::x_movement
signed byte main::x_movement#0 x_movement zp[1]:20 1.3333333333333333
word main::x_pos_coarse_old
word main::x_pos_coarse_old#0 x_pos_coarse_old zp[2]:15 2.4444444444444446
signed byte main::y_movement
signed byte main::y_movement#0 y_movement zp[1]:19 2.75
word main::y_pos_coarse_old
word main::y_pos_coarse_old#0 y_pos_coarse_old zp[2]:17 11.0
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
const byte memset::c#0 c = ' '
byte* memset::dst
byte* memset::dst#1 dst zp[2]:11 202.0
byte* memset::dst#2 dst zp[2]:11 134.66666666666666
byte* memset::end
const byte* memset::end#0 end = (byte*)memset::str#0+memset::num#0
word memset::num
const word memset::num#0 num = $3e8
void* memset::return
void* memset::str
const void* memset::str#0 str = (void*)MAIN_SCREEN0
void next_position()
word~ next_position::$12 zp[2]:22 202.0
word~ next_position::$13 zp[2]:24 202.0
byte~ next_position::$15 reg byte a 202.0
byte~ next_position::$17 reg byte a 202.0
signed word*~ next_position::$18 zp[2]:22 202.0
signed word*~ next_position::$19 zp[2]:24 202.0
word~ next_position::$4 zp[2]:22 202.0
word~ next_position::$8 zp[2]:24 202.0
word next_position::x_pos_u
word next_position::x_pos_u#0 x_pos_u zp[2]:22 67.33333333333333
word next_position::y_pos_u
word next_position::y_pos_u#0 y_pos_u zp[2]:24 67.33333333333333
byte* petscii_ptr(word petscii_ptr::row_x , word petscii_ptr::row_y)
word~ petscii_ptr::$0 zp[2]:15 202.0
byte*~ petscii_ptr::$1 zp[2]:15 202.0
word~ petscii_ptr::$3 zp[2]:38 202.0
word~ petscii_ptr::$4 zp[2]:38 202.0
word~ petscii_ptr::$5 zp[2]:38 202.0
word~ petscii_ptr::$6 zp[2]:15 202.0
byte* petscii_ptr::return
byte* petscii_ptr::return#0 return zp[2]:5 22.0
byte* petscii_ptr::return#1 return zp[2]:5 22.0
byte* petscii_ptr::return#10 return zp[2]:5 24.166666666666664
byte* petscii_ptr::return#2 return zp[2]:5 22.0
byte* petscii_ptr::return#3 return zp[2]:5 22.0
word petscii_ptr::row_x
word petscii_ptr::row_x#0 row_x zp[2]:5 11.0
word petscii_ptr::row_x#1 row_x zp[2]:5 11.0
word petscii_ptr::row_x#2 row_x zp[2]:5 11.0
word petscii_ptr::row_x#3 row_x zp[2]:5 11.0
word petscii_ptr::row_x#4 row_x zp[2]:5 20.714285714285715
word petscii_ptr::row_y
word petscii_ptr::row_y#0 row_y zp[2]:15 22.0
word petscii_ptr::row_y#1 row_y zp[2]:15 22.0
word petscii_ptr::row_y#2 row_y zp[2]:15 22.0
word petscii_ptr::row_y#3 row_y zp[2]:15 22.0
word petscii_ptr::row_y#4 row_y zp[2]:15 86.75
byte screen_buffer
byte screen_buffer#0 screen_buffer zp[1]:2 22.0
byte screen_buffer#12 screen_buffer zp[1]:2 0.873015873015873
byte screen_buffer#26 screen_buffer zp[1]:2 13.666666666666666
void screencpy(byte* screencpy::dst , byte* screencpy::src)
byte* screencpy::dst
byte* screencpy::dst#0 dst zp[2]:9 687.6666666666666
byte* screencpy::dst_250
byte* screencpy::dst_250#0 dst_250 zp[2]:28 841.8333333333333
byte* screencpy::dst_500
byte* screencpy::dst_500#0 dst_500 zp[2]:32 1010.2
byte* screencpy::dst_750
byte* screencpy::dst_750#0 dst_750 zp[2]:36 1262.75
byte screencpy::i
byte screencpy::i#1 reg byte y 20002.0
byte screencpy::i#2 reg byte y 18335.166666666668
byte* screencpy::src
byte* screencpy::src#0 src zp[2]:3 736.7857142857143
byte* screencpy::src_250
byte* screencpy::src_250#0 src_250 zp[2]:38 777.076923076923
byte* screencpy::src_500
byte* screencpy::src_500#0 src_500 zp[2]:30 918.3636363636363
byte* screencpy::src_750
byte* screencpy::src_750#0 src_750 zp[2]:34 1122.4444444444443
signed word x_pos
signed word x_pos#11 x_pos zp[2]:22 25.25
word x_pos_coarse
word x_pos_coarse#17 x_pos_coarse zp[2]:22 1.8977272727272727
byte x_pos_fine
byte x_pos_fine#12 x_pos_fine zp[1]:26 1.435897435897436
word x_sin_idx
word x_sin_idx#12 x_sin_idx zp[2]:11 112.0
word x_sin_idx#13 x_sin_idx zp[2]:11 202.0
word x_sin_idx#14 x_sin_idx zp[2]:11 2.9904761904761905
word x_sin_idx#4 x_sin_idx zp[2]:11 202.0
signed word y_pos
signed word y_pos#11 y_pos zp[2]:24 16.833333333333332
word y_pos_coarse
word y_pos_coarse#16 y_pos_coarse zp[2]:24 1.9880952380952381
byte y_pos_fine
byte y_pos_fine#12 y_pos_fine zp[1]:27 1.6231884057971016
word y_sin_idx
word y_sin_idx#12 y_sin_idx zp[2]:13 22.4
word y_sin_idx#13 y_sin_idx zp[2]:13 3.108910891089109
word y_sin_idx#14 y_sin_idx zp[2]:13 202.0
word y_sin_idx#4 y_sin_idx zp[2]:13 202.0

zp[1]:2 [ screen_buffer#12 screen_buffer#26 screen_buffer#0 ]
reg byte x [ main::movement#4 ]
zp[2]:3 [ main::$13 main::screen_active#0 screencpy::src#0 ]
zp[2]:5 [ main::petscii#10 main::petscii#1 main::petscii#2 petscii_ptr::return#1 petscii_ptr::return#0 petscii_ptr::row_x#4 petscii_ptr::row_x#0 petscii_ptr::row_x#2 petscii_ptr::row_x#1 petscii_ptr::row_x#3 petscii_ptr::return#10 main::petscii#7 main::petscii#11 main::petscii#3 main::petscii#4 main::petscii#5 petscii_ptr::return#3 petscii_ptr::return#2 ]
zp[2]:7 [ main::scrn#10 main::scrn#1 main::scrn#13 ]
reg byte y [ main::i#2 main::i#1 ]
reg byte x [ main::i1#2 main::i1#1 ]
zp[2]:9 [ main::scrn#7 main::scrn#11 main::scrn#3 main::screen_hidden#0 main::scrn#5 screencpy::dst#0 ]
zp[2]:11 [ x_sin_idx#12 x_sin_idx#14 x_sin_idx#13 x_sin_idx#4 memset::dst#2 memset::dst#1 ]
zp[2]:13 [ y_sin_idx#12 y_sin_idx#13 y_sin_idx#14 y_sin_idx#4 ]
reg byte y [ screencpy::i#2 screencpy::i#1 ]
zp[2]:15 [ main::x_pos_coarse_old#0 main::$9 petscii_ptr::row_y#4 petscii_ptr::row_y#0 petscii_ptr::row_y#2 petscii_ptr::row_y#1 petscii_ptr::row_y#3 petscii_ptr::$6 petscii_ptr::$0 petscii_ptr::$1 ]
zp[2]:17 [ main::y_pos_coarse_old#0 main::$5 ]
zp[1]:19 [ main::y_movement#0 ]
zp[1]:20 [ main::x_movement#0 ]
reg byte x [ main::movement#3 ]
zp[1]:21 [ main::$41 ]
reg byte a [ main::$42 ]
reg byte a [ main::$43 ]
reg byte a [ main::$45 ]
reg byte a [ main::$46 ]
zp[2]:22 [ next_position::$12 next_position::$18 x_pos#11 next_position::$4 next_position::x_pos_u#0 x_pos_coarse#17 ]
zp[2]:24 [ next_position::$13 next_position::$19 y_pos#11 next_position::$8 next_position::y_pos_u#0 y_pos_coarse#16 ]
reg byte a [ next_position::$15 ]
zp[1]:26 [ x_pos_fine#12 ]
reg byte a [ next_position::$17 ]
zp[1]:27 [ y_pos_fine#12 main::$44 ]
zp[2]:28 [ screencpy::dst_250#0 ]
zp[2]:30 [ screencpy::src_500#0 ]
zp[2]:32 [ screencpy::dst_500#0 ]
zp[2]:34 [ screencpy::src_750#0 ]
zp[2]:36 [ screencpy::dst_750#0 ]
zp[2]:38 [ petscii_ptr::$3 petscii_ptr::$4 petscii_ptr::$5 screencpy::src_250#0 ]


FINAL ASSEMBLER
Score: 22699

  // File Comments
// A full-screen x/y-scroller
// World space is a 16-bit signed coordinate system [-32768, 32767] x [-32768, 32767]
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // The colors of the C64
  .const BLACK = 0
  .const WHITE = 1
  // The number of sinus values in the table
  .const SINSIZE = $800
  .const OFFSET_STRUCT_MOS6569_VICII_MEMORY = $18
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = $11
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL2 = $16
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // Display screen #0 (double buffered)
  .label MAIN_SCREEN0 = $3800
  // Display screen #1 (double buffered)
  .label MAIN_SCREEN1 = $3c00
  // Display charset
  .label MAIN_CHARSET = $1000
  // The current screen displayed (0/1)
  .label screen_buffer = 2
  // Current index into the sinus
  .label x_sin_idx = $b
  .label y_sin_idx = $d
  // Current x/y-position (the center of the screen)
  .label x_pos = $16
  .label y_pos = $18
  // The current scroll fine values [0-7] (converted to unsigned)
  .label x_pos_fine = $1a
  // The current scroll coarse values (converted to unsigned)
  .label x_pos_coarse = $16
  .label y_pos_fine = $1b
  .label y_pos_coarse = $18
  // main
main: {
    .const toD0181_return = (>(MAIN_SCREEN0&$3fff)*4)|(>MAIN_CHARSET)/4&$f
    .const toD0182_return = (>(MAIN_SCREEN1&$3fff)*4)|(>MAIN_CHARSET)/4&$f
    .const toD0183_return = (>(MAIN_SCREEN0&$3fff)*4)|(>MAIN_CHARSET)/4&$f
    .label __5 = $11
    .label __9 = $f
    .label __13 = 3
    .label __41 = $15
    .label __44 = $1b
    .label x_pos_coarse_old = $f
    .label y_pos_coarse_old = $11
    .label y_movement = $13
    .label x_movement = $14
    .label screen_active = 3
    .label screen_hidden = 9
    // Update any new row if needed
    .label petscii = 5
    .label scrn = 7
    .label scrn_1 = 9
    // main::sei1
    // asm
    // asm { sei  }
    sei
    // [2] phi from main::sei1 to main::@28 [phi:main::sei1->main::@28]
    // main::@28
    // memset(MAIN_SCREEN0, ' ', 1000)
    // [3] call memset 
  // Clear screen
    // [89] phi from main::@28 to memset [phi:main::@28->memset]
    jsr memset
    // [4] phi from main::@28 to main::toD0181 [phi:main::@28->main::toD0181]
    // main::toD0181
    // main::@29
    // VICII->MEMORY = toD018(MAIN_SCREEN0, MAIN_CHARSET)
    // [5] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    // Display initial screen
    lda #toD0181_return
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    // next_position()
    // [6] call next_position 
  // Find initial position
    // [95] phi from main::@29 to next_position [phi:main::@29->next_position]
    // [95] phi y_sin_idx#12 = SINSIZE/4 [phi:main::@29->next_position#0] -- vwuz1=vwuc1 
    lda #<SINSIZE/4
    sta.z y_sin_idx
    lda #>SINSIZE/4
    sta.z y_sin_idx+1
    // [95] phi x_sin_idx#12 = 0 [phi:main::@29->next_position#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x_sin_idx
    sta.z x_sin_idx+1
    jsr next_position
    // [7] phi from main::@29 to main::@1 [phi:main::@29->main::@1]
    // [7] phi screen_buffer#12 = 0 [phi:main::@29->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z screen_buffer
    // main::@1
  __b1:
    // x_pos_coarse_old = x_pos_coarse
    // [8] main::x_pos_coarse_old#0 = x_pos_coarse#17 -- vwuz1=vwuz2 
    // The old coarse values x/y-positions
    lda.z x_pos_coarse
    sta.z x_pos_coarse_old
    lda.z x_pos_coarse+1
    sta.z x_pos_coarse_old+1
    // y_pos_coarse_old = y_pos_coarse
    // [9] main::y_pos_coarse_old#0 = y_pos_coarse#16 -- vwuz1=vwuz2 
    lda.z y_pos_coarse
    sta.z y_pos_coarse_old
    lda.z y_pos_coarse+1
    sta.z y_pos_coarse_old+1
    // next_position()
    // [10] call next_position 
  // Update the position
    // [95] phi from main::@1 to next_position [phi:main::@1->next_position]
    // [95] phi y_sin_idx#12 = y_sin_idx#13 [phi:main::@1->next_position#0] -- register_copy 
    // [95] phi x_sin_idx#12 = x_sin_idx#14 [phi:main::@1->next_position#1] -- register_copy 
    jsr next_position
    // main::@32
    // y_pos_coarse_old-y_pos_coarse
    // [11] main::$5 = main::y_pos_coarse_old#0 - y_pos_coarse#16 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z __5
    sec
    sbc.z y_pos_coarse
    sta.z __5
    lda.z __5+1
    sbc.z y_pos_coarse+1
    sta.z __5+1
    // y_movement = (signed char)(y_pos_coarse_old-y_pos_coarse)
    // [12] main::y_movement#0 = (signed byte)main::$5 -- vbsz1=_sbyte_vwuz2 
    // Detect the need for coarse scrolling (moving chars on the entire screen) and the direction of the scroll 
    // Movement is the offset that the screen data should be moved (-40: down, 40: up, -1: right, 1: left, 0: none)
    lda.z __5
    sta.z y_movement
    // if(y_movement==1)
    // [13] if(main::y_movement#0==1) goto main::@2 -- vbsz1_eq_vbsc1_then_la1 
    lda #1
    cmp.z y_movement
    beq __b18
    // main::@25
    // if(y_movement==-1)
    // [14] if(main::y_movement#0!=-1) goto main::@2 -- vbsz1_neq_vbsc1_then_la1 
    lda #-1
    cmp.z y_movement
    bne __b17
    // [15] phi from main::@25 to main::@26 [phi:main::@25->main::@26]
    // main::@26
    // [16] phi from main::@26 to main::@2 [phi:main::@26->main::@2]
    // [16] phi main::movement#4 = $28 [phi:main::@26->main::@2#0] -- vbsxx=vbsc1 
    ldx #$28
    jmp __b2
    // [16] phi from main::@25 to main::@2 [phi:main::@25->main::@2]
  __b17:
    // [16] phi main::movement#4 = 0 [phi:main::@25->main::@2#0] -- vbsxx=vbsc1 
    ldx #0
    jmp __b2
    // [16] phi from main::@32 to main::@2 [phi:main::@32->main::@2]
  __b18:
    // [16] phi main::movement#4 = -$28 [phi:main::@32->main::@2#0] -- vbsxx=vbsc1 
    ldx #-$28
    // main::@2
  __b2:
    // x_pos_coarse_old-x_pos_coarse
    // [17] main::$9 = main::x_pos_coarse_old#0 - x_pos_coarse#17 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z __9
    sec
    sbc.z x_pos_coarse
    sta.z __9
    lda.z __9+1
    sbc.z x_pos_coarse+1
    sta.z __9+1
    // x_movement = (signed char)(x_pos_coarse_old-x_pos_coarse)
    // [18] main::x_movement#0 = (signed byte)main::$9 -- vbsz1=_sbyte_vwuz2 
    lda.z __9
    sta.z x_movement
    // movement -= x_movement
    // [19] main::movement#3 = main::movement#4 - main::x_movement#0 -- vbsxx=vbsxx_minus_vbsz1 
    // will be -1/0/1
    txa
    sec
    sbc.z x_movement
    tax
    // if(movement)
    // [20] if(0==main::movement#3) goto main::@21 -- vbsc1_eq_vbsxx_then_la1 
    cpx #0
    bne !__b19+
    jmp __b19
  !__b19:
    // main::@27
    // screen_buffer?MAIN_SCREEN1:MAIN_SCREEN0
    // [21] if(0!=screen_buffer#12) goto main::@3 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z screen_buffer
    bne __b3
    // [23] phi from main::@27 to main::@4 [phi:main::@27->main::@4]
    // [23] phi main::$13 = MAIN_SCREEN0 [phi:main::@27->main::@4#0] -- pbuz1=pbuc1 
    lda #<MAIN_SCREEN0
    sta.z __13
    lda #>MAIN_SCREEN0
    sta.z __13+1
    jmp __b4
    // [22] phi from main::@27 to main::@3 [phi:main::@27->main::@3]
    // main::@3
  __b3:
    // screen_buffer?MAIN_SCREEN1:MAIN_SCREEN0
    // [23] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // [23] phi main::$13 = MAIN_SCREEN1 [phi:main::@3->main::@4#0] -- pbuz1=pbuc1 
    lda #<MAIN_SCREEN1
    sta.z __13
    lda #>MAIN_SCREEN1
    sta.z __13+1
    // main::@4
  __b4:
    // screen_active = (screen_buffer?MAIN_SCREEN1:MAIN_SCREEN0) + movement
    // [24] main::screen_active#0 = main::$13 + main::movement#3 -- pbuz1=pbuz1_plus_vbsxx 
    txa
    pha
    clc
    adc.z screen_active
    sta.z screen_active
    pla
    ora #$7f
    bmi !+
    lda #0
  !:
    adc.z screen_active+1
    sta.z screen_active+1
    // screen_buffer?MAIN_SCREEN0:MAIN_SCREEN1
    // [25] if(0!=screen_buffer#12) goto main::@5 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z screen_buffer
    bne __b5
    // [27] phi from main::@4 to main::@6 [phi:main::@4->main::@6]
    // [27] phi main::screen_hidden#0 = MAIN_SCREEN1 [phi:main::@4->main::@6#0] -- pbuz1=pbuc1 
    lda #<MAIN_SCREEN1
    sta.z screen_hidden
    lda #>MAIN_SCREEN1
    sta.z screen_hidden+1
    jmp __b6
    // [26] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
    // main::@5
  __b5:
    // screen_buffer?MAIN_SCREEN0:MAIN_SCREEN1
    // [27] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
    // [27] phi main::screen_hidden#0 = MAIN_SCREEN0 [phi:main::@5->main::@6#0] -- pbuz1=pbuc1 
    lda #<MAIN_SCREEN0
    sta.z screen_hidden
    lda #>MAIN_SCREEN0
    sta.z screen_hidden+1
    // main::@6
  __b6:
    // screencpy(screen_hidden, screen_active)
    // [28] screencpy::dst#0 = main::screen_hidden#0
    // [29] screencpy::src#0 = main::screen_active#0
    // [30] call screencpy 
    jsr screencpy
    // main::@33
    // if(y_movement)
    // [31] if(0==main::y_movement#0) goto main::@7 -- vbsc1_eq_vbsz1_then_la1 
    lda #0
    cmp.z y_movement
    beq __b7
    // main::@17
    // if(y_movement==-1)
    // [32] if(main::y_movement#0==-1) goto main::@8 -- vbsz1_eq_vbsc1_then_la1 
    lda #-1
    cmp.z y_movement
    bne !__b8+
    jmp __b8
  !__b8:
    // main::@18
    // petscii_ptr(x_pos_coarse-20, y_pos_coarse-12)
    // [33] petscii_ptr::row_x#1 = x_pos_coarse#17 - $14 -- vwuz1=vwuz2_minus_vbuc1 
    sec
    lda.z x_pos_coarse
    sbc #$14
    sta.z petscii_ptr.row_x
    lda.z x_pos_coarse+1
    sbc #0
    sta.z petscii_ptr.row_x+1
    // [34] petscii_ptr::row_y#1 = y_pos_coarse#16 - $c -- vwuz1=vwuz2_minus_vbuc1 
    sec
    lda.z y_pos_coarse
    sbc #$c
    sta.z petscii_ptr.row_y
    lda.z y_pos_coarse+1
    sbc #0
    sta.z petscii_ptr.row_y+1
    // [35] call petscii_ptr 
    // [135] phi from main::@18 to petscii_ptr [phi:main::@18->petscii_ptr]
    // [135] phi petscii_ptr::row_x#4 = petscii_ptr::row_x#1 [phi:main::@18->petscii_ptr#0] -- register_copy 
    // [135] phi petscii_ptr::row_y#4 = petscii_ptr::row_y#1 [phi:main::@18->petscii_ptr#1] -- register_copy 
    jsr petscii_ptr
    // petscii_ptr(x_pos_coarse-20, y_pos_coarse-12)
    // [36] petscii_ptr::return#1 = petscii_ptr::return#10
    // main::@35
    // petscii = petscii_ptr(x_pos_coarse-20, y_pos_coarse-12)
    // [37] main::petscii#2 = petscii_ptr::return#1
    // [38] main::scrn#13 = main::screen_hidden#0 -- pbuz1=pbuz2 
    lda.z screen_hidden
    sta.z scrn
    lda.z screen_hidden+1
    sta.z scrn+1
    // [39] phi from main::@34 main::@35 to main::@9 [phi:main::@34/main::@35->main::@9]
    // [39] phi main::scrn#10 = main::scrn#1 [phi:main::@34/main::@35->main::@9#0] -- register_copy 
    // [39] phi main::petscii#10 = main::petscii#1 [phi:main::@34/main::@35->main::@9#1] -- register_copy 
    // main::@9
  __b9:
    // [40] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
    // [40] phi main::i#2 = 0 [phi:main::@9->main::@10#0] -- vbuyy=vbuc1 
    ldy #0
    // main::@10
  __b10:
    // for(char i=0;i<40;i++)
    // [41] if(main::i#2<$28) goto main::@11 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcs !__b11+
    jmp __b11
  !__b11:
    // main::@7
  __b7:
    // if(x_movement)
    // [42] if(0==main::x_movement#0) goto main::@12 -- vbsc1_eq_vbsz1_then_la1 
    lda #0
    cmp.z x_movement
    beq __b12
    // main::@19
    // if(x_movement==-1)
    // [43] if(main::x_movement#0==-1) goto main::@13 -- vbsz1_eq_vbsc1_then_la1 
    lda #-1
    cmp.z x_movement
    bne !__b13+
    jmp __b13
  !__b13:
    // main::@20
    // petscii_ptr(x_pos_coarse-20, y_pos_coarse-12)
    // [44] petscii_ptr::row_x#3 = x_pos_coarse#17 - $14 -- vwuz1=vwuz2_minus_vbuc1 
    sec
    lda.z x_pos_coarse
    sbc #$14
    sta.z petscii_ptr.row_x
    lda.z x_pos_coarse+1
    sbc #0
    sta.z petscii_ptr.row_x+1
    // [45] petscii_ptr::row_y#3 = y_pos_coarse#16 - $c -- vwuz1=vwuz2_minus_vbuc1 
    sec
    lda.z y_pos_coarse
    sbc #$c
    sta.z petscii_ptr.row_y
    lda.z y_pos_coarse+1
    sbc #0
    sta.z petscii_ptr.row_y+1
    // [46] call petscii_ptr 
    // [135] phi from main::@20 to petscii_ptr [phi:main::@20->petscii_ptr]
    // [135] phi petscii_ptr::row_x#4 = petscii_ptr::row_x#3 [phi:main::@20->petscii_ptr#0] -- register_copy 
    // [135] phi petscii_ptr::row_y#4 = petscii_ptr::row_y#3 [phi:main::@20->petscii_ptr#1] -- register_copy 
    jsr petscii_ptr
    // petscii_ptr(x_pos_coarse-20, y_pos_coarse-12)
    // [47] petscii_ptr::return#3 = petscii_ptr::return#10
    // main::@37
    // petscii = petscii_ptr(x_pos_coarse-20, y_pos_coarse-12)
    // [48] main::petscii#4 = petscii_ptr::return#3
    // [49] phi from main::@36 main::@37 to main::@14 [phi:main::@36/main::@37->main::@14]
    // [49] phi main::scrn#11 = main::scrn#3 [phi:main::@36/main::@37->main::@14#0] -- register_copy 
    // [49] phi main::petscii#11 = main::petscii#3 [phi:main::@36/main::@37->main::@14#1] -- register_copy 
    // main::@14
  __b14:
    // [50] phi from main::@14 to main::@15 [phi:main::@14->main::@15]
    // [50] phi main::scrn#7 = main::scrn#11 [phi:main::@14->main::@15#0] -- register_copy 
    // [50] phi main::petscii#7 = main::petscii#11 [phi:main::@14->main::@15#1] -- register_copy 
    // [50] phi main::i1#2 = 0 [phi:main::@14->main::@15#2] -- vbuxx=vbuc1 
    ldx #0
    // main::@15
  __b15:
    // for(char i=0;i<25;i++)
    // [51] if(main::i1#2<$19) goto main::@16 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b16
    // main::@12
  __b12:
    // screen_buffer ^=1
    // [52] screen_buffer#0 = screen_buffer#12 ^ 1 -- vbuz1=vbuz1_bxor_vbuc1 
    // Change current screen
    lda #1
    eor.z screen_buffer
    sta.z screen_buffer
    // [53] phi from main::@12 main::@2 main::@21 to main::@21 [phi:main::@12/main::@2/main::@21->main::@21]
  __b19:
    // [53] phi screen_buffer#26 = screen_buffer#0 [phi:main::@12/main::@2/main::@21->main::@21#0] -- register_copy 
  // Update the display - wait for the raster
    // main::@21
    // while(VICII->RASTER!=0xfe)
    // [54] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$fe) goto main::@21 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$fe
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b19
    // main::@22
  __b22:
    // while(VICII->RASTER!=0xff)
    // [55] if(*((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER)!=$ff) goto main::@22 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    bne __b22
    // main::@23
    // VICII->BORDER_COLOR = WHITE
    // [56] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = WHITE -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // VICII->CONTROL1 & 0xf0
    // [57] main::$41 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & $f0 -- vbuz1=_deref_pbuc1_band_vbuc2 
    lda #$f0
    and VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    sta.z __41
    // 7-y_pos_fine
    // [58] main::$42 = 7 - y_pos_fine#12 -- vbuaa=vbuc1_minus_vbuz1 
    lda #7
    sec
    sbc.z y_pos_fine
    // VICII->CONTROL1 & 0xf0 | (7-y_pos_fine)
    // [59] main::$43 = main::$41 | main::$42 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __41
    // VICII->CONTROL1 = VICII->CONTROL1 & 0xf0 | (7-y_pos_fine)
    // [60] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) = main::$43 -- _deref_pbuc1=vbuaa 
    // Y-scroll fine
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    // VICII->CONTROL2 & 0xf0
    // [61] main::$44 = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2) & $f0 -- vbuz1=_deref_pbuc1_band_vbuc2 
    lda #$f0
    and VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2
    sta.z __44
    // 7-x_pos_fine
    // [62] main::$45 = 7 - x_pos_fine#12 -- vbuaa=vbuc1_minus_vbuz1 
    lda #7
    sec
    sbc.z x_pos_fine
    // VICII->CONTROL2 & 0xf0 | (7-x_pos_fine)
    // [63] main::$46 = main::$44 | main::$45 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __44
    // VICII->CONTROL2 = VICII->CONTROL2 & 0xf0 | (7-x_pos_fine)
    // [64] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2) = main::$46 -- _deref_pbuc1=vbuaa 
    // X-scroll fine
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL2
    // if(screen_buffer)
    // [65] if(0!=screen_buffer#26) goto main::toD0182 -- vbuc1_neq_vbuz1_then_la1 
    // Display current screen
    lda #0
    cmp.z screen_buffer
    bne __b30
    // [66] phi from main::@23 to main::toD0183 [phi:main::@23->main::toD0183]
    // main::toD0183
    // main::@31
    // VICII->MEMORY = toD018(MAIN_SCREEN0, MAIN_CHARSET)
    // [67] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = main::toD0183_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0183_return
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    // main::@24
  __b24:
    // VICII->BORDER_COLOR = BLACK
    // [68] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [7] phi from main::@24 to main::@1 [phi:main::@24->main::@1]
    // [7] phi screen_buffer#12 = screen_buffer#26 [phi:main::@24->main::@1#0] -- register_copy 
    jmp __b1
    // [69] phi from main::@23 to main::toD0182 [phi:main::@23->main::toD0182]
    // main::toD0182
    // main::@30
  __b30:
    // VICII->MEMORY = toD018(MAIN_SCREEN1, MAIN_CHARSET)
    // [70] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = main::toD0182_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0182_return
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    jmp __b24
    // main::@16
  __b16:
    // *scrn = *petscii
    // [71] *main::scrn#7 = *main::petscii#7 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (petscii),y
    sta (scrn_1),y
    // scrn += 40
    // [72] main::scrn#5 = main::scrn#7 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z scrn_1
    sta.z scrn_1
    bcc !+
    inc.z scrn_1+1
  !:
    // petscii += 140
    // [73] main::petscii#5 = main::petscii#7 + $8c -- pbuz1=pbuz1_plus_vbuc1 
    lda #$8c
    clc
    adc.z petscii
    sta.z petscii
    bcc !+
    inc.z petscii+1
  !:
    // for(char i=0;i<25;i++)
    // [74] main::i1#1 = ++ main::i1#2 -- vbuxx=_inc_vbuxx 
    inx
    // [50] phi from main::@16 to main::@15 [phi:main::@16->main::@15]
    // [50] phi main::scrn#7 = main::scrn#5 [phi:main::@16->main::@15#0] -- register_copy 
    // [50] phi main::petscii#7 = main::petscii#5 [phi:main::@16->main::@15#1] -- register_copy 
    // [50] phi main::i1#2 = main::i1#1 [phi:main::@16->main::@15#2] -- register_copy 
    jmp __b15
    // main::@13
  __b13:
    // petscii_ptr(x_pos_coarse+19, y_pos_coarse-12)
    // [75] petscii_ptr::row_x#2 = x_pos_coarse#17 + $13 -- vwuz1=vwuz2_plus_vbuc1 
    lda #$13
    clc
    adc.z x_pos_coarse
    sta.z petscii_ptr.row_x
    lda #0
    adc.z x_pos_coarse+1
    sta.z petscii_ptr.row_x+1
    // [76] petscii_ptr::row_y#2 = y_pos_coarse#16 - $c -- vwuz1=vwuz2_minus_vbuc1 
    sec
    lda.z y_pos_coarse
    sbc #$c
    sta.z petscii_ptr.row_y
    lda.z y_pos_coarse+1
    sbc #0
    sta.z petscii_ptr.row_y+1
    // [77] call petscii_ptr 
    // [135] phi from main::@13 to petscii_ptr [phi:main::@13->petscii_ptr]
    // [135] phi petscii_ptr::row_x#4 = petscii_ptr::row_x#2 [phi:main::@13->petscii_ptr#0] -- register_copy 
    // [135] phi petscii_ptr::row_y#4 = petscii_ptr::row_y#2 [phi:main::@13->petscii_ptr#1] -- register_copy 
    jsr petscii_ptr
    // petscii_ptr(x_pos_coarse+19, y_pos_coarse-12)
    // [78] petscii_ptr::return#2 = petscii_ptr::return#10
    // main::@36
    // petscii = petscii_ptr(x_pos_coarse+19, y_pos_coarse-12)
    // [79] main::petscii#3 = petscii_ptr::return#2
    // scrn = screen_hidden+39
    // [80] main::scrn#3 = main::screen_hidden#0 + $27 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$27
    clc
    adc.z scrn_1
    sta.z scrn_1
    bcc !+
    inc.z scrn_1+1
  !:
    jmp __b14
    // main::@11
  __b11:
    // scrn[i] = petscii[i]
    // [81] main::scrn#10[main::i#2] = main::petscii#10[main::i#2] -- pbuz1_derefidx_vbuyy=pbuz2_derefidx_vbuyy 
    lda (petscii),y
    sta (scrn),y
    // for(char i=0;i<40;i++)
    // [82] main::i#1 = ++ main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [40] phi from main::@11 to main::@10 [phi:main::@11->main::@10]
    // [40] phi main::i#2 = main::i#1 [phi:main::@11->main::@10#0] -- register_copy 
    jmp __b10
    // main::@8
  __b8:
    // petscii_ptr(x_pos_coarse-20, y_pos_coarse+12)
    // [83] petscii_ptr::row_x#0 = x_pos_coarse#17 - $14 -- vwuz1=vwuz2_minus_vbuc1 
    sec
    lda.z x_pos_coarse
    sbc #$14
    sta.z petscii_ptr.row_x
    lda.z x_pos_coarse+1
    sbc #0
    sta.z petscii_ptr.row_x+1
    // [84] petscii_ptr::row_y#0 = y_pos_coarse#16 + $c -- vwuz1=vwuz2_plus_vbuc1 
    lda #$c
    clc
    adc.z y_pos_coarse
    sta.z petscii_ptr.row_y
    lda #0
    adc.z y_pos_coarse+1
    sta.z petscii_ptr.row_y+1
    // [85] call petscii_ptr 
    // [135] phi from main::@8 to petscii_ptr [phi:main::@8->petscii_ptr]
    // [135] phi petscii_ptr::row_x#4 = petscii_ptr::row_x#0 [phi:main::@8->petscii_ptr#0] -- register_copy 
    // [135] phi petscii_ptr::row_y#4 = petscii_ptr::row_y#0 [phi:main::@8->petscii_ptr#1] -- register_copy 
    jsr petscii_ptr
    // petscii_ptr(x_pos_coarse-20, y_pos_coarse+12)
    // [86] petscii_ptr::return#0 = petscii_ptr::return#10
    // main::@34
    // petscii = petscii_ptr(x_pos_coarse-20, y_pos_coarse+12)
    // [87] main::petscii#1 = petscii_ptr::return#0
    // scrn = screen_hidden+24*40
    // [88] main::scrn#1 = main::screen_hidden#0 + (word)$18*$28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z screen_hidden
    clc
    adc #<$18*$28
    sta.z scrn
    lda.z screen_hidden+1
    adc #>$18*$28
    sta.z scrn+1
    jmp __b9
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = MAIN_SCREEN0
    .label end = str+num
    .label dst = $b
    // [90] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [90] phi memset::dst#2 = (byte*)memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [91] if(memset::dst#2!=memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [92] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [93] *memset::dst#2 = memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [94] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [90] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [90] phi memset::dst#2 = memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // next_position
// Update the x_pos, y_pos variables to reflect the next position on the curve 
// The position represents the center of the screen
next_position: {
    .label __4 = $16
    .label __8 = $18
    .label __12 = $16
    .label __13 = $18
    .label x_pos_u = $16
    .label y_pos_u = $18
    .label __18 = $16
    .label __19 = $18
    // x_sin_idx++;
    // [96] x_sin_idx#13 = ++ x_sin_idx#12 -- vwuz1=_inc_vwuz1 
    inc.z x_sin_idx
    bne !+
    inc.z x_sin_idx+1
  !:
    // if(x_sin_idx>=SINSIZE)
    // [97] if(x_sin_idx#13<SINSIZE) goto next_position::@1 -- vwuz1_lt_vwuc1_then_la1 
    lda.z x_sin_idx+1
    cmp #>SINSIZE
    bcc __b1
    bne !+
    lda.z x_sin_idx
    cmp #<SINSIZE
    bcc __b1
  !:
    // next_position::@3
    // x_sin_idx-=SINSIZE
    // [98] x_sin_idx#4 = x_sin_idx#13 - SINSIZE -- vwuz1=vwuz1_minus_vwuc1 
    lda.z x_sin_idx
    sec
    sbc #<SINSIZE
    sta.z x_sin_idx
    lda.z x_sin_idx+1
    sbc #>SINSIZE
    sta.z x_sin_idx+1
    // [99] phi from next_position next_position::@3 to next_position::@1 [phi:next_position/next_position::@3->next_position::@1]
    // [99] phi x_sin_idx#14 = x_sin_idx#13 [phi:next_position/next_position::@3->next_position::@1#0] -- register_copy 
    // next_position::@1
  __b1:
    // y_sin_idx++;
    // [100] y_sin_idx#14 = ++ y_sin_idx#12 -- vwuz1=_inc_vwuz1 
    inc.z y_sin_idx
    bne !+
    inc.z y_sin_idx+1
  !:
    // if(y_sin_idx>=SINSIZE)
    // [101] if(y_sin_idx#14<SINSIZE) goto next_position::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z y_sin_idx+1
    cmp #>SINSIZE
    bcc __b2
    bne !+
    lda.z y_sin_idx
    cmp #<SINSIZE
    bcc __b2
  !:
    // next_position::@4
    // y_sin_idx-=SINSIZE
    // [102] y_sin_idx#4 = y_sin_idx#14 - SINSIZE -- vwuz1=vwuz1_minus_vwuc1 
    lda.z y_sin_idx
    sec
    sbc #<SINSIZE
    sta.z y_sin_idx
    lda.z y_sin_idx+1
    sbc #>SINSIZE
    sta.z y_sin_idx+1
    // [103] phi from next_position::@1 next_position::@4 to next_position::@2 [phi:next_position::@1/next_position::@4->next_position::@2]
    // [103] phi y_sin_idx#13 = y_sin_idx#14 [phi:next_position::@1/next_position::@4->next_position::@2#0] -- register_copy 
    // next_position::@2
  __b2:
    // x_pos = SINTAB[x_sin_idx]
    // [104] next_position::$12 = x_sin_idx#14 << 1 -- vwuz1=vwuz2_rol_1 
    lda.z x_sin_idx
    asl
    sta.z __12
    lda.z x_sin_idx+1
    rol
    sta.z __12+1
    // [105] next_position::$18 = SINTAB + next_position::$12 -- pwsz1=pwsc1_plus_vwuz1 
    clc
    lda.z __18
    adc #<SINTAB
    sta.z __18
    lda.z __18+1
    adc #>SINTAB
    sta.z __18+1
    // [106] x_pos#11 = *next_position::$18 -- vwsz1=_deref_pwsz1 
    // Find the next point
    ldy #0
    lda (x_pos),y
    pha
    iny
    lda (x_pos),y
    sta.z x_pos+1
    pla
    sta.z x_pos
    // y_pos = SINTAB[y_sin_idx]
    // [107] next_position::$13 = y_sin_idx#13 << 1 -- vwuz1=vwuz2_rol_1 
    lda.z y_sin_idx
    asl
    sta.z __13
    lda.z y_sin_idx+1
    rol
    sta.z __13+1
    // [108] next_position::$19 = SINTAB + next_position::$13 -- pwsz1=pwsc1_plus_vwuz1 
    clc
    lda.z __19
    adc #<SINTAB
    sta.z __19
    lda.z __19+1
    adc #>SINTAB
    sta.z __19+1
    // [109] y_pos#11 = *next_position::$19 -- vwsz1=_deref_pwsz1 
    ldy #0
    lda (y_pos),y
    pha
    iny
    lda (y_pos),y
    sta.z y_pos+1
    pla
    sta.z y_pos
    // (unsigned int)x_pos + 400
    // [110] next_position::$4 = (word)x_pos#11
    // x_pos_u = (unsigned int)x_pos + 400 + 20*8
    // [111] next_position::x_pos_u#0 = next_position::$4 + $190+(byte)$14*8 -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda.z x_pos_u
    adc #<$190+$14*8
    sta.z x_pos_u
    lda.z x_pos_u+1
    adc #>$190+$14*8
    sta.z x_pos_u+1
    // (unsigned char)x_pos_u & 7
    // [112] next_position::$15 = (byte)next_position::x_pos_u#0 -- vbuaa=_byte_vwuz1 
    lda.z x_pos_u
    // [113] x_pos_fine#12 = next_position::$15 & 7 -- vbuz1=vbuaa_band_vbuc1 
    and #7
    sta.z x_pos_fine
    // x_pos_u/8
    // [114] x_pos_coarse#17 = next_position::x_pos_u#0 >> 3 -- vwuz1=vwuz1_ror_3 
    lsr.z x_pos_coarse+1
    ror.z x_pos_coarse
    lsr.z x_pos_coarse+1
    ror.z x_pos_coarse
    lsr.z x_pos_coarse+1
    ror.z x_pos_coarse
    // (unsigned int)y_pos + 400
    // [115] next_position::$8 = (word)y_pos#11
    // y_pos_u = (unsigned int)y_pos + 400 + 12*8
    // [116] next_position::y_pos_u#0 = next_position::$8 + $190+(byte)$c*8 -- vwuz1=vwuz1_plus_vwuc1 
    clc
    lda.z y_pos_u
    adc #<$190+$c*8
    sta.z y_pos_u
    lda.z y_pos_u+1
    adc #>$190+$c*8
    sta.z y_pos_u+1
    // (unsigned char)y_pos_u & 7
    // [117] next_position::$17 = (byte)next_position::y_pos_u#0 -- vbuaa=_byte_vwuz1 
    lda.z y_pos_u
    // [118] y_pos_fine#12 = next_position::$17 & 7 -- vbuz1=vbuaa_band_vbuc1 
    and #7
    sta.z y_pos_fine
    // y_pos_u/8
    // [119] y_pos_coarse#16 = next_position::y_pos_u#0 >> 3 -- vwuz1=vwuz1_ror_3 
    lsr.z y_pos_coarse+1
    ror.z y_pos_coarse
    lsr.z y_pos_coarse+1
    ror.z y_pos_coarse
    lsr.z y_pos_coarse+1
    ror.z y_pos_coarse
    // next_position::@return
    // }
    // [120] return 
    rts
}
  // screencpy
// Copy an entire screen (40x25 = 1000 chars)
// - dst - destination
// - src - source
// screencpy(byte* zp(9) dst, byte* zp(3) src)
screencpy: {
    .label dst = 9
    .label src = 3
    .label src_250 = $26
    .label dst_250 = $1c
    .label src_500 = $1e
    .label dst_500 = $20
    .label src_750 = $22
    .label dst_750 = $24
    // src_250 = src+250
    // [121] screencpy::src_250#0 = screencpy::src#0 + $fa -- pbuz1=pbuz2_plus_vbuc1 
    lda #$fa
    clc
    adc.z src
    sta.z src_250
    lda #0
    adc.z src+1
    sta.z src_250+1
    // dst_250 = dst+250
    // [122] screencpy::dst_250#0 = screencpy::dst#0 + $fa -- pbuz1=pbuz2_plus_vbuc1 
    lda #$fa
    clc
    adc.z dst
    sta.z dst_250
    lda #0
    adc.z dst+1
    sta.z dst_250+1
    // src_500 = src+500
    // [123] screencpy::src_500#0 = screencpy::src#0 + $1f4 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z src
    clc
    adc #<$1f4
    sta.z src_500
    lda.z src+1
    adc #>$1f4
    sta.z src_500+1
    // dst_500 = dst+500
    // [124] screencpy::dst_500#0 = screencpy::dst#0 + $1f4 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z dst
    clc
    adc #<$1f4
    sta.z dst_500
    lda.z dst+1
    adc #>$1f4
    sta.z dst_500+1
    // src_750 = src+750
    // [125] screencpy::src_750#0 = screencpy::src#0 + $2ee -- pbuz1=pbuz2_plus_vwuc1 
    lda.z src
    clc
    adc #<$2ee
    sta.z src_750
    lda.z src+1
    adc #>$2ee
    sta.z src_750+1
    // dst_750 = dst+750
    // [126] screencpy::dst_750#0 = screencpy::dst#0 + $2ee -- pbuz1=pbuz2_plus_vwuc1 
    lda.z dst
    clc
    adc #<$2ee
    sta.z dst_750
    lda.z dst+1
    adc #>$2ee
    sta.z dst_750+1
    // [127] phi from screencpy to screencpy::@1 [phi:screencpy->screencpy::@1]
    // [127] phi screencpy::i#2 = 0 [phi:screencpy->screencpy::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // screencpy::@1
  __b1:
    // for( char i=0;i<250;i++)
    // [128] if(screencpy::i#2<$fa) goto screencpy::@2 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$fa
    bcc __b2
    // screencpy::@return
    // }
    // [129] return 
    rts
    // screencpy::@2
  __b2:
    // dst[i] = src[i]
    // [130] screencpy::dst#0[screencpy::i#2] = screencpy::src#0[screencpy::i#2] -- pbuz1_derefidx_vbuyy=pbuz2_derefidx_vbuyy 
    lda (src),y
    sta (dst),y
    // dst_250[i] = src_250[i]
    // [131] screencpy::dst_250#0[screencpy::i#2] = screencpy::src_250#0[screencpy::i#2] -- pbuz1_derefidx_vbuyy=pbuz2_derefidx_vbuyy 
    lda (src_250),y
    sta (dst_250),y
    // dst_500[i] = src_500[i]
    // [132] screencpy::dst_500#0[screencpy::i#2] = screencpy::src_500#0[screencpy::i#2] -- pbuz1_derefidx_vbuyy=pbuz2_derefidx_vbuyy 
    lda (src_500),y
    sta (dst_500),y
    // dst_750[i] = src_750[i]
    // [133] screencpy::dst_750#0[screencpy::i#2] = screencpy::src_750#0[screencpy::i#2] -- pbuz1_derefidx_vbuyy=pbuz2_derefidx_vbuyy 
    lda (src_750),y
    sta (dst_750),y
    // for( char i=0;i<250;i++)
    // [134] screencpy::i#1 = ++ screencpy::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [127] phi from screencpy::@2 to screencpy::@1 [phi:screencpy::@2->screencpy::@1]
    // [127] phi screencpy::i#2 = screencpy::i#1 [phi:screencpy::@2->screencpy::@1#0] -- register_copy 
    jmp __b1
}
  // petscii_ptr
// Get a pointer to a specific x,y-position in the PETSCII art
// petscii_ptr(word zp(5) row_x, word zp($f) row_y)
petscii_ptr: {
    .label __0 = $f
    .label __1 = $f
    .label row_x = 5
    .label row_y = $f
    .label return = 5
    .label __3 = $26
    .label __4 = $26
    .label __5 = $26
    .label __6 = $f
    // row_y * 140
    // [136] petscii_ptr::$3 = petscii_ptr::row_y#4 << 4 -- vwuz1=vwuz2_rol_4 
    lda.z row_y
    asl
    sta.z __3
    lda.z row_y+1
    rol
    sta.z __3+1
    asl.z __3
    rol.z __3+1
    asl.z __3
    rol.z __3+1
    asl.z __3
    rol.z __3+1
    // [137] petscii_ptr::$4 = petscii_ptr::$3 + petscii_ptr::row_y#4 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z __4
    clc
    adc.z row_y
    sta.z __4
    lda.z __4+1
    adc.z row_y+1
    sta.z __4+1
    // [138] petscii_ptr::$5 = petscii_ptr::$4 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z __5
    rol.z __5+1
    // [139] petscii_ptr::$6 = petscii_ptr::$5 + petscii_ptr::row_y#4 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __6
    clc
    adc.z __5
    sta.z __6
    lda.z __6+1
    adc.z __5+1
    sta.z __6+1
    // [140] petscii_ptr::$0 = petscii_ptr::$6 << 2 -- vwuz1=vwuz1_rol_2 
    asl.z __0
    rol.z __0+1
    asl.z __0
    rol.z __0+1
    // PETSCII_ART + row_y * 140
    // [141] petscii_ptr::$1 = PETSCII_ART + petscii_ptr::$0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __1
    adc #<PETSCII_ART
    sta.z __1
    lda.z __1+1
    adc #>PETSCII_ART
    sta.z __1+1
    // PETSCII_ART + row_y * 140 + row_x
    // [142] petscii_ptr::return#10 = petscii_ptr::$1 + petscii_ptr::row_x#4 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z return
    clc
    adc.z __1
    sta.z return
    lda.z return+1
    adc.z __1+1
    sta.z return+1
    // petscii_ptr::@return
    // }
    // [143] return 
    rts
}
  // File Data
// Sinus table [-399,399]
SINTAB:
.fillword SINSIZE, 399*sin(i*2*PI/SINSIZE)

.pc = $4000 "PETSCII_ART"
// 140x125 PETSCII art
PETSCII_ART:
.var petsciiPic = LoadPicture("cml.png")
    .print "width: "+petsciiPic.width + " height: "+petsciiPic.height
    .for (var y=0; y<petsciiPic.height; y++)
        .for (var x=0; x<petsciiPic.width; x++)
            .byte petsciiPic.getPixel(x,y)==0?' ':$a0;


