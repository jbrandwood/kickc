
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  asm { lda#'1' pha lda#'2' pha lda#'3' pha  }
  call peek_stack
  to:main::@1
main::@1: scope:[main]  from main
  asm { pla pla pla  }
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void peek_stack()
peek_stack: scope:[peek_stack]  from main
  asm { tsx ldaSTACK,x staSCREEN ldaSTACK+1,x staSCREEN+1 ldaSTACK+2,x staSCREEN+2  }
  to:peek_stack::@return
peek_stack::@return: scope:[peek_stack]  from peek_stack
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
__constant char * const SCREEN = (char *)$400
__constant char * const STACK = (char *)$103
void __start()
void main()
void peek_stack()

Simplifying constant pointer cast (char *) 259
Simplifying constant pointer cast (char *) 1024
Successful SSA optimization PassNCastSimplification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH
Calls in [main] to peek_stack:1 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  asm { lda#'1' pha lda#'2' pha lda#'3' pha  }
  [1] call peek_stack
  to:main::@1
main::@1: scope:[main]  from main
  asm { pla pla pla  }
  to:main::@return
main::@return: scope:[main]  from main::@1
  [3] return 
  to:@return

void peek_stack()
peek_stack: scope:[peek_stack]  from main
  asm { tsx ldaSTACK,x staSCREEN ldaSTACK+1,x staSCREEN+1 ldaSTACK+2,x staSCREEN+2  }
  to:peek_stack::@return
peek_stack::@return: scope:[peek_stack]  from peek_stack
  [5] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
void peek_stack()

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement asm { lda#'1' pha lda#'2' pha lda#'3' pha  } always clobbers reg byte a 
Statement asm { pla pla pla  } always clobbers reg byte a 
Statement asm { tsx ldaSTACK,x staSCREEN ldaSTACK+1,x staSCREEN+1 ldaSTACK+2,x staSCREEN+2  } always clobbers reg byte a reg byte x 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [peek_stack] 
Uplift Scope [] 

Uplifting [main] best 81 combination 
Uplifting [peek_stack] best 81 combination 
Uplifting [] best 81 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test stack-relative addressing (for passing parameters through the stack)
  // Upstart
  // Commodore 64 PRG executable file
.file [name="stack-relative-addressing.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  /** The hardware stack. The offset 3 is to skip the return address and the fact that the pointer is to the next free position. */
  .label STACK = $103
  /** The screen. */
  .label SCREEN = $400
.segment Code
  // main
main: {
    // asm { lda#'1' pha lda#'2' pha lda#'3' pha  }
    // Push a few values to the stack
    lda #'1'
    pha
    lda #'2'
    pha
    lda #'3'
    pha
    // [1] call peek_stack -- call_phi_near 
    // Then call a function
    jsr peek_stack
    jmp __b1
    // main::@1
  __b1:
    // asm { pla pla pla  }
    // Clean up the stack
    pla
    pla
    pla
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
}
  // peek_stack
// Peek values from the stack using stack-relative addressing
peek_stack: {
    // asm { tsx ldaSTACK,x staSCREEN ldaSTACK+1,x staSCREEN+1 ldaSTACK+2,x staSCREEN+2  }
    tsx
    lda STACK,x
    sta SCREEN
    lda STACK+1,x
    sta SCREEN+1
    lda STACK+2,x
    sta SCREEN+2
    jmp __breturn
    // peek_stack::@return
  __breturn:
    // [5] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant char * const SCREEN = (char *) 1024
__constant char * const STACK = (char *) 259
void main()
void peek_stack()



FINAL ASSEMBLER
Score: 72

  // File Comments
// Test stack-relative addressing (for passing parameters through the stack)
  // Upstart
  // Commodore 64 PRG executable file
.file [name="stack-relative-addressing.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  /** The hardware stack. The offset 3 is to skip the return address and the fact that the pointer is to the next free position. */
  .label STACK = $103
  /** The screen. */
  .label SCREEN = $400
.segment Code
  // main
main: {
    // asm
    // asm { lda#'1' pha lda#'2' pha lda#'3' pha  }
    // Push a few values to the stack
    lda #'1'
    pha
    lda #'2'
    pha
    lda #'3'
    pha
    // peek_stack()
    // [1] call peek_stack -- call_phi_near 
    // Then call a function
    jsr peek_stack
    // main::@1
    // asm
    // asm { pla pla pla  }
    // Clean up the stack
    pla
    pla
    pla
    // main::@return
    // }
    // [3] return 
    rts
}
  // peek_stack
// Peek values from the stack using stack-relative addressing
peek_stack: {
    // asm
    // asm { tsx ldaSTACK,x staSCREEN ldaSTACK+1,x staSCREEN+1 ldaSTACK+2,x staSCREEN+2  }
    tsx
    lda STACK,x
    sta SCREEN
    lda STACK+1,x
    sta SCREEN+1
    lda STACK+2,x
    sta SCREEN+2
    // peek_stack::@return
    // }
    // [5] return 
    rts
}
  // File Data

