Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  ch#18 = phi( __start::@1/ch#19 )
  line#17 = phi( __start::@1/line#18 )
  call ln 
  to:main::@1
main::@1: scope:[main]  from main
  ch#11 = phi( main/ch#7 )
  line#9 = phi( main/line#5 )
  line#0 = line#9
  ch#0 = ch#11
  ch#1 = ++ ch#0
  call ln 
  to:main::@2
main::@2: scope:[main]  from main::@1
  ch#12 = phi( main::@1/ch#7 )
  line#10 = phi( main::@1/line#5 )
  line#1 = line#10
  ch#2 = ch#12
  ch#3 = ++ ch#2
  call ln 
  to:main::@3
main::@3: scope:[main]  from main::@2
  ch#13 = phi( main::@2/ch#7 )
  line#11 = phi( main::@2/line#5 )
  line#2 = line#11
  ch#4 = ch#13
  *SCREEN = ch#4
  main::$3 = SCREEN + $28
  *main::$3 = line#2
  to:main::@return
main::@return: scope:[main]  from main::@3
  ch#14 = phi( main::@3/ch#4 )
  line#12 = phi( main::@3/line#2 )
  line#3 = line#12
  ch#5 = ch#14
  return 
  to:@return

void ln()
ln: scope:[ln]  from main main::@1 main::@2
  line#13 = phi( main/line#17, main::@1/line#0, main::@2/line#1 )
  ln::$0 = line#13 + 2
  line#4 = ln::$0
  ch#6 = line#4
  to:ln::@return
ln::@return: scope:[ln]  from ln
  ch#15 = phi( ln/ch#6 )
  line#14 = phi( ln/line#4 )
  line#5 = line#14
  ch#7 = ch#15
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  line#6 = $40
  ch#8 = line#6
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  ch#19 = phi( __start::__init1/ch#8 )
  line#18 = phi( __start::__init1/line#6 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  ch#16 = phi( __start::@1/ch#5 )
  line#15 = phi( __start::@1/line#3 )
  line#7 = line#15
  ch#9 = ch#16
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  ch#17 = phi( __start::@2/ch#9 )
  line#16 = phi( __start::@2/line#7 )
  line#8 = line#16
  ch#10 = ch#17
  return 
  to:@return

SYMBOL TABLE SSA
const byte* SCREEN = (byte*)$400
void __start()
byte ch
byte ch#0
byte ch#1
byte ch#10
byte ch#11
byte ch#12
byte ch#13
byte ch#14
byte ch#15
byte ch#16
byte ch#17
byte ch#18
byte ch#19
byte ch#2
byte ch#3
byte ch#4
byte ch#5
byte ch#6
byte ch#7
byte ch#8
byte ch#9
byte line
byte line#0
byte line#1
byte line#10
byte line#11
byte line#12
byte line#13
byte line#14
byte line#15
byte line#16
byte line#17
byte line#18
byte line#2
byte line#3
byte line#4
byte line#5
byte line#6
byte line#7
byte line#8
byte line#9
void ln()
number~ ln::$0
void main()
byte*~ main::$3

Adding number conversion cast (unumber) $28 in main::$3 = SCREEN + $28
Adding number conversion cast (unumber) 2 in ln::$0 = line#13 + 2
Adding number conversion cast (unumber) ln::$0 in ln::$0 = line#13 + (unumber)2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $28
Finalized unsigned number type 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in ln::$0 = line#13 + 2
Alias line#0 = line#9 
Alias ch#0 = ch#11 
Alias line#1 = line#10 
Alias ch#12 = ch#2 
Alias line#11 = line#2 line#12 line#3 
Alias ch#13 = ch#4 ch#14 ch#5 
Alias line#14 = line#4 ln::$0 ch#6 ch#15 line#5 ch#7 
Alias line#18 = ch#8 line#6 ch#19 
Alias line#15 = line#7 line#16 line#8 
Alias ch#10 = ch#9 ch#16 ch#17 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values line#17 line#18
Identical Phi Values ch#18 line#18
Identical Phi Values line#0 line#14
Identical Phi Values ch#0 line#14
Identical Phi Values line#1 line#14
Identical Phi Values ch#12 line#14
Identical Phi Values line#11 line#14
Identical Phi Values ch#13 line#14
Identical Phi Values line#15 line#11
Identical Phi Values ch#10 ch#13
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [10] main::$3 = SCREEN + $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$3 = SCREEN+$28
Constant line#18 = $40
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused variable ch#1 and assignment [1] ch#1 = ++ line#14
Eliminating unused variable ch#3 and assignment [3] ch#3 = ++ line#14
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings line#18
Constant inlined line#18 = $40
Constant inlined main::$3 = SCREEN+$28
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
CALL GRAPH
Calls in [main] to ln:1 ln:3 ln:5 

Created 1 initial phi equivalence classes
Coalesced [2] line#19 = line#14
Coalesced (already) [4] line#20 = line#14
Coalesced down to 1 phi equivalence classes
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call ln 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call ln 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] phi()
  [5] call ln 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [6] *SCREEN = line#14
  [7] *(SCREEN+$28) = line#14
  to:main::@return
main::@return: scope:[main]  from main::@3
  [8] return 
  to:@return

void ln()
ln: scope:[ln]  from main main::@1 main::@2
  [9] line#13 = phi( main/$40, main::@1/line#14, main::@2/line#14 )
  [10] line#14 = line#13 + 2
  to:ln::@return
ln::@return: scope:[ln]  from ln
  [11] return 
  to:@return


VARIABLE REGISTER WEIGHTS
byte ch
byte line
byte line#13 15.0
byte line#14 2.375
void ln()
void main()

Initial phi equivalence classes
[ line#13 line#14 ]
Complete equivalence classes
[ line#13 line#14 ]
Allocated zp[1]:2 [ line#13 line#14 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ line#13 line#14 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 17.38: zp[1]:2 [ line#13 line#14 ] 
Uplift Scope [main] 
Uplift Scope [ln] 

Uplifting [] best 59 combination reg byte a [ line#13 line#14 ] 
Uplifting [main] best 59 combination 
Uplifting [ln] best 59 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] call ln 
    // [9] phi from main to ln [phi:main->ln]
  ln_from_main:
    // [9] phi line#13 = $40 [phi:main->ln#0] -- vbuaa=vbuc1 
    lda #$40
    jsr ln
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call ln 
    // [9] phi from main::@1 to ln [phi:main::@1->ln]
  ln_from___b1:
    // [9] phi line#13 = line#14 [phi:main::@1->ln#0] -- register_copy 
    jsr ln
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [5] call ln 
    // [9] phi from main::@2 to ln [phi:main::@2->ln]
  ln_from___b2:
    // [9] phi line#13 = line#14 [phi:main::@2->ln#0] -- register_copy 
    jsr ln
    jmp __b3
    // main::@3
  __b3:
    // [6] *SCREEN = line#14 -- _deref_pbuc1=vbuaa 
    sta SCREEN
    // [7] *(SCREEN+$28) = line#14 -- _deref_pbuc1=vbuaa 
    sta SCREEN+$28
    jmp __breturn
    // main::@return
  __breturn:
    // [8] return 
    rts
}
  // ln
ln: {
    // [10] line#14 = line#13 + 2 -- vbuaa=vbuaa_plus_2 
    clc
    adc #2
    jmp __breturn
    // ln::@return
  __breturn:
    // [11] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Removing instruction ln_from___b1:
Removing instruction __b2_from___b1:
Removing instruction ln_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction ln_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const byte* SCREEN = (byte*) 1024
byte ch
byte line
byte line#13 reg byte a 15.0
byte line#14 reg byte a 2.375
void ln()
void main()

reg byte a [ line#13 line#14 ]


FINAL ASSEMBLER
Score: 44

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // ln()
    // [1] call ln 
    // [9] phi from main to ln [phi:main->ln]
    // [9] phi line#13 = $40 [phi:main->ln#0] -- vbuaa=vbuc1 
    lda #$40
    jsr ln
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // ln()
    // [3] call ln 
    // [9] phi from main::@1 to ln [phi:main::@1->ln]
    // [9] phi line#13 = line#14 [phi:main::@1->ln#0] -- register_copy 
    jsr ln
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // ln()
    // [5] call ln 
    // [9] phi from main::@2 to ln [phi:main::@2->ln]
    // [9] phi line#13 = line#14 [phi:main::@2->ln#0] -- register_copy 
    jsr ln
    // main::@3
    // *SCREEN = ch
    // [6] *SCREEN = line#14 -- _deref_pbuc1=vbuaa 
    sta SCREEN
    // *(SCREEN+40) = line
    // [7] *(SCREEN+$28) = line#14 -- _deref_pbuc1=vbuaa 
    sta SCREEN+$28
    // main::@return
    // }
    // [8] return 
    rts
}
  // ln
ln: {
    // line + $2
    // [10] line#14 = line#13 + 2 -- vbuaa=vbuaa_plus_2 
    clc
    adc #2
    // ln::@return
    // }
    // [11] return 
    rts
}
  // File Data

