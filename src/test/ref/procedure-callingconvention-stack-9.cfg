
(void()) __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] (byte) val ← (byte) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [2] phi()
  [3] callexecute main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [4] return 
  to:@return

__stackcall (void()) printother()
printother: scope:[printother]  from
  [5] phi()
  to:printother::@1
printother::@1: scope:[printother]  from printother printother::@1
  [6] (byte) printother::i#2 ← phi( printother/(byte) 0 printother::@1/(byte) printother::i#1 )
  [7] *((const nomodify byte*) SCREEN+(byte) $28 + (byte) printother::i#2) ← ++ *((const nomodify byte*) SCREEN+(byte) $28 + (byte) printother::i#2)
  [8] (byte) printother::i#1 ← ++ (byte) printother::i#2
  [9] if((byte) printother::i#1!=(byte) 6) goto printother::@1
  to:printother::@return
printother::@return: scope:[printother]  from printother::@1
  [10] return 
  to:@return

__stackcall (void()) incval()
incval: scope:[incval]  from
  [11] (byte) val ← ++ (byte) val
  to:incval::@return
incval::@return: scope:[incval]  from incval
  [12] return 
  to:@return

__stackcall (void()) printval()
printval: scope:[printval]  from
  [13] *((const nomodify byte*) SCREEN) ← (byte) val
  to:printval::@return
printval::@return: scope:[printval]  from printval
  [14] return 
  to:@return

__stackcall (void()) ival()
ival: scope:[ival]  from
  [15] phi()
  [16] callexecute incval 
  to:ival::@return
ival::@return: scope:[ival]  from ival
  [17] return 
  to:@return

__stackcall (void()) pval()
pval: scope:[pval]  from
  [18] phi()
  [19] callexecute printval 
  to:pval::@return
pval::@return: scope:[pval]  from pval
  [20] return 
  to:@return

__stackcall (void()) main()
main: scope:[main]  from
  [21] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [22] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [23] callexecute pval 
  [24] callexecute printother 
  [25] callexecute ival 
  [26] (byte) main::i#1 ← ++ (byte) main::i#2
  [27] if((byte) main::i#1!=(byte) 6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [28] return 
  to:@return
