
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [5] phi()
  [6] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [7] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [8] phi()
  [9] call clrscr 
  to:main::@1
main::@1: scope:[main]  from main
  [10] main::c = 'x'
  [11] call cputs 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] cputc::c#3 = main::c
  [13] call cputc 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [14] phi()
  [15] call cputs 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [16] phi()
  [17] call cputs 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [18] phi()
  [19] call printf_uint 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [20] phi()
  [21] call cputs 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [22] phi()
  [23] call cputs 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [24] phi()
  [25] call cputc 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [26] phi()
  [27] call cputs 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [28] phi()
  [29] call cputs 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [30] phi()
  [31] call printf_schar 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [32] phi()
  [33] call cputs 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [34] phi()
  [35] call cputs 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [36] phi()
  [37] call printf_uchar 
  to:main::@15
main::@15: scope:[main]  from main::@14
  [38] phi()
  [39] call cputs 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [40] phi()
  [41] call cputs 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [42] phi()
  [43] call printf_sint 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [44] phi()
  [45] call cputs 
  to:main::@19
main::@19: scope:[main]  from main::@18
  [46] phi()
  [47] call cputs 
  to:main::@20
main::@20: scope:[main]  from main::@19
  [48] phi()
  [49] call printf_uint 
  to:main::@21
main::@21: scope:[main]  from main::@20
  [50] phi()
  [51] call cputs 
  to:main::@22
main::@22: scope:[main]  from main::@21
  [52] phi()
  [53] call cputs 
  to:main::@23
main::@23: scope:[main]  from main::@22
  [54] phi()
  [55] call printf_slong 
  to:main::@24
main::@24: scope:[main]  from main::@23
  [56] phi()
  [57] call cputs 
  to:main::@25
main::@25: scope:[main]  from main::@24
  [58] phi()
  [59] call cputs 
  to:main::@26
main::@26: scope:[main]  from main::@25
  [60] phi()
  [61] call printf_ulong 
  to:main::@27
main::@27: scope:[main]  from main::@26
  [62] phi()
  [63] call cputs 
  to:main::@return
main::@return: scope:[main]  from main::@27
  [64] return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  [65] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [66] clrscr::line_cols#5 = phi( clrscr/COLORRAM, clrscr::@5/clrscr::line_cols#1 )
  [66] clrscr::line_text#5 = phi( clrscr/DEFAULT_SCREEN, clrscr::@5/clrscr::line_text#1 )
  [66] clrscr::l#2 = phi( clrscr/0, clrscr::@5/clrscr::l#1 )
  [67] if(clrscr::l#2<$19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [68] conio_cursor_x = 0
  [69] conio_cursor_y = 0
  [70] conio_line_text = DEFAULT_SCREEN
  [71] conio_line_color = COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [72] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [73] clrscr::c#2 = phi( clrscr::@1/0, clrscr::@4/clrscr::c#1 )
  [74] if(clrscr::c#2<$28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [75] clrscr::line_text#1 = clrscr::line_text#5 + $28
  [76] clrscr::line_cols#1 = clrscr::line_cols#5 + $28
  [77] clrscr::l#1 = ++ clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [78] clrscr::line_text#5[clrscr::c#2] = ' '
  [79] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE
  [80] clrscr::c#1 = ++ clrscr::c#2
  to:clrscr::@3

void cputs(to_nomodify byte* cputs::s)
cputs: scope:[cputs]  from main::@1 main::@10 main::@12 main::@13 main::@15 main::@16 main::@18 main::@19 main::@21 main::@22 main::@24 main::@25 main::@27 main::@3 main::@4 main::@6 main::@7 main::@9 printf_number_buffer::@5
  [81] cputs::s#21 = phi( main::@1/main::s, main::@10/main::s6, main::@12/main::s1, main::@13/main::s8, main::@15/main::s1, main::@16/main::s10, main::@18/main::s1, main::@19/main::s12, main::@21/main::s1, main::@22/main::s14, main::@24/main::s1, main::@25/main::s16, main::@27/main::s1, main::@3/main::s1, main::@4/main::s2, main::@6/main::s1, main::@7/main::s4, main::@9/main::s1, printf_number_buffer::@5/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [82] cputs::s#20 = phi( cputs/cputs::s#21, cputs::@2/cputs::s#0 )
  [83] cputs::c#1 = *cputs::s#20
  [84] cputs::s#0 = ++ cputs::s#20
  [85] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [86] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [87] cputc::c#0 = cputs::c#1
  [88] call cputc 
  to:cputs::@1

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 main::@2 main::@8 printf_number_buffer::@9 printf_padding::@2
  [89] cputc::c#5 = phi( cputs::@2/cputc::c#0, main::@2/cputc::c#3, main::@8/'%', printf_number_buffer::@9/cputc::c#2, printf_padding::@2/cputc::c#1 )
  [90] if(cputc::c#5=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [91] conio_line_text[conio_cursor_x] = cputc::c#5
  [92] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [93] conio_cursor_x = ++ conio_cursor_x
  [94] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [95] phi()
  [96] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [97] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [98] phi()
  [99] call cputln 
  to:cputc::@return

void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@20 main::@5
  [100] printf_uint::format_radix#2 = phi( main::@20/DECIMAL, main::@5/HEXADECIMAL )
  [100] printf_uint::uvalue#2 = phi( main::@20/main::ui, main::@5/(word)&main::c )
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [101] *((byte*)&printf_buffer) = 0
  [102] utoa::value#2 = printf_uint::uvalue#2
  [103] utoa::radix#1 = printf_uint::format_radix#2
  [104] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [105] printf_number_buffer::buffer_sign#3 = *((byte*)&printf_buffer)
  [106] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [107] return 
  to:@return

void printf_schar(signed byte printf_schar::value , byte printf_schar::format_min_length , byte printf_schar::format_justify_left , byte printf_schar::format_sign_always , byte printf_schar::format_zero_padding , byte printf_schar::format_upper_case , byte printf_schar::format_radix)
printf_schar: scope:[printf_schar]  from main::@11
  [108] *((byte*)&printf_buffer) = 0
  to:printf_schar::@1
printf_schar::@1: scope:[printf_schar]  from printf_schar
  [109] *((byte*)&printf_buffer) = '-'
  to:printf_schar::@2
printf_schar::@2: scope:[printf_schar]  from printf_schar::@1
  [110] phi()
  [111] call uctoa 
  to:printf_schar::@3
printf_schar::@3: scope:[printf_schar]  from printf_schar::@2
  [112] printf_number_buffer::buffer_sign#4 = *((byte*)&printf_buffer)
  [113] call printf_number_buffer 
  to:printf_schar::@return
printf_schar::@return: scope:[printf_schar]  from printf_schar::@3
  [114] return 
  to:@return

void printf_uchar(byte printf_uchar::uvalue , byte printf_uchar::format_min_length , byte printf_uchar::format_justify_left , byte printf_uchar::format_sign_always , byte printf_uchar::format_zero_padding , byte printf_uchar::format_upper_case , byte printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from main::@14
  [115] phi()
  to:printf_uchar::@1
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  [116] *((byte*)&printf_buffer) = 0
  [117] call uctoa 
  to:printf_uchar::@2
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar::@1
  [118] printf_number_buffer::buffer_sign#5 = *((byte*)&printf_buffer)
  [119] call printf_number_buffer 
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@2
  [120] return 
  to:@return

void printf_sint(signed word printf_sint::value , byte printf_sint::format_min_length , byte printf_sint::format_justify_left , byte printf_sint::format_sign_always , byte printf_sint::format_zero_padding , byte printf_sint::format_upper_case , byte printf_sint::format_radix)
printf_sint: scope:[printf_sint]  from main::@17
  [121] *((byte*)&printf_buffer) = 0
  to:printf_sint::@1
printf_sint::@1: scope:[printf_sint]  from printf_sint
  [122] *((byte*)&printf_buffer) = '-'
  to:printf_sint::@2
printf_sint::@2: scope:[printf_sint]  from printf_sint::@1
  [123] phi()
  [124] call utoa 
  to:printf_sint::@3
printf_sint::@3: scope:[printf_sint]  from printf_sint::@2
  [125] printf_number_buffer::buffer_sign#2 = *((byte*)&printf_buffer)
  [126] call printf_number_buffer 
  to:printf_sint::@return
printf_sint::@return: scope:[printf_sint]  from printf_sint::@3
  [127] return 
  to:@return

void printf_slong(signed dword printf_slong::value , byte printf_slong::format_min_length , byte printf_slong::format_justify_left , byte printf_slong::format_sign_always , byte printf_slong::format_zero_padding , byte printf_slong::format_upper_case , byte printf_slong::format_radix)
printf_slong: scope:[printf_slong]  from main::@23
  [128] *((byte*)&printf_buffer) = 0
  to:printf_slong::@1
printf_slong::@1: scope:[printf_slong]  from printf_slong
  [129] *((byte*)&printf_buffer) = '-'
  to:printf_slong::@2
printf_slong::@2: scope:[printf_slong]  from printf_slong::@1
  [130] phi()
  [131] call ultoa 
  to:printf_slong::@3
printf_slong::@3: scope:[printf_slong]  from printf_slong::@2
  [132] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer)
  [133] call printf_number_buffer 
  to:printf_slong::@return
printf_slong::@return: scope:[printf_slong]  from printf_slong::@3
  [134] return 
  to:@return

void printf_ulong(dword printf_ulong::uvalue , byte printf_ulong::format_min_length , byte printf_ulong::format_justify_left , byte printf_ulong::format_sign_always , byte printf_ulong::format_zero_padding , byte printf_ulong::format_upper_case , byte printf_ulong::format_radix)
printf_ulong: scope:[printf_ulong]  from main::@26
  [135] phi()
  to:printf_ulong::@1
printf_ulong::@1: scope:[printf_ulong]  from printf_ulong
  [136] *((byte*)&printf_buffer) = 0
  [137] call ultoa 
  to:printf_ulong::@2
printf_ulong::@2: scope:[printf_ulong]  from printf_ulong::@1
  [138] printf_number_buffer::buffer_sign#1 = *((byte*)&printf_buffer)
  [139] call printf_number_buffer 
  to:printf_ulong::@return
printf_ulong::@return: scope:[printf_ulong]  from printf_ulong::@2
  [140] return 
  to:@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [141] conio_line_text = conio_line_text + $28
  [142] conio_line_color = conio_line_color + $28
  [143] conio_cursor_x = 0
  [144] conio_cursor_y = ++ conio_cursor_y
  [145] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [146] return 
  to:@return

void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
utoa: scope:[utoa]  from printf_sint::@2 printf_uint::@1
  [147] utoa::value#10 = phi( printf_sint::@2/printf_sint::uvalue#0, printf_uint::@1/utoa::value#2 )
  [147] utoa::radix#2 = phi( printf_sint::@2/DECIMAL, printf_uint::@1/utoa::radix#1 )
  [148] if(utoa::radix#2==DECIMAL) goto utoa::@1
  to:utoa::@2
utoa::@2: scope:[utoa]  from utoa
  [149] if(utoa::radix#2==HEXADECIMAL) goto utoa::@1
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@2
  [150] if(utoa::radix#2==OCTAL) goto utoa::@1
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@3
  [151] if(utoa::radix#2==BINARY) goto utoa::@1
  to:utoa::@5
utoa::@5: scope:[utoa]  from utoa::@4
  [152] *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS) = 'e'
  [153] *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+1) = 'r'
  [154] *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+2) = 'r'
  [155] *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS+3) = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@5 utoa::@8
  [156] return 
  to:@return
utoa::@1: scope:[utoa]  from utoa utoa::@2 utoa::@3 utoa::@4
  [157] utoa::digit_values#8 = phi( utoa/RADIX_DECIMAL_VALUES, utoa::@2/RADIX_HEXADECIMAL_VALUES, utoa::@3/RADIX_OCTAL_VALUES, utoa::@4/RADIX_BINARY_VALUES )
  [157] utoa::max_digits#7 = phi( utoa/5, utoa::@2/4, utoa::@3/6, utoa::@4/$10 )
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@1 utoa::@9
  [158] utoa::buffer#10 = phi( utoa::@9/utoa::buffer#15, utoa::@1/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [158] utoa::started#2 = phi( utoa::@9/utoa::started#4, utoa::@1/0 )
  [158] utoa::value#3 = phi( utoa::@9/utoa::value#7, utoa::@1/utoa::value#10 )
  [158] utoa::digit#2 = phi( utoa::@9/utoa::digit#1, utoa::@1/0 )
  [159] utoa::$4 = utoa::max_digits#7 - 1
  [160] if(utoa::digit#2<utoa::$4) goto utoa::@7
  to:utoa::@8
utoa::@8: scope:[utoa]  from utoa::@6
  [161] utoa::$11 = (byte)utoa::value#3
  [162] *utoa::buffer#10 = DIGITS[utoa::$11]
  [163] utoa::buffer#3 = ++ utoa::buffer#10
  [164] *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@7: scope:[utoa]  from utoa::@6
  [165] utoa::$10 = utoa::digit#2 << 1
  [166] utoa::digit_value#0 = utoa::digit_values#8[utoa::$10]
  [167] if(0!=utoa::started#2) goto utoa::@10
  to:utoa::@12
utoa::@12: scope:[utoa]  from utoa::@7
  [168] if(utoa::value#3>=utoa::digit_value#0) goto utoa::@10
  to:utoa::@9
utoa::@9: scope:[utoa]  from utoa::@11 utoa::@12
  [169] utoa::buffer#15 = phi( utoa::@12/utoa::buffer#10, utoa::@11/utoa::buffer#4 )
  [169] utoa::started#4 = phi( utoa::@12/utoa::started#2, utoa::@11/1 )
  [169] utoa::value#7 = phi( utoa::@12/utoa::value#3, utoa::@11/utoa::value#0 )
  [170] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@6
utoa::@10: scope:[utoa]  from utoa::@12 utoa::@7
  [171] utoa_append::buffer#0 = utoa::buffer#10
  [172] utoa_append::value#0 = utoa::value#3
  [173] utoa_append::sub#0 = utoa::digit_value#0
  [174] call utoa_append 
  [175] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@11
utoa::@11: scope:[utoa]  from utoa::@10
  [176] utoa::value#0 = utoa_append::return#0
  [177] utoa::buffer#4 = ++ utoa::buffer#10
  to:utoa::@9

void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_schar::@3 printf_sint::@3 printf_slong::@3 printf_uchar::@2 printf_uint::@2 printf_ulong::@2
  [178] printf_number_buffer::format_upper_case#10 = phi( printf_schar::@3/printf_schar::format_upper_case#0, printf_sint::@3/printf_sint::format_upper_case#0, printf_slong::@3/printf_slong::format_upper_case#0, printf_uchar::@2/printf_uchar::format_upper_case#0, printf_uint::@2/0, printf_ulong::@2/printf_ulong::format_upper_case#0 )
  [178] printf_number_buffer::buffer_sign#10 = phi( printf_schar::@3/printf_number_buffer::buffer_sign#4, printf_sint::@3/printf_number_buffer::buffer_sign#2, printf_slong::@3/printf_number_buffer::buffer_sign#0, printf_uchar::@2/printf_number_buffer::buffer_sign#5, printf_uint::@2/printf_number_buffer::buffer_sign#3, printf_ulong::@2/printf_number_buffer::buffer_sign#1 )
  [178] printf_number_buffer::format_zero_padding#10 = phi( printf_schar::@3/printf_schar::format_zero_padding#0, printf_sint::@3/printf_sint::format_zero_padding#0, printf_slong::@3/printf_slong::format_zero_padding#0, printf_uchar::@2/printf_uchar::format_zero_padding#0, printf_uint::@2/0, printf_ulong::@2/printf_ulong::format_zero_padding#0 )
  [178] printf_number_buffer::format_justify_left#10 = phi( printf_schar::@3/printf_schar::format_justify_left#0, printf_sint::@3/printf_sint::format_justify_left#0, printf_slong::@3/printf_slong::format_justify_left#0, printf_uchar::@2/printf_uchar::format_justify_left#0, printf_uint::@2/0, printf_ulong::@2/printf_ulong::format_justify_left#0 )
  [178] printf_number_buffer::format_min_length#10 = phi( printf_schar::@3/printf_schar::format_min_length#0, printf_sint::@3/printf_sint::format_min_length#0, printf_slong::@3/printf_slong::format_min_length#0, printf_uchar::@2/printf_uchar::format_min_length#0, printf_uint::@2/0, printf_ulong::@2/printf_ulong::format_min_length#0 )
  [179] if(0==printf_number_buffer::format_min_length#10) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  [180] phi()
  [181] call strlen 
  [182] strlen::return#2 = strlen::len#2
  to:printf_number_buffer::@14
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@6
  [183] printf_number_buffer::$19 = strlen::return#2
  [184] printf_number_buffer::len#0 = (signed byte)printf_number_buffer::$19
  [185] if(0==printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@14
  [186] printf_number_buffer::len#1 = ++ printf_number_buffer::len#0
  to:printf_number_buffer::@13
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@14 printf_number_buffer::@7
  [187] printf_number_buffer::len#2 = phi( printf_number_buffer::@14/printf_number_buffer::len#0, printf_number_buffer::@7/printf_number_buffer::len#1 )
  [188] printf_number_buffer::padding#1 = (signed byte)printf_number_buffer::format_min_length#10 - printf_number_buffer::len#2
  [189] if(printf_number_buffer::padding#1>=0) goto printf_number_buffer::@21
  to:printf_number_buffer::@1
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@13
  [190] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@21
  [191] printf_number_buffer::padding#10 = phi( printf_number_buffer/0, printf_number_buffer::@21/printf_number_buffer::padding#1, printf_number_buffer::@13/0 )
  [192] if(0!=printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [193] if(0!=printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@17
  [194] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@8
  to:printf_number_buffer::@2
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@16
  [195] printf_padding::length#0 = (byte)printf_number_buffer::padding#10
  [196] call printf_padding 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16 printf_number_buffer::@17 printf_number_buffer::@8
  [197] if(0==printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [198] cputc::c#2 = printf_number_buffer::buffer_sign#10
  [199] call cputc 
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@2 printf_number_buffer::@9
  [200] if(0==printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@3
  [201] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@10
  to:printf_number_buffer::@4
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@18
  [202] printf_padding::length#1 = (byte)printf_number_buffer::padding#10
  [203] call printf_padding 
  to:printf_number_buffer::@4
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@10 printf_number_buffer::@18 printf_number_buffer::@3
  [204] if(0==printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  [205] phi()
  [206] call strupr 
  to:printf_number_buffer::@5
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@11 printf_number_buffer::@4
  [207] phi()
  [208] call cputs 
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@5
  [209] if(0==printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@15
  [210] if(0!=printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@20
  [211] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  [212] printf_padding::length#2 = (byte)printf_number_buffer::padding#10
  [213] call printf_padding 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@12 printf_number_buffer::@15 printf_number_buffer::@19 printf_number_buffer::@20
  [214] return 
  to:@return

void uctoa(byte uctoa::value , byte* uctoa::buffer , byte uctoa::radix)
uctoa: scope:[uctoa]  from printf_schar::@2 printf_uchar::@1
  [215] uctoa::value#10 = phi( printf_schar::@2/printf_schar::uvalue#0, printf_uchar::@1/main::uc )
  to:uctoa::@1
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@4
  [216] uctoa::buffer#10 = phi( uctoa::@4/uctoa::buffer#15, uctoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [216] uctoa::started#2 = phi( uctoa::@4/uctoa::started#4, uctoa/0 )
  [216] uctoa::value#3 = phi( uctoa::@4/uctoa::value#7, uctoa/uctoa::value#10 )
  [216] uctoa::digit#2 = phi( uctoa::@4/uctoa::digit#1, uctoa/0 )
  [217] if(uctoa::digit#2<3-1) goto uctoa::@2
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@1
  [218] *uctoa::buffer#10 = DIGITS[uctoa::value#3]
  [219] uctoa::buffer#3 = ++ uctoa::buffer#10
  [220] *uctoa::buffer#3 = 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@3
  [221] return 
  to:@return
uctoa::@2: scope:[uctoa]  from uctoa::@1
  [222] uctoa::digit_value#0 = RADIX_DECIMAL_VALUES_CHAR[uctoa::digit#2]
  [223] if(0!=uctoa::started#2) goto uctoa::@5
  to:uctoa::@7
uctoa::@7: scope:[uctoa]  from uctoa::@2
  [224] if(uctoa::value#3>=uctoa::digit_value#0) goto uctoa::@5
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@6 uctoa::@7
  [225] uctoa::buffer#15 = phi( uctoa::@7/uctoa::buffer#10, uctoa::@6/uctoa::buffer#4 )
  [225] uctoa::started#4 = phi( uctoa::@7/uctoa::started#2, uctoa::@6/1 )
  [225] uctoa::value#7 = phi( uctoa::@7/uctoa::value#3, uctoa::@6/uctoa::value#0 )
  [226] uctoa::digit#1 = ++ uctoa::digit#2
  to:uctoa::@1
uctoa::@5: scope:[uctoa]  from uctoa::@2 uctoa::@7
  [227] uctoa_append::buffer#0 = uctoa::buffer#10
  [228] uctoa_append::value#0 = uctoa::value#3
  [229] uctoa_append::sub#0 = uctoa::digit_value#0
  [230] call uctoa_append 
  [231] uctoa_append::return#0 = uctoa_append::value#2
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@5
  [232] uctoa::value#0 = uctoa_append::return#0
  [233] uctoa::buffer#4 = ++ uctoa::buffer#10
  to:uctoa::@4

void ultoa(dword ultoa::value , byte* ultoa::buffer , byte ultoa::radix)
ultoa: scope:[ultoa]  from printf_slong::@2 printf_ulong::@1
  [234] ultoa::value#10 = phi( printf_slong::@2/printf_slong::uvalue#0, printf_ulong::@1/main::ul )
  to:ultoa::@1
ultoa::@1: scope:[ultoa]  from ultoa ultoa::@4
  [235] ultoa::buffer#10 = phi( ultoa::@4/ultoa::buffer#15, ultoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [235] ultoa::started#2 = phi( ultoa::@4/ultoa::started#4, ultoa/0 )
  [235] ultoa::value#3 = phi( ultoa::@4/ultoa::value#7, ultoa/ultoa::value#10 )
  [235] ultoa::digit#2 = phi( ultoa::@4/ultoa::digit#1, ultoa/0 )
  [236] if(ultoa::digit#2<$a-1) goto ultoa::@2
  to:ultoa::@3
ultoa::@3: scope:[ultoa]  from ultoa::@1
  [237] ultoa::$11 = (byte)ultoa::value#3
  [238] *ultoa::buffer#10 = DIGITS[ultoa::$11]
  [239] ultoa::buffer#3 = ++ ultoa::buffer#10
  [240] *ultoa::buffer#3 = 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@3
  [241] return 
  to:@return
ultoa::@2: scope:[ultoa]  from ultoa::@1
  [242] ultoa::$10 = ultoa::digit#2 << 2
  [243] ultoa::digit_value#0 = RADIX_DECIMAL_VALUES_LONG[ultoa::$10]
  [244] if(0!=ultoa::started#2) goto ultoa::@5
  to:ultoa::@7
ultoa::@7: scope:[ultoa]  from ultoa::@2
  [245] if(ultoa::value#3>=ultoa::digit_value#0) goto ultoa::@5
  to:ultoa::@4
ultoa::@4: scope:[ultoa]  from ultoa::@6 ultoa::@7
  [246] ultoa::buffer#15 = phi( ultoa::@7/ultoa::buffer#10, ultoa::@6/ultoa::buffer#4 )
  [246] ultoa::started#4 = phi( ultoa::@7/ultoa::started#2, ultoa::@6/1 )
  [246] ultoa::value#7 = phi( ultoa::@7/ultoa::value#3, ultoa::@6/ultoa::value#0 )
  [247] ultoa::digit#1 = ++ ultoa::digit#2
  to:ultoa::@1
ultoa::@5: scope:[ultoa]  from ultoa::@2 ultoa::@7
  [248] ultoa_append::buffer#0 = ultoa::buffer#10
  [249] ultoa_append::value#0 = ultoa::value#3
  [250] ultoa_append::sub#0 = ultoa::digit_value#0
  [251] call ultoa_append 
  [252] ultoa_append::return#0 = ultoa_append::value#2
  to:ultoa::@6
ultoa::@6: scope:[ultoa]  from ultoa::@5
  [253] ultoa::value#0 = ultoa_append::return#0
  [254] ultoa::buffer#4 = ++ ultoa::buffer#10
  to:ultoa::@4

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [255] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [256] phi()
  [257] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [258] phi()
  [259] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [260] phi()
  [261] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [262] phi()
  [263] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [264] conio_line_text = conio_line_text - $28
  [265] conio_line_color = conio_line_color - $28
  [266] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [267] return 
  to:@return

word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@10
  [268] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [269] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [269] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [270] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [271] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [272] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [273] utoa_append::digit#1 = ++ utoa_append::digit#2
  [274] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1

word strlen(byte* strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  [275] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [276] strlen::len#2 = phi( strlen/0, strlen::@2/strlen::len#1 )
  [276] strlen::str#2 = phi( strlen/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS, strlen::@2/strlen::str#0 )
  [277] if(0!=*strlen::str#2) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [278] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [279] strlen::len#1 = ++ strlen::len#2
  [280] strlen::str#0 = ++ strlen::str#2
  to:strlen::@1

void printf_padding(byte printf_padding::pad , byte printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  [281] printf_padding::pad#5 = phi( printf_number_buffer::@10/'0', printf_number_buffer::@12/' ', printf_number_buffer::@8/' ' )
  [281] printf_padding::length#4 = phi( printf_number_buffer::@10/printf_padding::length#1, printf_number_buffer::@12/printf_padding::length#2, printf_number_buffer::@8/printf_padding::length#0 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [282] printf_padding::i#2 = phi( printf_padding/0, printf_padding::@3/printf_padding::i#1 )
  [283] if(printf_padding::i#2<printf_padding::length#4) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [284] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [285] cputc::c#1 = printf_padding::pad#5
  [286] call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [287] printf_padding::i#1 = ++ printf_padding::i#2
  to:printf_padding::@1

byte* strupr(byte* strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  [288] phi()
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@3
  [289] strupr::src#2 = phi( strupr/strupr::str#0, strupr::@3/strupr::src#1 )
  [290] if(0!=*strupr::src#2) goto strupr::@2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@1
  [291] return 
  to:@return
strupr::@2: scope:[strupr]  from strupr::@1
  [292] toupper::ch#0 = *strupr::src#2
  [293] call toupper 
  [294] toupper::return#3 = toupper::return#2
  to:strupr::@3
strupr::@3: scope:[strupr]  from strupr::@2
  [295] strupr::$0 = toupper::return#3
  [296] *strupr::src#2 = strupr::$0
  [297] strupr::src#1 = ++ strupr::src#2
  to:strupr::@1

byte uctoa_append(byte* uctoa_append::buffer , byte uctoa_append::value , byte uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@5
  [298] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [299] uctoa_append::digit#2 = phi( uctoa_append/0, uctoa_append::@2/uctoa_append::digit#1 )
  [299] uctoa_append::value#2 = phi( uctoa_append/uctoa_append::value#0, uctoa_append::@2/uctoa_append::value#1 )
  [300] if(uctoa_append::value#2>=uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [301] *uctoa_append::buffer#0 = DIGITS[uctoa_append::digit#2]
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [302] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [303] uctoa_append::digit#1 = ++ uctoa_append::digit#2
  [304] uctoa_append::value#1 = uctoa_append::value#2 - uctoa_append::sub#0
  to:uctoa_append::@1

dword ultoa_append(byte* ultoa_append::buffer , dword ultoa_append::value , dword ultoa_append::sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@5
  [305] phi()
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  [306] ultoa_append::digit#2 = phi( ultoa_append/0, ultoa_append::@2/ultoa_append::digit#1 )
  [306] ultoa_append::value#2 = phi( ultoa_append/ultoa_append::value#0, ultoa_append::@2/ultoa_append::value#1 )
  [307] if(ultoa_append::value#2>=ultoa_append::sub#0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  [308] *ultoa_append::buffer#0 = DIGITS[ultoa_append::digit#2]
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  [309] return 
  to:@return
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  [310] ultoa_append::digit#1 = ++ ultoa_append::digit#2
  [311] ultoa_append::value#1 = ultoa_append::value#2 - ultoa_append::sub#0
  to:ultoa_append::@1

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [312] memcpy::destination#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN, cscroll::@2/(void*)COLORRAM )
  [312] memcpy::source#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN+$28, cscroll::@2/(void*)COLORRAM+$28 )
  [313] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28
  [314] memcpy::src#4 = (byte*)memcpy::source#2
  [315] memcpy::dst#4 = (byte*)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [316] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [316] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [317] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [318] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [319] *memcpy::dst#2 = *memcpy::src#2
  [320] memcpy::dst#1 = ++ memcpy::dst#2
  [321] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [322] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [322] memset::str#3 = phi( cscroll::@3/(void*)DEFAULT_SCREEN+(word)$19*$28-$28, cscroll::@4/(void*)COLORRAM+(word)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [323] memset::end#0 = (byte*)memset::str#3 + $28
  [324] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [325] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [326] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [327] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [328] *memset::dst#2 = memset::c#4
  [329] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

byte toupper(byte toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  [330] if(toupper::ch#0<'a') goto toupper::@return
  to:toupper::@2
toupper::@2: scope:[toupper]  from toupper
  [331] if(toupper::ch#0<='z') goto toupper::@1
  to:toupper::@return
toupper::@1: scope:[toupper]  from toupper::@2
  [332] toupper::return#0 = toupper::ch#0 + 'A'-'a'
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper toupper::@1 toupper::@2
  [333] toupper::return#2 = phi( toupper::@1/toupper::return#0, toupper/toupper::ch#0, toupper::@2/toupper::ch#0 )
  [334] return 
  to:@return
