
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  bs[main::i#2] = main::i#2
  main::i#1 = main::i#2 + rangenext(0,$ff)
  main::$0 = main::i#1 != rangelast(0,$ff)
  if(main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  main::j#0 = $ff
  main::i1#0 = 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  main::i1#2 = phi( main::@2/main::i1#0, main::@3/main::i1#1 )
  main::j#2 = phi( main::@2/main::j#0, main::@3/main::j#1 )
  main::cs[main::i1#2] = bs[main::j#2]
  main::j#1 = -- main::j#2
  main::i1#1 = main::i1#2 + rangenext(0,$ff)
  main::$1 = main::i1#1 != rangelast(0,$ff)
  if(main::$1) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
constant byte* bs[$100]  = { fill( $100, 0) }
void main()
bool~ main::$0
bool~ main::$1
constant byte* main::cs[$100]  = { fill( $100, 0) }
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i1
byte main::i1#0
byte main::i1#1
byte main::i1#2
byte main::j
byte main::j#0
byte main::j#1
byte main::j#2

Simple Condition main::$0 [5] if(main::i#1!=rangelast(0,$ff)) goto main::@1
Simple Condition main::$1 [13] if(main::i1#1!=rangelast(0,$ff)) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Constant main::j#0 = $ff
Constant main::i1#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [3] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [5] if(main::i#1!=rangelast(0,$ff)) goto main::@1 to 0
Resolved ranged next value [11] main::i1#1 = ++ main::i1#2 to ++
Resolved ranged comparison value [13] if(main::i1#1!=rangelast(0,$ff)) goto main::@3 to 0
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 0 in [3] if(main::i#1!=0) goto main::@1
Adding number conversion cast (unumber) 0 in [8] if(main::i1#1!=0) goto main::@3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::i#0
Inlining constant with var siblings main::j#0
Inlining constant with var siblings main::i1#0
Constant inlined main::i#0 = 0
Constant inlined main::i1#0 = 0
Constant inlined main::j#0 = $ff
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $100
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting main::@4(between main::@1 and main::@1)
Added new block during phi lifting main::@5(between main::@3 and main::@3)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
CALL GRAPH

Created 3 initial phi equivalence classes
Coalesced [12] main::j#3 = main::j#1
Coalesced [13] main::i1#3 = main::i1#1
Coalesced [14] main::i#3 = main::i#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block label main::@2
Culled Empty Block label main::@5
Culled Empty Block label main::@4
Renumbering block main::@3 to main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::i#2 = phi( main/0, main::@1/main::i#1 )
  [2] bs[main::i#2] = main::i#2
  [3] main::i#1 = ++ main::i#2
  [4] if(main::i#1!=0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [5] main::i1#2 = phi( main::@1/0, main::@2/main::i1#1 )
  [5] main::j#2 = phi( main::@1/$ff, main::@2/main::j#1 )
  [6] main::cs[main::i1#2] = bs[main::j#2]
  [7] main::j#1 = -- main::j#2
  [8] main::i1#1 = ++ main::i1#2
  [9] if(main::i1#1!=0) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte main::i
byte main::i#1 16.5
byte main::i#2 22.0
byte main::i1
byte main::i1#1 16.5
byte main::i1#2 11.0
byte main::j
byte main::j#1 7.333333333333333
byte main::j#2 16.5

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
[ main::i1#2 main::i1#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
[ main::i1#2 main::i1#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::j#2 main::j#1 ]
Allocated zp[1]:4 [ main::i1#2 main::i1#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] main::cs[main::i1#2] = bs[main::j#2] [ main::j#2 main::i1#2 ] (  [ main::j#2 main::i1#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::j#2 main::j#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::i1#2 main::i1#1 ]
Statement [6] main::cs[main::i1#2] = bs[main::j#2] [ main::j#2 main::i1#2 ] (  [ main::j#2 main::i1#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::j#2 main::j#1 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::i1#2 main::i1#1 ] : zp[1]:4 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 38.5: zp[1]:2 [ main::i#2 main::i#1 ] 27.5: zp[1]:4 [ main::i1#2 main::i1#1 ] 23.83: zp[1]:3 [ main::j#2 main::j#1 ] 
Uplift Scope [] 

Uplifting [main] best 531 combination reg byte x [ main::i#2 main::i#1 ] reg byte y [ main::i1#2 main::i1#1 ] reg byte x [ main::j#2 main::j#1 ] 
Uplifting [] best 531 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test that memory alignment of arrays work
  // Upstart
  // Commodore 64 PRG executable file
.file [name="mem-alignment.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] bs[main::i#2] = main::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta bs,x
    // [3] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [4] if(main::i#1!=0) goto main::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1_from___b1
    // [5] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [5] phi main::i1#2 = 0 [phi:main::@1->main::@2#0] -- vbuyy=vbuc1 
    ldy #0
    // [5] phi main::j#2 = $ff [phi:main::@1->main::@2#1] -- vbuxx=vbuc1 
    ldx #$ff
    jmp __b2
    // [5] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  __b2_from___b2:
    // [5] phi main::i1#2 = main::i1#1 [phi:main::@2->main::@2#0] -- register_copy 
    // [5] phi main::j#2 = main::j#1 [phi:main::@2->main::@2#1] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [6] main::cs[main::i1#2] = bs[main::j#2] -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuxx 
    lda bs,x
    sta cs,y
    // [7] main::j#1 = -- main::j#2 -- vbuxx=_dec_vbuxx 
    dex
    // [8] main::i1#1 = ++ main::i1#2 -- vbuyy=_inc_vbuyy 
    iny
    // [9] if(main::i1#1!=0) goto main::@2 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b2_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
  .segment Data
    .align $100
    cs: .fill $100, 0
}
  // File Data
  .align $100
  bs: .fill $100, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b2_from___b2 with __b2
Removing instruction __b1_from___b1:
Removing instruction __b2_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2_from___b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
constant byte* bs[$100]  = { fill( $100, 0) }
void main()
constant byte* main::cs[$100]  = { fill( $100, 0) }
byte main::i
byte main::i#1 reg byte x 16.5
byte main::i#2 reg byte x 22.0
byte main::i1
byte main::i1#1 reg byte y 16.5
byte main::i1#2 reg byte y 11.0
byte main::j
byte main::j#1 reg byte x 7.333333333333333
byte main::j#2 reg byte x 16.5

reg byte x [ main::i#2 main::i#1 ]
reg byte x [ main::j#2 main::j#1 ]
reg byte y [ main::i1#2 main::i1#1 ]


FINAL ASSEMBLER
Score: 381

  // File Comments
// Test that memory alignment of arrays work
  // Upstart
  // Commodore 64 PRG executable file
.file [name="mem-alignment.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // bs[i] = i
    // [2] bs[main::i#2] = main::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta bs,x
    // for( byte i: 0..255)
    // [3] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [4] if(main::i#1!=0) goto main::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1
    // [5] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [5] phi main::i1#2 = 0 [phi:main::@1->main::@2#0] -- vbuyy=vbuc1 
    ldy #0
    // [5] phi main::j#2 = $ff [phi:main::@1->main::@2#1] -- vbuxx=vbuc1 
    ldx #$ff
    // [5] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
    // [5] phi main::i1#2 = main::i1#1 [phi:main::@2->main::@2#0] -- register_copy 
    // [5] phi main::j#2 = main::j#1 [phi:main::@2->main::@2#1] -- register_copy 
    // main::@2
  __b2:
    // cs[i] = bs[j--]
    // [6] main::cs[main::i1#2] = bs[main::j#2] -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuxx 
    lda bs,x
    sta cs,y
    // cs[i] = bs[j--];
    // [7] main::j#1 = -- main::j#2 -- vbuxx=_dec_vbuxx 
    dex
    // for( byte i: 0..255)
    // [8] main::i1#1 = ++ main::i1#2 -- vbuyy=_inc_vbuyy 
    iny
    // [9] if(main::i1#1!=0) goto main::@2 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b2
    // main::@return
    // }
    // [10] return 
    rts
  .segment Data
    .align $100
    cs: .fill $100, 0
}
  // File Data
  .align $100
  bs: .fill $100, 0

