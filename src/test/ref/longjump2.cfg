@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call long1 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call long2 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [8] return 
  to:@return
long2: scope:[long2]  from main::@1
  [9] phi()
  to:long2::@1
long2::@1: scope:[long2]  from long2 long2::@1
  [10] (byte) long2::i#2 ← phi( long2/(byte) 0 long2::@1/(byte) long2::i#1 )
  asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
  [12] *((const byte*) long2::SCREEN#0 + (byte) long2::i#2) ← (byte) long2::i#2
  [13] (byte) long2::i#1 ← ++ (byte) long2::i#2
  [14] if((byte) long2::i#1!=(byte) $b) goto long2::@1
  to:long2::@return
long2::@return: scope:[long2]  from long2::@1
  [15] return 
  to:@return
long1: scope:[long1]  from main
  [16] phi()
  to:long1::@1
long1::@1: scope:[long1]  from long1 long1::@1
  [17] (byte) long1::i#2 ← phi( long1/(byte) 0 long1::@1/(byte) long1::i#1 )
  asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
  [19] *((const byte*) long1::SCREEN#0 + (byte) long1::i#2) ← (byte) long1::i#2
  [20] (byte) long1::i#1 ← ++ (byte) long1::i#2
  [21] if((byte) long1::i#1!=(byte) $b) goto long1::@1
  to:long1::@return
long1::@return: scope:[long1]  from long1::@1
  [22] return 
  to:@return
