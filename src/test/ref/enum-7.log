Created struct value member variable (byte) main::button_color
Created struct value member variable (byte) main::button_size
Converted struct value to member variables (struct Button) main::button
Adding struct value list initializer (byte) main::button_color ← (const byte) RED
Adding struct value list initializer (byte) main::button_size ← (number) $18
Replacing struct member reference (struct Button) main::button.color with member variable reference (byte) main::button_color
Replacing struct member reference (struct Button) main::button.size with member variable reference (byte) main::button_size
Identified constant variable (byte) main::button_color
Identified constant variable (byte) main::button_size

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::button_color#0 ← (const byte) RED
  (byte) main::button_size#0 ← (number) $18
  (byte*) main::SCREEN#0 ← ((byte*)) (number) $400
  *((byte*) main::SCREEN#0 + (number) 0) ← (byte) main::button_color#0
  *((byte*) main::SCREEN#0 + (number) 1) ← (byte) main::button_size#0
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(byte) Button::color
(byte) Button::size
(const byte) Color::GREEN = (byte) 1
(const byte) Color::RED = (byte) 0
(const byte) RED = (byte) 0
(void()) main()
(label) main::@return
(byte*) main::SCREEN
(byte*) main::SCREEN#0
(byte) main::button_color
(byte) main::button_color#0
(byte) main::button_size
(byte) main::button_size#0

Adding number conversion cast (unumber) $18 in (byte) main::button_size#0 ← (number) $18
Adding number conversion cast (unumber) 0 in *((byte*) main::SCREEN#0 + (number) 0) ← (byte) main::button_color#0
Adding number conversion cast (unumber) 1 in *((byte*) main::SCREEN#0 + (number) 1) ← (byte) main::button_size#0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) main::button_size#0 ← (unumber)(number) $18
Inlining cast (byte*) main::SCREEN#0 ← (byte*)(number) $400
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast $18
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $18
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant (const byte) main::button_color#0 = RED
Constant (const byte) main::button_size#0 = $18
Constant (const byte*) main::SCREEN#0 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::SCREEN#0 in [3] *((const byte*) main::SCREEN#0 + (byte) 0) ← (const byte) main::button_color#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Constant inlined main::button_color#0 = (const byte) RED
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::SCREEN#0+1)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] *((const byte*) main::SCREEN#0) ← (const byte) RED
  [5] *((const byte*) main::SCREEN#0+(byte) 1) ← (const byte) main::button_size#0
  to:main::@return
main::@return: scope:[main]  from main
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) Button::color
(byte) Button::size
(void()) main()
(byte*) main::SCREEN
(byte) main::button_color
(byte) main::button_size

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic
  // File Comments
// Test of simple enum - struct with enum
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const RED = 0
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .const button_size = $18
    .label SCREEN = $400
    // [4] *((const byte*) main::SCREEN#0) ← (const byte) RED -- _deref_pbuc1=vbuc2 
    lda #RED
    sta SCREEN
    // [5] *((const byte*) main::SCREEN#0+(byte) 1) ← (const byte) main::button_size#0 -- _deref_pbuc1=vbuc2 
    lda #button_size
    sta SCREEN+1
    jmp breturn
    // main::@return
  breturn:
    // [6] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) main::SCREEN#0) ← (const byte) RED [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) main::SCREEN#0+(byte) 1) ← (const byte) main::button_size#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [Color] 
Uplift Scope [Button] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [Color] best 33 combination 
Uplifting [Button] best 33 combination 
Uplifting [main] best 33 combination 
Uplifting [] best 33 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test of simple enum - struct with enum
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const RED = 0
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .const button_size = $18
    .label SCREEN = $400
    // [4] *((const byte*) main::SCREEN#0) ← (const byte) RED -- _deref_pbuc1=vbuc2 
    lda #RED
    sta SCREEN
    // [5] *((const byte*) main::SCREEN#0+(byte) 1) ← (const byte) main::button_size#0 -- _deref_pbuc1=vbuc2 
    lda #button_size
    sta SCREEN+1
    jmp breturn
    // main::@return
  breturn:
    // [6] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte) Button::color
(byte) Button::size
(const byte) Color::GREEN GREEN = (byte) 1
(const byte) Color::RED RED = (byte) 0
(const byte) RED RED = (byte) 0
(void()) main()
(label) main::@return
(byte*) main::SCREEN
(const byte*) main::SCREEN#0 SCREEN = (byte*) 1024
(byte) main::button_color
(byte) main::button_size
(const byte) main::button_size#0 button_size = (byte) $18



FINAL ASSEMBLER
Score: 18

  // File Comments
// Test of simple enum - struct with enum
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const RED = 0
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .const button_size = $18
    .label SCREEN = $400
    // SCREEN[0] = button.color
    // [4] *((const byte*) main::SCREEN#0) ← (const byte) RED -- _deref_pbuc1=vbuc2 
    lda #RED
    sta SCREEN
    // SCREEN[1] = button.size
    // [5] *((const byte*) main::SCREEN#0+(byte) 1) ← (const byte) main::button_size#0 -- _deref_pbuc1=vbuc2 
    lda #button_size
    sta SCREEN+1
    // main::@return
    // }
    // [6] return 
    rts
}
  // File Data

