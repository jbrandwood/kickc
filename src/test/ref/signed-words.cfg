
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call init 
  to:main::@1
main::@1: scope:[main]  from main main::@1 main::@2
  [2] (signed word) yvel_init#15 ← phi( main::@1/(signed word) yvel_init#15 main/(signed word) $64 main::@2/(signed word) yvel_init#12 )
  [2] (signed word) xvel#14 ← phi( main::@1/(signed word) xvel#14 main/(signed word) $c8 main::@2/(signed word) xvel#11 )
  [2] (signed word) ypos#15 ← phi( main::@1/(signed word) ypos#15 main/(signed word) 0 main::@2/(signed word) ypos#12 )
  [2] (signed word) xpos#14 ← phi( main::@1/(signed word) xpos#14 main/(signed word) 0 main::@2/(signed word) xpos#11 )
  [2] (signed word) yvel#14 ← phi( main::@1/(signed word) yvel#14 main/(signed word) $64 main::@2/(signed word) yvel#11 )
  [3] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] phi()
  [5] call anim 
  to:main::@1

(void()) anim()
anim: scope:[anim]  from main::@2
  [6] if((signed word) ypos#15>=(signed byte) 0) goto anim::@1
  to:anim::@2
anim::@2: scope:[anim]  from anim
  [7] (signed word) xvel#16 ← - (signed word) xvel#14
  [8] (signed word) yvel_init#2 ← (signed word) yvel_init#15 - (signed byte) $a
  [9] if((signed word) yvel_init#2>=(signed word) -$c8) goto anim::@4
  to:anim::@3
anim::@4: scope:[anim]  from anim::@2
  [10] phi()
  to:anim::@3
anim::@3: scope:[anim]  from anim::@2 anim::@4
  [11] (signed word) yvel#3 ← phi( anim::@4/(signed word) yvel_init#2 anim::@2/(signed word) $c8 )
  [12] (signed word) yvel#23 ← (signed word) yvel#3
  to:anim::@1
anim::@1: scope:[anim]  from anim anim::@3
  [13] (signed word) yvel_init#12 ← phi( anim/(signed word) yvel_init#15 anim::@3/(signed word) yvel#3 )
  [13] (signed word) ypos#11 ← phi( anim/(signed word) ypos#15 anim::@3/(signed byte) 0 )
  [13] (signed word) xvel#11 ← phi( anim/(signed word) xvel#14 anim::@3/(signed word) xvel#16 )
  [13] (signed word) xpos#10 ← phi( anim/(signed word) xpos#14 anim::@3/(signed byte) 0 )
  [13] (signed word) yvel#10 ← phi( anim/(signed word) yvel#14 anim::@3/(signed word) yvel#23 )
  [14] (signed word) yvel#11 ← (signed word) yvel#10 + (const nomodify signed word) g
  [15] (signed word) xpos#11 ← (signed word) xpos#10 + (signed word) xvel#11
  [16] (signed word) ypos#12 ← (signed word) ypos#11 + (signed word) yvel#11
  [17] (signed word~) anim::$5 ← (signed word) xpos#11 >> (signed byte) 7
  [18] (signed word) anim::sprite_x#0 ← (signed word~) anim::$5 + (signed word) $a0
  [19] (signed word~) anim::$7 ← (signed word) ypos#12 >> (signed byte) 5
  [20] (signed word) anim::sprite_y#0 ← (signed word) $e6 - (signed word~) anim::$7
  [21] *((const nomodify byte*) SPRITES_XPOS) ← (byte)(signed word) anim::sprite_x#0
  [22] *((const nomodify byte*) SPRITES_YPOS) ← (byte)(signed word) anim::sprite_y#0
  [23] (byte~) anim::$9 ← > (signed word) anim::sprite_x#0
  [24] *((const nomodify byte*) SPRITES_XMSB) ← (byte~) anim::$9
  to:anim::@return
anim::@return: scope:[anim]  from anim::@1
  [25] return 
  to:@return

(void()) init()
init: scope:[init]  from main
  [26] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) 1
  [27] *((const nomodify byte*) SPRITES_EXPAND_X) ← (byte) 0
  [28] *((const nomodify byte*) SPRITES_EXPAND_Y) ← (byte) 0
  [29] *((const nomodify byte*) SPRITES_XPOS) ← (byte) $64
  [30] *((const nomodify byte*) SPRITES_YPOS) ← (byte) $64
  [31] *((const nomodify byte*) SPRITES_COLOR) ← (const nomodify byte) WHITE
  [32] *((const nomodify byte*) SPRITES_PTR) ← (byte)(const nomodify byte*) SPRITE/(byte) $40
  to:init::@1
init::@1: scope:[init]  from init init::@2
  [33] (byte*) init::sc#2 ← phi( init/(const nomodify byte*) SCREEN init::@2/(byte*) init::sc#1 )
  [34] if((byte*) init::sc#2!=(const nomodify byte*) SCREEN+(word) $3e8) goto init::@2
  to:init::@3
init::@3: scope:[init]  from init::@1 init::@3
  [35] (byte) init::i#2 ← phi( init::@1/(byte) 0 init::@3/(byte) init::i#1 )
  [36] *((const nomodify byte*) SPRITE + (byte) init::i#2) ← (byte) $ff
  [37] (byte) init::i#1 ← ++ (byte) init::i#2
  [38] if((byte) init::i#1!=(byte) $40) goto init::@3
  to:init::@return
init::@return: scope:[init]  from init::@3
  [39] return 
  to:@return
init::@2: scope:[init]  from init::@1
  [40] *((byte*) init::sc#2) ← (byte) ' '
  [41] (byte*) init::sc#1 ← ++ (byte*) init::sc#2
  to:init::@1
