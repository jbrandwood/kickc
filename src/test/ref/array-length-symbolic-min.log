Identified constant variable (byte) SZ
Culled Empty Block (label) main::@2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) SZ ← (number) $f
  (byte[SZ]) items ← { fill( SZ, 0) }
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte*) main::cur_item#0 ← (byte[SZ]) items
  (byte) main::sub#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte*) main::cur_item#1 ← phi( main/(byte*) main::cur_item#0 main::@1/(byte*) main::cur_item#1 )
  (byte) main::sub#2 ← phi( main/(byte) main::sub#0 main::@1/(byte) main::sub#1 )
  *((byte*) main::cur_item#1 + (byte) main::sub#2) ← (byte) main::sub#2
  (byte) main::sub#1 ← (byte) main::sub#2 + rangenext(0,SZ)
  (bool~) main::$0 ← (byte) main::sub#1 != rangelast(0,SZ)
  if((bool~) main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(byte) SZ
(byte[SZ]) items
(void()) main()
(bool~) main::$0
(label) main::@1
(label) main::@return
(byte*) main::cur_item
(byte*) main::cur_item#0
(byte*) main::cur_item#1
(byte) main::sub
(byte) main::sub#0
(byte) main::sub#1
(byte) main::sub#2

Adding number conversion cast (unumber) $f in (byte) SZ ← (number) $f
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) SZ ← (unumber)(number) $f
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast $f
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $f
Successful SSA optimization PassNFinalizeNumberTypeConversions
Identical Phi Values (byte*) main::cur_item#1 (byte*) main::cur_item#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$0 [8] if((byte) main::sub#1!=rangelast(0,SZ)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) SZ = $f
Constant (const byte) main::sub#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified { fill( SZ, 0) } in [1] (byte[SZ]) items ← { fill( SZ, 0) }
Successful SSA optimization Pass2ConstantValues
Resolved ranged next value [6] main::sub#1 ← ++ main::sub#2 to ++
Resolved ranged comparison value [8] if(main::sub#1!=rangelast(0,SZ)) goto main::@1 to (const byte) SZ+(number) 1
Adding number conversion cast (unumber) SZ+1 in if((byte) main::sub#1!=(const byte) SZ+(number) 1) goto main::@1
Adding number conversion cast (unumber) 1 in if((byte) main::sub#1!=(unumber)(const byte) SZ+(number) 1) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast (const byte) SZ+(unumber)(number) 1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant (const byte[SZ]) items = { fill( SZ, 0) }
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) main::cur_item#0 = items
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte) main::sub#0
Constant inlined main::sub#0 = (byte) 0
Constant inlined main::cur_item#0 = (const byte[SZ]) items
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@3(between main::@1 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 1 initial phi equivalence classes
Coalesced [11] main::sub#3 ← main::sub#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::sub#2 ← phi( main/(byte) 0 main::@1/(byte) main::sub#1 )
  [6] *((const byte[SZ]) items + (byte) main::sub#2) ← (byte) main::sub#2
  [7] (byte) main::sub#1 ← ++ (byte) main::sub#2
  [8] if((byte) main::sub#1!=(const byte) SZ+(byte) 1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [9] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte*) main::cur_item
(byte) main::sub
(byte) main::sub#1 16.5
(byte) main::sub#2 22.0

Initial phi equivalence classes
[ main::sub#2 main::sub#1 ]
Complete equivalence classes
[ main::sub#2 main::sub#1 ]
Allocated zp[1]:2 [ main::sub#2 main::sub#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Illustrates symbolic array lengths
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SZ = $f
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
// Fills the array item by item with $is, where i is the item# and s is the sub#
main: {
    .label sub = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::sub#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z sub
    jmp __b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [5] phi (byte) main::sub#2 = (byte) main::sub#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] *((const byte[SZ]) items + (byte) main::sub#2) ← (byte) main::sub#2 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy.z sub
    tya
    sta items,y
    // [7] (byte) main::sub#1 ← ++ (byte) main::sub#2 -- vbuz1=_inc_vbuz1 
    inc.z sub
    // [8] if((byte) main::sub#1!=(const byte) SZ+(byte) 1) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #SZ+1
    cmp.z sub
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data
  items: .fill SZ, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::sub#2 main::sub#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 38.5: zp[1]:2 [ main::sub#2 main::sub#1 ] 
Uplift Scope [] 

Uplifting [main] best 263 combination reg byte x [ main::sub#2 main::sub#1 ] 
Uplifting [] best 263 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Illustrates symbolic array lengths
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .const SZ = $f
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
// Fills the array item by item with $is, where i is the item# and s is the sub#
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::sub#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [5] phi (byte) main::sub#2 = (byte) main::sub#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] *((const byte[SZ]) items + (byte) main::sub#2) ← (byte) main::sub#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta items,x
    // [7] (byte) main::sub#1 ← ++ (byte) main::sub#2 -- vbuxx=_inc_vbuxx 
    inx
    // [8] if((byte) main::sub#1!=(const byte) SZ+(byte) 1) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #SZ+1
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data
  items: .fill SZ, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __bbegin with __b1
Replacing label __b1_from___b1 with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) SZ SZ = (byte) $f
(const byte[SZ]) items items = { fill( SZ, 0) }
(void()) main()
(label) main::@1
(label) main::@return
(byte*) main::cur_item
(byte) main::sub
(byte) main::sub#1 reg byte x 16.5
(byte) main::sub#2 reg byte x 22.0

reg byte x [ main::sub#2 main::sub#1 ]


FINAL ASSEMBLER
Score: 161

  // File Comments
// Illustrates symbolic array lengths
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SZ = $f
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
// Fills the array item by item with $is, where i is the item# and s is the sub#
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::sub#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [5] phi (byte) main::sub#2 = (byte) main::sub#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // cur_item[sub] = sub
    // [6] *((const byte[SZ]) items + (byte) main::sub#2) ← (byte) main::sub#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta items,x
    // for( byte sub: 0..SZ)
    // [7] (byte) main::sub#1 ← ++ (byte) main::sub#2 -- vbuxx=_inc_vbuxx 
    inx
    // [8] if((byte) main::sub#1!=(const byte) SZ+(byte) 1) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #SZ+1
    bne __b1
    // main::@return
    // }
    // [9] return 
    rts
}
  // File Data
  items: .fill SZ, 0

