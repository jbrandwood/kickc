
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::$0 = 0 * SIZEOF_WORD
  main::screen[main::$0] = main::w
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
constant byte SIZEOF_WORD = 2
void __start()
void main()
number~ main::$0
constant word* main::screen = (word*)$400
constant word main::w = 1w=2

Adding number conversion cast (unumber) 1 in 
Adding number conversion cast (unumber) 0 in main::$0 = 0 * SIZEOF_WORD
Adding number conversion cast (unumber) main::$0 in main::$0 = (unumber)0 * SIZEOF_WORD
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 1
Simplifying constant pointer cast (word*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$0 = 0 * SIZEOF_WORD
Constant right-side identified [0] main::$0 = 0 * SIZEOF_WORD
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$0 = 0*SIZEOF_WORD
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero 0*SIZEOF_WORD in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::screen in [1] main::screen[main::$0] = main::w
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant main::$0
Eliminating unused constant SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *main::screen = main::w
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *main::screen = main::w [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 21 combination 
Uplifting [] best 21 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests minimal inline word
  // Upstart
  // Commodore 64 PRG executable file
.file [name="inline-word-2.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .const w = 1*$100+2
    .label screen = $400
    // [0] *main::screen = main::w -- _deref_pwuc1=vwuc2 
    lda #<w
    sta screen
    lda #>w
    sta screen+1
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
constant word* main::screen = (word*) 1024
constant word main::w = 1w=2



FINAL ASSEMBLER
Score: 18

  // File Comments
// Tests minimal inline word
  // Upstart
  // Commodore 64 PRG executable file
.file [name="inline-word-2.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .const w = 1*$100+2
    .label screen = $400
    // screen[0] = w
    // [0] *main::screen = main::w -- _deref_pwuc1=vwuc2 
    lda #<w
    sta screen
    lda #>w
    sta screen+1
    // main::@return
    // }
    // [1] return 
    rts
}
  // File Data

