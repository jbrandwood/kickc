Resolved forward reference mulf_sqr1 to (byte*) mulf_sqr1
Resolved forward reference mulf_sqr2 to (byte*) mulf_sqr2
Resolved forward reference rotation_matrix to (signed byte[9]) rotation_matrix
Resolved forward reference rotation_matrix to (signed byte[9]) rotation_matrix
Resolved forward reference rotation_matrix to (signed byte[9]) rotation_matrix
Resolved forward reference rotation_matrix to (signed byte[9]) rotation_matrix
Resolved forward reference rotation_matrix to (signed byte[9]) rotation_matrix
Resolved forward reference rotation_matrix to (signed byte[9]) rotation_matrix
Resolved forward reference rotation_matrix to (signed byte[9]) rotation_matrix
Resolved forward reference rotation_matrix to (signed byte[9]) rotation_matrix
Resolved forward reference rotation_matrix to (signed byte[9]) rotation_matrix
Resolved forward reference SPRITE to (byte*) SPRITE
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference SINH to (signed byte*) SINH
Resolved forward reference SINH to (signed byte*) SINH
Resolved forward reference SINH to (signed byte*) SINH
Resolved forward reference SINH to (signed byte*) SINH
Resolved forward reference SINH to (signed byte*) SINH
Resolved forward reference SINH to (signed byte*) SINH
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference SINQ to (signed byte*) SINQ
Resolved forward reference SINQ to (signed byte*) SINQ
Resolved forward reference SINQ to (signed byte*) SINQ
Resolved forward reference SINQ to (signed byte*) SINQ
Resolved forward reference SINH to (signed byte*) SINH
Resolved forward reference SINH to (signed byte*) SINH
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference SINQ to (signed byte*) SINQ
Resolved forward reference SINQ to (signed byte*) SINQ
Resolved forward reference SINQ to (signed byte*) SINQ
Resolved forward reference SINQ to (signed byte*) SINQ
Resolved forward reference SINH to (signed byte*) SINH
Resolved forward reference SINH to (signed byte*) SINH
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSQ to (signed byte*) COSQ
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference COSH to (signed byte*) COSH
Resolved forward reference COSH_HI to (byte*) COSH_HI
Resolved forward reference COSH_LO to (byte*) COSH_LO
Resolved forward reference COSH_HI to (byte*) COSH_HI
Resolved forward reference COSH_LO to (byte*) COSH_LO
Resolved forward reference SINH_HI to (byte*) SINH_HI
Resolved forward reference SINH_LO to (byte*) SINH_LO
Resolved forward reference SINH_HI to (byte*) SINH_HI
Resolved forward reference SINH_LO to (byte*) SINH_LO
Resolved forward reference SINH_HI to (byte*) SINH_HI
Resolved forward reference SINH_LO to (byte*) SINH_LO
Resolved forward reference SINH_HI to (byte*) SINH_HI
Resolved forward reference SINH_LO to (byte*) SINH_LO
Resolved forward reference SINH_HI to (byte*) SINH_HI
Resolved forward reference SINH_LO to (byte*) SINH_LO
Resolved forward reference COSQ_HI to (byte*) COSQ_HI
Resolved forward reference COSH_LO to (byte*) COSH_LO
Resolved forward reference COSQ_HI to (byte*) COSQ_HI
Resolved forward reference COSH_LO to (byte*) COSH_LO
Resolved forward reference COSQ_HI to (byte*) COSQ_HI
Resolved forward reference COSH_LO to (byte*) COSH_LO
Resolved forward reference COSQ_HI to (byte*) COSQ_HI
Resolved forward reference COSH_LO to (byte*) COSH_LO
Resolved forward reference COSH_HI to (byte*) COSH_HI
Resolved forward reference COSH_LO to (byte*) COSH_LO
Resolved forward reference COSH_HI to (byte*) COSH_HI
Resolved forward reference COSH_LO to (byte*) COSH_LO
Resolved forward reference SINQ_HI to (byte*) SINQ_HI
Resolved forward reference SINH_LO to (byte*) SINH_LO
Resolved forward reference SINQ_HI to (byte*) SINQ_HI
Resolved forward reference SINH_LO to (byte*) SINH_LO
Resolved forward reference SINQ_HI to (byte*) SINQ_HI
Resolved forward reference SINH_LO to (byte*) SINH_LO
Resolved forward reference SINQ_HI to (byte*) SINQ_HI
Resolved forward reference SINH_LO to (byte*) SINH_LO
Resolved forward reference SINH_HI to (byte*) SINH_HI
Resolved forward reference SINH_LO to (byte*) SINH_LO
Resolved forward reference SINH_HI to (byte*) SINH_HI
Resolved forward reference SINH_LO to (byte*) SINH_LO
Resolved forward reference COSH_HI to (byte*) COSH_HI
Resolved forward reference COSH_LO to (byte*) COSH_LO
Resolved forward reference COSH_HI to (byte*) COSH_HI
Resolved forward reference COSH_LO to (byte*) COSH_LO
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SPRITES_XPOS#0 ← ((byte*)) (word/dword/signed dword) 53248
  (byte*) SPRITES_YPOS#0 ← ((byte*)) (word/dword/signed dword) 53249
  (byte*) RASTER#0 ← ((byte*)) (word/dword/signed dword) 53266
  (byte*) SPRITES_ENABLE#0 ← ((byte*)) (word/dword/signed dword) 53269
  (byte*) BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) 53280
  (byte*) SPRITES_COLS#0 ← ((byte*)) (word/dword/signed dword) 53287
  (byte) GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) LIGHT_BLUE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 14
  (byte) LIGHT_GREY#0 ← (byte/signed byte/word/signed word/dword/signed dword) 15
  to:@20
@20: scope:[]  from @begin
  (signed byte*) xr#0 ← ((signed byte*)) (byte/word/signed word/dword/signed dword) 240
  (signed byte*) yr#0 ← ((signed byte*)) (byte/word/signed word/dword/signed dword) 241
  (signed byte*) zr#0 ← ((signed byte*)) (byte/word/signed word/dword/signed dword) 242
  (signed byte*) pp#0 ← ((signed byte*)) (byte/word/signed word/dword/signed dword) 243
  (signed byte*) xp#0 ← ((signed byte*)) (byte/word/signed word/dword/signed dword) 244
  (signed byte*) yp#0 ← ((signed byte*)) (byte/word/signed word/dword/signed dword) 245
  (word*) psp1#0 ← ((word*)) (byte/word/signed word/dword/signed dword) 246
  (word*) psp2#0 ← ((word*)) (byte/word/signed word/dword/signed dword) 248
  to:@21
main: scope:[main]  from @30
  (signed byte*) yp#13 ← phi( @30/(signed byte*) yp#14 )
  (signed byte*) xp#13 ← phi( @30/(signed byte*) xp#14 )
  (signed byte*) pp#13 ← phi( @30/(signed byte*) pp#14 )
  (signed byte*) zr#14 ← phi( @30/(signed byte*) zr#15 )
  (signed byte*) yr#14 ← phi( @30/(signed byte*) yr#15 )
  (signed byte*) xr#14 ← phi( @30/(signed byte*) xr#15 )
  (signed byte*) SINQ#11 ← phi( @30/(signed byte*) SINQ#0 )
  (signed byte*) COSQ#11 ← phi( @30/(signed byte*) COSQ#0 )
  (signed byte*) SINH#11 ← phi( @30/(signed byte*) SINH#0 )
  (signed byte*) COSH#11 ← phi( @30/(signed byte*) COSH#0 )
  (signed byte) sz#10 ← phi( @30/(signed byte) sz#12 )
  (byte*) SPRITE#3 ← phi( @30/(byte*) SPRITE#0 )
  (signed byte) sy#17 ← phi( @30/(signed byte) sy#16 )
  (signed byte) sx#17 ← phi( @30/(signed byte) sx#16 )
  (word*) psp2#2 ← phi( @30/(word*) psp2#3 )
  (byte*) mulf_sqr2#2 ← phi( @30/(byte*) mulf_sqr2#0 )
  (word*) psp1#2 ← phi( @30/(word*) psp1#3 )
  (byte*) mulf_sqr1#2 ← phi( @30/(byte*) mulf_sqr1#0 )
  asm { sei  }
  call sprites_init 
  to:main::@1
main::@1: scope:[main]  from main
  (signed byte*) yp#12 ← phi( main/(signed byte*) yp#13 )
  (signed byte*) xp#12 ← phi( main/(signed byte*) xp#13 )
  (signed byte*) pp#12 ← phi( main/(signed byte*) pp#13 )
  (signed byte*) zr#13 ← phi( main/(signed byte*) zr#14 )
  (signed byte*) yr#13 ← phi( main/(signed byte*) yr#14 )
  (signed byte*) xr#13 ← phi( main/(signed byte*) xr#14 )
  (signed byte*) SINQ#9 ← phi( main/(signed byte*) SINQ#11 )
  (signed byte*) COSQ#9 ← phi( main/(signed byte*) COSQ#11 )
  (signed byte*) SINH#9 ← phi( main/(signed byte*) SINH#11 )
  (signed byte*) COSH#9 ← phi( main/(signed byte*) COSH#11 )
  (signed byte) sz#8 ← phi( main/(signed byte) sz#10 )
  (signed byte) sy#12 ← phi( main/(signed byte) sy#17 )
  (signed byte) sx#12 ← phi( main/(signed byte) sx#17 )
  (word*) psp2#1 ← phi( main/(word*) psp2#2 )
  (byte*) mulf_sqr2#1 ← phi( main/(byte*) mulf_sqr2#2 )
  (word*) psp1#1 ← phi( main/(word*) psp1#2 )
  (byte*) mulf_sqr1#1 ← phi( main/(byte*) mulf_sqr1#2 )
  (word~) main::$1 ← ((word)) (byte*) mulf_sqr1#1
  *((word*) psp1#1) ← (word~) main::$1
  (word~) main::$2 ← ((word)) (byte*) mulf_sqr2#1
  *((word*) psp2#1) ← (word~) main::$2
  call anim 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (signed byte) sy#6 ← phi( main::@1/(signed byte) sy#4 )
  (signed byte) sx#6 ← phi( main::@1/(signed byte) sx#4 )
  (signed byte) sx#0 ← (signed byte) sx#6
  (signed byte) sy#0 ← (signed byte) sy#6
  to:main::@return
main::@return: scope:[main]  from main::@2
  (signed byte) sy#7 ← phi( main::@2/(signed byte) sy#0 )
  (signed byte) sx#7 ← phi( main::@2/(signed byte) sx#0 )
  (signed byte) sx#1 ← (signed byte) sx#7
  (signed byte) sy#1 ← (signed byte) sy#7
  return 
  to:@return
@21: scope:[]  from @20
  (signed byte*) yp#16 ← phi( @20/(signed byte*) yp#0 )
  (signed byte*) xp#16 ← phi( @20/(signed byte*) xp#0 )
  (signed byte*) pp#16 ← phi( @20/(signed byte*) pp#0 )
  (signed byte*) zr#17 ← phi( @20/(signed byte*) zr#0 )
  (signed byte*) yr#17 ← phi( @20/(signed byte*) yr#0 )
  (signed byte*) xr#17 ← phi( @20/(signed byte*) xr#0 )
  (word*) psp2#5 ← phi( @20/(word*) psp2#0 )
  (word*) psp1#5 ← phi( @20/(word*) psp1#0 )
  (signed byte/signed word/signed dword~) $0 ← - (byte/signed byte/word/signed word/dword/signed dword) 52
  (signed byte/signed word/signed dword~) $1 ← - (byte/signed byte/word/signed word/dword/signed dword) 52
  (signed byte/signed word/signed dword~) $2 ← - (byte/signed byte/word/signed word/dword/signed dword) 52
  (signed byte[8]) xs#0 ← { (signed byte/signed word/signed dword~) $0, (signed byte/signed word/signed dword~) $1, (signed byte/signed word/signed dword~) $2, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 52, (byte/signed byte/word/signed word/dword/signed dword) 52, (byte/signed byte/word/signed word/dword/signed dword) 52 }
  (signed byte/signed word/signed dword~) $3 ← - (byte/signed byte/word/signed word/dword/signed dword) 52
  (signed byte/signed word/signed dword~) $4 ← - (byte/signed byte/word/signed word/dword/signed dword) 52
  (signed byte/signed word/signed dword~) $5 ← - (byte/signed byte/word/signed word/dword/signed dword) 52
  (signed byte[8]) ys#0 ← { (signed byte/signed word/signed dword~) $3, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 52, (signed byte/signed word/signed dword~) $4, (byte/signed byte/word/signed word/dword/signed dword) 52, (signed byte/signed word/signed dword~) $5, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 52 }
  (signed byte[8]) zs#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 52, (byte/signed byte/word/signed word/dword/signed dword) 52, (byte/signed byte/word/signed word/dword/signed dword) 52, (byte/signed byte/word/signed word/dword/signed dword) 52, (byte/signed byte/word/signed word/dword/signed dword) 52, (byte/signed byte/word/signed word/dword/signed dword) 52, (byte/signed byte/word/signed word/dword/signed dword) 52, (byte/signed byte/word/signed word/dword/signed dword) 52 }
  (signed byte[8]) xrs#0 ← { fill( 8, 0) }
  (signed byte[8]) yrs#0 ← { fill( 8, 0) }
  (signed byte[8]) zrs#0 ← { fill( 8, 0) }
  (signed byte[8]) pps#0 ← { fill( 8, 0) }
  (signed byte[8]) xps#0 ← { fill( 8, 0) }
  (signed byte[8]) yps#0 ← { fill( 8, 0) }
  (signed byte) sx#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (signed byte) sy#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (signed byte) sz#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@25
anim: scope:[anim]  from main::@1
  (signed byte*) yp#10 ← phi( main::@1/(signed byte*) yp#12 )
  (signed byte*) xp#10 ← phi( main::@1/(signed byte*) xp#12 )
  (signed byte*) pp#10 ← phi( main::@1/(signed byte*) pp#12 )
  (signed byte*) zr#11 ← phi( main::@1/(signed byte*) zr#13 )
  (signed byte*) yr#11 ← phi( main::@1/(signed byte*) yr#13 )
  (signed byte*) xr#11 ← phi( main::@1/(signed byte*) xr#13 )
  (signed byte*) SINQ#7 ← phi( main::@1/(signed byte*) SINQ#9 )
  (signed byte*) COSQ#7 ← phi( main::@1/(signed byte*) COSQ#9 )
  (signed byte*) SINH#7 ← phi( main::@1/(signed byte*) SINH#9 )
  (signed byte*) COSH#7 ← phi( main::@1/(signed byte*) COSH#9 )
  (signed byte) sz#6 ← phi( main::@1/(signed byte) sz#8 )
  (signed byte) sy#18 ← phi( main::@1/(signed byte) sy#12 )
  (signed byte) sx#18 ← phi( main::@1/(signed byte) sx#12 )
  to:anim::@1
anim::@1: scope:[anim]  from anim anim::@13
  (signed byte*) yp#9 ← phi( anim/(signed byte*) yp#10 anim::@13/(signed byte*) yp#11 )
  (signed byte*) xp#9 ← phi( anim/(signed byte*) xp#10 anim::@13/(signed byte*) xp#11 )
  (signed byte*) pp#9 ← phi( anim/(signed byte*) pp#10 anim::@13/(signed byte*) pp#11 )
  (signed byte*) zr#10 ← phi( anim/(signed byte*) zr#11 anim::@13/(signed byte*) zr#12 )
  (signed byte*) yr#10 ← phi( anim/(signed byte*) yr#11 anim::@13/(signed byte*) yr#12 )
  (signed byte*) xr#10 ← phi( anim/(signed byte*) xr#11 anim::@13/(signed byte*) xr#12 )
  (signed byte*) SINQ#6 ← phi( anim/(signed byte*) SINQ#7 anim::@13/(signed byte*) SINQ#8 )
  (signed byte*) COSQ#6 ← phi( anim/(signed byte*) COSQ#7 anim::@13/(signed byte*) COSQ#8 )
  (signed byte*) SINH#6 ← phi( anim/(signed byte*) SINH#7 anim::@13/(signed byte*) SINH#8 )
  (signed byte*) COSH#6 ← phi( anim/(signed byte*) COSH#7 anim::@13/(signed byte*) COSH#8 )
  (signed byte) sz#5 ← phi( anim/(signed byte) sz#6 anim::@13/(signed byte) sz#7 )
  (signed byte) sy#15 ← phi( anim/(signed byte) sy#18 anim::@13/(signed byte) sy#3 )
  (signed byte) sx#15 ← phi( anim/(signed byte) sx#18 anim::@13/(signed byte) sx#3 )
  if(true) goto anim::@2
  to:anim::@return
anim::@2: scope:[anim]  from anim::@1
  (signed byte*) yp#7 ← phi( anim::@1/(signed byte*) yp#9 )
  (signed byte*) xp#7 ← phi( anim::@1/(signed byte*) xp#9 )
  (signed byte*) pp#7 ← phi( anim::@1/(signed byte*) pp#9 )
  (signed byte*) zr#8 ← phi( anim::@1/(signed byte*) zr#10 )
  (signed byte*) yr#8 ← phi( anim::@1/(signed byte*) yr#10 )
  (signed byte*) xr#8 ← phi( anim::@1/(signed byte*) xr#10 )
  (signed byte*) SINQ#4 ← phi( anim::@1/(signed byte*) SINQ#6 )
  (signed byte*) COSQ#4 ← phi( anim::@1/(signed byte*) COSQ#6 )
  (signed byte*) SINH#4 ← phi( anim::@1/(signed byte*) SINH#6 )
  (signed byte*) COSH#4 ← phi( anim::@1/(signed byte*) COSH#6 )
  (signed byte) sz#3 ← phi( anim::@1/(signed byte) sz#5 )
  (signed byte) sy#19 ← phi( anim::@1/(signed byte) sy#15 )
  (signed byte) sx#19 ← phi( anim::@1/(signed byte) sx#15 )
  to:anim::@4
anim::@4: scope:[anim]  from anim::@2 anim::@5
  (signed byte*) yp#6 ← phi( anim::@2/(signed byte*) yp#7 anim::@5/(signed byte*) yp#8 )
  (signed byte*) xp#6 ← phi( anim::@2/(signed byte*) xp#7 anim::@5/(signed byte*) xp#8 )
  (signed byte*) pp#6 ← phi( anim::@2/(signed byte*) pp#7 anim::@5/(signed byte*) pp#8 )
  (signed byte*) zr#7 ← phi( anim::@2/(signed byte*) zr#8 anim::@5/(signed byte*) zr#9 )
  (signed byte*) yr#7 ← phi( anim::@2/(signed byte*) yr#8 anim::@5/(signed byte*) yr#9 )
  (signed byte*) xr#7 ← phi( anim::@2/(signed byte*) xr#8 anim::@5/(signed byte*) xr#9 )
  (signed byte*) SINQ#3 ← phi( anim::@2/(signed byte*) SINQ#4 anim::@5/(signed byte*) SINQ#5 )
  (signed byte*) COSQ#3 ← phi( anim::@2/(signed byte*) COSQ#4 anim::@5/(signed byte*) COSQ#5 )
  (signed byte*) SINH#3 ← phi( anim::@2/(signed byte*) SINH#4 anim::@5/(signed byte*) SINH#5 )
  (signed byte*) COSH#3 ← phi( anim::@2/(signed byte*) COSH#4 anim::@5/(signed byte*) COSH#5 )
  (signed byte) sz#2 ← phi( anim::@2/(signed byte) sz#3 anim::@5/(signed byte) sz#4 )
  (signed byte) sy#13 ← phi( anim::@2/(signed byte) sy#19 anim::@5/(signed byte) sy#20 )
  (signed byte) sx#13 ← phi( anim::@2/(signed byte) sx#19 anim::@5/(signed byte) sx#20 )
  (bool~) anim::$0 ← *((byte*) RASTER#0) != (byte/word/signed word/dword/signed dword) 255
  if((bool~) anim::$0) goto anim::@5
  to:anim::@6
anim::@5: scope:[anim]  from anim::@4
  (signed byte*) yp#8 ← phi( anim::@4/(signed byte*) yp#6 )
  (signed byte*) xp#8 ← phi( anim::@4/(signed byte*) xp#6 )
  (signed byte*) pp#8 ← phi( anim::@4/(signed byte*) pp#6 )
  (signed byte*) zr#9 ← phi( anim::@4/(signed byte*) zr#7 )
  (signed byte*) yr#9 ← phi( anim::@4/(signed byte*) yr#7 )
  (signed byte*) xr#9 ← phi( anim::@4/(signed byte*) xr#7 )
  (signed byte*) SINQ#5 ← phi( anim::@4/(signed byte*) SINQ#3 )
  (signed byte*) COSQ#5 ← phi( anim::@4/(signed byte*) COSQ#3 )
  (signed byte*) SINH#5 ← phi( anim::@4/(signed byte*) SINH#3 )
  (signed byte*) COSH#5 ← phi( anim::@4/(signed byte*) COSH#3 )
  (signed byte) sz#4 ← phi( anim::@4/(signed byte) sz#2 )
  (signed byte) sy#20 ← phi( anim::@4/(signed byte) sy#13 )
  (signed byte) sx#20 ← phi( anim::@4/(signed byte) sx#13 )
  to:anim::@4
anim::@6: scope:[anim]  from anim::@4
  (signed byte*) yp#5 ← phi( anim::@4/(signed byte*) yp#6 )
  (signed byte*) xp#5 ← phi( anim::@4/(signed byte*) xp#6 )
  (signed byte*) pp#5 ← phi( anim::@4/(signed byte*) pp#6 )
  (signed byte*) zr#6 ← phi( anim::@4/(signed byte*) zr#7 )
  (signed byte*) yr#6 ← phi( anim::@4/(signed byte*) yr#7 )
  (signed byte*) xr#6 ← phi( anim::@4/(signed byte*) xr#7 )
  (signed byte*) SINQ#2 ← phi( anim::@4/(signed byte*) SINQ#3 )
  (signed byte*) COSQ#2 ← phi( anim::@4/(signed byte*) COSQ#3 )
  (signed byte*) SINH#2 ← phi( anim::@4/(signed byte*) SINH#3 )
  (signed byte*) COSH#2 ← phi( anim::@4/(signed byte*) COSH#3 )
  (signed byte) sz#1 ← phi( anim::@4/(signed byte) sz#2 )
  (signed byte) sy#8 ← phi( anim::@4/(signed byte) sy#13 )
  (signed byte) sx#8 ← phi( anim::@4/(signed byte) sx#13 )
  *((byte*) BORDERCOL#0) ← ++ *((byte*) BORDERCOL#0)
  (signed byte) calculate_matrix::sx#0 ← (signed byte) sx#8
  (signed byte) calculate_matrix::sy#0 ← (signed byte) sy#8
  (signed byte) calculate_matrix::sz#0 ← (signed byte) sz#1
  call calculate_matrix 
  to:anim::@15
anim::@15: scope:[anim]  from anim::@6
  (signed byte*) SINQ#14 ← phi( anim::@6/(signed byte*) SINQ#2 )
  (signed byte*) COSQ#14 ← phi( anim::@6/(signed byte*) COSQ#2 )
  (signed byte*) SINH#14 ← phi( anim::@6/(signed byte*) SINH#2 )
  (signed byte*) COSH#14 ← phi( anim::@6/(signed byte*) COSH#2 )
  (signed byte) sz#14 ← phi( anim::@6/(signed byte) sz#1 )
  (signed byte) sy#24 ← phi( anim::@6/(signed byte) sy#8 )
  (signed byte) sx#24 ← phi( anim::@6/(signed byte) sx#8 )
  (signed byte*) yp#4 ← phi( anim::@6/(signed byte*) yp#5 )
  (signed byte*) xp#4 ← phi( anim::@6/(signed byte*) xp#5 )
  (signed byte*) pp#4 ← phi( anim::@6/(signed byte*) pp#5 )
  (signed byte*) zr#5 ← phi( anim::@6/(signed byte*) zr#6 )
  (signed byte*) yr#5 ← phi( anim::@6/(signed byte*) yr#6 )
  (signed byte*) xr#5 ← phi( anim::@6/(signed byte*) xr#6 )
  call store_matrix 
  to:anim::@16
anim::@16: scope:[anim]  from anim::@15
  (signed byte*) SINQ#13 ← phi( anim::@15/(signed byte*) SINQ#14 )
  (signed byte*) COSQ#13 ← phi( anim::@15/(signed byte*) COSQ#14 )
  (signed byte*) SINH#13 ← phi( anim::@15/(signed byte*) SINH#14 )
  (signed byte*) COSH#13 ← phi( anim::@15/(signed byte*) COSH#14 )
  (signed byte) sz#13 ← phi( anim::@15/(signed byte) sz#14 )
  (signed byte) sy#23 ← phi( anim::@15/(signed byte) sy#24 )
  (signed byte) sx#23 ← phi( anim::@15/(signed byte) sx#24 )
  (signed byte*) yp#3 ← phi( anim::@15/(signed byte*) yp#4 )
  (signed byte*) xp#3 ← phi( anim::@15/(signed byte*) xp#4 )
  (signed byte*) pp#3 ← phi( anim::@15/(signed byte*) pp#4 )
  (signed byte*) zr#4 ← phi( anim::@15/(signed byte*) zr#5 )
  (signed byte*) yr#4 ← phi( anim::@15/(signed byte*) yr#5 )
  (signed byte*) xr#4 ← phi( anim::@15/(signed byte*) xr#5 )
  (byte) anim::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:anim::@7
anim::@7: scope:[anim]  from anim::@16 anim::@17
  (signed byte*) SINQ#12 ← phi( anim::@16/(signed byte*) SINQ#13 anim::@17/(signed byte*) SINQ#10 )
  (signed byte*) COSQ#12 ← phi( anim::@16/(signed byte*) COSQ#13 anim::@17/(signed byte*) COSQ#10 )
  (signed byte*) SINH#12 ← phi( anim::@16/(signed byte*) SINH#13 anim::@17/(signed byte*) SINH#10 )
  (signed byte*) COSH#12 ← phi( anim::@16/(signed byte*) COSH#13 anim::@17/(signed byte*) COSH#10 )
  (signed byte) sz#11 ← phi( anim::@16/(signed byte) sz#13 anim::@17/(signed byte) sz#9 )
  (signed byte) sy#21 ← phi( anim::@16/(signed byte) sy#23 anim::@17/(signed byte) sy#14 )
  (signed byte) sx#21 ← phi( anim::@16/(signed byte) sx#23 anim::@17/(signed byte) sx#14 )
  (signed byte*) yp#2 ← phi( anim::@16/(signed byte*) yp#3 anim::@17/(signed byte*) yp#1 )
  (signed byte*) xp#2 ← phi( anim::@16/(signed byte*) xp#3 anim::@17/(signed byte*) xp#1 )
  (signed byte*) pp#2 ← phi( anim::@16/(signed byte*) pp#3 anim::@17/(signed byte*) pp#1 )
  (signed byte*) zr#3 ← phi( anim::@16/(signed byte*) zr#4 anim::@17/(signed byte*) zr#1 )
  (signed byte*) yr#3 ← phi( anim::@16/(signed byte*) yr#4 anim::@17/(signed byte*) yr#1 )
  (signed byte*) xr#3 ← phi( anim::@16/(signed byte*) xr#4 anim::@17/(signed byte*) xr#1 )
  (byte) anim::i#2 ← phi( anim::@16/(byte) anim::i#0 anim::@17/(byte) anim::i#1 )
  *((byte*) BORDERCOL#0) ← ++ *((byte*) BORDERCOL#0)
  (signed byte) rotate_matrix::x#0 ← *((signed byte[8]) xs#0 + (byte) anim::i#2)
  (signed byte) rotate_matrix::y#0 ← *((signed byte[8]) ys#0 + (byte) anim::i#2)
  (signed byte) rotate_matrix::z#0 ← *((signed byte[8]) zs#0 + (byte) anim::i#2)
  call rotate_matrix 
  to:anim::@17
anim::@17: scope:[anim]  from anim::@7
  (signed byte*) SINQ#10 ← phi( anim::@7/(signed byte*) SINQ#12 )
  (signed byte*) COSQ#10 ← phi( anim::@7/(signed byte*) COSQ#12 )
  (signed byte*) SINH#10 ← phi( anim::@7/(signed byte*) SINH#12 )
  (signed byte*) COSH#10 ← phi( anim::@7/(signed byte*) COSH#12 )
  (signed byte) sz#9 ← phi( anim::@7/(signed byte) sz#11 )
  (signed byte) sy#14 ← phi( anim::@7/(signed byte) sy#21 )
  (signed byte) sx#14 ← phi( anim::@7/(signed byte) sx#21 )
  (signed byte*) yp#1 ← phi( anim::@7/(signed byte*) yp#2 )
  (signed byte*) xp#1 ← phi( anim::@7/(signed byte*) xp#2 )
  (signed byte*) pp#1 ← phi( anim::@7/(signed byte*) pp#2 )
  (signed byte*) zr#1 ← phi( anim::@7/(signed byte*) zr#3 )
  (signed byte*) yr#1 ← phi( anim::@7/(signed byte*) yr#3 )
  (byte) anim::i#3 ← phi( anim::@7/(byte) anim::i#2 )
  (signed byte*) xr#1 ← phi( anim::@7/(signed byte*) xr#3 )
  *((signed byte[8]) xrs#0 + (byte) anim::i#3) ← *((signed byte*) xr#1)
  *((signed byte[8]) yrs#0 + (byte) anim::i#3) ← *((signed byte*) yr#1)
  *((signed byte[8]) zrs#0 + (byte) anim::i#3) ← *((signed byte*) zr#1)
  *((signed byte[8]) pps#0 + (byte) anim::i#3) ← *((signed byte*) pp#1)
  *((signed byte[8]) xps#0 + (byte) anim::i#3) ← *((signed byte*) xp#1)
  *((signed byte[8]) yps#0 + (byte) anim::i#3) ← *((signed byte*) yp#1)
  (byte~) anim::$4 ← (byte) anim::i#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) anim::i2#0 ← (byte~) anim::$4
  (byte~) anim::$5 ← ((byte)) *((signed byte*) xp#1)
  (byte/word/signed word/dword/signed dword~) anim::$6 ← (byte/word/signed word/dword/signed dword) 128 + (byte~) anim::$5
  *((byte*) SPRITES_XPOS#0 + (byte) anim::i2#0) ← (byte/word/signed word/dword/signed dword~) anim::$6
  (byte~) anim::$7 ← ((byte)) *((signed byte*) yp#1)
  (byte/word/signed word/dword/signed dword~) anim::$8 ← (byte/word/signed word/dword/signed dword) 128 + (byte~) anim::$7
  *((byte*) SPRITES_YPOS#0 + (byte) anim::i2#0) ← (byte/word/signed word/dword/signed dword~) anim::$8
  (byte) anim::i#1 ← (byte) anim::i#3 + rangenext(0,7)
  (bool~) anim::$9 ← (byte) anim::i#1 != rangelast(0,7)
  if((bool~) anim::$9) goto anim::@7
  to:anim::@13
anim::@13: scope:[anim]  from anim::@17
  (signed byte*) yp#11 ← phi( anim::@17/(signed byte*) yp#1 )
  (signed byte*) xp#11 ← phi( anim::@17/(signed byte*) xp#1 )
  (signed byte*) pp#11 ← phi( anim::@17/(signed byte*) pp#1 )
  (signed byte*) zr#12 ← phi( anim::@17/(signed byte*) zr#1 )
  (signed byte*) yr#12 ← phi( anim::@17/(signed byte*) yr#1 )
  (signed byte*) xr#12 ← phi( anim::@17/(signed byte*) xr#1 )
  (signed byte*) SINQ#8 ← phi( anim::@17/(signed byte*) SINQ#10 )
  (signed byte*) COSQ#8 ← phi( anim::@17/(signed byte*) COSQ#10 )
  (signed byte*) SINH#8 ← phi( anim::@17/(signed byte*) SINH#10 )
  (signed byte*) COSH#8 ← phi( anim::@17/(signed byte*) COSH#10 )
  (signed byte) sz#7 ← phi( anim::@17/(signed byte) sz#9 )
  (signed byte) sy#9 ← phi( anim::@17/(signed byte) sy#14 )
  (signed byte) sx#9 ← phi( anim::@17/(signed byte) sx#14 )
  *((byte*) BORDERCOL#0) ← (byte) LIGHT_GREY#0
  *((byte*) BORDERCOL#0) ← (byte) LIGHT_BLUE#0
  (signed byte) sx#3 ← (signed byte) sx#9 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (signed byte) sy#3 ← (signed byte) sy#9 - (byte/signed byte/word/signed word/dword/signed dword) 3
  to:anim::@1
anim::@return: scope:[anim]  from anim::@1
  (signed byte) sy#10 ← phi( anim::@1/(signed byte) sy#15 )
  (signed byte) sx#10 ← phi( anim::@1/(signed byte) sx#15 )
  (signed byte) sx#4 ← (signed byte) sx#10
  (signed byte) sy#4 ← (signed byte) sy#10
  return 
  to:@return
sprites_init: scope:[sprites_init]  from main
  (byte*) SPRITE#2 ← phi( main/(byte*) SPRITE#3 )
  (byte*) sprites_init::SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  *((byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255
  (byte*~) sprites_init::$0 ← (byte*) sprites_init::SCREEN#0 + (word/signed word/dword/signed dword) 1016
  (byte*) sprites_init::sprites_ptr#0 ← (byte*~) sprites_init::$0
  (byte) sprites_init::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:sprites_init::@1
sprites_init::@1: scope:[sprites_init]  from sprites_init sprites_init::@1
  (byte) sprites_init::i#2 ← phi( sprites_init/(byte) sprites_init::i#0 sprites_init::@1/(byte) sprites_init::i#1 )
  (byte*) sprites_init::sprites_ptr#1 ← phi( sprites_init/(byte*) sprites_init::sprites_ptr#0 sprites_init::@1/(byte*) sprites_init::sprites_ptr#1 )
  (byte*) SPRITE#1 ← phi( sprites_init/(byte*) SPRITE#2 sprites_init::@1/(byte*) SPRITE#1 )
  (byte*~) sprites_init::$1 ← (byte*) SPRITE#1 / (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte~) sprites_init::$2 ← ((byte)) (byte*~) sprites_init::$1
  *((byte*) sprites_init::sprites_ptr#1 + (byte) sprites_init::i#2) ← (byte~) sprites_init::$2
  *((byte*) SPRITES_COLS#0 + (byte) sprites_init::i#2) ← (byte) GREEN#0
  (byte) sprites_init::i#1 ← (byte) sprites_init::i#2 + rangenext(0,7)
  (bool~) sprites_init::$3 ← (byte) sprites_init::i#1 != rangelast(0,7)
  if((bool~) sprites_init::$3) goto sprites_init::@1
  to:sprites_init::@return
sprites_init::@return: scope:[sprites_init]  from sprites_init::@1
  return 
  to:@return
@25: scope:[]  from @21
  (signed byte*) yp#15 ← phi( @21/(signed byte*) yp#16 )
  (signed byte*) xp#15 ← phi( @21/(signed byte*) xp#16 )
  (signed byte*) pp#15 ← phi( @21/(signed byte*) pp#16 )
  (signed byte*) zr#16 ← phi( @21/(signed byte*) zr#17 )
  (signed byte*) yr#16 ← phi( @21/(signed byte*) yr#17 )
  (signed byte*) xr#16 ← phi( @21/(signed byte*) xr#17 )
  (signed byte) sz#15 ← phi( @21/(signed byte) sz#0 )
  (word*) psp2#4 ← phi( @21/(word*) psp2#5 )
  (word*) psp1#4 ← phi( @21/(word*) psp1#5 )
  (signed byte) sy#22 ← phi( @21/(signed byte) sy#2 )
  (signed byte) sx#22 ← phi( @21/(signed byte) sx#2 )
  (signed byte[9]) rotation_matrix#0 ← { fill( 9, 0) }
  to:@30
calculate_matrix: scope:[calculate_matrix]  from anim::@6
  (signed byte*) SINQ#1 ← phi( anim::@6/(signed byte*) SINQ#2 )
  (signed byte*) COSQ#1 ← phi( anim::@6/(signed byte*) COSQ#2 )
  (signed byte*) SINH#1 ← phi( anim::@6/(signed byte*) SINH#2 )
  (signed byte*) COSH#1 ← phi( anim::@6/(signed byte*) COSH#2 )
  (signed byte) calculate_matrix::sx#1 ← phi( anim::@6/(signed byte) calculate_matrix::sx#0 )
  (signed byte) calculate_matrix::sz#1 ← phi( anim::@6/(signed byte) calculate_matrix::sz#0 )
  (signed byte) calculate_matrix::sy#1 ← phi( anim::@6/(signed byte) calculate_matrix::sy#0 )
  (signed byte~) calculate_matrix::$0 ← (signed byte) calculate_matrix::sy#1 - (signed byte) calculate_matrix::sz#1
  (signed byte) calculate_matrix::t1#0 ← (signed byte~) calculate_matrix::$0
  (signed byte~) calculate_matrix::$1 ← (signed byte) calculate_matrix::sy#1 + (signed byte) calculate_matrix::sz#1
  (signed byte) calculate_matrix::t2#0 ← (signed byte~) calculate_matrix::$1
  (signed byte~) calculate_matrix::$2 ← (signed byte) calculate_matrix::sx#1 + (signed byte) calculate_matrix::sz#1
  (signed byte) calculate_matrix::t3#0 ← (signed byte~) calculate_matrix::$2
  (signed byte~) calculate_matrix::$3 ← (signed byte) calculate_matrix::sx#1 - (signed byte) calculate_matrix::sz#1
  (signed byte) calculate_matrix::t4#0 ← (signed byte~) calculate_matrix::$3
  (signed byte~) calculate_matrix::$4 ← (signed byte) calculate_matrix::sx#1 + (signed byte) calculate_matrix::t2#0
  (signed byte) calculate_matrix::t5#0 ← (signed byte~) calculate_matrix::$4
  (signed byte~) calculate_matrix::$5 ← (signed byte) calculate_matrix::sx#1 - (signed byte) calculate_matrix::t1#0
  (signed byte) calculate_matrix::t6#0 ← (signed byte~) calculate_matrix::$5
  (signed byte~) calculate_matrix::$6 ← (signed byte) calculate_matrix::sx#1 + (signed byte) calculate_matrix::t1#0
  (signed byte) calculate_matrix::t7#0 ← (signed byte~) calculate_matrix::$6
  (signed byte~) calculate_matrix::$7 ← (signed byte) calculate_matrix::t2#0 - (signed byte) calculate_matrix::sx#1
  (signed byte) calculate_matrix::t8#0 ← (signed byte~) calculate_matrix::$7
  (signed byte~) calculate_matrix::$8 ← (signed byte) calculate_matrix::sy#1 - (signed byte) calculate_matrix::sx#1
  (signed byte) calculate_matrix::t9#0 ← (signed byte~) calculate_matrix::$8
  (signed byte~) calculate_matrix::$9 ← (signed byte) calculate_matrix::sy#1 + (signed byte) calculate_matrix::sx#1
  (signed byte) calculate_matrix::t10#0 ← (signed byte~) calculate_matrix::$9
  (signed byte~) calculate_matrix::$10 ← *((signed byte*) COSH#1 + (signed byte) calculate_matrix::t1#0) + *((signed byte*) COSH#1 + (signed byte) calculate_matrix::t2#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (signed byte~) calculate_matrix::$10
  (signed byte~) calculate_matrix::$11 ← *((signed byte*) SINH#1 + (signed byte) calculate_matrix::t1#0) - *((signed byte*) SINH#1 + (signed byte) calculate_matrix::t2#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 1) ← (signed byte~) calculate_matrix::$11
  (signed byte~) calculate_matrix::$12 ← *((signed byte*) SINH#1 + (signed byte) calculate_matrix::sy#1) + *((signed byte*) SINH#1 + (signed byte) calculate_matrix::sy#1)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 2) ← (signed byte~) calculate_matrix::$12
  (signed byte~) calculate_matrix::$13 ← *((signed byte*) SINH#1 + (signed byte) calculate_matrix::t3#0) - *((signed byte*) SINH#1 + (signed byte) calculate_matrix::t4#0)
  (signed byte~) calculate_matrix::$14 ← (signed byte~) calculate_matrix::$13 + *((signed byte*) COSQ#1 + (signed byte) calculate_matrix::t6#0)
  (signed byte~) calculate_matrix::$15 ← (signed byte~) calculate_matrix::$14 - *((signed byte*) COSQ#1 + (signed byte) calculate_matrix::t5#0)
  (signed byte~) calculate_matrix::$16 ← (signed byte~) calculate_matrix::$15 + *((signed byte*) COSQ#1 + (signed byte) calculate_matrix::t8#0)
  (signed byte~) calculate_matrix::$17 ← (signed byte~) calculate_matrix::$16 - *((signed byte*) COSQ#1 + (signed byte) calculate_matrix::t7#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) ← (signed byte~) calculate_matrix::$17
  (signed byte~) calculate_matrix::$18 ← *((signed byte*) COSH#1 + (signed byte) calculate_matrix::t3#0) + *((signed byte*) COSH#1 + (signed byte) calculate_matrix::t4#0)
  (signed byte~) calculate_matrix::$19 ← (signed byte~) calculate_matrix::$18 + *((signed byte*) SINQ#1 + (signed byte) calculate_matrix::t5#0)
  (signed byte~) calculate_matrix::$20 ← (signed byte~) calculate_matrix::$19 - *((signed byte*) SINQ#1 + (signed byte) calculate_matrix::t6#0)
  (signed byte~) calculate_matrix::$21 ← (signed byte~) calculate_matrix::$20 - *((signed byte*) SINQ#1 + (signed byte) calculate_matrix::t7#0)
  (signed byte~) calculate_matrix::$22 ← (signed byte~) calculate_matrix::$21 - *((signed byte*) SINQ#1 + (signed byte) calculate_matrix::t8#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 4) ← (signed byte~) calculate_matrix::$22
  (signed byte~) calculate_matrix::$23 ← *((signed byte*) SINH#1 + (signed byte) calculate_matrix::t9#0) - *((signed byte*) SINH#1 + (signed byte) calculate_matrix::t10#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 5) ← (signed byte~) calculate_matrix::$23
  (signed byte~) calculate_matrix::$24 ← *((signed byte*) COSH#1 + (signed byte) calculate_matrix::t4#0) - *((signed byte*) COSH#1 + (signed byte) calculate_matrix::t3#0)
  (signed byte~) calculate_matrix::$25 ← (signed byte~) calculate_matrix::$24 + *((signed byte*) SINQ#1 + (signed byte) calculate_matrix::t6#0)
  (signed byte~) calculate_matrix::$26 ← (signed byte~) calculate_matrix::$25 - *((signed byte*) SINQ#1 + (signed byte) calculate_matrix::t5#0)
  (signed byte~) calculate_matrix::$27 ← (signed byte~) calculate_matrix::$26 - *((signed byte*) SINQ#1 + (signed byte) calculate_matrix::t8#0)
  (signed byte~) calculate_matrix::$28 ← (signed byte~) calculate_matrix::$27 - *((signed byte*) SINQ#1 + (signed byte) calculate_matrix::t7#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 6) ← (signed byte~) calculate_matrix::$28
  (signed byte~) calculate_matrix::$29 ← *((signed byte*) SINH#1 + (signed byte) calculate_matrix::t3#0) + *((signed byte*) SINH#1 + (signed byte) calculate_matrix::t4#0)
  (signed byte~) calculate_matrix::$30 ← (signed byte~) calculate_matrix::$29 + *((signed byte*) COSQ#1 + (signed byte) calculate_matrix::t6#0)
  (signed byte~) calculate_matrix::$31 ← (signed byte~) calculate_matrix::$30 - *((signed byte*) COSQ#1 + (signed byte) calculate_matrix::t5#0)
  (signed byte~) calculate_matrix::$32 ← (signed byte~) calculate_matrix::$31 + *((signed byte*) COSQ#1 + (signed byte) calculate_matrix::t7#0)
  (signed byte~) calculate_matrix::$33 ← (signed byte~) calculate_matrix::$32 - *((signed byte*) COSQ#1 + (signed byte) calculate_matrix::t8#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 7) ← (signed byte~) calculate_matrix::$33
  (signed byte~) calculate_matrix::$34 ← *((signed byte*) COSH#1 + (signed byte) calculate_matrix::t9#0) + *((signed byte*) COSH#1 + (signed byte) calculate_matrix::t10#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 8) ← (signed byte~) calculate_matrix::$34
  to:calculate_matrix::@return
calculate_matrix::@return: scope:[calculate_matrix]  from calculate_matrix
  return 
  to:@return
store_matrix: scope:[store_matrix]  from anim::@15
  asm { ldarotation_matrix+0 starotate_matrix.A1+1 eor#$ff starotate_matrix.A2+1 ldarotation_matrix+1 starotate_matrix.B1+1 eor#$ff starotate_matrix.B2+1 ldarotation_matrix+2 starotate_matrix.C1+1 eor#$ff starotate_matrix.C2+1 ldarotation_matrix+3 starotate_matrix.D1+1 eor#$ff starotate_matrix.D2+1 ldarotation_matrix+4 starotate_matrix.E1+1 eor#$ff starotate_matrix.E2+1 ldarotation_matrix+5 starotate_matrix.F1+1 eor#$ff starotate_matrix.F2+1 ldarotation_matrix+6 starotate_matrix.G1+1 eor#$ff starotate_matrix.G2+1 ldarotation_matrix+7 starotate_matrix.H1+1 eor#$ff starotate_matrix.H2+1 ldarotation_matrix+8 starotate_matrix.I1+1 eor#$ff starotate_matrix.I2+1  }
  to:store_matrix::@return
store_matrix::@return: scope:[store_matrix]  from store_matrix
  return 
  to:@return
rotate_matrix: scope:[rotate_matrix]  from anim::@7
  (signed byte*) zr#2 ← phi( anim::@7/(signed byte*) zr#3 )
  (signed byte) rotate_matrix::z#1 ← phi( anim::@7/(signed byte) rotate_matrix::z#0 )
  (signed byte*) yr#2 ← phi( anim::@7/(signed byte*) yr#3 )
  (signed byte) rotate_matrix::y#1 ← phi( anim::@7/(signed byte) rotate_matrix::y#0 )
  (signed byte*) xr#2 ← phi( anim::@7/(signed byte*) xr#3 )
  (signed byte) rotate_matrix::x#1 ← phi( anim::@7/(signed byte) rotate_matrix::x#0 )
  *((signed byte*) xr#2) ← (signed byte) rotate_matrix::x#1
  *((signed byte*) yr#2) ← (signed byte) rotate_matrix::y#1
  *((signed byte*) zr#2) ← (signed byte) rotate_matrix::z#1
  asm { ldxzr C1: ldamulf_sqr1,x sec C2: sbcmulf_sqr2,x staC3+1 F1: ldamulf_sqr1,x sec F2: sbcmulf_sqr2,x staF3+1 I1: ldamulf_sqr1,x sec I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr I3: lda#0 clc G1: adcmulf_sqr1,x sec G2: sbcmulf_sqr2,x clc H1: adcmulf_sqr1,y sec H2: sbcmulf_sqr2,y stazr staPP+1 PP: ldaPERSP_Z stapp stapsp1 eor#$ff stapsp2 C3: lda#0 clc A1: adcmulf_sqr1,x sec A2: sbcmulf_sqr2,x clc B1: adcmulf_sqr1,y sec B2: sbcmulf_sqr2,y staxr staXX+1 clc F3: lda#0 clc D1: adcmulf_sqr1,x sec D2: sbcmulf_sqr2,x clc E1: adcmulf_sqr1,y sec E2: sbcmulf_sqr2,y stayr tay lda(psp1),y sec sbc(psp2),y stayp XX: ldy#0 lda(psp1),y sec sbc(psp2),y staxp  }
  to:rotate_matrix::@return
rotate_matrix::@return: scope:[rotate_matrix]  from rotate_matrix
  return 
  to:@return
@30: scope:[]  from @25
  (signed byte*) yp#14 ← phi( @25/(signed byte*) yp#15 )
  (signed byte*) xp#14 ← phi( @25/(signed byte*) xp#15 )
  (signed byte*) pp#14 ← phi( @25/(signed byte*) pp#15 )
  (signed byte*) zr#15 ← phi( @25/(signed byte*) zr#16 )
  (signed byte*) yr#15 ← phi( @25/(signed byte*) yr#16 )
  (signed byte*) xr#15 ← phi( @25/(signed byte*) xr#16 )
  (signed byte) sz#12 ← phi( @25/(signed byte) sz#15 )
  (word*) psp2#3 ← phi( @25/(word*) psp2#4 )
  (word*) psp1#3 ← phi( @25/(word*) psp1#4 )
  (signed byte) sy#16 ← phi( @25/(signed byte) sy#22 )
  (signed byte) sx#16 ← phi( @25/(signed byte) sx#22 )
  (byte*) mulf_sqr1#0 ← ((byte*)) (word/signed word/dword/signed dword) 9216
  (byte*) mulf_sqr2#0 ← ((byte*)) (word/signed word/dword/signed dword) 9728
  kickasm(location (byte*) mulf_sqr1#0) {{ .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((i*i)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }
    	.if(i>351) { .byte round(((512-i)*(512-i))/256) }
    }
 }}
  kickasm(location (byte*) mulf_sqr2#0) {{ .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }
    	.if(i>351) { .byte round(((i-511)*(i-511))/256) }  
    }
 }}
  (byte*) SPRITE#0 ← ((byte*)) (word/signed word/dword/signed dword) 12288
  kickasm(location (byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)
 }}
  (signed byte*) PERSP_Z#0 ← ((signed byte*)) (word/signed word/dword/signed dword) 10240
  kickasm(location (signed byte*) PERSP_Z#0) {{ {
    .var d = 256.0	
    .var z0 = 6.0	
    // These values of d/z0 result in table values from $20 to $40 (effectively max is $3f)
    .for(var z=0;z<$100;z++) {
    	.if(z>127) {
    		.byte round(d / (z0 - ((z - 256) / 64.0)));
    	} else {
    		.byte round(d / (z0 - (z / 64.0)));
    	}
    }
	}
 }}
  (signed byte*) SINH#0 ← ((signed byte*)) (word/signed word/dword/signed dword) 8192
  (signed byte*~) $6 ← (signed byte*) SINH#0 + (byte/signed byte/word/signed word/dword/signed dword) 64
  (signed byte*) COSH#0 ← (signed byte*~) $6
  (signed byte*) SINQ#0 ← ((signed byte*)) (word/signed word/dword/signed dword) 8704
  (signed byte*~) $7 ← (signed byte*) SINQ#0 + (byte/signed byte/word/signed word/dword/signed dword) 64
  (signed byte*) COSQ#0 ← (signed byte*~) $7
  kickasm(location (signed byte*) SINH#0) {{ {
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }
 }}
  kickasm(location (signed byte*) SINQ#0) {{ {
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }
 }}
  (byte*) SINH_LO#0 ← ((byte*)) (word/signed word/dword/signed dword) 16384
  (byte*) SINH_HI#0 ← ((byte*)) (word/signed word/dword/signed dword) 16896
  (byte*) SINQ_LO#0 ← ((byte*)) (word/signed word/dword/signed dword) 17408
  (byte*) SINQ_HI#0 ← ((byte*)) (word/signed word/dword/signed dword) 17920
  kickasm(location (byte*) SINH_LO#0) {{ {
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte <(min+(ampl/2)+(ampl/2)*sin(rad))
    }
    }
 }}
  kickasm(location (byte*) SINH_HI#0) {{ {
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >(min+(ampl/2)+(ampl/2)*sin(rad))
    }
    }
 }}
  kickasm(location (byte*) SINQ_LO#0) {{ {
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte <(min+(ampl/2)+(ampl/2)*sin(rad))
    }
    }
 }}
  kickasm(location (byte*) SINQ_HI#0) {{ {
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >(min+(ampl/2)+(ampl/2)*sin(rad))
    }
    }
 }}
  call main 
  to:@31
@31: scope:[]  from @30
  (signed byte) sy#11 ← phi( @30/(signed byte) sy#1 )
  (signed byte) sx#11 ← phi( @30/(signed byte) sx#1 )
  (signed byte) sx#5 ← (signed byte) sx#11
  (signed byte) sy#5 ← (signed byte) sy#11
  to:@end
@end: scope:[]  from @31

SYMBOL TABLE SSA
(signed byte/signed word/signed dword~) $0
(signed byte/signed word/signed dword~) $1
(signed byte/signed word/signed dword~) $2
(signed byte/signed word/signed dword~) $3
(signed byte/signed word/signed dword~) $4
(signed byte/signed word/signed dword~) $5
(signed byte*~) $6
(signed byte*~) $7
(label) @20
(label) @21
(label) @25
(label) @30
(label) @31
(label) @begin
(label) @end
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(signed byte*) COSH
(signed byte*) COSH#0
(signed byte*) COSH#1
(signed byte*) COSH#10
(signed byte*) COSH#11
(signed byte*) COSH#12
(signed byte*) COSH#13
(signed byte*) COSH#14
(signed byte*) COSH#2
(signed byte*) COSH#3
(signed byte*) COSH#4
(signed byte*) COSH#5
(signed byte*) COSH#6
(signed byte*) COSH#7
(signed byte*) COSH#8
(signed byte*) COSH#9
(signed byte*) COSQ
(signed byte*) COSQ#0
(signed byte*) COSQ#1
(signed byte*) COSQ#10
(signed byte*) COSQ#11
(signed byte*) COSQ#12
(signed byte*) COSQ#13
(signed byte*) COSQ#14
(signed byte*) COSQ#2
(signed byte*) COSQ#3
(signed byte*) COSQ#4
(signed byte*) COSQ#5
(signed byte*) COSQ#6
(signed byte*) COSQ#7
(signed byte*) COSQ#8
(signed byte*) COSQ#9
(byte) GREEN
(byte) GREEN#0
(byte) LIGHT_BLUE
(byte) LIGHT_BLUE#0
(byte) LIGHT_GREY
(byte) LIGHT_GREY#0
(signed byte*) PERSP_Z
(signed byte*) PERSP_Z#0
(byte*) RASTER
(byte*) RASTER#0
(signed byte*) SINH
(signed byte*) SINH#0
(signed byte*) SINH#1
(signed byte*) SINH#10
(signed byte*) SINH#11
(signed byte*) SINH#12
(signed byte*) SINH#13
(signed byte*) SINH#14
(signed byte*) SINH#2
(signed byte*) SINH#3
(signed byte*) SINH#4
(signed byte*) SINH#5
(signed byte*) SINH#6
(signed byte*) SINH#7
(signed byte*) SINH#8
(signed byte*) SINH#9
(byte*) SINH_HI
(byte*) SINH_HI#0
(byte*) SINH_LO
(byte*) SINH_LO#0
(signed byte*) SINQ
(signed byte*) SINQ#0
(signed byte*) SINQ#1
(signed byte*) SINQ#10
(signed byte*) SINQ#11
(signed byte*) SINQ#12
(signed byte*) SINQ#13
(signed byte*) SINQ#14
(signed byte*) SINQ#2
(signed byte*) SINQ#3
(signed byte*) SINQ#4
(signed byte*) SINQ#5
(signed byte*) SINQ#6
(signed byte*) SINQ#7
(signed byte*) SINQ#8
(signed byte*) SINQ#9
(byte*) SINQ_HI
(byte*) SINQ_HI#0
(byte*) SINQ_LO
(byte*) SINQ_LO#0
(byte*) SPRITE
(byte*) SPRITE#0
(byte*) SPRITE#1
(byte*) SPRITE#2
(byte*) SPRITE#3
(byte*) SPRITES_COLS
(byte*) SPRITES_COLS#0
(byte*) SPRITES_ENABLE
(byte*) SPRITES_ENABLE#0
(byte*) SPRITES_XPOS
(byte*) SPRITES_XPOS#0
(byte*) SPRITES_YPOS
(byte*) SPRITES_YPOS#0
(void()) anim()
(bool~) anim::$0
(byte~) anim::$4
(byte~) anim::$5
(byte/word/signed word/dword/signed dword~) anim::$6
(byte~) anim::$7
(byte/word/signed word/dword/signed dword~) anim::$8
(bool~) anim::$9
(label) anim::@1
(label) anim::@13
(label) anim::@15
(label) anim::@16
(label) anim::@17
(label) anim::@2
(label) anim::@4
(label) anim::@5
(label) anim::@6
(label) anim::@7
(label) anim::@return
(byte) anim::i
(byte) anim::i#0
(byte) anim::i#1
(byte) anim::i#2
(byte) anim::i#3
(byte) anim::i2
(byte) anim::i2#0
(void()) calculate_matrix((signed byte) calculate_matrix::sx , (signed byte) calculate_matrix::sy , (signed byte) calculate_matrix::sz)
(signed byte~) calculate_matrix::$0
(signed byte~) calculate_matrix::$1
(signed byte~) calculate_matrix::$10
(signed byte~) calculate_matrix::$11
(signed byte~) calculate_matrix::$12
(signed byte~) calculate_matrix::$13
(signed byte~) calculate_matrix::$14
(signed byte~) calculate_matrix::$15
(signed byte~) calculate_matrix::$16
(signed byte~) calculate_matrix::$17
(signed byte~) calculate_matrix::$18
(signed byte~) calculate_matrix::$19
(signed byte~) calculate_matrix::$2
(signed byte~) calculate_matrix::$20
(signed byte~) calculate_matrix::$21
(signed byte~) calculate_matrix::$22
(signed byte~) calculate_matrix::$23
(signed byte~) calculate_matrix::$24
(signed byte~) calculate_matrix::$25
(signed byte~) calculate_matrix::$26
(signed byte~) calculate_matrix::$27
(signed byte~) calculate_matrix::$28
(signed byte~) calculate_matrix::$29
(signed byte~) calculate_matrix::$3
(signed byte~) calculate_matrix::$30
(signed byte~) calculate_matrix::$31
(signed byte~) calculate_matrix::$32
(signed byte~) calculate_matrix::$33
(signed byte~) calculate_matrix::$34
(signed byte~) calculate_matrix::$4
(signed byte~) calculate_matrix::$5
(signed byte~) calculate_matrix::$6
(signed byte~) calculate_matrix::$7
(signed byte~) calculate_matrix::$8
(signed byte~) calculate_matrix::$9
(label) calculate_matrix::@return
(signed byte) calculate_matrix::sx
(signed byte) calculate_matrix::sx#0
(signed byte) calculate_matrix::sx#1
(signed byte) calculate_matrix::sy
(signed byte) calculate_matrix::sy#0
(signed byte) calculate_matrix::sy#1
(signed byte) calculate_matrix::sz
(signed byte) calculate_matrix::sz#0
(signed byte) calculate_matrix::sz#1
(signed byte) calculate_matrix::t1
(signed byte) calculate_matrix::t1#0
(signed byte) calculate_matrix::t10
(signed byte) calculate_matrix::t10#0
(signed byte) calculate_matrix::t2
(signed byte) calculate_matrix::t2#0
(signed byte) calculate_matrix::t3
(signed byte) calculate_matrix::t3#0
(signed byte) calculate_matrix::t4
(signed byte) calculate_matrix::t4#0
(signed byte) calculate_matrix::t5
(signed byte) calculate_matrix::t5#0
(signed byte) calculate_matrix::t6
(signed byte) calculate_matrix::t6#0
(signed byte) calculate_matrix::t7
(signed byte) calculate_matrix::t7#0
(signed byte) calculate_matrix::t8
(signed byte) calculate_matrix::t8#0
(signed byte) calculate_matrix::t9
(signed byte) calculate_matrix::t9#0
(void()) main()
(word~) main::$1
(word~) main::$2
(label) main::@1
(label) main::@2
(label) main::@return
(byte*) mulf_sqr1
(byte*) mulf_sqr1#0
(byte*) mulf_sqr1#1
(byte*) mulf_sqr1#2
(byte*) mulf_sqr2
(byte*) mulf_sqr2#0
(byte*) mulf_sqr2#1
(byte*) mulf_sqr2#2
(signed byte*) pp
(signed byte*) pp#0
(signed byte*) pp#1
(signed byte*) pp#10
(signed byte*) pp#11
(signed byte*) pp#12
(signed byte*) pp#13
(signed byte*) pp#14
(signed byte*) pp#15
(signed byte*) pp#16
(signed byte*) pp#2
(signed byte*) pp#3
(signed byte*) pp#4
(signed byte*) pp#5
(signed byte*) pp#6
(signed byte*) pp#7
(signed byte*) pp#8
(signed byte*) pp#9
(signed byte[8]) pps
(signed byte[8]) pps#0
(word*) psp1
(word*) psp1#0
(word*) psp1#1
(word*) psp1#2
(word*) psp1#3
(word*) psp1#4
(word*) psp1#5
(word*) psp2
(word*) psp2#0
(word*) psp2#1
(word*) psp2#2
(word*) psp2#3
(word*) psp2#4
(word*) psp2#5
(void()) rotate_matrix((signed byte) rotate_matrix::x , (signed byte) rotate_matrix::y , (signed byte) rotate_matrix::z)
(label) rotate_matrix::@return
(signed byte) rotate_matrix::x
(signed byte) rotate_matrix::x#0
(signed byte) rotate_matrix::x#1
(signed byte) rotate_matrix::y
(signed byte) rotate_matrix::y#0
(signed byte) rotate_matrix::y#1
(signed byte) rotate_matrix::z
(signed byte) rotate_matrix::z#0
(signed byte) rotate_matrix::z#1
(signed byte[9]) rotation_matrix
(signed byte[9]) rotation_matrix#0
(void()) sprites_init()
(byte*~) sprites_init::$0
(byte*~) sprites_init::$1
(byte~) sprites_init::$2
(bool~) sprites_init::$3
(label) sprites_init::@1
(label) sprites_init::@return
(byte*) sprites_init::SCREEN
(byte*) sprites_init::SCREEN#0
(byte) sprites_init::i
(byte) sprites_init::i#0
(byte) sprites_init::i#1
(byte) sprites_init::i#2
(byte*) sprites_init::sprites_ptr
(byte*) sprites_init::sprites_ptr#0
(byte*) sprites_init::sprites_ptr#1
(void()) store_matrix()
(label) store_matrix::@return
(signed byte) sx
(signed byte) sx#0
(signed byte) sx#1
(signed byte) sx#10
(signed byte) sx#11
(signed byte) sx#12
(signed byte) sx#13
(signed byte) sx#14
(signed byte) sx#15
(signed byte) sx#16
(signed byte) sx#17
(signed byte) sx#18
(signed byte) sx#19
(signed byte) sx#2
(signed byte) sx#20
(signed byte) sx#21
(signed byte) sx#22
(signed byte) sx#23
(signed byte) sx#24
(signed byte) sx#3
(signed byte) sx#4
(signed byte) sx#5
(signed byte) sx#6
(signed byte) sx#7
(signed byte) sx#8
(signed byte) sx#9
(signed byte) sy
(signed byte) sy#0
(signed byte) sy#1
(signed byte) sy#10
(signed byte) sy#11
(signed byte) sy#12
(signed byte) sy#13
(signed byte) sy#14
(signed byte) sy#15
(signed byte) sy#16
(signed byte) sy#17
(signed byte) sy#18
(signed byte) sy#19
(signed byte) sy#2
(signed byte) sy#20
(signed byte) sy#21
(signed byte) sy#22
(signed byte) sy#23
(signed byte) sy#24
(signed byte) sy#3
(signed byte) sy#4
(signed byte) sy#5
(signed byte) sy#6
(signed byte) sy#7
(signed byte) sy#8
(signed byte) sy#9
(signed byte) sz
(signed byte) sz#0
(signed byte) sz#1
(signed byte) sz#10
(signed byte) sz#11
(signed byte) sz#12
(signed byte) sz#13
(signed byte) sz#14
(signed byte) sz#15
(signed byte) sz#2
(signed byte) sz#3
(signed byte) sz#4
(signed byte) sz#5
(signed byte) sz#6
(signed byte) sz#7
(signed byte) sz#8
(signed byte) sz#9
(signed byte*) xp
(signed byte*) xp#0
(signed byte*) xp#1
(signed byte*) xp#10
(signed byte*) xp#11
(signed byte*) xp#12
(signed byte*) xp#13
(signed byte*) xp#14
(signed byte*) xp#15
(signed byte*) xp#16
(signed byte*) xp#2
(signed byte*) xp#3
(signed byte*) xp#4
(signed byte*) xp#5
(signed byte*) xp#6
(signed byte*) xp#7
(signed byte*) xp#8
(signed byte*) xp#9
(signed byte[8]) xps
(signed byte[8]) xps#0
(signed byte*) xr
(signed byte*) xr#0
(signed byte*) xr#1
(signed byte*) xr#10
(signed byte*) xr#11
(signed byte*) xr#12
(signed byte*) xr#13
(signed byte*) xr#14
(signed byte*) xr#15
(signed byte*) xr#16
(signed byte*) xr#17
(signed byte*) xr#2
(signed byte*) xr#3
(signed byte*) xr#4
(signed byte*) xr#5
(signed byte*) xr#6
(signed byte*) xr#7
(signed byte*) xr#8
(signed byte*) xr#9
(signed byte[8]) xrs
(signed byte[8]) xrs#0
(signed byte[8]) xs
(signed byte[8]) xs#0
(signed byte*) yp
(signed byte*) yp#0
(signed byte*) yp#1
(signed byte*) yp#10
(signed byte*) yp#11
(signed byte*) yp#12
(signed byte*) yp#13
(signed byte*) yp#14
(signed byte*) yp#15
(signed byte*) yp#16
(signed byte*) yp#2
(signed byte*) yp#3
(signed byte*) yp#4
(signed byte*) yp#5
(signed byte*) yp#6
(signed byte*) yp#7
(signed byte*) yp#8
(signed byte*) yp#9
(signed byte[8]) yps
(signed byte[8]) yps#0
(signed byte*) yr
(signed byte*) yr#0
(signed byte*) yr#1
(signed byte*) yr#10
(signed byte*) yr#11
(signed byte*) yr#12
(signed byte*) yr#13
(signed byte*) yr#14
(signed byte*) yr#15
(signed byte*) yr#16
(signed byte*) yr#17
(signed byte*) yr#2
(signed byte*) yr#3
(signed byte*) yr#4
(signed byte*) yr#5
(signed byte*) yr#6
(signed byte*) yr#7
(signed byte*) yr#8
(signed byte*) yr#9
(signed byte[8]) yrs
(signed byte[8]) yrs#0
(signed byte[8]) ys
(signed byte[8]) ys#0
(signed byte*) zr
(signed byte*) zr#0
(signed byte*) zr#1
(signed byte*) zr#10
(signed byte*) zr#11
(signed byte*) zr#12
(signed byte*) zr#13
(signed byte*) zr#14
(signed byte*) zr#15
(signed byte*) zr#16
(signed byte*) zr#17
(signed byte*) zr#2
(signed byte*) zr#3
(signed byte*) zr#4
(signed byte*) zr#5
(signed byte*) zr#6
(signed byte*) zr#7
(signed byte*) zr#8
(signed byte*) zr#9
(signed byte[8]) zrs
(signed byte[8]) zrs#0
(signed byte[8]) zs
(signed byte[8]) zs#0

Alias (byte*) mulf_sqr1#1 = (byte*) mulf_sqr1#2 
Alias (word*) psp1#1 = (word*) psp1#2 
Alias (byte*) mulf_sqr2#1 = (byte*) mulf_sqr2#2 
Alias (word*) psp2#1 = (word*) psp2#2 
Alias (signed byte) sx#12 = (signed byte) sx#17 
Alias (signed byte) sy#12 = (signed byte) sy#17 
Alias (signed byte) sz#10 = (signed byte) sz#8 
Alias (signed byte*) COSH#11 = (signed byte*) COSH#9 
Alias (signed byte*) SINH#11 = (signed byte*) SINH#9 
Alias (signed byte*) COSQ#11 = (signed byte*) COSQ#9 
Alias (signed byte*) SINQ#11 = (signed byte*) SINQ#9 
Alias (signed byte*) xr#13 = (signed byte*) xr#14 
Alias (signed byte*) yr#13 = (signed byte*) yr#14 
Alias (signed byte*) zr#13 = (signed byte*) zr#14 
Alias (signed byte*) pp#12 = (signed byte*) pp#13 
Alias (signed byte*) xp#12 = (signed byte*) xp#13 
Alias (signed byte*) yp#12 = (signed byte*) yp#13 
Alias (signed byte) sx#0 = (signed byte) sx#6 (signed byte) sx#7 (signed byte) sx#1 
Alias (signed byte) sy#0 = (signed byte) sy#6 (signed byte) sy#7 (signed byte) sy#1 
Alias (word*) psp1#0 = (word*) psp1#5 (word*) psp1#4 (word*) psp1#3 
Alias (word*) psp2#0 = (word*) psp2#5 (word*) psp2#4 (word*) psp2#3 
Alias (signed byte*) xr#0 = (signed byte*) xr#17 (signed byte*) xr#16 (signed byte*) xr#15 
Alias (signed byte*) yr#0 = (signed byte*) yr#17 (signed byte*) yr#16 (signed byte*) yr#15 
Alias (signed byte*) zr#0 = (signed byte*) zr#17 (signed byte*) zr#16 (signed byte*) zr#15 
Alias (signed byte*) pp#0 = (signed byte*) pp#16 (signed byte*) pp#15 (signed byte*) pp#14 
Alias (signed byte*) xp#0 = (signed byte*) xp#16 (signed byte*) xp#15 (signed byte*) xp#14 
Alias (signed byte*) yp#0 = (signed byte*) yp#16 (signed byte*) yp#15 (signed byte*) yp#14 
Alias (signed byte) sx#10 = (signed byte) sx#19 (signed byte) sx#15 (signed byte) sx#4 
Alias (signed byte) sy#10 = (signed byte) sy#19 (signed byte) sy#15 (signed byte) sy#4 
Alias (signed byte) sz#3 = (signed byte) sz#5 
Alias (signed byte*) COSH#4 = (signed byte*) COSH#6 
Alias (signed byte*) SINH#4 = (signed byte*) SINH#6 
Alias (signed byte*) COSQ#4 = (signed byte*) COSQ#6 
Alias (signed byte*) SINQ#4 = (signed byte*) SINQ#6 
Alias (signed byte*) xr#10 = (signed byte*) xr#8 
Alias (signed byte*) yr#10 = (signed byte*) yr#8 
Alias (signed byte*) zr#10 = (signed byte*) zr#8 
Alias (signed byte*) pp#7 = (signed byte*) pp#9 
Alias (signed byte*) xp#7 = (signed byte*) xp#9 
Alias (signed byte*) yp#7 = (signed byte*) yp#9 
Alias (signed byte) sx#13 = (signed byte) sx#20 (signed byte) sx#8 (signed byte) sx#24 (signed byte) sx#23 
Alias (signed byte) sy#13 = (signed byte) sy#20 (signed byte) sy#8 (signed byte) sy#24 (signed byte) sy#23 
Alias (signed byte) sz#1 = (signed byte) sz#4 (signed byte) sz#2 (signed byte) sz#14 (signed byte) sz#13 
Alias (signed byte*) COSH#13 = (signed byte*) COSH#5 (signed byte*) COSH#3 (signed byte*) COSH#2 (signed byte*) COSH#14 
Alias (signed byte*) SINH#13 = (signed byte*) SINH#5 (signed byte*) SINH#3 (signed byte*) SINH#2 (signed byte*) SINH#14 
Alias (signed byte*) COSQ#13 = (signed byte*) COSQ#5 (signed byte*) COSQ#3 (signed byte*) COSQ#2 (signed byte*) COSQ#14 
Alias (signed byte*) SINQ#13 = (signed byte*) SINQ#5 (signed byte*) SINQ#3 (signed byte*) SINQ#2 (signed byte*) SINQ#14 
Alias (signed byte*) xr#4 = (signed byte*) xr#9 (signed byte*) xr#7 (signed byte*) xr#6 (signed byte*) xr#5 
Alias (signed byte*) yr#4 = (signed byte*) yr#9 (signed byte*) yr#7 (signed byte*) yr#6 (signed byte*) yr#5 
Alias (signed byte*) zr#4 = (signed byte*) zr#9 (signed byte*) zr#7 (signed byte*) zr#6 (signed byte*) zr#5 
Alias (signed byte*) pp#3 = (signed byte*) pp#8 (signed byte*) pp#6 (signed byte*) pp#5 (signed byte*) pp#4 
Alias (signed byte*) xp#3 = (signed byte*) xp#8 (signed byte*) xp#6 (signed byte*) xp#5 (signed byte*) xp#4 
Alias (signed byte*) yp#3 = (signed byte*) yp#8 (signed byte*) yp#6 (signed byte*) yp#5 (signed byte*) yp#4 
Alias (signed byte*) xr#1 = (signed byte*) xr#3 (signed byte*) xr#12 
Alias (byte) anim::i#2 = (byte) anim::i#3 
Alias (signed byte*) yr#1 = (signed byte*) yr#3 (signed byte*) yr#12 
Alias (signed byte*) zr#1 = (signed byte*) zr#3 (signed byte*) zr#12 
Alias (signed byte*) pp#1 = (signed byte*) pp#2 (signed byte*) pp#11 
Alias (signed byte*) xp#1 = (signed byte*) xp#2 (signed byte*) xp#11 
Alias (signed byte*) yp#1 = (signed byte*) yp#2 (signed byte*) yp#11 
Alias (signed byte) sx#14 = (signed byte) sx#21 (signed byte) sx#9 
Alias (signed byte) sy#14 = (signed byte) sy#21 (signed byte) sy#9 
Alias (signed byte) sz#11 = (signed byte) sz#9 (signed byte) sz#7 
Alias (signed byte*) COSH#10 = (signed byte*) COSH#12 (signed byte*) COSH#8 
Alias (signed byte*) SINH#10 = (signed byte*) SINH#12 (signed byte*) SINH#8 
Alias (signed byte*) COSQ#10 = (signed byte*) COSQ#12 (signed byte*) COSQ#8 
Alias (signed byte*) SINQ#10 = (signed byte*) SINQ#12 (signed byte*) SINQ#8 
Alias (byte) anim::i2#0 = (byte~) anim::$4 
Alias (byte*) sprites_init::sprites_ptr#0 = (byte*~) sprites_init::$0 
Alias (signed byte) sx#16 = (signed byte) sx#22 (signed byte) sx#2 
Alias (signed byte) sy#16 = (signed byte) sy#22 (signed byte) sy#2 
Alias (signed byte) sz#0 = (signed byte) sz#15 (signed byte) sz#12 
Alias (signed byte) calculate_matrix::t1#0 = (signed byte~) calculate_matrix::$0 
Alias (signed byte) calculate_matrix::t2#0 = (signed byte~) calculate_matrix::$1 
Alias (signed byte) calculate_matrix::t3#0 = (signed byte~) calculate_matrix::$2 
Alias (signed byte) calculate_matrix::t4#0 = (signed byte~) calculate_matrix::$3 
Alias (signed byte) calculate_matrix::t5#0 = (signed byte~) calculate_matrix::$4 
Alias (signed byte) calculate_matrix::t6#0 = (signed byte~) calculate_matrix::$5 
Alias (signed byte) calculate_matrix::t7#0 = (signed byte~) calculate_matrix::$6 
Alias (signed byte) calculate_matrix::t8#0 = (signed byte~) calculate_matrix::$7 
Alias (signed byte) calculate_matrix::t9#0 = (signed byte~) calculate_matrix::$8 
Alias (signed byte) calculate_matrix::t10#0 = (signed byte~) calculate_matrix::$9 
Alias (signed byte*) COSH#0 = (signed byte*~) $6 
Alias (signed byte*) COSQ#0 = (signed byte*~) $7 
Alias (signed byte) sx#11 = (signed byte) sx#5 
Alias (signed byte) sy#11 = (signed byte) sy#5 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (signed byte) sx#13
Self Phi Eliminated (signed byte) sy#13
Self Phi Eliminated (signed byte) sz#1
Self Phi Eliminated (signed byte*) COSH#13
Self Phi Eliminated (signed byte*) SINH#13
Self Phi Eliminated (signed byte*) COSQ#13
Self Phi Eliminated (signed byte*) SINQ#13
Self Phi Eliminated (signed byte*) xr#4
Self Phi Eliminated (signed byte*) yr#4
Self Phi Eliminated (signed byte*) zr#4
Self Phi Eliminated (signed byte*) pp#3
Self Phi Eliminated (signed byte*) xp#3
Self Phi Eliminated (signed byte*) yp#3
Self Phi Eliminated (signed byte*) xr#1
Self Phi Eliminated (signed byte*) yr#1
Self Phi Eliminated (signed byte*) zr#1
Self Phi Eliminated (signed byte*) pp#1
Self Phi Eliminated (signed byte*) xp#1
Self Phi Eliminated (signed byte*) yp#1
Self Phi Eliminated (signed byte) sx#14
Self Phi Eliminated (signed byte) sy#14
Self Phi Eliminated (signed byte) sz#11
Self Phi Eliminated (signed byte*) COSH#10
Self Phi Eliminated (signed byte*) SINH#10
Self Phi Eliminated (signed byte*) COSQ#10
Self Phi Eliminated (signed byte*) SINQ#10
Self Phi Eliminated (byte*) SPRITE#1
Self Phi Eliminated (byte*) sprites_init::sprites_ptr#1
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) mulf_sqr1#1 (byte*) mulf_sqr1#0
Redundant Phi (word*) psp1#1 (word*) psp1#0
Redundant Phi (byte*) mulf_sqr2#1 (byte*) mulf_sqr2#0
Redundant Phi (word*) psp2#1 (word*) psp2#0
Redundant Phi (signed byte) sx#12 (signed byte) sx#16
Redundant Phi (signed byte) sy#12 (signed byte) sy#16
Redundant Phi (byte*) SPRITE#3 (byte*) SPRITE#0
Redundant Phi (signed byte) sz#10 (signed byte) sz#0
Redundant Phi (signed byte*) COSH#11 (signed byte*) COSH#0
Redundant Phi (signed byte*) SINH#11 (signed byte*) SINH#0
Redundant Phi (signed byte*) COSQ#11 (signed byte*) COSQ#0
Redundant Phi (signed byte*) SINQ#11 (signed byte*) SINQ#0
Redundant Phi (signed byte*) xr#13 (signed byte*) xr#0
Redundant Phi (signed byte*) yr#13 (signed byte*) yr#0
Redundant Phi (signed byte*) zr#13 (signed byte*) zr#0
Redundant Phi (signed byte*) pp#12 (signed byte*) pp#0
Redundant Phi (signed byte*) xp#12 (signed byte*) xp#0
Redundant Phi (signed byte*) yp#12 (signed byte*) yp#0
Redundant Phi (signed byte) sx#0 (signed byte) sx#10
Redundant Phi (signed byte) sy#0 (signed byte) sy#10
Redundant Phi (signed byte) sx#18 (signed byte) sx#12
Redundant Phi (signed byte) sy#18 (signed byte) sy#12
Redundant Phi (signed byte) sz#6 (signed byte) sz#10
Redundant Phi (signed byte*) COSH#7 (signed byte*) COSH#11
Redundant Phi (signed byte*) SINH#7 (signed byte*) SINH#11
Redundant Phi (signed byte*) COSQ#7 (signed byte*) COSQ#11
Redundant Phi (signed byte*) SINQ#7 (signed byte*) SINQ#11
Redundant Phi (signed byte*) xr#11 (signed byte*) xr#13
Redundant Phi (signed byte*) yr#11 (signed byte*) yr#13
Redundant Phi (signed byte*) zr#11 (signed byte*) zr#13
Redundant Phi (signed byte*) pp#10 (signed byte*) pp#12
Redundant Phi (signed byte*) xp#10 (signed byte*) xp#12
Redundant Phi (signed byte*) yp#10 (signed byte*) yp#12
Redundant Phi (signed byte) sx#13 (signed byte) sx#10
Redundant Phi (signed byte) sy#13 (signed byte) sy#10
Redundant Phi (signed byte) sz#1 (signed byte) sz#3
Redundant Phi (signed byte*) COSH#13 (signed byte*) COSH#4
Redundant Phi (signed byte*) SINH#13 (signed byte*) SINH#4
Redundant Phi (signed byte*) COSQ#13 (signed byte*) COSQ#4
Redundant Phi (signed byte*) SINQ#13 (signed byte*) SINQ#4
Redundant Phi (signed byte*) xr#4 (signed byte*) xr#10
Redundant Phi (signed byte*) yr#4 (signed byte*) yr#10
Redundant Phi (signed byte*) zr#4 (signed byte*) zr#10
Redundant Phi (signed byte*) pp#3 (signed byte*) pp#7
Redundant Phi (signed byte*) xp#3 (signed byte*) xp#7
Redundant Phi (signed byte*) yp#3 (signed byte*) yp#7
Redundant Phi (signed byte*) xr#1 (signed byte*) xr#4
Redundant Phi (signed byte*) yr#1 (signed byte*) yr#4
Redundant Phi (signed byte*) zr#1 (signed byte*) zr#4
Redundant Phi (signed byte*) pp#1 (signed byte*) pp#3
Redundant Phi (signed byte*) xp#1 (signed byte*) xp#3
Redundant Phi (signed byte*) yp#1 (signed byte*) yp#3
Redundant Phi (signed byte) sx#14 (signed byte) sx#13
Redundant Phi (signed byte) sy#14 (signed byte) sy#13
Redundant Phi (signed byte) sz#11 (signed byte) sz#1
Redundant Phi (signed byte*) COSH#10 (signed byte*) COSH#13
Redundant Phi (signed byte*) SINH#10 (signed byte*) SINH#13
Redundant Phi (signed byte*) COSQ#10 (signed byte*) COSQ#13
Redundant Phi (signed byte*) SINQ#10 (signed byte*) SINQ#13
Redundant Phi (byte*) SPRITE#2 (byte*) SPRITE#3
Redundant Phi (byte*) SPRITE#1 (byte*) SPRITE#2
Redundant Phi (byte*) sprites_init::sprites_ptr#1 (byte*) sprites_init::sprites_ptr#0
Redundant Phi (signed byte) calculate_matrix::sy#1 (signed byte) calculate_matrix::sy#0
Redundant Phi (signed byte) calculate_matrix::sz#1 (signed byte) calculate_matrix::sz#0
Redundant Phi (signed byte) calculate_matrix::sx#1 (signed byte) calculate_matrix::sx#0
Redundant Phi (signed byte*) COSH#1 (signed byte*) COSH#13
Redundant Phi (signed byte*) SINH#1 (signed byte*) SINH#13
Redundant Phi (signed byte*) COSQ#1 (signed byte*) COSQ#13
Redundant Phi (signed byte*) SINQ#1 (signed byte*) SINQ#13
Redundant Phi (signed byte) rotate_matrix::x#1 (signed byte) rotate_matrix::x#0
Redundant Phi (signed byte*) xr#2 (signed byte*) xr#1
Redundant Phi (signed byte) rotate_matrix::y#1 (signed byte) rotate_matrix::y#0
Redundant Phi (signed byte*) yr#2 (signed byte*) yr#1
Redundant Phi (signed byte) rotate_matrix::z#1 (signed byte) rotate_matrix::z#0
Redundant Phi (signed byte*) zr#2 (signed byte*) zr#1
Redundant Phi (signed byte) sx#11 (signed byte) sx#0
Redundant Phi (signed byte) sy#11 (signed byte) sy#0
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) anim::$0 if(*((byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto anim::@5
Simple Condition (bool~) anim::$9 if((byte) anim::i#1!=rangelast(0,7)) goto anim::@7
Simple Condition (bool~) sprites_init::$3 if((byte) sprites_init::i#1!=rangelast(0,7)) goto sprites_init::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) SPRITES_XPOS#0 = ((byte*))53248
Constant (const byte*) SPRITES_YPOS#0 = ((byte*))53249
Constant (const byte*) RASTER#0 = ((byte*))53266
Constant (const byte*) SPRITES_ENABLE#0 = ((byte*))53269
Constant (const byte*) BORDERCOL#0 = ((byte*))53280
Constant (const byte*) SPRITES_COLS#0 = ((byte*))53287
Constant (const byte) GREEN#0 = 5
Constant (const byte) LIGHT_BLUE#0 = 14
Constant (const byte) LIGHT_GREY#0 = 15
Constant (const signed byte*) xr#0 = ((signed byte*))240
Constant (const signed byte*) yr#0 = ((signed byte*))241
Constant (const signed byte*) zr#0 = ((signed byte*))242
Constant (const signed byte*) pp#0 = ((signed byte*))243
Constant (const signed byte*) xp#0 = ((signed byte*))244
Constant (const signed byte*) yp#0 = ((signed byte*))245
Constant (const word*) psp1#0 = ((word*))246
Constant (const word*) psp2#0 = ((word*))248
Constant (const signed byte/signed word/signed dword) $0 = -52
Constant (const signed byte/signed word/signed dword) $1 = -52
Constant (const signed byte/signed word/signed dword) $2 = -52
Constant (const signed byte/signed word/signed dword) $3 = -52
Constant (const signed byte/signed word/signed dword) $4 = -52
Constant (const signed byte/signed word/signed dword) $5 = -52
Constant (const signed byte[8]) zs#0 = { 52, 52, 52, 52, 52, 52, 52, 52 }
Constant (const signed byte[8]) xrs#0 = { fill( 8, 0) }
Constant (const signed byte[8]) yrs#0 = { fill( 8, 0) }
Constant (const signed byte[8]) zrs#0 = { fill( 8, 0) }
Constant (const signed byte[8]) pps#0 = { fill( 8, 0) }
Constant (const signed byte[8]) xps#0 = { fill( 8, 0) }
Constant (const signed byte[8]) yps#0 = { fill( 8, 0) }
Constant (const signed byte) sx#16 = 0
Constant (const signed byte) sy#16 = 0
Constant (const signed byte) sz#0 = 0
Constant (const byte) anim::i#0 = 0
Constant (const byte*) sprites_init::SCREEN#0 = ((byte*))1024
Constant (const byte) sprites_init::i#0 = 0
Constant (const signed byte[9]) rotation_matrix#0 = { fill( 9, 0) }
Constant (const byte*) mulf_sqr1#0 = ((byte*))9216
Constant (const byte*) mulf_sqr2#0 = ((byte*))9728
Constant (const byte*) SPRITE#0 = ((byte*))12288
Constant (const signed byte*) PERSP_Z#0 = ((signed byte*))10240
Constant (const signed byte*) SINH#0 = ((signed byte*))8192
Constant (const signed byte*) SINQ#0 = ((signed byte*))8704
Constant (const byte*) SINH_LO#0 = ((byte*))16384
Constant (const byte*) SINH_HI#0 = ((byte*))16896
Constant (const byte*) SINQ_LO#0 = ((byte*))17408
Constant (const byte*) SINQ_HI#0 = ((byte*))17920
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) main::$1 = ((word))mulf_sqr1#0
Constant (const word) main::$2 = ((word))mulf_sqr2#0
Constant (const signed byte[8]) xs#0 = { $0, $1, $2, 0, 0, 52, 52, 52 }
Constant (const signed byte[8]) ys#0 = { $3, 0, 52, $4, 52, $5, 0, 52 }
Constant (const byte*) sprites_init::sprites_ptr#0 = sprites_init::SCREEN#0+1016
Constant (const byte*) sprites_init::$1 = SPRITE#0/64
Constant (const signed byte*) COSH#0 = SINH#0+64
Constant (const signed byte*) COSQ#0 = SINQ#0+64
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) sprites_init::$2 = ((byte))sprites_init::$1
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in *(rotation_matrix#0+0)
Consolidated array index constant in *(rotation_matrix#0+1)
Consolidated array index constant in *(rotation_matrix#0+2)
Consolidated array index constant in *(rotation_matrix#0+3)
Consolidated array index constant in *(rotation_matrix#0+4)
Consolidated array index constant in *(rotation_matrix#0+5)
Consolidated array index constant in *(rotation_matrix#0+6)
Consolidated array index constant in *(rotation_matrix#0+7)
Consolidated array index constant in *(rotation_matrix#0+8)
Successful SSA optimization Pass2ConstantAdditionElimination
if() condition always true - replacing block destination if(true) goto anim::@2
Successful SSA optimization Pass2ConstantIfs
Eliminating Noop Cast (byte~) anim::$5 ← ((byte)) *((signed byte*) xp#7)
Eliminating Noop Cast (byte~) anim::$7 ← ((byte)) *((signed byte*) yp#7)
Successful SSA optimization Pass2NopCastElimination
Removing unused block anim::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Resolved ranged next value anim::i#1 ← ++ anim::i#2 to ++
Resolved ranged comparison value if(anim::i#1!=rangelast(0,7)) goto anim::@7 to (byte/signed byte/word/signed word/dword/signed dword) 8
Resolved ranged next value sprites_init::i#1 ← ++ sprites_init::i#2 to ++
Resolved ranged comparison value if(sprites_init::i#1!=rangelast(0,7)) goto sprites_init::@1 to (byte/signed byte/word/signed word/dword/signed dword) 8
Culled Empty Block (label) @20
Culled Empty Block (label) main::@2
Culled Empty Block (label) @21
Culled Empty Block (label) anim::@2
Culled Empty Block (label) anim::@5
Culled Empty Block (label) anim::@16
Culled Empty Block (label) @25
Culled Empty Block (label) @31
Successful SSA optimization Pass2CullEmptyBlocks
Self Phi Eliminated (signed byte) sz#3
Self Phi Eliminated (signed byte*) COSH#4
Self Phi Eliminated (signed byte*) SINH#4
Self Phi Eliminated (signed byte*) COSQ#4
Self Phi Eliminated (signed byte*) SINQ#4
Self Phi Eliminated (signed byte*) xr#10
Self Phi Eliminated (signed byte*) yr#10
Self Phi Eliminated (signed byte*) zr#10
Self Phi Eliminated (signed byte*) pp#7
Self Phi Eliminated (signed byte*) xp#7
Self Phi Eliminated (signed byte*) yp#7
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (signed byte) sz#3 (const signed byte) sz#0
Redundant Phi (signed byte*) COSH#4 (const signed byte*) COSH#0
Redundant Phi (signed byte*) SINH#4 (const signed byte*) SINH#0
Redundant Phi (signed byte*) COSQ#4 (const signed byte*) COSQ#0
Redundant Phi (signed byte*) SINQ#4 (const signed byte*) SINQ#0
Redundant Phi (signed byte*) xr#10 (const signed byte*) xr#0
Redundant Phi (signed byte*) yr#10 (const signed byte*) yr#0
Redundant Phi (signed byte*) zr#10 (const signed byte*) zr#0
Redundant Phi (signed byte*) pp#7 (const signed byte*) pp#0
Redundant Phi (signed byte*) xp#7 (const signed byte*) xp#0
Redundant Phi (signed byte*) yp#7 (const signed byte*) yp#0
Successful SSA optimization Pass2RedundantPhiElimination
Constant (const signed byte) calculate_matrix::sz#0 = sz#0
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in assignment *(SINH#0+calculate_matrix::sz#0 + calculate_matrix::t3#0)
Consolidated array index constant in assignment *(SINH#0+-calculate_matrix::sz#0 + calculate_matrix::t4#0)
Successful SSA optimization Pass2ConstantAdditionElimination
Inlining constant with var siblings (const byte) anim::i#0
Inlining constant with var siblings (const byte) sprites_init::i#0
Inlining constant with var siblings (const signed byte) sx#16
Inlining constant with var siblings (const signed byte) sy#16
Constant inlined sx#16 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined sprites_init::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined $0 = -(byte/signed byte/word/signed word/dword/signed dword) 52
Constant inlined $1 = -(byte/signed byte/word/signed word/dword/signed dword) 52
Constant inlined $2 = -(byte/signed byte/word/signed word/dword/signed dword) 52
Constant inlined anim::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined sy#16 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined $3 = -(byte/signed byte/word/signed word/dword/signed dword) 52
Constant inlined $4 = -(byte/signed byte/word/signed word/dword/signed dword) 52
Constant inlined $5 = -(byte/signed byte/word/signed word/dword/signed dword) 52
Constant inlined main::$1 = ((word))(const byte*) mulf_sqr1#0
Constant inlined main::$2 = ((word))(const byte*) mulf_sqr2#0
Constant inlined sprites_init::$1 = (const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64
Constant inlined sprites_init::$2 = ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64
Constant inlined calculate_matrix::sz#0 = (const signed byte) sz#0
Successful SSA optimization Pass2ConstantInlining
Simplifying constant plus zero rotation_matrix#0+0
Added new block during phi lifting anim::@18(between anim::@17 and anim::@7)
Added new block during phi lifting sprites_init::@3(between sprites_init::@1 and sprites_init::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @end
Adding NOP phi() at start of anim
Adding NOP phi() at start of anim::@15
CALL GRAPH
Calls in [] to main:11 
Calls in [main] to sprites_init:14 anim:17 
Calls in [anim] to calculate_matrix:25 store_matrix:27 rotate_matrix:33 

Created 4 initial phi equivalence classes
Coalesced [51] sx#25 ← sx#3
Coalesced [52] sy#25 ← sy#3
Coalesced [53] anim::i#4 ← anim::i#1
Coalesced [113] sprites_init::i#3 ← sprites_init::i#1
Coalesced down to 4 phi equivalence classes
Culled Empty Block (label) anim::@18
Culled Empty Block (label) sprites_init::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @end
Adding NOP phi() at start of anim
Adding NOP phi() at start of anim::@15

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@30
@30: scope:[]  from @begin
  kickasm(location (const byte*) mulf_sqr1#0) {{ .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((i*i)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }
    	.if(i>351) { .byte round(((512-i)*(512-i))/256) }
    }
 }}
  kickasm(location (const byte*) mulf_sqr2#0) {{ .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }
    	.if(i>351) { .byte round(((i-511)*(i-511))/256) }  
    }
 }}
  kickasm(location (const byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)
 }}
  kickasm(location (const signed byte*) PERSP_Z#0) {{ {
    .var d = 256.0	
    .var z0 = 6.0	
    // These values of d/z0 result in table values from $20 to $40 (effectively max is $3f)
    .for(var z=0;z<$100;z++) {
    	.if(z>127) {
    		.byte round(d / (z0 - ((z - 256) / 64.0)));
    	} else {
    		.byte round(d / (z0 - (z / 64.0)));
    	}
    }
	}
 }}
  kickasm(location (const signed byte*) SINH#0) {{ {
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }
 }}
  kickasm(location (const signed byte*) SINQ#0) {{ {
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }
 }}
  kickasm(location (const byte*) SINH_LO#0) {{ {
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte <(min+(ampl/2)+(ampl/2)*sin(rad))
    }
    }
 }}
  kickasm(location (const byte*) SINH_HI#0) {{ {
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >(min+(ampl/2)+(ampl/2)*sin(rad))
    }
    }
 }}
  kickasm(location (const byte*) SINQ_LO#0) {{ {
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte <(min+(ampl/2)+(ampl/2)*sin(rad))
    }
    }
 }}
  kickasm(location (const byte*) SINQ_HI#0) {{ {
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >(min+(ampl/2)+(ampl/2)*sin(rad))
    }
    }
 }}
  [11] call main 
  to:@end
@end: scope:[]  from @30
  [12] phi()
main: scope:[main]  from @30
  asm { sei  }
  [14] call sprites_init 
  to:main::@1
main::@1: scope:[main]  from main
  [15] *((const word*) psp1#0) ← ((word))(const byte*) mulf_sqr1#0
  [16] *((const word*) psp2#0) ← ((word))(const byte*) mulf_sqr2#0
  [17] call anim 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [18] return 
  to:@return
anim: scope:[anim]  from main::@1
  [19] phi()
  to:anim::@1
anim::@1: scope:[anim]  from anim anim::@13
  [20] (signed byte) sy#10 ← phi( anim/(byte/signed byte/word/signed word/dword/signed dword) 0 anim::@13/(signed byte) sy#3 )
  [20] (signed byte) sx#10 ← phi( anim/(byte/signed byte/word/signed word/dword/signed dword) 0 anim::@13/(signed byte) sx#3 )
  to:anim::@4
anim::@4: scope:[anim]  from anim::@1 anim::@4
  [21] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto anim::@4
  to:anim::@6
anim::@6: scope:[anim]  from anim::@4
  [22] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0)
  [23] (signed byte) calculate_matrix::sx#0 ← (signed byte) sx#10
  [24] (signed byte) calculate_matrix::sy#0 ← (signed byte) sy#10
  [25] call calculate_matrix 
  to:anim::@15
anim::@15: scope:[anim]  from anim::@6
  [26] phi()
  [27] call store_matrix 
  to:anim::@7
anim::@7: scope:[anim]  from anim::@15 anim::@17
  [28] (byte) anim::i#2 ← phi( anim::@15/(byte/signed byte/word/signed word/dword/signed dword) 0 anim::@17/(byte) anim::i#1 )
  [29] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0)
  [30] (signed byte) rotate_matrix::x#0 ← *((const signed byte[8]) xs#0 + (byte) anim::i#2)
  [31] (signed byte) rotate_matrix::y#0 ← *((const signed byte[8]) ys#0 + (byte) anim::i#2)
  [32] (signed byte) rotate_matrix::z#0 ← *((const signed byte[8]) zs#0 + (byte) anim::i#2)
  [33] call rotate_matrix 
  to:anim::@17
anim::@17: scope:[anim]  from anim::@7
  [34] *((const signed byte[8]) xrs#0 + (byte) anim::i#2) ← *((const signed byte*) xr#0)
  [35] *((const signed byte[8]) yrs#0 + (byte) anim::i#2) ← *((const signed byte*) yr#0)
  [36] *((const signed byte[8]) zrs#0 + (byte) anim::i#2) ← *((const signed byte*) zr#0)
  [37] *((const signed byte[8]) pps#0 + (byte) anim::i#2) ← *((const signed byte*) pp#0)
  [38] *((const signed byte[8]) xps#0 + (byte) anim::i#2) ← *((const signed byte*) xp#0)
  [39] *((const signed byte[8]) yps#0 + (byte) anim::i#2) ← *((const signed byte*) yp#0)
  [40] (byte) anim::i2#0 ← (byte) anim::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [41] (byte/word/signed word/dword/signed dword~) anim::$6 ← (byte/word/signed word/dword/signed dword) 128 + (byte)*((const signed byte*) xp#0)
  [42] *((const byte*) SPRITES_XPOS#0 + (byte) anim::i2#0) ← (byte/word/signed word/dword/signed dword~) anim::$6
  [43] (byte/word/signed word/dword/signed dword~) anim::$8 ← (byte/word/signed word/dword/signed dword) 128 + (byte)*((const signed byte*) yp#0)
  [44] *((const byte*) SPRITES_YPOS#0 + (byte) anim::i2#0) ← (byte/word/signed word/dword/signed dword~) anim::$8
  [45] (byte) anim::i#1 ← ++ (byte) anim::i#2
  [46] if((byte) anim::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto anim::@7
  to:anim::@13
anim::@13: scope:[anim]  from anim::@17
  [47] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_GREY#0
  [48] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0
  [49] (signed byte) sx#3 ← (signed byte) sx#10 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [50] (signed byte) sy#3 ← (signed byte) sy#10 - (byte/signed byte/word/signed word/dword/signed dword) 3
  to:anim::@1
rotate_matrix: scope:[rotate_matrix]  from anim::@7
  [51] *((const signed byte*) xr#0) ← (signed byte) rotate_matrix::x#0
  [52] *((const signed byte*) yr#0) ← (signed byte) rotate_matrix::y#0
  [53] *((const signed byte*) zr#0) ← (signed byte) rotate_matrix::z#0
  asm { ldxzr C1: ldamulf_sqr1,x sec C2: sbcmulf_sqr2,x staC3+1 F1: ldamulf_sqr1,x sec F2: sbcmulf_sqr2,x staF3+1 I1: ldamulf_sqr1,x sec I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr I3: lda#0 clc G1: adcmulf_sqr1,x sec G2: sbcmulf_sqr2,x clc H1: adcmulf_sqr1,y sec H2: sbcmulf_sqr2,y stazr staPP+1 PP: ldaPERSP_Z stapp stapsp1 eor#$ff stapsp2 C3: lda#0 clc A1: adcmulf_sqr1,x sec A2: sbcmulf_sqr2,x clc B1: adcmulf_sqr1,y sec B2: sbcmulf_sqr2,y staxr staXX+1 clc F3: lda#0 clc D1: adcmulf_sqr1,x sec D2: sbcmulf_sqr2,x clc E1: adcmulf_sqr1,y sec E2: sbcmulf_sqr2,y stayr tay lda(psp1),y sec sbc(psp2),y stayp XX: ldy#0 lda(psp1),y sec sbc(psp2),y staxp  }
  to:rotate_matrix::@return
rotate_matrix::@return: scope:[rotate_matrix]  from rotate_matrix
  [55] return 
  to:@return
store_matrix: scope:[store_matrix]  from anim::@15
  asm { ldarotation_matrix+0 starotate_matrix.A1+1 eor#$ff starotate_matrix.A2+1 ldarotation_matrix+1 starotate_matrix.B1+1 eor#$ff starotate_matrix.B2+1 ldarotation_matrix+2 starotate_matrix.C1+1 eor#$ff starotate_matrix.C2+1 ldarotation_matrix+3 starotate_matrix.D1+1 eor#$ff starotate_matrix.D2+1 ldarotation_matrix+4 starotate_matrix.E1+1 eor#$ff starotate_matrix.E2+1 ldarotation_matrix+5 starotate_matrix.F1+1 eor#$ff starotate_matrix.F2+1 ldarotation_matrix+6 starotate_matrix.G1+1 eor#$ff starotate_matrix.G2+1 ldarotation_matrix+7 starotate_matrix.H1+1 eor#$ff starotate_matrix.H2+1 ldarotation_matrix+8 starotate_matrix.I1+1 eor#$ff starotate_matrix.I2+1  }
  to:store_matrix::@return
store_matrix::@return: scope:[store_matrix]  from store_matrix
  [57] return 
  to:@return
calculate_matrix: scope:[calculate_matrix]  from anim::@6
  [58] (signed byte) calculate_matrix::t1#0 ← (signed byte) calculate_matrix::sy#0 - (const signed byte) sz#0
  [59] (signed byte) calculate_matrix::t2#0 ← (signed byte) calculate_matrix::sy#0 + (const signed byte) sz#0
  [60] (signed byte) calculate_matrix::t3#0 ← (signed byte) calculate_matrix::sx#0
  [61] (signed byte) calculate_matrix::t4#0 ← (signed byte) calculate_matrix::sx#0
  [62] (signed byte) calculate_matrix::t5#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t2#0
  [63] (signed byte) calculate_matrix::t6#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::t1#0
  [64] (signed byte) calculate_matrix::t7#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t1#0
  [65] (signed byte) calculate_matrix::t8#0 ← (signed byte) calculate_matrix::t2#0 - (signed byte) calculate_matrix::sx#0
  [66] (signed byte) calculate_matrix::t9#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sx#0
  [67] (signed byte) calculate_matrix::t10#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sx#0
  [68] (signed byte~) calculate_matrix::$10 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t1#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t2#0)
  [69] *((const signed byte[9]) rotation_matrix#0) ← (signed byte~) calculate_matrix::$10
  [70] (signed byte~) calculate_matrix::$11 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t1#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t2#0)
  [71] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (signed byte~) calculate_matrix::$11
  [72] (signed byte~) calculate_matrix::$12 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0)
  [73] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (signed byte~) calculate_matrix::$12
  [74] (signed byte~) calculate_matrix::$13 ← *((const signed byte*) SINH#0+(const signed byte) sz#0 + (signed byte) calculate_matrix::t3#0) - *((const signed byte*) SINH#0+-(const signed byte) sz#0 + (signed byte) calculate_matrix::t4#0)
  [75] (signed byte~) calculate_matrix::$14 ← (signed byte~) calculate_matrix::$13 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0)
  [76] (signed byte~) calculate_matrix::$15 ← (signed byte~) calculate_matrix::$14 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0)
  [77] (signed byte~) calculate_matrix::$16 ← (signed byte~) calculate_matrix::$15 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0)
  [78] (signed byte~) calculate_matrix::$17 ← (signed byte~) calculate_matrix::$16 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0)
  [79] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (signed byte~) calculate_matrix::$17
  [80] (signed byte~) calculate_matrix::$18 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0)
  [81] (signed byte~) calculate_matrix::$19 ← (signed byte~) calculate_matrix::$18 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0)
  [82] (signed byte~) calculate_matrix::$20 ← (signed byte~) calculate_matrix::$19 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0)
  [83] (signed byte~) calculate_matrix::$21 ← (signed byte~) calculate_matrix::$20 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0)
  [84] (signed byte~) calculate_matrix::$22 ← (signed byte~) calculate_matrix::$21 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0)
  [85] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (signed byte~) calculate_matrix::$22
  [86] (signed byte~) calculate_matrix::$23 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t9#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t10#0)
  [87] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (signed byte~) calculate_matrix::$23
  [88] (signed byte~) calculate_matrix::$24 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) - *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0)
  [89] (signed byte~) calculate_matrix::$25 ← (signed byte~) calculate_matrix::$24 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0)
  [90] (signed byte~) calculate_matrix::$26 ← (signed byte~) calculate_matrix::$25 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0)
  [91] (signed byte~) calculate_matrix::$27 ← (signed byte~) calculate_matrix::$26 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0)
  [92] (signed byte~) calculate_matrix::$28 ← (signed byte~) calculate_matrix::$27 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0)
  [93] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (signed byte~) calculate_matrix::$28
  [94] (signed byte~) calculate_matrix::$29 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t4#0)
  [95] (signed byte~) calculate_matrix::$30 ← (signed byte~) calculate_matrix::$29 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0)
  [96] (signed byte~) calculate_matrix::$31 ← (signed byte~) calculate_matrix::$30 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0)
  [97] (signed byte~) calculate_matrix::$32 ← (signed byte~) calculate_matrix::$31 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0)
  [98] (signed byte~) calculate_matrix::$33 ← (signed byte~) calculate_matrix::$32 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0)
  [99] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 7) ← (signed byte~) calculate_matrix::$33
  [100] (signed byte~) calculate_matrix::$34 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t9#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t10#0)
  [101] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (signed byte~) calculate_matrix::$34
  to:calculate_matrix::@return
calculate_matrix::@return: scope:[calculate_matrix]  from calculate_matrix
  [102] return 
  to:@return
sprites_init: scope:[sprites_init]  from main
  [103] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255
  to:sprites_init::@1
sprites_init::@1: scope:[sprites_init]  from sprites_init sprites_init::@1
  [104] (byte) sprites_init::i#2 ← phi( sprites_init/(byte/signed byte/word/signed word/dword/signed dword) 0 sprites_init::@1/(byte) sprites_init::i#1 )
  [105] *((const byte*) sprites_init::sprites_ptr#0 + (byte) sprites_init::i#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64
  [106] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::i#2) ← (const byte) GREEN#0
  [107] (byte) sprites_init::i#1 ← ++ (byte) sprites_init::i#2
  [108] if((byte) sprites_init::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto sprites_init::@1
  to:sprites_init::@return
sprites_init::@return: scope:[sprites_init]  from sprites_init::@1
  [109] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) BORDERCOL
(signed byte*) COSH
(signed byte*) COSQ
(byte) GREEN
(byte) LIGHT_BLUE
(byte) LIGHT_GREY
(signed byte*) PERSP_Z
(byte*) RASTER
(signed byte*) SINH
(byte*) SINH_HI
(byte*) SINH_LO
(signed byte*) SINQ
(byte*) SINQ_HI
(byte*) SINQ_LO
(byte*) SPRITE
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(void()) anim()
(byte/word/signed word/dword/signed dword~) anim::$6 202.0
(byte/word/signed word/dword/signed dword~) anim::$8 202.0
(byte) anim::i
(byte) anim::i#1 151.5
(byte) anim::i#2 71.29411764705881
(byte) anim::i2
(byte) anim::i2#0 75.75
(void()) calculate_matrix((signed byte) calculate_matrix::sx , (signed byte) calculate_matrix::sy , (signed byte) calculate_matrix::sz)
(signed byte~) calculate_matrix::$10 4.0
(signed byte~) calculate_matrix::$11 4.0
(signed byte~) calculate_matrix::$12 4.0
(signed byte~) calculate_matrix::$13 4.0
(signed byte~) calculate_matrix::$14 4.0
(signed byte~) calculate_matrix::$15 4.0
(signed byte~) calculate_matrix::$16 4.0
(signed byte~) calculate_matrix::$17 4.0
(signed byte~) calculate_matrix::$18 4.0
(signed byte~) calculate_matrix::$19 4.0
(signed byte~) calculate_matrix::$20 4.0
(signed byte~) calculate_matrix::$21 4.0
(signed byte~) calculate_matrix::$22 4.0
(signed byte~) calculate_matrix::$23 4.0
(signed byte~) calculate_matrix::$24 4.0
(signed byte~) calculate_matrix::$25 4.0
(signed byte~) calculate_matrix::$26 4.0
(signed byte~) calculate_matrix::$27 4.0
(signed byte~) calculate_matrix::$28 4.0
(signed byte~) calculate_matrix::$29 4.0
(signed byte~) calculate_matrix::$30 4.0
(signed byte~) calculate_matrix::$31 4.0
(signed byte~) calculate_matrix::$32 4.0
(signed byte~) calculate_matrix::$33 4.0
(signed byte~) calculate_matrix::$34 4.0
(signed byte) calculate_matrix::sx
(signed byte) calculate_matrix::sx#0 2.4545454545454546
(signed byte) calculate_matrix::sy
(signed byte) calculate_matrix::sy#0 1.5333333333333332
(signed byte) calculate_matrix::sz
(signed byte) calculate_matrix::t1
(signed byte) calculate_matrix::t1#0 0.8333333333333333
(signed byte) calculate_matrix::t10
(signed byte) calculate_matrix::t10#0 0.18181818181818182
(signed byte) calculate_matrix::t2
(signed byte) calculate_matrix::t2#0 0.9090909090909092
(signed byte) calculate_matrix::t3
(signed byte) calculate_matrix::t3#0 0.29411764705882354
(signed byte) calculate_matrix::t4
(signed byte) calculate_matrix::t4#0 0.30303030303030304
(signed byte) calculate_matrix::t5
(signed byte) calculate_matrix::t5#0 0.29411764705882354
(signed byte) calculate_matrix::t6
(signed byte) calculate_matrix::t6#0 0.3125
(signed byte) calculate_matrix::t7
(signed byte) calculate_matrix::t7#0 0.30303030303030304
(signed byte) calculate_matrix::t8
(signed byte) calculate_matrix::t8#0 0.30303030303030304
(signed byte) calculate_matrix::t9
(signed byte) calculate_matrix::t9#0 0.1764705882352941
(void()) main()
(byte*) mulf_sqr1
(byte*) mulf_sqr2
(signed byte*) pp
(signed byte[8]) pps
(word*) psp1
(word*) psp2
(void()) rotate_matrix((signed byte) rotate_matrix::x , (signed byte) rotate_matrix::y , (signed byte) rotate_matrix::z)
(signed byte) rotate_matrix::x
(signed byte) rotate_matrix::x#0 34.33333333333333
(signed byte) rotate_matrix::y
(signed byte) rotate_matrix::y#0 34.33333333333333
(signed byte) rotate_matrix::z
(signed byte) rotate_matrix::z#0 34.33333333333333
(signed byte[9]) rotation_matrix
(void()) sprites_init()
(byte*) sprites_init::SCREEN
(byte) sprites_init::i
(byte) sprites_init::i#1 16.5
(byte) sprites_init::i#2 14.666666666666666
(byte*) sprites_init::sprites_ptr
(void()) store_matrix()
(signed byte) sx
(signed byte) sx#10 1.1379310344827585
(signed byte) sx#3 11.0
(signed byte) sy
(signed byte) sy#10 1.0999999999999999
(signed byte) sy#3 22.0
(signed byte) sz
(signed byte*) xp
(signed byte[8]) xps
(signed byte*) xr
(signed byte[8]) xrs
(signed byte[8]) xs
(signed byte*) yp
(signed byte[8]) yps
(signed byte*) yr
(signed byte[8]) yrs
(signed byte[8]) ys
(signed byte*) zr
(signed byte[8]) zrs
(signed byte[8]) zs

Initial phi equivalence classes
[ sx#10 sx#3 ]
[ sy#10 sy#3 ]
[ anim::i#2 anim::i#1 ]
[ sprites_init::i#2 sprites_init::i#1 ]
Added variable calculate_matrix::sx#0 to zero page equivalence class [ calculate_matrix::sx#0 ]
Added variable calculate_matrix::sy#0 to zero page equivalence class [ calculate_matrix::sy#0 ]
Added variable rotate_matrix::x#0 to zero page equivalence class [ rotate_matrix::x#0 ]
Added variable rotate_matrix::y#0 to zero page equivalence class [ rotate_matrix::y#0 ]
Added variable rotate_matrix::z#0 to zero page equivalence class [ rotate_matrix::z#0 ]
Added variable anim::i2#0 to zero page equivalence class [ anim::i2#0 ]
Added variable anim::$6 to zero page equivalence class [ anim::$6 ]
Added variable anim::$8 to zero page equivalence class [ anim::$8 ]
Added variable calculate_matrix::t1#0 to zero page equivalence class [ calculate_matrix::t1#0 ]
Added variable calculate_matrix::t2#0 to zero page equivalence class [ calculate_matrix::t2#0 ]
Added variable calculate_matrix::t3#0 to zero page equivalence class [ calculate_matrix::t3#0 ]
Added variable calculate_matrix::t4#0 to zero page equivalence class [ calculate_matrix::t4#0 ]
Added variable calculate_matrix::t5#0 to zero page equivalence class [ calculate_matrix::t5#0 ]
Added variable calculate_matrix::t6#0 to zero page equivalence class [ calculate_matrix::t6#0 ]
Added variable calculate_matrix::t7#0 to zero page equivalence class [ calculate_matrix::t7#0 ]
Added variable calculate_matrix::t8#0 to zero page equivalence class [ calculate_matrix::t8#0 ]
Added variable calculate_matrix::t9#0 to zero page equivalence class [ calculate_matrix::t9#0 ]
Added variable calculate_matrix::t10#0 to zero page equivalence class [ calculate_matrix::t10#0 ]
Added variable calculate_matrix::$10 to zero page equivalence class [ calculate_matrix::$10 ]
Added variable calculate_matrix::$11 to zero page equivalence class [ calculate_matrix::$11 ]
Added variable calculate_matrix::$12 to zero page equivalence class [ calculate_matrix::$12 ]
Added variable calculate_matrix::$13 to zero page equivalence class [ calculate_matrix::$13 ]
Added variable calculate_matrix::$14 to zero page equivalence class [ calculate_matrix::$14 ]
Added variable calculate_matrix::$15 to zero page equivalence class [ calculate_matrix::$15 ]
Added variable calculate_matrix::$16 to zero page equivalence class [ calculate_matrix::$16 ]
Added variable calculate_matrix::$17 to zero page equivalence class [ calculate_matrix::$17 ]
Added variable calculate_matrix::$18 to zero page equivalence class [ calculate_matrix::$18 ]
Added variable calculate_matrix::$19 to zero page equivalence class [ calculate_matrix::$19 ]
Added variable calculate_matrix::$20 to zero page equivalence class [ calculate_matrix::$20 ]
Added variable calculate_matrix::$21 to zero page equivalence class [ calculate_matrix::$21 ]
Added variable calculate_matrix::$22 to zero page equivalence class [ calculate_matrix::$22 ]
Added variable calculate_matrix::$23 to zero page equivalence class [ calculate_matrix::$23 ]
Added variable calculate_matrix::$24 to zero page equivalence class [ calculate_matrix::$24 ]
Added variable calculate_matrix::$25 to zero page equivalence class [ calculate_matrix::$25 ]
Added variable calculate_matrix::$26 to zero page equivalence class [ calculate_matrix::$26 ]
Added variable calculate_matrix::$27 to zero page equivalence class [ calculate_matrix::$27 ]
Added variable calculate_matrix::$28 to zero page equivalence class [ calculate_matrix::$28 ]
Added variable calculate_matrix::$29 to zero page equivalence class [ calculate_matrix::$29 ]
Added variable calculate_matrix::$30 to zero page equivalence class [ calculate_matrix::$30 ]
Added variable calculate_matrix::$31 to zero page equivalence class [ calculate_matrix::$31 ]
Added variable calculate_matrix::$32 to zero page equivalence class [ calculate_matrix::$32 ]
Added variable calculate_matrix::$33 to zero page equivalence class [ calculate_matrix::$33 ]
Added variable calculate_matrix::$34 to zero page equivalence class [ calculate_matrix::$34 ]
Complete equivalence classes
[ sx#10 sx#3 ]
[ sy#10 sy#3 ]
[ anim::i#2 anim::i#1 ]
[ sprites_init::i#2 sprites_init::i#1 ]
[ calculate_matrix::sx#0 ]
[ calculate_matrix::sy#0 ]
[ rotate_matrix::x#0 ]
[ rotate_matrix::y#0 ]
[ rotate_matrix::z#0 ]
[ anim::i2#0 ]
[ anim::$6 ]
[ anim::$8 ]
[ calculate_matrix::t1#0 ]
[ calculate_matrix::t2#0 ]
[ calculate_matrix::t3#0 ]
[ calculate_matrix::t4#0 ]
[ calculate_matrix::t5#0 ]
[ calculate_matrix::t6#0 ]
[ calculate_matrix::t7#0 ]
[ calculate_matrix::t8#0 ]
[ calculate_matrix::t9#0 ]
[ calculate_matrix::t10#0 ]
[ calculate_matrix::$10 ]
[ calculate_matrix::$11 ]
[ calculate_matrix::$12 ]
[ calculate_matrix::$13 ]
[ calculate_matrix::$14 ]
[ calculate_matrix::$15 ]
[ calculate_matrix::$16 ]
[ calculate_matrix::$17 ]
[ calculate_matrix::$18 ]
[ calculate_matrix::$19 ]
[ calculate_matrix::$20 ]
[ calculate_matrix::$21 ]
[ calculate_matrix::$22 ]
[ calculate_matrix::$23 ]
[ calculate_matrix::$24 ]
[ calculate_matrix::$25 ]
[ calculate_matrix::$26 ]
[ calculate_matrix::$27 ]
[ calculate_matrix::$28 ]
[ calculate_matrix::$29 ]
[ calculate_matrix::$30 ]
[ calculate_matrix::$31 ]
[ calculate_matrix::$32 ]
[ calculate_matrix::$33 ]
[ calculate_matrix::$34 ]
Allocated zp ZP_BYTE:2 [ sx#10 sx#3 ]
Allocated zp ZP_BYTE:3 [ sy#10 sy#3 ]
Allocated zp ZP_BYTE:4 [ anim::i#2 anim::i#1 ]
Allocated zp ZP_BYTE:5 [ sprites_init::i#2 sprites_init::i#1 ]
Allocated zp ZP_BYTE:6 [ calculate_matrix::sx#0 ]
Allocated zp ZP_BYTE:7 [ calculate_matrix::sy#0 ]
Allocated zp ZP_BYTE:8 [ rotate_matrix::x#0 ]
Allocated zp ZP_BYTE:9 [ rotate_matrix::y#0 ]
Allocated zp ZP_BYTE:10 [ rotate_matrix::z#0 ]
Allocated zp ZP_BYTE:11 [ anim::i2#0 ]
Allocated zp ZP_BYTE:12 [ anim::$6 ]
Allocated zp ZP_BYTE:13 [ anim::$8 ]
Allocated zp ZP_BYTE:14 [ calculate_matrix::t1#0 ]
Allocated zp ZP_BYTE:15 [ calculate_matrix::t2#0 ]
Allocated zp ZP_BYTE:16 [ calculate_matrix::t3#0 ]
Allocated zp ZP_BYTE:17 [ calculate_matrix::t4#0 ]
Allocated zp ZP_BYTE:18 [ calculate_matrix::t5#0 ]
Allocated zp ZP_BYTE:19 [ calculate_matrix::t6#0 ]
Allocated zp ZP_BYTE:20 [ calculate_matrix::t7#0 ]
Allocated zp ZP_BYTE:21 [ calculate_matrix::t8#0 ]
Allocated zp ZP_BYTE:22 [ calculate_matrix::t9#0 ]
Allocated zp ZP_BYTE:23 [ calculate_matrix::t10#0 ]
Allocated zp ZP_BYTE:24 [ calculate_matrix::$10 ]
Allocated zp ZP_BYTE:25 [ calculate_matrix::$11 ]
Allocated zp ZP_BYTE:26 [ calculate_matrix::$12 ]
Allocated zp ZP_BYTE:27 [ calculate_matrix::$13 ]
Allocated zp ZP_BYTE:28 [ calculate_matrix::$14 ]
Allocated zp ZP_BYTE:29 [ calculate_matrix::$15 ]
Allocated zp ZP_BYTE:30 [ calculate_matrix::$16 ]
Allocated zp ZP_BYTE:31 [ calculate_matrix::$17 ]
Allocated zp ZP_BYTE:32 [ calculate_matrix::$18 ]
Allocated zp ZP_BYTE:33 [ calculate_matrix::$19 ]
Allocated zp ZP_BYTE:34 [ calculate_matrix::$20 ]
Allocated zp ZP_BYTE:35 [ calculate_matrix::$21 ]
Allocated zp ZP_BYTE:36 [ calculate_matrix::$22 ]
Allocated zp ZP_BYTE:37 [ calculate_matrix::$23 ]
Allocated zp ZP_BYTE:38 [ calculate_matrix::$24 ]
Allocated zp ZP_BYTE:39 [ calculate_matrix::$25 ]
Allocated zp ZP_BYTE:40 [ calculate_matrix::$26 ]
Allocated zp ZP_BYTE:41 [ calculate_matrix::$27 ]
Allocated zp ZP_BYTE:42 [ calculate_matrix::$28 ]
Allocated zp ZP_BYTE:43 [ calculate_matrix::$29 ]
Allocated zp ZP_BYTE:44 [ calculate_matrix::$30 ]
Allocated zp ZP_BYTE:45 [ calculate_matrix::$31 ]
Allocated zp ZP_BYTE:46 [ calculate_matrix::$32 ]
Allocated zp ZP_BYTE:47 [ calculate_matrix::$33 ]
Allocated zp ZP_BYTE:48 [ calculate_matrix::$34 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  .const GREEN = 5
  .const LIGHT_BLUE = $e
  .const LIGHT_GREY = $f
  .label xr = $f0
  .label yr = $f1
  .label zr = $f2
  .label pp = $f3
  .label xp = $f4
  .label yp = $f5
  .label psp1 = $f6
  .label psp2 = $f8
  .const sz = 0
  .label mulf_sqr1 = $2400
  .label mulf_sqr2 = $2600
  .label SPRITE = $3000
  .label PERSP_Z = $2800
  .label SINH = $2000
  .label SINQ = $2200
  .label SINH_LO = $4000
  .label SINH_HI = $4200
  .label SINQ_LO = $4400
  .label SINQ_HI = $4600
  .label COSH = SINH+$40
  .label COSQ = SINQ+$40
  .label sx = 2
  .label sy = 3
//SEG2 @begin
bbegin:
  jmp b30
//SEG3 @30
b30:
//SEG4 kickasm(location (const byte*) mulf_sqr1#0) {{ .for(var i=0;i<$200;i++) {     	.if(i<=159) { .byte round((i*i)/256) }     	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }     	.if(i>351) { .byte round(((512-i)*(512-i))/256) }     }  }}
//SEG5 kickasm(location (const byte*) mulf_sqr2#0) {{ .for(var i=0;i<$200;i++) {     	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }     	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }     	.if(i>351) { .byte round(((i-511)*(i-511))/256) }       }  }}
//SEG6 kickasm(location (const byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))     .for (var y=0; y<21; y++)         .for (var x=0;x<3; x++)             .byte pic.getSinglecolorByte(x,y)  }}
//SEG7 kickasm(location (const signed byte*) PERSP_Z#0) {{ {     .var d = 256.0	     .var z0 = 6.0	     // These values of d/z0 result in table values from $20 to $40 (effectively max is $3f)     .for(var z=0;z<$100;z++) {     	.if(z>127) {     		.byte round(d / (z0 - ((z - 256) / 64.0)));     	} else {     		.byte round(d / (z0 - (z / 64.0)));     	}     } 	}  }}
//SEG8 kickasm(location (const signed byte*) SINH#0) {{ {     .var min = -$2000     .var max = $2000     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)     }     }  }}
//SEG9 kickasm(location (const signed byte*) SINQ#0) {{ {     .var min = -$1000     .var max = $1000     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)     }     }  }}
//SEG10 kickasm(location (const byte*) SINH_LO#0) {{ {     .var min = -$2000     .var max = $2000     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte <(min+(ampl/2)+(ampl/2)*sin(rad))     }     }  }}
//SEG11 kickasm(location (const byte*) SINH_HI#0) {{ {     .var min = -$2000     .var max = $2000     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte >(min+(ampl/2)+(ampl/2)*sin(rad))     }     }  }}
//SEG12 kickasm(location (const byte*) SINQ_LO#0) {{ {     .var min = -$1000     .var max = $1000     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte <(min+(ampl/2)+(ampl/2)*sin(rad))     }     }  }}
//SEG13 kickasm(location (const byte*) SINQ_HI#0) {{ {     .var min = -$1000     .var max = $1000     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte >(min+(ampl/2)+(ampl/2)*sin(rad))     }     }  }}
//SEG14 [11] call main 
  jsr main
//SEG15 [12] phi from @30 to @end [phi:@30->@end]
bend_from_b30:
  jmp bend
//SEG16 @end
bend:
//SEG17 main
main: {
  //SEG18 asm { sei  }
    sei
  //SEG19 [14] call sprites_init 
    jsr sprites_init
    jmp b1
  //SEG20 main::@1
  b1:
  //SEG21 [15] *((const word*) psp1#0) ← ((word))(const byte*) mulf_sqr1#0 -- _deref_pwuc1=vwuc2 
    lda #<mulf_sqr1
    sta psp1
    lda #>mulf_sqr1
    sta psp1+1
  //SEG22 [16] *((const word*) psp2#0) ← ((word))(const byte*) mulf_sqr2#0 -- _deref_pwuc1=vwuc2 
    lda #<mulf_sqr2
    sta psp2
    lda #>mulf_sqr2
    sta psp2+1
  //SEG23 [17] call anim 
  //SEG24 [19] phi from main::@1 to anim [phi:main::@1->anim]
  anim_from_b1:
    jsr anim
    jmp breturn
  //SEG25 main::@return
  breturn:
  //SEG26 [18] return 
    rts
}
//SEG27 anim
anim: {
    .label _6 = $c
    .label _8 = $d
    .label i2 = $b
    .label i = 4
  //SEG28 [20] phi from anim to anim::@1 [phi:anim->anim::@1]
  b1_from_anim:
  //SEG29 [20] phi (signed byte) sy#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#0] -- vbsz1=vbuc1 
    lda #0
    sta sy
  //SEG30 [20] phi (signed byte) sx#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#1] -- vbsz1=vbuc1 
    lda #0
    sta sx
    jmp b1
  //SEG31 anim::@1
  b1:
    jmp b4
  //SEG32 anim::@4
  b4:
  //SEG33 [21] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto anim::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
    jmp b6
  //SEG34 anim::@6
  b6:
  //SEG35 [22] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG36 [23] (signed byte) calculate_matrix::sx#0 ← (signed byte) sx#10 -- vbsz1=vbsz2 
    lda sx
    sta calculate_matrix.sx
  //SEG37 [24] (signed byte) calculate_matrix::sy#0 ← (signed byte) sy#10 -- vbsz1=vbsz2 
    lda sy
    sta calculate_matrix.sy
  //SEG38 [25] call calculate_matrix 
    jsr calculate_matrix
  //SEG39 [26] phi from anim::@6 to anim::@15 [phi:anim::@6->anim::@15]
  b15_from_b6:
    jmp b15
  //SEG40 anim::@15
  b15:
  //SEG41 [27] call store_matrix 
    jsr store_matrix
  //SEG42 [28] phi from anim::@15 to anim::@7 [phi:anim::@15->anim::@7]
  b7_from_b15:
  //SEG43 [28] phi (byte) anim::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim::@15->anim::@7#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b7
  //SEG44 [28] phi from anim::@17 to anim::@7 [phi:anim::@17->anim::@7]
  b7_from_b17:
  //SEG45 [28] phi (byte) anim::i#2 = (byte) anim::i#1 [phi:anim::@17->anim::@7#0] -- register_copy 
    jmp b7
  //SEG46 anim::@7
  b7:
  //SEG47 [29] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG48 [30] (signed byte) rotate_matrix::x#0 ← *((const signed byte[8]) xs#0 + (byte) anim::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda xs,y
    sta rotate_matrix.x
  //SEG49 [31] (signed byte) rotate_matrix::y#0 ← *((const signed byte[8]) ys#0 + (byte) anim::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda ys,y
    sta rotate_matrix.y
  //SEG50 [32] (signed byte) rotate_matrix::z#0 ← *((const signed byte[8]) zs#0 + (byte) anim::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda zs,y
    sta rotate_matrix.z
  //SEG51 [33] call rotate_matrix 
    jsr rotate_matrix
    jmp b17
  //SEG52 anim::@17
  b17:
  //SEG53 [34] *((const signed byte[8]) xrs#0 + (byte) anim::i#2) ← *((const signed byte*) xr#0) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    ldy i
    lda xr
    sta xrs,y
  //SEG54 [35] *((const signed byte[8]) yrs#0 + (byte) anim::i#2) ← *((const signed byte*) yr#0) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    ldy i
    lda yr
    sta yrs,y
  //SEG55 [36] *((const signed byte[8]) zrs#0 + (byte) anim::i#2) ← *((const signed byte*) zr#0) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    ldy i
    lda zr
    sta zrs,y
  //SEG56 [37] *((const signed byte[8]) pps#0 + (byte) anim::i#2) ← *((const signed byte*) pp#0) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    ldy i
    lda pp
    sta pps,y
  //SEG57 [38] *((const signed byte[8]) xps#0 + (byte) anim::i#2) ← *((const signed byte*) xp#0) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    ldy i
    lda xp
    sta xps,y
  //SEG58 [39] *((const signed byte[8]) yps#0 + (byte) anim::i#2) ← *((const signed byte*) yp#0) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    ldy i
    lda yp
    sta yps,y
  //SEG59 [40] (byte) anim::i2#0 ← (byte) anim::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta i2
  //SEG60 [41] (byte/word/signed word/dword/signed dword~) anim::$6 ← (byte/word/signed word/dword/signed dword) 128 + (byte)*((const signed byte*) xp#0) -- vbuz1=vbuc1_plus__deref_pbuc2 
    lda #$80
    clc
    adc xp
    sta _6
  //SEG61 [42] *((const byte*) SPRITES_XPOS#0 + (byte) anim::i2#0) ← (byte/word/signed word/dword/signed dword~) anim::$6 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _6
    ldy i2
    sta SPRITES_XPOS,y
  //SEG62 [43] (byte/word/signed word/dword/signed dword~) anim::$8 ← (byte/word/signed word/dword/signed dword) 128 + (byte)*((const signed byte*) yp#0) -- vbuz1=vbuc1_plus__deref_pbuc2 
    lda #$80
    clc
    adc yp
    sta _8
  //SEG63 [44] *((const byte*) SPRITES_YPOS#0 + (byte) anim::i2#0) ← (byte/word/signed word/dword/signed dword~) anim::$8 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _8
    ldy i2
    sta SPRITES_YPOS,y
  //SEG64 [45] (byte) anim::i#1 ← ++ (byte) anim::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG65 [46] if((byte) anim::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto anim::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #8
    bne b7_from_b17
    jmp b13
  //SEG66 anim::@13
  b13:
  //SEG67 [47] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_GREY#0 -- _deref_pbuc1=vbuc2 
    lda #LIGHT_GREY
    sta BORDERCOL
  //SEG68 [48] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta BORDERCOL
  //SEG69 [49] (signed byte) sx#3 ← (signed byte) sx#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbsz1=vbsz1_plus_2 
    inc sx
    inc sx
  //SEG70 [50] (signed byte) sy#3 ← (signed byte) sy#10 - (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbsz1=vbsz1_minus_vbuc1 
    lda sy
    sec
    sbc #3
    sta sy
  //SEG71 [20] phi from anim::@13 to anim::@1 [phi:anim::@13->anim::@1]
  b1_from_b13:
  //SEG72 [20] phi (signed byte) sy#10 = (signed byte) sy#3 [phi:anim::@13->anim::@1#0] -- register_copy 
  //SEG73 [20] phi (signed byte) sx#10 = (signed byte) sx#3 [phi:anim::@13->anim::@1#1] -- register_copy 
    jmp b1
}
//SEG74 rotate_matrix
rotate_matrix: {
    .label x = 8
    .label y = 9
    .label z = $a
  //SEG75 [51] *((const signed byte*) xr#0) ← (signed byte) rotate_matrix::x#0 -- _deref_pbsc1=vbsz1 
    lda x
    sta xr
  //SEG76 [52] *((const signed byte*) yr#0) ← (signed byte) rotate_matrix::y#0 -- _deref_pbsc1=vbsz1 
    lda y
    sta yr
  //SEG77 [53] *((const signed byte*) zr#0) ← (signed byte) rotate_matrix::z#0 -- _deref_pbsc1=vbsz1 
    lda z
    sta zr
  //SEG78 asm { ldxzr C1: ldamulf_sqr1,x sec C2: sbcmulf_sqr2,x staC3+1 F1: ldamulf_sqr1,x sec F2: sbcmulf_sqr2,x staF3+1 I1: ldamulf_sqr1,x sec I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr I3: lda#0 clc G1: adcmulf_sqr1,x sec G2: sbcmulf_sqr2,x clc H1: adcmulf_sqr1,y sec H2: sbcmulf_sqr2,y stazr staPP+1 PP: ldaPERSP_Z stapp stapsp1 eor#$ff stapsp2 C3: lda#0 clc A1: adcmulf_sqr1,x sec A2: sbcmulf_sqr2,x clc B1: adcmulf_sqr1,y sec B2: sbcmulf_sqr2,y staxr staXX+1 clc F3: lda#0 clc D1: adcmulf_sqr1,x sec D2: sbcmulf_sqr2,x clc E1: adcmulf_sqr1,y sec E2: sbcmulf_sqr2,y stayr tay lda(psp1),y sec sbc(psp2),y stayp XX: ldy#0 lda(psp1),y sec sbc(psp2),y staxp  }
    ldx zr
  C1:
    lda mulf_sqr1,x
    sec
  C2:
    sbc mulf_sqr2,x
    sta C3+1
  F1:
    lda mulf_sqr1,x
    sec
  F2:
    sbc mulf_sqr2,x
    sta F3+1
  I1:
    lda mulf_sqr1,x
    sec
  I2:
    sbc mulf_sqr2,x
    sta I3+1
    ldx xr
    ldy yr
  I3:
    lda #0
    clc
  G1:
    adc mulf_sqr1,x
    sec
  G2:
    sbc mulf_sqr2,x
    clc
  H1:
    adc mulf_sqr1,y
    sec
  H2:
    sbc mulf_sqr2,y
    sta zr
    sta PP+1
  PP:
    lda PERSP_Z
    sta pp
    sta psp1
    eor #$ff
    sta psp2
  C3:
    lda #0
    clc
  A1:
    adc mulf_sqr1,x
    sec
  A2:
    sbc mulf_sqr2,x
    clc
  B1:
    adc mulf_sqr1,y
    sec
  B2:
    sbc mulf_sqr2,y
    sta xr
    sta XX+1
    clc
  F3:
    lda #0
    clc
  D1:
    adc mulf_sqr1,x
    sec
  D2:
    sbc mulf_sqr2,x
    clc
  E1:
    adc mulf_sqr1,y
    sec
  E2:
    sbc mulf_sqr2,y
    sta yr
    tay
    lda (psp1),y
    sec
    sbc (psp2),y
    sta yp
  XX:
    ldy #0
    lda (psp1),y
    sec
    sbc (psp2),y
    sta xp
    jmp breturn
  //SEG79 rotate_matrix::@return
  breturn:
  //SEG80 [55] return 
    rts
}
//SEG81 store_matrix
store_matrix: {
  //SEG82 asm { ldarotation_matrix+0 starotate_matrix.A1+1 eor#$ff starotate_matrix.A2+1 ldarotation_matrix+1 starotate_matrix.B1+1 eor#$ff starotate_matrix.B2+1 ldarotation_matrix+2 starotate_matrix.C1+1 eor#$ff starotate_matrix.C2+1 ldarotation_matrix+3 starotate_matrix.D1+1 eor#$ff starotate_matrix.D2+1 ldarotation_matrix+4 starotate_matrix.E1+1 eor#$ff starotate_matrix.E2+1 ldarotation_matrix+5 starotate_matrix.F1+1 eor#$ff starotate_matrix.F2+1 ldarotation_matrix+6 starotate_matrix.G1+1 eor#$ff starotate_matrix.G2+1 ldarotation_matrix+7 starotate_matrix.H1+1 eor#$ff starotate_matrix.H2+1 ldarotation_matrix+8 starotate_matrix.I1+1 eor#$ff starotate_matrix.I2+1  }
    lda rotation_matrix+0
    sta rotate_matrix.A1+1
    eor #$ff
    sta rotate_matrix.A2+1
    lda rotation_matrix+1
    sta rotate_matrix.B1+1
    eor #$ff
    sta rotate_matrix.B2+1
    lda rotation_matrix+2
    sta rotate_matrix.C1+1
    eor #$ff
    sta rotate_matrix.C2+1
    lda rotation_matrix+3
    sta rotate_matrix.D1+1
    eor #$ff
    sta rotate_matrix.D2+1
    lda rotation_matrix+4
    sta rotate_matrix.E1+1
    eor #$ff
    sta rotate_matrix.E2+1
    lda rotation_matrix+5
    sta rotate_matrix.F1+1
    eor #$ff
    sta rotate_matrix.F2+1
    lda rotation_matrix+6
    sta rotate_matrix.G1+1
    eor #$ff
    sta rotate_matrix.G2+1
    lda rotation_matrix+7
    sta rotate_matrix.H1+1
    eor #$ff
    sta rotate_matrix.H2+1
    lda rotation_matrix+8
    sta rotate_matrix.I1+1
    eor #$ff
    sta rotate_matrix.I2+1
    jmp breturn
  //SEG83 store_matrix::@return
  breturn:
  //SEG84 [57] return 
    rts
}
//SEG85 calculate_matrix
calculate_matrix: {
    .label _10 = $18
    .label _11 = $19
    .label _12 = $1a
    .label _13 = $1b
    .label _14 = $1c
    .label _15 = $1d
    .label _16 = $1e
    .label _17 = $1f
    .label _18 = $20
    .label _19 = $21
    .label _20 = $22
    .label _21 = $23
    .label _22 = $24
    .label _23 = $25
    .label _24 = $26
    .label _25 = $27
    .label _26 = $28
    .label _27 = $29
    .label _28 = $2a
    .label _29 = $2b
    .label _30 = $2c
    .label _31 = $2d
    .label _32 = $2e
    .label _33 = $2f
    .label _34 = $30
    .label sx = 6
    .label sy = 7
    .label t1 = $e
    .label t2 = $f
    .label t3 = $10
    .label t4 = $11
    .label t5 = $12
    .label t6 = $13
    .label t7 = $14
    .label t8 = $15
    .label t9 = $16
    .label t10 = $17
  //SEG86 [58] (signed byte) calculate_matrix::t1#0 ← (signed byte) calculate_matrix::sy#0 - (const signed byte) sz#0 -- vbsz1=vbsz2_minus_vbsc1 
    lda sy
    sec
    sbc #sz
    sta t1
  //SEG87 [59] (signed byte) calculate_matrix::t2#0 ← (signed byte) calculate_matrix::sy#0 + (const signed byte) sz#0 -- vbsz1=vbsz2_plus_vbsc1 
    lda #sz
    clc
    adc sy
    sta t2
  //SEG88 [60] (signed byte) calculate_matrix::t3#0 ← (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsz2 
    lda sx
    sta t3
  //SEG89 [61] (signed byte) calculate_matrix::t4#0 ← (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsz2 
    lda sx
    sta t4
  //SEG90 [62] (signed byte) calculate_matrix::t5#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t2#0 -- vbsz1=vbsz2_plus_vbsz3 
    lda sx
    clc
    adc t2
    sta t5
  //SEG91 [63] (signed byte) calculate_matrix::t6#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::t1#0 -- vbsz1=vbsz2_minus_vbsz3 
    lda sx
    sec
    sbc t1
    sta t6
  //SEG92 [64] (signed byte) calculate_matrix::t7#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t1#0 -- vbsz1=vbsz2_plus_vbsz3 
    lda sx
    clc
    adc t1
    sta t7
  //SEG93 [65] (signed byte) calculate_matrix::t8#0 ← (signed byte) calculate_matrix::t2#0 - (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsz2_minus_vbsz3 
    lda t2
    sec
    sbc sx
    sta t8
  //SEG94 [66] (signed byte) calculate_matrix::t9#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsz2_minus_vbsz3 
    lda sy
    sec
    sbc sx
    sta t9
  //SEG95 [67] (signed byte) calculate_matrix::t10#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsz2_plus_vbsz3 
    lda sy
    clc
    adc sx
    sta t10
  //SEG96 [68] (signed byte~) calculate_matrix::$10 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t1#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t2#0) -- vbsz1=pbsc1_derefidx_vbsz2_plus_pbsc1_derefidx_vbsz3 
    ldx t1
    ldy t2
    clc
    lda COSH,x
    adc COSH,y
    sta _10
  //SEG97 [69] *((const signed byte[9]) rotation_matrix#0) ← (signed byte~) calculate_matrix::$10 -- _deref_pbsc1=vbsz1 
    lda _10
    sta rotation_matrix
  //SEG98 [70] (signed byte~) calculate_matrix::$11 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t1#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t2#0) -- vbsz1=pbsc1_derefidx_vbsz2_minus_pbsc1_derefidx_vbsz3 
    ldx t1
    ldy t2
    sec
    lda SINH,x
    sbc SINH,y
    sta _11
  //SEG99 [71] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (signed byte~) calculate_matrix::$11 -- _deref_pbsc1=vbsz1 
    lda _11
    sta rotation_matrix+1
  //SEG100 [72] (signed byte~) calculate_matrix::$12 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) -- vbsz1=pbsc1_derefidx_vbsz2_plus_pbsc1_derefidx_vbsz2 
    ldy sy
    clc
    lda SINH,y
    adc SINH,y
    sta _12
  //SEG101 [73] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (signed byte~) calculate_matrix::$12 -- _deref_pbsc1=vbsz1 
    lda _12
    sta rotation_matrix+2
  //SEG102 [74] (signed byte~) calculate_matrix::$13 ← *((const signed byte*) SINH#0+(const signed byte) sz#0 + (signed byte) calculate_matrix::t3#0) - *((const signed byte*) SINH#0+-(const signed byte) sz#0 + (signed byte) calculate_matrix::t4#0) -- vbsz1=pbsc1_derefidx_vbsz2_minus_pbsc2_derefidx_vbsz3 
    ldx t3
    ldy t4
    sec
    lda SINH+sz,x
    sbc SINH+-sz,y
    sta _13
  //SEG103 [75] (signed byte~) calculate_matrix::$14 ← (signed byte~) calculate_matrix::$13 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0) -- vbsz1=vbsz2_plus_pbsc1_derefidx_vbsz3 
    lda _13
    ldy t6
    clc
    adc COSQ,y
    sta _14
  //SEG104 [76] (signed byte~) calculate_matrix::$15 ← (signed byte~) calculate_matrix::$14 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda _14
    ldy t5
    sec
    sbc COSQ,y
    sta _15
  //SEG105 [77] (signed byte~) calculate_matrix::$16 ← (signed byte~) calculate_matrix::$15 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0) -- vbsz1=vbsz2_plus_pbsc1_derefidx_vbsz3 
    lda _15
    ldy t8
    clc
    adc COSQ,y
    sta _16
  //SEG106 [78] (signed byte~) calculate_matrix::$17 ← (signed byte~) calculate_matrix::$16 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda _16
    ldy t7
    sec
    sbc COSQ,y
    sta _17
  //SEG107 [79] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (signed byte~) calculate_matrix::$17 -- _deref_pbsc1=vbsz1 
    lda _17
    sta rotation_matrix+3
  //SEG108 [80] (signed byte~) calculate_matrix::$18 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) -- vbsz1=pbsc1_derefidx_vbsz2_plus_pbsc1_derefidx_vbsz3 
    ldx t3
    ldy t4
    clc
    lda COSH,x
    adc COSH,y
    sta _18
  //SEG109 [81] (signed byte~) calculate_matrix::$19 ← (signed byte~) calculate_matrix::$18 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0) -- vbsz1=vbsz2_plus_pbsc1_derefidx_vbsz3 
    lda _18
    ldy t5
    clc
    adc SINQ,y
    sta _19
  //SEG110 [82] (signed byte~) calculate_matrix::$20 ← (signed byte~) calculate_matrix::$19 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda _19
    ldy t6
    sec
    sbc SINQ,y
    sta _20
  //SEG111 [83] (signed byte~) calculate_matrix::$21 ← (signed byte~) calculate_matrix::$20 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda _20
    ldy t7
    sec
    sbc SINQ,y
    sta _21
  //SEG112 [84] (signed byte~) calculate_matrix::$22 ← (signed byte~) calculate_matrix::$21 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda _21
    ldy t8
    sec
    sbc SINQ,y
    sta _22
  //SEG113 [85] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (signed byte~) calculate_matrix::$22 -- _deref_pbsc1=vbsz1 
    lda _22
    sta rotation_matrix+4
  //SEG114 [86] (signed byte~) calculate_matrix::$23 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t9#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t10#0) -- vbsz1=pbsc1_derefidx_vbsz2_minus_pbsc1_derefidx_vbsz3 
    ldx t9
    ldy t10
    sec
    lda SINH,x
    sbc SINH,y
    sta _23
  //SEG115 [87] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (signed byte~) calculate_matrix::$23 -- _deref_pbsc1=vbsz1 
    lda _23
    sta rotation_matrix+5
  //SEG116 [88] (signed byte~) calculate_matrix::$24 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) - *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) -- vbsz1=pbsc1_derefidx_vbsz2_minus_pbsc1_derefidx_vbsz3 
    ldx t4
    ldy t3
    sec
    lda COSH,x
    sbc COSH,y
    sta _24
  //SEG117 [89] (signed byte~) calculate_matrix::$25 ← (signed byte~) calculate_matrix::$24 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0) -- vbsz1=vbsz2_plus_pbsc1_derefidx_vbsz3 
    lda _24
    ldy t6
    clc
    adc SINQ,y
    sta _25
  //SEG118 [90] (signed byte~) calculate_matrix::$26 ← (signed byte~) calculate_matrix::$25 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda _25
    ldy t5
    sec
    sbc SINQ,y
    sta _26
  //SEG119 [91] (signed byte~) calculate_matrix::$27 ← (signed byte~) calculate_matrix::$26 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda _26
    ldy t8
    sec
    sbc SINQ,y
    sta _27
  //SEG120 [92] (signed byte~) calculate_matrix::$28 ← (signed byte~) calculate_matrix::$27 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda _27
    ldy t7
    sec
    sbc SINQ,y
    sta _28
  //SEG121 [93] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (signed byte~) calculate_matrix::$28 -- _deref_pbsc1=vbsz1 
    lda _28
    sta rotation_matrix+6
  //SEG122 [94] (signed byte~) calculate_matrix::$29 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t4#0) -- vbsz1=pbsc1_derefidx_vbsz2_plus_pbsc1_derefidx_vbsz3 
    ldx t3
    ldy t4
    clc
    lda SINH,x
    adc SINH,y
    sta _29
  //SEG123 [95] (signed byte~) calculate_matrix::$30 ← (signed byte~) calculate_matrix::$29 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0) -- vbsz1=vbsz2_plus_pbsc1_derefidx_vbsz3 
    lda _29
    ldy t6
    clc
    adc COSQ,y
    sta _30
  //SEG124 [96] (signed byte~) calculate_matrix::$31 ← (signed byte~) calculate_matrix::$30 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda _30
    ldy t5
    sec
    sbc COSQ,y
    sta _31
  //SEG125 [97] (signed byte~) calculate_matrix::$32 ← (signed byte~) calculate_matrix::$31 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0) -- vbsz1=vbsz2_plus_pbsc1_derefidx_vbsz3 
    lda _31
    ldy t7
    clc
    adc COSQ,y
    sta _32
  //SEG126 [98] (signed byte~) calculate_matrix::$33 ← (signed byte~) calculate_matrix::$32 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0) -- vbsz1=vbsz2_minus_pbsc1_derefidx_vbsz3 
    lda _32
    ldy t8
    sec
    sbc COSQ,y
    sta _33
  //SEG127 [99] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 7) ← (signed byte~) calculate_matrix::$33 -- _deref_pbsc1=vbsz1 
    lda _33
    sta rotation_matrix+7
  //SEG128 [100] (signed byte~) calculate_matrix::$34 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t9#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t10#0) -- vbsz1=pbsc1_derefidx_vbsz2_plus_pbsc1_derefidx_vbsz3 
    ldx t9
    ldy t10
    clc
    lda COSH,x
    adc COSH,y
    sta _34
  //SEG129 [101] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (signed byte~) calculate_matrix::$34 -- _deref_pbsc1=vbsz1 
    lda _34
    sta rotation_matrix+8
    jmp breturn
  //SEG130 calculate_matrix::@return
  breturn:
  //SEG131 [102] return 
    rts
}
//SEG132 sprites_init
sprites_init: {
    .label SCREEN = $400
    .label sprites_ptr = SCREEN+$3f8
    .label i = 5
  //SEG133 [103] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 -- _deref_pbuc1=vbuc2 
    lda #$ff
    sta SPRITES_ENABLE
  //SEG134 [104] phi from sprites_init to sprites_init::@1 [phi:sprites_init->sprites_init::@1]
  b1_from_sprites_init:
  //SEG135 [104] phi (byte) sprites_init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sprites_init->sprites_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG136 [104] phi from sprites_init::@1 to sprites_init::@1 [phi:sprites_init::@1->sprites_init::@1]
  b1_from_b1:
  //SEG137 [104] phi (byte) sprites_init::i#2 = (byte) sprites_init::i#1 [phi:sprites_init::@1->sprites_init::@1#0] -- register_copy 
    jmp b1
  //SEG138 sprites_init::@1
  b1:
  //SEG139 [105] *((const byte*) sprites_init::sprites_ptr#0 + (byte) sprites_init::i#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 -- pbuc1_derefidx_vbuz1=vbuc2 
    ldy i
    lda #$ff&SPRITE/$40
    sta sprites_ptr,y
  //SEG140 [106] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::i#2) ← (const byte) GREEN#0 -- pbuc1_derefidx_vbuz1=vbuc2 
    ldy i
    lda #GREEN
    sta SPRITES_COLS,y
  //SEG141 [107] (byte) sprites_init::i#1 ← ++ (byte) sprites_init::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG142 [108] if((byte) sprites_init::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto sprites_init::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #8
    bne b1_from_b1
    jmp breturn
  //SEG143 sprites_init::@return
  breturn:
  //SEG144 [109] return 
    rts
}
  zs: .byte $34, $34, $34, $34, $34, $34, $34, $34
  xrs: .fill 8, 0
  yrs: .fill 8, 0
  zrs: .fill 8, 0
  pps: .fill 8, 0
  xps: .fill 8, 0
  yps: .fill 8, 0
  rotation_matrix: .fill 9, 0
  xs: .byte -$34, -$34, -$34, 0, 0, $34, $34, $34
  ys: .byte -$34, 0, $34, -$34, $34, -$34, 0, $34
.pc = mulf_sqr1 "Inline"
  .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((i*i)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }
    	.if(i>351) { .byte round(((512-i)*(512-i))/256) }
    }

.pc = mulf_sqr2 "Inline"
  .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }
    	.if(i>351) { .byte round(((i-511)*(i-511))/256) }  
    }

.pc = SPRITE "Inline"
  .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)

.pc = PERSP_Z "Inline"
  {
    .var d = 256.0	
    .var z0 = 6.0	
    // These values of d/z0 result in table values from $20 to $40 (effectively max is $3f)
    .for(var z=0;z<$100;z++) {
    	.if(z>127) {
    		.byte round(d / (z0 - ((z - 256) / 64.0)));
    	} else {
    		.byte round(d / (z0 - (z / 64.0)));
    	}
    }
	}

.pc = SINH "Inline"
  {
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }

.pc = SINQ "Inline"
  {
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }

.pc = SINH_LO "Inline"
  {
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte <(min+(ampl/2)+(ampl/2)*sin(rad))
    }
    }

.pc = SINH_HI "Inline"
  {
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >(min+(ampl/2)+(ampl/2)*sin(rad))
    }
    }

.pc = SINQ_LO "Inline"
  {
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte <(min+(ampl/2)+(ampl/2)*sin(rad))
    }
    }

.pc = SINQ_HI "Inline"
  {
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >(min+(ampl/2)+(ampl/2)*sin(rad))
    }
    }


REGISTER UPLIFT POTENTIAL REGISTERS
Statement [15] *((const word*) psp1#0) ← ((word))(const byte*) mulf_sqr1#0 [ ] ( main:11 [ ] ) always clobbers reg byte a 
Statement [16] *((const word*) psp2#0) ← ((word))(const byte*) mulf_sqr2#0 [ ] ( main:11 [ ] ) always clobbers reg byte a 
Statement [21] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto anim::@4 [ sx#10 sy#10 ] ( main:11::anim:17 [ sx#10 sy#10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ sx#10 sx#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ sy#10 sy#3 ]
Statement [34] *((const signed byte[8]) xrs#0 + (byte) anim::i#2) ← *((const signed byte*) xr#0) [ sx#10 sy#10 anim::i#2 ] ( main:11::anim:17 [ sx#10 sy#10 anim::i#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ anim::i#2 anim::i#1 ]
Statement [35] *((const signed byte[8]) yrs#0 + (byte) anim::i#2) ← *((const signed byte*) yr#0) [ sx#10 sy#10 anim::i#2 ] ( main:11::anim:17 [ sx#10 sy#10 anim::i#2 ] ) always clobbers reg byte a 
Statement [36] *((const signed byte[8]) zrs#0 + (byte) anim::i#2) ← *((const signed byte*) zr#0) [ sx#10 sy#10 anim::i#2 ] ( main:11::anim:17 [ sx#10 sy#10 anim::i#2 ] ) always clobbers reg byte a 
Statement [37] *((const signed byte[8]) pps#0 + (byte) anim::i#2) ← *((const signed byte*) pp#0) [ sx#10 sy#10 anim::i#2 ] ( main:11::anim:17 [ sx#10 sy#10 anim::i#2 ] ) always clobbers reg byte a 
Statement [38] *((const signed byte[8]) xps#0 + (byte) anim::i#2) ← *((const signed byte*) xp#0) [ sx#10 sy#10 anim::i#2 ] ( main:11::anim:17 [ sx#10 sy#10 anim::i#2 ] ) always clobbers reg byte a 
Statement [39] *((const signed byte[8]) yps#0 + (byte) anim::i#2) ← *((const signed byte*) yp#0) [ sx#10 sy#10 anim::i#2 ] ( main:11::anim:17 [ sx#10 sy#10 anim::i#2 ] ) always clobbers reg byte a 
Statement [40] (byte) anim::i2#0 ← (byte) anim::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ sx#10 sy#10 anim::i#2 anim::i2#0 ] ( main:11::anim:17 [ sx#10 sy#10 anim::i#2 anim::i2#0 ] ) always clobbers reg byte a 
Statement [41] (byte/word/signed word/dword/signed dword~) anim::$6 ← (byte/word/signed word/dword/signed dword) 128 + (byte)*((const signed byte*) xp#0) [ sx#10 sy#10 anim::i#2 anim::i2#0 anim::$6 ] ( main:11::anim:17 [ sx#10 sy#10 anim::i#2 anim::i2#0 anim::$6 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:11 [ anim::i2#0 ]
Statement [43] (byte/word/signed word/dword/signed dword~) anim::$8 ← (byte/word/signed word/dword/signed dword) 128 + (byte)*((const signed byte*) yp#0) [ sx#10 sy#10 anim::i#2 anim::i2#0 anim::$8 ] ( main:11::anim:17 [ sx#10 sy#10 anim::i#2 anim::i2#0 anim::$8 ] ) always clobbers reg byte a 
Statement [47] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_GREY#0 [ sx#10 sy#10 ] ( main:11::anim:17 [ sx#10 sy#10 ] ) always clobbers reg byte a 
Statement [48] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 [ sx#10 sy#10 ] ( main:11::anim:17 [ sx#10 sy#10 ] ) always clobbers reg byte a 
Potential register analysis [50] sy#3 ← sy#10 - 3 missing fragment vbsxx=vbsxx_minus_vbuc1 allocation: reg byte x [ sy#10 sy#3 ] 
Potential register analysis [50] sy#3 ← sy#10 - 3 missing fragment vbsyy=vbsyy_minus_vbuc1 allocation: reg byte y [ sy#10 sy#3 ] 
MISSING FRAGMENTS
  vbsxx=vbsxx_minus_vbuc1
  vbsyy=vbsyy_minus_vbuc1
Statement [50] (signed byte) sy#3 ← (signed byte) sy#10 - (byte/signed byte/word/signed word/dword/signed dword) 3 [ sx#3 sy#3 ] ( main:11::anim:17 [ sx#3 sy#3 ] ) always clobbers reg byte a 
Statement asm { ldxzr C1: ldamulf_sqr1,x sec C2: sbcmulf_sqr2,x staC3+1 F1: ldamulf_sqr1,x sec F2: sbcmulf_sqr2,x staF3+1 I1: ldamulf_sqr1,x sec I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr I3: lda#0 clc G1: adcmulf_sqr1,x sec G2: sbcmulf_sqr2,x clc H1: adcmulf_sqr1,y sec H2: sbcmulf_sqr2,y stazr staPP+1 PP: ldaPERSP_Z stapp stapsp1 eor#$ff stapsp2 C3: lda#0 clc A1: adcmulf_sqr1,x sec A2: sbcmulf_sqr2,x clc B1: adcmulf_sqr1,y sec B2: sbcmulf_sqr2,y staxr staXX+1 clc F3: lda#0 clc D1: adcmulf_sqr1,x sec D2: sbcmulf_sqr2,x clc E1: adcmulf_sqr1,y sec E2: sbcmulf_sqr2,y stayr tay lda(psp1),y sec sbc(psp2),y stayp XX: ldy#0 lda(psp1),y sec sbc(psp2),y staxp  } always clobbers reg byte a reg byte x reg byte y 
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:2 [ sx#10 sx#3 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ sx#10 sx#3 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:3 [ sy#10 sy#3 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:3 [ sy#10 sy#3 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:4 [ anim::i#2 anim::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:4 [ anim::i#2 anim::i#1 ]
Statement asm { ldarotation_matrix+0 starotate_matrix.A1+1 eor#$ff starotate_matrix.A2+1 ldarotation_matrix+1 starotate_matrix.B1+1 eor#$ff starotate_matrix.B2+1 ldarotation_matrix+2 starotate_matrix.C1+1 eor#$ff starotate_matrix.C2+1 ldarotation_matrix+3 starotate_matrix.D1+1 eor#$ff starotate_matrix.D2+1 ldarotation_matrix+4 starotate_matrix.E1+1 eor#$ff starotate_matrix.E2+1 ldarotation_matrix+5 starotate_matrix.F1+1 eor#$ff starotate_matrix.F2+1 ldarotation_matrix+6 starotate_matrix.G1+1 eor#$ff starotate_matrix.G2+1 ldarotation_matrix+7 starotate_matrix.H1+1 eor#$ff starotate_matrix.H2+1 ldarotation_matrix+8 starotate_matrix.I1+1 eor#$ff starotate_matrix.I2+1  } always clobbers reg byte a 
Statement [58] (signed byte) calculate_matrix::t1#0 ← (signed byte) calculate_matrix::sy#0 - (const signed byte) sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ calculate_matrix::sx#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ calculate_matrix::sy#0 ]
Statement [59] (signed byte) calculate_matrix::t2#0 ← (signed byte) calculate_matrix::sy#0 + (const signed byte) sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:14 [ calculate_matrix::t1#0 ]
Statement [62] (signed byte) calculate_matrix::t5#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t2#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:15 [ calculate_matrix::t2#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:16 [ calculate_matrix::t3#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:17 [ calculate_matrix::t4#0 ]
Statement [63] (signed byte) calculate_matrix::t6#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::t1#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:18 [ calculate_matrix::t5#0 ]
Statement [64] (signed byte) calculate_matrix::t7#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t1#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:19 [ calculate_matrix::t6#0 ]
Statement [65] (signed byte) calculate_matrix::t8#0 ← (signed byte) calculate_matrix::t2#0 - (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:20 [ calculate_matrix::t7#0 ]
Statement [66] (signed byte) calculate_matrix::t9#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:21 [ calculate_matrix::t8#0 ]
Statement [67] (signed byte) calculate_matrix::t10#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:22 [ calculate_matrix::t9#0 ]
Statement [68] (signed byte~) calculate_matrix::$10 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t1#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t2#0) [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$10 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:23 [ calculate_matrix::t10#0 ]
Statement [70] (signed byte~) calculate_matrix::$11 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t1#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t2#0) [ calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$11 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$11 ] ) always clobbers reg byte a 
Statement [72] (signed byte~) calculate_matrix::$12 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$12 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$12 ] ) always clobbers reg byte a 
Statement [74] (signed byte~) calculate_matrix::$13 ← *((const signed byte*) SINH#0+(const signed byte) sz#0 + (signed byte) calculate_matrix::t3#0) - *((const signed byte*) SINH#0+-(const signed byte) sz#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$13 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$13 ] ) always clobbers reg byte a 
Statement [75] (signed byte~) calculate_matrix::$14 ← (signed byte~) calculate_matrix::$13 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$14 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$14 ] ) always clobbers reg byte a 
Potential register analysis [76] calculate_matrix::$15 ← calculate_matrix::$14 - *(COSQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$14 ] reg byte a [ calculate_matrix::$15 ] reg byte x [ calculate_matrix::t5#0 ] 
Potential register analysis [76] calculate_matrix::$15 ← calculate_matrix::$14 - *(COSQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$14 ] reg byte a [ calculate_matrix::$15 ] reg byte y [ calculate_matrix::t5#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [76] (signed byte~) calculate_matrix::$15 ← (signed byte~) calculate_matrix::$14 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$15 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$15 ] ) always clobbers reg byte a 
Statement [77] (signed byte~) calculate_matrix::$16 ← (signed byte~) calculate_matrix::$15 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$16 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$16 ] ) always clobbers reg byte a 
Potential register analysis [78] calculate_matrix::$17 ← calculate_matrix::$16 - *(COSQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$16 ] reg byte x [ calculate_matrix::t7#0 ] reg byte a [ calculate_matrix::$17 ] 
Potential register analysis [78] calculate_matrix::$17 ← calculate_matrix::$16 - *(COSQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$16 ] reg byte y [ calculate_matrix::t7#0 ] reg byte a [ calculate_matrix::$17 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [78] (signed byte~) calculate_matrix::$17 ← (signed byte~) calculate_matrix::$16 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$17 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$17 ] ) always clobbers reg byte a 
Statement [80] (signed byte~) calculate_matrix::$18 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$18 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$18 ] ) always clobbers reg byte a 
Statement [81] (signed byte~) calculate_matrix::$19 ← (signed byte~) calculate_matrix::$18 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$19 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$19 ] ) always clobbers reg byte a 
Potential register analysis [82] calculate_matrix::$20 ← calculate_matrix::$19 - *(SINQ#0 + calculate_matrix::t6#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte a [ calculate_matrix::$20 ] reg byte x [ calculate_matrix::t6#0 ] reg byte x [ calculate_matrix::$19 ] 
Potential register analysis [82] calculate_matrix::$20 ← calculate_matrix::$19 - *(SINQ#0 + calculate_matrix::t6#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte a [ calculate_matrix::$20 ] reg byte y [ calculate_matrix::t6#0 ] reg byte y [ calculate_matrix::$19 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [82] (signed byte~) calculate_matrix::$20 ← (signed byte~) calculate_matrix::$19 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$20 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$20 ] ) always clobbers reg byte a 
Potential register analysis [83] calculate_matrix::$21 ← calculate_matrix::$20 - *(SINQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte a [ calculate_matrix::$21 ] reg byte x [ calculate_matrix::$20 ] reg byte x [ calculate_matrix::t7#0 ] 
Potential register analysis [83] calculate_matrix::$21 ← calculate_matrix::$20 - *(SINQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte a [ calculate_matrix::$21 ] reg byte y [ calculate_matrix::$20 ] reg byte y [ calculate_matrix::t7#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [83] (signed byte~) calculate_matrix::$21 ← (signed byte~) calculate_matrix::$20 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$21 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$21 ] ) always clobbers reg byte a 
Potential register analysis [84] calculate_matrix::$22 ← calculate_matrix::$21 - *(SINQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$21 ] reg byte a [ calculate_matrix::$22 ] reg byte x [ calculate_matrix::t8#0 ] 
Potential register analysis [84] calculate_matrix::$22 ← calculate_matrix::$21 - *(SINQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$21 ] reg byte a [ calculate_matrix::$22 ] reg byte y [ calculate_matrix::t8#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [84] (signed byte~) calculate_matrix::$22 ← (signed byte~) calculate_matrix::$21 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$22 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$22 ] ) always clobbers reg byte a 
Statement [86] (signed byte~) calculate_matrix::$23 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t9#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t10#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$23 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$23 ] ) always clobbers reg byte a 
Statement [88] (signed byte~) calculate_matrix::$24 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) - *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$24 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$24 ] ) always clobbers reg byte a 
Statement [89] (signed byte~) calculate_matrix::$25 ← (signed byte~) calculate_matrix::$24 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$25 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$25 ] ) always clobbers reg byte a 
Potential register analysis [90] calculate_matrix::$26 ← calculate_matrix::$25 - *(SINQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$25 ] reg byte a [ calculate_matrix::$26 ] reg byte x [ calculate_matrix::t5#0 ] 
Potential register analysis [90] calculate_matrix::$26 ← calculate_matrix::$25 - *(SINQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$25 ] reg byte a [ calculate_matrix::$26 ] reg byte y [ calculate_matrix::t5#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [90] (signed byte~) calculate_matrix::$26 ← (signed byte~) calculate_matrix::$25 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$26 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$26 ] ) always clobbers reg byte a 
Potential register analysis [91] calculate_matrix::$27 ← calculate_matrix::$26 - *(SINQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte a [ calculate_matrix::$27 ] reg byte x [ calculate_matrix::$26 ] reg byte x [ calculate_matrix::t8#0 ] 
Potential register analysis [91] calculate_matrix::$27 ← calculate_matrix::$26 - *(SINQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte a [ calculate_matrix::$27 ] reg byte y [ calculate_matrix::$26 ] reg byte y [ calculate_matrix::t8#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [91] (signed byte~) calculate_matrix::$27 ← (signed byte~) calculate_matrix::$26 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$27 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$27 ] ) always clobbers reg byte a 
Potential register analysis [92] calculate_matrix::$28 ← calculate_matrix::$27 - *(SINQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$27 ] reg byte x [ calculate_matrix::t7#0 ] reg byte a [ calculate_matrix::$28 ] 
Potential register analysis [92] calculate_matrix::$28 ← calculate_matrix::$27 - *(SINQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$27 ] reg byte y [ calculate_matrix::t7#0 ] reg byte a [ calculate_matrix::$28 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [92] (signed byte~) calculate_matrix::$28 ← (signed byte~) calculate_matrix::$27 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$28 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$28 ] ) always clobbers reg byte a 
Statement [94] (signed byte~) calculate_matrix::$29 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$29 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$29 ] ) always clobbers reg byte a 
Statement [95] (signed byte~) calculate_matrix::$30 ← (signed byte~) calculate_matrix::$29 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t5#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$30 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t5#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$30 ] ) always clobbers reg byte a 
Potential register analysis [96] calculate_matrix::$31 ← calculate_matrix::$30 - *(COSQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte a [ calculate_matrix::$31 ] reg byte x [ calculate_matrix::t5#0 ] reg byte x [ calculate_matrix::$30 ] 
Potential register analysis [96] calculate_matrix::$31 ← calculate_matrix::$30 - *(COSQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte a [ calculate_matrix::$31 ] reg byte y [ calculate_matrix::t5#0 ] reg byte y [ calculate_matrix::$30 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [96] (signed byte~) calculate_matrix::$31 ← (signed byte~) calculate_matrix::$30 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$31 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$31 ] ) always clobbers reg byte a 
Statement [97] (signed byte~) calculate_matrix::$32 ← (signed byte~) calculate_matrix::$31 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$32 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$32 ] ) always clobbers reg byte a 
Potential register analysis [98] calculate_matrix::$33 ← calculate_matrix::$32 - *(COSQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$32 ] reg byte a [ calculate_matrix::$33 ] reg byte x [ calculate_matrix::t8#0 ] 
Potential register analysis [98] calculate_matrix::$33 ← calculate_matrix::$32 - *(COSQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$32 ] reg byte a [ calculate_matrix::$33 ] reg byte y [ calculate_matrix::t8#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [98] (signed byte~) calculate_matrix::$33 ← (signed byte~) calculate_matrix::$32 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$33 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$33 ] ) always clobbers reg byte a 
Statement [100] (signed byte~) calculate_matrix::$34 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t9#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t10#0) [ calculate_matrix::$34 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::$34 ] ) always clobbers reg byte a 
Statement [103] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 [ ] ( main:11::sprites_init:14 [ ] ) always clobbers reg byte a 
Statement [105] *((const byte*) sprites_init::sprites_ptr#0 + (byte) sprites_init::i#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 [ sprites_init::i#2 ] ( main:11::sprites_init:14 [ sprites_init::i#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ sprites_init::i#2 sprites_init::i#1 ]
Statement [106] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::i#2) ← (const byte) GREEN#0 [ sprites_init::i#2 ] ( main:11::sprites_init:14 [ sprites_init::i#2 ] ) always clobbers reg byte a 
Statement [15] *((const word*) psp1#0) ← ((word))(const byte*) mulf_sqr1#0 [ ] ( main:11 [ ] ) always clobbers reg byte a 
Statement [16] *((const word*) psp2#0) ← ((word))(const byte*) mulf_sqr2#0 [ ] ( main:11 [ ] ) always clobbers reg byte a 
Statement [21] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto anim::@4 [ sx#10 sy#10 ] ( main:11::anim:17 [ sx#10 sy#10 ] ) always clobbers reg byte a 
Statement [34] *((const signed byte[8]) xrs#0 + (byte) anim::i#2) ← *((const signed byte*) xr#0) [ sx#10 sy#10 anim::i#2 ] ( main:11::anim:17 [ sx#10 sy#10 anim::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [35] *((const signed byte[8]) yrs#0 + (byte) anim::i#2) ← *((const signed byte*) yr#0) [ sx#10 sy#10 anim::i#2 ] ( main:11::anim:17 [ sx#10 sy#10 anim::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [36] *((const signed byte[8]) zrs#0 + (byte) anim::i#2) ← *((const signed byte*) zr#0) [ sx#10 sy#10 anim::i#2 ] ( main:11::anim:17 [ sx#10 sy#10 anim::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [37] *((const signed byte[8]) pps#0 + (byte) anim::i#2) ← *((const signed byte*) pp#0) [ sx#10 sy#10 anim::i#2 ] ( main:11::anim:17 [ sx#10 sy#10 anim::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [38] *((const signed byte[8]) xps#0 + (byte) anim::i#2) ← *((const signed byte*) xp#0) [ sx#10 sy#10 anim::i#2 ] ( main:11::anim:17 [ sx#10 sy#10 anim::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [39] *((const signed byte[8]) yps#0 + (byte) anim::i#2) ← *((const signed byte*) yp#0) [ sx#10 sy#10 anim::i#2 ] ( main:11::anim:17 [ sx#10 sy#10 anim::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [40] (byte) anim::i2#0 ← (byte) anim::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ sx#10 sy#10 anim::i#2 anim::i2#0 ] ( main:11::anim:17 [ sx#10 sy#10 anim::i#2 anim::i2#0 ] ) always clobbers reg byte a 
Statement [41] (byte/word/signed word/dword/signed dword~) anim::$6 ← (byte/word/signed word/dword/signed dword) 128 + (byte)*((const signed byte*) xp#0) [ sx#10 sy#10 anim::i#2 anim::i2#0 anim::$6 ] ( main:11::anim:17 [ sx#10 sy#10 anim::i#2 anim::i2#0 anim::$6 ] ) always clobbers reg byte a 
Statement [43] (byte/word/signed word/dword/signed dword~) anim::$8 ← (byte/word/signed word/dword/signed dword) 128 + (byte)*((const signed byte*) yp#0) [ sx#10 sy#10 anim::i#2 anim::i2#0 anim::$8 ] ( main:11::anim:17 [ sx#10 sy#10 anim::i#2 anim::i2#0 anim::$8 ] ) always clobbers reg byte a 
Statement [46] if((byte) anim::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto anim::@7 [ sx#10 sy#10 anim::i#1 ] ( main:11::anim:17 [ sx#10 sy#10 anim::i#1 ] ) always clobbers reg byte a 
Statement [47] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_GREY#0 [ sx#10 sy#10 ] ( main:11::anim:17 [ sx#10 sy#10 ] ) always clobbers reg byte a 
Statement [48] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 [ sx#10 sy#10 ] ( main:11::anim:17 [ sx#10 sy#10 ] ) always clobbers reg byte a 
Statement [50] (signed byte) sy#3 ← (signed byte) sy#10 - (byte/signed byte/word/signed word/dword/signed dword) 3 [ sx#3 sy#3 ] ( main:11::anim:17 [ sx#3 sy#3 ] ) always clobbers reg byte a 
Statement asm { ldxzr C1: ldamulf_sqr1,x sec C2: sbcmulf_sqr2,x staC3+1 F1: ldamulf_sqr1,x sec F2: sbcmulf_sqr2,x staF3+1 I1: ldamulf_sqr1,x sec I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr I3: lda#0 clc G1: adcmulf_sqr1,x sec G2: sbcmulf_sqr2,x clc H1: adcmulf_sqr1,y sec H2: sbcmulf_sqr2,y stazr staPP+1 PP: ldaPERSP_Z stapp stapsp1 eor#$ff stapsp2 C3: lda#0 clc A1: adcmulf_sqr1,x sec A2: sbcmulf_sqr2,x clc B1: adcmulf_sqr1,y sec B2: sbcmulf_sqr2,y staxr staXX+1 clc F3: lda#0 clc D1: adcmulf_sqr1,x sec D2: sbcmulf_sqr2,x clc E1: adcmulf_sqr1,y sec E2: sbcmulf_sqr2,y stayr tay lda(psp1),y sec sbc(psp2),y stayp XX: ldy#0 lda(psp1),y sec sbc(psp2),y staxp  } always clobbers reg byte a reg byte x reg byte y 
Statement asm { ldarotation_matrix+0 starotate_matrix.A1+1 eor#$ff starotate_matrix.A2+1 ldarotation_matrix+1 starotate_matrix.B1+1 eor#$ff starotate_matrix.B2+1 ldarotation_matrix+2 starotate_matrix.C1+1 eor#$ff starotate_matrix.C2+1 ldarotation_matrix+3 starotate_matrix.D1+1 eor#$ff starotate_matrix.D2+1 ldarotation_matrix+4 starotate_matrix.E1+1 eor#$ff starotate_matrix.E2+1 ldarotation_matrix+5 starotate_matrix.F1+1 eor#$ff starotate_matrix.F2+1 ldarotation_matrix+6 starotate_matrix.G1+1 eor#$ff starotate_matrix.G2+1 ldarotation_matrix+7 starotate_matrix.H1+1 eor#$ff starotate_matrix.H2+1 ldarotation_matrix+8 starotate_matrix.I1+1 eor#$ff starotate_matrix.I2+1  } always clobbers reg byte a 
Statement [58] (signed byte) calculate_matrix::t1#0 ← (signed byte) calculate_matrix::sy#0 - (const signed byte) sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 ] ) always clobbers reg byte a 
Statement [59] (signed byte) calculate_matrix::t2#0 ← (signed byte) calculate_matrix::sy#0 + (const signed byte) sz#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 ] ) always clobbers reg byte a 
Statement [62] (signed byte) calculate_matrix::t5#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t2#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 ] ) always clobbers reg byte a 
Statement [63] (signed byte) calculate_matrix::t6#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::t1#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 ] ) always clobbers reg byte a 
Statement [64] (signed byte) calculate_matrix::t7#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t1#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 ] ) always clobbers reg byte a 
Statement [65] (signed byte) calculate_matrix::t8#0 ← (signed byte) calculate_matrix::t2#0 - (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 ] ) always clobbers reg byte a 
Statement [66] (signed byte) calculate_matrix::t9#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::sx#0 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 ] ) always clobbers reg byte a 
Statement [67] (signed byte) calculate_matrix::t10#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sx#0 [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 ] ) always clobbers reg byte a 
Statement [68] (signed byte~) calculate_matrix::$10 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t1#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t2#0) [ calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$10 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::sy#0 calculate_matrix::t1#0 calculate_matrix::t2#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$10 ] ) always clobbers reg byte a 
Statement [70] (signed byte~) calculate_matrix::$11 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t1#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t2#0) [ calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$11 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::sy#0 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$11 ] ) always clobbers reg byte a 
Statement [72] (signed byte~) calculate_matrix::$12 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$12 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$12 ] ) always clobbers reg byte a 
Statement [74] (signed byte~) calculate_matrix::$13 ← *((const signed byte*) SINH#0+(const signed byte) sz#0 + (signed byte) calculate_matrix::t3#0) - *((const signed byte*) SINH#0+-(const signed byte) sz#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$13 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$13 ] ) always clobbers reg byte a 
Statement [75] (signed byte~) calculate_matrix::$14 ← (signed byte~) calculate_matrix::$13 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$14 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$14 ] ) always clobbers reg byte a 
Potential register analysis [76] calculate_matrix::$15 ← calculate_matrix::$14 - *(COSQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$14 ] reg byte a [ calculate_matrix::$15 ] reg byte x [ calculate_matrix::t5#0 ] 
Potential register analysis [76] calculate_matrix::$15 ← calculate_matrix::$14 - *(COSQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$14 ] reg byte a [ calculate_matrix::$15 ] reg byte y [ calculate_matrix::t5#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [76] (signed byte~) calculate_matrix::$15 ← (signed byte~) calculate_matrix::$14 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$15 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$15 ] ) always clobbers reg byte a 
Statement [77] (signed byte~) calculate_matrix::$16 ← (signed byte~) calculate_matrix::$15 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$16 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$16 ] ) always clobbers reg byte a 
Potential register analysis [78] calculate_matrix::$17 ← calculate_matrix::$16 - *(COSQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$16 ] reg byte x [ calculate_matrix::t7#0 ] reg byte a [ calculate_matrix::$17 ] 
Potential register analysis [78] calculate_matrix::$17 ← calculate_matrix::$16 - *(COSQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$16 ] reg byte y [ calculate_matrix::t7#0 ] reg byte a [ calculate_matrix::$17 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [78] (signed byte~) calculate_matrix::$17 ← (signed byte~) calculate_matrix::$16 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$17 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$17 ] ) always clobbers reg byte a 
Statement [80] (signed byte~) calculate_matrix::$18 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$18 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$18 ] ) always clobbers reg byte a 
Statement [81] (signed byte~) calculate_matrix::$19 ← (signed byte~) calculate_matrix::$18 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$19 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$19 ] ) always clobbers reg byte a 
Potential register analysis [82] calculate_matrix::$20 ← calculate_matrix::$19 - *(SINQ#0 + calculate_matrix::t6#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte a [ calculate_matrix::$20 ] reg byte x [ calculate_matrix::t6#0 ] reg byte x [ calculate_matrix::$19 ] 
Potential register analysis [82] calculate_matrix::$20 ← calculate_matrix::$19 - *(SINQ#0 + calculate_matrix::t6#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte a [ calculate_matrix::$20 ] reg byte y [ calculate_matrix::t6#0 ] reg byte y [ calculate_matrix::$19 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [82] (signed byte~) calculate_matrix::$20 ← (signed byte~) calculate_matrix::$19 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$20 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$20 ] ) always clobbers reg byte a 
Potential register analysis [83] calculate_matrix::$21 ← calculate_matrix::$20 - *(SINQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte a [ calculate_matrix::$21 ] reg byte x [ calculate_matrix::$20 ] reg byte x [ calculate_matrix::t7#0 ] 
Potential register analysis [83] calculate_matrix::$21 ← calculate_matrix::$20 - *(SINQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte a [ calculate_matrix::$21 ] reg byte y [ calculate_matrix::$20 ] reg byte y [ calculate_matrix::t7#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [83] (signed byte~) calculate_matrix::$21 ← (signed byte~) calculate_matrix::$20 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$21 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$21 ] ) always clobbers reg byte a 
Potential register analysis [84] calculate_matrix::$22 ← calculate_matrix::$21 - *(SINQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$21 ] reg byte a [ calculate_matrix::$22 ] reg byte x [ calculate_matrix::t8#0 ] 
Potential register analysis [84] calculate_matrix::$22 ← calculate_matrix::$21 - *(SINQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$21 ] reg byte a [ calculate_matrix::$22 ] reg byte y [ calculate_matrix::t8#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [84] (signed byte~) calculate_matrix::$22 ← (signed byte~) calculate_matrix::$21 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$22 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$22 ] ) always clobbers reg byte a 
Statement [86] (signed byte~) calculate_matrix::$23 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t9#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t10#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$23 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$23 ] ) always clobbers reg byte a 
Statement [88] (signed byte~) calculate_matrix::$24 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) - *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$24 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$24 ] ) always clobbers reg byte a 
Statement [89] (signed byte~) calculate_matrix::$25 ← (signed byte~) calculate_matrix::$24 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$25 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$25 ] ) always clobbers reg byte a 
Potential register analysis [90] calculate_matrix::$26 ← calculate_matrix::$25 - *(SINQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$25 ] reg byte a [ calculate_matrix::$26 ] reg byte x [ calculate_matrix::t5#0 ] 
Potential register analysis [90] calculate_matrix::$26 ← calculate_matrix::$25 - *(SINQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$25 ] reg byte a [ calculate_matrix::$26 ] reg byte y [ calculate_matrix::t5#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [90] (signed byte~) calculate_matrix::$26 ← (signed byte~) calculate_matrix::$25 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$26 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$26 ] ) always clobbers reg byte a 
Potential register analysis [91] calculate_matrix::$27 ← calculate_matrix::$26 - *(SINQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte a [ calculate_matrix::$27 ] reg byte x [ calculate_matrix::$26 ] reg byte x [ calculate_matrix::t8#0 ] 
Potential register analysis [91] calculate_matrix::$27 ← calculate_matrix::$26 - *(SINQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte a [ calculate_matrix::$27 ] reg byte y [ calculate_matrix::$26 ] reg byte y [ calculate_matrix::t8#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [91] (signed byte~) calculate_matrix::$27 ← (signed byte~) calculate_matrix::$26 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$27 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$27 ] ) always clobbers reg byte a 
Potential register analysis [92] calculate_matrix::$28 ← calculate_matrix::$27 - *(SINQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$27 ] reg byte x [ calculate_matrix::t7#0 ] reg byte a [ calculate_matrix::$28 ] 
Potential register analysis [92] calculate_matrix::$28 ← calculate_matrix::$27 - *(SINQ#0 + calculate_matrix::t7#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$27 ] reg byte y [ calculate_matrix::t7#0 ] reg byte a [ calculate_matrix::$28 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [92] (signed byte~) calculate_matrix::$28 ← (signed byte~) calculate_matrix::$27 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$28 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t3#0 calculate_matrix::t4#0 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$28 ] ) always clobbers reg byte a 
Statement [94] (signed byte~) calculate_matrix::$29 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t4#0) [ calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$29 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t5#0 calculate_matrix::t6#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$29 ] ) always clobbers reg byte a 
Statement [95] (signed byte~) calculate_matrix::$30 ← (signed byte~) calculate_matrix::$29 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0) [ calculate_matrix::t5#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$30 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t5#0 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$30 ] ) always clobbers reg byte a 
Potential register analysis [96] calculate_matrix::$31 ← calculate_matrix::$30 - *(COSQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte a [ calculate_matrix::$31 ] reg byte x [ calculate_matrix::t5#0 ] reg byte x [ calculate_matrix::$30 ] 
Potential register analysis [96] calculate_matrix::$31 ← calculate_matrix::$30 - *(COSQ#0 + calculate_matrix::t5#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte a [ calculate_matrix::$31 ] reg byte y [ calculate_matrix::t5#0 ] reg byte y [ calculate_matrix::$30 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [96] (signed byte~) calculate_matrix::$31 ← (signed byte~) calculate_matrix::$30 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0) [ calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$31 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t7#0 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$31 ] ) always clobbers reg byte a 
Statement [97] (signed byte~) calculate_matrix::$32 ← (signed byte~) calculate_matrix::$31 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0) [ calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$32 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t8#0 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$32 ] ) always clobbers reg byte a 
Potential register analysis [98] calculate_matrix::$33 ← calculate_matrix::$32 - *(COSQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx allocation: reg byte x [ calculate_matrix::$32 ] reg byte a [ calculate_matrix::$33 ] reg byte x [ calculate_matrix::t8#0 ] 
Potential register analysis [98] calculate_matrix::$33 ← calculate_matrix::$32 - *(COSQ#0 + calculate_matrix::t8#0) missing fragment vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy allocation: reg byte y [ calculate_matrix::$32 ] reg byte a [ calculate_matrix::$33 ] reg byte y [ calculate_matrix::t8#0 ] 
MISSING FRAGMENTS
  vbsaa=vbsxx_minus_pbsc1_derefidx_vbsxx
  vbsaa=vbsyy_minus_pbsc1_derefidx_vbsyy
Statement [98] (signed byte~) calculate_matrix::$33 ← (signed byte~) calculate_matrix::$32 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0) [ calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$33 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::t9#0 calculate_matrix::t10#0 calculate_matrix::$33 ] ) always clobbers reg byte a 
Statement [100] (signed byte~) calculate_matrix::$34 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t9#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t10#0) [ calculate_matrix::$34 ] ( main:11::anim:17::calculate_matrix:25 [ sx#10 sy#10 calculate_matrix::$34 ] ) always clobbers reg byte a 
Statement [103] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 [ ] ( main:11::sprites_init:14 [ ] ) always clobbers reg byte a 
Statement [105] *((const byte*) sprites_init::sprites_ptr#0 + (byte) sprites_init::i#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 [ sprites_init::i#2 ] ( main:11::sprites_init:14 [ sprites_init::i#2 ] ) always clobbers reg byte a 
Statement [106] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::i#2) ← (const byte) GREEN#0 [ sprites_init::i#2 ] ( main:11::sprites_init:14 [ sprites_init::i#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ sx#10 sx#3 ] : zp ZP_BYTE:2 , 
Potential registers zp ZP_BYTE:3 [ sy#10 sy#3 ] : zp ZP_BYTE:3 , 
Potential registers zp ZP_BYTE:4 [ anim::i#2 anim::i#1 ] : zp ZP_BYTE:4 , 
Potential registers zp ZP_BYTE:5 [ sprites_init::i#2 sprites_init::i#1 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ calculate_matrix::sx#0 ] : zp ZP_BYTE:6 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ calculate_matrix::sy#0 ] : zp ZP_BYTE:7 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ rotate_matrix::x#0 ] : zp ZP_BYTE:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ rotate_matrix::y#0 ] : zp ZP_BYTE:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:10 [ rotate_matrix::z#0 ] : zp ZP_BYTE:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:11 [ anim::i2#0 ] : zp ZP_BYTE:11 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:12 [ anim::$6 ] : zp ZP_BYTE:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ anim::$8 ] : zp ZP_BYTE:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:14 [ calculate_matrix::t1#0 ] : zp ZP_BYTE:14 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:15 [ calculate_matrix::t2#0 ] : zp ZP_BYTE:15 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:16 [ calculate_matrix::t3#0 ] : zp ZP_BYTE:16 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:17 [ calculate_matrix::t4#0 ] : zp ZP_BYTE:17 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:18 [ calculate_matrix::t5#0 ] : zp ZP_BYTE:18 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:19 [ calculate_matrix::t6#0 ] : zp ZP_BYTE:19 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:20 [ calculate_matrix::t7#0 ] : zp ZP_BYTE:20 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:21 [ calculate_matrix::t8#0 ] : zp ZP_BYTE:21 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:22 [ calculate_matrix::t9#0 ] : zp ZP_BYTE:22 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:23 [ calculate_matrix::t10#0 ] : zp ZP_BYTE:23 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:24 [ calculate_matrix::$10 ] : zp ZP_BYTE:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:25 [ calculate_matrix::$11 ] : zp ZP_BYTE:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:26 [ calculate_matrix::$12 ] : zp ZP_BYTE:26 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:27 [ calculate_matrix::$13 ] : zp ZP_BYTE:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:28 [ calculate_matrix::$14 ] : zp ZP_BYTE:28 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:29 [ calculate_matrix::$15 ] : zp ZP_BYTE:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:30 [ calculate_matrix::$16 ] : zp ZP_BYTE:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:31 [ calculate_matrix::$17 ] : zp ZP_BYTE:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:32 [ calculate_matrix::$18 ] : zp ZP_BYTE:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:33 [ calculate_matrix::$19 ] : zp ZP_BYTE:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:34 [ calculate_matrix::$20 ] : zp ZP_BYTE:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:35 [ calculate_matrix::$21 ] : zp ZP_BYTE:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:36 [ calculate_matrix::$22 ] : zp ZP_BYTE:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:37 [ calculate_matrix::$23 ] : zp ZP_BYTE:37 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:38 [ calculate_matrix::$24 ] : zp ZP_BYTE:38 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:39 [ calculate_matrix::$25 ] : zp ZP_BYTE:39 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:40 [ calculate_matrix::$26 ] : zp ZP_BYTE:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:41 [ calculate_matrix::$27 ] : zp ZP_BYTE:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:42 [ calculate_matrix::$28 ] : zp ZP_BYTE:42 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:43 [ calculate_matrix::$29 ] : zp ZP_BYTE:43 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:44 [ calculate_matrix::$30 ] : zp ZP_BYTE:44 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:45 [ calculate_matrix::$31 ] : zp ZP_BYTE:45 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:46 [ calculate_matrix::$32 ] : zp ZP_BYTE:46 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:47 [ calculate_matrix::$33 ] : zp ZP_BYTE:47 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:48 [ calculate_matrix::$34 ] : zp ZP_BYTE:48 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [anim] 222.79: zp ZP_BYTE:4 [ anim::i#2 anim::i#1 ] 202: zp ZP_BYTE:12 [ anim::$6 ] 202: zp ZP_BYTE:13 [ anim::$8 ] 75.75: zp ZP_BYTE:11 [ anim::i2#0 ] 
Uplift Scope [calculate_matrix] 4: zp ZP_BYTE:24 [ calculate_matrix::$10 ] 4: zp ZP_BYTE:25 [ calculate_matrix::$11 ] 4: zp ZP_BYTE:26 [ calculate_matrix::$12 ] 4: zp ZP_BYTE:27 [ calculate_matrix::$13 ] 4: zp ZP_BYTE:28 [ calculate_matrix::$14 ] 4: zp ZP_BYTE:29 [ calculate_matrix::$15 ] 4: zp ZP_BYTE:30 [ calculate_matrix::$16 ] 4: zp ZP_BYTE:31 [ calculate_matrix::$17 ] 4: zp ZP_BYTE:32 [ calculate_matrix::$18 ] 4: zp ZP_BYTE:33 [ calculate_matrix::$19 ] 4: zp ZP_BYTE:34 [ calculate_matrix::$20 ] 4: zp ZP_BYTE:35 [ calculate_matrix::$21 ] 4: zp ZP_BYTE:36 [ calculate_matrix::$22 ] 4: zp ZP_BYTE:37 [ calculate_matrix::$23 ] 4: zp ZP_BYTE:38 [ calculate_matrix::$24 ] 4: zp ZP_BYTE:39 [ calculate_matrix::$25 ] 4: zp ZP_BYTE:40 [ calculate_matrix::$26 ] 4: zp ZP_BYTE:41 [ calculate_matrix::$27 ] 4: zp ZP_BYTE:42 [ calculate_matrix::$28 ] 4: zp ZP_BYTE:43 [ calculate_matrix::$29 ] 4: zp ZP_BYTE:44 [ calculate_matrix::$30 ] 4: zp ZP_BYTE:45 [ calculate_matrix::$31 ] 4: zp ZP_BYTE:46 [ calculate_matrix::$32 ] 4: zp ZP_BYTE:47 [ calculate_matrix::$33 ] 4: zp ZP_BYTE:48 [ calculate_matrix::$34 ] 2.45: zp ZP_BYTE:6 [ calculate_matrix::sx#0 ] 1.53: zp ZP_BYTE:7 [ calculate_matrix::sy#0 ] 0.91: zp ZP_BYTE:15 [ calculate_matrix::t2#0 ] 0.83: zp ZP_BYTE:14 [ calculate_matrix::t1#0 ] 0.31: zp ZP_BYTE:19 [ calculate_matrix::t6#0 ] 0.3: zp ZP_BYTE:17 [ calculate_matrix::t4#0 ] 0.3: zp ZP_BYTE:20 [ calculate_matrix::t7#0 ] 0.3: zp ZP_BYTE:21 [ calculate_matrix::t8#0 ] 0.29: zp ZP_BYTE:16 [ calculate_matrix::t3#0 ] 0.29: zp ZP_BYTE:18 [ calculate_matrix::t5#0 ] 0.18: zp ZP_BYTE:23 [ calculate_matrix::t10#0 ] 0.18: zp ZP_BYTE:22 [ calculate_matrix::t9#0 ] 
Uplift Scope [rotate_matrix] 34.33: zp ZP_BYTE:8 [ rotate_matrix::x#0 ] 34.33: zp ZP_BYTE:9 [ rotate_matrix::y#0 ] 34.33: zp ZP_BYTE:10 [ rotate_matrix::z#0 ] 
Uplift Scope [] 23.1: zp ZP_BYTE:3 [ sy#10 sy#3 ] 12.14: zp ZP_BYTE:2 [ sx#10 sx#3 ] 
Uplift Scope [sprites_init] 31.17: zp ZP_BYTE:5 [ sprites_init::i#2 sprites_init::i#1 ] 
Uplift Scope [main] 
Uplift Scope [store_matrix] 

Uplifting [anim] best 23887 combination zp ZP_BYTE:4 [ anim::i#2 anim::i#1 ] reg byte a [ anim::$6 ] reg byte a [ anim::$8 ] reg byte x [ anim::i2#0 ] 
Uplifting [rotate_matrix] best 23485 combination zp ZP_BYTE:8 [ rotate_matrix::x#0 ] reg byte y [ rotate_matrix::y#0 ] reg byte x [ rotate_matrix::z#0 ] 
Uplifting [] best 23485 combination zp ZP_BYTE:3 [ sy#10 sy#3 ] zp ZP_BYTE:2 [ sx#10 sx#3 ] 
Uplifting [sprites_init] best 23335 combination reg byte x [ sprites_init::i#2 sprites_init::i#1 ] 
Uplifting [main] best 23335 combination 
Uplifting [store_matrix] best 23335 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:4 [ anim::i#2 anim::i#1 ]
Uplifting [anim] best 23335 combination zp ZP_BYTE:4 [ anim::i#2 anim::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:8 [ rotate_matrix::x#0 ]
Uplifting [rotate_matrix] best 23335 combination zp ZP_BYTE:8 [ rotate_matrix::x#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ sy#10 sy#3 ]
Uplifting [] best 23335 combination zp ZP_BYTE:3 [ sy#10 sy#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ sx#10 sx#3 ]
Uplifting [] best 23335 combination zp ZP_BYTE:2 [ sx#10 sx#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:24 [ calculate_matrix::$10 ]
Uplifting [calculate_matrix] best 23329 combination reg byte a [ calculate_matrix::$10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:25 [ calculate_matrix::$11 ]
Uplifting [calculate_matrix] best 23323 combination reg byte a [ calculate_matrix::$11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:26 [ calculate_matrix::$12 ]
Uplifting [calculate_matrix] best 23317 combination reg byte a [ calculate_matrix::$12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:27 [ calculate_matrix::$13 ]
Uplifting [calculate_matrix] best 23311 combination reg byte a [ calculate_matrix::$13 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:28 [ calculate_matrix::$14 ]
Uplifting [calculate_matrix] best 23305 combination reg byte a [ calculate_matrix::$14 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:29 [ calculate_matrix::$15 ]
Uplifting [calculate_matrix] best 23299 combination reg byte a [ calculate_matrix::$15 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:30 [ calculate_matrix::$16 ]
Uplifting [calculate_matrix] best 23293 combination reg byte a [ calculate_matrix::$16 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:31 [ calculate_matrix::$17 ]
Uplifting [calculate_matrix] best 23287 combination reg byte a [ calculate_matrix::$17 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:32 [ calculate_matrix::$18 ]
Uplifting [calculate_matrix] best 23281 combination reg byte a [ calculate_matrix::$18 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:33 [ calculate_matrix::$19 ]
Uplifting [calculate_matrix] best 23275 combination reg byte a [ calculate_matrix::$19 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:34 [ calculate_matrix::$20 ]
Uplifting [calculate_matrix] best 23269 combination reg byte a [ calculate_matrix::$20 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:35 [ calculate_matrix::$21 ]
Uplifting [calculate_matrix] best 23263 combination reg byte a [ calculate_matrix::$21 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:36 [ calculate_matrix::$22 ]
Uplifting [calculate_matrix] best 23257 combination reg byte a [ calculate_matrix::$22 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:37 [ calculate_matrix::$23 ]
Uplifting [calculate_matrix] best 23251 combination reg byte a [ calculate_matrix::$23 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:38 [ calculate_matrix::$24 ]
Uplifting [calculate_matrix] best 23245 combination reg byte a [ calculate_matrix::$24 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:39 [ calculate_matrix::$25 ]
Uplifting [calculate_matrix] best 23239 combination reg byte a [ calculate_matrix::$25 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:40 [ calculate_matrix::$26 ]
Uplifting [calculate_matrix] best 23233 combination reg byte a [ calculate_matrix::$26 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:41 [ calculate_matrix::$27 ]
Uplifting [calculate_matrix] best 23227 combination reg byte a [ calculate_matrix::$27 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:42 [ calculate_matrix::$28 ]
Uplifting [calculate_matrix] best 23221 combination reg byte a [ calculate_matrix::$28 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:43 [ calculate_matrix::$29 ]
Uplifting [calculate_matrix] best 23215 combination reg byte a [ calculate_matrix::$29 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:44 [ calculate_matrix::$30 ]
Uplifting [calculate_matrix] best 23209 combination reg byte a [ calculate_matrix::$30 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:45 [ calculate_matrix::$31 ]
Uplifting [calculate_matrix] best 23203 combination reg byte a [ calculate_matrix::$31 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:46 [ calculate_matrix::$32 ]
Uplifting [calculate_matrix] best 23197 combination reg byte a [ calculate_matrix::$32 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:47 [ calculate_matrix::$33 ]
Uplifting [calculate_matrix] best 23191 combination reg byte a [ calculate_matrix::$33 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:48 [ calculate_matrix::$34 ]
Uplifting [calculate_matrix] best 23185 combination reg byte a [ calculate_matrix::$34 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ calculate_matrix::sx#0 ]
Uplifting [calculate_matrix] best 23147 combination reg byte x [ calculate_matrix::sx#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ calculate_matrix::sy#0 ]
Uplifting [calculate_matrix] best 23147 combination zp ZP_BYTE:7 [ calculate_matrix::sy#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:15 [ calculate_matrix::t2#0 ]
Uplifting [calculate_matrix] best 23144 combination reg byte y [ calculate_matrix::t2#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:14 [ calculate_matrix::t1#0 ]
Uplifting [calculate_matrix] best 23144 combination zp ZP_BYTE:14 [ calculate_matrix::t1#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:19 [ calculate_matrix::t6#0 ]
Uplifting [calculate_matrix] best 23144 combination zp ZP_BYTE:19 [ calculate_matrix::t6#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:17 [ calculate_matrix::t4#0 ]
Uplifting [calculate_matrix] best 23144 combination zp ZP_BYTE:17 [ calculate_matrix::t4#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:20 [ calculate_matrix::t7#0 ]
Uplifting [calculate_matrix] best 23144 combination zp ZP_BYTE:20 [ calculate_matrix::t7#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:21 [ calculate_matrix::t8#0 ]
Uplifting [calculate_matrix] best 23144 combination zp ZP_BYTE:21 [ calculate_matrix::t8#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:16 [ calculate_matrix::t3#0 ]
Uplifting [calculate_matrix] best 23144 combination zp ZP_BYTE:16 [ calculate_matrix::t3#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:18 [ calculate_matrix::t5#0 ]
Uplifting [calculate_matrix] best 23144 combination zp ZP_BYTE:18 [ calculate_matrix::t5#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:23 [ calculate_matrix::t10#0 ]
Uplifting [calculate_matrix] best 23144 combination zp ZP_BYTE:23 [ calculate_matrix::t10#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:22 [ calculate_matrix::t9#0 ]
Uplifting [calculate_matrix] best 23144 combination zp ZP_BYTE:22 [ calculate_matrix::t9#0 ] 
Coalescing zero page register with common assignment [ zp ZP_BYTE:3 [ sy#10 sy#3 ] ] with [ zp ZP_BYTE:7 [ calculate_matrix::sy#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_BYTE:4 [ anim::i#2 anim::i#1 ] ] with [ zp ZP_BYTE:14 [ calculate_matrix::t1#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:8 [ rotate_matrix::x#0 ] ] with [ zp ZP_BYTE:16 [ calculate_matrix::t3#0 ] ]
Allocated (was zp ZP_BYTE:8) zp ZP_BYTE:5 [ rotate_matrix::x#0 calculate_matrix::t3#0 ]
Allocated (was zp ZP_BYTE:17) zp ZP_BYTE:6 [ calculate_matrix::t4#0 ]
Allocated (was zp ZP_BYTE:18) zp ZP_BYTE:7 [ calculate_matrix::t5#0 ]
Allocated (was zp ZP_BYTE:19) zp ZP_BYTE:8 [ calculate_matrix::t6#0 ]
Allocated (was zp ZP_BYTE:20) zp ZP_BYTE:9 [ calculate_matrix::t7#0 ]
Allocated (was zp ZP_BYTE:21) zp ZP_BYTE:10 [ calculate_matrix::t8#0 ]
Allocated (was zp ZP_BYTE:22) zp ZP_BYTE:11 [ calculate_matrix::t9#0 ]
Allocated (was zp ZP_BYTE:23) zp ZP_BYTE:12 [ calculate_matrix::t10#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  .const GREEN = 5
  .const LIGHT_BLUE = $e
  .const LIGHT_GREY = $f
  .label xr = $f0
  .label yr = $f1
  .label zr = $f2
  .label pp = $f3
  .label xp = $f4
  .label yp = $f5
  .label psp1 = $f6
  .label psp2 = $f8
  .const sz = 0
  .label mulf_sqr1 = $2400
  .label mulf_sqr2 = $2600
  .label SPRITE = $3000
  .label PERSP_Z = $2800
  .label SINH = $2000
  .label SINQ = $2200
  .label SINH_LO = $4000
  .label SINH_HI = $4200
  .label SINQ_LO = $4400
  .label SINQ_HI = $4600
  .label COSH = SINH+$40
  .label COSQ = SINQ+$40
  .label sx = 2
  .label sy = 3
//SEG2 @begin
bbegin:
  jmp b30
//SEG3 @30
b30:
//SEG4 kickasm(location (const byte*) mulf_sqr1#0) {{ .for(var i=0;i<$200;i++) {     	.if(i<=159) { .byte round((i*i)/256) }     	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }     	.if(i>351) { .byte round(((512-i)*(512-i))/256) }     }  }}
//SEG5 kickasm(location (const byte*) mulf_sqr2#0) {{ .for(var i=0;i<$200;i++) {     	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }     	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }     	.if(i>351) { .byte round(((i-511)*(i-511))/256) }       }  }}
//SEG6 kickasm(location (const byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))     .for (var y=0; y<21; y++)         .for (var x=0;x<3; x++)             .byte pic.getSinglecolorByte(x,y)  }}
//SEG7 kickasm(location (const signed byte*) PERSP_Z#0) {{ {     .var d = 256.0	     .var z0 = 6.0	     // These values of d/z0 result in table values from $20 to $40 (effectively max is $3f)     .for(var z=0;z<$100;z++) {     	.if(z>127) {     		.byte round(d / (z0 - ((z - 256) / 64.0)));     	} else {     		.byte round(d / (z0 - (z / 64.0)));     	}     } 	}  }}
//SEG8 kickasm(location (const signed byte*) SINH#0) {{ {     .var min = -$2000     .var max = $2000     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)     }     }  }}
//SEG9 kickasm(location (const signed byte*) SINQ#0) {{ {     .var min = -$1000     .var max = $1000     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)     }     }  }}
//SEG10 kickasm(location (const byte*) SINH_LO#0) {{ {     .var min = -$2000     .var max = $2000     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte <(min+(ampl/2)+(ampl/2)*sin(rad))     }     }  }}
//SEG11 kickasm(location (const byte*) SINH_HI#0) {{ {     .var min = -$2000     .var max = $2000     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte >(min+(ampl/2)+(ampl/2)*sin(rad))     }     }  }}
//SEG12 kickasm(location (const byte*) SINQ_LO#0) {{ {     .var min = -$1000     .var max = $1000     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte <(min+(ampl/2)+(ampl/2)*sin(rad))     }     }  }}
//SEG13 kickasm(location (const byte*) SINQ_HI#0) {{ {     .var min = -$1000     .var max = $1000     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte >(min+(ampl/2)+(ampl/2)*sin(rad))     }     }  }}
//SEG14 [11] call main 
  jsr main
//SEG15 [12] phi from @30 to @end [phi:@30->@end]
bend_from_b30:
  jmp bend
//SEG16 @end
bend:
//SEG17 main
main: {
  //SEG18 asm { sei  }
    sei
  //SEG19 [14] call sprites_init 
    jsr sprites_init
    jmp b1
  //SEG20 main::@1
  b1:
  //SEG21 [15] *((const word*) psp1#0) ← ((word))(const byte*) mulf_sqr1#0 -- _deref_pwuc1=vwuc2 
    lda #<mulf_sqr1
    sta psp1
    lda #>mulf_sqr1
    sta psp1+1
  //SEG22 [16] *((const word*) psp2#0) ← ((word))(const byte*) mulf_sqr2#0 -- _deref_pwuc1=vwuc2 
    lda #<mulf_sqr2
    sta psp2
    lda #>mulf_sqr2
    sta psp2+1
  //SEG23 [17] call anim 
  //SEG24 [19] phi from main::@1 to anim [phi:main::@1->anim]
  anim_from_b1:
    jsr anim
    jmp breturn
  //SEG25 main::@return
  breturn:
  //SEG26 [18] return 
    rts
}
//SEG27 anim
anim: {
    .label i = 4
  //SEG28 [20] phi from anim to anim::@1 [phi:anim->anim::@1]
  b1_from_anim:
  //SEG29 [20] phi (signed byte) sy#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#0] -- vbsz1=vbuc1 
    lda #0
    sta sy
  //SEG30 [20] phi (signed byte) sx#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#1] -- vbsz1=vbuc1 
    lda #0
    sta sx
    jmp b1
  //SEG31 anim::@1
  b1:
    jmp b4
  //SEG32 anim::@4
  b4:
  //SEG33 [21] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto anim::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
    jmp b6
  //SEG34 anim::@6
  b6:
  //SEG35 [22] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG36 [23] (signed byte) calculate_matrix::sx#0 ← (signed byte) sx#10 -- vbsxx=vbsz1 
    ldx sx
  //SEG37 [24] (signed byte) calculate_matrix::sy#0 ← (signed byte) sy#10
    // (signed byte) calculate_matrix::sy#0 = (signed byte) sy#10  // register copy zp ZP_BYTE:3
  //SEG38 [25] call calculate_matrix 
    jsr calculate_matrix
  //SEG39 [26] phi from anim::@6 to anim::@15 [phi:anim::@6->anim::@15]
  b15_from_b6:
    jmp b15
  //SEG40 anim::@15
  b15:
  //SEG41 [27] call store_matrix 
    jsr store_matrix
  //SEG42 [28] phi from anim::@15 to anim::@7 [phi:anim::@15->anim::@7]
  b7_from_b15:
  //SEG43 [28] phi (byte) anim::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim::@15->anim::@7#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b7
  //SEG44 [28] phi from anim::@17 to anim::@7 [phi:anim::@17->anim::@7]
  b7_from_b17:
  //SEG45 [28] phi (byte) anim::i#2 = (byte) anim::i#1 [phi:anim::@17->anim::@7#0] -- register_copy 
    jmp b7
  //SEG46 anim::@7
  b7:
  //SEG47 [29] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG48 [30] (signed byte) rotate_matrix::x#0 ← *((const signed byte[8]) xs#0 + (byte) anim::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda xs,y
    sta rotate_matrix.x
  //SEG49 [31] (signed byte) rotate_matrix::y#0 ← *((const signed byte[8]) ys#0 + (byte) anim::i#2) -- vbsyy=pbsc1_derefidx_vbuz1 
    ldx i
    ldy ys,x
  //SEG50 [32] (signed byte) rotate_matrix::z#0 ← *((const signed byte[8]) zs#0 + (byte) anim::i#2) -- vbsxx=pbsc1_derefidx_vbuz1 
    ldx i
    lda zs,x
    tax
  //SEG51 [33] call rotate_matrix 
    jsr rotate_matrix
    jmp b17
  //SEG52 anim::@17
  b17:
  //SEG53 [34] *((const signed byte[8]) xrs#0 + (byte) anim::i#2) ← *((const signed byte*) xr#0) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    ldy i
    lda xr
    sta xrs,y
  //SEG54 [35] *((const signed byte[8]) yrs#0 + (byte) anim::i#2) ← *((const signed byte*) yr#0) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    ldy i
    lda yr
    sta yrs,y
  //SEG55 [36] *((const signed byte[8]) zrs#0 + (byte) anim::i#2) ← *((const signed byte*) zr#0) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    ldy i
    lda zr
    sta zrs,y
  //SEG56 [37] *((const signed byte[8]) pps#0 + (byte) anim::i#2) ← *((const signed byte*) pp#0) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    ldy i
    lda pp
    sta pps,y
  //SEG57 [38] *((const signed byte[8]) xps#0 + (byte) anim::i#2) ← *((const signed byte*) xp#0) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    ldy i
    lda xp
    sta xps,y
  //SEG58 [39] *((const signed byte[8]) yps#0 + (byte) anim::i#2) ← *((const signed byte*) yp#0) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    ldy i
    lda yp
    sta yps,y
  //SEG59 [40] (byte) anim::i2#0 ← (byte) anim::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuxx=vbuz1_rol_1 
    lda i
    asl
    tax
  //SEG60 [41] (byte/word/signed word/dword/signed dword~) anim::$6 ← (byte/word/signed word/dword/signed dword) 128 + (byte)*((const signed byte*) xp#0) -- vbuaa=vbuc1_plus__deref_pbuc2 
    lda #$80
    clc
    adc xp
  //SEG61 [42] *((const byte*) SPRITES_XPOS#0 + (byte) anim::i2#0) ← (byte/word/signed word/dword/signed dword~) anim::$6 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SPRITES_XPOS,x
  //SEG62 [43] (byte/word/signed word/dword/signed dword~) anim::$8 ← (byte/word/signed word/dword/signed dword) 128 + (byte)*((const signed byte*) yp#0) -- vbuaa=vbuc1_plus__deref_pbuc2 
    lda #$80
    clc
    adc yp
  //SEG63 [44] *((const byte*) SPRITES_YPOS#0 + (byte) anim::i2#0) ← (byte/word/signed word/dword/signed dword~) anim::$8 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SPRITES_YPOS,x
  //SEG64 [45] (byte) anim::i#1 ← ++ (byte) anim::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG65 [46] if((byte) anim::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto anim::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #8
    bne b7_from_b17
    jmp b13
  //SEG66 anim::@13
  b13:
  //SEG67 [47] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_GREY#0 -- _deref_pbuc1=vbuc2 
    lda #LIGHT_GREY
    sta BORDERCOL
  //SEG68 [48] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta BORDERCOL
  //SEG69 [49] (signed byte) sx#3 ← (signed byte) sx#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbsz1=vbsz1_plus_2 
    inc sx
    inc sx
  //SEG70 [50] (signed byte) sy#3 ← (signed byte) sy#10 - (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbsz1=vbsz1_minus_vbuc1 
    lda sy
    sec
    sbc #3
    sta sy
  //SEG71 [20] phi from anim::@13 to anim::@1 [phi:anim::@13->anim::@1]
  b1_from_b13:
  //SEG72 [20] phi (signed byte) sy#10 = (signed byte) sy#3 [phi:anim::@13->anim::@1#0] -- register_copy 
  //SEG73 [20] phi (signed byte) sx#10 = (signed byte) sx#3 [phi:anim::@13->anim::@1#1] -- register_copy 
    jmp b1
}
//SEG74 rotate_matrix
rotate_matrix: {
    .label x = 5
  //SEG75 [51] *((const signed byte*) xr#0) ← (signed byte) rotate_matrix::x#0 -- _deref_pbsc1=vbsz1 
    lda x
    sta xr
  //SEG76 [52] *((const signed byte*) yr#0) ← (signed byte) rotate_matrix::y#0 -- _deref_pbsc1=vbsyy 
    tya
    sta yr
  //SEG77 [53] *((const signed byte*) zr#0) ← (signed byte) rotate_matrix::z#0 -- _deref_pbsc1=vbsxx 
    txa
    sta zr
  //SEG78 asm { ldxzr C1: ldamulf_sqr1,x sec C2: sbcmulf_sqr2,x staC3+1 F1: ldamulf_sqr1,x sec F2: sbcmulf_sqr2,x staF3+1 I1: ldamulf_sqr1,x sec I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr I3: lda#0 clc G1: adcmulf_sqr1,x sec G2: sbcmulf_sqr2,x clc H1: adcmulf_sqr1,y sec H2: sbcmulf_sqr2,y stazr staPP+1 PP: ldaPERSP_Z stapp stapsp1 eor#$ff stapsp2 C3: lda#0 clc A1: adcmulf_sqr1,x sec A2: sbcmulf_sqr2,x clc B1: adcmulf_sqr1,y sec B2: sbcmulf_sqr2,y staxr staXX+1 clc F3: lda#0 clc D1: adcmulf_sqr1,x sec D2: sbcmulf_sqr2,x clc E1: adcmulf_sqr1,y sec E2: sbcmulf_sqr2,y stayr tay lda(psp1),y sec sbc(psp2),y stayp XX: ldy#0 lda(psp1),y sec sbc(psp2),y staxp  }
    ldx zr
  C1:
    lda mulf_sqr1,x
    sec
  C2:
    sbc mulf_sqr2,x
    sta C3+1
  F1:
    lda mulf_sqr1,x
    sec
  F2:
    sbc mulf_sqr2,x
    sta F3+1
  I1:
    lda mulf_sqr1,x
    sec
  I2:
    sbc mulf_sqr2,x
    sta I3+1
    ldx xr
    ldy yr
  I3:
    lda #0
    clc
  G1:
    adc mulf_sqr1,x
    sec
  G2:
    sbc mulf_sqr2,x
    clc
  H1:
    adc mulf_sqr1,y
    sec
  H2:
    sbc mulf_sqr2,y
    sta zr
    sta PP+1
  PP:
    lda PERSP_Z
    sta pp
    sta psp1
    eor #$ff
    sta psp2
  C3:
    lda #0
    clc
  A1:
    adc mulf_sqr1,x
    sec
  A2:
    sbc mulf_sqr2,x
    clc
  B1:
    adc mulf_sqr1,y
    sec
  B2:
    sbc mulf_sqr2,y
    sta xr
    sta XX+1
    clc
  F3:
    lda #0
    clc
  D1:
    adc mulf_sqr1,x
    sec
  D2:
    sbc mulf_sqr2,x
    clc
  E1:
    adc mulf_sqr1,y
    sec
  E2:
    sbc mulf_sqr2,y
    sta yr
    tay
    lda (psp1),y
    sec
    sbc (psp2),y
    sta yp
  XX:
    ldy #0
    lda (psp1),y
    sec
    sbc (psp2),y
    sta xp
    jmp breturn
  //SEG79 rotate_matrix::@return
  breturn:
  //SEG80 [55] return 
    rts
}
//SEG81 store_matrix
store_matrix: {
  //SEG82 asm { ldarotation_matrix+0 starotate_matrix.A1+1 eor#$ff starotate_matrix.A2+1 ldarotation_matrix+1 starotate_matrix.B1+1 eor#$ff starotate_matrix.B2+1 ldarotation_matrix+2 starotate_matrix.C1+1 eor#$ff starotate_matrix.C2+1 ldarotation_matrix+3 starotate_matrix.D1+1 eor#$ff starotate_matrix.D2+1 ldarotation_matrix+4 starotate_matrix.E1+1 eor#$ff starotate_matrix.E2+1 ldarotation_matrix+5 starotate_matrix.F1+1 eor#$ff starotate_matrix.F2+1 ldarotation_matrix+6 starotate_matrix.G1+1 eor#$ff starotate_matrix.G2+1 ldarotation_matrix+7 starotate_matrix.H1+1 eor#$ff starotate_matrix.H2+1 ldarotation_matrix+8 starotate_matrix.I1+1 eor#$ff starotate_matrix.I2+1  }
    lda rotation_matrix+0
    sta rotate_matrix.A1+1
    eor #$ff
    sta rotate_matrix.A2+1
    lda rotation_matrix+1
    sta rotate_matrix.B1+1
    eor #$ff
    sta rotate_matrix.B2+1
    lda rotation_matrix+2
    sta rotate_matrix.C1+1
    eor #$ff
    sta rotate_matrix.C2+1
    lda rotation_matrix+3
    sta rotate_matrix.D1+1
    eor #$ff
    sta rotate_matrix.D2+1
    lda rotation_matrix+4
    sta rotate_matrix.E1+1
    eor #$ff
    sta rotate_matrix.E2+1
    lda rotation_matrix+5
    sta rotate_matrix.F1+1
    eor #$ff
    sta rotate_matrix.F2+1
    lda rotation_matrix+6
    sta rotate_matrix.G1+1
    eor #$ff
    sta rotate_matrix.G2+1
    lda rotation_matrix+7
    sta rotate_matrix.H1+1
    eor #$ff
    sta rotate_matrix.H2+1
    lda rotation_matrix+8
    sta rotate_matrix.I1+1
    eor #$ff
    sta rotate_matrix.I2+1
    jmp breturn
  //SEG83 store_matrix::@return
  breturn:
  //SEG84 [57] return 
    rts
}
//SEG85 calculate_matrix
calculate_matrix: {
    .label sy = 3
    .label t1 = 4
    .label t3 = 5
    .label t4 = 6
    .label t5 = 7
    .label t6 = 8
    .label t7 = 9
    .label t8 = $a
    .label t9 = $b
    .label t10 = $c
  //SEG86 [58] (signed byte) calculate_matrix::t1#0 ← (signed byte) calculate_matrix::sy#0 - (const signed byte) sz#0 -- vbsz1=vbsz2_minus_vbsc1 
    lda sy
    sec
    sbc #sz
    sta t1
  //SEG87 [59] (signed byte) calculate_matrix::t2#0 ← (signed byte) calculate_matrix::sy#0 + (const signed byte) sz#0 -- vbsyy=vbsz1_plus_vbsc1 
    lda #sz
    clc
    adc sy
    tay
  //SEG88 [60] (signed byte) calculate_matrix::t3#0 ← (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsxx 
    stx t3
  //SEG89 [61] (signed byte) calculate_matrix::t4#0 ← (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsxx 
    stx t4
  //SEG90 [62] (signed byte) calculate_matrix::t5#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t2#0 -- vbsz1=vbsxx_plus_vbsyy 
    txa
    sty $ff
    clc
    adc $ff
    sta t5
  //SEG91 [63] (signed byte) calculate_matrix::t6#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::t1#0 -- vbsz1=vbsxx_minus_vbsz2 
    txa
    sec
    sbc t1
    sta t6
  //SEG92 [64] (signed byte) calculate_matrix::t7#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t1#0 -- vbsz1=vbsxx_plus_vbsz2 
    txa
    clc
    adc t1
    sta t7
  //SEG93 [65] (signed byte) calculate_matrix::t8#0 ← (signed byte) calculate_matrix::t2#0 - (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsyy_minus_vbsxx 
    tya
    stx $ff
    sec
    sbc $ff
    sta t8
  //SEG94 [66] (signed byte) calculate_matrix::t9#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsz2_minus_vbsxx 
    txa
    eor #$ff
    sec
    adc sy
    sta t9
  //SEG95 [67] (signed byte) calculate_matrix::t10#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsz2_plus_vbsxx 
    txa
    clc
    adc sy
    sta t10
  //SEG96 [68] (signed byte~) calculate_matrix::$10 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t1#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t2#0) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsyy 
    ldx t1
    clc
    lda COSH,x
    adc COSH,y
  //SEG97 [69] *((const signed byte[9]) rotation_matrix#0) ← (signed byte~) calculate_matrix::$10 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix
  //SEG98 [70] (signed byte~) calculate_matrix::$11 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t1#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t2#0) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc1_derefidx_vbsyy 
    ldx t1
    sec
    lda SINH,x
    sbc SINH,y
  //SEG99 [71] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (signed byte~) calculate_matrix::$11 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+1
  //SEG100 [72] (signed byte~) calculate_matrix::$12 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz1 
    ldy sy
    clc
    lda SINH,y
    adc SINH,y
  //SEG101 [73] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (signed byte~) calculate_matrix::$12 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+2
  //SEG102 [74] (signed byte~) calculate_matrix::$13 ← *((const signed byte*) SINH#0+(const signed byte) sz#0 + (signed byte) calculate_matrix::t3#0) - *((const signed byte*) SINH#0+-(const signed byte) sz#0 + (signed byte) calculate_matrix::t4#0) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc2_derefidx_vbsz2 
    ldx t3
    ldy t4
    sec
    lda SINH+sz,x
    sbc SINH+-sz,y
  //SEG103 [75] (signed byte~) calculate_matrix::$14 ← (signed byte~) calculate_matrix::$13 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t6
    clc
    adc COSQ,y
  //SEG104 [76] (signed byte~) calculate_matrix::$15 ← (signed byte~) calculate_matrix::$14 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t5
    sec
    sbc COSQ,y
  //SEG105 [77] (signed byte~) calculate_matrix::$16 ← (signed byte~) calculate_matrix::$15 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t8
    clc
    adc COSQ,y
  //SEG106 [78] (signed byte~) calculate_matrix::$17 ← (signed byte~) calculate_matrix::$16 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t7
    sec
    sbc COSQ,y
  //SEG107 [79] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (signed byte~) calculate_matrix::$17 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+3
  //SEG108 [80] (signed byte~) calculate_matrix::$18 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz2 
    ldx t3
    ldy t4
    clc
    lda COSH,x
    adc COSH,y
  //SEG109 [81] (signed byte~) calculate_matrix::$19 ← (signed byte~) calculate_matrix::$18 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t5
    clc
    adc SINQ,y
  //SEG110 [82] (signed byte~) calculate_matrix::$20 ← (signed byte~) calculate_matrix::$19 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t6
    sec
    sbc SINQ,y
  //SEG111 [83] (signed byte~) calculate_matrix::$21 ← (signed byte~) calculate_matrix::$20 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t7
    sec
    sbc SINQ,y
  //SEG112 [84] (signed byte~) calculate_matrix::$22 ← (signed byte~) calculate_matrix::$21 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t8
    sec
    sbc SINQ,y
  //SEG113 [85] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (signed byte~) calculate_matrix::$22 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+4
  //SEG114 [86] (signed byte~) calculate_matrix::$23 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t9#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t10#0) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc1_derefidx_vbsz2 
    ldx t9
    ldy t10
    sec
    lda SINH,x
    sbc SINH,y
  //SEG115 [87] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (signed byte~) calculate_matrix::$23 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+5
  //SEG116 [88] (signed byte~) calculate_matrix::$24 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) - *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc1_derefidx_vbsz2 
    ldx t4
    ldy t3
    sec
    lda COSH,x
    sbc COSH,y
  //SEG117 [89] (signed byte~) calculate_matrix::$25 ← (signed byte~) calculate_matrix::$24 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t6
    clc
    adc SINQ,y
  //SEG118 [90] (signed byte~) calculate_matrix::$26 ← (signed byte~) calculate_matrix::$25 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t5
    sec
    sbc SINQ,y
  //SEG119 [91] (signed byte~) calculate_matrix::$27 ← (signed byte~) calculate_matrix::$26 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t8
    sec
    sbc SINQ,y
  //SEG120 [92] (signed byte~) calculate_matrix::$28 ← (signed byte~) calculate_matrix::$27 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t7
    sec
    sbc SINQ,y
  //SEG121 [93] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (signed byte~) calculate_matrix::$28 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+6
  //SEG122 [94] (signed byte~) calculate_matrix::$29 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t4#0) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz2 
    ldx t3
    ldy t4
    clc
    lda SINH,x
    adc SINH,y
  //SEG123 [95] (signed byte~) calculate_matrix::$30 ← (signed byte~) calculate_matrix::$29 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t6
    clc
    adc COSQ,y
  //SEG124 [96] (signed byte~) calculate_matrix::$31 ← (signed byte~) calculate_matrix::$30 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t5
    sec
    sbc COSQ,y
  //SEG125 [97] (signed byte~) calculate_matrix::$32 ← (signed byte~) calculate_matrix::$31 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t7
    clc
    adc COSQ,y
  //SEG126 [98] (signed byte~) calculate_matrix::$33 ← (signed byte~) calculate_matrix::$32 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t8
    sec
    sbc COSQ,y
  //SEG127 [99] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 7) ← (signed byte~) calculate_matrix::$33 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+7
  //SEG128 [100] (signed byte~) calculate_matrix::$34 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t9#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t10#0) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz2 
    ldx t9
    ldy t10
    clc
    lda COSH,x
    adc COSH,y
  //SEG129 [101] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (signed byte~) calculate_matrix::$34 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+8
    jmp breturn
  //SEG130 calculate_matrix::@return
  breturn:
  //SEG131 [102] return 
    rts
}
//SEG132 sprites_init
sprites_init: {
    .label SCREEN = $400
    .label sprites_ptr = SCREEN+$3f8
  //SEG133 [103] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 -- _deref_pbuc1=vbuc2 
    lda #$ff
    sta SPRITES_ENABLE
  //SEG134 [104] phi from sprites_init to sprites_init::@1 [phi:sprites_init->sprites_init::@1]
  b1_from_sprites_init:
  //SEG135 [104] phi (byte) sprites_init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sprites_init->sprites_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG136 [104] phi from sprites_init::@1 to sprites_init::@1 [phi:sprites_init::@1->sprites_init::@1]
  b1_from_b1:
  //SEG137 [104] phi (byte) sprites_init::i#2 = (byte) sprites_init::i#1 [phi:sprites_init::@1->sprites_init::@1#0] -- register_copy 
    jmp b1
  //SEG138 sprites_init::@1
  b1:
  //SEG139 [105] *((const byte*) sprites_init::sprites_ptr#0 + (byte) sprites_init::i#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$ff&SPRITE/$40
    sta sprites_ptr,x
  //SEG140 [106] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::i#2) ← (const byte) GREEN#0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #GREEN
    sta SPRITES_COLS,x
  //SEG141 [107] (byte) sprites_init::i#1 ← ++ (byte) sprites_init::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG142 [108] if((byte) sprites_init::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto sprites_init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b1_from_b1
    jmp breturn
  //SEG143 sprites_init::@return
  breturn:
  //SEG144 [109] return 
    rts
}
  zs: .byte $34, $34, $34, $34, $34, $34, $34, $34
  xrs: .fill 8, 0
  yrs: .fill 8, 0
  zrs: .fill 8, 0
  pps: .fill 8, 0
  xps: .fill 8, 0
  yps: .fill 8, 0
  rotation_matrix: .fill 9, 0
  xs: .byte -$34, -$34, -$34, 0, 0, $34, $34, $34
  ys: .byte -$34, 0, $34, -$34, $34, -$34, 0, $34
.pc = mulf_sqr1 "Inline"
  .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((i*i)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }
    	.if(i>351) { .byte round(((512-i)*(512-i))/256) }
    }

.pc = mulf_sqr2 "Inline"
  .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }
    	.if(i>351) { .byte round(((i-511)*(i-511))/256) }  
    }

.pc = SPRITE "Inline"
  .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)

.pc = PERSP_Z "Inline"
  {
    .var d = 256.0	
    .var z0 = 6.0	
    // These values of d/z0 result in table values from $20 to $40 (effectively max is $3f)
    .for(var z=0;z<$100;z++) {
    	.if(z>127) {
    		.byte round(d / (z0 - ((z - 256) / 64.0)));
    	} else {
    		.byte round(d / (z0 - (z / 64.0)));
    	}
    }
	}

.pc = SINH "Inline"
  {
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }

.pc = SINQ "Inline"
  {
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }

.pc = SINH_LO "Inline"
  {
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte <(min+(ampl/2)+(ampl/2)*sin(rad))
    }
    }

.pc = SINH_HI "Inline"
  {
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >(min+(ampl/2)+(ampl/2)*sin(rad))
    }
    }

.pc = SINQ_LO "Inline"
  {
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte <(min+(ampl/2)+(ampl/2)*sin(rad))
    }
    }

.pc = SINQ_HI "Inline"
  {
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >(min+(ampl/2)+(ampl/2)*sin(rad))
    }
    }


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b30
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b6
Removing instruction jmp b15
Removing instruction jmp b7
Removing instruction jmp b17
Removing instruction jmp b13
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction ldx i
Removing instruction ldy i
Removing instruction ldy i
Removing instruction ldy i
Removing instruction ldy i
Removing instruction ldy i
Replacing instruction lda i with TYA
Replacing instruction ldx zr with TAX
Removing instruction ldx t1
Removing instruction ldx t3
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b7_from_b17 with b7
Replacing label b1 with b4
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction bend_from_b30:
Removing instruction b1:
Removing instruction b15_from_b6:
Removing instruction b7_from_b17:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b30:
Removing instruction bend:
Removing instruction b1:
Removing instruction anim_from_b1:
Removing instruction breturn:
Removing instruction b1_from_anim:
Removing instruction b6:
Removing instruction b15:
Removing instruction b7_from_b15:
Removing instruction b17:
Removing instruction b13:
Removing instruction b1_from_b13:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_sprites_init:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp b7
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @30
(label) @begin
(label) @end
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) 53280
(signed byte*) COSH
(const signed byte*) COSH#0 COSH = (const signed byte*) SINH#0+(byte/signed byte/word/signed word/dword/signed dword) 64
(signed byte*) COSQ
(const signed byte*) COSQ#0 COSQ = (const signed byte*) SINQ#0+(byte/signed byte/word/signed word/dword/signed dword) 64
(byte) GREEN
(const byte) GREEN#0 GREEN = (byte/signed byte/word/signed word/dword/signed dword) 5
(byte) LIGHT_BLUE
(const byte) LIGHT_BLUE#0 LIGHT_BLUE = (byte/signed byte/word/signed word/dword/signed dword) 14
(byte) LIGHT_GREY
(const byte) LIGHT_GREY#0 LIGHT_GREY = (byte/signed byte/word/signed word/dword/signed dword) 15
(signed byte*) PERSP_Z
(const signed byte*) PERSP_Z#0 PERSP_Z = ((signed byte*))(word/signed word/dword/signed dword) 10240
(byte*) RASTER
(const byte*) RASTER#0 RASTER = ((byte*))(word/dword/signed dword) 53266
(signed byte*) SINH
(const signed byte*) SINH#0 SINH = ((signed byte*))(word/signed word/dword/signed dword) 8192
(byte*) SINH_HI
(const byte*) SINH_HI#0 SINH_HI = ((byte*))(word/signed word/dword/signed dword) 16896
(byte*) SINH_LO
(const byte*) SINH_LO#0 SINH_LO = ((byte*))(word/signed word/dword/signed dword) 16384
(signed byte*) SINQ
(const signed byte*) SINQ#0 SINQ = ((signed byte*))(word/signed word/dword/signed dword) 8704
(byte*) SINQ_HI
(const byte*) SINQ_HI#0 SINQ_HI = ((byte*))(word/signed word/dword/signed dword) 17920
(byte*) SINQ_LO
(const byte*) SINQ_LO#0 SINQ_LO = ((byte*))(word/signed word/dword/signed dword) 17408
(byte*) SPRITE
(const byte*) SPRITE#0 SPRITE = ((byte*))(word/signed word/dword/signed dword) 12288
(byte*) SPRITES_COLS
(const byte*) SPRITES_COLS#0 SPRITES_COLS = ((byte*))(word/dword/signed dword) 53287
(byte*) SPRITES_ENABLE
(const byte*) SPRITES_ENABLE#0 SPRITES_ENABLE = ((byte*))(word/dword/signed dword) 53269
(byte*) SPRITES_XPOS
(const byte*) SPRITES_XPOS#0 SPRITES_XPOS = ((byte*))(word/dword/signed dword) 53248
(byte*) SPRITES_YPOS
(const byte*) SPRITES_YPOS#0 SPRITES_YPOS = ((byte*))(word/dword/signed dword) 53249
(void()) anim()
(byte/word/signed word/dword/signed dword~) anim::$6 reg byte a 202.0
(byte/word/signed word/dword/signed dword~) anim::$8 reg byte a 202.0
(label) anim::@1
(label) anim::@13
(label) anim::@15
(label) anim::@17
(label) anim::@4
(label) anim::@6
(label) anim::@7
(byte) anim::i
(byte) anim::i#1 i zp ZP_BYTE:4 151.5
(byte) anim::i#2 i zp ZP_BYTE:4 71.29411764705881
(byte) anim::i2
(byte) anim::i2#0 reg byte x 75.75
(void()) calculate_matrix((signed byte) calculate_matrix::sx , (signed byte) calculate_matrix::sy , (signed byte) calculate_matrix::sz)
(signed byte~) calculate_matrix::$10 reg byte a 4.0
(signed byte~) calculate_matrix::$11 reg byte a 4.0
(signed byte~) calculate_matrix::$12 reg byte a 4.0
(signed byte~) calculate_matrix::$13 reg byte a 4.0
(signed byte~) calculate_matrix::$14 reg byte a 4.0
(signed byte~) calculate_matrix::$15 reg byte a 4.0
(signed byte~) calculate_matrix::$16 reg byte a 4.0
(signed byte~) calculate_matrix::$17 reg byte a 4.0
(signed byte~) calculate_matrix::$18 reg byte a 4.0
(signed byte~) calculate_matrix::$19 reg byte a 4.0
(signed byte~) calculate_matrix::$20 reg byte a 4.0
(signed byte~) calculate_matrix::$21 reg byte a 4.0
(signed byte~) calculate_matrix::$22 reg byte a 4.0
(signed byte~) calculate_matrix::$23 reg byte a 4.0
(signed byte~) calculate_matrix::$24 reg byte a 4.0
(signed byte~) calculate_matrix::$25 reg byte a 4.0
(signed byte~) calculate_matrix::$26 reg byte a 4.0
(signed byte~) calculate_matrix::$27 reg byte a 4.0
(signed byte~) calculate_matrix::$28 reg byte a 4.0
(signed byte~) calculate_matrix::$29 reg byte a 4.0
(signed byte~) calculate_matrix::$30 reg byte a 4.0
(signed byte~) calculate_matrix::$31 reg byte a 4.0
(signed byte~) calculate_matrix::$32 reg byte a 4.0
(signed byte~) calculate_matrix::$33 reg byte a 4.0
(signed byte~) calculate_matrix::$34 reg byte a 4.0
(label) calculate_matrix::@return
(signed byte) calculate_matrix::sx
(signed byte) calculate_matrix::sx#0 reg byte x 2.4545454545454546
(signed byte) calculate_matrix::sy
(signed byte) calculate_matrix::sy#0 sy zp ZP_BYTE:3 1.5333333333333332
(signed byte) calculate_matrix::sz
(signed byte) calculate_matrix::t1
(signed byte) calculate_matrix::t1#0 t1 zp ZP_BYTE:4 0.8333333333333333
(signed byte) calculate_matrix::t10
(signed byte) calculate_matrix::t10#0 t10 zp ZP_BYTE:12 0.18181818181818182
(signed byte) calculate_matrix::t2
(signed byte) calculate_matrix::t2#0 reg byte y 0.9090909090909092
(signed byte) calculate_matrix::t3
(signed byte) calculate_matrix::t3#0 t3 zp ZP_BYTE:5 0.29411764705882354
(signed byte) calculate_matrix::t4
(signed byte) calculate_matrix::t4#0 t4 zp ZP_BYTE:6 0.30303030303030304
(signed byte) calculate_matrix::t5
(signed byte) calculate_matrix::t5#0 t5 zp ZP_BYTE:7 0.29411764705882354
(signed byte) calculate_matrix::t6
(signed byte) calculate_matrix::t6#0 t6 zp ZP_BYTE:8 0.3125
(signed byte) calculate_matrix::t7
(signed byte) calculate_matrix::t7#0 t7 zp ZP_BYTE:9 0.30303030303030304
(signed byte) calculate_matrix::t8
(signed byte) calculate_matrix::t8#0 t8 zp ZP_BYTE:10 0.30303030303030304
(signed byte) calculate_matrix::t9
(signed byte) calculate_matrix::t9#0 t9 zp ZP_BYTE:11 0.1764705882352941
(void()) main()
(label) main::@1
(label) main::@return
(byte*) mulf_sqr1
(const byte*) mulf_sqr1#0 mulf_sqr1 = ((byte*))(word/signed word/dword/signed dword) 9216
(byte*) mulf_sqr2
(const byte*) mulf_sqr2#0 mulf_sqr2 = ((byte*))(word/signed word/dword/signed dword) 9728
(signed byte*) pp
(const signed byte*) pp#0 pp = ((signed byte*))(byte/word/signed word/dword/signed dword) 243
(signed byte[8]) pps
(const signed byte[8]) pps#0 pps = { fill( 8, 0) }
(word*) psp1
(const word*) psp1#0 psp1 = ((word*))(byte/word/signed word/dword/signed dword) 246
(word*) psp2
(const word*) psp2#0 psp2 = ((word*))(byte/word/signed word/dword/signed dword) 248
(void()) rotate_matrix((signed byte) rotate_matrix::x , (signed byte) rotate_matrix::y , (signed byte) rotate_matrix::z)
(label) rotate_matrix::@return
(signed byte) rotate_matrix::x
(signed byte) rotate_matrix::x#0 x zp ZP_BYTE:5 34.33333333333333
(signed byte) rotate_matrix::y
(signed byte) rotate_matrix::y#0 reg byte y 34.33333333333333
(signed byte) rotate_matrix::z
(signed byte) rotate_matrix::z#0 reg byte x 34.33333333333333
(signed byte[9]) rotation_matrix
(const signed byte[9]) rotation_matrix#0 rotation_matrix = { fill( 9, 0) }
(void()) sprites_init()
(label) sprites_init::@1
(label) sprites_init::@return
(byte*) sprites_init::SCREEN
(const byte*) sprites_init::SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) 1024
(byte) sprites_init::i
(byte) sprites_init::i#1 reg byte x 16.5
(byte) sprites_init::i#2 reg byte x 14.666666666666666
(byte*) sprites_init::sprites_ptr
(const byte*) sprites_init::sprites_ptr#0 sprites_ptr = (const byte*) sprites_init::SCREEN#0+(word/signed word/dword/signed dword) 1016
(void()) store_matrix()
(label) store_matrix::@return
(signed byte) sx
(signed byte) sx#10 sx zp ZP_BYTE:2 1.1379310344827585
(signed byte) sx#3 sx zp ZP_BYTE:2 11.0
(signed byte) sy
(signed byte) sy#10 sy zp ZP_BYTE:3 1.0999999999999999
(signed byte) sy#3 sy zp ZP_BYTE:3 22.0
(signed byte) sz
(const signed byte) sz#0 sz = (byte/signed byte/word/signed word/dword/signed dword) 0
(signed byte*) xp
(const signed byte*) xp#0 xp = ((signed byte*))(byte/word/signed word/dword/signed dword) 244
(signed byte[8]) xps
(const signed byte[8]) xps#0 xps = { fill( 8, 0) }
(signed byte*) xr
(const signed byte*) xr#0 xr = ((signed byte*))(byte/word/signed word/dword/signed dword) 240
(signed byte[8]) xrs
(const signed byte[8]) xrs#0 xrs = { fill( 8, 0) }
(signed byte[8]) xs
(const signed byte[8]) xs#0 xs = { -(byte/signed byte/word/signed word/dword/signed dword) 52, -(byte/signed byte/word/signed word/dword/signed dword) 52, -(byte/signed byte/word/signed word/dword/signed dword) 52, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 52, (byte/signed byte/word/signed word/dword/signed dword) 52, (byte/signed byte/word/signed word/dword/signed dword) 52 }
(signed byte*) yp
(const signed byte*) yp#0 yp = ((signed byte*))(byte/word/signed word/dword/signed dword) 245
(signed byte[8]) yps
(const signed byte[8]) yps#0 yps = { fill( 8, 0) }
(signed byte*) yr
(const signed byte*) yr#0 yr = ((signed byte*))(byte/word/signed word/dword/signed dword) 241
(signed byte[8]) yrs
(const signed byte[8]) yrs#0 yrs = { fill( 8, 0) }
(signed byte[8]) ys
(const signed byte[8]) ys#0 ys = { -(byte/signed byte/word/signed word/dword/signed dword) 52, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 52, -(byte/signed byte/word/signed word/dword/signed dword) 52, (byte/signed byte/word/signed word/dword/signed dword) 52, -(byte/signed byte/word/signed word/dword/signed dword) 52, (byte/signed byte/word/signed word/dword/signed dword) 0, (byte/signed byte/word/signed word/dword/signed dword) 52 }
(signed byte*) zr
(const signed byte*) zr#0 zr = ((signed byte*))(byte/word/signed word/dword/signed dword) 242
(signed byte[8]) zrs
(const signed byte[8]) zrs#0 zrs = { fill( 8, 0) }
(signed byte[8]) zs
(const signed byte[8]) zs#0 zs = { (byte/signed byte/word/signed word/dword/signed dword) 52, (byte/signed byte/word/signed word/dword/signed dword) 52, (byte/signed byte/word/signed word/dword/signed dword) 52, (byte/signed byte/word/signed word/dword/signed dword) 52, (byte/signed byte/word/signed word/dword/signed dword) 52, (byte/signed byte/word/signed word/dword/signed dword) 52, (byte/signed byte/word/signed word/dword/signed dword) 52, (byte/signed byte/word/signed word/dword/signed dword) 52 }

zp ZP_BYTE:2 [ sx#10 sx#3 ]
zp ZP_BYTE:3 [ sy#10 sy#3 calculate_matrix::sy#0 ]
zp ZP_BYTE:4 [ anim::i#2 anim::i#1 calculate_matrix::t1#0 ]
reg byte x [ sprites_init::i#2 sprites_init::i#1 ]
reg byte x [ calculate_matrix::sx#0 ]
zp ZP_BYTE:5 [ rotate_matrix::x#0 calculate_matrix::t3#0 ]
reg byte y [ rotate_matrix::y#0 ]
reg byte x [ rotate_matrix::z#0 ]
reg byte x [ anim::i2#0 ]
reg byte a [ anim::$6 ]
reg byte a [ anim::$8 ]
reg byte y [ calculate_matrix::t2#0 ]
zp ZP_BYTE:6 [ calculate_matrix::t4#0 ]
zp ZP_BYTE:7 [ calculate_matrix::t5#0 ]
zp ZP_BYTE:8 [ calculate_matrix::t6#0 ]
zp ZP_BYTE:9 [ calculate_matrix::t7#0 ]
zp ZP_BYTE:10 [ calculate_matrix::t8#0 ]
zp ZP_BYTE:11 [ calculate_matrix::t9#0 ]
zp ZP_BYTE:12 [ calculate_matrix::t10#0 ]
reg byte a [ calculate_matrix::$10 ]
reg byte a [ calculate_matrix::$11 ]
reg byte a [ calculate_matrix::$12 ]
reg byte a [ calculate_matrix::$13 ]
reg byte a [ calculate_matrix::$14 ]
reg byte a [ calculate_matrix::$15 ]
reg byte a [ calculate_matrix::$16 ]
reg byte a [ calculate_matrix::$17 ]
reg byte a [ calculate_matrix::$18 ]
reg byte a [ calculate_matrix::$19 ]
reg byte a [ calculate_matrix::$20 ]
reg byte a [ calculate_matrix::$21 ]
reg byte a [ calculate_matrix::$22 ]
reg byte a [ calculate_matrix::$23 ]
reg byte a [ calculate_matrix::$24 ]
reg byte a [ calculate_matrix::$25 ]
reg byte a [ calculate_matrix::$26 ]
reg byte a [ calculate_matrix::$27 ]
reg byte a [ calculate_matrix::$28 ]
reg byte a [ calculate_matrix::$29 ]
reg byte a [ calculate_matrix::$30 ]
reg byte a [ calculate_matrix::$31 ]
reg byte a [ calculate_matrix::$32 ]
reg byte a [ calculate_matrix::$33 ]
reg byte a [ calculate_matrix::$34 ]


FINAL ASSEMBLER
Score: 19428

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  .const GREEN = 5
  .const LIGHT_BLUE = $e
  .const LIGHT_GREY = $f
  .label xr = $f0
  .label yr = $f1
  .label zr = $f2
  .label pp = $f3
  .label xp = $f4
  .label yp = $f5
  .label psp1 = $f6
  .label psp2 = $f8
  .const sz = 0
  .label mulf_sqr1 = $2400
  .label mulf_sqr2 = $2600
  .label SPRITE = $3000
  .label PERSP_Z = $2800
  .label SINH = $2000
  .label SINQ = $2200
  .label SINH_LO = $4000
  .label SINH_HI = $4200
  .label SINQ_LO = $4400
  .label SINQ_HI = $4600
  .label COSH = SINH+$40
  .label COSQ = SINQ+$40
  .label sx = 2
  .label sy = 3
//SEG2 @begin
//SEG3 @30
//SEG4 kickasm(location (const byte*) mulf_sqr1#0) {{ .for(var i=0;i<$200;i++) {     	.if(i<=159) { .byte round((i*i)/256) }     	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }     	.if(i>351) { .byte round(((512-i)*(512-i))/256) }     }  }}
//SEG5 kickasm(location (const byte*) mulf_sqr2#0) {{ .for(var i=0;i<$200;i++) {     	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }     	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }     	.if(i>351) { .byte round(((i-511)*(i-511))/256) }       }  }}
//SEG6 kickasm(location (const byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))     .for (var y=0; y<21; y++)         .for (var x=0;x<3; x++)             .byte pic.getSinglecolorByte(x,y)  }}
//SEG7 kickasm(location (const signed byte*) PERSP_Z#0) {{ {     .var d = 256.0	     .var z0 = 6.0	     // These values of d/z0 result in table values from $20 to $40 (effectively max is $3f)     .for(var z=0;z<$100;z++) {     	.if(z>127) {     		.byte round(d / (z0 - ((z - 256) / 64.0)));     	} else {     		.byte round(d / (z0 - (z / 64.0)));     	}     } 	}  }}
//SEG8 kickasm(location (const signed byte*) SINH#0) {{ {     .var min = -$2000     .var max = $2000     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)     }     }  }}
//SEG9 kickasm(location (const signed byte*) SINQ#0) {{ {     .var min = -$1000     .var max = $1000     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)     }     }  }}
//SEG10 kickasm(location (const byte*) SINH_LO#0) {{ {     .var min = -$2000     .var max = $2000     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte <(min+(ampl/2)+(ampl/2)*sin(rad))     }     }  }}
//SEG11 kickasm(location (const byte*) SINH_HI#0) {{ {     .var min = -$2000     .var max = $2000     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte >(min+(ampl/2)+(ampl/2)*sin(rad))     }     }  }}
//SEG12 kickasm(location (const byte*) SINQ_LO#0) {{ {     .var min = -$1000     .var max = $1000     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte <(min+(ampl/2)+(ampl/2)*sin(rad))     }     }  }}
//SEG13 kickasm(location (const byte*) SINQ_HI#0) {{ {     .var min = -$1000     .var max = $1000     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte >(min+(ampl/2)+(ampl/2)*sin(rad))     }     }  }}
//SEG14 [11] call main 
  jsr main
//SEG15 [12] phi from @30 to @end [phi:@30->@end]
//SEG16 @end
//SEG17 main
main: {
  //SEG18 asm { sei  }
    sei
  //SEG19 [14] call sprites_init 
    jsr sprites_init
  //SEG20 main::@1
  //SEG21 [15] *((const word*) psp1#0) ← ((word))(const byte*) mulf_sqr1#0 -- _deref_pwuc1=vwuc2 
    lda #<mulf_sqr1
    sta psp1
    lda #>mulf_sqr1
    sta psp1+1
  //SEG22 [16] *((const word*) psp2#0) ← ((word))(const byte*) mulf_sqr2#0 -- _deref_pwuc1=vwuc2 
    lda #<mulf_sqr2
    sta psp2
    lda #>mulf_sqr2
    sta psp2+1
  //SEG23 [17] call anim 
  //SEG24 [19] phi from main::@1 to anim [phi:main::@1->anim]
    jsr anim
  //SEG25 main::@return
  //SEG26 [18] return 
    rts
}
//SEG27 anim
anim: {
    .label i = 4
  //SEG28 [20] phi from anim to anim::@1 [phi:anim->anim::@1]
  //SEG29 [20] phi (signed byte) sy#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#0] -- vbsz1=vbuc1 
    lda #0
    sta sy
  //SEG30 [20] phi (signed byte) sx#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim->anim::@1#1] -- vbsz1=vbuc1 
    sta sx
  //SEG31 anim::@1
  //SEG32 anim::@4
  b4:
  //SEG33 [21] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto anim::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
  //SEG34 anim::@6
  //SEG35 [22] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG36 [23] (signed byte) calculate_matrix::sx#0 ← (signed byte) sx#10 -- vbsxx=vbsz1 
    ldx sx
  //SEG37 [24] (signed byte) calculate_matrix::sy#0 ← (signed byte) sy#10
    // (signed byte) calculate_matrix::sy#0 = (signed byte) sy#10  // register copy zp ZP_BYTE:3
  //SEG38 [25] call calculate_matrix 
    jsr calculate_matrix
  //SEG39 [26] phi from anim::@6 to anim::@15 [phi:anim::@6->anim::@15]
  //SEG40 anim::@15
  //SEG41 [27] call store_matrix 
    jsr store_matrix
  //SEG42 [28] phi from anim::@15 to anim::@7 [phi:anim::@15->anim::@7]
  //SEG43 [28] phi (byte) anim::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:anim::@15->anim::@7#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG44 [28] phi from anim::@17 to anim::@7 [phi:anim::@17->anim::@7]
  //SEG45 [28] phi (byte) anim::i#2 = (byte) anim::i#1 [phi:anim::@17->anim::@7#0] -- register_copy 
  //SEG46 anim::@7
  b7:
  //SEG47 [29] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG48 [30] (signed byte) rotate_matrix::x#0 ← *((const signed byte[8]) xs#0 + (byte) anim::i#2) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda xs,y
    sta rotate_matrix.x
  //SEG49 [31] (signed byte) rotate_matrix::y#0 ← *((const signed byte[8]) ys#0 + (byte) anim::i#2) -- vbsyy=pbsc1_derefidx_vbuz1 
    ldx i
    ldy ys,x
  //SEG50 [32] (signed byte) rotate_matrix::z#0 ← *((const signed byte[8]) zs#0 + (byte) anim::i#2) -- vbsxx=pbsc1_derefidx_vbuz1 
    lda zs,x
    tax
  //SEG51 [33] call rotate_matrix 
    jsr rotate_matrix
  //SEG52 anim::@17
  //SEG53 [34] *((const signed byte[8]) xrs#0 + (byte) anim::i#2) ← *((const signed byte*) xr#0) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    ldy i
    lda xr
    sta xrs,y
  //SEG54 [35] *((const signed byte[8]) yrs#0 + (byte) anim::i#2) ← *((const signed byte*) yr#0) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda yr
    sta yrs,y
  //SEG55 [36] *((const signed byte[8]) zrs#0 + (byte) anim::i#2) ← *((const signed byte*) zr#0) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda zr
    sta zrs,y
  //SEG56 [37] *((const signed byte[8]) pps#0 + (byte) anim::i#2) ← *((const signed byte*) pp#0) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda pp
    sta pps,y
  //SEG57 [38] *((const signed byte[8]) xps#0 + (byte) anim::i#2) ← *((const signed byte*) xp#0) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda xp
    sta xps,y
  //SEG58 [39] *((const signed byte[8]) yps#0 + (byte) anim::i#2) ← *((const signed byte*) yp#0) -- pbsc1_derefidx_vbuz1=_deref_pbsc2 
    lda yp
    sta yps,y
  //SEG59 [40] (byte) anim::i2#0 ← (byte) anim::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuxx=vbuz1_rol_1 
    tya
    asl
    tax
  //SEG60 [41] (byte/word/signed word/dword/signed dword~) anim::$6 ← (byte/word/signed word/dword/signed dword) 128 + (byte)*((const signed byte*) xp#0) -- vbuaa=vbuc1_plus__deref_pbuc2 
    lda #$80
    clc
    adc xp
  //SEG61 [42] *((const byte*) SPRITES_XPOS#0 + (byte) anim::i2#0) ← (byte/word/signed word/dword/signed dword~) anim::$6 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SPRITES_XPOS,x
  //SEG62 [43] (byte/word/signed word/dword/signed dword~) anim::$8 ← (byte/word/signed word/dword/signed dword) 128 + (byte)*((const signed byte*) yp#0) -- vbuaa=vbuc1_plus__deref_pbuc2 
    lda #$80
    clc
    adc yp
  //SEG63 [44] *((const byte*) SPRITES_YPOS#0 + (byte) anim::i2#0) ← (byte/word/signed word/dword/signed dword~) anim::$8 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SPRITES_YPOS,x
  //SEG64 [45] (byte) anim::i#1 ← ++ (byte) anim::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG65 [46] if((byte) anim::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto anim::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #8
    bne b7
  //SEG66 anim::@13
  //SEG67 [47] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_GREY#0 -- _deref_pbuc1=vbuc2 
    lda #LIGHT_GREY
    sta BORDERCOL
  //SEG68 [48] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta BORDERCOL
  //SEG69 [49] (signed byte) sx#3 ← (signed byte) sx#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 -- vbsz1=vbsz1_plus_2 
    inc sx
    inc sx
  //SEG70 [50] (signed byte) sy#3 ← (signed byte) sy#10 - (byte/signed byte/word/signed word/dword/signed dword) 3 -- vbsz1=vbsz1_minus_vbuc1 
    lda sy
    sec
    sbc #3
    sta sy
  //SEG71 [20] phi from anim::@13 to anim::@1 [phi:anim::@13->anim::@1]
  //SEG72 [20] phi (signed byte) sy#10 = (signed byte) sy#3 [phi:anim::@13->anim::@1#0] -- register_copy 
  //SEG73 [20] phi (signed byte) sx#10 = (signed byte) sx#3 [phi:anim::@13->anim::@1#1] -- register_copy 
    jmp b4
}
//SEG74 rotate_matrix
rotate_matrix: {
    .label x = 5
  //SEG75 [51] *((const signed byte*) xr#0) ← (signed byte) rotate_matrix::x#0 -- _deref_pbsc1=vbsz1 
    lda x
    sta xr
  //SEG76 [52] *((const signed byte*) yr#0) ← (signed byte) rotate_matrix::y#0 -- _deref_pbsc1=vbsyy 
    tya
    sta yr
  //SEG77 [53] *((const signed byte*) zr#0) ← (signed byte) rotate_matrix::z#0 -- _deref_pbsc1=vbsxx 
    txa
    sta zr
  //SEG78 asm { ldxzr C1: ldamulf_sqr1,x sec C2: sbcmulf_sqr2,x staC3+1 F1: ldamulf_sqr1,x sec F2: sbcmulf_sqr2,x staF3+1 I1: ldamulf_sqr1,x sec I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr I3: lda#0 clc G1: adcmulf_sqr1,x sec G2: sbcmulf_sqr2,x clc H1: adcmulf_sqr1,y sec H2: sbcmulf_sqr2,y stazr staPP+1 PP: ldaPERSP_Z stapp stapsp1 eor#$ff stapsp2 C3: lda#0 clc A1: adcmulf_sqr1,x sec A2: sbcmulf_sqr2,x clc B1: adcmulf_sqr1,y sec B2: sbcmulf_sqr2,y staxr staXX+1 clc F3: lda#0 clc D1: adcmulf_sqr1,x sec D2: sbcmulf_sqr2,x clc E1: adcmulf_sqr1,y sec E2: sbcmulf_sqr2,y stayr tay lda(psp1),y sec sbc(psp2),y stayp XX: ldy#0 lda(psp1),y sec sbc(psp2),y staxp  }
    tax
  C1:
    lda mulf_sqr1,x
    sec
  C2:
    sbc mulf_sqr2,x
    sta C3+1
  F1:
    lda mulf_sqr1,x
    sec
  F2:
    sbc mulf_sqr2,x
    sta F3+1
  I1:
    lda mulf_sqr1,x
    sec
  I2:
    sbc mulf_sqr2,x
    sta I3+1
    ldx xr
    ldy yr
  I3:
    lda #0
    clc
  G1:
    adc mulf_sqr1,x
    sec
  G2:
    sbc mulf_sqr2,x
    clc
  H1:
    adc mulf_sqr1,y
    sec
  H2:
    sbc mulf_sqr2,y
    sta zr
    sta PP+1
  PP:
    lda PERSP_Z
    sta pp
    sta psp1
    eor #$ff
    sta psp2
  C3:
    lda #0
    clc
  A1:
    adc mulf_sqr1,x
    sec
  A2:
    sbc mulf_sqr2,x
    clc
  B1:
    adc mulf_sqr1,y
    sec
  B2:
    sbc mulf_sqr2,y
    sta xr
    sta XX+1
    clc
  F3:
    lda #0
    clc
  D1:
    adc mulf_sqr1,x
    sec
  D2:
    sbc mulf_sqr2,x
    clc
  E1:
    adc mulf_sqr1,y
    sec
  E2:
    sbc mulf_sqr2,y
    sta yr
    tay
    lda (psp1),y
    sec
    sbc (psp2),y
    sta yp
  XX:
    ldy #0
    lda (psp1),y
    sec
    sbc (psp2),y
    sta xp
  //SEG79 rotate_matrix::@return
  //SEG80 [55] return 
    rts
}
//SEG81 store_matrix
store_matrix: {
  //SEG82 asm { ldarotation_matrix+0 starotate_matrix.A1+1 eor#$ff starotate_matrix.A2+1 ldarotation_matrix+1 starotate_matrix.B1+1 eor#$ff starotate_matrix.B2+1 ldarotation_matrix+2 starotate_matrix.C1+1 eor#$ff starotate_matrix.C2+1 ldarotation_matrix+3 starotate_matrix.D1+1 eor#$ff starotate_matrix.D2+1 ldarotation_matrix+4 starotate_matrix.E1+1 eor#$ff starotate_matrix.E2+1 ldarotation_matrix+5 starotate_matrix.F1+1 eor#$ff starotate_matrix.F2+1 ldarotation_matrix+6 starotate_matrix.G1+1 eor#$ff starotate_matrix.G2+1 ldarotation_matrix+7 starotate_matrix.H1+1 eor#$ff starotate_matrix.H2+1 ldarotation_matrix+8 starotate_matrix.I1+1 eor#$ff starotate_matrix.I2+1  }
    lda rotation_matrix+0
    sta rotate_matrix.A1+1
    eor #$ff
    sta rotate_matrix.A2+1
    lda rotation_matrix+1
    sta rotate_matrix.B1+1
    eor #$ff
    sta rotate_matrix.B2+1
    lda rotation_matrix+2
    sta rotate_matrix.C1+1
    eor #$ff
    sta rotate_matrix.C2+1
    lda rotation_matrix+3
    sta rotate_matrix.D1+1
    eor #$ff
    sta rotate_matrix.D2+1
    lda rotation_matrix+4
    sta rotate_matrix.E1+1
    eor #$ff
    sta rotate_matrix.E2+1
    lda rotation_matrix+5
    sta rotate_matrix.F1+1
    eor #$ff
    sta rotate_matrix.F2+1
    lda rotation_matrix+6
    sta rotate_matrix.G1+1
    eor #$ff
    sta rotate_matrix.G2+1
    lda rotation_matrix+7
    sta rotate_matrix.H1+1
    eor #$ff
    sta rotate_matrix.H2+1
    lda rotation_matrix+8
    sta rotate_matrix.I1+1
    eor #$ff
    sta rotate_matrix.I2+1
  //SEG83 store_matrix::@return
  //SEG84 [57] return 
    rts
}
//SEG85 calculate_matrix
calculate_matrix: {
    .label sy = 3
    .label t1 = 4
    .label t3 = 5
    .label t4 = 6
    .label t5 = 7
    .label t6 = 8
    .label t7 = 9
    .label t8 = $a
    .label t9 = $b
    .label t10 = $c
  //SEG86 [58] (signed byte) calculate_matrix::t1#0 ← (signed byte) calculate_matrix::sy#0 - (const signed byte) sz#0 -- vbsz1=vbsz2_minus_vbsc1 
    lda sy
    sec
    sbc #sz
    sta t1
  //SEG87 [59] (signed byte) calculate_matrix::t2#0 ← (signed byte) calculate_matrix::sy#0 + (const signed byte) sz#0 -- vbsyy=vbsz1_plus_vbsc1 
    lda #sz
    clc
    adc sy
    tay
  //SEG88 [60] (signed byte) calculate_matrix::t3#0 ← (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsxx 
    stx t3
  //SEG89 [61] (signed byte) calculate_matrix::t4#0 ← (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsxx 
    stx t4
  //SEG90 [62] (signed byte) calculate_matrix::t5#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t2#0 -- vbsz1=vbsxx_plus_vbsyy 
    txa
    sty $ff
    clc
    adc $ff
    sta t5
  //SEG91 [63] (signed byte) calculate_matrix::t6#0 ← (signed byte) calculate_matrix::sx#0 - (signed byte) calculate_matrix::t1#0 -- vbsz1=vbsxx_minus_vbsz2 
    txa
    sec
    sbc t1
    sta t6
  //SEG92 [64] (signed byte) calculate_matrix::t7#0 ← (signed byte) calculate_matrix::sx#0 + (signed byte) calculate_matrix::t1#0 -- vbsz1=vbsxx_plus_vbsz2 
    txa
    clc
    adc t1
    sta t7
  //SEG93 [65] (signed byte) calculate_matrix::t8#0 ← (signed byte) calculate_matrix::t2#0 - (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsyy_minus_vbsxx 
    tya
    stx $ff
    sec
    sbc $ff
    sta t8
  //SEG94 [66] (signed byte) calculate_matrix::t9#0 ← (signed byte) calculate_matrix::sy#0 - (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsz2_minus_vbsxx 
    txa
    eor #$ff
    sec
    adc sy
    sta t9
  //SEG95 [67] (signed byte) calculate_matrix::t10#0 ← (signed byte) calculate_matrix::sy#0 + (signed byte) calculate_matrix::sx#0 -- vbsz1=vbsz2_plus_vbsxx 
    txa
    clc
    adc sy
    sta t10
  //SEG96 [68] (signed byte~) calculate_matrix::$10 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t1#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t2#0) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsyy 
    ldx t1
    clc
    lda COSH,x
    adc COSH,y
  //SEG97 [69] *((const signed byte[9]) rotation_matrix#0) ← (signed byte~) calculate_matrix::$10 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix
  //SEG98 [70] (signed byte~) calculate_matrix::$11 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t1#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t2#0) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc1_derefidx_vbsyy 
    sec
    lda SINH,x
    sbc SINH,y
  //SEG99 [71] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (signed byte~) calculate_matrix::$11 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+1
  //SEG100 [72] (signed byte~) calculate_matrix::$12 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::sy#0) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz1 
    ldy sy
    clc
    lda SINH,y
    adc SINH,y
  //SEG101 [73] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (signed byte~) calculate_matrix::$12 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+2
  //SEG102 [74] (signed byte~) calculate_matrix::$13 ← *((const signed byte*) SINH#0+(const signed byte) sz#0 + (signed byte) calculate_matrix::t3#0) - *((const signed byte*) SINH#0+-(const signed byte) sz#0 + (signed byte) calculate_matrix::t4#0) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc2_derefidx_vbsz2 
    ldx t3
    ldy t4
    sec
    lda SINH+sz,x
    sbc SINH+-sz,y
  //SEG103 [75] (signed byte~) calculate_matrix::$14 ← (signed byte~) calculate_matrix::$13 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t6
    clc
    adc COSQ,y
  //SEG104 [76] (signed byte~) calculate_matrix::$15 ← (signed byte~) calculate_matrix::$14 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t5
    sec
    sbc COSQ,y
  //SEG105 [77] (signed byte~) calculate_matrix::$16 ← (signed byte~) calculate_matrix::$15 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t8
    clc
    adc COSQ,y
  //SEG106 [78] (signed byte~) calculate_matrix::$17 ← (signed byte~) calculate_matrix::$16 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t7
    sec
    sbc COSQ,y
  //SEG107 [79] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (signed byte~) calculate_matrix::$17 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+3
  //SEG108 [80] (signed byte~) calculate_matrix::$18 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz2 
    ldy t4
    clc
    lda COSH,x
    adc COSH,y
  //SEG109 [81] (signed byte~) calculate_matrix::$19 ← (signed byte~) calculate_matrix::$18 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t5
    clc
    adc SINQ,y
  //SEG110 [82] (signed byte~) calculate_matrix::$20 ← (signed byte~) calculate_matrix::$19 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t6
    sec
    sbc SINQ,y
  //SEG111 [83] (signed byte~) calculate_matrix::$21 ← (signed byte~) calculate_matrix::$20 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t7
    sec
    sbc SINQ,y
  //SEG112 [84] (signed byte~) calculate_matrix::$22 ← (signed byte~) calculate_matrix::$21 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t8
    sec
    sbc SINQ,y
  //SEG113 [85] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (signed byte~) calculate_matrix::$22 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+4
  //SEG114 [86] (signed byte~) calculate_matrix::$23 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t9#0) - *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t10#0) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc1_derefidx_vbsz2 
    ldx t9
    ldy t10
    sec
    lda SINH,x
    sbc SINH,y
  //SEG115 [87] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (signed byte~) calculate_matrix::$23 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+5
  //SEG116 [88] (signed byte~) calculate_matrix::$24 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t4#0) - *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t3#0) -- vbsaa=pbsc1_derefidx_vbsz1_minus_pbsc1_derefidx_vbsz2 
    ldx t4
    ldy t3
    sec
    lda COSH,x
    sbc COSH,y
  //SEG117 [89] (signed byte~) calculate_matrix::$25 ← (signed byte~) calculate_matrix::$24 + *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t6#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t6
    clc
    adc SINQ,y
  //SEG118 [90] (signed byte~) calculate_matrix::$26 ← (signed byte~) calculate_matrix::$25 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t5#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t5
    sec
    sbc SINQ,y
  //SEG119 [91] (signed byte~) calculate_matrix::$27 ← (signed byte~) calculate_matrix::$26 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t8#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t8
    sec
    sbc SINQ,y
  //SEG120 [92] (signed byte~) calculate_matrix::$28 ← (signed byte~) calculate_matrix::$27 - *((const signed byte*) SINQ#0 + (signed byte) calculate_matrix::t7#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t7
    sec
    sbc SINQ,y
  //SEG121 [93] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (signed byte~) calculate_matrix::$28 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+6
  //SEG122 [94] (signed byte~) calculate_matrix::$29 ← *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t3#0) + *((const signed byte*) SINH#0 + (signed byte) calculate_matrix::t4#0) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz2 
    ldx t3
    ldy t4
    clc
    lda SINH,x
    adc SINH,y
  //SEG123 [95] (signed byte~) calculate_matrix::$30 ← (signed byte~) calculate_matrix::$29 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t6#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t6
    clc
    adc COSQ,y
  //SEG124 [96] (signed byte~) calculate_matrix::$31 ← (signed byte~) calculate_matrix::$30 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t5#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t5
    sec
    sbc COSQ,y
  //SEG125 [97] (signed byte~) calculate_matrix::$32 ← (signed byte~) calculate_matrix::$31 + *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t7#0) -- vbsaa=vbsaa_plus_pbsc1_derefidx_vbsz1 
    ldy t7
    clc
    adc COSQ,y
  //SEG126 [98] (signed byte~) calculate_matrix::$33 ← (signed byte~) calculate_matrix::$32 - *((const signed byte*) COSQ#0 + (signed byte) calculate_matrix::t8#0) -- vbsaa=vbsaa_minus_pbsc1_derefidx_vbsz1 
    ldy t8
    sec
    sbc COSQ,y
  //SEG127 [99] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 7) ← (signed byte~) calculate_matrix::$33 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+7
  //SEG128 [100] (signed byte~) calculate_matrix::$34 ← *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t9#0) + *((const signed byte*) COSH#0 + (signed byte) calculate_matrix::t10#0) -- vbsaa=pbsc1_derefidx_vbsz1_plus_pbsc1_derefidx_vbsz2 
    ldx t9
    ldy t10
    clc
    lda COSH,x
    adc COSH,y
  //SEG129 [101] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (signed byte~) calculate_matrix::$34 -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+8
  //SEG130 calculate_matrix::@return
  //SEG131 [102] return 
    rts
}
//SEG132 sprites_init
sprites_init: {
    .label SCREEN = $400
    .label sprites_ptr = SCREEN+$3f8
  //SEG133 [103] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 -- _deref_pbuc1=vbuc2 
    lda #$ff
    sta SPRITES_ENABLE
  //SEG134 [104] phi from sprites_init to sprites_init::@1 [phi:sprites_init->sprites_init::@1]
  //SEG135 [104] phi (byte) sprites_init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:sprites_init->sprites_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG136 [104] phi from sprites_init::@1 to sprites_init::@1 [phi:sprites_init::@1->sprites_init::@1]
  //SEG137 [104] phi (byte) sprites_init::i#2 = (byte) sprites_init::i#1 [phi:sprites_init::@1->sprites_init::@1#0] -- register_copy 
  //SEG138 sprites_init::@1
  b1:
  //SEG139 [105] *((const byte*) sprites_init::sprites_ptr#0 + (byte) sprites_init::i#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$ff&SPRITE/$40
    sta sprites_ptr,x
  //SEG140 [106] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::i#2) ← (const byte) GREEN#0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #GREEN
    sta SPRITES_COLS,x
  //SEG141 [107] (byte) sprites_init::i#1 ← ++ (byte) sprites_init::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG142 [108] if((byte) sprites_init::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto sprites_init::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b1
  //SEG143 sprites_init::@return
  //SEG144 [109] return 
    rts
}
  zs: .byte $34, $34, $34, $34, $34, $34, $34, $34
  xrs: .fill 8, 0
  yrs: .fill 8, 0
  zrs: .fill 8, 0
  pps: .fill 8, 0
  xps: .fill 8, 0
  yps: .fill 8, 0
  rotation_matrix: .fill 9, 0
  xs: .byte -$34, -$34, -$34, 0, 0, $34, $34, $34
  ys: .byte -$34, 0, $34, -$34, $34, -$34, 0, $34
.pc = mulf_sqr1 "Inline"
  .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((i*i)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }
    	.if(i>351) { .byte round(((512-i)*(512-i))/256) }
    }

.pc = mulf_sqr2 "Inline"
  .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }
    	.if(i>351) { .byte round(((i-511)*(i-511))/256) }  
    }

.pc = SPRITE "Inline"
  .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
    .for (var y=0; y<21; y++)
        .for (var x=0;x<3; x++)
            .byte pic.getSinglecolorByte(x,y)

.pc = PERSP_Z "Inline"
  {
    .var d = 256.0	
    .var z0 = 6.0	
    // These values of d/z0 result in table values from $20 to $40 (effectively max is $3f)
    .for(var z=0;z<$100;z++) {
    	.if(z>127) {
    		.byte round(d / (z0 - ((z - 256) / 64.0)));
    	} else {
    		.byte round(d / (z0 - (z / 64.0)));
    	}
    }
	}

.pc = SINH "Inline"
  {
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }

.pc = SINQ "Inline"
  {
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte round((min+(ampl/2)+(ampl/2)*sin(rad))/256)
    }
    }

.pc = SINH_LO "Inline"
  {
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte <(min+(ampl/2)+(ampl/2)*sin(rad))
    }
    }

.pc = SINH_HI "Inline"
  {
    .var min = -$2000
    .var max = $2000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >(min+(ampl/2)+(ampl/2)*sin(rad))
    }
    }

.pc = SINQ_LO "Inline"
  {
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte <(min+(ampl/2)+(ampl/2)*sin(rad))
    }
    }

.pc = SINQ_HI "Inline"
  {
    .var min = -$1000
    .var max = $1000
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >(min+(ampl/2)+(ampl/2)*sin(rad))
    }
    }


