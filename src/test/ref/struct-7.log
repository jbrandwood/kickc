
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::SCREEN[0] = main::t_c1_center_x
  main::SCREEN[1] = main::t_c1_center_y
  main::SCREEN[2] = main::t_c1_radius
  main::SCREEN[3] = main::t_c2_center_x
  main::SCREEN[4] = main::t_c2_center_y
  main::SCREEN[5] = main::t_c2_radius
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
struct Point Circle::center
byte Circle::radius
byte Point::x
byte Point::y
struct Circle TwoCircles::c1
struct Circle TwoCircles::c2
void __start()
label __start::@1
label __start::@return
void main()
label main::@return
const nomodify byte* main::SCREEN = (byte*)$400
struct Circle main::t_c1
struct Point main::t_c1_center
const byte main::t_c1_center_x = 1
const byte main::t_c1_center_y = 2
const byte main::t_c1_radius = 3
struct Circle main::t_c2
struct Point main::t_c2_center
const byte main::t_c2_center_x = 4
const byte main::t_c2_center_y = 5
const byte main::t_c2_radius = 6

Adding number conversion cast (unumber) 0 in main::SCREEN[0] = main::t_c1_center_x
Adding number conversion cast (unumber) 1 in main::SCREEN[1] = main::t_c1_center_y
Adding number conversion cast (unumber) 2 in main::SCREEN[2] = main::t_c1_radius
Adding number conversion cast (unumber) 3 in main::SCREEN[3] = main::t_c2_center_x
Adding number conversion cast (unumber) 4 in main::SCREEN[4] = main::t_c2_center_y
Adding number conversion cast (unumber) 5 in main::SCREEN[5] = main::t_c2_radius
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type 2
Finalized unsigned number type 3
Finalized unsigned number type 4
Finalized unsigned number type 5
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying expression containing zero main::SCREEN in [0] main::SCREEN[0] = main::t_c1_center_x
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Consolidated array index constant in *(main::SCREEN+1)
Consolidated array index constant in *(main::SCREEN+2)
Consolidated array index constant in *(main::SCREEN+3)
Consolidated array index constant in *(main::SCREEN+4)
Consolidated array index constant in *(main::SCREEN+5)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *main::SCREEN = main::t_c1_center_x
  [1] *(main::SCREEN+1) = main::t_c1_center_y
  [2] *(main::SCREEN+2) = main::t_c1_radius
  [3] *(main::SCREEN+3) = main::t_c2_center_x
  [4] *(main::SCREEN+4) = main::t_c2_center_y
  [5] *(main::SCREEN+5) = main::t_c2_radius
  to:main::@return
main::@return: scope:[main]  from main
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
struct Point Circle::center
byte Circle::radius
byte Point::x
byte Point::y
struct Circle TwoCircles::c1
struct Circle TwoCircles::c2
void main()
struct Circle main::t_c1
struct Point main::t_c1_center
struct Circle main::t_c2
struct Point main::t_c2_center

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *main::SCREEN = main::t_c1_center_x [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(main::SCREEN+1) = main::t_c1_center_y [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *(main::SCREEN+2) = main::t_c1_radius [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *(main::SCREEN+3) = main::t_c2_center_x [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] *(main::SCREEN+4) = main::t_c2_center_y [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] *(main::SCREEN+5) = main::t_c2_radius [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [Point] 
Uplift Scope [Circle] 
Uplift Scope [TwoCircles] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [Point] best 45 combination 
Uplifting [Circle] best 45 combination 
Uplifting [TwoCircles] best 45 combination 
Uplifting [main] best 45 combination 
Uplifting [] best 45 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct - nesting structs 3 levels
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const t_c1_radius = 3
    .const t_c2_radius = 6
    .const t_c1_center_x = 1
    .const t_c1_center_y = 2
    .const t_c2_center_x = 4
    .const t_c2_center_y = 5
    .label SCREEN = $400
    // [0] *main::SCREEN = main::t_c1_center_x -- _deref_pbuc1=vbuc2 
    lda #t_c1_center_x
    sta SCREEN
    // [1] *(main::SCREEN+1) = main::t_c1_center_y -- _deref_pbuc1=vbuc2 
    lda #t_c1_center_y
    sta SCREEN+1
    // [2] *(main::SCREEN+2) = main::t_c1_radius -- _deref_pbuc1=vbuc2 
    lda #t_c1_radius
    sta SCREEN+2
    // [3] *(main::SCREEN+3) = main::t_c2_center_x -- _deref_pbuc1=vbuc2 
    lda #t_c2_center_x
    sta SCREEN+3
    // [4] *(main::SCREEN+4) = main::t_c2_center_y -- _deref_pbuc1=vbuc2 
    lda #t_c2_center_y
    sta SCREEN+4
    // [5] *(main::SCREEN+5) = main::t_c2_radius -- _deref_pbuc1=vbuc2 
    lda #t_c2_radius
    sta SCREEN+5
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
struct Point Circle::center
byte Circle::radius
byte Point::x
byte Point::y
struct Circle TwoCircles::c1
struct Circle TwoCircles::c2
void main()
label main::@return
const nomodify byte* main::SCREEN = (byte*) 1024
struct Circle main::t_c1
struct Point main::t_c1_center
const byte main::t_c1_center_x = 1
const byte main::t_c1_center_y = 2
const byte main::t_c1_radius = 3
struct Circle main::t_c2
struct Point main::t_c2_center
const byte main::t_c2_center_x = 4
const byte main::t_c2_center_y = 5
const byte main::t_c2_radius = 6



FINAL ASSEMBLER
Score: 42

  // File Comments
// Minimal struct - nesting structs 3 levels
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const t_c1_radius = 3
    .const t_c2_radius = 6
    .const t_c1_center_x = 1
    .const t_c1_center_y = 2
    .const t_c2_center_x = 4
    .const t_c2_center_y = 5
    .label SCREEN = $400
    // SCREEN[0] = t.c1.center.x
    // [0] *main::SCREEN = main::t_c1_center_x -- _deref_pbuc1=vbuc2 
    lda #t_c1_center_x
    sta SCREEN
    // SCREEN[1] = t.c1.center.y
    // [1] *(main::SCREEN+1) = main::t_c1_center_y -- _deref_pbuc1=vbuc2 
    lda #t_c1_center_y
    sta SCREEN+1
    // SCREEN[2] = t.c1.radius
    // [2] *(main::SCREEN+2) = main::t_c1_radius -- _deref_pbuc1=vbuc2 
    lda #t_c1_radius
    sta SCREEN+2
    // SCREEN[3] = t.c2.center.x
    // [3] *(main::SCREEN+3) = main::t_c2_center_x -- _deref_pbuc1=vbuc2 
    lda #t_c2_center_x
    sta SCREEN+3
    // SCREEN[4] = t.c2.center.y
    // [4] *(main::SCREEN+4) = main::t_c2_center_y -- _deref_pbuc1=vbuc2 
    lda #t_c2_center_y
    sta SCREEN+4
    // SCREEN[5] = t.c2.radius
    // [5] *(main::SCREEN+5) = main::t_c2_radius -- _deref_pbuc1=vbuc2 
    lda #t_c2_radius
    sta SCREEN+5
    // main::@return
    // }
    // [6] return 
    rts
}
  // File Data

