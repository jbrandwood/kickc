
(void()) __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN
  [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [5] phi()
  [6] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [7] return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  [8] (byte) tod_init::tod_TENTHS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO)
  [9] (byte) tod_init::tod_SEC#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_SEC)
  [10] (byte) tod_init::tod_MIN#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_MIN)
  [11] (byte) tod_init::tod_HOURS#0 ← *((byte*)&(struct TIME_OF_DAY) TOD_ZERO+(const byte) OFFSET_STRUCT_TIME_OF_DAY_HOURS)
  [12] call tod_init 
  to:main::@1
main::@1: scope:[main]  from main main::@10
  [13] (word) main::i#2 ← phi( main::@10/(word) main::i#1 main/(word) 0 )
  [14] if((word) main::i#2<(word) $2710) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [15] phi()
  [16] call gotoxy 
  to:main::@6
main::@6: scope:[main]  from main::@3
  [17] phi()
  [18] call tod_read 
  [19] (byte) tod_read::return_TENTHS#2 ← (byte) tod_read::return_TENTHS#0
  [20] (byte) tod_read::return_SEC#2 ← (byte) tod_read::return_SEC#0
  [21] (byte) tod_read::return_MIN#2 ← (byte) tod_read::return_MIN#0
  [22] (byte) tod_read::return_HOURS#2 ← (byte) tod_read::return_HOURS#0
  to:main::@7
main::@7: scope:[main]  from main::@6
  [23] (byte) tod_str::tod_TENTHS#0 ← (byte) tod_read::return_TENTHS#2
  [24] (byte) tod_str::tod_SEC#0 ← (byte) tod_read::return_SEC#2
  [25] (byte) tod_str::tod_MIN#0 ← (byte) tod_read::return_MIN#2
  [26] (byte) tod_str::tod_HOURS#0 ← (byte) tod_read::return_HOURS#2
  [27] call tod_str 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [28] phi()
  [29] call cputs 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [30] phi()
  [31] call printf_string 
  to:main::@return
main::@return: scope:[main]  from main::@9
  [32] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [33] (byte~) main::$6 ← (word) main::i#2 & (byte) $7f
  [34] if((byte~) main::$6!=(byte) 0) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@2
  [35] phi()
  [36] call gotoxy 
  to:main::@11
main::@11: scope:[main]  from main::@5
  [37] (word) printf_uint::uvalue#0 ← (word) main::i#2
  [38] call printf_uint 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [39] phi()
  [40] call gotoxy 
  to:main::@4
main::@4: scope:[main]  from main::@12 main::@2
  [41] phi()
  [42] call cputs 
  to:main::@10
main::@10: scope:[main]  from main::@4
  [43] (word) main::i#1 ← ++ (word) main::i#2
  to:main::@1

(void()) tod_init((byte) tod_init::tod_TENTHS , (byte) tod_init::tod_SEC , (byte) tod_init::tod_MIN , (byte) tod_init::tod_HOURS)
tod_init: scope:[tod_init]  from main
  [44] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) | (byte) $80
  [45] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) & (byte) $7f
  [46] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS) ← (byte) tod_init::tod_HOURS#0
  [47] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN) ← (byte) tod_init::tod_MIN#0
  [48] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC) ← (byte) tod_init::tod_SEC#0
  [49] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS) ← (byte) tod_init::tod_TENTHS#0
  to:tod_init::@return
tod_init::@return: scope:[tod_init]  from tod_init
  [50] return 
  to:@return

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from main::@12 main::@3 main::@5
  [51] (byte) gotoxy::y#5 ← phi( main::@12/(byte) 0 main::@3/(byte) $16 main::@5/(byte) $10 )
  [52] if((byte) gotoxy::y#5<(byte) $19+(byte) 1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [53] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [54] (byte) gotoxy::y#6 ← phi( gotoxy::@3/(byte) gotoxy::y#5 gotoxy/(byte) 0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [55] (byte) conio_cursor_x ← (byte) 0
  [56] (byte) conio_cursor_y ← (byte) gotoxy::y#6
  [57] (word~) gotoxy::$7 ← (word)(byte) gotoxy::y#6
  [58] (word~) gotoxy::$8 ← (word~) gotoxy::$7 << (byte) 2
  [59] (word~) gotoxy::$9 ← (word~) gotoxy::$8 + (word~) gotoxy::$7
  [60] (word) gotoxy::line_offset#0 ← (word~) gotoxy::$9 << (byte) 3
  [61] (byte*~) gotoxy::$5 ← (const nomodify byte*) DEFAULT_SCREEN + (word) gotoxy::line_offset#0
  [62] (byte*) conio_line_text ← (byte*~) gotoxy::$5
  [63] (byte*~) gotoxy::$6 ← (const nomodify byte*) COLORRAM + (word) gotoxy::line_offset#0
  [64] (byte*) conio_line_color ← (byte*~) gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [65] return 
  to:@return

(struct TIME_OF_DAY()) tod_read()
tod_read: scope:[tod_read]  from main::@6
  [66] (byte) tod_read::return_HOURS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_HOURS)
  [67] (byte) tod_read::return_MIN#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_MIN)
  [68] (byte) tod_read::return_SEC#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_SEC)
  [69] (byte) tod_read::return_TENTHS#0 ← *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_TOD_10THS)
  to:tod_read::@return
tod_read::@return: scope:[tod_read]  from tod_read
  [70] return 
  to:@return

(byte*()) tod_str((byte) tod_str::tod_TENTHS , (byte) tod_str::tod_SEC , (byte) tod_str::tod_MIN , (byte) tod_str::tod_HOURS)
tod_str: scope:[tod_str]  from main::@7
  [71] (byte~) tod_str::$0 ← (byte) tod_str::tod_HOURS#0 >> (byte) 4
  [72] (byte~) tod_str::$1 ← (byte) '0' + (byte~) tod_str::$0
  [73] *((const byte*) tod_buffer) ← (byte~) tod_str::$1
  [74] (byte~) tod_str::$2 ← (byte) tod_str::tod_HOURS#0 & (byte) $f
  [75] (byte~) tod_str::$3 ← (byte) '0' + (byte~) tod_str::$2
  [76] *((const byte*) tod_buffer+(byte) 1) ← (byte~) tod_str::$3
  [77] (byte~) tod_str::$4 ← (byte) tod_str::tod_MIN#0 >> (byte) 4
  [78] (byte~) tod_str::$5 ← (byte) '0' + (byte~) tod_str::$4
  [79] *((const byte*) tod_buffer+(byte) 3) ← (byte~) tod_str::$5
  [80] (byte~) tod_str::$6 ← (byte) tod_str::tod_MIN#0 & (byte) $f
  [81] (byte~) tod_str::$7 ← (byte) '0' + (byte~) tod_str::$6
  [82] *((const byte*) tod_buffer+(byte) 4) ← (byte~) tod_str::$7
  [83] (byte~) tod_str::$8 ← (byte) tod_str::tod_SEC#0 >> (byte) 4
  [84] (byte~) tod_str::$9 ← (byte) '0' + (byte~) tod_str::$8
  [85] *((const byte*) tod_buffer+(byte) 6) ← (byte~) tod_str::$9
  [86] (byte~) tod_str::$10 ← (byte) tod_str::tod_SEC#0 & (byte) $f
  [87] (byte~) tod_str::$11 ← (byte) '0' + (byte~) tod_str::$10
  [88] *((const byte*) tod_buffer+(byte) 7) ← (byte~) tod_str::$11
  [89] (byte~) tod_str::$12 ← (byte) tod_str::tod_TENTHS#0 >> (byte) 4
  [90] (byte~) tod_str::$13 ← (byte) '0' + (byte~) tod_str::$12
  [91] *((const byte*) tod_buffer+(byte) 9) ← (byte~) tod_str::$13
  [92] (byte~) tod_str::$14 ← (byte) tod_str::tod_TENTHS#0 & (byte) $f
  [93] (byte~) tod_str::$15 ← (byte) '0' + (byte~) tod_str::$14
  [94] *((const byte*) tod_buffer+(byte) $a) ← (byte~) tod_str::$15
  to:tod_str::@return
tod_str::@return: scope:[tod_str]  from tod_str
  [95] return 
  to:@return

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main::@4 main::@8 printf_number_buffer::@2 printf_string::@1
  [96] (to_nomodify byte*) cputs::s#6 ← phi( main::@4/(const byte*) main::s1 main::@8/(const byte*) main::s printf_number_buffer::@2/(const byte*) printf_number_buffer::buffer_digits#0 printf_string::@1/(const byte*) tod_buffer )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [97] (to_nomodify byte*) cputs::s#5 ← phi( cputs/(to_nomodify byte*) cputs::s#6 cputs::@2/(to_nomodify byte*) cputs::s#0 )
  [98] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#5)
  [99] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#5
  [100] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [101] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [102] (byte) cputc::c#0 ← (byte) cputs::c#1
  [103] call cputc 
  to:cputs::@1

(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
printf_string: scope:[printf_string]  from main::@9
  [104] phi()
  to:printf_string::@1
printf_string::@1: scope:[printf_string]  from printf_string
  [105] phi()
  [106] call cputs 
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string::@1
  [107] return 
  to:@return

(void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_upper_case , (byte) printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@11
  [108] phi()
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [109] *((byte*)&(struct printf_buffer_number) printf_buffer) ← (byte) 0
  [110] (word) utoa::value#1 ← (word) printf_uint::uvalue#0
  [111] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [112] (byte) printf_number_buffer::buffer_sign#0 ← *((byte*)&(struct printf_buffer_number) printf_buffer)
  [113] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [114] return 
  to:@return

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@3
  [115] (byte) cputc::c#3 ← phi( cputs::@2/(byte) cputc::c#0 printf_number_buffer::@3/(byte) cputc::c#2 )
  [116] if((byte) cputc::c#3==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [117] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#3
  [118] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE
  [119] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [120] if((byte) conio_cursor_x!=(byte) $28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [121] phi()
  [122] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [123] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [124] phi()
  [125] call cputln 
  to:cputc::@return

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from printf_uint::@1
  [126] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [127] (byte*) utoa::buffer#11 ← phi( utoa::@4/(byte*) utoa::buffer#14 utoa/(byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [127] (byte) utoa::started#2 ← phi( utoa::@4/(byte) utoa::started#4 utoa/(byte) 0 )
  [127] (word) utoa::value#2 ← phi( utoa::@4/(word) utoa::value#6 utoa/(word) utoa::value#1 )
  [127] (byte) utoa::digit#2 ← phi( utoa::@4/(byte) utoa::digit#1 utoa/(byte) 0 )
  [128] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [129] (byte~) utoa::$11 ← (byte)(word) utoa::value#2
  [130] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  [131] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11
  [132] *((byte*) utoa::buffer#3) ← (byte) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [133] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [134] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1
  [135] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10)
  [136] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [137] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [138] (byte*) utoa::buffer#14 ← phi( utoa::@7/(byte*) utoa::buffer#11 utoa::@6/(byte*) utoa::buffer#4 )
  [138] (byte) utoa::started#4 ← phi( utoa::@7/(byte) utoa::started#2 utoa::@6/(byte) 1 )
  [138] (word) utoa::value#6 ← phi( utoa::@7/(word) utoa::value#2 utoa::@6/(word) utoa::value#0 )
  [139] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [140] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
  [141] (word) utoa_append::value#0 ← (word) utoa::value#2
  [142] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
  [143] call utoa_append 
  [144] (word) utoa_append::return#0 ← (word) utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [145] (word) utoa::value#0 ← (word) utoa_append::return#0
  [146] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11
  to:utoa::@4

(void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_upper_case , (byte) printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uint::@2
  [147] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [148] if((byte) 0==(byte) printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [149] (byte) cputc::c#2 ← (byte) printf_number_buffer::buffer_sign#0
  [150] call cputc 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [151] phi()
  [152] call cputs 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [153] return 
  to:@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [154] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $28
  [155] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $28
  [156] (byte) conio_cursor_x ← (byte) 0
  [157] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [158] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [159] return 
  to:@return

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [160] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [161] (byte) utoa_append::digit#2 ← phi( utoa_append/(byte) 0 utoa_append::@2/(byte) utoa_append::digit#1 )
  [161] (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#0 utoa_append::@2/(word) utoa_append::value#1 )
  [162] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [163] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2)
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [164] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [165] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  [166] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0
  to:utoa_append::@1

(void()) cscroll()
cscroll: scope:[cscroll]  from cputln
  [167] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [168] phi()
  [169] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [170] phi()
  [171] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [172] phi()
  [173] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [174] phi()
  [175] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [176] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $28
  [177] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $28
  [178] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [179] return 
  to:@return

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [180] (void*) memcpy::destination#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) DEFAULT_SCREEN cscroll::@2/(void*)(const nomodify byte*) COLORRAM )
  [180] (void*) memcpy::source#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) DEFAULT_SCREEN+(byte) $28 cscroll::@2/(void*)(const nomodify byte*) COLORRAM+(byte) $28 )
  [181] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $28-(number) $28
  [182] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [183] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [184] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [184] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [185] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [186] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [187] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [188] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [189] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [190] (byte) memset::c#4 ← phi( cscroll::@3/(byte) ' ' cscroll::@4/(const nomodify byte) LIGHT_BLUE )
  [190] (void*) memset::str#3 ← phi( cscroll::@3/(void*)(const nomodify byte*) DEFAULT_SCREEN+(word)(number) $19*(number) $28-(byte) $28 cscroll::@4/(void*)(const nomodify byte*) COLORRAM+(word)(number) $19*(number) $28-(byte) $28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [191] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $28
  [192] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [193] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [194] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [195] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [196] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [197] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2
