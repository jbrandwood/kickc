
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::x#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::x#2 = phi( main/main::x#0, main::@1/main::x#1 )
  main::$0 = main::x#2 + $c
  main::y#0 = main::$0
  main::screen[main::y#0] = 'a'
  main::cols[main::y#0] = main::BLACK
  main::x#1 = main::x#2 + rangenext(0,$a)
  main::$1 = main::x#1 != rangelast(0,$a)
  if(main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
label __start::@1
label __start::@return
void main()
number~ main::$0
bool~ main::$1
label main::@1
label main::@return
const byte main::BLACK = 0
const byte* main::cols = (byte*)$d800
const byte* main::screen = (byte*)$400
byte main::x
byte main::x#0
byte main::x#1
byte main::x#2
byte main::y
byte main::y#0

Adding number conversion cast (unumber) $c in main::$0 = main::x#2 + $c
Adding number conversion cast (unumber) main::$0 in main::$0 = main::x#2 + (unumber)$c
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 55296
Simplifying constant integer cast $c
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $c
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$0 = main::x#2 + $c
Alias main::y#0 = main::$0 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$1 [7] if(main::x#1!=rangelast(0,$a)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::x#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [5] main::x#1 = ++ main::x#2 to ++
Resolved ranged comparison value [7] if(main::x#1!=rangelast(0,$a)) goto main::@1 to $b
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $b in [5] if(main::x#1!=$b) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $b
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $b
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::x#0
Constant inlined main::x#0 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@2(between main::@1 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [8] main::x#3 = main::x#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::x#2 = phi( main/0, main::@1/main::x#1 )
  [2] main::y#0 = main::x#2 + $c
  [3] main::screen[main::y#0] = 'a'
  [4] main::cols[main::y#0] = main::BLACK
  [5] main::x#1 = ++ main::x#2
  [6] if(main::x#1!=$b) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte main::x
byte main::x#1 16.5
byte main::x#2 8.25
byte main::y
byte main::y#0 16.5

Initial phi equivalence classes
[ main::x#2 main::x#1 ]
Added variable main::y#0 to live range equivalence class [ main::y#0 ]
Complete equivalence classes
[ main::x#2 main::x#1 ]
[ main::y#0 ]
Allocated zp[1]:2 [ main::x#2 main::x#1 ]
Allocated zp[1]:3 [ main::y#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] main::screen[main::y#0] = 'a' [ main::x#2 main::y#0 ] (  [ main::x#2 main::y#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::x#2 main::x#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::y#0 ]
Statement [4] main::cols[main::y#0] = main::BLACK [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Statement [2] main::y#0 = main::x#2 + $c [ main::x#2 main::y#0 ] (  [ main::x#2 main::y#0 ] { }  ) always clobbers reg byte a 
Statement [3] main::screen[main::y#0] = 'a' [ main::x#2 main::y#0 ] (  [ main::x#2 main::y#0 ] { }  ) always clobbers reg byte a 
Statement [4] main::cols[main::y#0] = main::BLACK [ main::x#2 ] (  [ main::x#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::x#2 main::x#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::y#0 ] : zp[1]:3 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 24.75: zp[1]:2 [ main::x#2 main::x#1 ] 16.5: zp[1]:3 [ main::y#0 ] 
Uplift Scope [] 

Uplifting [main] best 381 combination reg byte y [ main::x#2 main::x#1 ] reg byte x [ main::y#0 ] 
Uplifting [] best 381 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const BLACK = 0
    .label screen = $400
    .label cols = $d800
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::x#2 = 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::x#2 = main::x#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::y#0 = main::x#2 + $c -- vbuxx=vbuyy_plus_vbuc1 
    tya
    tax
    axs #-[$c]
    // [3] main::screen[main::y#0] = 'a' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'a'
    sta screen,x
    // [4] main::cols[main::y#0] = main::BLACK -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #BLACK
    sta cols,x
    // [5] main::x#1 = ++ main::x#2 -- vbuyy=_inc_vbuyy 
    iny
    // [6] if(main::x#1!=$b) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$b
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
label main::@1
label main::@return
const byte main::BLACK = 0
const byte* main::cols = (byte*) 55296
const byte* main::screen = (byte*) 1024
byte main::x
byte main::x#1 reg byte y 16.5
byte main::x#2 reg byte y 8.25
byte main::y
byte main::y#0 reg byte x 16.5

reg byte y [ main::x#2 main::x#1 ]
reg byte x [ main::y#0 ]


FINAL ASSEMBLER
Score: 291

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .const BLACK = 0
    .label screen = $400
    .label cols = $d800
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::x#2 = 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::x#2 = main::x#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // y=x+12
    // [2] main::y#0 = main::x#2 + $c -- vbuxx=vbuyy_plus_vbuc1 
    tya
    tax
    axs #-[$c]
    // screen[y] = 'a'
    // [3] main::screen[main::y#0] = 'a' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #'a'
    sta screen,x
    // cols[y] = BLACK
    // [4] main::cols[main::y#0] = main::BLACK -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #BLACK
    sta cols,x
    // for(byte x:0..10)
    // [5] main::x#1 = ++ main::x#2 -- vbuyy=_inc_vbuyy 
    iny
    // [6] if(main::x#1!=$b) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$b
    bne __b1
    // main::@return
    // }
    // [7] return 
    rts
}
  // File Data

