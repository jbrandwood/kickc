(label) @1
(label) @begin
(label) @end
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
(label) div16s::@1
(label) div16s::@return
(signed word) div16s::dividend
(signed word) div16s::dividend#0 dividend zp[2]:17 5501.0
(signed word) div16s::divisor
(signed word) div16s::divisor#0 divisor zp[2]:19 5501.0
(signed word) div16s::return
(signed word) div16s::return#0 return zp[2]:11 3667.333333333333
(signed word) div16s::return#2 return zp[2]:11 2002.0
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(label) div16u::@1
(label) div16u::@return
(word) div16u::dividend
(word) div16u::dividend#0 dividend zp[2]:17 5501.0
(word) div16u::divisor
(word) div16u::divisor#0 divisor zp[2]:9 5501.0
(word) div16u::return
(word) div16u::return#0 return zp[2]:11 3667.333333333333
(word) div16u::return#2 return zp[2]:11 2002.0
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(signed byte~) div8s::$11 reg byte a 20002.0
(label) div8s::@1
(label) div8s::@2
(label) div8s::@3
(label) div8s::@4
(label) div8s::@5
(label) div8s::@6
(label) div8s::@7
(label) div8s::@8
(label) div8s::@9
(label) div8s::@return
(signed byte) div8s::dividend
(signed byte) div8s::dividend#0 reg byte x 7001.0
(byte) div8s::dividendu
(signed byte) div8s::dividendu#1 reg byte a 10001.0
(byte) div8s::dividendu#3 reg byte x 4286.142857142857
(byte) div8s::dividendu#7 reg byte x 20002.0
(byte) div8s::dividendu#8 reg byte x 20002.0
(signed byte) div8s::divisor
(signed byte) div8s::divisor#0 reg byte y 3000.4285714285716
(byte) div8s::divisoru
(signed byte) div8s::divisoru#1 reg byte y 5000.5
(byte) div8s::divisoru#3 reg byte a 15001.5
(byte) div8s::divisoru#4 reg byte a 20002.0
(byte) div8s::divisoru#5 reg byte a 20002.0
(byte) div8s::neg
(byte) div8s::neg#2 neg zp[1]:16 10001.0
(byte) div8s::neg#3 neg zp[1]:16 5000.5
(byte) div8s::neg#4 neg zp[1]:16 5000.5
(byte) div8s::resultu
(byte) div8s::resultu#0 reg byte y 2500.25
(signed byte) div8s::return
(signed byte) div8s::return#1 reg byte a 20002.0
(signed byte) div8s::return#2 reg byte a 7001.0
(signed byte) div8s::return#3 reg byte a 2002.0
(signed byte) div8s::return#7 reg byte a 10001.0
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(label) div8u::@1
(label) div8u::@return
(byte) div8u::dividend
(byte) div8u::dividend#0 reg byte x 10001.0
(byte) div8u::dividend#1 reg byte x 1001.0
(byte) div8u::dividend#2 reg byte x 111003.0
(byte) div8u::divisor
(byte) div8u::divisor#0 reg byte a 20002.0
(byte) div8u::divisor#1 reg byte a 2002.0
(byte) div8u::divisor#2 reg byte a 55501.5
(byte) div8u::return
(byte) div8u::return#0 reg byte a 27750.75
(byte) div8u::return#2 reg byte a 20002.0
(byte) div8u::return#3 reg byte a 2002.0
(signed word()) divr16s((signed word) divr16s::dividend , (signed word) divr16s::divisor , (signed word) divr16s::rem)
(signed word~) divr16s::$16 zp[2]:13 200002.0
(label) divr16s::@1
(label) divr16s::@2
(label) divr16s::@3
(label) divr16s::@4
(label) divr16s::@5
(label) divr16s::@6
(label) divr16s::@7
(label) divr16s::@8
(label) divr16s::@9
(label) divr16s::@return
(signed word) divr16s::dividend
(signed word) divr16s::dividend#0 dividend zp[2]:7 70001.0
(word) divr16s::dividendu
(signed word) divr16s::dividendu#1 dividendu zp[2]:7 100001.0
(word) divr16s::dividendu#3 dividendu zp[2]:7 42857.57142857143
(word) divr16s::dividendu#7 dividendu zp[2]:7 200002.0
(word) divr16s::dividendu#8 dividendu zp[2]:7 200002.0
(signed word) divr16s::divisor
(signed word) divr16s::divisor#0 divisor zp[2]:9 30000.428571428572
(word) divr16s::divisoru
(signed word) divr16s::divisoru#1 divisoru zp[2]:9 50000.5
(word) divr16s::divisoru#3 divisoru zp[2]:9 150001.5
(word) divr16s::divisoru#4 divisoru zp[2]:9 200002.0
(word) divr16s::divisoru#5 divisoru zp[2]:9 200002.0
(byte) divr16s::neg
(byte) divr16s::neg#2 reg byte y 100001.0
(byte) divr16s::neg#3 reg byte y 50000.5
(byte) divr16s::neg#4 reg byte y 50000.5
(signed word) divr16s::rem
(word) divr16s::remu
(word) divr16s::resultu
(word) divr16s::resultu#0 resultu zp[2]:11 25000.25
(signed word) divr16s::return
(signed word) divr16s::return#1 return zp[2]:11 200002.0
(signed word) divr16s::return#2 return zp[2]:11 70001.0
(signed word) divr16s::return#3 return zp[2]:11 20002.0
(signed word) divr16s::return#7 return zp[2]:11 100001.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 2.00000002E8
(byte~) divr16u::$2 reg byte a 2.00000002E8
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp[2]:7 2.500000025E7
(word) divr16u::dividend#1 dividend zp[2]:7 10001.0
(word) divr16u::dividend#2 dividend zp[2]:7 100001.0
(word) divr16u::dividend#3 dividend zp[2]:7 4.300000057142857E7
(word) divr16u::dividend#5 dividend zp[2]:7 1110003.0
(word) divr16u::divisor
(word) divr16u::divisor#0 divisor zp[2]:9 20002.0
(word) divr16u::divisor#1 divisor zp[2]:9 200002.0
(word) divr16u::divisor#6 divisor zp[2]:9 1.250687525E7
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 1.500000015E8
(byte) divr16u::i#2 reg byte x 1.5384615538461538E7
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp[2]:11 1.500000015E8
(word) divr16u::quotient#2 quotient zp[2]:11 1.00000001E8
(word) divr16u::quotient#3 quotient zp[2]:11 2.500000025E7
(word) divr16u::rem
(word) divr16u::rem#0 rem zp[2]:13 7.500000075E7
(word) divr16u::rem#1 rem zp[2]:13 2.00000002E8
(word) divr16u::rem#11 rem zp[2]:13 1.0033333466666667E8
(word) divr16u::rem#2 rem zp[2]:13 2.00000002E8
(word) divr16u::rem#5 rem zp[2]:13 2.00000002E8
(word) divr16u::rem#6 rem zp[2]:13 1.00000001E8
(word) divr16u::return
(word) divr16u::return#0 return zp[2]:11 4.2872857857142866E7
(word) divr16u::return#2 return zp[2]:11 20002.0
(word) divr16u::return#3 return zp[2]:11 200002.0
(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
(byte~) divr8u::$1 reg byte a 2.00000002E8
(label) divr8u::@1
(label) divr8u::@2
(label) divr8u::@3
(label) divr8u::@4
(label) divr8u::@5
(label) divr8u::@6
(label) divr8u::@return
(byte) divr8u::dividend
(byte) divr8u::dividend#0 dividend zp[1]:22 366667.3333333334
(byte) divr8u::dividend#1 dividend zp[1]:22 2.500000025E7
(byte) divr8u::dividend#2 dividend zp[1]:22 5.0166667333333336E7
(byte) divr8u::divisor
(byte) divr8u::divisor#0 divisor zp[1]:23 1.25062501875E7
(byte) divr8u::i
(byte) divr8u::i#1 reg byte x 1.500000015E8
(byte) divr8u::i#2 reg byte x 1.6666666833333334E7
(byte) divr8u::quotient
(byte) divr8u::quotient#1 quotient zp[1]:24 1.500000015E8
(byte) divr8u::quotient#2 quotient zp[1]:24 1.00000001E8
(byte) divr8u::quotient#3 quotient zp[1]:24 2.857142885714286E7
(byte) divr8u::rem
(byte) divr8u::rem#1 reg byte y 1.00000001E8
(byte) divr8u::rem#10 reg byte y 1.0033333466666667E8
(byte) divr8u::rem#2 reg byte y 2.00000002E8
(byte) divr8u::rem#3 reg byte y 2.00000002E8
(byte) divr8u::rem#4 reg byte y 2.00000002E8
(byte) divr8u::rem#5 reg byte y 1.00000001E8
(byte) divr8u::return
(byte) divr8u::return#0 reg byte a 200002.0
(byte) divr8u::return#1 return zp[1]:24 5.0016667333333336E7
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:17 20002.0
(byte*) memset::dst#2 dst zp[2]:17 13334.666666666666
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(byte*) 1024
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#4 reg byte a 2000002.0
(byte) print_char::ch#5 reg byte a 2000002.0
(byte) print_char::ch#6 reg byte a 1.2000003E7
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp[2]:4 1000001.0
(byte*) print_char_cursor#130 print_char_cursor zp[2]:4 107929.14285714284
(byte*) print_char_cursor#132 print_char_cursor zp[2]:4 6001.5
(byte*) print_char_cursor#135 print_char_cursor zp[2]:4 6001.5
(byte*) print_char_cursor#138 print_char_cursor zp[2]:4 57003.0
(byte*) print_char_cursor#139 print_char_cursor zp[2]:4 404669.3333333335
(byte*) print_char_cursor#141 print_char_cursor zp[2]:4 222.44444444444446
(byte*) print_char_cursor#163 print_char_cursor zp[2]:4 2002.0
(byte*) print_char_cursor#167 print_char_cursor zp[2]:4 2002.0
(byte*) print_char_cursor#172 print_char_cursor zp[2]:4 2002.0
(byte*) print_char_cursor#189 print_char_cursor zp[2]:4 2002.0
(byte*) print_char_cursor#19 print_char_cursor zp[2]:4 195645.2741935484
(byte*) print_char_cursor#84 print_char_cursor zp[2]:4 1.1020004E7
(void()) print_cls()
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp[2]:2 29490.30392156863
(byte*) print_line_cursor#20 print_line_cursor zp[2]:2 2010003.0
(byte*) print_line_cursor#39 print_line_cursor zp[2]:2 14005.0
(byte*) print_line_cursor#41 print_line_cursor zp[2]:2 87.04347826086956
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_schar((signed byte) print_schar::b)
(label) print_schar::@1
(label) print_schar::@2
(label) print_schar::@3
(label) print_schar::@4
(label) print_schar::@return
(signed byte) print_schar::b
(signed byte) print_schar::b#0 b zp[1]:6 20002.0
(signed byte) print_schar::b#1 b zp[1]:6 1001.0
(signed byte) print_schar::b#10 b zp[1]:6 5667.833333333333
(signed byte) print_schar::b#2 b zp[1]:6 2002.0
(signed byte) print_schar::b#3 b zp[1]:6 2002.0
(signed byte) print_schar::b#4 b zp[1]:6 2002.0
(signed byte) print_schar::b#7 b zp[1]:6 20002.0
(byte*) print_screen
(void()) print_sint((signed word) print_sint::w)
(label) print_sint::@1
(label) print_sint::@2
(label) print_sint::@3
(label) print_sint::@4
(label) print_sint::@return
(signed word) print_sint::w
(signed word) print_sint::w#0 w zp[2]:17 20002.0
(signed word) print_sint::w#1 w zp[2]:17 1001.0
(signed word) print_sint::w#10 w zp[2]:17 5667.833333333333
(signed word) print_sint::w#2 w zp[2]:17 2002.0
(signed word) print_sint::w#3 w zp[2]:17 2002.0
(signed word) print_sint::w#4 w zp[2]:17 2002.0
(signed word) print_sint::w#7 w zp[2]:17 20002.0
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp[2]:7 2000002.0
(byte*) print_str::str#13 str zp[2]:7 1002501.25
(byte*) print_str::str#15 str zp[2]:7 10001.0
(void()) print_uchar((byte) print_uchar::b)
(byte~) print_uchar::$0 reg byte a 2000002.0
(byte~) print_uchar::$2 reg byte a 2000002.0
(label) print_uchar::@1
(label) print_uchar::@return
(byte) print_uchar::b
(byte) print_uchar::b#0 b zp[1]:6 20002.0
(byte) print_uchar::b#1 b zp[1]:6 200002.0
(byte) print_uchar::b#2 b zp[1]:6 200002.0
(byte) print_uchar::b#3 b zp[1]:6 2002.0
(byte) print_uchar::b#4 b zp[1]:6 2002.0
(byte) print_uchar::b#5 b zp[1]:6 2002.0
(byte) print_uchar::b#6 b zp[1]:6 2002.0
(byte) print_uchar::b#7 b zp[1]:6 553502.25
(void()) print_uint((word) print_uint::w)
(label) print_uint::@1
(label) print_uint::@return
(word) print_uint::w
(word) print_uint::w#0 w zp[2]:17 20002.0
(word) print_uint::w#1 w zp[2]:17 1001.0
(word) print_uint::w#2 w zp[2]:17 2002.0
(word) print_uint::w#3 w zp[2]:17 2002.0
(word) print_uint::w#4 w zp[2]:17 2002.0
(word) print_uint::w#5 w zp[2]:17 71335.66666666666
(signed word) rem16s
(signed word) rem16s#11 rem16s zp[2]:13 9136.5
(signed word) rem16s#2 rem16s zp[2]:13 100001.0
(signed word) rem16s#37 rem16s zp[2]:13 200002.0
(word) rem16u
(word) rem16u#1 rem16u zp[2]:13 37074.148148148146
(signed byte) rem8s
(signed byte) rem8s#2 reg byte x 10001.0
(signed byte) rem8s#3 reg byte x 1166.8333333333333
(signed byte) rem8s#33 reg byte x 20002.0
(byte) rem8u
(byte) rem8u#17 reg byte x 38500.07692307692
(const byte*) str[(byte) 4]  = (byte*) " / "
(const byte*) str1[(byte) 4]  = (byte*) " = "
(const byte*) str2[(byte) 2]  = (byte*) " "
(void()) test_16s()
(byte~) test_16s::$11 reg byte x 1501.5
(label) test_16s::@1
(label) test_16s::@10
(label) test_16s::@2
(label) test_16s::@3
(label) test_16s::@4
(label) test_16s::@5
(label) test_16s::@6
(label) test_16s::@7
(label) test_16s::@8
(label) test_16s::@9
(label) test_16s::@return
(signed word) test_16s::dividend
(signed word) test_16s::dividend#0 dividend zp[2]:17 429.0
(const signed word*) test_16s::dividends[]  = { (signed word) $7fff, (signed word) $7fff, (signed word) -$7fff, (signed word) -$7fff, (signed word) $7fff, (signed word) -$7fff }
(signed word) test_16s::divisor
(signed word) test_16s::divisor#0 divisor zp[2]:19 273.0
(const signed word*) test_16s::divisors[]  = { (signed word) 5, (signed word) -7, (signed word) $b, (signed word) -$d, (signed word) -$11, (signed word) $13 }
(byte) test_16s::i
(byte) test_16s::i#1 i zp[1]:15 1501.5
(byte) test_16s::i#10 i zp[1]:15 115.5
(signed word) test_16s::res
(signed word) test_16s::res#0 res zp[2]:11 200.2
(void()) test_16u()
(byte~) test_16u::$11 reg byte x 1501.5
(label) test_16u::@1
(label) test_16u::@10
(label) test_16u::@2
(label) test_16u::@3
(label) test_16u::@4
(label) test_16u::@5
(label) test_16u::@6
(label) test_16u::@7
(label) test_16u::@8
(label) test_16u::@9
(label) test_16u::@return
(word) test_16u::dividend
(word) test_16u::dividend#0 dividend zp[2]:17 429.0
(const word*) test_16u::dividends[]  = { (word) $ffff, (word) $ffff, (word) $ffff, (word) $ffff, (word) $ffff, (word) $ffff }
(word) test_16u::divisor
(word) test_16u::divisor#0 divisor zp[2]:9 273.0
(const word*) test_16u::divisors[]  = { (word) 5, (word) 7, (word) $b, (word) $d, (word) $11, (word) $13 }
(byte) test_16u::i
(byte) test_16u::i#1 i zp[1]:16 1501.5
(byte) test_16u::i#10 i zp[1]:16 115.5
(word) test_16u::res
(word) test_16u::res#0 res zp[2]:11 200.2
(void()) test_8s()
(label) test_8s::@1
(label) test_8s::@10
(label) test_8s::@2
(label) test_8s::@3
(label) test_8s::@4
(label) test_8s::@5
(label) test_8s::@6
(label) test_8s::@7
(label) test_8s::@8
(label) test_8s::@9
(label) test_8s::@return
(signed byte) test_8s::dividend
(signed byte) test_8s::dividend#0 dividend zp[1]:6 429.0
(const signed byte*) test_8s::dividends[]  = { (signed byte) $7f, (signed byte) -$7f, (signed byte) -$7f, (signed byte) $7f, (signed byte) $7f, (signed byte) $7f }
(signed byte) test_8s::divisor
(signed byte) test_8s::divisor#0 divisor zp[1]:21 273.0
(const signed byte*) test_8s::divisors[]  = { (signed byte) 5, (signed byte) 7, (signed byte) -$b, (signed byte) -$d, (signed byte) $11, (signed byte) $13 }
(byte) test_8s::i
(byte) test_8s::i#1 i zp[1]:15 1501.5
(byte) test_8s::i#10 i zp[1]:15 160.16
(signed byte) test_8s::res
(signed byte) test_8s::res#0 res zp[1]:22 200.2
(void()) test_8u()
(label) test_8u::@1
(label) test_8u::@10
(label) test_8u::@11
(label) test_8u::@2
(label) test_8u::@3
(label) test_8u::@4
(label) test_8u::@5
(label) test_8u::@6
(label) test_8u::@7
(label) test_8u::@8
(label) test_8u::@9
(label) test_8u::@return
(byte) test_8u::dividend
(byte) test_8u::dividend#0 dividend zp[1]:6 429.0
(const byte*) test_8u::dividends[]  = { (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff, (byte) $ff }
(byte) test_8u::divisor
(byte) test_8u::divisor#0 divisor zp[1]:23 300.29999999999995
(const byte*) test_8u::divisors[]  = { (byte) 5, (byte) 7, (byte) $b, (byte) $d, (byte) $11, (byte) $13 }
(byte) test_8u::i
(byte) test_8u::i#1 i zp[1]:21 1001.0
(byte) test_8u::i#10 i zp[1]:21 166.83333333333334
(byte) test_8u::res
(byte) test_8u::res#0 res zp[1]:24 222.44444444444446

zp[2]:2 [ print_line_cursor#20 print_line_cursor#39 print_line_cursor#1 print_line_cursor#41 ]
reg byte a [ print_char::ch#6 print_char::ch#4 print_char::ch#5 ]
zp[2]:4 [ print_char_cursor#138 print_char_cursor#84 print_char_cursor#135 print_char_cursor#132 print_char_cursor#163 print_char_cursor#130 print_char_cursor#139 print_char_cursor#19 print_char_cursor#172 print_char_cursor#141 print_char_cursor#1 print_char_cursor#167 print_char_cursor#189 ]
zp[1]:6 [ print_uchar::b#7 print_uchar::b#0 print_uchar::b#1 print_uchar::b#2 print_uchar::b#3 print_uchar::b#4 print_uchar::b#5 print_uchar::b#6 print_schar::b#7 print_schar::b#0 print_schar::b#10 print_schar::b#1 print_schar::b#2 print_schar::b#3 print_schar::b#4 test_8u::dividend#0 test_8s::dividend#0 ]
zp[2]:7 [ divr16s::dividendu#3 divr16s::dividendu#7 divr16s::dividendu#8 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 divr16s::dividend#0 divr16s::dividendu#1 print_str::str#13 print_str::str#15 print_str::str#0 ]
zp[2]:9 [ divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16u::divisor#6 divr16u::divisor#0 divr16u::divisor#1 divr16s::divisor#0 divr16s::divisoru#1 test_16u::divisor#0 div16u::divisor#0 ]
reg byte y [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
zp[2]:11 [ divr16s::return#2 divr16s::return#1 divr16s::return#7 divr16s::resultu#0 divr16s::return#3 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#3 divr16u::return#2 div16s::return#2 test_16s::res#0 div16s::return#0 div16u::return#2 test_16u::res#0 div16u::return#0 ]
zp[2]:13 [ rem16s#11 rem16s#2 rem16s#37 divr16s::$16 rem16u#1 divr16u::rem#5 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp[1]:15 [ test_8s::i#10 test_8s::i#1 test_16s::i#10 test_16s::i#1 ]
reg byte x [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
reg byte a [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ]
reg byte a [ div8s::return#2 div8s::return#1 div8s::return#7 ]
reg byte x [ rem8s#3 rem8s#2 rem8s#33 ]
reg byte x [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
reg byte a [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ]
reg byte y [ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
reg byte x [ divr8u::i#2 divr8u::i#1 ]
zp[1]:16 [ test_16u::i#10 test_16u::i#1 div8s::neg#4 div8s::neg#2 div8s::neg#3 ]
zp[2]:17 [ memset::dst#2 memset::dst#1 print_sint::w#7 print_sint::w#0 print_sint::w#10 print_sint::w#1 print_sint::w#2 print_sint::w#3 print_sint::w#4 print_uint::w#5 print_uint::w#0 print_uint::w#1 print_uint::w#2 print_uint::w#3 print_uint::w#4 test_16s::dividend#0 div16s::dividend#0 test_16u::dividend#0 div16u::dividend#0 ]
reg byte x [ test_16s::$11 ]
zp[2]:19 [ test_16s::divisor#0 div16s::divisor#0 ]
reg byte a [ print_uchar::$0 ]
reg byte a [ print_uchar::$2 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
zp[1]:21 [ test_8s::divisor#0 test_8u::i#10 test_8u::i#1 ]
reg byte x [ div8s::dividend#0 ]
reg byte y [ div8s::divisor#0 ]
reg byte a [ div8s::return#3 ]
zp[1]:22 [ test_8s::res#0 divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
reg byte a [ div8u::return#2 ]
reg byte y [ div8s::resultu#0 ]
reg byte a [ div8s::$11 ]
reg byte y [ div8s::divisoru#1 ]
reg byte a [ div8s::dividendu#1 ]
reg byte a [ divr8u::return#0 ]
reg byte a [ div8u::return#0 ]
reg byte a [ divr8u::$1 ]
reg byte x [ rem8u#17 ]
reg byte x [ test_16u::$11 ]
zp[1]:23 [ test_8u::divisor#0 divr8u::divisor#0 ]
reg byte a [ div8u::return#3 ]
zp[1]:24 [ test_8u::res#0 divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
