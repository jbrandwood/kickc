
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  [5] call conio_c64_init 
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [6] phi()
  [7] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [8] return 
  to:@return

void conio_c64_init()
conio_c64_init: scope:[conio_c64_init]  from __start::__init1
  [9] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE
  [10] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2
  to:conio_c64_init::@1
conio_c64_init::@2: scope:[conio_c64_init]  from conio_c64_init
  [11] phi()
  to:conio_c64_init::@1
conio_c64_init::@1: scope:[conio_c64_init]  from conio_c64_init conio_c64_init::@2
  [12] conio_c64_init::line#2 = phi( conio_c64_init::@2/conio_c64_init::line#0, conio_c64_init/(byte)$19-1 )
  [13] gotoxy::y#2 = conio_c64_init::line#2
  [14] call gotoxy 
  to:conio_c64_init::@return
conio_c64_init::@return: scope:[conio_c64_init]  from conio_c64_init::@1
  [15] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [16] phi()
  [17] call clrscr 
  to:main::@20
main::@20: scope:[main]  from main
  [18] main::pwd = passwords
  to:main::@1
main::@1: scope:[main]  from main::@15 main::@20
  [19] main::invalid_b#11 = phi( main::@15/main::invalid_b#30, main::@20/0 )
  [19] main::valid_b#11 = phi( main::@15/main::valid_b#28, main::@20/0 )
  [19] main::total#10 = phi( main::@15/main::total#1, main::@20/0 )
  [19] main::invalid_a#11 = phi( main::@15/main::invalid_a#16, main::@20/0 )
  [19] main::valid_a#11 = phi( main::@15/main::valid_a#15, main::@20/0 )
  [20] if(0!=*main::pwd) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [21] phi()
  [22] call cputs 
  to:main::@23
main::@23: scope:[main]  from main::@3
  [23] printf_uint::uvalue#0 = main::valid_a#11
  [24] call printf_uint 
  to:main::@24
main::@24: scope:[main]  from main::@23
  [25] phi()
  [26] call cputs 
  to:main::@25
main::@25: scope:[main]  from main::@24
  [27] printf_uint::uvalue#1 = main::invalid_a#11
  [28] call printf_uint 
  to:main::@26
main::@26: scope:[main]  from main::@25
  [29] phi()
  [30] call cputs 
  to:main::@27
main::@27: scope:[main]  from main::@26
  [31] printf_uint::uvalue#2 = main::total#10
  [32] call printf_uint 
  to:main::@28
main::@28: scope:[main]  from main::@27
  [33] phi()
  [34] call cputs 
  to:main::@29
main::@29: scope:[main]  from main::@28
  [35] phi()
  [36] call cputs 
  to:main::@30
main::@30: scope:[main]  from main::@29
  [37] printf_uint::uvalue#3 = main::valid_b#11
  [38] call printf_uint 
  to:main::@31
main::@31: scope:[main]  from main::@30
  [39] phi()
  [40] call cputs 
  to:main::@32
main::@32: scope:[main]  from main::@31
  [41] printf_uint::uvalue#4 = main::invalid_b#11
  [42] call printf_uint 
  to:main::@33
main::@33: scope:[main]  from main::@32
  [43] phi()
  [44] call cputs 
  to:main::@34
main::@34: scope:[main]  from main::@33
  [45] printf_uint::uvalue#5 = main::total#10
  [46] call printf_uint 
  to:main::@35
main::@35: scope:[main]  from main::@34
  [47] phi()
  [48] call cputs 
  to:main::@19
main::@19: scope:[main]  from main::@19 main::@35
  [49] phi()
  to:main::@19
main::@2: scope:[main]  from main::@1
  [50] strtouc::str#0 = main::pwd
  [51] call strtouc 
  [52] strtouc::return#0 = strtouc::val#3
  to:main::@21
main::@21: scope:[main]  from main::@2
  [53] main::min#0 = strtouc::return#0
  [54] main::pwd = ++ main::pwd
  [55] strtouc::str#1 = main::pwd
  [56] call strtouc 
  [57] strtouc::return#1 = strtouc::val#3
  to:main::@22
main::@22: scope:[main]  from main::@21
  [58] main::max#0 = strtouc::return#1
  [59] main::pwd = ++ main::pwd
  [60] main::ch#0 = *main::pwd
  [61] main::pwd = main::pwd + 3
  [62] main::$5 = main::min#0 - 1
  [63] if(main::pwd[main::$5]!=main::ch#0) goto main::@4
  to:main::@16
main::@16: scope:[main]  from main::@22
  [64] phi()
  to:main::@4
main::@4: scope:[main]  from main::@16 main::@22
  [65] main::count_b#4 = phi( main::@16/1, main::@22/0 )
  [66] main::$8 = main::max#0 - 1
  [67] if(main::pwd[main::$8]!=main::ch#0) goto main::@5
  to:main::@17
main::@17: scope:[main]  from main::@4
  [68] main::count_b#2 = ++ main::count_b#4
  to:main::@5
main::@5: scope:[main]  from main::@17 main::@4
  [69] main::count_b#11 = phi( main::@17/main::count_b#2, main::@4/main::count_b#4 )
  to:main::@6
main::@6: scope:[main]  from main::@5 main::@9
  [70] main::count_a#2 = phi( main::@5/0, main::@9/main::count_a#6 )
  [71] if(0!=*main::pwd) goto main::@7
  to:main::@8
main::@8: scope:[main]  from main::@6
  [72] if(main::count_a#2<main::min#0) goto main::@11
  to:main::@36
main::@36: scope:[main]  from main::@8
  [73] if(main::count_a#2<=main::max#0) goto main::@12
  to:main::@11
main::@11: scope:[main]  from main::@36 main::@8
  [74] main::invalid_a#1 = ++ main::invalid_a#11
  to:main::@13
main::@13: scope:[main]  from main::@11 main::@12
  [75] main::invalid_a#16 = phi( main::@11/main::invalid_a#1, main::@12/main::invalid_a#11 )
  [75] main::valid_a#15 = phi( main::@11/main::valid_a#11, main::@12/main::valid_a#1 )
  [76] if(main::count_b#11==1) goto main::@14
  to:main::@18
main::@18: scope:[main]  from main::@13
  [77] main::invalid_b#1 = ++ main::invalid_b#11
  to:main::@15
main::@15: scope:[main]  from main::@14 main::@18
  [78] main::invalid_b#30 = phi( main::@14/main::invalid_b#11, main::@18/main::invalid_b#1 )
  [78] main::valid_b#28 = phi( main::@14/main::valid_b#1, main::@18/main::valid_b#11 )
  [79] main::total#1 = ++ main::total#10
  [80] main::pwd = ++ main::pwd
  to:main::@1
main::@14: scope:[main]  from main::@13
  [81] main::valid_b#1 = ++ main::valid_b#11
  to:main::@15
main::@12: scope:[main]  from main::@36
  [82] main::valid_a#1 = ++ main::valid_a#11
  to:main::@13
main::@7: scope:[main]  from main::@6
  [83] if(*main::pwd!=main::ch#0) goto main::@9
  to:main::@10
main::@10: scope:[main]  from main::@7
  [84] main::count_a#1 = ++ main::count_a#2
  to:main::@9
main::@9: scope:[main]  from main::@10 main::@7
  [85] main::count_a#6 = phi( main::@10/main::count_a#1, main::@7/main::count_a#2 )
  [86] main::pwd = ++ main::pwd
  to:main::@6

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from conio_c64_init::@1
  [87] if(gotoxy::y#2<$19+1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [88] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [89] gotoxy::y#4 = phi( gotoxy::@3/gotoxy::y#2, gotoxy/0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [90] conio_cursor_x = gotoxy::x#2
  [91] conio_cursor_y = gotoxy::y#4
  [92] gotoxy::$7 = (word)gotoxy::y#4
  [93] gotoxy::$8 = gotoxy::$7 << 2
  [94] gotoxy::$9 = gotoxy::$8 + gotoxy::$7
  [95] gotoxy::line_offset#0 = gotoxy::$9 << 3
  [96] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0
  [97] conio_line_text = gotoxy::$5
  [98] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0
  [99] conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [100] return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  [101] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [102] clrscr::line_cols#5 = phi( clrscr/COLORRAM, clrscr::@5/clrscr::line_cols#1 )
  [102] clrscr::line_text#5 = phi( clrscr/DEFAULT_SCREEN, clrscr::@5/clrscr::line_text#1 )
  [102] clrscr::l#2 = phi( clrscr/0, clrscr::@5/clrscr::l#1 )
  [103] if(clrscr::l#2<$19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [104] conio_cursor_x = 0
  [105] conio_cursor_y = 0
  [106] conio_line_text = DEFAULT_SCREEN
  [107] conio_line_color = COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [108] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [109] clrscr::c#2 = phi( clrscr::@1/0, clrscr::@4/clrscr::c#1 )
  [110] if(clrscr::c#2<$28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [111] clrscr::line_text#1 = clrscr::line_text#5 + $28
  [112] clrscr::line_cols#1 = clrscr::line_cols#5 + $28
  [113] clrscr::l#1 = ++ clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [114] clrscr::line_text#5[clrscr::c#2] = ' '
  [115] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE
  [116] clrscr::c#1 = ++ clrscr::c#2
  to:clrscr::@3

void cputs(to_nomodify byte* cputs::s)
cputs: scope:[cputs]  from main::@24 main::@26 main::@28 main::@29 main::@3 main::@31 main::@33 main::@35 printf_number_buffer::@2
  [117] cputs::s#11 = phi( main::@24/main::s1, main::@26/main::s2, main::@28/main::s3, main::@29/main::s4, main::@3/main::s, main::@31/main::s1, main::@33/main::s2, main::@35/main::s3, printf_number_buffer::@2/printf_number_buffer::buffer_digits#0 )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [118] cputs::s#10 = phi( cputs/cputs::s#11, cputs::@2/cputs::s#0 )
  [119] cputs::c#1 = *cputs::s#10
  [120] cputs::s#0 = ++ cputs::s#10
  [121] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [122] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [123] cputc::c#0 = cputs::c#1
  [124] call cputc 
  to:cputs::@1

void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@23 main::@25 main::@27 main::@30 main::@32 main::@34
  [125] printf_uint::uvalue#6 = phi( main::@23/printf_uint::uvalue#0, main::@25/printf_uint::uvalue#1, main::@27/printf_uint::uvalue#2, main::@30/printf_uint::uvalue#3, main::@32/printf_uint::uvalue#4, main::@34/printf_uint::uvalue#5 )
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [126] *((byte*)&printf_buffer) = 0
  [127] utoa::value#1 = printf_uint::uvalue#6
  [128] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [129] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer)
  [130] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [131] return 
  to:@return

byte strtouc(byte* strtouc::str , byte** strtouc::endptr)
strtouc: scope:[strtouc]  from main::@2 main::@21
  [132] strtouc::str#3 = phi( main::@2/strtouc::str#0, main::@21/strtouc::str#1 )
  [133] strtouc::c#0 = *strtouc::str#3
  to:strtouc::@1
strtouc::@1: scope:[strtouc]  from strtouc strtouc::@2
  [134] strtouc::str#4 = phi( strtouc/strtouc::str#3, strtouc::@2/strtouc::str#2 )
  [134] strtouc::val#3 = phi( strtouc/0, strtouc::@2/strtouc::val#2 )
  [134] strtouc::c#2 = phi( strtouc/strtouc::c#0, strtouc::@2/strtouc::c#1 )
  [135] if(strtouc::c#2<'0') goto strtouc::@3
  to:strtouc::@4
strtouc::@4: scope:[strtouc]  from strtouc::@1
  [136] if(strtouc::c#2<='9') goto strtouc::@2
  to:strtouc::@3
strtouc::@3: scope:[strtouc]  from strtouc::@1 strtouc::@4
  [137] *(&main::pwd) = strtouc::str#4
  to:strtouc::@return
strtouc::@return: scope:[strtouc]  from strtouc::@3
  [138] return 
  to:@return
strtouc::@2: scope:[strtouc]  from strtouc::@4
  [139] strtouc::$5 = strtouc::val#3 << 2
  [140] strtouc::$6 = strtouc::$5 + strtouc::val#3
  [141] strtouc::val#1 = strtouc::$6 << 1
  [142] strtouc::$4 = strtouc::c#2 - '0'
  [143] strtouc::val#2 = strtouc::val#1 + strtouc::$4
  [144] strtouc::str#2 = ++ strtouc::str#4
  [145] strtouc::c#1 = *strtouc::str#2
  to:strtouc::@1

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@3
  [146] cputc::c#3 = phi( cputs::@2/cputc::c#0, printf_number_buffer::@3/cputc::c#2 )
  [147] if(cputc::c#3=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [148] conio_line_text[conio_cursor_x] = cputc::c#3
  [149] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [150] conio_cursor_x = ++ conio_cursor_x
  [151] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [152] phi()
  [153] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [154] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [155] phi()
  [156] call cputln 
  to:cputc::@return

void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
utoa: scope:[utoa]  from printf_uint::@1
  [157] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [158] utoa::buffer#11 = phi( utoa::@4/utoa::buffer#14, utoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [158] utoa::started#2 = phi( utoa::@4/utoa::started#4, utoa/0 )
  [158] utoa::value#2 = phi( utoa::@4/utoa::value#6, utoa/utoa::value#1 )
  [158] utoa::digit#2 = phi( utoa::@4/utoa::digit#1, utoa/0 )
  [159] if(utoa::digit#2<5-1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [160] utoa::$11 = (byte)utoa::value#2
  [161] *utoa::buffer#11 = DIGITS[utoa::$11]
  [162] utoa::buffer#3 = ++ utoa::buffer#11
  [163] *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [164] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [165] utoa::$10 = utoa::digit#2 << 1
  [166] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10]
  [167] if(0!=utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [168] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [169] utoa::buffer#14 = phi( utoa::@7/utoa::buffer#11, utoa::@6/utoa::buffer#4 )
  [169] utoa::started#4 = phi( utoa::@7/utoa::started#2, utoa::@6/1 )
  [169] utoa::value#6 = phi( utoa::@7/utoa::value#2, utoa::@6/utoa::value#0 )
  [170] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [171] utoa_append::buffer#0 = utoa::buffer#11
  [172] utoa_append::value#0 = utoa::value#2
  [173] utoa_append::sub#0 = utoa::digit_value#0
  [174] call utoa_append 
  [175] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [176] utoa::value#0 = utoa_append::return#0
  [177] utoa::buffer#4 = ++ utoa::buffer#11
  to:utoa::@4

void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uint::@2
  [178] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [179] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [180] cputc::c#2 = printf_number_buffer::buffer_sign#0
  [181] call cputc 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [182] phi()
  [183] call cputs 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [184] return 
  to:@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [185] conio_line_text = conio_line_text + $28
  [186] conio_line_color = conio_line_color + $28
  [187] conio_cursor_x = 0
  [188] conio_cursor_y = ++ conio_cursor_y
  [189] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [190] return 
  to:@return

word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [191] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [192] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [192] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [193] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [194] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [195] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [196] utoa_append::digit#1 = ++ utoa_append::digit#2
  [197] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [198] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [199] phi()
  [200] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [201] phi()
  [202] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [203] phi()
  [204] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [205] phi()
  [206] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [207] conio_line_text = conio_line_text - $28
  [208] conio_line_color = conio_line_color - $28
  [209] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [210] return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [211] memcpy::destination#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN, cscroll::@2/(void*)COLORRAM )
  [211] memcpy::source#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN+$28, cscroll::@2/(void*)COLORRAM+$28 )
  [212] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28
  [213] memcpy::src#4 = (byte*)memcpy::source#2
  [214] memcpy::dst#4 = (byte*)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [215] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [215] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [216] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [217] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [218] *memcpy::dst#2 = *memcpy::src#2
  [219] memcpy::dst#1 = ++ memcpy::dst#2
  [220] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [221] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [221] memset::str#3 = phi( cscroll::@3/(void*)DEFAULT_SCREEN+(word)$19*$28-$28, cscroll::@4/(void*)COLORRAM+(word)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [222] memset::end#0 = (byte*)memset::str#3 + $28
  [223] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [224] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [225] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [226] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [227] *memset::dst#2 = memset::c#4
  [228] memset::dst#1 = ++ memset::dst#2
  to:memset::@2
