
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from __start
  (byte*) main::b#0 ← (const nomodify byte*) main::BITMAP+(number) $1fff
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte*) main::b#2 ← phi( main/(byte*) main::b#0 main::@1/(byte*) main::b#1 )
  *((byte*) main::b#2) ← (number) $5a
  (byte*) main::b#1 ← (byte*) main::b#2 + rangenext(main::BITMAP+$1fff,main::BITMAP)
  (bool~) main::$0 ← (byte*) main::b#1 != rangelast(main::BITMAP+$1fff,main::BITMAP)
  if((bool~) main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(void()) __start()
(label) __start::@1
(label) __start::@return
(void()) main()
(bool~) main::$0
(label) main::@1
(label) main::@return
(const nomodify byte*) main::BITMAP = (byte*)(number) $2000
(byte*) main::b
(byte*) main::b#0
(byte*) main::b#1
(byte*) main::b#2

Adding number conversion cast (unumber) $1fff in (byte*) main::b#0 ← (const nomodify byte*) main::BITMAP+(number) $1fff
Adding number conversion cast (unumber) $5a in *((byte*) main::b#2) ← (number) $5a
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((byte*) main::b#2) ← (unumber)(number) $5a
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 8192
Simplifying constant integer cast $1fff
Simplifying constant integer cast $5a
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (word) $1fff
Finalized unsigned number type (byte) $5a
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition (bool~) main::$0 [5] if((byte*) main::b#1!=rangelast(main::BITMAP+$1fff,main::BITMAP)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) main::b#0 = main::BITMAP+$1fff
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [3] main::b#1 ← -- main::b#2 to --
Resolved ranged comparison value [5] if(main::b#1!=rangelast(main::BITMAP+$1fff,main::BITMAP)) goto main::@1 to (byte*)(const nomodify byte*) main::BITMAP-(number) 1
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 1 in [3] if((byte*) main::b#1!=(byte*)(const nomodify byte*) main::BITMAP-(number) 1) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast (const nomodify byte*) main::BITMAP-(unumber)(number) 1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte*) main::b#0
Constant inlined main::b#0 = (const nomodify byte*) main::BITMAP+(word) $1fff
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@2(between main::@1 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [6] main::b#3 ← main::b#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] (byte*) main::b#2 ← phi( main/(const nomodify byte*) main::BITMAP+(word) $1fff main::@1/(byte*) main::b#1 )
  [2] *((byte*) main::b#2) ← (byte) $5a
  [3] (byte*) main::b#1 ← -- (byte*) main::b#2
  [4] if((byte*) main::b#1!=(const nomodify byte*) main::BITMAP-(byte) 1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [5] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte*) main::b
(byte*) main::b#1 16.5
(byte*) main::b#2 16.5

Initial phi equivalence classes
[ main::b#2 main::b#1 ]
Complete equivalence classes
[ main::b#2 main::b#1 ]
Allocated zp[2]:2 [ main::b#2 main::b#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Range-based for does not recognize symbolic constants.
// The following should work but gives a not-constant exception
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label BITMAP = $2000
    .label b = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte*) main::b#2 = (const nomodify byte*) main::BITMAP+(word) $1fff [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<BITMAP+$1fff
    sta.z b
    lda #>BITMAP+$1fff
    sta.z b+1
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi (byte*) main::b#2 = (byte*) main::b#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] *((byte*) main::b#2) ← (byte) $5a -- _deref_pbuz1=vbuc1 
    lda #$5a
    ldy #0
    sta (b),y
    // [3] (byte*) main::b#1 ← -- (byte*) main::b#2 -- pbuz1=_dec_pbuz1 
    lda.z b
    bne !+
    dec.z b+1
  !:
    dec.z b
    // [4] if((byte*) main::b#1!=(const nomodify byte*) main::BITMAP-(byte) 1) goto main::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda.z b+1
    cmp #>BITMAP-1
    bne __b1_from___b1
    lda.z b
    cmp #<BITMAP-1
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] *((byte*) main::b#2) ← (byte) $5a [ main::b#2 ] (  [ main::b#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [3] (byte*) main::b#1 ← -- (byte*) main::b#2 [ main::b#1 ] (  [ main::b#1 ] { }  ) always clobbers reg byte a 
Statement [4] if((byte*) main::b#1!=(const nomodify byte*) main::BITMAP-(byte) 1) goto main::@1 [ main::b#1 ] (  [ main::b#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ main::b#2 main::b#1 ] : zp[2]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 33: zp[2]:2 [ main::b#2 main::b#1 ] 
Uplift Scope [] 

Uplifting [main] best 601 combination zp[2]:2 [ main::b#2 main::b#1 ] 
Uplifting [] best 601 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Range-based for does not recognize symbolic constants.
// The following should work but gives a not-constant exception
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label BITMAP = $2000
    .label b = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte*) main::b#2 = (const nomodify byte*) main::BITMAP+(word) $1fff [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<BITMAP+$1fff
    sta.z b
    lda #>BITMAP+$1fff
    sta.z b+1
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi (byte*) main::b#2 = (byte*) main::b#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] *((byte*) main::b#2) ← (byte) $5a -- _deref_pbuz1=vbuc1 
    lda #$5a
    ldy #0
    sta (b),y
    // [3] (byte*) main::b#1 ← -- (byte*) main::b#2 -- pbuz1=_dec_pbuz1 
    lda.z b
    bne !+
    dec.z b+1
  !:
    dec.z b
    // [4] if((byte*) main::b#1!=(const nomodify byte*) main::BITMAP-(byte) 1) goto main::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda.z b+1
    cmp #>BITMAP-1
    bne __b1_from___b1
    lda.z b
    cmp #<BITMAP-1
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(void()) main()
(label) main::@1
(label) main::@return
(const nomodify byte*) main::BITMAP = (byte*) 8192
(byte*) main::b
(byte*) main::b#1 b zp[2]:2 16.5
(byte*) main::b#2 b zp[2]:2 16.5

zp[2]:2 [ main::b#2 main::b#1 ]


FINAL ASSEMBLER
Score: 511

  // File Comments
// Range-based for does not recognize symbolic constants.
// The following should work but gives a not-constant exception
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label BITMAP = $2000
    .label b = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi (byte*) main::b#2 = (const nomodify byte*) main::BITMAP+(word) $1fff [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<BITMAP+$1fff
    sta.z b
    lda #>BITMAP+$1fff
    sta.z b+1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi (byte*) main::b#2 = (byte*) main::b#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // *b = $5a
    // [2] *((byte*) main::b#2) ← (byte) $5a -- _deref_pbuz1=vbuc1 
    lda #$5a
    ldy #0
    sta (b),y
    // for(byte* b : BITMAP+$1fff..BITMAP)
    // [3] (byte*) main::b#1 ← -- (byte*) main::b#2 -- pbuz1=_dec_pbuz1 
    lda.z b
    bne !+
    dec.z b+1
  !:
    dec.z b
    // [4] if((byte*) main::b#1!=(const nomodify byte*) main::BITMAP-(byte) 1) goto main::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda.z b+1
    cmp #>BITMAP-1
    bne __b1
    lda.z b
    cmp #<BITMAP-1
    bne __b1
    // main::@return
    // }
    // [5] return 
    rts
}
  // File Data

