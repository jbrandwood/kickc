Warning! Adding boolean cast to non-boolean condition *((const byte*) MESSAGE + (byte) main::i)
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@7
Culled Empty Block (label) main::@8
Culled Empty Block (label) main::@9
Culled Empty Block (label) main::@10

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte) main::idx#0 ← (number) 0
  (byte) main::i#0 ← (number) 0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::idx#4 ← phi( main/(byte) main::idx#0 main::@5/(byte) main::idx#5 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@5/(byte) main::i#1 )
  (bool~) main::$2 ← (number) 0 != *((const byte*) MESSAGE + (byte) main::i#2)
  if((bool~) main::$2) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::idx#3 ← phi( main::@1/(byte) main::idx#4 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  (bool~) main::$0 ← *((const byte*) MESSAGE + (byte) main::i#3) == (byte) ' '
  (bool~) main::$1 ← ! (bool~) main::$0
  if((bool~) main::$1) goto main::@4
  to:main::@5
main::@4: scope:[main]  from main::@2
  (byte) main::idx#2 ← phi( main::@2/(byte) main::idx#3 )
  (byte) main::i#4 ← phi( main::@2/(byte) main::i#3 )
  *((const byte*) SCREEN + (byte) main::idx#2) ← *((const byte*) MESSAGE + (byte) main::i#4)
  (byte) main::idx#1 ← ++ (byte) main::idx#2
  to:main::@5
main::@5: scope:[main]  from main::@2 main::@4
  (byte) main::idx#5 ← phi( main::@2/(byte) main::idx#3 main::@4/(byte) main::idx#1 )
  (byte) main::i#5 ← phi( main::@2/(byte) main::i#3 main::@4/(byte) main::i#4 )
  (byte) main::i#1 ← ++ (byte) main::i#5
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte*) MESSAGE = (string) "hello brave new world!"
(const byte*) SCREEN = (byte*)(number) $400
(void()) main()
(bool~) main::$0
(bool~) main::$1
(bool~) main::$2
(label) main::@1
(label) main::@2
(label) main::@4
(label) main::@5
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::idx
(byte) main::idx#0
(byte) main::idx#1
(byte) main::idx#2
(byte) main::idx#3
(byte) main::idx#4
(byte) main::idx#5

Adding number conversion cast (unumber) 0 in (byte) main::idx#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) main::i#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) main::$2 ← (number) 0 != *((const byte*) MESSAGE + (byte) main::i#2)
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) main::idx#0 ← (unumber)(number) 0
Inlining cast (byte) main::i#0 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [7] (bool~) main::$1 ← *((const byte*) MESSAGE + (byte) main::i#3) != (byte) ' ' from [6] (bool~) main::$0 ← *((const byte*) MESSAGE + (byte) main::i#3) == (byte) ' '
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte) main::i#2 = (byte) main::i#3 (byte) main::i#4 
Alias (byte) main::idx#2 = (byte) main::idx#3 (byte) main::idx#4 
Successful SSA optimization Pass2AliasElimination
Alias (byte) main::i#2 = (byte) main::i#5 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$2 [4] if((byte) 0!=*((const byte*) MESSAGE + (byte) main::i#2)) goto main::@2
Simple Condition (bool~) main::$1 [8] if(*((const byte*) MESSAGE + (byte) main::i#2)!=(byte) ' ') goto main::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [8] if(*((const byte*) MESSAGE + (byte) main::i#2)==(byte) ' ') goto main::@5
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant (const byte) main::idx#0 = 0
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte) main::idx#0
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte) 0
Constant inlined main::idx#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@11(between main::@2 and main::@5)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 3 initial phi equivalence classes
Coalesced [12] main::idx#8 ← main::idx#1
Coalesced [15] main::i#6 ← main::i#1
Coalesced [16] main::idx#6 ← main::idx#5
Coalesced (already) [17] main::idx#7 ← main::idx#2
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@11
Renumbering block main::@4 to main::@3
Renumbering block main::@5 to main::@4
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [5] (byte) main::idx#2 ← phi( main/(byte) 0 main::@4/(byte) main::idx#5 )
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@4/(byte) main::i#1 )
  [6] if((byte) 0!=*((const byte*) MESSAGE + (byte) main::i#2)) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [8] if(*((const byte*) MESSAGE + (byte) main::i#2)==(byte) ' ') goto main::@4
  to:main::@3
main::@3: scope:[main]  from main::@2
  [9] *((const byte*) SCREEN + (byte) main::idx#2) ← *((const byte*) MESSAGE + (byte) main::i#2)
  [10] (byte) main::idx#1 ← ++ (byte) main::idx#2
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@3
  [11] (byte) main::idx#5 ← phi( main::@2/(byte) main::idx#2 main::@3/(byte) main::idx#1 )
  [12] (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::i
(byte) main::i#1 22.0
(byte) main::i#2 9.166666666666666
(byte) main::idx
(byte) main::idx#1 22.0
(byte) main::idx#2 11.0
(byte) main::idx#5 16.5

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::idx#2 main::idx#5 main::idx#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::idx#2 main::idx#5 main::idx#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::idx#2 main::idx#5 main::idx#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests continue statement in a simple for()-loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label idx = 3
    .label i = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::idx#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    // [6] if((byte) 0!=*((const byte*) MESSAGE + (byte) main::i#2)) goto main::@2 -- vbuc1_neq_pbuc2_derefidx_vbuz1_then_la1 
    lda #0
    ldy.z i
    cmp MESSAGE,y
    bne __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
    // main::@2
  __b2:
    // [8] if(*((const byte*) MESSAGE + (byte) main::i#2)==(byte) ' ') goto main::@4 -- pbuc1_derefidx_vbuz1_eq_vbuc2_then_la1 
    ldy.z i
    lda MESSAGE,y
    cmp #' '
    beq __b4_from___b2
    jmp __b3
    // main::@3
  __b3:
    // [9] *((const byte*) SCREEN + (byte) main::idx#2) ← *((const byte*) MESSAGE + (byte) main::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    ldy.z i
    lda MESSAGE,y
    ldy.z idx
    sta SCREEN,y
    // [10] (byte) main::idx#1 ← ++ (byte) main::idx#2 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [11] phi from main::@2 main::@3 to main::@4 [phi:main::@2/main::@3->main::@4]
  __b4_from___b2:
  __b4_from___b3:
    // [11] phi (byte) main::idx#5 = (byte) main::idx#2 [phi:main::@2/main::@3->main::@4#0] -- register_copy 
    jmp __b4
    // main::@4
  __b4:
    // [12] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [5] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [5] phi (byte) main::idx#2 = (byte) main::idx#5 [phi:main::@4->main::@1#0] -- register_copy 
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@4->main::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
  MESSAGE: .text "hello brave new world!"
  .byte 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] if((byte) 0!=*((const byte*) MESSAGE + (byte) main::i#2)) goto main::@2 [ main::i#2 main::idx#2 ] ( main:2 [ main::i#2 main::idx#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::idx#2 main::idx#5 main::idx#1 ]
Statement [8] if(*((const byte*) MESSAGE + (byte) main::i#2)==(byte) ' ') goto main::@4 [ main::i#2 main::idx#2 ] ( main:2 [ main::i#2 main::idx#2 ] ) always clobbers reg byte a 
Statement [9] *((const byte*) SCREEN + (byte) main::idx#2) ← *((const byte*) MESSAGE + (byte) main::i#2) [ main::i#2 main::idx#2 ] ( main:2 [ main::i#2 main::idx#2 ] ) always clobbers reg byte a 
Statement [6] if((byte) 0!=*((const byte*) MESSAGE + (byte) main::i#2)) goto main::@2 [ main::i#2 main::idx#2 ] ( main:2 [ main::i#2 main::idx#2 ] ) always clobbers reg byte a 
Statement [8] if(*((const byte*) MESSAGE + (byte) main::i#2)==(byte) ' ') goto main::@4 [ main::i#2 main::idx#2 ] ( main:2 [ main::i#2 main::idx#2 ] ) always clobbers reg byte a 
Statement [9] *((const byte*) SCREEN + (byte) main::idx#2) ← *((const byte*) MESSAGE + (byte) main::i#2) [ main::i#2 main::idx#2 ] ( main:2 [ main::i#2 main::idx#2 ] ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::idx#2 main::idx#5 main::idx#1 ] : zp[1]:3 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 49.5: zp[1]:3 [ main::idx#2 main::idx#5 main::idx#1 ] 31.17: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 523 combination reg byte y [ main::idx#2 main::idx#5 main::idx#1 ] reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 523 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests continue statement in a simple for()-loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::idx#2 = (byte) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // main::@1
  __b1:
    // [6] if((byte) 0!=*((const byte*) MESSAGE + (byte) main::i#2)) goto main::@2 -- vbuc1_neq_pbuc2_derefidx_vbuxx_then_la1 
    lda MESSAGE,x
    cmp #0
    bne __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
    // main::@2
  __b2:
    // [8] if(*((const byte*) MESSAGE + (byte) main::i#2)==(byte) ' ') goto main::@4 -- pbuc1_derefidx_vbuxx_eq_vbuc2_then_la1 
    lda MESSAGE,x
    cmp #' '
    beq __b4_from___b2
    jmp __b3
    // main::@3
  __b3:
    // [9] *((const byte*) SCREEN + (byte) main::idx#2) ← *((const byte*) MESSAGE + (byte) main::i#2) -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuxx 
    lda MESSAGE,x
    sta SCREEN,y
    // [10] (byte) main::idx#1 ← ++ (byte) main::idx#2 -- vbuyy=_inc_vbuyy 
    iny
    // [11] phi from main::@2 main::@3 to main::@4 [phi:main::@2/main::@3->main::@4]
  __b4_from___b2:
  __b4_from___b3:
    // [11] phi (byte) main::idx#5 = (byte) main::idx#2 [phi:main::@2/main::@3->main::@4#0] -- register_copy 
    jmp __b4
    // main::@4
  __b4:
    // [12] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [5] phi (byte) main::idx#2 = (byte) main::idx#5 [phi:main::@4->main::@1#0] -- register_copy 
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@4->main::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
  MESSAGE: .text "hello brave new world!"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b4
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __bbegin with __b1
Replacing label __b4_from___b2 with __b4
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b4_from___b2:
Removing instruction __b4_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b1_from___b4:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte*) MESSAGE = (string) "hello brave new world!"
(const byte*) SCREEN = (byte*) 1024
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 22.0
(byte) main::i#2 reg byte x 9.166666666666666
(byte) main::idx
(byte) main::idx#1 reg byte y 22.0
(byte) main::idx#2 reg byte y 11.0
(byte) main::idx#5 reg byte y 16.5

reg byte x [ main::i#2 main::i#1 ]
reg byte y [ main::idx#2 main::idx#5 main::idx#1 ]


FINAL ASSEMBLER
Score: 391

  // File Comments
// Tests continue statement in a simple for()-loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::idx#2 = (byte) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // main::@1
  __b1:
    // for( char i =0; MESSAGE[i]; i++)
    // [6] if((byte) 0!=*((const byte*) MESSAGE + (byte) main::i#2)) goto main::@2 -- vbuc1_neq_pbuc2_derefidx_vbuxx_then_la1 
    lda MESSAGE,x
    cmp #0
    bne __b2
    // main::@return
    // }
    // [7] return 
    rts
    // main::@2
  __b2:
    // if(MESSAGE[i]==' ')
    // [8] if(*((const byte*) MESSAGE + (byte) main::i#2)==(byte) ' ') goto main::@4 -- pbuc1_derefidx_vbuxx_eq_vbuc2_then_la1 
    lda MESSAGE,x
    cmp #' '
    beq __b4
    // main::@3
    // SCREEN[idx++] = MESSAGE[i]
    // [9] *((const byte*) SCREEN + (byte) main::idx#2) ← *((const byte*) MESSAGE + (byte) main::i#2) -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuxx 
    lda MESSAGE,x
    sta SCREEN,y
    // SCREEN[idx++] = MESSAGE[i];
    // [10] (byte) main::idx#1 ← ++ (byte) main::idx#2 -- vbuyy=_inc_vbuyy 
    iny
    // [11] phi from main::@2 main::@3 to main::@4 [phi:main::@2/main::@3->main::@4]
    // [11] phi (byte) main::idx#5 = (byte) main::idx#2 [phi:main::@2/main::@3->main::@4#0] -- register_copy 
    // main::@4
  __b4:
    // for( char i =0; MESSAGE[i]; i++)
    // [12] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [5] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [5] phi (byte) main::idx#2 = (byte) main::idx#5 [phi:main::@4->main::@1#0] -- register_copy 
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@4->main::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
  MESSAGE: .text "hello brave new world!"
  .byte 0

