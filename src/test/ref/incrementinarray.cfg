@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [6] (byte) main::i#2 ← phi( main/(byte) 0 main::@4/(byte) main::i#1 )
  [6] (byte*) print_line_cursor#19 ← phi( main/(byte*) 1024 main::@4/(byte*) print_line_cursor#1 )
  [6] (byte*) print_char_cursor#30 ← phi( main/(byte*) 1024 main::@4/(byte*) print_char_cursor#35 )
  [7] call print_str 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi()
  [9] call print_ln 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] *((const byte*) txt+(byte) 1) ← ++ *((const byte*) txt+(byte) 1)
  [11] (byte) main::i#1 ← ++ (byte) main::i#2
  [12] if((byte) main::i#1!=(byte) $b) goto main::@4
  to:main::@return
main::@return: scope:[main]  from main::@3
  [13] return 
  to:@return
main::@4: scope:[main]  from main::@3
  [14] (byte*) print_char_cursor#35 ← (byte*) print_line_cursor#1
  to:main::@1

(void()) print_ln()
print_ln: scope:[print_ln]  from main::@2
  [15] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [16] (byte*) print_line_cursor#9 ← phi( print_ln/(byte*) print_line_cursor#19 print_ln::@1/(byte*) print_line_cursor#1 )
  [17] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte) $28
  [18] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#15) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [19] return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from main::@1
  [20] phi()
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [21] (byte*) print_char_cursor#15 ← phi( print_str/(byte*) print_char_cursor#30 print_str::@3/(byte*) print_char_cursor#19 )
  [21] (byte*) print_str::str#2 ← phi( print_str/(const byte*) txt print_str::@3/(byte*) print_str::str#0 )
  [22] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [23] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [24] (byte) print_char::ch#0 ← *((byte*) print_str::str#2)
  [25] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [26] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2
  to:print_str::@1

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_str::@2
  [27] *((byte*) print_char_cursor#15) ← (byte) print_char::ch#0
  [28] (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#15
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [29] return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [30] phi()
  [31] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [32] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [33] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [34] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [35] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [36] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [37] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [38] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1
