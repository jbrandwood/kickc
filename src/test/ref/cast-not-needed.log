Inlined call call __init
Eliminating unused variable with no statement main::$0

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  main::sprite_ptr#0 = SCREEN + $378
  main::$1 = sprite / $40
  main::sprite_ptr#0[0] = (char)main::$1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
__constant char *SCREEN = (char *)$4400
void __start()
void main()
char *main::$1
char *main::sprite_ptr
char *main::sprite_ptr#0
__constant char *sprite = (char *)$5000

Adding number conversion cast (unumber) $378 in main::sprite_ptr#0 = SCREEN + $378
Adding number conversion cast (unumber) $40 in main::$1 = sprite / $40
Adding number conversion cast (unumber) 0 in main::sprite_ptr#0[0] = (char)main::$1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 20480
Simplifying constant pointer cast (char *) 17408
Simplifying constant integer cast $378
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (unsigned int) $378
Finalized unsigned number type (char) $40
Finalized unsigned number type (char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [0] main::sprite_ptr#0 = SCREEN + $378
Constant right-side identified [1] main::$1 = sprite / $40
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::sprite_ptr#0 = SCREEN+$378
Constant main::$1 = sprite/$40
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (char)main::$1 in [2] main::sprite_ptr#0[0] = (char)main::$1
Successful SSA optimization Pass2ConstantValues
Simplifying expression containing zero main::sprite_ptr#0 in [2] main::sprite_ptr#0[0] = (char)main::$1
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant inlined main::$1 = sprite/$40
Successful SSA optimization Pass2ConstantInlining
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *main::sprite_ptr#0 = (char)sprite/$40
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
char *main::sprite_ptr

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *main::sprite_ptr#0 = (char)sprite/$40 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 15 combination 
Uplifting [] best 15 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests a cast that is not needed
  // Upstart
  // Commodore 64 PRG executable file
.file [name="cast-not-needed.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label sprite = $5000
  .label SCREEN = $4400
.segment Code
  // main
main: {
    .label sprite_ptr = SCREEN+$378
    // [0] *main::sprite_ptr#0 = (char)sprite/$40 -- _deref_pbuc1=vbuc2 
    lda #$ff&sprite/$40
    sta sprite_ptr
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant char *SCREEN = (char *) 17408
void main()
char *main::sprite_ptr
__constant char *main::sprite_ptr#0 = SCREEN+$378 // sprite_ptr
__constant char *sprite = (char *) 20480



FINAL ASSEMBLER
Score: 12

  // File Comments
// Tests a cast that is not needed
  // Upstart
  // Commodore 64 PRG executable file
.file [name="cast-not-needed.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label sprite = $5000
  .label SCREEN = $4400
.segment Code
  // main
main: {
    .label sprite_ptr = SCREEN+$378
    // sprite_ptr[0] = (byte)(sprite/$40)
    // [0] *main::sprite_ptr#0 = (char)sprite/$40 -- _deref_pbuc1=vbuc2 
    lda #$ff&sprite/$40
    sta sprite_ptr
    // main::@return
    // }
    // [1] return 
    rts
}
  // File Data

