constant byte* const BG_COLOR = (byte*) 53281
constant byte* const BG_COLOR1 = (byte*) 53282
constant byte* const BG_COLOR2 = (byte*) 53283
constant byte* const BG_COLOR3 = (byte*) 53284
constant const byte BLACK = 0
constant const byte BLUE = 6
constant byte* const BORDER_COLOR = (byte*) 53280
constant struct MOS6526_CIA* const CIA1 = (struct MOS6526_CIA*) 56320
constant struct MOS6526_CIA* const CIA2 = (struct MOS6526_CIA*) 56576
constant byte* const COLS = (byte*) 55296
constant const byte DTV_BORDER_OFF = 2
constant const byte DTV_CHUNKY = $40
constant const byte DTV_COLORRAM_OFF = $10
constant const dword DTV_COLOR_BANK_DEFAULT = $1d800
constant byte* const DTV_COLOR_BANK_HI = (byte*) 53303
constant byte* const DTV_COLOR_BANK_LO = (byte*) 53302
constant byte* const DTV_CONTROL = (byte*) 53308
constant byte* const DTV_FEATURE = (byte*) 53311
constant const byte DTV_FEATURE_ENABLE = 1
constant byte* const DTV_GRAPHICS_VIC_BANK = (byte*) 53309
constant const byte DTV_HIGHCOLOR = 4
constant const byte DTV_LINEAR = 1
constant const byte DTV_OVERSCAN = 8
constant byte* const DTV_PALETTE = (byte*) 53760
constant byte* DTV_PALETTE_DEFAULT[$10]  = { 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a }
constant byte* const DTV_PLANEA_MODULO_HI = (byte*) 53305
constant byte* const DTV_PLANEA_MODULO_LO = (byte*) 53304
constant byte* const DTV_PLANEA_START_HI = (byte*) 53317
constant byte* const DTV_PLANEA_START_LO = (byte*) 53306
constant byte* const DTV_PLANEA_START_MI = (byte*) 53307
constant byte* const DTV_PLANEA_STEP = (byte*) 53318
constant byte* const DTV_PLANEB_MODULO_HI = (byte*) 53320
constant byte* const DTV_PLANEB_MODULO_LO = (byte*) 53319
constant byte* const DTV_PLANEB_START_HI = (byte*) 53323
constant byte* const DTV_PLANEB_START_LO = (byte*) 53321
constant byte* const DTV_PLANEB_START_MI = (byte*) 53322
constant byte* const DTV_PLANEB_STEP = (byte*) 53324
constant const byte GREEN = 5
constant const byte KEY_0 = $23
constant const byte KEY_1 = $38
constant const byte KEY_2 = $3b
constant const byte KEY_3 = 8
constant const byte KEY_4 = $b
constant const byte KEY_6 = $13
constant const byte KEY_7 = $18
constant const byte KEY_8 = $1b
constant const byte KEY_A = $a
constant const byte KEY_B = $1c
constant const byte KEY_C = $14
constant const byte KEY_D = $12
constant const byte KEY_E = $e
constant const byte KEY_H = $1d
constant const byte KEY_L = $2a
constant const byte KEY_O = $26
constant const byte KEY_SPACE = $3c
constant const byte KEY_U = $1e
constant const byte LIGHT_GREEN = $d
constant byte* MENU_TEXT[]  = "C64DTV Graphics Modes            CCLHBME@                                 OHIIMCC@                                 LUNCMMM@----------------------------------------@1. Standard Char             (V) 0000000@2. Extended Color Char       (V) 0000001@3. Multicolor Char           (V) 0000010@4. Standard Bitmap           (V) 0000100@5. Multicolor Bitmap         (V) 0000110@6. High Color Standard Char  (H) 0001000@7. High Extended Color Char  (H) 0001001@8. High Multicolor Char      (H) 0001010@9. High Multicolor Bitmap    (H) 0001110@a. Sixs Fred 2               (D) 0010111@b. Two Plane Bitmap          (D) 0011101@c. Sixs Fred (2 Plane MC BM) (D) 0011111@d. 8bpp Pixel Cell           (D) 0111011@e. Chunky 8bpp Bitmap        (D) 1111011@----------------------------------------@    (V) vicII (H) vicII+hicol (D) c64dtv@"
constant byte OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
constant byte OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
constant byte* const PROCPORT = (byte*) 1
constant byte* const PROCPORT_DDR = (byte*) 0
constant const byte PROCPORT_DDR_MEMORY_MASK = 7
constant const byte PROCPORT_RAM_CHARROM = 1
constant const byte PROCPORT_RAM_IO = 5
constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
constant byte* const RASTER = (byte*) 53266
constant const byte VICII_BMM = $20
constant byte* const VICII_CONTROL1 = (byte*) 53265
constant byte* const VICII_CONTROL2 = (byte*) 53270
constant const byte VICII_CSEL = 8
constant const byte VICII_DEN = $10
constant const byte VICII_ECM = $40
constant const byte VICII_MCM = $10
constant byte* const VICII_MEMORY = (byte*) 53272
constant const byte VICII_RSEL = 8
constant const byte WHITE = 1
word abs_u16(word abs_u16::w)
byte~ abs_u16::$0 reg byte a 2.0000002E7
byte~ abs_u16::$1 reg byte a 2.0000002E7
word abs_u16::return
word abs_u16::return#0 return zp[2]:15 2000002.0
word abs_u16::return#1 return zp[2]:15 2000002.0
word abs_u16::return#2 return zp[2]:15 2.0000002E7
word abs_u16::return#4 return zp[2]:15 5500001.0
word abs_u16::w
word abs_u16::w#0 w zp[2]:15 2000002.0
word abs_u16::w#1 w zp[2]:15 2000002.0
word abs_u16::w#2 w zp[2]:15 8000001.25
void bitmap_clear(byte bitmap_clear::bgcol , byte bitmap_clear::fgcol)
byte bitmap_clear::bgcol
byte bitmap_clear::col
constant byte bitmap_clear::col#0 col = WHITE*$10
byte bitmap_clear::fgcol
byte* bitmap_gfx
byte* bitmap_gfx#14 bitmap_gfx zp[2]:4 10.485981308411215
byte* bitmap_gfx#15 bitmap_gfx zp[2]:4 374.0
void bitmap_init(byte* bitmap_init::gfx , byte* bitmap_init::screen)
byte~ bitmap_init::$4 reg byte a 2000002.0
byte~ bitmap_init::$5 reg byte a 2000002.0
byte~ bitmap_init::$6 reg byte a 2000002.0
byte~ bitmap_init::$7 zp[1]:28 500000.5
byte bitmap_init::bits
byte bitmap_init::bits#1 reg byte a 1000001.0
byte bitmap_init::bits#3 reg byte a 1500001.5
byte bitmap_init::bits#4 reg byte a 666667.3333333334
byte* bitmap_init::gfx
byte* bitmap_init::screen
byte bitmap_init::x
byte bitmap_init::x#1 reg byte x 1500001.5
byte bitmap_init::x#2 reg byte x 500000.5
byte bitmap_init::y
byte bitmap_init::y#1 reg byte x 1500001.5
byte bitmap_init::y#2 reg byte x 500000.5
byte* bitmap_init::yoffs
byte* bitmap_init::yoffs#1 yoffs zp[2]:11 2000002.0
byte* bitmap_init::yoffs#2 yoffs zp[2]:11 625000.625
byte* bitmap_init::yoffs#4 yoffs zp[2]:11 1000001.0
void bitmap_line(word bitmap_line::x1 , word bitmap_line::y1 , word bitmap_line::x2 , word bitmap_line::y2)
word bitmap_line::dx
word bitmap_line::dx#0 dx zp[2]:29 7.5100000175E7
word bitmap_line::dy
word bitmap_line::dy#0 dy zp[2]:15 8.344444463888888E7
word bitmap_line::e
word bitmap_line::e#0 e zp[2]:26 2000002.0
word bitmap_line::e#1 e zp[2]:26 1.3333333346666667E9
word bitmap_line::e#2 e zp[2]:26 2.000000002E9
word bitmap_line::e#3 e zp[2]:26 4.0020000059999996E8
word bitmap_line::e#6 e zp[2]:26 1.5000000015E9
word bitmap_line::e1
word bitmap_line::e1#0 e1 zp[2]:13 2000002.0
word bitmap_line::e1#1 e1 zp[2]:13 1.3333333346666667E9
word bitmap_line::e1#2 e1 zp[2]:13 2.000000002E9
word bitmap_line::e1#3 e1 zp[2]:13 4.0020000059999996E8
word bitmap_line::e1#6 e1 zp[2]:13 1.5000000015E9
word bitmap_line::sx
word bitmap_line::sx#0 sx zp[2]:31 6.67000001E7
word bitmap_line::sy
word bitmap_line::sy#0 sy zp[2]:17 7.696153857692307E7
word bitmap_line::x
word bitmap_line::x#1 x zp[2]:9 1.000000001E9
word bitmap_line::x#12 x zp[2]:9 2.000000002E9
word bitmap_line::x#13 x zp[2]:9 5.715714292857143E8
word bitmap_line::x#15 x zp[2]:9 5.71428572E8
word bitmap_line::x#6 x zp[2]:9 2.001000003E9
word bitmap_line::x#7 x zp[2]:9 7.50250001E8
word bitmap_line::x1
word bitmap_line::x1#0 x1 zp[2]:9 204000.24000000002
word bitmap_line::x2
word bitmap_line::x2#0 x2 zp[2]:19 3.0366666787878785E7
word bitmap_line::y
word bitmap_line::y#1 y zp[2]:11 5.71428572E8
word bitmap_line::y#13 y zp[2]:11 2.000000002E9
word bitmap_line::y#15 y zp[2]:11 4.2871428628571427E8
word bitmap_line::y#2 y zp[2]:11 1.000000001E9
word bitmap_line::y#4 y zp[2]:11 5.0025000075E8
word bitmap_line::y#7 y zp[2]:11 1.000000001E9
word bitmap_line::y1
word bitmap_line::y1#0 y1 zp[2]:11 164000.2
word bitmap_line::y2
word bitmap_line::y2#0 y2 zp[2]:21 3.1315625125E7
void bitmap_plot(word bitmap_plot::x , byte bitmap_plot::y)
word~ bitmap_plot::$1 zp[2]:35 2.0000000002E10
byte~ bitmap_plot::$2 reg byte x 2.0000000002E10
byte* bitmap_plot::plotter
word bitmap_plot::plotter#0 plotter zp[2]:33 5.0000000005E9
byte* bitmap_plot::plotter#1 plotter zp[2]:33 1.50000000015E10
word bitmap_plot::x
word bitmap_plot::x#0 x zp[2]:9 1000001.0
word bitmap_plot::x#1 x zp[2]:9 1.000000001E9
word bitmap_plot::x#2 x zp[2]:9 1000001.0
word bitmap_plot::x#3 x zp[2]:9 1.000000001E9
word bitmap_plot::x#4 x zp[2]:9 5.5005000015E9
byte bitmap_plot::y
byte bitmap_plot::y#0 reg byte x 2000002.0
byte bitmap_plot::y#1 reg byte x 2.000000002E9
byte bitmap_plot::y#2 reg byte x 2000002.0
byte bitmap_plot::y#3 reg byte x 2.000000002E9
byte bitmap_plot::y#4 reg byte x 2.2002000006E10
constant const byte* bitmap_plot_bit[$100]  = { fill( $100, 0) }
constant const byte* bitmap_plot_yhi[$100]  = { fill( $100, 0) }
constant const byte* bitmap_plot_ylo[$100]  = { fill( $100, 0) }
byte* bitmap_screen
byte* bitmap_screen#14 bitmap_screen zp[2]:11 10.485981308411215
byte* bitmap_screen#15 bitmap_screen zp[2]:11 374.0
void dtvSetCpuBankSegment1(byte dtvSetCpuBankSegment1::cpuBankIdx)
constant byte* dtvSetCpuBankSegment1::cpuBank = (byte*) 255
byte dtvSetCpuBankSegment1::cpuBankIdx
byte dtvSetCpuBankSegment1::cpuBankIdx#1 reg byte a 2000002.0
byte dtvSetCpuBankSegment1::cpuBankIdx#3 reg byte a 1.1000002E7
byte dtv_control
byte dtv_control#116 reg byte x 804117.7647058824
byte dtv_control#146 reg byte x 10001.0
byte dtv_control#16 reg byte x 666667.3333333334
byte keyboard_key_pressed(byte keyboard_key_pressed::key)
byte~ keyboard_key_pressed::$2 reg byte a 2.00000002E8
byte keyboard_key_pressed::colidx
byte keyboard_key_pressed::colidx#0 colidx zp[1]:28 3.3333333666666668E7
byte keyboard_key_pressed::key
byte keyboard_key_pressed::key#20 reg byte y 1.00000001E8
byte keyboard_key_pressed::return
byte keyboard_key_pressed::return#0 reg byte a 8187273.681818182
byte keyboard_key_pressed::return#10 reg byte a 20002.0
byte keyboard_key_pressed::return#11 reg byte a 20002.0
byte keyboard_key_pressed::return#12 reg byte a 20002.0
byte keyboard_key_pressed::return#13 reg byte a 20002.0
byte keyboard_key_pressed::return#14 reg byte a 2.0000002E7
byte keyboard_key_pressed::return#15 reg byte a 2.0000002E7
byte keyboard_key_pressed::return#16 reg byte a 2.0000002E7
byte keyboard_key_pressed::return#17 reg byte a 2.0000002E7
byte keyboard_key_pressed::return#18 reg byte a 2.0000002E7
byte keyboard_key_pressed::return#19 reg byte a 2.0000002E7
byte keyboard_key_pressed::return#2 reg byte a 20002.0
byte keyboard_key_pressed::return#20 reg byte a 2.0000002E7
byte keyboard_key_pressed::return#21 reg byte a 2.0000002E7
byte keyboard_key_pressed::return#24 reg byte a 20002.0
byte keyboard_key_pressed::return#25 reg byte a 20002.0
byte keyboard_key_pressed::return#26 reg byte a 20002.0
byte keyboard_key_pressed::return#27 reg byte a 20002.0
byte keyboard_key_pressed::return#28 reg byte a 20002.0
byte keyboard_key_pressed::return#29 reg byte a 20002.0
byte keyboard_key_pressed::return#30 reg byte a 20002.0
byte keyboard_key_pressed::rowidx
byte keyboard_key_pressed::rowidx#0 reg byte a 2.00000002E8
constant byte* keyboard_matrix_col_bitmask[8]  = { 1, 2, 4, 8, $10, $20, $40, $80 }
byte keyboard_matrix_read(byte keyboard_matrix_read::rowid)
byte keyboard_matrix_read::return
byte keyboard_matrix_read::return#0 reg byte a 3.666666673333334E8
byte keyboard_matrix_read::return#2 reg byte a 2.00000002E8
byte keyboard_matrix_read::row_pressed_bits
byte keyboard_matrix_read::rowid
byte keyboard_matrix_read::rowid#0 reg byte y 1.100000002E9
constant byte* keyboard_matrix_row_bitmask[8]  = { $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f }
void main()
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#5 reg byte x 1250000.125
byte* memset::dst
byte* memset::dst#1 dst zp[2]:9 2.0000002E7
byte* memset::dst#2 dst zp[2]:9 1.3366668333333332E7
byte* memset::dst#4 dst zp[2]:9 200002.0
byte* memset::end
byte* memset::end#0 end zp[2]:15 1683333.6666666665
word memset::num
word memset::num#3 num zp[2]:15 100001.0
void* memset::return
void* memset::str
void* memset::str#4 str zp[2]:9
void menu()
byte~ menu::$13 reg byte a 20002.0
byte~ menu::$17 reg byte a 20002.0
byte~ menu::$21 reg byte a 20002.0
byte~ menu::$25 reg byte a 20002.0
byte~ menu::$29 reg byte a 20002.0
byte~ menu::$33 reg byte a 20002.0
byte~ menu::$37 reg byte a 20002.0
byte~ menu::$41 reg byte a 20002.0
byte~ menu::$45 reg byte a 20002.0
byte~ menu::$49 reg byte a 20002.0
byte~ menu::$5 reg byte a 20002.0
byte~ menu::$9 reg byte a 20002.0
constant byte* const menu::CHARSET = (byte*) 38912
constant byte* const menu::SCREEN = (byte*) 32768
byte* menu::c
byte* menu::c#1 c zp[2]:2 20002.0
byte* menu::c#2 c zp[2]:2 13334.666666666666
byte menu::i
byte menu::i#1 reg byte x 15001.5
byte menu::i#2 reg byte x 20002.0
void mode_8bppchunkybmm()
word~ mode_8bppchunkybmm::$7 zp[2]:26 1000001.0
constant const dword mode_8bppchunkybmm::PLANEB = $20000
byte mode_8bppchunkybmm::c
byte mode_8bppchunkybmm::c#0 reg byte a 2000002.0
byte* mode_8bppchunkybmm::gfxb
byte* mode_8bppchunkybmm::gfxb#1 gfxb zp[2]:15 420000.60000000003
byte* mode_8bppchunkybmm::gfxb#3 gfxb zp[2]:15 1550002.0
byte* mode_8bppchunkybmm::gfxb#4 gfxb zp[2]:15 750000.75
byte* mode_8bppchunkybmm::gfxb#5 gfxb zp[2]:15 200002.0
byte mode_8bppchunkybmm::gfxbCpuBank
byte mode_8bppchunkybmm::gfxbCpuBank#2 reg byte x 2000002.0
byte mode_8bppchunkybmm::gfxbCpuBank#4 reg byte x 1025001.25
byte mode_8bppchunkybmm::gfxbCpuBank#7 reg byte x 200002.0
byte mode_8bppchunkybmm::gfxbCpuBank#8 reg byte x 344444.8888888889
byte mode_8bppchunkybmm::i
byte mode_8bppchunkybmm::i#1 reg byte x 150001.5
byte mode_8bppchunkybmm::i#2 reg byte x 200002.0
word mode_8bppchunkybmm::x
word mode_8bppchunkybmm::x#1 x zp[2]:13 1500001.5
word mode_8bppchunkybmm::x#2 x zp[2]:13 300000.30000000005
byte mode_8bppchunkybmm::y
byte mode_8bppchunkybmm::y#1 y zp[1]:23 150001.5
byte mode_8bppchunkybmm::y#6 y zp[1]:23 92307.92307692306
void mode_8bpppixelcell()
byte~ mode_8bpppixelcell::$2 reg byte a 2000002.0
byte~ mode_8bpppixelcell::$3 zp[1]:28 1000001.0
byte~ mode_8bpppixelcell::$4 reg byte a 2000002.0
byte~ mode_8bpppixelcell::$5 reg byte a 2000002.0
byte~ mode_8bpppixelcell::$8 reg byte a 2.0000002E7
constant byte* mode_8bpppixelcell::CHARGEN = (byte*) 53248
constant byte* const mode_8bpppixelcell::PLANEA = (byte*) 15360
constant byte* const mode_8bpppixelcell::PLANEB = (byte*) 16384
byte mode_8bpppixelcell::ax
byte mode_8bpppixelcell::ax#1 reg byte x 1500001.5
byte mode_8bpppixelcell::ax#2 reg byte x 428571.85714285716
byte mode_8bpppixelcell::ay
byte mode_8bpppixelcell::ay#1 ay zp[1]:6 150001.5
byte mode_8bpppixelcell::ay#4 ay zp[1]:6 120000.30000000002
byte mode_8bpppixelcell::bits
byte mode_8bpppixelcell::bits#0 bits zp[1]:23 1000001.0
byte mode_8bpppixelcell::bits#1 bits zp[1]:23 5000000.5
byte mode_8bpppixelcell::bits#2 bits zp[1]:23 4428572.0
byte mode_8bpppixelcell::c
byte mode_8bpppixelcell::c#2 reg byte a 2.0000002E7
byte mode_8bpppixelcell::c#3 reg byte a 2.0000002E7
byte mode_8bpppixelcell::ch
byte mode_8bpppixelcell::ch#1 ch zp[1]:7 150001.5
byte mode_8bpppixelcell::ch#8 ch zp[1]:7 11764.823529411764
byte* mode_8bpppixelcell::chargen
byte* mode_8bpppixelcell::chargen#1 chargen zp[2]:15 131250.1875
byte* mode_8bpppixelcell::chargen#2 chargen zp[2]:15 1550002.0
byte* mode_8bpppixelcell::chargen#4 chargen zp[2]:15 200002.0
byte mode_8bpppixelcell::col
byte mode_8bpppixelcell::col#1 col zp[1]:24 3014286.2857142854
byte mode_8bpppixelcell::col#2 col zp[1]:24 3875000.5
byte mode_8bpppixelcell::col#5 col zp[1]:24 700001.0
byte mode_8bpppixelcell::col#7 col zp[1]:24 200002.0
byte mode_8bpppixelcell::cp
byte mode_8bpppixelcell::cp#1 reg byte x 1.50000015E7
byte mode_8bpppixelcell::cp#2 reg byte x 2222222.4444444445
byte mode_8bpppixelcell::cr
byte mode_8bpppixelcell::cr#1 cr zp[1]:8 1500001.5
byte mode_8bpppixelcell::cr#6 cr zp[1]:8 142857.2857142857
byte* mode_8bpppixelcell::gfxa
byte* mode_8bpppixelcell::gfxa#1 gfxa zp[2]:9 420000.60000000003
byte* mode_8bpppixelcell::gfxa#2 gfxa zp[2]:9 516667.3333333334
byte* mode_8bpppixelcell::gfxa#3 gfxa zp[2]:9 200002.0
byte* mode_8bpppixelcell::gfxb
byte* mode_8bpppixelcell::gfxb#1 gfxb zp[2]:13 2344444.888888889
byte* mode_8bpppixelcell::gfxb#2 gfxb zp[2]:13 5166667.333333333
byte* mode_8bpppixelcell::gfxb#5 gfxb zp[2]:13 700001.0
byte* mode_8bpppixelcell::gfxb#7 gfxb zp[2]:13 200002.0
byte mode_8bpppixelcell::i
byte mode_8bpppixelcell::i#1 reg byte x 150001.5
byte mode_8bpppixelcell::i#2 reg byte x 200002.0
void mode_ctrl()
byte~ mode_ctrl::$1 reg byte a 2.0000002E7
byte~ mode_ctrl::$12 reg byte a 2.0000002E7
byte~ mode_ctrl::$16 reg byte a 2.0000002E7
byte~ mode_ctrl::$20 reg byte a 2.0000002E7
byte~ mode_ctrl::$24 reg byte a 2.0000002E7
byte~ mode_ctrl::$28 reg byte a 2.0000002E7
byte~ mode_ctrl::$4 reg byte a 2.0000002E7
byte~ mode_ctrl::$8 reg byte a 2.0000002E7
byte mode_ctrl::ctrl
byte mode_ctrl::ctrl#0 ctrl zp[1]:25 6000000.6
byte mode_ctrl::ctrl#1 ctrl zp[1]:25 2.0000002E7
byte mode_ctrl::ctrl#10 ctrl zp[1]:25 8000000.8
byte mode_ctrl::ctrl#11 ctrl zp[1]:25 8000000.8
byte mode_ctrl::ctrl#12 ctrl zp[1]:25 8000000.8
byte mode_ctrl::ctrl#13 ctrl zp[1]:25 8000000.8
byte mode_ctrl::ctrl#14 ctrl zp[1]:25 5750001.25
byte mode_ctrl::ctrl#17 ctrl zp[1]:25 8000000.8
byte mode_ctrl::ctrl#2 ctrl zp[1]:25 2.0000002E7
byte mode_ctrl::ctrl#22 ctrl zp[1]:25 5000000.5
byte mode_ctrl::ctrl#3 ctrl zp[1]:25 2.0000002E7
byte mode_ctrl::ctrl#4 ctrl zp[1]:25 2.0000002E7
byte mode_ctrl::ctrl#5 ctrl zp[1]:25 2.0000002E7
byte mode_ctrl::ctrl#6 ctrl zp[1]:25 2.0000002E7
void mode_ecmchar()
byte~ mode_ecmchar::$2 reg byte a 2000002.0
byte~ mode_ecmchar::$3 reg byte a 2000002.0
byte~ mode_ecmchar::$4 reg byte a 2000002.0
byte~ mode_ecmchar::$5 zp[1]:25 1000001.0
byte~ mode_ecmchar::$6 reg byte a 2000002.0
byte~ mode_ecmchar::$7 reg byte a 2000002.0
constant byte* const mode_ecmchar::CHARSET = (byte*) 36864
constant byte* const mode_ecmchar::COLORS = (byte*) 55296
constant byte* const mode_ecmchar::SCREEN = (byte*) 32768
byte* mode_ecmchar::ch
byte* mode_ecmchar::ch#1 ch zp[2]:13 420000.60000000003
byte* mode_ecmchar::ch#2 ch zp[2]:13 310000.4
byte* mode_ecmchar::ch#3 ch zp[2]:13 200002.0
byte* mode_ecmchar::col
byte* mode_ecmchar::col#1 col zp[2]:15 190909.36363636365
byte* mode_ecmchar::col#2 col zp[2]:15 775001.0
byte* mode_ecmchar::col#3 col zp[2]:15 200002.0
byte mode_ecmchar::cx
byte mode_ecmchar::cx#1 reg byte x 1500001.5
byte mode_ecmchar::cx#2 reg byte x 363636.7272727273
byte mode_ecmchar::cy
byte mode_ecmchar::cy#1 cy zp[1]:6 150001.5
byte mode_ecmchar::cy#4 cy zp[1]:6 157143.14285714284
byte mode_ecmchar::i
byte mode_ecmchar::i#1 reg byte x 150001.5
byte mode_ecmchar::i#2 reg byte x 200002.0
void mode_hicolecmchar()
byte~ mode_hicolecmchar::$2 reg byte a 2000002.0
byte~ mode_hicolecmchar::$3 zp[1]:24 1000001.0
byte~ mode_hicolecmchar::$4 reg byte a 2000002.0
constant byte* const mode_hicolecmchar::CHARSET = (byte*) 36864
constant byte* const mode_hicolecmchar::COLORS = (byte*) 33792
constant byte* const mode_hicolecmchar::SCREEN = (byte*) 32768
byte* mode_hicolecmchar::ch
byte* mode_hicolecmchar::ch#1 ch zp[2]:15 420000.60000000003
byte* mode_hicolecmchar::ch#2 ch zp[2]:15 387500.5
byte* mode_hicolecmchar::ch#3 ch zp[2]:15 200002.0
byte* mode_hicolecmchar::col
byte* mode_hicolecmchar::col#1 col zp[2]:13 300000.4285714285
byte* mode_hicolecmchar::col#2 col zp[2]:13 516667.3333333334
byte* mode_hicolecmchar::col#3 col zp[2]:13 200002.0
byte mode_hicolecmchar::cx
byte mode_hicolecmchar::cx#1 reg byte x 1500001.5
byte mode_hicolecmchar::cx#2 reg byte x 333333.6666666666
byte mode_hicolecmchar::cy
byte mode_hicolecmchar::cy#1 cy zp[1]:7 150001.5
byte mode_hicolecmchar::cy#4 cy zp[1]:7 100000.25000000001
byte mode_hicolecmchar::i
byte mode_hicolecmchar::i#1 reg byte x 150001.5
byte mode_hicolecmchar::i#2 reg byte x 200002.0
byte mode_hicolecmchar::v
byte mode_hicolecmchar::v#0 reg byte a 1000001.0
void mode_hicolmcchar()
byte~ mode_hicolmcchar::$2 reg byte a 2000002.0
byte~ mode_hicolmcchar::$3 zp[1]:24 1000001.0
byte~ mode_hicolmcchar::$4 reg byte a 2000002.0
constant byte* const mode_hicolmcchar::CHARSET = (byte*) 36864
constant byte* const mode_hicolmcchar::COLORS = (byte*) 33792
constant byte* const mode_hicolmcchar::SCREEN = (byte*) 32768
byte* mode_hicolmcchar::ch
byte* mode_hicolmcchar::ch#1 ch zp[2]:13 420000.60000000003
byte* mode_hicolmcchar::ch#2 ch zp[2]:13 387500.5
byte* mode_hicolmcchar::ch#3 ch zp[2]:13 200002.0
byte* mode_hicolmcchar::col
byte* mode_hicolmcchar::col#1 col zp[2]:15 300000.4285714285
byte* mode_hicolmcchar::col#2 col zp[2]:15 516667.3333333334
byte* mode_hicolmcchar::col#3 col zp[2]:15 200002.0
byte mode_hicolmcchar::cx
byte mode_hicolmcchar::cx#1 reg byte x 1500001.5
byte mode_hicolmcchar::cx#2 reg byte x 333333.6666666666
byte mode_hicolmcchar::cy
byte mode_hicolmcchar::cy#1 cy zp[1]:7 150001.5
byte mode_hicolmcchar::cy#4 cy zp[1]:7 100000.25000000001
byte mode_hicolmcchar::i
byte mode_hicolmcchar::i#1 reg byte x 150001.5
byte mode_hicolmcchar::i#2 reg byte x 200002.0
byte mode_hicolmcchar::v
byte mode_hicolmcchar::v#0 reg byte a 1000001.0
void mode_hicolstdchar()
byte~ mode_hicolstdchar::$2 reg byte a 2000002.0
byte~ mode_hicolstdchar::$3 zp[1]:23 1000001.0
byte~ mode_hicolstdchar::$4 reg byte a 2000002.0
constant byte* const mode_hicolstdchar::CHARSET = (byte*) 36864
constant byte* const mode_hicolstdchar::COLORS = (byte*) 33792
constant byte* const mode_hicolstdchar::SCREEN = (byte*) 32768
byte* mode_hicolstdchar::ch
byte* mode_hicolstdchar::ch#1 ch zp[2]:13 420000.60000000003
byte* mode_hicolstdchar::ch#2 ch zp[2]:13 387500.5
byte* mode_hicolstdchar::ch#3 ch zp[2]:13 200002.0
byte* mode_hicolstdchar::col
byte* mode_hicolstdchar::col#1 col zp[2]:15 300000.4285714285
byte* mode_hicolstdchar::col#2 col zp[2]:15 516667.3333333334
byte* mode_hicolstdchar::col#3 col zp[2]:15 200002.0
byte mode_hicolstdchar::cx
byte mode_hicolstdchar::cx#1 reg byte x 1500001.5
byte mode_hicolstdchar::cx#2 reg byte x 333333.6666666666
byte mode_hicolstdchar::cy
byte mode_hicolstdchar::cy#1 cy zp[1]:7 150001.5
byte mode_hicolstdchar::cy#4 cy zp[1]:7 100000.25000000001
byte mode_hicolstdchar::i
byte mode_hicolstdchar::i#1 reg byte x 150001.5
byte mode_hicolstdchar::i#2 reg byte x 200002.0
byte mode_hicolstdchar::v
byte mode_hicolstdchar::v#0 reg byte a 1000001.0
void mode_mcchar()
byte~ mode_mcchar::$2 reg byte a 2000002.0
byte~ mode_mcchar::$3 reg byte a 2000002.0
byte~ mode_mcchar::$4 reg byte a 2000002.0
byte~ mode_mcchar::$5 zp[1]:28 1000001.0
byte~ mode_mcchar::$6 reg byte a 2000002.0
byte~ mode_mcchar::$7 reg byte a 2000002.0
constant byte* const mode_mcchar::CHARSET = (byte*) 36864
constant byte* const mode_mcchar::COLORS = (byte*) 55296
constant byte* const mode_mcchar::SCREEN = (byte*) 32768
byte* mode_mcchar::ch
byte* mode_mcchar::ch#1 ch zp[2]:15 420000.60000000003
byte* mode_mcchar::ch#2 ch zp[2]:15 310000.4
byte* mode_mcchar::ch#3 ch zp[2]:15 200002.0
byte* mode_mcchar::col
byte* mode_mcchar::col#1 col zp[2]:13 190909.36363636365
byte* mode_mcchar::col#2 col zp[2]:13 775001.0
byte* mode_mcchar::col#3 col zp[2]:13 200002.0
byte mode_mcchar::cx
byte mode_mcchar::cx#1 reg byte x 1500001.5
byte mode_mcchar::cx#2 reg byte x 363636.7272727273
byte mode_mcchar::cy
byte mode_mcchar::cy#1 cy zp[1]:6 150001.5
byte mode_mcchar::cy#4 cy zp[1]:6 157143.14285714284
byte mode_mcchar::i
byte mode_mcchar::i#1 reg byte x 150001.5
byte mode_mcchar::i#2 reg byte x 200002.0
void mode_sixsfred()
byte~ mode_sixsfred::$2 reg byte a 2000002.0
byte~ mode_sixsfred::$3 reg byte a 2000002.0
byte~ mode_sixsfred::$6 reg byte a 2000002.0
constant byte* const mode_sixsfred::COLORS = (byte*) 32768
constant byte* const mode_sixsfred::PLANEA = (byte*) 16384
constant byte* const mode_sixsfred::PLANEB = (byte*) 24576
byte mode_sixsfred::ax
byte mode_sixsfred::ax#1 reg byte x 1500001.5
byte mode_sixsfred::ax#2 reg byte x 400000.4
byte mode_sixsfred::ay
byte mode_sixsfred::ay#1 ay zp[1]:7 150001.5
byte mode_sixsfred::ay#4 ay zp[1]:7 150000.375
byte mode_sixsfred::bx
byte mode_sixsfred::bx#1 reg byte x 1500001.5
byte mode_sixsfred::bx#2 reg byte x 666667.3333333334
byte mode_sixsfred::by
byte mode_sixsfred::by#1 by zp[1]:8 150001.5
byte mode_sixsfred::by#4 by zp[1]:8 33333.666666666664
byte* mode_sixsfred::col
byte* mode_sixsfred::col#1 col zp[2]:13 420000.60000000003
byte* mode_sixsfred::col#2 col zp[2]:13 775001.0
byte* mode_sixsfred::col#3 col zp[2]:13 200002.0
byte mode_sixsfred::cx
byte mode_sixsfred::cx#1 reg byte x 1500001.5
byte mode_sixsfred::cx#2 reg byte x 600000.6000000001
byte mode_sixsfred::cy
byte mode_sixsfred::cy#1 cy zp[1]:6 150001.5
byte mode_sixsfred::cy#4 cy zp[1]:6 150000.375
byte* mode_sixsfred::gfxa
byte* mode_sixsfred::gfxa#1 gfxa zp[2]:9 420000.60000000003
byte* mode_sixsfred::gfxa#2 gfxa zp[2]:9 775001.0
byte* mode_sixsfred::gfxa#3 gfxa zp[2]:9 200002.0
byte* mode_sixsfred::gfxb
byte* mode_sixsfred::gfxb#1 gfxb zp[2]:15 420000.60000000003
byte* mode_sixsfred::gfxb#2 gfxb zp[2]:15 1550002.0
byte* mode_sixsfred::gfxb#3 gfxb zp[2]:15 200002.0
byte mode_sixsfred::i
byte mode_sixsfred::i#1 reg byte x 150001.5
byte mode_sixsfred::i#2 reg byte x 200002.0
byte mode_sixsfred::row
byte mode_sixsfred::row#0 reg byte a 2000002.0
constant byte* mode_sixsfred::row_bitmask[]  = { 0, $55, $aa, $ff }
void mode_sixsfred2()
byte~ mode_sixsfred2::$2 reg byte a 2000002.0
byte~ mode_sixsfred2::$3 zp[1]:25 1000001.0
byte~ mode_sixsfred2::$4 reg byte a 2000002.0
byte~ mode_sixsfred2::$5 reg byte a 2000002.0
byte~ mode_sixsfred2::$8 reg byte a 2000002.0
constant byte* const mode_sixsfred2::COLORS = (byte*) 32768
constant byte* const mode_sixsfred2::PLANEA = (byte*) 16384
constant byte* const mode_sixsfred2::PLANEB = (byte*) 24576
byte mode_sixsfred2::ax
byte mode_sixsfred2::ax#1 reg byte x 1500001.5
byte mode_sixsfred2::ax#2 reg byte x 400000.4
byte mode_sixsfred2::ay
byte mode_sixsfred2::ay#1 ay zp[1]:7 150001.5
byte mode_sixsfred2::ay#4 ay zp[1]:7 150000.375
byte mode_sixsfred2::bx
byte mode_sixsfred2::bx#1 reg byte x 1500001.5
byte mode_sixsfred2::bx#2 reg byte x 666667.3333333334
byte mode_sixsfred2::by
byte mode_sixsfred2::by#1 by zp[1]:8 150001.5
byte mode_sixsfred2::by#4 by zp[1]:8 33333.666666666664
byte* mode_sixsfred2::col
byte* mode_sixsfred2::col#1 col zp[2]:13 420000.60000000003
byte* mode_sixsfred2::col#2 col zp[2]:13 516667.3333333334
byte* mode_sixsfred2::col#3 col zp[2]:13 200002.0
byte mode_sixsfred2::cx
byte mode_sixsfred2::cx#1 reg byte x 1500001.5
byte mode_sixsfred2::cx#2 reg byte x 428571.85714285716
byte mode_sixsfred2::cy
byte mode_sixsfred2::cy#1 cy zp[1]:6 150001.5
byte mode_sixsfred2::cy#4 cy zp[1]:6 120000.30000000002
byte* mode_sixsfred2::gfxa
byte* mode_sixsfred2::gfxa#1 gfxa zp[2]:15 420000.60000000003
byte* mode_sixsfred2::gfxa#2 gfxa zp[2]:15 775001.0
byte* mode_sixsfred2::gfxa#3 gfxa zp[2]:15 200002.0
byte* mode_sixsfred2::gfxb
byte* mode_sixsfred2::gfxb#1 gfxb zp[2]:9 420000.60000000003
byte* mode_sixsfred2::gfxb#2 gfxb zp[2]:9 1550002.0
byte* mode_sixsfred2::gfxb#3 gfxb zp[2]:9 200002.0
byte mode_sixsfred2::i
byte mode_sixsfred2::i#1 reg byte x 150001.5
byte mode_sixsfred2::i#2 reg byte x 200002.0
byte mode_sixsfred2::row
byte mode_sixsfred2::row#0 reg byte a 2000002.0
constant byte* mode_sixsfred2::row_bitmask[]  = { 0, $55, $aa, $ff }
void mode_stdbitmap()
byte~ mode_stdbitmap::$4 reg byte a 2000002.0
byte~ mode_stdbitmap::$7 reg byte a 2000002.0
byte~ mode_stdbitmap::$8 reg byte a 2000002.0
constant byte* const mode_stdbitmap::BITMAP = (byte*) 24576
constant byte* const mode_stdbitmap::SCREEN = (byte*) 16384
byte* mode_stdbitmap::ch
byte* mode_stdbitmap::ch#1 ch zp[2]:4 420000.60000000003
byte* mode_stdbitmap::ch#2 ch zp[2]:4 442857.7142857142
byte* mode_stdbitmap::ch#3 ch zp[2]:4 200002.0
byte mode_stdbitmap::col
byte mode_stdbitmap::col#0 reg byte y 1500001.5
byte mode_stdbitmap::col2
byte mode_stdbitmap::col2#0 col2 zp[1]:23 1000001.0
byte mode_stdbitmap::cx
byte mode_stdbitmap::cx#1 reg byte x 1500001.5
byte mode_stdbitmap::cx#2 reg byte x 375000.375
byte mode_stdbitmap::cy
byte mode_stdbitmap::cy#1 cy zp[1]:6 150001.5
byte mode_stdbitmap::cy#4 cy zp[1]:6 109091.18181818182
byte mode_stdbitmap::i
byte mode_stdbitmap::i#1 reg byte x 150001.5
byte mode_stdbitmap::i#2 reg byte x 200002.0
byte mode_stdbitmap::l
byte mode_stdbitmap::l#1 l zp[1]:7 200002.0
byte mode_stdbitmap::l#2 l zp[1]:7 100001.0
constant byte mode_stdbitmap::lines_cnt = 9
constant byte* mode_stdbitmap::lines_x[]  = { 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80 }
constant byte* mode_stdbitmap::lines_y[]  = { 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0 }
void mode_stdchar()
byte~ mode_stdchar::$2 reg byte a 2000002.0
byte~ mode_stdchar::$3 reg byte a 2000002.0
byte~ mode_stdchar::$4 reg byte a 2000002.0
byte~ mode_stdchar::$5 zp[1]:24 1000001.0
byte~ mode_stdchar::$6 reg byte a 2000002.0
byte~ mode_stdchar::$7 reg byte a 2000002.0
constant byte* const mode_stdchar::CHARSET = (byte*) 36864
constant byte* const mode_stdchar::COLORS = (byte*) 55296
constant byte* const mode_stdchar::SCREEN = (byte*) 32768
byte* mode_stdchar::ch
byte* mode_stdchar::ch#1 ch zp[2]:15 420000.60000000003
byte* mode_stdchar::ch#2 ch zp[2]:15 310000.4
byte* mode_stdchar::ch#3 ch zp[2]:15 200002.0
byte* mode_stdchar::col
byte* mode_stdchar::col#1 col zp[2]:13 190909.36363636365
byte* mode_stdchar::col#2 col zp[2]:13 775001.0
byte* mode_stdchar::col#3 col zp[2]:13 200002.0
byte mode_stdchar::cx
byte mode_stdchar::cx#1 reg byte x 1500001.5
byte mode_stdchar::cx#2 reg byte x 363636.7272727273
byte mode_stdchar::cy
byte mode_stdchar::cy#1 cy zp[1]:6 150001.5
byte mode_stdchar::cy#4 cy zp[1]:6 157143.14285714284
byte mode_stdchar::i
byte mode_stdchar::i#1 reg byte x 150001.5
byte mode_stdchar::i#2 reg byte x 200002.0
void mode_twoplanebitmap()
byte~ mode_twoplanebitmap::$2 reg byte a 2000002.0
byte~ mode_twoplanebitmap::$3 zp[1]:25 1000001.0
byte~ mode_twoplanebitmap::$4 reg byte a 2000002.0
byte~ mode_twoplanebitmap::$5 reg byte a 2000002.0
byte~ mode_twoplanebitmap::$8 reg byte a 2000002.0
constant byte* const mode_twoplanebitmap::COLORS = (byte*) 32768
constant byte* const mode_twoplanebitmap::PLANEA = (byte*) 16384
constant byte* const mode_twoplanebitmap::PLANEB = (byte*) 24576
byte mode_twoplanebitmap::ax
byte mode_twoplanebitmap::ax#1 reg byte x 1500001.5
byte mode_twoplanebitmap::ax#2 reg byte x 250000.25
byte mode_twoplanebitmap::ay
byte mode_twoplanebitmap::ay#1 ay zp[1]:7 150001.5
byte mode_twoplanebitmap::ay#5 ay zp[1]:7 109091.18181818182
byte mode_twoplanebitmap::bx
byte mode_twoplanebitmap::bx#1 reg byte x 1500001.5
byte mode_twoplanebitmap::bx#2 reg byte x 666667.3333333334
byte mode_twoplanebitmap::by
byte mode_twoplanebitmap::by#1 by zp[1]:8 150001.5
byte mode_twoplanebitmap::by#4 by zp[1]:8 33333.666666666664
byte* mode_twoplanebitmap::col
byte* mode_twoplanebitmap::col#1 col zp[2]:15 420000.60000000003
byte* mode_twoplanebitmap::col#2 col zp[2]:15 516667.3333333334
byte* mode_twoplanebitmap::col#3 col zp[2]:15 200002.0
byte mode_twoplanebitmap::cx
byte mode_twoplanebitmap::cx#1 reg byte x 1500001.5
byte mode_twoplanebitmap::cx#2 reg byte x 428571.85714285716
byte mode_twoplanebitmap::cy
byte mode_twoplanebitmap::cy#1 cy zp[1]:6 150001.5
byte mode_twoplanebitmap::cy#4 cy zp[1]:6 120000.30000000002
byte* mode_twoplanebitmap::gfxa
byte* mode_twoplanebitmap::gfxa#1 gfxa zp[2]:9 2000002.0
byte* mode_twoplanebitmap::gfxa#2 gfxa zp[2]:9 2000002.0
byte* mode_twoplanebitmap::gfxa#3 gfxa zp[2]:9 1020001.2
byte* mode_twoplanebitmap::gfxa#6 gfxa zp[2]:9 620000.8
byte* mode_twoplanebitmap::gfxa#7 gfxa zp[2]:9 200002.0
byte* mode_twoplanebitmap::gfxb
byte* mode_twoplanebitmap::gfxb#1 gfxb zp[2]:13 420000.60000000003
byte* mode_twoplanebitmap::gfxb#2 gfxb zp[2]:13 1550002.0
byte* mode_twoplanebitmap::gfxb#3 gfxb zp[2]:13 200002.0
byte mode_twoplanebitmap::i
byte mode_twoplanebitmap::i#1 reg byte x 150001.5
byte mode_twoplanebitmap::i#2 reg byte x 200002.0
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 1.1000002E7
byte* print_char_cursor
byte* print_char_cursor#103 print_char_cursor zp[2]:2 200002.0
byte* print_char_cursor#2 print_char_cursor zp[2]:2 100001.0
byte* print_char_cursor#26 print_char_cursor zp[2]:2 3666667.333333333
byte* print_char_cursor#37 print_char_cursor zp[2]:2 3683334.1666666665
byte* print_char_cursor#38 print_char_cursor zp[2]:2 1.4328571485714287E8
void print_cls()
byte* print_line_cursor
byte* print_line_cursor#1 print_line_cursor zp[2]:9 91666.83333333334
byte* print_line_cursor#19 print_line_cursor zp[2]:9 2.001000003E9
byte* print_line_cursor#2 print_line_cursor zp[2]:9 6.00040001E8
void print_ln()
byte* print_screen
void print_str_lines(byte* print_str_lines::str)
byte print_str_lines::ch
byte print_str_lines::ch#0 reg byte a 666667.3333333334
byte* print_str_lines::str
byte* print_str_lines::str#0 str zp[2]:13 233333.66666666666
byte* print_str_lines::str#2 str zp[2]:13 150001.5
byte* print_str_lines::str#3 str zp[2]:13 1550002.0
word sgn_u16(word sgn_u16::w)
byte~ sgn_u16::$0 reg byte a 2.0000002E7
byte~ sgn_u16::$1 reg byte a 2.0000002E7
word sgn_u16::return
word sgn_u16::return#0 return zp[2]:17 2000002.0
word sgn_u16::return#1 return zp[2]:17 2000002.0
word sgn_u16::return#4 return zp[2]:17 500000.5
word sgn_u16::w
word sgn_u16::w#0 w zp[2]:33 2000002.0
word sgn_u16::w#1 w zp[2]:33 2000002.0
word sgn_u16::w#2 w zp[2]:33 1.2000003E7

reg byte x [ menu::i#2 menu::i#1 ]
zp[2]:2 [ print_char_cursor#37 print_char_cursor#2 print_char_cursor#103 print_char_cursor#38 print_char_cursor#26 menu::c#2 menu::c#1 ]
reg byte y [ keyboard_key_pressed::key#20 ]
reg byte x [ mode_stdchar::i#2 mode_stdchar::i#1 ]
reg byte x [ mode_stdchar::cx#2 mode_stdchar::cx#1 ]
reg byte x [ mode_ecmchar::i#2 mode_ecmchar::i#1 ]
reg byte x [ mode_ecmchar::cx#2 mode_ecmchar::cx#1 ]
reg byte x [ mode_mcchar::i#2 mode_mcchar::i#1 ]
reg byte x [ mode_mcchar::cx#2 mode_mcchar::cx#1 ]
reg byte x [ mode_stdbitmap::i#2 mode_stdbitmap::i#1 ]
reg byte x [ mode_stdbitmap::cx#2 mode_stdbitmap::cx#1 ]
zp[2]:4 [ mode_stdbitmap::ch#2 mode_stdbitmap::ch#3 mode_stdbitmap::ch#1 bitmap_gfx#14 bitmap_gfx#15 ]
reg byte x [ mode_hicolstdchar::i#2 mode_hicolstdchar::i#1 ]
reg byte x [ mode_hicolstdchar::cx#2 mode_hicolstdchar::cx#1 ]
reg byte x [ mode_hicolecmchar::i#2 mode_hicolecmchar::i#1 ]
reg byte x [ mode_hicolecmchar::cx#2 mode_hicolecmchar::cx#1 ]
reg byte x [ mode_hicolmcchar::i#2 mode_hicolmcchar::i#1 ]
reg byte x [ mode_hicolmcchar::cx#2 mode_hicolmcchar::cx#1 ]
reg byte x [ mode_sixsfred2::i#2 mode_sixsfred2::i#1 ]
reg byte x [ mode_sixsfred2::cx#2 mode_sixsfred2::cx#1 ]
reg byte x [ mode_sixsfred2::ax#2 mode_sixsfred2::ax#1 ]
reg byte x [ mode_sixsfred2::bx#2 mode_sixsfred2::bx#1 ]
reg byte x [ mode_twoplanebitmap::i#2 mode_twoplanebitmap::i#1 ]
reg byte x [ mode_twoplanebitmap::cx#2 mode_twoplanebitmap::cx#1 ]
reg byte x [ mode_twoplanebitmap::ax#2 mode_twoplanebitmap::ax#1 ]
reg byte x [ mode_twoplanebitmap::bx#2 mode_twoplanebitmap::bx#1 ]
reg byte x [ mode_sixsfred::i#2 mode_sixsfred::i#1 ]
reg byte x [ mode_sixsfred::cx#2 mode_sixsfred::cx#1 ]
reg byte x [ mode_sixsfred::ax#2 mode_sixsfred::ax#1 ]
reg byte x [ mode_sixsfred::bx#2 mode_sixsfred::bx#1 ]
reg byte x [ mode_8bpppixelcell::i#2 mode_8bpppixelcell::i#1 ]
zp[1]:6 [ mode_8bpppixelcell::ay#4 mode_8bpppixelcell::ay#1 mode_sixsfred::cy#4 mode_sixsfred::cy#1 mode_twoplanebitmap::cy#4 mode_twoplanebitmap::cy#1 mode_sixsfred2::cy#4 mode_sixsfred2::cy#1 mode_stdbitmap::cy#4 mode_stdbitmap::cy#1 mode_mcchar::cy#4 mode_mcchar::cy#1 mode_ecmchar::cy#4 mode_ecmchar::cy#1 mode_stdchar::cy#4 mode_stdchar::cy#1 ]
reg byte x [ mode_8bpppixelcell::ax#2 mode_8bpppixelcell::ax#1 ]
zp[1]:7 [ mode_8bpppixelcell::ch#8 mode_8bpppixelcell::ch#1 mode_sixsfred::ay#4 mode_sixsfred::ay#1 mode_twoplanebitmap::ay#5 mode_twoplanebitmap::ay#1 mode_sixsfred2::ay#4 mode_sixsfred2::ay#1 mode_hicolmcchar::cy#4 mode_hicolmcchar::cy#1 mode_hicolecmchar::cy#4 mode_hicolecmchar::cy#1 mode_hicolstdchar::cy#4 mode_hicolstdchar::cy#1 mode_stdbitmap::l#2 mode_stdbitmap::l#1 ]
zp[1]:8 [ mode_8bpppixelcell::cr#6 mode_8bpppixelcell::cr#1 mode_sixsfred::by#4 mode_sixsfred::by#1 mode_twoplanebitmap::by#4 mode_twoplanebitmap::by#1 mode_sixsfred2::by#4 mode_sixsfred2::by#1 ]
reg byte x [ mode_8bpppixelcell::cp#2 mode_8bpppixelcell::cp#1 ]
reg byte a [ mode_8bpppixelcell::c#2 mode_8bpppixelcell::c#3 ]
reg byte x [ mode_8bppchunkybmm::i#2 mode_8bppchunkybmm::i#1 ]
reg byte x [ mode_8bppchunkybmm::gfxbCpuBank#4 mode_8bppchunkybmm::gfxbCpuBank#7 mode_8bppchunkybmm::gfxbCpuBank#8 mode_8bppchunkybmm::gfxbCpuBank#2 ]
reg byte x [ memset::c#5 ]
reg byte x [ dtv_control#116 dtv_control#146 dtv_control#16 ]
reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
zp[2]:9 [ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 print_line_cursor#19 print_line_cursor#1 print_line_cursor#2 memset::str#4 memset::dst#2 memset::dst#4 memset::dst#1 mode_8bpppixelcell::gfxa#2 mode_8bpppixelcell::gfxa#3 mode_8bpppixelcell::gfxa#1 mode_sixsfred::gfxa#2 mode_sixsfred::gfxa#3 mode_sixsfred::gfxa#1 mode_twoplanebitmap::gfxa#3 mode_twoplanebitmap::gfxa#7 mode_twoplanebitmap::gfxa#6 mode_twoplanebitmap::gfxa#2 mode_twoplanebitmap::gfxa#1 mode_sixsfred2::gfxb#2 mode_sixsfred2::gfxb#3 mode_sixsfred2::gfxb#1 ]
zp[2]:11 [ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 bitmap_screen#14 bitmap_screen#15 ]
zp[2]:13 [ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 mode_8bppchunkybmm::x#2 mode_8bppchunkybmm::x#1 mode_8bpppixelcell::gfxb#2 mode_8bpppixelcell::gfxb#5 mode_8bpppixelcell::gfxb#7 mode_8bpppixelcell::gfxb#1 mode_sixsfred::col#2 mode_sixsfred::col#3 mode_sixsfred::col#1 mode_twoplanebitmap::gfxb#2 mode_twoplanebitmap::gfxb#3 mode_twoplanebitmap::gfxb#1 mode_sixsfred2::col#2 mode_sixsfred2::col#3 mode_sixsfred2::col#1 mode_hicolmcchar::ch#2 mode_hicolmcchar::ch#3 mode_hicolmcchar::ch#1 mode_hicolecmchar::col#2 mode_hicolecmchar::col#3 mode_hicolecmchar::col#1 mode_hicolstdchar::ch#2 mode_hicolstdchar::ch#3 mode_hicolstdchar::ch#1 mode_mcchar::col#2 mode_mcchar::col#3 mode_mcchar::col#1 mode_ecmchar::ch#2 mode_ecmchar::ch#3 mode_ecmchar::ch#1 mode_stdchar::col#2 mode_stdchar::col#3 mode_stdchar::col#1 print_str_lines::str#3 print_str_lines::str#2 print_str_lines::str#0 ]
reg byte a [ dtvSetCpuBankSegment1::cpuBankIdx#3 dtvSetCpuBankSegment1::cpuBankIdx#1 ]
zp[2]:15 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 abs_u16::return#0 abs_u16::return#1 bitmap_line::dy#0 memset::num#3 memset::end#0 mode_8bppchunkybmm::gfxb#4 mode_8bppchunkybmm::gfxb#3 mode_8bppchunkybmm::gfxb#5 mode_8bppchunkybmm::gfxb#1 mode_8bpppixelcell::chargen#2 mode_8bpppixelcell::chargen#4 mode_8bpppixelcell::chargen#1 mode_sixsfred::gfxb#2 mode_sixsfred::gfxb#3 mode_sixsfred::gfxb#1 mode_twoplanebitmap::col#2 mode_twoplanebitmap::col#3 mode_twoplanebitmap::col#1 mode_sixsfred2::gfxa#2 mode_sixsfred2::gfxa#3 mode_sixsfred2::gfxa#1 mode_hicolmcchar::col#2 mode_hicolmcchar::col#3 mode_hicolmcchar::col#1 mode_hicolecmchar::ch#2 mode_hicolecmchar::ch#3 mode_hicolecmchar::ch#1 mode_hicolstdchar::col#2 mode_hicolstdchar::col#3 mode_hicolstdchar::col#1 mode_mcchar::ch#2 mode_mcchar::ch#3 mode_mcchar::ch#1 mode_ecmchar::col#2 mode_ecmchar::col#3 mode_ecmchar::col#1 mode_stdchar::ch#2 mode_stdchar::ch#3 mode_stdchar::ch#1 ]
zp[2]:17 [ sgn_u16::return#4 sgn_u16::return#0 sgn_u16::return#1 bitmap_line::sy#0 ]
reg byte x [ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 bitmap_plot::y#3 ]
reg byte a [ keyboard_key_pressed::return#2 ]
reg byte a [ menu::$5 ]
reg byte a [ keyboard_key_pressed::return#24 ]
reg byte a [ menu::$9 ]
reg byte a [ keyboard_key_pressed::return#25 ]
reg byte a [ menu::$13 ]
reg byte a [ keyboard_key_pressed::return#26 ]
reg byte a [ menu::$17 ]
reg byte a [ keyboard_key_pressed::return#27 ]
reg byte a [ menu::$21 ]
reg byte a [ keyboard_key_pressed::return#28 ]
reg byte a [ menu::$25 ]
reg byte a [ keyboard_key_pressed::return#29 ]
reg byte a [ menu::$29 ]
reg byte a [ keyboard_key_pressed::return#30 ]
reg byte a [ menu::$33 ]
reg byte a [ keyboard_key_pressed::return#10 ]
reg byte a [ menu::$37 ]
reg byte a [ keyboard_key_pressed::return#11 ]
reg byte a [ menu::$41 ]
reg byte a [ keyboard_key_pressed::return#12 ]
reg byte a [ menu::$45 ]
reg byte a [ keyboard_key_pressed::return#13 ]
reg byte a [ menu::$49 ]
reg byte a [ print_str_lines::ch#0 ]
reg byte a [ print_char::ch#0 ]
reg byte a [ keyboard_key_pressed::rowidx#0 ]
reg byte y [ keyboard_matrix_read::rowid#0 ]
reg byte a [ keyboard_matrix_read::return#2 ]
reg byte a [ keyboard_key_pressed::$2 ]
reg byte a [ keyboard_key_pressed::return#0 ]
reg byte a [ mode_stdchar::$2 ]
reg byte a [ mode_stdchar::$3 ]
reg byte a [ mode_stdchar::$4 ]
reg byte a [ mode_stdchar::$6 ]
reg byte a [ mode_stdchar::$7 ]
reg byte a [ mode_ecmchar::$2 ]
reg byte a [ mode_ecmchar::$3 ]
reg byte a [ mode_ecmchar::$4 ]
reg byte a [ mode_ecmchar::$6 ]
reg byte a [ mode_ecmchar::$7 ]
reg byte a [ mode_mcchar::$2 ]
reg byte a [ mode_mcchar::$3 ]
reg byte a [ mode_mcchar::$4 ]
reg byte a [ mode_mcchar::$6 ]
reg byte a [ mode_mcchar::$7 ]
reg byte a [ mode_stdbitmap::$4 ]
reg byte y [ mode_stdbitmap::col#0 ]
reg byte a [ mode_stdbitmap::$7 ]
reg byte a [ mode_stdbitmap::$8 ]
zp[2]:19 [ bitmap_line::x2#0 ]
zp[2]:21 [ bitmap_line::y2#0 ]
reg byte a [ mode_hicolstdchar::$2 ]
zp[1]:23 [ mode_hicolstdchar::$3 mode_stdbitmap::col2#0 mode_8bppchunkybmm::y#6 mode_8bppchunkybmm::y#1 mode_8bpppixelcell::bits#2 mode_8bpppixelcell::bits#1 mode_8bpppixelcell::bits#0 ]
reg byte a [ mode_hicolstdchar::$4 ]
reg byte a [ mode_hicolstdchar::v#0 ]
reg byte a [ mode_hicolecmchar::$2 ]
reg byte a [ mode_hicolecmchar::$4 ]
reg byte a [ mode_hicolecmchar::v#0 ]
reg byte a [ mode_hicolmcchar::$2 ]
zp[1]:24 [ mode_hicolmcchar::$3 mode_hicolecmchar::$3 mode_stdchar::$5 mode_8bpppixelcell::col#2 mode_8bpppixelcell::col#5 mode_8bpppixelcell::col#7 mode_8bpppixelcell::col#1 ]
reg byte a [ mode_hicolmcchar::$4 ]
reg byte a [ mode_hicolmcchar::v#0 ]
reg byte a [ mode_sixsfred2::$2 ]
reg byte a [ mode_sixsfred2::$4 ]
reg byte a [ mode_sixsfred2::$5 ]
reg byte a [ mode_sixsfred2::$8 ]
reg byte a [ mode_sixsfred2::row#0 ]
reg byte a [ mode_twoplanebitmap::$2 ]
zp[1]:25 [ mode_twoplanebitmap::$3 mode_sixsfred2::$3 mode_ecmchar::$5 mode_ctrl::ctrl#14 mode_ctrl::ctrl#22 mode_ctrl::ctrl#6 mode_ctrl::ctrl#13 mode_ctrl::ctrl#5 mode_ctrl::ctrl#12 mode_ctrl::ctrl#4 mode_ctrl::ctrl#11 mode_ctrl::ctrl#3 mode_ctrl::ctrl#10 mode_ctrl::ctrl#2 mode_ctrl::ctrl#17 mode_ctrl::ctrl#1 mode_ctrl::ctrl#0 ]
reg byte a [ mode_twoplanebitmap::$4 ]
reg byte a [ mode_twoplanebitmap::$5 ]
reg byte a [ mode_twoplanebitmap::$8 ]
reg byte a [ mode_sixsfred::$2 ]
reg byte a [ mode_sixsfred::$3 ]
reg byte a [ mode_sixsfred::$6 ]
reg byte a [ mode_sixsfred::row#0 ]
reg byte a [ mode_8bpppixelcell::$2 ]
reg byte a [ mode_8bpppixelcell::$4 ]
reg byte a [ mode_8bpppixelcell::$5 ]
reg byte a [ mode_8bpppixelcell::$8 ]
zp[2]:26 [ mode_8bppchunkybmm::$7 bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ]
reg byte a [ mode_8bppchunkybmm::c#0 ]
reg byte a [ keyboard_matrix_read::return#0 ]
reg byte a [ keyboard_key_pressed::return#14 ]
reg byte a [ mode_ctrl::$1 ]
reg byte a [ keyboard_key_pressed::return#15 ]
reg byte a [ mode_ctrl::$4 ]
reg byte a [ keyboard_key_pressed::return#16 ]
reg byte a [ mode_ctrl::$8 ]
reg byte a [ keyboard_key_pressed::return#17 ]
reg byte a [ mode_ctrl::$12 ]
reg byte a [ keyboard_key_pressed::return#18 ]
reg byte a [ mode_ctrl::$16 ]
reg byte a [ keyboard_key_pressed::return#19 ]
reg byte a [ mode_ctrl::$20 ]
reg byte a [ keyboard_key_pressed::return#20 ]
reg byte a [ mode_ctrl::$24 ]
reg byte a [ keyboard_key_pressed::return#21 ]
reg byte a [ mode_ctrl::$28 ]
zp[1]:28 [ bitmap_init::$7 mode_8bpppixelcell::$3 mode_mcchar::$5 keyboard_key_pressed::colidx#0 ]
reg byte a [ bitmap_init::$4 ]
reg byte a [ bitmap_init::$5 ]
reg byte a [ bitmap_init::$6 ]
zp[2]:29 [ bitmap_line::dx#0 ]
zp[2]:31 [ bitmap_line::sx#0 ]
reg byte a [ abs_u16::$0 ]
reg byte a [ abs_u16::$1 ]
reg byte a [ sgn_u16::$0 ]
reg byte a [ sgn_u16::$1 ]
zp[2]:33 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 sgn_u16::w#2 sgn_u16::w#0 sgn_u16::w#1 ]
zp[2]:35 [ bitmap_plot::$1 ]
reg byte x [ bitmap_plot::$2 ]
