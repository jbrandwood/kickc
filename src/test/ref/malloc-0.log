Inlined call call __init 

CONTROL FLOW GRAPH SSA

(void*()) malloc((word) malloc::size)
malloc: scope:[malloc]  from __start::__init1
  (word) malloc::size#1 ← phi( __start::__init1/(word) malloc::size#0 )
  (byte*) heap_head#5 ← phi( __start::__init1/(byte*) heap_head#2 )
  (byte*~) malloc::$0 ← (byte*) heap_head#5 - (word) malloc::size#1
  (byte*) malloc::mem#0 ← (byte*~) malloc::$0
  (byte*) heap_head#0 ← (byte*) malloc::mem#0
  (void*) malloc::return#0 ← ((void*)) (byte*) malloc::mem#0
  to:malloc::@return
malloc::@return: scope:[malloc]  from malloc
  (byte*) heap_head#6 ← phi( malloc/(byte*) heap_head#0 )
  (void*) malloc::return#3 ← phi( malloc/(void*) malloc::return#0 )
  (void*) malloc::return#1 ← (void*) malloc::return#3
  (byte*) heap_head#1 ← (byte*) heap_head#6
  return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  (byte*) BYTES#4 ← phi( __start::@1/(byte*) BYTES#6 )
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte*) BYTES#2 ← phi( main/(byte*) BYTES#4 main::@1/(byte*) BYTES#2 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  *((byte*) BYTES#2 + (byte) main::i#2) ← (byte) main::i#2
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,$ff)
  (bool~) main::$0 ← (byte) main::i#1 != rangelast(0,$ff)
  if((bool~) main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  (byte*) heap_head#2 ← (const byte*) HEAP_TOP
  (word) malloc::size#0 ← (number) $100
  call malloc 
  (void*) malloc::return#2 ← (void*) malloc::return#1
  to:__start::@2
__start::@2: scope:[__start]  from __start::__init1
  (byte*) heap_head#7 ← phi( __start::__init1/(byte*) heap_head#1 )
  (void*) malloc::return#4 ← phi( __start::__init1/(void*) malloc::return#2 )
  (void*~) __start::__init1_$0 ← (void*) malloc::return#4
  (byte*) heap_head#3 ← (byte*) heap_head#7
  (byte*) BYTES#0 ← ((byte*)) (void*~) __start::__init1_$0
  to:__start::@1
__start::@1: scope:[__start]  from __start::@2
  (byte*) heap_head#10 ← phi( __start::@2/(byte*) heap_head#3 )
  (byte*) BYTES#6 ← phi( __start::@2/(byte*) BYTES#0 )
  call main 
  to:__start::@3
__start::@3: scope:[__start]  from __start::@1
  (byte*) BYTES#5 ← phi( __start::@1/(byte*) BYTES#6 )
  (byte*) heap_head#9 ← phi( __start::@1/(byte*) heap_head#10 )
  to:__start::@return
__start::@return: scope:[__start]  from __start::@3
  (byte*) BYTES#3 ← phi( __start::@3/(byte*) BYTES#5 )
  (byte*) heap_head#8 ← phi( __start::@3/(byte*) heap_head#9 )
  (byte*) heap_head#4 ← (byte*) heap_head#8
  (byte*) BYTES#1 ← (byte*) BYTES#3
  return 
  to:@return

SYMBOL TABLE SSA
(byte*) BYTES
(byte*) BYTES#0
(byte*) BYTES#1
(byte*) BYTES#2
(byte*) BYTES#3
(byte*) BYTES#4
(byte*) BYTES#5
(byte*) BYTES#6
(const byte*) HEAP_TOP = (byte*)(number) $a000
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@3
(label) __start::@return
(label) __start::__init1
(void*~) __start::__init1_$0
(byte*) heap_head
(byte*) heap_head#0
(byte*) heap_head#1
(byte*) heap_head#10
(byte*) heap_head#2
(byte*) heap_head#3
(byte*) heap_head#4
(byte*) heap_head#5
(byte*) heap_head#6
(byte*) heap_head#7
(byte*) heap_head#8
(byte*) heap_head#9
(void()) main()
(bool~) main::$0
(label) main::@1
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(void*()) malloc((word) malloc::size)
(byte*~) malloc::$0
(label) malloc::@return
(byte*) malloc::mem
(byte*) malloc::mem#0
(void*) malloc::return
(void*) malloc::return#0
(void*) malloc::return#1
(void*) malloc::return#2
(void*) malloc::return#3
(void*) malloc::return#4
(word) malloc::size
(word) malloc::size#0
(word) malloc::size#1

Adding number conversion cast (unumber) $100 in (word) malloc::size#0 ← (number) $100
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (void*) malloc::return#0 ← (void*)(byte*) malloc::mem#0
Inlining cast (word) malloc::size#0 ← (unumber)(number) $100
Inlining cast (byte*) BYTES#0 ← (byte*)(void*~) __start::__init1_$0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 40960
Simplifying constant integer cast $100
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (word) $100
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias malloc::mem#0 = malloc::$0 
Alias malloc::return#0 = malloc::return#3 malloc::return#1 
Alias heap_head#0 = heap_head#6 heap_head#1 
Alias malloc::return#2 = malloc::return#4 
Alias heap_head#10 = heap_head#3 heap_head#7 heap_head#9 heap_head#8 heap_head#4 
Alias BYTES#0 = BYTES#6 BYTES#5 BYTES#3 BYTES#1 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) heap_head#5 (byte*) heap_head#2
Identical Phi Values (word) malloc::size#1 (word) malloc::size#0
Identical Phi Values (byte*) BYTES#4 (byte*) BYTES#0
Identical Phi Values (byte*) BYTES#2 (byte*) BYTES#4
Identical Phi Values (byte*) heap_head#10 (byte*) heap_head#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$0 [11] if((byte) main::i#1!=rangelast(0,$ff)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::i#0 = 0
Constant (const byte*) heap_head#2 = HEAP_TOP
Constant (const word) malloc::size#0 = $100
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [9] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [11] if(main::i#1!=rangelast(0,$ff)) goto main::@1 to (number) 0
Eliminating unused variable (byte*) heap_head#0 and assignment [1] (byte*) heap_head#0 ← (byte*) malloc::mem#0
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) 0 in if((byte) main::i#1!=(number) 0) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [0] (byte*) malloc::mem#0 ← (const byte*) heap_head#2 - (const word) malloc::size#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) malloc::mem#0 = heap_head#2-malloc::size#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const void*) malloc::return#0 = (void*)malloc::mem#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const void*) malloc::return#2 = malloc::return#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const void*) __start::__init1_$0 = malloc::return#2
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) BYTES#0 = (byte*)__start::__init1_$0
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings (const void*) malloc::return#2
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte) 0
Constant inlined malloc::return#2 = (const void*) malloc::return#0
Constant inlined heap_head#2 = (const byte*) HEAP_TOP
Constant inlined __start::__init1_$0 = (const void*) malloc::return#0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@2(between main::@1 and main::@1)
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::__init1
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@3
Adding NOP phi() at start of main
Adding NOP phi() at start of malloc
CALL GRAPH
Calls in [__start] to malloc:2 main:5 

Created 1 initial phi equivalence classes
Coalesced [14] main::i#3 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) __start::@2
Culled Empty Block (label) __start::@3
Culled Empty Block (label) main::@2
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::__init1
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of main
Adding NOP phi() at start of malloc

FINAL CONTROL FLOW GRAPH

(void()) __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] phi()
  [2] call malloc 
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [3] phi()
  [4] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [5] return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  [6] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [7] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [8] *((const byte*) BYTES#0 + (byte) main::i#2) ← (byte) main::i#2
  [9] (byte) main::i#1 ← ++ (byte) main::i#2
  [10] if((byte) main::i#1!=(byte) 0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [11] return 
  to:@return

(void*()) malloc((word) malloc::size)
malloc: scope:[malloc]  from __start::__init1
  [12] phi()
  to:malloc::@return
malloc::@return: scope:[malloc]  from malloc
  [13] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) BYTES
(void()) __start()
(byte*) heap_head
(void()) main()
(byte) main::i
(byte) main::i#1 151.5
(byte) main::i#2 202.0
(void*()) malloc((word) malloc::size)
(byte*) malloc::mem
(void*) malloc::return
(word) malloc::size

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Experiments with malloc() - a byte array
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  // Top of the heap used by malloc()
  .label HEAP_TOP = $a000
  .label BYTES = malloc.return
  // __start
__start: {
    // [1] phi from __start to __start::__init1 [phi:__start->__start::__init1]
  __init1_from___start:
    jmp __init1
    // __start::__init1
  __init1:
    // [2] call malloc 
    // [12] phi from __start::__init1 to malloc [phi:__start::__init1->malloc]
  malloc_from___init1:
    jsr malloc
    // [3] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [4] call main 
    // [6] phi from __start::@1 to main [phi:__start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [5] return 
    rts
}
  // main
main: {
    .label i = 2
    // [7] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [7] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [7] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [7] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [8] *((const byte*) BYTES#0 + (byte) main::i#2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy.z i
    tya
    sta BYTES,y
    // [9] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [10] if((byte) main::i#1!=(byte) 0) goto main::@1 -- vbuz1_neq_0_then_la1 
    lda.z i
    cmp #0
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [11] return 
    rts
}
  // malloc
// Allocates a block of size chars of memory, returning a pointer to the beginning of the block.
// The content of the newly allocated block of memory is not initialized, remaining with indeterminate values.
malloc: {
    .const size = $100
    .label mem = HEAP_TOP-size
    .label return = mem
    jmp __breturn
    // malloc::@return
  __breturn:
    // [13] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 353.5: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [RADIX] 
Uplift Scope [malloc] 
Uplift Scope [__start] 
Uplift Scope [] 

Uplifting [main] best 314 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [RADIX] best 314 combination 
Uplifting [malloc] best 314 combination 
Uplifting [__start] best 314 combination 
Uplifting [] best 314 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Experiments with malloc() - a byte array
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  // Top of the heap used by malloc()
  .label HEAP_TOP = $a000
  .label BYTES = malloc.return
  // __start
__start: {
    // [1] phi from __start to __start::__init1 [phi:__start->__start::__init1]
  __init1_from___start:
    jmp __init1
    // __start::__init1
  __init1:
    // [2] call malloc 
    // [12] phi from __start::__init1 to malloc [phi:__start::__init1->malloc]
  malloc_from___init1:
    jsr malloc
    // [3] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [4] call main 
    // [6] phi from __start::@1 to main [phi:__start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [5] return 
    rts
}
  // main
main: {
    // [7] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [7] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [7] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [7] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [8] *((const byte*) BYTES#0 + (byte) main::i#2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta BYTES,x
    // [9] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [10] if((byte) main::i#1!=(byte) 0) goto main::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [11] return 
    rts
}
  // malloc
// Allocates a block of size chars of memory, returning a pointer to the beginning of the block.
// The content of the newly allocated block of memory is not initialized, remaining with indeterminate values.
malloc: {
    .const size = $100
    .label mem = HEAP_TOP-size
    .label return = mem
    jmp __breturn
    // malloc::@return
  __breturn:
    // [13] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __init1_from___start:
Removing instruction malloc_from___init1:
Removing instruction __b1_from___init1:
Removing instruction main_from___b1:
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(byte*) BYTES
(const byte*) BYTES#0 BYTES = (byte*)(const void*) malloc::return#0
(const byte*) HEAP_TOP = (byte*) 40960
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) __start()
(label) __start::@1
(label) __start::@return
(label) __start::__init1
(byte*) heap_head
(void()) main()
(label) main::@1
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 151.5
(byte) main::i#2 reg byte x 202.0
(void*()) malloc((word) malloc::size)
(label) malloc::@return
(byte*) malloc::mem
(const byte*) malloc::mem#0 mem = (const byte*) HEAP_TOP-(const word) malloc::size#0
(void*) malloc::return
(const void*) malloc::return#0 return = (void*)(const byte*) malloc::mem#0
(word) malloc::size
(const word) malloc::size#0 size = (word) $100

reg byte x [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 185

  // File Comments
// Experiments with malloc() - a byte array
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  // Top of the heap used by malloc()
  .label HEAP_TOP = $a000
  .label BYTES = malloc.return
  // __start
__start: {
    // [1] phi from __start to __start::__init1 [phi:__start->__start::__init1]
    // __start::__init1
    // malloc(0x100)
    // [2] call malloc 
    // [12] phi from __start::__init1 to malloc [phi:__start::__init1->malloc]
    jsr malloc
    // [3] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [4] call main 
    // [6] phi from __start::@1 to main [phi:__start::@1->main]
    jsr main
    // __start::@return
    // [5] return 
    rts
}
  // main
main: {
    // [7] phi from main to main::@1 [phi:main->main::@1]
    // [7] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [7] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [7] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // BYTES[i] = i
    // [8] *((const byte*) BYTES#0 + (byte) main::i#2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta BYTES,x
    // for( byte i: 0..255)
    // [9] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [10] if((byte) main::i#1!=(byte) 0) goto main::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1
    // main::@return
    // }
    // [11] return 
    rts
}
  // malloc
// Allocates a block of size chars of memory, returning a pointer to the beginning of the block.
// The content of the newly allocated block of memory is not initialized, remaining with indeterminate values.
malloc: {
    .const size = $100
    .label mem = HEAP_TOP-size
    .label return = mem
    // malloc::@return
    // [13] return 
    rts
}
  // File Data

