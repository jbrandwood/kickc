
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (byte) main::idx#0 ← (byte) 0
  *((const nomodify byte*) SCREEN + (byte) main::idx#0) ← (byte) '0'+(const byte) SIZEOF_VOID
  (byte) main::idx#1 ← ++ (byte) main::idx#0
  (byte) main::idx#2 ← ++ (byte) main::idx#1
  *((const nomodify byte*) SCREEN + (byte) main::idx#2) ← (byte) '0'+(const byte) SIZEOF_BYTE
  (byte) main::idx#3 ← ++ (byte) main::idx#2
  *((const nomodify byte*) SCREEN + (byte) main::idx#3) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE
  (byte) main::idx#4 ← ++ (byte) main::idx#3
  *((const nomodify byte*) SCREEN + (byte) main::idx#4) ← (byte) '0'+(const byte) SIZEOF_BYTE
  (byte) main::idx#5 ← ++ (byte) main::idx#4
  *((const nomodify byte*) SCREEN + (byte) main::idx#5) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE
  (byte) main::idx#6 ← ++ (byte) main::idx#5
  *((const nomodify byte*) SCREEN + (byte) main::idx#6) ← (byte) '0'+(const byte) SIZEOF_BOOL
  (byte) main::idx#7 ← ++ (byte) main::idx#6
  (byte) main::idx#8 ← ++ (byte) main::idx#7
  *((const nomodify byte*) SCREEN + (byte) main::idx#8) ← (byte) '0'+(const byte) SIZEOF_WORD
  (byte) main::idx#9 ← ++ (byte) main::idx#8
  *((const nomodify byte*) SCREEN + (byte) main::idx#9) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD
  (byte) main::idx#10 ← ++ (byte) main::idx#9
  *((const nomodify byte*) SCREEN + (byte) main::idx#10) ← (byte) '0'+(const byte) SIZEOF_WORD
  (byte) main::idx#11 ← ++ (byte) main::idx#10
  *((const nomodify byte*) SCREEN + (byte) main::idx#11) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD
  (byte) main::idx#12 ← ++ (byte) main::idx#11
  *((const nomodify byte*) SCREEN + (byte) main::idx#12) ← (byte) '0'+(const byte) SIZEOF_WORD
  (byte) main::idx#13 ← ++ (byte) main::idx#12
  *((const nomodify byte*) SCREEN + (byte) main::idx#13) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD
  (byte) main::idx#14 ← ++ (byte) main::idx#13
  (byte) main::idx#15 ← ++ (byte) main::idx#14
  *((const nomodify byte*) SCREEN + (byte) main::idx#15) ← (byte) '0'+(const byte) SIZEOF_POINTER
  (byte) main::idx#16 ← ++ (byte) main::idx#15
  *((const nomodify byte*) SCREEN + (byte) main::idx#16) ← (byte) '0'+(const byte) SIZEOF_POINTER
  (byte) main::idx#17 ← ++ (byte) main::idx#16
  *((const nomodify byte*) SCREEN + (byte) main::idx#17) ← (byte) '0'+(const byte) SIZEOF_POINTER
  (byte) main::idx#18 ← ++ (byte) main::idx#17
  *((const nomodify byte*) SCREEN + (byte) main::idx#18) ← (byte) '0'+(const byte) SIZEOF_POINTER
  (byte) main::idx#19 ← ++ (byte) main::idx#18
  (byte) main::idx#20 ← ++ (byte) main::idx#19
  *((const nomodify byte*) SCREEN + (byte) main::idx#20) ← (byte) '0'+(const byte) SIZEOF_DWORD
  (byte) main::idx#21 ← ++ (byte) main::idx#20
  *((const nomodify byte*) SCREEN + (byte) main::idx#21) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD
  (byte) main::idx#22 ← ++ (byte) main::idx#21
  *((const nomodify byte*) SCREEN + (byte) main::idx#22) ← (byte) '0'+(const byte) SIZEOF_DWORD
  (byte) main::idx#23 ← ++ (byte) main::idx#22
  *((const nomodify byte*) SCREEN + (byte) main::idx#23) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD
  (byte) main::idx#24 ← ++ (byte) main::idx#23
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) SCREEN = (byte*)(number) $400
(const byte) SIZEOF_BOOL = (byte) 1
(const byte) SIZEOF_BYTE = (byte) 1
(const byte) SIZEOF_DWORD = (byte) 4
(const byte) SIZEOF_POINTER = (byte) 2
(const byte) SIZEOF_SIGNED_BYTE = (byte) 1
(const byte) SIZEOF_SIGNED_DWORD = (byte) 4
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(const byte) SIZEOF_VOID = (byte) 0
(const byte) SIZEOF_WORD = (byte) 2
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(label) main::@return
(byte) main::idx
(byte) main::idx#0
(byte) main::idx#1
(byte) main::idx#10
(byte) main::idx#11
(byte) main::idx#12
(byte) main::idx#13
(byte) main::idx#14
(byte) main::idx#15
(byte) main::idx#16
(byte) main::idx#17
(byte) main::idx#18
(byte) main::idx#19
(byte) main::idx#2
(byte) main::idx#20
(byte) main::idx#21
(byte) main::idx#22
(byte) main::idx#23
(byte) main::idx#24
(byte) main::idx#3
(byte) main::idx#4
(byte) main::idx#5
(byte) main::idx#6
(byte) main::idx#7
(byte) main::idx#8
(byte) main::idx#9

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Constant (const byte) main::idx#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero '0' in [1] *((const nomodify byte*) SCREEN + (const byte) main::idx#0) ← (byte) '0'+(const byte) SIZEOF_VOID
Simplifying expression containing zero SCREEN in [1] *((const nomodify byte*) SCREEN + (const byte) main::idx#0) ← (byte) '0'
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte) main::idx#24 and assignment [43] (byte) main::idx#24 ← ++ (byte) main::idx#23
Eliminating unused constant (const byte) SIZEOF_VOID
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant right-side identified [1] (byte) main::idx#1 ← ++ (const byte) main::idx#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#1 = ++main::idx#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [1] (byte) main::idx#2 ← ++ (const byte) main::idx#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#2 = ++main::idx#1
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [2] (byte) main::idx#3 ← ++ (const byte) main::idx#2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#3 = ++main::idx#2
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [3] (byte) main::idx#4 ← ++ (const byte) main::idx#3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#4 = ++main::idx#3
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [4] (byte) main::idx#5 ← ++ (const byte) main::idx#4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#5 = ++main::idx#4
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [5] (byte) main::idx#6 ← ++ (const byte) main::idx#5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#6 = ++main::idx#5
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [6] (byte) main::idx#7 ← ++ (const byte) main::idx#6
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#7 = ++main::idx#6
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [6] (byte) main::idx#8 ← ++ (const byte) main::idx#7
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#8 = ++main::idx#7
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [7] (byte) main::idx#9 ← ++ (const byte) main::idx#8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#9 = ++main::idx#8
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [8] (byte) main::idx#10 ← ++ (const byte) main::idx#9
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#10 = ++main::idx#9
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [9] (byte) main::idx#11 ← ++ (const byte) main::idx#10
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#11 = ++main::idx#10
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [10] (byte) main::idx#12 ← ++ (const byte) main::idx#11
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#12 = ++main::idx#11
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [11] (byte) main::idx#13 ← ++ (const byte) main::idx#12
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#13 = ++main::idx#12
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [12] (byte) main::idx#14 ← ++ (const byte) main::idx#13
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#14 = ++main::idx#13
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [12] (byte) main::idx#15 ← ++ (const byte) main::idx#14
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#15 = ++main::idx#14
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [13] (byte) main::idx#16 ← ++ (const byte) main::idx#15
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#16 = ++main::idx#15
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [14] (byte) main::idx#17 ← ++ (const byte) main::idx#16
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#17 = ++main::idx#16
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [15] (byte) main::idx#18 ← ++ (const byte) main::idx#17
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#18 = ++main::idx#17
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [16] (byte) main::idx#19 ← ++ (const byte) main::idx#18
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#19 = ++main::idx#18
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [16] (byte) main::idx#20 ← ++ (const byte) main::idx#19
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#20 = ++main::idx#19
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [17] (byte) main::idx#21 ← ++ (const byte) main::idx#20
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#21 = ++main::idx#20
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [18] (byte) main::idx#22 ← ++ (const byte) main::idx#21
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#22 = ++main::idx#21
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [19] (byte) main::idx#23 ← ++ (const byte) main::idx#22
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#23 = ++main::idx#22
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings (const byte) main::idx#0
Inlining constant with different constant siblings (const byte) main::idx#1
Inlining constant with different constant siblings (const byte) main::idx#2
Inlining constant with different constant siblings (const byte) main::idx#3
Inlining constant with different constant siblings (const byte) main::idx#4
Inlining constant with different constant siblings (const byte) main::idx#5
Inlining constant with different constant siblings (const byte) main::idx#6
Inlining constant with different constant siblings (const byte) main::idx#7
Inlining constant with different constant siblings (const byte) main::idx#8
Inlining constant with different constant siblings (const byte) main::idx#9
Inlining constant with different constant siblings (const byte) main::idx#10
Inlining constant with different constant siblings (const byte) main::idx#11
Inlining constant with different constant siblings (const byte) main::idx#12
Inlining constant with different constant siblings (const byte) main::idx#13
Inlining constant with different constant siblings (const byte) main::idx#14
Inlining constant with different constant siblings (const byte) main::idx#15
Inlining constant with different constant siblings (const byte) main::idx#16
Inlining constant with different constant siblings (const byte) main::idx#17
Inlining constant with different constant siblings (const byte) main::idx#18
Inlining constant with different constant siblings (const byte) main::idx#19
Inlining constant with different constant siblings (const byte) main::idx#20
Inlining constant with different constant siblings (const byte) main::idx#21
Inlining constant with different constant siblings (const byte) main::idx#22
Inlining constant with different constant siblings (const byte) main::idx#23
Constant inlined main::idx#16 = ++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#17 = ++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#18 = ++++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#19 = ++++++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#12 = ++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#13 = ++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#14 = ++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#15 = ++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#20 = ++++++++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#21 = ++++++++++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#22 = ++++++++++++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#23 = ++++++++++++++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#0 = (byte) 0
Constant inlined main::idx#1 = ++(byte) 0
Constant inlined main::idx#2 = ++++(byte) 0
Constant inlined main::idx#3 = ++++++(byte) 0
Constant inlined main::idx#4 = ++++++++(byte) 0
Constant inlined main::idx#5 = ++++++++++(byte) 0
Constant inlined main::idx#6 = ++++++++++++(byte) 0
Constant inlined main::idx#7 = ++++++++++++++(byte) 0
Constant inlined main::idx#8 = ++++++++++++++++(byte) 0
Constant inlined main::idx#9 = ++++++++++++++++++(byte) 0
Constant inlined main::idx#10 = ++++++++++++++++++++(byte) 0
Constant inlined main::idx#11 = ++++++++++++++++++++++(byte) 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN+++++0)
Consolidated array index constant in *(SCREEN+++++++0)
Consolidated array index constant in *(SCREEN+++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++++++++++++++++++++++0)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Simplifying constant integer increment ++7
Simplifying constant integer increment ++8
Simplifying constant integer increment ++9
Simplifying constant integer increment ++$a
Simplifying constant integer increment ++$b
Simplifying constant integer increment ++$c
Simplifying constant integer increment ++$d
Simplifying constant integer increment ++$e
Simplifying constant integer increment ++$f
Simplifying constant integer increment ++$10
Simplifying constant integer increment ++$11
Simplifying constant integer increment ++$12
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++7
Simplifying constant integer increment ++8
Simplifying constant integer increment ++9
Simplifying constant integer increment ++$a
Simplifying constant integer increment ++$b
Simplifying constant integer increment ++$c
Simplifying constant integer increment ++$e
Simplifying constant integer increment ++$f
Simplifying constant integer increment ++$10
Simplifying constant integer increment ++$11
Simplifying constant integer increment ++$13
Simplifying constant integer increment ++$13
Simplifying constant integer increment ++$14
Simplifying constant integer increment ++$15
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++$14
Simplifying constant integer increment ++$15
Simplifying constant integer increment ++$16
Successful SSA optimization Pass2ConstantSimplification
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const nomodify byte*) SCREEN) ← (byte) '0'
  [1] *((const nomodify byte*) SCREEN+(byte) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE
  [2] *((const nomodify byte*) SCREEN+(byte) 3) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE
  [3] *((const nomodify byte*) SCREEN+(byte) 4) ← (byte) '0'+(const byte) SIZEOF_BYTE
  [4] *((const nomodify byte*) SCREEN+(byte) 5) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE
  [5] *((const nomodify byte*) SCREEN+(byte) 6) ← (byte) '0'+(const byte) SIZEOF_BOOL
  [6] *((const nomodify byte*) SCREEN+(byte) 8) ← (byte) '0'+(const byte) SIZEOF_WORD
  [7] *((const nomodify byte*) SCREEN+(byte) 9) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD
  [8] *((const nomodify byte*) SCREEN+(byte) $a) ← (byte) '0'+(const byte) SIZEOF_WORD
  [9] *((const nomodify byte*) SCREEN+(byte) $b) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD
  [10] *((const nomodify byte*) SCREEN+(byte) $c) ← (byte) '0'+(const byte) SIZEOF_WORD
  [11] *((const nomodify byte*) SCREEN+(byte) $d) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD
  [12] *((const nomodify byte*) SCREEN+(byte) $f) ← (byte) '0'+(const byte) SIZEOF_POINTER
  [13] *((const nomodify byte*) SCREEN+(byte) $10) ← (byte) '0'+(const byte) SIZEOF_POINTER
  [14] *((const nomodify byte*) SCREEN+(byte) $11) ← (byte) '0'+(const byte) SIZEOF_POINTER
  [15] *((const nomodify byte*) SCREEN+(byte) $12) ← (byte) '0'+(const byte) SIZEOF_POINTER
  [16] *((const nomodify byte*) SCREEN+(byte) $14) ← (byte) '0'+(const byte) SIZEOF_DWORD
  [17] *((const nomodify byte*) SCREEN+(byte) $15) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD
  [18] *((const nomodify byte*) SCREEN+(byte) $16) ← (byte) '0'+(const byte) SIZEOF_DWORD
  [19] *((const nomodify byte*) SCREEN+(byte) $17) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD
  to:main::@return
main::@return: scope:[main]  from main
  [20] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::idx

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests the sizeof() operator on types
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_BYTE = 1
  .const SIZEOF_SIGNED_BYTE = 1
  .const SIZEOF_BOOL = 1
  .const SIZEOF_WORD = 2
  .const SIZEOF_SIGNED_WORD = 2
  .const SIZEOF_POINTER = 2
  .const SIZEOF_DWORD = 4
  .const SIZEOF_SIGNED_DWORD = 4
  .label SCREEN = $400
  // main
main: {
    // [0] *((const nomodify byte*) SCREEN) ← (byte) '0' -- _deref_pbuc1=vbuc2 
    lda #'0'
    sta SCREEN
    // [1] *((const nomodify byte*) SCREEN+(byte) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+2
    // [2] *((const nomodify byte*) SCREEN+(byte) 3) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_BYTE
    sta SCREEN+3
    // [3] *((const nomodify byte*) SCREEN+(byte) 4) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+4
    // [4] *((const nomodify byte*) SCREEN+(byte) 5) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_BYTE
    sta SCREEN+5
    // [5] *((const nomodify byte*) SCREEN+(byte) 6) ← (byte) '0'+(const byte) SIZEOF_BOOL -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BOOL
    sta SCREEN+6
    // [6] *((const nomodify byte*) SCREEN+(byte) 8) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+8
    // [7] *((const nomodify byte*) SCREEN+(byte) 9) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+9
    // [8] *((const nomodify byte*) SCREEN+(byte) $a) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+$a
    // [9] *((const nomodify byte*) SCREEN+(byte) $b) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+$b
    // [10] *((const nomodify byte*) SCREEN+(byte) $c) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+$c
    // [11] *((const nomodify byte*) SCREEN+(byte) $d) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+$d
    // [12] *((const nomodify byte*) SCREEN+(byte) $f) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$f
    // [13] *((const nomodify byte*) SCREEN+(byte) $10) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$10
    // [14] *((const nomodify byte*) SCREEN+(byte) $11) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$11
    // [15] *((const nomodify byte*) SCREEN+(byte) $12) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$12
    // [16] *((const nomodify byte*) SCREEN+(byte) $14) ← (byte) '0'+(const byte) SIZEOF_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_DWORD
    sta SCREEN+$14
    // [17] *((const nomodify byte*) SCREEN+(byte) $15) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_DWORD
    sta SCREEN+$15
    // [18] *((const nomodify byte*) SCREEN+(byte) $16) ← (byte) '0'+(const byte) SIZEOF_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_DWORD
    sta SCREEN+$16
    // [19] *((const nomodify byte*) SCREEN+(byte) $17) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_DWORD
    sta SCREEN+$17
    jmp __breturn
    // main::@return
  __breturn:
    // [20] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const nomodify byte*) SCREEN) ← (byte) '0' [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((const nomodify byte*) SCREEN+(byte) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((const nomodify byte*) SCREEN+(byte) 3) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *((const nomodify byte*) SCREEN+(byte) 4) ← (byte) '0'+(const byte) SIZEOF_BYTE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] *((const nomodify byte*) SCREEN+(byte) 5) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] *((const nomodify byte*) SCREEN+(byte) 6) ← (byte) '0'+(const byte) SIZEOF_BOOL [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [6] *((const nomodify byte*) SCREEN+(byte) 8) ← (byte) '0'+(const byte) SIZEOF_WORD [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [7] *((const nomodify byte*) SCREEN+(byte) 9) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] *((const nomodify byte*) SCREEN+(byte) $a) ← (byte) '0'+(const byte) SIZEOF_WORD [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [9] *((const nomodify byte*) SCREEN+(byte) $b) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [10] *((const nomodify byte*) SCREEN+(byte) $c) ← (byte) '0'+(const byte) SIZEOF_WORD [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [11] *((const nomodify byte*) SCREEN+(byte) $d) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [12] *((const nomodify byte*) SCREEN+(byte) $f) ← (byte) '0'+(const byte) SIZEOF_POINTER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [13] *((const nomodify byte*) SCREEN+(byte) $10) ← (byte) '0'+(const byte) SIZEOF_POINTER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [14] *((const nomodify byte*) SCREEN+(byte) $11) ← (byte) '0'+(const byte) SIZEOF_POINTER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [15] *((const nomodify byte*) SCREEN+(byte) $12) ← (byte) '0'+(const byte) SIZEOF_POINTER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [16] *((const nomodify byte*) SCREEN+(byte) $14) ← (byte) '0'+(const byte) SIZEOF_DWORD [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [17] *((const nomodify byte*) SCREEN+(byte) $15) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [18] *((const nomodify byte*) SCREEN+(byte) $16) ← (byte) '0'+(const byte) SIZEOF_DWORD [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [19] *((const nomodify byte*) SCREEN+(byte) $17) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 129 combination 
Uplifting [] best 129 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests the sizeof() operator on types
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_BYTE = 1
  .const SIZEOF_SIGNED_BYTE = 1
  .const SIZEOF_BOOL = 1
  .const SIZEOF_WORD = 2
  .const SIZEOF_SIGNED_WORD = 2
  .const SIZEOF_POINTER = 2
  .const SIZEOF_DWORD = 4
  .const SIZEOF_SIGNED_DWORD = 4
  .label SCREEN = $400
  // main
main: {
    // [0] *((const nomodify byte*) SCREEN) ← (byte) '0' -- _deref_pbuc1=vbuc2 
    lda #'0'
    sta SCREEN
    // [1] *((const nomodify byte*) SCREEN+(byte) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+2
    // [2] *((const nomodify byte*) SCREEN+(byte) 3) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_BYTE
    sta SCREEN+3
    // [3] *((const nomodify byte*) SCREEN+(byte) 4) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+4
    // [4] *((const nomodify byte*) SCREEN+(byte) 5) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_BYTE
    sta SCREEN+5
    // [5] *((const nomodify byte*) SCREEN+(byte) 6) ← (byte) '0'+(const byte) SIZEOF_BOOL -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BOOL
    sta SCREEN+6
    // [6] *((const nomodify byte*) SCREEN+(byte) 8) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+8
    // [7] *((const nomodify byte*) SCREEN+(byte) 9) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+9
    // [8] *((const nomodify byte*) SCREEN+(byte) $a) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+$a
    // [9] *((const nomodify byte*) SCREEN+(byte) $b) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+$b
    // [10] *((const nomodify byte*) SCREEN+(byte) $c) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+$c
    // [11] *((const nomodify byte*) SCREEN+(byte) $d) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+$d
    // [12] *((const nomodify byte*) SCREEN+(byte) $f) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$f
    // [13] *((const nomodify byte*) SCREEN+(byte) $10) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$10
    // [14] *((const nomodify byte*) SCREEN+(byte) $11) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$11
    // [15] *((const nomodify byte*) SCREEN+(byte) $12) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$12
    // [16] *((const nomodify byte*) SCREEN+(byte) $14) ← (byte) '0'+(const byte) SIZEOF_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_DWORD
    sta SCREEN+$14
    // [17] *((const nomodify byte*) SCREEN+(byte) $15) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_DWORD
    sta SCREEN+$15
    // [18] *((const nomodify byte*) SCREEN+(byte) $16) ← (byte) '0'+(const byte) SIZEOF_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_DWORD
    sta SCREEN+$16
    // [19] *((const nomodify byte*) SCREEN+(byte) $17) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_DWORD
    sta SCREEN+$17
    jmp __breturn
    // main::@return
  __breturn:
    // [20] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #'0'+SIZEOF_POINTER
Removing instruction lda #'0'+SIZEOF_POINTER
Removing instruction lda #'0'+SIZEOF_POINTER
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify byte*) SCREEN = (byte*) 1024
(const byte) SIZEOF_BOOL = (byte) 1
(const byte) SIZEOF_BYTE = (byte) 1
(const byte) SIZEOF_DWORD = (byte) 4
(const byte) SIZEOF_POINTER = (byte) 2
(const byte) SIZEOF_SIGNED_BYTE = (byte) 1
(const byte) SIZEOF_SIGNED_DWORD = (byte) 4
(const byte) SIZEOF_SIGNED_WORD = (byte) 2
(const byte) SIZEOF_WORD = (byte) 2
(void()) main()
(label) main::@return
(byte) main::idx



FINAL ASSEMBLER
Score: 120

  // File Comments
// Tests the sizeof() operator on types
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_BYTE = 1
  .const SIZEOF_SIGNED_BYTE = 1
  .const SIZEOF_BOOL = 1
  .const SIZEOF_WORD = 2
  .const SIZEOF_SIGNED_WORD = 2
  .const SIZEOF_POINTER = 2
  .const SIZEOF_DWORD = 4
  .const SIZEOF_SIGNED_DWORD = 4
  .label SCREEN = $400
  // main
main: {
    // SCREEN[idx++] = '0'+sizeof(void)
    // [0] *((const nomodify byte*) SCREEN) ← (byte) '0' -- _deref_pbuc1=vbuc2 
    lda #'0'
    sta SCREEN
    // SCREEN[idx++] = '0'+sizeof(byte)
    // [1] *((const nomodify byte*) SCREEN+(byte) 2) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+2
    // SCREEN[idx++] = '0'+sizeof(signed byte)
    // [2] *((const nomodify byte*) SCREEN+(byte) 3) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_BYTE
    sta SCREEN+3
    // SCREEN[idx++] = '0'+sizeof(unsigned char)
    // [3] *((const nomodify byte*) SCREEN+(byte) 4) ← (byte) '0'+(const byte) SIZEOF_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BYTE
    sta SCREEN+4
    // SCREEN[idx++] = '0'+sizeof(signed char)
    // [4] *((const nomodify byte*) SCREEN+(byte) 5) ← (byte) '0'+(const byte) SIZEOF_SIGNED_BYTE -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_BYTE
    sta SCREEN+5
    // SCREEN[idx++] = '0'+sizeof(bool)
    // [5] *((const nomodify byte*) SCREEN+(byte) 6) ← (byte) '0'+(const byte) SIZEOF_BOOL -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_BOOL
    sta SCREEN+6
    // SCREEN[idx++] = '0'+sizeof(word)
    // [6] *((const nomodify byte*) SCREEN+(byte) 8) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+8
    // SCREEN[idx++] = '0'+sizeof(signed word)
    // [7] *((const nomodify byte*) SCREEN+(byte) 9) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+9
    // SCREEN[idx++] = '0'+sizeof(unsigned int)
    // [8] *((const nomodify byte*) SCREEN+(byte) $a) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+$a
    // SCREEN[idx++] = '0'+sizeof(signed int)
    // [9] *((const nomodify byte*) SCREEN+(byte) $b) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+$b
    // SCREEN[idx++] = '0'+sizeof(unsigned short)
    // [10] *((const nomodify byte*) SCREEN+(byte) $c) ← (byte) '0'+(const byte) SIZEOF_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_WORD
    sta SCREEN+$c
    // SCREEN[idx++] = '0'+sizeof(signed short)
    // [11] *((const nomodify byte*) SCREEN+(byte) $d) ← (byte) '0'+(const byte) SIZEOF_SIGNED_WORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_WORD
    sta SCREEN+$d
    // SCREEN[idx++] = '0'+sizeof(byte*)
    // [12] *((const nomodify byte*) SCREEN+(byte) $f) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_POINTER
    sta SCREEN+$f
    // SCREEN[idx++] = '0'+sizeof(word*)
    // [13] *((const nomodify byte*) SCREEN+(byte) $10) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    sta SCREEN+$10
    // SCREEN[idx++] = '0'+sizeof(int**)
    // [14] *((const nomodify byte*) SCREEN+(byte) $11) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    sta SCREEN+$11
    // SCREEN[idx++] = '0'+sizeof(int***)
    // [15] *((const nomodify byte*) SCREEN+(byte) $12) ← (byte) '0'+(const byte) SIZEOF_POINTER -- _deref_pbuc1=vbuc2 
    sta SCREEN+$12
    // SCREEN[idx++] = '0'+sizeof(dword)
    // [16] *((const nomodify byte*) SCREEN+(byte) $14) ← (byte) '0'+(const byte) SIZEOF_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_DWORD
    sta SCREEN+$14
    // SCREEN[idx++] = '0'+sizeof(signed dword)
    // [17] *((const nomodify byte*) SCREEN+(byte) $15) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_DWORD
    sta SCREEN+$15
    // SCREEN[idx++] = '0'+sizeof(unsigned long)
    // [18] *((const nomodify byte*) SCREEN+(byte) $16) ← (byte) '0'+(const byte) SIZEOF_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_DWORD
    sta SCREEN+$16
    // SCREEN[idx++] = '0'+sizeof(signed long)
    // [19] *((const nomodify byte*) SCREEN+(byte) $17) ← (byte) '0'+(const byte) SIZEOF_SIGNED_DWORD -- _deref_pbuc1=vbuc2 
    lda #'0'+SIZEOF_SIGNED_DWORD
    sta SCREEN+$17
    // main::@return
    // }
    // [20] return 
    rts
}
  // File Data

