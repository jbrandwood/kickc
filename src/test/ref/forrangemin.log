Identified constant variable (byte*) SCREEN1
Identified constant variable (byte*) SCREEN2
Culled Empty Block (label) main::@4

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN1#0 ← ((byte*)) (number) $400
  (byte*) SCREEN2#0 ← ((byte*)) (number) $500
  to:@1
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  *((byte*) SCREEN1#0 + (byte) main::i#2) ← (byte) main::i#2
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,$ff)
  (bool~) main::$0 ← (byte) main::i#1 != rangelast(0,$ff)
  if((bool~) main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) main::j#0 ← (byte) 0
  (byte) main::j#1 ← (number) $64
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::j#3 ← phi( main::@2/(byte) main::j#1 main::@3/(byte) main::j#2 )
  *((byte*) SCREEN2#0 + (byte) main::j#3) ← (byte) main::j#3
  (byte) main::j#2 ← (byte) main::j#3 + rangenext($64,0)
  (bool~) main::$1 ← (byte) main::j#2 != rangelast($64,0)
  if((bool~) main::$1) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN1
(byte*) SCREEN1#0
(byte*) SCREEN2
(byte*) SCREEN2#0
(void()) main()
(bool~) main::$0
(bool~) main::$1
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::j
(byte) main::j#0
(byte) main::j#1
(byte) main::j#2
(byte) main::j#3

Adding number conversion cast (unumber) $64 in (byte) main::j#1 ← (number) $64
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) SCREEN1#0 ← (byte*)(number) $400
Inlining cast (byte*) SCREEN2#0 ← (byte*)(number) $500
Inlining cast (byte) main::j#1 ← (unumber)(number) $64
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 1280
Simplifying constant integer cast $64
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $64
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition (bool~) main::$0 [7] if((byte) main::i#1!=rangelast(0,$ff)) goto main::@1
Simple Condition (bool~) main::$1 [14] if((byte) main::j#2!=rangelast($64,0)) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) SCREEN1#0 = (byte*) 1024
Constant (const byte*) SCREEN2#0 = (byte*) 1280
Constant (const byte) main::i#0 = 0
Constant (const byte) main::j#0 = 0
Constant (const byte) main::j#1 = $64
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [5] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [7] if(main::i#1!=rangelast(0,$ff)) goto main::@1 to (number) 0
Resolved ranged next value [12] main::j#2 ← -- main::j#3 to --
Resolved ranged comparison value [14] if(main::j#2!=rangelast($64,0)) goto main::@3 to (number) $ff
Eliminating unused constant (const byte) main::j#0
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) 0 in if((byte) main::i#1!=(number) 0) goto main::@1
Adding number conversion cast (unumber) $ff in if((byte) main::j#2!=(number) $ff) goto main::@3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::j#1
Constant inlined main::i#0 = (byte) 0
Constant inlined main::j#1 = (byte) $64
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@5(between main::@1 and main::@1)
Added new block during phi lifting main::@6(between main::@3 and main::@3)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
CALL GRAPH
Calls in [] to main:2 

Created 2 initial phi equivalence classes
Coalesced [16] main::j#4 ← main::j#2
Coalesced [17] main::i#3 ← main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@2
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@5
Renumbering block main::@3 to main::@2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [6] *((const byte*) SCREEN1#0 + (byte) main::i#2) ← (byte) main::i#2
  [7] (byte) main::i#1 ← ++ (byte) main::i#2
  [8] if((byte) main::i#1!=(byte) 0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [9] (byte) main::j#3 ← phi( main::@1/(byte) $64 main::@2/(byte) main::j#2 )
  [10] *((const byte*) SCREEN2#0 + (byte) main::j#3) ← (byte) main::j#3
  [11] (byte) main::j#2 ← -- (byte) main::j#3
  [12] if((byte) main::j#2!=(byte) $ff) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@2
  [13] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN1
(byte*) SCREEN2
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 22.0
(byte) main::j
(byte) main::j#2 16.5
(byte) main::j#3 22.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#3 main::j#2 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#3 main::j#2 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::j#3 main::j#2 ]

INITIAL ASM
Target platform is c64basic
  // File Comments
// Minimal range based for() loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN1 = $400
  .label SCREEN2 = $500
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label i = 2
    .label j = 3
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [6] *((const byte*) SCREEN1#0 + (byte) main::i#2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy.z i
    tya
    sta SCREEN1,y
    // [7] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [8] if((byte) main::i#1!=(byte) 0) goto main::@1 -- vbuz1_neq_0_then_la1 
    lda.z i
    cmp #0
    bne b1_from_b1
    // [9] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    // [9] phi (byte) main::j#3 = (byte) $64 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #$64
    sta.z j
    jmp b2
    // [9] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  b2_from_b2:
    // [9] phi (byte) main::j#3 = (byte) main::j#2 [phi:main::@2->main::@2#0] -- register_copy 
    jmp b2
    // main::@2
  b2:
    // [10] *((const byte*) SCREEN2#0 + (byte) main::j#3) ← (byte) main::j#3 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy.z j
    tya
    sta SCREEN2,y
    // [11] (byte) main::j#2 ← -- (byte) main::j#3 -- vbuz1=_dec_vbuz1 
    dec.z j
    // [12] if((byte) main::j#2!=(byte) $ff) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp.z j
    bne b2_from_b2
    jmp breturn
    // main::@return
  breturn:
    // [13] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::j#3 main::j#2 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 38.5: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 38.5: zp ZP_BYTE:3 [ main::j#3 main::j#2 ] 
Uplift Scope [] 

Uplifting [main] best 478 combination reg byte x [ main::i#2 main::i#1 ] reg byte x [ main::j#3 main::j#2 ] 
Uplifting [] best 478 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal range based for() loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN1 = $400
  .label SCREEN2 = $500
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [6] *((const byte*) SCREEN1#0 + (byte) main::i#2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta SCREEN1,x
    // [7] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [8] if((byte) main::i#1!=(byte) 0) goto main::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b1_from_b1
    // [9] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    // [9] phi (byte) main::j#3 = (byte) $64 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #$64
    jmp b2
    // [9] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  b2_from_b2:
    // [9] phi (byte) main::j#3 = (byte) main::j#2 [phi:main::@2->main::@2#0] -- register_copy 
    jmp b2
    // main::@2
  b2:
    // [10] *((const byte*) SCREEN2#0 + (byte) main::j#3) ← (byte) main::j#3 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta SCREEN2,x
    // [11] (byte) main::j#2 ← -- (byte) main::j#3 -- vbuxx=_dec_vbuxx 
    dex
    // [12] if((byte) main::j#2!=(byte) $ff) goto main::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$ff
    bne b2_from_b2
    jmp breturn
    // main::@return
  breturn:
    // [13] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b1 with b1
Replacing label b2_from_b2 with b2
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b1:
Removing instruction b2_from_b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b2_from_b1:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Removing instruction jmp b2
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) SCREEN1
(const byte*) SCREEN1#0 SCREEN1 = (byte*) 1024
(byte*) SCREEN2
(const byte*) SCREEN2#0 SCREEN2 = (byte*) 1280
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 22.0
(byte) main::j
(byte) main::j#2 reg byte x 16.5
(byte) main::j#3 reg byte x 22.0

reg byte x [ main::i#2 main::i#1 ]
reg byte x [ main::j#3 main::j#2 ]


FINAL ASSEMBLER
Score: 316

  // File Comments
// Minimal range based for() loop
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN1 = $400
  .label SCREEN2 = $500
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  b1:
    // SCREEN1[i] = i
    // [6] *((const byte*) SCREEN1#0 + (byte) main::i#2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta SCREEN1,x
    // for(byte i : 0..255)
    // [7] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [8] if((byte) main::i#1!=(byte) 0) goto main::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b1
    // [9] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [9] phi (byte) main::j#3 = (byte) $64 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #$64
    // [9] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
    // [9] phi (byte) main::j#3 = (byte) main::j#2 [phi:main::@2->main::@2#0] -- register_copy 
    // main::@2
  b2:
    // SCREEN2[j] = j
    // [10] *((const byte*) SCREEN2#0 + (byte) main::j#3) ← (byte) main::j#3 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta SCREEN2,x
    // for(j : 100..0)
    // [11] (byte) main::j#2 ← -- (byte) main::j#3 -- vbuxx=_dec_vbuxx 
    dex
    // [12] if((byte) main::j#2!=(byte) $ff) goto main::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$ff
    bne b2
    // main::@return
    // }
    // [13] return 
    rts
}
  // File Data

