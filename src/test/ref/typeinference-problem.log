
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  main::$0 = $ff - main::i#2
  table[main::$0] = 0
  main::i#1 = main::i#2 + rangenext(0,$80)
  main::$1 = main::i#1 != rangelast(0,$80)
  if(main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
number~ main::$0
bool~ main::$1
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
const byte* table[$100]  = { fill( $100, 0) }

Adding number conversion cast (unumber) $ff in main::$0 = $ff - main::i#2
Adding number conversion cast (unumber) main::$0 in main::$0 = (unumber)$ff - main::i#2
Adding number conversion cast (unumber) 0 in table[main::$0] = 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast table[main::$0] = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $ff
Finalized unsigned number type 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$0 = $ff - main::i#2
Simple Condition main::$1 [6] if(main::i#1!=rangelast(0,$80)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [4] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [6] if(main::i#1!=rangelast(0,$80)) goto main::@1 to $81
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $81 in [4] if(main::i#1!=$81) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $81
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $81
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@2(between main::@1 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [7] main::i#3 = main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::i#2 = phi( main/0, main::@1/main::i#1 )
  [2] main::$0 = $ff - main::i#2
  [3] table[main::$0] = 0
  [4] main::i#1 = ++ main::i#2
  [5] if(main::i#1!=$81) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte~ main::$0 22.0
byte main::i
byte main::i#1 16.5
byte main::i#2 11.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::$0 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::$0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] main::$0 = $ff - main::i#2 [ main::i#2 main::$0 ] (  [ main::i#2 main::$0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [3] table[main::$0] = 0 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [2] main::$0 = $ff - main::i#2 [ main::i#2 main::$0 ] (  [ main::i#2 main::$0 ] { }  ) always clobbers reg byte a 
Statement [3] table[main::$0] = 0 [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::$0 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 27.5: zp[1]:2 [ main::i#2 main::i#1 ] 22: zp[1]:3 [ main::$0 ] 
Uplift Scope [] 

Uplifting [main] best 331 combination reg byte y [ main::i#2 main::i#1 ] reg byte x [ main::$0 ] 
Uplifting [] best 331 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// java.lang.NullPointerException during Pass2TypeInference.java
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
// Initialize the mulf_sqr multiplication tables with f(x)=int(x*x/2) and g(x) = f(1-x) 
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::$0 = $ff - main::i#2 -- vbuxx=vbuc1_minus_vbuyy 
    tya
    eor #$ff
    tax
    axs #-$ff-1
    // [3] table[main::$0] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta table,x
    // [4] main::i#1 = ++ main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [5] if(main::i#1!=$81) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$81
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data
  table: .fill $100, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
byte~ main::$0 reg byte x 22.0
byte main::i
byte main::i#1 reg byte y 16.5
byte main::i#2 reg byte y 11.0
const byte* table[$100]  = { fill( $100, 0) }

reg byte y [ main::i#2 main::i#1 ]
reg byte x [ main::$0 ]


FINAL ASSEMBLER
Score: 241

  // File Comments
// java.lang.NullPointerException during Pass2TypeInference.java
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
// Initialize the mulf_sqr multiplication tables with f(x)=int(x*x/2) and g(x) = f(1-x) 
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // 255-i
    // [2] main::$0 = $ff - main::i#2 -- vbuxx=vbuc1_minus_vbuyy 
    tya
    eor #$ff
    tax
    axs #-$ff-1
    // table[255-i] = 0
    // [3] table[main::$0] = 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta table,x
    // for( byte i:0..128)
    // [4] main::i#1 = ++ main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [5] if(main::i#1!=$81) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$81
    bne __b1
    // main::@return
    // }
    // [6] return 
    rts
}
  // File Data
  table: .fill $100, 0

