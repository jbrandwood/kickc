Resolved forward reference PALETTE to (const byte*) PALETTE
Resolved forward reference PALETTE to (const byte*) PALETTE
Resolved forward reference FLOOR to (const byte*) FLOOR
Resolved forward reference FLAG to (const byte*) FLAG
Resolved forward reference SPRITES to (const struct SpriteData*) SPRITES
Resolved forward reference SPRITES to (const struct SpriteData*) SPRITES
Inlined call call disableVideoOutput 
Inlined call call disableAudioOutput 
Inlined call call clearVBlankFlag 
Inlined call call waitForVBlank 
Inlined call call waitForVBlank 
Inlined call call ppuDataPrepare (nomodify void*) ppuDataFill::ppuData 
Inlined call call ppuDataPut (byte) ppuDataFill::val 
Inlined call call ppuDataPrepare (nomodify void*) ppuDataTransfer::ppuData 
Inlined call call ppuDataPut *((byte*) ppuDataTransfer::cpuSrc) 
Inlined call call ppuDataPrepare (nomodify void*) ppuDataPutTile::ppuData 
Inlined call call ppuDataPut *((byte*) ppuDataPutTile::tile + (number) 0) 
Inlined call call ppuDataPut *((byte*) ppuDataPutTile::tile + (number) 1) 
Inlined call call ppuDataPrepare (void*)(byte*~) ppuDataPutTile::$3 
Inlined call call ppuDataPut *((byte*) ppuDataPutTile::tile + (number) 2) 
Inlined call call ppuDataPut *((byte*) ppuDataPutTile::tile + (number) 3) 
Inlined call call ppuDataPrepare (nomodify void*) ppuDataSet::ppuData 
Inlined call call ppuDataPut (byte) ppuDataSet::val 
Inlined call call initNES 
Inlined call call enableVideoOutput 
Inlined call call ppuSpriteBufferDmaTransfer (const nomodify struct SpriteData*) OAM_BUFFER 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) ppuDataFill((nomodify void*) ppuDataFill::ppuData , (byte) ppuDataFill::val , (word) ppuDataFill::size)
ppuDataFill: scope:[ppuDataFill]  from main::@10 main::@9
  (byte) ppuDataFill::val#8 ← phi( main::@10/(byte) ppuDataFill::val#1 main::@9/(byte) ppuDataFill::val#0 )
  (word) ppuDataFill::size#7 ← phi( main::@10/(word) ppuDataFill::size#1 main::@9/(word) ppuDataFill::size#0 )
  (nomodify void*) ppuDataFill::ppuData#2 ← phi( main::@10/(nomodify void*) ppuDataFill::ppuData#1 main::@9/(nomodify void*) ppuDataFill::ppuData#0 )
  (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 ← (nomodify void*) ppuDataFill::ppuData#2
  to:ppuDataFill::ppuDataPrepare1
ppuDataFill::ppuDataPrepare1: scope:[ppuDataFill]  from ppuDataFill
  (byte) ppuDataFill::val#6 ← phi( ppuDataFill/(byte) ppuDataFill::val#8 )
  (word) ppuDataFill::size#5 ← phi( ppuDataFill/(word) ppuDataFill::size#7 )
  (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#1 ← phi( ppuDataFill/(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 )
  (byte~) ppuDataFill::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#1
  (byte*~) ppuDataFill::ppuDataPrepare1_$4 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataFill::ppuDataPrepare1_$2 ← (byte*~) ppuDataFill::ppuDataPrepare1_$4 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *((byte*~) ppuDataFill::ppuDataPrepare1_$2) ← (byte~) ppuDataFill::ppuDataPrepare1_$0
  (byte~) ppuDataFill::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#1
  (byte*~) ppuDataFill::ppuDataPrepare1_$5 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataFill::ppuDataPrepare1_$3 ← (byte*~) ppuDataFill::ppuDataPrepare1_$5 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *((byte*~) ppuDataFill::ppuDataPrepare1_$3) ← (byte~) ppuDataFill::ppuDataPrepare1_$1
  to:ppuDataFill::@3
ppuDataFill::@3: scope:[ppuDataFill]  from ppuDataFill::ppuDataPrepare1
  (byte) ppuDataFill::val#4 ← phi( ppuDataFill::ppuDataPrepare1/(byte) ppuDataFill::val#6 )
  (word) ppuDataFill::size#3 ← phi( ppuDataFill::ppuDataPrepare1/(word) ppuDataFill::size#5 )
  (word) ppuDataFill::i#0 ← (word) 0
  to:ppuDataFill::@1
ppuDataFill::@1: scope:[ppuDataFill]  from ppuDataFill::@3 ppuDataFill::@4
  (byte) ppuDataFill::val#3 ← phi( ppuDataFill::@3/(byte) ppuDataFill::val#4 ppuDataFill::@4/(byte) ppuDataFill::val#5 )
  (word) ppuDataFill::size#2 ← phi( ppuDataFill::@3/(word) ppuDataFill::size#3 ppuDataFill::@4/(word) ppuDataFill::size#4 )
  (word) ppuDataFill::i#2 ← phi( ppuDataFill::@3/(word) ppuDataFill::i#0 ppuDataFill::@4/(word) ppuDataFill::i#1 )
  (bool~) ppuDataFill::$1 ← (word) ppuDataFill::i#2 < (word) ppuDataFill::size#2
  if((bool~) ppuDataFill::$1) goto ppuDataFill::@2
  to:ppuDataFill::@return
ppuDataFill::@2: scope:[ppuDataFill]  from ppuDataFill::@1
  (word) ppuDataFill::size#8 ← phi( ppuDataFill::@1/(word) ppuDataFill::size#2 )
  (word) ppuDataFill::i#5 ← phi( ppuDataFill::@1/(word) ppuDataFill::i#2 )
  (byte) ppuDataFill::val#2 ← phi( ppuDataFill::@1/(byte) ppuDataFill::val#3 )
  (byte) ppuDataFill::ppuDataPut1_val#0 ← (byte) ppuDataFill::val#2
  to:ppuDataFill::ppuDataPut1
ppuDataFill::ppuDataPut1: scope:[ppuDataFill]  from ppuDataFill::@2
  (byte) ppuDataFill::val#7 ← phi( ppuDataFill::@2/(byte) ppuDataFill::val#2 )
  (word) ppuDataFill::size#6 ← phi( ppuDataFill::@2/(word) ppuDataFill::size#8 )
  (word) ppuDataFill::i#4 ← phi( ppuDataFill::@2/(word) ppuDataFill::i#5 )
  (byte) ppuDataFill::ppuDataPut1_val#1 ← phi( ppuDataFill::@2/(byte) ppuDataFill::ppuDataPut1_val#0 )
  (byte*~) ppuDataFill::ppuDataPut1_$1 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataFill::ppuDataPut1_$0 ← (byte*~) ppuDataFill::ppuDataPut1_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
  *((byte*~) ppuDataFill::ppuDataPut1_$0) ← (byte) ppuDataFill::ppuDataPut1_val#1
  to:ppuDataFill::@4
ppuDataFill::@4: scope:[ppuDataFill]  from ppuDataFill::ppuDataPut1
  (byte) ppuDataFill::val#5 ← phi( ppuDataFill::ppuDataPut1/(byte) ppuDataFill::val#7 )
  (word) ppuDataFill::size#4 ← phi( ppuDataFill::ppuDataPut1/(word) ppuDataFill::size#6 )
  (word) ppuDataFill::i#3 ← phi( ppuDataFill::ppuDataPut1/(word) ppuDataFill::i#4 )
  (word) ppuDataFill::i#1 ← ++ (word) ppuDataFill::i#3
  to:ppuDataFill::@1
ppuDataFill::@return: scope:[ppuDataFill]  from ppuDataFill::@1
  return 
  to:@return

(void()) ppuDataTransfer((nomodify void*) ppuDataTransfer::ppuData , (nomodify void*) ppuDataTransfer::cpuData , (word) ppuDataTransfer::size)
ppuDataTransfer: scope:[ppuDataTransfer]  from main::@8
  (word) ppuDataTransfer::size#6 ← phi( main::@8/(word) ppuDataTransfer::size#0 )
  (nomodify void*) ppuDataTransfer::cpuData#3 ← phi( main::@8/(nomodify void*) ppuDataTransfer::cpuData#0 )
  (nomodify void*) ppuDataTransfer::ppuData#1 ← phi( main::@8/(nomodify void*) ppuDataTransfer::ppuData#0 )
  (nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#0 ← (nomodify void*) ppuDataTransfer::ppuData#1
  to:ppuDataTransfer::ppuDataPrepare1
ppuDataTransfer::ppuDataPrepare1: scope:[ppuDataTransfer]  from ppuDataTransfer
  (word) ppuDataTransfer::size#4 ← phi( ppuDataTransfer/(word) ppuDataTransfer::size#6 )
  (nomodify void*) ppuDataTransfer::cpuData#2 ← phi( ppuDataTransfer/(nomodify void*) ppuDataTransfer::cpuData#3 )
  (nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#1 ← phi( ppuDataTransfer/(nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#0 )
  (byte~) ppuDataTransfer::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#1
  (byte*~) ppuDataTransfer::ppuDataPrepare1_$4 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataTransfer::ppuDataPrepare1_$2 ← (byte*~) ppuDataTransfer::ppuDataPrepare1_$4 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *((byte*~) ppuDataTransfer::ppuDataPrepare1_$2) ← (byte~) ppuDataTransfer::ppuDataPrepare1_$0
  (byte~) ppuDataTransfer::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#1
  (byte*~) ppuDataTransfer::ppuDataPrepare1_$5 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataTransfer::ppuDataPrepare1_$3 ← (byte*~) ppuDataTransfer::ppuDataPrepare1_$5 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *((byte*~) ppuDataTransfer::ppuDataPrepare1_$3) ← (byte~) ppuDataTransfer::ppuDataPrepare1_$1
  to:ppuDataTransfer::@3
ppuDataTransfer::@3: scope:[ppuDataTransfer]  from ppuDataTransfer::ppuDataPrepare1
  (word) ppuDataTransfer::size#2 ← phi( ppuDataTransfer::ppuDataPrepare1/(word) ppuDataTransfer::size#4 )
  (nomodify void*) ppuDataTransfer::cpuData#1 ← phi( ppuDataTransfer::ppuDataPrepare1/(nomodify void*) ppuDataTransfer::cpuData#2 )
  (byte*) ppuDataTransfer::cpuSrc#0 ← (byte*)(nomodify void*) ppuDataTransfer::cpuData#1
  (word) ppuDataTransfer::i#0 ← (word) 0
  to:ppuDataTransfer::@1
ppuDataTransfer::@1: scope:[ppuDataTransfer]  from ppuDataTransfer::@3 ppuDataTransfer::@4
  (byte*) ppuDataTransfer::cpuSrc#4 ← phi( ppuDataTransfer::@3/(byte*) ppuDataTransfer::cpuSrc#0 ppuDataTransfer::@4/(byte*) ppuDataTransfer::cpuSrc#1 )
  (word) ppuDataTransfer::size#1 ← phi( ppuDataTransfer::@3/(word) ppuDataTransfer::size#2 ppuDataTransfer::@4/(word) ppuDataTransfer::size#3 )
  (word) ppuDataTransfer::i#2 ← phi( ppuDataTransfer::@3/(word) ppuDataTransfer::i#0 ppuDataTransfer::@4/(word) ppuDataTransfer::i#1 )
  (bool~) ppuDataTransfer::$1 ← (word) ppuDataTransfer::i#2 < (word) ppuDataTransfer::size#1
  if((bool~) ppuDataTransfer::$1) goto ppuDataTransfer::@2
  to:ppuDataTransfer::@return
ppuDataTransfer::@2: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  (word) ppuDataTransfer::size#7 ← phi( ppuDataTransfer::@1/(word) ppuDataTransfer::size#1 )
  (word) ppuDataTransfer::i#5 ← phi( ppuDataTransfer::@1/(word) ppuDataTransfer::i#2 )
  (byte*) ppuDataTransfer::cpuSrc#2 ← phi( ppuDataTransfer::@1/(byte*) ppuDataTransfer::cpuSrc#4 )
  (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2)
  to:ppuDataTransfer::ppuDataPut1
ppuDataTransfer::ppuDataPut1: scope:[ppuDataTransfer]  from ppuDataTransfer::@2
  (word) ppuDataTransfer::size#5 ← phi( ppuDataTransfer::@2/(word) ppuDataTransfer::size#7 )
  (word) ppuDataTransfer::i#4 ← phi( ppuDataTransfer::@2/(word) ppuDataTransfer::i#5 )
  (byte*) ppuDataTransfer::cpuSrc#5 ← phi( ppuDataTransfer::@2/(byte*) ppuDataTransfer::cpuSrc#2 )
  (byte) ppuDataTransfer::ppuDataPut1_val#1 ← phi( ppuDataTransfer::@2/(byte) ppuDataTransfer::ppuDataPut1_val#0 )
  (byte*~) ppuDataTransfer::ppuDataPut1_$1 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataTransfer::ppuDataPut1_$0 ← (byte*~) ppuDataTransfer::ppuDataPut1_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
  *((byte*~) ppuDataTransfer::ppuDataPut1_$0) ← (byte) ppuDataTransfer::ppuDataPut1_val#1
  to:ppuDataTransfer::@4
ppuDataTransfer::@4: scope:[ppuDataTransfer]  from ppuDataTransfer::ppuDataPut1
  (word) ppuDataTransfer::size#3 ← phi( ppuDataTransfer::ppuDataPut1/(word) ppuDataTransfer::size#5 )
  (word) ppuDataTransfer::i#3 ← phi( ppuDataTransfer::ppuDataPut1/(word) ppuDataTransfer::i#4 )
  (byte*) ppuDataTransfer::cpuSrc#3 ← phi( ppuDataTransfer::ppuDataPut1/(byte*) ppuDataTransfer::cpuSrc#5 )
  (byte*) ppuDataTransfer::cpuSrc#1 ← ++ (byte*) ppuDataTransfer::cpuSrc#3
  (word) ppuDataTransfer::i#1 ← ++ (word) ppuDataTransfer::i#3
  to:ppuDataTransfer::@1
ppuDataTransfer::@return: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  return 
  to:@return

(void()) ppuDataPutTile((nomodify void*) ppuDataPutTile::ppuData , (byte*) ppuDataPutTile::tile)
ppuDataPutTile: scope:[ppuDataPutTile]  from main::@2 main::@3
  (byte*) ppuDataPutTile::tile#10 ← phi( main::@2/(byte*) ppuDataPutTile::tile#0 main::@3/(byte*) ppuDataPutTile::tile#1 )
  (nomodify void*) ppuDataPutTile::ppuData#2 ← phi( main::@2/(nomodify void*) ppuDataPutTile::ppuData#0 main::@3/(nomodify void*) ppuDataPutTile::ppuData#1 )
  (nomodify void*) ppuDataPutTile::ppuDataPrepare1_ppuData#0 ← (nomodify void*) ppuDataPutTile::ppuData#2
  to:ppuDataPutTile::ppuDataPrepare1
ppuDataPutTile::ppuDataPrepare1: scope:[ppuDataPutTile]  from ppuDataPutTile
  (nomodify void*) ppuDataPutTile::ppuData#8 ← phi( ppuDataPutTile/(nomodify void*) ppuDataPutTile::ppuData#2 )
  (byte*) ppuDataPutTile::tile#6 ← phi( ppuDataPutTile/(byte*) ppuDataPutTile::tile#10 )
  (nomodify void*) ppuDataPutTile::ppuDataPrepare1_ppuData#1 ← phi( ppuDataPutTile/(nomodify void*) ppuDataPutTile::ppuDataPrepare1_ppuData#0 )
  (byte~) ppuDataPutTile::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataPutTile::ppuDataPrepare1_ppuData#1
  (byte*~) ppuDataPutTile::ppuDataPrepare1_$4 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataPutTile::ppuDataPrepare1_$2 ← (byte*~) ppuDataPutTile::ppuDataPrepare1_$4 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *((byte*~) ppuDataPutTile::ppuDataPrepare1_$2) ← (byte~) ppuDataPutTile::ppuDataPrepare1_$0
  (byte~) ppuDataPutTile::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataPutTile::ppuDataPrepare1_ppuData#1
  (byte*~) ppuDataPutTile::ppuDataPrepare1_$5 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataPutTile::ppuDataPrepare1_$3 ← (byte*~) ppuDataPutTile::ppuDataPrepare1_$5 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *((byte*~) ppuDataPutTile::ppuDataPrepare1_$3) ← (byte~) ppuDataPutTile::ppuDataPrepare1_$1
  to:ppuDataPutTile::@1
ppuDataPutTile::@1: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPrepare1
  (nomodify void*) ppuDataPutTile::ppuData#7 ← phi( ppuDataPutTile::ppuDataPrepare1/(nomodify void*) ppuDataPutTile::ppuData#8 )
  (byte*) ppuDataPutTile::tile#2 ← phi( ppuDataPutTile::ppuDataPrepare1/(byte*) ppuDataPutTile::tile#6 )
  (byte) ppuDataPutTile::ppuDataPut1_val#0 ← *((byte*) ppuDataPutTile::tile#2 + (number) 0)
  to:ppuDataPutTile::ppuDataPut1
ppuDataPutTile::ppuDataPut1: scope:[ppuDataPutTile]  from ppuDataPutTile::@1
  (nomodify void*) ppuDataPutTile::ppuData#6 ← phi( ppuDataPutTile::@1/(nomodify void*) ppuDataPutTile::ppuData#7 )
  (byte*) ppuDataPutTile::tile#7 ← phi( ppuDataPutTile::@1/(byte*) ppuDataPutTile::tile#2 )
  (byte) ppuDataPutTile::ppuDataPut1_val#1 ← phi( ppuDataPutTile::@1/(byte) ppuDataPutTile::ppuDataPut1_val#0 )
  (byte*~) ppuDataPutTile::ppuDataPut1_$1 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataPutTile::ppuDataPut1_$0 ← (byte*~) ppuDataPutTile::ppuDataPut1_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
  *((byte*~) ppuDataPutTile::ppuDataPut1_$0) ← (byte) ppuDataPutTile::ppuDataPut1_val#1
  to:ppuDataPutTile::@2
ppuDataPutTile::@2: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPut1
  (nomodify void*) ppuDataPutTile::ppuData#5 ← phi( ppuDataPutTile::ppuDataPut1/(nomodify void*) ppuDataPutTile::ppuData#6 )
  (byte*) ppuDataPutTile::tile#3 ← phi( ppuDataPutTile::ppuDataPut1/(byte*) ppuDataPutTile::tile#7 )
  (byte) ppuDataPutTile::ppuDataPut2_val#0 ← *((byte*) ppuDataPutTile::tile#3 + (number) 1)
  to:ppuDataPutTile::ppuDataPut2
ppuDataPutTile::ppuDataPut2: scope:[ppuDataPutTile]  from ppuDataPutTile::@2
  (byte*) ppuDataPutTile::tile#12 ← phi( ppuDataPutTile::@2/(byte*) ppuDataPutTile::tile#3 )
  (nomodify void*) ppuDataPutTile::ppuData#4 ← phi( ppuDataPutTile::@2/(nomodify void*) ppuDataPutTile::ppuData#5 )
  (byte) ppuDataPutTile::ppuDataPut2_val#1 ← phi( ppuDataPutTile::@2/(byte) ppuDataPutTile::ppuDataPut2_val#0 )
  (byte*~) ppuDataPutTile::ppuDataPut2_$1 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataPutTile::ppuDataPut2_$0 ← (byte*~) ppuDataPutTile::ppuDataPut2_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
  *((byte*~) ppuDataPutTile::ppuDataPut2_$0) ← (byte) ppuDataPutTile::ppuDataPut2_val#1
  to:ppuDataPutTile::@3
ppuDataPutTile::@3: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPut2
  (byte*) ppuDataPutTile::tile#11 ← phi( ppuDataPutTile::ppuDataPut2/(byte*) ppuDataPutTile::tile#12 )
  (nomodify void*) ppuDataPutTile::ppuData#3 ← phi( ppuDataPutTile::ppuDataPut2/(nomodify void*) ppuDataPutTile::ppuData#4 )
  (byte*~) ppuDataPutTile::$7 ← (byte*)(nomodify void*) ppuDataPutTile::ppuData#3
  (byte*~) ppuDataPutTile::$3 ← (byte*~) ppuDataPutTile::$7 + (number) $20
  (nomodify void*) ppuDataPutTile::ppuDataPrepare2_ppuData#0 ← (void*)(byte*~) ppuDataPutTile::$3
  to:ppuDataPutTile::ppuDataPrepare2
ppuDataPutTile::ppuDataPrepare2: scope:[ppuDataPutTile]  from ppuDataPutTile::@3
  (byte*) ppuDataPutTile::tile#8 ← phi( ppuDataPutTile::@3/(byte*) ppuDataPutTile::tile#11 )
  (nomodify void*) ppuDataPutTile::ppuDataPrepare2_ppuData#1 ← phi( ppuDataPutTile::@3/(nomodify void*) ppuDataPutTile::ppuDataPrepare2_ppuData#0 )
  (byte~) ppuDataPutTile::ppuDataPrepare2_$0 ← > (nomodify void*) ppuDataPutTile::ppuDataPrepare2_ppuData#1
  (byte*~) ppuDataPutTile::ppuDataPrepare2_$4 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataPutTile::ppuDataPrepare2_$2 ← (byte*~) ppuDataPutTile::ppuDataPrepare2_$4 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *((byte*~) ppuDataPutTile::ppuDataPrepare2_$2) ← (byte~) ppuDataPutTile::ppuDataPrepare2_$0
  (byte~) ppuDataPutTile::ppuDataPrepare2_$1 ← < (nomodify void*) ppuDataPutTile::ppuDataPrepare2_ppuData#1
  (byte*~) ppuDataPutTile::ppuDataPrepare2_$5 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataPutTile::ppuDataPrepare2_$3 ← (byte*~) ppuDataPutTile::ppuDataPrepare2_$5 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *((byte*~) ppuDataPutTile::ppuDataPrepare2_$3) ← (byte~) ppuDataPutTile::ppuDataPrepare2_$1
  to:ppuDataPutTile::@4
ppuDataPutTile::@4: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPrepare2
  (byte*) ppuDataPutTile::tile#4 ← phi( ppuDataPutTile::ppuDataPrepare2/(byte*) ppuDataPutTile::tile#8 )
  (byte) ppuDataPutTile::ppuDataPut3_val#0 ← *((byte*) ppuDataPutTile::tile#4 + (number) 2)
  to:ppuDataPutTile::ppuDataPut3
ppuDataPutTile::ppuDataPut3: scope:[ppuDataPutTile]  from ppuDataPutTile::@4
  (byte*) ppuDataPutTile::tile#9 ← phi( ppuDataPutTile::@4/(byte*) ppuDataPutTile::tile#4 )
  (byte) ppuDataPutTile::ppuDataPut3_val#1 ← phi( ppuDataPutTile::@4/(byte) ppuDataPutTile::ppuDataPut3_val#0 )
  (byte*~) ppuDataPutTile::ppuDataPut3_$1 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataPutTile::ppuDataPut3_$0 ← (byte*~) ppuDataPutTile::ppuDataPut3_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
  *((byte*~) ppuDataPutTile::ppuDataPut3_$0) ← (byte) ppuDataPutTile::ppuDataPut3_val#1
  to:ppuDataPutTile::@5
ppuDataPutTile::@5: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPut3
  (byte*) ppuDataPutTile::tile#5 ← phi( ppuDataPutTile::ppuDataPut3/(byte*) ppuDataPutTile::tile#9 )
  (byte) ppuDataPutTile::ppuDataPut4_val#0 ← *((byte*) ppuDataPutTile::tile#5 + (number) 3)
  to:ppuDataPutTile::ppuDataPut4
ppuDataPutTile::ppuDataPut4: scope:[ppuDataPutTile]  from ppuDataPutTile::@5
  (byte) ppuDataPutTile::ppuDataPut4_val#1 ← phi( ppuDataPutTile::@5/(byte) ppuDataPutTile::ppuDataPut4_val#0 )
  (byte*~) ppuDataPutTile::ppuDataPut4_$1 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataPutTile::ppuDataPut4_$0 ← (byte*~) ppuDataPutTile::ppuDataPut4_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
  *((byte*~) ppuDataPutTile::ppuDataPut4_$0) ← (byte) ppuDataPutTile::ppuDataPut4_val#1
  to:ppuDataPutTile::@return
ppuDataPutTile::@return: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPut4
  return 
  to:@return

(void()) main()
main: scope:[main]  from @1
  to:main::initNES1
main::initNES1: scope:[main]  from main
  asm { cld ldx#$ff txs  }
  to:main::initNES1_disableVideoOutput1
main::initNES1_disableVideoOutput1: scope:[main]  from main::initNES1
  (byte*~) main::initNES1_disableVideoOutput1_$2 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::initNES1_disableVideoOutput1_$0 ← (byte*~) main::initNES1_disableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL
  *((byte*~) main::initNES1_disableVideoOutput1_$0) ← (number) 0
  (byte*~) main::initNES1_disableVideoOutput1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::initNES1_disableVideoOutput1_$1 ← (byte*~) main::initNES1_disableVideoOutput1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK
  *((byte*~) main::initNES1_disableVideoOutput1_$1) ← (number) 0
  to:main::initNES1_disableAudioOutput1
main::initNES1_disableAudioOutput1: scope:[main]  from main::initNES1_disableVideoOutput1
  *((const nomodify byte*) FR_COUNTER) ← (number) $40
  (byte*~) main::initNES1_disableAudioOutput1_$1 ← (byte*)(const struct RICOH_2A03*) APU
  (byte*~) main::initNES1_disableAudioOutput1_$0 ← (byte*~) main::initNES1_disableAudioOutput1_$1 + (const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
  *((byte*~) main::initNES1_disableAudioOutput1_$0) ← (number) $40
  to:main::initNES1_clearVBlankFlag1
main::initNES1_clearVBlankFlag1: scope:[main]  from main::initNES1_disableAudioOutput1
  asm { ldaPPU_PPUSTATUS  }
  to:main::initNES1_waitForVBlank1
main::initNES1_waitForVBlank1: scope:[main]  from main::initNES1_clearVBlankFlag1
  to:main::initNES1_waitForVBlank1_@1
main::initNES1_waitForVBlank1_@1: scope:[main]  from main::initNES1_waitForVBlank1 main::initNES1_waitForVBlank1_@1
  (byte*~) main::initNES1_waitForVBlank1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::initNES1_waitForVBlank1_$2 ← (byte*~) main::initNES1_waitForVBlank1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
  (number~) main::initNES1_waitForVBlank1_$0 ← *((byte*~) main::initNES1_waitForVBlank1_$2) & (number) $80
  (bool~) main::initNES1_waitForVBlank1_$4 ← (number) 0 != (number~) main::initNES1_waitForVBlank1_$0
  (bool~) main::initNES1_waitForVBlank1_$1 ← ! (bool~) main::initNES1_waitForVBlank1_$4
  if((bool~) main::initNES1_waitForVBlank1_$1) goto main::initNES1_waitForVBlank1_@1
  to:main::initNES1_@6
main::initNES1_@6: scope:[main]  from main::initNES1_waitForVBlank1_@1
  (byte) main::initNES1_i#0 ← (byte) 0
  to:main::initNES1_@1
main::initNES1_@1: scope:[main]  from main::initNES1_@1 main::initNES1_@6
  (byte) main::initNES1_i#2 ← phi( main::initNES1_@1/(byte) main::initNES1_i#1 main::initNES1_@6/(byte) main::initNES1_i#0 )
  *((const nomodify byte*) MEMORY+(number) 0 + (byte) main::initNES1_i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $100 + (byte) main::initNES1_i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $200 + (byte) main::initNES1_i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $300 + (byte) main::initNES1_i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $400 + (byte) main::initNES1_i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $500 + (byte) main::initNES1_i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $600 + (byte) main::initNES1_i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $700 + (byte) main::initNES1_i#2) ← (number) 0
  (byte) main::initNES1_i#1 ← ++ (byte) main::initNES1_i#2
  (bool~) main::initNES1_$5 ← (number) 0 != (byte) main::initNES1_i#1
  if((bool~) main::initNES1_$5) goto main::initNES1_@1
  to:main::initNES1_waitForVBlank2
main::initNES1_waitForVBlank2: scope:[main]  from main::initNES1_@1
  to:main::initNES1_waitForVBlank2_@1
main::initNES1_waitForVBlank2_@1: scope:[main]  from main::initNES1_waitForVBlank2 main::initNES1_waitForVBlank2_@1
  (byte*~) main::initNES1_waitForVBlank2_$3 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::initNES1_waitForVBlank2_$2 ← (byte*~) main::initNES1_waitForVBlank2_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
  (number~) main::initNES1_waitForVBlank2_$0 ← *((byte*~) main::initNES1_waitForVBlank2_$2) & (number) $80
  (bool~) main::initNES1_waitForVBlank2_$4 ← (number) 0 != (number~) main::initNES1_waitForVBlank2_$0
  (bool~) main::initNES1_waitForVBlank2_$1 ← ! (bool~) main::initNES1_waitForVBlank2_$4
  if((bool~) main::initNES1_waitForVBlank2_$1) goto main::initNES1_waitForVBlank2_@1
  to:main::initNES1_@7
main::initNES1_@7: scope:[main]  from main::initNES1_waitForVBlank2_@1
  asm { ldaPPU_PPUSTATUS  }
  to:main::@8
main::@8: scope:[main]  from main::initNES1_@7
  (byte~) main::$1 ← sizeof  (const byte*) PALETTE
  (nomodify void*) ppuDataTransfer::ppuData#0 ← (void*)(const nomodify byte*) PPU_PALETTE
  (nomodify void*) ppuDataTransfer::cpuData#0 ← (void*)(const byte*) PALETTE
  (word) ppuDataTransfer::size#0 ← (byte~) main::$1
  call ppuDataTransfer 
  to:main::@9
main::@9: scope:[main]  from main::@8
  (nomodify void*) ppuDataFill::ppuData#0 ← (void*)(const nomodify byte*) PPU_NAME_TABLE_0
  (byte) ppuDataFill::val#0 ← (number) $fc
  (word) ppuDataFill::size#0 ← (number) $3c0
  call ppuDataFill 
  to:main::@10
main::@10: scope:[main]  from main::@9
  (nomodify void*) ppuDataFill::ppuData#1 ← (void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0
  (byte) ppuDataFill::val#1 ← (number) 0
  (word) ppuDataFill::size#1 ← (number) $40
  call ppuDataFill 
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte) main::x#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@12
  (byte) main::x#2 ← phi( main::@11/(byte) main::x#0 main::@12/(byte) main::x#1 )
  (bool~) main::$7 ← (byte) main::x#2 < (number) $20
  if((bool~) main::$7) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  (byte) main::x#3 ← phi( main::@1/(byte) main::x#2 )
  (byte*~) main::$8 ← (const nomodify byte*) PPU_NAME_TABLE_0+(number) $14*(number) $20 + (byte) main::x#3
  (nomodify void*) ppuDataPutTile::ppuData#0 ← (void*)(byte*~) main::$8
  (byte*) ppuDataPutTile::tile#0 ← (const byte*) FLOOR
  call ppuDataPutTile 
  to:main::@12
main::@12: scope:[main]  from main::@2
  (byte) main::x#4 ← phi( main::@2/(byte) main::x#3 )
  (byte) main::x#1 ← (byte) main::x#4 + (number) 2
  to:main::@1
main::@3: scope:[main]  from main::@1
  (nomodify void*) ppuDataPutTile::ppuData#1 ← (void*)(const nomodify byte*) PPU_NAME_TABLE_0+(number) $12*(number) $20+(number) $1c
  (byte*) ppuDataPutTile::tile#1 ← (const byte*) FLAG
  call ppuDataPutTile 
  to:main::@13
main::@13: scope:[main]  from main::@3
  (byte) main::i#0 ← (byte) 0
  to:main::@4
main::@4: scope:[main]  from main::@13 main::@5
  (byte) main::i#2 ← phi( main::@13/(byte) main::i#0 main::@5/(byte) main::i#1 )
  (byte~) main::$10 ← sizeof  (const struct SpriteData*) SPRITES
  (bool~) main::$11 ← (byte) main::i#2 < (byte~) main::$10
  if((bool~) main::$11) goto main::@5
  to:main::@6
main::@5: scope:[main]  from main::@4
  (byte) main::i#3 ← phi( main::@4/(byte) main::i#2 )
  (byte*~) main::$14 ← (byte*)(const struct SpriteData*) SPRITES
  *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER + (byte) main::i#3) ← *((byte*~) main::$14 + (byte) main::i#3)
  (byte) main::i#1 ← ++ (byte) main::i#3
  to:main::@4
main::@6: scope:[main]  from main::@4
  (byte*~) main::$15 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::$12 ← (byte*~) main::$15 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
  *((byte*~) main::$12) ← (number) 0
  (byte*~) main::$16 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::$13 ← (byte*~) main::$16 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
  *((byte*~) main::$13) ← (number) -8
  to:main::enableVideoOutput1
main::enableVideoOutput1: scope:[main]  from main::@6
  (byte*~) main::enableVideoOutput1_$2 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::enableVideoOutput1_$0 ← (byte*~) main::enableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL
  *((byte*~) main::enableVideoOutput1_$0) ← (number) $80
  (byte*~) main::enableVideoOutput1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::enableVideoOutput1_$1 ← (byte*~) main::enableVideoOutput1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK
  *((byte*~) main::enableVideoOutput1_$1) ← (number) $18
  to:main::@7
main::@7: scope:[main]  from main::@7 main::enableVideoOutput1
  (bool~) main::$17 ← (number) 0 != (number) 1
  if((bool~) main::$17) goto main::@7
  to:main::@return
main::@return: scope:[main]  from main::@7
  return 
  to:@return

interrupt(HARDWARE_STACK)(void()) vblank()
vblank: scope:[vblank]  from
  (struct SpriteData*) vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0 ← (const nomodify struct SpriteData*) OAM_BUFFER
  to:vblank::ppuSpriteBufferDmaTransfer1
vblank::ppuSpriteBufferDmaTransfer1: scope:[vblank]  from vblank
  (struct SpriteData*) vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#1 ← phi( vblank/(struct SpriteData*) vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0 )
  (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$1 ← (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR
  *((byte*~) vblank::ppuSpriteBufferDmaTransfer1_$1) ← (number) 0
  (byte~) vblank::ppuSpriteBufferDmaTransfer1_$0 ← > (struct SpriteData*) vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#1
  (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$4 ← (byte*)(const struct RICOH_2A03*) APU
  (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$2 ← (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$4 + (const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA
  *((byte*~) vblank::ppuSpriteBufferDmaTransfer1_$2) ← (byte~) vblank::ppuSpriteBufferDmaTransfer1_$0
  to:vblank::@4
vblank::@4: scope:[vblank]  from vblank::ppuSpriteBufferDmaTransfer1
  (byte*~) vblank::$33 ← (byte*)(const struct RICOH_2A03*) APU
  (byte*~) vblank::$29 ← (byte*~) vblank::$33 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
  *((byte*~) vblank::$29) ← (number) 1
  (byte*~) vblank::$34 ← (byte*)(const struct RICOH_2A03*) APU
  (byte*~) vblank::$30 ← (byte*~) vblank::$34 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
  *((byte*~) vblank::$30) ← (number) 0
  (byte*~) vblank::$35 ← (byte*)(const struct RICOH_2A03*) APU
  (byte*~) vblank::$31 ← (byte*~) vblank::$35 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
  (number~) vblank::$1 ← *((byte*~) vblank::$31) & (number) 1
  (bool~) vblank::$37 ← (number) 0 != (number~) vblank::$1
  (bool~) vblank::$2 ← ! (bool~) vblank::$37
  if((bool~) vblank::$2) goto vblank::@1
  to:vblank::@2
vblank::@1: scope:[vblank]  from vblank::@2 vblank::@4
  (byte*~) vblank::$36 ← (byte*)(const struct RICOH_2A03*) APU
  (byte*~) vblank::$32 ← (byte*~) vblank::$36 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
  (number~) vblank::$3 ← *((byte*~) vblank::$32) & (number) 1
  (bool~) vblank::$38 ← (number) 0 != (number~) vblank::$3
  (bool~) vblank::$4 ← ! (bool~) vblank::$38
  if((bool~) vblank::$4) goto vblank::@return
  to:vblank::@3
vblank::@2: scope:[vblank]  from vblank::@4
  (number~) vblank::$14 ← (number) 0 * (const byte) SIZEOF_STRUCT_SPRITEDATA
  *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (number~) vblank::$14) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (number~) vblank::$14)
  (number~) vblank::$16 ← (number) 1 * (const byte) SIZEOF_STRUCT_SPRITEDATA
  *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (number~) vblank::$16) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (number~) vblank::$16)
  (number~) vblank::$18 ← (number) 2 * (const byte) SIZEOF_STRUCT_SPRITEDATA
  *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (number~) vblank::$18) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (number~) vblank::$18)
  (number~) vblank::$20 ← (number) 3 * (const byte) SIZEOF_STRUCT_SPRITEDATA
  *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (number~) vblank::$20) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (number~) vblank::$20)
  to:vblank::@1
vblank::@3: scope:[vblank]  from vblank::@1
  (number~) vblank::$22 ← (number) 0 * (const byte) SIZEOF_STRUCT_SPRITEDATA
  *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (number~) vblank::$22) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (number~) vblank::$22)
  (number~) vblank::$24 ← (number) 1 * (const byte) SIZEOF_STRUCT_SPRITEDATA
  *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (number~) vblank::$24) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (number~) vblank::$24)
  (number~) vblank::$26 ← (number) 2 * (const byte) SIZEOF_STRUCT_SPRITEDATA
  *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (number~) vblank::$26) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (number~) vblank::$26)
  (number~) vblank::$28 ← (number) 3 * (const byte) SIZEOF_STRUCT_SPRITEDATA
  *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (number~) vblank::$28) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (number~) vblank::$28)
  to:vblank::@return
vblank::@return: scope:[vblank]  from vblank::@1 vblank::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const struct RICOH_2A03*) APU = (struct RICOH_2A03*)(number) $4000
(const byte*) FLAG[]  = { (byte) $54, (byte) $55, (byte) $56, (byte) $57 }
(const byte*) FLOOR[]  = { (byte) $85, (byte) $85, (byte) $86, (byte) $86 }
(const nomodify byte*) FR_COUNTER = (byte*)(number) $4017
(const nomodify byte*) MEMORY = (byte*)(number) 0
(const nomodify struct SpriteData*) OAM_BUFFER = (struct SpriteData*)(number) $200
(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = (byte) $10
(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1 = (byte) $16
(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA = (byte) $14
(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR = (byte) 3
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR = (byte) 6
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL = (byte) 0
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA = (byte) 7
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK = (byte) 1
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = (byte) 5
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = (byte) 2
(const byte) OFFSET_STRUCT_SPRITEDATA_Y = (byte) 0
(const byte*) PALETTE[(number) $20]  = { (byte) $f, (byte) $13, (byte) $23, (byte) $33, (byte) $f, (byte) 6, (byte) $15, (byte) $36, (byte) $f, (byte) $39, (byte) $4a, (byte) $5b, (byte) $f, (byte) $3d, (byte) $4e, (byte) $5f, (byte) $f, (byte) $1c, (byte) $15, (byte) $14, (byte) $f, (byte) 2, (byte) $38, (byte) $3c, (byte) $f, (byte) $30, (byte) $37, (byte) $1a, (byte) $f, (byte) $f, (byte) $f, (byte) $f }
(const struct RICOH_2C02*) PPU = (struct RICOH_2C02*)(number) $2000
(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0 = (byte*)(number) $23c0
(const nomodify byte*) PPU_NAME_TABLE_0 = (byte*)(number) $2000
(const nomodify byte*) PPU_PALETTE = (byte*)(number) $3f00
(const to_volatile byte*) PPU_PPUSTATUS = (byte*)(number) $2002
(byte) RICOH_2A03::DMC_FREQ
(byte) RICOH_2A03::DMC_LEN
(byte) RICOH_2A03::DMC_RAW
(byte) RICOH_2A03::DMC_START
(byte) RICOH_2A03::JOY1
(byte) RICOH_2A03::JOY2
(byte) RICOH_2A03::NOISE_HI
(byte) RICOH_2A03::NOISE_LO
(byte) RICOH_2A03::NOISE_VOL
(byte) RICOH_2A03::OAMDMA
(byte) RICOH_2A03::SND_CHN
(byte) RICOH_2A03::SQ1_HI
(byte) RICOH_2A03::SQ1_LO
(byte) RICOH_2A03::SQ1_SWEEP
(byte) RICOH_2A03::SQ1_VOL
(byte) RICOH_2A03::SQ2_HI
(byte) RICOH_2A03::SQ2_LO
(byte) RICOH_2A03::SQ2_SWEEP
(byte) RICOH_2A03::SQ2_VOL
(byte) RICOH_2A03::TRI_HI
(byte) RICOH_2A03::TRI_LINEAR
(byte) RICOH_2A03::TRI_LO
(byte) RICOH_2A03::UNUSED1
(byte) RICOH_2A03::UNUSED2
(byte) RICOH_2C02::OAMADDR
(byte) RICOH_2C02::OAMDATA
(byte) RICOH_2C02::PPUADDR
(byte) RICOH_2C02::PPUCTRL
(byte) RICOH_2C02::PPUDATA
(byte) RICOH_2C02::PPUMASK
(byte) RICOH_2C02::PPUSCROLL
(volatile byte) RICOH_2C02::PPUSTATUS loadstore
(const byte) SIZEOF_STRUCT_SPRITEDATA = (byte) 4
(const struct SpriteData*) SPRITES[]  = { { y: (byte) $80, tile: (byte) $36, attributes: (byte) 2, x: (byte) $80 }, { y: (byte) $80, tile: (byte) $37, attributes: (byte) 2, x: (byte) $88 }, { y: (byte) $88, tile: (byte) $38, attributes: (byte) 2, x: (byte) $80 }, { y: (byte) $88, tile: (byte) $39, attributes: (byte) 2, x: (byte) $88 } }
(byte) SpriteData::attributes
(byte) SpriteData::tile
(byte) SpriteData::x
(byte) SpriteData::y
(const byte*) TILES[]  = kickasm {{ .import binary "smb1_chr.bin"
 }}
(const to_nomodify void()**) VECTORS[]  = { &interrupt(HARDWARE_STACK)(void()) vblank(), &(void()) main(), (void()*)(number) 0 }
(void()) main()
(byte~) main::$1
(byte~) main::$10
(bool~) main::$11
(byte*~) main::$12
(byte*~) main::$13
(byte*~) main::$14
(byte*~) main::$15
(byte*~) main::$16
(bool~) main::$17
(bool~) main::$7
(byte*~) main::$8
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(label) main::enableVideoOutput1
(byte*~) main::enableVideoOutput1_$0
(byte*~) main::enableVideoOutput1_$1
(byte*~) main::enableVideoOutput1_$2
(byte*~) main::enableVideoOutput1_$3
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(label) main::initNES1
(bool~) main::initNES1_$5
(label) main::initNES1_@1
(label) main::initNES1_@6
(label) main::initNES1_@7
(label) main::initNES1_clearVBlankFlag1
(label) main::initNES1_disableAudioOutput1
(byte*~) main::initNES1_disableAudioOutput1_$0
(byte*~) main::initNES1_disableAudioOutput1_$1
(label) main::initNES1_disableVideoOutput1
(byte*~) main::initNES1_disableVideoOutput1_$0
(byte*~) main::initNES1_disableVideoOutput1_$1
(byte*~) main::initNES1_disableVideoOutput1_$2
(byte*~) main::initNES1_disableVideoOutput1_$3
(byte) main::initNES1_i
(byte) main::initNES1_i#0
(byte) main::initNES1_i#1
(byte) main::initNES1_i#2
(label) main::initNES1_waitForVBlank1
(number~) main::initNES1_waitForVBlank1_$0
(bool~) main::initNES1_waitForVBlank1_$1
(byte*~) main::initNES1_waitForVBlank1_$2
(byte*~) main::initNES1_waitForVBlank1_$3
(bool~) main::initNES1_waitForVBlank1_$4
(label) main::initNES1_waitForVBlank1_@1
(label) main::initNES1_waitForVBlank2
(number~) main::initNES1_waitForVBlank2_$0
(bool~) main::initNES1_waitForVBlank2_$1
(byte*~) main::initNES1_waitForVBlank2_$2
(byte*~) main::initNES1_waitForVBlank2_$3
(bool~) main::initNES1_waitForVBlank2_$4
(label) main::initNES1_waitForVBlank2_@1
(byte) main::x
(byte) main::x#0
(byte) main::x#1
(byte) main::x#2
(byte) main::x#3
(byte) main::x#4
(void()) ppuDataFill((nomodify void*) ppuDataFill::ppuData , (byte) ppuDataFill::val , (word) ppuDataFill::size)
(bool~) ppuDataFill::$1
(label) ppuDataFill::@1
(label) ppuDataFill::@2
(label) ppuDataFill::@3
(label) ppuDataFill::@4
(label) ppuDataFill::@return
(word) ppuDataFill::i
(word) ppuDataFill::i#0
(word) ppuDataFill::i#1
(word) ppuDataFill::i#2
(word) ppuDataFill::i#3
(word) ppuDataFill::i#4
(word) ppuDataFill::i#5
(nomodify void*) ppuDataFill::ppuData
(nomodify void*) ppuDataFill::ppuData#0
(nomodify void*) ppuDataFill::ppuData#1
(nomodify void*) ppuDataFill::ppuData#2
(label) ppuDataFill::ppuDataPrepare1
(byte~) ppuDataFill::ppuDataPrepare1_$0
(byte~) ppuDataFill::ppuDataPrepare1_$1
(byte*~) ppuDataFill::ppuDataPrepare1_$2
(byte*~) ppuDataFill::ppuDataPrepare1_$3
(byte*~) ppuDataFill::ppuDataPrepare1_$4
(byte*~) ppuDataFill::ppuDataPrepare1_$5
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#1
(label) ppuDataFill::ppuDataPut1
(byte*~) ppuDataFill::ppuDataPut1_$0
(byte*~) ppuDataFill::ppuDataPut1_$1
(byte) ppuDataFill::ppuDataPut1_val
(byte) ppuDataFill::ppuDataPut1_val#0
(byte) ppuDataFill::ppuDataPut1_val#1
(word) ppuDataFill::size
(word) ppuDataFill::size#0
(word) ppuDataFill::size#1
(word) ppuDataFill::size#2
(word) ppuDataFill::size#3
(word) ppuDataFill::size#4
(word) ppuDataFill::size#5
(word) ppuDataFill::size#6
(word) ppuDataFill::size#7
(word) ppuDataFill::size#8
(byte) ppuDataFill::val
(byte) ppuDataFill::val#0
(byte) ppuDataFill::val#1
(byte) ppuDataFill::val#2
(byte) ppuDataFill::val#3
(byte) ppuDataFill::val#4
(byte) ppuDataFill::val#5
(byte) ppuDataFill::val#6
(byte) ppuDataFill::val#7
(byte) ppuDataFill::val#8
(void()) ppuDataPutTile((nomodify void*) ppuDataPutTile::ppuData , (byte*) ppuDataPutTile::tile)
(byte*~) ppuDataPutTile::$3
(byte*~) ppuDataPutTile::$7
(label) ppuDataPutTile::@1
(label) ppuDataPutTile::@2
(label) ppuDataPutTile::@3
(label) ppuDataPutTile::@4
(label) ppuDataPutTile::@5
(label) ppuDataPutTile::@return
(nomodify void*) ppuDataPutTile::ppuData
(nomodify void*) ppuDataPutTile::ppuData#0
(nomodify void*) ppuDataPutTile::ppuData#1
(nomodify void*) ppuDataPutTile::ppuData#2
(nomodify void*) ppuDataPutTile::ppuData#3
(nomodify void*) ppuDataPutTile::ppuData#4
(nomodify void*) ppuDataPutTile::ppuData#5
(nomodify void*) ppuDataPutTile::ppuData#6
(nomodify void*) ppuDataPutTile::ppuData#7
(nomodify void*) ppuDataPutTile::ppuData#8
(label) ppuDataPutTile::ppuDataPrepare1
(byte~) ppuDataPutTile::ppuDataPrepare1_$0
(byte~) ppuDataPutTile::ppuDataPrepare1_$1
(byte*~) ppuDataPutTile::ppuDataPrepare1_$2
(byte*~) ppuDataPutTile::ppuDataPrepare1_$3
(byte*~) ppuDataPutTile::ppuDataPrepare1_$4
(byte*~) ppuDataPutTile::ppuDataPrepare1_$5
(nomodify void*) ppuDataPutTile::ppuDataPrepare1_ppuData
(nomodify void*) ppuDataPutTile::ppuDataPrepare1_ppuData#0
(nomodify void*) ppuDataPutTile::ppuDataPrepare1_ppuData#1
(label) ppuDataPutTile::ppuDataPrepare2
(byte~) ppuDataPutTile::ppuDataPrepare2_$0
(byte~) ppuDataPutTile::ppuDataPrepare2_$1
(byte*~) ppuDataPutTile::ppuDataPrepare2_$2
(byte*~) ppuDataPutTile::ppuDataPrepare2_$3
(byte*~) ppuDataPutTile::ppuDataPrepare2_$4
(byte*~) ppuDataPutTile::ppuDataPrepare2_$5
(nomodify void*) ppuDataPutTile::ppuDataPrepare2_ppuData
(nomodify void*) ppuDataPutTile::ppuDataPrepare2_ppuData#0
(nomodify void*) ppuDataPutTile::ppuDataPrepare2_ppuData#1
(label) ppuDataPutTile::ppuDataPut1
(byte*~) ppuDataPutTile::ppuDataPut1_$0
(byte*~) ppuDataPutTile::ppuDataPut1_$1
(byte) ppuDataPutTile::ppuDataPut1_val
(byte) ppuDataPutTile::ppuDataPut1_val#0
(byte) ppuDataPutTile::ppuDataPut1_val#1
(label) ppuDataPutTile::ppuDataPut2
(byte*~) ppuDataPutTile::ppuDataPut2_$0
(byte*~) ppuDataPutTile::ppuDataPut2_$1
(byte) ppuDataPutTile::ppuDataPut2_val
(byte) ppuDataPutTile::ppuDataPut2_val#0
(byte) ppuDataPutTile::ppuDataPut2_val#1
(label) ppuDataPutTile::ppuDataPut3
(byte*~) ppuDataPutTile::ppuDataPut3_$0
(byte*~) ppuDataPutTile::ppuDataPut3_$1
(byte) ppuDataPutTile::ppuDataPut3_val
(byte) ppuDataPutTile::ppuDataPut3_val#0
(byte) ppuDataPutTile::ppuDataPut3_val#1
(label) ppuDataPutTile::ppuDataPut4
(byte*~) ppuDataPutTile::ppuDataPut4_$0
(byte*~) ppuDataPutTile::ppuDataPut4_$1
(byte) ppuDataPutTile::ppuDataPut4_val
(byte) ppuDataPutTile::ppuDataPut4_val#0
(byte) ppuDataPutTile::ppuDataPut4_val#1
(byte*) ppuDataPutTile::tile
(byte*) ppuDataPutTile::tile#0
(byte*) ppuDataPutTile::tile#1
(byte*) ppuDataPutTile::tile#10
(byte*) ppuDataPutTile::tile#11
(byte*) ppuDataPutTile::tile#12
(byte*) ppuDataPutTile::tile#2
(byte*) ppuDataPutTile::tile#3
(byte*) ppuDataPutTile::tile#4
(byte*) ppuDataPutTile::tile#5
(byte*) ppuDataPutTile::tile#6
(byte*) ppuDataPutTile::tile#7
(byte*) ppuDataPutTile::tile#8
(byte*) ppuDataPutTile::tile#9
(void()) ppuDataTransfer((nomodify void*) ppuDataTransfer::ppuData , (nomodify void*) ppuDataTransfer::cpuData , (word) ppuDataTransfer::size)
(bool~) ppuDataTransfer::$1
(label) ppuDataTransfer::@1
(label) ppuDataTransfer::@2
(label) ppuDataTransfer::@3
(label) ppuDataTransfer::@4
(label) ppuDataTransfer::@return
(nomodify void*) ppuDataTransfer::cpuData
(nomodify void*) ppuDataTransfer::cpuData#0
(nomodify void*) ppuDataTransfer::cpuData#1
(nomodify void*) ppuDataTransfer::cpuData#2
(nomodify void*) ppuDataTransfer::cpuData#3
(byte*) ppuDataTransfer::cpuSrc
(byte*) ppuDataTransfer::cpuSrc#0
(byte*) ppuDataTransfer::cpuSrc#1
(byte*) ppuDataTransfer::cpuSrc#2
(byte*) ppuDataTransfer::cpuSrc#3
(byte*) ppuDataTransfer::cpuSrc#4
(byte*) ppuDataTransfer::cpuSrc#5
(word) ppuDataTransfer::i
(word) ppuDataTransfer::i#0
(word) ppuDataTransfer::i#1
(word) ppuDataTransfer::i#2
(word) ppuDataTransfer::i#3
(word) ppuDataTransfer::i#4
(word) ppuDataTransfer::i#5
(nomodify void*) ppuDataTransfer::ppuData
(nomodify void*) ppuDataTransfer::ppuData#0
(nomodify void*) ppuDataTransfer::ppuData#1
(label) ppuDataTransfer::ppuDataPrepare1
(byte~) ppuDataTransfer::ppuDataPrepare1_$0
(byte~) ppuDataTransfer::ppuDataPrepare1_$1
(byte*~) ppuDataTransfer::ppuDataPrepare1_$2
(byte*~) ppuDataTransfer::ppuDataPrepare1_$3
(byte*~) ppuDataTransfer::ppuDataPrepare1_$4
(byte*~) ppuDataTransfer::ppuDataPrepare1_$5
(nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData
(nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#0
(nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#1
(label) ppuDataTransfer::ppuDataPut1
(byte*~) ppuDataTransfer::ppuDataPut1_$0
(byte*~) ppuDataTransfer::ppuDataPut1_$1
(byte) ppuDataTransfer::ppuDataPut1_val
(byte) ppuDataTransfer::ppuDataPut1_val#0
(byte) ppuDataTransfer::ppuDataPut1_val#1
(word) ppuDataTransfer::size
(word) ppuDataTransfer::size#0
(word) ppuDataTransfer::size#1
(word) ppuDataTransfer::size#2
(word) ppuDataTransfer::size#3
(word) ppuDataTransfer::size#4
(word) ppuDataTransfer::size#5
(word) ppuDataTransfer::size#6
(word) ppuDataTransfer::size#7
interrupt(HARDWARE_STACK)(void()) vblank()
(number~) vblank::$1
(number~) vblank::$14
(number~) vblank::$16
(number~) vblank::$18
(bool~) vblank::$2
(number~) vblank::$20
(number~) vblank::$22
(number~) vblank::$24
(number~) vblank::$26
(number~) vblank::$28
(byte*~) vblank::$29
(number~) vblank::$3
(byte*~) vblank::$30
(byte*~) vblank::$31
(byte*~) vblank::$32
(byte*~) vblank::$33
(byte*~) vblank::$34
(byte*~) vblank::$35
(byte*~) vblank::$36
(bool~) vblank::$37
(bool~) vblank::$38
(bool~) vblank::$4
(label) vblank::@1
(label) vblank::@2
(label) vblank::@3
(label) vblank::@4
(label) vblank::@return
(label) vblank::ppuSpriteBufferDmaTransfer1
(byte~) vblank::ppuSpriteBufferDmaTransfer1_$0
(byte*~) vblank::ppuSpriteBufferDmaTransfer1_$1
(byte*~) vblank::ppuSpriteBufferDmaTransfer1_$2
(byte*~) vblank::ppuSpriteBufferDmaTransfer1_$3
(byte*~) vblank::ppuSpriteBufferDmaTransfer1_$4
(struct SpriteData*) vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer
(struct SpriteData*) vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0
(struct SpriteData*) vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#1

Adding number conversion cast (unumber) 0 in (byte) ppuDataPutTile::ppuDataPut1_val#0 ← *((byte*) ppuDataPutTile::tile#2 + (number) 0)
Adding number conversion cast (unumber) 1 in (byte) ppuDataPutTile::ppuDataPut2_val#0 ← *((byte*) ppuDataPutTile::tile#3 + (number) 1)
Adding number conversion cast (unumber) $20 in (byte*~) ppuDataPutTile::$3 ← (byte*~) ppuDataPutTile::$7 + (number) $20
Adding number conversion cast (unumber) 2 in (byte) ppuDataPutTile::ppuDataPut3_val#0 ← *((byte*) ppuDataPutTile::tile#4 + (number) 2)
Adding number conversion cast (unumber) 3 in (byte) ppuDataPutTile::ppuDataPut4_val#0 ← *((byte*) ppuDataPutTile::tile#5 + (number) 3)
Adding number conversion cast (unumber) 0 in *((byte*~) main::initNES1_disableVideoOutput1_$0) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*~) main::initNES1_disableVideoOutput1_$1) ← (number) 0
Adding number conversion cast (unumber) $40 in *((const nomodify byte*) FR_COUNTER) ← (number) $40
Adding number conversion cast (unumber) $40 in *((byte*~) main::initNES1_disableAudioOutput1_$0) ← (number) $40
Adding number conversion cast (unumber) $80 in (number~) main::initNES1_waitForVBlank1_$0 ← *((byte*~) main::initNES1_waitForVBlank1_$2) & (number) $80
Adding number conversion cast (unumber) main::initNES1_waitForVBlank1_$0 in (number~) main::initNES1_waitForVBlank1_$0 ← *((byte*~) main::initNES1_waitForVBlank1_$2) & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) main::initNES1_waitForVBlank1_$4 ← (number) 0 != (unumber~) main::initNES1_waitForVBlank1_$0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) 0 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) 0 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $100 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) $100 in *((const nomodify byte*) MEMORY+(number) $100 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $200 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) $200 in *((const nomodify byte*) MEMORY+(number) $200 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $300 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) $300 in *((const nomodify byte*) MEMORY+(number) $300 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $400 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) $400 in *((const nomodify byte*) MEMORY+(number) $400 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $500 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) $500 in *((const nomodify byte*) MEMORY+(number) $500 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $600 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) $600 in *((const nomodify byte*) MEMORY+(number) $600 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $700 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) $700 in *((const nomodify byte*) MEMORY+(number) $700 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in (bool~) main::initNES1_$5 ← (number) 0 != (byte) main::initNES1_i#1
Adding number conversion cast (unumber) $80 in (number~) main::initNES1_waitForVBlank2_$0 ← *((byte*~) main::initNES1_waitForVBlank2_$2) & (number) $80
Adding number conversion cast (unumber) main::initNES1_waitForVBlank2_$0 in (number~) main::initNES1_waitForVBlank2_$0 ← *((byte*~) main::initNES1_waitForVBlank2_$2) & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) main::initNES1_waitForVBlank2_$4 ← (number) 0 != (unumber~) main::initNES1_waitForVBlank2_$0
Adding number conversion cast (unumber) $fc in (byte) ppuDataFill::val#0 ← (number) $fc
Adding number conversion cast (unumber) $3c0 in (word) ppuDataFill::size#0 ← (number) $3c0
Adding number conversion cast (unumber) 0 in (byte) ppuDataFill::val#1 ← (number) 0
Adding number conversion cast (unumber) $40 in (word) ppuDataFill::size#1 ← (number) $40
Adding number conversion cast (unumber) $20 in (bool~) main::$7 ← (byte) main::x#2 < (number) $20
Adding number conversion cast (unumber) $14*$20 in (byte*~) main::$8 ← (const nomodify byte*) PPU_NAME_TABLE_0+(number) $14*(number) $20 + (byte) main::x#3
Adding number conversion cast (unumber) 2 in (byte) main::x#1 ← (byte) main::x#4 + (number) 2
Adding number conversion cast (unumber) $1c in (nomodify void*) ppuDataPutTile::ppuData#1 ← (void*)(const nomodify byte*) PPU_NAME_TABLE_0+(number) $12*(number) $20+(number) $1c
Adding number conversion cast (unumber) $12*$20 in (nomodify void*) ppuDataPutTile::ppuData#1 ← (void*)(const nomodify byte*) PPU_NAME_TABLE_0+(number) $12*(number) $20+(unumber)(number) $1c
Adding number conversion cast (unumber) 0 in *((byte*~) main::$12) ← (number) 0
Adding number conversion cast (unumber) -8 in *((byte*~) main::$13) ← (number) -8
Adding number conversion cast (unumber) $80 in *((byte*~) main::enableVideoOutput1_$0) ← (number) $80
Adding number conversion cast (unumber) $18 in *((byte*~) main::enableVideoOutput1_$1) ← (number) $18
Adding number conversion cast (unumber) 0 in *((byte*~) vblank::ppuSpriteBufferDmaTransfer1_$1) ← (number) 0
Adding number conversion cast (unumber) 1 in *((byte*~) vblank::$29) ← (number) 1
Adding number conversion cast (unumber) 0 in *((byte*~) vblank::$30) ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) vblank::$1 ← *((byte*~) vblank::$31) & (number) 1
Adding number conversion cast (unumber) vblank::$1 in (number~) vblank::$1 ← *((byte*~) vblank::$31) & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) vblank::$37 ← (number) 0 != (unumber~) vblank::$1
Adding number conversion cast (unumber) 1 in (number~) vblank::$3 ← *((byte*~) vblank::$32) & (number) 1
Adding number conversion cast (unumber) vblank::$3 in (number~) vblank::$3 ← *((byte*~) vblank::$32) & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) vblank::$38 ← (number) 0 != (unumber~) vblank::$3
Adding number conversion cast (unumber) 0 in (number~) vblank::$14 ← (number) 0 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$14 in (number~) vblank::$14 ← (unumber)(number) 0 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) 1 in (number~) vblank::$16 ← (number) 1 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$16 in (number~) vblank::$16 ← (unumber)(number) 1 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) 2 in (number~) vblank::$18 ← (number) 2 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$18 in (number~) vblank::$18 ← (unumber)(number) 2 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) 3 in (number~) vblank::$20 ← (number) 3 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$20 in (number~) vblank::$20 ← (unumber)(number) 3 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) 0 in (number~) vblank::$22 ← (number) 0 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$22 in (number~) vblank::$22 ← (unumber)(number) 0 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) 1 in (number~) vblank::$24 ← (number) 1 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$24 in (number~) vblank::$24 ← (unumber)(number) 1 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) 2 in (number~) vblank::$26 ← (number) 2 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$26 in (number~) vblank::$26 ← (unumber)(number) 2 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) 3 in (number~) vblank::$28 ← (number) 3 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Adding number conversion cast (unumber) vblank::$28 in (number~) vblank::$28 ← (unumber)(number) 3 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((byte*~) main::initNES1_disableVideoOutput1_$0) ← (unumber)(number) 0
Inlining cast *((byte*~) main::initNES1_disableVideoOutput1_$1) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) FR_COUNTER) ← (unumber)(number) $40
Inlining cast *((byte*~) main::initNES1_disableAudioOutput1_$0) ← (unumber)(number) $40
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) 0 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $100 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $200 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $300 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $400 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $500 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $600 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $700 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast (byte) ppuDataFill::val#0 ← (unumber)(number) $fc
Inlining cast (word) ppuDataFill::size#0 ← (unumber)(number) $3c0
Inlining cast (byte) ppuDataFill::val#1 ← (unumber)(number) 0
Inlining cast (word) ppuDataFill::size#1 ← (unumber)(number) $40
Inlining cast *((byte*~) main::$12) ← (unumber)(number) 0
Inlining cast *((byte*~) main::$13) ← (unumber)(number) -8
Inlining cast *((byte*~) main::enableVideoOutput1_$0) ← (unumber)(number) $80
Inlining cast *((byte*~) main::enableVideoOutput1_$1) ← (unumber)(number) $18
Inlining cast *((byte*~) vblank::ppuSpriteBufferDmaTransfer1_$1) ← (unumber)(number) 0
Inlining cast *((byte*~) vblank::$29) ← (unumber)(number) 1
Inlining cast *((byte*~) vblank::$30) ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 8192
Simplifying constant pointer cast (byte*) 9152
Simplifying constant pointer cast (byte*) 16128
Simplifying constant pointer cast (byte*) 16407
Simplifying constant pointer cast (byte*) 0
Simplifying constant pointer cast (struct SpriteData*) 512
Simplifying constant pointer cast (void()*) 0
Simplifying constant pointer cast (byte*) 8194
Simplifying constant pointer cast (struct RICOH_2C02*) 8192
Simplifying constant pointer cast (struct RICOH_2A03*) 16384
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $20
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast $40
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $100
Simplifying constant integer cast 0
Simplifying constant integer cast $200
Simplifying constant integer cast 0
Simplifying constant integer cast $300
Simplifying constant integer cast 0
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast $500
Simplifying constant integer cast 0
Simplifying constant integer cast $600
Simplifying constant integer cast 0
Simplifying constant integer cast $700
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast $fc
Simplifying constant integer cast $3c0
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast $20
Simplifying constant integer cast 2
Simplifying constant integer cast $1c
Simplifying constant integer cast 0
Simplifying constant integer cast -8
Simplifying constant integer cast $80
Simplifying constant integer cast $18
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $100
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $200
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $300
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $400
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $500
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $600
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $700
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $fc
Finalized unsigned number type (word) $3c0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $1c
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) -8
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) $18
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::initNES1_waitForVBlank1_$0 ← *((byte*~) main::initNES1_waitForVBlank1_$2) & (byte) $80
Inferred type updated to byte in (unumber~) main::initNES1_waitForVBlank2_$0 ← *((byte*~) main::initNES1_waitForVBlank2_$2) & (byte) $80
Inferred type updated to byte in (unumber~) vblank::$1 ← *((byte*~) vblank::$31) & (byte) 1
Inferred type updated to byte in (unumber~) vblank::$3 ← *((byte*~) vblank::$32) & (byte) 1
Inferred type updated to byte in (unumber~) vblank::$14 ← (byte) 0 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Inferred type updated to byte in (unumber~) vblank::$16 ← (byte) 1 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Inferred type updated to byte in (unumber~) vblank::$18 ← (byte) 2 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Inferred type updated to byte in (unumber~) vblank::$20 ← (byte) 3 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Inferred type updated to byte in (unumber~) vblank::$22 ← (byte) 0 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Inferred type updated to byte in (unumber~) vblank::$24 ← (byte) 1 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Inferred type updated to byte in (unumber~) vblank::$26 ← (byte) 2 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Inferred type updated to byte in (unumber~) vblank::$28 ← (byte) 3 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Inversing boolean not [117] (bool~) main::initNES1_waitForVBlank1_$1 ← (byte) 0 == (byte~) main::initNES1_waitForVBlank1_$0 from [116] (bool~) main::initNES1_waitForVBlank1_$4 ← (byte) 0 != (byte~) main::initNES1_waitForVBlank1_$0
Inversing boolean not [136] (bool~) main::initNES1_waitForVBlank2_$1 ← (byte) 0 == (byte~) main::initNES1_waitForVBlank2_$0 from [135] (bool~) main::initNES1_waitForVBlank2_$4 ← (byte) 0 != (byte~) main::initNES1_waitForVBlank2_$0
Inversing boolean not [209] (bool~) vblank::$2 ← (byte) 0 == (byte~) vblank::$1 from [208] (bool~) vblank::$37 ← (byte) 0 != (byte~) vblank::$1
Inversing boolean not [215] (bool~) vblank::$4 ← (byte) 0 == (byte~) vblank::$3 from [214] (bool~) vblank::$38 ← (byte) 0 != (byte~) vblank::$3
Successful SSA optimization Pass2UnaryNotSimplification
Alias ppuDataFill::ppuDataPrepare1_ppuData#0 = ppuDataFill::ppuData#2 ppuDataFill::ppuDataPrepare1_ppuData#1 
Alias ppuDataFill::size#3 = ppuDataFill::size#5 ppuDataFill::size#7 
Alias ppuDataFill::val#4 = ppuDataFill::val#6 ppuDataFill::val#8 
Alias ppuDataFill::val#2 = ppuDataFill::val#3 ppuDataFill::ppuDataPut1_val#0 ppuDataFill::ppuDataPut1_val#1 ppuDataFill::val#7 ppuDataFill::val#5 
Alias ppuDataFill::i#2 = ppuDataFill::i#5 ppuDataFill::i#4 ppuDataFill::i#3 
Alias ppuDataFill::size#2 = ppuDataFill::size#8 ppuDataFill::size#6 ppuDataFill::size#4 
Alias ppuDataTransfer::ppuDataPrepare1_ppuData#0 = ppuDataTransfer::ppuData#1 ppuDataTransfer::ppuDataPrepare1_ppuData#1 
Alias ppuDataTransfer::cpuData#1 = ppuDataTransfer::cpuData#2 ppuDataTransfer::cpuData#3 
Alias ppuDataTransfer::size#2 = ppuDataTransfer::size#4 ppuDataTransfer::size#6 
Alias ppuDataTransfer::cpuSrc#2 = ppuDataTransfer::cpuSrc#4 ppuDataTransfer::cpuSrc#5 ppuDataTransfer::cpuSrc#3 
Alias ppuDataTransfer::i#2 = ppuDataTransfer::i#5 ppuDataTransfer::i#4 ppuDataTransfer::i#3 
Alias ppuDataTransfer::size#1 = ppuDataTransfer::size#7 ppuDataTransfer::size#5 ppuDataTransfer::size#3 
Alias ppuDataTransfer::ppuDataPut1_val#0 = ppuDataTransfer::ppuDataPut1_val#1 
Alias ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuDataPrepare1_ppuData#0 ppuDataPutTile::ppuDataPrepare1_ppuData#1 ppuDataPutTile::ppuData#8 ppuDataPutTile::ppuData#7 ppuDataPutTile::ppuData#6 ppuDataPutTile::ppuData#5 ppuDataPutTile::ppuData#4 ppuDataPutTile::ppuData#3 
Alias ppuDataPutTile::tile#10 = ppuDataPutTile::tile#6 ppuDataPutTile::tile#2 ppuDataPutTile::tile#7 ppuDataPutTile::tile#3 ppuDataPutTile::tile#12 ppuDataPutTile::tile#11 ppuDataPutTile::tile#8 ppuDataPutTile::tile#4 ppuDataPutTile::tile#9 ppuDataPutTile::tile#5 
Alias ppuDataPutTile::ppuDataPut1_val#0 = ppuDataPutTile::ppuDataPut1_val#1 
Alias ppuDataPutTile::ppuDataPut2_val#0 = ppuDataPutTile::ppuDataPut2_val#1 
Alias ppuDataPutTile::ppuDataPrepare2_ppuData#0 = ppuDataPutTile::ppuDataPrepare2_ppuData#1 
Alias ppuDataPutTile::ppuDataPut3_val#0 = ppuDataPutTile::ppuDataPut3_val#1 
Alias ppuDataPutTile::ppuDataPut4_val#0 = ppuDataPutTile::ppuDataPut4_val#1 
Alias ppuDataTransfer::size#0 = main::$1 
Alias main::x#2 = main::x#3 main::x#4 
Alias main::i#2 = main::i#3 
Alias vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0 = vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#1 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) ppuDataFill::size#2 (word) ppuDataFill::size#3
Identical Phi Values (byte) ppuDataFill::val#2 (byte) ppuDataFill::val#4
Identical Phi Values (nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#0 (nomodify void*) ppuDataTransfer::ppuData#0
Identical Phi Values (nomodify void*) ppuDataTransfer::cpuData#1 (nomodify void*) ppuDataTransfer::cpuData#0
Identical Phi Values (word) ppuDataTransfer::size#2 (word) ppuDataTransfer::size#0
Identical Phi Values (word) ppuDataTransfer::size#1 (word) ppuDataTransfer::size#2
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) ppuDataFill::$1 [12] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#3) goto ppuDataFill::@2
Simple Condition (bool~) ppuDataTransfer::$1 [31] if((word) ppuDataTransfer::i#2<(word) ppuDataTransfer::size#0) goto ppuDataTransfer::@2
Simple Condition (bool~) main::initNES1_waitForVBlank1_$1 [92] if((byte) 0==(byte~) main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1
Simple Condition (bool~) main::initNES1_$5 [105] if((byte) 0!=(byte) main::initNES1_i#1) goto main::initNES1_@1
Simple Condition (bool~) main::initNES1_waitForVBlank2_$1 [110] if((byte) 0==(byte~) main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1
Simple Condition (bool~) main::$7 [127] if((byte) main::x#2<(byte) $20) goto main::@2
Simple Condition (bool~) main::$11 [140] if((byte) main::i#2<(byte~) main::$10) goto main::@5
Simple Condition (bool~) main::$17 [157] if((number) 0!=(number) 1) goto main::@7
Simple Condition (bool~) vblank::$2 [177] if((byte) 0==(byte~) vblank::$1) goto vblank::@1
Simple Condition (bool~) vblank::$4 [182] if((byte) 0==(byte~) vblank::$3) goto vblank::@return
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [2] (byte*~) ppuDataFill::ppuDataPrepare1_$4 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [6] (byte*~) ppuDataFill::ppuDataPrepare1_$5 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [13] (byte*~) ppuDataFill::ppuDataPut1_$1 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [20] (byte*~) ppuDataTransfer::ppuDataPrepare1_$4 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [24] (byte*~) ppuDataTransfer::ppuDataPrepare1_$5 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [33] (byte*~) ppuDataTransfer::ppuDataPut1_$1 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [41] (byte*~) ppuDataPutTile::ppuDataPrepare1_$4 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [45] (byte*~) ppuDataPutTile::ppuDataPrepare1_$5 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [49] (byte*~) ppuDataPutTile::ppuDataPut1_$1 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [53] (byte*~) ppuDataPutTile::ppuDataPut2_$1 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [60] (byte*~) ppuDataPutTile::ppuDataPrepare2_$4 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [64] (byte*~) ppuDataPutTile::ppuDataPrepare2_$5 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [68] (byte*~) ppuDataPutTile::ppuDataPut3_$1 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [72] (byte*~) ppuDataPutTile::ppuDataPut4_$1 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [77] (byte*~) main::initNES1_disableVideoOutput1_$2 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [80] (byte*~) main::initNES1_disableVideoOutput1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [84] (byte*~) main::initNES1_disableAudioOutput1_$1 ← (byte*)(const struct RICOH_2A03*) APU
Constant right-side identified [88] (byte*~) main::initNES1_waitForVBlank1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [106] (byte*~) main::initNES1_waitForVBlank2_$3 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [112] (word) ppuDataTransfer::size#0 ← sizeof  (const byte*) PALETTE
Constant right-side identified [138] (byte~) main::$10 ← sizeof  (const struct SpriteData*) SPRITES
Constant right-side identified [141] (byte*~) main::$14 ← (byte*)(const struct SpriteData*) SPRITES
Constant right-side identified [144] (byte*~) main::$15 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [147] (byte*~) main::$16 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [150] (byte*~) main::enableVideoOutput1_$2 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [153] (byte*~) main::enableVideoOutput1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [160] (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [164] (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$4 ← (byte*)(const struct RICOH_2A03*) APU
Constant right-side identified [167] (byte*~) vblank::$33 ← (byte*)(const struct RICOH_2A03*) APU
Constant right-side identified [170] (byte*~) vblank::$34 ← (byte*)(const struct RICOH_2A03*) APU
Constant right-side identified [173] (byte*~) vblank::$35 ← (byte*)(const struct RICOH_2A03*) APU
Constant right-side identified [178] (byte*~) vblank::$36 ← (byte*)(const struct RICOH_2A03*) APU
Constant right-side identified [183] (byte~) vblank::$14 ← (byte) 0 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Constant right-side identified [185] (byte~) vblank::$16 ← (byte) 1 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Constant right-side identified [187] (byte~) vblank::$18 ← (byte) 2 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Constant right-side identified [189] (byte~) vblank::$20 ← (byte) 3 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Constant right-side identified [191] (byte~) vblank::$22 ← (byte) 0 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Constant right-side identified [193] (byte~) vblank::$24 ← (byte) 1 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Constant right-side identified [195] (byte~) vblank::$26 ← (byte) 2 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Constant right-side identified [197] (byte~) vblank::$28 ← (byte) 3 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) ppuDataFill::ppuDataPrepare1_$4 = (byte*)PPU
Constant (const byte*) ppuDataFill::ppuDataPrepare1_$5 = (byte*)PPU
Constant (const word) ppuDataFill::i#0 = 0
Constant (const byte*) ppuDataFill::ppuDataPut1_$1 = (byte*)PPU
Constant (const byte*) ppuDataTransfer::ppuDataPrepare1_$4 = (byte*)PPU
Constant (const byte*) ppuDataTransfer::ppuDataPrepare1_$5 = (byte*)PPU
Constant (const word) ppuDataTransfer::i#0 = 0
Constant (const byte*) ppuDataTransfer::ppuDataPut1_$1 = (byte*)PPU
Constant (const byte*) ppuDataPutTile::ppuDataPrepare1_$4 = (byte*)PPU
Constant (const byte*) ppuDataPutTile::ppuDataPrepare1_$5 = (byte*)PPU
Constant (const byte*) ppuDataPutTile::ppuDataPut1_$1 = (byte*)PPU
Constant (const byte*) ppuDataPutTile::ppuDataPut2_$1 = (byte*)PPU
Constant (const byte*) ppuDataPutTile::ppuDataPrepare2_$4 = (byte*)PPU
Constant (const byte*) ppuDataPutTile::ppuDataPrepare2_$5 = (byte*)PPU
Constant (const byte*) ppuDataPutTile::ppuDataPut3_$1 = (byte*)PPU
Constant (const byte*) ppuDataPutTile::ppuDataPut4_$1 = (byte*)PPU
Constant (const byte*) main::initNES1_disableVideoOutput1_$2 = (byte*)PPU
Constant (const byte*) main::initNES1_disableVideoOutput1_$3 = (byte*)PPU
Constant (const byte*) main::initNES1_disableAudioOutput1_$1 = (byte*)APU
Constant (const byte*) main::initNES1_waitForVBlank1_$3 = (byte*)PPU
Constant (const byte) main::initNES1_i#0 = 0
Constant (const byte*) main::initNES1_waitForVBlank2_$3 = (byte*)PPU
Constant (const word) ppuDataTransfer::size#0 = sizeof PALETTE
Constant (const nomodify void*) ppuDataTransfer::ppuData#0 = (void*)PPU_PALETTE
Constant (const nomodify void*) ppuDataTransfer::cpuData#0 = (void*)PALETTE
Constant (const nomodify void*) ppuDataFill::ppuData#0 = (void*)PPU_NAME_TABLE_0
Constant (const byte) ppuDataFill::val#0 = $fc
Constant (const word) ppuDataFill::size#0 = $3c0
Constant (const nomodify void*) ppuDataFill::ppuData#1 = (void*)PPU_ATTRIBUTE_TABLE_0
Constant (const byte) ppuDataFill::val#1 = 0
Constant (const word) ppuDataFill::size#1 = $40
Constant (const byte) main::x#0 = 0
Constant (const byte*) ppuDataPutTile::tile#0 = FLOOR
Constant (const nomodify void*) ppuDataPutTile::ppuData#1 = (void*)PPU_NAME_TABLE_0+(word)$12*$20+$1c
Constant (const byte*) ppuDataPutTile::tile#1 = FLAG
Constant (const byte) main::i#0 = 0
Constant (const byte) main::$10 = sizeof SPRITES
Constant (const byte*) main::$14 = (byte*)SPRITES
Constant (const byte*) main::$15 = (byte*)PPU
Constant (const byte*) main::$16 = (byte*)PPU
Constant (const byte*) main::enableVideoOutput1_$2 = (byte*)PPU
Constant (const byte*) main::enableVideoOutput1_$3 = (byte*)PPU
Constant (const struct SpriteData*) vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0 = OAM_BUFFER
Constant (const byte*) vblank::ppuSpriteBufferDmaTransfer1_$3 = (byte*)PPU
Constant (const byte*) vblank::ppuSpriteBufferDmaTransfer1_$4 = (byte*)APU
Constant (const byte*) vblank::$33 = (byte*)APU
Constant (const byte*) vblank::$34 = (byte*)APU
Constant (const byte*) vblank::$35 = (byte*)APU
Constant (const byte*) vblank::$36 = (byte*)APU
Constant (const byte) vblank::$14 = 0*SIZEOF_STRUCT_SPRITEDATA
Constant (const byte) vblank::$16 = 1*SIZEOF_STRUCT_SPRITEDATA
Constant (const byte) vblank::$18 = 2*SIZEOF_STRUCT_SPRITEDATA
Constant (const byte) vblank::$20 = 3*SIZEOF_STRUCT_SPRITEDATA
Constant (const byte) vblank::$22 = 0*SIZEOF_STRUCT_SPRITEDATA
Constant (const byte) vblank::$24 = 1*SIZEOF_STRUCT_SPRITEDATA
Constant (const byte) vblank::$26 = 2*SIZEOF_STRUCT_SPRITEDATA
Constant (const byte) vblank::$28 = 3*SIZEOF_STRUCT_SPRITEDATA
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) ppuDataTransfer::cpuSrc#0 = (byte*)ppuDataTransfer::cpuData#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [157] if((number) 0!=(number) 1) goto main::@7
Successful SSA optimization Pass2ConstantIfs
Converting *(pointer+n) to pointer[n] [4] *((byte*~) ppuDataFill::ppuDataPrepare1_$2) ← (byte~) ppuDataFill::ppuDataPrepare1_$0  -- *(ppuDataFill::ppuDataPrepare1_$4 + OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Converting *(pointer+n) to pointer[n] [8] *((byte*~) ppuDataFill::ppuDataPrepare1_$3) ← (byte~) ppuDataFill::ppuDataPrepare1_$1  -- *(ppuDataFill::ppuDataPrepare1_$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Converting *(pointer+n) to pointer[n] [15] *((byte*~) ppuDataFill::ppuDataPut1_$0) ← (byte) ppuDataFill::val#4  -- *(ppuDataFill::ppuDataPut1_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Converting *(pointer+n) to pointer[n] [22] *((byte*~) ppuDataTransfer::ppuDataPrepare1_$2) ← (byte~) ppuDataTransfer::ppuDataPrepare1_$0  -- *(ppuDataTransfer::ppuDataPrepare1_$4 + OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Converting *(pointer+n) to pointer[n] [26] *((byte*~) ppuDataTransfer::ppuDataPrepare1_$3) ← (byte~) ppuDataTransfer::ppuDataPrepare1_$1  -- *(ppuDataTransfer::ppuDataPrepare1_$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Converting *(pointer+n) to pointer[n] [35] *((byte*~) ppuDataTransfer::ppuDataPut1_$0) ← (byte) ppuDataTransfer::ppuDataPut1_val#0  -- *(ppuDataTransfer::ppuDataPut1_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Converting *(pointer+n) to pointer[n] [43] *((byte*~) ppuDataPutTile::ppuDataPrepare1_$2) ← (byte~) ppuDataPutTile::ppuDataPrepare1_$0  -- *(ppuDataPutTile::ppuDataPrepare1_$4 + OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Converting *(pointer+n) to pointer[n] [47] *((byte*~) ppuDataPutTile::ppuDataPrepare1_$3) ← (byte~) ppuDataPutTile::ppuDataPrepare1_$1  -- *(ppuDataPutTile::ppuDataPrepare1_$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Converting *(pointer+n) to pointer[n] [51] *((byte*~) ppuDataPutTile::ppuDataPut1_$0) ← (byte) ppuDataPutTile::ppuDataPut1_val#0  -- *(ppuDataPutTile::ppuDataPut1_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Converting *(pointer+n) to pointer[n] [55] *((byte*~) ppuDataPutTile::ppuDataPut2_$0) ← (byte) ppuDataPutTile::ppuDataPut2_val#0  -- *(ppuDataPutTile::ppuDataPut2_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Converting *(pointer+n) to pointer[n] [62] *((byte*~) ppuDataPutTile::ppuDataPrepare2_$2) ← (byte~) ppuDataPutTile::ppuDataPrepare2_$0  -- *(ppuDataPutTile::ppuDataPrepare2_$4 + OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Converting *(pointer+n) to pointer[n] [66] *((byte*~) ppuDataPutTile::ppuDataPrepare2_$3) ← (byte~) ppuDataPutTile::ppuDataPrepare2_$1  -- *(ppuDataPutTile::ppuDataPrepare2_$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Converting *(pointer+n) to pointer[n] [70] *((byte*~) ppuDataPutTile::ppuDataPut3_$0) ← (byte) ppuDataPutTile::ppuDataPut3_val#0  -- *(ppuDataPutTile::ppuDataPut3_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Converting *(pointer+n) to pointer[n] [74] *((byte*~) ppuDataPutTile::ppuDataPut4_$0) ← (byte) ppuDataPutTile::ppuDataPut4_val#0  -- *(ppuDataPutTile::ppuDataPut4_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Converting *(pointer+n) to pointer[n] [79] *((byte*~) main::initNES1_disableVideoOutput1_$0) ← (byte) 0  -- *(main::initNES1_disableVideoOutput1_$2 + OFFSET_STRUCT_RICOH_2C02_PPUCTRL)
Converting *(pointer+n) to pointer[n] [82] *((byte*~) main::initNES1_disableVideoOutput1_$1) ← (byte) 0  -- *(main::initNES1_disableVideoOutput1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUMASK)
Converting *(pointer+n) to pointer[n] [86] *((byte*~) main::initNES1_disableAudioOutput1_$0) ← (byte) $40  -- *(main::initNES1_disableAudioOutput1_$1 + OFFSET_STRUCT_RICOH_2A03_DMC_FREQ)
Converting *(pointer+n) to pointer[n] [90] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*~) main::initNES1_waitForVBlank1_$2) & (byte) $80  -- *(main::initNES1_waitForVBlank1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUSTATUS)
Converting *(pointer+n) to pointer[n] [108] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*~) main::initNES1_waitForVBlank2_$2) & (byte) $80  -- *(main::initNES1_waitForVBlank2_$3 + OFFSET_STRUCT_RICOH_2C02_PPUSTATUS)
Converting *(pointer+n) to pointer[n] [146] *((byte*~) main::$12) ← (byte) 0  -- *(main::$15 + OFFSET_STRUCT_RICOH_2C02_PPUSCROLL)
Converting *(pointer+n) to pointer[n] [149] *((byte*~) main::$13) ← (byte) -8  -- *(main::$16 + OFFSET_STRUCT_RICOH_2C02_PPUSCROLL)
Converting *(pointer+n) to pointer[n] [152] *((byte*~) main::enableVideoOutput1_$0) ← (byte) $80  -- *(main::enableVideoOutput1_$2 + OFFSET_STRUCT_RICOH_2C02_PPUCTRL)
Converting *(pointer+n) to pointer[n] [155] *((byte*~) main::enableVideoOutput1_$1) ← (byte) $18  -- *(main::enableVideoOutput1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUMASK)
Converting *(pointer+n) to pointer[n] [162] *((byte*~) vblank::ppuSpriteBufferDmaTransfer1_$1) ← (byte) 0  -- *(vblank::ppuSpriteBufferDmaTransfer1_$3 + OFFSET_STRUCT_RICOH_2C02_OAMADDR)
Converting *(pointer+n) to pointer[n] [166] *((byte*~) vblank::ppuSpriteBufferDmaTransfer1_$2) ← (byte~) vblank::ppuSpriteBufferDmaTransfer1_$0  -- *(vblank::ppuSpriteBufferDmaTransfer1_$4 + OFFSET_STRUCT_RICOH_2A03_OAMDMA)
Converting *(pointer+n) to pointer[n] [169] *((byte*~) vblank::$29) ← (byte) 1  -- *(vblank::$33 + OFFSET_STRUCT_RICOH_2A03_JOY1)
Converting *(pointer+n) to pointer[n] [172] *((byte*~) vblank::$30) ← (byte) 0  -- *(vblank::$34 + OFFSET_STRUCT_RICOH_2A03_JOY1)
Converting *(pointer+n) to pointer[n] [175] (byte~) vblank::$1 ← *((byte*~) vblank::$31) & (byte) 1  -- *(vblank::$35 + OFFSET_STRUCT_RICOH_2A03_JOY1)
Converting *(pointer+n) to pointer[n] [180] (byte~) vblank::$3 ← *((byte*~) vblank::$32) & (byte) 1  -- *(vblank::$36 + OFFSET_STRUCT_RICOH_2A03_JOY1)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_STRUCT_SPRITEDATA in 
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_STRUCT_SPRITEDATA in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero ppuDataPutTile::tile#10 in [48] (byte) ppuDataPutTile::ppuDataPut1_val#0 ← *((byte*) ppuDataPutTile::tile#10 + (byte) 0)
Simplifying expression containing zero main::initNES1_disableVideoOutput1_$2 in [78] (byte*~) main::initNES1_disableVideoOutput1_$0 ← (const byte*) main::initNES1_disableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL
Simplifying expression containing zero main::initNES1_disableVideoOutput1_$2 in [79] *((const byte*) main::initNES1_disableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL) ← (byte) 0
Simplifying expression containing zero MEMORY in [95] *((const nomodify byte*) MEMORY+(byte) 0 + (byte) main::initNES1_i#2) ← (byte) 0
Simplifying expression containing zero main::enableVideoOutput1_$2 in [151] (byte*~) main::enableVideoOutput1_$0 ← (const byte*) main::enableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL
Simplifying expression containing zero main::enableVideoOutput1_$2 in [152] *((const byte*) main::enableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL) ← (byte) $80
Simplifying expression containing zero (byte*)OAM_BUFFER+OFFSET_STRUCT_SPRITEDATA_Y in [184] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$14) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$14)
Simplifying expression containing zero (byte*)OAM_BUFFER in [184] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$14) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y)
Simplifying expression containing zero (byte*)OAM_BUFFER+OFFSET_STRUCT_SPRITEDATA_Y in [184] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$14) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER)
Simplifying expression containing zero (byte*)OAM_BUFFER in [184] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER)
Simplifying expression containing zero (byte*)OAM_BUFFER in [186] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$16) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$16)
Simplifying expression containing zero (byte*)OAM_BUFFER in [186] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$16) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER + (const byte) vblank::$16)
Simplifying expression containing zero (byte*)OAM_BUFFER in [188] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$18) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$18)
Simplifying expression containing zero (byte*)OAM_BUFFER in [188] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$18) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER + (const byte) vblank::$18)
Simplifying expression containing zero (byte*)OAM_BUFFER in [190] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$20) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$20)
Simplifying expression containing zero (byte*)OAM_BUFFER in [190] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$20) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER + (const byte) vblank::$20)
Simplifying expression containing zero (byte*)OAM_BUFFER+OFFSET_STRUCT_SPRITEDATA_Y in [192] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$22) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$22)
Simplifying expression containing zero (byte*)OAM_BUFFER in [192] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$22) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y)
Simplifying expression containing zero (byte*)OAM_BUFFER+OFFSET_STRUCT_SPRITEDATA_Y in [192] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$22) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER)
Simplifying expression containing zero (byte*)OAM_BUFFER in [192] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER)
Simplifying expression containing zero (byte*)OAM_BUFFER in [194] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$24) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$24)
Simplifying expression containing zero (byte*)OAM_BUFFER in [194] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$24) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER + (const byte) vblank::$24)
Simplifying expression containing zero (byte*)OAM_BUFFER in [196] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$26) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$26)
Simplifying expression containing zero (byte*)OAM_BUFFER in [196] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$26) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER + (const byte) vblank::$26)
Simplifying expression containing zero (byte*)OAM_BUFFER in [198] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$28) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$28)
Simplifying expression containing zero (byte*)OAM_BUFFER in [198] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (const byte) vblank::$28) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER + (const byte) vblank::$28)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte*~) ppuDataFill::ppuDataPrepare1_$2 and assignment [2] (byte*~) ppuDataFill::ppuDataPrepare1_$2 ← (const byte*) ppuDataFill::ppuDataPrepare1_$4 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable (byte*~) ppuDataFill::ppuDataPrepare1_$3 and assignment [5] (byte*~) ppuDataFill::ppuDataPrepare1_$3 ← (const byte*) ppuDataFill::ppuDataPrepare1_$5 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable (byte*~) ppuDataFill::ppuDataPut1_$0 and assignment [9] (byte*~) ppuDataFill::ppuDataPut1_$0 ← (const byte*) ppuDataFill::ppuDataPut1_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
Eliminating unused variable (byte*~) ppuDataTransfer::ppuDataPrepare1_$2 and assignment [14] (byte*~) ppuDataTransfer::ppuDataPrepare1_$2 ← (const byte*) ppuDataTransfer::ppuDataPrepare1_$4 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable (byte*~) ppuDataTransfer::ppuDataPrepare1_$3 and assignment [17] (byte*~) ppuDataTransfer::ppuDataPrepare1_$3 ← (const byte*) ppuDataTransfer::ppuDataPrepare1_$5 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable (byte*~) ppuDataTransfer::ppuDataPut1_$0 and assignment [22] (byte*~) ppuDataTransfer::ppuDataPut1_$0 ← (const byte*) ppuDataTransfer::ppuDataPut1_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
Eliminating unused variable (byte*~) ppuDataPutTile::ppuDataPrepare1_$2 and assignment [29] (byte*~) ppuDataPutTile::ppuDataPrepare1_$2 ← (const byte*) ppuDataPutTile::ppuDataPrepare1_$4 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable (byte*~) ppuDataPutTile::ppuDataPrepare1_$3 and assignment [32] (byte*~) ppuDataPutTile::ppuDataPrepare1_$3 ← (const byte*) ppuDataPutTile::ppuDataPrepare1_$5 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable (byte*~) ppuDataPutTile::ppuDataPut1_$0 and assignment [35] (byte*~) ppuDataPutTile::ppuDataPut1_$0 ← (const byte*) ppuDataPutTile::ppuDataPut1_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
Eliminating unused variable (byte*~) ppuDataPutTile::ppuDataPut2_$0 and assignment [38] (byte*~) ppuDataPutTile::ppuDataPut2_$0 ← (const byte*) ppuDataPutTile::ppuDataPut2_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
Eliminating unused variable (byte*~) ppuDataPutTile::ppuDataPrepare2_$2 and assignment [44] (byte*~) ppuDataPutTile::ppuDataPrepare2_$2 ← (const byte*) ppuDataPutTile::ppuDataPrepare2_$4 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable (byte*~) ppuDataPutTile::ppuDataPrepare2_$3 and assignment [47] (byte*~) ppuDataPutTile::ppuDataPrepare2_$3 ← (const byte*) ppuDataPutTile::ppuDataPrepare2_$5 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable (byte*~) ppuDataPutTile::ppuDataPut3_$0 and assignment [50] (byte*~) ppuDataPutTile::ppuDataPut3_$0 ← (const byte*) ppuDataPutTile::ppuDataPut3_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
Eliminating unused variable (byte*~) ppuDataPutTile::ppuDataPut4_$0 and assignment [53] (byte*~) ppuDataPutTile::ppuDataPut4_$0 ← (const byte*) ppuDataPutTile::ppuDataPut4_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
Eliminating unused variable (byte*~) main::initNES1_disableVideoOutput1_$0 and assignment [57] (byte*~) main::initNES1_disableVideoOutput1_$0 ← (const byte*) main::initNES1_disableVideoOutput1_$2
Eliminating unused variable (byte*~) main::initNES1_disableVideoOutput1_$1 and assignment [59] (byte*~) main::initNES1_disableVideoOutput1_$1 ← (const byte*) main::initNES1_disableVideoOutput1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK
Eliminating unused variable (byte*~) main::initNES1_disableAudioOutput1_$0 and assignment [62] (byte*~) main::initNES1_disableAudioOutput1_$0 ← (const byte*) main::initNES1_disableAudioOutput1_$1 + (const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
Eliminating unused variable (byte*~) main::initNES1_waitForVBlank1_$2 and assignment [65] (byte*~) main::initNES1_waitForVBlank1_$2 ← (const byte*) main::initNES1_waitForVBlank1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
Eliminating unused variable (byte*~) main::initNES1_waitForVBlank2_$2 and assignment [79] (byte*~) main::initNES1_waitForVBlank2_$2 ← (const byte*) main::initNES1_waitForVBlank2_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
Eliminating unused variable (byte*~) main::$12 and assignment [97] (byte*~) main::$12 ← (const byte*) main::$15 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
Eliminating unused variable (byte*~) main::$13 and assignment [99] (byte*~) main::$13 ← (const byte*) main::$16 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
Eliminating unused variable (byte*~) main::enableVideoOutput1_$0 and assignment [101] (byte*~) main::enableVideoOutput1_$0 ← (const byte*) main::enableVideoOutput1_$2
Eliminating unused variable (byte*~) main::enableVideoOutput1_$1 and assignment [103] (byte*~) main::enableVideoOutput1_$1 ← (const byte*) main::enableVideoOutput1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK
Eliminating unused variable (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$1 and assignment [106] (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$1 ← (const byte*) vblank::ppuSpriteBufferDmaTransfer1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR
Eliminating unused variable (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$2 and assignment [109] (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$2 ← (const byte*) vblank::ppuSpriteBufferDmaTransfer1_$4 + (const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA
Eliminating unused variable (byte*~) vblank::$29 and assignment [111] (byte*~) vblank::$29 ← (const byte*) vblank::$33 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
Eliminating unused variable (byte*~) vblank::$30 and assignment [113] (byte*~) vblank::$30 ← (const byte*) vblank::$34 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
Eliminating unused variable (byte*~) vblank::$31 and assignment [115] (byte*~) vblank::$31 ← (const byte*) vblank::$35 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
Eliminating unused variable (byte*~) vblank::$32 and assignment [118] (byte*~) vblank::$32 ← (const byte*) vblank::$36 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
Eliminating unused constant (const byte) vblank::$14
Eliminating unused constant (const byte) vblank::$22
Eliminating unused constant (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL
Eliminating unused constant (const byte) OFFSET_STRUCT_SPRITEDATA_Y
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Resolving array sizeof() sizeof (const byte*) PALETTE
Resolving array sizeof() sizeof (const struct SpriteData*) SPRITES
Successful SSA optimization PassNSizeOfSimplification
Constant right-side identified [10] (byte~) ppuDataTransfer::ppuDataPrepare1_$0 ← > (const nomodify void*) ppuDataTransfer::ppuData#0
Constant right-side identified [12] (byte~) ppuDataTransfer::ppuDataPrepare1_$1 ← < (const nomodify void*) ppuDataTransfer::ppuData#0
Constant right-side identified [83] (byte~) vblank::ppuSpriteBufferDmaTransfer1_$0 ← > (const struct SpriteData*) vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) ppuDataTransfer::ppuDataPrepare1_$0 = >ppuDataTransfer::ppuData#0
Constant (const byte) ppuDataTransfer::ppuDataPrepare1_$1 = <ppuDataTransfer::ppuData#0
Constant (const byte) vblank::ppuSpriteBufferDmaTransfer1_$0 = >vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero <(const nomodify void*) ppuDataTransfer::ppuData#0 in 
Successful SSA optimization PassNSimplifyConstantZero
Adding number conversion cast (unumber) $20 in 
Adding number conversion cast (unumber) 4 in 
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $20
Simplifying constant integer cast 4
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 4
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining Noop Cast [28] (byte*~) ppuDataPutTile::$7 ← (byte*)(nomodify void*) ppuDataPutTile::ppuData#2 keeping ppuDataPutTile::ppuData#2
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [30] (nomodify void*) ppuDataPutTile::ppuDataPrepare2_ppuData#0 ← (void*)(byte*~) ppuDataPutTile::$3 keeping ppuDataPutTile::ppuDataPrepare2_ppuData#0
Inlining Noop Cast [68] (nomodify void*) ppuDataPutTile::ppuData#0 ← (void*)(byte*~) main::$8 keeping ppuDataPutTile::ppuData#0
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings (const word) ppuDataFill::i#0
Inlining constant with different constant siblings (const nomodify void*) ppuDataFill::ppuData#0
Inlining constant with var siblings (const byte) ppuDataFill::val#0
Inlining constant with var siblings (const word) ppuDataFill::size#0
Inlining constant with different constant siblings (const nomodify void*) ppuDataFill::ppuData#1
Inlining constant with var siblings (const byte) ppuDataFill::val#1
Inlining constant with var siblings (const word) ppuDataFill::size#1
Inlining constant with var siblings (const word) ppuDataTransfer::i#0
Inlining constant with var siblings (const byte*) ppuDataTransfer::cpuSrc#0
Inlining constant with var siblings (const byte*) ppuDataPutTile::tile#0
Inlining constant with var siblings (const nomodify void*) ppuDataPutTile::ppuData#1
Inlining constant with var siblings (const byte*) ppuDataPutTile::tile#1
Inlining constant with var siblings (const byte) main::initNES1_i#0
Inlining constant with var siblings (const byte) main::x#0
Inlining constant with var siblings (const byte) main::i#0
Constant inlined ppuDataPutTile::ppuDataPut4_$1 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataTransfer::i#0 = (word) 0
Constant inlined ppuDataTransfer::ppuDataPrepare1_$1 = (byte) 0
Constant inlined ppuDataTransfer::ppuDataPrepare1_$0 = >(const nomodify void*) ppuDataTransfer::ppuData#0
Constant inlined main::$14 = (byte*)(const struct SpriteData*) SPRITES
Constant inlined main::$15 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined main::$10 = (byte) 4*(const byte) SIZEOF_STRUCT_SPRITEDATA
Constant inlined main::initNES1_waitForVBlank2_$3 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined main::$16 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataFill::ppuDataPrepare1_$4 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataTransfer::ppuDataPrepare1_$5 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataFill::ppuDataPrepare1_$5 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataTransfer::ppuDataPrepare1_$4 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataFill::ppuData#1 = (void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0
Constant inlined ppuDataFill::ppuData#0 = (void*)(const nomodify byte*) PPU_NAME_TABLE_0
Constant inlined ppuDataTransfer::cpuSrc#0 = (byte*)(const nomodify void*) ppuDataTransfer::cpuData#0
Constant inlined vblank::$16 = (byte) 1*(const byte) SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$18 = (byte) 2*(const byte) SIZEOF_STRUCT_SPRITEDATA
Constant inlined main::initNES1_i#0 = (byte) 0
Constant inlined ppuDataPutTile::ppuDataPut1_$1 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataPutTile::ppuDataPrepare2_$5 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataPutTile::ppuDataPrepare2_$4 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataFill::i#0 = (word) 0
Constant inlined vblank::$24 = (byte) 1*(const byte) SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$26 = (byte) 2*(const byte) SIZEOF_STRUCT_SPRITEDATA
Constant inlined vblank::$28 = (byte) 3*(const byte) SIZEOF_STRUCT_SPRITEDATA
Constant inlined main::enableVideoOutput1_$3 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined vblank::$20 = (byte) 3*(const byte) SIZEOF_STRUCT_SPRITEDATA
Constant inlined main::enableVideoOutput1_$2 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataTransfer::ppuDataPut1_$1 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataPutTile::ppuDataPut2_$1 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataFill::val#1 = (byte) 0
Constant inlined ppuDataFill::ppuDataPut1_$1 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataFill::val#0 = (byte) $fc
Constant inlined ppuDataPutTile::ppuDataPrepare1_$5 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataPutTile::ppuDataPrepare1_$4 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined main::i#0 = (byte) 0
Constant inlined main::initNES1_disableVideoOutput1_$3 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined main::initNES1_disableVideoOutput1_$2 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined main::initNES1_disableAudioOutput1_$1 = (byte*)(const struct RICOH_2A03*) APU
Constant inlined ppuDataPutTile::tile#0 = (const byte*) FLOOR
Constant inlined ppuDataPutTile::tile#1 = (const byte*) FLAG
Constant inlined vblank::$35 = (byte*)(const struct RICOH_2A03*) APU
Constant inlined ppuDataPutTile::ppuDataPut3_$1 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined vblank::$36 = (byte*)(const struct RICOH_2A03*) APU
Constant inlined main::x#0 = (byte) 0
Constant inlined vblank::$33 = (byte*)(const struct RICOH_2A03*) APU
Constant inlined vblank::$34 = (byte*)(const struct RICOH_2A03*) APU
Constant inlined vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0 = (const nomodify struct SpriteData*) OAM_BUFFER
Constant inlined main::initNES1_waitForVBlank1_$3 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataPutTile::ppuData#1 = (void*)(const nomodify byte*) PPU_NAME_TABLE_0+(word)(number) $12*(number) $20+(byte) $1c
Constant inlined vblank::ppuSpriteBufferDmaTransfer1_$0 = >(const nomodify struct SpriteData*) OAM_BUFFER
Constant inlined ppuDataFill::size#1 = (byte) $40
Constant inlined ppuDataFill::size#0 = (word) $3c0
Constant inlined vblank::ppuSpriteBufferDmaTransfer1_$3 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined vblank::ppuSpriteBufferDmaTransfer1_$4 = (byte*)(const struct RICOH_2A03*) APU
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1)
Consolidated array index constant in *((byte*)OAM_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA)
Consolidated array index constant in *((byte*)OAM_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA)
Consolidated array index constant in *((byte*)OAM_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA)
Consolidated array index constant in *((byte*)OAM_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA)
Consolidated array index constant in *((byte*)OAM_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA)
Consolidated array index constant in *((byte*)OAM_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA)
Consolidated array index constant in *((byte*)OAM_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA)
Consolidated array index constant in *((byte*)OAM_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA)
Consolidated array index constant in *((byte*)OAM_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA)
Consolidated array index constant in *((byte*)OAM_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA)
Consolidated array index constant in *((byte*)OAM_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA)
Consolidated array index constant in *((byte*)OAM_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA)
Successful SSA optimization Pass2ConstantAdditionElimination
Added new block during phi lifting main::@14(between main::initNES1_@1 and main::initNES1_@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::initNES1_waitForVBlank1
Adding NOP phi() at start of main::initNES1_@6
Adding NOP phi() at start of main::initNES1_waitForVBlank2
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of ppuDataFill::@3
Adding NOP phi() at start of ppuDataFill::@2
Adding NOP phi() at start of ppuDataTransfer
Adding NOP phi() at start of ppuDataTransfer::@3
Adding NOP phi() at start of vblank
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to ppuDataTransfer:32 ppuDataFill:34 ppuDataFill:36 ppuDataPutTile:41 ppuDataPutTile:55 

Created 11 initial phi equivalence classes
Coalesced [52] main::i#4 ← main::i#1
Coalesced [57] main::x#5 ← main::x#1
Coalesced [58] main::initNES1_i#3 ← main::initNES1_i#1
Coalesced [90] ppuDataFill::i#6 ← ppuDataFill::i#1
Coalesced [102] ppuDataTransfer::i#6 ← ppuDataTransfer::i#1
Coalesced [103] ppuDataTransfer::cpuSrc#6 ← ppuDataTransfer::cpuSrc#1
Coalesced down to 11 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::initNES1_@6
Culled Empty Block (label) main::@11
Culled Empty Block (label) main::@13
Culled Empty Block (label) main::@14
Culled Empty Block (label) ppuDataFill::@3
Culled Empty Block (label) ppuDataFill::@2
Culled Empty Block (label) ppuDataTransfer::@3
Renumbering block ppuDataFill::@4 to ppuDataFill::@2
Renumbering block ppuDataTransfer::@4 to ppuDataTransfer::@3
Renumbering block main::@12 to main::@11
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::initNES1_waitForVBlank1
Adding NOP phi() at start of main::initNES1_waitForVBlank2
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of ppuDataTransfer
Adding NOP phi() at start of vblank

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::initNES1
main::initNES1: scope:[main]  from main
  asm { cld ldx#$ff txs  }
  to:main::initNES1_disableVideoOutput1
main::initNES1_disableVideoOutput1: scope:[main]  from main::initNES1
  [6] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0
  [7] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0
  to:main::initNES1_disableAudioOutput1
main::initNES1_disableAudioOutput1: scope:[main]  from main::initNES1_disableVideoOutput1
  [8] *((const nomodify byte*) FR_COUNTER) ← (byte) $40
  [9] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40
  to:main::initNES1_clearVBlankFlag1
main::initNES1_clearVBlankFlag1: scope:[main]  from main::initNES1_disableAudioOutput1
  asm { ldaPPU_PPUSTATUS  }
  to:main::initNES1_waitForVBlank1
main::initNES1_waitForVBlank1: scope:[main]  from main::initNES1_clearVBlankFlag1
  [11] phi()
  to:main::initNES1_waitForVBlank1_@1
main::initNES1_waitForVBlank1_@1: scope:[main]  from main::initNES1_waitForVBlank1 main::initNES1_waitForVBlank1_@1
  [12] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80
  [13] if((byte) 0==(byte~) main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1
  to:main::initNES1_@1
main::initNES1_@1: scope:[main]  from main::initNES1_@1 main::initNES1_waitForVBlank1_@1
  [14] (byte) main::initNES1_i#2 ← phi( main::initNES1_@1/(byte) main::initNES1_i#1 main::initNES1_waitForVBlank1_@1/(byte) 0 )
  [15] *((const nomodify byte*) MEMORY + (byte) main::initNES1_i#2) ← (byte) 0
  [16] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::initNES1_i#2) ← (byte) 0
  [17] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::initNES1_i#2) ← (byte) 0
  [18] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::initNES1_i#2) ← (byte) 0
  [19] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::initNES1_i#2) ← (byte) 0
  [20] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::initNES1_i#2) ← (byte) 0
  [21] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::initNES1_i#2) ← (byte) 0
  [22] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::initNES1_i#2) ← (byte) 0
  [23] (byte) main::initNES1_i#1 ← ++ (byte) main::initNES1_i#2
  [24] if((byte) 0!=(byte) main::initNES1_i#1) goto main::initNES1_@1
  to:main::initNES1_waitForVBlank2
main::initNES1_waitForVBlank2: scope:[main]  from main::initNES1_@1
  [25] phi()
  to:main::initNES1_waitForVBlank2_@1
main::initNES1_waitForVBlank2_@1: scope:[main]  from main::initNES1_waitForVBlank2 main::initNES1_waitForVBlank2_@1
  [26] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80
  [27] if((byte) 0==(byte~) main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1
  to:main::initNES1_@7
main::initNES1_@7: scope:[main]  from main::initNES1_waitForVBlank2_@1
  asm { ldaPPU_PPUSTATUS  }
  to:main::@8
main::@8: scope:[main]  from main::initNES1_@7
  [29] phi()
  [30] call ppuDataTransfer 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [31] phi()
  [32] call ppuDataFill 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [33] phi()
  [34] call ppuDataFill 
  to:main::@1
main::@1: scope:[main]  from main::@10 main::@11
  [35] (byte) main::x#2 ← phi( main::@10/(byte) 0 main::@11/(byte) main::x#1 )
  [36] if((byte) main::x#2<(byte) $20) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [37] phi()
  [38] call ppuDataPutTile 
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@5
  [39] (byte) main::i#2 ← phi( main::@3/(byte) 0 main::@5/(byte) main::i#1 )
  [40] if((byte) main::i#2<(byte) 4*(const byte) SIZEOF_STRUCT_SPRITEDATA) goto main::@5
  to:main::@6
main::@6: scope:[main]  from main::@4
  [41] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) 0
  [42] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) -8
  to:main::enableVideoOutput1
main::enableVideoOutput1: scope:[main]  from main::@6
  [43] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80
  [44] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $18
  to:main::@7
main::@7: scope:[main]  from main::@7 main::enableVideoOutput1
  [45] phi()
  to:main::@7
main::@5: scope:[main]  from main::@4
  [46] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER + (byte) main::i#2) ← *((byte*)(const struct SpriteData*) SPRITES + (byte) main::i#2)
  [47] (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@4
main::@2: scope:[main]  from main::@1
  [48] (nomodify byte*) ppuDataPutTile::ppuData#0 ← (const nomodify byte*) PPU_NAME_TABLE_0+(word)(number) $14*(number) $20 + (byte) main::x#2
  [49] (nomodify void*) ppuDataPutTile::ppuData#9 ← (void*)(nomodify byte*) ppuDataPutTile::ppuData#0
  [50] call ppuDataPutTile 
  to:main::@11
main::@11: scope:[main]  from main::@2
  [51] (byte) main::x#1 ← (byte) main::x#2 + (byte) 2
  to:main::@1

(void()) ppuDataPutTile((nomodify void*) ppuDataPutTile::ppuData , (byte*) ppuDataPutTile::tile)
ppuDataPutTile: scope:[ppuDataPutTile]  from main::@2 main::@3
  [52] (byte*) ppuDataPutTile::tile#10 ← phi( main::@2/(const byte*) FLOOR main::@3/(const byte*) FLAG )
  [52] (nomodify void*) ppuDataPutTile::ppuData#2 ← phi( main::@2/(nomodify void*) ppuDataPutTile::ppuData#9 main::@3/(void*)(const nomodify byte*) PPU_NAME_TABLE_0+(word)(number) $12*(number) $20+(byte) $1c )
  to:ppuDataPutTile::ppuDataPrepare1
ppuDataPutTile::ppuDataPrepare1: scope:[ppuDataPutTile]  from ppuDataPutTile
  [53] (byte~) ppuDataPutTile::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataPutTile::ppuData#2
  [54] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataPutTile::ppuDataPrepare1_$0
  [55] (byte~) ppuDataPutTile::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataPutTile::ppuData#2
  [56] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataPutTile::ppuDataPrepare1_$1
  to:ppuDataPutTile::@1
ppuDataPutTile::@1: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPrepare1
  [57] (byte) ppuDataPutTile::ppuDataPut1_val#0 ← *((byte*) ppuDataPutTile::tile#10)
  to:ppuDataPutTile::ppuDataPut1
ppuDataPutTile::ppuDataPut1: scope:[ppuDataPutTile]  from ppuDataPutTile::@1
  [58] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataPutTile::ppuDataPut1_val#0
  to:ppuDataPutTile::@2
ppuDataPutTile::@2: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPut1
  [59] (byte) ppuDataPutTile::ppuDataPut2_val#0 ← *((byte*) ppuDataPutTile::tile#10 + (byte) 1)
  to:ppuDataPutTile::ppuDataPut2
ppuDataPutTile::ppuDataPut2: scope:[ppuDataPutTile]  from ppuDataPutTile::@2
  [60] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataPutTile::ppuDataPut2_val#0
  to:ppuDataPutTile::@3
ppuDataPutTile::@3: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPut2
  [61] (nomodify byte*) ppuDataPutTile::ppuDataPrepare2_ppuData#0 ← (byte*)(nomodify void*) ppuDataPutTile::ppuData#2 + (byte) $20
  to:ppuDataPutTile::ppuDataPrepare2
ppuDataPutTile::ppuDataPrepare2: scope:[ppuDataPutTile]  from ppuDataPutTile::@3
  [62] (byte~) ppuDataPutTile::ppuDataPrepare2_$0 ← > (void*)(nomodify byte*) ppuDataPutTile::ppuDataPrepare2_ppuData#0
  [63] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataPutTile::ppuDataPrepare2_$0
  [64] (byte~) ppuDataPutTile::ppuDataPrepare2_$1 ← < (void*)(nomodify byte*) ppuDataPutTile::ppuDataPrepare2_ppuData#0
  [65] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataPutTile::ppuDataPrepare2_$1
  to:ppuDataPutTile::@4
ppuDataPutTile::@4: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPrepare2
  [66] (byte) ppuDataPutTile::ppuDataPut3_val#0 ← *((byte*) ppuDataPutTile::tile#10 + (byte) 2)
  to:ppuDataPutTile::ppuDataPut3
ppuDataPutTile::ppuDataPut3: scope:[ppuDataPutTile]  from ppuDataPutTile::@4
  [67] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataPutTile::ppuDataPut3_val#0
  to:ppuDataPutTile::@5
ppuDataPutTile::@5: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPut3
  [68] (byte) ppuDataPutTile::ppuDataPut4_val#0 ← *((byte*) ppuDataPutTile::tile#10 + (byte) 3)
  to:ppuDataPutTile::ppuDataPut4
ppuDataPutTile::ppuDataPut4: scope:[ppuDataPutTile]  from ppuDataPutTile::@5
  [69] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataPutTile::ppuDataPut4_val#0
  to:ppuDataPutTile::@return
ppuDataPutTile::@return: scope:[ppuDataPutTile]  from ppuDataPutTile::ppuDataPut4
  [70] return 
  to:@return

(void()) ppuDataFill((nomodify void*) ppuDataFill::ppuData , (byte) ppuDataFill::val , (word) ppuDataFill::size)
ppuDataFill: scope:[ppuDataFill]  from main::@10 main::@9
  [71] (byte) ppuDataFill::val#4 ← phi( main::@10/(byte) 0 main::@9/(byte) $fc )
  [71] (word) ppuDataFill::size#3 ← phi( main::@10/(byte) $40 main::@9/(word) $3c0 )
  [71] (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 ← phi( main::@10/(void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0 main::@9/(void*)(const nomodify byte*) PPU_NAME_TABLE_0 )
  to:ppuDataFill::ppuDataPrepare1
ppuDataFill::ppuDataPrepare1: scope:[ppuDataFill]  from ppuDataFill
  [72] (byte~) ppuDataFill::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0
  [73] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$0
  [74] (byte~) ppuDataFill::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0
  [75] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$1
  to:ppuDataFill::@1
ppuDataFill::@1: scope:[ppuDataFill]  from ppuDataFill::@2 ppuDataFill::ppuDataPrepare1
  [76] (word) ppuDataFill::i#2 ← phi( ppuDataFill::ppuDataPrepare1/(word) 0 ppuDataFill::@2/(word) ppuDataFill::i#1 )
  [77] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1
  to:ppuDataFill::@return
ppuDataFill::@return: scope:[ppuDataFill]  from ppuDataFill::@1
  [78] return 
  to:@return
ppuDataFill::ppuDataPut1: scope:[ppuDataFill]  from ppuDataFill::@1
  [79] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataFill::val#4
  to:ppuDataFill::@2
ppuDataFill::@2: scope:[ppuDataFill]  from ppuDataFill::ppuDataPut1
  [80] (word) ppuDataFill::i#1 ← ++ (word) ppuDataFill::i#2
  to:ppuDataFill::@1

(void()) ppuDataTransfer((nomodify void*) ppuDataTransfer::ppuData , (nomodify void*) ppuDataTransfer::cpuData , (word) ppuDataTransfer::size)
ppuDataTransfer: scope:[ppuDataTransfer]  from main::@8
  [81] phi()
  to:ppuDataTransfer::ppuDataPrepare1
ppuDataTransfer::ppuDataPrepare1: scope:[ppuDataTransfer]  from ppuDataTransfer
  [82] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify void*) ppuDataTransfer::ppuData#0
  [83] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0
  to:ppuDataTransfer::@1
ppuDataTransfer::@1: scope:[ppuDataTransfer]  from ppuDataTransfer::@3 ppuDataTransfer::ppuDataPrepare1
  [84] (byte*) ppuDataTransfer::cpuSrc#2 ← phi( ppuDataTransfer::ppuDataPrepare1/(byte*)(const nomodify void*) ppuDataTransfer::cpuData#0 ppuDataTransfer::@3/(byte*) ppuDataTransfer::cpuSrc#1 )
  [84] (word) ppuDataTransfer::i#2 ← phi( ppuDataTransfer::ppuDataPrepare1/(word) 0 ppuDataTransfer::@3/(word) ppuDataTransfer::i#1 )
  [85] if((word) ppuDataTransfer::i#2<(const word) ppuDataTransfer::size#0) goto ppuDataTransfer::@2
  to:ppuDataTransfer::@return
ppuDataTransfer::@return: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  [86] return 
  to:@return
ppuDataTransfer::@2: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  [87] (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2)
  to:ppuDataTransfer::ppuDataPut1
ppuDataTransfer::ppuDataPut1: scope:[ppuDataTransfer]  from ppuDataTransfer::@2
  [88] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataTransfer::ppuDataPut1_val#0
  to:ppuDataTransfer::@3
ppuDataTransfer::@3: scope:[ppuDataTransfer]  from ppuDataTransfer::ppuDataPut1
  [89] (byte*) ppuDataTransfer::cpuSrc#1 ← ++ (byte*) ppuDataTransfer::cpuSrc#2
  [90] (word) ppuDataTransfer::i#1 ← ++ (word) ppuDataTransfer::i#2
  to:ppuDataTransfer::@1

interrupt(HARDWARE_STACK)(void()) vblank()
vblank: scope:[vblank]  from
  [91] phi()
  to:vblank::ppuSpriteBufferDmaTransfer1
vblank::ppuSpriteBufferDmaTransfer1: scope:[vblank]  from vblank
  [92] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR) ← (byte) 0
  [93] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA) ← >(const nomodify struct SpriteData*) OAM_BUFFER
  to:vblank::@4
vblank::@4: scope:[vblank]  from vblank::ppuSpriteBufferDmaTransfer1
  [94] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1
  [95] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0
  [96] (byte~) vblank::$1 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1
  [97] if((byte) 0==(byte~) vblank::$1) goto vblank::@1
  to:vblank::@2
vblank::@2: scope:[vblank]  from vblank::@4
  [98] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER)
  [99] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 1*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 1*(const byte) SIZEOF_STRUCT_SPRITEDATA)
  [100] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 2*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 2*(const byte) SIZEOF_STRUCT_SPRITEDATA)
  [101] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 3*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 3*(const byte) SIZEOF_STRUCT_SPRITEDATA)
  to:vblank::@1
vblank::@1: scope:[vblank]  from vblank::@2 vblank::@4
  [102] (byte~) vblank::$3 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1
  [103] if((byte) 0==(byte~) vblank::$3) goto vblank::@return
  to:vblank::@3
vblank::@3: scope:[vblank]  from vblank::@1
  [104] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER)
  [105] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 1*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 1*(const byte) SIZEOF_STRUCT_SPRITEDATA)
  [106] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 2*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 2*(const byte) SIZEOF_STRUCT_SPRITEDATA)
  [107] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 3*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 3*(const byte) SIZEOF_STRUCT_SPRITEDATA)
  to:vblank::@return
vblank::@return: scope:[vblank]  from vblank::@1 vblank::@3
  [108] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) RICOH_2A03::DMC_FREQ
(byte) RICOH_2A03::DMC_LEN
(byte) RICOH_2A03::DMC_RAW
(byte) RICOH_2A03::DMC_START
(byte) RICOH_2A03::JOY1
(byte) RICOH_2A03::JOY2
(byte) RICOH_2A03::NOISE_HI
(byte) RICOH_2A03::NOISE_LO
(byte) RICOH_2A03::NOISE_VOL
(byte) RICOH_2A03::OAMDMA
(byte) RICOH_2A03::SND_CHN
(byte) RICOH_2A03::SQ1_HI
(byte) RICOH_2A03::SQ1_LO
(byte) RICOH_2A03::SQ1_SWEEP
(byte) RICOH_2A03::SQ1_VOL
(byte) RICOH_2A03::SQ2_HI
(byte) RICOH_2A03::SQ2_LO
(byte) RICOH_2A03::SQ2_SWEEP
(byte) RICOH_2A03::SQ2_VOL
(byte) RICOH_2A03::TRI_HI
(byte) RICOH_2A03::TRI_LINEAR
(byte) RICOH_2A03::TRI_LO
(byte) RICOH_2A03::UNUSED1
(byte) RICOH_2A03::UNUSED2
(byte) RICOH_2C02::OAMADDR
(byte) RICOH_2C02::OAMDATA
(byte) RICOH_2C02::PPUADDR
(byte) RICOH_2C02::PPUCTRL
(byte) RICOH_2C02::PPUDATA
(byte) RICOH_2C02::PPUMASK
(byte) RICOH_2C02::PPUSCROLL
(volatile byte) RICOH_2C02::PPUSTATUS loadstore
(byte) SpriteData::attributes
(byte) SpriteData::tile
(byte) SpriteData::x
(byte) SpriteData::y
(void()) main()
(byte) main::i
(byte) main::i#1 202.0
(byte) main::i#2 168.33333333333331
(byte) main::initNES1_i
(byte) main::initNES1_i#1 151.5
(byte) main::initNES1_i#2 112.22222222222223
(byte~) main::initNES1_waitForVBlank1_$0 202.0
(byte~) main::initNES1_waitForVBlank2_$0 202.0
(byte) main::x
(byte) main::x#1 202.0
(byte) main::x#2 80.8
(void()) ppuDataFill((nomodify void*) ppuDataFill::ppuData , (byte) ppuDataFill::val , (word) ppuDataFill::size)
(word) ppuDataFill::i
(word) ppuDataFill::i#1 2002.0
(word) ppuDataFill::i#2 1001.0
(nomodify void*) ppuDataFill::ppuData
(byte~) ppuDataFill::ppuDataPrepare1_$0 202.0
(byte~) ppuDataFill::ppuDataPrepare1_$1 202.0
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 67.33333333333333
(byte) ppuDataFill::ppuDataPut1_val
(word) ppuDataFill::size
(word) ppuDataFill::size#3 111.22222222222223
(byte) ppuDataFill::val
(byte) ppuDataFill::val#4 111.22222222222223
(void()) ppuDataPutTile((nomodify void*) ppuDataPutTile::ppuData , (byte*) ppuDataPutTile::tile)
(nomodify void*) ppuDataPutTile::ppuData
(nomodify byte*) ppuDataPutTile::ppuData#0 101.0
(nomodify void*) ppuDataPutTile::ppuData#2 233.66666666666669
(nomodify void*) ppuDataPutTile::ppuData#9 202.0
(byte~) ppuDataPutTile::ppuDataPrepare1_$0 2002.0
(byte~) ppuDataPutTile::ppuDataPrepare1_$1 2002.0
(nomodify void*) ppuDataPutTile::ppuDataPrepare1_ppuData
(byte~) ppuDataPutTile::ppuDataPrepare2_$0 2002.0
(byte~) ppuDataPutTile::ppuDataPrepare2_$1 2002.0
(nomodify void*) ppuDataPutTile::ppuDataPrepare2_ppuData
(nomodify byte*) ppuDataPutTile::ppuDataPrepare2_ppuData#0 333.6666666666667
(byte) ppuDataPutTile::ppuDataPut1_val
(byte) ppuDataPutTile::ppuDataPut1_val#0 2002.0
(byte) ppuDataPutTile::ppuDataPut2_val
(byte) ppuDataPutTile::ppuDataPut2_val#0 2002.0
(byte) ppuDataPutTile::ppuDataPut3_val
(byte) ppuDataPutTile::ppuDataPut3_val#0 2002.0
(byte) ppuDataPutTile::ppuDataPut4_val
(byte) ppuDataPutTile::ppuDataPut4_val#0 2002.0
(byte*) ppuDataPutTile::tile
(byte*) ppuDataPutTile::tile#10 250.25
(void()) ppuDataTransfer((nomodify void*) ppuDataTransfer::ppuData , (nomodify void*) ppuDataTransfer::cpuData , (word) ppuDataTransfer::size)
(nomodify void*) ppuDataTransfer::cpuData
(byte*) ppuDataTransfer::cpuSrc
(byte*) ppuDataTransfer::cpuSrc#1 1001.0
(byte*) ppuDataTransfer::cpuSrc#2 750.75
(word) ppuDataTransfer::i
(word) ppuDataTransfer::i#1 2002.0
(word) ppuDataTransfer::i#2 600.5999999999999
(nomodify void*) ppuDataTransfer::ppuData
(nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData
(byte) ppuDataTransfer::ppuDataPut1_val
(byte) ppuDataTransfer::ppuDataPut1_val#0 2002.0
(word) ppuDataTransfer::size
interrupt(HARDWARE_STACK)(void()) vblank()
(byte~) vblank::$1 4.0
(byte~) vblank::$3 4.0
(struct SpriteData*) vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer

Initial phi equivalence classes
[ main::initNES1_i#2 main::initNES1_i#1 ]
[ main::x#2 main::x#1 ]
[ main::i#2 main::i#1 ]
[ ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ]
[ ppuDataPutTile::tile#10 ]
[ ppuDataFill::ppuDataPrepare1_ppuData#0 ]
[ ppuDataFill::size#3 ]
[ ppuDataFill::val#4 ]
[ ppuDataFill::i#2 ppuDataFill::i#1 ]
[ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
[ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ]
Added variable main::initNES1_waitForVBlank1_$0 to live range equivalence class [ main::initNES1_waitForVBlank1_$0 ]
Added variable main::initNES1_waitForVBlank2_$0 to live range equivalence class [ main::initNES1_waitForVBlank2_$0 ]
Added variable ppuDataPutTile::ppuData#0 to live range equivalence class [ ppuDataPutTile::ppuData#0 ]
Added variable ppuDataPutTile::ppuDataPrepare1_$0 to live range equivalence class [ ppuDataPutTile::ppuDataPrepare1_$0 ]
Added variable ppuDataPutTile::ppuDataPrepare1_$1 to live range equivalence class [ ppuDataPutTile::ppuDataPrepare1_$1 ]
Added variable ppuDataPutTile::ppuDataPut1_val#0 to live range equivalence class [ ppuDataPutTile::ppuDataPut1_val#0 ]
Added variable ppuDataPutTile::ppuDataPut2_val#0 to live range equivalence class [ ppuDataPutTile::ppuDataPut2_val#0 ]
Added variable ppuDataPutTile::ppuDataPrepare2_ppuData#0 to live range equivalence class [ ppuDataPutTile::ppuDataPrepare2_ppuData#0 ]
Added variable ppuDataPutTile::ppuDataPrepare2_$0 to live range equivalence class [ ppuDataPutTile::ppuDataPrepare2_$0 ]
Added variable ppuDataPutTile::ppuDataPrepare2_$1 to live range equivalence class [ ppuDataPutTile::ppuDataPrepare2_$1 ]
Added variable ppuDataPutTile::ppuDataPut3_val#0 to live range equivalence class [ ppuDataPutTile::ppuDataPut3_val#0 ]
Added variable ppuDataPutTile::ppuDataPut4_val#0 to live range equivalence class [ ppuDataPutTile::ppuDataPut4_val#0 ]
Added variable ppuDataFill::ppuDataPrepare1_$0 to live range equivalence class [ ppuDataFill::ppuDataPrepare1_$0 ]
Added variable ppuDataFill::ppuDataPrepare1_$1 to live range equivalence class [ ppuDataFill::ppuDataPrepare1_$1 ]
Added variable ppuDataTransfer::ppuDataPut1_val#0 to live range equivalence class [ ppuDataTransfer::ppuDataPut1_val#0 ]
Added variable vblank::$1 to live range equivalence class [ vblank::$1 ]
Added variable vblank::$3 to live range equivalence class [ vblank::$3 ]
Complete equivalence classes
[ main::initNES1_i#2 main::initNES1_i#1 ]
[ main::x#2 main::x#1 ]
[ main::i#2 main::i#1 ]
[ ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ]
[ ppuDataPutTile::tile#10 ]
[ ppuDataFill::ppuDataPrepare1_ppuData#0 ]
[ ppuDataFill::size#3 ]
[ ppuDataFill::val#4 ]
[ ppuDataFill::i#2 ppuDataFill::i#1 ]
[ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
[ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ]
[ main::initNES1_waitForVBlank1_$0 ]
[ main::initNES1_waitForVBlank2_$0 ]
[ ppuDataPutTile::ppuData#0 ]
[ ppuDataPutTile::ppuDataPrepare1_$0 ]
[ ppuDataPutTile::ppuDataPrepare1_$1 ]
[ ppuDataPutTile::ppuDataPut1_val#0 ]
[ ppuDataPutTile::ppuDataPut2_val#0 ]
[ ppuDataPutTile::ppuDataPrepare2_ppuData#0 ]
[ ppuDataPutTile::ppuDataPrepare2_$0 ]
[ ppuDataPutTile::ppuDataPrepare2_$1 ]
[ ppuDataPutTile::ppuDataPut3_val#0 ]
[ ppuDataPutTile::ppuDataPut4_val#0 ]
[ ppuDataFill::ppuDataPrepare1_$0 ]
[ ppuDataFill::ppuDataPrepare1_$1 ]
[ ppuDataTransfer::ppuDataPut1_val#0 ]
[ vblank::$1 ]
[ vblank::$3 ]
Allocated zp[1]:2 [ main::initNES1_i#2 main::initNES1_i#1 ]
Allocated zp[1]:3 [ main::x#2 main::x#1 ]
Allocated zp[1]:4 [ main::i#2 main::i#1 ]
Allocated zp[2]:5 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ]
Allocated zp[2]:7 [ ppuDataPutTile::tile#10 ]
Allocated zp[2]:9 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ]
Allocated zp[2]:11 [ ppuDataFill::size#3 ]
Allocated zp[1]:13 [ ppuDataFill::val#4 ]
Allocated zp[2]:14 [ ppuDataFill::i#2 ppuDataFill::i#1 ]
Allocated zp[2]:16 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
Allocated zp[2]:18 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ]
Allocated zp[1]:20 [ main::initNES1_waitForVBlank1_$0 ]
Allocated zp[1]:21 [ main::initNES1_waitForVBlank2_$0 ]
Allocated zp[2]:22 [ ppuDataPutTile::ppuData#0 ]
Allocated zp[1]:24 [ ppuDataPutTile::ppuDataPrepare1_$0 ]
Allocated zp[1]:25 [ ppuDataPutTile::ppuDataPrepare1_$1 ]
Allocated zp[1]:26 [ ppuDataPutTile::ppuDataPut1_val#0 ]
Allocated zp[1]:27 [ ppuDataPutTile::ppuDataPut2_val#0 ]
Allocated zp[2]:28 [ ppuDataPutTile::ppuDataPrepare2_ppuData#0 ]
Allocated zp[1]:30 [ ppuDataPutTile::ppuDataPrepare2_$0 ]
Allocated zp[1]:31 [ ppuDataPutTile::ppuDataPrepare2_$1 ]
Allocated zp[1]:32 [ ppuDataPutTile::ppuDataPut3_val#0 ]
Allocated zp[1]:33 [ ppuDataPutTile::ppuDataPut4_val#0 ]
Allocated zp[1]:34 [ ppuDataFill::ppuDataPrepare1_$0 ]
Allocated zp[1]:35 [ ppuDataFill::ppuDataPrepare1_$1 ]
Allocated zp[1]:36 [ ppuDataTransfer::ppuDataPut1_val#0 ]
Allocated zp[1]:37 [ vblank::$1 ]
Allocated zp[1]:38 [ vblank::$3 ]

INITIAL ASM
Target platform is nes / MOS6502
  // File Comments
// A minimal NES demo
// Based on: https://github.com/gregkrsak/first_nes written by Greg M. Krsak, 2018. 
  // Upstart
  // Nintendo Entertainment System (NES) ROM
// https://sadistech.com/nesromtool/romdoc.html
// https://forums.nesdev.com/viewtopic.php?f=2&t=9896
// https://github.com/gregkrsak/first_nes
.file [name="nes-demo.nes", type="bin", segments="NesRom"]
.file [name="nes-demo.nes_hdr", type="bin", segments="Header"]
.file [name="nes-demo.nes_prg", type="bin", segments="ProgramRom"]
.file [name="nes-demo.nes_chr", type="bin", segments="CharacterRom"]
.segmentdef Header  [ start=$0000,       min=$0000, max=$000f, fill ]
.segmentdef Tiles   [ start=$0000,       min=$0000, max=$1fff, fill ]
.segmentdef Code    [ start=$c000,       min=$c000, max=$fff9 ]
.segmentdef Data    [ startAfter="Code", min=$c000, max=$fff9 ]
.segmentdef Vectors [ start=$fffa,       min=$fffa, max=$ffff ]
.segmentdef ProgramRom [ segments="Code, Data, Vectors" ]
.segmentdef CharacterRom [ segments="Tiles" ]
.segmentdef NesRom
.segment NesRom
.segmentout [ segments="Header" ]
.segmentout [ segments="ProgramRom" ]
.segmentout [ segments="CharacterRom" ]
.segment Header
.text   @"NES\$1a"
.byte   $01           // 1x 16KB ROM (PRG)
.byte   $01           // 1x 8KB VROM (CHR)
.byte   %00000001     // Mapper nibble 0000 == No mapping (a simple 16KB PRG + 8KB CHR game)
                      // Mirroring nibble 0001 == Vertical mirroring only
.segment Code

  // Global Constants & labels
  .const SIZEOF_STRUCT_SPRITEDATA = 4
  .const OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
  .const OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
  .const OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
  .const OFFSET_STRUCT_RICOH_2C02_OAMADDR = 3
  .const OFFSET_STRUCT_RICOH_2A03_OAMDMA = $14
  .const OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
  .const OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
  .const OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = 5
  .const OFFSET_STRUCT_RICOH_2A03_JOY1 = $16
  .const SIZEOF_BYTE = 1
  // $2000-$23bf	$03c0	Name table 0
  .label PPU_NAME_TABLE_0 = $2000
  // $23c0-$23ff	$0040	Attribute table 0
  .label PPU_ATTRIBUTE_TABLE_0 = $23c0
  // $3000-$3eff	$0f00	Mirrors of $2000-$2eff
  // $3f00-$3f1f	$0020	Palette RAM indexes
  .label PPU_PALETTE = $3f00
  // APU Frame Counter
  // generates low-frequency clocks for the channels and an optional 60 Hz interrupt.
  // https://wiki.nesdev.com/w/index.php/APU_Frame_Counter
  // ------+-----+---------------------------------------------------------------
  //  $4017 |	 W  | FR_COUNTER Frame Counter	Set mode and interrupt
  //  ------+-----+---------------------------------------------------------------
  //        |   7	| Sequencer mode: 0 selects 4-step sequence, 1 selects 5-step sequence
  //        |   6	| Interrupt inhibit flag. If set, the frame interrupt flag is cleared, otherwise it is unaffected.
  //  ------+-----+---------------------------------------------------------------
  // Side effects	After 3 or 4 CPU clock cycles*, the timer is reset.
  // If the mode flag is set, then both "quarter frame" and "half frame" signals are also generated.
  .label FR_COUNTER = $4017
  // Pointer to the start of RAM memory
  .label MEMORY = 0
  // Sprite OAM Buffer
  // Will be transfered to the PPU via DMA during vblank
  .label OAM_BUFFER = $200
  // PPU Status Register for reading in ASM
  .label PPU_PPUSTATUS = $2002
  // NES Picture Processing Unit (PPU)
  .label PPU = $2000
  // NES CPU and audion processing unit (APU)
  .label APU = $4000
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
.segment Code
  // main
// RESET Called when the NES is reset, including when it is turned on.
main: {
    .label initNES1_waitForVBlank1___0 = $14
    .label initNES1_waitForVBlank2___0 = $15
    .label initNES1_i = 2
    .label x = 3
    .label i = 4
    jmp initNES1
    // main::initNES1
  initNES1:
    // asm { cld ldx#$ff txs  }
    cld
    ldx #$ff
    txs
    jmp initNES1_disableVideoOutput1
    // main::initNES1_disableVideoOutput1
  initNES1_disableVideoOutput1:
    // [6] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU
    // [7] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    jmp initNES1_disableAudioOutput1
    // main::initNES1_disableAudioOutput1
  initNES1_disableAudioOutput1:
    // [8] *((const nomodify byte*) FR_COUNTER) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta FR_COUNTER
    // [9] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
    jmp initNES1_clearVBlankFlag1
    // main::initNES1_clearVBlankFlag1
  initNES1_clearVBlankFlag1:
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [11] phi from main::initNES1_clearVBlankFlag1 to main::initNES1_waitForVBlank1 [phi:main::initNES1_clearVBlankFlag1->main::initNES1_waitForVBlank1]
  initNES1_waitForVBlank1_from_initNES1_clearVBlankFlag1:
    jmp initNES1_waitForVBlank1
    // main::initNES1_waitForVBlank1
  initNES1_waitForVBlank1:
    jmp initNES1_waitForVBlank1___b1
    // main::initNES1_waitForVBlank1_@1
  initNES1_waitForVBlank1___b1:
    // [12] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuz1=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    sta.z initNES1_waitForVBlank1___0
    // [13] if((byte) 0==(byte~) main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z initNES1_waitForVBlank1___0
    beq initNES1_waitForVBlank1___b1
    // [14] phi from main::initNES1_waitForVBlank1_@1 to main::initNES1_@1 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1]
  initNES1___b1_from_initNES1_waitForVBlank1___b1:
    // [14] phi (byte) main::initNES1_i#2 = (byte) 0 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z initNES1_i
    jmp initNES1___b1
    // [14] phi from main::initNES1_@1 to main::initNES1_@1 [phi:main::initNES1_@1->main::initNES1_@1]
  initNES1___b1_from_initNES1___b1:
    // [14] phi (byte) main::initNES1_i#2 = (byte) main::initNES1_i#1 [phi:main::initNES1_@1->main::initNES1_@1#0] -- register_copy 
    jmp initNES1___b1
    // main::initNES1_@1
  initNES1___b1:
    // [15] *((const nomodify byte*) MEMORY + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY,y
    // [16] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY+$100,y
    // [17] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY+$200,y
    // [18] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY+$300,y
    // [19] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY+$400,y
    // [20] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY+$500,y
    // [21] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY+$600,y
    // [22] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY+$700,y
    // [23] (byte) main::initNES1_i#1 ← ++ (byte) main::initNES1_i#2 -- vbuz1=_inc_vbuz1 
    inc.z initNES1_i
    // [24] if((byte) 0!=(byte) main::initNES1_i#1) goto main::initNES1_@1 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z initNES1_i
    bne initNES1___b1_from_initNES1___b1
    // [25] phi from main::initNES1_@1 to main::initNES1_waitForVBlank2 [phi:main::initNES1_@1->main::initNES1_waitForVBlank2]
  initNES1_waitForVBlank2_from_initNES1___b1:
    jmp initNES1_waitForVBlank2
    // main::initNES1_waitForVBlank2
  initNES1_waitForVBlank2:
    jmp initNES1_waitForVBlank2___b1
    // main::initNES1_waitForVBlank2_@1
  initNES1_waitForVBlank2___b1:
    // [26] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuz1=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    sta.z initNES1_waitForVBlank2___0
    // [27] if((byte) 0==(byte~) main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z initNES1_waitForVBlank2___0
    beq initNES1_waitForVBlank2___b1
    jmp initNES1___b7
    // main::initNES1_@7
  initNES1___b7:
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [29] phi from main::initNES1_@7 to main::@8 [phi:main::initNES1_@7->main::@8]
  __b8_from_initNES1___b7:
    jmp __b8
    // main::@8
  __b8:
    // [30] call ppuDataTransfer 
  // Transfer the palette
    // [81] phi from main::@8 to ppuDataTransfer [phi:main::@8->ppuDataTransfer]
  ppuDataTransfer_from___b8:
    jsr ppuDataTransfer
    // [31] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  __b9_from___b8:
    jmp __b9
    // main::@9
  __b9:
    // [32] call ppuDataFill 
  // Clear the name table
    // [71] phi from main::@9 to ppuDataFill [phi:main::@9->ppuDataFill]
  ppuDataFill_from___b9:
    // [71] phi (byte) ppuDataFill::val#4 = (byte) $fc [phi:main::@9->ppuDataFill#0] -- vbuz1=vbuc1 
    lda #$fc
    sta.z ppuDataFill.val
    // [71] phi (word) ppuDataFill::size#3 = (word) $3c0 [phi:main::@9->ppuDataFill#1] -- vwuz1=vwuc1 
    lda #<$3c0
    sta.z ppuDataFill.size
    lda #>$3c0
    sta.z ppuDataFill.size+1
    // [71] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_NAME_TABLE_0 [phi:main::@9->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [33] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  __b10_from___b9:
    jmp __b10
    // main::@10
  __b10:
    // [34] call ppuDataFill 
  // Fill the PPU attribute table
    // [71] phi from main::@10 to ppuDataFill [phi:main::@10->ppuDataFill]
  ppuDataFill_from___b10:
    // [71] phi (byte) ppuDataFill::val#4 = (byte) 0 [phi:main::@10->ppuDataFill#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ppuDataFill.val
    // [71] phi (word) ppuDataFill::size#3 = (byte) $40 [phi:main::@10->ppuDataFill#1] -- vwuz1=vbuc1 
    lda #<$40
    sta.z ppuDataFill.size
    lda #>$40
    sta.z ppuDataFill.size+1
    // [71] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0 [phi:main::@10->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [35] phi from main::@10 to main::@1 [phi:main::@10->main::@1]
  __b1_from___b10:
    // [35] phi (byte) main::x#2 = (byte) 0 [phi:main::@10->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    jmp __b1
  // Show the entire tile set
  //char ch=0;
  //for(char y=0;y!=16;y++) {
  //    ppuDataPrepare(PPU_NAME_TABLE_0+32*4+4+(unsigned int)y*32);
  //    for(char x=0;x!=16;x++)
  //        ppuDataPut(ch++);
  //}
  // Show floor
    // main::@1
  __b1:
    // [36] if((byte) main::x#2<(byte) $20) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z x
    cmp #$20
    bcc __b2
    // [37] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    jmp __b3
    // main::@3
  __b3:
    // [38] call ppuDataPutTile 
  // Show flag
    // [52] phi from main::@3 to ppuDataPutTile [phi:main::@3->ppuDataPutTile]
  ppuDataPutTile_from___b3:
    // [52] phi (byte*) ppuDataPutTile::tile#10 = (const byte*) FLAG [phi:main::@3->ppuDataPutTile#0] -- pbuz1=pbuc1 
    lda #<FLAG
    sta.z ppuDataPutTile.tile
    lda #>FLAG
    sta.z ppuDataPutTile.tile+1
    // [52] phi (nomodify void*) ppuDataPutTile::ppuData#2 = (void*)(const nomodify byte*) PPU_NAME_TABLE_0+(word)(number) $12*(number) $20+(byte) $1c [phi:main::@3->ppuDataPutTile#1] -- pvoz1=pvoc1 
    lda #<PPU_NAME_TABLE_0+$12*$20+$1c
    sta.z ppuDataPutTile.ppuData_1
    lda #>PPU_NAME_TABLE_0+$12*$20+$1c
    sta.z ppuDataPutTile.ppuData_1+1
    jsr ppuDataPutTile
    // [39] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    // [39] phi (byte) main::i#2 = (byte) 0 [phi:main::@3->main::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b4
  // Initialize Sprite OAM Buffer with the SPRITE data
    // main::@4
  __b4:
    // [40] if((byte) main::i#2<(byte) 4*(const byte) SIZEOF_STRUCT_SPRITEDATA) goto main::@5 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #4*SIZEOF_STRUCT_SPRITEDATA
    bcc __b5
    jmp __b6
    // main::@6
  __b6:
    // [41] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Set initial scroll
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    // [42] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) -8 -- _deref_pbuc1=vbuc2 
    lda #-8
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    jmp enableVideoOutput1
    // main::enableVideoOutput1
  enableVideoOutput1:
    // [43] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80 -- _deref_pbuc1=vbuc2 
    lda #$80
    sta PPU
    // [44] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $18 -- _deref_pbuc1=vbuc2 
    lda #$18
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    // [45] phi from main::@7 main::enableVideoOutput1 to main::@7 [phi:main::@7/main::enableVideoOutput1->main::@7]
  __b7_from___b7:
  __b7_from_enableVideoOutput1:
    jmp __b7
  // Infinite loop
    // main::@7
  __b7:
    jmp __b7_from___b7
    // main::@5
  __b5:
    // [46] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER + (byte) main::i#2) ← *((byte*)(const struct SpriteData*) SPRITES + (byte) main::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda SPRITES,y
    sta OAM_BUFFER,y
    // [47] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [39] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
  __b4_from___b5:
    // [39] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@5->main::@4#0] -- register_copy 
    jmp __b4
    // main::@2
  __b2:
    // [48] (nomodify byte*) ppuDataPutTile::ppuData#0 ← (const nomodify byte*) PPU_NAME_TABLE_0+(word)(number) $14*(number) $20 + (byte) main::x#2 -- pbuz1=pbuc1_plus_vbuz2 
    lda.z x
    clc
    adc #<PPU_NAME_TABLE_0+$14*$20
    sta.z ppuDataPutTile.ppuData
    lda #>PPU_NAME_TABLE_0+$14*$20
    adc #0
    sta.z ppuDataPutTile.ppuData+1
    // [49] (nomodify void*) ppuDataPutTile::ppuData#9 ← (void*)(nomodify byte*) ppuDataPutTile::ppuData#0 -- pvoz1=pvoz2 
    lda.z ppuDataPutTile.ppuData
    sta.z ppuDataPutTile.ppuData_1
    lda.z ppuDataPutTile.ppuData+1
    sta.z ppuDataPutTile.ppuData_1+1
    // [50] call ppuDataPutTile 
    // [52] phi from main::@2 to ppuDataPutTile [phi:main::@2->ppuDataPutTile]
  ppuDataPutTile_from___b2:
    // [52] phi (byte*) ppuDataPutTile::tile#10 = (const byte*) FLOOR [phi:main::@2->ppuDataPutTile#0] -- pbuz1=pbuc1 
    lda #<FLOOR
    sta.z ppuDataPutTile.tile
    lda #>FLOOR
    sta.z ppuDataPutTile.tile+1
    // [52] phi (nomodify void*) ppuDataPutTile::ppuData#2 = (nomodify void*) ppuDataPutTile::ppuData#9 [phi:main::@2->ppuDataPutTile#1] -- register_copy 
    jsr ppuDataPutTile
    jmp __b11
    // main::@11
  __b11:
    // [51] (byte) main::x#1 ← (byte) main::x#2 + (byte) 2 -- vbuz1=vbuz1_plus_2 
    lda.z x
    clc
    adc #2
    sta.z x
    // [35] phi from main::@11 to main::@1 [phi:main::@11->main::@1]
  __b1_from___b11:
    // [35] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@11->main::@1#0] -- register_copy 
    jmp __b1
}
  // ppuDataPutTile
// Transfer a 2x2 tile into the PPU memory
// - ppuData : Pointer in the PPU memory
// - tile : The tile to transfer
// ppuDataPutTile(byte* zp($16) ppuData, byte* zp(7) tile)
ppuDataPutTile: {
    .label ppuDataPrepare1___0 = $18
    .label ppuDataPrepare1___1 = $19
    .label ppuDataPrepare2___0 = $1e
    .label ppuDataPrepare2___1 = $1f
    .label ppuDataPut1_val = $1a
    .label ppuDataPut2_val = $1b
    .label ppuDataPrepare2_ppuData = $1c
    .label ppuDataPut3_val = $20
    .label ppuDataPut4_val = $21
    .label ppuData = $16
    .label ppuData_1 = 5
    .label tile = 7
    jmp ppuDataPrepare1
    // ppuDataPutTile::ppuDataPrepare1
  ppuDataPrepare1:
    // [53] (byte~) ppuDataPutTile::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataPutTile::ppuData#2 -- vbuz1=_hi_pvoz2 
    lda.z ppuData_1+1
    sta.z ppuDataPrepare1___0
    // [54] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataPutTile::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuz1 
    lda.z ppuDataPrepare1___0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [55] (byte~) ppuDataPutTile::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataPutTile::ppuData#2 -- vbuz1=_lo_pvoz2 
    lda.z ppuData_1
    sta.z ppuDataPrepare1___1
    // [56] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataPutTile::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuz1 
    lda.z ppuDataPrepare1___1
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    jmp __b1
    // ppuDataPutTile::@1
  __b1:
    // [57] (byte) ppuDataPutTile::ppuDataPut1_val#0 ← *((byte*) ppuDataPutTile::tile#10) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (tile),y
    sta.z ppuDataPut1_val
    jmp ppuDataPut1
    // ppuDataPutTile::ppuDataPut1
  ppuDataPut1:
    // [58] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataPutTile::ppuDataPut1_val#0 -- _deref_pbuc1=vbuz1 
    lda.z ppuDataPut1_val
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b2
    // ppuDataPutTile::@2
  __b2:
    // [59] (byte) ppuDataPutTile::ppuDataPut2_val#0 ← *((byte*) ppuDataPutTile::tile#10 + (byte) 1) -- vbuz1=pbuz2_derefidx_vbuc1 
    ldy #1
    lda (tile),y
    sta.z ppuDataPut2_val
    jmp ppuDataPut2
    // ppuDataPutTile::ppuDataPut2
  ppuDataPut2:
    // [60] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataPutTile::ppuDataPut2_val#0 -- _deref_pbuc1=vbuz1 
    lda.z ppuDataPut2_val
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b3
    // ppuDataPutTile::@3
  __b3:
    // [61] (nomodify byte*) ppuDataPutTile::ppuDataPrepare2_ppuData#0 ← (byte*)(nomodify void*) ppuDataPutTile::ppuData#2 + (byte) $20 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$20
    clc
    adc.z ppuData_1
    sta.z ppuDataPrepare2_ppuData
    lda #0
    adc.z ppuData_1+1
    sta.z ppuDataPrepare2_ppuData+1
    jmp ppuDataPrepare2
    // ppuDataPutTile::ppuDataPrepare2
  ppuDataPrepare2:
    // [62] (byte~) ppuDataPutTile::ppuDataPrepare2_$0 ← > (void*)(nomodify byte*) ppuDataPutTile::ppuDataPrepare2_ppuData#0 -- vbuz1=_hi_pvoz2 
    lda.z ppuDataPrepare2_ppuData+1
    sta.z ppuDataPrepare2___0
    // [63] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataPutTile::ppuDataPrepare2_$0 -- _deref_pbuc1=vbuz1 
    lda.z ppuDataPrepare2___0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [64] (byte~) ppuDataPutTile::ppuDataPrepare2_$1 ← < (void*)(nomodify byte*) ppuDataPutTile::ppuDataPrepare2_ppuData#0 -- vbuz1=_lo_pvoz2 
    lda.z ppuDataPrepare2_ppuData
    sta.z ppuDataPrepare2___1
    // [65] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataPutTile::ppuDataPrepare2_$1 -- _deref_pbuc1=vbuz1 
    lda.z ppuDataPrepare2___1
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    jmp __b4
    // ppuDataPutTile::@4
  __b4:
    // [66] (byte) ppuDataPutTile::ppuDataPut3_val#0 ← *((byte*) ppuDataPutTile::tile#10 + (byte) 2) -- vbuz1=pbuz2_derefidx_vbuc1 
    ldy #2
    lda (tile),y
    sta.z ppuDataPut3_val
    jmp ppuDataPut3
    // ppuDataPutTile::ppuDataPut3
  ppuDataPut3:
    // [67] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataPutTile::ppuDataPut3_val#0 -- _deref_pbuc1=vbuz1 
    lda.z ppuDataPut3_val
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b5
    // ppuDataPutTile::@5
  __b5:
    // [68] (byte) ppuDataPutTile::ppuDataPut4_val#0 ← *((byte*) ppuDataPutTile::tile#10 + (byte) 3) -- vbuz1=pbuz2_derefidx_vbuc1 
    ldy #3
    lda (tile),y
    sta.z ppuDataPut4_val
    jmp ppuDataPut4
    // ppuDataPutTile::ppuDataPut4
  ppuDataPut4:
    // [69] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataPutTile::ppuDataPut4_val#0 -- _deref_pbuc1=vbuz1 
    lda.z ppuDataPut4_val
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __breturn
    // ppuDataPutTile::@return
  __breturn:
    // [70] return 
    rts
}
  // ppuDataFill
// Fill a number of bytes in the PPU memory
// - ppuData : Pointer in the PPU memory
// - size : The number of bytes to transfer
// ppuDataFill(byte zp($d) val, word zp($b) size)
ppuDataFill: {
    .label ppuDataPrepare1___0 = $22
    .label ppuDataPrepare1___1 = $23
    .label ppuDataPrepare1_ppuData = 9
    .label i = $e
    .label size = $b
    .label val = $d
    jmp ppuDataPrepare1
    // ppuDataFill::ppuDataPrepare1
  ppuDataPrepare1:
    // [72] (byte~) ppuDataFill::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuz1=_hi_pvoz2 
    lda.z ppuDataPrepare1_ppuData+1
    sta.z ppuDataPrepare1___0
    // [73] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuz1 
    lda.z ppuDataPrepare1___0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [74] (byte~) ppuDataFill::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuz1=_lo_pvoz2 
    lda.z ppuDataPrepare1_ppuData
    sta.z ppuDataPrepare1___1
    // [75] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuz1 
    lda.z ppuDataPrepare1___1
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [76] phi from ppuDataFill::ppuDataPrepare1 to ppuDataFill::@1 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1]
  __b1_from_ppuDataPrepare1:
    // [76] phi (word) ppuDataFill::i#2 = (word) 0 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
  // Transfer to PPU
    // ppuDataFill::@1
  __b1:
    // [77] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1 -- vwuz1_lt_vwuz2_then_la1 
    lda.z i+1
    cmp.z size+1
    bcc ppuDataPut1
    bne !+
    lda.z i
    cmp.z size
    bcc ppuDataPut1
  !:
    jmp __breturn
    // ppuDataFill::@return
  __breturn:
    // [78] return 
    rts
    // ppuDataFill::ppuDataPut1
  ppuDataPut1:
    // [79] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataFill::val#4 -- _deref_pbuc1=vbuz1 
    lda.z val
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b2
    // ppuDataFill::@2
  __b2:
    // [80] (word) ppuDataFill::i#1 ← ++ (word) ppuDataFill::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [76] phi from ppuDataFill::@2 to ppuDataFill::@1 [phi:ppuDataFill::@2->ppuDataFill::@1]
  __b1_from___b2:
    // [76] phi (word) ppuDataFill::i#2 = (word) ppuDataFill::i#1 [phi:ppuDataFill::@2->ppuDataFill::@1#0] -- register_copy 
    jmp __b1
}
  // ppuDataTransfer
// Transfer a number of bytes from the CPU memory to the PPU memory
// - cpuData : Pointer to the CPU memory (RAM of ROM)
// - ppuData : Pointer in the PPU memory
// - size : The number of bytes to transfer
ppuDataTransfer: {
    .const size = $20*SIZEOF_BYTE
    .label ppuData = PPU_PALETTE
    .label cpuData = PALETTE
    .label ppuDataPut1_val = $24
    // Transfer to PPU
    .label cpuSrc = $12
    .label i = $10
    jmp ppuDataPrepare1
    // ppuDataTransfer::ppuDataPrepare1
  ppuDataPrepare1:
    // [82] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify void*) ppuDataTransfer::ppuData#0 -- _deref_pbuc1=vbuc2 
    lda #>ppuData
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [83] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [84] phi from ppuDataTransfer::ppuDataPrepare1 to ppuDataTransfer::@1 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1]
  __b1_from_ppuDataPrepare1:
    // [84] phi (byte*) ppuDataTransfer::cpuSrc#2 = (byte*)(const nomodify void*) ppuDataTransfer::cpuData#0 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1#0] -- pbuz1=pbuc1 
    lda #<cpuData
    sta.z cpuSrc
    lda #>cpuData
    sta.z cpuSrc+1
    // [84] phi (word) ppuDataTransfer::i#2 = (word) 0 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
    // ppuDataTransfer::@1
  __b1:
    // [85] if((word) ppuDataTransfer::i#2<(const word) ppuDataTransfer::size#0) goto ppuDataTransfer::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>size
    bcc __b2
    bne !+
    lda.z i
    cmp #<size
    bcc __b2
  !:
    jmp __breturn
    // ppuDataTransfer::@return
  __breturn:
    // [86] return 
    rts
    // ppuDataTransfer::@2
  __b2:
    // [87] (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (cpuSrc),y
    sta.z ppuDataPut1_val
    jmp ppuDataPut1
    // ppuDataTransfer::ppuDataPut1
  ppuDataPut1:
    // [88] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataTransfer::ppuDataPut1_val#0 -- _deref_pbuc1=vbuz1 
    lda.z ppuDataPut1_val
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b3
    // ppuDataTransfer::@3
  __b3:
    // [89] (byte*) ppuDataTransfer::cpuSrc#1 ← ++ (byte*) ppuDataTransfer::cpuSrc#2 -- pbuz1=_inc_pbuz1 
    inc.z cpuSrc
    bne !+
    inc.z cpuSrc+1
  !:
    // [90] (word) ppuDataTransfer::i#1 ← ++ (word) ppuDataTransfer::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [84] phi from ppuDataTransfer::@3 to ppuDataTransfer::@1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1]
  __b1_from___b3:
    // [84] phi (byte*) ppuDataTransfer::cpuSrc#2 = (byte*) ppuDataTransfer::cpuSrc#1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#0] -- register_copy 
    // [84] phi (word) ppuDataTransfer::i#2 = (word) ppuDataTransfer::i#1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#1] -- register_copy 
    jmp __b1
}
  // vblank
// NMI Called when the PPU refreshes the screen (also known as the V-Blank period)
vblank: {
    .label __1 = $25
    .label __3 = $26
    // entry interrupt(HARDWARE_STACK)
    pha
    txa
    pha
    tya
    pha
    jmp ppuSpriteBufferDmaTransfer1
    // vblank::ppuSpriteBufferDmaTransfer1
  ppuSpriteBufferDmaTransfer1:
    // [92] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR
    // [93] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA) ← >(const nomodify struct SpriteData*) OAM_BUFFER -- _deref_pbuc1=vbuc2 
    lda #>OAM_BUFFER
    sta APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA
    jmp __b4
    // vblank::@4
  __b4:
    // [94] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1 -- _deref_pbuc1=vbuc2 
    // Latch the controller buttons
    lda #1
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [95] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [96] (byte~) vblank::$1 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 -- vbuz1=_deref_pbuc1_band_vbuc2 
    lda #1
    and APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    sta.z __1
    // [97] if((byte) 0==(byte~) vblank::$1) goto vblank::@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z __1
    beq __b1
    jmp __b2
    // vblank::@2
  __b2:
    // [98] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER
    // [99] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 1*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 1*(const byte) SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA
    // [100] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 2*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 2*(const byte) SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA
    // [101] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 3*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 3*(const byte) SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA
    jmp __b1
    // vblank::@1
  __b1:
    // [102] (byte~) vblank::$3 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 -- vbuz1=_deref_pbuc1_band_vbuc2 
    lda #1
    and APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    sta.z __3
    // [103] if((byte) 0==(byte~) vblank::$3) goto vblank::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z __3
    beq __breturn
    jmp __b3
    // vblank::@3
  __b3:
    // [104] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER
    // [105] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 1*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 1*(const byte) SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA
    // [106] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 2*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 2*(const byte) SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA
    // [107] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 3*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 3*(const byte) SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA
    jmp __breturn
    // vblank::@return
  __breturn:
    // [108] return  - exit interrupt(HARDWARE_STACK)
    pla
    tay
    pla
    tax
    pla
    rti
}
  // File Data
.segment Data
  // Flag tile
  FLAG: .byte $54, $55, $56, $57
  // Floor tile
  FLOOR: .byte $85, $85, $86, $86
  // Small Luigi Sprite Data
  SPRITES: .byte $80, $36, 2, $80, $80, $37, 2, $88, $88, $38, 2, $80, $88, $39, 2, $88
  // Color Palette
  PALETTE: .byte $f, $13, $23, $33, $f, 6, $15, $36, $f, $39, $4a, $5b, $f, $3d, $4e, $5f, $f, $1c, $15, $14, $f, 2, $38, $3c, $f, $30, $37, $1a, $f, $f, $f, $f
.segment Tiles
TILES:
.import binary "smb1_chr.bin"

.segment Vectors
  VECTORS: .word vblank, main, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement asm { cld ldx#$ff txs  } always clobbers reg byte x 
Statement [6] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [7] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [8] *((const nomodify byte*) FR_COUNTER) ← (byte) $40 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [9] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [12] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 [ main::initNES1_waitForVBlank1_$0 ] (  [ main::initNES1_waitForVBlank1_$0 ] { }  main:2 [ main::initNES1_waitForVBlank1_$0 ] { }  ) always clobbers reg byte a 
Statement [15] *((const nomodify byte*) MEMORY + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:2 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::initNES1_i#2 main::initNES1_i#1 ]
Statement [16] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:2 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [17] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:2 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [18] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:2 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [19] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:2 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [20] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:2 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [21] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:2 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [22] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:2 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [26] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 [ main::initNES1_waitForVBlank2_$0 ] (  [ main::initNES1_waitForVBlank2_$0 ] { }  main:2 [ main::initNES1_waitForVBlank2_$0 ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [41] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) 0 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [42] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) -8 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [43] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [44] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $18 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [46] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER + (byte) main::i#2) ← *((byte*)(const struct SpriteData*) SPRITES + (byte) main::i#2) [ main::i#2 ] (  [ main::i#2 ] { }  main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::i#2 main::i#1 ]
Statement [48] (nomodify byte*) ppuDataPutTile::ppuData#0 ← (const nomodify byte*) PPU_NAME_TABLE_0+(word)(number) $14*(number) $20 + (byte) main::x#2 [ main::x#2 ppuDataPutTile::ppuData#0 ] (  [ main::x#2 ppuDataPutTile::ppuData#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  main:2 [ main::x#2 ppuDataPutTile::ppuData#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::x#2 main::x#1 ]
Statement [49] (nomodify void*) ppuDataPutTile::ppuData#9 ← (void*)(nomodify byte*) ppuDataPutTile::ppuData#0 [ main::x#2 ppuDataPutTile::ppuData#9 ] (  [ main::x#2 ppuDataPutTile::ppuData#9 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  main:2 [ main::x#2 ppuDataPutTile::ppuData#9 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a 
Statement [53] (byte~) ppuDataPutTile::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataPutTile::ppuData#2 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare1_$0 ] ( ppuDataPutTile:38 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare1_$0 ] { }  main:2::ppuDataPutTile:38 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare1_$0 ] { }  ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare1_$0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  main:2::ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare1_$0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a 
Statement [55] (byte~) ppuDataPutTile::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataPutTile::ppuData#2 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare1_$1 ] ( ppuDataPutTile:38 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare1_$1 ] { }  main:2::ppuDataPutTile:38 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare1_$1 ] { }  ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare1_$1 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  main:2::ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare1_$1 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a 
Statement [57] (byte) ppuDataPutTile::ppuDataPut1_val#0 ← *((byte*) ppuDataPutTile::tile#10) [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut1_val#0 ] ( ppuDataPutTile:38 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut1_val#0 ] { }  main:2::ppuDataPutTile:38 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut1_val#0 ] { }  ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut1_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  main:2::ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut1_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:3 [ main::x#2 main::x#1 ]
Statement [59] (byte) ppuDataPutTile::ppuDataPut2_val#0 ← *((byte*) ppuDataPutTile::tile#10 + (byte) 1) [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut2_val#0 ] ( ppuDataPutTile:38 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut2_val#0 ] { }  main:2::ppuDataPutTile:38 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut2_val#0 ] { }  ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut2_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  main:2::ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut2_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a reg byte y 
Statement [61] (nomodify byte*) ppuDataPutTile::ppuDataPrepare2_ppuData#0 ← (byte*)(nomodify void*) ppuDataPutTile::ppuData#2 + (byte) $20 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] ( ppuDataPutTile:38 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] { }  main:2::ppuDataPutTile:38 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] { }  ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  main:2::ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a 
Statement [62] (byte~) ppuDataPutTile::ppuDataPrepare2_$0 ← > (void*)(nomodify byte*) ppuDataPutTile::ppuDataPrepare2_ppuData#0 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ppuDataPutTile::ppuDataPrepare2_$0 ] ( ppuDataPutTile:38 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ppuDataPutTile::ppuDataPrepare2_$0 ] { }  main:2::ppuDataPutTile:38 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ppuDataPutTile::ppuDataPrepare2_$0 ] { }  ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ppuDataPutTile::ppuDataPrepare2_$0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  main:2::ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ppuDataPutTile::ppuDataPrepare2_$0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a 
Statement [64] (byte~) ppuDataPutTile::ppuDataPrepare2_$1 ← < (void*)(nomodify byte*) ppuDataPutTile::ppuDataPrepare2_ppuData#0 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_$1 ] ( ppuDataPutTile:38 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_$1 ] { }  main:2::ppuDataPutTile:38 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_$1 ] { }  ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_$1 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  main:2::ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_$1 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a 
Statement [66] (byte) ppuDataPutTile::ppuDataPut3_val#0 ← *((byte*) ppuDataPutTile::tile#10 + (byte) 2) [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut3_val#0 ] ( ppuDataPutTile:38 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut3_val#0 ] { }  main:2::ppuDataPutTile:38 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut3_val#0 ] { }  ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut3_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  main:2::ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut3_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a reg byte y 
Statement [68] (byte) ppuDataPutTile::ppuDataPut4_val#0 ← *((byte*) ppuDataPutTile::tile#10 + (byte) 3) [ ppuDataPutTile::ppuDataPut4_val#0 ] ( ppuDataPutTile:38 [ ppuDataPutTile::ppuDataPut4_val#0 ] { }  main:2::ppuDataPutTile:38 [ ppuDataPutTile::ppuDataPut4_val#0 ] { }  ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::ppuDataPut4_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  main:2::ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::ppuDataPut4_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a reg byte y 
Statement [72] (byte~) ppuDataFill::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::ppuDataPrepare1_$0 ] ( ppuDataFill:32 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::ppuDataPrepare1_$0 ] { }  main:2::ppuDataFill:32 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::ppuDataPrepare1_$0 ] { }  ppuDataFill:34 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::ppuDataPrepare1_$0 ] { }  main:2::ppuDataFill:34 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::ppuDataPrepare1_$0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:13 [ ppuDataFill::val#4 ]
Statement [74] (byte~) ppuDataFill::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::ppuDataPrepare1_$1 ] ( ppuDataFill:32 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::ppuDataPrepare1_$1 ] { }  main:2::ppuDataFill:32 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::ppuDataPrepare1_$1 ] { }  ppuDataFill:34 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::ppuDataPrepare1_$1 ] { }  main:2::ppuDataFill:34 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::ppuDataPrepare1_$1 ] { }  ) always clobbers reg byte a 
Statement [77] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] ( ppuDataFill:32 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] { }  main:2::ppuDataFill:32 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] { }  ppuDataFill:34 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] { }  main:2::ppuDataFill:34 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] { }  ) always clobbers reg byte a 
Statement [82] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify void*) ppuDataTransfer::ppuData#0 [ ] ( ppuDataTransfer:30 [ ] { }  main:2::ppuDataTransfer:30 [ ] { }  ) always clobbers reg byte a 
Statement [83] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0 [ ] ( ppuDataTransfer:30 [ ] { }  main:2::ppuDataTransfer:30 [ ] { }  ) always clobbers reg byte a 
Statement [85] if((word) ppuDataTransfer::i#2<(const word) ppuDataTransfer::size#0) goto ppuDataTransfer::@2 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] ( ppuDataTransfer:30 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] { }  main:2::ppuDataTransfer:30 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] { }  ) always clobbers reg byte a 
Statement [87] (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2) [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] ( ppuDataTransfer:30 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] { }  main:2::ppuDataTransfer:30 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [92] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR) ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [93] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA) ← >(const nomodify struct SpriteData*) OAM_BUFFER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [94] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [95] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [96] (byte~) vblank::$1 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 [ vblank::$1 ] (  [ vblank::$1 ] { }  ) always clobbers reg byte a 
Statement [102] (byte~) vblank::$3 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 [ vblank::$3 ] (  [ vblank::$3 ] { }  ) always clobbers reg byte a 
Statement [108] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement asm { cld ldx#$ff txs  } always clobbers reg byte x 
Statement [6] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [7] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [8] *((const nomodify byte*) FR_COUNTER) ← (byte) $40 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [9] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [12] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 [ main::initNES1_waitForVBlank1_$0 ] (  [ main::initNES1_waitForVBlank1_$0 ] { }  main:2 [ main::initNES1_waitForVBlank1_$0 ] { }  ) always clobbers reg byte a 
Statement [15] *((const nomodify byte*) MEMORY + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:2 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [16] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:2 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [17] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:2 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [18] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:2 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [19] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:2 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [20] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:2 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [21] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:2 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [22] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:2 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [26] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 [ main::initNES1_waitForVBlank2_$0 ] (  [ main::initNES1_waitForVBlank2_$0 ] { }  main:2 [ main::initNES1_waitForVBlank2_$0 ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [41] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) 0 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [42] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) -8 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [43] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [44] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $18 [ ] (  [ ] { }  main:2 [ ] { }  ) always clobbers reg byte a 
Statement [46] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER + (byte) main::i#2) ← *((byte*)(const struct SpriteData*) SPRITES + (byte) main::i#2) [ main::i#2 ] (  [ main::i#2 ] { }  main:2 [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [48] (nomodify byte*) ppuDataPutTile::ppuData#0 ← (const nomodify byte*) PPU_NAME_TABLE_0+(word)(number) $14*(number) $20 + (byte) main::x#2 [ main::x#2 ppuDataPutTile::ppuData#0 ] (  [ main::x#2 ppuDataPutTile::ppuData#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  main:2 [ main::x#2 ppuDataPutTile::ppuData#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a 
Statement [49] (nomodify void*) ppuDataPutTile::ppuData#9 ← (void*)(nomodify byte*) ppuDataPutTile::ppuData#0 [ main::x#2 ppuDataPutTile::ppuData#9 ] (  [ main::x#2 ppuDataPutTile::ppuData#9 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  main:2 [ main::x#2 ppuDataPutTile::ppuData#9 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a 
Statement [53] (byte~) ppuDataPutTile::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataPutTile::ppuData#2 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare1_$0 ] ( ppuDataPutTile:38 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare1_$0 ] { }  main:2::ppuDataPutTile:38 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare1_$0 ] { }  ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare1_$0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  main:2::ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare1_$0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a 
Statement [55] (byte~) ppuDataPutTile::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataPutTile::ppuData#2 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare1_$1 ] ( ppuDataPutTile:38 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare1_$1 ] { }  main:2::ppuDataPutTile:38 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare1_$1 ] { }  ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare1_$1 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  main:2::ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare1_$1 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a 
Statement [57] (byte) ppuDataPutTile::ppuDataPut1_val#0 ← *((byte*) ppuDataPutTile::tile#10) [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut1_val#0 ] ( ppuDataPutTile:38 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut1_val#0 ] { }  main:2::ppuDataPutTile:38 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut1_val#0 ] { }  ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut1_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  main:2::ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut1_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a reg byte y 
Statement [59] (byte) ppuDataPutTile::ppuDataPut2_val#0 ← *((byte*) ppuDataPutTile::tile#10 + (byte) 1) [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut2_val#0 ] ( ppuDataPutTile:38 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut2_val#0 ] { }  main:2::ppuDataPutTile:38 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut2_val#0 ] { }  ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut2_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  main:2::ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::ppuData#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut2_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a reg byte y 
Statement [61] (nomodify byte*) ppuDataPutTile::ppuDataPrepare2_ppuData#0 ← (byte*)(nomodify void*) ppuDataPutTile::ppuData#2 + (byte) $20 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] ( ppuDataPutTile:38 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] { }  main:2::ppuDataPutTile:38 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] { }  ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  main:2::ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a 
Statement [62] (byte~) ppuDataPutTile::ppuDataPrepare2_$0 ← > (void*)(nomodify byte*) ppuDataPutTile::ppuDataPrepare2_ppuData#0 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ppuDataPutTile::ppuDataPrepare2_$0 ] ( ppuDataPutTile:38 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ppuDataPutTile::ppuDataPrepare2_$0 ] { }  main:2::ppuDataPutTile:38 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ppuDataPutTile::ppuDataPrepare2_$0 ] { }  ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ppuDataPutTile::ppuDataPrepare2_$0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  main:2::ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ppuDataPutTile::ppuDataPrepare2_$0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a 
Statement [64] (byte~) ppuDataPutTile::ppuDataPrepare2_$1 ← < (void*)(nomodify byte*) ppuDataPutTile::ppuDataPrepare2_ppuData#0 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_$1 ] ( ppuDataPutTile:38 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_$1 ] { }  main:2::ppuDataPutTile:38 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_$1 ] { }  ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_$1 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  main:2::ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPrepare2_$1 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a 
Statement [66] (byte) ppuDataPutTile::ppuDataPut3_val#0 ← *((byte*) ppuDataPutTile::tile#10 + (byte) 2) [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut3_val#0 ] ( ppuDataPutTile:38 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut3_val#0 ] { }  main:2::ppuDataPutTile:38 [ ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut3_val#0 ] { }  ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut3_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  main:2::ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::tile#10 ppuDataPutTile::ppuDataPut3_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a reg byte y 
Statement [68] (byte) ppuDataPutTile::ppuDataPut4_val#0 ← *((byte*) ppuDataPutTile::tile#10 + (byte) 3) [ ppuDataPutTile::ppuDataPut4_val#0 ] ( ppuDataPutTile:38 [ ppuDataPutTile::ppuDataPut4_val#0 ] { }  main:2::ppuDataPutTile:38 [ ppuDataPutTile::ppuDataPut4_val#0 ] { }  ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::ppuDataPut4_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  main:2::ppuDataPutTile:50 [ main::x#2 ppuDataPutTile::ppuDataPut4_val#0 ] { { ppuDataPutTile::ppuData#2 = ppuDataPutTile::ppuData#9 } }  ) always clobbers reg byte a reg byte y 
Statement [72] (byte~) ppuDataFill::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::ppuDataPrepare1_$0 ] ( ppuDataFill:32 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::ppuDataPrepare1_$0 ] { }  main:2::ppuDataFill:32 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::ppuDataPrepare1_$0 ] { }  ppuDataFill:34 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::ppuDataPrepare1_$0 ] { }  main:2::ppuDataFill:34 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::ppuDataPrepare1_$0 ] { }  ) always clobbers reg byte a 
Statement [74] (byte~) ppuDataFill::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::ppuDataPrepare1_$1 ] ( ppuDataFill:32 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::ppuDataPrepare1_$1 ] { }  main:2::ppuDataFill:32 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::ppuDataPrepare1_$1 ] { }  ppuDataFill:34 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::ppuDataPrepare1_$1 ] { }  main:2::ppuDataFill:34 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::ppuDataPrepare1_$1 ] { }  ) always clobbers reg byte a 
Statement [77] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] ( ppuDataFill:32 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] { }  main:2::ppuDataFill:32 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] { }  ppuDataFill:34 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] { }  main:2::ppuDataFill:34 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] { }  ) always clobbers reg byte a 
Statement [82] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify void*) ppuDataTransfer::ppuData#0 [ ] ( ppuDataTransfer:30 [ ] { }  main:2::ppuDataTransfer:30 [ ] { }  ) always clobbers reg byte a 
Statement [83] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0 [ ] ( ppuDataTransfer:30 [ ] { }  main:2::ppuDataTransfer:30 [ ] { }  ) always clobbers reg byte a 
Statement [85] if((word) ppuDataTransfer::i#2<(const word) ppuDataTransfer::size#0) goto ppuDataTransfer::@2 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] ( ppuDataTransfer:30 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] { }  main:2::ppuDataTransfer:30 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] { }  ) always clobbers reg byte a 
Statement [87] (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2) [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] ( ppuDataTransfer:30 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] { }  main:2::ppuDataTransfer:30 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [92] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR) ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [93] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA) ← >(const nomodify struct SpriteData*) OAM_BUFFER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [94] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [95] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [96] (byte~) vblank::$1 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 [ vblank::$1 ] (  [ vblank::$1 ] { }  ) always clobbers reg byte a 
Statement [102] (byte~) vblank::$3 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 [ vblank::$3 ] (  [ vblank::$3 ] { }  ) always clobbers reg byte a 
Statement [108] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Potential registers zp[1]:2 [ main::initNES1_i#2 main::initNES1_i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::x#2 main::x#1 ] : zp[1]:3 , reg byte x , 
Potential registers zp[1]:4 [ main::i#2 main::i#1 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[2]:5 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ] : zp[2]:5 , 
Potential registers zp[2]:7 [ ppuDataPutTile::tile#10 ] : zp[2]:7 , 
Potential registers zp[2]:9 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ] : zp[2]:9 , 
Potential registers zp[2]:11 [ ppuDataFill::size#3 ] : zp[2]:11 , 
Potential registers zp[1]:13 [ ppuDataFill::val#4 ] : zp[1]:13 , reg byte x , reg byte y , 
Potential registers zp[2]:14 [ ppuDataFill::i#2 ppuDataFill::i#1 ] : zp[2]:14 , 
Potential registers zp[2]:16 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ] : zp[2]:16 , 
Potential registers zp[2]:18 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ] : zp[2]:18 , 
Potential registers zp[1]:20 [ main::initNES1_waitForVBlank1_$0 ] : zp[1]:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:21 [ main::initNES1_waitForVBlank2_$0 ] : zp[1]:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:22 [ ppuDataPutTile::ppuData#0 ] : zp[2]:22 , 
Potential registers zp[1]:24 [ ppuDataPutTile::ppuDataPrepare1_$0 ] : zp[1]:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:25 [ ppuDataPutTile::ppuDataPrepare1_$1 ] : zp[1]:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:26 [ ppuDataPutTile::ppuDataPut1_val#0 ] : zp[1]:26 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:27 [ ppuDataPutTile::ppuDataPut2_val#0 ] : zp[1]:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:28 [ ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] : zp[2]:28 , 
Potential registers zp[1]:30 [ ppuDataPutTile::ppuDataPrepare2_$0 ] : zp[1]:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:31 [ ppuDataPutTile::ppuDataPrepare2_$1 ] : zp[1]:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:32 [ ppuDataPutTile::ppuDataPut3_val#0 ] : zp[1]:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:33 [ ppuDataPutTile::ppuDataPut4_val#0 ] : zp[1]:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:34 [ ppuDataFill::ppuDataPrepare1_$0 ] : zp[1]:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:35 [ ppuDataFill::ppuDataPrepare1_$1 ] : zp[1]:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:36 [ ppuDataTransfer::ppuDataPut1_val#0 ] : zp[1]:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:37 [ vblank::$1 ] : zp[1]:37 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:38 [ vblank::$3 ] : zp[1]:38 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [ppuDataPutTile] 2,002: zp[1]:24 [ ppuDataPutTile::ppuDataPrepare1_$0 ] 2,002: zp[1]:25 [ ppuDataPutTile::ppuDataPrepare1_$1 ] 2,002: zp[1]:26 [ ppuDataPutTile::ppuDataPut1_val#0 ] 2,002: zp[1]:27 [ ppuDataPutTile::ppuDataPut2_val#0 ] 2,002: zp[1]:30 [ ppuDataPutTile::ppuDataPrepare2_$0 ] 2,002: zp[1]:31 [ ppuDataPutTile::ppuDataPrepare2_$1 ] 2,002: zp[1]:32 [ ppuDataPutTile::ppuDataPut3_val#0 ] 2,002: zp[1]:33 [ ppuDataPutTile::ppuDataPut4_val#0 ] 435.67: zp[2]:5 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ] 333.67: zp[2]:28 [ ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] 250.25: zp[2]:7 [ ppuDataPutTile::tile#10 ] 101: zp[2]:22 [ ppuDataPutTile::ppuData#0 ] 
Uplift Scope [ppuDataTransfer] 2,602.6: zp[2]:16 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ] 2,002: zp[1]:36 [ ppuDataTransfer::ppuDataPut1_val#0 ] 1,751.75: zp[2]:18 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ] 
Uplift Scope [ppuDataFill] 3,003: zp[2]:14 [ ppuDataFill::i#2 ppuDataFill::i#1 ] 202: zp[1]:34 [ ppuDataFill::ppuDataPrepare1_$0 ] 202: zp[1]:35 [ ppuDataFill::ppuDataPrepare1_$1 ] 111.22: zp[2]:11 [ ppuDataFill::size#3 ] 111.22: zp[1]:13 [ ppuDataFill::val#4 ] 67.33: zp[2]:9 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ] 
Uplift Scope [main] 370.33: zp[1]:4 [ main::i#2 main::i#1 ] 282.8: zp[1]:3 [ main::x#2 main::x#1 ] 263.72: zp[1]:2 [ main::initNES1_i#2 main::initNES1_i#1 ] 202: zp[1]:20 [ main::initNES1_waitForVBlank1_$0 ] 202: zp[1]:21 [ main::initNES1_waitForVBlank2_$0 ] 
Uplift Scope [vblank] 4: zp[1]:37 [ vblank::$1 ] 4: zp[1]:38 [ vblank::$3 ] 
Uplift Scope [RICOH_2C02] 
Uplift Scope [RICOH_2A03] 
Uplift Scope [SpriteData] 
Uplift Scope [] 

Uplifting [ppuDataPutTile] best 4881 combination reg byte a [ ppuDataPutTile::ppuDataPrepare1_$0 ] reg byte a [ ppuDataPutTile::ppuDataPrepare1_$1 ] reg byte a [ ppuDataPutTile::ppuDataPut1_val#0 ] reg byte a [ ppuDataPutTile::ppuDataPut2_val#0 ] zp[1]:30 [ ppuDataPutTile::ppuDataPrepare2_$0 ] zp[1]:31 [ ppuDataPutTile::ppuDataPrepare2_$1 ] zp[1]:32 [ ppuDataPutTile::ppuDataPut3_val#0 ] zp[1]:33 [ ppuDataPutTile::ppuDataPut4_val#0 ] zp[2]:5 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ] zp[2]:28 [ ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] zp[2]:7 [ ppuDataPutTile::tile#10 ] zp[2]:22 [ ppuDataPutTile::ppuData#0 ] 
Limited combination testing to 100 combinations of 65536 possible.
Uplifting [ppuDataTransfer] best 4821 combination zp[2]:16 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ] reg byte a [ ppuDataTransfer::ppuDataPut1_val#0 ] zp[2]:18 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ] 
Uplifting [ppuDataFill] best 4773 combination zp[2]:14 [ ppuDataFill::i#2 ppuDataFill::i#1 ] reg byte a [ ppuDataFill::ppuDataPrepare1_$0 ] reg byte a [ ppuDataFill::ppuDataPrepare1_$1 ] zp[2]:11 [ ppuDataFill::size#3 ] reg byte x [ ppuDataFill::val#4 ] zp[2]:9 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ] 
Uplifting [main] best 4133 combination reg byte x [ main::i#2 main::i#1 ] reg byte x [ main::x#2 main::x#1 ] reg byte x [ main::initNES1_i#2 main::initNES1_i#1 ] reg byte a [ main::initNES1_waitForVBlank1_$0 ] zp[1]:21 [ main::initNES1_waitForVBlank2_$0 ] 
Limited combination testing to 100 combinations of 288 possible.
Uplifting [vblank] best 4121 combination reg byte a [ vblank::$1 ] reg byte a [ vblank::$3 ] 
Uplifting [RICOH_2C02] best 4121 combination 
Uplifting [RICOH_2A03] best 4121 combination 
Uplifting [SpriteData] best 4121 combination 
Uplifting [] best 4121 combination 
Attempting to uplift remaining variables inzp[1]:30 [ ppuDataPutTile::ppuDataPrepare2_$0 ]
Uplifting [ppuDataPutTile] best 4115 combination reg byte a [ ppuDataPutTile::ppuDataPrepare2_$0 ] 
Attempting to uplift remaining variables inzp[1]:31 [ ppuDataPutTile::ppuDataPrepare2_$1 ]
Uplifting [ppuDataPutTile] best 4109 combination reg byte a [ ppuDataPutTile::ppuDataPrepare2_$1 ] 
Attempting to uplift remaining variables inzp[1]:32 [ ppuDataPutTile::ppuDataPut3_val#0 ]
Uplifting [ppuDataPutTile] best 4103 combination reg byte a [ ppuDataPutTile::ppuDataPut3_val#0 ] 
Attempting to uplift remaining variables inzp[1]:33 [ ppuDataPutTile::ppuDataPut4_val#0 ]
Uplifting [ppuDataPutTile] best 4097 combination reg byte a [ ppuDataPutTile::ppuDataPut4_val#0 ] 
Attempting to uplift remaining variables inzp[1]:21 [ main::initNES1_waitForVBlank2_$0 ]
Uplifting [main] best 4037 combination reg byte a [ main::initNES1_waitForVBlank2_$0 ] 
Coalescing zero page register [ zp[2]:5 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ] ] with [ zp[2]:22 [ ppuDataPutTile::ppuData#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:5 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ppuDataPutTile::ppuData#0 ] ] with [ zp[2]:28 [ ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:9 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ] ] with [ zp[2]:5 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ppuDataPutTile::ppuData#0 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] ]
Coalescing zero page register [ zp[2]:11 [ ppuDataFill::size#3 ] ] with [ zp[2]:7 [ ppuDataPutTile::tile#10 ] ]
Coalescing zero page register [ zp[2]:16 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ] ] with [ zp[2]:14 [ ppuDataFill::i#2 ppuDataFill::i#1 ] ]
Coalescing zero page register [ zp[2]:18 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ] ] with [ zp[2]:9 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ppuDataPutTile::ppuData#0 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ] ]
Allocated (was zp[2]:11) zp[2]:2 [ ppuDataFill::size#3 ppuDataPutTile::tile#10 ]
Allocated (was zp[2]:16) zp[2]:4 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ppuDataFill::i#2 ppuDataFill::i#1 ]
Allocated (was zp[2]:18) zp[2]:6 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ppuDataPutTile::ppuData#0 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// A minimal NES demo
// Based on: https://github.com/gregkrsak/first_nes written by Greg M. Krsak, 2018. 
  // Upstart
  // Nintendo Entertainment System (NES) ROM
// https://sadistech.com/nesromtool/romdoc.html
// https://forums.nesdev.com/viewtopic.php?f=2&t=9896
// https://github.com/gregkrsak/first_nes
.file [name="nes-demo.nes", type="bin", segments="NesRom"]
.file [name="nes-demo.nes_hdr", type="bin", segments="Header"]
.file [name="nes-demo.nes_prg", type="bin", segments="ProgramRom"]
.file [name="nes-demo.nes_chr", type="bin", segments="CharacterRom"]
.segmentdef Header  [ start=$0000,       min=$0000, max=$000f, fill ]
.segmentdef Tiles   [ start=$0000,       min=$0000, max=$1fff, fill ]
.segmentdef Code    [ start=$c000,       min=$c000, max=$fff9 ]
.segmentdef Data    [ startAfter="Code", min=$c000, max=$fff9 ]
.segmentdef Vectors [ start=$fffa,       min=$fffa, max=$ffff ]
.segmentdef ProgramRom [ segments="Code, Data, Vectors" ]
.segmentdef CharacterRom [ segments="Tiles" ]
.segmentdef NesRom
.segment NesRom
.segmentout [ segments="Header" ]
.segmentout [ segments="ProgramRom" ]
.segmentout [ segments="CharacterRom" ]
.segment Header
.text   @"NES\$1a"
.byte   $01           // 1x 16KB ROM (PRG)
.byte   $01           // 1x 8KB VROM (CHR)
.byte   %00000001     // Mapper nibble 0000 == No mapping (a simple 16KB PRG + 8KB CHR game)
                      // Mirroring nibble 0001 == Vertical mirroring only
.segment Code

  // Global Constants & labels
  .const SIZEOF_STRUCT_SPRITEDATA = 4
  .const OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
  .const OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
  .const OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
  .const OFFSET_STRUCT_RICOH_2C02_OAMADDR = 3
  .const OFFSET_STRUCT_RICOH_2A03_OAMDMA = $14
  .const OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
  .const OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
  .const OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = 5
  .const OFFSET_STRUCT_RICOH_2A03_JOY1 = $16
  .const SIZEOF_BYTE = 1
  // $2000-$23bf	$03c0	Name table 0
  .label PPU_NAME_TABLE_0 = $2000
  // $23c0-$23ff	$0040	Attribute table 0
  .label PPU_ATTRIBUTE_TABLE_0 = $23c0
  // $3000-$3eff	$0f00	Mirrors of $2000-$2eff
  // $3f00-$3f1f	$0020	Palette RAM indexes
  .label PPU_PALETTE = $3f00
  // APU Frame Counter
  // generates low-frequency clocks for the channels and an optional 60 Hz interrupt.
  // https://wiki.nesdev.com/w/index.php/APU_Frame_Counter
  // ------+-----+---------------------------------------------------------------
  //  $4017 |	 W  | FR_COUNTER Frame Counter	Set mode and interrupt
  //  ------+-----+---------------------------------------------------------------
  //        |   7	| Sequencer mode: 0 selects 4-step sequence, 1 selects 5-step sequence
  //        |   6	| Interrupt inhibit flag. If set, the frame interrupt flag is cleared, otherwise it is unaffected.
  //  ------+-----+---------------------------------------------------------------
  // Side effects	After 3 or 4 CPU clock cycles*, the timer is reset.
  // If the mode flag is set, then both "quarter frame" and "half frame" signals are also generated.
  .label FR_COUNTER = $4017
  // Pointer to the start of RAM memory
  .label MEMORY = 0
  // Sprite OAM Buffer
  // Will be transfered to the PPU via DMA during vblank
  .label OAM_BUFFER = $200
  // PPU Status Register for reading in ASM
  .label PPU_PPUSTATUS = $2002
  // NES Picture Processing Unit (PPU)
  .label PPU = $2000
  // NES CPU and audion processing unit (APU)
  .label APU = $4000
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
.segment Code
  // main
// RESET Called when the NES is reset, including when it is turned on.
main: {
    jmp initNES1
    // main::initNES1
  initNES1:
    // asm { cld ldx#$ff txs  }
    cld
    ldx #$ff
    txs
    jmp initNES1_disableVideoOutput1
    // main::initNES1_disableVideoOutput1
  initNES1_disableVideoOutput1:
    // [6] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU
    // [7] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    jmp initNES1_disableAudioOutput1
    // main::initNES1_disableAudioOutput1
  initNES1_disableAudioOutput1:
    // [8] *((const nomodify byte*) FR_COUNTER) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta FR_COUNTER
    // [9] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
    jmp initNES1_clearVBlankFlag1
    // main::initNES1_clearVBlankFlag1
  initNES1_clearVBlankFlag1:
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [11] phi from main::initNES1_clearVBlankFlag1 to main::initNES1_waitForVBlank1 [phi:main::initNES1_clearVBlankFlag1->main::initNES1_waitForVBlank1]
  initNES1_waitForVBlank1_from_initNES1_clearVBlankFlag1:
    jmp initNES1_waitForVBlank1
    // main::initNES1_waitForVBlank1
  initNES1_waitForVBlank1:
    jmp initNES1_waitForVBlank1___b1
    // main::initNES1_waitForVBlank1_@1
  initNES1_waitForVBlank1___b1:
    // [12] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // [13] if((byte) 0==(byte~) main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq initNES1_waitForVBlank1___b1
    // [14] phi from main::initNES1_waitForVBlank1_@1 to main::initNES1_@1 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1]
  initNES1___b1_from_initNES1_waitForVBlank1___b1:
    // [14] phi (byte) main::initNES1_i#2 = (byte) 0 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp initNES1___b1
    // [14] phi from main::initNES1_@1 to main::initNES1_@1 [phi:main::initNES1_@1->main::initNES1_@1]
  initNES1___b1_from_initNES1___b1:
    // [14] phi (byte) main::initNES1_i#2 = (byte) main::initNES1_i#1 [phi:main::initNES1_@1->main::initNES1_@1#0] -- register_copy 
    jmp initNES1___b1
    // main::initNES1_@1
  initNES1___b1:
    // [15] *((const nomodify byte*) MEMORY + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY,x
    // [16] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$100,x
    // [17] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$200,x
    // [18] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$300,x
    // [19] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$400,x
    // [20] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$500,x
    // [21] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$600,x
    // [22] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$700,x
    // [23] (byte) main::initNES1_i#1 ← ++ (byte) main::initNES1_i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [24] if((byte) 0!=(byte) main::initNES1_i#1) goto main::initNES1_@1 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne initNES1___b1_from_initNES1___b1
    // [25] phi from main::initNES1_@1 to main::initNES1_waitForVBlank2 [phi:main::initNES1_@1->main::initNES1_waitForVBlank2]
  initNES1_waitForVBlank2_from_initNES1___b1:
    jmp initNES1_waitForVBlank2
    // main::initNES1_waitForVBlank2
  initNES1_waitForVBlank2:
    jmp initNES1_waitForVBlank2___b1
    // main::initNES1_waitForVBlank2_@1
  initNES1_waitForVBlank2___b1:
    // [26] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // [27] if((byte) 0==(byte~) main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq initNES1_waitForVBlank2___b1
    jmp initNES1___b7
    // main::initNES1_@7
  initNES1___b7:
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [29] phi from main::initNES1_@7 to main::@8 [phi:main::initNES1_@7->main::@8]
  __b8_from_initNES1___b7:
    jmp __b8
    // main::@8
  __b8:
    // [30] call ppuDataTransfer 
  // Transfer the palette
    // [81] phi from main::@8 to ppuDataTransfer [phi:main::@8->ppuDataTransfer]
  ppuDataTransfer_from___b8:
    jsr ppuDataTransfer
    // [31] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  __b9_from___b8:
    jmp __b9
    // main::@9
  __b9:
    // [32] call ppuDataFill 
  // Clear the name table
    // [71] phi from main::@9 to ppuDataFill [phi:main::@9->ppuDataFill]
  ppuDataFill_from___b9:
    // [71] phi (byte) ppuDataFill::val#4 = (byte) $fc [phi:main::@9->ppuDataFill#0] -- vbuxx=vbuc1 
    ldx #$fc
    // [71] phi (word) ppuDataFill::size#3 = (word) $3c0 [phi:main::@9->ppuDataFill#1] -- vwuz1=vwuc1 
    lda #<$3c0
    sta.z ppuDataFill.size
    lda #>$3c0
    sta.z ppuDataFill.size+1
    // [71] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_NAME_TABLE_0 [phi:main::@9->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [33] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  __b10_from___b9:
    jmp __b10
    // main::@10
  __b10:
    // [34] call ppuDataFill 
  // Fill the PPU attribute table
    // [71] phi from main::@10 to ppuDataFill [phi:main::@10->ppuDataFill]
  ppuDataFill_from___b10:
    // [71] phi (byte) ppuDataFill::val#4 = (byte) 0 [phi:main::@10->ppuDataFill#0] -- vbuxx=vbuc1 
    ldx #0
    // [71] phi (word) ppuDataFill::size#3 = (byte) $40 [phi:main::@10->ppuDataFill#1] -- vwuz1=vbuc1 
    lda #<$40
    sta.z ppuDataFill.size
    lda #>$40
    sta.z ppuDataFill.size+1
    // [71] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0 [phi:main::@10->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [35] phi from main::@10 to main::@1 [phi:main::@10->main::@1]
  __b1_from___b10:
    // [35] phi (byte) main::x#2 = (byte) 0 [phi:main::@10->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // Show the entire tile set
  //char ch=0;
  //for(char y=0;y!=16;y++) {
  //    ppuDataPrepare(PPU_NAME_TABLE_0+32*4+4+(unsigned int)y*32);
  //    for(char x=0;x!=16;x++)
  //        ppuDataPut(ch++);
  //}
  // Show floor
    // main::@1
  __b1:
    // [36] if((byte) main::x#2<(byte) $20) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$20
    bcc __b2
    // [37] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    jmp __b3
    // main::@3
  __b3:
    // [38] call ppuDataPutTile 
  // Show flag
    // [52] phi from main::@3 to ppuDataPutTile [phi:main::@3->ppuDataPutTile]
  ppuDataPutTile_from___b3:
    // [52] phi (byte*) ppuDataPutTile::tile#10 = (const byte*) FLAG [phi:main::@3->ppuDataPutTile#0] -- pbuz1=pbuc1 
    lda #<FLAG
    sta.z ppuDataPutTile.tile
    lda #>FLAG
    sta.z ppuDataPutTile.tile+1
    // [52] phi (nomodify void*) ppuDataPutTile::ppuData#2 = (void*)(const nomodify byte*) PPU_NAME_TABLE_0+(word)(number) $12*(number) $20+(byte) $1c [phi:main::@3->ppuDataPutTile#1] -- pvoz1=pvoc1 
    lda #<PPU_NAME_TABLE_0+$12*$20+$1c
    sta.z ppuDataPutTile.ppuData
    lda #>PPU_NAME_TABLE_0+$12*$20+$1c
    sta.z ppuDataPutTile.ppuData+1
    jsr ppuDataPutTile
    // [39] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    // [39] phi (byte) main::i#2 = (byte) 0 [phi:main::@3->main::@4#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b4
  // Initialize Sprite OAM Buffer with the SPRITE data
    // main::@4
  __b4:
    // [40] if((byte) main::i#2<(byte) 4*(const byte) SIZEOF_STRUCT_SPRITEDATA) goto main::@5 -- vbuxx_lt_vbuc1_then_la1 
    cpx #4*SIZEOF_STRUCT_SPRITEDATA
    bcc __b5
    jmp __b6
    // main::@6
  __b6:
    // [41] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Set initial scroll
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    // [42] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) -8 -- _deref_pbuc1=vbuc2 
    lda #-8
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    jmp enableVideoOutput1
    // main::enableVideoOutput1
  enableVideoOutput1:
    // [43] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80 -- _deref_pbuc1=vbuc2 
    lda #$80
    sta PPU
    // [44] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $18 -- _deref_pbuc1=vbuc2 
    lda #$18
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    // [45] phi from main::@7 main::enableVideoOutput1 to main::@7 [phi:main::@7/main::enableVideoOutput1->main::@7]
  __b7_from___b7:
  __b7_from_enableVideoOutput1:
    jmp __b7
  // Infinite loop
    // main::@7
  __b7:
    jmp __b7_from___b7
    // main::@5
  __b5:
    // [46] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER + (byte) main::i#2) ← *((byte*)(const struct SpriteData*) SPRITES + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda SPRITES,x
    sta OAM_BUFFER,x
    // [47] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [39] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
  __b4_from___b5:
    // [39] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@5->main::@4#0] -- register_copy 
    jmp __b4
    // main::@2
  __b2:
    // [48] (nomodify byte*) ppuDataPutTile::ppuData#0 ← (const nomodify byte*) PPU_NAME_TABLE_0+(word)(number) $14*(number) $20 + (byte) main::x#2 -- pbuz1=pbuc1_plus_vbuxx 
    txa
    clc
    adc #<PPU_NAME_TABLE_0+$14*$20
    sta.z ppuDataPutTile.ppuData
    lda #>PPU_NAME_TABLE_0+$14*$20
    adc #0
    sta.z ppuDataPutTile.ppuData+1
    // [49] (nomodify void*) ppuDataPutTile::ppuData#9 ← (void*)(nomodify byte*) ppuDataPutTile::ppuData#0
    // [50] call ppuDataPutTile 
    // [52] phi from main::@2 to ppuDataPutTile [phi:main::@2->ppuDataPutTile]
  ppuDataPutTile_from___b2:
    // [52] phi (byte*) ppuDataPutTile::tile#10 = (const byte*) FLOOR [phi:main::@2->ppuDataPutTile#0] -- pbuz1=pbuc1 
    lda #<FLOOR
    sta.z ppuDataPutTile.tile
    lda #>FLOOR
    sta.z ppuDataPutTile.tile+1
    // [52] phi (nomodify void*) ppuDataPutTile::ppuData#2 = (nomodify void*) ppuDataPutTile::ppuData#9 [phi:main::@2->ppuDataPutTile#1] -- register_copy 
    jsr ppuDataPutTile
    jmp __b11
    // main::@11
  __b11:
    // [51] (byte) main::x#1 ← (byte) main::x#2 + (byte) 2 -- vbuxx=vbuxx_plus_2 
    inx
    inx
    // [35] phi from main::@11 to main::@1 [phi:main::@11->main::@1]
  __b1_from___b11:
    // [35] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@11->main::@1#0] -- register_copy 
    jmp __b1
}
  // ppuDataPutTile
// Transfer a 2x2 tile into the PPU memory
// - ppuData : Pointer in the PPU memory
// - tile : The tile to transfer
// ppuDataPutTile(byte* zp(6) ppuData, byte* zp(2) tile)
ppuDataPutTile: {
    .label ppuDataPrepare2_ppuData = 6
    .label ppuData = 6
    .label tile = 2
    jmp ppuDataPrepare1
    // ppuDataPutTile::ppuDataPrepare1
  ppuDataPrepare1:
    // [53] (byte~) ppuDataPutTile::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataPutTile::ppuData#2 -- vbuaa=_hi_pvoz1 
    lda.z ppuData+1
    // [54] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataPutTile::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [55] (byte~) ppuDataPutTile::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataPutTile::ppuData#2 -- vbuaa=_lo_pvoz1 
    lda.z ppuData
    // [56] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataPutTile::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    jmp __b1
    // ppuDataPutTile::@1
  __b1:
    // [57] (byte) ppuDataPutTile::ppuDataPut1_val#0 ← *((byte*) ppuDataPutTile::tile#10) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (tile),y
    jmp ppuDataPut1
    // ppuDataPutTile::ppuDataPut1
  ppuDataPut1:
    // [58] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataPutTile::ppuDataPut1_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b2
    // ppuDataPutTile::@2
  __b2:
    // [59] (byte) ppuDataPutTile::ppuDataPut2_val#0 ← *((byte*) ppuDataPutTile::tile#10 + (byte) 1) -- vbuaa=pbuz1_derefidx_vbuc1 
    ldy #1
    lda (tile),y
    jmp ppuDataPut2
    // ppuDataPutTile::ppuDataPut2
  ppuDataPut2:
    // [60] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataPutTile::ppuDataPut2_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b3
    // ppuDataPutTile::@3
  __b3:
    // [61] (nomodify byte*) ppuDataPutTile::ppuDataPrepare2_ppuData#0 ← (byte*)(nomodify void*) ppuDataPutTile::ppuData#2 + (byte) $20 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$20
    clc
    adc.z ppuDataPrepare2_ppuData
    sta.z ppuDataPrepare2_ppuData
    bcc !+
    inc.z ppuDataPrepare2_ppuData+1
  !:
    jmp ppuDataPrepare2
    // ppuDataPutTile::ppuDataPrepare2
  ppuDataPrepare2:
    // [62] (byte~) ppuDataPutTile::ppuDataPrepare2_$0 ← > (void*)(nomodify byte*) ppuDataPutTile::ppuDataPrepare2_ppuData#0 -- vbuaa=_hi_pvoz1 
    lda.z ppuDataPrepare2_ppuData+1
    // [63] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataPutTile::ppuDataPrepare2_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [64] (byte~) ppuDataPutTile::ppuDataPrepare2_$1 ← < (void*)(nomodify byte*) ppuDataPutTile::ppuDataPrepare2_ppuData#0 -- vbuaa=_lo_pvoz1 
    lda.z ppuDataPrepare2_ppuData
    // [65] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataPutTile::ppuDataPrepare2_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    jmp __b4
    // ppuDataPutTile::@4
  __b4:
    // [66] (byte) ppuDataPutTile::ppuDataPut3_val#0 ← *((byte*) ppuDataPutTile::tile#10 + (byte) 2) -- vbuaa=pbuz1_derefidx_vbuc1 
    ldy #2
    lda (tile),y
    jmp ppuDataPut3
    // ppuDataPutTile::ppuDataPut3
  ppuDataPut3:
    // [67] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataPutTile::ppuDataPut3_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b5
    // ppuDataPutTile::@5
  __b5:
    // [68] (byte) ppuDataPutTile::ppuDataPut4_val#0 ← *((byte*) ppuDataPutTile::tile#10 + (byte) 3) -- vbuaa=pbuz1_derefidx_vbuc1 
    ldy #3
    lda (tile),y
    jmp ppuDataPut4
    // ppuDataPutTile::ppuDataPut4
  ppuDataPut4:
    // [69] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataPutTile::ppuDataPut4_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __breturn
    // ppuDataPutTile::@return
  __breturn:
    // [70] return 
    rts
}
  // ppuDataFill
// Fill a number of bytes in the PPU memory
// - ppuData : Pointer in the PPU memory
// - size : The number of bytes to transfer
// ppuDataFill(byte register(X) val, word zp(2) size)
ppuDataFill: {
    .label ppuDataPrepare1_ppuData = 6
    .label i = 4
    .label size = 2
    jmp ppuDataPrepare1
    // ppuDataFill::ppuDataPrepare1
  ppuDataPrepare1:
    // [72] (byte~) ppuDataFill::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuaa=_hi_pvoz1 
    lda.z ppuDataPrepare1_ppuData+1
    // [73] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [74] (byte~) ppuDataFill::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuaa=_lo_pvoz1 
    lda.z ppuDataPrepare1_ppuData
    // [75] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [76] phi from ppuDataFill::ppuDataPrepare1 to ppuDataFill::@1 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1]
  __b1_from_ppuDataPrepare1:
    // [76] phi (word) ppuDataFill::i#2 = (word) 0 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
  // Transfer to PPU
    // ppuDataFill::@1
  __b1:
    // [77] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1 -- vwuz1_lt_vwuz2_then_la1 
    lda.z i+1
    cmp.z size+1
    bcc ppuDataPut1
    bne !+
    lda.z i
    cmp.z size
    bcc ppuDataPut1
  !:
    jmp __breturn
    // ppuDataFill::@return
  __breturn:
    // [78] return 
    rts
    // ppuDataFill::ppuDataPut1
  ppuDataPut1:
    // [79] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataFill::val#4 -- _deref_pbuc1=vbuxx 
    stx PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b2
    // ppuDataFill::@2
  __b2:
    // [80] (word) ppuDataFill::i#1 ← ++ (word) ppuDataFill::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [76] phi from ppuDataFill::@2 to ppuDataFill::@1 [phi:ppuDataFill::@2->ppuDataFill::@1]
  __b1_from___b2:
    // [76] phi (word) ppuDataFill::i#2 = (word) ppuDataFill::i#1 [phi:ppuDataFill::@2->ppuDataFill::@1#0] -- register_copy 
    jmp __b1
}
  // ppuDataTransfer
// Transfer a number of bytes from the CPU memory to the PPU memory
// - cpuData : Pointer to the CPU memory (RAM of ROM)
// - ppuData : Pointer in the PPU memory
// - size : The number of bytes to transfer
ppuDataTransfer: {
    .const size = $20*SIZEOF_BYTE
    .label ppuData = PPU_PALETTE
    .label cpuData = PALETTE
    // Transfer to PPU
    .label cpuSrc = 6
    .label i = 4
    jmp ppuDataPrepare1
    // ppuDataTransfer::ppuDataPrepare1
  ppuDataPrepare1:
    // [82] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify void*) ppuDataTransfer::ppuData#0 -- _deref_pbuc1=vbuc2 
    lda #>ppuData
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [83] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [84] phi from ppuDataTransfer::ppuDataPrepare1 to ppuDataTransfer::@1 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1]
  __b1_from_ppuDataPrepare1:
    // [84] phi (byte*) ppuDataTransfer::cpuSrc#2 = (byte*)(const nomodify void*) ppuDataTransfer::cpuData#0 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1#0] -- pbuz1=pbuc1 
    lda #<cpuData
    sta.z cpuSrc
    lda #>cpuData
    sta.z cpuSrc+1
    // [84] phi (word) ppuDataTransfer::i#2 = (word) 0 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
    // ppuDataTransfer::@1
  __b1:
    // [85] if((word) ppuDataTransfer::i#2<(const word) ppuDataTransfer::size#0) goto ppuDataTransfer::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>size
    bcc __b2
    bne !+
    lda.z i
    cmp #<size
    bcc __b2
  !:
    jmp __breturn
    // ppuDataTransfer::@return
  __breturn:
    // [86] return 
    rts
    // ppuDataTransfer::@2
  __b2:
    // [87] (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (cpuSrc),y
    jmp ppuDataPut1
    // ppuDataTransfer::ppuDataPut1
  ppuDataPut1:
    // [88] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataTransfer::ppuDataPut1_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b3
    // ppuDataTransfer::@3
  __b3:
    // [89] (byte*) ppuDataTransfer::cpuSrc#1 ← ++ (byte*) ppuDataTransfer::cpuSrc#2 -- pbuz1=_inc_pbuz1 
    inc.z cpuSrc
    bne !+
    inc.z cpuSrc+1
  !:
    // [90] (word) ppuDataTransfer::i#1 ← ++ (word) ppuDataTransfer::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [84] phi from ppuDataTransfer::@3 to ppuDataTransfer::@1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1]
  __b1_from___b3:
    // [84] phi (byte*) ppuDataTransfer::cpuSrc#2 = (byte*) ppuDataTransfer::cpuSrc#1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#0] -- register_copy 
    // [84] phi (word) ppuDataTransfer::i#2 = (word) ppuDataTransfer::i#1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#1] -- register_copy 
    jmp __b1
}
  // vblank
// NMI Called when the PPU refreshes the screen (also known as the V-Blank period)
vblank: {
    // entry interrupt(HARDWARE_STACK)
    pha
    txa
    pha
    tya
    pha
    jmp ppuSpriteBufferDmaTransfer1
    // vblank::ppuSpriteBufferDmaTransfer1
  ppuSpriteBufferDmaTransfer1:
    // [92] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR
    // [93] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA) ← >(const nomodify struct SpriteData*) OAM_BUFFER -- _deref_pbuc1=vbuc2 
    lda #>OAM_BUFFER
    sta APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA
    jmp __b4
    // vblank::@4
  __b4:
    // [94] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1 -- _deref_pbuc1=vbuc2 
    // Latch the controller buttons
    lda #1
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [95] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [96] (byte~) vblank::$1 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #1
    and APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [97] if((byte) 0==(byte~) vblank::$1) goto vblank::@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b1
    jmp __b2
    // vblank::@2
  __b2:
    // [98] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER
    // [99] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 1*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 1*(const byte) SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA
    // [100] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 2*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 2*(const byte) SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA
    // [101] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 3*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 3*(const byte) SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA
    jmp __b1
    // vblank::@1
  __b1:
    // [102] (byte~) vblank::$3 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #1
    and APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [103] if((byte) 0==(byte~) vblank::$3) goto vblank::@return -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __breturn
    jmp __b3
    // vblank::@3
  __b3:
    // [104] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER
    // [105] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 1*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 1*(const byte) SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA
    // [106] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 2*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 2*(const byte) SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA
    // [107] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 3*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 3*(const byte) SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA
    jmp __breturn
    // vblank::@return
  __breturn:
    // [108] return  - exit interrupt(HARDWARE_STACK)
    pla
    tay
    pla
    tax
    pla
    rti
}
  // File Data
.segment Data
  // Flag tile
  FLAG: .byte $54, $55, $56, $57
  // Floor tile
  FLOOR: .byte $85, $85, $86, $86
  // Small Luigi Sprite Data
  SPRITES: .byte $80, $36, 2, $80, $80, $37, 2, $88, $88, $38, 2, $80, $88, $39, 2, $88
  // Color Palette
  PALETTE: .byte $f, $13, $23, $33, $f, 6, $15, $36, $f, $39, $4a, $5b, $f, $3d, $4e, $5f, $f, $1c, $15, $14, $f, 2, $38, $3c, $f, $30, $37, $1a, $f, $f, $f, $f
.segment Tiles
TILES:
.import binary "smb1_chr.bin"

.segment Vectors
  VECTORS: .word vblank, main, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp initNES1
Removing instruction jmp initNES1_disableVideoOutput1
Removing instruction jmp initNES1_disableAudioOutput1
Removing instruction jmp initNES1_clearVBlankFlag1
Removing instruction jmp initNES1_waitForVBlank1
Removing instruction jmp initNES1_waitForVBlank1___b1
Removing instruction jmp initNES1___b1
Removing instruction jmp initNES1_waitForVBlank2
Removing instruction jmp initNES1_waitForVBlank2___b1
Removing instruction jmp initNES1___b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp enableVideoOutput1
Removing instruction jmp __b7
Removing instruction jmp __b11
Removing instruction jmp ppuDataPrepare1
Removing instruction jmp __b1
Removing instruction jmp ppuDataPut1
Removing instruction jmp __b2
Removing instruction jmp ppuDataPut2
Removing instruction jmp __b3
Removing instruction jmp ppuDataPrepare2
Removing instruction jmp __b4
Removing instruction jmp ppuDataPut3
Removing instruction jmp __b5
Removing instruction jmp ppuDataPut4
Removing instruction jmp __breturn
Removing instruction jmp ppuDataPrepare1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp ppuDataPrepare1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp ppuDataPut1
Removing instruction jmp __b3
Removing instruction jmp ppuSpriteBufferDmaTransfer1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #$40
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #>0
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label initNES1_waitForVBlank1___b1 with initNES1_waitForVBlank1
Replacing label initNES1___b1_from_initNES1___b1 with initNES1___b1
Replacing label initNES1_waitForVBlank2___b1 with initNES1_waitForVBlank2
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction initNES1_waitForVBlank1_from_initNES1_clearVBlankFlag1:
Removing instruction initNES1_waitForVBlank1___b1:
Removing instruction initNES1___b1_from_initNES1___b1:
Removing instruction initNES1_waitForVBlank2_from_initNES1___b1:
Removing instruction initNES1_waitForVBlank2___b1:
Removing instruction __b8_from_initNES1___b7:
Removing instruction __b9_from___b8:
Removing instruction __b10_from___b9:
Removing instruction __b3_from___b1:
Removing instruction __b7_from_enableVideoOutput1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bbegin:
Removing instruction __bend:
Removing instruction initNES1:
Removing instruction initNES1_disableVideoOutput1:
Removing instruction initNES1_disableAudioOutput1:
Removing instruction initNES1_clearVBlankFlag1:
Removing instruction initNES1___b1_from_initNES1_waitForVBlank1___b1:
Removing instruction initNES1___b7:
Removing instruction __b8:
Removing instruction ppuDataTransfer_from___b8:
Removing instruction __b9:
Removing instruction ppuDataFill_from___b9:
Removing instruction __b10:
Removing instruction ppuDataFill_from___b10:
Removing instruction __b1_from___b10:
Removing instruction __b3:
Removing instruction ppuDataPutTile_from___b3:
Removing instruction __b4_from___b3:
Removing instruction __b6:
Removing instruction enableVideoOutput1:
Removing instruction __b7:
Removing instruction __b4_from___b5:
Removing instruction ppuDataPutTile_from___b2:
Removing instruction __b11:
Removing instruction __b1_from___b11:
Removing instruction ppuDataPrepare1:
Removing instruction __b1:
Removing instruction ppuDataPut1:
Removing instruction __b2:
Removing instruction ppuDataPut2:
Removing instruction __b3:
Removing instruction ppuDataPrepare2:
Removing instruction __b4:
Removing instruction ppuDataPut3:
Removing instruction __b5:
Removing instruction ppuDataPut4:
Removing instruction __breturn:
Removing instruction ppuDataPrepare1:
Removing instruction __b1_from_ppuDataPrepare1:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b1_from___b2:
Removing instruction ppuDataPrepare1:
Removing instruction __b1_from_ppuDataPrepare1:
Removing instruction __breturn:
Removing instruction ppuDataPut1:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction ppuSpriteBufferDmaTransfer1:
Removing instruction __b4:
Removing instruction __b2:
Removing instruction __b3:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Relabelling long label __b7_from___b7 to __b3
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp initNES1___b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const struct RICOH_2A03*) APU = (struct RICOH_2A03*) 16384
(const byte*) FLAG[]  = { (byte) $54, (byte) $55, (byte) $56, (byte) $57 }
(const byte*) FLOOR[]  = { (byte) $85, (byte) $85, (byte) $86, (byte) $86 }
(const nomodify byte*) FR_COUNTER = (byte*) 16407
(const nomodify byte*) MEMORY = (byte*) 0
(const nomodify struct SpriteData*) OAM_BUFFER = (struct SpriteData*) 512
(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = (byte) $10
(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1 = (byte) $16
(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA = (byte) $14
(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR = (byte) 3
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR = (byte) 6
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA = (byte) 7
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK = (byte) 1
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = (byte) 5
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = (byte) 2
(const byte*) PALETTE[(number) $20]  = { (byte) $f, (byte) $13, (byte) $23, (byte) $33, (byte) $f, (byte) 6, (byte) $15, (byte) $36, (byte) $f, (byte) $39, (byte) $4a, (byte) $5b, (byte) $f, (byte) $3d, (byte) $4e, (byte) $5f, (byte) $f, (byte) $1c, (byte) $15, (byte) $14, (byte) $f, (byte) 2, (byte) $38, (byte) $3c, (byte) $f, (byte) $30, (byte) $37, (byte) $1a, (byte) $f, (byte) $f, (byte) $f, (byte) $f }
(const struct RICOH_2C02*) PPU = (struct RICOH_2C02*) 8192
(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0 = (byte*) 9152
(const nomodify byte*) PPU_NAME_TABLE_0 = (byte*) 8192
(const nomodify byte*) PPU_PALETTE = (byte*) 16128
(const to_volatile byte*) PPU_PPUSTATUS = (byte*) 8194
(byte) RICOH_2A03::DMC_FREQ
(byte) RICOH_2A03::DMC_LEN
(byte) RICOH_2A03::DMC_RAW
(byte) RICOH_2A03::DMC_START
(byte) RICOH_2A03::JOY1
(byte) RICOH_2A03::JOY2
(byte) RICOH_2A03::NOISE_HI
(byte) RICOH_2A03::NOISE_LO
(byte) RICOH_2A03::NOISE_VOL
(byte) RICOH_2A03::OAMDMA
(byte) RICOH_2A03::SND_CHN
(byte) RICOH_2A03::SQ1_HI
(byte) RICOH_2A03::SQ1_LO
(byte) RICOH_2A03::SQ1_SWEEP
(byte) RICOH_2A03::SQ1_VOL
(byte) RICOH_2A03::SQ2_HI
(byte) RICOH_2A03::SQ2_LO
(byte) RICOH_2A03::SQ2_SWEEP
(byte) RICOH_2A03::SQ2_VOL
(byte) RICOH_2A03::TRI_HI
(byte) RICOH_2A03::TRI_LINEAR
(byte) RICOH_2A03::TRI_LO
(byte) RICOH_2A03::UNUSED1
(byte) RICOH_2A03::UNUSED2
(byte) RICOH_2C02::OAMADDR
(byte) RICOH_2C02::OAMDATA
(byte) RICOH_2C02::PPUADDR
(byte) RICOH_2C02::PPUCTRL
(byte) RICOH_2C02::PPUDATA
(byte) RICOH_2C02::PPUMASK
(byte) RICOH_2C02::PPUSCROLL
(volatile byte) RICOH_2C02::PPUSTATUS loadstore
(const byte) SIZEOF_BYTE = (byte) 1
(const byte) SIZEOF_STRUCT_SPRITEDATA = (byte) 4
(const struct SpriteData*) SPRITES[]  = { { y: (byte) $80, tile: (byte) $36, attributes: (byte) 2, x: (byte) $80 }, { y: (byte) $80, tile: (byte) $37, attributes: (byte) 2, x: (byte) $88 }, { y: (byte) $88, tile: (byte) $38, attributes: (byte) 2, x: (byte) $80 }, { y: (byte) $88, tile: (byte) $39, attributes: (byte) 2, x: (byte) $88 } }
(byte) SpriteData::attributes
(byte) SpriteData::tile
(byte) SpriteData::x
(byte) SpriteData::y
(const byte*) TILES[]  = kickasm {{ .import binary "smb1_chr.bin"
 }}
(const to_nomodify void()**) VECTORS[]  = { &interrupt(HARDWARE_STACK)(void()) vblank(), &(void()) main(), (void()*) 0 }
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::enableVideoOutput1
(byte) main::i
(byte) main::i#1 reg byte x 202.0
(byte) main::i#2 reg byte x 168.33333333333331
(label) main::initNES1
(label) main::initNES1_@1
(label) main::initNES1_@7
(label) main::initNES1_clearVBlankFlag1
(label) main::initNES1_disableAudioOutput1
(label) main::initNES1_disableVideoOutput1
(byte) main::initNES1_i
(byte) main::initNES1_i#1 reg byte x 151.5
(byte) main::initNES1_i#2 reg byte x 112.22222222222223
(label) main::initNES1_waitForVBlank1
(byte~) main::initNES1_waitForVBlank1_$0 reg byte a 202.0
(label) main::initNES1_waitForVBlank1_@1
(label) main::initNES1_waitForVBlank2
(byte~) main::initNES1_waitForVBlank2_$0 reg byte a 202.0
(label) main::initNES1_waitForVBlank2_@1
(byte) main::x
(byte) main::x#1 reg byte x 202.0
(byte) main::x#2 reg byte x 80.8
(void()) ppuDataFill((nomodify void*) ppuDataFill::ppuData , (byte) ppuDataFill::val , (word) ppuDataFill::size)
(label) ppuDataFill::@1
(label) ppuDataFill::@2
(label) ppuDataFill::@return
(word) ppuDataFill::i
(word) ppuDataFill::i#1 i zp[2]:4 2002.0
(word) ppuDataFill::i#2 i zp[2]:4 1001.0
(nomodify void*) ppuDataFill::ppuData
(label) ppuDataFill::ppuDataPrepare1
(byte~) ppuDataFill::ppuDataPrepare1_$0 reg byte a 202.0
(byte~) ppuDataFill::ppuDataPrepare1_$1 reg byte a 202.0
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataPrepare1_ppuData zp[2]:6 67.33333333333333
(label) ppuDataFill::ppuDataPut1
(byte) ppuDataFill::ppuDataPut1_val
(word) ppuDataFill::size
(word) ppuDataFill::size#3 size zp[2]:2 111.22222222222223
(byte) ppuDataFill::val
(byte) ppuDataFill::val#4 reg byte x 111.22222222222223
(void()) ppuDataPutTile((nomodify void*) ppuDataPutTile::ppuData , (byte*) ppuDataPutTile::tile)
(label) ppuDataPutTile::@1
(label) ppuDataPutTile::@2
(label) ppuDataPutTile::@3
(label) ppuDataPutTile::@4
(label) ppuDataPutTile::@5
(label) ppuDataPutTile::@return
(nomodify void*) ppuDataPutTile::ppuData
(nomodify byte*) ppuDataPutTile::ppuData#0 ppuData zp[2]:6 101.0
(nomodify void*) ppuDataPutTile::ppuData#2 ppuData zp[2]:6 233.66666666666669
(nomodify void*) ppuDataPutTile::ppuData#9 ppuData zp[2]:6 202.0
(label) ppuDataPutTile::ppuDataPrepare1
(byte~) ppuDataPutTile::ppuDataPrepare1_$0 reg byte a 2002.0
(byte~) ppuDataPutTile::ppuDataPrepare1_$1 reg byte a 2002.0
(nomodify void*) ppuDataPutTile::ppuDataPrepare1_ppuData
(label) ppuDataPutTile::ppuDataPrepare2
(byte~) ppuDataPutTile::ppuDataPrepare2_$0 reg byte a 2002.0
(byte~) ppuDataPutTile::ppuDataPrepare2_$1 reg byte a 2002.0
(nomodify void*) ppuDataPutTile::ppuDataPrepare2_ppuData
(nomodify byte*) ppuDataPutTile::ppuDataPrepare2_ppuData#0 ppuDataPrepare2_ppuData zp[2]:6 333.6666666666667
(label) ppuDataPutTile::ppuDataPut1
(byte) ppuDataPutTile::ppuDataPut1_val
(byte) ppuDataPutTile::ppuDataPut1_val#0 reg byte a 2002.0
(label) ppuDataPutTile::ppuDataPut2
(byte) ppuDataPutTile::ppuDataPut2_val
(byte) ppuDataPutTile::ppuDataPut2_val#0 reg byte a 2002.0
(label) ppuDataPutTile::ppuDataPut3
(byte) ppuDataPutTile::ppuDataPut3_val
(byte) ppuDataPutTile::ppuDataPut3_val#0 reg byte a 2002.0
(label) ppuDataPutTile::ppuDataPut4
(byte) ppuDataPutTile::ppuDataPut4_val
(byte) ppuDataPutTile::ppuDataPut4_val#0 reg byte a 2002.0
(byte*) ppuDataPutTile::tile
(byte*) ppuDataPutTile::tile#10 tile zp[2]:2 250.25
(void()) ppuDataTransfer((nomodify void*) ppuDataTransfer::ppuData , (nomodify void*) ppuDataTransfer::cpuData , (word) ppuDataTransfer::size)
(label) ppuDataTransfer::@1
(label) ppuDataTransfer::@2
(label) ppuDataTransfer::@3
(label) ppuDataTransfer::@return
(nomodify void*) ppuDataTransfer::cpuData
(const nomodify void*) ppuDataTransfer::cpuData#0 cpuData = (void*)(const byte*) PALETTE
(byte*) ppuDataTransfer::cpuSrc
(byte*) ppuDataTransfer::cpuSrc#1 cpuSrc zp[2]:6 1001.0
(byte*) ppuDataTransfer::cpuSrc#2 cpuSrc zp[2]:6 750.75
(word) ppuDataTransfer::i
(word) ppuDataTransfer::i#1 i zp[2]:4 2002.0
(word) ppuDataTransfer::i#2 i zp[2]:4 600.5999999999999
(nomodify void*) ppuDataTransfer::ppuData
(const nomodify void*) ppuDataTransfer::ppuData#0 ppuData = (void*)(const nomodify byte*) PPU_PALETTE
(label) ppuDataTransfer::ppuDataPrepare1
(nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData
(label) ppuDataTransfer::ppuDataPut1
(byte) ppuDataTransfer::ppuDataPut1_val
(byte) ppuDataTransfer::ppuDataPut1_val#0 reg byte a 2002.0
(word) ppuDataTransfer::size
(const word) ppuDataTransfer::size#0 size = (byte) $20*(const byte) SIZEOF_BYTE
interrupt(HARDWARE_STACK)(void()) vblank()
(byte~) vblank::$1 reg byte a 4.0
(byte~) vblank::$3 reg byte a 4.0
(label) vblank::@1
(label) vblank::@2
(label) vblank::@3
(label) vblank::@4
(label) vblank::@return
(label) vblank::ppuSpriteBufferDmaTransfer1
(struct SpriteData*) vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer

reg byte x [ main::initNES1_i#2 main::initNES1_i#1 ]
reg byte x [ main::x#2 main::x#1 ]
reg byte x [ main::i#2 main::i#1 ]
zp[2]:2 [ ppuDataFill::size#3 ppuDataPutTile::tile#10 ]
reg byte x [ ppuDataFill::val#4 ]
zp[2]:4 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ppuDataFill::i#2 ppuDataFill::i#1 ]
zp[2]:6 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ppuDataPutTile::ppuData#0 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ]
reg byte a [ main::initNES1_waitForVBlank1_$0 ]
reg byte a [ main::initNES1_waitForVBlank2_$0 ]
reg byte a [ ppuDataPutTile::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataPutTile::ppuDataPrepare1_$1 ]
reg byte a [ ppuDataPutTile::ppuDataPut1_val#0 ]
reg byte a [ ppuDataPutTile::ppuDataPut2_val#0 ]
reg byte a [ ppuDataPutTile::ppuDataPrepare2_$0 ]
reg byte a [ ppuDataPutTile::ppuDataPrepare2_$1 ]
reg byte a [ ppuDataPutTile::ppuDataPut3_val#0 ]
reg byte a [ ppuDataPutTile::ppuDataPut4_val#0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$1 ]
reg byte a [ ppuDataTransfer::ppuDataPut1_val#0 ]
reg byte a [ vblank::$1 ]
reg byte a [ vblank::$3 ]


FINAL ASSEMBLER
Score: 3009

  // File Comments
// A minimal NES demo
// Based on: https://github.com/gregkrsak/first_nes written by Greg M. Krsak, 2018. 
  // Upstart
  // Nintendo Entertainment System (NES) ROM
// https://sadistech.com/nesromtool/romdoc.html
// https://forums.nesdev.com/viewtopic.php?f=2&t=9896
// https://github.com/gregkrsak/first_nes
.file [name="nes-demo.nes", type="bin", segments="NesRom"]
.file [name="nes-demo.nes_hdr", type="bin", segments="Header"]
.file [name="nes-demo.nes_prg", type="bin", segments="ProgramRom"]
.file [name="nes-demo.nes_chr", type="bin", segments="CharacterRom"]
.segmentdef Header  [ start=$0000,       min=$0000, max=$000f, fill ]
.segmentdef Tiles   [ start=$0000,       min=$0000, max=$1fff, fill ]
.segmentdef Code    [ start=$c000,       min=$c000, max=$fff9 ]
.segmentdef Data    [ startAfter="Code", min=$c000, max=$fff9 ]
.segmentdef Vectors [ start=$fffa,       min=$fffa, max=$ffff ]
.segmentdef ProgramRom [ segments="Code, Data, Vectors" ]
.segmentdef CharacterRom [ segments="Tiles" ]
.segmentdef NesRom
.segment NesRom
.segmentout [ segments="Header" ]
.segmentout [ segments="ProgramRom" ]
.segmentout [ segments="CharacterRom" ]
.segment Header
.text   @"NES\$1a"
.byte   $01           // 1x 16KB ROM (PRG)
.byte   $01           // 1x 8KB VROM (CHR)
.byte   %00000001     // Mapper nibble 0000 == No mapping (a simple 16KB PRG + 8KB CHR game)
                      // Mirroring nibble 0001 == Vertical mirroring only
.segment Code

  // Global Constants & labels
  .const SIZEOF_STRUCT_SPRITEDATA = 4
  .const OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
  .const OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
  .const OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
  .const OFFSET_STRUCT_RICOH_2C02_OAMADDR = 3
  .const OFFSET_STRUCT_RICOH_2A03_OAMDMA = $14
  .const OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
  .const OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
  .const OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = 5
  .const OFFSET_STRUCT_RICOH_2A03_JOY1 = $16
  .const SIZEOF_BYTE = 1
  // $2000-$23bf	$03c0	Name table 0
  .label PPU_NAME_TABLE_0 = $2000
  // $23c0-$23ff	$0040	Attribute table 0
  .label PPU_ATTRIBUTE_TABLE_0 = $23c0
  // $3000-$3eff	$0f00	Mirrors of $2000-$2eff
  // $3f00-$3f1f	$0020	Palette RAM indexes
  .label PPU_PALETTE = $3f00
  // APU Frame Counter
  // generates low-frequency clocks for the channels and an optional 60 Hz interrupt.
  // https://wiki.nesdev.com/w/index.php/APU_Frame_Counter
  // ------+-----+---------------------------------------------------------------
  //  $4017 |	 W  | FR_COUNTER Frame Counter	Set mode and interrupt
  //  ------+-----+---------------------------------------------------------------
  //        |   7	| Sequencer mode: 0 selects 4-step sequence, 1 selects 5-step sequence
  //        |   6	| Interrupt inhibit flag. If set, the frame interrupt flag is cleared, otherwise it is unaffected.
  //  ------+-----+---------------------------------------------------------------
  // Side effects	After 3 or 4 CPU clock cycles*, the timer is reset.
  // If the mode flag is set, then both "quarter frame" and "half frame" signals are also generated.
  .label FR_COUNTER = $4017
  // Pointer to the start of RAM memory
  .label MEMORY = 0
  // Sprite OAM Buffer
  // Will be transfered to the PPU via DMA during vblank
  .label OAM_BUFFER = $200
  // PPU Status Register for reading in ASM
  .label PPU_PPUSTATUS = $2002
  // NES Picture Processing Unit (PPU)
  .label PPU = $2000
  // NES CPU and audion processing unit (APU)
  .label APU = $4000
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
.segment Code
  // main
// RESET Called when the NES is reset, including when it is turned on.
main: {
    // main::initNES1
    // asm
    // asm { cld ldx#$ff txs  }
    cld
    ldx #$ff
    txs
    // main::initNES1_disableVideoOutput1
    // PPU->PPUCTRL = 0
    // [6] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU
    // PPU->PPUMASK = 0
    // [7] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    // main::initNES1_disableAudioOutput1
    // *FR_COUNTER = 0b01000000
    // [8] *((const nomodify byte*) FR_COUNTER) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta FR_COUNTER
    // APU->DMC_FREQ  = 0b01000000
    // [9] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    sta APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
    // main::initNES1_clearVBlankFlag1
    // asm
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [11] phi from main::initNES1_clearVBlankFlag1 to main::initNES1_waitForVBlank1 [phi:main::initNES1_clearVBlankFlag1->main::initNES1_waitForVBlank1]
    // main::initNES1_waitForVBlank1
  initNES1_waitForVBlank1:
    // main::initNES1_waitForVBlank1_@1
    // PPU->PPUSTATUS&0x80
    // [12] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // while(!(PPU->PPUSTATUS&0x80))
    // [13] if((byte) 0==(byte~) main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq initNES1_waitForVBlank1
    // [14] phi from main::initNES1_waitForVBlank1_@1 to main::initNES1_@1 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1]
    // [14] phi (byte) main::initNES1_i#2 = (byte) 0 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [14] phi from main::initNES1_@1 to main::initNES1_@1 [phi:main::initNES1_@1->main::initNES1_@1]
    // [14] phi (byte) main::initNES1_i#2 = (byte) main::initNES1_i#1 [phi:main::initNES1_@1->main::initNES1_@1#0] -- register_copy 
    // main::initNES1_@1
  initNES1___b1:
    // (MEMORY+0x000)[i] = 0
    // [15] *((const nomodify byte*) MEMORY + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY,x
    // (MEMORY+0x100)[i] = 0
    // [16] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$100,x
    // (MEMORY+0x200)[i] = 0
    // [17] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$200,x
    // (MEMORY+0x300)[i] = 0
    // [18] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$300,x
    // (MEMORY+0x400)[i] = 0
    // [19] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$400,x
    // (MEMORY+0x500)[i] = 0
    // [20] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$500,x
    // (MEMORY+0x600)[i] = 0
    // [21] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$600,x
    // (MEMORY+0x700)[i] = 0
    // [22] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$700,x
    // while (++i)
    // [23] (byte) main::initNES1_i#1 ← ++ (byte) main::initNES1_i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [24] if((byte) 0!=(byte) main::initNES1_i#1) goto main::initNES1_@1 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne initNES1___b1
    // [25] phi from main::initNES1_@1 to main::initNES1_waitForVBlank2 [phi:main::initNES1_@1->main::initNES1_waitForVBlank2]
    // main::initNES1_waitForVBlank2
  initNES1_waitForVBlank2:
    // main::initNES1_waitForVBlank2_@1
    // PPU->PPUSTATUS&0x80
    // [26] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // while(!(PPU->PPUSTATUS&0x80))
    // [27] if((byte) 0==(byte~) main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq initNES1_waitForVBlank2
    // main::initNES1_@7
    // asm
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [29] phi from main::initNES1_@7 to main::@8 [phi:main::initNES1_@7->main::@8]
    // main::@8
    // ppuDataTransfer(PPU_PALETTE, PALETTE, sizeof(PALETTE))
    // [30] call ppuDataTransfer 
  // Transfer the palette
    // [81] phi from main::@8 to ppuDataTransfer [phi:main::@8->ppuDataTransfer]
    jsr ppuDataTransfer
    // [31] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
    // main::@9
    // ppuDataFill(PPU_NAME_TABLE_0, 0xfc, 0x3c0)
    // [32] call ppuDataFill 
  // Clear the name table
    // [71] phi from main::@9 to ppuDataFill [phi:main::@9->ppuDataFill]
    // [71] phi (byte) ppuDataFill::val#4 = (byte) $fc [phi:main::@9->ppuDataFill#0] -- vbuxx=vbuc1 
    ldx #$fc
    // [71] phi (word) ppuDataFill::size#3 = (word) $3c0 [phi:main::@9->ppuDataFill#1] -- vwuz1=vwuc1 
    lda #<$3c0
    sta.z ppuDataFill.size
    lda #>$3c0
    sta.z ppuDataFill.size+1
    // [71] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_NAME_TABLE_0 [phi:main::@9->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [33] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
    // main::@10
    // ppuDataFill(PPU_ATTRIBUTE_TABLE_0, 0, 0x40)
    // [34] call ppuDataFill 
  // Fill the PPU attribute table
    // [71] phi from main::@10 to ppuDataFill [phi:main::@10->ppuDataFill]
    // [71] phi (byte) ppuDataFill::val#4 = (byte) 0 [phi:main::@10->ppuDataFill#0] -- vbuxx=vbuc1 
    ldx #0
    // [71] phi (word) ppuDataFill::size#3 = (byte) $40 [phi:main::@10->ppuDataFill#1] -- vwuz1=vbuc1 
    lda #<$40
    sta.z ppuDataFill.size
    lda #>$40
    sta.z ppuDataFill.size+1
    // [71] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0 [phi:main::@10->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [35] phi from main::@10 to main::@1 [phi:main::@10->main::@1]
    // [35] phi (byte) main::x#2 = (byte) 0 [phi:main::@10->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // Show the entire tile set
  //char ch=0;
  //for(char y=0;y!=16;y++) {
  //    ppuDataPrepare(PPU_NAME_TABLE_0+32*4+4+(unsigned int)y*32);
  //    for(char x=0;x!=16;x++)
  //        ppuDataPut(ch++);
  //}
  // Show floor
    // main::@1
  __b1:
    // for(char x=0;x<32;x+=2)
    // [36] if((byte) main::x#2<(byte) $20) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$20
    bcc __b2
    // [37] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // main::@3
    // ppuDataPutTile(PPU_NAME_TABLE_0+18*32+28, FLAG)
    // [38] call ppuDataPutTile 
  // Show flag
    // [52] phi from main::@3 to ppuDataPutTile [phi:main::@3->ppuDataPutTile]
    // [52] phi (byte*) ppuDataPutTile::tile#10 = (const byte*) FLAG [phi:main::@3->ppuDataPutTile#0] -- pbuz1=pbuc1 
    lda #<FLAG
    sta.z ppuDataPutTile.tile
    lda #>FLAG
    sta.z ppuDataPutTile.tile+1
    // [52] phi (nomodify void*) ppuDataPutTile::ppuData#2 = (void*)(const nomodify byte*) PPU_NAME_TABLE_0+(word)(number) $12*(number) $20+(byte) $1c [phi:main::@3->ppuDataPutTile#1] -- pvoz1=pvoc1 
    lda #<PPU_NAME_TABLE_0+$12*$20+$1c
    sta.z ppuDataPutTile.ppuData
    lda #>PPU_NAME_TABLE_0+$12*$20+$1c
    sta.z ppuDataPutTile.ppuData+1
    jsr ppuDataPutTile
    // [39] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // [39] phi (byte) main::i#2 = (byte) 0 [phi:main::@3->main::@4#0] -- vbuxx=vbuc1 
    ldx #0
  // Initialize Sprite OAM Buffer with the SPRITE data
    // main::@4
  __b4:
    // for(char i=0;i<sizeof(SPRITES); i++)
    // [40] if((byte) main::i#2<(byte) 4*(const byte) SIZEOF_STRUCT_SPRITEDATA) goto main::@5 -- vbuxx_lt_vbuc1_then_la1 
    cpx #4*SIZEOF_STRUCT_SPRITEDATA
    bcc __b5
    // main::@6
    // PPU->PPUSCROLL = 0
    // [41] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Set initial scroll
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    // PPU->PPUSCROLL = -8
    // [42] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) -8 -- _deref_pbuc1=vbuc2 
    lda #-8
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    // main::enableVideoOutput1
    // PPU->PPUCTRL = 0b10000000
    // [43] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80 -- _deref_pbuc1=vbuc2 
    lda #$80
    sta PPU
    // PPU->PPUMASK = 0b00011000
    // [44] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $18 -- _deref_pbuc1=vbuc2 
    lda #$18
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    // [45] phi from main::@7 main::enableVideoOutput1 to main::@7 [phi:main::@7/main::enableVideoOutput1->main::@7]
  __b3:
  // Infinite loop
    // main::@7
    jmp __b3
    // main::@5
  __b5:
    // ((char*)OAM_BUFFER)[i] = ((char*)SPRITES)[i]
    // [46] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER + (byte) main::i#2) ← *((byte*)(const struct SpriteData*) SPRITES + (byte) main::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda SPRITES,x
    sta OAM_BUFFER,x
    // for(char i=0;i<sizeof(SPRITES); i++)
    // [47] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [39] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
    // [39] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@5->main::@4#0] -- register_copy 
    jmp __b4
    // main::@2
  __b2:
    // PPU_NAME_TABLE_0+20*32+x
    // [48] (nomodify byte*) ppuDataPutTile::ppuData#0 ← (const nomodify byte*) PPU_NAME_TABLE_0+(word)(number) $14*(number) $20 + (byte) main::x#2 -- pbuz1=pbuc1_plus_vbuxx 
    txa
    clc
    adc #<PPU_NAME_TABLE_0+$14*$20
    sta.z ppuDataPutTile.ppuData
    lda #>PPU_NAME_TABLE_0+$14*$20
    adc #0
    sta.z ppuDataPutTile.ppuData+1
    // [49] (nomodify void*) ppuDataPutTile::ppuData#9 ← (void*)(nomodify byte*) ppuDataPutTile::ppuData#0
    // ppuDataPutTile(PPU_NAME_TABLE_0+20*32+x, FLOOR)
    // [50] call ppuDataPutTile 
    // [52] phi from main::@2 to ppuDataPutTile [phi:main::@2->ppuDataPutTile]
    // [52] phi (byte*) ppuDataPutTile::tile#10 = (const byte*) FLOOR [phi:main::@2->ppuDataPutTile#0] -- pbuz1=pbuc1 
    lda #<FLOOR
    sta.z ppuDataPutTile.tile
    lda #>FLOOR
    sta.z ppuDataPutTile.tile+1
    // [52] phi (nomodify void*) ppuDataPutTile::ppuData#2 = (nomodify void*) ppuDataPutTile::ppuData#9 [phi:main::@2->ppuDataPutTile#1] -- register_copy 
    jsr ppuDataPutTile
    // main::@11
    // x+=2
    // [51] (byte) main::x#1 ← (byte) main::x#2 + (byte) 2 -- vbuxx=vbuxx_plus_2 
    inx
    inx
    // [35] phi from main::@11 to main::@1 [phi:main::@11->main::@1]
    // [35] phi (byte) main::x#2 = (byte) main::x#1 [phi:main::@11->main::@1#0] -- register_copy 
    jmp __b1
}
  // ppuDataPutTile
// Transfer a 2x2 tile into the PPU memory
// - ppuData : Pointer in the PPU memory
// - tile : The tile to transfer
// ppuDataPutTile(byte* zp(6) ppuData, byte* zp(2) tile)
ppuDataPutTile: {
    .label ppuDataPrepare2_ppuData = 6
    .label ppuData = 6
    .label tile = 2
    // ppuDataPutTile::ppuDataPrepare1
    // >ppuData
    // [53] (byte~) ppuDataPutTile::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataPutTile::ppuData#2 -- vbuaa=_hi_pvoz1 
    lda.z ppuData+1
    // PPU->PPUADDR = >ppuData
    // [54] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataPutTile::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // <ppuData
    // [55] (byte~) ppuDataPutTile::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataPutTile::ppuData#2 -- vbuaa=_lo_pvoz1 
    lda.z ppuData
    // PPU->PPUADDR = <ppuData
    // [56] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataPutTile::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // ppuDataPutTile::@1
    // ppuDataPut(tile[0])
    // [57] (byte) ppuDataPutTile::ppuDataPut1_val#0 ← *((byte*) ppuDataPutTile::tile#10) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (tile),y
    // ppuDataPutTile::ppuDataPut1
    // PPU->PPUDATA = val
    // [58] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataPutTile::ppuDataPut1_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // ppuDataPutTile::@2
    // ppuDataPut(tile[1])
    // [59] (byte) ppuDataPutTile::ppuDataPut2_val#0 ← *((byte*) ppuDataPutTile::tile#10 + (byte) 1) -- vbuaa=pbuz1_derefidx_vbuc1 
    ldy #1
    lda (tile),y
    // ppuDataPutTile::ppuDataPut2
    // PPU->PPUDATA = val
    // [60] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataPutTile::ppuDataPut2_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // ppuDataPutTile::@3
    // (char*)ppuData+32
    // [61] (nomodify byte*) ppuDataPutTile::ppuDataPrepare2_ppuData#0 ← (byte*)(nomodify void*) ppuDataPutTile::ppuData#2 + (byte) $20 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$20
    clc
    adc.z ppuDataPrepare2_ppuData
    sta.z ppuDataPrepare2_ppuData
    bcc !+
    inc.z ppuDataPrepare2_ppuData+1
  !:
    // ppuDataPutTile::ppuDataPrepare2
    // >ppuData
    // [62] (byte~) ppuDataPutTile::ppuDataPrepare2_$0 ← > (void*)(nomodify byte*) ppuDataPutTile::ppuDataPrepare2_ppuData#0 -- vbuaa=_hi_pvoz1 
    lda.z ppuDataPrepare2_ppuData+1
    // PPU->PPUADDR = >ppuData
    // [63] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataPutTile::ppuDataPrepare2_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // <ppuData
    // [64] (byte~) ppuDataPutTile::ppuDataPrepare2_$1 ← < (void*)(nomodify byte*) ppuDataPutTile::ppuDataPrepare2_ppuData#0 -- vbuaa=_lo_pvoz1 
    lda.z ppuDataPrepare2_ppuData
    // PPU->PPUADDR = <ppuData
    // [65] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataPutTile::ppuDataPrepare2_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // ppuDataPutTile::@4
    // ppuDataPut(tile[2])
    // [66] (byte) ppuDataPutTile::ppuDataPut3_val#0 ← *((byte*) ppuDataPutTile::tile#10 + (byte) 2) -- vbuaa=pbuz1_derefidx_vbuc1 
    ldy #2
    lda (tile),y
    // ppuDataPutTile::ppuDataPut3
    // PPU->PPUDATA = val
    // [67] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataPutTile::ppuDataPut3_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // ppuDataPutTile::@5
    // ppuDataPut(tile[3])
    // [68] (byte) ppuDataPutTile::ppuDataPut4_val#0 ← *((byte*) ppuDataPutTile::tile#10 + (byte) 3) -- vbuaa=pbuz1_derefidx_vbuc1 
    ldy #3
    lda (tile),y
    // ppuDataPutTile::ppuDataPut4
    // PPU->PPUDATA = val
    // [69] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataPutTile::ppuDataPut4_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // ppuDataPutTile::@return
    // }
    // [70] return 
    rts
}
  // ppuDataFill
// Fill a number of bytes in the PPU memory
// - ppuData : Pointer in the PPU memory
// - size : The number of bytes to transfer
// ppuDataFill(byte register(X) val, word zp(2) size)
ppuDataFill: {
    .label ppuDataPrepare1_ppuData = 6
    .label i = 4
    .label size = 2
    // ppuDataFill::ppuDataPrepare1
    // >ppuData
    // [72] (byte~) ppuDataFill::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuaa=_hi_pvoz1 
    lda.z ppuDataPrepare1_ppuData+1
    // PPU->PPUADDR = >ppuData
    // [73] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // <ppuData
    // [74] (byte~) ppuDataFill::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuaa=_lo_pvoz1 
    lda.z ppuDataPrepare1_ppuData
    // PPU->PPUADDR = <ppuData
    // [75] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [76] phi from ppuDataFill::ppuDataPrepare1 to ppuDataFill::@1 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1]
    // [76] phi (word) ppuDataFill::i#2 = (word) 0 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    sta.z i+1
  // Transfer to PPU
    // ppuDataFill::@1
  __b1:
    // for(unsigned int i=0;i<size;i++)
    // [77] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1 -- vwuz1_lt_vwuz2_then_la1 
    lda.z i+1
    cmp.z size+1
    bcc ppuDataPut1
    bne !+
    lda.z i
    cmp.z size
    bcc ppuDataPut1
  !:
    // ppuDataFill::@return
    // }
    // [78] return 
    rts
    // ppuDataFill::ppuDataPut1
  ppuDataPut1:
    // PPU->PPUDATA = val
    // [79] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataFill::val#4 -- _deref_pbuc1=vbuxx 
    stx PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // ppuDataFill::@2
    // for(unsigned int i=0;i<size;i++)
    // [80] (word) ppuDataFill::i#1 ← ++ (word) ppuDataFill::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [76] phi from ppuDataFill::@2 to ppuDataFill::@1 [phi:ppuDataFill::@2->ppuDataFill::@1]
    // [76] phi (word) ppuDataFill::i#2 = (word) ppuDataFill::i#1 [phi:ppuDataFill::@2->ppuDataFill::@1#0] -- register_copy 
    jmp __b1
}
  // ppuDataTransfer
// Transfer a number of bytes from the CPU memory to the PPU memory
// - cpuData : Pointer to the CPU memory (RAM of ROM)
// - ppuData : Pointer in the PPU memory
// - size : The number of bytes to transfer
ppuDataTransfer: {
    .const size = $20*SIZEOF_BYTE
    .label ppuData = PPU_PALETTE
    .label cpuData = PALETTE
    // Transfer to PPU
    .label cpuSrc = 6
    .label i = 4
    // ppuDataTransfer::ppuDataPrepare1
    // PPU->PPUADDR = >ppuData
    // [82] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify void*) ppuDataTransfer::ppuData#0 -- _deref_pbuc1=vbuc2 
    lda #>ppuData
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // PPU->PPUADDR = <ppuData
    // [83] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [84] phi from ppuDataTransfer::ppuDataPrepare1 to ppuDataTransfer::@1 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1]
    // [84] phi (byte*) ppuDataTransfer::cpuSrc#2 = (byte*)(const nomodify void*) ppuDataTransfer::cpuData#0 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1#0] -- pbuz1=pbuc1 
    lda #<cpuData
    sta.z cpuSrc
    lda #>cpuData
    sta.z cpuSrc+1
    // [84] phi (word) ppuDataTransfer::i#2 = (word) 0 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    sta.z i+1
    // ppuDataTransfer::@1
  __b1:
    // for(unsigned int i=0;i<size;i++)
    // [85] if((word) ppuDataTransfer::i#2<(const word) ppuDataTransfer::size#0) goto ppuDataTransfer::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>size
    bcc __b2
    bne !+
    lda.z i
    cmp #<size
    bcc __b2
  !:
    // ppuDataTransfer::@return
    // }
    // [86] return 
    rts
    // ppuDataTransfer::@2
  __b2:
    // ppuDataPut(*cpuSrc++)
    // [87] (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (cpuSrc),y
    // ppuDataTransfer::ppuDataPut1
    // PPU->PPUDATA = val
    // [88] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataTransfer::ppuDataPut1_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // ppuDataTransfer::@3
    // ppuDataPut(*cpuSrc++);
    // [89] (byte*) ppuDataTransfer::cpuSrc#1 ← ++ (byte*) ppuDataTransfer::cpuSrc#2 -- pbuz1=_inc_pbuz1 
    inc.z cpuSrc
    bne !+
    inc.z cpuSrc+1
  !:
    // for(unsigned int i=0;i<size;i++)
    // [90] (word) ppuDataTransfer::i#1 ← ++ (word) ppuDataTransfer::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [84] phi from ppuDataTransfer::@3 to ppuDataTransfer::@1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1]
    // [84] phi (byte*) ppuDataTransfer::cpuSrc#2 = (byte*) ppuDataTransfer::cpuSrc#1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#0] -- register_copy 
    // [84] phi (word) ppuDataTransfer::i#2 = (word) ppuDataTransfer::i#1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#1] -- register_copy 
    jmp __b1
}
  // vblank
// NMI Called when the PPU refreshes the screen (also known as the V-Blank period)
vblank: {
    // entry interrupt(HARDWARE_STACK)
    pha
    txa
    pha
    tya
    pha
    // vblank::ppuSpriteBufferDmaTransfer1
    // PPU->OAMADDR = 0
    // [92] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR
    // APU->OAMDMA = >spriteBuffer
    // [93] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA) ← >(const nomodify struct SpriteData*) OAM_BUFFER -- _deref_pbuc1=vbuc2 
    lda #>OAM_BUFFER
    sta APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA
    // vblank::@4
    // APU->JOY1 = 1
    // [94] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1 -- _deref_pbuc1=vbuc2 
    // Latch the controller buttons
    lda #1
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // APU->JOY1 = 0
    // [95] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // APU->JOY1&0b00000001
    // [96] (byte~) vblank::$1 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #1
    and APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // if(APU->JOY1&0b00000001)
    // [97] if((byte) 0==(byte~) vblank::$1) goto vblank::@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b1
    // vblank::@2
    // OAM_BUFFER[0].y++;
    // [98] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER
    // OAM_BUFFER[1].y++;
    // [99] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 1*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 1*(const byte) SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA
    // OAM_BUFFER[2].y++;
    // [100] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 2*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 2*(const byte) SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA
    // OAM_BUFFER[3].y++;
    // [101] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 3*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← ++ *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 3*(const byte) SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc OAM_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA
    // vblank::@1
  __b1:
    // APU->JOY1&0b00000001
    // [102] (byte~) vblank::$3 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #1
    and APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // if(APU->JOY1&0b00000001)
    // [103] if((byte) 0==(byte~) vblank::$3) goto vblank::@return -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __breturn
    // vblank::@3
    // OAM_BUFFER[0].y--;
    // [104] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER
    // OAM_BUFFER[1].y--;
    // [105] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 1*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 1*(const byte) SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER+1*SIZEOF_STRUCT_SPRITEDATA
    // OAM_BUFFER[2].y--;
    // [106] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 2*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 2*(const byte) SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER+2*SIZEOF_STRUCT_SPRITEDATA
    // OAM_BUFFER[3].y--;
    // [107] *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 3*(const byte) SIZEOF_STRUCT_SPRITEDATA) ← -- *((byte*)(const nomodify struct SpriteData*) OAM_BUFFER+(byte) 3*(const byte) SIZEOF_STRUCT_SPRITEDATA) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec OAM_BUFFER+3*SIZEOF_STRUCT_SPRITEDATA
    // vblank::@return
  __breturn:
    // }
    // [108] return  - exit interrupt(HARDWARE_STACK)
    pla
    tay
    pla
    tax
    pla
    rti
}
  // File Data
.segment Data
  // Flag tile
  FLAG: .byte $54, $55, $56, $57
  // Floor tile
  FLOOR: .byte $85, $85, $86, $86
  // Small Luigi Sprite Data
  SPRITES: .byte $80, $36, 2, $80, $80, $37, 2, $88, $88, $38, 2, $80, $88, $39, 2, $88
  // Color Palette
  PALETTE: .byte $f, $13, $23, $33, $f, 6, $15, $36, $f, $39, $4a, $5b, $f, $3d, $4e, $5f, $f, $1c, $15, $14, $f, 2, $38, $3c, $f, $30, $37, $1a, $f, $f, $f, $f
.segment Tiles
TILES:
.import binary "smb1_chr.bin"

.segment Vectors
  VECTORS: .word vblank, main, 0

