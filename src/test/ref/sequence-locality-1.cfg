@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@2
main::@2: scope:[main]  from main main::@3 main::@4
  [5] (byte) main::idx#5 ← phi( main::@4/(byte) main::idx#1 main/(byte) 0 main::@3/(byte) main::idx#1 )
  [5] (byte) main::i#5 ← phi( main::@4/(byte) main::i#1 main/(byte) 0 main::@3/(byte) main::i#1 )
  [5] (byte) main::j#2 ← phi( main::@4/(byte~) main::j#4 main/(byte) 0 main::@3/(byte) main::j#1 )
  [6] *((const byte*) main::screen#0 + (byte) main::idx#5) ← (byte) main::j#2
  [7] (byte) main::idx#1 ← ++ (byte) main::idx#5
  [8] (byte) main::i#1 ← ++ (byte) main::i#5
  [9] if((byte) main::i#1!=(byte) $b) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [10] return 
  to:@return
main::@1: scope:[main]  from main::@2
  [11] if((byte) main::i#1<(byte) 5+(byte) 1) goto main::@4
  to:main::@3
main::@3: scope:[main]  from main::@1
  [12] (byte) main::j#1 ← (byte) main::i#1 + (byte) main::i#1
  to:main::@2
main::@4: scope:[main]  from main::@1
  [13] (byte~) main::j#4 ← (byte) main::i#1
  to:main::@2
