Fixing struct type size struct MOS7360_TED to 63
Fixing struct type SIZE_OF struct MOS7360_TED to 63
Fixing struct type SIZE_OF struct MOS7360_TED to 63

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  to:main::@1
main::@1: scope:[main]  from main main::@2
  call kbhit 
  kbhit::return#0 = kbhit::return#2
  to:main::@2
main::@2: scope:[main]  from main::@1
  kbhit::return#3 = phi( main::@1/kbhit::return#0 )
  main::$0 = kbhit::return#3
  main::$2 = 0 != main::$0
  main::$1 = ! main::$2
  if(main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

byte kbhit()
kbhit: scope:[kbhit]  from main::@1
  *((byte*)KEYBOARD_PORT+OFFSET_STRUCT_MOS6529_PIO_PORT) = 0
  *((byte*)TED+OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT) = 0
  kbhit::$0 = ~ *((byte*)TED+OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT)
  kbhit::return#1 = kbhit::$0
  to:kbhit::@return
kbhit::@return: scope:[kbhit]  from kbhit
  kbhit::return#4 = phi( kbhit/kbhit::return#1 )
  kbhit::return#2 = kbhit::return#4
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify struct MOS6529_PIO* KEYBOARD_PORT = (struct MOS6529_PIO*)$fd30
const byte OFFSET_STRUCT_MOS6529_PIO_PORT = 0
const byte OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT = 8
const nomodify struct MOS7360_TED* TED = (struct MOS7360_TED*)$ff00
void __start()
byte kbhit()
byte~ kbhit::$0
byte kbhit::return
byte kbhit::return#0
byte kbhit::return#1
byte kbhit::return#2
byte kbhit::return#3
byte kbhit::return#4
void main()
byte~ main::$0
bool~ main::$1
bool~ main::$2

Adding number conversion cast (unumber) 0 in main::$2 = 0 != main::$0
Adding number conversion cast (unumber) 0 in *((byte*)KEYBOARD_PORT+OFFSET_STRUCT_MOS6529_PIO_PORT) = 0
Adding number conversion cast (unumber) 0 in *((byte*)TED+OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT) = 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((byte*)KEYBOARD_PORT+OFFSET_STRUCT_MOS6529_PIO_PORT) = (unumber)0
Inlining cast *((byte*)TED+OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT) = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (struct MOS6529_PIO*) 64816
Simplifying constant pointer cast (struct MOS7360_TED*) 65280
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [5] main::$1 = 0 == main::$0 from [4] main::$2 = 0 != main::$0
Successful SSA optimization Pass2UnaryNotSimplification
Alias kbhit::return#0 = kbhit::return#3 
Alias kbhit::return#1 = kbhit::$0 kbhit::return#4 kbhit::return#2 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$1 [4] if(0==main::$0) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Simplifying expression containing zero (byte*)KEYBOARD_PORT in [6] *((byte*)KEYBOARD_PORT+OFFSET_STRUCT_MOS6529_PIO_PORT) = 0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant OFFSET_STRUCT_MOS6529_PIO_PORT
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Finalized unsigned number type (byte) $1d
Finalized unsigned number type (byte) $1d
Successful SSA optimization PassNFinalizeNumberTypeConversions
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
CALL GRAPH
Calls in [main] to kbhit:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] phi()
  [2] call kbhit 
  [3] kbhit::return#0 = kbhit::return#1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] main::$0 = kbhit::return#0
  [5] if(0==main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [6] return 
  to:@return

byte kbhit()
kbhit: scope:[kbhit]  from main::@1
  [7] *((byte*)KEYBOARD_PORT) = 0
  [8] *((byte*)TED+OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT) = 0
  [9] kbhit::return#1 = ~ *((byte*)TED+OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT)
  to:kbhit::@return
kbhit::@return: scope:[kbhit]  from kbhit
  [10] return 
  to:@return


VARIABLE REGISTER WEIGHTS
byte kbhit()
byte kbhit::return
byte kbhit::return#0 22.0
byte kbhit::return#1 37.33333333333333
void main()
byte~ main::$0 22.0

Initial phi equivalence classes
Added variable kbhit::return#0 to live range equivalence class [ kbhit::return#0 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable kbhit::return#1 to live range equivalence class [ kbhit::return#1 ]
Complete equivalence classes
[ kbhit::return#0 ]
[ main::$0 ]
[ kbhit::return#1 ]
Allocated zp[1]:2 [ kbhit::return#0 ]
Allocated zp[1]:3 [ main::$0 ]
Allocated zp[1]:4 [ kbhit::return#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] *((byte*)KEYBOARD_PORT) = 0 [ ] ( kbhit:2 [ ] { { kbhit::return#0 = kbhit::return#1 } }  ) always clobbers reg byte a 
Statement [8] *((byte*)TED+OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT) = 0 [ ] ( kbhit:2 [ ] { { kbhit::return#0 = kbhit::return#1 } }  ) always clobbers reg byte a 
Statement [9] kbhit::return#1 = ~ *((byte*)TED+OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT) [ kbhit::return#1 ] ( kbhit:2 [ kbhit::return#1 ] { { kbhit::return#0 = kbhit::return#1 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ kbhit::return#0 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::$0 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ kbhit::return#1 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [kbhit] 37.33: zp[1]:4 [ kbhit::return#1 ] 22: zp[1]:2 [ kbhit::return#0 ] 
Uplift Scope [main] 22: zp[1]:3 [ main::$0 ] 
Uplift Scope [MOS7360_TED] 
Uplift Scope [MOS6551_ACIA] 
Uplift Scope [MOS6529_PIO] 
Uplift Scope [MOS7501_PORT] 
Uplift Scope [$0] 
Uplift Scope [] 

Uplifting [kbhit] best 268 combination reg byte a [ kbhit::return#1 ] reg byte a [ kbhit::return#0 ] 
Uplifting [main] best 228 combination reg byte a [ main::$0 ] 
Uplifting [MOS7360_TED] best 228 combination 
Uplifting [MOS6551_ACIA] best 228 combination 
Uplifting [MOS6529_PIO] best 228 combination 
Uplifting [MOS7501_PORT] best 228 combination 
Uplifting [$0] best 228 combination 
Uplifting [] best 228 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test implementation of kbhit() for Plus/4
// Plus/4 / Commodore 16 registers and memory layout
// http://zimmers.net/anonftp/pub/cbm/schematics/computers/plus4/264_Hardware_Spec.pdf
// http://www.zimmers.net/anonftp/pub/cbm/schematics/computers/plus4/Plus_4_Technical_Docs.pdf
// http://personalpages.tds.net/~rcarlsen/cbm/c16/C16_Service_Manual_314001-03_(1984_Oct).pdf
// https://www.floodgap.com/retrobits/ckb/secret/264memory.txt
// The MOS 7360/8360 TED chip used for graphics and sound in Plus/4 and Commodore 16
// https://www.karlstechnology.com/commodore/TED7360-datasheet.pdf
// http://mclauchlan.site.net.au/scott/C=Hacking/C-Hacking12/gfx.html
  // Upstart
  // Commodore 16 / Plus/4 executable PRG file
.file [name="plus4-kbhit.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$1001]
.segmentdef Code [start=$100d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT = 8
  // Keyboard Port PIO (P0-P7)
  // The input latch is part of the TED.
  .label KEYBOARD_PORT = $fd30
  // The TED chip controlling video and sound on the Plus/4 and Commodore 16
  .label TED = $ff00
.segment Code
  // main
main: {
    // [1] phi from main main::@2 to main::@1 [phi:main/main::@2->main::@1]
  __b1_from_main:
  __b1_from___b2:
    jmp __b1
    // main::@1
  __b1:
    // [2] call kbhit 
    jsr kbhit
    // [3] kbhit::return#0 = kbhit::return#1
    jmp __b2
    // main::@2
  __b2:
    // [4] main::$0 = kbhit::return#0
    // [5] if(0==main::$0) goto main::@1 -- 0_eq_vbuaa_then_la1 
    cmp #0
    beq __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // kbhit
// Return true if there's a key waiting, return false if not
kbhit: {
    // [7] *((byte*)KEYBOARD_PORT) = 0 -- _deref_pbuc1=vbuc2 
    // Read all keyboard matrix rows
    lda #0
    sta KEYBOARD_PORT
    // [8] *((byte*)TED+OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT) = 0 -- _deref_pbuc1=vbuc2 
    // Write to the keyboard input to latch the matrix column values
    lda #0
    sta TED+OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT
    // [9] kbhit::return#1 = ~ *((byte*)TED+OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT) -- vbuaa=_bnot__deref_pbuc1 
    lda TED+OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT
    eor #$ff
    jmp __breturn
    // kbhit::@return
  __breturn:
    // [10] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda TED+OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from_main:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const nomodify struct MOS6529_PIO* KEYBOARD_PORT = (struct MOS6529_PIO*) 64816
const byte OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT = 8
const nomodify struct MOS7360_TED* TED = (struct MOS7360_TED*) 65280
byte kbhit()
byte kbhit::return
byte kbhit::return#0 reg byte a 22.0
byte kbhit::return#1 reg byte a 37.33333333333333
void main()
byte~ main::$0 reg byte a 22.0

reg byte a [ kbhit::return#0 ]
reg byte a [ main::$0 ]
reg byte a [ kbhit::return#1 ]


FINAL ASSEMBLER
Score: 129

  // File Comments
// Test implementation of kbhit() for Plus/4
// Plus/4 / Commodore 16 registers and memory layout
// http://zimmers.net/anonftp/pub/cbm/schematics/computers/plus4/264_Hardware_Spec.pdf
// http://www.zimmers.net/anonftp/pub/cbm/schematics/computers/plus4/Plus_4_Technical_Docs.pdf
// http://personalpages.tds.net/~rcarlsen/cbm/c16/C16_Service_Manual_314001-03_(1984_Oct).pdf
// https://www.floodgap.com/retrobits/ckb/secret/264memory.txt
// The MOS 7360/8360 TED chip used for graphics and sound in Plus/4 and Commodore 16
// https://www.karlstechnology.com/commodore/TED7360-datasheet.pdf
// http://mclauchlan.site.net.au/scott/C=Hacking/C-Hacking12/gfx.html
  // Upstart
  // Commodore 16 / Plus/4 executable PRG file
.file [name="plus4-kbhit.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$1001]
.segmentdef Code [start=$100d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT = 8
  // Keyboard Port PIO (P0-P7)
  // The input latch is part of the TED.
  .label KEYBOARD_PORT = $fd30
  // The TED chip controlling video and sound on the Plus/4 and Commodore 16
  .label TED = $ff00
.segment Code
  // main
main: {
    // [1] phi from main main::@2 to main::@1 [phi:main/main::@2->main::@1]
    // main::@1
  __b1:
    // kbhit()
    // [2] call kbhit 
    jsr kbhit
    // [3] kbhit::return#0 = kbhit::return#1
    // main::@2
    // [4] main::$0 = kbhit::return#0
    // while(!kbhit())
    // [5] if(0==main::$0) goto main::@1 -- 0_eq_vbuaa_then_la1 
    cmp #0
    beq __b1
    // main::@return
    // }
    // [6] return 
    rts
}
  // kbhit
// Return true if there's a key waiting, return false if not
kbhit: {
    // KEYBOARD_PORT->PORT = 0x00
    // [7] *((byte*)KEYBOARD_PORT) = 0 -- _deref_pbuc1=vbuc2 
    // Read all keyboard matrix rows
    lda #0
    sta KEYBOARD_PORT
    // TED->KEYBOARD_INPUT = 0
    // [8] *((byte*)TED+OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT) = 0 -- _deref_pbuc1=vbuc2 
    // Write to the keyboard input to latch the matrix column values
    sta TED+OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT
    // ~TED->KEYBOARD_INPUT
    // [9] kbhit::return#1 = ~ *((byte*)TED+OFFSET_STRUCT_MOS7360_TED_KEYBOARD_INPUT) -- vbuaa=_bnot__deref_pbuc1 
    eor #$ff
    // kbhit::@return
    // }
    // [10] return 
    rts
}
  // File Data

