Setting inferred __stackcall on procedure affected by address-of __stackcall void cputc(char x) caused by statement call printf_str(&cputc, "Commodore is ")
Setting inferred __stackcall on procedure affected by address-of __stackcall void cputc(char x) caused by statement call printf_uint(&cputc, main::pct, { 0, 0, 0, 0, 0, HEXADECIMAL })
Setting inferred __stackcall on procedure affected by address-of __stackcall void cputc(char x) caused by statement call printf_str(&cputc, " cool")
Adding parameter assignment in __stackcall procedure cputc::x = param(cputc::x)
Added struct type cast to parameter value list call printf_uint(&cputc, main::pct, (struct printf_format_number){ 0, 0, 0, 0, 0, HEXADECIMAL })
Inlined call call __init
Eliminating unused variable with no statement main::$0
Calling convention STACK_CALL replacing param(cputc::x) with stackidx(char,cputc::OFFSET_STACK_X)

CONTROL FLOW GRAPH SSA

void printf_str(void (*putc)(char) , char *str)
printf_str: scope:[printf_str]  from main main::@2
  screen#27 = phi( main/screen#25, main::@2/screen#8 )
  printf_str::str#5 = phi( main/printf_str::str#1, main::@2/printf_str::str#2 )
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@2
  screen#24 = phi( printf_str/screen#27, printf_str::@2/screen#0 )
  printf_str::str#3 = phi( printf_str/printf_str::str#5, printf_str::@2/printf_str::str#0 )
  printf_str::$0 = 0 != *printf_str::str#3
  if(printf_str::$0) goto printf_str::@2
  to:printf_str::@return
printf_str::@2: scope:[printf_str]  from printf_str::@1
  screen#14 = phi( printf_str::@1/screen#24 )
  printf_str::str#4 = phi( printf_str::@1/printf_str::str#3 )
  *screen#14 = *printf_str::str#4
  screen#0 = ++ screen#14
  printf_str::str#0 = ++ printf_str::str#4
  to:printf_str::@1
printf_str::@return: scope:[printf_str]  from printf_str::@1
  screen#15 = phi( printf_str::@1/screen#24 )
  screen#1 = screen#15
  return 
  to:@return

void printf_uint(void (*putc)(char) , unsigned int uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_uint: scope:[printf_uint]  from main::@1
  screen#16 = phi( main::@1/screen#7 )
  printf_uint::uvalue#1 = phi( main::@1/printf_uint::uvalue#0 )
  printf_uint::$0 = byte1  printf_uint::uvalue#1
  printf_uint::$1 = printf_uint::$0 >> 4
  *screen#16 = printf_hextab[printf_uint::$1]
  screen#2 = ++ screen#16
  printf_uint::$2 = byte1  printf_uint::uvalue#1
  printf_uint::$3 = printf_uint::$2 & $f
  *screen#2 = printf_hextab[printf_uint::$3]
  screen#3 = ++ screen#2
  printf_uint::$4 = byte0  printf_uint::uvalue#1
  printf_uint::$5 = printf_uint::$4 >> 4
  *screen#3 = printf_hextab[printf_uint::$5]
  screen#4 = ++ screen#3
  printf_uint::$6 = byte0  printf_uint::uvalue#1
  printf_uint::$7 = printf_uint::$6 & $f
  *screen#4 = printf_hextab[printf_uint::$7]
  screen#5 = ++ screen#4
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint
  screen#17 = phi( printf_uint/screen#5 )
  screen#6 = screen#17
  return 
  to:@return

__stackcall void cputc(char x)
cputc: scope:[cputc]  from
  cputc::x#0 = stackidx(char,cputc::OFFSET_STACK_X)
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  screen#25 = phi( __start::@1/screen#26 )
  printf_str::putc#0 = &cputc
  printf_str::str#1 = main::str
  call printf_str
  to:main::@1
main::@1: scope:[main]  from main
  screen#18 = phi( main/screen#1 )
  screen#7 = screen#18
  printf_uint::putc#0 = &cputc
  printf_uint::uvalue#0 = main::pct
  printf_uint::format_min_length#0 = 0
  printf_uint::format_justify_left#0 = 0
  printf_uint::format_sign_always#0 = 0
  printf_uint::format_zero_padding#0 = 0
  printf_uint::format_upper_case#0 = 0
  printf_uint::format_radix#0 = HEXADECIMAL
  call printf_uint
  to:main::@2
main::@2: scope:[main]  from main::@1
  screen#19 = phi( main::@1/screen#6 )
  screen#8 = screen#19
  printf_str::putc#1 = &cputc
  printf_str::str#2 = main::str1
  call printf_str
  to:main::@3
main::@3: scope:[main]  from main::@2
  screen#20 = phi( main::@2/screen#1 )
  screen#9 = screen#20
  to:main::@return
main::@return: scope:[main]  from main::@3
  screen#21 = phi( main::@3/screen#9 )
  screen#10 = screen#21
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  screen#11 = (char *)$400
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  screen#26 = phi( __start::__init1/screen#11 )
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  screen#22 = phi( __start::@1/screen#10 )
  screen#12 = screen#22
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  screen#23 = phi( __start::@2/screen#12 )
  screen#13 = screen#23
  return 
  to:@return

SYMBOL TABLE SSA
__constant char HEXADECIMAL = $10
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant unsigned int STACK_BASE = $103
void __start()
__stackcall void cputc(char x)
__constant char cputc::OFFSET_STACK_X = 0
char cputc::x
char cputc::x#0
void main()
__constant unsigned int main::pct = $156
__constant char main::str[$e] = "Commodore is "
__constant char main::str1[6] = " cool"
__constant const char printf_hextab[] = "0123456789abcdef"z
void printf_str(void (*putc)(char) , char *str)
bool printf_str::$0
void (*printf_str::putc)(char)
void (*printf_str::putc#0)(char)
void (*printf_str::putc#1)(char)
char *printf_str::str
char *printf_str::str#0
char *printf_str::str#1
char *printf_str::str#2
char *printf_str::str#3
char *printf_str::str#4
char *printf_str::str#5
void printf_uint(void (*putc)(char) , unsigned int uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
char printf_uint::$0
char printf_uint::$1
char printf_uint::$2
number printf_uint::$3
char printf_uint::$4
char printf_uint::$5
char printf_uint::$6
number printf_uint::$7
struct printf_format_number printf_uint::format
char printf_uint::format_justify_left
char printf_uint::format_justify_left#0
char printf_uint::format_min_length
char printf_uint::format_min_length#0
char printf_uint::format_radix
char printf_uint::format_radix#0
char printf_uint::format_sign_always
char printf_uint::format_sign_always#0
char printf_uint::format_upper_case
char printf_uint::format_upper_case#0
char printf_uint::format_zero_padding
char printf_uint::format_zero_padding#0
void (*printf_uint::putc)(char)
void (*printf_uint::putc#0)(char)
unsigned int printf_uint::uvalue
unsigned int printf_uint::uvalue#0
unsigned int printf_uint::uvalue#1
char *screen
char *screen#0
char *screen#1
char *screen#10
char *screen#11
char *screen#12
char *screen#13
char *screen#14
char *screen#15
char *screen#16
char *screen#17
char *screen#18
char *screen#19
char *screen#2
char *screen#20
char *screen#21
char *screen#22
char *screen#23
char *screen#24
char *screen#25
char *screen#26
char *screen#27
char *screen#3
char *screen#4
char *screen#5
char *screen#6
char *screen#7
char *screen#8
char *screen#9

Adding number conversion cast (unumber) 0 in printf_str::$0 = 0 != *printf_str::str#3
Adding number conversion cast (unumber) 4 in printf_uint::$1 = printf_uint::$0 >> 4
Adding number conversion cast (unumber) $f in printf_uint::$3 = printf_uint::$2 & $f
Adding number conversion cast (unumber) printf_uint::$3 in printf_uint::$3 = printf_uint::$2 & (unumber)$f
Adding number conversion cast (unumber) 4 in printf_uint::$5 = printf_uint::$4 >> 4
Adding number conversion cast (unumber) $f in printf_uint::$7 = printf_uint::$6 & $f
Adding number conversion cast (unumber) printf_uint::$7 in printf_uint::$7 = printf_uint::$6 & (unumber)$f
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant pointer cast (char *) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) $f
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) $f
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to char in printf_uint::$3 = printf_uint::$2 & $f
Inferred type updated to char in printf_uint::$7 = printf_uint::$6 & $f
Alias printf_str::str#3 = printf_str::str#4 
Alias screen#1 = screen#14 screen#24 screen#15 
Alias screen#17 = screen#5 screen#6 
Alias screen#18 = screen#7 
Alias screen#19 = screen#8 
Alias screen#10 = screen#9 screen#20 screen#21 
Alias screen#11 = screen#26 
Alias screen#12 = screen#22 screen#23 screen#13 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values printf_uint::uvalue#1 printf_uint::uvalue#0
Identical Phi Values screen#16 screen#18
Identical Phi Values screen#25 screen#11
Identical Phi Values screen#18 screen#1
Identical Phi Values screen#19 screen#17
Identical Phi Values screen#10 screen#1
Identical Phi Values screen#12 screen#10
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition printf_str::$0 [3] if(0!=*printf_str::str#3) goto printf_str::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant printf_str::putc#0 = &cputc
Constant printf_str::str#1 = main::str
Constant printf_uint::putc#0 = &cputc
Constant printf_uint::uvalue#0 = main::pct
Constant printf_uint::format_min_length#0 = 0
Constant printf_uint::format_justify_left#0 = 0
Constant printf_uint::format_sign_always#0 = 0
Constant printf_uint::format_zero_padding#0 = 0
Constant printf_uint::format_upper_case#0 = 0
Constant printf_uint::format_radix#0 = HEXADECIMAL
Constant printf_str::putc#1 = &cputc
Constant printf_str::str#2 = main::str1
Constant screen#11 = (char *) 1024
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused variable cputc::x#0 and assignment [24] cputc::x#0 = stackidx(char,cputc::OFFSET_STACK_X)
Eliminating unused constant printf_str::putc#0
Eliminating unused constant printf_str::putc#1
Eliminating unused constant printf_uint::putc#0
Eliminating unused constant printf_uint::format_min_length#0
Eliminating unused constant printf_uint::format_justify_left#0
Eliminating unused constant printf_uint::format_sign_always#0
Eliminating unused constant printf_uint::format_zero_padding#0
Eliminating unused constant printf_uint::format_upper_case#0
Eliminating unused constant printf_uint::format_radix#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant HEXADECIMAL
Eliminating unused constant cputc::OFFSET_STACK_X
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure cputc
Removing unused procedure block cputc
Removing unused procedure block cputc::@return
Successful SSA optimization PassNEliminateEmptyProcedure
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant right-side identified [7] printf_uint::$0 = byte1  printf_uint::uvalue#0
Constant right-side identified [11] printf_uint::$2 = byte1  printf_uint::uvalue#0
Constant right-side identified [15] printf_uint::$4 = byte0  printf_uint::uvalue#0
Constant right-side identified [19] printf_uint::$6 = byte0  printf_uint::uvalue#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant printf_uint::$0 = byte1 printf_uint::uvalue#0
Constant printf_uint::$2 = byte1 printf_uint::uvalue#0
Constant printf_uint::$4 = byte0 printf_uint::uvalue#0
Constant printf_uint::$6 = byte0 printf_uint::uvalue#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [7] printf_uint::$1 = printf_uint::$0 >> 4
Constant right-side identified [10] printf_uint::$3 = printf_uint::$2 & $f
Constant right-side identified [13] printf_uint::$5 = printf_uint::$4 >> 4
Constant right-side identified [16] printf_uint::$7 = printf_uint::$6 & $f
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant printf_uint::$1 = printf_uint::$0>>4
Constant printf_uint::$3 = printf_uint::$2&$f
Constant printf_uint::$5 = printf_uint::$4>>4
Constant printf_uint::$7 = printf_uint::$6&$f
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero printf_uint::$0>>4 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero printf_hextab in [8] *screen#1 = printf_hextab[printf_uint::$1]
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant printf_uint::$0
Eliminating unused constant printf_uint::$1
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with var siblings printf_str::str#1
Inlining constant with var siblings printf_str::str#2
Inlining constant with var siblings screen#11
Constant inlined screen#11 = (char *) 1024
Constant inlined printf_uint::$3 = byte1 main::pct&$f
Constant inlined printf_uint::uvalue#0 = main::pct
Constant inlined printf_uint::$2 = byte1 main::pct
Constant inlined printf_uint::$5 = byte0 main::pct>>4
Constant inlined printf_uint::$4 = byte0 main::pct
Constant inlined printf_uint::$7 = byte0 main::pct&$f
Constant inlined printf_uint::$6 = byte0 main::pct
Constant inlined printf_str::str#2 = main::str1
Constant inlined printf_str::str#1 = main::str
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(printf_hextab+byte1 main::pct&$f)
Consolidated array index constant in *(printf_hextab+byte0 main::pct>>4)
Consolidated array index constant in *(printf_hextab+byte0 main::pct&$f)
Successful SSA optimization Pass2ConstantAdditionElimination
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) 8
Finalized unsigned number type (char) $a
Finalized unsigned number type (char) $10
Successful SSA optimization PassNFinalizeNumberTypeConversions
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@3
CALL GRAPH
Calls in [main] to printf_str:1 printf_uint:3 printf_str:5 

Created 4 initial phi equivalence classes
Coalesced [4] screen#28 = screen#17
Coalesced [9] printf_str::str#6 = printf_str::str#5
Coalesced [10] screen#29 = screen#27
Coalesced [17] printf_str::str#7 = printf_str::str#0
Coalesced [18] screen#30 = screen#0
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@3
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call printf_str
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call printf_uint
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] phi()
  [5] call printf_str
  to:main::@return
main::@return: scope:[main]  from main::@2
  [6] return 
  to:@return

void printf_str(void (*putc)(char) , char *str)
printf_str: scope:[printf_str]  from main main::@2
  [7] screen#27 = phi( main/(char *) 1024, main::@2/screen#17 )
  [7] printf_str::str#5 = phi( main/main::str, main::@2/main::str1 )
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@2
  [8] screen#1 = phi( printf_str/screen#27, printf_str::@2/screen#0 )
  [8] printf_str::str#3 = phi( printf_str/printf_str::str#5, printf_str::@2/printf_str::str#0 )
  [9] if(0!=*printf_str::str#3) goto printf_str::@2
  to:printf_str::@return
printf_str::@return: scope:[printf_str]  from printf_str::@1
  [10] return 
  to:@return
printf_str::@2: scope:[printf_str]  from printf_str::@1
  [11] *screen#1 = *printf_str::str#3
  [12] screen#0 = ++ screen#1
  [13] printf_str::str#0 = ++ printf_str::str#3
  to:printf_str::@1

void printf_uint(void (*putc)(char) , unsigned int uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_uint: scope:[printf_uint]  from main::@1
  [14] *screen#1 = *printf_hextab
  [15] screen#2 = ++ screen#1
  [16] *screen#2 = *(printf_hextab+byte1 main::pct&$f)
  [17] screen#3 = ++ screen#2
  [18] *screen#3 = *(printf_hextab+byte0 main::pct>>4)
  [19] screen#4 = ++ screen#3
  [20] *screen#4 = *(printf_hextab+byte0 main::pct&$f)
  [21] screen#17 = ++ screen#4
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint
  [22] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
void printf_str(void (*putc)(char) , char *str)
void (*printf_str::putc)(char)
char *printf_str::str
char *printf_str::str#0 // 202.0
char *printf_str::str#3 // 103.75
char *printf_str::str#5 // 11.0
void printf_uint(void (*putc)(char) , unsigned int uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_format_number printf_uint::format
char printf_uint::format_justify_left
char printf_uint::format_min_length
char printf_uint::format_radix
char printf_uint::format_sign_always
char printf_uint::format_upper_case
char printf_uint::format_zero_padding
void (*printf_uint::putc)(char)
unsigned int printf_uint::uvalue
char *screen
char *screen#0 // 101.0
char *screen#1 // 48.0
char *screen#17 // 3.25
char *screen#2 // 16.5
char *screen#27 // 13.0
char *screen#3 // 16.5
char *screen#4 // 16.5

Initial phi equivalence classes
[ printf_str::str#3 printf_str::str#5 printf_str::str#0 ]
[ screen#1 screen#27 screen#17 screen#0 ]
Added variable screen#2 to live range equivalence class [ screen#2 ]
Added variable screen#3 to live range equivalence class [ screen#3 ]
Added variable screen#4 to live range equivalence class [ screen#4 ]
Complete equivalence classes
[ printf_str::str#3 printf_str::str#5 printf_str::str#0 ]
[ screen#1 screen#27 screen#17 screen#0 ]
[ screen#2 ]
[ screen#3 ]
[ screen#4 ]
Allocated zp[2]:2 [ printf_str::str#3 printf_str::str#5 printf_str::str#0 ]
Allocated zp[2]:4 [ screen#1 screen#27 screen#17 screen#0 ]
Allocated zp[2]:6 [ screen#2 ]
Allocated zp[2]:8 [ screen#3 ]
Allocated zp[2]:10 [ screen#4 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [9] if(0!=*printf_str::str#3) goto printf_str::@2 [ printf_str::str#3 screen#1 ] ( printf_str:1 [ printf_str::str#3 screen#1 ] { }  printf_str:5 [ printf_str::str#3 screen#1 ] { { screen#17 = screen#27 } }  ) always clobbers reg byte a reg byte y 
Statement [11] *screen#1 = *printf_str::str#3 [ printf_str::str#3 screen#1 ] ( printf_str:1 [ printf_str::str#3 screen#1 ] { }  printf_str:5 [ printf_str::str#3 screen#1 ] { { screen#17 = screen#27 } }  ) always clobbers reg byte a reg byte y 
Statement [14] *screen#1 = *printf_hextab [ screen#1 ] ( printf_uint:3 [ screen#1 ] { }  ) always clobbers reg byte a reg byte y 
Statement [15] screen#2 = ++ screen#1 [ screen#2 ] ( printf_uint:3 [ screen#2 ] { }  ) always clobbers reg byte a 
Statement [16] *screen#2 = *(printf_hextab+byte1 main::pct&$f) [ screen#2 ] ( printf_uint:3 [ screen#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [17] screen#3 = ++ screen#2 [ screen#3 ] ( printf_uint:3 [ screen#3 ] { }  ) always clobbers reg byte a 
Statement [18] *screen#3 = *(printf_hextab+byte0 main::pct>>4) [ screen#3 ] ( printf_uint:3 [ screen#3 ] { }  ) always clobbers reg byte a reg byte y 
Statement [19] screen#4 = ++ screen#3 [ screen#4 ] ( printf_uint:3 [ screen#4 ] { }  ) always clobbers reg byte a 
Statement [20] *screen#4 = *(printf_hextab+byte0 main::pct&$f) [ screen#4 ] ( printf_uint:3 [ screen#4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [21] screen#17 = ++ screen#4 [ screen#17 ] ( printf_uint:3 [ screen#17 ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ printf_str::str#3 printf_str::str#5 printf_str::str#0 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ screen#1 screen#27 screen#17 screen#0 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ screen#2 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ screen#3 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ screen#4 ] : zp[2]:10 , 

REGISTER UPLIFT SCOPES
Uplift Scope [printf_str] 316.75: zp[2]:2 [ printf_str::str#3 printf_str::str#5 printf_str::str#0 ] 
Uplift Scope [] 165.25: zp[2]:4 [ screen#1 screen#27 screen#17 screen#0 ] 16.5: zp[2]:6 [ screen#2 ] 16.5: zp[2]:8 [ screen#3 ] 16.5: zp[2]:10 [ screen#4 ] 
Uplift Scope [RADIX] 
Uplift Scope [printf_format_number] 
Uplift Scope [printf_uint] 
Uplift Scope [main] 

Uplifting [printf_str] best 813 combination zp[2]:2 [ printf_str::str#3 printf_str::str#5 printf_str::str#0 ] 
Uplifting [] best 813 combination zp[2]:4 [ screen#1 screen#27 screen#17 screen#0 ] zp[2]:6 [ screen#2 ] zp[2]:8 [ screen#3 ] zp[2]:10 [ screen#4 ] 
Uplifting [RADIX] best 813 combination 
Uplifting [printf_format_number] best 813 combination 
Uplifting [printf_uint] best 813 combination 
Uplifting [main] best 813 combination 
Coalescing zero page register [ zp[2]:4 [ screen#1 screen#27 screen#17 screen#0 ] ] with [ zp[2]:6 [ screen#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:4 [ screen#1 screen#27 screen#17 screen#0 screen#2 ] ] with [ zp[2]:10 [ screen#4 ] ] - score: 1
Coalescing zero page register [ zp[2]:4 [ screen#1 screen#27 screen#17 screen#0 screen#2 screen#4 ] ] with [ zp[2]:8 [ screen#3 ] ] - score: 2

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests printf function call rewriting
// A simple number - with the printf-sub funtions in the same file.
  // Upstart
  // Commodore 64 PRG executable file
.file [name="printf-11.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const STACK_BASE = $103
  .label screen = 4
.segment Code
  // main
main: {
    .label pct = $156
    // [1] call printf_str
    // [7] phi from main to printf_str [phi:main->printf_str]
  printf_str_from_main:
    // [7] phi screen#27 = (char *) 1024 [phi:main->printf_str#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [7] phi printf_str::str#5 = main::str [phi:main->printf_str#1] -- call_phi_near 
    lda #<str
    sta.z printf_str.str
    lda #>str
    sta.z printf_str.str+1
    jsr printf_str
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call printf_uint -- call_phi_near 
    jsr printf_uint
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [5] call printf_str
    // [7] phi from main::@2 to printf_str [phi:main::@2->printf_str]
  printf_str_from___b2:
    // [7] phi screen#27 = screen#17 [phi:main::@2->printf_str#0] -- register_copy 
    // [7] phi printf_str::str#5 = main::str1 [phi:main::@2->printf_str#1] -- call_phi_near 
    lda #<str1
    sta.z printf_str.str
    lda #>str1
    sta.z printf_str.str+1
    jsr printf_str
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
  .segment Data
    str: .text "Commodore is "
    .byte 0
    str1: .text " cool"
    .byte 0
}
.segment Code
  // printf_str
// void printf_str(void (*putc)(char), __zp(2) char *str)
printf_str: {
    .label str = 2
    // [8] phi from printf_str printf_str::@2 to printf_str::@1 [phi:printf_str/printf_str::@2->printf_str::@1]
  __b1_from_printf_str:
  __b1_from___b2:
    // [8] phi screen#1 = screen#27 [phi:printf_str/printf_str::@2->printf_str::@1#0] -- register_copy 
    // [8] phi printf_str::str#3 = printf_str::str#5 [phi:printf_str/printf_str::@2->printf_str::@1#1] -- register_copy 
    jmp __b1
    // printf_str::@1
  __b1:
    // [9] if(0!=*printf_str::str#3) goto printf_str::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // printf_str::@return
  __breturn:
    // [10] return 
    rts
    // printf_str::@2
  __b2:
    // [11] *screen#1 = *printf_str::str#3 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (screen),y
    // [12] screen#0 = ++ screen#1 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [13] printf_str::str#0 = ++ printf_str::str#3 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b2
}
  // printf_uint
// Print an unsigned int using a specific format
// Always prints hexadecimals - ignores min_length and flags
// void printf_uint(void (*putc)(char), unsigned int uvalue, char format_min_length, char format_justify_left, char format_sign_always, char format_zero_padding, char format_upper_case, char format_radix)
printf_uint: {
    // [14] *screen#1 = *printf_hextab -- _deref_pbuz1=_deref_pbuc1 
    lda printf_hextab
    ldy #0
    sta (screen),y
    // [15] screen#2 = ++ screen#1 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [16] *screen#2 = *(printf_hextab+byte1 main::pct&$f) -- _deref_pbuz1=_deref_pbuc1 
    lda printf_hextab+((>main.pct)&$f)
    ldy #0
    sta (screen),y
    // [17] screen#3 = ++ screen#2 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [18] *screen#3 = *(printf_hextab+byte0 main::pct>>4) -- _deref_pbuz1=_deref_pbuc1 
    lda printf_hextab+((<main.pct)>>4)
    ldy #0
    sta (screen),y
    // [19] screen#4 = ++ screen#3 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [20] *screen#4 = *(printf_hextab+byte0 main::pct&$f) -- _deref_pbuz1=_deref_pbuc1 
    lda printf_hextab+((<main.pct)&$f)
    ldy #0
    sta (screen),y
    // [21] screen#17 = ++ screen#4 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    jmp __breturn
    // printf_uint::@return
  __breturn:
    // [22] return 
    rts
}
  // File Data
.segment Data
  printf_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from_main:
Removing instruction __b2_from___b1:
Removing instruction printf_str_from___b2:
Removing instruction __b1_from_printf_str:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction printf_str_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant unsigned int STACK_BASE = $103
void main()
__constant unsigned int main::pct = $156
__constant char main::str[$e] = "Commodore is "
__constant char main::str1[6] = " cool"
__constant const char printf_hextab[] = "0123456789abcdef"z
void printf_str(void (*putc)(char) , char *str)
void (*printf_str::putc)(char)
char *printf_str::str
char *printf_str::str#0 // str zp[2]:2 202.0
char *printf_str::str#3 // str zp[2]:2 103.75
char *printf_str::str#5 // str zp[2]:2 11.0
void printf_uint(void (*putc)(char) , unsigned int uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_format_number printf_uint::format
char printf_uint::format_justify_left
char printf_uint::format_min_length
char printf_uint::format_radix
char printf_uint::format_sign_always
char printf_uint::format_upper_case
char printf_uint::format_zero_padding
void (*printf_uint::putc)(char)
unsigned int printf_uint::uvalue
char *screen
char *screen#0 // screen zp[2]:4 101.0
char *screen#1 // screen zp[2]:4 48.0
char *screen#17 // screen zp[2]:4 3.25
char *screen#2 // screen zp[2]:4 16.5
char *screen#27 // screen zp[2]:4 13.0
char *screen#3 // screen zp[2]:4 16.5
char *screen#4 // screen zp[2]:4 16.5

zp[2]:2 [ printf_str::str#3 printf_str::str#5 printf_str::str#0 ]
zp[2]:4 [ screen#1 screen#27 screen#17 screen#0 screen#2 screen#4 screen#3 ]


FINAL ASSEMBLER
Score: 697

  // File Comments
// Tests printf function call rewriting
// A simple number - with the printf-sub funtions in the same file.
  // Upstart
  // Commodore 64 PRG executable file
.file [name="printf-11.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const STACK_BASE = $103
  .label screen = 4
.segment Code
  // main
main: {
    .label pct = $156
    // printf("Commodore is %x cool", pct)
    // [1] call printf_str
    // [7] phi from main to printf_str [phi:main->printf_str]
    // [7] phi screen#27 = (char *) 1024 [phi:main->printf_str#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [7] phi printf_str::str#5 = main::str [phi:main->printf_str#1] -- call_phi_near 
    lda #<str
    sta.z printf_str.str
    lda #>str
    sta.z printf_str.str+1
    jsr printf_str
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // printf("Commodore is %x cool", pct)
    // [3] call printf_uint -- call_phi_near 
    jsr printf_uint
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // printf("Commodore is %x cool", pct)
    // [5] call printf_str
    // [7] phi from main::@2 to printf_str [phi:main::@2->printf_str]
    // [7] phi screen#27 = screen#17 [phi:main::@2->printf_str#0] -- register_copy 
    // [7] phi printf_str::str#5 = main::str1 [phi:main::@2->printf_str#1] -- call_phi_near 
    lda #<str1
    sta.z printf_str.str
    lda #>str1
    sta.z printf_str.str+1
    jsr printf_str
    // main::@return
    // }
    // [6] return 
    rts
  .segment Data
    str: .text "Commodore is "
    .byte 0
    str1: .text " cool"
    .byte 0
}
.segment Code
  // printf_str
// void printf_str(void (*putc)(char), __zp(2) char *str)
printf_str: {
    .label str = 2
    // [8] phi from printf_str printf_str::@2 to printf_str::@1 [phi:printf_str/printf_str::@2->printf_str::@1]
    // [8] phi screen#1 = screen#27 [phi:printf_str/printf_str::@2->printf_str::@1#0] -- register_copy 
    // [8] phi printf_str::str#3 = printf_str::str#5 [phi:printf_str/printf_str::@2->printf_str::@1#1] -- register_copy 
    // printf_str::@1
  __b1:
    // while(*str)
    // [9] if(0!=*printf_str::str#3) goto printf_str::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // printf_str::@return
    // }
    // [10] return 
    rts
    // printf_str::@2
  __b2:
    // *screen++ = *str++
    // [11] *screen#1 = *printf_str::str#3 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (screen),y
    // *screen++ = *str++;
    // [12] screen#0 = ++ screen#1 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [13] printf_str::str#0 = ++ printf_str::str#3 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1
}
  // printf_uint
// Print an unsigned int using a specific format
// Always prints hexadecimals - ignores min_length and flags
// void printf_uint(void (*putc)(char), unsigned int uvalue, char format_min_length, char format_justify_left, char format_sign_always, char format_zero_padding, char format_upper_case, char format_radix)
printf_uint: {
    // *screen++ = printf_hextab[BYTE1(uvalue)>>4]
    // [14] *screen#1 = *printf_hextab -- _deref_pbuz1=_deref_pbuc1 
    lda printf_hextab
    ldy #0
    sta (screen),y
    // *screen++ = printf_hextab[BYTE1(uvalue)>>4];
    // [15] screen#2 = ++ screen#1 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // *screen++ = printf_hextab[BYTE1(uvalue)&0xf]
    // [16] *screen#2 = *(printf_hextab+byte1 main::pct&$f) -- _deref_pbuz1=_deref_pbuc1 
    lda printf_hextab+((>main.pct)&$f)
    ldy #0
    sta (screen),y
    // *screen++ = printf_hextab[BYTE1(uvalue)&0xf];
    // [17] screen#3 = ++ screen#2 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // *screen++ = printf_hextab[BYTE0(uvalue)>>4]
    // [18] *screen#3 = *(printf_hextab+byte0 main::pct>>4) -- _deref_pbuz1=_deref_pbuc1 
    lda printf_hextab+((<main.pct)>>4)
    ldy #0
    sta (screen),y
    // *screen++ = printf_hextab[BYTE0(uvalue)>>4];
    // [19] screen#4 = ++ screen#3 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // *screen++ = printf_hextab[BYTE0(uvalue)&0xf]
    // [20] *screen#4 = *(printf_hextab+byte0 main::pct&$f) -- _deref_pbuz1=_deref_pbuc1 
    lda printf_hextab+((<main.pct)&$f)
    ldy #0
    sta (screen),y
    // *screen++ = printf_hextab[BYTE0(uvalue)&0xf];
    // [21] screen#17 = ++ screen#4 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // printf_uint::@return
    // }
    // [22] return 
    rts
}
  // File Data
.segment Data
  printf_hextab: .text "0123456789abcdef"

