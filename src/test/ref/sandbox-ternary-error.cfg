@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@2
main::@2: scope:[main]  from main main::@1
  [5] (byte) main::b#11 ← phi( main::@1/(byte) main::b#1 main/(byte) 0 )
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@6
  [6] (byte) main::b#10 ← phi( main::@2/(byte) main::b#11 main::@6/(byte) main::b#1 )
  [6] (byte~) main::$7 ← phi( main::@2/(byte) 'a' main::@6/(byte~) main::$5 )
  [7] *((const byte*) main::SCREEN#0) ← (byte~) main::$7
  [8] (byte) main::b#1 ← ++ (byte) main::b#10
  [9] if((byte) main::b#1!=(byte) 3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  [10] return 
  to:@return
main::@1: scope:[main]  from main::@4
  [11] if((byte) main::b#1==(byte) 0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [12] if((byte) main::b#1==(byte) 1) goto main::@5
  to:main::@6
main::@5: scope:[main]  from main::@3
  [13] phi()
  to:main::@6
main::@6: scope:[main]  from main::@3 main::@5
  [14] (byte~) main::$5 ← phi( main::@5/(byte) 'b' main::@3/(byte) 'c' )
  to:main::@4
