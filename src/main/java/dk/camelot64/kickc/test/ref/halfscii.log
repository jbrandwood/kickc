byte* SCREEN = $0400;
byte* CHARSET = $2000;
byte* CHARGEN = $D000;
byte* PROCPORT = $01;
byte* D018 = $d018;
byte* CHARSET4 = $2800;

byte[] bits_count = { 0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4 };

void main() {
    asm { sei }
    *PROCPORT = $32;
    byte* chargen = CHARGEN;
    byte* charset4 = CHARSET4;
    do {
        byte bits_gen = 0;
        byte* chargen1 = chargen+1;
        byte bits = bits_count[((*chargen & %01100000) | (*chargen1 & %01100000)>>2)>>1>>2];
        if(bits>=2) { bits_gen = bits_gen + 1; }
        bits_gen = bits_gen<<1;
        bits = bits_count[((*chargen & %00011000) | (*chargen1 & %00011000)>>2)>>1];
        if(bits>=2) { bits_gen = bits_gen + 1; }
        bits_gen = bits_gen<<1;
        bits = bits_count[((*chargen & %00000110)<<1 | (*chargen1 & %00000110)>>1)];
        if(bits>=2) { bits_gen = bits_gen + 1; }
        bits_gen = bits_gen<<1;
        bits = bits_count[((*chargen & %00000001)<<2 | (*chargen1 & %00000001))];
        if(bits>=2) { bits_gen = bits_gen + 1; }
        bits_gen = bits_gen<<1;
        *charset4 = bits_gen;
        charset4++;
        chargen = chargen+2;
    } while (chargen<CHARGEN+$800);
    *PROCPORT = $37;
    asm { cli }
    for(byte i : 0..255) {
        SCREEN[i] = i;
    }
    *D018 = $19;
}



Adding pre/post-modifier (byte*) main::charset4 ← ++ (byte*) main::charset4
PROGRAM
  (byte*) SCREEN ← (word) 1024
  (byte*) CHARSET ← (word) 8192
  (byte*) CHARGEN ← (word) 53248
  (byte*) PROCPORT ← (byte) 1
  (byte*) D018 ← (word) 53272
  (byte*) CHARSET4 ← (word) 10240
  (byte[]) bits_count ← { (byte) 0, (byte) 1, (byte) 1, (byte) 2, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 2, (byte) 3, (byte) 3, (byte) 4 }
proc (void()) main()
  asm { sei }
  *((byte*) PROCPORT) ← (byte) 50
  (byte*) main::chargen ← (byte*) CHARGEN
  (byte*) main::charset4 ← (byte*) CHARSET4
main::@1:
  (byte) main::bits_gen ← (byte) 0
  (byte*~) main::$0 ← (byte*) main::chargen + (byte) 1
  (byte*) main::chargen1 ← (byte*~) main::$0
  (byte~) main::$1 ← *((byte*) main::chargen) & (byte) 96
  (byte~) main::$2 ← *((byte*) main::chargen1) & (byte) 96
  (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2
  (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3
  (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1
  (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2
  (byte~) main::$7 ← (byte[]) bits_count *idx (byte~) main::$6
  (byte) main::bits ← (byte~) main::$7
  (boolean~) main::$8 ← (byte) main::bits >= (byte) 2
  (boolean~) main::$9 ← ! (boolean~) main::$8
  if((boolean~) main::$9) goto main::@2
  (byte~) main::$10 ← (byte) main::bits_gen + (byte) 1
  (byte) main::bits_gen ← (byte~) main::$10
main::@2:
  (byte~) main::$11 ← (byte) main::bits_gen << (byte) 1
  (byte) main::bits_gen ← (byte~) main::$11
  (byte~) main::$12 ← *((byte*) main::chargen) & (byte) 24
  (byte~) main::$13 ← *((byte*) main::chargen1) & (byte) 24
  (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2
  (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14
  (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1
  (byte~) main::$17 ← (byte[]) bits_count *idx (byte~) main::$16
  (byte) main::bits ← (byte~) main::$17
  (boolean~) main::$18 ← (byte) main::bits >= (byte) 2
  (boolean~) main::$19 ← ! (boolean~) main::$18
  if((boolean~) main::$19) goto main::@3
  (byte~) main::$20 ← (byte) main::bits_gen + (byte) 1
  (byte) main::bits_gen ← (byte~) main::$20
main::@3:
  (byte~) main::$21 ← (byte) main::bits_gen << (byte) 1
  (byte) main::bits_gen ← (byte~) main::$21
  (byte~) main::$22 ← *((byte*) main::chargen) & (byte) 6
  (byte~) main::$23 ← (byte~) main::$22 << (byte) 1
  (byte~) main::$24 ← *((byte*) main::chargen1) & (byte) 6
  (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1
  (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25
  (byte~) main::$27 ← (byte[]) bits_count *idx (byte~) main::$26
  (byte) main::bits ← (byte~) main::$27
  (boolean~) main::$28 ← (byte) main::bits >= (byte) 2
  (boolean~) main::$29 ← ! (boolean~) main::$28
  if((boolean~) main::$29) goto main::@4
  (byte~) main::$30 ← (byte) main::bits_gen + (byte) 1
  (byte) main::bits_gen ← (byte~) main::$30
main::@4:
  (byte~) main::$31 ← (byte) main::bits_gen << (byte) 1
  (byte) main::bits_gen ← (byte~) main::$31
  (byte~) main::$32 ← *((byte*) main::chargen) & (byte) 1
  (byte~) main::$33 ← (byte~) main::$32 << (byte) 2
  (byte~) main::$34 ← *((byte*) main::chargen1) & (byte) 1
  (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34
  (byte~) main::$36 ← (byte[]) bits_count *idx (byte~) main::$35
  (byte) main::bits ← (byte~) main::$36
  (boolean~) main::$37 ← (byte) main::bits >= (byte) 2
  (boolean~) main::$38 ← ! (boolean~) main::$37
  if((boolean~) main::$38) goto main::@5
  (byte~) main::$39 ← (byte) main::bits_gen + (byte) 1
  (byte) main::bits_gen ← (byte~) main::$39
main::@5:
  (byte~) main::$40 ← (byte) main::bits_gen << (byte) 1
  (byte) main::bits_gen ← (byte~) main::$40
  *((byte*) main::charset4) ← (byte) main::bits_gen
  (byte*) main::charset4 ← ++ (byte*) main::charset4
  (byte*~) main::$41 ← (byte*) main::chargen + (byte) 2
  (byte*) main::chargen ← (byte*~) main::$41
  (byte*~) main::$42 ← (byte*) CHARGEN + (word) 2048
  (boolean~) main::$43 ← (byte*) main::chargen < (byte*~) main::$42
  if((boolean~) main::$43) goto main::@1
  *((byte*) PROCPORT) ← (byte) 55
  asm { cli }
  (byte) main::i ← (byte) 0
main::@6:
  *((byte*) SCREEN + (byte) main::i) ← (byte) main::i
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$44 ← (byte) main::i != (byte) 0
  if((boolean~) main::$44) goto main::@6
  *((byte*) D018) ← (byte) 25
main::@return:
  return 
endproc // main()
  call main 

SYMBOLS
(byte*) CHARGEN
(byte*) CHARSET
(byte*) CHARSET4
(byte*) D018
(byte*) PROCPORT
(byte*) SCREEN
(byte[]) bits_count
(void()) main()
(byte*~) main::$0
(byte~) main::$1
(byte~) main::$10
(byte~) main::$11
(byte~) main::$12
(byte~) main::$13
(byte~) main::$14
(byte~) main::$15
(byte~) main::$16
(byte~) main::$17
(boolean~) main::$18
(boolean~) main::$19
(byte~) main::$2
(byte~) main::$20
(byte~) main::$21
(byte~) main::$22
(byte~) main::$23
(byte~) main::$24
(byte~) main::$25
(byte~) main::$26
(byte~) main::$27
(boolean~) main::$28
(boolean~) main::$29
(byte~) main::$3
(byte~) main::$30
(byte~) main::$31
(byte~) main::$32
(byte~) main::$33
(byte~) main::$34
(byte~) main::$35
(byte~) main::$36
(boolean~) main::$37
(boolean~) main::$38
(byte~) main::$39
(byte~) main::$4
(byte~) main::$40
(byte*~) main::$41
(byte*~) main::$42
(boolean~) main::$43
(boolean~) main::$44
(byte~) main::$5
(byte~) main::$6
(byte~) main::$7
(boolean~) main::$8
(boolean~) main::$9
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(byte) main::bits
(byte) main::bits_gen
(byte*) main::chargen
(byte*) main::chargen1
(byte*) main::charset4
(byte) main::i

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  (byte*) CHARSET ← (word) 8192
  (byte*) CHARGEN ← (word) 53248
  (byte*) PROCPORT ← (byte) 1
  (byte*) D018 ← (word) 53272
  (byte*) CHARSET4 ← (word) 10240
  (byte[]) bits_count ← { (byte) 0, (byte) 1, (byte) 1, (byte) 2, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 2, (byte) 3, (byte) 3, (byte) 4 }
  to:@1
main: scope:[main]  from
  asm { sei }
  *((byte*) PROCPORT) ← (byte) 50
  (byte*) main::chargen ← (byte*) CHARGEN
  (byte*) main::charset4 ← (byte*) CHARSET4
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::bits_gen ← (byte) 0
  (byte*~) main::$0 ← (byte*) main::chargen + (byte) 1
  (byte*) main::chargen1 ← (byte*~) main::$0
  (byte~) main::$1 ← *((byte*) main::chargen) & (byte) 96
  (byte~) main::$2 ← *((byte*) main::chargen1) & (byte) 96
  (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2
  (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3
  (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1
  (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2
  (byte~) main::$7 ← (byte[]) bits_count *idx (byte~) main::$6
  (byte) main::bits ← (byte~) main::$7
  (boolean~) main::$8 ← (byte) main::bits >= (byte) 2
  (boolean~) main::$9 ← ! (boolean~) main::$8
  if((boolean~) main::$9) goto main::@2
  to:main::@7
main::@2: scope:[main]  from main::@1 main::@7
  (byte~) main::$11 ← (byte) main::bits_gen << (byte) 1
  (byte) main::bits_gen ← (byte~) main::$11
  (byte~) main::$12 ← *((byte*) main::chargen) & (byte) 24
  (byte~) main::$13 ← *((byte*) main::chargen1) & (byte) 24
  (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2
  (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14
  (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1
  (byte~) main::$17 ← (byte[]) bits_count *idx (byte~) main::$16
  (byte) main::bits ← (byte~) main::$17
  (boolean~) main::$18 ← (byte) main::bits >= (byte) 2
  (boolean~) main::$19 ← ! (boolean~) main::$18
  if((boolean~) main::$19) goto main::@3
  to:main::@8
main::@7: scope:[main]  from main::@1
  (byte~) main::$10 ← (byte) main::bits_gen + (byte) 1
  (byte) main::bits_gen ← (byte~) main::$10
  to:main::@2
main::@3: scope:[main]  from main::@2 main::@8
  (byte~) main::$21 ← (byte) main::bits_gen << (byte) 1
  (byte) main::bits_gen ← (byte~) main::$21
  (byte~) main::$22 ← *((byte*) main::chargen) & (byte) 6
  (byte~) main::$23 ← (byte~) main::$22 << (byte) 1
  (byte~) main::$24 ← *((byte*) main::chargen1) & (byte) 6
  (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1
  (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25
  (byte~) main::$27 ← (byte[]) bits_count *idx (byte~) main::$26
  (byte) main::bits ← (byte~) main::$27
  (boolean~) main::$28 ← (byte) main::bits >= (byte) 2
  (boolean~) main::$29 ← ! (boolean~) main::$28
  if((boolean~) main::$29) goto main::@4
  to:main::@9
main::@8: scope:[main]  from main::@2
  (byte~) main::$20 ← (byte) main::bits_gen + (byte) 1
  (byte) main::bits_gen ← (byte~) main::$20
  to:main::@3
main::@4: scope:[main]  from main::@3 main::@9
  (byte~) main::$31 ← (byte) main::bits_gen << (byte) 1
  (byte) main::bits_gen ← (byte~) main::$31
  (byte~) main::$32 ← *((byte*) main::chargen) & (byte) 1
  (byte~) main::$33 ← (byte~) main::$32 << (byte) 2
  (byte~) main::$34 ← *((byte*) main::chargen1) & (byte) 1
  (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34
  (byte~) main::$36 ← (byte[]) bits_count *idx (byte~) main::$35
  (byte) main::bits ← (byte~) main::$36
  (boolean~) main::$37 ← (byte) main::bits >= (byte) 2
  (boolean~) main::$38 ← ! (boolean~) main::$37
  if((boolean~) main::$38) goto main::@5
  to:main::@10
main::@9: scope:[main]  from main::@3
  (byte~) main::$30 ← (byte) main::bits_gen + (byte) 1
  (byte) main::bits_gen ← (byte~) main::$30
  to:main::@4
main::@5: scope:[main]  from main::@10 main::@4
  (byte~) main::$40 ← (byte) main::bits_gen << (byte) 1
  (byte) main::bits_gen ← (byte~) main::$40
  *((byte*) main::charset4) ← (byte) main::bits_gen
  (byte*) main::charset4 ← ++ (byte*) main::charset4
  (byte*~) main::$41 ← (byte*) main::chargen + (byte) 2
  (byte*) main::chargen ← (byte*~) main::$41
  (byte*~) main::$42 ← (byte*) CHARGEN + (word) 2048
  (boolean~) main::$43 ← (byte*) main::chargen < (byte*~) main::$42
  if((boolean~) main::$43) goto main::@1
  to:main::@11
main::@10: scope:[main]  from main::@4
  (byte~) main::$39 ← (byte) main::bits_gen + (byte) 1
  (byte) main::bits_gen ← (byte~) main::$39
  to:main::@5
main::@11: scope:[main]  from main::@5
  *((byte*) PROCPORT) ← (byte) 55
  asm { cli }
  (byte) main::i ← (byte) 0
  to:main::@6
main::@6: scope:[main]  from main::@11 main::@6
  *((byte*) SCREEN + (byte) main::i) ← (byte) main::i
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$44 ← (byte) main::i != (byte) 0
  if((boolean~) main::$44) goto main::@6
  to:main::@12
main::@12: scope:[main]  from main::@6
  *((byte*) D018) ← (byte) 25
  to:main::@return
main::@return: scope:[main]  from main::@12
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  (byte*) CHARSET ← (word) 8192
  (byte*) CHARGEN ← (word) 53248
  (byte*) PROCPORT ← (byte) 1
  (byte*) D018 ← (word) 53272
  (byte*) CHARSET4 ← (word) 10240
  (byte[]) bits_count ← { (byte) 0, (byte) 1, (byte) 1, (byte) 2, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 2, (byte) 3, (byte) 3, (byte) 4 }
  to:@1
main: scope:[main]  from @1
  asm { sei }
  *((byte*) PROCPORT) ← (byte) 50
  (byte*) main::chargen ← (byte*) CHARGEN
  (byte*) main::charset4 ← (byte*) CHARSET4
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::bits_gen ← (byte) 0
  (byte*~) main::$0 ← (byte*) main::chargen + (byte) 1
  (byte*) main::chargen1 ← (byte*~) main::$0
  (byte~) main::$1 ← *((byte*) main::chargen) & (byte) 96
  (byte~) main::$2 ← *((byte*) main::chargen1) & (byte) 96
  (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2
  (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3
  (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1
  (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2
  (byte~) main::$7 ← (byte[]) bits_count *idx (byte~) main::$6
  (byte) main::bits ← (byte~) main::$7
  (boolean~) main::$8 ← (byte) main::bits >= (byte) 2
  (boolean~) main::$9 ← ! (boolean~) main::$8
  if((boolean~) main::$9) goto main::@2
  to:main::@7
main::@2: scope:[main]  from main::@1 main::@7
  (byte~) main::$11 ← (byte) main::bits_gen << (byte) 1
  (byte) main::bits_gen ← (byte~) main::$11
  (byte~) main::$12 ← *((byte*) main::chargen) & (byte) 24
  (byte~) main::$13 ← *((byte*) main::chargen1) & (byte) 24
  (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2
  (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14
  (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1
  (byte~) main::$17 ← (byte[]) bits_count *idx (byte~) main::$16
  (byte) main::bits ← (byte~) main::$17
  (boolean~) main::$18 ← (byte) main::bits >= (byte) 2
  (boolean~) main::$19 ← ! (boolean~) main::$18
  if((boolean~) main::$19) goto main::@3
  to:main::@8
main::@7: scope:[main]  from main::@1
  (byte~) main::$10 ← (byte) main::bits_gen + (byte) 1
  (byte) main::bits_gen ← (byte~) main::$10
  to:main::@2
main::@3: scope:[main]  from main::@2 main::@8
  (byte~) main::$21 ← (byte) main::bits_gen << (byte) 1
  (byte) main::bits_gen ← (byte~) main::$21
  (byte~) main::$22 ← *((byte*) main::chargen) & (byte) 6
  (byte~) main::$23 ← (byte~) main::$22 << (byte) 1
  (byte~) main::$24 ← *((byte*) main::chargen1) & (byte) 6
  (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1
  (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25
  (byte~) main::$27 ← (byte[]) bits_count *idx (byte~) main::$26
  (byte) main::bits ← (byte~) main::$27
  (boolean~) main::$28 ← (byte) main::bits >= (byte) 2
  (boolean~) main::$29 ← ! (boolean~) main::$28
  if((boolean~) main::$29) goto main::@4
  to:main::@9
main::@8: scope:[main]  from main::@2
  (byte~) main::$20 ← (byte) main::bits_gen + (byte) 1
  (byte) main::bits_gen ← (byte~) main::$20
  to:main::@3
main::@4: scope:[main]  from main::@3 main::@9
  (byte~) main::$31 ← (byte) main::bits_gen << (byte) 1
  (byte) main::bits_gen ← (byte~) main::$31
  (byte~) main::$32 ← *((byte*) main::chargen) & (byte) 1
  (byte~) main::$33 ← (byte~) main::$32 << (byte) 2
  (byte~) main::$34 ← *((byte*) main::chargen1) & (byte) 1
  (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34
  (byte~) main::$36 ← (byte[]) bits_count *idx (byte~) main::$35
  (byte) main::bits ← (byte~) main::$36
  (boolean~) main::$37 ← (byte) main::bits >= (byte) 2
  (boolean~) main::$38 ← ! (boolean~) main::$37
  if((boolean~) main::$38) goto main::@5
  to:main::@10
main::@9: scope:[main]  from main::@3
  (byte~) main::$30 ← (byte) main::bits_gen + (byte) 1
  (byte) main::bits_gen ← (byte~) main::$30
  to:main::@4
main::@5: scope:[main]  from main::@10 main::@4
  (byte~) main::$40 ← (byte) main::bits_gen << (byte) 1
  (byte) main::bits_gen ← (byte~) main::$40
  *((byte*) main::charset4) ← (byte) main::bits_gen
  (byte*) main::charset4 ← ++ (byte*) main::charset4
  (byte*~) main::$41 ← (byte*) main::chargen + (byte) 2
  (byte*) main::chargen ← (byte*~) main::$41
  (byte*~) main::$42 ← (byte*) CHARGEN + (word) 2048
  (boolean~) main::$43 ← (byte*) main::chargen < (byte*~) main::$42
  if((boolean~) main::$43) goto main::@1
  to:main::@11
main::@10: scope:[main]  from main::@4
  (byte~) main::$39 ← (byte) main::bits_gen + (byte) 1
  (byte) main::bits_gen ← (byte~) main::$39
  to:main::@5
main::@11: scope:[main]  from main::@5
  *((byte*) PROCPORT) ← (byte) 55
  asm { cli }
  (byte) main::i ← (byte) 0
  to:main::@6
main::@6: scope:[main]  from main::@11 main::@6
  *((byte*) SCREEN + (byte) main::i) ← (byte) main::i
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$44 ← (byte) main::i != (byte) 0
  if((boolean~) main::$44) goto main::@6
  to:main::@12
main::@12: scope:[main]  from main::@6
  *((byte*) D018) ← (byte) 25
  to:main::@return
main::@return: scope:[main]  from main::@12
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) CHARSET#0 ← (word) 8192
  (byte*) CHARGEN#0 ← (word) 53248
  (byte*) PROCPORT#0 ← (byte) 1
  (byte*) D018#0 ← (word) 53272
  (byte*) CHARSET4#0 ← (word) 10240
  (byte[]) bits_count#0 ← { (byte) 0, (byte) 1, (byte) 1, (byte) 2, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 2, (byte) 3, (byte) 3, (byte) 4 }
  to:@1
main: scope:[main]  from @1
  (byte*) D018#13 ← phi( @1/(byte*) D018#14 )
  (byte*) SCREEN#12 ← phi( @1/(byte*) SCREEN#13 )
  (byte[]) bits_count#5 ← phi( @1/(byte[]) bits_count#10 )
  (byte*) CHARSET4#1 ← phi( @1/(byte*) CHARSET4#2 )
  (byte*) CHARGEN#1 ← phi( @1/(byte*) CHARGEN#3 )
  (byte*) PROCPORT#1 ← phi( @1/(byte*) PROCPORT#3 )
  asm { sei }
  *((byte*) PROCPORT#1) ← (byte) 50
  (byte*) main::chargen#0 ← (byte*) CHARGEN#1
  (byte*) main::charset4#0 ← (byte*) CHARSET4#1
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte*) D018#11 ← phi( main/(byte*) D018#13 main::@5/(byte*) D018#4 )
  (byte*) SCREEN#10 ← phi( main/(byte*) SCREEN#12 main::@5/(byte*) SCREEN#3 )
  (byte*) PROCPORT#11 ← phi( main/(byte*) PROCPORT#1 main::@5/(byte*) PROCPORT#4 )
  (byte*) CHARGEN#10 ← phi( main/(byte*) CHARGEN#1 main::@5/(byte*) CHARGEN#2 )
  (byte*) main::charset4#9 ← phi( main/(byte*) main::charset4#0 main::@5/(byte*) main::charset4#1 )
  (byte[]) bits_count#1 ← phi( main/(byte[]) bits_count#5 main::@5/(byte[]) bits_count#6 )
  (byte*) main::chargen#2 ← phi( main/(byte*) main::chargen#0 main::@5/(byte*) main::chargen#1 )
  (byte) main::bits_gen#0 ← (byte) 0
  (byte*~) main::$0 ← (byte*) main::chargen#2 + (byte) 1
  (byte*) main::chargen1#0 ← (byte*~) main::$0
  (byte~) main::$1 ← *((byte*) main::chargen#2) & (byte) 96
  (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96
  (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2
  (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3
  (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1
  (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2
  (byte~) main::$7 ← (byte[]) bits_count#1 *idx (byte~) main::$6
  (byte) main::bits#0 ← (byte~) main::$7
  (boolean~) main::$8 ← (byte) main::bits#0 >= (byte) 2
  (boolean~) main::$9 ← ! (boolean~) main::$8
  if((boolean~) main::$9) goto main::@2
  to:main::@7
main::@2: scope:[main]  from main::@1 main::@7
  (byte*) D018#9 ← phi( main::@1/(byte*) D018#11 main::@7/(byte*) D018#12 )
  (byte*) SCREEN#8 ← phi( main::@1/(byte*) SCREEN#10 main::@7/(byte*) SCREEN#11 )
  (byte*) PROCPORT#9 ← phi( main::@1/(byte*) PROCPORT#11 main::@7/(byte*) PROCPORT#12 )
  (byte*) CHARGEN#8 ← phi( main::@1/(byte*) CHARGEN#10 main::@7/(byte*) CHARGEN#11 )
  (byte*) main::charset4#7 ← phi( main::@1/(byte*) main::charset4#9 main::@7/(byte*) main::charset4#10 )
  (byte[]) bits_count#2 ← phi( main::@1/(byte[]) bits_count#1 main::@7/(byte[]) bits_count#7 )
  (byte*) main::chargen1#1 ← phi( main::@1/(byte*) main::chargen1#0 main::@7/(byte*) main::chargen1#4 )
  (byte*) main::chargen#3 ← phi( main::@1/(byte*) main::chargen#2 main::@7/(byte*) main::chargen#7 )
  (byte) main::bits_gen#9 ← phi( main::@1/(byte) main::bits_gen#0 main::@7/(byte) main::bits_gen#2 )
  (byte~) main::$11 ← (byte) main::bits_gen#9 << (byte) 1
  (byte) main::bits_gen#1 ← (byte~) main::$11
  (byte~) main::$12 ← *((byte*) main::chargen#3) & (byte) 24
  (byte~) main::$13 ← *((byte*) main::chargen1#1) & (byte) 24
  (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2
  (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14
  (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1
  (byte~) main::$17 ← (byte[]) bits_count#2 *idx (byte~) main::$16
  (byte) main::bits#1 ← (byte~) main::$17
  (boolean~) main::$18 ← (byte) main::bits#1 >= (byte) 2
  (boolean~) main::$19 ← ! (boolean~) main::$18
  if((boolean~) main::$19) goto main::@3
  to:main::@8
main::@7: scope:[main]  from main::@1
  (byte*) D018#12 ← phi( main::@1/(byte*) D018#11 )
  (byte*) SCREEN#11 ← phi( main::@1/(byte*) SCREEN#10 )
  (byte*) PROCPORT#12 ← phi( main::@1/(byte*) PROCPORT#11 )
  (byte*) CHARGEN#11 ← phi( main::@1/(byte*) CHARGEN#10 )
  (byte*) main::charset4#10 ← phi( main::@1/(byte*) main::charset4#9 )
  (byte[]) bits_count#7 ← phi( main::@1/(byte[]) bits_count#1 )
  (byte*) main::chargen1#4 ← phi( main::@1/(byte*) main::chargen1#0 )
  (byte*) main::chargen#7 ← phi( main::@1/(byte*) main::chargen#2 )
  (byte) main::bits_gen#10 ← phi( main::@1/(byte) main::bits_gen#0 )
  (byte~) main::$10 ← (byte) main::bits_gen#10 + (byte) 1
  (byte) main::bits_gen#2 ← (byte~) main::$10
  to:main::@2
main::@3: scope:[main]  from main::@2 main::@8
  (byte*) D018#7 ← phi( main::@2/(byte*) D018#9 main::@8/(byte*) D018#10 )
  (byte*) SCREEN#6 ← phi( main::@2/(byte*) SCREEN#8 main::@8/(byte*) SCREEN#9 )
  (byte*) PROCPORT#7 ← phi( main::@2/(byte*) PROCPORT#9 main::@8/(byte*) PROCPORT#10 )
  (byte*) CHARGEN#6 ← phi( main::@2/(byte*) CHARGEN#8 main::@8/(byte*) CHARGEN#9 )
  (byte*) main::charset4#5 ← phi( main::@2/(byte*) main::charset4#7 main::@8/(byte*) main::charset4#8 )
  (byte[]) bits_count#3 ← phi( main::@2/(byte[]) bits_count#2 main::@8/(byte[]) bits_count#8 )
  (byte*) main::chargen1#2 ← phi( main::@2/(byte*) main::chargen1#1 main::@8/(byte*) main::chargen1#5 )
  (byte*) main::chargen#4 ← phi( main::@2/(byte*) main::chargen#3 main::@8/(byte*) main::chargen#8 )
  (byte) main::bits_gen#11 ← phi( main::@2/(byte) main::bits_gen#1 main::@8/(byte) main::bits_gen#4 )
  (byte~) main::$21 ← (byte) main::bits_gen#11 << (byte) 1
  (byte) main::bits_gen#3 ← (byte~) main::$21
  (byte~) main::$22 ← *((byte*) main::chargen#4) & (byte) 6
  (byte~) main::$23 ← (byte~) main::$22 << (byte) 1
  (byte~) main::$24 ← *((byte*) main::chargen1#2) & (byte) 6
  (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1
  (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25
  (byte~) main::$27 ← (byte[]) bits_count#3 *idx (byte~) main::$26
  (byte) main::bits#2 ← (byte~) main::$27
  (boolean~) main::$28 ← (byte) main::bits#2 >= (byte) 2
  (boolean~) main::$29 ← ! (boolean~) main::$28
  if((boolean~) main::$29) goto main::@4
  to:main::@9
main::@8: scope:[main]  from main::@2
  (byte*) D018#10 ← phi( main::@2/(byte*) D018#9 )
  (byte*) SCREEN#9 ← phi( main::@2/(byte*) SCREEN#8 )
  (byte*) PROCPORT#10 ← phi( main::@2/(byte*) PROCPORT#9 )
  (byte*) CHARGEN#9 ← phi( main::@2/(byte*) CHARGEN#8 )
  (byte*) main::charset4#8 ← phi( main::@2/(byte*) main::charset4#7 )
  (byte[]) bits_count#8 ← phi( main::@2/(byte[]) bits_count#2 )
  (byte*) main::chargen1#5 ← phi( main::@2/(byte*) main::chargen1#1 )
  (byte*) main::chargen#8 ← phi( main::@2/(byte*) main::chargen#3 )
  (byte) main::bits_gen#12 ← phi( main::@2/(byte) main::bits_gen#1 )
  (byte~) main::$20 ← (byte) main::bits_gen#12 + (byte) 1
  (byte) main::bits_gen#4 ← (byte~) main::$20
  to:main::@3
main::@4: scope:[main]  from main::@3 main::@9
  (byte*) D018#6 ← phi( main::@3/(byte*) D018#7 main::@9/(byte*) D018#8 )
  (byte*) SCREEN#5 ← phi( main::@3/(byte*) SCREEN#6 main::@9/(byte*) SCREEN#7 )
  (byte*) PROCPORT#6 ← phi( main::@3/(byte*) PROCPORT#7 main::@9/(byte*) PROCPORT#8 )
  (byte*) CHARGEN#5 ← phi( main::@3/(byte*) CHARGEN#6 main::@9/(byte*) CHARGEN#7 )
  (byte*) main::charset4#4 ← phi( main::@3/(byte*) main::charset4#5 main::@9/(byte*) main::charset4#6 )
  (byte[]) bits_count#4 ← phi( main::@3/(byte[]) bits_count#3 main::@9/(byte[]) bits_count#9 )
  (byte*) main::chargen1#3 ← phi( main::@3/(byte*) main::chargen1#2 main::@9/(byte*) main::chargen1#6 )
  (byte*) main::chargen#5 ← phi( main::@3/(byte*) main::chargen#4 main::@9/(byte*) main::chargen#9 )
  (byte) main::bits_gen#13 ← phi( main::@3/(byte) main::bits_gen#3 main::@9/(byte) main::bits_gen#6 )
  (byte~) main::$31 ← (byte) main::bits_gen#13 << (byte) 1
  (byte) main::bits_gen#5 ← (byte~) main::$31
  (byte~) main::$32 ← *((byte*) main::chargen#5) & (byte) 1
  (byte~) main::$33 ← (byte~) main::$32 << (byte) 2
  (byte~) main::$34 ← *((byte*) main::chargen1#3) & (byte) 1
  (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34
  (byte~) main::$36 ← (byte[]) bits_count#4 *idx (byte~) main::$35
  (byte) main::bits#3 ← (byte~) main::$36
  (boolean~) main::$37 ← (byte) main::bits#3 >= (byte) 2
  (boolean~) main::$38 ← ! (boolean~) main::$37
  if((boolean~) main::$38) goto main::@5
  to:main::@10
main::@9: scope:[main]  from main::@3
  (byte*) D018#8 ← phi( main::@3/(byte*) D018#7 )
  (byte*) SCREEN#7 ← phi( main::@3/(byte*) SCREEN#6 )
  (byte*) PROCPORT#8 ← phi( main::@3/(byte*) PROCPORT#7 )
  (byte*) CHARGEN#7 ← phi( main::@3/(byte*) CHARGEN#6 )
  (byte*) main::charset4#6 ← phi( main::@3/(byte*) main::charset4#5 )
  (byte[]) bits_count#9 ← phi( main::@3/(byte[]) bits_count#3 )
  (byte*) main::chargen1#6 ← phi( main::@3/(byte*) main::chargen1#2 )
  (byte*) main::chargen#9 ← phi( main::@3/(byte*) main::chargen#4 )
  (byte) main::bits_gen#14 ← phi( main::@3/(byte) main::bits_gen#3 )
  (byte~) main::$30 ← (byte) main::bits_gen#14 + (byte) 1
  (byte) main::bits_gen#6 ← (byte~) main::$30
  to:main::@4
main::@5: scope:[main]  from main::@10 main::@4
  (byte*) D018#4 ← phi( main::@10/(byte*) D018#5 main::@4/(byte*) D018#6 )
  (byte*) SCREEN#3 ← phi( main::@10/(byte*) SCREEN#4 main::@4/(byte*) SCREEN#5 )
  (byte*) PROCPORT#4 ← phi( main::@10/(byte*) PROCPORT#5 main::@4/(byte*) PROCPORT#6 )
  (byte[]) bits_count#6 ← phi( main::@10/(byte[]) bits_count#11 main::@4/(byte[]) bits_count#4 )
  (byte*) CHARGEN#2 ← phi( main::@10/(byte*) CHARGEN#4 main::@4/(byte*) CHARGEN#5 )
  (byte*) main::chargen#6 ← phi( main::@10/(byte*) main::chargen#10 main::@4/(byte*) main::chargen#5 )
  (byte*) main::charset4#2 ← phi( main::@10/(byte*) main::charset4#3 main::@4/(byte*) main::charset4#4 )
  (byte) main::bits_gen#15 ← phi( main::@10/(byte) main::bits_gen#8 main::@4/(byte) main::bits_gen#5 )
  (byte~) main::$40 ← (byte) main::bits_gen#15 << (byte) 1
  (byte) main::bits_gen#7 ← (byte~) main::$40
  *((byte*) main::charset4#2) ← (byte) main::bits_gen#7
  (byte*) main::charset4#1 ← ++ (byte*) main::charset4#2
  (byte*~) main::$41 ← (byte*) main::chargen#6 + (byte) 2
  (byte*) main::chargen#1 ← (byte*~) main::$41
  (byte*~) main::$42 ← (byte*) CHARGEN#2 + (word) 2048
  (boolean~) main::$43 ← (byte*) main::chargen#1 < (byte*~) main::$42
  if((boolean~) main::$43) goto main::@1
  to:main::@11
main::@10: scope:[main]  from main::@4
  (byte*) D018#5 ← phi( main::@4/(byte*) D018#6 )
  (byte*) SCREEN#4 ← phi( main::@4/(byte*) SCREEN#5 )
  (byte*) PROCPORT#5 ← phi( main::@4/(byte*) PROCPORT#6 )
  (byte[]) bits_count#11 ← phi( main::@4/(byte[]) bits_count#4 )
  (byte*) CHARGEN#4 ← phi( main::@4/(byte*) CHARGEN#5 )
  (byte*) main::chargen#10 ← phi( main::@4/(byte*) main::chargen#5 )
  (byte*) main::charset4#3 ← phi( main::@4/(byte*) main::charset4#4 )
  (byte) main::bits_gen#16 ← phi( main::@4/(byte) main::bits_gen#5 )
  (byte~) main::$39 ← (byte) main::bits_gen#16 + (byte) 1
  (byte) main::bits_gen#8 ← (byte~) main::$39
  to:main::@5
main::@11: scope:[main]  from main::@5
  (byte*) D018#3 ← phi( main::@5/(byte*) D018#4 )
  (byte*) SCREEN#2 ← phi( main::@5/(byte*) SCREEN#3 )
  (byte*) PROCPORT#2 ← phi( main::@5/(byte*) PROCPORT#4 )
  *((byte*) PROCPORT#2) ← (byte) 55
  asm { cli }
  (byte) main::i#0 ← (byte) 0
  to:main::@6
main::@6: scope:[main]  from main::@11 main::@6
  (byte*) D018#2 ← phi( main::@11/(byte*) D018#3 main::@6/(byte*) D018#2 )
  (byte*) SCREEN#1 ← phi( main::@11/(byte*) SCREEN#2 main::@6/(byte*) SCREEN#1 )
  (byte) main::i#2 ← phi( main::@11/(byte) main::i#0 main::@6/(byte) main::i#1 )
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$44 ← (byte) main::i#1 != (byte) 0
  if((boolean~) main::$44) goto main::@6
  to:main::@12
main::@12: scope:[main]  from main::@6
  (byte*) D018#1 ← phi( main::@6/(byte*) D018#2 )
  *((byte*) D018#1) ← (byte) 25
  to:main::@return
main::@return: scope:[main]  from main::@12
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) D018#14 ← phi( @begin/(byte*) D018#0 )
  (byte*) SCREEN#13 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[]) bits_count#10 ← phi( @begin/(byte[]) bits_count#0 )
  (byte*) CHARSET4#2 ← phi( @begin/(byte*) CHARSET4#0 )
  (byte*) CHARGEN#3 ← phi( @begin/(byte*) CHARGEN#0 )
  (byte*) PROCPORT#3 ← phi( @begin/(byte*) PROCPORT#0 )
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) CHARSET#0 ← (word) 8192
  (byte*) CHARGEN#0 ← (word) 53248
  (byte*) PROCPORT#0 ← (byte) 1
  (byte*) D018#0 ← (word) 53272
  (byte*) CHARSET4#0 ← (word) 10240
  (byte[]) bits_count#0 ← { (byte) 0, (byte) 1, (byte) 1, (byte) 2, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 2, (byte) 3, (byte) 3, (byte) 4 }
  to:@1
main: scope:[main]  from @1
  (byte*) D018#13 ← phi( @1/(byte*) D018#14 )
  (byte*) SCREEN#12 ← phi( @1/(byte*) SCREEN#13 )
  (byte[]) bits_count#5 ← phi( @1/(byte[]) bits_count#10 )
  (byte*) CHARSET4#1 ← phi( @1/(byte*) CHARSET4#2 )
  (byte*) CHARGEN#1 ← phi( @1/(byte*) CHARGEN#3 )
  (byte*) PROCPORT#1 ← phi( @1/(byte*) PROCPORT#3 )
  asm { sei }
  *((byte*) PROCPORT#1) ← (byte) 50
  (byte*) main::chargen#0 ← (byte*) CHARGEN#1
  (byte*) main::charset4#0 ← (byte*) CHARSET4#1
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte*) D018#11 ← phi( main/(byte*) D018#13 main::@5/(byte*) D018#4 )
  (byte*) SCREEN#10 ← phi( main/(byte*) SCREEN#12 main::@5/(byte*) SCREEN#3 )
  (byte*) PROCPORT#11 ← phi( main/(byte*) PROCPORT#1 main::@5/(byte*) PROCPORT#4 )
  (byte*) CHARGEN#10 ← phi( main/(byte*) CHARGEN#1 main::@5/(byte*) CHARGEN#2 )
  (byte*) main::charset4#9 ← phi( main/(byte*) main::charset4#0 main::@5/(byte*) main::charset4#1 )
  (byte[]) bits_count#1 ← phi( main/(byte[]) bits_count#5 main::@5/(byte[]) bits_count#6 )
  (byte*) main::chargen#2 ← phi( main/(byte*) main::chargen#0 main::@5/(byte*) main::chargen#1 )
  (byte) main::bits_gen#0 ← (byte) 0
  (byte*~) main::$0 ← (byte*) main::chargen#2 + (byte) 1
  (byte*) main::chargen1#0 ← (byte*~) main::$0
  (byte~) main::$1 ← *((byte*) main::chargen#2) & (byte) 96
  (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96
  (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2
  (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3
  (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1
  (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2
  (byte~) main::$7 ← (byte[]) bits_count#1 *idx (byte~) main::$6
  (byte) main::bits#0 ← (byte~) main::$7
  (boolean~) main::$8 ← (byte) main::bits#0 >= (byte) 2
  (boolean~) main::$9 ← ! (boolean~) main::$8
  if((boolean~) main::$9) goto main::@2
  to:main::@7
main::@2: scope:[main]  from main::@1 main::@7
  (byte*) D018#9 ← phi( main::@1/(byte*) D018#11 main::@7/(byte*) D018#12 )
  (byte*) SCREEN#8 ← phi( main::@1/(byte*) SCREEN#10 main::@7/(byte*) SCREEN#11 )
  (byte*) PROCPORT#9 ← phi( main::@1/(byte*) PROCPORT#11 main::@7/(byte*) PROCPORT#12 )
  (byte*) CHARGEN#8 ← phi( main::@1/(byte*) CHARGEN#10 main::@7/(byte*) CHARGEN#11 )
  (byte*) main::charset4#7 ← phi( main::@1/(byte*) main::charset4#9 main::@7/(byte*) main::charset4#10 )
  (byte[]) bits_count#2 ← phi( main::@1/(byte[]) bits_count#1 main::@7/(byte[]) bits_count#7 )
  (byte*) main::chargen1#1 ← phi( main::@1/(byte*) main::chargen1#0 main::@7/(byte*) main::chargen1#4 )
  (byte*) main::chargen#3 ← phi( main::@1/(byte*) main::chargen#2 main::@7/(byte*) main::chargen#7 )
  (byte) main::bits_gen#9 ← phi( main::@1/(byte) main::bits_gen#0 main::@7/(byte) main::bits_gen#2 )
  (byte~) main::$11 ← (byte) main::bits_gen#9 << (byte) 1
  (byte) main::bits_gen#1 ← (byte~) main::$11
  (byte~) main::$12 ← *((byte*) main::chargen#3) & (byte) 24
  (byte~) main::$13 ← *((byte*) main::chargen1#1) & (byte) 24
  (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2
  (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14
  (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1
  (byte~) main::$17 ← (byte[]) bits_count#2 *idx (byte~) main::$16
  (byte) main::bits#1 ← (byte~) main::$17
  (boolean~) main::$18 ← (byte) main::bits#1 >= (byte) 2
  (boolean~) main::$19 ← ! (boolean~) main::$18
  if((boolean~) main::$19) goto main::@3
  to:main::@8
main::@7: scope:[main]  from main::@1
  (byte*) D018#12 ← phi( main::@1/(byte*) D018#11 )
  (byte*) SCREEN#11 ← phi( main::@1/(byte*) SCREEN#10 )
  (byte*) PROCPORT#12 ← phi( main::@1/(byte*) PROCPORT#11 )
  (byte*) CHARGEN#11 ← phi( main::@1/(byte*) CHARGEN#10 )
  (byte*) main::charset4#10 ← phi( main::@1/(byte*) main::charset4#9 )
  (byte[]) bits_count#7 ← phi( main::@1/(byte[]) bits_count#1 )
  (byte*) main::chargen1#4 ← phi( main::@1/(byte*) main::chargen1#0 )
  (byte*) main::chargen#7 ← phi( main::@1/(byte*) main::chargen#2 )
  (byte) main::bits_gen#10 ← phi( main::@1/(byte) main::bits_gen#0 )
  (byte~) main::$10 ← (byte) main::bits_gen#10 + (byte) 1
  (byte) main::bits_gen#2 ← (byte~) main::$10
  to:main::@2
main::@3: scope:[main]  from main::@2 main::@8
  (byte*) D018#7 ← phi( main::@2/(byte*) D018#9 main::@8/(byte*) D018#10 )
  (byte*) SCREEN#6 ← phi( main::@2/(byte*) SCREEN#8 main::@8/(byte*) SCREEN#9 )
  (byte*) PROCPORT#7 ← phi( main::@2/(byte*) PROCPORT#9 main::@8/(byte*) PROCPORT#10 )
  (byte*) CHARGEN#6 ← phi( main::@2/(byte*) CHARGEN#8 main::@8/(byte*) CHARGEN#9 )
  (byte*) main::charset4#5 ← phi( main::@2/(byte*) main::charset4#7 main::@8/(byte*) main::charset4#8 )
  (byte[]) bits_count#3 ← phi( main::@2/(byte[]) bits_count#2 main::@8/(byte[]) bits_count#8 )
  (byte*) main::chargen1#2 ← phi( main::@2/(byte*) main::chargen1#1 main::@8/(byte*) main::chargen1#5 )
  (byte*) main::chargen#4 ← phi( main::@2/(byte*) main::chargen#3 main::@8/(byte*) main::chargen#8 )
  (byte) main::bits_gen#11 ← phi( main::@2/(byte) main::bits_gen#1 main::@8/(byte) main::bits_gen#4 )
  (byte~) main::$21 ← (byte) main::bits_gen#11 << (byte) 1
  (byte) main::bits_gen#3 ← (byte~) main::$21
  (byte~) main::$22 ← *((byte*) main::chargen#4) & (byte) 6
  (byte~) main::$23 ← (byte~) main::$22 << (byte) 1
  (byte~) main::$24 ← *((byte*) main::chargen1#2) & (byte) 6
  (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1
  (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25
  (byte~) main::$27 ← (byte[]) bits_count#3 *idx (byte~) main::$26
  (byte) main::bits#2 ← (byte~) main::$27
  (boolean~) main::$28 ← (byte) main::bits#2 >= (byte) 2
  (boolean~) main::$29 ← ! (boolean~) main::$28
  if((boolean~) main::$29) goto main::@4
  to:main::@9
main::@8: scope:[main]  from main::@2
  (byte*) D018#10 ← phi( main::@2/(byte*) D018#9 )
  (byte*) SCREEN#9 ← phi( main::@2/(byte*) SCREEN#8 )
  (byte*) PROCPORT#10 ← phi( main::@2/(byte*) PROCPORT#9 )
  (byte*) CHARGEN#9 ← phi( main::@2/(byte*) CHARGEN#8 )
  (byte*) main::charset4#8 ← phi( main::@2/(byte*) main::charset4#7 )
  (byte[]) bits_count#8 ← phi( main::@2/(byte[]) bits_count#2 )
  (byte*) main::chargen1#5 ← phi( main::@2/(byte*) main::chargen1#1 )
  (byte*) main::chargen#8 ← phi( main::@2/(byte*) main::chargen#3 )
  (byte) main::bits_gen#12 ← phi( main::@2/(byte) main::bits_gen#1 )
  (byte~) main::$20 ← (byte) main::bits_gen#12 + (byte) 1
  (byte) main::bits_gen#4 ← (byte~) main::$20
  to:main::@3
main::@4: scope:[main]  from main::@3 main::@9
  (byte*) D018#6 ← phi( main::@3/(byte*) D018#7 main::@9/(byte*) D018#8 )
  (byte*) SCREEN#5 ← phi( main::@3/(byte*) SCREEN#6 main::@9/(byte*) SCREEN#7 )
  (byte*) PROCPORT#6 ← phi( main::@3/(byte*) PROCPORT#7 main::@9/(byte*) PROCPORT#8 )
  (byte*) CHARGEN#5 ← phi( main::@3/(byte*) CHARGEN#6 main::@9/(byte*) CHARGEN#7 )
  (byte*) main::charset4#4 ← phi( main::@3/(byte*) main::charset4#5 main::@9/(byte*) main::charset4#6 )
  (byte[]) bits_count#4 ← phi( main::@3/(byte[]) bits_count#3 main::@9/(byte[]) bits_count#9 )
  (byte*) main::chargen1#3 ← phi( main::@3/(byte*) main::chargen1#2 main::@9/(byte*) main::chargen1#6 )
  (byte*) main::chargen#5 ← phi( main::@3/(byte*) main::chargen#4 main::@9/(byte*) main::chargen#9 )
  (byte) main::bits_gen#13 ← phi( main::@3/(byte) main::bits_gen#3 main::@9/(byte) main::bits_gen#6 )
  (byte~) main::$31 ← (byte) main::bits_gen#13 << (byte) 1
  (byte) main::bits_gen#5 ← (byte~) main::$31
  (byte~) main::$32 ← *((byte*) main::chargen#5) & (byte) 1
  (byte~) main::$33 ← (byte~) main::$32 << (byte) 2
  (byte~) main::$34 ← *((byte*) main::chargen1#3) & (byte) 1
  (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34
  (byte~) main::$36 ← (byte[]) bits_count#4 *idx (byte~) main::$35
  (byte) main::bits#3 ← (byte~) main::$36
  (boolean~) main::$37 ← (byte) main::bits#3 >= (byte) 2
  (boolean~) main::$38 ← ! (boolean~) main::$37
  if((boolean~) main::$38) goto main::@5
  to:main::@10
main::@9: scope:[main]  from main::@3
  (byte*) D018#8 ← phi( main::@3/(byte*) D018#7 )
  (byte*) SCREEN#7 ← phi( main::@3/(byte*) SCREEN#6 )
  (byte*) PROCPORT#8 ← phi( main::@3/(byte*) PROCPORT#7 )
  (byte*) CHARGEN#7 ← phi( main::@3/(byte*) CHARGEN#6 )
  (byte*) main::charset4#6 ← phi( main::@3/(byte*) main::charset4#5 )
  (byte[]) bits_count#9 ← phi( main::@3/(byte[]) bits_count#3 )
  (byte*) main::chargen1#6 ← phi( main::@3/(byte*) main::chargen1#2 )
  (byte*) main::chargen#9 ← phi( main::@3/(byte*) main::chargen#4 )
  (byte) main::bits_gen#14 ← phi( main::@3/(byte) main::bits_gen#3 )
  (byte~) main::$30 ← (byte) main::bits_gen#14 + (byte) 1
  (byte) main::bits_gen#6 ← (byte~) main::$30
  to:main::@4
main::@5: scope:[main]  from main::@10 main::@4
  (byte*) D018#4 ← phi( main::@10/(byte*) D018#5 main::@4/(byte*) D018#6 )
  (byte*) SCREEN#3 ← phi( main::@10/(byte*) SCREEN#4 main::@4/(byte*) SCREEN#5 )
  (byte*) PROCPORT#4 ← phi( main::@10/(byte*) PROCPORT#5 main::@4/(byte*) PROCPORT#6 )
  (byte[]) bits_count#6 ← phi( main::@10/(byte[]) bits_count#11 main::@4/(byte[]) bits_count#4 )
  (byte*) CHARGEN#2 ← phi( main::@10/(byte*) CHARGEN#4 main::@4/(byte*) CHARGEN#5 )
  (byte*) main::chargen#6 ← phi( main::@10/(byte*) main::chargen#10 main::@4/(byte*) main::chargen#5 )
  (byte*) main::charset4#2 ← phi( main::@10/(byte*) main::charset4#3 main::@4/(byte*) main::charset4#4 )
  (byte) main::bits_gen#15 ← phi( main::@10/(byte) main::bits_gen#8 main::@4/(byte) main::bits_gen#5 )
  (byte~) main::$40 ← (byte) main::bits_gen#15 << (byte) 1
  (byte) main::bits_gen#7 ← (byte~) main::$40
  *((byte*) main::charset4#2) ← (byte) main::bits_gen#7
  (byte*) main::charset4#1 ← ++ (byte*) main::charset4#2
  (byte*~) main::$41 ← (byte*) main::chargen#6 + (byte) 2
  (byte*) main::chargen#1 ← (byte*~) main::$41
  (byte*~) main::$42 ← (byte*) CHARGEN#2 + (word) 2048
  (boolean~) main::$43 ← (byte*) main::chargen#1 < (byte*~) main::$42
  if((boolean~) main::$43) goto main::@1
  to:main::@11
main::@10: scope:[main]  from main::@4
  (byte*) D018#5 ← phi( main::@4/(byte*) D018#6 )
  (byte*) SCREEN#4 ← phi( main::@4/(byte*) SCREEN#5 )
  (byte*) PROCPORT#5 ← phi( main::@4/(byte*) PROCPORT#6 )
  (byte[]) bits_count#11 ← phi( main::@4/(byte[]) bits_count#4 )
  (byte*) CHARGEN#4 ← phi( main::@4/(byte*) CHARGEN#5 )
  (byte*) main::chargen#10 ← phi( main::@4/(byte*) main::chargen#5 )
  (byte*) main::charset4#3 ← phi( main::@4/(byte*) main::charset4#4 )
  (byte) main::bits_gen#16 ← phi( main::@4/(byte) main::bits_gen#5 )
  (byte~) main::$39 ← (byte) main::bits_gen#16 + (byte) 1
  (byte) main::bits_gen#8 ← (byte~) main::$39
  to:main::@5
main::@11: scope:[main]  from main::@5
  (byte*) D018#3 ← phi( main::@5/(byte*) D018#4 )
  (byte*) SCREEN#2 ← phi( main::@5/(byte*) SCREEN#3 )
  (byte*) PROCPORT#2 ← phi( main::@5/(byte*) PROCPORT#4 )
  *((byte*) PROCPORT#2) ← (byte) 55
  asm { cli }
  (byte) main::i#0 ← (byte) 0
  to:main::@6
main::@6: scope:[main]  from main::@11 main::@6
  (byte*) D018#2 ← phi( main::@11/(byte*) D018#3 main::@6/(byte*) D018#2 )
  (byte*) SCREEN#1 ← phi( main::@11/(byte*) SCREEN#2 main::@6/(byte*) SCREEN#1 )
  (byte) main::i#2 ← phi( main::@11/(byte) main::i#0 main::@6/(byte) main::i#1 )
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$44 ← (byte) main::i#1 != (byte) 0
  if((boolean~) main::$44) goto main::@6
  to:main::@12
main::@12: scope:[main]  from main::@6
  (byte*) D018#1 ← phi( main::@6/(byte*) D018#2 )
  *((byte*) D018#1) ← (byte) 25
  to:main::@return
main::@return: scope:[main]  from main::@12
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) D018#14 ← phi( @begin/(byte*) D018#0 )
  (byte*) SCREEN#13 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[]) bits_count#10 ← phi( @begin/(byte[]) bits_count#0 )
  (byte*) CHARSET4#2 ← phi( @begin/(byte*) CHARSET4#0 )
  (byte*) CHARGEN#3 ← phi( @begin/(byte*) CHARGEN#0 )
  (byte*) PROCPORT#3 ← phi( @begin/(byte*) PROCPORT#0 )
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

INITIAL SSA SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) CHARGEN
(byte*) CHARGEN#0
(byte*) CHARGEN#1
(byte*) CHARGEN#10
(byte*) CHARGEN#11
(byte*) CHARGEN#2
(byte*) CHARGEN#3
(byte*) CHARGEN#4
(byte*) CHARGEN#5
(byte*) CHARGEN#6
(byte*) CHARGEN#7
(byte*) CHARGEN#8
(byte*) CHARGEN#9
(byte*) CHARSET
(byte*) CHARSET#0
(byte*) CHARSET4
(byte*) CHARSET4#0
(byte*) CHARSET4#1
(byte*) CHARSET4#2
(byte*) D018
(byte*) D018#0
(byte*) D018#1
(byte*) D018#10
(byte*) D018#11
(byte*) D018#12
(byte*) D018#13
(byte*) D018#14
(byte*) D018#2
(byte*) D018#3
(byte*) D018#4
(byte*) D018#5
(byte*) D018#6
(byte*) D018#7
(byte*) D018#8
(byte*) D018#9
(byte*) PROCPORT
(byte*) PROCPORT#0
(byte*) PROCPORT#1
(byte*) PROCPORT#10
(byte*) PROCPORT#11
(byte*) PROCPORT#12
(byte*) PROCPORT#2
(byte*) PROCPORT#3
(byte*) PROCPORT#4
(byte*) PROCPORT#5
(byte*) PROCPORT#6
(byte*) PROCPORT#7
(byte*) PROCPORT#8
(byte*) PROCPORT#9
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#10
(byte*) SCREEN#11
(byte*) SCREEN#12
(byte*) SCREEN#13
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte*) SCREEN#4
(byte*) SCREEN#5
(byte*) SCREEN#6
(byte*) SCREEN#7
(byte*) SCREEN#8
(byte*) SCREEN#9
(byte[]) bits_count
(byte[]) bits_count#0
(byte[]) bits_count#1
(byte[]) bits_count#10
(byte[]) bits_count#11
(byte[]) bits_count#2
(byte[]) bits_count#3
(byte[]) bits_count#4
(byte[]) bits_count#5
(byte[]) bits_count#6
(byte[]) bits_count#7
(byte[]) bits_count#8
(byte[]) bits_count#9
(void()) main()
(byte*~) main::$0
(byte~) main::$1
(byte~) main::$10
(byte~) main::$11
(byte~) main::$12
(byte~) main::$13
(byte~) main::$14
(byte~) main::$15
(byte~) main::$16
(byte~) main::$17
(boolean~) main::$18
(boolean~) main::$19
(byte~) main::$2
(byte~) main::$20
(byte~) main::$21
(byte~) main::$22
(byte~) main::$23
(byte~) main::$24
(byte~) main::$25
(byte~) main::$26
(byte~) main::$27
(boolean~) main::$28
(boolean~) main::$29
(byte~) main::$3
(byte~) main::$30
(byte~) main::$31
(byte~) main::$32
(byte~) main::$33
(byte~) main::$34
(byte~) main::$35
(byte~) main::$36
(boolean~) main::$37
(boolean~) main::$38
(byte~) main::$39
(byte~) main::$4
(byte~) main::$40
(byte*~) main::$41
(byte*~) main::$42
(boolean~) main::$43
(boolean~) main::$44
(byte~) main::$5
(byte~) main::$6
(byte~) main::$7
(boolean~) main::$8
(boolean~) main::$9
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::bits
(byte) main::bits#0
(byte) main::bits#1
(byte) main::bits#2
(byte) main::bits#3
(byte) main::bits_gen
(byte) main::bits_gen#0
(byte) main::bits_gen#1
(byte) main::bits_gen#10
(byte) main::bits_gen#11
(byte) main::bits_gen#12
(byte) main::bits_gen#13
(byte) main::bits_gen#14
(byte) main::bits_gen#15
(byte) main::bits_gen#16
(byte) main::bits_gen#2
(byte) main::bits_gen#3
(byte) main::bits_gen#4
(byte) main::bits_gen#5
(byte) main::bits_gen#6
(byte) main::bits_gen#7
(byte) main::bits_gen#8
(byte) main::bits_gen#9
(byte*) main::chargen
(byte*) main::chargen#0
(byte*) main::chargen#1
(byte*) main::chargen#10
(byte*) main::chargen#2
(byte*) main::chargen#3
(byte*) main::chargen#4
(byte*) main::chargen#5
(byte*) main::chargen#6
(byte*) main::chargen#7
(byte*) main::chargen#8
(byte*) main::chargen#9
(byte*) main::chargen1
(byte*) main::chargen1#0
(byte*) main::chargen1#1
(byte*) main::chargen1#2
(byte*) main::chargen1#3
(byte*) main::chargen1#4
(byte*) main::chargen1#5
(byte*) main::chargen1#6
(byte*) main::charset4
(byte*) main::charset4#0
(byte*) main::charset4#1
(byte*) main::charset4#10
(byte*) main::charset4#2
(byte*) main::charset4#3
(byte*) main::charset4#4
(byte*) main::charset4#5
(byte*) main::charset4#6
(byte*) main::charset4#7
(byte*) main::charset4#8
(byte*) main::charset4#9
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2

Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) CHARSET#0 ← (word) 8192
  (byte*) CHARGEN#0 ← (word) 53248
  (byte*) PROCPORT#0 ← (byte) 1
  (byte*) D018#0 ← (word) 53272
  (byte*) CHARSET4#0 ← (word) 10240
  (byte[]) bits_count#0 ← { (byte) 0, (byte) 1, (byte) 1, (byte) 2, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 2, (byte) 3, (byte) 3, (byte) 4 }
  to:@1
main: scope:[main]  from @1
  (byte*) D018#13 ← phi( @1/(byte*) D018#14 )
  (byte*) SCREEN#12 ← phi( @1/(byte*) SCREEN#13 )
  (byte[]) bits_count#5 ← phi( @1/(byte[]) bits_count#10 )
  (byte*) CHARSET4#1 ← phi( @1/(byte*) CHARSET4#2 )
  (byte*) CHARGEN#1 ← phi( @1/(byte*) CHARGEN#3 )
  (byte*) PROCPORT#1 ← phi( @1/(byte*) PROCPORT#3 )
  asm { sei }
  *((byte*) PROCPORT#1) ← (byte) 50
  (byte*) main::chargen#0 ← (byte*) CHARGEN#1
  (byte*) main::charset4#0 ← (byte*) CHARSET4#1
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte*) D018#11 ← phi( main/(byte*) D018#13 main::@5/(byte*) D018#4 )
  (byte*) SCREEN#10 ← phi( main/(byte*) SCREEN#12 main::@5/(byte*) SCREEN#3 )
  (byte*) PROCPORT#11 ← phi( main/(byte*) PROCPORT#1 main::@5/(byte*) PROCPORT#4 )
  (byte*) CHARGEN#10 ← phi( main/(byte*) CHARGEN#1 main::@5/(byte*) CHARGEN#2 )
  (byte*) main::charset4#9 ← phi( main/(byte*) main::charset4#0 main::@5/(byte*) main::charset4#1 )
  (byte[]) bits_count#1 ← phi( main/(byte[]) bits_count#5 main::@5/(byte[]) bits_count#6 )
  (byte*) main::chargen#2 ← phi( main/(byte*) main::chargen#0 main::@5/(byte*) main::chargen#1 )
  (byte) main::bits_gen#0 ← (byte) 0
  (byte*~) main::$0 ← (byte*) main::chargen#2 + (byte) 1
  (byte*) main::chargen1#0 ← (byte*~) main::$0
  (byte~) main::$1 ← *((byte*) main::chargen#2) & (byte) 96
  (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96
  (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2
  (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3
  (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1
  (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2
  (byte~) main::$7 ← (byte[]) bits_count#1 *idx (byte~) main::$6
  (byte) main::bits#0 ← (byte~) main::$7
  (boolean~) main::$8 ← (byte) main::bits#0 >= (byte) 2
  (boolean~) main::$9 ← ! (boolean~) main::$8
  if((boolean~) main::$9) goto main::@2
  to:main::@7
main::@2: scope:[main]  from main::@1 main::@7
  (byte*) D018#9 ← phi( main::@1/(byte*) D018#11 main::@7/(byte*) D018#12 )
  (byte*) SCREEN#8 ← phi( main::@1/(byte*) SCREEN#10 main::@7/(byte*) SCREEN#11 )
  (byte*) PROCPORT#9 ← phi( main::@1/(byte*) PROCPORT#11 main::@7/(byte*) PROCPORT#12 )
  (byte*) CHARGEN#8 ← phi( main::@1/(byte*) CHARGEN#10 main::@7/(byte*) CHARGEN#11 )
  (byte*) main::charset4#7 ← phi( main::@1/(byte*) main::charset4#9 main::@7/(byte*) main::charset4#10 )
  (byte[]) bits_count#2 ← phi( main::@1/(byte[]) bits_count#1 main::@7/(byte[]) bits_count#7 )
  (byte*) main::chargen1#1 ← phi( main::@1/(byte*) main::chargen1#0 main::@7/(byte*) main::chargen1#4 )
  (byte*) main::chargen#3 ← phi( main::@1/(byte*) main::chargen#2 main::@7/(byte*) main::chargen#7 )
  (byte) main::bits_gen#9 ← phi( main::@1/(byte) main::bits_gen#0 main::@7/(byte) main::bits_gen#2 )
  (byte~) main::$11 ← (byte) main::bits_gen#9 << (byte) 1
  (byte) main::bits_gen#1 ← (byte~) main::$11
  (byte~) main::$12 ← *((byte*) main::chargen#3) & (byte) 24
  (byte~) main::$13 ← *((byte*) main::chargen1#1) & (byte) 24
  (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2
  (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14
  (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1
  (byte~) main::$17 ← (byte[]) bits_count#2 *idx (byte~) main::$16
  (byte) main::bits#1 ← (byte~) main::$17
  (boolean~) main::$18 ← (byte) main::bits#1 >= (byte) 2
  (boolean~) main::$19 ← ! (boolean~) main::$18
  if((boolean~) main::$19) goto main::@3
  to:main::@8
main::@7: scope:[main]  from main::@1
  (byte*) D018#12 ← phi( main::@1/(byte*) D018#11 )
  (byte*) SCREEN#11 ← phi( main::@1/(byte*) SCREEN#10 )
  (byte*) PROCPORT#12 ← phi( main::@1/(byte*) PROCPORT#11 )
  (byte*) CHARGEN#11 ← phi( main::@1/(byte*) CHARGEN#10 )
  (byte*) main::charset4#10 ← phi( main::@1/(byte*) main::charset4#9 )
  (byte[]) bits_count#7 ← phi( main::@1/(byte[]) bits_count#1 )
  (byte*) main::chargen1#4 ← phi( main::@1/(byte*) main::chargen1#0 )
  (byte*) main::chargen#7 ← phi( main::@1/(byte*) main::chargen#2 )
  (byte) main::bits_gen#10 ← phi( main::@1/(byte) main::bits_gen#0 )
  (byte~) main::$10 ← (byte) main::bits_gen#10 + (byte) 1
  (byte) main::bits_gen#2 ← (byte~) main::$10
  to:main::@2
main::@3: scope:[main]  from main::@2 main::@8
  (byte*) D018#7 ← phi( main::@2/(byte*) D018#9 main::@8/(byte*) D018#10 )
  (byte*) SCREEN#6 ← phi( main::@2/(byte*) SCREEN#8 main::@8/(byte*) SCREEN#9 )
  (byte*) PROCPORT#7 ← phi( main::@2/(byte*) PROCPORT#9 main::@8/(byte*) PROCPORT#10 )
  (byte*) CHARGEN#6 ← phi( main::@2/(byte*) CHARGEN#8 main::@8/(byte*) CHARGEN#9 )
  (byte*) main::charset4#5 ← phi( main::@2/(byte*) main::charset4#7 main::@8/(byte*) main::charset4#8 )
  (byte[]) bits_count#3 ← phi( main::@2/(byte[]) bits_count#2 main::@8/(byte[]) bits_count#8 )
  (byte*) main::chargen1#2 ← phi( main::@2/(byte*) main::chargen1#1 main::@8/(byte*) main::chargen1#5 )
  (byte*) main::chargen#4 ← phi( main::@2/(byte*) main::chargen#3 main::@8/(byte*) main::chargen#8 )
  (byte) main::bits_gen#11 ← phi( main::@2/(byte) main::bits_gen#1 main::@8/(byte) main::bits_gen#4 )
  (byte~) main::$21 ← (byte) main::bits_gen#11 << (byte) 1
  (byte) main::bits_gen#3 ← (byte~) main::$21
  (byte~) main::$22 ← *((byte*) main::chargen#4) & (byte) 6
  (byte~) main::$23 ← (byte~) main::$22 << (byte) 1
  (byte~) main::$24 ← *((byte*) main::chargen1#2) & (byte) 6
  (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1
  (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25
  (byte~) main::$27 ← (byte[]) bits_count#3 *idx (byte~) main::$26
  (byte) main::bits#2 ← (byte~) main::$27
  (boolean~) main::$28 ← (byte) main::bits#2 >= (byte) 2
  (boolean~) main::$29 ← ! (boolean~) main::$28
  if((boolean~) main::$29) goto main::@4
  to:main::@9
main::@8: scope:[main]  from main::@2
  (byte*) D018#10 ← phi( main::@2/(byte*) D018#9 )
  (byte*) SCREEN#9 ← phi( main::@2/(byte*) SCREEN#8 )
  (byte*) PROCPORT#10 ← phi( main::@2/(byte*) PROCPORT#9 )
  (byte*) CHARGEN#9 ← phi( main::@2/(byte*) CHARGEN#8 )
  (byte*) main::charset4#8 ← phi( main::@2/(byte*) main::charset4#7 )
  (byte[]) bits_count#8 ← phi( main::@2/(byte[]) bits_count#2 )
  (byte*) main::chargen1#5 ← phi( main::@2/(byte*) main::chargen1#1 )
  (byte*) main::chargen#8 ← phi( main::@2/(byte*) main::chargen#3 )
  (byte) main::bits_gen#12 ← phi( main::@2/(byte) main::bits_gen#1 )
  (byte~) main::$20 ← (byte) main::bits_gen#12 + (byte) 1
  (byte) main::bits_gen#4 ← (byte~) main::$20
  to:main::@3
main::@4: scope:[main]  from main::@3 main::@9
  (byte*) D018#6 ← phi( main::@3/(byte*) D018#7 main::@9/(byte*) D018#8 )
  (byte*) SCREEN#5 ← phi( main::@3/(byte*) SCREEN#6 main::@9/(byte*) SCREEN#7 )
  (byte*) PROCPORT#6 ← phi( main::@3/(byte*) PROCPORT#7 main::@9/(byte*) PROCPORT#8 )
  (byte*) CHARGEN#5 ← phi( main::@3/(byte*) CHARGEN#6 main::@9/(byte*) CHARGEN#7 )
  (byte*) main::charset4#4 ← phi( main::@3/(byte*) main::charset4#5 main::@9/(byte*) main::charset4#6 )
  (byte[]) bits_count#4 ← phi( main::@3/(byte[]) bits_count#3 main::@9/(byte[]) bits_count#9 )
  (byte*) main::chargen1#3 ← phi( main::@3/(byte*) main::chargen1#2 main::@9/(byte*) main::chargen1#6 )
  (byte*) main::chargen#5 ← phi( main::@3/(byte*) main::chargen#4 main::@9/(byte*) main::chargen#9 )
  (byte) main::bits_gen#13 ← phi( main::@3/(byte) main::bits_gen#3 main::@9/(byte) main::bits_gen#6 )
  (byte~) main::$31 ← (byte) main::bits_gen#13 << (byte) 1
  (byte) main::bits_gen#5 ← (byte~) main::$31
  (byte~) main::$32 ← *((byte*) main::chargen#5) & (byte) 1
  (byte~) main::$33 ← (byte~) main::$32 << (byte) 2
  (byte~) main::$34 ← *((byte*) main::chargen1#3) & (byte) 1
  (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34
  (byte~) main::$36 ← (byte[]) bits_count#4 *idx (byte~) main::$35
  (byte) main::bits#3 ← (byte~) main::$36
  (boolean~) main::$37 ← (byte) main::bits#3 >= (byte) 2
  (boolean~) main::$38 ← ! (boolean~) main::$37
  if((boolean~) main::$38) goto main::@5
  to:main::@10
main::@9: scope:[main]  from main::@3
  (byte*) D018#8 ← phi( main::@3/(byte*) D018#7 )
  (byte*) SCREEN#7 ← phi( main::@3/(byte*) SCREEN#6 )
  (byte*) PROCPORT#8 ← phi( main::@3/(byte*) PROCPORT#7 )
  (byte*) CHARGEN#7 ← phi( main::@3/(byte*) CHARGEN#6 )
  (byte*) main::charset4#6 ← phi( main::@3/(byte*) main::charset4#5 )
  (byte[]) bits_count#9 ← phi( main::@3/(byte[]) bits_count#3 )
  (byte*) main::chargen1#6 ← phi( main::@3/(byte*) main::chargen1#2 )
  (byte*) main::chargen#9 ← phi( main::@3/(byte*) main::chargen#4 )
  (byte) main::bits_gen#14 ← phi( main::@3/(byte) main::bits_gen#3 )
  (byte~) main::$30 ← (byte) main::bits_gen#14 + (byte) 1
  (byte) main::bits_gen#6 ← (byte~) main::$30
  to:main::@4
main::@5: scope:[main]  from main::@10 main::@4
  (byte*) D018#4 ← phi( main::@10/(byte*) D018#5 main::@4/(byte*) D018#6 )
  (byte*) SCREEN#3 ← phi( main::@10/(byte*) SCREEN#4 main::@4/(byte*) SCREEN#5 )
  (byte*) PROCPORT#4 ← phi( main::@10/(byte*) PROCPORT#5 main::@4/(byte*) PROCPORT#6 )
  (byte[]) bits_count#6 ← phi( main::@10/(byte[]) bits_count#11 main::@4/(byte[]) bits_count#4 )
  (byte*) CHARGEN#2 ← phi( main::@10/(byte*) CHARGEN#4 main::@4/(byte*) CHARGEN#5 )
  (byte*) main::chargen#6 ← phi( main::@10/(byte*) main::chargen#10 main::@4/(byte*) main::chargen#5 )
  (byte*) main::charset4#2 ← phi( main::@10/(byte*) main::charset4#3 main::@4/(byte*) main::charset4#4 )
  (byte) main::bits_gen#15 ← phi( main::@10/(byte) main::bits_gen#8 main::@4/(byte) main::bits_gen#5 )
  (byte~) main::$40 ← (byte) main::bits_gen#15 << (byte) 1
  (byte) main::bits_gen#7 ← (byte~) main::$40
  *((byte*) main::charset4#2) ← (byte) main::bits_gen#7
  (byte*) main::charset4#1 ← ++ (byte*) main::charset4#2
  (byte*~) main::$41 ← (byte*) main::chargen#6 + (byte) 2
  (byte*) main::chargen#1 ← (byte*~) main::$41
  (byte*~) main::$42 ← (byte*) CHARGEN#2 + (word) 2048
  (boolean~) main::$43 ← (byte*) main::chargen#1 < (byte*~) main::$42
  if((boolean~) main::$43) goto main::@1
  to:main::@11
main::@10: scope:[main]  from main::@4
  (byte*) D018#5 ← phi( main::@4/(byte*) D018#6 )
  (byte*) SCREEN#4 ← phi( main::@4/(byte*) SCREEN#5 )
  (byte*) PROCPORT#5 ← phi( main::@4/(byte*) PROCPORT#6 )
  (byte[]) bits_count#11 ← phi( main::@4/(byte[]) bits_count#4 )
  (byte*) CHARGEN#4 ← phi( main::@4/(byte*) CHARGEN#5 )
  (byte*) main::chargen#10 ← phi( main::@4/(byte*) main::chargen#5 )
  (byte*) main::charset4#3 ← phi( main::@4/(byte*) main::charset4#4 )
  (byte) main::bits_gen#16 ← phi( main::@4/(byte) main::bits_gen#5 )
  (byte~) main::$39 ← (byte) main::bits_gen#16 + (byte) 1
  (byte) main::bits_gen#8 ← (byte~) main::$39
  to:main::@5
main::@11: scope:[main]  from main::@5
  (byte*) D018#3 ← phi( main::@5/(byte*) D018#4 )
  (byte*) SCREEN#2 ← phi( main::@5/(byte*) SCREEN#3 )
  (byte*) PROCPORT#2 ← phi( main::@5/(byte*) PROCPORT#4 )
  *((byte*) PROCPORT#2) ← (byte) 55
  asm { cli }
  (byte) main::i#0 ← (byte) 0
  to:main::@6
main::@6: scope:[main]  from main::@11 main::@6
  (byte*) D018#2 ← phi( main::@11/(byte*) D018#3 main::@6/(byte*) D018#2 )
  (byte*) SCREEN#1 ← phi( main::@11/(byte*) SCREEN#2 main::@6/(byte*) SCREEN#1 )
  (byte) main::i#2 ← phi( main::@11/(byte) main::i#0 main::@6/(byte) main::i#1 )
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$44 ← (byte) main::i#1 != (byte) 0
  if((boolean~) main::$44) goto main::@6
  to:main::@12
main::@12: scope:[main]  from main::@6
  (byte*) D018#1 ← phi( main::@6/(byte*) D018#2 )
  *((byte*) D018#1) ← (byte) 25
  to:main::@return
main::@return: scope:[main]  from main::@12
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) D018#14 ← phi( @begin/(byte*) D018#0 )
  (byte*) SCREEN#13 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[]) bits_count#10 ← phi( @begin/(byte[]) bits_count#0 )
  (byte*) CHARSET4#2 ← phi( @begin/(byte*) CHARSET4#0 )
  (byte*) CHARGEN#3 ← phi( @begin/(byte*) CHARGEN#0 )
  (byte*) PROCPORT#3 ← phi( @begin/(byte*) PROCPORT#0 )
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Inversing boolean not (boolean~) main::$9 ← (byte) main::bits#0 < (byte) 2 from (boolean~) main::$8 ← (byte) main::bits#0 >= (byte) 2
Inversing boolean not (boolean~) main::$19 ← (byte) main::bits#1 < (byte) 2 from (boolean~) main::$18 ← (byte) main::bits#1 >= (byte) 2
Inversing boolean not (boolean~) main::$29 ← (byte) main::bits#2 < (byte) 2 from (boolean~) main::$28 ← (byte) main::bits#2 >= (byte) 2
Inversing boolean not (boolean~) main::$38 ← (byte) main::bits#3 < (byte) 2 from (boolean~) main::$37 ← (byte) main::bits#3 >= (byte) 2
Succesful SSA optimization Pass2UnaryNotSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) CHARSET#0 ← (word) 8192
  (byte*) CHARGEN#0 ← (word) 53248
  (byte*) PROCPORT#0 ← (byte) 1
  (byte*) D018#0 ← (word) 53272
  (byte*) CHARSET4#0 ← (word) 10240
  (byte[]) bits_count#0 ← { (byte) 0, (byte) 1, (byte) 1, (byte) 2, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 2, (byte) 3, (byte) 3, (byte) 4 }
  to:@1
main: scope:[main]  from @1
  (byte*) D018#13 ← phi( @1/(byte*) D018#14 )
  (byte*) SCREEN#12 ← phi( @1/(byte*) SCREEN#13 )
  (byte[]) bits_count#5 ← phi( @1/(byte[]) bits_count#10 )
  (byte*) CHARSET4#1 ← phi( @1/(byte*) CHARSET4#2 )
  (byte*) CHARGEN#1 ← phi( @1/(byte*) CHARGEN#3 )
  (byte*) PROCPORT#1 ← phi( @1/(byte*) PROCPORT#3 )
  asm { sei }
  *((byte*) PROCPORT#1) ← (byte) 50
  (byte*) main::chargen#0 ← (byte*) CHARGEN#1
  (byte*) main::charset4#0 ← (byte*) CHARSET4#1
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte*) D018#11 ← phi( main/(byte*) D018#13 main::@5/(byte*) D018#4 )
  (byte*) SCREEN#10 ← phi( main/(byte*) SCREEN#12 main::@5/(byte*) SCREEN#3 )
  (byte*) PROCPORT#11 ← phi( main/(byte*) PROCPORT#1 main::@5/(byte*) PROCPORT#4 )
  (byte*) CHARGEN#10 ← phi( main/(byte*) CHARGEN#1 main::@5/(byte*) CHARGEN#2 )
  (byte*) main::charset4#9 ← phi( main/(byte*) main::charset4#0 main::@5/(byte*) main::charset4#1 )
  (byte[]) bits_count#1 ← phi( main/(byte[]) bits_count#5 main::@5/(byte[]) bits_count#6 )
  (byte*) main::chargen#2 ← phi( main/(byte*) main::chargen#0 main::@5/(byte*) main::chargen#1 )
  (byte) main::bits_gen#0 ← (byte) 0
  (byte*~) main::$0 ← (byte*) main::chargen#2 + (byte) 1
  (byte*) main::chargen1#0 ← (byte*~) main::$0
  (byte~) main::$1 ← *((byte*) main::chargen#2) & (byte) 96
  (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96
  (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2
  (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3
  (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1
  (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2
  (byte~) main::$7 ← (byte[]) bits_count#1 *idx (byte~) main::$6
  (byte) main::bits#0 ← (byte~) main::$7
  (boolean~) main::$9 ← (byte) main::bits#0 < (byte) 2
  if((boolean~) main::$9) goto main::@2
  to:main::@7
main::@2: scope:[main]  from main::@1 main::@7
  (byte*) D018#9 ← phi( main::@1/(byte*) D018#11 main::@7/(byte*) D018#12 )
  (byte*) SCREEN#8 ← phi( main::@1/(byte*) SCREEN#10 main::@7/(byte*) SCREEN#11 )
  (byte*) PROCPORT#9 ← phi( main::@1/(byte*) PROCPORT#11 main::@7/(byte*) PROCPORT#12 )
  (byte*) CHARGEN#8 ← phi( main::@1/(byte*) CHARGEN#10 main::@7/(byte*) CHARGEN#11 )
  (byte*) main::charset4#7 ← phi( main::@1/(byte*) main::charset4#9 main::@7/(byte*) main::charset4#10 )
  (byte[]) bits_count#2 ← phi( main::@1/(byte[]) bits_count#1 main::@7/(byte[]) bits_count#7 )
  (byte*) main::chargen1#1 ← phi( main::@1/(byte*) main::chargen1#0 main::@7/(byte*) main::chargen1#4 )
  (byte*) main::chargen#3 ← phi( main::@1/(byte*) main::chargen#2 main::@7/(byte*) main::chargen#7 )
  (byte) main::bits_gen#9 ← phi( main::@1/(byte) main::bits_gen#0 main::@7/(byte) main::bits_gen#2 )
  (byte~) main::$11 ← (byte) main::bits_gen#9 << (byte) 1
  (byte) main::bits_gen#1 ← (byte~) main::$11
  (byte~) main::$12 ← *((byte*) main::chargen#3) & (byte) 24
  (byte~) main::$13 ← *((byte*) main::chargen1#1) & (byte) 24
  (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2
  (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14
  (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1
  (byte~) main::$17 ← (byte[]) bits_count#2 *idx (byte~) main::$16
  (byte) main::bits#1 ← (byte~) main::$17
  (boolean~) main::$19 ← (byte) main::bits#1 < (byte) 2
  if((boolean~) main::$19) goto main::@3
  to:main::@8
main::@7: scope:[main]  from main::@1
  (byte*) D018#12 ← phi( main::@1/(byte*) D018#11 )
  (byte*) SCREEN#11 ← phi( main::@1/(byte*) SCREEN#10 )
  (byte*) PROCPORT#12 ← phi( main::@1/(byte*) PROCPORT#11 )
  (byte*) CHARGEN#11 ← phi( main::@1/(byte*) CHARGEN#10 )
  (byte*) main::charset4#10 ← phi( main::@1/(byte*) main::charset4#9 )
  (byte[]) bits_count#7 ← phi( main::@1/(byte[]) bits_count#1 )
  (byte*) main::chargen1#4 ← phi( main::@1/(byte*) main::chargen1#0 )
  (byte*) main::chargen#7 ← phi( main::@1/(byte*) main::chargen#2 )
  (byte) main::bits_gen#10 ← phi( main::@1/(byte) main::bits_gen#0 )
  (byte~) main::$10 ← (byte) main::bits_gen#10 + (byte) 1
  (byte) main::bits_gen#2 ← (byte~) main::$10
  to:main::@2
main::@3: scope:[main]  from main::@2 main::@8
  (byte*) D018#7 ← phi( main::@2/(byte*) D018#9 main::@8/(byte*) D018#10 )
  (byte*) SCREEN#6 ← phi( main::@2/(byte*) SCREEN#8 main::@8/(byte*) SCREEN#9 )
  (byte*) PROCPORT#7 ← phi( main::@2/(byte*) PROCPORT#9 main::@8/(byte*) PROCPORT#10 )
  (byte*) CHARGEN#6 ← phi( main::@2/(byte*) CHARGEN#8 main::@8/(byte*) CHARGEN#9 )
  (byte*) main::charset4#5 ← phi( main::@2/(byte*) main::charset4#7 main::@8/(byte*) main::charset4#8 )
  (byte[]) bits_count#3 ← phi( main::@2/(byte[]) bits_count#2 main::@8/(byte[]) bits_count#8 )
  (byte*) main::chargen1#2 ← phi( main::@2/(byte*) main::chargen1#1 main::@8/(byte*) main::chargen1#5 )
  (byte*) main::chargen#4 ← phi( main::@2/(byte*) main::chargen#3 main::@8/(byte*) main::chargen#8 )
  (byte) main::bits_gen#11 ← phi( main::@2/(byte) main::bits_gen#1 main::@8/(byte) main::bits_gen#4 )
  (byte~) main::$21 ← (byte) main::bits_gen#11 << (byte) 1
  (byte) main::bits_gen#3 ← (byte~) main::$21
  (byte~) main::$22 ← *((byte*) main::chargen#4) & (byte) 6
  (byte~) main::$23 ← (byte~) main::$22 << (byte) 1
  (byte~) main::$24 ← *((byte*) main::chargen1#2) & (byte) 6
  (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1
  (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25
  (byte~) main::$27 ← (byte[]) bits_count#3 *idx (byte~) main::$26
  (byte) main::bits#2 ← (byte~) main::$27
  (boolean~) main::$29 ← (byte) main::bits#2 < (byte) 2
  if((boolean~) main::$29) goto main::@4
  to:main::@9
main::@8: scope:[main]  from main::@2
  (byte*) D018#10 ← phi( main::@2/(byte*) D018#9 )
  (byte*) SCREEN#9 ← phi( main::@2/(byte*) SCREEN#8 )
  (byte*) PROCPORT#10 ← phi( main::@2/(byte*) PROCPORT#9 )
  (byte*) CHARGEN#9 ← phi( main::@2/(byte*) CHARGEN#8 )
  (byte*) main::charset4#8 ← phi( main::@2/(byte*) main::charset4#7 )
  (byte[]) bits_count#8 ← phi( main::@2/(byte[]) bits_count#2 )
  (byte*) main::chargen1#5 ← phi( main::@2/(byte*) main::chargen1#1 )
  (byte*) main::chargen#8 ← phi( main::@2/(byte*) main::chargen#3 )
  (byte) main::bits_gen#12 ← phi( main::@2/(byte) main::bits_gen#1 )
  (byte~) main::$20 ← (byte) main::bits_gen#12 + (byte) 1
  (byte) main::bits_gen#4 ← (byte~) main::$20
  to:main::@3
main::@4: scope:[main]  from main::@3 main::@9
  (byte*) D018#6 ← phi( main::@3/(byte*) D018#7 main::@9/(byte*) D018#8 )
  (byte*) SCREEN#5 ← phi( main::@3/(byte*) SCREEN#6 main::@9/(byte*) SCREEN#7 )
  (byte*) PROCPORT#6 ← phi( main::@3/(byte*) PROCPORT#7 main::@9/(byte*) PROCPORT#8 )
  (byte*) CHARGEN#5 ← phi( main::@3/(byte*) CHARGEN#6 main::@9/(byte*) CHARGEN#7 )
  (byte*) main::charset4#4 ← phi( main::@3/(byte*) main::charset4#5 main::@9/(byte*) main::charset4#6 )
  (byte[]) bits_count#4 ← phi( main::@3/(byte[]) bits_count#3 main::@9/(byte[]) bits_count#9 )
  (byte*) main::chargen1#3 ← phi( main::@3/(byte*) main::chargen1#2 main::@9/(byte*) main::chargen1#6 )
  (byte*) main::chargen#5 ← phi( main::@3/(byte*) main::chargen#4 main::@9/(byte*) main::chargen#9 )
  (byte) main::bits_gen#13 ← phi( main::@3/(byte) main::bits_gen#3 main::@9/(byte) main::bits_gen#6 )
  (byte~) main::$31 ← (byte) main::bits_gen#13 << (byte) 1
  (byte) main::bits_gen#5 ← (byte~) main::$31
  (byte~) main::$32 ← *((byte*) main::chargen#5) & (byte) 1
  (byte~) main::$33 ← (byte~) main::$32 << (byte) 2
  (byte~) main::$34 ← *((byte*) main::chargen1#3) & (byte) 1
  (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34
  (byte~) main::$36 ← (byte[]) bits_count#4 *idx (byte~) main::$35
  (byte) main::bits#3 ← (byte~) main::$36
  (boolean~) main::$38 ← (byte) main::bits#3 < (byte) 2
  if((boolean~) main::$38) goto main::@5
  to:main::@10
main::@9: scope:[main]  from main::@3
  (byte*) D018#8 ← phi( main::@3/(byte*) D018#7 )
  (byte*) SCREEN#7 ← phi( main::@3/(byte*) SCREEN#6 )
  (byte*) PROCPORT#8 ← phi( main::@3/(byte*) PROCPORT#7 )
  (byte*) CHARGEN#7 ← phi( main::@3/(byte*) CHARGEN#6 )
  (byte*) main::charset4#6 ← phi( main::@3/(byte*) main::charset4#5 )
  (byte[]) bits_count#9 ← phi( main::@3/(byte[]) bits_count#3 )
  (byte*) main::chargen1#6 ← phi( main::@3/(byte*) main::chargen1#2 )
  (byte*) main::chargen#9 ← phi( main::@3/(byte*) main::chargen#4 )
  (byte) main::bits_gen#14 ← phi( main::@3/(byte) main::bits_gen#3 )
  (byte~) main::$30 ← (byte) main::bits_gen#14 + (byte) 1
  (byte) main::bits_gen#6 ← (byte~) main::$30
  to:main::@4
main::@5: scope:[main]  from main::@10 main::@4
  (byte*) D018#4 ← phi( main::@10/(byte*) D018#5 main::@4/(byte*) D018#6 )
  (byte*) SCREEN#3 ← phi( main::@10/(byte*) SCREEN#4 main::@4/(byte*) SCREEN#5 )
  (byte*) PROCPORT#4 ← phi( main::@10/(byte*) PROCPORT#5 main::@4/(byte*) PROCPORT#6 )
  (byte[]) bits_count#6 ← phi( main::@10/(byte[]) bits_count#11 main::@4/(byte[]) bits_count#4 )
  (byte*) CHARGEN#2 ← phi( main::@10/(byte*) CHARGEN#4 main::@4/(byte*) CHARGEN#5 )
  (byte*) main::chargen#6 ← phi( main::@10/(byte*) main::chargen#10 main::@4/(byte*) main::chargen#5 )
  (byte*) main::charset4#2 ← phi( main::@10/(byte*) main::charset4#3 main::@4/(byte*) main::charset4#4 )
  (byte) main::bits_gen#15 ← phi( main::@10/(byte) main::bits_gen#8 main::@4/(byte) main::bits_gen#5 )
  (byte~) main::$40 ← (byte) main::bits_gen#15 << (byte) 1
  (byte) main::bits_gen#7 ← (byte~) main::$40
  *((byte*) main::charset4#2) ← (byte) main::bits_gen#7
  (byte*) main::charset4#1 ← ++ (byte*) main::charset4#2
  (byte*~) main::$41 ← (byte*) main::chargen#6 + (byte) 2
  (byte*) main::chargen#1 ← (byte*~) main::$41
  (byte*~) main::$42 ← (byte*) CHARGEN#2 + (word) 2048
  (boolean~) main::$43 ← (byte*) main::chargen#1 < (byte*~) main::$42
  if((boolean~) main::$43) goto main::@1
  to:main::@11
main::@10: scope:[main]  from main::@4
  (byte*) D018#5 ← phi( main::@4/(byte*) D018#6 )
  (byte*) SCREEN#4 ← phi( main::@4/(byte*) SCREEN#5 )
  (byte*) PROCPORT#5 ← phi( main::@4/(byte*) PROCPORT#6 )
  (byte[]) bits_count#11 ← phi( main::@4/(byte[]) bits_count#4 )
  (byte*) CHARGEN#4 ← phi( main::@4/(byte*) CHARGEN#5 )
  (byte*) main::chargen#10 ← phi( main::@4/(byte*) main::chargen#5 )
  (byte*) main::charset4#3 ← phi( main::@4/(byte*) main::charset4#4 )
  (byte) main::bits_gen#16 ← phi( main::@4/(byte) main::bits_gen#5 )
  (byte~) main::$39 ← (byte) main::bits_gen#16 + (byte) 1
  (byte) main::bits_gen#8 ← (byte~) main::$39
  to:main::@5
main::@11: scope:[main]  from main::@5
  (byte*) D018#3 ← phi( main::@5/(byte*) D018#4 )
  (byte*) SCREEN#2 ← phi( main::@5/(byte*) SCREEN#3 )
  (byte*) PROCPORT#2 ← phi( main::@5/(byte*) PROCPORT#4 )
  *((byte*) PROCPORT#2) ← (byte) 55
  asm { cli }
  (byte) main::i#0 ← (byte) 0
  to:main::@6
main::@6: scope:[main]  from main::@11 main::@6
  (byte*) D018#2 ← phi( main::@11/(byte*) D018#3 main::@6/(byte*) D018#2 )
  (byte*) SCREEN#1 ← phi( main::@11/(byte*) SCREEN#2 main::@6/(byte*) SCREEN#1 )
  (byte) main::i#2 ← phi( main::@11/(byte) main::i#0 main::@6/(byte) main::i#1 )
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$44 ← (byte) main::i#1 != (byte) 0
  if((boolean~) main::$44) goto main::@6
  to:main::@12
main::@12: scope:[main]  from main::@6
  (byte*) D018#1 ← phi( main::@6/(byte*) D018#2 )
  *((byte*) D018#1) ← (byte) 25
  to:main::@return
main::@return: scope:[main]  from main::@12
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) D018#14 ← phi( @begin/(byte*) D018#0 )
  (byte*) SCREEN#13 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[]) bits_count#10 ← phi( @begin/(byte[]) bits_count#0 )
  (byte*) CHARSET4#2 ← phi( @begin/(byte*) CHARSET4#0 )
  (byte*) CHARGEN#3 ← phi( @begin/(byte*) CHARGEN#0 )
  (byte*) PROCPORT#3 ← phi( @begin/(byte*) PROCPORT#0 )
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Not aliassing across scopes: main::chargen#0 CHARGEN#1
Not aliassing across scopes: main::charset4#0 CHARSET4#1
Alias (byte*) PROCPORT#0 = (byte*) PROCPORT#1 (byte*) PROCPORT#3 
Alias (byte*) CHARGEN#0 = (byte*) CHARGEN#1 (byte*) CHARGEN#3 
Alias (byte*) CHARSET4#0 = (byte*) CHARSET4#1 (byte*) CHARSET4#2 
Alias (byte[]) bits_count#0 = (byte[]) bits_count#5 (byte[]) bits_count#10 
Alias (byte*) SCREEN#0 = (byte*) SCREEN#12 (byte*) SCREEN#13 
Alias (byte*) D018#0 = (byte*) D018#13 (byte*) D018#14 
Alias (byte*) main::chargen1#0 = (byte*~) main::$0 (byte*) main::chargen1#4 
Alias (byte) main::bits#0 = (byte~) main::$7 
Alias (byte) main::bits_gen#1 = (byte~) main::$11 (byte) main::bits_gen#12 
Alias (byte) main::bits#1 = (byte~) main::$17 
Alias (byte) main::bits_gen#0 = (byte) main::bits_gen#10 
Alias (byte*) main::chargen#2 = (byte*) main::chargen#7 
Alias (byte[]) bits_count#1 = (byte[]) bits_count#7 
Alias (byte*) main::charset4#10 = (byte*) main::charset4#9 
Alias (byte*) CHARGEN#10 = (byte*) CHARGEN#11 
Alias (byte*) PROCPORT#11 = (byte*) PROCPORT#12 
Alias (byte*) SCREEN#10 = (byte*) SCREEN#11 
Alias (byte*) D018#11 = (byte*) D018#12 
Alias (byte) main::bits_gen#2 = (byte~) main::$10 
Alias (byte) main::bits_gen#14 = (byte) main::bits_gen#3 (byte~) main::$21 
Alias (byte) main::bits#2 = (byte~) main::$27 
Alias (byte*) main::chargen#3 = (byte*) main::chargen#8 
Alias (byte*) main::chargen1#1 = (byte*) main::chargen1#5 
Alias (byte[]) bits_count#2 = (byte[]) bits_count#8 
Alias (byte*) main::charset4#7 = (byte*) main::charset4#8 
Alias (byte*) CHARGEN#8 = (byte*) CHARGEN#9 
Alias (byte*) PROCPORT#10 = (byte*) PROCPORT#9 
Alias (byte*) SCREEN#8 = (byte*) SCREEN#9 
Alias (byte*) D018#10 = (byte*) D018#9 
Alias (byte) main::bits_gen#4 = (byte~) main::$20 
Alias (byte) main::bits_gen#16 = (byte) main::bits_gen#5 (byte~) main::$31 
Alias (byte) main::bits#3 = (byte~) main::$36 
Alias (byte*) main::chargen#4 = (byte*) main::chargen#9 
Alias (byte*) main::chargen1#2 = (byte*) main::chargen1#6 
Alias (byte[]) bits_count#3 = (byte[]) bits_count#9 
Alias (byte*) main::charset4#5 = (byte*) main::charset4#6 
Alias (byte*) CHARGEN#6 = (byte*) CHARGEN#7 
Alias (byte*) PROCPORT#7 = (byte*) PROCPORT#8 
Alias (byte*) SCREEN#6 = (byte*) SCREEN#7 
Alias (byte*) D018#7 = (byte*) D018#8 
Alias (byte) main::bits_gen#6 = (byte~) main::$30 
Alias (byte) main::bits_gen#7 = (byte~) main::$40 
Alias (byte*) main::chargen#1 = (byte*~) main::$41 
Alias (byte*) main::charset4#3 = (byte*) main::charset4#4 
Alias (byte*) main::chargen#10 = (byte*) main::chargen#5 
Alias (byte*) CHARGEN#4 = (byte*) CHARGEN#5 
Alias (byte[]) bits_count#11 = (byte[]) bits_count#4 
Alias (byte*) PROCPORT#5 = (byte*) PROCPORT#6 
Alias (byte*) SCREEN#4 = (byte*) SCREEN#5 
Alias (byte*) D018#5 = (byte*) D018#6 
Alias (byte) main::bits_gen#8 = (byte~) main::$39 
Alias (byte*) PROCPORT#2 = (byte*) PROCPORT#4 
Alias (byte*) SCREEN#2 = (byte*) SCREEN#3 
Alias (byte*) D018#3 = (byte*) D018#4 
Alias (byte*) D018#1 = (byte*) D018#2 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) CHARSET#0 ← (word) 8192
  (byte*) CHARGEN#0 ← (word) 53248
  (byte*) PROCPORT#0 ← (byte) 1
  (byte*) D018#0 ← (word) 53272
  (byte*) CHARSET4#0 ← (word) 10240
  (byte[]) bits_count#0 ← { (byte) 0, (byte) 1, (byte) 1, (byte) 2, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 2, (byte) 3, (byte) 3, (byte) 4 }
  to:@1
main: scope:[main]  from @1
  asm { sei }
  *((byte*) PROCPORT#0) ← (byte) 50
  (byte*) main::chargen#0 ← (byte*) CHARGEN#0
  (byte*) main::charset4#0 ← (byte*) CHARSET4#0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte*) D018#11 ← phi( main/(byte*) D018#0 main::@5/(byte*) D018#3 )
  (byte*) SCREEN#10 ← phi( main/(byte*) SCREEN#0 main::@5/(byte*) SCREEN#2 )
  (byte*) PROCPORT#11 ← phi( main/(byte*) PROCPORT#0 main::@5/(byte*) PROCPORT#2 )
  (byte*) CHARGEN#10 ← phi( main/(byte*) CHARGEN#0 main::@5/(byte*) CHARGEN#2 )
  (byte*) main::charset4#10 ← phi( main/(byte*) main::charset4#0 main::@5/(byte*) main::charset4#1 )
  (byte[]) bits_count#1 ← phi( main/(byte[]) bits_count#0 main::@5/(byte[]) bits_count#6 )
  (byte*) main::chargen#2 ← phi( main/(byte*) main::chargen#0 main::@5/(byte*) main::chargen#1 )
  (byte) main::bits_gen#0 ← (byte) 0
  (byte*) main::chargen1#0 ← (byte*) main::chargen#2 + (byte) 1
  (byte~) main::$1 ← *((byte*) main::chargen#2) & (byte) 96
  (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96
  (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2
  (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3
  (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1
  (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2
  (byte) main::bits#0 ← (byte[]) bits_count#1 *idx (byte~) main::$6
  (boolean~) main::$9 ← (byte) main::bits#0 < (byte) 2
  if((boolean~) main::$9) goto main::@2
  to:main::@7
main::@2: scope:[main]  from main::@1 main::@7
  (byte*) D018#10 ← phi( main::@1/(byte*) D018#11 main::@7/(byte*) D018#11 )
  (byte*) SCREEN#8 ← phi( main::@1/(byte*) SCREEN#10 main::@7/(byte*) SCREEN#10 )
  (byte*) PROCPORT#10 ← phi( main::@1/(byte*) PROCPORT#11 main::@7/(byte*) PROCPORT#11 )
  (byte*) CHARGEN#8 ← phi( main::@1/(byte*) CHARGEN#10 main::@7/(byte*) CHARGEN#10 )
  (byte*) main::charset4#7 ← phi( main::@1/(byte*) main::charset4#10 main::@7/(byte*) main::charset4#10 )
  (byte[]) bits_count#2 ← phi( main::@1/(byte[]) bits_count#1 main::@7/(byte[]) bits_count#1 )
  (byte*) main::chargen1#1 ← phi( main::@1/(byte*) main::chargen1#0 main::@7/(byte*) main::chargen1#0 )
  (byte*) main::chargen#3 ← phi( main::@1/(byte*) main::chargen#2 main::@7/(byte*) main::chargen#2 )
  (byte) main::bits_gen#9 ← phi( main::@1/(byte) main::bits_gen#0 main::@7/(byte) main::bits_gen#2 )
  (byte) main::bits_gen#1 ← (byte) main::bits_gen#9 << (byte) 1
  (byte~) main::$12 ← *((byte*) main::chargen#3) & (byte) 24
  (byte~) main::$13 ← *((byte*) main::chargen1#1) & (byte) 24
  (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2
  (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14
  (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1
  (byte) main::bits#1 ← (byte[]) bits_count#2 *idx (byte~) main::$16
  (boolean~) main::$19 ← (byte) main::bits#1 < (byte) 2
  if((boolean~) main::$19) goto main::@3
  to:main::@8
main::@7: scope:[main]  from main::@1
  (byte) main::bits_gen#2 ← (byte) main::bits_gen#0 + (byte) 1
  to:main::@2
main::@3: scope:[main]  from main::@2 main::@8
  (byte*) D018#7 ← phi( main::@2/(byte*) D018#10 main::@8/(byte*) D018#10 )
  (byte*) SCREEN#6 ← phi( main::@2/(byte*) SCREEN#8 main::@8/(byte*) SCREEN#8 )
  (byte*) PROCPORT#7 ← phi( main::@2/(byte*) PROCPORT#10 main::@8/(byte*) PROCPORT#10 )
  (byte*) CHARGEN#6 ← phi( main::@2/(byte*) CHARGEN#8 main::@8/(byte*) CHARGEN#8 )
  (byte*) main::charset4#5 ← phi( main::@2/(byte*) main::charset4#7 main::@8/(byte*) main::charset4#7 )
  (byte[]) bits_count#3 ← phi( main::@2/(byte[]) bits_count#2 main::@8/(byte[]) bits_count#2 )
  (byte*) main::chargen1#2 ← phi( main::@2/(byte*) main::chargen1#1 main::@8/(byte*) main::chargen1#1 )
  (byte*) main::chargen#4 ← phi( main::@2/(byte*) main::chargen#3 main::@8/(byte*) main::chargen#3 )
  (byte) main::bits_gen#11 ← phi( main::@2/(byte) main::bits_gen#1 main::@8/(byte) main::bits_gen#4 )
  (byte) main::bits_gen#14 ← (byte) main::bits_gen#11 << (byte) 1
  (byte~) main::$22 ← *((byte*) main::chargen#4) & (byte) 6
  (byte~) main::$23 ← (byte~) main::$22 << (byte) 1
  (byte~) main::$24 ← *((byte*) main::chargen1#2) & (byte) 6
  (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1
  (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25
  (byte) main::bits#2 ← (byte[]) bits_count#3 *idx (byte~) main::$26
  (boolean~) main::$29 ← (byte) main::bits#2 < (byte) 2
  if((boolean~) main::$29) goto main::@4
  to:main::@9
main::@8: scope:[main]  from main::@2
  (byte) main::bits_gen#4 ← (byte) main::bits_gen#1 + (byte) 1
  to:main::@3
main::@4: scope:[main]  from main::@3 main::@9
  (byte*) D018#5 ← phi( main::@3/(byte*) D018#7 main::@9/(byte*) D018#7 )
  (byte*) SCREEN#4 ← phi( main::@3/(byte*) SCREEN#6 main::@9/(byte*) SCREEN#6 )
  (byte*) PROCPORT#5 ← phi( main::@3/(byte*) PROCPORT#7 main::@9/(byte*) PROCPORT#7 )
  (byte*) CHARGEN#4 ← phi( main::@3/(byte*) CHARGEN#6 main::@9/(byte*) CHARGEN#6 )
  (byte*) main::charset4#3 ← phi( main::@3/(byte*) main::charset4#5 main::@9/(byte*) main::charset4#5 )
  (byte[]) bits_count#11 ← phi( main::@3/(byte[]) bits_count#3 main::@9/(byte[]) bits_count#3 )
  (byte*) main::chargen1#3 ← phi( main::@3/(byte*) main::chargen1#2 main::@9/(byte*) main::chargen1#2 )
  (byte*) main::chargen#10 ← phi( main::@3/(byte*) main::chargen#4 main::@9/(byte*) main::chargen#4 )
  (byte) main::bits_gen#13 ← phi( main::@3/(byte) main::bits_gen#14 main::@9/(byte) main::bits_gen#6 )
  (byte) main::bits_gen#16 ← (byte) main::bits_gen#13 << (byte) 1
  (byte~) main::$32 ← *((byte*) main::chargen#10) & (byte) 1
  (byte~) main::$33 ← (byte~) main::$32 << (byte) 2
  (byte~) main::$34 ← *((byte*) main::chargen1#3) & (byte) 1
  (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34
  (byte) main::bits#3 ← (byte[]) bits_count#11 *idx (byte~) main::$35
  (boolean~) main::$38 ← (byte) main::bits#3 < (byte) 2
  if((boolean~) main::$38) goto main::@5
  to:main::@10
main::@9: scope:[main]  from main::@3
  (byte) main::bits_gen#6 ← (byte) main::bits_gen#14 + (byte) 1
  to:main::@4
main::@5: scope:[main]  from main::@10 main::@4
  (byte*) D018#3 ← phi( main::@10/(byte*) D018#5 main::@4/(byte*) D018#5 )
  (byte*) SCREEN#2 ← phi( main::@10/(byte*) SCREEN#4 main::@4/(byte*) SCREEN#4 )
  (byte*) PROCPORT#2 ← phi( main::@10/(byte*) PROCPORT#5 main::@4/(byte*) PROCPORT#5 )
  (byte[]) bits_count#6 ← phi( main::@10/(byte[]) bits_count#11 main::@4/(byte[]) bits_count#11 )
  (byte*) CHARGEN#2 ← phi( main::@10/(byte*) CHARGEN#4 main::@4/(byte*) CHARGEN#4 )
  (byte*) main::chargen#6 ← phi( main::@10/(byte*) main::chargen#10 main::@4/(byte*) main::chargen#10 )
  (byte*) main::charset4#2 ← phi( main::@10/(byte*) main::charset4#3 main::@4/(byte*) main::charset4#3 )
  (byte) main::bits_gen#15 ← phi( main::@10/(byte) main::bits_gen#8 main::@4/(byte) main::bits_gen#16 )
  (byte) main::bits_gen#7 ← (byte) main::bits_gen#15 << (byte) 1
  *((byte*) main::charset4#2) ← (byte) main::bits_gen#7
  (byte*) main::charset4#1 ← ++ (byte*) main::charset4#2
  (byte*) main::chargen#1 ← (byte*) main::chargen#6 + (byte) 2
  (byte*~) main::$42 ← (byte*) CHARGEN#2 + (word) 2048
  (boolean~) main::$43 ← (byte*) main::chargen#1 < (byte*~) main::$42
  if((boolean~) main::$43) goto main::@1
  to:main::@11
main::@10: scope:[main]  from main::@4
  (byte) main::bits_gen#8 ← (byte) main::bits_gen#16 + (byte) 1
  to:main::@5
main::@11: scope:[main]  from main::@5
  *((byte*) PROCPORT#2) ← (byte) 55
  asm { cli }
  (byte) main::i#0 ← (byte) 0
  to:main::@6
main::@6: scope:[main]  from main::@11 main::@6
  (byte*) D018#1 ← phi( main::@11/(byte*) D018#3 main::@6/(byte*) D018#1 )
  (byte*) SCREEN#1 ← phi( main::@11/(byte*) SCREEN#2 main::@6/(byte*) SCREEN#1 )
  (byte) main::i#2 ← phi( main::@11/(byte) main::i#0 main::@6/(byte) main::i#1 )
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$44 ← (byte) main::i#1 != (byte) 0
  if((boolean~) main::$44) goto main::@6
  to:main::@12
main::@12: scope:[main]  from main::@6
  *((byte*) D018#1) ← (byte) 25
  to:main::@return
main::@return: scope:[main]  from main::@12
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Not aliassing across scopes: main::chargen#0 CHARGEN#0
Not aliassing across scopes: main::charset4#0 CHARSET4#0
Alias (byte*) main::chargen#10 = (byte*) main::chargen#3 (byte*) main::chargen#2 (byte*) main::chargen#4 (byte*) main::chargen#6 
Alias (byte*) main::chargen1#0 = (byte*) main::chargen1#1 (byte*) main::chargen1#2 (byte*) main::chargen1#3 
Alias (byte[]) bits_count#1 = (byte[]) bits_count#2 (byte[]) bits_count#3 (byte[]) bits_count#11 (byte[]) bits_count#6 
Alias (byte*) main::charset4#10 = (byte*) main::charset4#7 (byte*) main::charset4#5 (byte*) main::charset4#3 (byte*) main::charset4#2 
Alias (byte*) CHARGEN#10 = (byte*) CHARGEN#8 (byte*) CHARGEN#6 (byte*) CHARGEN#4 (byte*) CHARGEN#2 
Alias (byte*) PROCPORT#10 = (byte*) PROCPORT#11 (byte*) PROCPORT#7 (byte*) PROCPORT#5 (byte*) PROCPORT#2 
Alias (byte*) SCREEN#10 = (byte*) SCREEN#8 (byte*) SCREEN#6 (byte*) SCREEN#4 (byte*) SCREEN#2 
Alias (byte*) D018#10 = (byte*) D018#11 (byte*) D018#7 (byte*) D018#5 (byte*) D018#3 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) CHARSET#0 ← (word) 8192
  (byte*) CHARGEN#0 ← (word) 53248
  (byte*) PROCPORT#0 ← (byte) 1
  (byte*) D018#0 ← (word) 53272
  (byte*) CHARSET4#0 ← (word) 10240
  (byte[]) bits_count#0 ← { (byte) 0, (byte) 1, (byte) 1, (byte) 2, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 2, (byte) 3, (byte) 3, (byte) 4 }
  to:@1
main: scope:[main]  from @1
  asm { sei }
  *((byte*) PROCPORT#0) ← (byte) 50
  (byte*) main::chargen#0 ← (byte*) CHARGEN#0
  (byte*) main::charset4#0 ← (byte*) CHARSET4#0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte*) D018#10 ← phi( main/(byte*) D018#0 main::@5/(byte*) D018#10 )
  (byte*) SCREEN#10 ← phi( main/(byte*) SCREEN#0 main::@5/(byte*) SCREEN#10 )
  (byte*) PROCPORT#10 ← phi( main/(byte*) PROCPORT#0 main::@5/(byte*) PROCPORT#10 )
  (byte*) CHARGEN#10 ← phi( main/(byte*) CHARGEN#0 main::@5/(byte*) CHARGEN#10 )
  (byte*) main::charset4#10 ← phi( main/(byte*) main::charset4#0 main::@5/(byte*) main::charset4#1 )
  (byte[]) bits_count#1 ← phi( main/(byte[]) bits_count#0 main::@5/(byte[]) bits_count#1 )
  (byte*) main::chargen#10 ← phi( main/(byte*) main::chargen#0 main::@5/(byte*) main::chargen#1 )
  (byte) main::bits_gen#0 ← (byte) 0
  (byte*) main::chargen1#0 ← (byte*) main::chargen#10 + (byte) 1
  (byte~) main::$1 ← *((byte*) main::chargen#10) & (byte) 96
  (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96
  (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2
  (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3
  (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1
  (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2
  (byte) main::bits#0 ← (byte[]) bits_count#1 *idx (byte~) main::$6
  (boolean~) main::$9 ← (byte) main::bits#0 < (byte) 2
  if((boolean~) main::$9) goto main::@2
  to:main::@7
main::@2: scope:[main]  from main::@1 main::@7
  (byte) main::bits_gen#9 ← phi( main::@1/(byte) main::bits_gen#0 main::@7/(byte) main::bits_gen#2 )
  (byte) main::bits_gen#1 ← (byte) main::bits_gen#9 << (byte) 1
  (byte~) main::$12 ← *((byte*) main::chargen#10) & (byte) 24
  (byte~) main::$13 ← *((byte*) main::chargen1#0) & (byte) 24
  (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2
  (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14
  (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1
  (byte) main::bits#1 ← (byte[]) bits_count#1 *idx (byte~) main::$16
  (boolean~) main::$19 ← (byte) main::bits#1 < (byte) 2
  if((boolean~) main::$19) goto main::@3
  to:main::@8
main::@7: scope:[main]  from main::@1
  (byte) main::bits_gen#2 ← (byte) main::bits_gen#0 + (byte) 1
  to:main::@2
main::@3: scope:[main]  from main::@2 main::@8
  (byte) main::bits_gen#11 ← phi( main::@2/(byte) main::bits_gen#1 main::@8/(byte) main::bits_gen#4 )
  (byte) main::bits_gen#14 ← (byte) main::bits_gen#11 << (byte) 1
  (byte~) main::$22 ← *((byte*) main::chargen#10) & (byte) 6
  (byte~) main::$23 ← (byte~) main::$22 << (byte) 1
  (byte~) main::$24 ← *((byte*) main::chargen1#0) & (byte) 6
  (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1
  (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25
  (byte) main::bits#2 ← (byte[]) bits_count#1 *idx (byte~) main::$26
  (boolean~) main::$29 ← (byte) main::bits#2 < (byte) 2
  if((boolean~) main::$29) goto main::@4
  to:main::@9
main::@8: scope:[main]  from main::@2
  (byte) main::bits_gen#4 ← (byte) main::bits_gen#1 + (byte) 1
  to:main::@3
main::@4: scope:[main]  from main::@3 main::@9
  (byte) main::bits_gen#13 ← phi( main::@3/(byte) main::bits_gen#14 main::@9/(byte) main::bits_gen#6 )
  (byte) main::bits_gen#16 ← (byte) main::bits_gen#13 << (byte) 1
  (byte~) main::$32 ← *((byte*) main::chargen#10) & (byte) 1
  (byte~) main::$33 ← (byte~) main::$32 << (byte) 2
  (byte~) main::$34 ← *((byte*) main::chargen1#0) & (byte) 1
  (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34
  (byte) main::bits#3 ← (byte[]) bits_count#1 *idx (byte~) main::$35
  (boolean~) main::$38 ← (byte) main::bits#3 < (byte) 2
  if((boolean~) main::$38) goto main::@5
  to:main::@10
main::@9: scope:[main]  from main::@3
  (byte) main::bits_gen#6 ← (byte) main::bits_gen#14 + (byte) 1
  to:main::@4
main::@5: scope:[main]  from main::@10 main::@4
  (byte) main::bits_gen#15 ← phi( main::@10/(byte) main::bits_gen#8 main::@4/(byte) main::bits_gen#16 )
  (byte) main::bits_gen#7 ← (byte) main::bits_gen#15 << (byte) 1
  *((byte*) main::charset4#10) ← (byte) main::bits_gen#7
  (byte*) main::charset4#1 ← ++ (byte*) main::charset4#10
  (byte*) main::chargen#1 ← (byte*) main::chargen#10 + (byte) 2
  (byte*~) main::$42 ← (byte*) CHARGEN#10 + (word) 2048
  (boolean~) main::$43 ← (byte*) main::chargen#1 < (byte*~) main::$42
  if((boolean~) main::$43) goto main::@1
  to:main::@11
main::@10: scope:[main]  from main::@4
  (byte) main::bits_gen#8 ← (byte) main::bits_gen#16 + (byte) 1
  to:main::@5
main::@11: scope:[main]  from main::@5
  *((byte*) PROCPORT#10) ← (byte) 55
  asm { cli }
  (byte) main::i#0 ← (byte) 0
  to:main::@6
main::@6: scope:[main]  from main::@11 main::@6
  (byte*) D018#1 ← phi( main::@11/(byte*) D018#10 main::@6/(byte*) D018#1 )
  (byte*) SCREEN#1 ← phi( main::@11/(byte*) SCREEN#10 main::@6/(byte*) SCREEN#1 )
  (byte) main::i#2 ← phi( main::@11/(byte) main::i#0 main::@6/(byte) main::i#1 )
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$44 ← (byte) main::i#1 != (byte) 0
  if((boolean~) main::$44) goto main::@6
  to:main::@12
main::@12: scope:[main]  from main::@6
  *((byte*) D018#1) ← (byte) 25
  to:main::@return
main::@return: scope:[main]  from main::@12
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Not aliassing across scopes: main::chargen#0 CHARGEN#0
Not aliassing across scopes: main::charset4#0 CHARSET4#0
Self Phi Eliminated (byte[]) bits_count#1
Self Phi Eliminated (byte*) CHARGEN#10
Self Phi Eliminated (byte*) PROCPORT#10
Self Phi Eliminated (byte*) SCREEN#10
Self Phi Eliminated (byte*) D018#10
Self Phi Eliminated (byte*) SCREEN#1
Self Phi Eliminated (byte*) D018#1
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) CHARSET#0 ← (word) 8192
  (byte*) CHARGEN#0 ← (word) 53248
  (byte*) PROCPORT#0 ← (byte) 1
  (byte*) D018#0 ← (word) 53272
  (byte*) CHARSET4#0 ← (word) 10240
  (byte[]) bits_count#0 ← { (byte) 0, (byte) 1, (byte) 1, (byte) 2, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 2, (byte) 3, (byte) 3, (byte) 4 }
  to:@1
main: scope:[main]  from @1
  asm { sei }
  *((byte*) PROCPORT#0) ← (byte) 50
  (byte*) main::chargen#0 ← (byte*) CHARGEN#0
  (byte*) main::charset4#0 ← (byte*) CHARSET4#0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte*) D018#10 ← phi( main/(byte*) D018#0 )
  (byte*) SCREEN#10 ← phi( main/(byte*) SCREEN#0 )
  (byte*) PROCPORT#10 ← phi( main/(byte*) PROCPORT#0 )
  (byte*) CHARGEN#10 ← phi( main/(byte*) CHARGEN#0 )
  (byte*) main::charset4#10 ← phi( main/(byte*) main::charset4#0 main::@5/(byte*) main::charset4#1 )
  (byte[]) bits_count#1 ← phi( main/(byte[]) bits_count#0 )
  (byte*) main::chargen#10 ← phi( main/(byte*) main::chargen#0 main::@5/(byte*) main::chargen#1 )
  (byte) main::bits_gen#0 ← (byte) 0
  (byte*) main::chargen1#0 ← (byte*) main::chargen#10 + (byte) 1
  (byte~) main::$1 ← *((byte*) main::chargen#10) & (byte) 96
  (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96
  (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2
  (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3
  (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1
  (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2
  (byte) main::bits#0 ← (byte[]) bits_count#1 *idx (byte~) main::$6
  (boolean~) main::$9 ← (byte) main::bits#0 < (byte) 2
  if((boolean~) main::$9) goto main::@2
  to:main::@7
main::@2: scope:[main]  from main::@1 main::@7
  (byte) main::bits_gen#9 ← phi( main::@1/(byte) main::bits_gen#0 main::@7/(byte) main::bits_gen#2 )
  (byte) main::bits_gen#1 ← (byte) main::bits_gen#9 << (byte) 1
  (byte~) main::$12 ← *((byte*) main::chargen#10) & (byte) 24
  (byte~) main::$13 ← *((byte*) main::chargen1#0) & (byte) 24
  (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2
  (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14
  (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1
  (byte) main::bits#1 ← (byte[]) bits_count#1 *idx (byte~) main::$16
  (boolean~) main::$19 ← (byte) main::bits#1 < (byte) 2
  if((boolean~) main::$19) goto main::@3
  to:main::@8
main::@7: scope:[main]  from main::@1
  (byte) main::bits_gen#2 ← (byte) main::bits_gen#0 + (byte) 1
  to:main::@2
main::@3: scope:[main]  from main::@2 main::@8
  (byte) main::bits_gen#11 ← phi( main::@2/(byte) main::bits_gen#1 main::@8/(byte) main::bits_gen#4 )
  (byte) main::bits_gen#14 ← (byte) main::bits_gen#11 << (byte) 1
  (byte~) main::$22 ← *((byte*) main::chargen#10) & (byte) 6
  (byte~) main::$23 ← (byte~) main::$22 << (byte) 1
  (byte~) main::$24 ← *((byte*) main::chargen1#0) & (byte) 6
  (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1
  (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25
  (byte) main::bits#2 ← (byte[]) bits_count#1 *idx (byte~) main::$26
  (boolean~) main::$29 ← (byte) main::bits#2 < (byte) 2
  if((boolean~) main::$29) goto main::@4
  to:main::@9
main::@8: scope:[main]  from main::@2
  (byte) main::bits_gen#4 ← (byte) main::bits_gen#1 + (byte) 1
  to:main::@3
main::@4: scope:[main]  from main::@3 main::@9
  (byte) main::bits_gen#13 ← phi( main::@3/(byte) main::bits_gen#14 main::@9/(byte) main::bits_gen#6 )
  (byte) main::bits_gen#16 ← (byte) main::bits_gen#13 << (byte) 1
  (byte~) main::$32 ← *((byte*) main::chargen#10) & (byte) 1
  (byte~) main::$33 ← (byte~) main::$32 << (byte) 2
  (byte~) main::$34 ← *((byte*) main::chargen1#0) & (byte) 1
  (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34
  (byte) main::bits#3 ← (byte[]) bits_count#1 *idx (byte~) main::$35
  (boolean~) main::$38 ← (byte) main::bits#3 < (byte) 2
  if((boolean~) main::$38) goto main::@5
  to:main::@10
main::@9: scope:[main]  from main::@3
  (byte) main::bits_gen#6 ← (byte) main::bits_gen#14 + (byte) 1
  to:main::@4
main::@5: scope:[main]  from main::@10 main::@4
  (byte) main::bits_gen#15 ← phi( main::@10/(byte) main::bits_gen#8 main::@4/(byte) main::bits_gen#16 )
  (byte) main::bits_gen#7 ← (byte) main::bits_gen#15 << (byte) 1
  *((byte*) main::charset4#10) ← (byte) main::bits_gen#7
  (byte*) main::charset4#1 ← ++ (byte*) main::charset4#10
  (byte*) main::chargen#1 ← (byte*) main::chargen#10 + (byte) 2
  (byte*~) main::$42 ← (byte*) CHARGEN#10 + (word) 2048
  (boolean~) main::$43 ← (byte*) main::chargen#1 < (byte*~) main::$42
  if((boolean~) main::$43) goto main::@1
  to:main::@11
main::@10: scope:[main]  from main::@4
  (byte) main::bits_gen#8 ← (byte) main::bits_gen#16 + (byte) 1
  to:main::@5
main::@11: scope:[main]  from main::@5
  *((byte*) PROCPORT#10) ← (byte) 55
  asm { cli }
  (byte) main::i#0 ← (byte) 0
  to:main::@6
main::@6: scope:[main]  from main::@11 main::@6
  (byte*) D018#1 ← phi( main::@11/(byte*) D018#10 )
  (byte*) SCREEN#1 ← phi( main::@11/(byte*) SCREEN#10 )
  (byte) main::i#2 ← phi( main::@11/(byte) main::i#0 main::@6/(byte) main::i#1 )
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$44 ← (byte) main::i#1 != (byte) 0
  if((boolean~) main::$44) goto main::@6
  to:main::@12
main::@12: scope:[main]  from main::@6
  *((byte*) D018#1) ← (byte) 25
  to:main::@return
main::@return: scope:[main]  from main::@12
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Redundant Phi (byte[]) bits_count#1 (byte[]) bits_count#0
Redundant Phi (byte*) CHARGEN#10 (byte*) CHARGEN#0
Redundant Phi (byte*) PROCPORT#10 (byte*) PROCPORT#0
Redundant Phi (byte*) SCREEN#10 (byte*) SCREEN#0
Redundant Phi (byte*) D018#10 (byte*) D018#0
Redundant Phi (byte*) SCREEN#1 (byte*) SCREEN#10
Redundant Phi (byte*) D018#1 (byte*) D018#10
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) CHARSET#0 ← (word) 8192
  (byte*) CHARGEN#0 ← (word) 53248
  (byte*) PROCPORT#0 ← (byte) 1
  (byte*) D018#0 ← (word) 53272
  (byte*) CHARSET4#0 ← (word) 10240
  (byte[]) bits_count#0 ← { (byte) 0, (byte) 1, (byte) 1, (byte) 2, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 2, (byte) 3, (byte) 3, (byte) 4 }
  to:@1
main: scope:[main]  from @1
  asm { sei }
  *((byte*) PROCPORT#0) ← (byte) 50
  (byte*) main::chargen#0 ← (byte*) CHARGEN#0
  (byte*) main::charset4#0 ← (byte*) CHARSET4#0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte*) main::charset4#10 ← phi( main/(byte*) main::charset4#0 main::@5/(byte*) main::charset4#1 )
  (byte*) main::chargen#10 ← phi( main/(byte*) main::chargen#0 main::@5/(byte*) main::chargen#1 )
  (byte) main::bits_gen#0 ← (byte) 0
  (byte*) main::chargen1#0 ← (byte*) main::chargen#10 + (byte) 1
  (byte~) main::$1 ← *((byte*) main::chargen#10) & (byte) 96
  (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96
  (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2
  (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3
  (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1
  (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2
  (byte) main::bits#0 ← (byte[]) bits_count#0 *idx (byte~) main::$6
  (boolean~) main::$9 ← (byte) main::bits#0 < (byte) 2
  if((boolean~) main::$9) goto main::@2
  to:main::@7
main::@2: scope:[main]  from main::@1 main::@7
  (byte) main::bits_gen#9 ← phi( main::@1/(byte) main::bits_gen#0 main::@7/(byte) main::bits_gen#2 )
  (byte) main::bits_gen#1 ← (byte) main::bits_gen#9 << (byte) 1
  (byte~) main::$12 ← *((byte*) main::chargen#10) & (byte) 24
  (byte~) main::$13 ← *((byte*) main::chargen1#0) & (byte) 24
  (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2
  (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14
  (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1
  (byte) main::bits#1 ← (byte[]) bits_count#0 *idx (byte~) main::$16
  (boolean~) main::$19 ← (byte) main::bits#1 < (byte) 2
  if((boolean~) main::$19) goto main::@3
  to:main::@8
main::@7: scope:[main]  from main::@1
  (byte) main::bits_gen#2 ← (byte) main::bits_gen#0 + (byte) 1
  to:main::@2
main::@3: scope:[main]  from main::@2 main::@8
  (byte) main::bits_gen#11 ← phi( main::@2/(byte) main::bits_gen#1 main::@8/(byte) main::bits_gen#4 )
  (byte) main::bits_gen#14 ← (byte) main::bits_gen#11 << (byte) 1
  (byte~) main::$22 ← *((byte*) main::chargen#10) & (byte) 6
  (byte~) main::$23 ← (byte~) main::$22 << (byte) 1
  (byte~) main::$24 ← *((byte*) main::chargen1#0) & (byte) 6
  (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1
  (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25
  (byte) main::bits#2 ← (byte[]) bits_count#0 *idx (byte~) main::$26
  (boolean~) main::$29 ← (byte) main::bits#2 < (byte) 2
  if((boolean~) main::$29) goto main::@4
  to:main::@9
main::@8: scope:[main]  from main::@2
  (byte) main::bits_gen#4 ← (byte) main::bits_gen#1 + (byte) 1
  to:main::@3
main::@4: scope:[main]  from main::@3 main::@9
  (byte) main::bits_gen#13 ← phi( main::@3/(byte) main::bits_gen#14 main::@9/(byte) main::bits_gen#6 )
  (byte) main::bits_gen#16 ← (byte) main::bits_gen#13 << (byte) 1
  (byte~) main::$32 ← *((byte*) main::chargen#10) & (byte) 1
  (byte~) main::$33 ← (byte~) main::$32 << (byte) 2
  (byte~) main::$34 ← *((byte*) main::chargen1#0) & (byte) 1
  (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34
  (byte) main::bits#3 ← (byte[]) bits_count#0 *idx (byte~) main::$35
  (boolean~) main::$38 ← (byte) main::bits#3 < (byte) 2
  if((boolean~) main::$38) goto main::@5
  to:main::@10
main::@9: scope:[main]  from main::@3
  (byte) main::bits_gen#6 ← (byte) main::bits_gen#14 + (byte) 1
  to:main::@4
main::@5: scope:[main]  from main::@10 main::@4
  (byte) main::bits_gen#15 ← phi( main::@10/(byte) main::bits_gen#8 main::@4/(byte) main::bits_gen#16 )
  (byte) main::bits_gen#7 ← (byte) main::bits_gen#15 << (byte) 1
  *((byte*) main::charset4#10) ← (byte) main::bits_gen#7
  (byte*) main::charset4#1 ← ++ (byte*) main::charset4#10
  (byte*) main::chargen#1 ← (byte*) main::chargen#10 + (byte) 2
  (byte*~) main::$42 ← (byte*) CHARGEN#0 + (word) 2048
  (boolean~) main::$43 ← (byte*) main::chargen#1 < (byte*~) main::$42
  if((boolean~) main::$43) goto main::@1
  to:main::@11
main::@10: scope:[main]  from main::@4
  (byte) main::bits_gen#8 ← (byte) main::bits_gen#16 + (byte) 1
  to:main::@5
main::@11: scope:[main]  from main::@5
  *((byte*) PROCPORT#0) ← (byte) 55
  asm { cli }
  (byte) main::i#0 ← (byte) 0
  to:main::@6
main::@6: scope:[main]  from main::@11 main::@6
  (byte) main::i#2 ← phi( main::@11/(byte) main::i#0 main::@6/(byte) main::i#1 )
  *((byte*) SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$44 ← (byte) main::i#1 != (byte) 0
  if((boolean~) main::$44) goto main::@6
  to:main::@12
main::@12: scope:[main]  from main::@6
  *((byte*) D018#0) ← (byte) 25
  to:main::@return
main::@return: scope:[main]  from main::@12
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Simple Condition (boolean~) main::$9 if((byte) main::bits#0<(byte) 2) goto main::@2
Simple Condition (boolean~) main::$19 if((byte) main::bits#1<(byte) 2) goto main::@3
Simple Condition (boolean~) main::$29 if((byte) main::bits#2<(byte) 2) goto main::@4
Simple Condition (boolean~) main::$38 if((byte) main::bits#3<(byte) 2) goto main::@5
Simple Condition (boolean~) main::$43 if((byte*) main::chargen#1<(byte*~) main::$42) goto main::@1
Simple Condition (boolean~) main::$44 if((byte) main::i#1!=(byte) 0) goto main::@6
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  (byte*) CHARSET#0 ← (word) 8192
  (byte*) CHARGEN#0 ← (word) 53248
  (byte*) PROCPORT#0 ← (byte) 1
  (byte*) D018#0 ← (word) 53272
  (byte*) CHARSET4#0 ← (word) 10240
  (byte[]) bits_count#0 ← { (byte) 0, (byte) 1, (byte) 1, (byte) 2, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 2, (byte) 3, (byte) 3, (byte) 4 }
  to:@1
main: scope:[main]  from @1
  asm { sei }
  *((byte*) PROCPORT#0) ← (byte) 50
  (byte*) main::chargen#0 ← (byte*) CHARGEN#0
  (byte*) main::charset4#0 ← (byte*) CHARSET4#0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte*) main::charset4#10 ← phi( main/(byte*) main::charset4#0 main::@5/(byte*) main::charset4#1 )
  (byte*) main::chargen#10 ← phi( main/(byte*) main::chargen#0 main::@5/(byte*) main::chargen#1 )
  (byte) main::bits_gen#0 ← (byte) 0
  (byte*) main::chargen1#0 ← (byte*) main::chargen#10 + (byte) 1
  (byte~) main::$1 ← *((byte*) main::chargen#10) & (byte) 96
  (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96
  (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2
  (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3
  (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1
  (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2
  (byte) main::bits#0 ← (byte[]) bits_count#0 *idx (byte~) main::$6
  if((byte) main::bits#0<(byte) 2) goto main::@2
  to:main::@7
main::@2: scope:[main]  from main::@1 main::@7
  (byte) main::bits_gen#9 ← phi( main::@1/(byte) main::bits_gen#0 main::@7/(byte) main::bits_gen#2 )
  (byte) main::bits_gen#1 ← (byte) main::bits_gen#9 << (byte) 1
  (byte~) main::$12 ← *((byte*) main::chargen#10) & (byte) 24
  (byte~) main::$13 ← *((byte*) main::chargen1#0) & (byte) 24
  (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2
  (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14
  (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1
  (byte) main::bits#1 ← (byte[]) bits_count#0 *idx (byte~) main::$16
  if((byte) main::bits#1<(byte) 2) goto main::@3
  to:main::@8
main::@7: scope:[main]  from main::@1
  (byte) main::bits_gen#2 ← (byte) main::bits_gen#0 + (byte) 1
  to:main::@2
main::@3: scope:[main]  from main::@2 main::@8
  (byte) main::bits_gen#11 ← phi( main::@2/(byte) main::bits_gen#1 main::@8/(byte) main::bits_gen#4 )
  (byte) main::bits_gen#14 ← (byte) main::bits_gen#11 << (byte) 1
  (byte~) main::$22 ← *((byte*) main::chargen#10) & (byte) 6
  (byte~) main::$23 ← (byte~) main::$22 << (byte) 1
  (byte~) main::$24 ← *((byte*) main::chargen1#0) & (byte) 6
  (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1
  (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25
  (byte) main::bits#2 ← (byte[]) bits_count#0 *idx (byte~) main::$26
  if((byte) main::bits#2<(byte) 2) goto main::@4
  to:main::@9
main::@8: scope:[main]  from main::@2
  (byte) main::bits_gen#4 ← (byte) main::bits_gen#1 + (byte) 1
  to:main::@3
main::@4: scope:[main]  from main::@3 main::@9
  (byte) main::bits_gen#13 ← phi( main::@3/(byte) main::bits_gen#14 main::@9/(byte) main::bits_gen#6 )
  (byte) main::bits_gen#16 ← (byte) main::bits_gen#13 << (byte) 1
  (byte~) main::$32 ← *((byte*) main::chargen#10) & (byte) 1
  (byte~) main::$33 ← (byte~) main::$32 << (byte) 2
  (byte~) main::$34 ← *((byte*) main::chargen1#0) & (byte) 1
  (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34
  (byte) main::bits#3 ← (byte[]) bits_count#0 *idx (byte~) main::$35
  if((byte) main::bits#3<(byte) 2) goto main::@5
  to:main::@10
main::@9: scope:[main]  from main::@3
  (byte) main::bits_gen#6 ← (byte) main::bits_gen#14 + (byte) 1
  to:main::@4
main::@5: scope:[main]  from main::@10 main::@4
  (byte) main::bits_gen#15 ← phi( main::@10/(byte) main::bits_gen#8 main::@4/(byte) main::bits_gen#16 )
  (byte) main::bits_gen#7 ← (byte) main::bits_gen#15 << (byte) 1
  *((byte*) main::charset4#10) ← (byte) main::bits_gen#7
  (byte*) main::charset4#1 ← ++ (byte*) main::charset4#10
  (byte*) main::chargen#1 ← (byte*) main::chargen#10 + (byte) 2
  (byte*~) main::$42 ← (byte*) CHARGEN#0 + (word) 2048
  if((byte*) main::chargen#1<(byte*~) main::$42) goto main::@1
  to:main::@11
main::@10: scope:[main]  from main::@4
  (byte) main::bits_gen#8 ← (byte) main::bits_gen#16 + (byte) 1
  to:main::@5
main::@11: scope:[main]  from main::@5
  *((byte*) PROCPORT#0) ← (byte) 55
  asm { cli }
  (byte) main::i#0 ← (byte) 0
  to:main::@6
main::@6: scope:[main]  from main::@11 main::@6
  (byte) main::i#2 ← phi( main::@11/(byte) main::i#0 main::@6/(byte) main::i#1 )
  *((byte*) SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 0) goto main::@6
  to:main::@12
main::@12: scope:[main]  from main::@6
  *((byte*) D018#0) ← (byte) 25
  to:main::@return
main::@return: scope:[main]  from main::@12
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Constant (const byte*) SCREEN#0 = 1024
Constant (const byte*) CHARSET#0 = 8192
Constant (const byte*) CHARGEN#0 = 53248
Constant (const byte*) PROCPORT#0 = 1
Constant (const byte*) D018#0 = 53272
Constant (const byte*) CHARSET4#0 = 10240
Constant (const byte[]) bits_count#0 = { 0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4 }
Constant (const byte) main::bits_gen#0 = 0
Constant (const byte) main::i#0 = 0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  asm { sei }
  *((const byte*) PROCPORT#0) ← (byte) 50
  (byte*) main::chargen#0 ← (const byte*) CHARGEN#0
  (byte*) main::charset4#0 ← (const byte*) CHARSET4#0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte*) main::charset4#10 ← phi( main/(byte*) main::charset4#0 main::@5/(byte*) main::charset4#1 )
  (byte*) main::chargen#10 ← phi( main/(byte*) main::chargen#0 main::@5/(byte*) main::chargen#1 )
  (byte*) main::chargen1#0 ← (byte*) main::chargen#10 + (byte) 1
  (byte~) main::$1 ← *((byte*) main::chargen#10) & (byte) 96
  (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96
  (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2
  (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3
  (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1
  (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2
  (byte) main::bits#0 ← (const byte[]) bits_count#0 *idx (byte~) main::$6
  if((byte) main::bits#0<(byte) 2) goto main::@2
  to:main::@7
main::@2: scope:[main]  from main::@1 main::@7
  (byte) main::bits_gen#9 ← phi( main::@1/(const byte) main::bits_gen#0 main::@7/(byte) main::bits_gen#2 )
  (byte) main::bits_gen#1 ← (byte) main::bits_gen#9 << (byte) 1
  (byte~) main::$12 ← *((byte*) main::chargen#10) & (byte) 24
  (byte~) main::$13 ← *((byte*) main::chargen1#0) & (byte) 24
  (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2
  (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14
  (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1
  (byte) main::bits#1 ← (const byte[]) bits_count#0 *idx (byte~) main::$16
  if((byte) main::bits#1<(byte) 2) goto main::@3
  to:main::@8
main::@7: scope:[main]  from main::@1
  (byte) main::bits_gen#2 ← (const byte) main::bits_gen#0 + (byte) 1
  to:main::@2
main::@3: scope:[main]  from main::@2 main::@8
  (byte) main::bits_gen#11 ← phi( main::@2/(byte) main::bits_gen#1 main::@8/(byte) main::bits_gen#4 )
  (byte) main::bits_gen#14 ← (byte) main::bits_gen#11 << (byte) 1
  (byte~) main::$22 ← *((byte*) main::chargen#10) & (byte) 6
  (byte~) main::$23 ← (byte~) main::$22 << (byte) 1
  (byte~) main::$24 ← *((byte*) main::chargen1#0) & (byte) 6
  (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1
  (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25
  (byte) main::bits#2 ← (const byte[]) bits_count#0 *idx (byte~) main::$26
  if((byte) main::bits#2<(byte) 2) goto main::@4
  to:main::@9
main::@8: scope:[main]  from main::@2
  (byte) main::bits_gen#4 ← (byte) main::bits_gen#1 + (byte) 1
  to:main::@3
main::@4: scope:[main]  from main::@3 main::@9
  (byte) main::bits_gen#13 ← phi( main::@3/(byte) main::bits_gen#14 main::@9/(byte) main::bits_gen#6 )
  (byte) main::bits_gen#16 ← (byte) main::bits_gen#13 << (byte) 1
  (byte~) main::$32 ← *((byte*) main::chargen#10) & (byte) 1
  (byte~) main::$33 ← (byte~) main::$32 << (byte) 2
  (byte~) main::$34 ← *((byte*) main::chargen1#0) & (byte) 1
  (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34
  (byte) main::bits#3 ← (const byte[]) bits_count#0 *idx (byte~) main::$35
  if((byte) main::bits#3<(byte) 2) goto main::@5
  to:main::@10
main::@9: scope:[main]  from main::@3
  (byte) main::bits_gen#6 ← (byte) main::bits_gen#14 + (byte) 1
  to:main::@4
main::@5: scope:[main]  from main::@10 main::@4
  (byte) main::bits_gen#15 ← phi( main::@10/(byte) main::bits_gen#8 main::@4/(byte) main::bits_gen#16 )
  (byte) main::bits_gen#7 ← (byte) main::bits_gen#15 << (byte) 1
  *((byte*) main::charset4#10) ← (byte) main::bits_gen#7
  (byte*) main::charset4#1 ← ++ (byte*) main::charset4#10
  (byte*) main::chargen#1 ← (byte*) main::chargen#10 + (byte) 2
  (byte*~) main::$42 ← (const byte*) CHARGEN#0 + (word) 2048
  if((byte*) main::chargen#1<(byte*~) main::$42) goto main::@1
  to:main::@11
main::@10: scope:[main]  from main::@4
  (byte) main::bits_gen#8 ← (byte) main::bits_gen#16 + (byte) 1
  to:main::@5
main::@11: scope:[main]  from main::@5
  *((const byte*) PROCPORT#0) ← (byte) 55
  asm { cli }
  to:main::@6
main::@6: scope:[main]  from main::@11 main::@6
  (byte) main::i#2 ← phi( main::@11/(const byte) main::i#0 main::@6/(byte) main::i#1 )
  *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 0) goto main::@6
  to:main::@12
main::@12: scope:[main]  from main::@6
  *((const byte*) D018#0) ← (byte) 25
  to:main::@return
main::@return: scope:[main]  from main::@12
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Constant (const byte*) main::chargen#0 = CHARGEN#0
Constant (const byte*) main::charset4#0 = CHARSET4#0
Constant (const byte) main::bits_gen#2 = main::bits_gen#0+1
Constant (const byte*) main::$42 = CHARGEN#0+2048
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  asm { sei }
  *((const byte*) PROCPORT#0) ← (byte) 50
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte*) main::charset4#10 ← phi( main/(const byte*) main::charset4#0 main::@5/(byte*) main::charset4#1 )
  (byte*) main::chargen#10 ← phi( main/(const byte*) main::chargen#0 main::@5/(byte*) main::chargen#1 )
  (byte*) main::chargen1#0 ← (byte*) main::chargen#10 + (byte) 1
  (byte~) main::$1 ← *((byte*) main::chargen#10) & (byte) 96
  (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96
  (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2
  (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3
  (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1
  (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2
  (byte) main::bits#0 ← (const byte[]) bits_count#0 *idx (byte~) main::$6
  if((byte) main::bits#0<(byte) 2) goto main::@2
  to:main::@7
main::@2: scope:[main]  from main::@1 main::@7
  (byte) main::bits_gen#9 ← phi( main::@1/(const byte) main::bits_gen#0 main::@7/(const byte) main::bits_gen#2 )
  (byte) main::bits_gen#1 ← (byte) main::bits_gen#9 << (byte) 1
  (byte~) main::$12 ← *((byte*) main::chargen#10) & (byte) 24
  (byte~) main::$13 ← *((byte*) main::chargen1#0) & (byte) 24
  (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2
  (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14
  (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1
  (byte) main::bits#1 ← (const byte[]) bits_count#0 *idx (byte~) main::$16
  if((byte) main::bits#1<(byte) 2) goto main::@3
  to:main::@8
main::@7: scope:[main]  from main::@1
  to:main::@2
main::@3: scope:[main]  from main::@2 main::@8
  (byte) main::bits_gen#11 ← phi( main::@2/(byte) main::bits_gen#1 main::@8/(byte) main::bits_gen#4 )
  (byte) main::bits_gen#14 ← (byte) main::bits_gen#11 << (byte) 1
  (byte~) main::$22 ← *((byte*) main::chargen#10) & (byte) 6
  (byte~) main::$23 ← (byte~) main::$22 << (byte) 1
  (byte~) main::$24 ← *((byte*) main::chargen1#0) & (byte) 6
  (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1
  (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25
  (byte) main::bits#2 ← (const byte[]) bits_count#0 *idx (byte~) main::$26
  if((byte) main::bits#2<(byte) 2) goto main::@4
  to:main::@9
main::@8: scope:[main]  from main::@2
  (byte) main::bits_gen#4 ← (byte) main::bits_gen#1 + (byte) 1
  to:main::@3
main::@4: scope:[main]  from main::@3 main::@9
  (byte) main::bits_gen#13 ← phi( main::@3/(byte) main::bits_gen#14 main::@9/(byte) main::bits_gen#6 )
  (byte) main::bits_gen#16 ← (byte) main::bits_gen#13 << (byte) 1
  (byte~) main::$32 ← *((byte*) main::chargen#10) & (byte) 1
  (byte~) main::$33 ← (byte~) main::$32 << (byte) 2
  (byte~) main::$34 ← *((byte*) main::chargen1#0) & (byte) 1
  (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34
  (byte) main::bits#3 ← (const byte[]) bits_count#0 *idx (byte~) main::$35
  if((byte) main::bits#3<(byte) 2) goto main::@5
  to:main::@10
main::@9: scope:[main]  from main::@3
  (byte) main::bits_gen#6 ← (byte) main::bits_gen#14 + (byte) 1
  to:main::@4
main::@5: scope:[main]  from main::@10 main::@4
  (byte) main::bits_gen#15 ← phi( main::@10/(byte) main::bits_gen#8 main::@4/(byte) main::bits_gen#16 )
  (byte) main::bits_gen#7 ← (byte) main::bits_gen#15 << (byte) 1
  *((byte*) main::charset4#10) ← (byte) main::bits_gen#7
  (byte*) main::charset4#1 ← ++ (byte*) main::charset4#10
  (byte*) main::chargen#1 ← (byte*) main::chargen#10 + (byte) 2
  if((byte*) main::chargen#1<(const byte*) main::$42) goto main::@1
  to:main::@11
main::@10: scope:[main]  from main::@4
  (byte) main::bits_gen#8 ← (byte) main::bits_gen#16 + (byte) 1
  to:main::@5
main::@11: scope:[main]  from main::@5
  *((const byte*) PROCPORT#0) ← (byte) 55
  asm { cli }
  to:main::@6
main::@6: scope:[main]  from main::@11 main::@6
  (byte) main::i#2 ← phi( main::@11/(const byte) main::i#0 main::@6/(byte) main::i#1 )
  *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 0) goto main::@6
  to:main::@12
main::@12: scope:[main]  from main::@6
  *((const byte*) D018#0) ← (byte) 25
  to:main::@return
main::@return: scope:[main]  from main::@12
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Multiple usages for variable. Not optimizing sub-constant (byte*) main::chargen#10
Multiple usages for variable. Not optimizing sub-constant (byte) main::bits_gen#1
Multiple usages for variable. Not optimizing sub-constant (byte) main::bits_gen#14
Multiple usages for variable. Not optimizing sub-constant (byte*) main::chargen#10
Multiple usages for variable. Not optimizing sub-constant (byte) main::bits_gen#16
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Not culling empty block because it shares successor with its predecessor. (label) main::@7
Multiple usages for variable. Not optimizing sub-constant (byte*) main::chargen#10
Multiple usages for variable. Not optimizing sub-constant (byte) main::bits_gen#1
Multiple usages for variable. Not optimizing sub-constant (byte) main::bits_gen#14
Multiple usages for variable. Not optimizing sub-constant (byte*) main::chargen#10
Multiple usages for variable. Not optimizing sub-constant (byte) main::bits_gen#16
Multiple usages for variable. Not optimizing sub-constant (byte) main::i#2
Inlining constant with var siblings (const byte) main::bits_gen#0
Inlining constant with var siblings (const byte) main::bits_gen#0
Inlining constant with var siblings (const byte) main::bits_gen#0
Inlining constant with var siblings (const byte) main::bits_gen#0
Inlining constant with var siblings (const byte) main::bits_gen#0
Inlining constant with var siblings (const byte) main::bits_gen#0
Inlining constant with var siblings (const byte) main::bits_gen#0
Inlining constant with var siblings (const byte) main::bits_gen#0
Inlining constant with var siblings (const byte) main::bits_gen#0
Inlining constant with var siblings (const byte) main::bits_gen#0
Inlining constant with var siblings (const byte) main::bits_gen#0
Inlining constant with different constant siblings (const byte) main::bits_gen#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte*) main::chargen#0
Inlining constant with var siblings (const byte*) main::chargen#0
Inlining constant with var siblings (const byte*) main::charset4#0
Inlining constant with var siblings (const byte*) main::charset4#0
Inlining constant with var siblings (const byte) main::bits_gen#2
Inlining constant with var siblings (const byte) main::bits_gen#2
Inlining constant with var siblings (const byte) main::bits_gen#2
Inlining constant with var siblings (const byte) main::bits_gen#2
Inlining constant with var siblings (const byte) main::bits_gen#2
Inlining constant with var siblings (const byte) main::bits_gen#2
Inlining constant with var siblings (const byte) main::bits_gen#2
Inlining constant with var siblings (const byte) main::bits_gen#2
Inlining constant with var siblings (const byte) main::bits_gen#2
Inlining constant with var siblings (const byte) main::bits_gen#2
Inlining constant with var siblings (const byte) main::bits_gen#2
Inlining constant with different constant siblings (const byte) main::bits_gen#2
Constant inlined main::charset4#0 = (const byte*) CHARSET4#0
Constant inlined main::chargen#0 = (const byte*) CHARGEN#0
Constant inlined main::bits_gen#0 = (byte) 0
Constant inlined main::i#0 = (byte) 0
Constant inlined main::bits_gen#2 = (byte) 0+(byte) 1
Constant inlined main::$42 = (const byte*) CHARGEN#0+(word) 2048
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  asm { sei }
  *((const byte*) PROCPORT#0) ← (byte) 50
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte*) main::charset4#10 ← phi( main/(const byte*) CHARSET4#0 main::@5/(byte*) main::charset4#1 )
  (byte*) main::chargen#10 ← phi( main/(const byte*) CHARGEN#0 main::@5/(byte*) main::chargen#1 )
  (byte*) main::chargen1#0 ← (byte*) main::chargen#10 + (byte) 1
  (byte~) main::$1 ← *((byte*) main::chargen#10) & (byte) 96
  (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96
  (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2
  (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3
  (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1
  (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2
  (byte) main::bits#0 ← (const byte[]) bits_count#0 *idx (byte~) main::$6
  if((byte) main::bits#0<(byte) 2) goto main::@2
  to:main::@7
main::@2: scope:[main]  from main::@1 main::@7
  (byte) main::bits_gen#9 ← phi( main::@1/(byte) 0 main::@7/(byte) 0+(byte) 1 )
  (byte) main::bits_gen#1 ← (byte) main::bits_gen#9 << (byte) 1
  (byte~) main::$12 ← *((byte*) main::chargen#10) & (byte) 24
  (byte~) main::$13 ← *((byte*) main::chargen1#0) & (byte) 24
  (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2
  (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14
  (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1
  (byte) main::bits#1 ← (const byte[]) bits_count#0 *idx (byte~) main::$16
  if((byte) main::bits#1<(byte) 2) goto main::@3
  to:main::@8
main::@7: scope:[main]  from main::@1
  to:main::@2
main::@3: scope:[main]  from main::@2 main::@8
  (byte) main::bits_gen#11 ← phi( main::@2/(byte) main::bits_gen#1 main::@8/(byte) main::bits_gen#4 )
  (byte) main::bits_gen#14 ← (byte) main::bits_gen#11 << (byte) 1
  (byte~) main::$22 ← *((byte*) main::chargen#10) & (byte) 6
  (byte~) main::$23 ← (byte~) main::$22 << (byte) 1
  (byte~) main::$24 ← *((byte*) main::chargen1#0) & (byte) 6
  (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1
  (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25
  (byte) main::bits#2 ← (const byte[]) bits_count#0 *idx (byte~) main::$26
  if((byte) main::bits#2<(byte) 2) goto main::@4
  to:main::@9
main::@8: scope:[main]  from main::@2
  (byte) main::bits_gen#4 ← (byte) main::bits_gen#1 + (byte) 1
  to:main::@3
main::@4: scope:[main]  from main::@3 main::@9
  (byte) main::bits_gen#13 ← phi( main::@3/(byte) main::bits_gen#14 main::@9/(byte) main::bits_gen#6 )
  (byte) main::bits_gen#16 ← (byte) main::bits_gen#13 << (byte) 1
  (byte~) main::$32 ← *((byte*) main::chargen#10) & (byte) 1
  (byte~) main::$33 ← (byte~) main::$32 << (byte) 2
  (byte~) main::$34 ← *((byte*) main::chargen1#0) & (byte) 1
  (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34
  (byte) main::bits#3 ← (const byte[]) bits_count#0 *idx (byte~) main::$35
  if((byte) main::bits#3<(byte) 2) goto main::@5
  to:main::@10
main::@9: scope:[main]  from main::@3
  (byte) main::bits_gen#6 ← (byte) main::bits_gen#14 + (byte) 1
  to:main::@4
main::@5: scope:[main]  from main::@10 main::@4
  (byte) main::bits_gen#15 ← phi( main::@10/(byte) main::bits_gen#8 main::@4/(byte) main::bits_gen#16 )
  (byte) main::bits_gen#7 ← (byte) main::bits_gen#15 << (byte) 1
  *((byte*) main::charset4#10) ← (byte) main::bits_gen#7
  (byte*) main::charset4#1 ← ++ (byte*) main::charset4#10
  (byte*) main::chargen#1 ← (byte*) main::chargen#10 + (byte) 2
  if((byte*) main::chargen#1<(const byte*) CHARGEN#0+(word) 2048) goto main::@1
  to:main::@11
main::@10: scope:[main]  from main::@4
  (byte) main::bits_gen#8 ← (byte) main::bits_gen#16 + (byte) 1
  to:main::@5
main::@11: scope:[main]  from main::@5
  *((const byte*) PROCPORT#0) ← (byte) 55
  asm { cli }
  to:main::@6
main::@6: scope:[main]  from main::@11 main::@6
  (byte) main::i#2 ← phi( main::@11/(byte) 0 main::@6/(byte) main::i#1 )
  *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 0) goto main::@6
  to:main::@12
main::@12: scope:[main]  from main::@6
  *((const byte*) D018#0) ← (byte) 25
  to:main::@return
main::@return: scope:[main]  from main::@12
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) CHARGEN
(const byte*) CHARGEN#0 = (word) 53248
(byte*) CHARSET
(const byte*) CHARSET#0 = (word) 8192
(byte*) CHARSET4
(const byte*) CHARSET4#0 = (word) 10240
(byte*) D018
(const byte*) D018#0 = (word) 53272
(byte*) PROCPORT
(const byte*) PROCPORT#0 = (byte) 1
(byte*) SCREEN
(const byte*) SCREEN#0 = (word) 1024
(byte[]) bits_count
(const byte[]) bits_count#0 = { (byte) 0, (byte) 1, (byte) 1, (byte) 2, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 2, (byte) 3, (byte) 3, (byte) 4 }
(void()) main()
(byte~) main::$1
(byte~) main::$12
(byte~) main::$13
(byte~) main::$14
(byte~) main::$15
(byte~) main::$16
(byte~) main::$2
(byte~) main::$22
(byte~) main::$23
(byte~) main::$24
(byte~) main::$25
(byte~) main::$26
(byte~) main::$3
(byte~) main::$32
(byte~) main::$33
(byte~) main::$34
(byte~) main::$35
(byte~) main::$4
(byte~) main::$5
(byte~) main::$6
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::bits
(byte) main::bits#0
(byte) main::bits#1
(byte) main::bits#2
(byte) main::bits#3
(byte) main::bits_gen
(byte) main::bits_gen#1
(byte) main::bits_gen#11
(byte) main::bits_gen#13
(byte) main::bits_gen#14
(byte) main::bits_gen#15
(byte) main::bits_gen#16
(byte) main::bits_gen#4
(byte) main::bits_gen#6
(byte) main::bits_gen#7
(byte) main::bits_gen#8
(byte) main::bits_gen#9
(byte*) main::chargen
(byte*) main::chargen#1
(byte*) main::chargen#10
(byte*) main::chargen1
(byte*) main::chargen1#0
(byte*) main::charset4
(byte*) main::charset4#1
(byte*) main::charset4#10
(byte) main::i
(byte) main::i#1
(byte) main::i#2

Block Sequence Planned @begin @1 @end main main::@1 main::@7 main::@2 main::@8 main::@3 main::@9 main::@4 main::@10 main::@5 main::@11 main::@6 main::@12 main::@return 
Added new block during phi lifting main::@13(between main::@5 and main::@1)
Added new block during phi lifting main::@14(between main::@2 and main::@3)
Added new block during phi lifting main::@15(between main::@3 and main::@4)
Added new block during phi lifting main::@16(between main::@4 and main::@5)
Added new block during phi lifting main::@17(between main::@6 and main::@6)
Block Sequence Planned @begin @1 @end main main::@1 main::@7 main::@2 main::@8 main::@3 main::@9 main::@4 main::@10 main::@5 main::@11 main::@6 main::@12 main::@return main::@17 main::@13 main::@16 main::@15 main::@14 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  asm { sei }
  *((const byte*) PROCPORT#0) ← (byte) 50
  to:main::@1
main::@1: scope:[main]  from main main::@13
  (byte*) main::charset4#10 ← phi( main/(const byte*) CHARSET4#0 main::@13/(byte*~) main::charset4#11 )
  (byte*) main::chargen#10 ← phi( main/(const byte*) CHARGEN#0 main::@13/(byte*~) main::chargen#11 )
  (byte*) main::chargen1#0 ← (byte*) main::chargen#10 + (byte) 1
  (byte~) main::$1 ← *((byte*) main::chargen#10) & (byte) 96
  (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96
  (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2
  (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3
  (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1
  (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2
  (byte) main::bits#0 ← (const byte[]) bits_count#0 *idx (byte~) main::$6
  if((byte) main::bits#0<(byte) 2) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@7
  (byte) main::bits_gen#9 ← phi( main::@1/(byte) 0 main::@7/(byte) 0+(byte) 1 )
  (byte) main::bits_gen#1 ← (byte) main::bits_gen#9 << (byte) 1
  (byte~) main::$12 ← *((byte*) main::chargen#10) & (byte) 24
  (byte~) main::$13 ← *((byte*) main::chargen1#0) & (byte) 24
  (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2
  (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14
  (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1
  (byte) main::bits#1 ← (const byte[]) bits_count#0 *idx (byte~) main::$16
  if((byte) main::bits#1<(byte) 2) goto main::@14
  to:main::@8
main::@8: scope:[main]  from main::@2
  (byte) main::bits_gen#4 ← (byte) main::bits_gen#1 + (byte) 1
  (byte~) main::bits_gen#18 ← (byte) main::bits_gen#4
  to:main::@3
main::@3: scope:[main]  from main::@14 main::@8
  (byte) main::bits_gen#11 ← phi( main::@14/(byte~) main::bits_gen#17 main::@8/(byte~) main::bits_gen#18 )
  (byte) main::bits_gen#14 ← (byte) main::bits_gen#11 << (byte) 1
  (byte~) main::$22 ← *((byte*) main::chargen#10) & (byte) 6
  (byte~) main::$23 ← (byte~) main::$22 << (byte) 1
  (byte~) main::$24 ← *((byte*) main::chargen1#0) & (byte) 6
  (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1
  (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25
  (byte) main::bits#2 ← (const byte[]) bits_count#0 *idx (byte~) main::$26
  if((byte) main::bits#2<(byte) 2) goto main::@15
  to:main::@9
main::@9: scope:[main]  from main::@3
  (byte) main::bits_gen#6 ← (byte) main::bits_gen#14 + (byte) 1
  (byte~) main::bits_gen#20 ← (byte) main::bits_gen#6
  to:main::@4
main::@4: scope:[main]  from main::@15 main::@9
  (byte) main::bits_gen#13 ← phi( main::@15/(byte~) main::bits_gen#19 main::@9/(byte~) main::bits_gen#20 )
  (byte) main::bits_gen#16 ← (byte) main::bits_gen#13 << (byte) 1
  (byte~) main::$32 ← *((byte*) main::chargen#10) & (byte) 1
  (byte~) main::$33 ← (byte~) main::$32 << (byte) 2
  (byte~) main::$34 ← *((byte*) main::chargen1#0) & (byte) 1
  (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34
  (byte) main::bits#3 ← (const byte[]) bits_count#0 *idx (byte~) main::$35
  if((byte) main::bits#3<(byte) 2) goto main::@16
  to:main::@10
main::@10: scope:[main]  from main::@4
  (byte) main::bits_gen#8 ← (byte) main::bits_gen#16 + (byte) 1
  (byte~) main::bits_gen#21 ← (byte) main::bits_gen#8
  to:main::@5
main::@5: scope:[main]  from main::@10 main::@16
  (byte) main::bits_gen#15 ← phi( main::@10/(byte~) main::bits_gen#21 main::@16/(byte~) main::bits_gen#22 )
  (byte) main::bits_gen#7 ← (byte) main::bits_gen#15 << (byte) 1
  *((byte*) main::charset4#10) ← (byte) main::bits_gen#7
  (byte*) main::charset4#1 ← ++ (byte*) main::charset4#10
  (byte*) main::chargen#1 ← (byte*) main::chargen#10 + (byte) 2
  if((byte*) main::chargen#1<(const byte*) CHARGEN#0+(word) 2048) goto main::@13
  to:main::@11
main::@11: scope:[main]  from main::@5
  *((const byte*) PROCPORT#0) ← (byte) 55
  asm { cli }
  to:main::@6
main::@6: scope:[main]  from main::@11 main::@17
  (byte) main::i#2 ← phi( main::@11/(byte) 0 main::@17/(byte~) main::i#3 )
  *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 0) goto main::@17
  to:main::@12
main::@12: scope:[main]  from main::@6
  *((const byte*) D018#0) ← (byte) 25
  to:main::@return
main::@return: scope:[main]  from main::@12
  return 
  to:@return
main::@17: scope:[main]  from main::@6
  (byte~) main::i#3 ← (byte) main::i#1
  to:main::@6
main::@13: scope:[main]  from main::@5
  (byte*~) main::chargen#11 ← (byte*) main::chargen#1
  (byte*~) main::charset4#11 ← (byte*) main::charset4#1
  to:main::@1
main::@16: scope:[main]  from main::@4
  (byte~) main::bits_gen#22 ← (byte) main::bits_gen#16
  to:main::@5
main::@15: scope:[main]  from main::@3
  (byte~) main::bits_gen#19 ← (byte) main::bits_gen#14
  to:main::@4
main::@14: scope:[main]  from main::@2
  (byte~) main::bits_gen#17 ← (byte) main::bits_gen#1
  to:main::@3

CALL GRAPH
Calls in [] to main:0 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  asm { sei }
  [2] *((const byte*) PROCPORT#0) ← (byte) 50 [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@13
  [3] (byte*) main::charset4#10 ← phi( main/(const byte*) CHARSET4#0 main::@13/(byte*~) main::charset4#11 ) [ main::chargen#10 main::charset4#10 ]
  [3] (byte*) main::chargen#10 ← phi( main/(const byte*) CHARGEN#0 main::@13/(byte*~) main::chargen#11 ) [ main::chargen#10 main::charset4#10 ]
  [4] (byte*) main::chargen1#0 ← (byte*) main::chargen#10 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 ]
  [5] (byte~) main::$1 ← *((byte*) main::chargen#10) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 ]
  [6] (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$2 ]
  [7] (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$3 ]
  [8] (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$4 ]
  [9] (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$5 ]
  [10] (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$6 ]
  [11] (byte) main::bits#0 ← (const byte[]) bits_count#0 *idx (byte~) main::$6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits#0 ]
  [12] if((byte) main::bits#0<(byte) 2) goto main::@2 [ main::chargen#10 main::charset4#10 main::chargen1#0 ]
  to:main::@7
main::@7: scope:[main]  from main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@7
  [13] (byte) main::bits_gen#9 ← phi( main::@1/(byte) 0 main::@7/(byte) 0+(byte) 1 ) [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#9 ]
  [14] (byte) main::bits_gen#1 ← (byte) main::bits_gen#9 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ]
  [15] (byte~) main::$12 ← *((byte*) main::chargen#10) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 ]
  [16] (byte~) main::$13 ← *((byte*) main::chargen1#0) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$13 ]
  [17] (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$14 ]
  [18] (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$15 ]
  [19] (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$16 ]
  [20] (byte) main::bits#1 ← (const byte[]) bits_count#0 *idx (byte~) main::$16 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::bits#1 ]
  [21] if((byte) main::bits#1<(byte) 2) goto main::@14 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ]
  to:main::@8
main::@8: scope:[main]  from main::@2
  [22] (byte) main::bits_gen#4 ← (byte) main::bits_gen#1 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#4 ]
  [23] (byte~) main::bits_gen#18 ← (byte) main::bits_gen#4 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#18 ]
  to:main::@3
main::@3: scope:[main]  from main::@14 main::@8
  [24] (byte) main::bits_gen#11 ← phi( main::@14/(byte~) main::bits_gen#17 main::@8/(byte~) main::bits_gen#18 ) [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#11 ]
  [25] (byte) main::bits_gen#14 ← (byte) main::bits_gen#11 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ]
  [26] (byte~) main::$22 ← *((byte*) main::chargen#10) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$22 ]
  [27] (byte~) main::$23 ← (byte~) main::$22 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 ]
  [28] (byte~) main::$24 ← *((byte*) main::chargen1#0) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$24 ]
  [29] (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$25 ]
  [30] (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$26 ]
  [31] (byte) main::bits#2 ← (const byte[]) bits_count#0 *idx (byte~) main::$26 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::bits#2 ]
  [32] if((byte) main::bits#2<(byte) 2) goto main::@15 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ]
  to:main::@9
main::@9: scope:[main]  from main::@3
  [33] (byte) main::bits_gen#6 ← (byte) main::bits_gen#14 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#6 ]
  [34] (byte~) main::bits_gen#20 ← (byte) main::bits_gen#6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#20 ]
  to:main::@4
main::@4: scope:[main]  from main::@15 main::@9
  [35] (byte) main::bits_gen#13 ← phi( main::@15/(byte~) main::bits_gen#19 main::@9/(byte~) main::bits_gen#20 ) [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#13 ]
  [36] (byte) main::bits_gen#16 ← (byte) main::bits_gen#13 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 ]
  [37] (byte~) main::$32 ← *((byte*) main::chargen#10) & (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$32 ]
  [38] (byte~) main::$33 ← (byte~) main::$32 << (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$33 ]
  [39] (byte~) main::$34 ← *((byte*) main::chargen1#0) & (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$33 main::$34 ]
  [40] (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$35 ]
  [41] (byte) main::bits#3 ← (const byte[]) bits_count#0 *idx (byte~) main::$35 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::bits#3 ]
  [42] if((byte) main::bits#3<(byte) 2) goto main::@16 [ main::chargen#10 main::charset4#10 main::bits_gen#16 ]
  to:main::@10
main::@10: scope:[main]  from main::@4
  [43] (byte) main::bits_gen#8 ← (byte) main::bits_gen#16 + (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#8 ]
  [44] (byte~) main::bits_gen#21 ← (byte) main::bits_gen#8 [ main::chargen#10 main::charset4#10 main::bits_gen#21 ]
  to:main::@5
main::@5: scope:[main]  from main::@10 main::@16
  [45] (byte) main::bits_gen#15 ← phi( main::@10/(byte~) main::bits_gen#21 main::@16/(byte~) main::bits_gen#22 ) [ main::chargen#10 main::charset4#10 main::bits_gen#15 ]
  [46] (byte) main::bits_gen#7 ← (byte) main::bits_gen#15 << (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#7 ]
  [47] *((byte*) main::charset4#10) ← (byte) main::bits_gen#7 [ main::chargen#10 main::charset4#10 ]
  [48] (byte*) main::charset4#1 ← ++ (byte*) main::charset4#10 [ main::chargen#10 main::charset4#1 ]
  [49] (byte*) main::chargen#1 ← (byte*) main::chargen#10 + (byte) 2 [ main::charset4#1 main::chargen#1 ]
  [50] if((byte*) main::chargen#1<(const byte*) CHARGEN#0+(word) 2048) goto main::@13 [ main::charset4#1 main::chargen#1 ]
  to:main::@11
main::@11: scope:[main]  from main::@5
  [51] *((const byte*) PROCPORT#0) ← (byte) 55 [ ]
  asm { cli }
  to:main::@6
main::@6: scope:[main]  from main::@11 main::@17
  [53] (byte) main::i#2 ← phi( main::@11/(byte) 0 main::@17/(byte~) main::i#3 ) [ main::i#2 ]
  [54] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ]
  [55] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ]
  [56] if((byte) main::i#1!=(byte) 0) goto main::@17 [ main::i#1 ]
  to:main::@12
main::@12: scope:[main]  from main::@6
  [57] *((const byte*) D018#0) ← (byte) 25 [ ]
  to:main::@return
main::@return: scope:[main]  from main::@12
  [58] return  [ ]
  to:@return
main::@17: scope:[main]  from main::@6
  [59] (byte~) main::i#3 ← (byte) main::i#1 [ main::i#3 ]
  to:main::@6
main::@13: scope:[main]  from main::@5
  [60] (byte*~) main::chargen#11 ← (byte*) main::chargen#1 [ main::chargen#11 main::charset4#1 ]
  [61] (byte*~) main::charset4#11 ← (byte*) main::charset4#1 [ main::chargen#11 main::charset4#11 ]
  to:main::@1
main::@16: scope:[main]  from main::@4
  [62] (byte~) main::bits_gen#22 ← (byte) main::bits_gen#16 [ main::chargen#10 main::charset4#10 main::bits_gen#22 ]
  to:main::@5
main::@15: scope:[main]  from main::@3
  [63] (byte~) main::bits_gen#19 ← (byte) main::bits_gen#14 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#19 ]
  to:main::@4
main::@14: scope:[main]  from main::@2
  [64] (byte~) main::bits_gen#17 ← (byte) main::bits_gen#1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#17 ]
  to:main::@3

Created 7 initial phi equivalence classes
Coalesced [23] main::bits_gen#18 ← main::bits_gen#4
Coalesced [34] main::bits_gen#20 ← main::bits_gen#6
Coalesced [44] main::bits_gen#21 ← main::bits_gen#8
Coalesced [59] main::i#3 ← main::i#1
Coalesced [60] main::chargen#11 ← main::chargen#1
Coalesced [61] main::charset4#11 ← main::charset4#1
Coalesced [62] main::bits_gen#22 ← main::bits_gen#16
Coalesced [63] main::bits_gen#19 ← main::bits_gen#14
Coalesced [64] main::bits_gen#17 ← main::bits_gen#1
Coalesced down to 7 phi equivalence classes
Not culling empty block because it shares successor with its predecessor. (label) main::@7
Culled Empty Block (label) main::@17
Culled Empty Block (label) main::@13
Culled Empty Block (label) main::@16
Culled Empty Block (label) main::@15
Culled Empty Block (label) main::@14
Block Sequence Planned @begin @1 @end main main::@1 main::@7 main::@2 main::@8 main::@3 main::@9 main::@4 main::@10 main::@5 main::@11 main::@6 main::@12 main::@return 
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - BEFORE EFFECTIVE LIVE RANGES
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  asm { sei }
  [2] *((const byte*) PROCPORT#0) ← (byte) 50 [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [3] (byte*) main::charset4#10 ← phi( main/(const byte*) CHARSET4#0 main::@5/(byte*) main::charset4#1 ) [ main::chargen#10 main::charset4#10 ]
  [3] (byte*) main::chargen#10 ← phi( main/(const byte*) CHARGEN#0 main::@5/(byte*) main::chargen#1 ) [ main::chargen#10 main::charset4#10 ]
  [4] (byte*) main::chargen1#0 ← (byte*) main::chargen#10 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 ]
  [5] (byte~) main::$1 ← *((byte*) main::chargen#10) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 ]
  [6] (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$2 ]
  [7] (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$3 ]
  [8] (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$4 ]
  [9] (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$5 ]
  [10] (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$6 ]
  [11] (byte) main::bits#0 ← (const byte[]) bits_count#0 *idx (byte~) main::$6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits#0 ]
  [12] if((byte) main::bits#0<(byte) 2) goto main::@2 [ main::chargen#10 main::charset4#10 main::chargen1#0 ]
  to:main::@7
main::@7: scope:[main]  from main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@7
  [13] (byte) main::bits_gen#9 ← phi( main::@1/(byte) 0 main::@7/(byte) 0+(byte) 1 ) [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#9 ]
  [14] (byte) main::bits_gen#1 ← (byte) main::bits_gen#9 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ]
  [15] (byte~) main::$12 ← *((byte*) main::chargen#10) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 ]
  [16] (byte~) main::$13 ← *((byte*) main::chargen1#0) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$13 ]
  [17] (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$14 ]
  [18] (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$15 ]
  [19] (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$16 ]
  [20] (byte) main::bits#1 ← (const byte[]) bits_count#0 *idx (byte~) main::$16 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::bits#1 ]
  [21] if((byte) main::bits#1<(byte) 2) goto main::@3 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ]
  to:main::@8
main::@8: scope:[main]  from main::@2
  [22] (byte) main::bits_gen#4 ← (byte) main::bits_gen#1 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#4 ]
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@8
  [23] (byte) main::bits_gen#11 ← phi( main::@2/(byte) main::bits_gen#1 main::@8/(byte) main::bits_gen#4 ) [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#11 ]
  [24] (byte) main::bits_gen#14 ← (byte) main::bits_gen#11 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ]
  [25] (byte~) main::$22 ← *((byte*) main::chargen#10) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$22 ]
  [26] (byte~) main::$23 ← (byte~) main::$22 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 ]
  [27] (byte~) main::$24 ← *((byte*) main::chargen1#0) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$24 ]
  [28] (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$25 ]
  [29] (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$26 ]
  [30] (byte) main::bits#2 ← (const byte[]) bits_count#0 *idx (byte~) main::$26 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::bits#2 ]
  [31] if((byte) main::bits#2<(byte) 2) goto main::@4 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ]
  to:main::@9
main::@9: scope:[main]  from main::@3
  [32] (byte) main::bits_gen#6 ← (byte) main::bits_gen#14 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#6 ]
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@9
  [33] (byte) main::bits_gen#13 ← phi( main::@3/(byte) main::bits_gen#14 main::@9/(byte) main::bits_gen#6 ) [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#13 ]
  [34] (byte) main::bits_gen#16 ← (byte) main::bits_gen#13 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 ]
  [35] (byte~) main::$32 ← *((byte*) main::chargen#10) & (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$32 ]
  [36] (byte~) main::$33 ← (byte~) main::$32 << (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$33 ]
  [37] (byte~) main::$34 ← *((byte*) main::chargen1#0) & (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$33 main::$34 ]
  [38] (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$35 ]
  [39] (byte) main::bits#3 ← (const byte[]) bits_count#0 *idx (byte~) main::$35 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::bits#3 ]
  [40] if((byte) main::bits#3<(byte) 2) goto main::@5 [ main::chargen#10 main::charset4#10 main::bits_gen#16 ]
  to:main::@10
main::@10: scope:[main]  from main::@4
  [41] (byte) main::bits_gen#8 ← (byte) main::bits_gen#16 + (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#8 ]
  to:main::@5
main::@5: scope:[main]  from main::@10 main::@4
  [42] (byte) main::bits_gen#15 ← phi( main::@10/(byte) main::bits_gen#8 main::@4/(byte) main::bits_gen#16 ) [ main::chargen#10 main::charset4#10 main::bits_gen#15 ]
  [43] (byte) main::bits_gen#7 ← (byte) main::bits_gen#15 << (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#7 ]
  [44] *((byte*) main::charset4#10) ← (byte) main::bits_gen#7 [ main::chargen#10 main::charset4#10 ]
  [45] (byte*) main::charset4#1 ← ++ (byte*) main::charset4#10 [ main::chargen#10 main::charset4#1 ]
  [46] (byte*) main::chargen#1 ← (byte*) main::chargen#10 + (byte) 2 [ main::chargen#1 main::charset4#1 ]
  [47] if((byte*) main::chargen#1<(const byte*) CHARGEN#0+(word) 2048) goto main::@1 [ main::chargen#1 main::charset4#1 ]
  to:main::@11
main::@11: scope:[main]  from main::@5
  [48] *((const byte*) PROCPORT#0) ← (byte) 55 [ ]
  asm { cli }
  to:main::@6
main::@6: scope:[main]  from main::@11 main::@6
  [50] (byte) main::i#2 ← phi( main::@11/(byte) 0 main::@6/(byte) main::i#1 ) [ main::i#2 ]
  [51] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ]
  [52] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ]
  [53] if((byte) main::i#1!=(byte) 0) goto main::@6 [ main::i#1 ]
  to:main::@12
main::@12: scope:[main]  from main::@6
  [54] *((const byte*) D018#0) ← (byte) 25 [ ]
  to:main::@return
main::@return: scope:[main]  from main::@12
  [55] return  [ ]
  to:@return

CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  [0] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  asm { sei }
  [2] *((const byte*) PROCPORT#0) ← (byte) 50 [ ] ( main:0 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [3] (byte*) main::charset4#10 ← phi( main/(const byte*) CHARSET4#0 main::@5/(byte*) main::charset4#1 ) [ main::chargen#10 main::charset4#10 ] ( main:0 [ main::chargen#10 main::charset4#10 ] )
  [3] (byte*) main::chargen#10 ← phi( main/(const byte*) CHARGEN#0 main::@5/(byte*) main::chargen#1 ) [ main::chargen#10 main::charset4#10 ] ( main:0 [ main::chargen#10 main::charset4#10 ] )
  [4] (byte*) main::chargen1#0 ← (byte*) main::chargen#10 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] )
  [5] (byte~) main::$1 ← *((byte*) main::chargen#10) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 ] )
  [6] (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$2 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$2 ] )
  [7] (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$3 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$3 ] )
  [8] (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$4 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$4 ] )
  [9] (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$5 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$5 ] )
  [10] (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$6 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$6 ] )
  [11] (byte) main::bits#0 ← (const byte[]) bits_count#0 *idx (byte~) main::$6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits#0 ] )
  [12] if((byte) main::bits#0<(byte) 2) goto main::@2 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] )
  to:main::@7
main::@7: scope:[main]  from main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@7
  [13] (byte) main::bits_gen#9 ← phi( main::@1/(byte) 0 main::@7/(byte) 0+(byte) 1 ) [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#9 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#9 ] )
  [14] (byte) main::bits_gen#1 ← (byte) main::bits_gen#9 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] )
  [15] (byte~) main::$12 ← *((byte*) main::chargen#10) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 ] )
  [16] (byte~) main::$13 ← *((byte*) main::chargen1#0) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$13 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$13 ] )
  [17] (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$14 ] )
  [18] (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$15 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$15 ] )
  [19] (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$16 ] )
  [20] (byte) main::bits#1 ← (const byte[]) bits_count#0 *idx (byte~) main::$16 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::bits#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::bits#1 ] )
  [21] if((byte) main::bits#1<(byte) 2) goto main::@3 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] )
  to:main::@8
main::@8: scope:[main]  from main::@2
  [22] (byte) main::bits_gen#4 ← (byte) main::bits_gen#1 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#4 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#4 ] )
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@8
  [23] (byte) main::bits_gen#11 ← phi( main::@2/(byte) main::bits_gen#1 main::@8/(byte) main::bits_gen#4 ) [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#11 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#11 ] )
  [24] (byte) main::bits_gen#14 ← (byte) main::bits_gen#11 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] )
  [25] (byte~) main::$22 ← *((byte*) main::chargen#10) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$22 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$22 ] )
  [26] (byte~) main::$23 ← (byte~) main::$22 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 ] )
  [27] (byte~) main::$24 ← *((byte*) main::chargen1#0) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$24 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$24 ] )
  [28] (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$25 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$25 ] )
  [29] (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$26 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$26 ] )
  [30] (byte) main::bits#2 ← (const byte[]) bits_count#0 *idx (byte~) main::$26 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::bits#2 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::bits#2 ] )
  [31] if((byte) main::bits#2<(byte) 2) goto main::@4 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] )
  to:main::@9
main::@9: scope:[main]  from main::@3
  [32] (byte) main::bits_gen#6 ← (byte) main::bits_gen#14 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#6 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#6 ] )
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@9
  [33] (byte) main::bits_gen#13 ← phi( main::@3/(byte) main::bits_gen#14 main::@9/(byte) main::bits_gen#6 ) [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#13 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#13 ] )
  [34] (byte) main::bits_gen#16 ← (byte) main::bits_gen#13 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 ] )
  [35] (byte~) main::$32 ← *((byte*) main::chargen#10) & (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$32 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$32 ] )
  [36] (byte~) main::$33 ← (byte~) main::$32 << (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$33 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$33 ] )
  [37] (byte~) main::$34 ← *((byte*) main::chargen1#0) & (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$33 main::$34 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$33 main::$34 ] )
  [38] (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$35 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$35 ] )
  [39] (byte) main::bits#3 ← (const byte[]) bits_count#0 *idx (byte~) main::$35 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::bits#3 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::bits#3 ] )
  [40] if((byte) main::bits#3<(byte) 2) goto main::@5 [ main::chargen#10 main::charset4#10 main::bits_gen#16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 ] )
  to:main::@10
main::@10: scope:[main]  from main::@4
  [41] (byte) main::bits_gen#8 ← (byte) main::bits_gen#16 + (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#8 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#8 ] )
  to:main::@5
main::@5: scope:[main]  from main::@10 main::@4
  [42] (byte) main::bits_gen#15 ← phi( main::@10/(byte) main::bits_gen#8 main::@4/(byte) main::bits_gen#16 ) [ main::chargen#10 main::charset4#10 main::bits_gen#15 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#15 ] )
  [43] (byte) main::bits_gen#7 ← (byte) main::bits_gen#15 << (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#7 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#7 ] )
  [44] *((byte*) main::charset4#10) ← (byte) main::bits_gen#7 [ main::chargen#10 main::charset4#10 ] ( main:0 [ main::chargen#10 main::charset4#10 ] )
  [45] (byte*) main::charset4#1 ← ++ (byte*) main::charset4#10 [ main::chargen#10 main::charset4#1 ] ( main:0 [ main::chargen#10 main::charset4#1 ] )
  [46] (byte*) main::chargen#1 ← (byte*) main::chargen#10 + (byte) 2 [ main::chargen#1 main::charset4#1 ] ( main:0 [ main::chargen#1 main::charset4#1 ] )
  [47] if((byte*) main::chargen#1<(const byte*) CHARGEN#0+(word) 2048) goto main::@1 [ main::chargen#1 main::charset4#1 ] ( main:0 [ main::chargen#1 main::charset4#1 ] )
  to:main::@11
main::@11: scope:[main]  from main::@5
  [48] *((const byte*) PROCPORT#0) ← (byte) 55 [ ] ( main:0 [ ] )
  asm { cli }
  to:main::@6
main::@6: scope:[main]  from main::@11 main::@6
  [50] (byte) main::i#2 ← phi( main::@11/(byte) 0 main::@6/(byte) main::i#1 ) [ main::i#2 ] ( main:0 [ main::i#2 ] )
  [51] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ] ( main:0 [ main::i#2 ] )
  [52] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:0 [ main::i#1 ] )
  [53] if((byte) main::i#1!=(byte) 0) goto main::@6 [ main::i#1 ] ( main:0 [ main::i#1 ] )
  to:main::@12
main::@12: scope:[main]  from main::@6
  [54] *((const byte*) D018#0) ← (byte) 25 [ ] ( main:0 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@12
  [55] return  [ ] ( main:0 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@1 dominated by  @1 @begin 
@end dominated by  @1 @end @begin 
main dominated by  @1 @begin main 
main::@1 dominated by  @1 @begin main::@1 main 
main::@7 dominated by  @1 @begin main::@1 main main::@7 
main::@2 dominated by  @1 @begin main::@2 main::@1 main 
main::@8 dominated by  @1 @begin main::@2 main::@1 main main::@8 
main::@3 dominated by  @1 @begin main::@2 main::@1 main::@3 main 
main::@9 dominated by  @1 @begin main::@2 main::@1 main::@3 main main::@9 
main::@4 dominated by  @1 @begin main::@2 main::@1 main::@4 main::@3 main 
main::@10 dominated by  @1 @begin main::@2 main::@1 main::@4 main::@3 main main::@10 
main::@5 dominated by  @1 @begin main::@2 main::@1 main::@4 main::@3 main::@5 main 
main::@11 dominated by  @1 @begin main::@2 main::@1 main::@4 main::@3 main::@5 main main::@11 
main::@6 dominated by  @1 @begin main::@2 main::@1 main::@4 main::@3 main::@6 main::@5 main main::@11 
main::@12 dominated by  @1 @begin main::@2 main::@1 main::@4 main::@3 main::@6 main::@5 main main::@12 main::@11 
main::@return dominated by  @1 @begin main::@2 main::@1 main::@4 main::@3 main::@6 main::@5 main main::@12 main::@return main::@11 

Found back edge: Loop head: main::@1 tails: main::@5 blocks: null
Found back edge: Loop head: main::@6 tails: main::@6 blocks: null
Populated: Loop head: main::@1 tails: main::@5 blocks: main::@5 main::@10 main::@4 main::@3 main::@9 main::@2 main::@8 main::@1 main::@7 
Populated: Loop head: main::@6 tails: main::@6 blocks: main::@6 
NATURAL LOOPS
Loop head: main::@1 tails: main::@5 blocks: main::@5 main::@10 main::@4 main::@3 main::@9 main::@2 main::@8 main::@1 main::@7 
Loop head: main::@6 tails: main::@6 blocks: main::@6 

Found 0 loops in scope []
Found 2 loops in scope [main]
  Loop head: main::@1 tails: main::@5 blocks: main::@5 main::@10 main::@4 main::@3 main::@9 main::@2 main::@8 main::@1 main::@7 
  Loop head: main::@6 tails: main::@6 blocks: main::@6 
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@5 blocks: main::@5 main::@10 main::@4 main::@3 main::@9 main::@2 main::@8 main::@1 main::@7  depth: 1
Loop head: main::@6 tails: main::@6 blocks: main::@6  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) CHARGEN
(byte*) CHARSET
(byte*) CHARSET4
(byte*) D018
(byte*) PROCPORT
(byte*) SCREEN
(byte[]) bits_count
(void()) main()
(byte~) main::$1 7.333333333333333
(byte~) main::$12 7.333333333333333
(byte~) main::$13 22.0
(byte~) main::$14 22.0
(byte~) main::$15 22.0
(byte~) main::$16 22.0
(byte~) main::$2 22.0
(byte~) main::$22 22.0
(byte~) main::$23 7.333333333333333
(byte~) main::$24 22.0
(byte~) main::$25 22.0
(byte~) main::$26 22.0
(byte~) main::$3 22.0
(byte~) main::$32 22.0
(byte~) main::$33 11.0
(byte~) main::$34 22.0
(byte~) main::$35 22.0
(byte~) main::$4 22.0
(byte~) main::$5 22.0
(byte~) main::$6 22.0
(byte) main::bits
(byte) main::bits#0 22.0
(byte) main::bits#1 22.0
(byte) main::bits#2 22.0
(byte) main::bits#3 22.0
(byte) main::bits_gen
(byte) main::bits_gen#1 4.125
(byte) main::bits_gen#11 33.0
(byte) main::bits_gen#13 33.0
(byte) main::bits_gen#14 4.125
(byte) main::bits_gen#15 33.0
(byte) main::bits_gen#16 4.714285714285714
(byte) main::bits_gen#4 22.0
(byte) main::bits_gen#6 22.0
(byte) main::bits_gen#7 22.0
(byte) main::bits_gen#8 22.0
(byte) main::bits_gen#9 11.0
(byte*) main::chargen
(byte*) main::chargen#1 16.5
(byte*) main::chargen#10 0.7674418604651163
(byte*) main::chargen1
(byte*) main::chargen1#0 0.3333333333333333
(byte*) main::charset4
(byte*) main::charset4#1 7.333333333333333
(byte*) main::charset4#10 0.7857142857142858
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 22.0

Initial phi equivalence classes
[ main::chargen#10 main::chargen#1 ]
[ main::charset4#10 main::charset4#1 ]
[ main::bits_gen#9 ]
[ main::bits_gen#11 main::bits_gen#1 main::bits_gen#4 ]
[ main::bits_gen#13 main::bits_gen#14 main::bits_gen#6 ]
[ main::bits_gen#15 main::bits_gen#8 main::bits_gen#16 ]
[ main::i#2 main::i#1 ]
Added variable main::chargen1#0 to zero page equivalence class [ main::chargen1#0 ]
Added variable main::$1 to zero page equivalence class [ main::$1 ]
Added variable main::$2 to zero page equivalence class [ main::$2 ]
Added variable main::$3 to zero page equivalence class [ main::$3 ]
Added variable main::$4 to zero page equivalence class [ main::$4 ]
Added variable main::$5 to zero page equivalence class [ main::$5 ]
Added variable main::$6 to zero page equivalence class [ main::$6 ]
Added variable main::bits#0 to zero page equivalence class [ main::bits#0 ]
Added variable main::$12 to zero page equivalence class [ main::$12 ]
Added variable main::$13 to zero page equivalence class [ main::$13 ]
Added variable main::$14 to zero page equivalence class [ main::$14 ]
Added variable main::$15 to zero page equivalence class [ main::$15 ]
Added variable main::$16 to zero page equivalence class [ main::$16 ]
Added variable main::bits#1 to zero page equivalence class [ main::bits#1 ]
Added variable main::$22 to zero page equivalence class [ main::$22 ]
Added variable main::$23 to zero page equivalence class [ main::$23 ]
Added variable main::$24 to zero page equivalence class [ main::$24 ]
Added variable main::$25 to zero page equivalence class [ main::$25 ]
Added variable main::$26 to zero page equivalence class [ main::$26 ]
Added variable main::bits#2 to zero page equivalence class [ main::bits#2 ]
Added variable main::$32 to zero page equivalence class [ main::$32 ]
Added variable main::$33 to zero page equivalence class [ main::$33 ]
Added variable main::$34 to zero page equivalence class [ main::$34 ]
Added variable main::$35 to zero page equivalence class [ main::$35 ]
Added variable main::bits#3 to zero page equivalence class [ main::bits#3 ]
Added variable main::bits_gen#7 to zero page equivalence class [ main::bits_gen#7 ]
Complete equivalence classes
[ main::chargen#10 main::chargen#1 ]
[ main::charset4#10 main::charset4#1 ]
[ main::bits_gen#9 ]
[ main::bits_gen#11 main::bits_gen#1 main::bits_gen#4 ]
[ main::bits_gen#13 main::bits_gen#14 main::bits_gen#6 ]
[ main::bits_gen#15 main::bits_gen#8 main::bits_gen#16 ]
[ main::i#2 main::i#1 ]
[ main::chargen1#0 ]
[ main::$1 ]
[ main::$2 ]
[ main::$3 ]
[ main::$4 ]
[ main::$5 ]
[ main::$6 ]
[ main::bits#0 ]
[ main::$12 ]
[ main::$13 ]
[ main::$14 ]
[ main::$15 ]
[ main::$16 ]
[ main::bits#1 ]
[ main::$22 ]
[ main::$23 ]
[ main::$24 ]
[ main::$25 ]
[ main::$26 ]
[ main::bits#2 ]
[ main::$32 ]
[ main::$33 ]
[ main::$34 ]
[ main::$35 ]
[ main::bits#3 ]
[ main::bits_gen#7 ]
Allocated zp ZP_PTR_BYTE:2 [ main::chargen#10 main::chargen#1 ]
Allocated zp ZP_PTR_BYTE:4 [ main::charset4#10 main::charset4#1 ]
Allocated zp ZP_BYTE:6 [ main::bits_gen#9 ]
Allocated zp ZP_BYTE:7 [ main::bits_gen#11 main::bits_gen#1 main::bits_gen#4 ]
Allocated zp ZP_BYTE:8 [ main::bits_gen#13 main::bits_gen#14 main::bits_gen#6 ]
Allocated zp ZP_BYTE:9 [ main::bits_gen#15 main::bits_gen#8 main::bits_gen#16 ]
Allocated zp ZP_BYTE:10 [ main::i#2 main::i#1 ]
Allocated zp ZP_PTR_BYTE:11 [ main::chargen1#0 ]
Allocated zp ZP_BYTE:13 [ main::$1 ]
Allocated zp ZP_BYTE:14 [ main::$2 ]
Allocated zp ZP_BYTE:15 [ main::$3 ]
Allocated zp ZP_BYTE:16 [ main::$4 ]
Allocated zp ZP_BYTE:17 [ main::$5 ]
Allocated zp ZP_BYTE:18 [ main::$6 ]
Allocated zp ZP_BYTE:19 [ main::bits#0 ]
Allocated zp ZP_BYTE:20 [ main::$12 ]
Allocated zp ZP_BYTE:21 [ main::$13 ]
Allocated zp ZP_BYTE:22 [ main::$14 ]
Allocated zp ZP_BYTE:23 [ main::$15 ]
Allocated zp ZP_BYTE:24 [ main::$16 ]
Allocated zp ZP_BYTE:25 [ main::bits#1 ]
Allocated zp ZP_BYTE:26 [ main::$22 ]
Allocated zp ZP_BYTE:27 [ main::$23 ]
Allocated zp ZP_BYTE:28 [ main::$24 ]
Allocated zp ZP_BYTE:29 [ main::$25 ]
Allocated zp ZP_BYTE:30 [ main::$26 ]
Allocated zp ZP_BYTE:31 [ main::bits#2 ]
Allocated zp ZP_BYTE:32 [ main::$32 ]
Allocated zp ZP_BYTE:33 [ main::$33 ]
Allocated zp ZP_BYTE:34 [ main::$34 ]
Allocated zp ZP_BYTE:35 [ main::$35 ]
Allocated zp ZP_BYTE:36 [ main::bits#3 ]
Allocated zp ZP_BYTE:37 [ main::bits_gen#7 ]
INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const CHARSET = $2000
  .const CHARGEN = $d000
  .const PROCPORT = 1
  .const D018 = $d018
  .const CHARSET4 = $2800
  bits_count: .byte 0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4
//SEG2 @begin
bbegin:
  jmp b1
//SEG3 @1
b1:
//SEG4 [0] call main param-assignment [ ] ( )
  jsr main
  jmp bend
//SEG5 @end
bend:
//SEG6 main
main: {
    .label _1 = $d
    .label _2 = $e
    .label _3 = $f
    .label _4 = $10
    .label _5 = $11
    .label _6 = $12
    .label _12 = $14
    .label _13 = $15
    .label _14 = $16
    .label _15 = $17
    .label _16 = $18
    .label _22 = $1a
    .label _23 = $1b
    .label _24 = $1c
    .label _25 = $1d
    .label _26 = $1e
    .label _32 = $20
    .label _33 = $21
    .label _34 = $22
    .label _35 = $23
    .label chargen1 = $b
    .label bits = $13
    .label bits_gen = 7
    .label bits_1 = $19
    .label bits_2 = $1f
    .label bits_3 = $24
    .label bits_gen_6 = 8
    .label bits_gen_7 = $25
    .label charset4 = 4
    .label chargen = 2
    .label bits_gen_8 = 9
    .label i = $a
    .label bits_gen_9 = 6
    .label bits_gen_13 = 8
    .label bits_gen_14 = 8
    .label bits_gen_15 = 9
    .label bits_gen_16 = 9
  //SEG7 asm { sei }
    sei
  //SEG8 [2] *((const byte*) PROCPORT#0) ← (byte) 50 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #$32
    sta PROCPORT
  //SEG9 [3] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG10 [3] phi (byte*) main::charset4#10 = (const byte*) CHARSET4#0 [phi:main->main::@1#0] -- zpptrby1=cowo1 
    lda #<CHARSET4
    sta charset4
    lda #>CHARSET4
    sta charset4+1
  //SEG11 [3] phi (byte*) main::chargen#10 = (const byte*) CHARGEN#0 [phi:main->main::@1#1] -- zpptrby1=cowo1 
    lda #<CHARGEN
    sta chargen
    lda #>CHARGEN
    sta chargen+1
    jmp b1
  //SEG12 [3] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  b1_from_b5:
  //SEG13 [3] phi (byte*) main::charset4#10 = (byte*) main::charset4#1 [phi:main::@5->main::@1#0] -- register_copy 
  //SEG14 [3] phi (byte*) main::chargen#10 = (byte*) main::chargen#1 [phi:main::@5->main::@1#1] -- register_copy 
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [4] (byte*) main::chargen1#0 ← (byte*) main::chargen#10 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ) -- zpptrby1=zpptrby2_plus_1 
    lda chargen
    clc
    adc #1
    sta chargen1
    lda chargen+1
    adc #0
    sta chargen1+1
  //SEG17 [5] (byte~) main::$1 ← *((byte*) main::chargen#10) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 ] ) -- zpby1=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #$60
    sta _1
  //SEG18 [6] (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$2 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$2 ] ) -- zpby1=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen1),y
    and #$60
    sta _2
  //SEG19 [7] (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$3 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$3 ] ) -- zpby1=zpby2_ror_2 
    lda _2
    lsr
    lsr
    sta _3
  //SEG20 [8] (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$4 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$4 ] ) -- zpby1=zpby2_bor_zpby3 
    lda _1
    ora _3
    sta _4
  //SEG21 [9] (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$5 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$5 ] ) -- zpby1=zpby2_ror_1 
    lda _4
    lsr
    sta _5
  //SEG22 [10] (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$6 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$6 ] ) -- zpby1=zpby2_ror_2 
    lda _5
    lsr
    lsr
    sta _6
  //SEG23 [11] (byte) main::bits#0 ← (const byte[]) bits_count#0 *idx (byte~) main::$6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits#0 ] ) -- zpby1=cowo1_derefidx_zpby2 
    ldx _6
    lda bits_count,x
    sta bits
  //SEG24 [12] if((byte) main::bits#0<(byte) 2) goto main::@2 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ) -- zpby1_lt_coby1_then_la1 
    lda bits
    cmp #2
    bcc b2_from_b1
    jmp b7
  //SEG25 main::@7
  b7:
  //SEG26 [13] phi from main::@7 to main::@2 [phi:main::@7->main::@2]
  b2_from_b7:
  //SEG27 [13] phi (byte) main::bits_gen#9 = (byte) 0+(byte) 1 [phi:main::@7->main::@2#0] -- zpby1=coby1 
    lda #0+1
    sta bits_gen_9
    jmp b2
  //SEG28 [13] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG29 [13] phi (byte) main::bits_gen#9 = (byte) 0 [phi:main::@1->main::@2#0] -- zpby1=coby1 
    lda #0
    sta bits_gen_9
    jmp b2
  //SEG30 main::@2
  b2:
  //SEG31 [14] (byte) main::bits_gen#1 ← (byte) main::bits_gen#9 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ) -- zpby1=zpby2_rol_1 
    lda bits_gen_9
    asl
    sta bits_gen
  //SEG32 [15] (byte~) main::$12 ← *((byte*) main::chargen#10) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 ] ) -- zpby1=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #$18
    sta _12
  //SEG33 [16] (byte~) main::$13 ← *((byte*) main::chargen1#0) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$13 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$13 ] ) -- zpby1=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen1),y
    and #$18
    sta _13
  //SEG34 [17] (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$14 ] ) -- zpby1=zpby2_ror_2 
    lda _13
    lsr
    lsr
    sta _14
  //SEG35 [18] (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$15 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$15 ] ) -- zpby1=zpby2_bor_zpby3 
    lda _12
    ora _14
    sta _15
  //SEG36 [19] (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$16 ] ) -- zpby1=zpby2_ror_1 
    lda _15
    lsr
    sta _16
  //SEG37 [20] (byte) main::bits#1 ← (const byte[]) bits_count#0 *idx (byte~) main::$16 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::bits#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::bits#1 ] ) -- zpby1=cowo1_derefidx_zpby2 
    ldx _16
    lda bits_count,x
    sta bits_1
  //SEG38 [21] if((byte) main::bits#1<(byte) 2) goto main::@3 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ) -- zpby1_lt_coby1_then_la1 
    lda bits_1
    cmp #2
    bcc b3_from_b2
    jmp b8
  //SEG39 main::@8
  b8:
  //SEG40 [22] (byte) main::bits_gen#4 ← (byte) main::bits_gen#1 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#4 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#4 ] ) -- zpby1=zpby1_plus_1 
    inc bits_gen
  //SEG41 [23] phi from main::@2 main::@8 to main::@3 [phi:main::@2/main::@8->main::@3]
  b3_from_b2:
  b3_from_b8:
  //SEG42 [23] phi (byte) main::bits_gen#11 = (byte) main::bits_gen#1 [phi:main::@2/main::@8->main::@3#0] -- register_copy 
    jmp b3
  //SEG43 main::@3
  b3:
  //SEG44 [24] (byte) main::bits_gen#14 ← (byte) main::bits_gen#11 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ) -- zpby1=zpby2_rol_1 
    lda bits_gen
    asl
    sta bits_gen_14
  //SEG45 [25] (byte~) main::$22 ← *((byte*) main::chargen#10) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$22 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$22 ] ) -- zpby1=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #6
    sta _22
  //SEG46 [26] (byte~) main::$23 ← (byte~) main::$22 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 ] ) -- zpby1=zpby2_rol_1 
    lda _22
    asl
    sta _23
  //SEG47 [27] (byte~) main::$24 ← *((byte*) main::chargen1#0) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$24 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$24 ] ) -- zpby1=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen1),y
    and #6
    sta _24
  //SEG48 [28] (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$25 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$25 ] ) -- zpby1=zpby2_ror_1 
    lda _24
    lsr
    sta _25
  //SEG49 [29] (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$26 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$26 ] ) -- zpby1=zpby2_bor_zpby3 
    lda _23
    ora _25
    sta _26
  //SEG50 [30] (byte) main::bits#2 ← (const byte[]) bits_count#0 *idx (byte~) main::$26 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::bits#2 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::bits#2 ] ) -- zpby1=cowo1_derefidx_zpby2 
    ldx _26
    lda bits_count,x
    sta bits_2
  //SEG51 [31] if((byte) main::bits#2<(byte) 2) goto main::@4 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ) -- zpby1_lt_coby1_then_la1 
    lda bits_2
    cmp #2
    bcc b4_from_b3
    jmp b9
  //SEG52 main::@9
  b9:
  //SEG53 [32] (byte) main::bits_gen#6 ← (byte) main::bits_gen#14 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#6 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#6 ] ) -- zpby1=zpby1_plus_1 
    inc bits_gen_6
  //SEG54 [33] phi from main::@3 main::@9 to main::@4 [phi:main::@3/main::@9->main::@4]
  b4_from_b3:
  b4_from_b9:
  //SEG55 [33] phi (byte) main::bits_gen#13 = (byte) main::bits_gen#14 [phi:main::@3/main::@9->main::@4#0] -- register_copy 
    jmp b4
  //SEG56 main::@4
  b4:
  //SEG57 [34] (byte) main::bits_gen#16 ← (byte) main::bits_gen#13 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 ] ) -- zpby1=zpby2_rol_1 
    lda bits_gen_13
    asl
    sta bits_gen_16
  //SEG58 [35] (byte~) main::$32 ← *((byte*) main::chargen#10) & (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$32 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$32 ] ) -- zpby1=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #1
    sta _32
  //SEG59 [36] (byte~) main::$33 ← (byte~) main::$32 << (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$33 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$33 ] ) -- zpby1=zpby2_rol_2 
    lda _32
    asl
    asl
    sta _33
  //SEG60 [37] (byte~) main::$34 ← *((byte*) main::chargen1#0) & (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$33 main::$34 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$33 main::$34 ] ) -- zpby1=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen1),y
    and #1
    sta _34
  //SEG61 [38] (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$35 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$35 ] ) -- zpby1=zpby2_bor_zpby3 
    lda _33
    ora _34
    sta _35
  //SEG62 [39] (byte) main::bits#3 ← (const byte[]) bits_count#0 *idx (byte~) main::$35 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::bits#3 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::bits#3 ] ) -- zpby1=cowo1_derefidx_zpby2 
    ldx _35
    lda bits_count,x
    sta bits_3
  //SEG63 [40] if((byte) main::bits#3<(byte) 2) goto main::@5 [ main::chargen#10 main::charset4#10 main::bits_gen#16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 ] ) -- zpby1_lt_coby1_then_la1 
    lda bits_3
    cmp #2
    bcc b5_from_b4
    jmp b10
  //SEG64 main::@10
  b10:
  //SEG65 [41] (byte) main::bits_gen#8 ← (byte) main::bits_gen#16 + (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#8 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#8 ] ) -- zpby1=zpby1_plus_1 
    inc bits_gen_8
  //SEG66 [42] phi from main::@10 main::@4 to main::@5 [phi:main::@10/main::@4->main::@5]
  b5_from_b10:
  b5_from_b4:
  //SEG67 [42] phi (byte) main::bits_gen#15 = (byte) main::bits_gen#8 [phi:main::@10/main::@4->main::@5#0] -- register_copy 
    jmp b5
  //SEG68 main::@5
  b5:
  //SEG69 [43] (byte) main::bits_gen#7 ← (byte) main::bits_gen#15 << (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#7 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#7 ] ) -- zpby1=zpby2_rol_1 
    lda bits_gen_15
    asl
    sta bits_gen_7
  //SEG70 [44] *((byte*) main::charset4#10) ← (byte) main::bits_gen#7 [ main::chargen#10 main::charset4#10 ] ( main:0 [ main::chargen#10 main::charset4#10 ] ) -- _deref_zpptrby1=zpby1 
    ldy #0
    lda bits_gen_7
    sta (charset4),y
  //SEG71 [45] (byte*) main::charset4#1 ← ++ (byte*) main::charset4#10 [ main::chargen#10 main::charset4#1 ] ( main:0 [ main::chargen#10 main::charset4#1 ] ) -- zpptrby1=_inc_zpptrby1 
    inc charset4
    bne !+
    inc charset4+1
  !:
  //SEG72 [46] (byte*) main::chargen#1 ← (byte*) main::chargen#10 + (byte) 2 [ main::chargen#1 main::charset4#1 ] ( main:0 [ main::chargen#1 main::charset4#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda chargen
    clc
    adc #2
    sta chargen
    bcc !+
    inc chargen+1
  !:
  //SEG73 [47] if((byte*) main::chargen#1<(const byte*) CHARGEN#0+(word) 2048) goto main::@1 [ main::chargen#1 main::charset4#1 ] ( main:0 [ main::chargen#1 main::charset4#1 ] ) -- zpptrby1_lt_cowo1_then_la1 
    lda chargen+1
    cmp #>CHARGEN+$800
    bcc b1_from_b5
    bne !+
    lda chargen
    cmp #<CHARGEN+$800
    bcc b1_from_b5
  !:
    jmp b11
  //SEG74 main::@11
  b11:
  //SEG75 [48] *((const byte*) PROCPORT#0) ← (byte) 55 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #$37
    sta PROCPORT
  //SEG76 asm { cli }
    cli
  //SEG77 [50] phi from main::@11 to main::@6 [phi:main::@11->main::@6]
  b6_from_b11:
  //SEG78 [50] phi (byte) main::i#2 = (byte) 0 [phi:main::@11->main::@6#0] -- zpby1=coby1 
    lda #0
    sta i
    jmp b6
  //SEG79 [50] phi from main::@6 to main::@6 [phi:main::@6->main::@6]
  b6_from_b6:
  //SEG80 [50] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@6#0] -- register_copy 
    jmp b6
  //SEG81 main::@6
  b6:
  //SEG82 [51] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ] ( main:0 [ main::i#2 ] ) -- cowo1_derefidx_zpby1=zpby1 
    ldx i
    txa
    sta SCREEN,x
  //SEG83 [52] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:0 [ main::i#1 ] ) -- zpby1=_inc_zpby1 
    inc i
  //SEG84 [53] if((byte) main::i#1!=(byte) 0) goto main::@6 [ main::i#1 ] ( main:0 [ main::i#1 ] ) -- zpby1_neq_0_then_la1 
    lda i
    bne b6_from_b6
    jmp b12
  //SEG85 main::@12
  b12:
  //SEG86 [54] *((const byte*) D018#0) ← (byte) 25 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #$19
    sta D018
    jmp breturn
  //SEG87 main::@return
  breturn:
  //SEG88 [55] return  [ ] ( main:0 [ ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] *((const byte*) PROCPORT#0) ← (byte) 50 [ ] ( main:0 [ ] ) always clobbers reg byte a 
Statement [4] (byte*) main::chargen1#0 ← (byte*) main::chargen#10 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ) always clobbers reg byte a 
Statement [5] (byte~) main::$1 ← *((byte*) main::chargen#10) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 ] ) always clobbers reg byte a reg byte y 
Statement [6] (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$2 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:13 [ main::$1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:13 [ main::$1 ]
Statement [8] (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$4 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$4 ] ) always clobbers reg byte a 
Statement [15] (byte~) main::$12 ← *((byte*) main::chargen#10) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ main::bits_gen#11 main::bits_gen#1 main::bits_gen#4 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:7 [ main::bits_gen#11 main::bits_gen#1 main::bits_gen#4 ]
Statement [16] (byte~) main::$13 ← *((byte*) main::chargen1#0) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$13 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$13 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:20 [ main::$12 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:20 [ main::$12 ]
Statement [18] (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$15 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$15 ] ) always clobbers reg byte a 
Statement [24] (byte) main::bits_gen#14 ← (byte) main::bits_gen#11 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ) always clobbers reg byte a 
Statement [25] (byte~) main::$22 ← *((byte*) main::chargen#10) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$22 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$22 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ main::bits_gen#13 main::bits_gen#14 main::bits_gen#6 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:8 [ main::bits_gen#13 main::bits_gen#14 main::bits_gen#6 ]
Statement [27] (byte~) main::$24 ← *((byte*) main::chargen1#0) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$24 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$24 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:27 [ main::$23 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:27 [ main::$23 ]
Statement [29] (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$26 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$26 ] ) always clobbers reg byte a 
Statement [34] (byte) main::bits_gen#16 ← (byte) main::bits_gen#13 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 ] ) always clobbers reg byte a 
Statement [35] (byte~) main::$32 ← *((byte*) main::chargen#10) & (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$32 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$32 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ main::bits_gen#15 main::bits_gen#8 main::bits_gen#16 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:9 [ main::bits_gen#15 main::bits_gen#8 main::bits_gen#16 ]
Statement [37] (byte~) main::$34 ← *((byte*) main::chargen1#0) & (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$33 main::$34 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$33 main::$34 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:33 [ main::$33 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:33 [ main::$33 ]
Statement [38] (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$35 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$35 ] ) always clobbers reg byte a 
Statement [43] (byte) main::bits_gen#7 ← (byte) main::bits_gen#15 << (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#7 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#7 ] ) always clobbers reg byte a 
Statement [44] *((byte*) main::charset4#10) ← (byte) main::bits_gen#7 [ main::chargen#10 main::charset4#10 ] ( main:0 [ main::chargen#10 main::charset4#10 ] ) always clobbers reg byte y 
Statement [46] (byte*) main::chargen#1 ← (byte*) main::chargen#10 + (byte) 2 [ main::chargen#1 main::charset4#1 ] ( main:0 [ main::chargen#1 main::charset4#1 ] ) always clobbers reg byte a 
Statement [47] if((byte*) main::chargen#1<(const byte*) CHARGEN#0+(word) 2048) goto main::@1 [ main::chargen#1 main::charset4#1 ] ( main:0 [ main::chargen#1 main::charset4#1 ] ) always clobbers reg byte a 
Statement [48] *((const byte*) PROCPORT#0) ← (byte) 55 [ ] ( main:0 [ ] ) always clobbers reg byte a 
Statement [54] *((const byte*) D018#0) ← (byte) 25 [ ] ( main:0 [ ] ) always clobbers reg byte a 
Statement [2] *((const byte*) PROCPORT#0) ← (byte) 50 [ ] ( main:0 [ ] ) always clobbers reg byte a 
Statement [4] (byte*) main::chargen1#0 ← (byte*) main::chargen#10 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ) always clobbers reg byte a 
Statement [5] (byte~) main::$1 ← *((byte*) main::chargen#10) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 ] ) always clobbers reg byte a reg byte y 
Statement [6] (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$2 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$2 ] ) always clobbers reg byte a reg byte y 
Statement [8] (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$4 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$4 ] ) always clobbers reg byte a 
Statement [15] (byte~) main::$12 ← *((byte*) main::chargen#10) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 ] ) always clobbers reg byte a reg byte y 
Statement [16] (byte~) main::$13 ← *((byte*) main::chargen1#0) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$13 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$13 ] ) always clobbers reg byte a reg byte y 
Statement [18] (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$15 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$15 ] ) always clobbers reg byte a 
Statement [24] (byte) main::bits_gen#14 ← (byte) main::bits_gen#11 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ) always clobbers reg byte a 
Statement [25] (byte~) main::$22 ← *((byte*) main::chargen#10) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$22 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$22 ] ) always clobbers reg byte a reg byte y 
Statement [27] (byte~) main::$24 ← *((byte*) main::chargen1#0) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$24 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$24 ] ) always clobbers reg byte a reg byte y 
Statement [29] (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$26 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$26 ] ) always clobbers reg byte a 
Statement [34] (byte) main::bits_gen#16 ← (byte) main::bits_gen#13 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 ] ) always clobbers reg byte a 
Statement [35] (byte~) main::$32 ← *((byte*) main::chargen#10) & (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$32 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$32 ] ) always clobbers reg byte a reg byte y 
Statement [37] (byte~) main::$34 ← *((byte*) main::chargen1#0) & (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$33 main::$34 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$33 main::$34 ] ) always clobbers reg byte a reg byte y 
Statement [38] (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$35 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$35 ] ) always clobbers reg byte a 
Statement [43] (byte) main::bits_gen#7 ← (byte) main::bits_gen#15 << (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#7 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#7 ] ) always clobbers reg byte a 
Statement [44] *((byte*) main::charset4#10) ← (byte) main::bits_gen#7 [ main::chargen#10 main::charset4#10 ] ( main:0 [ main::chargen#10 main::charset4#10 ] ) always clobbers reg byte y 
Statement [46] (byte*) main::chargen#1 ← (byte*) main::chargen#10 + (byte) 2 [ main::chargen#1 main::charset4#1 ] ( main:0 [ main::chargen#1 main::charset4#1 ] ) always clobbers reg byte a 
Statement [47] if((byte*) main::chargen#1<(const byte*) CHARGEN#0+(word) 2048) goto main::@1 [ main::chargen#1 main::charset4#1 ] ( main:0 [ main::chargen#1 main::charset4#1 ] ) always clobbers reg byte a 
Statement [48] *((const byte*) PROCPORT#0) ← (byte) 55 [ ] ( main:0 [ ] ) always clobbers reg byte a 
Statement [54] *((const byte*) D018#0) ← (byte) 25 [ ] ( main:0 [ ] ) always clobbers reg byte a 
Potential registers zp ZP_PTR_BYTE:2 [ main::chargen#10 main::chargen#1 ] : zp ZP_PTR_BYTE:2 , 
Potential registers zp ZP_PTR_BYTE:4 [ main::charset4#10 main::charset4#1 ] : zp ZP_PTR_BYTE:4 , 
Potential registers zp ZP_BYTE:6 [ main::bits_gen#9 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ main::bits_gen#11 main::bits_gen#1 main::bits_gen#4 ] : zp ZP_BYTE:7 , reg byte x , 
Potential registers zp ZP_BYTE:8 [ main::bits_gen#13 main::bits_gen#14 main::bits_gen#6 ] : zp ZP_BYTE:8 , reg byte x , 
Potential registers zp ZP_BYTE:9 [ main::bits_gen#15 main::bits_gen#8 main::bits_gen#16 ] : zp ZP_BYTE:9 , reg byte x , 
Potential registers zp ZP_BYTE:10 [ main::i#2 main::i#1 ] : zp ZP_BYTE:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_PTR_BYTE:11 [ main::chargen1#0 ] : zp ZP_PTR_BYTE:11 , 
Potential registers zp ZP_BYTE:13 [ main::$1 ] : zp ZP_BYTE:13 , reg byte x , 
Potential registers zp ZP_BYTE:14 [ main::$2 ] : zp ZP_BYTE:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:15 [ main::$3 ] : zp ZP_BYTE:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:16 [ main::$4 ] : zp ZP_BYTE:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:17 [ main::$5 ] : zp ZP_BYTE:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:18 [ main::$6 ] : zp ZP_BYTE:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:19 [ main::bits#0 ] : zp ZP_BYTE:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:20 [ main::$12 ] : zp ZP_BYTE:20 , reg byte x , 
Potential registers zp ZP_BYTE:21 [ main::$13 ] : zp ZP_BYTE:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:22 [ main::$14 ] : zp ZP_BYTE:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:23 [ main::$15 ] : zp ZP_BYTE:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:24 [ main::$16 ] : zp ZP_BYTE:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:25 [ main::bits#1 ] : zp ZP_BYTE:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:26 [ main::$22 ] : zp ZP_BYTE:26 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:27 [ main::$23 ] : zp ZP_BYTE:27 , reg byte x , 
Potential registers zp ZP_BYTE:28 [ main::$24 ] : zp ZP_BYTE:28 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:29 [ main::$25 ] : zp ZP_BYTE:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:30 [ main::$26 ] : zp ZP_BYTE:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:31 [ main::bits#2 ] : zp ZP_BYTE:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:32 [ main::$32 ] : zp ZP_BYTE:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:33 [ main::$33 ] : zp ZP_BYTE:33 , reg byte x , 
Potential registers zp ZP_BYTE:34 [ main::$34 ] : zp ZP_BYTE:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:35 [ main::$35 ] : zp ZP_BYTE:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:36 [ main::bits#3 ] : zp ZP_BYTE:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:37 [ main::bits_gen#7 ] : zp ZP_BYTE:37 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 59.71: zp ZP_BYTE:9 [ main::bits_gen#15 main::bits_gen#8 main::bits_gen#16 ] 59.12: zp ZP_BYTE:7 [ main::bits_gen#11 main::bits_gen#1 main::bits_gen#4 ] 59.12: zp ZP_BYTE:8 [ main::bits_gen#13 main::bits_gen#14 main::bits_gen#6 ] 38.5: zp ZP_BYTE:10 [ main::i#2 main::i#1 ] 22: zp ZP_BYTE:14 [ main::$2 ] 22: zp ZP_BYTE:15 [ main::$3 ] 22: zp ZP_BYTE:16 [ main::$4 ] 22: zp ZP_BYTE:17 [ main::$5 ] 22: zp ZP_BYTE:18 [ main::$6 ] 22: zp ZP_BYTE:19 [ main::bits#0 ] 22: zp ZP_BYTE:21 [ main::$13 ] 22: zp ZP_BYTE:22 [ main::$14 ] 22: zp ZP_BYTE:23 [ main::$15 ] 22: zp ZP_BYTE:24 [ main::$16 ] 22: zp ZP_BYTE:25 [ main::bits#1 ] 22: zp ZP_BYTE:26 [ main::$22 ] 22: zp ZP_BYTE:28 [ main::$24 ] 22: zp ZP_BYTE:29 [ main::$25 ] 22: zp ZP_BYTE:30 [ main::$26 ] 22: zp ZP_BYTE:31 [ main::bits#2 ] 22: zp ZP_BYTE:32 [ main::$32 ] 22: zp ZP_BYTE:34 [ main::$34 ] 22: zp ZP_BYTE:35 [ main::$35 ] 22: zp ZP_BYTE:36 [ main::bits#3 ] 22: zp ZP_BYTE:37 [ main::bits_gen#7 ] 17.27: zp ZP_PTR_BYTE:2 [ main::chargen#10 main::chargen#1 ] 11: zp ZP_BYTE:6 [ main::bits_gen#9 ] 11: zp ZP_BYTE:33 [ main::$33 ] 8.12: zp ZP_PTR_BYTE:4 [ main::charset4#10 main::charset4#1 ] 7.33: zp ZP_BYTE:13 [ main::$1 ] 7.33: zp ZP_BYTE:20 [ main::$12 ] 7.33: zp ZP_BYTE:27 [ main::$23 ] 0.33: zp ZP_PTR_BYTE:11 [ main::chargen1#0 ] 
Uplift Scope [] 

Uplifting [] best 5110 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:9 [ main::bits_gen#15 main::bits_gen#8 main::bits_gen#16 ]
Uplifting [main] best 5110 combination zp ZP_BYTE:9 [ main::bits_gen#15 main::bits_gen#8 main::bits_gen#16 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ main::bits_gen#11 main::bits_gen#1 main::bits_gen#4 ]
Uplifting [main] best 5110 combination zp ZP_BYTE:7 [ main::bits_gen#11 main::bits_gen#1 main::bits_gen#4 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:8 [ main::bits_gen#13 main::bits_gen#14 main::bits_gen#6 ]
Uplifting [main] best 5110 combination zp ZP_BYTE:8 [ main::bits_gen#13 main::bits_gen#14 main::bits_gen#6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:10 [ main::i#2 main::i#1 ]
Uplifting [main] best 5010 combination reg byte x [ main::i#2 main::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:14 [ main::$2 ]
Uplifting [main] best 4950 combination reg byte a [ main::$2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:15 [ main::$3 ]
Uplifting [main] best 4890 combination reg byte a [ main::$3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:16 [ main::$4 ]
Uplifting [main] best 4830 combination reg byte a [ main::$4 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:17 [ main::$5 ]
Uplifting [main] best 4770 combination reg byte a [ main::$5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:18 [ main::$6 ]
Uplifting [main] best 4730 combination reg byte a [ main::$6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:19 [ main::bits#0 ]
Uplifting [main] best 4670 combination reg byte a [ main::bits#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:21 [ main::$13 ]
Uplifting [main] best 4610 combination reg byte a [ main::$13 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:22 [ main::$14 ]
Uplifting [main] best 4550 combination reg byte a [ main::$14 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:23 [ main::$15 ]
Uplifting [main] best 4490 combination reg byte a [ main::$15 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:24 [ main::$16 ]
Uplifting [main] best 4450 combination reg byte a [ main::$16 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:25 [ main::bits#1 ]
Uplifting [main] best 4390 combination reg byte a [ main::bits#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:26 [ main::$22 ]
Uplifting [main] best 4330 combination reg byte a [ main::$22 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:28 [ main::$24 ]
Uplifting [main] best 4270 combination reg byte a [ main::$24 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:29 [ main::$25 ]
Uplifting [main] best 4210 combination reg byte a [ main::$25 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:30 [ main::$26 ]
Uplifting [main] best 4170 combination reg byte a [ main::$26 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:31 [ main::bits#2 ]
Uplifting [main] best 4110 combination reg byte a [ main::bits#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:32 [ main::$32 ]
Uplifting [main] best 4050 combination reg byte a [ main::$32 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:34 [ main::$34 ]
Uplifting [main] best 3990 combination reg byte a [ main::$34 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:35 [ main::$35 ]
Uplifting [main] best 3950 combination reg byte a [ main::$35 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:36 [ main::bits#3 ]
Uplifting [main] best 3890 combination reg byte a [ main::bits#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:37 [ main::bits_gen#7 ]
Uplifting [main] best 3830 combination reg byte a [ main::bits_gen#7 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ main::bits_gen#9 ]
Uplifting [main] best 3740 combination reg byte a [ main::bits_gen#9 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:33 [ main::$33 ]
Uplifting [main] best 3740 combination zp ZP_BYTE:33 [ main::$33 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:13 [ main::$1 ]
Uplifting [main] best 3740 combination zp ZP_BYTE:13 [ main::$1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:20 [ main::$12 ]
Uplifting [main] best 3740 combination zp ZP_BYTE:20 [ main::$12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:27 [ main::$23 ]
Uplifting [main] best 3740 combination zp ZP_BYTE:27 [ main::$23 ] 
Coalescing zero page register [ zp ZP_BYTE:7 [ main::bits_gen#11 main::bits_gen#1 main::bits_gen#4 ] ] with [ zp ZP_BYTE:8 [ main::bits_gen#13 main::bits_gen#14 main::bits_gen#6 ] ]
Coalescing zero page register [ zp ZP_BYTE:7 [ main::bits_gen#11 main::bits_gen#1 main::bits_gen#4 main::bits_gen#13 main::bits_gen#14 main::bits_gen#6 ] ] with [ zp ZP_BYTE:9 [ main::bits_gen#15 main::bits_gen#8 main::bits_gen#16 ] ]
Coalescing zero page register [ zp ZP_BYTE:7 [ main::bits_gen#11 main::bits_gen#1 main::bits_gen#4 main::bits_gen#13 main::bits_gen#14 main::bits_gen#6 main::bits_gen#15 main::bits_gen#8 main::bits_gen#16 ] ] with [ zp ZP_BYTE:13 [ main::$1 ] ]
Coalescing zero page register [ zp ZP_BYTE:20 [ main::$12 ] ] with [ zp ZP_BYTE:27 [ main::$23 ] ]
Coalescing zero page register [ zp ZP_BYTE:20 [ main::$12 main::$23 ] ] with [ zp ZP_BYTE:33 [ main::$33 ] ]
Allocated (was zp ZP_BYTE:7) zp ZP_BYTE:6 [ main::bits_gen#11 main::bits_gen#1 main::bits_gen#4 main::bits_gen#13 main::bits_gen#14 main::bits_gen#6 main::bits_gen#15 main::bits_gen#8 main::bits_gen#16 main::$1 ]
Allocated (was zp ZP_PTR_BYTE:11) zp ZP_PTR_BYTE:7 [ main::chargen1#0 ]
Allocated (was zp ZP_BYTE:20) zp ZP_BYTE:9 [ main::$12 main::$23 main::$33 ]
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b7
Removing instruction jmp b2
Removing instruction jmp b8
Removing instruction jmp b3
Removing instruction jmp b9
Removing instruction jmp b4
Removing instruction jmp b10
Removing instruction jmp b5
Removing instruction jmp b11
Removing instruction jmp b6
Removing instruction jmp b12
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const CHARSET = $2000
  .const CHARGEN = $d000
  .const PROCPORT = 1
  .const D018 = $d018
  .const CHARSET4 = $2800
  bits_count: .byte 0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4
//SEG2 @begin
bbegin:
//SEG3 @1
b1:
//SEG4 [0] call main param-assignment [ ] ( )
  jsr main
//SEG5 @end
bend:
//SEG6 main
main: {
    .label _1 = 6
    .label _12 = 9
    .label _23 = 9
    .label _33 = 9
    .label chargen1 = 7
    .label bits_gen = 6
    .label charset4 = 4
    .label chargen = 2
  //SEG7 asm { sei }
    sei
  //SEG8 [2] *((const byte*) PROCPORT#0) ← (byte) 50 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #$32
    sta PROCPORT
  //SEG9 [3] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG10 [3] phi (byte*) main::charset4#10 = (const byte*) CHARSET4#0 [phi:main->main::@1#0] -- zpptrby1=cowo1 
    lda #<CHARSET4
    sta charset4
    lda #>CHARSET4
    sta charset4+1
  //SEG11 [3] phi (byte*) main::chargen#10 = (const byte*) CHARGEN#0 [phi:main->main::@1#1] -- zpptrby1=cowo1 
    lda #<CHARGEN
    sta chargen
    lda #>CHARGEN
    sta chargen+1
    jmp b1
  //SEG12 [3] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  b1_from_b5:
  //SEG13 [3] phi (byte*) main::charset4#10 = (byte*) main::charset4#1 [phi:main::@5->main::@1#0] -- register_copy 
  //SEG14 [3] phi (byte*) main::chargen#10 = (byte*) main::chargen#1 [phi:main::@5->main::@1#1] -- register_copy 
  //SEG15 main::@1
  b1:
  //SEG16 [4] (byte*) main::chargen1#0 ← (byte*) main::chargen#10 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ) -- zpptrby1=zpptrby2_plus_1 
    lda chargen
    clc
    adc #1
    sta chargen1
    lda chargen+1
    adc #0
    sta chargen1+1
  //SEG17 [5] (byte~) main::$1 ← *((byte*) main::chargen#10) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 ] ) -- zpby1=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #$60
    sta _1
  //SEG18 [6] (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$2 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$2 ] ) -- aby=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen1),y
    and #$60
  //SEG19 [7] (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$3 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$3 ] ) -- aby=aby_ror_2 
    lsr
    lsr
  //SEG20 [8] (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$4 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$4 ] ) -- aby=zpby1_bor_aby 
    ora _1
  //SEG21 [9] (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$5 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$5 ] ) -- aby=aby_ror_1 
    lsr
  //SEG22 [10] (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$6 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$6 ] ) -- aby=aby_ror_2 
    lsr
    lsr
  //SEG23 [11] (byte) main::bits#0 ← (const byte[]) bits_count#0 *idx (byte~) main::$6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits#0 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG24 [12] if((byte) main::bits#0<(byte) 2) goto main::@2 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b2_from_b1
  //SEG25 main::@7
  b7:
  //SEG26 [13] phi from main::@7 to main::@2 [phi:main::@7->main::@2]
  b2_from_b7:
  //SEG27 [13] phi (byte) main::bits_gen#9 = (byte) 0+(byte) 1 [phi:main::@7->main::@2#0] -- aby=coby1 
    lda #0+1
    jmp b2
  //SEG28 [13] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG29 [13] phi (byte) main::bits_gen#9 = (byte) 0 [phi:main::@1->main::@2#0] -- aby=coby1 
    lda #0
  //SEG30 main::@2
  b2:
  //SEG31 [14] (byte) main::bits_gen#1 ← (byte) main::bits_gen#9 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ) -- zpby1=aby_rol_1 
    asl
    sta bits_gen
  //SEG32 [15] (byte~) main::$12 ← *((byte*) main::chargen#10) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 ] ) -- zpby1=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #$18
    sta _12
  //SEG33 [16] (byte~) main::$13 ← *((byte*) main::chargen1#0) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$13 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$13 ] ) -- aby=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen1),y
    and #$18
  //SEG34 [17] (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$14 ] ) -- aby=aby_ror_2 
    lsr
    lsr
  //SEG35 [18] (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$15 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$15 ] ) -- aby=zpby1_bor_aby 
    ora _12
  //SEG36 [19] (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$16 ] ) -- aby=aby_ror_1 
    lsr
  //SEG37 [20] (byte) main::bits#1 ← (const byte[]) bits_count#0 *idx (byte~) main::$16 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::bits#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::bits#1 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG38 [21] if((byte) main::bits#1<(byte) 2) goto main::@3 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b3_from_b2
  //SEG39 main::@8
  b8:
  //SEG40 [22] (byte) main::bits_gen#4 ← (byte) main::bits_gen#1 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#4 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#4 ] ) -- zpby1=zpby1_plus_1 
    inc bits_gen
  //SEG41 [23] phi from main::@2 main::@8 to main::@3 [phi:main::@2/main::@8->main::@3]
  b3_from_b2:
  b3_from_b8:
  //SEG42 [23] phi (byte) main::bits_gen#11 = (byte) main::bits_gen#1 [phi:main::@2/main::@8->main::@3#0] -- register_copy 
  //SEG43 main::@3
  b3:
  //SEG44 [24] (byte) main::bits_gen#14 ← (byte) main::bits_gen#11 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ) -- zpby1=zpby1_rol_1 
    asl bits_gen
  //SEG45 [25] (byte~) main::$22 ← *((byte*) main::chargen#10) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$22 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$22 ] ) -- aby=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #6
  //SEG46 [26] (byte~) main::$23 ← (byte~) main::$22 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 ] ) -- zpby1=aby_rol_1 
    asl
    sta _23
  //SEG47 [27] (byte~) main::$24 ← *((byte*) main::chargen1#0) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$24 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$24 ] ) -- aby=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen1),y
    and #6
  //SEG48 [28] (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$25 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$25 ] ) -- aby=aby_ror_1 
    lsr
  //SEG49 [29] (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$26 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$26 ] ) -- aby=zpby1_bor_aby 
    ora _23
  //SEG50 [30] (byte) main::bits#2 ← (const byte[]) bits_count#0 *idx (byte~) main::$26 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::bits#2 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::bits#2 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG51 [31] if((byte) main::bits#2<(byte) 2) goto main::@4 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b4_from_b3
  //SEG52 main::@9
  b9:
  //SEG53 [32] (byte) main::bits_gen#6 ← (byte) main::bits_gen#14 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#6 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#6 ] ) -- zpby1=zpby1_plus_1 
    inc bits_gen
  //SEG54 [33] phi from main::@3 main::@9 to main::@4 [phi:main::@3/main::@9->main::@4]
  b4_from_b3:
  b4_from_b9:
  //SEG55 [33] phi (byte) main::bits_gen#13 = (byte) main::bits_gen#14 [phi:main::@3/main::@9->main::@4#0] -- register_copy 
  //SEG56 main::@4
  b4:
  //SEG57 [34] (byte) main::bits_gen#16 ← (byte) main::bits_gen#13 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 ] ) -- zpby1=zpby1_rol_1 
    asl bits_gen
  //SEG58 [35] (byte~) main::$32 ← *((byte*) main::chargen#10) & (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$32 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$32 ] ) -- aby=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #1
  //SEG59 [36] (byte~) main::$33 ← (byte~) main::$32 << (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$33 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$33 ] ) -- zpby1=aby_rol_2 
    asl
    asl
    sta _33
  //SEG60 [37] (byte~) main::$34 ← *((byte*) main::chargen1#0) & (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$33 main::$34 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$33 main::$34 ] ) -- aby=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen1),y
    and #1
  //SEG61 [38] (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$35 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$35 ] ) -- aby=zpby1_bor_aby 
    ora _33
  //SEG62 [39] (byte) main::bits#3 ← (const byte[]) bits_count#0 *idx (byte~) main::$35 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::bits#3 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::bits#3 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG63 [40] if((byte) main::bits#3<(byte) 2) goto main::@5 [ main::chargen#10 main::charset4#10 main::bits_gen#16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b5_from_b4
  //SEG64 main::@10
  b10:
  //SEG65 [41] (byte) main::bits_gen#8 ← (byte) main::bits_gen#16 + (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#8 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#8 ] ) -- zpby1=zpby1_plus_1 
    inc bits_gen
  //SEG66 [42] phi from main::@10 main::@4 to main::@5 [phi:main::@10/main::@4->main::@5]
  b5_from_b10:
  b5_from_b4:
  //SEG67 [42] phi (byte) main::bits_gen#15 = (byte) main::bits_gen#8 [phi:main::@10/main::@4->main::@5#0] -- register_copy 
  //SEG68 main::@5
  b5:
  //SEG69 [43] (byte) main::bits_gen#7 ← (byte) main::bits_gen#15 << (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#7 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#7 ] ) -- aby=zpby1_rol_1 
    lda bits_gen
    asl
  //SEG70 [44] *((byte*) main::charset4#10) ← (byte) main::bits_gen#7 [ main::chargen#10 main::charset4#10 ] ( main:0 [ main::chargen#10 main::charset4#10 ] ) -- _deref_zpptrby1=aby 
    ldy #0
    sta (charset4),y
  //SEG71 [45] (byte*) main::charset4#1 ← ++ (byte*) main::charset4#10 [ main::chargen#10 main::charset4#1 ] ( main:0 [ main::chargen#10 main::charset4#1 ] ) -- zpptrby1=_inc_zpptrby1 
    inc charset4
    bne !+
    inc charset4+1
  !:
  //SEG72 [46] (byte*) main::chargen#1 ← (byte*) main::chargen#10 + (byte) 2 [ main::chargen#1 main::charset4#1 ] ( main:0 [ main::chargen#1 main::charset4#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda chargen
    clc
    adc #2
    sta chargen
    bcc !+
    inc chargen+1
  !:
  //SEG73 [47] if((byte*) main::chargen#1<(const byte*) CHARGEN#0+(word) 2048) goto main::@1 [ main::chargen#1 main::charset4#1 ] ( main:0 [ main::chargen#1 main::charset4#1 ] ) -- zpptrby1_lt_cowo1_then_la1 
    lda chargen+1
    cmp #>CHARGEN+$800
    bcc b1_from_b5
    bne !+
    lda chargen
    cmp #<CHARGEN+$800
    bcc b1_from_b5
  !:
  //SEG74 main::@11
  b11:
  //SEG75 [48] *((const byte*) PROCPORT#0) ← (byte) 55 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #$37
    sta PROCPORT
  //SEG76 asm { cli }
    cli
  //SEG77 [50] phi from main::@11 to main::@6 [phi:main::@11->main::@6]
  b6_from_b11:
  //SEG78 [50] phi (byte) main::i#2 = (byte) 0 [phi:main::@11->main::@6#0] -- xby=coby1 
    ldx #0
    jmp b6
  //SEG79 [50] phi from main::@6 to main::@6 [phi:main::@6->main::@6]
  b6_from_b6:
  //SEG80 [50] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@6#0] -- register_copy 
  //SEG81 main::@6
  b6:
  //SEG82 [51] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ] ( main:0 [ main::i#2 ] ) -- cowo1_derefidx_xby=xby 
    txa
    sta SCREEN,x
  //SEG83 [52] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:0 [ main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG84 [53] if((byte) main::i#1!=(byte) 0) goto main::@6 [ main::i#1 ] ( main:0 [ main::i#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b6_from_b6
  //SEG85 main::@12
  b12:
  //SEG86 [54] *((const byte*) D018#0) ← (byte) 25 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #$19
    sta D018
  //SEG87 main::@return
  breturn:
  //SEG88 [55] return  [ ] ( main:0 [ ] )
    rts
}

Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const CHARSET = $2000
  .const CHARGEN = $d000
  .const PROCPORT = 1
  .const D018 = $d018
  .const CHARSET4 = $2800
  bits_count: .byte 0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4
//SEG2 @begin
bbegin:
//SEG3 @1
b1:
//SEG4 [0] call main param-assignment [ ] ( )
  jsr main
//SEG5 @end
bend:
//SEG6 main
main: {
    .label _1 = 6
    .label _12 = 9
    .label _23 = 9
    .label _33 = 9
    .label chargen1 = 7
    .label bits_gen = 6
    .label charset4 = 4
    .label chargen = 2
  //SEG7 asm { sei }
    sei
  //SEG8 [2] *((const byte*) PROCPORT#0) ← (byte) 50 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #$32
    sta PROCPORT
  //SEG9 [3] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG10 [3] phi (byte*) main::charset4#10 = (const byte*) CHARSET4#0 [phi:main->main::@1#0] -- zpptrby1=cowo1 
    lda #<CHARSET4
    sta charset4
    lda #>CHARSET4
    sta charset4+1
  //SEG11 [3] phi (byte*) main::chargen#10 = (const byte*) CHARGEN#0 [phi:main->main::@1#1] -- zpptrby1=cowo1 
    lda #<CHARGEN
    sta chargen
    lda #>CHARGEN
    sta chargen+1
    jmp b1
  //SEG12 [3] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  b1_from_b5:
  //SEG13 [3] phi (byte*) main::charset4#10 = (byte*) main::charset4#1 [phi:main::@5->main::@1#0] -- register_copy 
  //SEG14 [3] phi (byte*) main::chargen#10 = (byte*) main::chargen#1 [phi:main::@5->main::@1#1] -- register_copy 
  //SEG15 main::@1
  b1:
  //SEG16 [4] (byte*) main::chargen1#0 ← (byte*) main::chargen#10 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ) -- zpptrby1=zpptrby2_plus_1 
    lda chargen
    clc
    adc #1
    sta chargen1
    lda chargen+1
    adc #0
    sta chargen1+1
  //SEG17 [5] (byte~) main::$1 ← *((byte*) main::chargen#10) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 ] ) -- zpby1=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #$60
    sta _1
  //SEG18 [6] (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$2 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$2 ] ) -- aby=_deref_zpptrby1_band_coby1 
    lda (chargen1),y
    and #$60
  //SEG19 [7] (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$3 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$3 ] ) -- aby=aby_ror_2 
    lsr
    lsr
  //SEG20 [8] (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$4 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$4 ] ) -- aby=zpby1_bor_aby 
    ora _1
  //SEG21 [9] (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$5 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$5 ] ) -- aby=aby_ror_1 
    lsr
  //SEG22 [10] (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$6 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$6 ] ) -- aby=aby_ror_2 
    lsr
    lsr
  //SEG23 [11] (byte) main::bits#0 ← (const byte[]) bits_count#0 *idx (byte~) main::$6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits#0 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG24 [12] if((byte) main::bits#0<(byte) 2) goto main::@2 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b2_from_b1
  //SEG25 main::@7
  b7:
  //SEG26 [13] phi from main::@7 to main::@2 [phi:main::@7->main::@2]
  b2_from_b7:
  //SEG27 [13] phi (byte) main::bits_gen#9 = (byte) 0+(byte) 1 [phi:main::@7->main::@2#0] -- aby=coby1 
    lda #0+1
    jmp b2
  //SEG28 [13] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG29 [13] phi (byte) main::bits_gen#9 = (byte) 0 [phi:main::@1->main::@2#0] -- aby=coby1 
    lda #0
  //SEG30 main::@2
  b2:
  //SEG31 [14] (byte) main::bits_gen#1 ← (byte) main::bits_gen#9 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ) -- zpby1=aby_rol_1 
    asl
    sta bits_gen
  //SEG32 [15] (byte~) main::$12 ← *((byte*) main::chargen#10) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 ] ) -- zpby1=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #$18
    sta _12
  //SEG33 [16] (byte~) main::$13 ← *((byte*) main::chargen1#0) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$13 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$13 ] ) -- aby=_deref_zpptrby1_band_coby1 
    lda (chargen1),y
    and #$18
  //SEG34 [17] (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$14 ] ) -- aby=aby_ror_2 
    lsr
    lsr
  //SEG35 [18] (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$15 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$15 ] ) -- aby=zpby1_bor_aby 
    ora _12
  //SEG36 [19] (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$16 ] ) -- aby=aby_ror_1 
    lsr
  //SEG37 [20] (byte) main::bits#1 ← (const byte[]) bits_count#0 *idx (byte~) main::$16 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::bits#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::bits#1 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG38 [21] if((byte) main::bits#1<(byte) 2) goto main::@3 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b3_from_b2
  //SEG39 main::@8
  b8:
  //SEG40 [22] (byte) main::bits_gen#4 ← (byte) main::bits_gen#1 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#4 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#4 ] ) -- zpby1=zpby1_plus_1 
    inc bits_gen
  //SEG41 [23] phi from main::@2 main::@8 to main::@3 [phi:main::@2/main::@8->main::@3]
  b3_from_b2:
  b3_from_b8:
  //SEG42 [23] phi (byte) main::bits_gen#11 = (byte) main::bits_gen#1 [phi:main::@2/main::@8->main::@3#0] -- register_copy 
  //SEG43 main::@3
  b3:
  //SEG44 [24] (byte) main::bits_gen#14 ← (byte) main::bits_gen#11 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ) -- zpby1=zpby1_rol_1 
    asl bits_gen
  //SEG45 [25] (byte~) main::$22 ← *((byte*) main::chargen#10) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$22 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$22 ] ) -- aby=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #6
  //SEG46 [26] (byte~) main::$23 ← (byte~) main::$22 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 ] ) -- zpby1=aby_rol_1 
    asl
    sta _23
  //SEG47 [27] (byte~) main::$24 ← *((byte*) main::chargen1#0) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$24 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$24 ] ) -- aby=_deref_zpptrby1_band_coby1 
    lda (chargen1),y
    and #6
  //SEG48 [28] (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$25 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$25 ] ) -- aby=aby_ror_1 
    lsr
  //SEG49 [29] (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$26 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$26 ] ) -- aby=zpby1_bor_aby 
    ora _23
  //SEG50 [30] (byte) main::bits#2 ← (const byte[]) bits_count#0 *idx (byte~) main::$26 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::bits#2 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::bits#2 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG51 [31] if((byte) main::bits#2<(byte) 2) goto main::@4 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b4_from_b3
  //SEG52 main::@9
  b9:
  //SEG53 [32] (byte) main::bits_gen#6 ← (byte) main::bits_gen#14 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#6 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#6 ] ) -- zpby1=zpby1_plus_1 
    inc bits_gen
  //SEG54 [33] phi from main::@3 main::@9 to main::@4 [phi:main::@3/main::@9->main::@4]
  b4_from_b3:
  b4_from_b9:
  //SEG55 [33] phi (byte) main::bits_gen#13 = (byte) main::bits_gen#14 [phi:main::@3/main::@9->main::@4#0] -- register_copy 
  //SEG56 main::@4
  b4:
  //SEG57 [34] (byte) main::bits_gen#16 ← (byte) main::bits_gen#13 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 ] ) -- zpby1=zpby1_rol_1 
    asl bits_gen
  //SEG58 [35] (byte~) main::$32 ← *((byte*) main::chargen#10) & (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$32 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$32 ] ) -- aby=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #1
  //SEG59 [36] (byte~) main::$33 ← (byte~) main::$32 << (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$33 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$33 ] ) -- zpby1=aby_rol_2 
    asl
    asl
    sta _33
  //SEG60 [37] (byte~) main::$34 ← *((byte*) main::chargen1#0) & (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$33 main::$34 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$33 main::$34 ] ) -- aby=_deref_zpptrby1_band_coby1 
    lda (chargen1),y
    and #1
  //SEG61 [38] (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$35 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$35 ] ) -- aby=zpby1_bor_aby 
    ora _33
  //SEG62 [39] (byte) main::bits#3 ← (const byte[]) bits_count#0 *idx (byte~) main::$35 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::bits#3 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::bits#3 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG63 [40] if((byte) main::bits#3<(byte) 2) goto main::@5 [ main::chargen#10 main::charset4#10 main::bits_gen#16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b5_from_b4
  //SEG64 main::@10
  b10:
  //SEG65 [41] (byte) main::bits_gen#8 ← (byte) main::bits_gen#16 + (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#8 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#8 ] ) -- zpby1=zpby1_plus_1 
    inc bits_gen
  //SEG66 [42] phi from main::@10 main::@4 to main::@5 [phi:main::@10/main::@4->main::@5]
  b5_from_b10:
  b5_from_b4:
  //SEG67 [42] phi (byte) main::bits_gen#15 = (byte) main::bits_gen#8 [phi:main::@10/main::@4->main::@5#0] -- register_copy 
  //SEG68 main::@5
  b5:
  //SEG69 [43] (byte) main::bits_gen#7 ← (byte) main::bits_gen#15 << (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#7 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#7 ] ) -- aby=zpby1_rol_1 
    lda bits_gen
    asl
  //SEG70 [44] *((byte*) main::charset4#10) ← (byte) main::bits_gen#7 [ main::chargen#10 main::charset4#10 ] ( main:0 [ main::chargen#10 main::charset4#10 ] ) -- _deref_zpptrby1=aby 
    ldy #0
    sta (charset4),y
  //SEG71 [45] (byte*) main::charset4#1 ← ++ (byte*) main::charset4#10 [ main::chargen#10 main::charset4#1 ] ( main:0 [ main::chargen#10 main::charset4#1 ] ) -- zpptrby1=_inc_zpptrby1 
    inc charset4
    bne !+
    inc charset4+1
  !:
  //SEG72 [46] (byte*) main::chargen#1 ← (byte*) main::chargen#10 + (byte) 2 [ main::chargen#1 main::charset4#1 ] ( main:0 [ main::chargen#1 main::charset4#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda chargen
    clc
    adc #2
    sta chargen
    bcc !+
    inc chargen+1
  !:
  //SEG73 [47] if((byte*) main::chargen#1<(const byte*) CHARGEN#0+(word) 2048) goto main::@1 [ main::chargen#1 main::charset4#1 ] ( main:0 [ main::chargen#1 main::charset4#1 ] ) -- zpptrby1_lt_cowo1_then_la1 
    lda chargen+1
    cmp #>CHARGEN+$800
    bcc b1_from_b5
    bne !+
    lda chargen
    cmp #<CHARGEN+$800
    bcc b1_from_b5
  !:
  //SEG74 main::@11
  b11:
  //SEG75 [48] *((const byte*) PROCPORT#0) ← (byte) 55 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #$37
    sta PROCPORT
  //SEG76 asm { cli }
    cli
  //SEG77 [50] phi from main::@11 to main::@6 [phi:main::@11->main::@6]
  b6_from_b11:
  //SEG78 [50] phi (byte) main::i#2 = (byte) 0 [phi:main::@11->main::@6#0] -- xby=coby1 
    ldx #0
    jmp b6
  //SEG79 [50] phi from main::@6 to main::@6 [phi:main::@6->main::@6]
  b6_from_b6:
  //SEG80 [50] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@6#0] -- register_copy 
  //SEG81 main::@6
  b6:
  //SEG82 [51] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ] ( main:0 [ main::i#2 ] ) -- cowo1_derefidx_xby=xby 
    txa
    sta SCREEN,x
  //SEG83 [52] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:0 [ main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG84 [53] if((byte) main::i#1!=(byte) 0) goto main::@6 [ main::i#1 ] ( main:0 [ main::i#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b6_from_b6
  //SEG85 main::@12
  b12:
  //SEG86 [54] *((const byte*) D018#0) ← (byte) 25 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #$19
    sta D018
  //SEG87 main::@return
  breturn:
  //SEG88 [55] return  [ ] ( main:0 [ ] )
    rts
}

Replacing label b3_from_b2 with b3
Replacing label b4_from_b3 with b4
Replacing label b5_from_b4 with b5
Replacing label b1_from_b5 with b1
Replacing label b1_from_b5 with b1
Replacing label b6_from_b6 with b6
Removing instruction bbegin:
Removing instruction b1_from_b5:
Removing instruction b2_from_b7:
Removing instruction b3_from_b2:
Removing instruction b3_from_b8:
Removing instruction b4_from_b3:
Removing instruction b4_from_b9:
Removing instruction b5_from_b10:
Removing instruction b5_from_b4:
Removing instruction b6_from_b6:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const CHARSET = $2000
  .const CHARGEN = $d000
  .const PROCPORT = 1
  .const D018 = $d018
  .const CHARSET4 = $2800
  bits_count: .byte 0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4
//SEG2 @begin
//SEG3 @1
b1:
//SEG4 [0] call main param-assignment [ ] ( )
  jsr main
//SEG5 @end
bend:
//SEG6 main
main: {
    .label _1 = 6
    .label _12 = 9
    .label _23 = 9
    .label _33 = 9
    .label chargen1 = 7
    .label bits_gen = 6
    .label charset4 = 4
    .label chargen = 2
  //SEG7 asm { sei }
    sei
  //SEG8 [2] *((const byte*) PROCPORT#0) ← (byte) 50 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #$32
    sta PROCPORT
  //SEG9 [3] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG10 [3] phi (byte*) main::charset4#10 = (const byte*) CHARSET4#0 [phi:main->main::@1#0] -- zpptrby1=cowo1 
    lda #<CHARSET4
    sta charset4
    lda #>CHARSET4
    sta charset4+1
  //SEG11 [3] phi (byte*) main::chargen#10 = (const byte*) CHARGEN#0 [phi:main->main::@1#1] -- zpptrby1=cowo1 
    lda #<CHARGEN
    sta chargen
    lda #>CHARGEN
    sta chargen+1
    jmp b1
  //SEG12 [3] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  //SEG13 [3] phi (byte*) main::charset4#10 = (byte*) main::charset4#1 [phi:main::@5->main::@1#0] -- register_copy 
  //SEG14 [3] phi (byte*) main::chargen#10 = (byte*) main::chargen#1 [phi:main::@5->main::@1#1] -- register_copy 
  //SEG15 main::@1
  b1:
  //SEG16 [4] (byte*) main::chargen1#0 ← (byte*) main::chargen#10 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ) -- zpptrby1=zpptrby2_plus_1 
    lda chargen
    clc
    adc #1
    sta chargen1
    lda chargen+1
    adc #0
    sta chargen1+1
  //SEG17 [5] (byte~) main::$1 ← *((byte*) main::chargen#10) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 ] ) -- zpby1=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #$60
    sta _1
  //SEG18 [6] (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$2 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$2 ] ) -- aby=_deref_zpptrby1_band_coby1 
    lda (chargen1),y
    and #$60
  //SEG19 [7] (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$3 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$3 ] ) -- aby=aby_ror_2 
    lsr
    lsr
  //SEG20 [8] (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$4 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$4 ] ) -- aby=zpby1_bor_aby 
    ora _1
  //SEG21 [9] (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$5 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$5 ] ) -- aby=aby_ror_1 
    lsr
  //SEG22 [10] (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$6 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$6 ] ) -- aby=aby_ror_2 
    lsr
    lsr
  //SEG23 [11] (byte) main::bits#0 ← (const byte[]) bits_count#0 *idx (byte~) main::$6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits#0 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG24 [12] if((byte) main::bits#0<(byte) 2) goto main::@2 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b2_from_b1
  //SEG25 main::@7
  b7:
  //SEG26 [13] phi from main::@7 to main::@2 [phi:main::@7->main::@2]
  //SEG27 [13] phi (byte) main::bits_gen#9 = (byte) 0+(byte) 1 [phi:main::@7->main::@2#0] -- aby=coby1 
    lda #0+1
    jmp b2
  //SEG28 [13] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG29 [13] phi (byte) main::bits_gen#9 = (byte) 0 [phi:main::@1->main::@2#0] -- aby=coby1 
    lda #0
  //SEG30 main::@2
  b2:
  //SEG31 [14] (byte) main::bits_gen#1 ← (byte) main::bits_gen#9 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ) -- zpby1=aby_rol_1 
    asl
    sta bits_gen
  //SEG32 [15] (byte~) main::$12 ← *((byte*) main::chargen#10) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 ] ) -- zpby1=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #$18
    sta _12
  //SEG33 [16] (byte~) main::$13 ← *((byte*) main::chargen1#0) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$13 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$13 ] ) -- aby=_deref_zpptrby1_band_coby1 
    lda (chargen1),y
    and #$18
  //SEG34 [17] (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$14 ] ) -- aby=aby_ror_2 
    lsr
    lsr
  //SEG35 [18] (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$15 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$15 ] ) -- aby=zpby1_bor_aby 
    ora _12
  //SEG36 [19] (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$16 ] ) -- aby=aby_ror_1 
    lsr
  //SEG37 [20] (byte) main::bits#1 ← (const byte[]) bits_count#0 *idx (byte~) main::$16 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::bits#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::bits#1 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG38 [21] if((byte) main::bits#1<(byte) 2) goto main::@3 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b3
  //SEG39 main::@8
  b8:
  //SEG40 [22] (byte) main::bits_gen#4 ← (byte) main::bits_gen#1 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#4 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#4 ] ) -- zpby1=zpby1_plus_1 
    inc bits_gen
  //SEG41 [23] phi from main::@2 main::@8 to main::@3 [phi:main::@2/main::@8->main::@3]
  //SEG42 [23] phi (byte) main::bits_gen#11 = (byte) main::bits_gen#1 [phi:main::@2/main::@8->main::@3#0] -- register_copy 
  //SEG43 main::@3
  b3:
  //SEG44 [24] (byte) main::bits_gen#14 ← (byte) main::bits_gen#11 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ) -- zpby1=zpby1_rol_1 
    asl bits_gen
  //SEG45 [25] (byte~) main::$22 ← *((byte*) main::chargen#10) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$22 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$22 ] ) -- aby=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #6
  //SEG46 [26] (byte~) main::$23 ← (byte~) main::$22 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 ] ) -- zpby1=aby_rol_1 
    asl
    sta _23
  //SEG47 [27] (byte~) main::$24 ← *((byte*) main::chargen1#0) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$24 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$24 ] ) -- aby=_deref_zpptrby1_band_coby1 
    lda (chargen1),y
    and #6
  //SEG48 [28] (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$25 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$25 ] ) -- aby=aby_ror_1 
    lsr
  //SEG49 [29] (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$26 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$26 ] ) -- aby=zpby1_bor_aby 
    ora _23
  //SEG50 [30] (byte) main::bits#2 ← (const byte[]) bits_count#0 *idx (byte~) main::$26 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::bits#2 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::bits#2 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG51 [31] if((byte) main::bits#2<(byte) 2) goto main::@4 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b4
  //SEG52 main::@9
  b9:
  //SEG53 [32] (byte) main::bits_gen#6 ← (byte) main::bits_gen#14 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#6 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#6 ] ) -- zpby1=zpby1_plus_1 
    inc bits_gen
  //SEG54 [33] phi from main::@3 main::@9 to main::@4 [phi:main::@3/main::@9->main::@4]
  //SEG55 [33] phi (byte) main::bits_gen#13 = (byte) main::bits_gen#14 [phi:main::@3/main::@9->main::@4#0] -- register_copy 
  //SEG56 main::@4
  b4:
  //SEG57 [34] (byte) main::bits_gen#16 ← (byte) main::bits_gen#13 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 ] ) -- zpby1=zpby1_rol_1 
    asl bits_gen
  //SEG58 [35] (byte~) main::$32 ← *((byte*) main::chargen#10) & (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$32 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$32 ] ) -- aby=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #1
  //SEG59 [36] (byte~) main::$33 ← (byte~) main::$32 << (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$33 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$33 ] ) -- zpby1=aby_rol_2 
    asl
    asl
    sta _33
  //SEG60 [37] (byte~) main::$34 ← *((byte*) main::chargen1#0) & (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$33 main::$34 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$33 main::$34 ] ) -- aby=_deref_zpptrby1_band_coby1 
    lda (chargen1),y
    and #1
  //SEG61 [38] (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$35 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$35 ] ) -- aby=zpby1_bor_aby 
    ora _33
  //SEG62 [39] (byte) main::bits#3 ← (const byte[]) bits_count#0 *idx (byte~) main::$35 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::bits#3 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::bits#3 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG63 [40] if((byte) main::bits#3<(byte) 2) goto main::@5 [ main::chargen#10 main::charset4#10 main::bits_gen#16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b5
  //SEG64 main::@10
  b10:
  //SEG65 [41] (byte) main::bits_gen#8 ← (byte) main::bits_gen#16 + (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#8 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#8 ] ) -- zpby1=zpby1_plus_1 
    inc bits_gen
  //SEG66 [42] phi from main::@10 main::@4 to main::@5 [phi:main::@10/main::@4->main::@5]
  //SEG67 [42] phi (byte) main::bits_gen#15 = (byte) main::bits_gen#8 [phi:main::@10/main::@4->main::@5#0] -- register_copy 
  //SEG68 main::@5
  b5:
  //SEG69 [43] (byte) main::bits_gen#7 ← (byte) main::bits_gen#15 << (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#7 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#7 ] ) -- aby=zpby1_rol_1 
    lda bits_gen
    asl
  //SEG70 [44] *((byte*) main::charset4#10) ← (byte) main::bits_gen#7 [ main::chargen#10 main::charset4#10 ] ( main:0 [ main::chargen#10 main::charset4#10 ] ) -- _deref_zpptrby1=aby 
    ldy #0
    sta (charset4),y
  //SEG71 [45] (byte*) main::charset4#1 ← ++ (byte*) main::charset4#10 [ main::chargen#10 main::charset4#1 ] ( main:0 [ main::chargen#10 main::charset4#1 ] ) -- zpptrby1=_inc_zpptrby1 
    inc charset4
    bne !+
    inc charset4+1
  !:
  //SEG72 [46] (byte*) main::chargen#1 ← (byte*) main::chargen#10 + (byte) 2 [ main::chargen#1 main::charset4#1 ] ( main:0 [ main::chargen#1 main::charset4#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda chargen
    clc
    adc #2
    sta chargen
    bcc !+
    inc chargen+1
  !:
  //SEG73 [47] if((byte*) main::chargen#1<(const byte*) CHARGEN#0+(word) 2048) goto main::@1 [ main::chargen#1 main::charset4#1 ] ( main:0 [ main::chargen#1 main::charset4#1 ] ) -- zpptrby1_lt_cowo1_then_la1 
    lda chargen+1
    cmp #>CHARGEN+$800
    bcc b1
    bne !+
    lda chargen
    cmp #<CHARGEN+$800
    bcc b1
  !:
  //SEG74 main::@11
  b11:
  //SEG75 [48] *((const byte*) PROCPORT#0) ← (byte) 55 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #$37
    sta PROCPORT
  //SEG76 asm { cli }
    cli
  //SEG77 [50] phi from main::@11 to main::@6 [phi:main::@11->main::@6]
  b6_from_b11:
  //SEG78 [50] phi (byte) main::i#2 = (byte) 0 [phi:main::@11->main::@6#0] -- xby=coby1 
    ldx #0
    jmp b6
  //SEG79 [50] phi from main::@6 to main::@6 [phi:main::@6->main::@6]
  //SEG80 [50] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@6#0] -- register_copy 
  //SEG81 main::@6
  b6:
  //SEG82 [51] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ] ( main:0 [ main::i#2 ] ) -- cowo1_derefidx_xby=xby 
    txa
    sta SCREEN,x
  //SEG83 [52] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:0 [ main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG84 [53] if((byte) main::i#1!=(byte) 0) goto main::@6 [ main::i#1 ] ( main:0 [ main::i#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b6
  //SEG85 main::@12
  b12:
  //SEG86 [54] *((const byte*) D018#0) ← (byte) 25 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #$19
    sta D018
  //SEG87 main::@return
  breturn:
  //SEG88 [55] return  [ ] ( main:0 [ ] )
    rts
}

Removing instruction b1:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction b6_from_b11:
Removing instruction b12:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const CHARSET = $2000
  .const CHARGEN = $d000
  .const PROCPORT = 1
  .const D018 = $d018
  .const CHARSET4 = $2800
  bits_count: .byte 0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4
//SEG2 @begin
//SEG3 @1
//SEG4 [0] call main param-assignment [ ] ( )
  jsr main
//SEG5 @end
//SEG6 main
main: {
    .label _1 = 6
    .label _12 = 9
    .label _23 = 9
    .label _33 = 9
    .label chargen1 = 7
    .label bits_gen = 6
    .label charset4 = 4
    .label chargen = 2
  //SEG7 asm { sei }
    sei
  //SEG8 [2] *((const byte*) PROCPORT#0) ← (byte) 50 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #$32
    sta PROCPORT
  //SEG9 [3] phi from main to main::@1 [phi:main->main::@1]
  //SEG10 [3] phi (byte*) main::charset4#10 = (const byte*) CHARSET4#0 [phi:main->main::@1#0] -- zpptrby1=cowo1 
    lda #<CHARSET4
    sta charset4
    lda #>CHARSET4
    sta charset4+1
  //SEG11 [3] phi (byte*) main::chargen#10 = (const byte*) CHARGEN#0 [phi:main->main::@1#1] -- zpptrby1=cowo1 
    lda #<CHARGEN
    sta chargen
    lda #>CHARGEN
    sta chargen+1
    jmp b1
  //SEG12 [3] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  //SEG13 [3] phi (byte*) main::charset4#10 = (byte*) main::charset4#1 [phi:main::@5->main::@1#0] -- register_copy 
  //SEG14 [3] phi (byte*) main::chargen#10 = (byte*) main::chargen#1 [phi:main::@5->main::@1#1] -- register_copy 
  //SEG15 main::@1
  b1:
  //SEG16 [4] (byte*) main::chargen1#0 ← (byte*) main::chargen#10 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ) -- zpptrby1=zpptrby2_plus_1 
    lda chargen
    clc
    adc #1
    sta chargen1
    lda chargen+1
    adc #0
    sta chargen1+1
  //SEG17 [5] (byte~) main::$1 ← *((byte*) main::chargen#10) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 ] ) -- zpby1=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #$60
    sta _1
  //SEG18 [6] (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$2 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$2 ] ) -- aby=_deref_zpptrby1_band_coby1 
    lda (chargen1),y
    and #$60
  //SEG19 [7] (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$3 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$3 ] ) -- aby=aby_ror_2 
    lsr
    lsr
  //SEG20 [8] (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$4 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$4 ] ) -- aby=zpby1_bor_aby 
    ora _1
  //SEG21 [9] (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$5 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$5 ] ) -- aby=aby_ror_1 
    lsr
  //SEG22 [10] (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$6 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$6 ] ) -- aby=aby_ror_2 
    lsr
    lsr
  //SEG23 [11] (byte) main::bits#0 ← (const byte[]) bits_count#0 *idx (byte~) main::$6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits#0 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG24 [12] if((byte) main::bits#0<(byte) 2) goto main::@2 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b2_from_b1
  //SEG25 main::@7
  //SEG26 [13] phi from main::@7 to main::@2 [phi:main::@7->main::@2]
  //SEG27 [13] phi (byte) main::bits_gen#9 = (byte) 0+(byte) 1 [phi:main::@7->main::@2#0] -- aby=coby1 
    lda #0+1
    jmp b2
  //SEG28 [13] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG29 [13] phi (byte) main::bits_gen#9 = (byte) 0 [phi:main::@1->main::@2#0] -- aby=coby1 
    lda #0
  //SEG30 main::@2
  b2:
  //SEG31 [14] (byte) main::bits_gen#1 ← (byte) main::bits_gen#9 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ) -- zpby1=aby_rol_1 
    asl
    sta bits_gen
  //SEG32 [15] (byte~) main::$12 ← *((byte*) main::chargen#10) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 ] ) -- zpby1=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #$18
    sta _12
  //SEG33 [16] (byte~) main::$13 ← *((byte*) main::chargen1#0) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$13 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$13 ] ) -- aby=_deref_zpptrby1_band_coby1 
    lda (chargen1),y
    and #$18
  //SEG34 [17] (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$14 ] ) -- aby=aby_ror_2 
    lsr
    lsr
  //SEG35 [18] (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$15 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$15 ] ) -- aby=zpby1_bor_aby 
    ora _12
  //SEG36 [19] (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$16 ] ) -- aby=aby_ror_1 
    lsr
  //SEG37 [20] (byte) main::bits#1 ← (const byte[]) bits_count#0 *idx (byte~) main::$16 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::bits#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::bits#1 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG38 [21] if((byte) main::bits#1<(byte) 2) goto main::@3 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b3
  //SEG39 main::@8
  //SEG40 [22] (byte) main::bits_gen#4 ← (byte) main::bits_gen#1 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#4 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#4 ] ) -- zpby1=zpby1_plus_1 
    inc bits_gen
  //SEG41 [23] phi from main::@2 main::@8 to main::@3 [phi:main::@2/main::@8->main::@3]
  //SEG42 [23] phi (byte) main::bits_gen#11 = (byte) main::bits_gen#1 [phi:main::@2/main::@8->main::@3#0] -- register_copy 
  //SEG43 main::@3
  b3:
  //SEG44 [24] (byte) main::bits_gen#14 ← (byte) main::bits_gen#11 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ) -- zpby1=zpby1_rol_1 
    asl bits_gen
  //SEG45 [25] (byte~) main::$22 ← *((byte*) main::chargen#10) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$22 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$22 ] ) -- aby=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #6
  //SEG46 [26] (byte~) main::$23 ← (byte~) main::$22 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 ] ) -- zpby1=aby_rol_1 
    asl
    sta _23
  //SEG47 [27] (byte~) main::$24 ← *((byte*) main::chargen1#0) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$24 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$24 ] ) -- aby=_deref_zpptrby1_band_coby1 
    lda (chargen1),y
    and #6
  //SEG48 [28] (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$25 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$25 ] ) -- aby=aby_ror_1 
    lsr
  //SEG49 [29] (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$26 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$26 ] ) -- aby=zpby1_bor_aby 
    ora _23
  //SEG50 [30] (byte) main::bits#2 ← (const byte[]) bits_count#0 *idx (byte~) main::$26 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::bits#2 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::bits#2 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG51 [31] if((byte) main::bits#2<(byte) 2) goto main::@4 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b4
  //SEG52 main::@9
  //SEG53 [32] (byte) main::bits_gen#6 ← (byte) main::bits_gen#14 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#6 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#6 ] ) -- zpby1=zpby1_plus_1 
    inc bits_gen
  //SEG54 [33] phi from main::@3 main::@9 to main::@4 [phi:main::@3/main::@9->main::@4]
  //SEG55 [33] phi (byte) main::bits_gen#13 = (byte) main::bits_gen#14 [phi:main::@3/main::@9->main::@4#0] -- register_copy 
  //SEG56 main::@4
  b4:
  //SEG57 [34] (byte) main::bits_gen#16 ← (byte) main::bits_gen#13 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 ] ) -- zpby1=zpby1_rol_1 
    asl bits_gen
  //SEG58 [35] (byte~) main::$32 ← *((byte*) main::chargen#10) & (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$32 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$32 ] ) -- aby=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #1
  //SEG59 [36] (byte~) main::$33 ← (byte~) main::$32 << (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$33 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$33 ] ) -- zpby1=aby_rol_2 
    asl
    asl
    sta _33
  //SEG60 [37] (byte~) main::$34 ← *((byte*) main::chargen1#0) & (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$33 main::$34 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$33 main::$34 ] ) -- aby=_deref_zpptrby1_band_coby1 
    lda (chargen1),y
    and #1
  //SEG61 [38] (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$35 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$35 ] ) -- aby=zpby1_bor_aby 
    ora _33
  //SEG62 [39] (byte) main::bits#3 ← (const byte[]) bits_count#0 *idx (byte~) main::$35 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::bits#3 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::bits#3 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG63 [40] if((byte) main::bits#3<(byte) 2) goto main::@5 [ main::chargen#10 main::charset4#10 main::bits_gen#16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b5
  //SEG64 main::@10
  //SEG65 [41] (byte) main::bits_gen#8 ← (byte) main::bits_gen#16 + (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#8 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#8 ] ) -- zpby1=zpby1_plus_1 
    inc bits_gen
  //SEG66 [42] phi from main::@10 main::@4 to main::@5 [phi:main::@10/main::@4->main::@5]
  //SEG67 [42] phi (byte) main::bits_gen#15 = (byte) main::bits_gen#8 [phi:main::@10/main::@4->main::@5#0] -- register_copy 
  //SEG68 main::@5
  b5:
  //SEG69 [43] (byte) main::bits_gen#7 ← (byte) main::bits_gen#15 << (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#7 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#7 ] ) -- aby=zpby1_rol_1 
    lda bits_gen
    asl
  //SEG70 [44] *((byte*) main::charset4#10) ← (byte) main::bits_gen#7 [ main::chargen#10 main::charset4#10 ] ( main:0 [ main::chargen#10 main::charset4#10 ] ) -- _deref_zpptrby1=aby 
    ldy #0
    sta (charset4),y
  //SEG71 [45] (byte*) main::charset4#1 ← ++ (byte*) main::charset4#10 [ main::chargen#10 main::charset4#1 ] ( main:0 [ main::chargen#10 main::charset4#1 ] ) -- zpptrby1=_inc_zpptrby1 
    inc charset4
    bne !+
    inc charset4+1
  !:
  //SEG72 [46] (byte*) main::chargen#1 ← (byte*) main::chargen#10 + (byte) 2 [ main::chargen#1 main::charset4#1 ] ( main:0 [ main::chargen#1 main::charset4#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda chargen
    clc
    adc #2
    sta chargen
    bcc !+
    inc chargen+1
  !:
  //SEG73 [47] if((byte*) main::chargen#1<(const byte*) CHARGEN#0+(word) 2048) goto main::@1 [ main::chargen#1 main::charset4#1 ] ( main:0 [ main::chargen#1 main::charset4#1 ] ) -- zpptrby1_lt_cowo1_then_la1 
    lda chargen+1
    cmp #>CHARGEN+$800
    bcc b1
    bne !+
    lda chargen
    cmp #<CHARGEN+$800
    bcc b1
  !:
  //SEG74 main::@11
  //SEG75 [48] *((const byte*) PROCPORT#0) ← (byte) 55 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #$37
    sta PROCPORT
  //SEG76 asm { cli }
    cli
  //SEG77 [50] phi from main::@11 to main::@6 [phi:main::@11->main::@6]
  //SEG78 [50] phi (byte) main::i#2 = (byte) 0 [phi:main::@11->main::@6#0] -- xby=coby1 
    ldx #0
    jmp b6
  //SEG79 [50] phi from main::@6 to main::@6 [phi:main::@6->main::@6]
  //SEG80 [50] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@6#0] -- register_copy 
  //SEG81 main::@6
  b6:
  //SEG82 [51] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ] ( main:0 [ main::i#2 ] ) -- cowo1_derefidx_xby=xby 
    txa
    sta SCREEN,x
  //SEG83 [52] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:0 [ main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG84 [53] if((byte) main::i#1!=(byte) 0) goto main::@6 [ main::i#1 ] ( main:0 [ main::i#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b6
  //SEG85 main::@12
  //SEG86 [54] *((const byte*) D018#0) ← (byte) 25 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #$19
    sta D018
  //SEG87 main::@return
  //SEG88 [55] return  [ ] ( main:0 [ ] )
    rts
}

Removing instruction jmp b1
Removing instruction jmp b6
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const CHARSET = $2000
  .const CHARGEN = $d000
  .const PROCPORT = 1
  .const D018 = $d018
  .const CHARSET4 = $2800
  bits_count: .byte 0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4
//SEG2 @begin
//SEG3 @1
//SEG4 [0] call main param-assignment [ ] ( )
  jsr main
//SEG5 @end
//SEG6 main
main: {
    .label _1 = 6
    .label _12 = 9
    .label _23 = 9
    .label _33 = 9
    .label chargen1 = 7
    .label bits_gen = 6
    .label charset4 = 4
    .label chargen = 2
  //SEG7 asm { sei }
    sei
  //SEG8 [2] *((const byte*) PROCPORT#0) ← (byte) 50 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #$32
    sta PROCPORT
  //SEG9 [3] phi from main to main::@1 [phi:main->main::@1]
  //SEG10 [3] phi (byte*) main::charset4#10 = (const byte*) CHARSET4#0 [phi:main->main::@1#0] -- zpptrby1=cowo1 
    lda #<CHARSET4
    sta charset4
    lda #>CHARSET4
    sta charset4+1
  //SEG11 [3] phi (byte*) main::chargen#10 = (const byte*) CHARGEN#0 [phi:main->main::@1#1] -- zpptrby1=cowo1 
    lda #<CHARGEN
    sta chargen
    lda #>CHARGEN
    sta chargen+1
  //SEG12 [3] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  //SEG13 [3] phi (byte*) main::charset4#10 = (byte*) main::charset4#1 [phi:main::@5->main::@1#0] -- register_copy 
  //SEG14 [3] phi (byte*) main::chargen#10 = (byte*) main::chargen#1 [phi:main::@5->main::@1#1] -- register_copy 
  //SEG15 main::@1
  b1:
  //SEG16 [4] (byte*) main::chargen1#0 ← (byte*) main::chargen#10 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ) -- zpptrby1=zpptrby2_plus_1 
    lda chargen
    clc
    adc #1
    sta chargen1
    lda chargen+1
    adc #0
    sta chargen1+1
  //SEG17 [5] (byte~) main::$1 ← *((byte*) main::chargen#10) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 ] ) -- zpby1=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #$60
    sta _1
  //SEG18 [6] (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$2 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$2 ] ) -- aby=_deref_zpptrby1_band_coby1 
    lda (chargen1),y
    and #$60
  //SEG19 [7] (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$3 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$3 ] ) -- aby=aby_ror_2 
    lsr
    lsr
  //SEG20 [8] (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$4 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$4 ] ) -- aby=zpby1_bor_aby 
    ora _1
  //SEG21 [9] (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$5 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$5 ] ) -- aby=aby_ror_1 
    lsr
  //SEG22 [10] (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$6 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$6 ] ) -- aby=aby_ror_2 
    lsr
    lsr
  //SEG23 [11] (byte) main::bits#0 ← (const byte[]) bits_count#0 *idx (byte~) main::$6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits#0 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG24 [12] if((byte) main::bits#0<(byte) 2) goto main::@2 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b2_from_b1
  //SEG25 main::@7
  //SEG26 [13] phi from main::@7 to main::@2 [phi:main::@7->main::@2]
  //SEG27 [13] phi (byte) main::bits_gen#9 = (byte) 0+(byte) 1 [phi:main::@7->main::@2#0] -- aby=coby1 
    lda #0+1
    jmp b2
  //SEG28 [13] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG29 [13] phi (byte) main::bits_gen#9 = (byte) 0 [phi:main::@1->main::@2#0] -- aby=coby1 
    lda #0
  //SEG30 main::@2
  b2:
  //SEG31 [14] (byte) main::bits_gen#1 ← (byte) main::bits_gen#9 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ) -- zpby1=aby_rol_1 
    asl
    sta bits_gen
  //SEG32 [15] (byte~) main::$12 ← *((byte*) main::chargen#10) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 ] ) -- zpby1=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #$18
    sta _12
  //SEG33 [16] (byte~) main::$13 ← *((byte*) main::chargen1#0) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$13 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$13 ] ) -- aby=_deref_zpptrby1_band_coby1 
    lda (chargen1),y
    and #$18
  //SEG34 [17] (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$14 ] ) -- aby=aby_ror_2 
    lsr
    lsr
  //SEG35 [18] (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$15 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$15 ] ) -- aby=zpby1_bor_aby 
    ora _12
  //SEG36 [19] (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$16 ] ) -- aby=aby_ror_1 
    lsr
  //SEG37 [20] (byte) main::bits#1 ← (const byte[]) bits_count#0 *idx (byte~) main::$16 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::bits#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::bits#1 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG38 [21] if((byte) main::bits#1<(byte) 2) goto main::@3 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b3
  //SEG39 main::@8
  //SEG40 [22] (byte) main::bits_gen#4 ← (byte) main::bits_gen#1 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#4 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#4 ] ) -- zpby1=zpby1_plus_1 
    inc bits_gen
  //SEG41 [23] phi from main::@2 main::@8 to main::@3 [phi:main::@2/main::@8->main::@3]
  //SEG42 [23] phi (byte) main::bits_gen#11 = (byte) main::bits_gen#1 [phi:main::@2/main::@8->main::@3#0] -- register_copy 
  //SEG43 main::@3
  b3:
  //SEG44 [24] (byte) main::bits_gen#14 ← (byte) main::bits_gen#11 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ) -- zpby1=zpby1_rol_1 
    asl bits_gen
  //SEG45 [25] (byte~) main::$22 ← *((byte*) main::chargen#10) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$22 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$22 ] ) -- aby=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #6
  //SEG46 [26] (byte~) main::$23 ← (byte~) main::$22 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 ] ) -- zpby1=aby_rol_1 
    asl
    sta _23
  //SEG47 [27] (byte~) main::$24 ← *((byte*) main::chargen1#0) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$24 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$24 ] ) -- aby=_deref_zpptrby1_band_coby1 
    lda (chargen1),y
    and #6
  //SEG48 [28] (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$25 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$25 ] ) -- aby=aby_ror_1 
    lsr
  //SEG49 [29] (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$26 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$26 ] ) -- aby=zpby1_bor_aby 
    ora _23
  //SEG50 [30] (byte) main::bits#2 ← (const byte[]) bits_count#0 *idx (byte~) main::$26 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::bits#2 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::bits#2 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG51 [31] if((byte) main::bits#2<(byte) 2) goto main::@4 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b4
  //SEG52 main::@9
  //SEG53 [32] (byte) main::bits_gen#6 ← (byte) main::bits_gen#14 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#6 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#6 ] ) -- zpby1=zpby1_plus_1 
    inc bits_gen
  //SEG54 [33] phi from main::@3 main::@9 to main::@4 [phi:main::@3/main::@9->main::@4]
  //SEG55 [33] phi (byte) main::bits_gen#13 = (byte) main::bits_gen#14 [phi:main::@3/main::@9->main::@4#0] -- register_copy 
  //SEG56 main::@4
  b4:
  //SEG57 [34] (byte) main::bits_gen#16 ← (byte) main::bits_gen#13 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 ] ) -- zpby1=zpby1_rol_1 
    asl bits_gen
  //SEG58 [35] (byte~) main::$32 ← *((byte*) main::chargen#10) & (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$32 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$32 ] ) -- aby=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #1
  //SEG59 [36] (byte~) main::$33 ← (byte~) main::$32 << (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$33 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$33 ] ) -- zpby1=aby_rol_2 
    asl
    asl
    sta _33
  //SEG60 [37] (byte~) main::$34 ← *((byte*) main::chargen1#0) & (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$33 main::$34 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$33 main::$34 ] ) -- aby=_deref_zpptrby1_band_coby1 
    lda (chargen1),y
    and #1
  //SEG61 [38] (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$35 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$35 ] ) -- aby=zpby1_bor_aby 
    ora _33
  //SEG62 [39] (byte) main::bits#3 ← (const byte[]) bits_count#0 *idx (byte~) main::$35 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::bits#3 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::bits#3 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG63 [40] if((byte) main::bits#3<(byte) 2) goto main::@5 [ main::chargen#10 main::charset4#10 main::bits_gen#16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b5
  //SEG64 main::@10
  //SEG65 [41] (byte) main::bits_gen#8 ← (byte) main::bits_gen#16 + (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#8 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#8 ] ) -- zpby1=zpby1_plus_1 
    inc bits_gen
  //SEG66 [42] phi from main::@10 main::@4 to main::@5 [phi:main::@10/main::@4->main::@5]
  //SEG67 [42] phi (byte) main::bits_gen#15 = (byte) main::bits_gen#8 [phi:main::@10/main::@4->main::@5#0] -- register_copy 
  //SEG68 main::@5
  b5:
  //SEG69 [43] (byte) main::bits_gen#7 ← (byte) main::bits_gen#15 << (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#7 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#7 ] ) -- aby=zpby1_rol_1 
    lda bits_gen
    asl
  //SEG70 [44] *((byte*) main::charset4#10) ← (byte) main::bits_gen#7 [ main::chargen#10 main::charset4#10 ] ( main:0 [ main::chargen#10 main::charset4#10 ] ) -- _deref_zpptrby1=aby 
    ldy #0
    sta (charset4),y
  //SEG71 [45] (byte*) main::charset4#1 ← ++ (byte*) main::charset4#10 [ main::chargen#10 main::charset4#1 ] ( main:0 [ main::chargen#10 main::charset4#1 ] ) -- zpptrby1=_inc_zpptrby1 
    inc charset4
    bne !+
    inc charset4+1
  !:
  //SEG72 [46] (byte*) main::chargen#1 ← (byte*) main::chargen#10 + (byte) 2 [ main::chargen#1 main::charset4#1 ] ( main:0 [ main::chargen#1 main::charset4#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda chargen
    clc
    adc #2
    sta chargen
    bcc !+
    inc chargen+1
  !:
  //SEG73 [47] if((byte*) main::chargen#1<(const byte*) CHARGEN#0+(word) 2048) goto main::@1 [ main::chargen#1 main::charset4#1 ] ( main:0 [ main::chargen#1 main::charset4#1 ] ) -- zpptrby1_lt_cowo1_then_la1 
    lda chargen+1
    cmp #>CHARGEN+$800
    bcc b1
    bne !+
    lda chargen
    cmp #<CHARGEN+$800
    bcc b1
  !:
  //SEG74 main::@11
  //SEG75 [48] *((const byte*) PROCPORT#0) ← (byte) 55 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #$37
    sta PROCPORT
  //SEG76 asm { cli }
    cli
  //SEG77 [50] phi from main::@11 to main::@6 [phi:main::@11->main::@6]
  //SEG78 [50] phi (byte) main::i#2 = (byte) 0 [phi:main::@11->main::@6#0] -- xby=coby1 
    ldx #0
  //SEG79 [50] phi from main::@6 to main::@6 [phi:main::@6->main::@6]
  //SEG80 [50] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@6#0] -- register_copy 
  //SEG81 main::@6
  b6:
  //SEG82 [51] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ] ( main:0 [ main::i#2 ] ) -- cowo1_derefidx_xby=xby 
    txa
    sta SCREEN,x
  //SEG83 [52] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:0 [ main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG84 [53] if((byte) main::i#1!=(byte) 0) goto main::@6 [ main::i#1 ] ( main:0 [ main::i#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b6
  //SEG85 main::@12
  //SEG86 [54] *((const byte*) D018#0) ← (byte) 25 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #$19
    sta D018
  //SEG87 main::@return
  //SEG88 [55] return  [ ] ( main:0 [ ] )
    rts
}

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) CHARGEN
(const byte*) CHARGEN#0 CHARGEN = (word) 53248
(byte*) CHARSET
(const byte*) CHARSET#0 CHARSET = (word) 8192
(byte*) CHARSET4
(const byte*) CHARSET4#0 CHARSET4 = (word) 10240
(byte*) D018
(const byte*) D018#0 D018 = (word) 53272
(byte*) PROCPORT
(const byte*) PROCPORT#0 PROCPORT = (byte) 1
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (word) 1024
(byte[]) bits_count
(const byte[]) bits_count#0 bits_count = { (byte) 0, (byte) 1, (byte) 1, (byte) 2, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 1, (byte) 2, (byte) 2, (byte) 3, (byte) 2, (byte) 3, (byte) 3, (byte) 4 }
(void()) main()
(byte~) main::$1 $1 zp ZP_BYTE:6 7.333333333333333
(byte~) main::$12 $12 zp ZP_BYTE:9 7.333333333333333
(byte~) main::$13 reg byte a 22.0
(byte~) main::$14 reg byte a 22.0
(byte~) main::$15 reg byte a 22.0
(byte~) main::$16 reg byte a 22.0
(byte~) main::$2 reg byte a 22.0
(byte~) main::$22 reg byte a 22.0
(byte~) main::$23 $23 zp ZP_BYTE:9 7.333333333333333
(byte~) main::$24 reg byte a 22.0
(byte~) main::$25 reg byte a 22.0
(byte~) main::$26 reg byte a 22.0
(byte~) main::$3 reg byte a 22.0
(byte~) main::$32 reg byte a 22.0
(byte~) main::$33 $33 zp ZP_BYTE:9 11.0
(byte~) main::$34 reg byte a 22.0
(byte~) main::$35 reg byte a 22.0
(byte~) main::$4 reg byte a 22.0
(byte~) main::$5 reg byte a 22.0
(byte~) main::$6 reg byte a 22.0
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::bits
(byte) main::bits#0 reg byte a 22.0
(byte) main::bits#1 reg byte a 22.0
(byte) main::bits#2 reg byte a 22.0
(byte) main::bits#3 reg byte a 22.0
(byte) main::bits_gen
(byte) main::bits_gen#1 bits_gen zp ZP_BYTE:6 4.125
(byte) main::bits_gen#11 bits_gen zp ZP_BYTE:6 33.0
(byte) main::bits_gen#13 bits_gen zp ZP_BYTE:6 33.0
(byte) main::bits_gen#14 bits_gen zp ZP_BYTE:6 4.125
(byte) main::bits_gen#15 bits_gen zp ZP_BYTE:6 33.0
(byte) main::bits_gen#16 bits_gen zp ZP_BYTE:6 4.714285714285714
(byte) main::bits_gen#4 bits_gen zp ZP_BYTE:6 22.0
(byte) main::bits_gen#6 bits_gen zp ZP_BYTE:6 22.0
(byte) main::bits_gen#7 reg byte a 22.0
(byte) main::bits_gen#8 bits_gen zp ZP_BYTE:6 22.0
(byte) main::bits_gen#9 reg byte a 11.0
(byte*) main::chargen
(byte*) main::chargen#1 chargen zp ZP_PTR_BYTE:2 16.5
(byte*) main::chargen#10 chargen zp ZP_PTR_BYTE:2 0.7674418604651163
(byte*) main::chargen1
(byte*) main::chargen1#0 chargen1 zp ZP_PTR_BYTE:7 0.3333333333333333
(byte*) main::charset4
(byte*) main::charset4#1 charset4 zp ZP_PTR_BYTE:4 7.333333333333333
(byte*) main::charset4#10 charset4 zp ZP_PTR_BYTE:4 0.7857142857142858
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 22.0

zp ZP_PTR_BYTE:2 [ main::chargen#10 main::chargen#1 ]
zp ZP_PTR_BYTE:4 [ main::charset4#10 main::charset4#1 ]
reg byte a [ main::bits_gen#9 ]
zp ZP_BYTE:6 [ main::bits_gen#11 main::bits_gen#1 main::bits_gen#4 main::bits_gen#13 main::bits_gen#14 main::bits_gen#6 main::bits_gen#15 main::bits_gen#8 main::bits_gen#16 main::$1 ]
reg byte x [ main::i#2 main::i#1 ]
zp ZP_PTR_BYTE:7 [ main::chargen1#0 ]
reg byte a [ main::$2 ]
reg byte a [ main::$3 ]
reg byte a [ main::$4 ]
reg byte a [ main::$5 ]
reg byte a [ main::$6 ]
reg byte a [ main::bits#0 ]
zp ZP_BYTE:9 [ main::$12 main::$23 main::$33 ]
reg byte a [ main::$13 ]
reg byte a [ main::$14 ]
reg byte a [ main::$15 ]
reg byte a [ main::$16 ]
reg byte a [ main::bits#1 ]
reg byte a [ main::$22 ]
reg byte a [ main::$24 ]
reg byte a [ main::$25 ]
reg byte a [ main::$26 ]
reg byte a [ main::bits#2 ]
reg byte a [ main::$32 ]
reg byte a [ main::$34 ]
reg byte a [ main::$35 ]
reg byte a [ main::bits#3 ]
reg byte a [ main::bits_gen#7 ]

FINAL CODE
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  .const CHARSET = $2000
  .const CHARGEN = $d000
  .const PROCPORT = 1
  .const D018 = $d018
  .const CHARSET4 = $2800
  bits_count: .byte 0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4
//SEG2 @begin
//SEG3 @1
//SEG4 [0] call main param-assignment [ ] ( )
  jsr main
//SEG5 @end
//SEG6 main
main: {
    .label _1 = 6
    .label _12 = 9
    .label _23 = 9
    .label _33 = 9
    .label chargen1 = 7
    .label bits_gen = 6
    .label charset4 = 4
    .label chargen = 2
  //SEG7 asm { sei }
    sei
  //SEG8 [2] *((const byte*) PROCPORT#0) ← (byte) 50 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #$32
    sta PROCPORT
  //SEG9 [3] phi from main to main::@1 [phi:main->main::@1]
  //SEG10 [3] phi (byte*) main::charset4#10 = (const byte*) CHARSET4#0 [phi:main->main::@1#0] -- zpptrby1=cowo1 
    lda #<CHARSET4
    sta charset4
    lda #>CHARSET4
    sta charset4+1
  //SEG11 [3] phi (byte*) main::chargen#10 = (const byte*) CHARGEN#0 [phi:main->main::@1#1] -- zpptrby1=cowo1 
    lda #<CHARGEN
    sta chargen
    lda #>CHARGEN
    sta chargen+1
  //SEG12 [3] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  //SEG13 [3] phi (byte*) main::charset4#10 = (byte*) main::charset4#1 [phi:main::@5->main::@1#0] -- register_copy 
  //SEG14 [3] phi (byte*) main::chargen#10 = (byte*) main::chargen#1 [phi:main::@5->main::@1#1] -- register_copy 
  //SEG15 main::@1
  b1:
  //SEG16 [4] (byte*) main::chargen1#0 ← (byte*) main::chargen#10 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ) -- zpptrby1=zpptrby2_plus_1 
    lda chargen
    clc
    adc #1
    sta chargen1
    lda chargen+1
    adc #0
    sta chargen1+1
  //SEG17 [5] (byte~) main::$1 ← *((byte*) main::chargen#10) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 ] ) -- zpby1=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #$60
    sta _1
  //SEG18 [6] (byte~) main::$2 ← *((byte*) main::chargen1#0) & (byte) 96 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$2 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$2 ] ) -- aby=_deref_zpptrby1_band_coby1 
    lda (chargen1),y
    and #$60
  //SEG19 [7] (byte~) main::$3 ← (byte~) main::$2 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$3 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$1 main::$3 ] ) -- aby=aby_ror_2 
    lsr
    lsr
  //SEG20 [8] (byte~) main::$4 ← (byte~) main::$1 | (byte~) main::$3 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$4 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$4 ] ) -- aby=zpby1_bor_aby 
    ora _1
  //SEG21 [9] (byte~) main::$5 ← (byte~) main::$4 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$5 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$5 ] ) -- aby=aby_ror_1 
    lsr
  //SEG22 [10] (byte~) main::$6 ← (byte~) main::$5 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$6 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::$6 ] ) -- aby=aby_ror_2 
    lsr
    lsr
  //SEG23 [11] (byte) main::bits#0 ← (const byte[]) bits_count#0 *idx (byte~) main::$6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits#0 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG24 [12] if((byte) main::bits#0<(byte) 2) goto main::@2 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b2_from_b1
  //SEG25 main::@7
  //SEG26 [13] phi from main::@7 to main::@2 [phi:main::@7->main::@2]
  //SEG27 [13] phi (byte) main::bits_gen#9 = (byte) 0+(byte) 1 [phi:main::@7->main::@2#0] -- aby=coby1 
    lda #0+1
    jmp b2
  //SEG28 [13] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG29 [13] phi (byte) main::bits_gen#9 = (byte) 0 [phi:main::@1->main::@2#0] -- aby=coby1 
    lda #0
  //SEG30 main::@2
  b2:
  //SEG31 [14] (byte) main::bits_gen#1 ← (byte) main::bits_gen#9 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ) -- zpby1=aby_rol_1 
    asl
    sta bits_gen
  //SEG32 [15] (byte~) main::$12 ← *((byte*) main::chargen#10) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 ] ) -- zpby1=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #$18
    sta _12
  //SEG33 [16] (byte~) main::$13 ← *((byte*) main::chargen1#0) & (byte) 24 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$13 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$13 ] ) -- aby=_deref_zpptrby1_band_coby1 
    lda (chargen1),y
    and #$18
  //SEG34 [17] (byte~) main::$14 ← (byte~) main::$13 >> (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$12 main::$14 ] ) -- aby=aby_ror_2 
    lsr
    lsr
  //SEG35 [18] (byte~) main::$15 ← (byte~) main::$12 | (byte~) main::$14 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$15 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$15 ] ) -- aby=zpby1_bor_aby 
    ora _12
  //SEG36 [19] (byte~) main::$16 ← (byte~) main::$15 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::$16 ] ) -- aby=aby_ror_1 
    lsr
  //SEG37 [20] (byte) main::bits#1 ← (const byte[]) bits_count#0 *idx (byte~) main::$16 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::bits#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 main::bits#1 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG38 [21] if((byte) main::bits#1<(byte) 2) goto main::@3 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#1 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b3
  //SEG39 main::@8
  //SEG40 [22] (byte) main::bits_gen#4 ← (byte) main::bits_gen#1 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#4 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#4 ] ) -- zpby1=zpby1_plus_1 
    inc bits_gen
  //SEG41 [23] phi from main::@2 main::@8 to main::@3 [phi:main::@2/main::@8->main::@3]
  //SEG42 [23] phi (byte) main::bits_gen#11 = (byte) main::bits_gen#1 [phi:main::@2/main::@8->main::@3#0] -- register_copy 
  //SEG43 main::@3
  b3:
  //SEG44 [24] (byte) main::bits_gen#14 ← (byte) main::bits_gen#11 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ) -- zpby1=zpby1_rol_1 
    asl bits_gen
  //SEG45 [25] (byte~) main::$22 ← *((byte*) main::chargen#10) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$22 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$22 ] ) -- aby=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #6
  //SEG46 [26] (byte~) main::$23 ← (byte~) main::$22 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 ] ) -- zpby1=aby_rol_1 
    asl
    sta _23
  //SEG47 [27] (byte~) main::$24 ← *((byte*) main::chargen1#0) & (byte) 6 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$24 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$24 ] ) -- aby=_deref_zpptrby1_band_coby1 
    lda (chargen1),y
    and #6
  //SEG48 [28] (byte~) main::$25 ← (byte~) main::$24 >> (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$25 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$23 main::$25 ] ) -- aby=aby_ror_1 
    lsr
  //SEG49 [29] (byte~) main::$26 ← (byte~) main::$23 | (byte~) main::$25 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$26 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::$26 ] ) -- aby=zpby1_bor_aby 
    ora _23
  //SEG50 [30] (byte) main::bits#2 ← (const byte[]) bits_count#0 *idx (byte~) main::$26 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::bits#2 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 main::bits#2 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG51 [31] if((byte) main::bits#2<(byte) 2) goto main::@4 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#14 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b4
  //SEG52 main::@9
  //SEG53 [32] (byte) main::bits_gen#6 ← (byte) main::bits_gen#14 + (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#6 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#6 ] ) -- zpby1=zpby1_plus_1 
    inc bits_gen
  //SEG54 [33] phi from main::@3 main::@9 to main::@4 [phi:main::@3/main::@9->main::@4]
  //SEG55 [33] phi (byte) main::bits_gen#13 = (byte) main::bits_gen#14 [phi:main::@3/main::@9->main::@4#0] -- register_copy 
  //SEG56 main::@4
  b4:
  //SEG57 [34] (byte) main::bits_gen#16 ← (byte) main::bits_gen#13 << (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 ] ) -- zpby1=zpby1_rol_1 
    asl bits_gen
  //SEG58 [35] (byte~) main::$32 ← *((byte*) main::chargen#10) & (byte) 1 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$32 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$32 ] ) -- aby=_deref_zpptrby1_band_coby1 
    ldy #0
    lda (chargen),y
    and #1
  //SEG59 [36] (byte~) main::$33 ← (byte~) main::$32 << (byte) 2 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$33 ] ( main:0 [ main::chargen#10 main::charset4#10 main::chargen1#0 main::bits_gen#16 main::$33 ] ) -- zpby1=aby_rol_2 
    asl
    asl
    sta _33
  //SEG60 [37] (byte~) main::$34 ← *((byte*) main::chargen1#0) & (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$33 main::$34 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$33 main::$34 ] ) -- aby=_deref_zpptrby1_band_coby1 
    lda (chargen1),y
    and #1
  //SEG61 [38] (byte~) main::$35 ← (byte~) main::$33 | (byte~) main::$34 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$35 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::$35 ] ) -- aby=zpby1_bor_aby 
    ora _33
  //SEG62 [39] (byte) main::bits#3 ← (const byte[]) bits_count#0 *idx (byte~) main::$35 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::bits#3 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 main::bits#3 ] ) -- aby=cowo1_derefidx_aby 
    tax
    lda bits_count,x
  //SEG63 [40] if((byte) main::bits#3<(byte) 2) goto main::@5 [ main::chargen#10 main::charset4#10 main::bits_gen#16 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#16 ] ) -- aby_lt_coby1_then_la1 
    cmp #2
    bcc b5
  //SEG64 main::@10
  //SEG65 [41] (byte) main::bits_gen#8 ← (byte) main::bits_gen#16 + (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#8 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#8 ] ) -- zpby1=zpby1_plus_1 
    inc bits_gen
  //SEG66 [42] phi from main::@10 main::@4 to main::@5 [phi:main::@10/main::@4->main::@5]
  //SEG67 [42] phi (byte) main::bits_gen#15 = (byte) main::bits_gen#8 [phi:main::@10/main::@4->main::@5#0] -- register_copy 
  //SEG68 main::@5
  b5:
  //SEG69 [43] (byte) main::bits_gen#7 ← (byte) main::bits_gen#15 << (byte) 1 [ main::chargen#10 main::charset4#10 main::bits_gen#7 ] ( main:0 [ main::chargen#10 main::charset4#10 main::bits_gen#7 ] ) -- aby=zpby1_rol_1 
    lda bits_gen
    asl
  //SEG70 [44] *((byte*) main::charset4#10) ← (byte) main::bits_gen#7 [ main::chargen#10 main::charset4#10 ] ( main:0 [ main::chargen#10 main::charset4#10 ] ) -- _deref_zpptrby1=aby 
    ldy #0
    sta (charset4),y
  //SEG71 [45] (byte*) main::charset4#1 ← ++ (byte*) main::charset4#10 [ main::chargen#10 main::charset4#1 ] ( main:0 [ main::chargen#10 main::charset4#1 ] ) -- zpptrby1=_inc_zpptrby1 
    inc charset4
    bne !+
    inc charset4+1
  !:
  //SEG72 [46] (byte*) main::chargen#1 ← (byte*) main::chargen#10 + (byte) 2 [ main::chargen#1 main::charset4#1 ] ( main:0 [ main::chargen#1 main::charset4#1 ] ) -- zpptrby1=zpptrby1_plus_coby1 
    lda chargen
    clc
    adc #2
    sta chargen
    bcc !+
    inc chargen+1
  !:
  //SEG73 [47] if((byte*) main::chargen#1<(const byte*) CHARGEN#0+(word) 2048) goto main::@1 [ main::chargen#1 main::charset4#1 ] ( main:0 [ main::chargen#1 main::charset4#1 ] ) -- zpptrby1_lt_cowo1_then_la1 
    lda chargen+1
    cmp #>CHARGEN+$800
    bcc b1
    bne !+
    lda chargen
    cmp #<CHARGEN+$800
    bcc b1
  !:
  //SEG74 main::@11
  //SEG75 [48] *((const byte*) PROCPORT#0) ← (byte) 55 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #$37
    sta PROCPORT
  //SEG76 asm { cli }
    cli
  //SEG77 [50] phi from main::@11 to main::@6 [phi:main::@11->main::@6]
  //SEG78 [50] phi (byte) main::i#2 = (byte) 0 [phi:main::@11->main::@6#0] -- xby=coby1 
    ldx #0
  //SEG79 [50] phi from main::@6 to main::@6 [phi:main::@6->main::@6]
  //SEG80 [50] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@6#0] -- register_copy 
  //SEG81 main::@6
  b6:
  //SEG82 [51] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ] ( main:0 [ main::i#2 ] ) -- cowo1_derefidx_xby=xby 
    txa
    sta SCREEN,x
  //SEG83 [52] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] ( main:0 [ main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG84 [53] if((byte) main::i#1!=(byte) 0) goto main::@6 [ main::i#1 ] ( main:0 [ main::i#1 ] ) -- xby_neq_0_then_la1 
    cpx #0
    bne b6
  //SEG85 main::@12
  //SEG86 [54] *((const byte*) D018#0) ← (byte) 25 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #$19
    sta D018
  //SEG87 main::@return
  //SEG88 [55] return  [ ] ( main:0 [ ] )
    rts
}

