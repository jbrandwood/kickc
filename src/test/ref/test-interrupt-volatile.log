Resolved forward reference irq to __interrupt(rom_min_c64) void irq()
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  *KERNEL_IRQ = &irq
  to:main::@1
main::@1: scope:[main]  from main main::@2
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  col = ++ col
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

__interrupt(rom_min_c64) void irq()
irq: scope:[irq]  from
  asm { lda$dc0d  }
  *BG_COLOR = col
  to:irq::@return
irq::@return: scope:[irq]  from irq
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  col = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* BG_COLOR = (byte*)$d020
const nomodify void()** KERNEL_IRQ = (void()**)$314
void __start()
volatile byte col loadstore
__interrupt(rom_min_c64) void irq()
void main()

Simplifying constant pointer cast (void()**) 788
Simplifying constant pointer cast (byte*) 53280
Successful SSA optimization PassNCastSimplification
if() condition always true - replacing block destination [1] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of main::@1
CALL GRAPH
Calls in [__start] to main:3 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block label __start::@2
Culled Empty Block label main::@1
Renumbering block main::@2 to main::@1
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] col = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [2] phi()
  [3] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [4] return 
  to:@return

__interrupt(rom_min_c64) void irq()
irq: scope:[irq]  from
  asm { lda$dc0d  }
  [6] *BG_COLOR = col
  to:irq::@return
irq::@return: scope:[irq]  from irq
  [7] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [8] *KERNEL_IRQ = &irq
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [9] col = ++ col
  to:main::@1


VARIABLE REGISTER WEIGHTS
void __start()
volatile byte col loadstore 41.2
__interrupt(rom_min_c64) void irq()
void main()

Initial phi equivalence classes
Added variable col to live range equivalence class [ col ]
Complete equivalence classes
[ col ]
Allocated zp[1]:2 [ col ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] col = 0 [ col ] (  [ col ] { }  ) always clobbers reg byte a 
Statement asm { lda$dc0d  } always clobbers reg byte a 
Statement [6] *BG_COLOR = col [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] *KERNEL_IRQ = &irq [ col ] ( main:3 [ col ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ col ] : zp[1]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 41.2: zp[1]:2 [ col ] 
Uplift Scope [main] 
Uplift Scope [irq] 
Uplift Scope [__start] 

Uplifting [] best 192 combination zp[1]:2 [ col ] 
Uplifting [main] best 192 combination 
Uplifting [irq] best 192 combination 
Uplifting [__start] best 192 combination 
Attempting to uplift remaining variables inzp[1]:2 [ col ]
Uplifting [] best 192 combination zp[1]:2 [ col ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .label KERNEL_IRQ = $314
  .label BG_COLOR = $d020
  .label col = 2
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] col = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z col
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [3] call main 
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [4] return 
    rts
}
  // irq
irq: {
    // interrupt(isr_rom_min_c64_entry) -- isr_rom_min_c64_entry 
    // asm { lda$dc0d  }
    lda $dc0d
    // [6] *BG_COLOR = col -- _deref_pbuc1=vbuz1 
    lda.z col
    sta BG_COLOR
    jmp __breturn
    // irq::@return
  __breturn:
    // [7] return 
    // interrupt(isr_rom_min_c64_exit) -- isr_rom_min_c64_exit 
    jmp $ea81
}
  // main
main: {
    // [8] *KERNEL_IRQ = &irq -- _deref_qprc1=pprc2 
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
    jmp __b1
    // main::@1
  __b1:
    // [9] col = ++ col -- vbuz1=_inc_vbuz1 
    inc.z col
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___init1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const nomodify byte* BG_COLOR = (byte*) 53280
const nomodify void()** KERNEL_IRQ = (void()**) 788
void __start()
volatile byte col loadstore zp[1]:2 41.2
__interrupt(rom_min_c64) void irq()
void main()

zp[1]:2 [ col ]


FINAL ASSEMBLER
Score: 150

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .label KERNEL_IRQ = $314
  .label BG_COLOR = $d020
  .label col = 2
  // __start
__start: {
    // __start::__init1
    // col = 0
    // [1] col = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z col
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [3] call main 
    jsr main
    // __start::@return
    // [4] return 
    rts
}
  // irq
irq: {
    // interrupt(isr_rom_min_c64_entry) -- isr_rom_min_c64_entry 
    // asm
    // asm { lda$dc0d  }
    lda $dc0d
    // *BG_COLOR = col
    // [6] *BG_COLOR = col -- _deref_pbuc1=vbuz1 
    lda.z col
    sta BG_COLOR
    // irq::@return
    // }
    // [7] return 
    // interrupt(isr_rom_min_c64_exit) -- isr_rom_min_c64_exit 
    jmp $ea81
}
  // main
main: {
    // *KERNEL_IRQ = &irq
    // [8] *KERNEL_IRQ = &irq -- _deref_qprc1=pprc2 
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
    // main::@1
  __b1:
    // col++;
    // [9] col = ++ col -- vbuz1=_inc_vbuz1 
    inc.z col
    jmp __b1
}
  // File Data

