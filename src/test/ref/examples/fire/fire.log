Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call call sid_rnd_init 
Inlined call (byte~) main::$7 ← call toD018 (const byte*) SCREEN1 (const byte*) CHARSET 
Inlined call (byte~) main::$9 ← call toD018 (const byte*) SCREEN2 (const byte*) CHARSET 
Inlined call (byte~) fire::$12 ← call sid_rnd 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  asm { sei  }
  *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK
  *((const nomodify byte*) BGCOL) ← (const nomodify byte) BLACK
  (byte*) fillscreen::screen#0 ← (const byte*) BUFFER
  (byte) fillscreen::fill#0 ← (number) 0
  call fillscreen 
  to:main::@6
main::@6: scope:[main]  from main
  (byte*) fillscreen::screen#1 ← (const byte*) SCREEN1
  (byte) fillscreen::fill#1 ← (number) 0
  call fillscreen 
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) fillscreen::screen#2 ← (const byte*) SCREEN2
  (byte) fillscreen::fill#2 ← (number) 0
  call fillscreen 
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte*) fillscreen::screen#3 ← (const nomodify byte*) COLS
  (byte) fillscreen::fill#3 ← (const nomodify byte) YELLOW
  call fillscreen 
  to:main::@9
main::@9: scope:[main]  from main::@8
  to:main::sid_rnd_init1
main::sid_rnd_init1: scope:[main]  from main::@9
  *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (number) $ffff
  *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) ← (const nomodify byte) SID_CONTROL_NOISE
  to:main::@3
main::@3: scope:[main]  from main::sid_rnd_init1
  (byte*) makecharset::charset#0 ← (const byte*) CHARSET
  call makecharset 
  to:main::@10
main::@10: scope:[main]  from main::@3
  to:main::@1
main::@1: scope:[main]  from main::@10 main::@5
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte*) fire::screenbase#0 ← (const byte*) SCREEN1
  call fire 
  to:main::@11
main::@11: scope:[main]  from main::@2
  (byte*) main::toD0181_screen#0 ← (const byte*) SCREEN1
  (byte*) main::toD0181_gfx#0 ← (const byte*) CHARSET
  to:main::toD0181
main::toD0181: scope:[main]  from main::@11
  (byte*) main::toD0181_gfx#1 ← phi( main::@11/(byte*) main::toD0181_gfx#0 )
  (byte*) main::toD0181_screen#1 ← phi( main::@11/(byte*) main::toD0181_screen#0 )
  (word~) main::toD0181_$7 ← (word)(byte*) main::toD0181_screen#1
  (number~) main::toD0181_$0 ← (word~) main::toD0181_$7 & (number) $3fff
  (number~) main::toD0181_$1 ← (number~) main::toD0181_$0 * (number) 4
  (number~) main::toD0181_$2 ← > (number~) main::toD0181_$1
  (byte~) main::toD0181_$3 ← > (word)(byte*) main::toD0181_gfx#1
  (number~) main::toD0181_$4 ← (byte~) main::toD0181_$3 / (number) 4
  (number~) main::toD0181_$5 ← (number~) main::toD0181_$4 & (number) $f
  (number~) main::toD0181_$6 ← (number~) main::toD0181_$2 | (number~) main::toD0181_$5
  (byte) main::toD0181_return#0 ← (number~) main::toD0181_$6
  to:main::toD0181_@return
main::toD0181_@return: scope:[main]  from main::toD0181
  (byte) main::toD0181_return#2 ← phi( main::toD0181/(byte) main::toD0181_return#0 )
  (byte) main::toD0181_return#1 ← (byte) main::toD0181_return#2
  to:main::@4
main::@4: scope:[main]  from main::toD0181_@return
  (byte) main::toD0181_return#3 ← phi( main::toD0181_@return/(byte) main::toD0181_return#1 )
  (byte~) main::$7 ← (byte) main::toD0181_return#3
  *((const nomodify byte*) D018) ← (byte~) main::$7
  (byte*) fire::screenbase#1 ← (const byte*) SCREEN2
  call fire 
  to:main::@12
main::@12: scope:[main]  from main::@4
  (byte*) main::toD0182_screen#0 ← (const byte*) SCREEN2
  (byte*) main::toD0182_gfx#0 ← (const byte*) CHARSET
  to:main::toD0182
main::toD0182: scope:[main]  from main::@12
  (byte*) main::toD0182_gfx#1 ← phi( main::@12/(byte*) main::toD0182_gfx#0 )
  (byte*) main::toD0182_screen#1 ← phi( main::@12/(byte*) main::toD0182_screen#0 )
  (word~) main::toD0182_$7 ← (word)(byte*) main::toD0182_screen#1
  (number~) main::toD0182_$0 ← (word~) main::toD0182_$7 & (number) $3fff
  (number~) main::toD0182_$1 ← (number~) main::toD0182_$0 * (number) 4
  (number~) main::toD0182_$2 ← > (number~) main::toD0182_$1
  (byte~) main::toD0182_$3 ← > (word)(byte*) main::toD0182_gfx#1
  (number~) main::toD0182_$4 ← (byte~) main::toD0182_$3 / (number) 4
  (number~) main::toD0182_$5 ← (number~) main::toD0182_$4 & (number) $f
  (number~) main::toD0182_$6 ← (number~) main::toD0182_$2 | (number~) main::toD0182_$5
  (byte) main::toD0182_return#0 ← (number~) main::toD0182_$6
  to:main::toD0182_@return
main::toD0182_@return: scope:[main]  from main::toD0182
  (byte) main::toD0182_return#2 ← phi( main::toD0182/(byte) main::toD0182_return#0 )
  (byte) main::toD0182_return#1 ← (byte) main::toD0182_return#2
  to:main::@5
main::@5: scope:[main]  from main::toD0182_@return
  (byte) main::toD0182_return#3 ← phi( main::toD0182_@return/(byte) main::toD0182_return#1 )
  (byte~) main::$9 ← (byte) main::toD0182_return#3
  *((const nomodify byte*) D018) ← (byte~) main::$9
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

(void()) fire((byte*) fire::screenbase)
fire: scope:[fire]  from main::@2 main::@4
  (byte*) fire::screenbase#2 ← phi( main::@2/(byte*) fire::screenbase#0 main::@4/(byte*) fire::screenbase#1 )
  (byte*) fire::screen#0 ← (byte*) fire::screenbase#2
  (byte*) fire::buffer#0 ← (const byte*) BUFFER
  to:fire::@1
fire::@1: scope:[fire]  from fire fire::@4
  (byte*) fire::screen#9 ← phi( fire/(byte*) fire::screen#0 fire::@4/(byte*) fire::screen#2 )
  (byte*) fire::screenbase#4 ← phi( fire/(byte*) fire::screenbase#2 fire::@4/(byte*) fire::screenbase#5 )
  (byte*) fire::buffer#4 ← phi( fire/(byte*) fire::buffer#0 fire::@4/(byte*) fire::buffer#2 )
  (byte*~) fire::$2 ← (const byte*) BUFFER + (number) $18*(number) $28
  (bool~) fire::$3 ← (byte*) fire::buffer#4 != (byte*~) fire::$2
  if((bool~) fire::$3) goto fire::@2
  to:fire::@3
fire::@2: scope:[fire]  from fire::@1
  (byte*) fire::screenbase#6 ← phi( fire::@1/(byte*) fire::screenbase#4 )
  (byte*) fire::screen#6 ← phi( fire::@1/(byte*) fire::screen#9 )
  (byte*) fire::buffer#5 ← phi( fire::@1/(byte*) fire::buffer#4 )
  (byte~) fire::$4 ← *((byte*) fire::buffer#5 + (number) $28-(number) 1) + *((byte*) fire::buffer#5 + (number) $28-(number) 1)
  (byte~) fire::$5 ← (byte~) fire::$4 + *((byte*) fire::buffer#5 + (number) $28)
  (byte~) fire::$6 ← (byte~) fire::$5 + *((byte*) fire::buffer#5 + (number) $29)
  (number~) fire::$7 ← (byte~) fire::$6 / (number) 4
  (byte) fire::c#0 ← (number~) fire::$7
  (bool~) fire::$8 ← (byte) fire::c#0 > (number) 2
  (bool~) fire::$9 ← ! (bool~) fire::$8
  if((bool~) fire::$9) goto fire::@4
  to:fire::@5
fire::@3: scope:[fire]  from fire::@1
  (byte*) fire::screenbase#3 ← phi( fire::@1/(byte*) fire::screenbase#4 )
  (byte*~) fire::$0 ← (byte*) fire::screenbase#3 + (number) $18*(number) $28
  (byte*) fire::screen#1 ← (byte*~) fire::$0
  (byte*~) fire::$1 ← (const byte*) BUFFER + (number) $18*(number) $28
  (byte*) fire::buffer#1 ← (byte*~) fire::$1
  to:fire::@6
fire::@4: scope:[fire]  from fire::@2 fire::@5
  (byte*) fire::screenbase#5 ← phi( fire::@2/(byte*) fire::screenbase#6 fire::@5/(byte*) fire::screenbase#7 )
  (byte*) fire::screen#4 ← phi( fire::@2/(byte*) fire::screen#6 fire::@5/(byte*) fire::screen#7 )
  (byte*) fire::buffer#6 ← phi( fire::@2/(byte*) fire::buffer#5 fire::@5/(byte*) fire::buffer#9 )
  (byte) fire::c#2 ← phi( fire::@2/(byte) fire::c#0 fire::@5/(byte) fire::c#1 )
  *((byte*) fire::buffer#6) ← (byte) fire::c#2
  *((byte*) fire::screen#4) ← *((byte*) fire::buffer#6)
  (byte*) fire::screen#2 ← ++ (byte*) fire::screen#4
  (byte*) fire::buffer#2 ← ++ (byte*) fire::buffer#6
  to:fire::@1
fire::@5: scope:[fire]  from fire::@2
  (byte*) fire::screenbase#7 ← phi( fire::@2/(byte*) fire::screenbase#6 )
  (byte*) fire::screen#7 ← phi( fire::@2/(byte*) fire::screen#6 )
  (byte*) fire::buffer#9 ← phi( fire::@2/(byte*) fire::buffer#5 )
  (byte) fire::c#3 ← phi( fire::@2/(byte) fire::c#0 )
  (byte) fire::c#1 ← (byte) fire::c#3 - (number) 3
  to:fire::@4
fire::@6: scope:[fire]  from fire::@3 fire::@7
  (byte*) fire::screen#11 ← phi( fire::@3/(byte*) fire::screen#1 fire::@7/(byte*) fire::screen#3 )
  (byte*) fire::buffer#7 ← phi( fire::@3/(byte*) fire::buffer#1 fire::@7/(byte*) fire::buffer#3 )
  (byte*~) fire::$10 ← (const byte*) BUFFER + (number) $19*(number) $28
  (bool~) fire::$11 ← (byte*) fire::buffer#7 != (byte*~) fire::$10
  if((bool~) fire::$11) goto fire::sid_rnd1
  to:fire::@return
fire::sid_rnd1: scope:[fire]  from fire::@6
  (byte*) fire::screen#10 ← phi( fire::@6/(byte*) fire::screen#11 )
  (byte*) fire::buffer#11 ← phi( fire::@6/(byte*) fire::buffer#7 )
  (byte) fire::sid_rnd1_return#0 ← *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_OSC)
  to:fire::sid_rnd1_@return
fire::sid_rnd1_@return: scope:[fire]  from fire::sid_rnd1
  (byte*) fire::screen#8 ← phi( fire::sid_rnd1/(byte*) fire::screen#10 )
  (byte*) fire::buffer#10 ← phi( fire::sid_rnd1/(byte*) fire::buffer#11 )
  (byte) fire::sid_rnd1_return#2 ← phi( fire::sid_rnd1/(byte) fire::sid_rnd1_return#0 )
  (byte) fire::sid_rnd1_return#1 ← (byte) fire::sid_rnd1_return#2
  to:fire::@7
fire::@7: scope:[fire]  from fire::sid_rnd1_@return
  (byte*) fire::screen#5 ← phi( fire::sid_rnd1_@return/(byte*) fire::screen#8 )
  (byte*) fire::buffer#8 ← phi( fire::sid_rnd1_@return/(byte*) fire::buffer#10 )
  (byte) fire::sid_rnd1_return#3 ← phi( fire::sid_rnd1_@return/(byte) fire::sid_rnd1_return#1 )
  (byte~) fire::$12 ← (byte) fire::sid_rnd1_return#3
  (number~) fire::$13 ← (byte~) fire::$12 / (number) $10
  (number~) fire::$14 ← (number) $30 + (number~) fire::$13
  *((byte*) fire::buffer#8) ← (number~) fire::$14
  *((byte*) fire::screen#5) ← *((byte*) fire::buffer#8)
  (byte*) fire::screen#3 ← ++ (byte*) fire::screen#5
  (byte*) fire::buffer#3 ← ++ (byte*) fire::buffer#8
  to:fire::@6
fire::@return: scope:[fire]  from fire::@6
  return 
  to:@return

(void()) makecharset((byte*) makecharset::charset)
makecharset: scope:[makecharset]  from main::@3
  (byte*) makecharset::charset#1 ← phi( main::@3/(byte*) makecharset::charset#0 )
  (byte*) makecharset::font#0 ← (byte*) makecharset::charset#1
  to:makecharset::@1
makecharset::@1: scope:[makecharset]  from makecharset makecharset::@2
  (byte*) makecharset::font#2 ← phi( makecharset/(byte*) makecharset::font#0 makecharset::@2/(byte*) makecharset::font#1 )
  (byte*) makecharset::charset#2 ← phi( makecharset/(byte*) makecharset::charset#1 makecharset::@2/(byte*) makecharset::charset#6 )
  (byte*~) makecharset::$0 ← (byte*) makecharset::charset#2 + (number) 1*(number) 8
  (bool~) makecharset::$1 ← (byte*) makecharset::font#2 != (byte*~) makecharset::$0
  if((bool~) makecharset::$1) goto makecharset::@2
  to:makecharset::@3
makecharset::@2: scope:[makecharset]  from makecharset::@1
  (byte*) makecharset::charset#6 ← phi( makecharset::@1/(byte*) makecharset::charset#2 )
  (byte*) makecharset::font#3 ← phi( makecharset::@1/(byte*) makecharset::font#2 )
  *((byte*) makecharset::font#3) ← (number) 0
  (byte*) makecharset::font#1 ← ++ (byte*) makecharset::font#3
  to:makecharset::@1
makecharset::@3: scope:[makecharset]  from makecharset::@1
  (byte*) makecharset::charset#3 ← phi( makecharset::@1/(byte*) makecharset::charset#2 )
  (byte*~) makecharset::$2 ← (byte*) makecharset::charset#3 + (number) $40*(number) 8
  (byte*) makecharset::font1#0 ← (byte*~) makecharset::$2
  to:makecharset::@4
makecharset::@4: scope:[makecharset]  from makecharset::@3 makecharset::@5
  (byte*) makecharset::font1#2 ← phi( makecharset::@3/(byte*) makecharset::font1#0 makecharset::@5/(byte*) makecharset::font1#1 )
  (byte*) makecharset::charset#4 ← phi( makecharset::@3/(byte*) makecharset::charset#3 makecharset::@5/(byte*) makecharset::charset#7 )
  (byte*~) makecharset::$3 ← (byte*) makecharset::charset#4 + (number) $100*(number) 8
  (bool~) makecharset::$4 ← (byte*) makecharset::font1#2 != (byte*~) makecharset::$3
  if((bool~) makecharset::$4) goto makecharset::@5
  to:makecharset::@6
makecharset::@5: scope:[makecharset]  from makecharset::@4
  (byte*) makecharset::charset#7 ← phi( makecharset::@4/(byte*) makecharset::charset#4 )
  (byte*) makecharset::font1#3 ← phi( makecharset::@4/(byte*) makecharset::font1#2 )
  *((byte*) makecharset::font1#3) ← (number) $ff
  (byte*) makecharset::font1#1 ← ++ (byte*) makecharset::font1#3
  to:makecharset::@4
makecharset::@6: scope:[makecharset]  from makecharset::@4
  (byte*) makecharset::charset#17 ← phi( makecharset::@4/(byte*) makecharset::charset#4 )
  (byte) makecharset::c#0 ← (byte) 0
  to:makecharset::@7
makecharset::@7: scope:[makecharset]  from makecharset::@11 makecharset::@6
  (byte*) makecharset::charset#15 ← phi( makecharset::@11/(byte*) makecharset::charset#16 makecharset::@6/(byte*) makecharset::charset#17 )
  (byte) makecharset::c#2 ← phi( makecharset::@11/(byte) makecharset::c#1 makecharset::@6/(byte) makecharset::c#0 )
  (bool~) makecharset::$5 ← (byte) makecharset::c#2 < (number) $40
  if((bool~) makecharset::$5) goto makecharset::@8
  to:makecharset::@return
makecharset::@8: scope:[makecharset]  from makecharset::@7
  (byte*) makecharset::charset#14 ← phi( makecharset::@7/(byte*) makecharset::charset#15 )
  (byte) makecharset::c#8 ← phi( makecharset::@7/(byte) makecharset::c#2 )
  (byte) makecharset::bc#0 ← (byte) 0
  (byte) makecharset::i#0 ← (byte) 0
  to:makecharset::@9
makecharset::@9: scope:[makecharset]  from makecharset::@14 makecharset::@8
  (byte*) makecharset::charset#11 ← phi( makecharset::@14/(byte*) makecharset::charset#5 makecharset::@8/(byte*) makecharset::charset#14 )
  (byte) makecharset::bc#8 ← phi( makecharset::@14/(byte) makecharset::bc#9 makecharset::@8/(byte) makecharset::bc#0 )
  (byte) makecharset::c#6 ← phi( makecharset::@14/(byte) makecharset::c#5 makecharset::@8/(byte) makecharset::c#8 )
  (byte) makecharset::i#2 ← phi( makecharset::@14/(byte) makecharset::i#1 makecharset::@8/(byte) makecharset::i#0 )
  (bool~) makecharset::$6 ← (byte) makecharset::i#2 < (number) 8
  if((bool~) makecharset::$6) goto makecharset::@10
  to:makecharset::@11
makecharset::@10: scope:[makecharset]  from makecharset::@9
  (byte) makecharset::i#7 ← phi( makecharset::@9/(byte) makecharset::i#2 )
  (byte*) makecharset::charset#9 ← phi( makecharset::@9/(byte*) makecharset::charset#11 )
  (byte) makecharset::c#9 ← phi( makecharset::@9/(byte) makecharset::c#6 )
  (byte) makecharset::bc#6 ← phi( makecharset::@9/(byte) makecharset::bc#8 )
  (byte) makecharset::b#0 ← (byte) 0
  (byte) makecharset::ii#0 ← (byte) 0
  to:makecharset::@12
makecharset::@11: scope:[makecharset]  from makecharset::@9
  (byte*) makecharset::charset#16 ← phi( makecharset::@9/(byte*) makecharset::charset#11 )
  (byte) makecharset::c#3 ← phi( makecharset::@9/(byte) makecharset::c#6 )
  (byte) makecharset::c#1 ← ++ (byte) makecharset::c#3
  to:makecharset::@7
makecharset::@12: scope:[makecharset]  from makecharset::@10 makecharset::@15
  (byte) makecharset::b#4 ← phi( makecharset::@10/(byte) makecharset::b#0 makecharset::@15/(byte) makecharset::b#6 )
  (byte) makecharset::i#5 ← phi( makecharset::@10/(byte) makecharset::i#7 makecharset::@15/(byte) makecharset::i#8 )
  (byte*) makecharset::charset#8 ← phi( makecharset::@10/(byte*) makecharset::charset#9 makecharset::@15/(byte*) makecharset::charset#10 )
  (byte) makecharset::c#7 ← phi( makecharset::@10/(byte) makecharset::c#9 makecharset::@15/(byte) makecharset::c#10 )
  (byte) makecharset::bc#5 ← phi( makecharset::@10/(byte) makecharset::bc#6 makecharset::@15/(byte) makecharset::bc#7 )
  (byte) makecharset::ii#2 ← phi( makecharset::@10/(byte) makecharset::ii#0 makecharset::@15/(byte) makecharset::ii#1 )
  (bool~) makecharset::$7 ← (byte) makecharset::ii#2 < (number) 8
  if((bool~) makecharset::$7) goto makecharset::@13
  to:makecharset::@14
makecharset::@13: scope:[makecharset]  from makecharset::@12
  (byte*) makecharset::charset#12 ← phi( makecharset::@12/(byte*) makecharset::charset#8 )
  (byte) makecharset::b#5 ← phi( makecharset::@12/(byte) makecharset::b#4 )
  (byte) makecharset::i#6 ← phi( makecharset::@12/(byte) makecharset::i#5 )
  (byte) makecharset::ii#5 ← phi( makecharset::@12/(byte) makecharset::ii#2 )
  (byte) makecharset::c#4 ← phi( makecharset::@12/(byte) makecharset::c#7 )
  (byte) makecharset::bc#3 ← phi( makecharset::@12/(byte) makecharset::bc#5 )
  (byte) makecharset::bc#1 ← (byte) makecharset::bc#3 + (byte) makecharset::c#4
  (bool~) makecharset::$8 ← (byte) makecharset::bc#1 > (number) $3f
  (bool~) makecharset::$9 ← ! (bool~) makecharset::$8
  if((bool~) makecharset::$9) goto makecharset::@15
  to:makecharset::@16
makecharset::@14: scope:[makecharset]  from makecharset::@12
  (byte) makecharset::bc#9 ← phi( makecharset::@12/(byte) makecharset::bc#5 )
  (byte) makecharset::b#2 ← phi( makecharset::@12/(byte) makecharset::b#4 )
  (byte) makecharset::i#3 ← phi( makecharset::@12/(byte) makecharset::i#5 )
  (byte) makecharset::c#5 ← phi( makecharset::@12/(byte) makecharset::c#7 )
  (byte*) makecharset::charset#5 ← phi( makecharset::@12/(byte*) makecharset::charset#8 )
  (byte*~) makecharset::$14 ← (byte*) makecharset::charset#5 + (number) 1*(number) 8
  (word~) makecharset::$17 ← (word)(byte) makecharset::c#5
  (word~) makecharset::$15 ← (word~) makecharset::$17 << (number) 3
  (word~) makecharset::$16 ← (word~) makecharset::$15 + (byte) makecharset::i#3
  *((byte*~) makecharset::$14 + (word~) makecharset::$16) ← (byte) makecharset::b#2
  (byte) makecharset::i#1 ← ++ (byte) makecharset::i#3
  to:makecharset::@9
makecharset::@15: scope:[makecharset]  from makecharset::@13 makecharset::@16
  (byte) makecharset::b#6 ← phi( makecharset::@13/(byte) makecharset::b#5 makecharset::@16/(byte) makecharset::b#1 )
  (byte) makecharset::i#8 ← phi( makecharset::@13/(byte) makecharset::i#6 makecharset::@16/(byte) makecharset::i#4 )
  (byte*) makecharset::charset#10 ← phi( makecharset::@13/(byte*) makecharset::charset#12 makecharset::@16/(byte*) makecharset::charset#13 )
  (byte) makecharset::c#10 ← phi( makecharset::@13/(byte) makecharset::c#4 makecharset::@16/(byte) makecharset::c#11 )
  (byte) makecharset::bc#7 ← phi( makecharset::@13/(byte) makecharset::bc#1 makecharset::@16/(byte) makecharset::bc#2 )
  (byte) makecharset::ii#3 ← phi( makecharset::@13/(byte) makecharset::ii#5 makecharset::@16/(byte) makecharset::ii#4 )
  (byte) makecharset::ii#1 ← ++ (byte) makecharset::ii#3
  to:makecharset::@12
makecharset::@16: scope:[makecharset]  from makecharset::@13
  (byte*) makecharset::charset#13 ← phi( makecharset::@13/(byte*) makecharset::charset#12 )
  (byte) makecharset::c#11 ← phi( makecharset::@13/(byte) makecharset::c#4 )
  (byte) makecharset::b#3 ← phi( makecharset::@13/(byte) makecharset::b#5 )
  (byte) makecharset::ii#4 ← phi( makecharset::@13/(byte) makecharset::ii#5 )
  (byte) makecharset::i#4 ← phi( makecharset::@13/(byte) makecharset::i#6 )
  (byte) makecharset::bc#4 ← phi( makecharset::@13/(byte) makecharset::bc#1 )
  (number~) makecharset::$10 ← (byte) makecharset::bc#4 - (number) $40
  (byte) makecharset::bc#2 ← (number~) makecharset::$10
  (number~) makecharset::$11 ← (byte) makecharset::i#4 & (number) 1
  (number~) makecharset::$12 ← (byte) makecharset::ii#4 + (number~) makecharset::$11
  (number~) makecharset::$13 ← (number~) makecharset::$12 & (number) 7
  (byte) makecharset::b#1 ← (byte) makecharset::b#3 + *((const to_nomodify byte*) makecharset::bittab + (number~) makecharset::$13)
  to:makecharset::@15
makecharset::@return: scope:[makecharset]  from makecharset::@7
  return 
  to:@return

(void()) fillscreen((byte*) fillscreen::screen , (byte) fillscreen::fill)
fillscreen: scope:[fillscreen]  from main main::@6 main::@7 main::@8
  (byte*) fillscreen::screen#6 ← phi( main/(byte*) fillscreen::screen#0 main::@6/(byte*) fillscreen::screen#1 main::@7/(byte*) fillscreen::screen#2 main::@8/(byte*) fillscreen::screen#3 )
  (byte) fillscreen::fill#5 ← phi( main/(byte) fillscreen::fill#0 main::@6/(byte) fillscreen::fill#1 main::@7/(byte) fillscreen::fill#2 main::@8/(byte) fillscreen::fill#3 )
  (word) fillscreen::i#0 ← (word) 0
  to:fillscreen::@1
fillscreen::@1: scope:[fillscreen]  from fillscreen fillscreen::@1
  (word) fillscreen::i#2 ← phi( fillscreen/(word) fillscreen::i#0 fillscreen::@1/(word) fillscreen::i#1 )
  (byte*) fillscreen::screen#5 ← phi( fillscreen/(byte*) fillscreen::screen#6 fillscreen::@1/(byte*) fillscreen::screen#4 )
  (byte) fillscreen::fill#4 ← phi( fillscreen/(byte) fillscreen::fill#5 fillscreen::@1/(byte) fillscreen::fill#4 )
  *((byte*) fillscreen::screen#5) ← (byte) fillscreen::fill#4
  (byte*) fillscreen::screen#4 ← ++ (byte*) fillscreen::screen#5
  (word) fillscreen::i#1 ← (word) fillscreen::i#2 + rangenext(0,$3e7)
  (bool~) fillscreen::$0 ← (word) fillscreen::i#1 != rangelast(0,$3e7)
  if((bool~) fillscreen::$0) goto fillscreen::@1
  to:fillscreen::@return
fillscreen::@return: scope:[fillscreen]  from fillscreen::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const nomodify byte*) BGCOL = (byte*)(number) $d021
(const nomodify byte) BLACK = (byte) 0
(const nomodify byte*) BORDERCOL = (byte*)(number) $d020
(const byte*) BUFFER = (byte*)(number) $4000
(const byte*) CHARSET = (byte*)(number) $3000
(const nomodify byte*) COLS = (byte*)(number) $d800
(const nomodify byte*) D018 = (byte*)(number) $d018
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL = (byte) $12
(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ = (byte) $e
(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_OSC = (byte) $1b
(const byte*) SCREEN1 = (byte*)(number) $3800
(const byte*) SCREEN2 = (byte*)(number) $3c00
(const nomodify struct MOS6581_SID*) SID = (struct MOS6581_SID*)(number) $d400
(const nomodify byte) SID_CONTROL_NOISE = (byte) $80
(const nomodify byte) YELLOW = (byte) 7
(void()) fillscreen((byte*) fillscreen::screen , (byte) fillscreen::fill)
(bool~) fillscreen::$0
(label) fillscreen::@1
(label) fillscreen::@return
(byte) fillscreen::fill
(byte) fillscreen::fill#0
(byte) fillscreen::fill#1
(byte) fillscreen::fill#2
(byte) fillscreen::fill#3
(byte) fillscreen::fill#4
(byte) fillscreen::fill#5
(word) fillscreen::i
(word) fillscreen::i#0
(word) fillscreen::i#1
(word) fillscreen::i#2
(byte*) fillscreen::screen
(byte*) fillscreen::screen#0
(byte*) fillscreen::screen#1
(byte*) fillscreen::screen#2
(byte*) fillscreen::screen#3
(byte*) fillscreen::screen#4
(byte*) fillscreen::screen#5
(byte*) fillscreen::screen#6
(void()) fire((byte*) fire::screenbase)
(byte*~) fire::$0
(byte*~) fire::$1
(byte*~) fire::$10
(bool~) fire::$11
(byte~) fire::$12
(number~) fire::$13
(number~) fire::$14
(byte*~) fire::$2
(bool~) fire::$3
(byte~) fire::$4
(byte~) fire::$5
(byte~) fire::$6
(number~) fire::$7
(bool~) fire::$8
(bool~) fire::$9
(label) fire::@1
(label) fire::@2
(label) fire::@3
(label) fire::@4
(label) fire::@5
(label) fire::@6
(label) fire::@7
(label) fire::@return
(byte*) fire::buffer
(byte*) fire::buffer#0
(byte*) fire::buffer#1
(byte*) fire::buffer#10
(byte*) fire::buffer#11
(byte*) fire::buffer#2
(byte*) fire::buffer#3
(byte*) fire::buffer#4
(byte*) fire::buffer#5
(byte*) fire::buffer#6
(byte*) fire::buffer#7
(byte*) fire::buffer#8
(byte*) fire::buffer#9
(byte) fire::c
(byte) fire::c#0
(byte) fire::c#1
(byte) fire::c#2
(byte) fire::c#3
(byte*) fire::screen
(byte*) fire::screen#0
(byte*) fire::screen#1
(byte*) fire::screen#10
(byte*) fire::screen#11
(byte*) fire::screen#2
(byte*) fire::screen#3
(byte*) fire::screen#4
(byte*) fire::screen#5
(byte*) fire::screen#6
(byte*) fire::screen#7
(byte*) fire::screen#8
(byte*) fire::screen#9
(byte*) fire::screenbase
(byte*) fire::screenbase#0
(byte*) fire::screenbase#1
(byte*) fire::screenbase#2
(byte*) fire::screenbase#3
(byte*) fire::screenbase#4
(byte*) fire::screenbase#5
(byte*) fire::screenbase#6
(byte*) fire::screenbase#7
(label) fire::sid_rnd1
(label) fire::sid_rnd1_@return
(byte) fire::sid_rnd1_return
(byte) fire::sid_rnd1_return#0
(byte) fire::sid_rnd1_return#1
(byte) fire::sid_rnd1_return#2
(byte) fire::sid_rnd1_return#3
(void()) main()
(byte~) main::$7
(byte~) main::$9
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(label) main::sid_rnd_init1
(label) main::toD0181
(number~) main::toD0181_$0
(number~) main::toD0181_$1
(number~) main::toD0181_$2
(byte~) main::toD0181_$3
(number~) main::toD0181_$4
(number~) main::toD0181_$5
(number~) main::toD0181_$6
(word~) main::toD0181_$7
(label) main::toD0181_@return
(byte*) main::toD0181_gfx
(byte*) main::toD0181_gfx#0
(byte*) main::toD0181_gfx#1
(byte) main::toD0181_return
(byte) main::toD0181_return#0
(byte) main::toD0181_return#1
(byte) main::toD0181_return#2
(byte) main::toD0181_return#3
(byte*) main::toD0181_screen
(byte*) main::toD0181_screen#0
(byte*) main::toD0181_screen#1
(label) main::toD0182
(number~) main::toD0182_$0
(number~) main::toD0182_$1
(number~) main::toD0182_$2
(byte~) main::toD0182_$3
(number~) main::toD0182_$4
(number~) main::toD0182_$5
(number~) main::toD0182_$6
(word~) main::toD0182_$7
(label) main::toD0182_@return
(byte*) main::toD0182_gfx
(byte*) main::toD0182_gfx#0
(byte*) main::toD0182_gfx#1
(byte) main::toD0182_return
(byte) main::toD0182_return#0
(byte) main::toD0182_return#1
(byte) main::toD0182_return#2
(byte) main::toD0182_return#3
(byte*) main::toD0182_screen
(byte*) main::toD0182_screen#0
(byte*) main::toD0182_screen#1
(void()) makecharset((byte*) makecharset::charset)
(byte*~) makecharset::$0
(bool~) makecharset::$1
(number~) makecharset::$10
(number~) makecharset::$11
(number~) makecharset::$12
(number~) makecharset::$13
(byte*~) makecharset::$14
(word~) makecharset::$15
(word~) makecharset::$16
(word~) makecharset::$17
(byte*~) makecharset::$2
(byte*~) makecharset::$3
(bool~) makecharset::$4
(bool~) makecharset::$5
(bool~) makecharset::$6
(bool~) makecharset::$7
(bool~) makecharset::$8
(bool~) makecharset::$9
(label) makecharset::@1
(label) makecharset::@10
(label) makecharset::@11
(label) makecharset::@12
(label) makecharset::@13
(label) makecharset::@14
(label) makecharset::@15
(label) makecharset::@16
(label) makecharset::@2
(label) makecharset::@3
(label) makecharset::@4
(label) makecharset::@5
(label) makecharset::@6
(label) makecharset::@7
(label) makecharset::@8
(label) makecharset::@9
(label) makecharset::@return
(byte) makecharset::b
(byte) makecharset::b#0
(byte) makecharset::b#1
(byte) makecharset::b#2
(byte) makecharset::b#3
(byte) makecharset::b#4
(byte) makecharset::b#5
(byte) makecharset::b#6
(byte) makecharset::bc
(byte) makecharset::bc#0
(byte) makecharset::bc#1
(byte) makecharset::bc#2
(byte) makecharset::bc#3
(byte) makecharset::bc#4
(byte) makecharset::bc#5
(byte) makecharset::bc#6
(byte) makecharset::bc#7
(byte) makecharset::bc#8
(byte) makecharset::bc#9
(const to_nomodify byte*) makecharset::bittab[(number) 8]  = { (byte) 1, (byte) 2, (byte) 4, (byte) 8, (byte) $10, (byte) $20, (byte) $40, (byte) $80 }
(byte) makecharset::c
(byte) makecharset::c#0
(byte) makecharset::c#1
(byte) makecharset::c#10
(byte) makecharset::c#11
(byte) makecharset::c#2
(byte) makecharset::c#3
(byte) makecharset::c#4
(byte) makecharset::c#5
(byte) makecharset::c#6
(byte) makecharset::c#7
(byte) makecharset::c#8
(byte) makecharset::c#9
(byte*) makecharset::charset
(byte*) makecharset::charset#0
(byte*) makecharset::charset#1
(byte*) makecharset::charset#10
(byte*) makecharset::charset#11
(byte*) makecharset::charset#12
(byte*) makecharset::charset#13
(byte*) makecharset::charset#14
(byte*) makecharset::charset#15
(byte*) makecharset::charset#16
(byte*) makecharset::charset#17
(byte*) makecharset::charset#2
(byte*) makecharset::charset#3
(byte*) makecharset::charset#4
(byte*) makecharset::charset#5
(byte*) makecharset::charset#6
(byte*) makecharset::charset#7
(byte*) makecharset::charset#8
(byte*) makecharset::charset#9
(byte*) makecharset::font
(byte*) makecharset::font#0
(byte*) makecharset::font#1
(byte*) makecharset::font#2
(byte*) makecharset::font#3
(byte*) makecharset::font1
(byte*) makecharset::font1#0
(byte*) makecharset::font1#1
(byte*) makecharset::font1#2
(byte*) makecharset::font1#3
(byte) makecharset::i
(byte) makecharset::i#0
(byte) makecharset::i#1
(byte) makecharset::i#2
(byte) makecharset::i#3
(byte) makecharset::i#4
(byte) makecharset::i#5
(byte) makecharset::i#6
(byte) makecharset::i#7
(byte) makecharset::i#8
(byte) makecharset::ii
(byte) makecharset::ii#0
(byte) makecharset::ii#1
(byte) makecharset::ii#2
(byte) makecharset::ii#3
(byte) makecharset::ii#4
(byte) makecharset::ii#5

Adding number conversion cast (unumber) 0 in (byte) fillscreen::fill#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) fillscreen::fill#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) fillscreen::fill#2 ← (number) 0
Adding number conversion cast (unumber) $ffff in *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (number) $ffff
Adding number conversion cast (unumber) $3fff in (number~) main::toD0181_$0 ← (word~) main::toD0181_$7 & (number) $3fff
Adding number conversion cast (unumber) main::toD0181_$0 in (number~) main::toD0181_$0 ← (word~) main::toD0181_$7 & (unumber)(number) $3fff
Adding number conversion cast (unumber) 4 in (number~) main::toD0181_$1 ← (unumber~) main::toD0181_$0 * (number) 4
Adding number conversion cast (unumber) main::toD0181_$1 in (number~) main::toD0181_$1 ← (unumber~) main::toD0181_$0 * (unumber)(number) 4
Adding number conversion cast (unumber) main::toD0181_$2 in (number~) main::toD0181_$2 ← > (unumber~) main::toD0181_$1
Adding number conversion cast (unumber) 4 in (number~) main::toD0181_$4 ← (byte~) main::toD0181_$3 / (number) 4
Adding number conversion cast (unumber) main::toD0181_$4 in (number~) main::toD0181_$4 ← (byte~) main::toD0181_$3 / (unumber)(number) 4
Adding number conversion cast (unumber) $f in (number~) main::toD0181_$5 ← (unumber~) main::toD0181_$4 & (number) $f
Adding number conversion cast (unumber) main::toD0181_$5 in (number~) main::toD0181_$5 ← (unumber~) main::toD0181_$4 & (unumber)(number) $f
Adding number conversion cast (unumber) main::toD0181_$6 in (number~) main::toD0181_$6 ← (unumber~) main::toD0181_$2 | (unumber~) main::toD0181_$5
Adding number conversion cast (unumber) $3fff in (number~) main::toD0182_$0 ← (word~) main::toD0182_$7 & (number) $3fff
Adding number conversion cast (unumber) main::toD0182_$0 in (number~) main::toD0182_$0 ← (word~) main::toD0182_$7 & (unumber)(number) $3fff
Adding number conversion cast (unumber) 4 in (number~) main::toD0182_$1 ← (unumber~) main::toD0182_$0 * (number) 4
Adding number conversion cast (unumber) main::toD0182_$1 in (number~) main::toD0182_$1 ← (unumber~) main::toD0182_$0 * (unumber)(number) 4
Adding number conversion cast (unumber) main::toD0182_$2 in (number~) main::toD0182_$2 ← > (unumber~) main::toD0182_$1
Adding number conversion cast (unumber) 4 in (number~) main::toD0182_$4 ← (byte~) main::toD0182_$3 / (number) 4
Adding number conversion cast (unumber) main::toD0182_$4 in (number~) main::toD0182_$4 ← (byte~) main::toD0182_$3 / (unumber)(number) 4
Adding number conversion cast (unumber) $f in (number~) main::toD0182_$5 ← (unumber~) main::toD0182_$4 & (number) $f
Adding number conversion cast (unumber) main::toD0182_$5 in (number~) main::toD0182_$5 ← (unumber~) main::toD0182_$4 & (unumber)(number) $f
Adding number conversion cast (unumber) main::toD0182_$6 in (number~) main::toD0182_$6 ← (unumber~) main::toD0182_$2 | (unumber~) main::toD0182_$5
Adding number conversion cast (unumber) $18*$28 in (byte*~) fire::$2 ← (const byte*) BUFFER + (number) $18*(number) $28
Adding number conversion cast (unumber) $28-1 in (byte~) fire::$4 ← *((byte*) fire::buffer#5 + (number) $28-(number) 1) + *((byte*) fire::buffer#5 + (number) $28-(number) 1)
Adding number conversion cast (unumber) $28-1 in (byte~) fire::$4 ← *((byte*) fire::buffer#5 + (unumber)(number) $28-(number) 1) + *((byte*) fire::buffer#5 + (number) $28-(number) 1)
Adding number conversion cast (unumber) $28 in (byte~) fire::$5 ← (byte~) fire::$4 + *((byte*) fire::buffer#5 + (number) $28)
Adding number conversion cast (unumber) $29 in (byte~) fire::$6 ← (byte~) fire::$5 + *((byte*) fire::buffer#5 + (number) $29)
Adding number conversion cast (unumber) 4 in (number~) fire::$7 ← (byte~) fire::$6 / (number) 4
Adding number conversion cast (unumber) fire::$7 in (number~) fire::$7 ← (byte~) fire::$6 / (unumber)(number) 4
Adding number conversion cast (unumber) 2 in (bool~) fire::$8 ← (byte) fire::c#0 > (number) 2
Adding number conversion cast (unumber) $18*$28 in (byte*~) fire::$0 ← (byte*) fire::screenbase#3 + (number) $18*(number) $28
Adding number conversion cast (unumber) $18*$28 in (byte*~) fire::$1 ← (const byte*) BUFFER + (number) $18*(number) $28
Adding number conversion cast (unumber) 3 in (byte) fire::c#1 ← (byte) fire::c#3 - (number) 3
Adding number conversion cast (unumber) $19*$28 in (byte*~) fire::$10 ← (const byte*) BUFFER + (number) $19*(number) $28
Adding number conversion cast (unumber) $10 in (number~) fire::$13 ← (byte~) fire::$12 / (number) $10
Adding number conversion cast (unumber) fire::$13 in (number~) fire::$13 ← (byte~) fire::$12 / (unumber)(number) $10
Adding number conversion cast (unumber) $30 in (number~) fire::$14 ← (number) $30 + (unumber~) fire::$13
Adding number conversion cast (unumber) fire::$14 in (number~) fire::$14 ← (unumber)(number) $30 + (unumber~) fire::$13
Adding number conversion cast (unumber) 1*8 in (byte*~) makecharset::$0 ← (byte*) makecharset::charset#2 + (number) 1*(number) 8
Adding number conversion cast (unumber) 0 in *((byte*) makecharset::font#3) ← (number) 0
Adding number conversion cast (unumber) $40*8 in (byte*~) makecharset::$2 ← (byte*) makecharset::charset#3 + (number) $40*(number) 8
Adding number conversion cast (unumber) $100*8 in (byte*~) makecharset::$3 ← (byte*) makecharset::charset#4 + (number) $100*(number) 8
Adding number conversion cast (unumber) $ff in *((byte*) makecharset::font1#3) ← (number) $ff
Adding number conversion cast (unumber) $40 in (bool~) makecharset::$5 ← (byte) makecharset::c#2 < (number) $40
Adding number conversion cast (unumber) 8 in (bool~) makecharset::$6 ← (byte) makecharset::i#2 < (number) 8
Adding number conversion cast (unumber) 8 in (bool~) makecharset::$7 ← (byte) makecharset::ii#2 < (number) 8
Adding number conversion cast (unumber) $3f in (bool~) makecharset::$8 ← (byte) makecharset::bc#1 > (number) $3f
Adding number conversion cast (unumber) 1*8 in (byte*~) makecharset::$14 ← (byte*) makecharset::charset#5 + (number) 1*(number) 8
Adding number conversion cast (unumber) 3 in (word~) makecharset::$15 ← (word~) makecharset::$17 << (number) 3
Adding number conversion cast (unumber) $40 in (number~) makecharset::$10 ← (byte) makecharset::bc#4 - (number) $40
Adding number conversion cast (unumber) makecharset::$10 in (number~) makecharset::$10 ← (byte) makecharset::bc#4 - (unumber)(number) $40
Adding number conversion cast (unumber) 1 in (number~) makecharset::$11 ← (byte) makecharset::i#4 & (number) 1
Adding number conversion cast (unumber) makecharset::$11 in (number~) makecharset::$11 ← (byte) makecharset::i#4 & (unumber)(number) 1
Adding number conversion cast (unumber) makecharset::$12 in (number~) makecharset::$12 ← (byte) makecharset::ii#4 + (unumber~) makecharset::$11
Adding number conversion cast (unumber) 7 in (number~) makecharset::$13 ← (unumber~) makecharset::$12 & (number) 7
Adding number conversion cast (unumber) makecharset::$13 in (number~) makecharset::$13 ← (unumber~) makecharset::$12 & (unumber)(number) 7
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) fillscreen::fill#0 ← (unumber)(number) 0
Inlining cast (byte) fillscreen::fill#1 ← (unumber)(number) 0
Inlining cast (byte) fillscreen::fill#2 ← (unumber)(number) 0
Inlining cast *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (unumber)(number) $ffff
Inlining cast *((byte*) makecharset::font#3) ← (unumber)(number) 0
Inlining cast *((byte*) makecharset::font1#3) ← (unumber)(number) $ff
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53281
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (struct MOS6581_SID*) 54272
Simplifying constant pointer cast (byte*) 14336
Simplifying constant pointer cast (byte*) 15360
Simplifying constant pointer cast (byte*) 16384
Simplifying constant pointer cast (byte*) 12288
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ffff
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $28
Simplifying constant integer cast $29
Simplifying constant integer cast 4
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast $10
Simplifying constant integer cast $30
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast $40
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast $3f
Simplifying constant integer cast 3
Simplifying constant integer cast $40
Simplifying constant integer cast 1
Simplifying constant integer cast 7
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $ffff
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $29
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $30
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $3f
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 7
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to word in (unumber~) main::toD0181_$0 ← (word~) main::toD0181_$7 & (word) $3fff
Inferred type updated to word in (unumber~) main::toD0181_$1 ← (word~) main::toD0181_$0 * (byte) 4
Inferred type updated to byte in (unumber~) main::toD0181_$2 ← > (word~) main::toD0181_$1
Inferred type updated to byte in (unumber~) main::toD0181_$4 ← (byte~) main::toD0181_$3 / (byte) 4
Inferred type updated to byte in (unumber~) main::toD0181_$5 ← (byte~) main::toD0181_$4 & (byte) $f
Inferred type updated to byte in (unumber~) main::toD0181_$6 ← (byte~) main::toD0181_$2 | (byte~) main::toD0181_$5
Inferred type updated to word in (unumber~) main::toD0182_$0 ← (word~) main::toD0182_$7 & (word) $3fff
Inferred type updated to word in (unumber~) main::toD0182_$1 ← (word~) main::toD0182_$0 * (byte) 4
Inferred type updated to byte in (unumber~) main::toD0182_$2 ← > (word~) main::toD0182_$1
Inferred type updated to byte in (unumber~) main::toD0182_$4 ← (byte~) main::toD0182_$3 / (byte) 4
Inferred type updated to byte in (unumber~) main::toD0182_$5 ← (byte~) main::toD0182_$4 & (byte) $f
Inferred type updated to byte in (unumber~) main::toD0182_$6 ← (byte~) main::toD0182_$2 | (byte~) main::toD0182_$5
Inferred type updated to byte in (unumber~) fire::$7 ← (byte~) fire::$6 / (byte) 4
Inferred type updated to byte in (unumber~) fire::$13 ← (byte~) fire::$12 / (byte) $10
Inferred type updated to byte in (unumber~) fire::$14 ← (byte) $30 + (byte~) fire::$13
Inferred type updated to byte in (unumber~) makecharset::$10 ← (byte) makecharset::bc#4 - (byte) $40
Inferred type updated to byte in (unumber~) makecharset::$11 ← (byte) makecharset::i#4 & (byte) 1
Inferred type updated to byte in (unumber~) makecharset::$12 ← (byte) makecharset::ii#4 + (byte~) makecharset::$11
Inferred type updated to byte in (unumber~) makecharset::$13 ← (byte~) makecharset::$12 & (byte) 7
Inversing boolean not [73] (bool~) fire::$9 ← (byte) fire::c#0 <= (byte) 2 from [72] (bool~) fire::$8 ← (byte) fire::c#0 > (byte) 2
Inversing boolean not [145] (bool~) makecharset::$9 ← (byte) makecharset::bc#1 <= (byte) $3f from [144] (bool~) makecharset::$8 ← (byte) makecharset::bc#1 > (byte) $3f
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::toD0181_screen#0 = main::toD0181_screen#1 
Alias main::toD0181_gfx#0 = main::toD0181_gfx#1 
Alias main::toD0181_return#0 = main::toD0181_$6 main::toD0181_return#2 main::toD0181_return#1 main::toD0181_return#3 main::$7 
Alias main::toD0182_screen#0 = main::toD0182_screen#1 
Alias main::toD0182_gfx#0 = main::toD0182_gfx#1 
Alias main::toD0182_return#0 = main::toD0182_$6 main::toD0182_return#2 main::toD0182_return#1 main::toD0182_return#3 main::$9 
Alias fire::screen#0 = fire::screenbase#2 
Alias fire::buffer#4 = fire::buffer#5 fire::buffer#9 
Alias fire::screen#6 = fire::screen#9 fire::screen#7 
Alias fire::screenbase#3 = fire::screenbase#6 fire::screenbase#4 fire::screenbase#7 
Alias fire::c#0 = fire::$7 fire::c#3 
Alias fire::screen#1 = fire::$0 
Alias fire::buffer#1 = fire::$1 
Alias fire::buffer#10 = fire::buffer#11 fire::buffer#7 fire::buffer#8 
Alias fire::screen#10 = fire::screen#11 fire::screen#8 fire::screen#5 
Alias fire::sid_rnd1_return#0 = fire::sid_rnd1_return#2 fire::sid_rnd1_return#1 fire::sid_rnd1_return#3 fire::$12 
Alias makecharset::font#0 = makecharset::charset#1 
Alias makecharset::font#2 = makecharset::font#3 
Alias makecharset::charset#2 = makecharset::charset#6 makecharset::charset#3 
Alias makecharset::font1#0 = makecharset::$2 
Alias makecharset::font1#2 = makecharset::font1#3 
Alias makecharset::charset#17 = makecharset::charset#7 makecharset::charset#4 
Alias makecharset::c#2 = makecharset::c#8 
Alias makecharset::charset#14 = makecharset::charset#15 
Alias makecharset::bc#6 = makecharset::bc#8 
Alias makecharset::c#3 = makecharset::c#9 makecharset::c#6 
Alias makecharset::charset#11 = makecharset::charset#9 makecharset::charset#16 
Alias makecharset::i#2 = makecharset::i#7 
Alias makecharset::bc#3 = makecharset::bc#5 makecharset::bc#9 
Alias makecharset::c#11 = makecharset::c#4 makecharset::c#7 makecharset::c#5 
Alias makecharset::ii#2 = makecharset::ii#5 makecharset::ii#4 
Alias makecharset::i#3 = makecharset::i#6 makecharset::i#5 makecharset::i#4 
Alias makecharset::b#2 = makecharset::b#5 makecharset::b#4 makecharset::b#3 
Alias makecharset::charset#12 = makecharset::charset#8 makecharset::charset#5 makecharset::charset#13 
Alias makecharset::bc#1 = makecharset::bc#4 
Alias makecharset::bc#2 = makecharset::$10 
Successful SSA optimization Pass2AliasElimination
Alias fire::buffer#4 = fire::buffer#6 
Alias fire::screen#4 = fire::screen#6 
Alias fire::screenbase#3 = fire::screenbase#5 
Alias makecharset::ii#2 = makecharset::ii#3 
Alias makecharset::c#10 = makecharset::c#11 
Alias makecharset::charset#10 = makecharset::charset#12 
Alias makecharset::i#3 = makecharset::i#8 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte*) fire::screenbase#3 (byte*) fire::screen#0
Identical Phi Values (byte*) makecharset::font#0 (byte*) makecharset::charset#0
Identical Phi Values (byte*) makecharset::charset#2 (byte*) makecharset::font#0
Identical Phi Values (byte*) makecharset::charset#17 (byte*) makecharset::charset#2
Identical Phi Values (byte) makecharset::c#10 (byte) makecharset::c#3
Identical Phi Values (byte*) makecharset::charset#10 (byte*) makecharset::charset#11
Identical Phi Values (byte) makecharset::i#3 (byte) makecharset::i#2
Identical Phi Values (byte) fillscreen::fill#4 (byte) fillscreen::fill#5
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte) makecharset::c#3 (byte) makecharset::c#2
Identical Phi Values (byte*) makecharset::charset#11 (byte*) makecharset::charset#14
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) makecharset::charset#14 (byte*) makecharset::charset#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) fire::$3 [52] if((byte*) fire::buffer#4!=(byte*~) fire::$2) goto fire::@2
Simple Condition (bool~) fire::$9 [58] if((byte) fire::c#0<=(byte) 2) goto fire::@4
Simple Condition (bool~) fire::$11 [70] if((byte*) fire::buffer#10!=(byte*~) fire::$10) goto fire::sid_rnd1
Simple Condition (bool~) makecharset::$1 [83] if((byte*) makecharset::font#2!=(byte*~) makecharset::$0) goto makecharset::@2
Simple Condition (bool~) makecharset::$4 [90] if((byte*) makecharset::font1#2!=(byte*~) makecharset::$3) goto makecharset::@5
Simple Condition (bool~) makecharset::$5 [96] if((byte) makecharset::c#2<(byte) $40) goto makecharset::@8
Simple Condition (bool~) makecharset::$6 [101] if((byte) makecharset::i#2<(byte) 8) goto makecharset::@10
Simple Condition (bool~) makecharset::$7 [107] if((byte) makecharset::ii#2<(byte) 8) goto makecharset::@13
Simple Condition (bool~) makecharset::$9 [110] if((byte) makecharset::bc#1<=(byte) $3f) goto makecharset::@15
Simple Condition (bool~) fillscreen::$0 [132] if((word) fillscreen::i#1!=rangelast(0,$3e7)) goto fillscreen::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [50] (byte*~) fire::$2 ← (const byte*) BUFFER + (word)(number) $18*(number) $28
Constant right-side identified [60] (byte*) fire::buffer#1 ← (const byte*) BUFFER + (word)(number) $18*(number) $28
Constant right-side identified [68] (byte*~) fire::$10 ← (const byte*) BUFFER + (word)(number) $19*(number) $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) fillscreen::screen#0 = BUFFER
Constant (const byte) fillscreen::fill#0 = 0
Constant (const byte*) fillscreen::screen#1 = SCREEN1
Constant (const byte) fillscreen::fill#1 = 0
Constant (const byte*) fillscreen::screen#2 = SCREEN2
Constant (const byte) fillscreen::fill#2 = 0
Constant (const byte*) fillscreen::screen#3 = COLS
Constant (const byte) fillscreen::fill#3 = YELLOW
Constant (const byte*) makecharset::charset#0 = CHARSET
Constant (const byte*) fire::screenbase#0 = SCREEN1
Constant (const byte*) main::toD0181_screen#0 = SCREEN1
Constant (const byte*) main::toD0181_gfx#0 = CHARSET
Constant (const byte*) fire::screenbase#1 = SCREEN2
Constant (const byte*) main::toD0182_screen#0 = SCREEN2
Constant (const byte*) main::toD0182_gfx#0 = CHARSET
Constant (const byte*) fire::buffer#0 = BUFFER
Constant (const byte*) fire::$2 = BUFFER+(word)$18*$28
Constant (const byte*) fire::buffer#1 = BUFFER+(word)$18*$28
Constant (const byte*) fire::$10 = BUFFER+(word)$19*$28
Constant (const byte) makecharset::c#0 = 0
Constant (const byte) makecharset::bc#0 = 0
Constant (const byte) makecharset::i#0 = 0
Constant (const byte) makecharset::b#0 = 0
Constant (const byte) makecharset::ii#0 = 0
Constant (const word) fillscreen::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const word) main::toD0181_$7 = (word)main::toD0181_screen#0
Constant (const word) main::toD0182_$7 = (word)main::toD0182_screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)main::toD0181_gfx#0 in [28] (byte~) main::toD0181_$3 ← > (word)(const byte*) main::toD0181_gfx#0
Constant value identified (word)main::toD0182_gfx#0 in [41] (byte~) main::toD0182_$3 ← > (word)(const byte*) main::toD0182_gfx#0
Successful SSA optimization Pass2ConstantValues
if() condition always true - replacing block destination [19] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [130] fillscreen::i#1 ← ++ fillscreen::i#2 to ++
Resolved ranged comparison value [132] if(fillscreen::i#1!=rangelast(0,$3e7)) goto fillscreen::@1 to (number) $3e8
Rewriting conditional comparison [58] if((byte) fire::c#0<=(byte) 2) goto fire::@4
Rewriting conditional comparison [110] if((byte) makecharset::bc#1<=(byte) $3f) goto makecharset::@15
De-inlining pointer[w] to *(pointer+w)   [115] *((byte*~) makecharset::$14 + (word~) makecharset::$16) ← (byte) makecharset::b#2
Successful SSA optimization Pass2DeInlineWordDerefIdx
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) 2+1 in if((byte) fire::c#0<(byte) 2+(number) 1) goto fire::@4
Adding number conversion cast (unumber) 1 in if((byte) fire::c#0<(unumber)(byte) 2+(number) 1) goto fire::@4
Adding number conversion cast (unumber) $3f+1 in if((byte) makecharset::bc#1<(byte) $3f+(number) 1) goto makecharset::@15
Adding number conversion cast (unumber) 1 in if((byte) makecharset::bc#1<(unumber)(byte) $3f+(number) 1) goto makecharset::@15
Adding number conversion cast (unumber) $3e8 in if((word) fillscreen::i#1!=(number) $3e8) goto fillscreen::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast (byte) 2+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (byte) $3f+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast $3e8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $3e8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [11] (word~) main::toD0181_$0 ← (const word) main::toD0181_$7 & (word) $3fff
Constant right-side identified [14] (byte~) main::toD0181_$3 ← > (word)(const byte*) main::toD0181_gfx#0
Constant right-side identified [20] (word~) main::toD0182_$0 ← (const word) main::toD0182_$7 & (word) $3fff
Constant right-side identified [23] (byte~) main::toD0182_$3 ← > (word)(const byte*) main::toD0182_gfx#0
Constant right-side identified [54] (byte*~) makecharset::$0 ← (const byte*) makecharset::charset#0 + (byte)(number) 1*(number) 8
Constant right-side identified [58] (byte*) makecharset::font1#0 ← (const byte*) makecharset::charset#0 + (word)(number) $40*(number) 8
Constant right-side identified [60] (byte*~) makecharset::$3 ← (const byte*) makecharset::charset#0 + (word)(number) $100*(number) 8
Constant right-side identified [73] (byte*~) makecharset::$14 ← (const byte*) makecharset::charset#0 + (byte)(number) 1*(number) 8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) main::toD0181_$0 = main::toD0181_$7&$3fff
Constant (const byte) main::toD0181_$3 = >(word)main::toD0181_gfx#0
Constant (const word) main::toD0182_$0 = main::toD0182_$7&$3fff
Constant (const byte) main::toD0182_$3 = >(word)main::toD0182_gfx#0
Constant (const byte*) makecharset::$0 = makecharset::charset#0+(byte)1*8
Constant (const byte*) makecharset::font1#0 = makecharset::charset#0+(word)$40*8
Constant (const byte*) makecharset::$3 = makecharset::charset#0+(word)$100*8
Constant (const byte*) makecharset::$14 = makecharset::charset#0+(byte)1*8
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [11] (word~) main::toD0181_$1 ← (const word) main::toD0181_$0 * (byte) 4
Constant right-side identified [13] (byte~) main::toD0181_$4 ← (const byte) main::toD0181_$3 / (byte) 4
Constant right-side identified [18] (word~) main::toD0182_$1 ← (const word) main::toD0182_$0 * (byte) 4
Constant right-side identified [20] (byte~) main::toD0182_$4 ← (const byte) main::toD0182_$3 / (byte) 4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) main::toD0181_$1 = main::toD0181_$0*4
Constant (const byte) main::toD0181_$4 = main::toD0181_$3/4
Constant (const word) main::toD0182_$1 = main::toD0182_$0*4
Constant (const byte) main::toD0182_$4 = main::toD0182_$3/4
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [11] (byte~) main::toD0181_$2 ← > (const word) main::toD0181_$1
Constant right-side identified [12] (byte~) main::toD0181_$5 ← (const byte) main::toD0181_$4 & (byte) $f
Constant right-side identified [16] (byte~) main::toD0182_$2 ← > (const word) main::toD0182_$1
Constant right-side identified [17] (byte~) main::toD0182_$5 ← (const byte) main::toD0182_$4 & (byte) $f
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::toD0181_$2 = >main::toD0181_$1
Constant (const byte) main::toD0181_$5 = main::toD0181_$4&$f
Constant (const byte) main::toD0182_$2 = >main::toD0182_$1
Constant (const byte) main::toD0182_$5 = main::toD0182_$4&$f
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [11] (byte) main::toD0181_return#0 ← (const byte) main::toD0181_$2 | (const byte) main::toD0181_$5
Constant right-side identified [14] (byte) main::toD0182_return#0 ← (const byte) main::toD0182_$2 | (const byte) main::toD0182_$5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::toD0181_return#0 = main::toD0181_$2|main::toD0181_$5
Constant (const byte) main::toD0182_return#0 = main::toD0182_$2|main::toD0182_$5
Successful SSA optimization Pass2ConstantIdentification
Rewriting division to use shift [20] (byte) fire::c#0 ← (byte~) fire::$6 / (byte) 4
Rewriting division to use shift [32] (byte~) fire::$13 ← (byte) fire::sid_rnd1_return#0 / (byte) $10
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte*) fire::buffer#0
Inlining constant with var siblings (const byte*) fire::buffer#1
Inlining constant with var siblings (const byte) makecharset::c#0
Inlining constant with var siblings (const byte) makecharset::bc#0
Inlining constant with var siblings (const byte) makecharset::i#0
Inlining constant with var siblings (const byte) makecharset::b#0
Inlining constant with var siblings (const byte) makecharset::ii#0
Inlining constant with var siblings (const byte*) makecharset::font1#0
Inlining constant with var siblings (const byte*) fillscreen::screen#0
Inlining constant with var siblings (const byte) fillscreen::fill#0
Inlining constant with var siblings (const byte*) fillscreen::screen#1
Inlining constant with var siblings (const byte) fillscreen::fill#1
Inlining constant with var siblings (const byte*) fillscreen::screen#2
Inlining constant with var siblings (const byte) fillscreen::fill#2
Inlining constant with var siblings (const byte*) fillscreen::screen#3
Inlining constant with var siblings (const byte) fillscreen::fill#3
Inlining constant with var siblings (const word) fillscreen::i#0
Constant inlined fillscreen::fill#2 = (byte) 0
Constant inlined main::toD0181_screen#0 = (const byte*) SCREEN1
Constant inlined main::toD0181_gfx#0 = (const byte*) CHARSET
Constant inlined fillscreen::fill#1 = (byte) 0
Constant inlined fillscreen::fill#3 = (const nomodify byte) YELLOW
Constant inlined fire::$10 = (const byte*) BUFFER+(word)(number) $19*(number) $28
Constant inlined main::toD0182_$4 = >(word)(const byte*) CHARSET/(byte) 4
Constant inlined main::toD0182_$5 = >(word)(const byte*) CHARSET/(byte) 4&(byte) $f
Constant inlined main::toD0182_$7 = (word)(const byte*) SCREEN2
Constant inlined main::toD0182_$0 = (word)(const byte*) SCREEN2&(word) $3fff
Constant inlined main::toD0182_$1 = (word)(const byte*) SCREEN2&(word) $3fff*(byte) 4
Constant inlined makecharset::bc#0 = (byte) 0
Constant inlined main::toD0182_$2 = >(word)(const byte*) SCREEN2&(word) $3fff*(byte) 4
Constant inlined main::toD0182_$3 = >(word)(const byte*) CHARSET
Constant inlined fillscreen::screen#3 = (const nomodify byte*) COLS
Constant inlined fillscreen::screen#2 = (const byte*) SCREEN2
Constant inlined fillscreen::screen#1 = (const byte*) SCREEN1
Constant inlined fillscreen::screen#0 = (const byte*) BUFFER
Constant inlined fire::$2 = (const byte*) BUFFER+(word)(number) $18*(number) $28
Constant inlined fire::screenbase#1 = (const byte*) SCREEN2
Constant inlined fire::screenbase#0 = (const byte*) SCREEN1
Constant inlined fillscreen::i#0 = (word) 0
Constant inlined main::toD0181_$7 = (word)(const byte*) SCREEN1
Constant inlined makecharset::$3 = (const byte*) CHARSET+(word)(number) $100*(number) 8
Constant inlined main::toD0182_gfx#0 = (const byte*) CHARSET
Constant inlined makecharset::$0 = (const byte*) CHARSET+(byte)(number) 1*(number) 8
Constant inlined main::toD0181_$2 = >(word)(const byte*) SCREEN1&(word) $3fff*(byte) 4
Constant inlined main::toD0181_$1 = (word)(const byte*) SCREEN1&(word) $3fff*(byte) 4
Constant inlined main::toD0181_$0 = (word)(const byte*) SCREEN1&(word) $3fff
Constant inlined main::toD0181_$5 = >(word)(const byte*) CHARSET/(byte) 4&(byte) $f
Constant inlined main::toD0181_$4 = >(word)(const byte*) CHARSET/(byte) 4
Constant inlined makecharset::$14 = (const byte*) CHARSET+(byte)(number) 1*(number) 8
Constant inlined main::toD0181_$3 = >(word)(const byte*) CHARSET
Constant inlined makecharset::ii#0 = (byte) 0
Constant inlined makecharset::i#0 = (byte) 0
Constant inlined makecharset::font1#0 = (const byte*) CHARSET+(word)(number) $40*(number) 8
Constant inlined makecharset::charset#0 = (const byte*) CHARSET
Constant inlined main::toD0182_screen#0 = (const byte*) SCREEN2
Constant inlined makecharset::b#0 = (byte) 0
Constant inlined fire::buffer#1 = (const byte*) BUFFER+(word)(number) $18*(number) $28
Constant inlined makecharset::c#0 = (byte) 0
Constant inlined fire::buffer#0 = (const byte*) BUFFER
Constant inlined fillscreen::fill#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting fire::@8(between fire::@2 and fire::@4)
Added new block during phi lifting makecharset::@17(between makecharset::@13 and makecharset::@15)
Added new block during phi lifting fillscreen::@2(between fillscreen::@1 and fillscreen::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0181_@return
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::toD0182
Adding NOP phi() at start of main::toD0182_@return
Adding NOP phi() at start of fire::sid_rnd1_@return
Adding NOP phi() at start of makecharset
Adding NOP phi() at start of makecharset::@3
Adding NOP phi() at start of makecharset::@6
Adding NOP phi() at start of makecharset::@8
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to fillscreen:8 fillscreen:10 fillscreen:12 fillscreen:14 makecharset:19 fire:23 fire:28 

Created 20 initial phi equivalence classes
Not coalescing [34] fire::screen#12 ← fire::screen#0
Coalesced [38] fire::screen#14 ← fire::screen#1
Coalesced [50] fire::buffer#13 ← fire::buffer#3
Coalesced [51] fire::screen#15 ← fire::screen#3
Coalesced [58] fire::c#5 ← fire::c#1
Coalesced [64] fire::buffer#12 ← fire::buffer#2
Coalesced [65] fire::screen#13 ← fire::screen#2
Coalesced [66] fire::c#4 ← fire::c#0
Coalesced [81] makecharset::c#12 ← makecharset::c#1
Coalesced [82] makecharset::bc#11 ← makecharset::bc#6
Coalesced [91] makecharset::i#9 ← makecharset::i#1
Coalesced (already) [92] makecharset::bc#10 ← makecharset::bc#3
Coalesced [100] makecharset::bc#14 ← makecharset::bc#2
Coalesced [101] makecharset::b#9 ← makecharset::b#1
Coalesced [104] makecharset::ii#6 ← makecharset::ii#1
Coalesced [105] makecharset::bc#12 ← makecharset::bc#7
Coalesced [106] makecharset::b#7 ← makecharset::b#6
Coalesced [107] makecharset::bc#13 ← makecharset::bc#1
Coalesced (already) [108] makecharset::b#8 ← makecharset::b#2
Coalesced [111] makecharset::font1#4 ← makecharset::font1#1
Coalesced [114] makecharset::font#4 ← makecharset::font#1
Coalesced [116] fillscreen::screen#7 ← fillscreen::screen#6
Coalesced [123] fillscreen::screen#8 ← fillscreen::screen#4
Coalesced [124] fillscreen::i#3 ← fillscreen::i#1
Coalesced down to 16 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@9
Culled Empty Block (label) main::@10
Culled Empty Block (label) main::@1
Culled Empty Block (label) main::@11
Culled Empty Block (label) main::toD0181_@return
Culled Empty Block (label) main::@12
Culled Empty Block (label) main::toD0182_@return
Culled Empty Block (label) fire::sid_rnd1_@return
Culled Empty Block (label) fire::@8
Culled Empty Block (label) makecharset::@3
Culled Empty Block (label) makecharset::@6
Culled Empty Block (label) makecharset::@8
Culled Empty Block (label) makecharset::@10
Culled Empty Block (label) makecharset::@17
Culled Empty Block (label) fillscreen::@2
Renumbering block main::@2 to main::@1
Renumbering block main::@3 to main::@2
Renumbering block main::@4 to main::@3
Renumbering block main::@5 to main::@4
Renumbering block main::@6 to main::@5
Renumbering block main::@7 to main::@6
Renumbering block main::@8 to main::@7
Renumbering block makecharset::@4 to makecharset::@3
Renumbering block makecharset::@5 to makecharset::@4
Renumbering block makecharset::@7 to makecharset::@5
Renumbering block makecharset::@9 to makecharset::@6
Renumbering block makecharset::@11 to makecharset::@7
Renumbering block makecharset::@12 to makecharset::@8
Renumbering block makecharset::@13 to makecharset::@9
Renumbering block makecharset::@14 to makecharset::@10
Renumbering block makecharset::@15 to makecharset::@11
Renumbering block makecharset::@16 to makecharset::@12
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0182
Adding NOP phi() at start of makecharset

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  asm { sei  }
  [5] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK
  [6] *((const nomodify byte*) BGCOL) ← (const nomodify byte) BLACK
  [7] call fillscreen 
  to:main::@5
main::@5: scope:[main]  from main
  [8] phi()
  [9] call fillscreen 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [10] phi()
  [11] call fillscreen 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [12] phi()
  [13] call fillscreen 
  to:main::sid_rnd_init1
main::sid_rnd_init1: scope:[main]  from main::@7
  [14] *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (word) $ffff
  [15] *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) ← (const nomodify byte) SID_CONTROL_NOISE
  to:main::@2
main::@2: scope:[main]  from main::sid_rnd_init1
  [16] phi()
  [17] call makecharset 
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@4
  [18] phi()
  [19] call fire 
  to:main::toD0181
main::toD0181: scope:[main]  from main::@1
  [20] phi()
  to:main::@3
main::@3: scope:[main]  from main::toD0181
  [21] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0
  [22] call fire 
  to:main::toD0182
main::toD0182: scope:[main]  from main::@3
  [23] phi()
  to:main::@4
main::@4: scope:[main]  from main::toD0182
  [24] *((const nomodify byte*) D018) ← (const byte) main::toD0182_return#0
  to:main::@1

(void()) fire((byte*) fire::screenbase)
fire: scope:[fire]  from main::@1 main::@3
  [25] (byte*) fire::screen#0 ← phi( main::@1/(const byte*) SCREEN1 main::@3/(const byte*) SCREEN2 )
  [26] (byte*) fire::screen#12 ← (byte*) fire::screen#0
  to:fire::@1
fire::@1: scope:[fire]  from fire fire::@4
  [27] (byte*) fire::screen#4 ← phi( fire/(byte*) fire::screen#12 fire::@4/(byte*) fire::screen#2 )
  [27] (byte*) fire::buffer#4 ← phi( fire/(const byte*) BUFFER fire::@4/(byte*) fire::buffer#2 )
  [28] if((byte*) fire::buffer#4!=(const byte*) BUFFER+(word)(number) $18*(number) $28) goto fire::@2
  to:fire::@3
fire::@3: scope:[fire]  from fire::@1
  [29] (byte*) fire::screen#1 ← (byte*) fire::screen#0 + (word)(number) $18*(number) $28
  to:fire::@6
fire::@6: scope:[fire]  from fire::@3 fire::@7
  [30] (byte*) fire::screen#10 ← phi( fire::@3/(byte*) fire::screen#1 fire::@7/(byte*) fire::screen#3 )
  [30] (byte*) fire::buffer#10 ← phi( fire::@3/(const byte*) BUFFER+(word)(number) $18*(number) $28 fire::@7/(byte*) fire::buffer#3 )
  [31] if((byte*) fire::buffer#10!=(const byte*) BUFFER+(word)(number) $19*(number) $28) goto fire::sid_rnd1
  to:fire::@return
fire::@return: scope:[fire]  from fire::@6
  [32] return 
  to:@return
fire::sid_rnd1: scope:[fire]  from fire::@6
  [33] (byte) fire::sid_rnd1_return#0 ← *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_OSC)
  to:fire::@7
fire::@7: scope:[fire]  from fire::sid_rnd1
  [34] (byte~) fire::$13 ← (byte) fire::sid_rnd1_return#0 >> (byte) 4
  [35] (byte~) fire::$14 ← (byte) $30 + (byte~) fire::$13
  [36] *((byte*) fire::buffer#10) ← (byte~) fire::$14
  [37] *((byte*) fire::screen#10) ← *((byte*) fire::buffer#10)
  [38] (byte*) fire::screen#3 ← ++ (byte*) fire::screen#10
  [39] (byte*) fire::buffer#3 ← ++ (byte*) fire::buffer#10
  to:fire::@6
fire::@2: scope:[fire]  from fire::@1
  [40] (byte~) fire::$4 ← *((byte*) fire::buffer#4 + (byte)(number) $28-(number) 1) + *((byte*) fire::buffer#4 + (byte)(number) $28-(number) 1)
  [41] (byte~) fire::$5 ← (byte~) fire::$4 + *((byte*) fire::buffer#4 + (byte) $28)
  [42] (byte~) fire::$6 ← (byte~) fire::$5 + *((byte*) fire::buffer#4 + (byte) $29)
  [43] (byte) fire::c#0 ← (byte~) fire::$6 >> (byte) 2
  [44] if((byte) fire::c#0<(byte) 2+(byte) 1) goto fire::@4
  to:fire::@5
fire::@5: scope:[fire]  from fire::@2
  [45] (byte) fire::c#1 ← (byte) fire::c#0 - (byte) 3
  to:fire::@4
fire::@4: scope:[fire]  from fire::@2 fire::@5
  [46] (byte) fire::c#2 ← phi( fire::@2/(byte) fire::c#0 fire::@5/(byte) fire::c#1 )
  [47] *((byte*) fire::buffer#4) ← (byte) fire::c#2
  [48] *((byte*) fire::screen#4) ← *((byte*) fire::buffer#4)
  [49] (byte*) fire::screen#2 ← ++ (byte*) fire::screen#4
  [50] (byte*) fire::buffer#2 ← ++ (byte*) fire::buffer#4
  to:fire::@1

(void()) makecharset((byte*) makecharset::charset)
makecharset: scope:[makecharset]  from main::@2
  [51] phi()
  to:makecharset::@1
makecharset::@1: scope:[makecharset]  from makecharset makecharset::@2
  [52] (byte*) makecharset::font#2 ← phi( makecharset/(const byte*) CHARSET makecharset::@2/(byte*) makecharset::font#1 )
  [53] if((byte*) makecharset::font#2!=(const byte*) CHARSET+(byte)(number) 1*(number) 8) goto makecharset::@2
  to:makecharset::@3
makecharset::@3: scope:[makecharset]  from makecharset::@1 makecharset::@4
  [54] (byte*) makecharset::font1#2 ← phi( makecharset::@1/(const byte*) CHARSET+(word)(number) $40*(number) 8 makecharset::@4/(byte*) makecharset::font1#1 )
  [55] if((byte*) makecharset::font1#2!=(const byte*) CHARSET+(word)(number) $100*(number) 8) goto makecharset::@4
  to:makecharset::@5
makecharset::@5: scope:[makecharset]  from makecharset::@3 makecharset::@7
  [56] (byte) makecharset::c#2 ← phi( makecharset::@7/(byte) makecharset::c#1 makecharset::@3/(byte) 0 )
  [57] if((byte) makecharset::c#2<(byte) $40) goto makecharset::@6
  to:makecharset::@return
makecharset::@return: scope:[makecharset]  from makecharset::@5
  [58] return 
  to:@return
makecharset::@6: scope:[makecharset]  from makecharset::@10 makecharset::@5
  [59] (byte) makecharset::bc#6 ← phi( makecharset::@10/(byte) makecharset::bc#3 makecharset::@5/(byte) 0 )
  [59] (byte) makecharset::i#2 ← phi( makecharset::@10/(byte) makecharset::i#1 makecharset::@5/(byte) 0 )
  [60] if((byte) makecharset::i#2<(byte) 8) goto makecharset::@8
  to:makecharset::@7
makecharset::@7: scope:[makecharset]  from makecharset::@6
  [61] (byte) makecharset::c#1 ← ++ (byte) makecharset::c#2
  to:makecharset::@5
makecharset::@8: scope:[makecharset]  from makecharset::@11 makecharset::@6
  [62] (byte) makecharset::b#2 ← phi( makecharset::@6/(byte) 0 makecharset::@11/(byte) makecharset::b#6 )
  [62] (byte) makecharset::bc#3 ← phi( makecharset::@6/(byte) makecharset::bc#6 makecharset::@11/(byte) makecharset::bc#7 )
  [62] (byte) makecharset::ii#2 ← phi( makecharset::@6/(byte) 0 makecharset::@11/(byte) makecharset::ii#1 )
  [63] if((byte) makecharset::ii#2<(byte) 8) goto makecharset::@9
  to:makecharset::@10
makecharset::@10: scope:[makecharset]  from makecharset::@8
  [64] (word~) makecharset::$17 ← (word)(byte) makecharset::c#2
  [65] (word~) makecharset::$15 ← (word~) makecharset::$17 << (byte) 3
  [66] (word~) makecharset::$16 ← (word~) makecharset::$15 + (byte) makecharset::i#2
  [67] (byte*~) makecharset::$18 ← (const byte*) CHARSET+(byte)(number) 1*(number) 8 + (word~) makecharset::$16
  [68] *((byte*~) makecharset::$18) ← (byte) makecharset::b#2
  [69] (byte) makecharset::i#1 ← ++ (byte) makecharset::i#2
  to:makecharset::@6
makecharset::@9: scope:[makecharset]  from makecharset::@8
  [70] (byte) makecharset::bc#1 ← (byte) makecharset::bc#3 + (byte) makecharset::c#2
  [71] if((byte) makecharset::bc#1<(byte) $3f+(byte) 1) goto makecharset::@11
  to:makecharset::@12
makecharset::@12: scope:[makecharset]  from makecharset::@9
  [72] (byte) makecharset::bc#2 ← (byte) makecharset::bc#1 - (byte) $40
  [73] (byte~) makecharset::$11 ← (byte) makecharset::i#2 & (byte) 1
  [74] (byte~) makecharset::$12 ← (byte) makecharset::ii#2 + (byte~) makecharset::$11
  [75] (byte~) makecharset::$13 ← (byte~) makecharset::$12 & (byte) 7
  [76] (byte) makecharset::b#1 ← (byte) makecharset::b#2 + *((const to_nomodify byte*) makecharset::bittab + (byte~) makecharset::$13)
  to:makecharset::@11
makecharset::@11: scope:[makecharset]  from makecharset::@12 makecharset::@9
  [77] (byte) makecharset::b#6 ← phi( makecharset::@9/(byte) makecharset::b#2 makecharset::@12/(byte) makecharset::b#1 )
  [77] (byte) makecharset::bc#7 ← phi( makecharset::@9/(byte) makecharset::bc#1 makecharset::@12/(byte) makecharset::bc#2 )
  [78] (byte) makecharset::ii#1 ← ++ (byte) makecharset::ii#2
  to:makecharset::@8
makecharset::@4: scope:[makecharset]  from makecharset::@3
  [79] *((byte*) makecharset::font1#2) ← (byte) $ff
  [80] (byte*) makecharset::font1#1 ← ++ (byte*) makecharset::font1#2
  to:makecharset::@3
makecharset::@2: scope:[makecharset]  from makecharset::@1
  [81] *((byte*) makecharset::font#2) ← (byte) 0
  [82] (byte*) makecharset::font#1 ← ++ (byte*) makecharset::font#2
  to:makecharset::@1

(void()) fillscreen((byte*) fillscreen::screen , (byte) fillscreen::fill)
fillscreen: scope:[fillscreen]  from main main::@5 main::@6 main::@7
  [83] (byte*) fillscreen::screen#6 ← phi( main/(const byte*) BUFFER main::@5/(const byte*) SCREEN1 main::@6/(const byte*) SCREEN2 main::@7/(const nomodify byte*) COLS )
  [83] (byte) fillscreen::fill#5 ← phi( main/(byte) 0 main::@5/(byte) 0 main::@6/(byte) 0 main::@7/(const nomodify byte) YELLOW )
  to:fillscreen::@1
fillscreen::@1: scope:[fillscreen]  from fillscreen fillscreen::@1
  [84] (word) fillscreen::i#2 ← phi( fillscreen/(word) 0 fillscreen::@1/(word) fillscreen::i#1 )
  [84] (byte*) fillscreen::screen#5 ← phi( fillscreen/(byte*) fillscreen::screen#6 fillscreen::@1/(byte*) fillscreen::screen#4 )
  [85] *((byte*) fillscreen::screen#5) ← (byte) fillscreen::fill#5
  [86] (byte*) fillscreen::screen#4 ← ++ (byte*) fillscreen::screen#5
  [87] (word) fillscreen::i#1 ← ++ (word) fillscreen::i#2
  [88] if((word) fillscreen::i#1!=(word) $3e8) goto fillscreen::@1
  to:fillscreen::@return
fillscreen::@return: scope:[fillscreen]  from fillscreen::@1
  [89] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(void()) fillscreen((byte*) fillscreen::screen , (byte) fillscreen::fill)
(byte) fillscreen::fill
(byte) fillscreen::fill#5 166.83333333333334
(word) fillscreen::i
(word) fillscreen::i#1 1501.5
(word) fillscreen::i#2 667.3333333333334
(byte*) fillscreen::screen
(byte*) fillscreen::screen#4 667.3333333333334
(byte*) fillscreen::screen#5 1552.0
(byte*) fillscreen::screen#6 101.0
(void()) fire((byte*) fire::screenbase)
(byte~) fire::$13 200002.0
(byte~) fire::$14 200002.0
(byte~) fire::$4 200002.0
(byte~) fire::$5 200002.0
(byte~) fire::$6 200002.0
(byte*) fire::buffer
(byte*) fire::buffer#10 62500.625
(byte*) fire::buffer#2 200002.0
(byte*) fire::buffer#3 200002.0
(byte*) fire::buffer#4 75000.75
(byte) fire::c
(byte) fire::c#0 200002.0
(byte) fire::c#1 200002.0
(byte) fire::c#2 300003.0
(byte*) fire::screen
(byte*) fire::screen#0 133.46666666666667
(byte*) fire::screen#1 2002.0
(byte*) fire::screen#10 43000.57142857143
(byte*) fire::screen#12 2002.0
(byte*) fire::screen#2 100001.0
(byte*) fire::screen#3 100001.0
(byte*) fire::screen#4 27364.0
(byte*) fire::screenbase
(byte) fire::sid_rnd1_return
(byte) fire::sid_rnd1_return#0 200002.0
(void()) main()
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(byte*) main::toD0181_screen
(byte*) main::toD0182_gfx
(byte) main::toD0182_return
(byte*) main::toD0182_screen
(void()) makecharset((byte*) makecharset::charset)
(byte~) makecharset::$11 200002.0
(byte~) makecharset::$12 200002.0
(byte~) makecharset::$13 200002.0
(word~) makecharset::$15 20002.0
(word~) makecharset::$16 20002.0
(word~) makecharset::$17 20002.0
(byte*~) makecharset::$18 20002.0
(byte) makecharset::b
(byte) makecharset::b#1 200002.0
(byte) makecharset::b#2 25833.666666666664
(byte) makecharset::b#6 150001.5
(byte) makecharset::bc
(byte) makecharset::bc#1 200002.0
(byte) makecharset::bc#2 40000.4
(byte) makecharset::bc#3 27500.5
(byte) makecharset::bc#6 10001.0
(byte) makecharset::bc#7 150001.5
(byte) makecharset::c
(byte) makecharset::c#1 2002.0
(byte) makecharset::c#2 4904.952380952381
(byte*) makecharset::charset
(byte*) makecharset::font
(byte*) makecharset::font#1 2002.0
(byte*) makecharset::font#2 1334.6666666666667
(byte*) makecharset::font1
(byte*) makecharset::font1#1 2002.0
(byte*) makecharset::font1#2 1334.6666666666667
(byte) makecharset::i
(byte) makecharset::i#1 20002.0
(byte) makecharset::i#2 7778.055555555556
(byte) makecharset::ii
(byte) makecharset::ii#1 200002.0
(byte) makecharset::ii#2 40000.4

Initial phi equivalence classes
[ fire::screen#0 ]
[ fire::buffer#4 fire::buffer#2 ]
[ fire::screen#4 fire::screen#12 fire::screen#2 ]
[ fire::buffer#10 fire::buffer#3 ]
[ fire::screen#10 fire::screen#1 fire::screen#3 ]
[ fire::c#2 fire::c#0 fire::c#1 ]
[ makecharset::font#2 makecharset::font#1 ]
[ makecharset::font1#2 makecharset::font1#1 ]
[ makecharset::c#2 makecharset::c#1 ]
[ makecharset::i#2 makecharset::i#1 ]
[ makecharset::bc#6 makecharset::bc#3 makecharset::bc#7 makecharset::bc#1 makecharset::bc#2 ]
[ makecharset::ii#2 makecharset::ii#1 ]
[ makecharset::b#2 makecharset::b#6 makecharset::b#1 ]
[ fillscreen::fill#5 ]
[ fillscreen::screen#5 fillscreen::screen#6 fillscreen::screen#4 ]
[ fillscreen::i#2 fillscreen::i#1 ]
Added variable fire::sid_rnd1_return#0 to live range equivalence class [ fire::sid_rnd1_return#0 ]
Added variable fire::$13 to live range equivalence class [ fire::$13 ]
Added variable fire::$14 to live range equivalence class [ fire::$14 ]
Added variable fire::$4 to live range equivalence class [ fire::$4 ]
Added variable fire::$5 to live range equivalence class [ fire::$5 ]
Added variable fire::$6 to live range equivalence class [ fire::$6 ]
Added variable makecharset::$17 to live range equivalence class [ makecharset::$17 ]
Added variable makecharset::$15 to live range equivalence class [ makecharset::$15 ]
Added variable makecharset::$16 to live range equivalence class [ makecharset::$16 ]
Added variable makecharset::$18 to live range equivalence class [ makecharset::$18 ]
Added variable makecharset::$11 to live range equivalence class [ makecharset::$11 ]
Added variable makecharset::$12 to live range equivalence class [ makecharset::$12 ]
Added variable makecharset::$13 to live range equivalence class [ makecharset::$13 ]
Complete equivalence classes
[ fire::screen#0 ]
[ fire::buffer#4 fire::buffer#2 ]
[ fire::screen#4 fire::screen#12 fire::screen#2 ]
[ fire::buffer#10 fire::buffer#3 ]
[ fire::screen#10 fire::screen#1 fire::screen#3 ]
[ fire::c#2 fire::c#0 fire::c#1 ]
[ makecharset::font#2 makecharset::font#1 ]
[ makecharset::font1#2 makecharset::font1#1 ]
[ makecharset::c#2 makecharset::c#1 ]
[ makecharset::i#2 makecharset::i#1 ]
[ makecharset::bc#6 makecharset::bc#3 makecharset::bc#7 makecharset::bc#1 makecharset::bc#2 ]
[ makecharset::ii#2 makecharset::ii#1 ]
[ makecharset::b#2 makecharset::b#6 makecharset::b#1 ]
[ fillscreen::fill#5 ]
[ fillscreen::screen#5 fillscreen::screen#6 fillscreen::screen#4 ]
[ fillscreen::i#2 fillscreen::i#1 ]
[ fire::sid_rnd1_return#0 ]
[ fire::$13 ]
[ fire::$14 ]
[ fire::$4 ]
[ fire::$5 ]
[ fire::$6 ]
[ makecharset::$17 ]
[ makecharset::$15 ]
[ makecharset::$16 ]
[ makecharset::$18 ]
[ makecharset::$11 ]
[ makecharset::$12 ]
[ makecharset::$13 ]
Allocated zp[2]:2 [ fire::screen#0 ]
Allocated zp[2]:4 [ fire::buffer#4 fire::buffer#2 ]
Allocated zp[2]:6 [ fire::screen#4 fire::screen#12 fire::screen#2 ]
Allocated zp[2]:8 [ fire::buffer#10 fire::buffer#3 ]
Allocated zp[2]:10 [ fire::screen#10 fire::screen#1 fire::screen#3 ]
Allocated zp[1]:12 [ fire::c#2 fire::c#0 fire::c#1 ]
Allocated zp[2]:13 [ makecharset::font#2 makecharset::font#1 ]
Allocated zp[2]:15 [ makecharset::font1#2 makecharset::font1#1 ]
Allocated zp[1]:17 [ makecharset::c#2 makecharset::c#1 ]
Allocated zp[1]:18 [ makecharset::i#2 makecharset::i#1 ]
Allocated zp[1]:19 [ makecharset::bc#6 makecharset::bc#3 makecharset::bc#7 makecharset::bc#1 makecharset::bc#2 ]
Allocated zp[1]:20 [ makecharset::ii#2 makecharset::ii#1 ]
Allocated zp[1]:21 [ makecharset::b#2 makecharset::b#6 makecharset::b#1 ]
Allocated zp[1]:22 [ fillscreen::fill#5 ]
Allocated zp[2]:23 [ fillscreen::screen#5 fillscreen::screen#6 fillscreen::screen#4 ]
Allocated zp[2]:25 [ fillscreen::i#2 fillscreen::i#1 ]
Allocated zp[1]:27 [ fire::sid_rnd1_return#0 ]
Allocated zp[1]:28 [ fire::$13 ]
Allocated zp[1]:29 [ fire::$14 ]
Allocated zp[1]:30 [ fire::$4 ]
Allocated zp[1]:31 [ fire::$5 ]
Allocated zp[1]:32 [ fire::$6 ]
Allocated zp[2]:33 [ makecharset::$17 ]
Allocated zp[2]:35 [ makecharset::$15 ]
Allocated zp[2]:37 [ makecharset::$16 ]
Allocated zp[2]:39 [ makecharset::$18 ]
Allocated zp[1]:41 [ makecharset::$11 ]
Allocated zp[1]:42 [ makecharset::$12 ]
Allocated zp[1]:43 [ makecharset::$13 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// A KickC version of the fire routine from the CC65 samples
// (w)2002 by groepaz/hitmen
// Cleanup and porting to CC65 by Ullrich von Bassewitz and Greg King .
// Ported to KickC by Jesper Gravgaard.
// Original source https://github.com/cc65/cc65/blob/master/samples/fire.c
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // SID Channel Control Register Noise Waveform
  .const SID_CONTROL_NOISE = $80
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label D018 = $d018
  // Color Ram
  .label COLS = $d800
  // The SID MOD 6581/8580
  .label SID = $d400
  // The colors of the C64
  .const BLACK = 0
  .const YELLOW = 7
  .const OFFSET_STRUCT_MOS6581_SID_CH3_FREQ = $e
  .const OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL = $12
  .const OFFSET_STRUCT_MOS6581_SID_CH3_OSC = $1b
  .label SCREEN1 = $3800
  .label SCREEN2 = $3c00
  .label BUFFER = $4000
  .label CHARSET = $3000
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .const toD0181_return = (>(SCREEN1&$3fff)*4)|(>CHARSET)/4&$f
    .const toD0182_return = (>(SCREEN2&$3fff)*4)|(>CHARSET)/4&$f
    // asm { sei  }
    sei
    // [5] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
    // [6] *((const nomodify byte*) BGCOL) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BGCOL
    // [7] call fillscreen 
    // [83] phi from main to fillscreen [phi:main->fillscreen]
  fillscreen_from_main:
    // [83] phi (byte*) fillscreen::screen#6 = (const byte*) BUFFER [phi:main->fillscreen#0] -- pbuz1=pbuc1 
    lda #<BUFFER
    sta.z fillscreen.screen
    lda #>BUFFER
    sta.z fillscreen.screen+1
    // [83] phi (byte) fillscreen::fill#5 = (byte) 0 [phi:main->fillscreen#1] -- vbuz1=vbuc1 
    lda #0
    sta.z fillscreen.fill
    jsr fillscreen
    // [8] phi from main to main::@5 [phi:main->main::@5]
  __b5_from_main:
    jmp __b5
    // main::@5
  __b5:
    // [9] call fillscreen 
    // [83] phi from main::@5 to fillscreen [phi:main::@5->fillscreen]
  fillscreen_from___b5:
    // [83] phi (byte*) fillscreen::screen#6 = (const byte*) SCREEN1 [phi:main::@5->fillscreen#0] -- pbuz1=pbuc1 
    lda #<SCREEN1
    sta.z fillscreen.screen
    lda #>SCREEN1
    sta.z fillscreen.screen+1
    // [83] phi (byte) fillscreen::fill#5 = (byte) 0 [phi:main::@5->fillscreen#1] -- vbuz1=vbuc1 
    lda #0
    sta.z fillscreen.fill
    jsr fillscreen
    // [10] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [11] call fillscreen 
    // [83] phi from main::@6 to fillscreen [phi:main::@6->fillscreen]
  fillscreen_from___b6:
    // [83] phi (byte*) fillscreen::screen#6 = (const byte*) SCREEN2 [phi:main::@6->fillscreen#0] -- pbuz1=pbuc1 
    lda #<SCREEN2
    sta.z fillscreen.screen
    lda #>SCREEN2
    sta.z fillscreen.screen+1
    // [83] phi (byte) fillscreen::fill#5 = (byte) 0 [phi:main::@6->fillscreen#1] -- vbuz1=vbuc1 
    lda #0
    sta.z fillscreen.fill
    jsr fillscreen
    // [12] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  __b7_from___b6:
    jmp __b7
    // main::@7
  __b7:
    // [13] call fillscreen 
    // [83] phi from main::@7 to fillscreen [phi:main::@7->fillscreen]
  fillscreen_from___b7:
    // [83] phi (byte*) fillscreen::screen#6 = (const nomodify byte*) COLS [phi:main::@7->fillscreen#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z fillscreen.screen
    lda #>COLS
    sta.z fillscreen.screen+1
    // [83] phi (byte) fillscreen::fill#5 = (const nomodify byte) YELLOW [phi:main::@7->fillscreen#1] -- vbuz1=vbuc1 
    lda #YELLOW
    sta.z fillscreen.fill
    jsr fillscreen
    jmp sid_rnd_init1
    // main::sid_rnd_init1
  sid_rnd_init1:
    // [14] *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (word) $ffff -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ
    lda #>$ffff
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ+1
    // [15] *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) ← (const nomodify byte) SID_CONTROL_NOISE -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL
    // [16] phi from main::sid_rnd_init1 to main::@2 [phi:main::sid_rnd_init1->main::@2]
  __b2_from_sid_rnd_init1:
    jmp __b2
    // main::@2
  __b2:
    // [17] call makecharset 
    // [51] phi from main::@2 to makecharset [phi:main::@2->makecharset]
  makecharset_from___b2:
    jsr makecharset
    // [18] phi from main::@2 main::@4 to main::@1 [phi:main::@2/main::@4->main::@1]
  __b1_from___b2:
  __b1_from___b4:
    jmp __b1
    // main::@1
  __b1:
    // [19] call fire 
    // [25] phi from main::@1 to fire [phi:main::@1->fire]
  fire_from___b1:
    // [25] phi (byte*) fire::screen#0 = (const byte*) SCREEN1 [phi:main::@1->fire#0] -- pbuz1=pbuc1 
    lda #<SCREEN1
    sta.z fire.screen
    lda #>SCREEN1
    sta.z fire.screen+1
    jsr fire
    // [20] phi from main::@1 to main::toD0181 [phi:main::@1->main::toD0181]
  toD0181_from___b1:
    jmp toD0181
    // main::toD0181
  toD0181:
    jmp __b3
    // main::@3
  __b3:
    // [21] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // [22] call fire 
    // [25] phi from main::@3 to fire [phi:main::@3->fire]
  fire_from___b3:
    // [25] phi (byte*) fire::screen#0 = (const byte*) SCREEN2 [phi:main::@3->fire#0] -- pbuz1=pbuc1 
    lda #<SCREEN2
    sta.z fire.screen
    lda #>SCREEN2
    sta.z fire.screen+1
    jsr fire
    // [23] phi from main::@3 to main::toD0182 [phi:main::@3->main::toD0182]
  toD0182_from___b3:
    jmp toD0182
    // main::toD0182
  toD0182:
    jmp __b4
    // main::@4
  __b4:
    // [24] *((const nomodify byte*) D018) ← (const byte) main::toD0182_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0182_return
    sta D018
    jmp __b1_from___b4
}
  // fire
// Animate the fire on the passed screen. Uses BUFFER to store the current values.
fire: {
    .label __4 = $1e
    .label __5 = $1f
    .label __6 = $20
    .label __13 = $1c
    .label __14 = $1d
    .label screen = 2
    .label c = $c
    .label screen_1 = $a
    .label screen_2 = 6
    .label buffer = 4
    .label sid_rnd1_return = $1b
    .label buffer_1 = 8
    // [26] (byte*) fire::screen#12 ← (byte*) fire::screen#0 -- pbuz1=pbuz2 
    lda.z screen
    sta.z screen_2
    lda.z screen+1
    sta.z screen_2+1
    // [27] phi from fire to fire::@1 [phi:fire->fire::@1]
  __b1_from_fire:
    // [27] phi (byte*) fire::screen#4 = (byte*) fire::screen#12 [phi:fire->fire::@1#0] -- register_copy 
    // [27] phi (byte*) fire::buffer#4 = (const byte*) BUFFER [phi:fire->fire::@1#1] -- pbuz1=pbuc1 
    lda #<BUFFER
    sta.z buffer
    lda #>BUFFER
    sta.z buffer+1
    jmp __b1
    // fire::@1
  __b1:
    // [28] if((byte*) fire::buffer#4!=(const byte*) BUFFER+(word)(number) $18*(number) $28) goto fire::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z buffer+1
    cmp #>BUFFER+$18*$28
    bne __b2
    lda.z buffer
    cmp #<BUFFER+$18*$28
    bne __b2
    jmp __b3
    // fire::@3
  __b3:
    // [29] (byte*) fire::screen#1 ← (byte*) fire::screen#0 + (word)(number) $18*(number) $28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z screen
    clc
    adc #<$18*$28
    sta.z screen_1
    lda.z screen+1
    adc #>$18*$28
    sta.z screen_1+1
    // [30] phi from fire::@3 to fire::@6 [phi:fire::@3->fire::@6]
  __b6_from___b3:
    // [30] phi (byte*) fire::screen#10 = (byte*) fire::screen#1 [phi:fire::@3->fire::@6#0] -- register_copy 
    // [30] phi (byte*) fire::buffer#10 = (const byte*) BUFFER+(word)(number) $18*(number) $28 [phi:fire::@3->fire::@6#1] -- pbuz1=pbuc1 
    lda #<BUFFER+$18*$28
    sta.z buffer_1
    lda #>BUFFER+$18*$28
    sta.z buffer_1+1
    jmp __b6
    // fire::@6
  __b6:
    // [31] if((byte*) fire::buffer#10!=(const byte*) BUFFER+(word)(number) $19*(number) $28) goto fire::sid_rnd1 -- pbuz1_neq_pbuc1_then_la1 
    lda.z buffer_1+1
    cmp #>BUFFER+$19*$28
    bne sid_rnd1
    lda.z buffer_1
    cmp #<BUFFER+$19*$28
    bne sid_rnd1
    jmp __breturn
    // fire::@return
  __breturn:
    // [32] return 
    rts
    // fire::sid_rnd1
  sid_rnd1:
    // [33] (byte) fire::sid_rnd1_return#0 ← *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_OSC) -- vbuz1=_deref_pbuc1 
    lda SID+OFFSET_STRUCT_MOS6581_SID_CH3_OSC
    sta.z sid_rnd1_return
    jmp __b7
    // fire::@7
  __b7:
    // [34] (byte~) fire::$13 ← (byte) fire::sid_rnd1_return#0 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z sid_rnd1_return
    lsr
    lsr
    lsr
    lsr
    sta.z __13
    // [35] (byte~) fire::$14 ← (byte) $30 + (byte~) fire::$13 -- vbuz1=vbuc1_plus_vbuz2 
    lax.z __13
    axs #-[$30]
    stx.z __14
    // [36] *((byte*) fire::buffer#10) ← (byte~) fire::$14 -- _deref_pbuz1=vbuz2 
    lda.z __14
    ldy #0
    sta (buffer_1),y
    // [37] *((byte*) fire::screen#10) ← *((byte*) fire::buffer#10) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (buffer_1),y
    ldy #0
    sta (screen_1),y
    // [38] (byte*) fire::screen#3 ← ++ (byte*) fire::screen#10 -- pbuz1=_inc_pbuz1 
    inc.z screen_1
    bne !+
    inc.z screen_1+1
  !:
    // [39] (byte*) fire::buffer#3 ← ++ (byte*) fire::buffer#10 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [30] phi from fire::@7 to fire::@6 [phi:fire::@7->fire::@6]
  __b6_from___b7:
    // [30] phi (byte*) fire::screen#10 = (byte*) fire::screen#3 [phi:fire::@7->fire::@6#0] -- register_copy 
    // [30] phi (byte*) fire::buffer#10 = (byte*) fire::buffer#3 [phi:fire::@7->fire::@6#1] -- register_copy 
    jmp __b6
    // fire::@2
  __b2:
    // [40] (byte~) fire::$4 ← *((byte*) fire::buffer#4 + (byte)(number) $28-(number) 1) + *((byte*) fire::buffer#4 + (byte)(number) $28-(number) 1) -- vbuz1=pbuz2_derefidx_vbuc1_plus_pbuz2_derefidx_vbuc1 
    ldy #$28-1
    lda (buffer),y
    clc
    adc (buffer),y
    sta.z __4
    // [41] (byte~) fire::$5 ← (byte~) fire::$4 + *((byte*) fire::buffer#4 + (byte) $28) -- vbuz1=vbuz2_plus_pbuz3_derefidx_vbuc1 
    lda.z __4
    ldy #$28
    clc
    adc (buffer),y
    sta.z __5
    // [42] (byte~) fire::$6 ← (byte~) fire::$5 + *((byte*) fire::buffer#4 + (byte) $29) -- vbuz1=vbuz2_plus_pbuz3_derefidx_vbuc1 
    lda.z __5
    ldy #$29
    clc
    adc (buffer),y
    sta.z __6
    // [43] (byte) fire::c#0 ← (byte~) fire::$6 >> (byte) 2 -- vbuz1=vbuz2_ror_2 
    lda.z __6
    lsr
    lsr
    sta.z c
    // [44] if((byte) fire::c#0<(byte) 2+(byte) 1) goto fire::@4 -- vbuz1_lt_vbuc1_then_la1 
    lda.z c
    cmp #2+1
    bcc __b4_from___b2
    jmp __b5
    // fire::@5
  __b5:
    // [45] (byte) fire::c#1 ← (byte) fire::c#0 - (byte) 3 -- vbuz1=vbuz1_minus_vbuc1 
    lax.z c
    axs #3
    stx.z c
    // [46] phi from fire::@2 fire::@5 to fire::@4 [phi:fire::@2/fire::@5->fire::@4]
  __b4_from___b2:
  __b4_from___b5:
    // [46] phi (byte) fire::c#2 = (byte) fire::c#0 [phi:fire::@2/fire::@5->fire::@4#0] -- register_copy 
    jmp __b4
    // fire::@4
  __b4:
    // [47] *((byte*) fire::buffer#4) ← (byte) fire::c#2 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (buffer),y
    // [48] *((byte*) fire::screen#4) ← *((byte*) fire::buffer#4) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (buffer),y
    ldy #0
    sta (screen_2),y
    // [49] (byte*) fire::screen#2 ← ++ (byte*) fire::screen#4 -- pbuz1=_inc_pbuz1 
    inc.z screen_2
    bne !+
    inc.z screen_2+1
  !:
    // [50] (byte*) fire::buffer#2 ← ++ (byte*) fire::buffer#4 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [27] phi from fire::@4 to fire::@1 [phi:fire::@4->fire::@1]
  __b1_from___b4:
    // [27] phi (byte*) fire::screen#4 = (byte*) fire::screen#2 [phi:fire::@4->fire::@1#0] -- register_copy 
    // [27] phi (byte*) fire::buffer#4 = (byte*) fire::buffer#2 [phi:fire::@4->fire::@1#1] -- register_copy 
    jmp __b1
}
  // makecharset
// Make a fire-friendly charset in chars $00-$3f of the passed charset
makecharset: {
    .label __11 = $29
    .label __12 = $2a
    .label __13 = $2b
    .label __15 = $23
    .label __16 = $25
    .label __17 = $21
    .label font = $d
    .label font1 = $f
    .label c = $11
    .label bc = $13
    .label i = $12
    .label ii = $14
    .label b = $15
    .label __18 = $27
    // [52] phi from makecharset to makecharset::@1 [phi:makecharset->makecharset::@1]
  __b1_from_makecharset:
    // [52] phi (byte*) makecharset::font#2 = (const byte*) CHARSET [phi:makecharset->makecharset::@1#0] -- pbuz1=pbuc1 
    lda #<CHARSET
    sta.z font
    lda #>CHARSET
    sta.z font+1
    jmp __b1
    // makecharset::@1
  __b1:
    // [53] if((byte*) makecharset::font#2!=(const byte*) CHARSET+(byte)(number) 1*(number) 8) goto makecharset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z font+1
    cmp #>CHARSET+1*8
    bne __b2
    lda.z font
    cmp #<CHARSET+1*8
    bne __b2
    // [54] phi from makecharset::@1 to makecharset::@3 [phi:makecharset::@1->makecharset::@3]
  __b3_from___b1:
    // [54] phi (byte*) makecharset::font1#2 = (const byte*) CHARSET+(word)(number) $40*(number) 8 [phi:makecharset::@1->makecharset::@3#0] -- pbuz1=pbuc1 
    lda #<CHARSET+$40*8
    sta.z font1
    lda #>CHARSET+$40*8
    sta.z font1+1
    jmp __b3
    // makecharset::@3
  __b3:
    // [55] if((byte*) makecharset::font1#2!=(const byte*) CHARSET+(word)(number) $100*(number) 8) goto makecharset::@4 -- pbuz1_neq_pbuc1_then_la1 
    lda.z font1+1
    cmp #>CHARSET+$100*8
    bne __b4
    lda.z font1
    cmp #<CHARSET+$100*8
    bne __b4
    // [56] phi from makecharset::@3 to makecharset::@5 [phi:makecharset::@3->makecharset::@5]
  __b5_from___b3:
    // [56] phi (byte) makecharset::c#2 = (byte) 0 [phi:makecharset::@3->makecharset::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b5
    // makecharset::@5
  __b5:
    // [57] if((byte) makecharset::c#2<(byte) $40) goto makecharset::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z c
    cmp #$40
    bcc __b6_from___b5
    jmp __breturn
    // makecharset::@return
  __breturn:
    // [58] return 
    rts
    // [59] phi from makecharset::@5 to makecharset::@6 [phi:makecharset::@5->makecharset::@6]
  __b6_from___b5:
    // [59] phi (byte) makecharset::bc#6 = (byte) 0 [phi:makecharset::@5->makecharset::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta.z bc
    // [59] phi (byte) makecharset::i#2 = (byte) 0 [phi:makecharset::@5->makecharset::@6#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b6
    // makecharset::@6
  __b6:
    // [60] if((byte) makecharset::i#2<(byte) 8) goto makecharset::@8 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8
    bcc __b8_from___b6
    jmp __b7
    // makecharset::@7
  __b7:
    // [61] (byte) makecharset::c#1 ← ++ (byte) makecharset::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [56] phi from makecharset::@7 to makecharset::@5 [phi:makecharset::@7->makecharset::@5]
  __b5_from___b7:
    // [56] phi (byte) makecharset::c#2 = (byte) makecharset::c#1 [phi:makecharset::@7->makecharset::@5#0] -- register_copy 
    jmp __b5
    // [62] phi from makecharset::@6 to makecharset::@8 [phi:makecharset::@6->makecharset::@8]
  __b8_from___b6:
    // [62] phi (byte) makecharset::b#2 = (byte) 0 [phi:makecharset::@6->makecharset::@8#0] -- vbuz1=vbuc1 
    lda #0
    sta.z b
    // [62] phi (byte) makecharset::bc#3 = (byte) makecharset::bc#6 [phi:makecharset::@6->makecharset::@8#1] -- register_copy 
    // [62] phi (byte) makecharset::ii#2 = (byte) 0 [phi:makecharset::@6->makecharset::@8#2] -- vbuz1=vbuc1 
    lda #0
    sta.z ii
    jmp __b8
    // makecharset::@8
  __b8:
    // [63] if((byte) makecharset::ii#2<(byte) 8) goto makecharset::@9 -- vbuz1_lt_vbuc1_then_la1 
    lda.z ii
    cmp #8
    bcc __b9
    jmp __b10
    // makecharset::@10
  __b10:
    // [64] (word~) makecharset::$17 ← (word)(byte) makecharset::c#2 -- vwuz1=_word_vbuz2 
    lda.z c
    sta.z __17
    lda #0
    sta.z __17+1
    // [65] (word~) makecharset::$15 ← (word~) makecharset::$17 << (byte) 3 -- vwuz1=vwuz2_rol_3 
    lda.z __17
    asl
    sta.z __15
    lda.z __17+1
    rol
    sta.z __15+1
    asl.z __15
    rol.z __15+1
    asl.z __15
    rol.z __15+1
    // [66] (word~) makecharset::$16 ← (word~) makecharset::$15 + (byte) makecharset::i#2 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z i
    clc
    adc.z __15
    sta.z __16
    lda #0
    adc.z __15+1
    sta.z __16+1
    // [67] (byte*~) makecharset::$18 ← (const byte*) CHARSET+(byte)(number) 1*(number) 8 + (word~) makecharset::$16 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z __16
    clc
    adc #<CHARSET+1*8
    sta.z __18
    lda.z __16+1
    adc #>CHARSET+1*8
    sta.z __18+1
    // [68] *((byte*~) makecharset::$18) ← (byte) makecharset::b#2 -- _deref_pbuz1=vbuz2 
    lda.z b
    ldy #0
    sta (__18),y
    // [69] (byte) makecharset::i#1 ← ++ (byte) makecharset::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [59] phi from makecharset::@10 to makecharset::@6 [phi:makecharset::@10->makecharset::@6]
  __b6_from___b10:
    // [59] phi (byte) makecharset::bc#6 = (byte) makecharset::bc#3 [phi:makecharset::@10->makecharset::@6#0] -- register_copy 
    // [59] phi (byte) makecharset::i#2 = (byte) makecharset::i#1 [phi:makecharset::@10->makecharset::@6#1] -- register_copy 
    jmp __b6
    // makecharset::@9
  __b9:
    // [70] (byte) makecharset::bc#1 ← (byte) makecharset::bc#3 + (byte) makecharset::c#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z bc
    clc
    adc.z c
    sta.z bc
    // [71] if((byte) makecharset::bc#1<(byte) $3f+(byte) 1) goto makecharset::@11 -- vbuz1_lt_vbuc1_then_la1 
    lda.z bc
    cmp #$3f+1
    bcc __b11_from___b9
    jmp __b12
    // makecharset::@12
  __b12:
    // [72] (byte) makecharset::bc#2 ← (byte) makecharset::bc#1 - (byte) $40 -- vbuz1=vbuz1_minus_vbuc1 
    lax.z bc
    axs #$40
    stx.z bc
    // [73] (byte~) makecharset::$11 ← (byte) makecharset::i#2 & (byte) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and.z i
    sta.z __11
    // [74] (byte~) makecharset::$12 ← (byte) makecharset::ii#2 + (byte~) makecharset::$11 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z ii
    clc
    adc.z __11
    sta.z __12
    // [75] (byte~) makecharset::$13 ← (byte~) makecharset::$12 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z __12
    sta.z __13
    // [76] (byte) makecharset::b#1 ← (byte) makecharset::b#2 + *((const to_nomodify byte*) makecharset::bittab + (byte~) makecharset::$13) -- vbuz1=vbuz1_plus_pbuc1_derefidx_vbuz2 
    lda.z b
    ldy.z __13
    clc
    adc bittab,y
    sta.z b
    // [77] phi from makecharset::@12 makecharset::@9 to makecharset::@11 [phi:makecharset::@12/makecharset::@9->makecharset::@11]
  __b11_from___b12:
  __b11_from___b9:
    // [77] phi (byte) makecharset::b#6 = (byte) makecharset::b#1 [phi:makecharset::@12/makecharset::@9->makecharset::@11#0] -- register_copy 
    // [77] phi (byte) makecharset::bc#7 = (byte) makecharset::bc#2 [phi:makecharset::@12/makecharset::@9->makecharset::@11#1] -- register_copy 
    jmp __b11
    // makecharset::@11
  __b11:
    // [78] (byte) makecharset::ii#1 ← ++ (byte) makecharset::ii#2 -- vbuz1=_inc_vbuz1 
    inc.z ii
    // [62] phi from makecharset::@11 to makecharset::@8 [phi:makecharset::@11->makecharset::@8]
  __b8_from___b11:
    // [62] phi (byte) makecharset::b#2 = (byte) makecharset::b#6 [phi:makecharset::@11->makecharset::@8#0] -- register_copy 
    // [62] phi (byte) makecharset::bc#3 = (byte) makecharset::bc#7 [phi:makecharset::@11->makecharset::@8#1] -- register_copy 
    // [62] phi (byte) makecharset::ii#2 = (byte) makecharset::ii#1 [phi:makecharset::@11->makecharset::@8#2] -- register_copy 
    jmp __b8
    // makecharset::@4
  __b4:
    // [79] *((byte*) makecharset::font1#2) ← (byte) $ff -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (font1),y
    // [80] (byte*) makecharset::font1#1 ← ++ (byte*) makecharset::font1#2 -- pbuz1=_inc_pbuz1 
    inc.z font1
    bne !+
    inc.z font1+1
  !:
    // [54] phi from makecharset::@4 to makecharset::@3 [phi:makecharset::@4->makecharset::@3]
  __b3_from___b4:
    // [54] phi (byte*) makecharset::font1#2 = (byte*) makecharset::font1#1 [phi:makecharset::@4->makecharset::@3#0] -- register_copy 
    jmp __b3
    // makecharset::@2
  __b2:
    // [81] *((byte*) makecharset::font#2) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (font),y
    // [82] (byte*) makecharset::font#1 ← ++ (byte*) makecharset::font#2 -- pbuz1=_inc_pbuz1 
    inc.z font
    bne !+
    inc.z font+1
  !:
    // [52] phi from makecharset::@2 to makecharset::@1 [phi:makecharset::@2->makecharset::@1]
  __b1_from___b2:
    // [52] phi (byte*) makecharset::font#2 = (byte*) makecharset::font#1 [phi:makecharset::@2->makecharset::@1#0] -- register_copy 
    jmp __b1
    bittab: .byte 1, 2, 4, 8, $10, $20, $40, $80
}
  // fillscreen
// Fill a screen (1000 chars) with a specific char
// fillscreen(byte* zp($17) screen, byte zp($16) fill)
fillscreen: {
    .label screen = $17
    .label i = $19
    .label fill = $16
    // [84] phi from fillscreen to fillscreen::@1 [phi:fillscreen->fillscreen::@1]
  __b1_from_fillscreen:
    // [84] phi (word) fillscreen::i#2 = (word) 0 [phi:fillscreen->fillscreen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    // [84] phi (byte*) fillscreen::screen#5 = (byte*) fillscreen::screen#6 [phi:fillscreen->fillscreen::@1#1] -- register_copy 
    jmp __b1
    // [84] phi from fillscreen::@1 to fillscreen::@1 [phi:fillscreen::@1->fillscreen::@1]
  __b1_from___b1:
    // [84] phi (word) fillscreen::i#2 = (word) fillscreen::i#1 [phi:fillscreen::@1->fillscreen::@1#0] -- register_copy 
    // [84] phi (byte*) fillscreen::screen#5 = (byte*) fillscreen::screen#4 [phi:fillscreen::@1->fillscreen::@1#1] -- register_copy 
    jmp __b1
    // fillscreen::@1
  __b1:
    // [85] *((byte*) fillscreen::screen#5) ← (byte) fillscreen::fill#5 -- _deref_pbuz1=vbuz2 
    lda.z fill
    ldy #0
    sta (screen),y
    // [86] (byte*) fillscreen::screen#4 ← ++ (byte*) fillscreen::screen#5 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [87] (word) fillscreen::i#1 ← ++ (word) fillscreen::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [88] if((word) fillscreen::i#1!=(word) $3e8) goto fillscreen::@1 -- vwuz1_neq_vwuc1_then_la1 
    lda.z i+1
    cmp #>$3e8
    bne __b1_from___b1
    lda.z i
    cmp #<$3e8
    bne __b1_from___b1
    jmp __breturn
    // fillscreen::@return
  __breturn:
    // [89] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [5] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [6] *((const nomodify byte*) BGCOL) ← (const nomodify byte) BLACK [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [14] *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (word) $ffff [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [15] *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) ← (const nomodify byte) SID_CONTROL_NOISE [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [21] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0 [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [24] *((const nomodify byte*) D018) ← (const byte) main::toD0182_return#0 [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [26] (byte*) fire::screen#12 ← (byte*) fire::screen#0 [ fire::screen#0 fire::screen#12 ] ( main:2::fire:19 [ fire::screen#0 fire::screen#12 ] { }  main:2::fire:22 [ fire::screen#0 fire::screen#12 ] { }  ) always clobbers reg byte a 
Statement [28] if((byte*) fire::buffer#4!=(const byte*) BUFFER+(word)(number) $18*(number) $28) goto fire::@2 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] ( main:2::fire:19 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  main:2::fire:22 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  ) always clobbers reg byte a 
Statement [29] (byte*) fire::screen#1 ← (byte*) fire::screen#0 + (word)(number) $18*(number) $28 [ fire::screen#1 ] ( main:2::fire:19 [ fire::screen#1 ] { }  main:2::fire:22 [ fire::screen#1 ] { }  ) always clobbers reg byte a 
Statement [31] if((byte*) fire::buffer#10!=(const byte*) BUFFER+(word)(number) $19*(number) $28) goto fire::sid_rnd1 [ fire::buffer#10 fire::screen#10 ] ( main:2::fire:19 [ fire::buffer#10 fire::screen#10 ] { }  main:2::fire:22 [ fire::buffer#10 fire::screen#10 ] { }  ) always clobbers reg byte a 
Statement [34] (byte~) fire::$13 ← (byte) fire::sid_rnd1_return#0 >> (byte) 4 [ fire::buffer#10 fire::screen#10 fire::$13 ] ( main:2::fire:19 [ fire::buffer#10 fire::screen#10 fire::$13 ] { }  main:2::fire:22 [ fire::buffer#10 fire::screen#10 fire::$13 ] { }  ) always clobbers reg byte a 
Statement [36] *((byte*) fire::buffer#10) ← (byte~) fire::$14 [ fire::buffer#10 fire::screen#10 ] ( main:2::fire:19 [ fire::buffer#10 fire::screen#10 ] { }  main:2::fire:22 [ fire::buffer#10 fire::screen#10 ] { }  ) always clobbers reg byte y 
Statement [37] *((byte*) fire::screen#10) ← *((byte*) fire::buffer#10) [ fire::buffer#10 fire::screen#10 ] ( main:2::fire:19 [ fire::buffer#10 fire::screen#10 ] { }  main:2::fire:22 [ fire::buffer#10 fire::screen#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [40] (byte~) fire::$4 ← *((byte*) fire::buffer#4 + (byte)(number) $28-(number) 1) + *((byte*) fire::buffer#4 + (byte)(number) $28-(number) 1) [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$4 ] ( main:2::fire:19 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$4 ] { }  main:2::fire:22 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [41] (byte~) fire::$5 ← (byte~) fire::$4 + *((byte*) fire::buffer#4 + (byte) $28) [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$5 ] ( main:2::fire:19 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$5 ] { }  main:2::fire:22 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$5 ] { }  ) always clobbers reg byte a reg byte y 
Statement [42] (byte~) fire::$6 ← (byte~) fire::$5 + *((byte*) fire::buffer#4 + (byte) $29) [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$6 ] ( main:2::fire:19 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$6 ] { }  main:2::fire:22 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$6 ] { }  ) always clobbers reg byte a reg byte y 
Statement [43] (byte) fire::c#0 ← (byte~) fire::$6 >> (byte) 2 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#0 ] ( main:2::fire:19 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#0 ] { }  main:2::fire:22 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#0 ] { }  ) always clobbers reg byte a 
Statement [45] (byte) fire::c#1 ← (byte) fire::c#0 - (byte) 3 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#1 ] ( main:2::fire:19 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#1 ] { }  main:2::fire:22 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#1 ] { }  ) always clobbers reg byte a 
Statement [47] *((byte*) fire::buffer#4) ← (byte) fire::c#2 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] ( main:2::fire:19 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  main:2::fire:22 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  ) always clobbers reg byte y 
Statement [48] *((byte*) fire::screen#4) ← *((byte*) fire::buffer#4) [ fire::screen#0 fire::buffer#4 fire::screen#4 ] ( main:2::fire:19 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  main:2::fire:22 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [53] if((byte*) makecharset::font#2!=(const byte*) CHARSET+(byte)(number) 1*(number) 8) goto makecharset::@2 [ makecharset::font#2 ] ( main:2::makecharset:17 [ makecharset::font#2 ] { }  ) always clobbers reg byte a 
Statement [55] if((byte*) makecharset::font1#2!=(const byte*) CHARSET+(word)(number) $100*(number) 8) goto makecharset::@4 [ makecharset::font1#2 ] ( main:2::makecharset:17 [ makecharset::font1#2 ] { }  ) always clobbers reg byte a 
Statement [64] (word~) makecharset::$17 ← (word)(byte) makecharset::c#2 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$17 ] ( main:2::makecharset:17 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$17 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:17 [ makecharset::c#2 makecharset::c#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:18 [ makecharset::i#2 makecharset::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:19 [ makecharset::bc#6 makecharset::bc#3 makecharset::bc#7 makecharset::bc#1 makecharset::bc#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:21 [ makecharset::b#2 makecharset::b#6 makecharset::b#1 ]
Statement [65] (word~) makecharset::$15 ← (word~) makecharset::$17 << (byte) 3 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$15 ] ( main:2::makecharset:17 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$15 ] { }  ) always clobbers reg byte a 
Statement [66] (word~) makecharset::$16 ← (word~) makecharset::$15 + (byte) makecharset::i#2 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$16 ] ( main:2::makecharset:17 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$16 ] { }  ) always clobbers reg byte a 
Statement [67] (byte*~) makecharset::$18 ← (const byte*) CHARSET+(byte)(number) 1*(number) 8 + (word~) makecharset::$16 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$18 ] ( main:2::makecharset:17 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$18 ] { }  ) always clobbers reg byte a 
Statement [68] *((byte*~) makecharset::$18) ← (byte) makecharset::b#2 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 ] ( main:2::makecharset:17 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:17 [ makecharset::c#2 makecharset::c#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:18 [ makecharset::i#2 makecharset::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:19 [ makecharset::bc#6 makecharset::bc#3 makecharset::bc#7 makecharset::bc#1 makecharset::bc#2 ]
Statement [70] (byte) makecharset::bc#1 ← (byte) makecharset::bc#3 + (byte) makecharset::c#2 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#1 ] ( main:2::makecharset:17 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:20 [ makecharset::ii#2 makecharset::ii#1 ]
Statement [72] (byte) makecharset::bc#2 ← (byte) makecharset::bc#1 - (byte) $40 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 ] ( main:2::makecharset:17 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 ] { }  ) always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp[1]:17 [ makecharset::c#2 makecharset::c#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:18 [ makecharset::i#2 makecharset::i#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:20 [ makecharset::ii#2 makecharset::ii#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:21 [ makecharset::b#2 makecharset::b#6 makecharset::b#1 ]
Statement [73] (byte~) makecharset::$11 ← (byte) makecharset::i#2 & (byte) 1 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 makecharset::$11 ] ( main:2::makecharset:17 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 makecharset::$11 ] { }  ) always clobbers reg byte a 
Statement [74] (byte~) makecharset::$12 ← (byte) makecharset::ii#2 + (byte~) makecharset::$11 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 makecharset::$12 ] ( main:2::makecharset:17 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 makecharset::$12 ] { }  ) always clobbers reg byte a 
Statement [76] (byte) makecharset::b#1 ← (byte) makecharset::b#2 + *((const to_nomodify byte*) makecharset::bittab + (byte~) makecharset::$13) [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::bc#2 makecharset::b#1 ] ( main:2::makecharset:17 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::bc#2 makecharset::b#1 ] { }  ) always clobbers reg byte a 
Statement [79] *((byte*) makecharset::font1#2) ← (byte) $ff [ makecharset::font1#2 ] ( main:2::makecharset:17 [ makecharset::font1#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [81] *((byte*) makecharset::font#2) ← (byte) 0 [ makecharset::font#2 ] ( main:2::makecharset:17 [ makecharset::font#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [85] *((byte*) fillscreen::screen#5) ← (byte) fillscreen::fill#5 [ fillscreen::fill#5 fillscreen::screen#5 fillscreen::i#2 ] ( main:2::fillscreen:7 [ fillscreen::fill#5 fillscreen::screen#5 fillscreen::i#2 ] { }  main:2::fillscreen:9 [ fillscreen::fill#5 fillscreen::screen#5 fillscreen::i#2 ] { }  main:2::fillscreen:11 [ fillscreen::fill#5 fillscreen::screen#5 fillscreen::i#2 ] { }  main:2::fillscreen:13 [ fillscreen::fill#5 fillscreen::screen#5 fillscreen::i#2 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:22 [ fillscreen::fill#5 ]
Statement [88] if((word) fillscreen::i#1!=(word) $3e8) goto fillscreen::@1 [ fillscreen::fill#5 fillscreen::screen#4 fillscreen::i#1 ] ( main:2::fillscreen:7 [ fillscreen::fill#5 fillscreen::screen#4 fillscreen::i#1 ] { }  main:2::fillscreen:9 [ fillscreen::fill#5 fillscreen::screen#4 fillscreen::i#1 ] { }  main:2::fillscreen:11 [ fillscreen::fill#5 fillscreen::screen#4 fillscreen::i#1 ] { }  main:2::fillscreen:13 [ fillscreen::fill#5 fillscreen::screen#4 fillscreen::i#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:22 [ fillscreen::fill#5 ]
Statement [5] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [6] *((const nomodify byte*) BGCOL) ← (const nomodify byte) BLACK [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [14] *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (word) $ffff [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [15] *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) ← (const nomodify byte) SID_CONTROL_NOISE [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [21] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0 [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [24] *((const nomodify byte*) D018) ← (const byte) main::toD0182_return#0 [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [26] (byte*) fire::screen#12 ← (byte*) fire::screen#0 [ fire::screen#0 fire::screen#12 ] ( main:2::fire:19 [ fire::screen#0 fire::screen#12 ] { }  main:2::fire:22 [ fire::screen#0 fire::screen#12 ] { }  ) always clobbers reg byte a 
Statement [28] if((byte*) fire::buffer#4!=(const byte*) BUFFER+(word)(number) $18*(number) $28) goto fire::@2 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] ( main:2::fire:19 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  main:2::fire:22 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  ) always clobbers reg byte a 
Statement [29] (byte*) fire::screen#1 ← (byte*) fire::screen#0 + (word)(number) $18*(number) $28 [ fire::screen#1 ] ( main:2::fire:19 [ fire::screen#1 ] { }  main:2::fire:22 [ fire::screen#1 ] { }  ) always clobbers reg byte a 
Statement [31] if((byte*) fire::buffer#10!=(const byte*) BUFFER+(word)(number) $19*(number) $28) goto fire::sid_rnd1 [ fire::buffer#10 fire::screen#10 ] ( main:2::fire:19 [ fire::buffer#10 fire::screen#10 ] { }  main:2::fire:22 [ fire::buffer#10 fire::screen#10 ] { }  ) always clobbers reg byte a 
Statement [34] (byte~) fire::$13 ← (byte) fire::sid_rnd1_return#0 >> (byte) 4 [ fire::buffer#10 fire::screen#10 fire::$13 ] ( main:2::fire:19 [ fire::buffer#10 fire::screen#10 fire::$13 ] { }  main:2::fire:22 [ fire::buffer#10 fire::screen#10 fire::$13 ] { }  ) always clobbers reg byte a 
Statement [36] *((byte*) fire::buffer#10) ← (byte~) fire::$14 [ fire::buffer#10 fire::screen#10 ] ( main:2::fire:19 [ fire::buffer#10 fire::screen#10 ] { }  main:2::fire:22 [ fire::buffer#10 fire::screen#10 ] { }  ) always clobbers reg byte y 
Statement [37] *((byte*) fire::screen#10) ← *((byte*) fire::buffer#10) [ fire::buffer#10 fire::screen#10 ] ( main:2::fire:19 [ fire::buffer#10 fire::screen#10 ] { }  main:2::fire:22 [ fire::buffer#10 fire::screen#10 ] { }  ) always clobbers reg byte a reg byte y 
Statement [40] (byte~) fire::$4 ← *((byte*) fire::buffer#4 + (byte)(number) $28-(number) 1) + *((byte*) fire::buffer#4 + (byte)(number) $28-(number) 1) [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$4 ] ( main:2::fire:19 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$4 ] { }  main:2::fire:22 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [41] (byte~) fire::$5 ← (byte~) fire::$4 + *((byte*) fire::buffer#4 + (byte) $28) [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$5 ] ( main:2::fire:19 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$5 ] { }  main:2::fire:22 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$5 ] { }  ) always clobbers reg byte a reg byte y 
Statement [42] (byte~) fire::$6 ← (byte~) fire::$5 + *((byte*) fire::buffer#4 + (byte) $29) [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$6 ] ( main:2::fire:19 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$6 ] { }  main:2::fire:22 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::$6 ] { }  ) always clobbers reg byte a reg byte y 
Statement [43] (byte) fire::c#0 ← (byte~) fire::$6 >> (byte) 2 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#0 ] ( main:2::fire:19 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#0 ] { }  main:2::fire:22 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#0 ] { }  ) always clobbers reg byte a 
Statement [45] (byte) fire::c#1 ← (byte) fire::c#0 - (byte) 3 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#1 ] ( main:2::fire:19 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#1 ] { }  main:2::fire:22 [ fire::screen#0 fire::buffer#4 fire::screen#4 fire::c#1 ] { }  ) always clobbers reg byte a 
Statement [47] *((byte*) fire::buffer#4) ← (byte) fire::c#2 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] ( main:2::fire:19 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  main:2::fire:22 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  ) always clobbers reg byte y 
Statement [48] *((byte*) fire::screen#4) ← *((byte*) fire::buffer#4) [ fire::screen#0 fire::buffer#4 fire::screen#4 ] ( main:2::fire:19 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  main:2::fire:22 [ fire::screen#0 fire::buffer#4 fire::screen#4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [53] if((byte*) makecharset::font#2!=(const byte*) CHARSET+(byte)(number) 1*(number) 8) goto makecharset::@2 [ makecharset::font#2 ] ( main:2::makecharset:17 [ makecharset::font#2 ] { }  ) always clobbers reg byte a 
Statement [55] if((byte*) makecharset::font1#2!=(const byte*) CHARSET+(word)(number) $100*(number) 8) goto makecharset::@4 [ makecharset::font1#2 ] ( main:2::makecharset:17 [ makecharset::font1#2 ] { }  ) always clobbers reg byte a 
Statement [57] if((byte) makecharset::c#2<(byte) $40) goto makecharset::@6 [ makecharset::c#2 ] ( main:2::makecharset:17 [ makecharset::c#2 ] { }  ) always clobbers reg byte a 
Statement [60] if((byte) makecharset::i#2<(byte) 8) goto makecharset::@8 [ makecharset::c#2 makecharset::i#2 makecharset::bc#6 ] ( main:2::makecharset:17 [ makecharset::c#2 makecharset::i#2 makecharset::bc#6 ] { }  ) always clobbers reg byte a 
Statement [64] (word~) makecharset::$17 ← (word)(byte) makecharset::c#2 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$17 ] ( main:2::makecharset:17 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$17 ] { }  ) always clobbers reg byte a 
Statement [65] (word~) makecharset::$15 ← (word~) makecharset::$17 << (byte) 3 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$15 ] ( main:2::makecharset:17 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$15 ] { }  ) always clobbers reg byte a 
Statement [66] (word~) makecharset::$16 ← (word~) makecharset::$15 + (byte) makecharset::i#2 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$16 ] ( main:2::makecharset:17 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$16 ] { }  ) always clobbers reg byte a 
Statement [67] (byte*~) makecharset::$18 ← (const byte*) CHARSET+(byte)(number) 1*(number) 8 + (word~) makecharset::$16 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$18 ] ( main:2::makecharset:17 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 makecharset::b#2 makecharset::$18 ] { }  ) always clobbers reg byte a 
Statement [68] *((byte*~) makecharset::$18) ← (byte) makecharset::b#2 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 ] ( main:2::makecharset:17 [ makecharset::c#2 makecharset::i#2 makecharset::bc#3 ] { }  ) always clobbers reg byte a reg byte y 
Statement [70] (byte) makecharset::bc#1 ← (byte) makecharset::bc#3 + (byte) makecharset::c#2 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#1 ] ( main:2::makecharset:17 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#1 ] { }  ) always clobbers reg byte a 
Statement [72] (byte) makecharset::bc#2 ← (byte) makecharset::bc#1 - (byte) $40 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 ] ( main:2::makecharset:17 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 ] { }  ) always clobbers reg byte a reg byte x 
Statement [73] (byte~) makecharset::$11 ← (byte) makecharset::i#2 & (byte) 1 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 makecharset::$11 ] ( main:2::makecharset:17 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 makecharset::$11 ] { }  ) always clobbers reg byte a 
Statement [74] (byte~) makecharset::$12 ← (byte) makecharset::ii#2 + (byte~) makecharset::$11 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 makecharset::$12 ] ( main:2::makecharset:17 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::b#2 makecharset::bc#2 makecharset::$12 ] { }  ) always clobbers reg byte a 
Statement [76] (byte) makecharset::b#1 ← (byte) makecharset::b#2 + *((const to_nomodify byte*) makecharset::bittab + (byte~) makecharset::$13) [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::bc#2 makecharset::b#1 ] ( main:2::makecharset:17 [ makecharset::c#2 makecharset::i#2 makecharset::ii#2 makecharset::bc#2 makecharset::b#1 ] { }  ) always clobbers reg byte a 
Statement [79] *((byte*) makecharset::font1#2) ← (byte) $ff [ makecharset::font1#2 ] ( main:2::makecharset:17 [ makecharset::font1#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [81] *((byte*) makecharset::font#2) ← (byte) 0 [ makecharset::font#2 ] ( main:2::makecharset:17 [ makecharset::font#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [85] *((byte*) fillscreen::screen#5) ← (byte) fillscreen::fill#5 [ fillscreen::fill#5 fillscreen::screen#5 fillscreen::i#2 ] ( main:2::fillscreen:7 [ fillscreen::fill#5 fillscreen::screen#5 fillscreen::i#2 ] { }  main:2::fillscreen:9 [ fillscreen::fill#5 fillscreen::screen#5 fillscreen::i#2 ] { }  main:2::fillscreen:11 [ fillscreen::fill#5 fillscreen::screen#5 fillscreen::i#2 ] { }  main:2::fillscreen:13 [ fillscreen::fill#5 fillscreen::screen#5 fillscreen::i#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [88] if((word) fillscreen::i#1!=(word) $3e8) goto fillscreen::@1 [ fillscreen::fill#5 fillscreen::screen#4 fillscreen::i#1 ] ( main:2::fillscreen:7 [ fillscreen::fill#5 fillscreen::screen#4 fillscreen::i#1 ] { }  main:2::fillscreen:9 [ fillscreen::fill#5 fillscreen::screen#4 fillscreen::i#1 ] { }  main:2::fillscreen:11 [ fillscreen::fill#5 fillscreen::screen#4 fillscreen::i#1 ] { }  main:2::fillscreen:13 [ fillscreen::fill#5 fillscreen::screen#4 fillscreen::i#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ fire::screen#0 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ fire::buffer#4 fire::buffer#2 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ fire::screen#4 fire::screen#12 fire::screen#2 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ fire::buffer#10 fire::buffer#3 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ fire::screen#10 fire::screen#1 fire::screen#3 ] : zp[2]:10 , 
Potential registers zp[1]:12 [ fire::c#2 fire::c#0 fire::c#1 ] : zp[1]:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:13 [ makecharset::font#2 makecharset::font#1 ] : zp[2]:13 , 
Potential registers zp[2]:15 [ makecharset::font1#2 makecharset::font1#1 ] : zp[2]:15 , 
Potential registers zp[1]:17 [ makecharset::c#2 makecharset::c#1 ] : zp[1]:17 , 
Potential registers zp[1]:18 [ makecharset::i#2 makecharset::i#1 ] : zp[1]:18 , 
Potential registers zp[1]:19 [ makecharset::bc#6 makecharset::bc#3 makecharset::bc#7 makecharset::bc#1 makecharset::bc#2 ] : zp[1]:19 , reg byte x , 
Potential registers zp[1]:20 [ makecharset::ii#2 makecharset::ii#1 ] : zp[1]:20 , reg byte y , 
Potential registers zp[1]:21 [ makecharset::b#2 makecharset::b#6 makecharset::b#1 ] : zp[1]:21 , reg byte y , 
Potential registers zp[1]:22 [ fillscreen::fill#5 ] : zp[1]:22 , reg byte x , 
Potential registers zp[2]:23 [ fillscreen::screen#5 fillscreen::screen#6 fillscreen::screen#4 ] : zp[2]:23 , 
Potential registers zp[2]:25 [ fillscreen::i#2 fillscreen::i#1 ] : zp[2]:25 , 
Potential registers zp[1]:27 [ fire::sid_rnd1_return#0 ] : zp[1]:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:28 [ fire::$13 ] : zp[1]:28 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:29 [ fire::$14 ] : zp[1]:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:30 [ fire::$4 ] : zp[1]:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:31 [ fire::$5 ] : zp[1]:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:32 [ fire::$6 ] : zp[1]:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:33 [ makecharset::$17 ] : zp[2]:33 , 
Potential registers zp[2]:35 [ makecharset::$15 ] : zp[2]:35 , 
Potential registers zp[2]:37 [ makecharset::$16 ] : zp[2]:37 , 
Potential registers zp[2]:39 [ makecharset::$18 ] : zp[2]:39 , 
Potential registers zp[1]:41 [ makecharset::$11 ] : zp[1]:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:42 [ makecharset::$12 ] : zp[1]:42 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:43 [ makecharset::$13 ] : zp[1]:43 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [fire] 700,007: zp[1]:12 [ fire::c#2 fire::c#0 fire::c#1 ] 275,002.75: zp[2]:4 [ fire::buffer#4 fire::buffer#2 ] 262,502.62: zp[2]:8 [ fire::buffer#10 fire::buffer#3 ] 200,002: zp[1]:27 [ fire::sid_rnd1_return#0 ] 200,002: zp[1]:28 [ fire::$13 ] 200,002: zp[1]:29 [ fire::$14 ] 200,002: zp[1]:30 [ fire::$4 ] 200,002: zp[1]:31 [ fire::$5 ] 200,002: zp[1]:32 [ fire::$6 ] 145,003.57: zp[2]:10 [ fire::screen#10 fire::screen#1 fire::screen#3 ] 129,367: zp[2]:6 [ fire::screen#4 fire::screen#12 fire::screen#2 ] 133.47: zp[2]:2 [ fire::screen#0 ] 
Uplift Scope [makecharset] 427,505.4: zp[1]:19 [ makecharset::bc#6 makecharset::bc#3 makecharset::bc#7 makecharset::bc#1 makecharset::bc#2 ] 375,837.17: zp[1]:21 [ makecharset::b#2 makecharset::b#6 makecharset::b#1 ] 240,002.4: zp[1]:20 [ makecharset::ii#2 makecharset::ii#1 ] 200,002: zp[1]:41 [ makecharset::$11 ] 200,002: zp[1]:42 [ makecharset::$12 ] 200,002: zp[1]:43 [ makecharset::$13 ] 27,780.06: zp[1]:18 [ makecharset::i#2 makecharset::i#1 ] 20,002: zp[2]:33 [ makecharset::$17 ] 20,002: zp[2]:35 [ makecharset::$15 ] 20,002: zp[2]:37 [ makecharset::$16 ] 20,002: zp[2]:39 [ makecharset::$18 ] 6,906.95: zp[1]:17 [ makecharset::c#2 makecharset::c#1 ] 3,336.67: zp[2]:13 [ makecharset::font#2 makecharset::font#1 ] 3,336.67: zp[2]:15 [ makecharset::font1#2 makecharset::font1#1 ] 
Uplift Scope [fillscreen] 2,320.33: zp[2]:23 [ fillscreen::screen#5 fillscreen::screen#6 fillscreen::screen#4 ] 2,168.83: zp[2]:25 [ fillscreen::i#2 fillscreen::i#1 ] 166.83: zp[1]:22 [ fillscreen::fill#5 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [fire] best 147164 combination reg byte a [ fire::c#2 fire::c#0 fire::c#1 ] zp[2]:4 [ fire::buffer#4 fire::buffer#2 ] zp[2]:8 [ fire::buffer#10 fire::buffer#3 ] reg byte a [ fire::sid_rnd1_return#0 ] reg byte a [ fire::$13 ] reg byte a [ fire::$14 ] zp[1]:30 [ fire::$4 ] zp[1]:31 [ fire::$5 ] zp[1]:32 [ fire::$6 ] zp[2]:10 [ fire::screen#10 fire::screen#1 fire::screen#3 ] zp[2]:6 [ fire::screen#4 fire::screen#12 fire::screen#2 ] zp[2]:2 [ fire::screen#0 ] 
Limited combination testing to 100 combinations of 16384 possible.
Uplifting [makecharset] best 120764 combination reg byte x [ makecharset::bc#6 makecharset::bc#3 makecharset::bc#7 makecharset::bc#1 makecharset::bc#2 ] reg byte y [ makecharset::b#2 makecharset::b#6 makecharset::b#1 ] zp[1]:20 [ makecharset::ii#2 makecharset::ii#1 ] reg byte a [ makecharset::$11 ] reg byte a [ makecharset::$12 ] zp[1]:43 [ makecharset::$13 ] zp[1]:18 [ makecharset::i#2 makecharset::i#1 ] zp[2]:33 [ makecharset::$17 ] zp[2]:35 [ makecharset::$15 ] zp[2]:37 [ makecharset::$16 ] zp[2]:39 [ makecharset::$18 ] zp[1]:17 [ makecharset::c#2 makecharset::c#1 ] zp[2]:13 [ makecharset::font#2 makecharset::font#1 ] zp[2]:15 [ makecharset::font1#2 makecharset::font1#1 ] 
Limited combination testing to 100 combinations of 512 possible.
Uplifting [fillscreen] best 120742 combination zp[2]:23 [ fillscreen::screen#5 fillscreen::screen#6 fillscreen::screen#4 ] zp[2]:25 [ fillscreen::i#2 fillscreen::i#1 ] reg byte x [ fillscreen::fill#5 ] 
Uplifting [MOS6526_CIA] best 120742 combination 
Uplifting [MOS6581_SID] best 120742 combination 
Uplifting [main] best 120742 combination 
Uplifting [] best 120742 combination 
Attempting to uplift remaining variables inzp[1]:20 [ makecharset::ii#2 makecharset::ii#1 ]
Uplifting [makecharset] best 120742 combination zp[1]:20 [ makecharset::ii#2 makecharset::ii#1 ] 
Attempting to uplift remaining variables inzp[1]:30 [ fire::$4 ]
Uplifting [fire] best 120142 combination reg byte a [ fire::$4 ] 
Attempting to uplift remaining variables inzp[1]:31 [ fire::$5 ]
Uplifting [fire] best 119542 combination reg byte a [ fire::$5 ] 
Attempting to uplift remaining variables inzp[1]:32 [ fire::$6 ]
Uplifting [fire] best 118942 combination reg byte a [ fire::$6 ] 
Attempting to uplift remaining variables inzp[1]:43 [ makecharset::$13 ]
Uplifting [makecharset] best 118942 combination zp[1]:43 [ makecharset::$13 ] 
Attempting to uplift remaining variables inzp[1]:18 [ makecharset::i#2 makecharset::i#1 ]
Uplifting [makecharset] best 118942 combination zp[1]:18 [ makecharset::i#2 makecharset::i#1 ] 
Attempting to uplift remaining variables inzp[1]:17 [ makecharset::c#2 makecharset::c#1 ]
Uplifting [makecharset] best 118942 combination zp[1]:17 [ makecharset::c#2 makecharset::c#1 ] 
Coalescing zero page register [ zp[2]:2 [ fire::screen#0 ] ] with [ zp[2]:10 [ fire::screen#10 fire::screen#1 fire::screen#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:33 [ makecharset::$17 ] ] with [ zp[2]:35 [ makecharset::$15 ] ] - score: 1
Coalescing zero page register [ zp[2]:37 [ makecharset::$16 ] ] with [ zp[2]:39 [ makecharset::$18 ] ] - score: 1
Coalescing zero page register [ zp[2]:33 [ makecharset::$17 makecharset::$15 ] ] with [ zp[2]:37 [ makecharset::$16 makecharset::$18 ] ] - score: 1
Coalescing zero page register [ zp[2]:13 [ makecharset::font#2 makecharset::font#1 ] ] with [ zp[2]:2 [ fire::screen#0 fire::screen#10 fire::screen#1 fire::screen#3 ] ]
Coalescing zero page register [ zp[2]:15 [ makecharset::font1#2 makecharset::font1#1 ] ] with [ zp[2]:4 [ fire::buffer#4 fire::buffer#2 ] ]
Coalescing zero page register [ zp[2]:23 [ fillscreen::screen#5 fillscreen::screen#6 fillscreen::screen#4 ] ] with [ zp[2]:6 [ fire::screen#4 fire::screen#12 fire::screen#2 ] ]
Coalescing zero page register [ zp[2]:25 [ fillscreen::i#2 fillscreen::i#1 ] ] with [ zp[2]:8 [ fire::buffer#10 fire::buffer#3 ] ]
Coalescing zero page register [ zp[2]:33 [ makecharset::$17 makecharset::$15 makecharset::$16 makecharset::$18 ] ] with [ zp[2]:23 [ fillscreen::screen#5 fillscreen::screen#6 fillscreen::screen#4 fire::screen#4 fire::screen#12 fire::screen#2 ] ]
Allocated (was zp[2]:13) zp[2]:2 [ makecharset::font#2 makecharset::font#1 fire::screen#0 fire::screen#10 fire::screen#1 fire::screen#3 ]
Allocated (was zp[2]:15) zp[2]:4 [ makecharset::font1#2 makecharset::font1#1 fire::buffer#4 fire::buffer#2 ]
Allocated (was zp[1]:17) zp[1]:6 [ makecharset::c#2 makecharset::c#1 ]
Allocated (was zp[1]:18) zp[1]:7 [ makecharset::i#2 makecharset::i#1 ]
Allocated (was zp[1]:20) zp[1]:8 [ makecharset::ii#2 makecharset::ii#1 ]
Allocated (was zp[2]:25) zp[2]:9 [ fillscreen::i#2 fillscreen::i#1 fire::buffer#10 fire::buffer#3 ]
Allocated (was zp[2]:33) zp[2]:11 [ makecharset::$17 makecharset::$15 makecharset::$16 makecharset::$18 fillscreen::screen#5 fillscreen::screen#6 fillscreen::screen#4 fire::screen#4 fire::screen#12 fire::screen#2 ]
Allocated (was zp[1]:43) zp[1]:13 [ makecharset::$13 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// A KickC version of the fire routine from the CC65 samples
// (w)2002 by groepaz/hitmen
// Cleanup and porting to CC65 by Ullrich von Bassewitz and Greg King .
// Ported to KickC by Jesper Gravgaard.
// Original source https://github.com/cc65/cc65/blob/master/samples/fire.c
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // SID Channel Control Register Noise Waveform
  .const SID_CONTROL_NOISE = $80
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label D018 = $d018
  // Color Ram
  .label COLS = $d800
  // The SID MOD 6581/8580
  .label SID = $d400
  // The colors of the C64
  .const BLACK = 0
  .const YELLOW = 7
  .const OFFSET_STRUCT_MOS6581_SID_CH3_FREQ = $e
  .const OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL = $12
  .const OFFSET_STRUCT_MOS6581_SID_CH3_OSC = $1b
  .label SCREEN1 = $3800
  .label SCREEN2 = $3c00
  .label BUFFER = $4000
  .label CHARSET = $3000
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .const toD0181_return = (>(SCREEN1&$3fff)*4)|(>CHARSET)/4&$f
    .const toD0182_return = (>(SCREEN2&$3fff)*4)|(>CHARSET)/4&$f
    // asm { sei  }
    sei
    // [5] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
    // [6] *((const nomodify byte*) BGCOL) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BGCOL
    // [7] call fillscreen 
    // [83] phi from main to fillscreen [phi:main->fillscreen]
  fillscreen_from_main:
    // [83] phi (byte*) fillscreen::screen#6 = (const byte*) BUFFER [phi:main->fillscreen#0] -- pbuz1=pbuc1 
    lda #<BUFFER
    sta.z fillscreen.screen
    lda #>BUFFER
    sta.z fillscreen.screen+1
    // [83] phi (byte) fillscreen::fill#5 = (byte) 0 [phi:main->fillscreen#1] -- vbuxx=vbuc1 
    ldx #0
    jsr fillscreen
    // [8] phi from main to main::@5 [phi:main->main::@5]
  __b5_from_main:
    jmp __b5
    // main::@5
  __b5:
    // [9] call fillscreen 
    // [83] phi from main::@5 to fillscreen [phi:main::@5->fillscreen]
  fillscreen_from___b5:
    // [83] phi (byte*) fillscreen::screen#6 = (const byte*) SCREEN1 [phi:main::@5->fillscreen#0] -- pbuz1=pbuc1 
    lda #<SCREEN1
    sta.z fillscreen.screen
    lda #>SCREEN1
    sta.z fillscreen.screen+1
    // [83] phi (byte) fillscreen::fill#5 = (byte) 0 [phi:main::@5->fillscreen#1] -- vbuxx=vbuc1 
    ldx #0
    jsr fillscreen
    // [10] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [11] call fillscreen 
    // [83] phi from main::@6 to fillscreen [phi:main::@6->fillscreen]
  fillscreen_from___b6:
    // [83] phi (byte*) fillscreen::screen#6 = (const byte*) SCREEN2 [phi:main::@6->fillscreen#0] -- pbuz1=pbuc1 
    lda #<SCREEN2
    sta.z fillscreen.screen
    lda #>SCREEN2
    sta.z fillscreen.screen+1
    // [83] phi (byte) fillscreen::fill#5 = (byte) 0 [phi:main::@6->fillscreen#1] -- vbuxx=vbuc1 
    ldx #0
    jsr fillscreen
    // [12] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  __b7_from___b6:
    jmp __b7
    // main::@7
  __b7:
    // [13] call fillscreen 
    // [83] phi from main::@7 to fillscreen [phi:main::@7->fillscreen]
  fillscreen_from___b7:
    // [83] phi (byte*) fillscreen::screen#6 = (const nomodify byte*) COLS [phi:main::@7->fillscreen#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z fillscreen.screen
    lda #>COLS
    sta.z fillscreen.screen+1
    // [83] phi (byte) fillscreen::fill#5 = (const nomodify byte) YELLOW [phi:main::@7->fillscreen#1] -- vbuxx=vbuc1 
    ldx #YELLOW
    jsr fillscreen
    jmp sid_rnd_init1
    // main::sid_rnd_init1
  sid_rnd_init1:
    // [14] *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (word) $ffff -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ
    lda #>$ffff
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ+1
    // [15] *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) ← (const nomodify byte) SID_CONTROL_NOISE -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL
    // [16] phi from main::sid_rnd_init1 to main::@2 [phi:main::sid_rnd_init1->main::@2]
  __b2_from_sid_rnd_init1:
    jmp __b2
    // main::@2
  __b2:
    // [17] call makecharset 
    // [51] phi from main::@2 to makecharset [phi:main::@2->makecharset]
  makecharset_from___b2:
    jsr makecharset
    // [18] phi from main::@2 main::@4 to main::@1 [phi:main::@2/main::@4->main::@1]
  __b1_from___b2:
  __b1_from___b4:
    jmp __b1
    // main::@1
  __b1:
    // [19] call fire 
    // [25] phi from main::@1 to fire [phi:main::@1->fire]
  fire_from___b1:
    // [25] phi (byte*) fire::screen#0 = (const byte*) SCREEN1 [phi:main::@1->fire#0] -- pbuz1=pbuc1 
    lda #<SCREEN1
    sta.z fire.screen
    lda #>SCREEN1
    sta.z fire.screen+1
    jsr fire
    // [20] phi from main::@1 to main::toD0181 [phi:main::@1->main::toD0181]
  toD0181_from___b1:
    jmp toD0181
    // main::toD0181
  toD0181:
    jmp __b3
    // main::@3
  __b3:
    // [21] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // [22] call fire 
    // [25] phi from main::@3 to fire [phi:main::@3->fire]
  fire_from___b3:
    // [25] phi (byte*) fire::screen#0 = (const byte*) SCREEN2 [phi:main::@3->fire#0] -- pbuz1=pbuc1 
    lda #<SCREEN2
    sta.z fire.screen
    lda #>SCREEN2
    sta.z fire.screen+1
    jsr fire
    // [23] phi from main::@3 to main::toD0182 [phi:main::@3->main::toD0182]
  toD0182_from___b3:
    jmp toD0182
    // main::toD0182
  toD0182:
    jmp __b4
    // main::@4
  __b4:
    // [24] *((const nomodify byte*) D018) ← (const byte) main::toD0182_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0182_return
    sta D018
    jmp __b1_from___b4
}
  // fire
// Animate the fire on the passed screen. Uses BUFFER to store the current values.
fire: {
    .label screen = 2
    .label screen_1 = $b
    .label buffer = 4
    .label buffer_1 = 9
    // [26] (byte*) fire::screen#12 ← (byte*) fire::screen#0 -- pbuz1=pbuz2 
    lda.z screen
    sta.z screen_1
    lda.z screen+1
    sta.z screen_1+1
    // [27] phi from fire to fire::@1 [phi:fire->fire::@1]
  __b1_from_fire:
    // [27] phi (byte*) fire::screen#4 = (byte*) fire::screen#12 [phi:fire->fire::@1#0] -- register_copy 
    // [27] phi (byte*) fire::buffer#4 = (const byte*) BUFFER [phi:fire->fire::@1#1] -- pbuz1=pbuc1 
    lda #<BUFFER
    sta.z buffer
    lda #>BUFFER
    sta.z buffer+1
    jmp __b1
    // fire::@1
  __b1:
    // [28] if((byte*) fire::buffer#4!=(const byte*) BUFFER+(word)(number) $18*(number) $28) goto fire::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z buffer+1
    cmp #>BUFFER+$18*$28
    bne __b2
    lda.z buffer
    cmp #<BUFFER+$18*$28
    bne __b2
    jmp __b3
    // fire::@3
  __b3:
    // [29] (byte*) fire::screen#1 ← (byte*) fire::screen#0 + (word)(number) $18*(number) $28 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z screen
    adc #<$18*$28
    sta.z screen
    lda.z screen+1
    adc #>$18*$28
    sta.z screen+1
    // [30] phi from fire::@3 to fire::@6 [phi:fire::@3->fire::@6]
  __b6_from___b3:
    // [30] phi (byte*) fire::screen#10 = (byte*) fire::screen#1 [phi:fire::@3->fire::@6#0] -- register_copy 
    // [30] phi (byte*) fire::buffer#10 = (const byte*) BUFFER+(word)(number) $18*(number) $28 [phi:fire::@3->fire::@6#1] -- pbuz1=pbuc1 
    lda #<BUFFER+$18*$28
    sta.z buffer_1
    lda #>BUFFER+$18*$28
    sta.z buffer_1+1
    jmp __b6
    // fire::@6
  __b6:
    // [31] if((byte*) fire::buffer#10!=(const byte*) BUFFER+(word)(number) $19*(number) $28) goto fire::sid_rnd1 -- pbuz1_neq_pbuc1_then_la1 
    lda.z buffer_1+1
    cmp #>BUFFER+$19*$28
    bne sid_rnd1
    lda.z buffer_1
    cmp #<BUFFER+$19*$28
    bne sid_rnd1
    jmp __breturn
    // fire::@return
  __breturn:
    // [32] return 
    rts
    // fire::sid_rnd1
  sid_rnd1:
    // [33] (byte) fire::sid_rnd1_return#0 ← *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_OSC) -- vbuaa=_deref_pbuc1 
    lda SID+OFFSET_STRUCT_MOS6581_SID_CH3_OSC
    jmp __b7
    // fire::@7
  __b7:
    // [34] (byte~) fire::$13 ← (byte) fire::sid_rnd1_return#0 >> (byte) 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // [35] (byte~) fire::$14 ← (byte) $30 + (byte~) fire::$13 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #$30
    // [36] *((byte*) fire::buffer#10) ← (byte~) fire::$14 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (buffer_1),y
    // [37] *((byte*) fire::screen#10) ← *((byte*) fire::buffer#10) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (buffer_1),y
    ldy #0
    sta (screen),y
    // [38] (byte*) fire::screen#3 ← ++ (byte*) fire::screen#10 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [39] (byte*) fire::buffer#3 ← ++ (byte*) fire::buffer#10 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [30] phi from fire::@7 to fire::@6 [phi:fire::@7->fire::@6]
  __b6_from___b7:
    // [30] phi (byte*) fire::screen#10 = (byte*) fire::screen#3 [phi:fire::@7->fire::@6#0] -- register_copy 
    // [30] phi (byte*) fire::buffer#10 = (byte*) fire::buffer#3 [phi:fire::@7->fire::@6#1] -- register_copy 
    jmp __b6
    // fire::@2
  __b2:
    // [40] (byte~) fire::$4 ← *((byte*) fire::buffer#4 + (byte)(number) $28-(number) 1) + *((byte*) fire::buffer#4 + (byte)(number) $28-(number) 1) -- vbuaa=pbuz1_derefidx_vbuc1_plus_pbuz1_derefidx_vbuc1 
    ldy #$28-1
    lda (buffer),y
    clc
    adc (buffer),y
    // [41] (byte~) fire::$5 ← (byte~) fire::$4 + *((byte*) fire::buffer#4 + (byte) $28) -- vbuaa=vbuaa_plus_pbuz1_derefidx_vbuc1 
    ldy #$28
    clc
    adc (buffer),y
    // [42] (byte~) fire::$6 ← (byte~) fire::$5 + *((byte*) fire::buffer#4 + (byte) $29) -- vbuaa=vbuaa_plus_pbuz1_derefidx_vbuc1 
    ldy #$29
    clc
    adc (buffer),y
    // [43] (byte) fire::c#0 ← (byte~) fire::$6 >> (byte) 2 -- vbuaa=vbuaa_ror_2 
    lsr
    lsr
    // [44] if((byte) fire::c#0<(byte) 2+(byte) 1) goto fire::@4 -- vbuaa_lt_vbuc1_then_la1 
    cmp #2+1
    bcc __b4_from___b2
    jmp __b5
    // fire::@5
  __b5:
    // [45] (byte) fire::c#1 ← (byte) fire::c#0 - (byte) 3 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #3
    // [46] phi from fire::@2 fire::@5 to fire::@4 [phi:fire::@2/fire::@5->fire::@4]
  __b4_from___b2:
  __b4_from___b5:
    // [46] phi (byte) fire::c#2 = (byte) fire::c#0 [phi:fire::@2/fire::@5->fire::@4#0] -- register_copy 
    jmp __b4
    // fire::@4
  __b4:
    // [47] *((byte*) fire::buffer#4) ← (byte) fire::c#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (buffer),y
    // [48] *((byte*) fire::screen#4) ← *((byte*) fire::buffer#4) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (buffer),y
    ldy #0
    sta (screen_1),y
    // [49] (byte*) fire::screen#2 ← ++ (byte*) fire::screen#4 -- pbuz1=_inc_pbuz1 
    inc.z screen_1
    bne !+
    inc.z screen_1+1
  !:
    // [50] (byte*) fire::buffer#2 ← ++ (byte*) fire::buffer#4 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [27] phi from fire::@4 to fire::@1 [phi:fire::@4->fire::@1]
  __b1_from___b4:
    // [27] phi (byte*) fire::screen#4 = (byte*) fire::screen#2 [phi:fire::@4->fire::@1#0] -- register_copy 
    // [27] phi (byte*) fire::buffer#4 = (byte*) fire::buffer#2 [phi:fire::@4->fire::@1#1] -- register_copy 
    jmp __b1
}
  // makecharset
// Make a fire-friendly charset in chars $00-$3f of the passed charset
makecharset: {
    .label __13 = $d
    .label __15 = $b
    .label __16 = $b
    .label __17 = $b
    .label font = 2
    .label font1 = 4
    .label c = 6
    .label i = 7
    .label ii = 8
    .label __18 = $b
    // [52] phi from makecharset to makecharset::@1 [phi:makecharset->makecharset::@1]
  __b1_from_makecharset:
    // [52] phi (byte*) makecharset::font#2 = (const byte*) CHARSET [phi:makecharset->makecharset::@1#0] -- pbuz1=pbuc1 
    lda #<CHARSET
    sta.z font
    lda #>CHARSET
    sta.z font+1
    jmp __b1
    // makecharset::@1
  __b1:
    // [53] if((byte*) makecharset::font#2!=(const byte*) CHARSET+(byte)(number) 1*(number) 8) goto makecharset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z font+1
    cmp #>CHARSET+1*8
    bne __b2
    lda.z font
    cmp #<CHARSET+1*8
    bne __b2
    // [54] phi from makecharset::@1 to makecharset::@3 [phi:makecharset::@1->makecharset::@3]
  __b3_from___b1:
    // [54] phi (byte*) makecharset::font1#2 = (const byte*) CHARSET+(word)(number) $40*(number) 8 [phi:makecharset::@1->makecharset::@3#0] -- pbuz1=pbuc1 
    lda #<CHARSET+$40*8
    sta.z font1
    lda #>CHARSET+$40*8
    sta.z font1+1
    jmp __b3
    // makecharset::@3
  __b3:
    // [55] if((byte*) makecharset::font1#2!=(const byte*) CHARSET+(word)(number) $100*(number) 8) goto makecharset::@4 -- pbuz1_neq_pbuc1_then_la1 
    lda.z font1+1
    cmp #>CHARSET+$100*8
    bne __b4
    lda.z font1
    cmp #<CHARSET+$100*8
    bne __b4
    // [56] phi from makecharset::@3 to makecharset::@5 [phi:makecharset::@3->makecharset::@5]
  __b5_from___b3:
    // [56] phi (byte) makecharset::c#2 = (byte) 0 [phi:makecharset::@3->makecharset::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b5
    // makecharset::@5
  __b5:
    // [57] if((byte) makecharset::c#2<(byte) $40) goto makecharset::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z c
    cmp #$40
    bcc __b6_from___b5
    jmp __breturn
    // makecharset::@return
  __breturn:
    // [58] return 
    rts
    // [59] phi from makecharset::@5 to makecharset::@6 [phi:makecharset::@5->makecharset::@6]
  __b6_from___b5:
    // [59] phi (byte) makecharset::bc#6 = (byte) 0 [phi:makecharset::@5->makecharset::@6#0] -- vbuxx=vbuc1 
    ldx #0
    // [59] phi (byte) makecharset::i#2 = (byte) 0 [phi:makecharset::@5->makecharset::@6#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b6
    // makecharset::@6
  __b6:
    // [60] if((byte) makecharset::i#2<(byte) 8) goto makecharset::@8 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8
    bcc __b8_from___b6
    jmp __b7
    // makecharset::@7
  __b7:
    // [61] (byte) makecharset::c#1 ← ++ (byte) makecharset::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [56] phi from makecharset::@7 to makecharset::@5 [phi:makecharset::@7->makecharset::@5]
  __b5_from___b7:
    // [56] phi (byte) makecharset::c#2 = (byte) makecharset::c#1 [phi:makecharset::@7->makecharset::@5#0] -- register_copy 
    jmp __b5
    // [62] phi from makecharset::@6 to makecharset::@8 [phi:makecharset::@6->makecharset::@8]
  __b8_from___b6:
    // [62] phi (byte) makecharset::b#2 = (byte) 0 [phi:makecharset::@6->makecharset::@8#0] -- vbuyy=vbuc1 
    ldy #0
    // [62] phi (byte) makecharset::bc#3 = (byte) makecharset::bc#6 [phi:makecharset::@6->makecharset::@8#1] -- register_copy 
    // [62] phi (byte) makecharset::ii#2 = (byte) 0 [phi:makecharset::@6->makecharset::@8#2] -- vbuz1=vbuc1 
    lda #0
    sta.z ii
    jmp __b8
    // makecharset::@8
  __b8:
    // [63] if((byte) makecharset::ii#2<(byte) 8) goto makecharset::@9 -- vbuz1_lt_vbuc1_then_la1 
    lda.z ii
    cmp #8
    bcc __b9
    jmp __b10
    // makecharset::@10
  __b10:
    // [64] (word~) makecharset::$17 ← (word)(byte) makecharset::c#2 -- vwuz1=_word_vbuz2 
    lda.z c
    sta.z __17
    lda #0
    sta.z __17+1
    // [65] (word~) makecharset::$15 ← (word~) makecharset::$17 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl.z __15
    rol.z __15+1
    asl.z __15
    rol.z __15+1
    asl.z __15
    rol.z __15+1
    // [66] (word~) makecharset::$16 ← (word~) makecharset::$15 + (byte) makecharset::i#2 -- vwuz1=vwuz1_plus_vbuz2 
    lda.z i
    clc
    adc.z __16
    sta.z __16
    bcc !+
    inc.z __16+1
  !:
    // [67] (byte*~) makecharset::$18 ← (const byte*) CHARSET+(byte)(number) 1*(number) 8 + (word~) makecharset::$16 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __18
    adc #<CHARSET+1*8
    sta.z __18
    lda.z __18+1
    adc #>CHARSET+1*8
    sta.z __18+1
    // [68] *((byte*~) makecharset::$18) ← (byte) makecharset::b#2 -- _deref_pbuz1=vbuyy 
    tya
    ldy #0
    sta (__18),y
    // [69] (byte) makecharset::i#1 ← ++ (byte) makecharset::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [59] phi from makecharset::@10 to makecharset::@6 [phi:makecharset::@10->makecharset::@6]
  __b6_from___b10:
    // [59] phi (byte) makecharset::bc#6 = (byte) makecharset::bc#3 [phi:makecharset::@10->makecharset::@6#0] -- register_copy 
    // [59] phi (byte) makecharset::i#2 = (byte) makecharset::i#1 [phi:makecharset::@10->makecharset::@6#1] -- register_copy 
    jmp __b6
    // makecharset::@9
  __b9:
    // [70] (byte) makecharset::bc#1 ← (byte) makecharset::bc#3 + (byte) makecharset::c#2 -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z c
    tax
    // [71] if((byte) makecharset::bc#1<(byte) $3f+(byte) 1) goto makecharset::@11 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$3f+1
    bcc __b11_from___b9
    jmp __b12
    // makecharset::@12
  __b12:
    // [72] (byte) makecharset::bc#2 ← (byte) makecharset::bc#1 - (byte) $40 -- vbuxx=vbuxx_minus_vbuc1 
    txa
    axs #$40
    // [73] (byte~) makecharset::$11 ← (byte) makecharset::i#2 & (byte) 1 -- vbuaa=vbuz1_band_vbuc1 
    lda #1
    and.z i
    // [74] (byte~) makecharset::$12 ← (byte) makecharset::ii#2 + (byte~) makecharset::$11 -- vbuaa=vbuz1_plus_vbuaa 
    clc
    adc.z ii
    // [75] (byte~) makecharset::$13 ← (byte~) makecharset::$12 & (byte) 7 -- vbuz1=vbuaa_band_vbuc1 
    and #7
    sta.z __13
    // [76] (byte) makecharset::b#1 ← (byte) makecharset::b#2 + *((const to_nomodify byte*) makecharset::bittab + (byte~) makecharset::$13) -- vbuyy=vbuyy_plus_pbuc1_derefidx_vbuz1 
    tya
    ldy.z __13
    clc
    adc bittab,y
    tay
    // [77] phi from makecharset::@12 makecharset::@9 to makecharset::@11 [phi:makecharset::@12/makecharset::@9->makecharset::@11]
  __b11_from___b12:
  __b11_from___b9:
    // [77] phi (byte) makecharset::b#6 = (byte) makecharset::b#1 [phi:makecharset::@12/makecharset::@9->makecharset::@11#0] -- register_copy 
    // [77] phi (byte) makecharset::bc#7 = (byte) makecharset::bc#2 [phi:makecharset::@12/makecharset::@9->makecharset::@11#1] -- register_copy 
    jmp __b11
    // makecharset::@11
  __b11:
    // [78] (byte) makecharset::ii#1 ← ++ (byte) makecharset::ii#2 -- vbuz1=_inc_vbuz1 
    inc.z ii
    // [62] phi from makecharset::@11 to makecharset::@8 [phi:makecharset::@11->makecharset::@8]
  __b8_from___b11:
    // [62] phi (byte) makecharset::b#2 = (byte) makecharset::b#6 [phi:makecharset::@11->makecharset::@8#0] -- register_copy 
    // [62] phi (byte) makecharset::bc#3 = (byte) makecharset::bc#7 [phi:makecharset::@11->makecharset::@8#1] -- register_copy 
    // [62] phi (byte) makecharset::ii#2 = (byte) makecharset::ii#1 [phi:makecharset::@11->makecharset::@8#2] -- register_copy 
    jmp __b8
    // makecharset::@4
  __b4:
    // [79] *((byte*) makecharset::font1#2) ← (byte) $ff -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (font1),y
    // [80] (byte*) makecharset::font1#1 ← ++ (byte*) makecharset::font1#2 -- pbuz1=_inc_pbuz1 
    inc.z font1
    bne !+
    inc.z font1+1
  !:
    // [54] phi from makecharset::@4 to makecharset::@3 [phi:makecharset::@4->makecharset::@3]
  __b3_from___b4:
    // [54] phi (byte*) makecharset::font1#2 = (byte*) makecharset::font1#1 [phi:makecharset::@4->makecharset::@3#0] -- register_copy 
    jmp __b3
    // makecharset::@2
  __b2:
    // [81] *((byte*) makecharset::font#2) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (font),y
    // [82] (byte*) makecharset::font#1 ← ++ (byte*) makecharset::font#2 -- pbuz1=_inc_pbuz1 
    inc.z font
    bne !+
    inc.z font+1
  !:
    // [52] phi from makecharset::@2 to makecharset::@1 [phi:makecharset::@2->makecharset::@1]
  __b1_from___b2:
    // [52] phi (byte*) makecharset::font#2 = (byte*) makecharset::font#1 [phi:makecharset::@2->makecharset::@1#0] -- register_copy 
    jmp __b1
    bittab: .byte 1, 2, 4, 8, $10, $20, $40, $80
}
  // fillscreen
// Fill a screen (1000 chars) with a specific char
// fillscreen(byte* zp($b) screen, byte register(X) fill)
fillscreen: {
    .label screen = $b
    .label i = 9
    // [84] phi from fillscreen to fillscreen::@1 [phi:fillscreen->fillscreen::@1]
  __b1_from_fillscreen:
    // [84] phi (word) fillscreen::i#2 = (word) 0 [phi:fillscreen->fillscreen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    // [84] phi (byte*) fillscreen::screen#5 = (byte*) fillscreen::screen#6 [phi:fillscreen->fillscreen::@1#1] -- register_copy 
    jmp __b1
    // [84] phi from fillscreen::@1 to fillscreen::@1 [phi:fillscreen::@1->fillscreen::@1]
  __b1_from___b1:
    // [84] phi (word) fillscreen::i#2 = (word) fillscreen::i#1 [phi:fillscreen::@1->fillscreen::@1#0] -- register_copy 
    // [84] phi (byte*) fillscreen::screen#5 = (byte*) fillscreen::screen#4 [phi:fillscreen::@1->fillscreen::@1#1] -- register_copy 
    jmp __b1
    // fillscreen::@1
  __b1:
    // [85] *((byte*) fillscreen::screen#5) ← (byte) fillscreen::fill#5 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (screen),y
    // [86] (byte*) fillscreen::screen#4 ← ++ (byte*) fillscreen::screen#5 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [87] (word) fillscreen::i#1 ← ++ (word) fillscreen::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [88] if((word) fillscreen::i#1!=(word) $3e8) goto fillscreen::@1 -- vwuz1_neq_vwuc1_then_la1 
    lda.z i+1
    cmp #>$3e8
    bne __b1_from___b1
    lda.z i
    cmp #<$3e8
    bne __b1_from___b1
    jmp __breturn
    // fillscreen::@return
  __breturn:
    // [89] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp sid_rnd_init1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp toD0181
Removing instruction jmp __b3
Removing instruction jmp toD0182
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b10
Removing instruction jmp __b12
Removing instruction jmp __b11
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #BLACK
Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction ldy #0
Replacing instruction lda #0 with TXA
Replacing instruction lda #0 with TYA
Replacing instruction ldy #0 with TAY
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b4 with __b1
Replacing label __b4_from___b2 with __b4
Replacing label __b11_from___b9 with __b11
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Removing instruction __b5_from_main:
Removing instruction fillscreen_from___b5:
Removing instruction __b6_from___b5:
Removing instruction fillscreen_from___b6:
Removing instruction __b7_from___b6:
Removing instruction fillscreen_from___b7:
Removing instruction __b2_from_sid_rnd_init1:
Removing instruction makecharset_from___b2:
Removing instruction __b1_from___b2:
Removing instruction __b1_from___b4:
Removing instruction fire_from___b1:
Removing instruction toD0181_from___b1:
Removing instruction toD0181:
Removing instruction toD0182_from___b3:
Removing instruction toD0182:
Removing instruction __b4_from___b2:
Removing instruction __b4_from___b5:
Removing instruction __b11_from___b12:
Removing instruction __b11_from___b9:
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction fillscreen_from_main:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction sid_rnd_init1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction fire_from___b3:
Removing instruction __b4:
Removing instruction __b1_from_fire:
Removing instruction __b3:
Removing instruction __b6_from___b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b6_from___b7:
Removing instruction __b5:
Removing instruction __b1_from___b4:
Removing instruction __b1_from_makecharset:
Removing instruction __b3_from___b1:
Removing instruction __b5_from___b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b5_from___b7:
Removing instruction __b10:
Removing instruction __b6_from___b10:
Removing instruction __b12:
Removing instruction __b8_from___b11:
Removing instruction __b3_from___b4:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_fillscreen:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Relabelling long label __b6_from___b5 to __b7
Relabelling long label __b8_from___b6 to __b10
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination
Fixing long branch [194] bne __b2 to beq
Fixing long branch [199] bne __b2 to beq
Fixing long branch [209] bne __b4 to beq
Fixing long branch [214] bne __b4 to beq

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const nomodify byte*) BGCOL = (byte*) 53281
(const nomodify byte) BLACK = (byte) 0
(const nomodify byte*) BORDERCOL = (byte*) 53280
(const byte*) BUFFER = (byte*) 16384
(const byte*) CHARSET = (byte*) 12288
(const nomodify byte*) COLS = (byte*) 55296
(const nomodify byte*) D018 = (byte*) 53272
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL = (byte) $12
(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ = (byte) $e
(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_OSC = (byte) $1b
(const byte*) SCREEN1 = (byte*) 14336
(const byte*) SCREEN2 = (byte*) 15360
(const nomodify struct MOS6581_SID*) SID = (struct MOS6581_SID*) 54272
(const nomodify byte) SID_CONTROL_NOISE = (byte) $80
(const nomodify byte) YELLOW = (byte) 7
(void()) fillscreen((byte*) fillscreen::screen , (byte) fillscreen::fill)
(label) fillscreen::@1
(label) fillscreen::@return
(byte) fillscreen::fill
(byte) fillscreen::fill#5 reg byte x 166.83333333333334
(word) fillscreen::i
(word) fillscreen::i#1 i zp[2]:9 1501.5
(word) fillscreen::i#2 i zp[2]:9 667.3333333333334
(byte*) fillscreen::screen
(byte*) fillscreen::screen#4 screen zp[2]:11 667.3333333333334
(byte*) fillscreen::screen#5 screen zp[2]:11 1552.0
(byte*) fillscreen::screen#6 screen zp[2]:11 101.0
(void()) fire((byte*) fire::screenbase)
(byte~) fire::$13 reg byte a 200002.0
(byte~) fire::$14 reg byte a 200002.0
(byte~) fire::$4 reg byte a 200002.0
(byte~) fire::$5 reg byte a 200002.0
(byte~) fire::$6 reg byte a 200002.0
(label) fire::@1
(label) fire::@2
(label) fire::@3
(label) fire::@4
(label) fire::@5
(label) fire::@6
(label) fire::@7
(label) fire::@return
(byte*) fire::buffer
(byte*) fire::buffer#10 buffer_1 zp[2]:9 62500.625
(byte*) fire::buffer#2 buffer zp[2]:4 200002.0
(byte*) fire::buffer#3 buffer_1 zp[2]:9 200002.0
(byte*) fire::buffer#4 buffer zp[2]:4 75000.75
(byte) fire::c
(byte) fire::c#0 reg byte a 200002.0
(byte) fire::c#1 reg byte a 200002.0
(byte) fire::c#2 reg byte a 300003.0
(byte*) fire::screen
(byte*) fire::screen#0 screen zp[2]:2 133.46666666666667
(byte*) fire::screen#1 screen zp[2]:2 2002.0
(byte*) fire::screen#10 screen zp[2]:2 43000.57142857143
(byte*) fire::screen#12 screen_1 zp[2]:11 2002.0
(byte*) fire::screen#2 screen_1 zp[2]:11 100001.0
(byte*) fire::screen#3 screen zp[2]:2 100001.0
(byte*) fire::screen#4 screen_1 zp[2]:11 27364.0
(byte*) fire::screenbase
(label) fire::sid_rnd1
(byte) fire::sid_rnd1_return
(byte) fire::sid_rnd1_return#0 reg byte a 200002.0
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::sid_rnd_init1
(label) main::toD0181
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(const byte) main::toD0181_return#0 toD0181_return = >(word)(const byte*) SCREEN1&(word) $3fff*(byte) 4|>(word)(const byte*) CHARSET/(byte) 4&(byte) $f
(byte*) main::toD0181_screen
(label) main::toD0182
(byte*) main::toD0182_gfx
(byte) main::toD0182_return
(const byte) main::toD0182_return#0 toD0182_return = >(word)(const byte*) SCREEN2&(word) $3fff*(byte) 4|>(word)(const byte*) CHARSET/(byte) 4&(byte) $f
(byte*) main::toD0182_screen
(void()) makecharset((byte*) makecharset::charset)
(byte~) makecharset::$11 reg byte a 200002.0
(byte~) makecharset::$12 reg byte a 200002.0
(byte~) makecharset::$13 zp[1]:13 200002.0
(word~) makecharset::$15 zp[2]:11 20002.0
(word~) makecharset::$16 zp[2]:11 20002.0
(word~) makecharset::$17 zp[2]:11 20002.0
(byte*~) makecharset::$18 zp[2]:11 20002.0
(label) makecharset::@1
(label) makecharset::@10
(label) makecharset::@11
(label) makecharset::@12
(label) makecharset::@2
(label) makecharset::@3
(label) makecharset::@4
(label) makecharset::@5
(label) makecharset::@6
(label) makecharset::@7
(label) makecharset::@8
(label) makecharset::@9
(label) makecharset::@return
(byte) makecharset::b
(byte) makecharset::b#1 reg byte y 200002.0
(byte) makecharset::b#2 reg byte y 25833.666666666664
(byte) makecharset::b#6 reg byte y 150001.5
(byte) makecharset::bc
(byte) makecharset::bc#1 reg byte x 200002.0
(byte) makecharset::bc#2 reg byte x 40000.4
(byte) makecharset::bc#3 reg byte x 27500.5
(byte) makecharset::bc#6 reg byte x 10001.0
(byte) makecharset::bc#7 reg byte x 150001.5
(const to_nomodify byte*) makecharset::bittab[(number) 8]  = { (byte) 1, (byte) 2, (byte) 4, (byte) 8, (byte) $10, (byte) $20, (byte) $40, (byte) $80 }
(byte) makecharset::c
(byte) makecharset::c#1 c zp[1]:6 2002.0
(byte) makecharset::c#2 c zp[1]:6 4904.952380952381
(byte*) makecharset::charset
(byte*) makecharset::font
(byte*) makecharset::font#1 font zp[2]:2 2002.0
(byte*) makecharset::font#2 font zp[2]:2 1334.6666666666667
(byte*) makecharset::font1
(byte*) makecharset::font1#1 font1 zp[2]:4 2002.0
(byte*) makecharset::font1#2 font1 zp[2]:4 1334.6666666666667
(byte) makecharset::i
(byte) makecharset::i#1 i zp[1]:7 20002.0
(byte) makecharset::i#2 i zp[1]:7 7778.055555555556
(byte) makecharset::ii
(byte) makecharset::ii#1 ii zp[1]:8 200002.0
(byte) makecharset::ii#2 ii zp[1]:8 40000.4

reg byte a [ fire::c#2 fire::c#0 fire::c#1 ]
zp[2]:2 [ makecharset::font#2 makecharset::font#1 fire::screen#0 fire::screen#10 fire::screen#1 fire::screen#3 ]
zp[2]:4 [ makecharset::font1#2 makecharset::font1#1 fire::buffer#4 fire::buffer#2 ]
zp[1]:6 [ makecharset::c#2 makecharset::c#1 ]
zp[1]:7 [ makecharset::i#2 makecharset::i#1 ]
reg byte x [ makecharset::bc#6 makecharset::bc#3 makecharset::bc#7 makecharset::bc#1 makecharset::bc#2 ]
zp[1]:8 [ makecharset::ii#2 makecharset::ii#1 ]
reg byte y [ makecharset::b#2 makecharset::b#6 makecharset::b#1 ]
reg byte x [ fillscreen::fill#5 ]
zp[2]:9 [ fillscreen::i#2 fillscreen::i#1 fire::buffer#10 fire::buffer#3 ]
reg byte a [ fire::sid_rnd1_return#0 ]
reg byte a [ fire::$13 ]
reg byte a [ fire::$14 ]
reg byte a [ fire::$4 ]
reg byte a [ fire::$5 ]
reg byte a [ fire::$6 ]
zp[2]:11 [ makecharset::$17 makecharset::$15 makecharset::$16 makecharset::$18 fillscreen::screen#5 fillscreen::screen#6 fillscreen::screen#4 fire::screen#4 fire::screen#12 fire::screen#2 ]
reg byte a [ makecharset::$11 ]
reg byte a [ makecharset::$12 ]
zp[1]:13 [ makecharset::$13 ]


FINAL ASSEMBLER
Score: 102503

  // File Comments
// A KickC version of the fire routine from the CC65 samples
// (w)2002 by groepaz/hitmen
// Cleanup and porting to CC65 by Ullrich von Bassewitz and Greg King .
// Ported to KickC by Jesper Gravgaard.
// Original source https://github.com/cc65/cc65/blob/master/samples/fire.c
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // SID Channel Control Register Noise Waveform
  .const SID_CONTROL_NOISE = $80
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label D018 = $d018
  // Color Ram
  .label COLS = $d800
  // The SID MOD 6581/8580
  .label SID = $d400
  // The colors of the C64
  .const BLACK = 0
  .const YELLOW = 7
  .const OFFSET_STRUCT_MOS6581_SID_CH3_FREQ = $e
  .const OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL = $12
  .const OFFSET_STRUCT_MOS6581_SID_CH3_OSC = $1b
  .label SCREEN1 = $3800
  .label SCREEN2 = $3c00
  .label BUFFER = $4000
  .label CHARSET = $3000
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .const toD0181_return = (>(SCREEN1&$3fff)*4)|(>CHARSET)/4&$f
    .const toD0182_return = (>(SCREEN2&$3fff)*4)|(>CHARSET)/4&$f
    // asm
    // asm { sei  }
    sei
    // *BORDERCOL = BLACK
    // [5] *((const nomodify byte*) BORDERCOL) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
    // *BGCOL = BLACK
    // [6] *((const nomodify byte*) BGCOL) ← (const nomodify byte) BLACK -- _deref_pbuc1=vbuc2 
    sta BGCOL
    // fillscreen(BUFFER, 00)
    // [7] call fillscreen 
    // [83] phi from main to fillscreen [phi:main->fillscreen]
    // [83] phi (byte*) fillscreen::screen#6 = (const byte*) BUFFER [phi:main->fillscreen#0] -- pbuz1=pbuc1 
    lda #<BUFFER
    sta.z fillscreen.screen
    lda #>BUFFER
    sta.z fillscreen.screen+1
    // [83] phi (byte) fillscreen::fill#5 = (byte) 0 [phi:main->fillscreen#1] -- vbuxx=vbuc1 
    ldx #0
    jsr fillscreen
    // [8] phi from main to main::@5 [phi:main->main::@5]
    // main::@5
    // fillscreen(SCREEN1, 00)
    // [9] call fillscreen 
    // [83] phi from main::@5 to fillscreen [phi:main::@5->fillscreen]
    // [83] phi (byte*) fillscreen::screen#6 = (const byte*) SCREEN1 [phi:main::@5->fillscreen#0] -- pbuz1=pbuc1 
    lda #<SCREEN1
    sta.z fillscreen.screen
    lda #>SCREEN1
    sta.z fillscreen.screen+1
    // [83] phi (byte) fillscreen::fill#5 = (byte) 0 [phi:main::@5->fillscreen#1] -- vbuxx=vbuc1 
    ldx #0
    jsr fillscreen
    // [10] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
    // main::@6
    // fillscreen(SCREEN2, 00)
    // [11] call fillscreen 
    // [83] phi from main::@6 to fillscreen [phi:main::@6->fillscreen]
    // [83] phi (byte*) fillscreen::screen#6 = (const byte*) SCREEN2 [phi:main::@6->fillscreen#0] -- pbuz1=pbuc1 
    lda #<SCREEN2
    sta.z fillscreen.screen
    lda #>SCREEN2
    sta.z fillscreen.screen+1
    // [83] phi (byte) fillscreen::fill#5 = (byte) 0 [phi:main::@6->fillscreen#1] -- vbuxx=vbuc1 
    ldx #0
    jsr fillscreen
    // [12] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
    // main::@7
    // fillscreen(COLS, YELLOW)
    // [13] call fillscreen 
    // [83] phi from main::@7 to fillscreen [phi:main::@7->fillscreen]
    // [83] phi (byte*) fillscreen::screen#6 = (const nomodify byte*) COLS [phi:main::@7->fillscreen#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z fillscreen.screen
    lda #>COLS
    sta.z fillscreen.screen+1
    // [83] phi (byte) fillscreen::fill#5 = (const nomodify byte) YELLOW [phi:main::@7->fillscreen#1] -- vbuxx=vbuc1 
    ldx #YELLOW
    jsr fillscreen
    // main::sid_rnd_init1
    // SID->CH3_FREQ = 0xffff
    // [14] *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (word) $ffff -- _deref_pwuc1=vwuc2 
    lda #<$ffff
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ
    lda #>$ffff
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_FREQ+1
    // SID->CH3_CONTROL = SID_CONTROL_NOISE
    // [15] *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) ← (const nomodify byte) SID_CONTROL_NOISE -- _deref_pbuc1=vbuc2 
    lda #SID_CONTROL_NOISE
    sta SID+OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL
    // [16] phi from main::sid_rnd_init1 to main::@2 [phi:main::sid_rnd_init1->main::@2]
    // main::@2
    // makecharset(CHARSET)
    // [17] call makecharset 
    // [51] phi from main::@2 to makecharset [phi:main::@2->makecharset]
    jsr makecharset
    // [18] phi from main::@2 main::@4 to main::@1 [phi:main::@2/main::@4->main::@1]
    // main::@1
  __b1:
    // fire(SCREEN1)
    // [19] call fire 
    // [25] phi from main::@1 to fire [phi:main::@1->fire]
    // [25] phi (byte*) fire::screen#0 = (const byte*) SCREEN1 [phi:main::@1->fire#0] -- pbuz1=pbuc1 
    lda #<SCREEN1
    sta.z fire.screen
    lda #>SCREEN1
    sta.z fire.screen+1
    jsr fire
    // [20] phi from main::@1 to main::toD0181 [phi:main::@1->main::toD0181]
    // main::toD0181
    // main::@3
    // *D018 = toD018(SCREEN1, CHARSET)
    // [21] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // fire(SCREEN2)
    // [22] call fire 
    // [25] phi from main::@3 to fire [phi:main::@3->fire]
    // [25] phi (byte*) fire::screen#0 = (const byte*) SCREEN2 [phi:main::@3->fire#0] -- pbuz1=pbuc1 
    lda #<SCREEN2
    sta.z fire.screen
    lda #>SCREEN2
    sta.z fire.screen+1
    jsr fire
    // [23] phi from main::@3 to main::toD0182 [phi:main::@3->main::toD0182]
    // main::toD0182
    // main::@4
    // *D018 = toD018(SCREEN2, CHARSET)
    // [24] *((const nomodify byte*) D018) ← (const byte) main::toD0182_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0182_return
    sta D018
    jmp __b1
}
  // fire
// Animate the fire on the passed screen. Uses BUFFER to store the current values.
fire: {
    .label screen = 2
    .label screen_1 = $b
    .label buffer = 4
    .label buffer_1 = 9
    // [26] (byte*) fire::screen#12 ← (byte*) fire::screen#0 -- pbuz1=pbuz2 
    lda.z screen
    sta.z screen_1
    lda.z screen+1
    sta.z screen_1+1
    // [27] phi from fire to fire::@1 [phi:fire->fire::@1]
    // [27] phi (byte*) fire::screen#4 = (byte*) fire::screen#12 [phi:fire->fire::@1#0] -- register_copy 
    // [27] phi (byte*) fire::buffer#4 = (const byte*) BUFFER [phi:fire->fire::@1#1] -- pbuz1=pbuc1 
    lda #<BUFFER
    sta.z buffer
    lda #>BUFFER
    sta.z buffer+1
    // fire::@1
  __b1:
    // while (buffer != (BUFFER + (24 * 40)))
    // [28] if((byte*) fire::buffer#4!=(const byte*) BUFFER+(word)(number) $18*(number) $28) goto fire::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z buffer+1
    cmp #>BUFFER+$18*$28
    bne __b2
    lda.z buffer
    cmp #<BUFFER+$18*$28
    bne __b2
    // fire::@3
    // screen = (screenbase + (24 * 40))
    // [29] (byte*) fire::screen#1 ← (byte*) fire::screen#0 + (word)(number) $18*(number) $28 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z screen
    adc #<$18*$28
    sta.z screen
    lda.z screen+1
    adc #>$18*$28
    sta.z screen+1
    // [30] phi from fire::@3 to fire::@6 [phi:fire::@3->fire::@6]
    // [30] phi (byte*) fire::screen#10 = (byte*) fire::screen#1 [phi:fire::@3->fire::@6#0] -- register_copy 
    // [30] phi (byte*) fire::buffer#10 = (const byte*) BUFFER+(word)(number) $18*(number) $28 [phi:fire::@3->fire::@6#1] -- pbuz1=pbuc1 
    lda #<BUFFER+$18*$28
    sta.z buffer_1
    lda #>BUFFER+$18*$28
    sta.z buffer_1+1
    // fire::@6
  __b6:
    // for(; buffer != (BUFFER+(25*40)); ++screen, ++buffer)
    // [31] if((byte*) fire::buffer#10!=(const byte*) BUFFER+(word)(number) $19*(number) $28) goto fire::sid_rnd1 -- pbuz1_neq_pbuc1_then_la1 
    lda.z buffer_1+1
    cmp #>BUFFER+$19*$28
    bne sid_rnd1
    lda.z buffer_1
    cmp #<BUFFER+$19*$28
    bne sid_rnd1
    // fire::@return
    // }
    // [32] return 
    rts
    // fire::sid_rnd1
  sid_rnd1:
    // return SID->CH3_OSC;
    // [33] (byte) fire::sid_rnd1_return#0 ← *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_OSC) -- vbuaa=_deref_pbuc1 
    lda SID+OFFSET_STRUCT_MOS6581_SID_CH3_OSC
    // fire::@7
    // (sid_rnd())/$10
    // [34] (byte~) fire::$13 ← (byte) fire::sid_rnd1_return#0 >> (byte) 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // 0x30 + (sid_rnd())/$10
    // [35] (byte~) fire::$14 ← (byte) $30 + (byte~) fire::$13 -- vbuaa=vbuc1_plus_vbuaa 
    clc
    adc #$30
    // *buffer = 0x30 + (sid_rnd())/$10
    // [36] *((byte*) fire::buffer#10) ← (byte~) fire::$14 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (buffer_1),y
    // *screen = *buffer = 0x30 + (sid_rnd())/$10
    // [37] *((byte*) fire::screen#10) ← *((byte*) fire::buffer#10) -- _deref_pbuz1=_deref_pbuz2 
    lda (buffer_1),y
    sta (screen),y
    // for(; buffer != (BUFFER+(25*40)); ++screen, ++buffer)
    // [38] (byte*) fire::screen#3 ← ++ (byte*) fire::screen#10 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [39] (byte*) fire::buffer#3 ← ++ (byte*) fire::buffer#10 -- pbuz1=_inc_pbuz1 
    inc.z buffer_1
    bne !+
    inc.z buffer_1+1
  !:
    // [30] phi from fire::@7 to fire::@6 [phi:fire::@7->fire::@6]
    // [30] phi (byte*) fire::screen#10 = (byte*) fire::screen#3 [phi:fire::@7->fire::@6#0] -- register_copy 
    // [30] phi (byte*) fire::buffer#10 = (byte*) fire::buffer#3 [phi:fire::@7->fire::@6#1] -- register_copy 
    jmp __b6
    // fire::@2
  __b2:
    // buffer[40-1] + buffer[40-1]
    // [40] (byte~) fire::$4 ← *((byte*) fire::buffer#4 + (byte)(number) $28-(number) 1) + *((byte*) fire::buffer#4 + (byte)(number) $28-(number) 1) -- vbuaa=pbuz1_derefidx_vbuc1_plus_pbuz1_derefidx_vbuc1 
    ldy #$28-1
    lda (buffer),y
    clc
    adc (buffer),y
    // buffer[40-1] + buffer[40-1] + buffer[40]
    // [41] (byte~) fire::$5 ← (byte~) fire::$4 + *((byte*) fire::buffer#4 + (byte) $28) -- vbuaa=vbuaa_plus_pbuz1_derefidx_vbuc1 
    ldy #$28
    clc
    adc (buffer),y
    // buffer[40-1] + buffer[40-1] + buffer[40] + buffer[41]
    // [42] (byte~) fire::$6 ← (byte~) fire::$5 + *((byte*) fire::buffer#4 + (byte) $29) -- vbuaa=vbuaa_plus_pbuz1_derefidx_vbuc1 
    ldy #$29
    clc
    adc (buffer),y
    // c = ( buffer[40-1] + buffer[40-1] + buffer[40] + buffer[41] )/4
    // [43] (byte) fire::c#0 ← (byte~) fire::$6 >> (byte) 2 -- vbuaa=vbuaa_ror_2 
    lsr
    lsr
    // if (c > 2)
    // [44] if((byte) fire::c#0<(byte) 2+(byte) 1) goto fire::@4 -- vbuaa_lt_vbuc1_then_la1 
    cmp #2+1
    bcc __b4
    // fire::@5
    // c -= 3
    // [45] (byte) fire::c#1 ← (byte) fire::c#0 - (byte) 3 -- vbuaa=vbuaa_minus_vbuc1 
    sec
    sbc #3
    // [46] phi from fire::@2 fire::@5 to fire::@4 [phi:fire::@2/fire::@5->fire::@4]
    // [46] phi (byte) fire::c#2 = (byte) fire::c#0 [phi:fire::@2/fire::@5->fire::@4#0] -- register_copy 
    // fire::@4
  __b4:
    // *buffer = c
    // [47] *((byte*) fire::buffer#4) ← (byte) fire::c#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (buffer),y
    // *screen = *buffer = c
    // [48] *((byte*) fire::screen#4) ← *((byte*) fire::buffer#4) -- _deref_pbuz1=_deref_pbuz2 
    lda (buffer),y
    sta (screen_1),y
    // ++screen;
    // [49] (byte*) fire::screen#2 ← ++ (byte*) fire::screen#4 -- pbuz1=_inc_pbuz1 
    inc.z screen_1
    bne !+
    inc.z screen_1+1
  !:
    // ++buffer;
    // [50] (byte*) fire::buffer#2 ← ++ (byte*) fire::buffer#4 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [27] phi from fire::@4 to fire::@1 [phi:fire::@4->fire::@1]
    // [27] phi (byte*) fire::screen#4 = (byte*) fire::screen#2 [phi:fire::@4->fire::@1#0] -- register_copy 
    // [27] phi (byte*) fire::buffer#4 = (byte*) fire::buffer#2 [phi:fire::@4->fire::@1#1] -- register_copy 
    jmp __b1
}
  // makecharset
// Make a fire-friendly charset in chars $00-$3f of the passed charset
makecharset: {
    .label __13 = $d
    .label __15 = $b
    .label __16 = $b
    .label __17 = $b
    .label font = 2
    .label font1 = 4
    .label c = 6
    .label i = 7
    .label ii = 8
    .label __18 = $b
    // [52] phi from makecharset to makecharset::@1 [phi:makecharset->makecharset::@1]
    // [52] phi (byte*) makecharset::font#2 = (const byte*) CHARSET [phi:makecharset->makecharset::@1#0] -- pbuz1=pbuc1 
    lda #<CHARSET
    sta.z font
    lda #>CHARSET
    sta.z font+1
    // makecharset::@1
  __b1:
    // for (unsigned char *font = charset; font != (charset+(1*8)); ++font)
    // [53] if((byte*) makecharset::font#2!=(const byte*) CHARSET+(byte)(number) 1*(number) 8) goto makecharset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z font+1
    cmp #>CHARSET+1*8
    beq !__b2+
    jmp __b2
  !__b2:
    lda.z font
    cmp #<CHARSET+1*8
    beq !__b2+
    jmp __b2
  !__b2:
    // [54] phi from makecharset::@1 to makecharset::@3 [phi:makecharset::@1->makecharset::@3]
    // [54] phi (byte*) makecharset::font1#2 = (const byte*) CHARSET+(word)(number) $40*(number) 8 [phi:makecharset::@1->makecharset::@3#0] -- pbuz1=pbuc1 
    lda #<CHARSET+$40*8
    sta.z font1
    lda #>CHARSET+$40*8
    sta.z font1+1
    // makecharset::@3
  __b3:
    // for (unsigned char *font = (charset+(64*8)); font != (charset+(256*8)); ++font)
    // [55] if((byte*) makecharset::font1#2!=(const byte*) CHARSET+(word)(number) $100*(number) 8) goto makecharset::@4 -- pbuz1_neq_pbuc1_then_la1 
    lda.z font1+1
    cmp #>CHARSET+$100*8
    beq !__b4+
    jmp __b4
  !__b4:
    lda.z font1
    cmp #<CHARSET+$100*8
    beq !__b4+
    jmp __b4
  !__b4:
    // [56] phi from makecharset::@3 to makecharset::@5 [phi:makecharset::@3->makecharset::@5]
    // [56] phi (byte) makecharset::c#2 = (byte) 0 [phi:makecharset::@3->makecharset::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // makecharset::@5
  __b5:
    // for (unsigned char c = 0; c < 0x40; ++c)
    // [57] if((byte) makecharset::c#2<(byte) $40) goto makecharset::@6 -- vbuz1_lt_vbuc1_then_la1 
    lda.z c
    cmp #$40
    bcc __b7
    // makecharset::@return
    // }
    // [58] return 
    rts
    // [59] phi from makecharset::@5 to makecharset::@6 [phi:makecharset::@5->makecharset::@6]
  __b7:
    // [59] phi (byte) makecharset::bc#6 = (byte) 0 [phi:makecharset::@5->makecharset::@6#0] -- vbuxx=vbuc1 
    ldx #0
    // [59] phi (byte) makecharset::i#2 = (byte) 0 [phi:makecharset::@5->makecharset::@6#1] -- vbuz1=vbuc1 
    txa
    sta.z i
    // makecharset::@6
  __b6:
    // for (unsigned char bc = 0, i = 0; i < 8; i++)
    // [60] if((byte) makecharset::i#2<(byte) 8) goto makecharset::@8 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8
    bcc __b10
    // makecharset::@7
    // for (unsigned char c = 0; c < 0x40; ++c)
    // [61] (byte) makecharset::c#1 ← ++ (byte) makecharset::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [56] phi from makecharset::@7 to makecharset::@5 [phi:makecharset::@7->makecharset::@5]
    // [56] phi (byte) makecharset::c#2 = (byte) makecharset::c#1 [phi:makecharset::@7->makecharset::@5#0] -- register_copy 
    jmp __b5
    // [62] phi from makecharset::@6 to makecharset::@8 [phi:makecharset::@6->makecharset::@8]
  __b10:
    // [62] phi (byte) makecharset::b#2 = (byte) 0 [phi:makecharset::@6->makecharset::@8#0] -- vbuyy=vbuc1 
    ldy #0
    // [62] phi (byte) makecharset::bc#3 = (byte) makecharset::bc#6 [phi:makecharset::@6->makecharset::@8#1] -- register_copy 
    // [62] phi (byte) makecharset::ii#2 = (byte) 0 [phi:makecharset::@6->makecharset::@8#2] -- vbuz1=vbuc1 
    tya
    sta.z ii
    // makecharset::@8
  __b8:
    // for (unsigned char ii = 0; ii < 8; ii++)
    // [63] if((byte) makecharset::ii#2<(byte) 8) goto makecharset::@9 -- vbuz1_lt_vbuc1_then_la1 
    lda.z ii
    cmp #8
    bcc __b9
    // makecharset::@10
    // ((unsigned short)c) << 3
    // [64] (word~) makecharset::$17 ← (word)(byte) makecharset::c#2 -- vwuz1=_word_vbuz2 
    lda.z c
    sta.z __17
    lda #0
    sta.z __17+1
    // [65] (word~) makecharset::$15 ← (word~) makecharset::$17 << (byte) 3 -- vwuz1=vwuz1_rol_3 
    asl.z __15
    rol.z __15+1
    asl.z __15
    rol.z __15+1
    asl.z __15
    rol.z __15+1
    // (((unsigned short)c) << 3) + i
    // [66] (word~) makecharset::$16 ← (word~) makecharset::$15 + (byte) makecharset::i#2 -- vwuz1=vwuz1_plus_vbuz2 
    lda.z i
    clc
    adc.z __16
    sta.z __16
    bcc !+
    inc.z __16+1
  !:
    // (charset + (1 * 8)) [(((unsigned short)c) << 3) + i] = b
    // [67] (byte*~) makecharset::$18 ← (const byte*) CHARSET+(byte)(number) 1*(number) 8 + (word~) makecharset::$16 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __18
    adc #<CHARSET+1*8
    sta.z __18
    lda.z __18+1
    adc #>CHARSET+1*8
    sta.z __18+1
    // [68] *((byte*~) makecharset::$18) ← (byte) makecharset::b#2 -- _deref_pbuz1=vbuyy 
    tya
    ldy #0
    sta (__18),y
    // for (unsigned char bc = 0, i = 0; i < 8; i++)
    // [69] (byte) makecharset::i#1 ← ++ (byte) makecharset::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [59] phi from makecharset::@10 to makecharset::@6 [phi:makecharset::@10->makecharset::@6]
    // [59] phi (byte) makecharset::bc#6 = (byte) makecharset::bc#3 [phi:makecharset::@10->makecharset::@6#0] -- register_copy 
    // [59] phi (byte) makecharset::i#2 = (byte) makecharset::i#1 [phi:makecharset::@10->makecharset::@6#1] -- register_copy 
    jmp __b6
    // makecharset::@9
  __b9:
    // bc += c
    // [70] (byte) makecharset::bc#1 ← (byte) makecharset::bc#3 + (byte) makecharset::c#2 -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z c
    tax
    // if (bc > 0x3f)
    // [71] if((byte) makecharset::bc#1<(byte) $3f+(byte) 1) goto makecharset::@11 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$3f+1
    bcc __b11
    // makecharset::@12
    // bc = bc - 0x40
    // [72] (byte) makecharset::bc#2 ← (byte) makecharset::bc#1 - (byte) $40 -- vbuxx=vbuxx_minus_vbuc1 
    txa
    axs #$40
    // i & 1
    // [73] (byte~) makecharset::$11 ← (byte) makecharset::i#2 & (byte) 1 -- vbuaa=vbuz1_band_vbuc1 
    lda #1
    and.z i
    // ii + (i & 1)
    // [74] (byte~) makecharset::$12 ← (byte) makecharset::ii#2 + (byte~) makecharset::$11 -- vbuaa=vbuz1_plus_vbuaa 
    clc
    adc.z ii
    // (ii + (i & 1)) & 0x7
    // [75] (byte~) makecharset::$13 ← (byte~) makecharset::$12 & (byte) 7 -- vbuz1=vbuaa_band_vbuc1 
    and #7
    sta.z __13
    // b += bittab[(ii + (i & 1)) & 0x7]
    // [76] (byte) makecharset::b#1 ← (byte) makecharset::b#2 + *((const to_nomodify byte*) makecharset::bittab + (byte~) makecharset::$13) -- vbuyy=vbuyy_plus_pbuc1_derefidx_vbuz1 
    tya
    ldy.z __13
    clc
    adc bittab,y
    tay
    // [77] phi from makecharset::@12 makecharset::@9 to makecharset::@11 [phi:makecharset::@12/makecharset::@9->makecharset::@11]
    // [77] phi (byte) makecharset::b#6 = (byte) makecharset::b#1 [phi:makecharset::@12/makecharset::@9->makecharset::@11#0] -- register_copy 
    // [77] phi (byte) makecharset::bc#7 = (byte) makecharset::bc#2 [phi:makecharset::@12/makecharset::@9->makecharset::@11#1] -- register_copy 
    // makecharset::@11
  __b11:
    // for (unsigned char ii = 0; ii < 8; ii++)
    // [78] (byte) makecharset::ii#1 ← ++ (byte) makecharset::ii#2 -- vbuz1=_inc_vbuz1 
    inc.z ii
    // [62] phi from makecharset::@11 to makecharset::@8 [phi:makecharset::@11->makecharset::@8]
    // [62] phi (byte) makecharset::b#2 = (byte) makecharset::b#6 [phi:makecharset::@11->makecharset::@8#0] -- register_copy 
    // [62] phi (byte) makecharset::bc#3 = (byte) makecharset::bc#7 [phi:makecharset::@11->makecharset::@8#1] -- register_copy 
    // [62] phi (byte) makecharset::ii#2 = (byte) makecharset::ii#1 [phi:makecharset::@11->makecharset::@8#2] -- register_copy 
    jmp __b8
    // makecharset::@4
  __b4:
    // *font = 0xff
    // [79] *((byte*) makecharset::font1#2) ← (byte) $ff -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (font1),y
    // for (unsigned char *font = (charset+(64*8)); font != (charset+(256*8)); ++font)
    // [80] (byte*) makecharset::font1#1 ← ++ (byte*) makecharset::font1#2 -- pbuz1=_inc_pbuz1 
    inc.z font1
    bne !+
    inc.z font1+1
  !:
    // [54] phi from makecharset::@4 to makecharset::@3 [phi:makecharset::@4->makecharset::@3]
    // [54] phi (byte*) makecharset::font1#2 = (byte*) makecharset::font1#1 [phi:makecharset::@4->makecharset::@3#0] -- register_copy 
    jmp __b3
    // makecharset::@2
  __b2:
    // *font = 0x00
    // [81] *((byte*) makecharset::font#2) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (font),y
    // for (unsigned char *font = charset; font != (charset+(1*8)); ++font)
    // [82] (byte*) makecharset::font#1 ← ++ (byte*) makecharset::font#2 -- pbuz1=_inc_pbuz1 
    inc.z font
    bne !+
    inc.z font+1
  !:
    // [52] phi from makecharset::@2 to makecharset::@1 [phi:makecharset::@2->makecharset::@1]
    // [52] phi (byte*) makecharset::font#2 = (byte*) makecharset::font#1 [phi:makecharset::@2->makecharset::@1#0] -- register_copy 
    jmp __b1
    bittab: .byte 1, 2, 4, 8, $10, $20, $40, $80
}
  // fillscreen
// Fill a screen (1000 chars) with a specific char
// fillscreen(byte* zp($b) screen, byte register(X) fill)
fillscreen: {
    .label screen = $b
    .label i = 9
    // [84] phi from fillscreen to fillscreen::@1 [phi:fillscreen->fillscreen::@1]
    // [84] phi (word) fillscreen::i#2 = (word) 0 [phi:fillscreen->fillscreen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    sta.z i+1
    // [84] phi (byte*) fillscreen::screen#5 = (byte*) fillscreen::screen#6 [phi:fillscreen->fillscreen::@1#1] -- register_copy 
    // [84] phi from fillscreen::@1 to fillscreen::@1 [phi:fillscreen::@1->fillscreen::@1]
    // [84] phi (word) fillscreen::i#2 = (word) fillscreen::i#1 [phi:fillscreen::@1->fillscreen::@1#0] -- register_copy 
    // [84] phi (byte*) fillscreen::screen#5 = (byte*) fillscreen::screen#4 [phi:fillscreen::@1->fillscreen::@1#1] -- register_copy 
    // fillscreen::@1
  __b1:
    // *screen++ = fill
    // [85] *((byte*) fillscreen::screen#5) ← (byte) fillscreen::fill#5 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (screen),y
    // *screen++ = fill;
    // [86] (byte*) fillscreen::screen#4 ← ++ (byte*) fillscreen::screen#5 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // for( unsigned int i : 0..999)
    // [87] (word) fillscreen::i#1 ← ++ (word) fillscreen::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [88] if((word) fillscreen::i#1!=(word) $3e8) goto fillscreen::@1 -- vwuz1_neq_vwuc1_then_la1 
    lda.z i+1
    cmp #>$3e8
    bne __b1
    lda.z i
    cmp #<$3e8
    bne __b1
    // fillscreen::@return
    // }
    // [89] return 
    rts
}
  // File Data

