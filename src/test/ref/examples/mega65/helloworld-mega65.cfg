
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  [5] call conio_mega65_init 
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [6] phi()
  [7] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [8] return 
  to:@return

void conio_mega65_init()
conio_mega65_init: scope:[conio_mega65_init]  from __start::__init1
  asm { sei  }
  asm { lda#0 tax tay taz map eom  }
  [11] *IO_KEY = $47
  [12] *IO_KEY = $53
  [13] *IO_BANK = *IO_BANK | CRAM2K
  [14] conio_mega65_init::line#0 = *conio_mega65_init::BASIC_CURSOR_LINE + 1
  [15] if(conio_mega65_init::line#0<$19) goto conio_mega65_init::@2
  to:conio_mega65_init::@1
conio_mega65_init::@2: scope:[conio_mega65_init]  from conio_mega65_init
  [16] phi()
  to:conio_mega65_init::@1
conio_mega65_init::@1: scope:[conio_mega65_init]  from conio_mega65_init conio_mega65_init::@2
  [17] conio_mega65_init::line#2 = phi( conio_mega65_init::@2/conio_mega65_init::line#0, conio_mega65_init/(byte)$19-1 )
  [18] gotoxy::y#2 = conio_mega65_init::line#2
  [19] call gotoxy 
  to:conio_mega65_init::@return
conio_mega65_init::@return: scope:[conio_mega65_init]  from conio_mega65_init::@1
  [20] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [21] phi()
  [22] call cputs 
  to:main::@return
main::@return: scope:[main]  from main
  [23] return 
  to:@return

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from conio_mega65_init::@1
  [24] if(gotoxy::y#2<$19+1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [25] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [26] gotoxy::y#4 = phi( gotoxy::@3/gotoxy::y#2, gotoxy/0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [27] conio_cursor_x = gotoxy::x#2
  [28] conio_cursor_y = gotoxy::y#4
  [29] gotoxy::$7 = (word)gotoxy::y#4
  [30] gotoxy::$8 = gotoxy::$7 << 2
  [31] gotoxy::$9 = gotoxy::$8 + gotoxy::$7
  [32] gotoxy::line_offset#0 = gotoxy::$9 << 4
  [33] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0
  [34] conio_line_text = gotoxy::$5
  [35] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0
  [36] conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [37] return 
  to:@return

void cputs(to_nomodify byte* cputs::s)
cputs: scope:[cputs]  from main
  [38] phi()
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [39] cputs::s#2 = phi( cputs/main::s, cputs::@2/cputs::s#0 )
  [40] cputs::c#1 = *cputs::s#2
  [41] cputs::s#0 = ++ cputs::s#2
  [42] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [43] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [44] cputc::c#0 = cputs::c#1
  [45] call cputc 
  to:cputs::@1

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2
  [46] if(cputc::c#0=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [47] conio_line_text[conio_cursor_x] = cputc::c#0
  [48] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [49] conio_cursor_x = ++ conio_cursor_x
  [50] if(conio_cursor_x!=$50) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [51] phi()
  [52] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [53] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [54] phi()
  [55] call cputln 
  to:cputc::@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [56] conio_line_text = conio_line_text + $50
  [57] conio_line_color = conio_line_color + $50
  [58] conio_cursor_x = 0
  [59] conio_cursor_y = ++ conio_cursor_y
  [60] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [61] return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [62] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [63] phi()
  [64] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [65] phi()
  [66] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [67] phi()
  [68] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [69] phi()
  [70] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [71] conio_line_text = conio_line_text - $50
  [72] conio_line_color = conio_line_color - $50
  [73] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [74] return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [75] memcpy::destination#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN, cscroll::@2/(void*)COLORRAM )
  [75] memcpy::source#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN+$50, cscroll::@2/(void*)COLORRAM+$50 )
  [76] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$50-$50
  [77] memcpy::src#4 = (byte*)memcpy::source#2
  [78] memcpy::dst#4 = (byte*)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [79] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [79] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [80] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [81] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [82] *memcpy::dst#2 = *memcpy::src#2
  [83] memcpy::dst#1 = ++ memcpy::dst#2
  [84] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [85] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [85] memset::str#3 = phi( cscroll::@3/(void*)DEFAULT_SCREEN+(word)$19*$50-$50, cscroll::@4/(void*)COLORRAM+(word)$19*$50-$50 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [86] memset::end#0 = (byte*)memset::str#3 + $50
  [87] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [88] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [89] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [90] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [91] *memset::dst#2 = memset::c#4
  [92] memset::dst#1 = ++ memset::dst#2
  to:memset::@2
