
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte) ba#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) bb#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) bc#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) bd#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@5
main: scope:[main]  from @5
  (byte) ba#29 ← phi( @5/(byte) ba#28 )
  (byte) bd#118 ← phi( @5/(byte) bd#117 )
  (byte) bc#94 ← phi( @5/(byte) bc#93 )
  (byte) bb#61 ← phi( @5/(byte) bb#60 )
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte) ba#18 ← phi( main/(byte) ba#29 main::@7/(byte) ba#1 )
  (byte) bd#83 ← phi( main/(byte) bd#118 main::@7/(byte) bd#1 )
  (byte) bc#61 ← phi( main/(byte) bc#94 main::@7/(byte) bc#1 )
  (byte) bb#39 ← phi( main/(byte) bb#61 main::@7/(byte) bb#1 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) ba#17 ← phi( main::@1/(byte) ba#18 )
  (byte) bd#82 ← phi( main::@1/(byte) bd#83 )
  (byte) bc#60 ← phi( main::@1/(byte) bc#61 )
  (byte) bb#38 ← phi( main::@1/(byte) bb#39 )
  call f0 
  to:main::@7
main::@7: scope:[main]  from main::@2
  (byte) ba#4 ← phi( main::@2/(byte) ba#17 )
  (byte) bd#37 ← phi( main::@2/(byte) bd#13 )
  (byte) bc#26 ← phi( main::@2/(byte) bc#13 )
  (byte) bb#15 ← phi( main::@2/(byte) bb#13 )
  (byte) bb#1 ← (byte) bb#15
  (byte) bc#1 ← (byte) bc#26
  (byte) bd#1 ← (byte) bd#37
  (byte) ba#1 ← ++ (byte) ba#4
  to:main::@1
main::@return: scope:[main]  from main::@1
  (byte) ba#5 ← phi( main::@1/(byte) ba#18 )
  (byte) bd#38 ← phi( main::@1/(byte) bd#83 )
  (byte) bc#27 ← phi( main::@1/(byte) bc#61 )
  (byte) bb#16 ← phi( main::@1/(byte) bb#39 )
  (byte) bb#2 ← (byte) bb#16
  (byte) bc#2 ← (byte) bc#27
  (byte) bd#2 ← (byte) bd#38
  (byte) ba#2 ← (byte) ba#5
  return 
  to:@return
f0: scope:[f0]  from main::@2
  (byte) bd#119 ← phi( main::@2/(byte) bd#82 )
  (byte) bc#95 ← phi( main::@2/(byte) bc#60 )
  (byte) bb#40 ← phi( main::@2/(byte) bb#38 )
  (byte) ba#6 ← phi( main::@2/(byte) ba#17 )
  (bool~) f0::$0 ← (byte) ba#6 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) f0::$1 ← ! (bool~) f0::$0
  if((bool~) f0::$1) goto f0::@1
  to:f0::@11
f0::@1: scope:[f0]  from f0 f0::@21
  (byte) bd#120 ← phi( f0/(byte) bd#119 f0::@21/(byte) bd#3 )
  (byte) bc#96 ← phi( f0/(byte) bc#95 f0::@21/(byte) bc#3 )
  (byte) bb#41 ← phi( f0/(byte) bb#40 f0::@21/(byte) bb#62 )
  (byte) ba#7 ← phi( f0/(byte) ba#6 f0::@21/(byte) ba#19 )
  (bool~) f0::$2 ← (byte) ba#7 == (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) f0::$3 ← ! (bool~) f0::$2
  if((bool~) f0::$3) goto f0::@2
  to:f0::@12
f0::@11: scope:[f0]  from f0
  (byte) ba#30 ← phi( f0/(byte) ba#6 )
  (byte) bd#84 ← phi( f0/(byte) bd#119 )
  (byte) bc#62 ← phi( f0/(byte) bc#95 )
  (byte) bb#17 ← phi( f0/(byte) bb#40 )
  (byte) bb#3 ← ++ (byte) bb#17
  call fa 
  to:f0::@21
f0::@21: scope:[f0]  from f0::@11
  (byte) bb#62 ← phi( f0::@11/(byte) bb#3 )
  (byte) ba#19 ← phi( f0::@11/(byte) ba#30 )
  (byte) bd#39 ← phi( f0::@11/(byte) bd#24 )
  (byte) bc#28 ← phi( f0::@11/(byte) bc#24 )
  (byte) bc#3 ← (byte) bc#28
  (byte) bd#3 ← (byte) bd#39
  to:f0::@1
f0::@2: scope:[f0]  from f0::@1 f0::@22
  (byte) bd#121 ← phi( f0::@1/(byte) bd#120 f0::@22/(byte) bd#4 )
  (byte) bc#97 ← phi( f0::@1/(byte) bc#96 f0::@22/(byte) bc#4 )
  (byte) bb#42 ← phi( f0::@1/(byte) bb#41 f0::@22/(byte) bb#63 )
  (byte) ba#8 ← phi( f0::@1/(byte) ba#7 f0::@22/(byte) ba#20 )
  (bool~) f0::$4 ← (byte) ba#8 == (byte/signed byte/word/signed word/dword/signed dword) 2
  (bool~) f0::$5 ← ! (bool~) f0::$4
  if((bool~) f0::$5) goto f0::@3
  to:f0::@13
f0::@12: scope:[f0]  from f0::@1
  (byte) ba#31 ← phi( f0::@1/(byte) ba#7 )
  (byte) bd#85 ← phi( f0::@1/(byte) bd#120 )
  (byte) bc#63 ← phi( f0::@1/(byte) bc#96 )
  (byte) bb#18 ← phi( f0::@1/(byte) bb#41 )
  (byte) bb#4 ← ++ (byte) bb#18
  call fa 
  to:f0::@22
f0::@22: scope:[f0]  from f0::@12
  (byte) bb#63 ← phi( f0::@12/(byte) bb#4 )
  (byte) ba#20 ← phi( f0::@12/(byte) ba#31 )
  (byte) bd#40 ← phi( f0::@12/(byte) bd#24 )
  (byte) bc#29 ← phi( f0::@12/(byte) bc#24 )
  (byte) bc#4 ← (byte) bc#29
  (byte) bd#4 ← (byte) bd#40
  to:f0::@2
f0::@3: scope:[f0]  from f0::@2 f0::@23
  (byte) bd#122 ← phi( f0::@2/(byte) bd#121 f0::@23/(byte) bd#5 )
  (byte) bc#98 ← phi( f0::@2/(byte) bc#97 f0::@23/(byte) bc#5 )
  (byte) bb#43 ← phi( f0::@2/(byte) bb#42 f0::@23/(byte) bb#64 )
  (byte) ba#9 ← phi( f0::@2/(byte) ba#8 f0::@23/(byte) ba#21 )
  (bool~) f0::$6 ← (byte) ba#9 == (byte/signed byte/word/signed word/dword/signed dword) 3
  (bool~) f0::$7 ← ! (bool~) f0::$6
  if((bool~) f0::$7) goto f0::@4
  to:f0::@14
f0::@13: scope:[f0]  from f0::@2
  (byte) ba#32 ← phi( f0::@2/(byte) ba#8 )
  (byte) bd#86 ← phi( f0::@2/(byte) bd#121 )
  (byte) bc#64 ← phi( f0::@2/(byte) bc#97 )
  (byte) bb#19 ← phi( f0::@2/(byte) bb#42 )
  (byte) bb#5 ← ++ (byte) bb#19
  call fa 
  to:f0::@23
f0::@23: scope:[f0]  from f0::@13
  (byte) bb#64 ← phi( f0::@13/(byte) bb#5 )
  (byte) ba#21 ← phi( f0::@13/(byte) ba#32 )
  (byte) bd#41 ← phi( f0::@13/(byte) bd#24 )
  (byte) bc#30 ← phi( f0::@13/(byte) bc#24 )
  (byte) bc#5 ← (byte) bc#30
  (byte) bd#5 ← (byte) bd#41
  to:f0::@3
f0::@4: scope:[f0]  from f0::@24 f0::@3
  (byte) bd#123 ← phi( f0::@24/(byte) bd#6 f0::@3/(byte) bd#122 )
  (byte) bc#99 ← phi( f0::@24/(byte) bc#6 f0::@3/(byte) bc#98 )
  (byte) bb#44 ← phi( f0::@24/(byte) bb#65 f0::@3/(byte) bb#43 )
  (byte) ba#10 ← phi( f0::@24/(byte) ba#22 f0::@3/(byte) ba#9 )
  (bool~) f0::$8 ← (byte) ba#10 == (byte/signed byte/word/signed word/dword/signed dword) 4
  (bool~) f0::$9 ← ! (bool~) f0::$8
  if((bool~) f0::$9) goto f0::@5
  to:f0::@15
f0::@14: scope:[f0]  from f0::@3
  (byte) ba#33 ← phi( f0::@3/(byte) ba#9 )
  (byte) bd#87 ← phi( f0::@3/(byte) bd#122 )
  (byte) bc#65 ← phi( f0::@3/(byte) bc#98 )
  (byte) bb#20 ← phi( f0::@3/(byte) bb#43 )
  (byte) bb#6 ← ++ (byte) bb#20
  call fa 
  to:f0::@24
f0::@24: scope:[f0]  from f0::@14
  (byte) bb#65 ← phi( f0::@14/(byte) bb#6 )
  (byte) ba#22 ← phi( f0::@14/(byte) ba#33 )
  (byte) bd#42 ← phi( f0::@14/(byte) bd#24 )
  (byte) bc#31 ← phi( f0::@14/(byte) bc#24 )
  (byte) bc#6 ← (byte) bc#31
  (byte) bd#6 ← (byte) bd#42
  to:f0::@4
f0::@5: scope:[f0]  from f0::@25 f0::@4
  (byte) bd#124 ← phi( f0::@25/(byte) bd#7 f0::@4/(byte) bd#123 )
  (byte) bc#100 ← phi( f0::@25/(byte) bc#7 f0::@4/(byte) bc#99 )
  (byte) bb#45 ← phi( f0::@25/(byte) bb#66 f0::@4/(byte) bb#44 )
  (byte) ba#11 ← phi( f0::@25/(byte) ba#23 f0::@4/(byte) ba#10 )
  (bool~) f0::$10 ← (byte) ba#11 == (byte/signed byte/word/signed word/dword/signed dword) 5
  (bool~) f0::$11 ← ! (bool~) f0::$10
  if((bool~) f0::$11) goto f0::@6
  to:f0::@16
f0::@15: scope:[f0]  from f0::@4
  (byte) ba#34 ← phi( f0::@4/(byte) ba#10 )
  (byte) bd#88 ← phi( f0::@4/(byte) bd#123 )
  (byte) bc#66 ← phi( f0::@4/(byte) bc#99 )
  (byte) bb#21 ← phi( f0::@4/(byte) bb#44 )
  (byte) bb#7 ← ++ (byte) bb#21
  call fa 
  to:f0::@25
f0::@25: scope:[f0]  from f0::@15
  (byte) bb#66 ← phi( f0::@15/(byte) bb#7 )
  (byte) ba#23 ← phi( f0::@15/(byte) ba#34 )
  (byte) bd#43 ← phi( f0::@15/(byte) bd#24 )
  (byte) bc#32 ← phi( f0::@15/(byte) bc#24 )
  (byte) bc#7 ← (byte) bc#32
  (byte) bd#7 ← (byte) bd#43
  to:f0::@5
f0::@6: scope:[f0]  from f0::@26 f0::@5
  (byte) bd#125 ← phi( f0::@26/(byte) bd#8 f0::@5/(byte) bd#124 )
  (byte) bc#101 ← phi( f0::@26/(byte) bc#8 f0::@5/(byte) bc#100 )
  (byte) bb#46 ← phi( f0::@26/(byte) bb#67 f0::@5/(byte) bb#45 )
  (byte) ba#12 ← phi( f0::@26/(byte) ba#24 f0::@5/(byte) ba#11 )
  (bool~) f0::$12 ← (byte) ba#12 == (byte/signed byte/word/signed word/dword/signed dword) 6
  (bool~) f0::$13 ← ! (bool~) f0::$12
  if((bool~) f0::$13) goto f0::@7
  to:f0::@17
f0::@16: scope:[f0]  from f0::@5
  (byte) ba#35 ← phi( f0::@5/(byte) ba#11 )
  (byte) bd#89 ← phi( f0::@5/(byte) bd#124 )
  (byte) bc#67 ← phi( f0::@5/(byte) bc#100 )
  (byte) bb#22 ← phi( f0::@5/(byte) bb#45 )
  (byte) bb#8 ← ++ (byte) bb#22
  call fa 
  to:f0::@26
f0::@26: scope:[f0]  from f0::@16
  (byte) bb#67 ← phi( f0::@16/(byte) bb#8 )
  (byte) ba#24 ← phi( f0::@16/(byte) ba#35 )
  (byte) bd#44 ← phi( f0::@16/(byte) bd#24 )
  (byte) bc#33 ← phi( f0::@16/(byte) bc#24 )
  (byte) bc#8 ← (byte) bc#33
  (byte) bd#8 ← (byte) bd#44
  to:f0::@6
f0::@7: scope:[f0]  from f0::@27 f0::@6
  (byte) bd#126 ← phi( f0::@27/(byte) bd#9 f0::@6/(byte) bd#125 )
  (byte) bc#102 ← phi( f0::@27/(byte) bc#9 f0::@6/(byte) bc#101 )
  (byte) bb#47 ← phi( f0::@27/(byte) bb#68 f0::@6/(byte) bb#46 )
  (byte) ba#13 ← phi( f0::@27/(byte) ba#25 f0::@6/(byte) ba#12 )
  (bool~) f0::$14 ← (byte) ba#13 == (byte/signed byte/word/signed word/dword/signed dword) 7
  (bool~) f0::$15 ← ! (bool~) f0::$14
  if((bool~) f0::$15) goto f0::@8
  to:f0::@18
f0::@17: scope:[f0]  from f0::@6
  (byte) ba#36 ← phi( f0::@6/(byte) ba#12 )
  (byte) bd#90 ← phi( f0::@6/(byte) bd#125 )
  (byte) bc#68 ← phi( f0::@6/(byte) bc#101 )
  (byte) bb#23 ← phi( f0::@6/(byte) bb#46 )
  (byte) bb#9 ← ++ (byte) bb#23
  call fa 
  to:f0::@27
f0::@27: scope:[f0]  from f0::@17
  (byte) bb#68 ← phi( f0::@17/(byte) bb#9 )
  (byte) ba#25 ← phi( f0::@17/(byte) ba#36 )
  (byte) bd#45 ← phi( f0::@17/(byte) bd#24 )
  (byte) bc#34 ← phi( f0::@17/(byte) bc#24 )
  (byte) bc#9 ← (byte) bc#34
  (byte) bd#9 ← (byte) bd#45
  to:f0::@7
f0::@8: scope:[f0]  from f0::@28 f0::@7
  (byte) bd#127 ← phi( f0::@28/(byte) bd#10 f0::@7/(byte) bd#126 )
  (byte) bc#103 ← phi( f0::@28/(byte) bc#10 f0::@7/(byte) bc#102 )
  (byte) bb#48 ← phi( f0::@28/(byte) bb#69 f0::@7/(byte) bb#47 )
  (byte) ba#14 ← phi( f0::@28/(byte) ba#26 f0::@7/(byte) ba#13 )
  (bool~) f0::$16 ← (byte) ba#14 == (byte/signed byte/word/signed word/dword/signed dword) 8
  (bool~) f0::$17 ← ! (bool~) f0::$16
  if((bool~) f0::$17) goto f0::@9
  to:f0::@19
f0::@18: scope:[f0]  from f0::@7
  (byte) ba#37 ← phi( f0::@7/(byte) ba#13 )
  (byte) bd#91 ← phi( f0::@7/(byte) bd#126 )
  (byte) bc#69 ← phi( f0::@7/(byte) bc#102 )
  (byte) bb#24 ← phi( f0::@7/(byte) bb#47 )
  (byte) bb#10 ← ++ (byte) bb#24
  call fa 
  to:f0::@28
f0::@28: scope:[f0]  from f0::@18
  (byte) bb#69 ← phi( f0::@18/(byte) bb#10 )
  (byte) ba#26 ← phi( f0::@18/(byte) ba#37 )
  (byte) bd#46 ← phi( f0::@18/(byte) bd#24 )
  (byte) bc#35 ← phi( f0::@18/(byte) bc#24 )
  (byte) bc#10 ← (byte) bc#35
  (byte) bd#10 ← (byte) bd#46
  to:f0::@8
f0::@9: scope:[f0]  from f0::@29 f0::@8
  (byte) bd#128 ← phi( f0::@29/(byte) bd#11 f0::@8/(byte) bd#127 )
  (byte) bc#104 ← phi( f0::@29/(byte) bc#11 f0::@8/(byte) bc#103 )
  (byte) bb#70 ← phi( f0::@29/(byte) bb#80 f0::@8/(byte) bb#48 )
  (byte) ba#15 ← phi( f0::@29/(byte) ba#27 f0::@8/(byte) ba#14 )
  (bool~) f0::$18 ← (byte) ba#15 == (byte/signed byte/word/signed word/dword/signed dword) 9
  (bool~) f0::$19 ← ! (bool~) f0::$18
  if((bool~) f0::$19) goto f0::@10
  to:f0::@20
f0::@19: scope:[f0]  from f0::@8
  (byte) ba#38 ← phi( f0::@8/(byte) ba#14 )
  (byte) bd#92 ← phi( f0::@8/(byte) bd#127 )
  (byte) bc#70 ← phi( f0::@8/(byte) bc#103 )
  (byte) bb#25 ← phi( f0::@8/(byte) bb#48 )
  (byte) bb#11 ← ++ (byte) bb#25
  call fa 
  to:f0::@29
f0::@29: scope:[f0]  from f0::@19
  (byte) bb#80 ← phi( f0::@19/(byte) bb#11 )
  (byte) ba#27 ← phi( f0::@19/(byte) ba#38 )
  (byte) bd#47 ← phi( f0::@19/(byte) bd#24 )
  (byte) bc#36 ← phi( f0::@19/(byte) bc#24 )
  (byte) bc#11 ← (byte) bc#36
  (byte) bd#11 ← (byte) bd#47
  to:f0::@9
f0::@10: scope:[f0]  from f0::@9
  (byte) bd#94 ← phi( f0::@9/(byte) bd#128 )
  (byte) bc#72 ← phi( f0::@9/(byte) bc#104 )
  (byte) bb#49 ← phi( f0::@9/(byte) bb#70 )
  to:f0::@return
f0::@20: scope:[f0]  from f0::@9
  (byte) bd#93 ← phi( f0::@9/(byte) bd#128 )
  (byte) bc#71 ← phi( f0::@9/(byte) bc#104 )
  (byte) bb#12 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call fa 
  to:f0::@30
f0::@30: scope:[f0]  from f0::@20
  (byte) bb#50 ← phi( f0::@20/(byte) bb#12 )
  (byte) bd#48 ← phi( f0::@20/(byte) bd#24 )
  (byte) bc#37 ← phi( f0::@20/(byte) bc#24 )
  (byte) bc#12 ← (byte) bc#37
  (byte) bd#12 ← (byte) bd#48
  to:f0::@return
f0::@return: scope:[f0]  from f0::@10 f0::@30
  (byte) bd#49 ← phi( f0::@10/(byte) bd#94 f0::@30/(byte) bd#12 )
  (byte) bc#38 ← phi( f0::@10/(byte) bc#72 f0::@30/(byte) bc#12 )
  (byte) bb#26 ← phi( f0::@10/(byte) bb#49 f0::@30/(byte) bb#50 )
  (byte) bb#13 ← (byte) bb#26
  (byte) bc#13 ← (byte) bc#38
  (byte) bd#13 ← (byte) bd#49
  return 
  to:@return
fa: scope:[fa]  from f0::@11 f0::@12 f0::@13 f0::@14 f0::@15 f0::@16 f0::@17 f0::@18 f0::@19 f0::@20
  (byte) bd#129 ← phi( f0::@11/(byte) bd#84 f0::@12/(byte) bd#85 f0::@13/(byte) bd#86 f0::@14/(byte) bd#87 f0::@15/(byte) bd#88 f0::@16/(byte) bd#89 f0::@17/(byte) bd#90 f0::@18/(byte) bd#91 f0::@19/(byte) bd#92 f0::@20/(byte) bd#93 )
  (byte) bc#73 ← phi( f0::@11/(byte) bc#62 f0::@12/(byte) bc#63 f0::@13/(byte) bc#64 f0::@14/(byte) bc#65 f0::@15/(byte) bc#66 f0::@16/(byte) bc#67 f0::@17/(byte) bc#68 f0::@18/(byte) bc#69 f0::@19/(byte) bc#70 f0::@20/(byte) bc#71 )
  (byte) bb#27 ← phi( f0::@11/(byte) bb#3 f0::@12/(byte) bb#4 f0::@13/(byte) bb#5 f0::@14/(byte) bb#6 f0::@15/(byte) bb#7 f0::@16/(byte) bb#8 f0::@17/(byte) bb#9 f0::@18/(byte) bb#10 f0::@19/(byte) bb#11 f0::@20/(byte) bb#12 )
  (bool~) fa::$0 ← (byte) bb#27 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) fa::$1 ← ! (bool~) fa::$0
  if((bool~) fa::$1) goto fa::@1
  to:fa::@11
fa::@1: scope:[fa]  from fa fa::@21
  (byte) bd#130 ← phi( fa/(byte) bd#129 fa::@21/(byte) bd#14 )
  (byte) bc#74 ← phi( fa/(byte) bc#73 fa::@21/(byte) bc#105 )
  (byte) bb#28 ← phi( fa/(byte) bb#27 fa::@21/(byte) bb#51 )
  (bool~) fa::$2 ← (byte) bb#28 == (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) fa::$3 ← ! (bool~) fa::$2
  if((bool~) fa::$3) goto fa::@2
  to:fa::@12
fa::@11: scope:[fa]  from fa
  (byte) bb#71 ← phi( fa/(byte) bb#27 )
  (byte) bd#95 ← phi( fa/(byte) bd#129 )
  (byte) bc#39 ← phi( fa/(byte) bc#73 )
  (byte) bc#14 ← ++ (byte) bc#39
  call fb 
  to:fa::@21
fa::@21: scope:[fa]  from fa::@11
  (byte) bc#105 ← phi( fa::@11/(byte) bc#14 )
  (byte) bb#51 ← phi( fa::@11/(byte) bb#71 )
  (byte) bd#50 ← phi( fa::@11/(byte) bd#35 )
  (byte) bd#14 ← (byte) bd#50
  to:fa::@1
fa::@2: scope:[fa]  from fa::@1 fa::@22
  (byte) bd#131 ← phi( fa::@1/(byte) bd#130 fa::@22/(byte) bd#15 )
  (byte) bc#75 ← phi( fa::@1/(byte) bc#74 fa::@22/(byte) bc#106 )
  (byte) bb#29 ← phi( fa::@1/(byte) bb#28 fa::@22/(byte) bb#52 )
  (bool~) fa::$4 ← (byte) bb#29 == (byte/signed byte/word/signed word/dword/signed dword) 2
  (bool~) fa::$5 ← ! (bool~) fa::$4
  if((bool~) fa::$5) goto fa::@3
  to:fa::@13
fa::@12: scope:[fa]  from fa::@1
  (byte) bb#72 ← phi( fa::@1/(byte) bb#28 )
  (byte) bd#96 ← phi( fa::@1/(byte) bd#130 )
  (byte) bc#40 ← phi( fa::@1/(byte) bc#74 )
  (byte) bc#15 ← ++ (byte) bc#40
  call fb 
  to:fa::@22
fa::@22: scope:[fa]  from fa::@12
  (byte) bc#106 ← phi( fa::@12/(byte) bc#15 )
  (byte) bb#52 ← phi( fa::@12/(byte) bb#72 )
  (byte) bd#51 ← phi( fa::@12/(byte) bd#35 )
  (byte) bd#15 ← (byte) bd#51
  to:fa::@2
fa::@3: scope:[fa]  from fa::@2 fa::@23
  (byte) bd#132 ← phi( fa::@2/(byte) bd#131 fa::@23/(byte) bd#16 )
  (byte) bc#76 ← phi( fa::@2/(byte) bc#75 fa::@23/(byte) bc#107 )
  (byte) bb#30 ← phi( fa::@2/(byte) bb#29 fa::@23/(byte) bb#53 )
  (bool~) fa::$6 ← (byte) bb#30 == (byte/signed byte/word/signed word/dword/signed dword) 3
  (bool~) fa::$7 ← ! (bool~) fa::$6
  if((bool~) fa::$7) goto fa::@4
  to:fa::@14
fa::@13: scope:[fa]  from fa::@2
  (byte) bb#73 ← phi( fa::@2/(byte) bb#29 )
  (byte) bd#97 ← phi( fa::@2/(byte) bd#131 )
  (byte) bc#41 ← phi( fa::@2/(byte) bc#75 )
  (byte) bc#16 ← ++ (byte) bc#41
  call fb 
  to:fa::@23
fa::@23: scope:[fa]  from fa::@13
  (byte) bc#107 ← phi( fa::@13/(byte) bc#16 )
  (byte) bb#53 ← phi( fa::@13/(byte) bb#73 )
  (byte) bd#52 ← phi( fa::@13/(byte) bd#35 )
  (byte) bd#16 ← (byte) bd#52
  to:fa::@3
fa::@4: scope:[fa]  from fa::@24 fa::@3
  (byte) bd#133 ← phi( fa::@24/(byte) bd#17 fa::@3/(byte) bd#132 )
  (byte) bc#77 ← phi( fa::@24/(byte) bc#108 fa::@3/(byte) bc#76 )
  (byte) bb#31 ← phi( fa::@24/(byte) bb#54 fa::@3/(byte) bb#30 )
  (bool~) fa::$8 ← (byte) bb#31 == (byte/signed byte/word/signed word/dword/signed dword) 4
  (bool~) fa::$9 ← ! (bool~) fa::$8
  if((bool~) fa::$9) goto fa::@5
  to:fa::@15
fa::@14: scope:[fa]  from fa::@3
  (byte) bb#74 ← phi( fa::@3/(byte) bb#30 )
  (byte) bd#98 ← phi( fa::@3/(byte) bd#132 )
  (byte) bc#42 ← phi( fa::@3/(byte) bc#76 )
  (byte) bc#17 ← ++ (byte) bc#42
  call fb 
  to:fa::@24
fa::@24: scope:[fa]  from fa::@14
  (byte) bc#108 ← phi( fa::@14/(byte) bc#17 )
  (byte) bb#54 ← phi( fa::@14/(byte) bb#74 )
  (byte) bd#53 ← phi( fa::@14/(byte) bd#35 )
  (byte) bd#17 ← (byte) bd#53
  to:fa::@4
fa::@5: scope:[fa]  from fa::@25 fa::@4
  (byte) bd#134 ← phi( fa::@25/(byte) bd#18 fa::@4/(byte) bd#133 )
  (byte) bc#78 ← phi( fa::@25/(byte) bc#109 fa::@4/(byte) bc#77 )
  (byte) bb#32 ← phi( fa::@25/(byte) bb#55 fa::@4/(byte) bb#31 )
  (bool~) fa::$10 ← (byte) bb#32 == (byte/signed byte/word/signed word/dword/signed dword) 5
  (bool~) fa::$11 ← ! (bool~) fa::$10
  if((bool~) fa::$11) goto fa::@6
  to:fa::@16
fa::@15: scope:[fa]  from fa::@4
  (byte) bb#75 ← phi( fa::@4/(byte) bb#31 )
  (byte) bd#99 ← phi( fa::@4/(byte) bd#133 )
  (byte) bc#43 ← phi( fa::@4/(byte) bc#77 )
  (byte) bc#18 ← ++ (byte) bc#43
  call fb 
  to:fa::@25
fa::@25: scope:[fa]  from fa::@15
  (byte) bc#109 ← phi( fa::@15/(byte) bc#18 )
  (byte) bb#55 ← phi( fa::@15/(byte) bb#75 )
  (byte) bd#54 ← phi( fa::@15/(byte) bd#35 )
  (byte) bd#18 ← (byte) bd#54
  to:fa::@5
fa::@6: scope:[fa]  from fa::@26 fa::@5
  (byte) bd#135 ← phi( fa::@26/(byte) bd#19 fa::@5/(byte) bd#134 )
  (byte) bc#79 ← phi( fa::@26/(byte) bc#110 fa::@5/(byte) bc#78 )
  (byte) bb#33 ← phi( fa::@26/(byte) bb#56 fa::@5/(byte) bb#32 )
  (bool~) fa::$12 ← (byte) bb#33 == (byte/signed byte/word/signed word/dword/signed dword) 6
  (bool~) fa::$13 ← ! (bool~) fa::$12
  if((bool~) fa::$13) goto fa::@7
  to:fa::@17
fa::@16: scope:[fa]  from fa::@5
  (byte) bb#76 ← phi( fa::@5/(byte) bb#32 )
  (byte) bd#100 ← phi( fa::@5/(byte) bd#134 )
  (byte) bc#44 ← phi( fa::@5/(byte) bc#78 )
  (byte) bc#19 ← ++ (byte) bc#44
  call fb 
  to:fa::@26
fa::@26: scope:[fa]  from fa::@16
  (byte) bc#110 ← phi( fa::@16/(byte) bc#19 )
  (byte) bb#56 ← phi( fa::@16/(byte) bb#76 )
  (byte) bd#55 ← phi( fa::@16/(byte) bd#35 )
  (byte) bd#19 ← (byte) bd#55
  to:fa::@6
fa::@7: scope:[fa]  from fa::@27 fa::@6
  (byte) bd#136 ← phi( fa::@27/(byte) bd#20 fa::@6/(byte) bd#135 )
  (byte) bc#80 ← phi( fa::@27/(byte) bc#111 fa::@6/(byte) bc#79 )
  (byte) bb#34 ← phi( fa::@27/(byte) bb#57 fa::@6/(byte) bb#33 )
  (bool~) fa::$14 ← (byte) bb#34 == (byte/signed byte/word/signed word/dword/signed dword) 7
  (bool~) fa::$15 ← ! (bool~) fa::$14
  if((bool~) fa::$15) goto fa::@8
  to:fa::@18
fa::@17: scope:[fa]  from fa::@6
  (byte) bb#77 ← phi( fa::@6/(byte) bb#33 )
  (byte) bd#101 ← phi( fa::@6/(byte) bd#135 )
  (byte) bc#45 ← phi( fa::@6/(byte) bc#79 )
  (byte) bc#20 ← ++ (byte) bc#45
  call fb 
  to:fa::@27
fa::@27: scope:[fa]  from fa::@17
  (byte) bc#111 ← phi( fa::@17/(byte) bc#20 )
  (byte) bb#57 ← phi( fa::@17/(byte) bb#77 )
  (byte) bd#56 ← phi( fa::@17/(byte) bd#35 )
  (byte) bd#20 ← (byte) bd#56
  to:fa::@7
fa::@8: scope:[fa]  from fa::@28 fa::@7
  (byte) bd#137 ← phi( fa::@28/(byte) bd#21 fa::@7/(byte) bd#136 )
  (byte) bc#81 ← phi( fa::@28/(byte) bc#112 fa::@7/(byte) bc#80 )
  (byte) bb#35 ← phi( fa::@28/(byte) bb#58 fa::@7/(byte) bb#34 )
  (bool~) fa::$16 ← (byte) bb#35 == (byte/signed byte/word/signed word/dword/signed dword) 8
  (bool~) fa::$17 ← ! (bool~) fa::$16
  if((bool~) fa::$17) goto fa::@9
  to:fa::@19
fa::@18: scope:[fa]  from fa::@7
  (byte) bb#78 ← phi( fa::@7/(byte) bb#34 )
  (byte) bd#102 ← phi( fa::@7/(byte) bd#136 )
  (byte) bc#46 ← phi( fa::@7/(byte) bc#80 )
  (byte) bc#21 ← ++ (byte) bc#46
  call fb 
  to:fa::@28
fa::@28: scope:[fa]  from fa::@18
  (byte) bc#112 ← phi( fa::@18/(byte) bc#21 )
  (byte) bb#58 ← phi( fa::@18/(byte) bb#78 )
  (byte) bd#57 ← phi( fa::@18/(byte) bd#35 )
  (byte) bd#21 ← (byte) bd#57
  to:fa::@8
fa::@9: scope:[fa]  from fa::@29 fa::@8
  (byte) bd#138 ← phi( fa::@29/(byte) bd#22 fa::@8/(byte) bd#137 )
  (byte) bc#113 ← phi( fa::@29/(byte) bc#123 fa::@8/(byte) bc#81 )
  (byte) bb#36 ← phi( fa::@29/(byte) bb#59 fa::@8/(byte) bb#35 )
  (bool~) fa::$18 ← (byte) bb#36 == (byte/signed byte/word/signed word/dword/signed dword) 9
  (bool~) fa::$19 ← ! (bool~) fa::$18
  if((bool~) fa::$19) goto fa::@10
  to:fa::@20
fa::@19: scope:[fa]  from fa::@8
  (byte) bb#79 ← phi( fa::@8/(byte) bb#35 )
  (byte) bd#103 ← phi( fa::@8/(byte) bd#137 )
  (byte) bc#47 ← phi( fa::@8/(byte) bc#81 )
  (byte) bc#22 ← ++ (byte) bc#47
  call fb 
  to:fa::@29
fa::@29: scope:[fa]  from fa::@19
  (byte) bc#123 ← phi( fa::@19/(byte) bc#22 )
  (byte) bb#59 ← phi( fa::@19/(byte) bb#79 )
  (byte) bd#58 ← phi( fa::@19/(byte) bd#35 )
  (byte) bd#22 ← (byte) bd#58
  to:fa::@9
fa::@10: scope:[fa]  from fa::@9
  (byte) bd#105 ← phi( fa::@9/(byte) bd#138 )
  (byte) bc#82 ← phi( fa::@9/(byte) bc#113 )
  to:fa::@return
fa::@20: scope:[fa]  from fa::@9
  (byte) bd#104 ← phi( fa::@9/(byte) bd#138 )
  (byte) bc#23 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call fb 
  to:fa::@30
fa::@30: scope:[fa]  from fa::@20
  (byte) bc#83 ← phi( fa::@20/(byte) bc#23 )
  (byte) bd#59 ← phi( fa::@20/(byte) bd#35 )
  (byte) bd#23 ← (byte) bd#59
  to:fa::@return
fa::@return: scope:[fa]  from fa::@10 fa::@30
  (byte) bd#60 ← phi( fa::@10/(byte) bd#105 fa::@30/(byte) bd#23 )
  (byte) bc#48 ← phi( fa::@10/(byte) bc#82 fa::@30/(byte) bc#83 )
  (byte) bc#24 ← (byte) bc#48
  (byte) bd#24 ← (byte) bd#60
  return 
  to:@return
fb: scope:[fb]  from fa::@11 fa::@12 fa::@13 fa::@14 fa::@15 fa::@16 fa::@17 fa::@18 fa::@19 fa::@20
  (byte) bd#106 ← phi( fa::@11/(byte) bd#95 fa::@12/(byte) bd#96 fa::@13/(byte) bd#97 fa::@14/(byte) bd#98 fa::@15/(byte) bd#99 fa::@16/(byte) bd#100 fa::@17/(byte) bd#101 fa::@18/(byte) bd#102 fa::@19/(byte) bd#103 fa::@20/(byte) bd#104 )
  (byte) bc#49 ← phi( fa::@11/(byte) bc#14 fa::@12/(byte) bc#15 fa::@13/(byte) bc#16 fa::@14/(byte) bc#17 fa::@15/(byte) bc#18 fa::@16/(byte) bc#19 fa::@17/(byte) bc#20 fa::@18/(byte) bc#21 fa::@19/(byte) bc#22 fa::@20/(byte) bc#23 )
  (bool~) fb::$0 ← (byte) bc#49 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) fb::$1 ← ! (bool~) fb::$0
  if((bool~) fb::$1) goto fb::@1
  to:fb::@11
fb::@1: scope:[fb]  from fb fb::@21
  (byte) bd#107 ← phi( fb/(byte) bd#106 fb::@21/(byte) bd#139 )
  (byte) bc#50 ← phi( fb/(byte) bc#49 fb::@21/(byte) bc#84 )
  (bool~) fb::$2 ← (byte) bc#50 == (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) fb::$3 ← ! (bool~) fb::$2
  if((bool~) fb::$3) goto fb::@2
  to:fb::@12
fb::@11: scope:[fb]  from fb
  (byte) bc#114 ← phi( fb/(byte) bc#49 )
  (byte) bd#61 ← phi( fb/(byte) bd#106 )
  (byte) bd#25 ← ++ (byte) bd#61
  call fc 
  to:fb::@21
fb::@21: scope:[fb]  from fb::@11
  (byte) bd#139 ← phi( fb::@11/(byte) bd#25 )
  (byte) bc#84 ← phi( fb::@11/(byte) bc#114 )
  to:fb::@1
fb::@2: scope:[fb]  from fb::@1 fb::@22
  (byte) bd#108 ← phi( fb::@1/(byte) bd#107 fb::@22/(byte) bd#140 )
  (byte) bc#51 ← phi( fb::@1/(byte) bc#50 fb::@22/(byte) bc#85 )
  (bool~) fb::$4 ← (byte) bc#51 == (byte/signed byte/word/signed word/dword/signed dword) 2
  (bool~) fb::$5 ← ! (bool~) fb::$4
  if((bool~) fb::$5) goto fb::@3
  to:fb::@13
fb::@12: scope:[fb]  from fb::@1
  (byte) bc#115 ← phi( fb::@1/(byte) bc#50 )
  (byte) bd#62 ← phi( fb::@1/(byte) bd#107 )
  (byte) bd#26 ← ++ (byte) bd#62
  call fc 
  to:fb::@22
fb::@22: scope:[fb]  from fb::@12
  (byte) bd#140 ← phi( fb::@12/(byte) bd#26 )
  (byte) bc#85 ← phi( fb::@12/(byte) bc#115 )
  to:fb::@2
fb::@3: scope:[fb]  from fb::@2 fb::@23
  (byte) bd#109 ← phi( fb::@2/(byte) bd#108 fb::@23/(byte) bd#141 )
  (byte) bc#52 ← phi( fb::@2/(byte) bc#51 fb::@23/(byte) bc#86 )
  (bool~) fb::$6 ← (byte) bc#52 == (byte/signed byte/word/signed word/dword/signed dword) 3
  (bool~) fb::$7 ← ! (bool~) fb::$6
  if((bool~) fb::$7) goto fb::@4
  to:fb::@14
fb::@13: scope:[fb]  from fb::@2
  (byte) bc#116 ← phi( fb::@2/(byte) bc#51 )
  (byte) bd#63 ← phi( fb::@2/(byte) bd#108 )
  (byte) bd#27 ← ++ (byte) bd#63
  call fc 
  to:fb::@23
fb::@23: scope:[fb]  from fb::@13
  (byte) bd#141 ← phi( fb::@13/(byte) bd#27 )
  (byte) bc#86 ← phi( fb::@13/(byte) bc#116 )
  to:fb::@3
fb::@4: scope:[fb]  from fb::@24 fb::@3
  (byte) bd#110 ← phi( fb::@24/(byte) bd#142 fb::@3/(byte) bd#109 )
  (byte) bc#53 ← phi( fb::@24/(byte) bc#87 fb::@3/(byte) bc#52 )
  (bool~) fb::$8 ← (byte) bc#53 == (byte/signed byte/word/signed word/dword/signed dword) 4
  (bool~) fb::$9 ← ! (bool~) fb::$8
  if((bool~) fb::$9) goto fb::@5
  to:fb::@15
fb::@14: scope:[fb]  from fb::@3
  (byte) bc#117 ← phi( fb::@3/(byte) bc#52 )
  (byte) bd#64 ← phi( fb::@3/(byte) bd#109 )
  (byte) bd#28 ← ++ (byte) bd#64
  call fc 
  to:fb::@24
fb::@24: scope:[fb]  from fb::@14
  (byte) bd#142 ← phi( fb::@14/(byte) bd#28 )
  (byte) bc#87 ← phi( fb::@14/(byte) bc#117 )
  to:fb::@4
fb::@5: scope:[fb]  from fb::@25 fb::@4
  (byte) bd#111 ← phi( fb::@25/(byte) bd#143 fb::@4/(byte) bd#110 )
  (byte) bc#54 ← phi( fb::@25/(byte) bc#88 fb::@4/(byte) bc#53 )
  (bool~) fb::$10 ← (byte) bc#54 == (byte/signed byte/word/signed word/dword/signed dword) 5
  (bool~) fb::$11 ← ! (bool~) fb::$10
  if((bool~) fb::$11) goto fb::@6
  to:fb::@16
fb::@15: scope:[fb]  from fb::@4
  (byte) bc#118 ← phi( fb::@4/(byte) bc#53 )
  (byte) bd#65 ← phi( fb::@4/(byte) bd#110 )
  (byte) bd#29 ← ++ (byte) bd#65
  call fc 
  to:fb::@25
fb::@25: scope:[fb]  from fb::@15
  (byte) bd#143 ← phi( fb::@15/(byte) bd#29 )
  (byte) bc#88 ← phi( fb::@15/(byte) bc#118 )
  to:fb::@5
fb::@6: scope:[fb]  from fb::@26 fb::@5
  (byte) bd#112 ← phi( fb::@26/(byte) bd#144 fb::@5/(byte) bd#111 )
  (byte) bc#55 ← phi( fb::@26/(byte) bc#89 fb::@5/(byte) bc#54 )
  (bool~) fb::$12 ← (byte) bc#55 == (byte/signed byte/word/signed word/dword/signed dword) 6
  (bool~) fb::$13 ← ! (bool~) fb::$12
  if((bool~) fb::$13) goto fb::@7
  to:fb::@17
fb::@16: scope:[fb]  from fb::@5
  (byte) bc#119 ← phi( fb::@5/(byte) bc#54 )
  (byte) bd#66 ← phi( fb::@5/(byte) bd#111 )
  (byte) bd#30 ← ++ (byte) bd#66
  call fc 
  to:fb::@26
fb::@26: scope:[fb]  from fb::@16
  (byte) bd#144 ← phi( fb::@16/(byte) bd#30 )
  (byte) bc#89 ← phi( fb::@16/(byte) bc#119 )
  to:fb::@6
fb::@7: scope:[fb]  from fb::@27 fb::@6
  (byte) bd#113 ← phi( fb::@27/(byte) bd#145 fb::@6/(byte) bd#112 )
  (byte) bc#56 ← phi( fb::@27/(byte) bc#90 fb::@6/(byte) bc#55 )
  (bool~) fb::$14 ← (byte) bc#56 == (byte/signed byte/word/signed word/dword/signed dword) 7
  (bool~) fb::$15 ← ! (bool~) fb::$14
  if((bool~) fb::$15) goto fb::@8
  to:fb::@18
fb::@17: scope:[fb]  from fb::@6
  (byte) bc#120 ← phi( fb::@6/(byte) bc#55 )
  (byte) bd#67 ← phi( fb::@6/(byte) bd#112 )
  (byte) bd#31 ← ++ (byte) bd#67
  call fc 
  to:fb::@27
fb::@27: scope:[fb]  from fb::@17
  (byte) bd#145 ← phi( fb::@17/(byte) bd#31 )
  (byte) bc#90 ← phi( fb::@17/(byte) bc#120 )
  to:fb::@7
fb::@8: scope:[fb]  from fb::@28 fb::@7
  (byte) bd#114 ← phi( fb::@28/(byte) bd#146 fb::@7/(byte) bd#113 )
  (byte) bc#57 ← phi( fb::@28/(byte) bc#91 fb::@7/(byte) bc#56 )
  (bool~) fb::$16 ← (byte) bc#57 == (byte/signed byte/word/signed word/dword/signed dword) 8
  (bool~) fb::$17 ← ! (bool~) fb::$16
  if((bool~) fb::$17) goto fb::@9
  to:fb::@19
fb::@18: scope:[fb]  from fb::@7
  (byte) bc#121 ← phi( fb::@7/(byte) bc#56 )
  (byte) bd#68 ← phi( fb::@7/(byte) bd#113 )
  (byte) bd#32 ← ++ (byte) bd#68
  call fc 
  to:fb::@28
fb::@28: scope:[fb]  from fb::@18
  (byte) bd#146 ← phi( fb::@18/(byte) bd#32 )
  (byte) bc#91 ← phi( fb::@18/(byte) bc#121 )
  to:fb::@8
fb::@9: scope:[fb]  from fb::@29 fb::@8
  (byte) bd#147 ← phi( fb::@29/(byte) bd#148 fb::@8/(byte) bd#114 )
  (byte) bc#58 ← phi( fb::@29/(byte) bc#92 fb::@8/(byte) bc#57 )
  (bool~) fb::$18 ← (byte) bc#58 == (byte/signed byte/word/signed word/dword/signed dword) 9
  (bool~) fb::$19 ← ! (bool~) fb::$18
  if((bool~) fb::$19) goto fb::@10
  to:fb::@20
fb::@19: scope:[fb]  from fb::@8
  (byte) bc#122 ← phi( fb::@8/(byte) bc#57 )
  (byte) bd#69 ← phi( fb::@8/(byte) bd#114 )
  (byte) bd#33 ← ++ (byte) bd#69
  call fc 
  to:fb::@29
fb::@29: scope:[fb]  from fb::@19
  (byte) bd#148 ← phi( fb::@19/(byte) bd#33 )
  (byte) bc#92 ← phi( fb::@19/(byte) bc#122 )
  to:fb::@9
fb::@10: scope:[fb]  from fb::@9
  (byte) bd#115 ← phi( fb::@9/(byte) bd#147 )
  to:fb::@return
fb::@20: scope:[fb]  from fb::@9
  (byte) bd#34 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call fc 
  to:fb::@30
fb::@30: scope:[fb]  from fb::@20
  (byte) bd#116 ← phi( fb::@20/(byte) bd#34 )
  to:fb::@return
fb::@return: scope:[fb]  from fb::@10 fb::@30
  (byte) bd#70 ← phi( fb::@10/(byte) bd#115 fb::@30/(byte) bd#116 )
  (byte) bd#35 ← (byte) bd#70
  return 
  to:@return
fc: scope:[fc]  from fb::@11 fb::@12 fb::@13 fb::@14 fb::@15 fb::@16 fb::@17 fb::@18 fb::@19 fb::@20
  (byte) bd#71 ← phi( fb::@11/(byte) bd#25 fb::@12/(byte) bd#26 fb::@13/(byte) bd#27 fb::@14/(byte) bd#28 fb::@15/(byte) bd#29 fb::@16/(byte) bd#30 fb::@17/(byte) bd#31 fb::@18/(byte) bd#32 fb::@19/(byte) bd#33 fb::@20/(byte) bd#34 )
  (bool~) fc::$0 ← (byte) bd#71 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) fc::$1 ← ! (bool~) fc::$0
  if((bool~) fc::$1) goto fc::@1
  to:fc::@1
fc::@1: scope:[fc]  from fc fc
  (byte) bd#72 ← phi( fc/(byte) bd#71 )
  (bool~) fc::$2 ← (byte) bd#72 == (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) fc::$3 ← ! (bool~) fc::$2
  if((bool~) fc::$3) goto fc::@2
  to:fc::@2
fc::@2: scope:[fc]  from fc::@1 fc::@1
  (byte) bd#73 ← phi( fc::@1/(byte) bd#72 )
  (bool~) fc::$4 ← (byte) bd#73 == (byte/signed byte/word/signed word/dword/signed dword) 2
  (bool~) fc::$5 ← ! (bool~) fc::$4
  if((bool~) fc::$5) goto fc::@3
  to:fc::@3
fc::@3: scope:[fc]  from fc::@2 fc::@2
  (byte) bd#74 ← phi( fc::@2/(byte) bd#73 )
  (bool~) fc::$6 ← (byte) bd#74 == (byte/signed byte/word/signed word/dword/signed dword) 3
  (bool~) fc::$7 ← ! (bool~) fc::$6
  if((bool~) fc::$7) goto fc::@4
  to:fc::@4
fc::@4: scope:[fc]  from fc::@3 fc::@3
  (byte) bd#75 ← phi( fc::@3/(byte) bd#74 )
  (bool~) fc::$8 ← (byte) bd#75 == (byte/signed byte/word/signed word/dword/signed dword) 4
  (bool~) fc::$9 ← ! (bool~) fc::$8
  if((bool~) fc::$9) goto fc::@5
  to:fc::@5
fc::@5: scope:[fc]  from fc::@4 fc::@4
  (byte) bd#76 ← phi( fc::@4/(byte) bd#75 )
  (bool~) fc::$10 ← (byte) bd#76 == (byte/signed byte/word/signed word/dword/signed dword) 5
  (bool~) fc::$11 ← ! (bool~) fc::$10
  if((bool~) fc::$11) goto fc::@6
  to:fc::@6
fc::@6: scope:[fc]  from fc::@5 fc::@5
  (byte) bd#77 ← phi( fc::@5/(byte) bd#76 )
  (bool~) fc::$12 ← (byte) bd#77 == (byte/signed byte/word/signed word/dword/signed dword) 6
  (bool~) fc::$13 ← ! (bool~) fc::$12
  if((bool~) fc::$13) goto fc::@7
  to:fc::@7
fc::@7: scope:[fc]  from fc::@6 fc::@6
  (byte) bd#78 ← phi( fc::@6/(byte) bd#77 )
  (bool~) fc::$14 ← (byte) bd#78 == (byte/signed byte/word/signed word/dword/signed dword) 7
  (bool~) fc::$15 ← ! (bool~) fc::$14
  if((bool~) fc::$15) goto fc::@8
  to:fc::@8
fc::@8: scope:[fc]  from fc::@7 fc::@7
  (byte) bd#79 ← phi( fc::@7/(byte) bd#78 )
  (bool~) fc::$16 ← (byte) bd#79 == (byte/signed byte/word/signed word/dword/signed dword) 8
  (bool~) fc::$17 ← ! (bool~) fc::$16
  if((bool~) fc::$17) goto fc::@9
  to:fc::@9
fc::@9: scope:[fc]  from fc::@8 fc::@8
  (byte) bd#80 ← phi( fc::@8/(byte) bd#79 )
  (bool~) fc::$18 ← (byte) bd#80 == (byte/signed byte/word/signed word/dword/signed dword) 9
  (bool~) fc::$19 ← ! (bool~) fc::$18
  if((bool~) fc::$19) goto fc::@10
  to:fc::@return
fc::@10: scope:[fc]  from fc::@9
  to:fc::@return
fc::@return: scope:[fc]  from fc::@10 fc::@9
  return 
  to:@return
@5: scope:[]  from @begin
  (byte) ba#28 ← phi( @begin/(byte) ba#0 )
  (byte) bd#117 ← phi( @begin/(byte) bd#0 )
  (byte) bc#93 ← phi( @begin/(byte) bc#0 )
  (byte) bb#60 ← phi( @begin/(byte) bb#0 )
  call main 
  to:@6
@6: scope:[]  from @5
  (byte) ba#16 ← phi( @5/(byte) ba#2 )
  (byte) bd#81 ← phi( @5/(byte) bd#2 )
  (byte) bc#59 ← phi( @5/(byte) bc#2 )
  (byte) bb#37 ← phi( @5/(byte) bb#2 )
  (byte) bb#14 ← (byte) bb#37
  (byte) bc#25 ← (byte) bc#59
  (byte) bd#36 ← (byte) bd#81
  (byte) ba#3 ← (byte) ba#16
  to:@end
@end: scope:[]  from @6

SYMBOL TABLE SSA
(label) @5
(label) @6
(label) @begin
(label) @end
(byte) ba
(byte) ba#0
(byte) ba#1
(byte) ba#10
(byte) ba#11
(byte) ba#12
(byte) ba#13
(byte) ba#14
(byte) ba#15
(byte) ba#16
(byte) ba#17
(byte) ba#18
(byte) ba#19
(byte) ba#2
(byte) ba#20
(byte) ba#21
(byte) ba#22
(byte) ba#23
(byte) ba#24
(byte) ba#25
(byte) ba#26
(byte) ba#27
(byte) ba#28
(byte) ba#29
(byte) ba#3
(byte) ba#30
(byte) ba#31
(byte) ba#32
(byte) ba#33
(byte) ba#34
(byte) ba#35
(byte) ba#36
(byte) ba#37
(byte) ba#38
(byte) ba#4
(byte) ba#5
(byte) ba#6
(byte) ba#7
(byte) ba#8
(byte) ba#9
(byte) bb
(byte) bb#0
(byte) bb#1
(byte) bb#10
(byte) bb#11
(byte) bb#12
(byte) bb#13
(byte) bb#14
(byte) bb#15
(byte) bb#16
(byte) bb#17
(byte) bb#18
(byte) bb#19
(byte) bb#2
(byte) bb#20
(byte) bb#21
(byte) bb#22
(byte) bb#23
(byte) bb#24
(byte) bb#25
(byte) bb#26
(byte) bb#27
(byte) bb#28
(byte) bb#29
(byte) bb#3
(byte) bb#30
(byte) bb#31
(byte) bb#32
(byte) bb#33
(byte) bb#34
(byte) bb#35
(byte) bb#36
(byte) bb#37
(byte) bb#38
(byte) bb#39
(byte) bb#4
(byte) bb#40
(byte) bb#41
(byte) bb#42
(byte) bb#43
(byte) bb#44
(byte) bb#45
(byte) bb#46
(byte) bb#47
(byte) bb#48
(byte) bb#49
(byte) bb#5
(byte) bb#50
(byte) bb#51
(byte) bb#52
(byte) bb#53
(byte) bb#54
(byte) bb#55
(byte) bb#56
(byte) bb#57
(byte) bb#58
(byte) bb#59
(byte) bb#6
(byte) bb#60
(byte) bb#61
(byte) bb#62
(byte) bb#63
(byte) bb#64
(byte) bb#65
(byte) bb#66
(byte) bb#67
(byte) bb#68
(byte) bb#69
(byte) bb#7
(byte) bb#70
(byte) bb#71
(byte) bb#72
(byte) bb#73
(byte) bb#74
(byte) bb#75
(byte) bb#76
(byte) bb#77
(byte) bb#78
(byte) bb#79
(byte) bb#8
(byte) bb#80
(byte) bb#9
(byte) bc
(byte) bc#0
(byte) bc#1
(byte) bc#10
(byte) bc#100
(byte) bc#101
(byte) bc#102
(byte) bc#103
(byte) bc#104
(byte) bc#105
(byte) bc#106
(byte) bc#107
(byte) bc#108
(byte) bc#109
(byte) bc#11
(byte) bc#110
(byte) bc#111
(byte) bc#112
(byte) bc#113
(byte) bc#114
(byte) bc#115
(byte) bc#116
(byte) bc#117
(byte) bc#118
(byte) bc#119
(byte) bc#12
(byte) bc#120
(byte) bc#121
(byte) bc#122
(byte) bc#123
(byte) bc#13
(byte) bc#14
(byte) bc#15
(byte) bc#16
(byte) bc#17
(byte) bc#18
(byte) bc#19
(byte) bc#2
(byte) bc#20
(byte) bc#21
(byte) bc#22
(byte) bc#23
(byte) bc#24
(byte) bc#25
(byte) bc#26
(byte) bc#27
(byte) bc#28
(byte) bc#29
(byte) bc#3
(byte) bc#30
(byte) bc#31
(byte) bc#32
(byte) bc#33
(byte) bc#34
(byte) bc#35
(byte) bc#36
(byte) bc#37
(byte) bc#38
(byte) bc#39
(byte) bc#4
(byte) bc#40
(byte) bc#41
(byte) bc#42
(byte) bc#43
(byte) bc#44
(byte) bc#45
(byte) bc#46
(byte) bc#47
(byte) bc#48
(byte) bc#49
(byte) bc#5
(byte) bc#50
(byte) bc#51
(byte) bc#52
(byte) bc#53
(byte) bc#54
(byte) bc#55
(byte) bc#56
(byte) bc#57
(byte) bc#58
(byte) bc#59
(byte) bc#6
(byte) bc#60
(byte) bc#61
(byte) bc#62
(byte) bc#63
(byte) bc#64
(byte) bc#65
(byte) bc#66
(byte) bc#67
(byte) bc#68
(byte) bc#69
(byte) bc#7
(byte) bc#70
(byte) bc#71
(byte) bc#72
(byte) bc#73
(byte) bc#74
(byte) bc#75
(byte) bc#76
(byte) bc#77
(byte) bc#78
(byte) bc#79
(byte) bc#8
(byte) bc#80
(byte) bc#81
(byte) bc#82
(byte) bc#83
(byte) bc#84
(byte) bc#85
(byte) bc#86
(byte) bc#87
(byte) bc#88
(byte) bc#89
(byte) bc#9
(byte) bc#90
(byte) bc#91
(byte) bc#92
(byte) bc#93
(byte) bc#94
(byte) bc#95
(byte) bc#96
(byte) bc#97
(byte) bc#98
(byte) bc#99
(byte) bd
(byte) bd#0
(byte) bd#1
(byte) bd#10
(byte) bd#100
(byte) bd#101
(byte) bd#102
(byte) bd#103
(byte) bd#104
(byte) bd#105
(byte) bd#106
(byte) bd#107
(byte) bd#108
(byte) bd#109
(byte) bd#11
(byte) bd#110
(byte) bd#111
(byte) bd#112
(byte) bd#113
(byte) bd#114
(byte) bd#115
(byte) bd#116
(byte) bd#117
(byte) bd#118
(byte) bd#119
(byte) bd#12
(byte) bd#120
(byte) bd#121
(byte) bd#122
(byte) bd#123
(byte) bd#124
(byte) bd#125
(byte) bd#126
(byte) bd#127
(byte) bd#128
(byte) bd#129
(byte) bd#13
(byte) bd#130
(byte) bd#131
(byte) bd#132
(byte) bd#133
(byte) bd#134
(byte) bd#135
(byte) bd#136
(byte) bd#137
(byte) bd#138
(byte) bd#139
(byte) bd#14
(byte) bd#140
(byte) bd#141
(byte) bd#142
(byte) bd#143
(byte) bd#144
(byte) bd#145
(byte) bd#146
(byte) bd#147
(byte) bd#148
(byte) bd#15
(byte) bd#16
(byte) bd#17
(byte) bd#18
(byte) bd#19
(byte) bd#2
(byte) bd#20
(byte) bd#21
(byte) bd#22
(byte) bd#23
(byte) bd#24
(byte) bd#25
(byte) bd#26
(byte) bd#27
(byte) bd#28
(byte) bd#29
(byte) bd#3
(byte) bd#30
(byte) bd#31
(byte) bd#32
(byte) bd#33
(byte) bd#34
(byte) bd#35
(byte) bd#36
(byte) bd#37
(byte) bd#38
(byte) bd#39
(byte) bd#4
(byte) bd#40
(byte) bd#41
(byte) bd#42
(byte) bd#43
(byte) bd#44
(byte) bd#45
(byte) bd#46
(byte) bd#47
(byte) bd#48
(byte) bd#49
(byte) bd#5
(byte) bd#50
(byte) bd#51
(byte) bd#52
(byte) bd#53
(byte) bd#54
(byte) bd#55
(byte) bd#56
(byte) bd#57
(byte) bd#58
(byte) bd#59
(byte) bd#6
(byte) bd#60
(byte) bd#61
(byte) bd#62
(byte) bd#63
(byte) bd#64
(byte) bd#65
(byte) bd#66
(byte) bd#67
(byte) bd#68
(byte) bd#69
(byte) bd#7
(byte) bd#70
(byte) bd#71
(byte) bd#72
(byte) bd#73
(byte) bd#74
(byte) bd#75
(byte) bd#76
(byte) bd#77
(byte) bd#78
(byte) bd#79
(byte) bd#8
(byte) bd#80
(byte) bd#81
(byte) bd#82
(byte) bd#83
(byte) bd#84
(byte) bd#85
(byte) bd#86
(byte) bd#87
(byte) bd#88
(byte) bd#89
(byte) bd#9
(byte) bd#90
(byte) bd#91
(byte) bd#92
(byte) bd#93
(byte) bd#94
(byte) bd#95
(byte) bd#96
(byte) bd#97
(byte) bd#98
(byte) bd#99
(void()) f0()
(bool~) f0::$0
(bool~) f0::$1
(bool~) f0::$10
(bool~) f0::$11
(bool~) f0::$12
(bool~) f0::$13
(bool~) f0::$14
(bool~) f0::$15
(bool~) f0::$16
(bool~) f0::$17
(bool~) f0::$18
(bool~) f0::$19
(bool~) f0::$2
(bool~) f0::$3
(bool~) f0::$4
(bool~) f0::$5
(bool~) f0::$6
(bool~) f0::$7
(bool~) f0::$8
(bool~) f0::$9
(label) f0::@1
(label) f0::@10
(label) f0::@11
(label) f0::@12
(label) f0::@13
(label) f0::@14
(label) f0::@15
(label) f0::@16
(label) f0::@17
(label) f0::@18
(label) f0::@19
(label) f0::@2
(label) f0::@20
(label) f0::@21
(label) f0::@22
(label) f0::@23
(label) f0::@24
(label) f0::@25
(label) f0::@26
(label) f0::@27
(label) f0::@28
(label) f0::@29
(label) f0::@3
(label) f0::@30
(label) f0::@4
(label) f0::@5
(label) f0::@6
(label) f0::@7
(label) f0::@8
(label) f0::@9
(label) f0::@return
(void()) fa()
(bool~) fa::$0
(bool~) fa::$1
(bool~) fa::$10
(bool~) fa::$11
(bool~) fa::$12
(bool~) fa::$13
(bool~) fa::$14
(bool~) fa::$15
(bool~) fa::$16
(bool~) fa::$17
(bool~) fa::$18
(bool~) fa::$19
(bool~) fa::$2
(bool~) fa::$3
(bool~) fa::$4
(bool~) fa::$5
(bool~) fa::$6
(bool~) fa::$7
(bool~) fa::$8
(bool~) fa::$9
(label) fa::@1
(label) fa::@10
(label) fa::@11
(label) fa::@12
(label) fa::@13
(label) fa::@14
(label) fa::@15
(label) fa::@16
(label) fa::@17
(label) fa::@18
(label) fa::@19
(label) fa::@2
(label) fa::@20
(label) fa::@21
(label) fa::@22
(label) fa::@23
(label) fa::@24
(label) fa::@25
(label) fa::@26
(label) fa::@27
(label) fa::@28
(label) fa::@29
(label) fa::@3
(label) fa::@30
(label) fa::@4
(label) fa::@5
(label) fa::@6
(label) fa::@7
(label) fa::@8
(label) fa::@9
(label) fa::@return
(void()) fb()
(bool~) fb::$0
(bool~) fb::$1
(bool~) fb::$10
(bool~) fb::$11
(bool~) fb::$12
(bool~) fb::$13
(bool~) fb::$14
(bool~) fb::$15
(bool~) fb::$16
(bool~) fb::$17
(bool~) fb::$18
(bool~) fb::$19
(bool~) fb::$2
(bool~) fb::$3
(bool~) fb::$4
(bool~) fb::$5
(bool~) fb::$6
(bool~) fb::$7
(bool~) fb::$8
(bool~) fb::$9
(label) fb::@1
(label) fb::@10
(label) fb::@11
(label) fb::@12
(label) fb::@13
(label) fb::@14
(label) fb::@15
(label) fb::@16
(label) fb::@17
(label) fb::@18
(label) fb::@19
(label) fb::@2
(label) fb::@20
(label) fb::@21
(label) fb::@22
(label) fb::@23
(label) fb::@24
(label) fb::@25
(label) fb::@26
(label) fb::@27
(label) fb::@28
(label) fb::@29
(label) fb::@3
(label) fb::@30
(label) fb::@4
(label) fb::@5
(label) fb::@6
(label) fb::@7
(label) fb::@8
(label) fb::@9
(label) fb::@return
(void()) fc()
(bool~) fc::$0
(bool~) fc::$1
(bool~) fc::$10
(bool~) fc::$11
(bool~) fc::$12
(bool~) fc::$13
(bool~) fc::$14
(bool~) fc::$15
(bool~) fc::$16
(bool~) fc::$17
(bool~) fc::$18
(bool~) fc::$19
(bool~) fc::$2
(bool~) fc::$3
(bool~) fc::$4
(bool~) fc::$5
(bool~) fc::$6
(bool~) fc::$7
(bool~) fc::$8
(bool~) fc::$9
(label) fc::@1
(label) fc::@10
(label) fc::@2
(label) fc::@3
(label) fc::@4
(label) fc::@5
(label) fc::@6
(label) fc::@7
(label) fc::@8
(label) fc::@9
(label) fc::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@7
(label) main::@return

Inversing boolean not [22] (bool~) f0::$1 ← (byte) ba#6 != (byte/signed byte/word/signed word/dword/signed dword) 0 from [21] (bool~) f0::$0 ← (byte) ba#6 == (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [26] (bool~) f0::$3 ← (byte) ba#7 != (byte/signed byte/word/signed word/dword/signed dword) 1 from [25] (bool~) f0::$2 ← (byte) ba#7 == (byte/signed byte/word/signed word/dword/signed dword) 1
Inversing boolean not [36] (bool~) f0::$5 ← (byte) ba#8 != (byte/signed byte/word/signed word/dword/signed dword) 2 from [35] (bool~) f0::$4 ← (byte) ba#8 == (byte/signed byte/word/signed word/dword/signed dword) 2
Inversing boolean not [46] (bool~) f0::$7 ← (byte) ba#9 != (byte/signed byte/word/signed word/dword/signed dword) 3 from [45] (bool~) f0::$6 ← (byte) ba#9 == (byte/signed byte/word/signed word/dword/signed dword) 3
Inversing boolean not [56] (bool~) f0::$9 ← (byte) ba#10 != (byte/signed byte/word/signed word/dword/signed dword) 4 from [55] (bool~) f0::$8 ← (byte) ba#10 == (byte/signed byte/word/signed word/dword/signed dword) 4
Inversing boolean not [66] (bool~) f0::$11 ← (byte) ba#11 != (byte/signed byte/word/signed word/dword/signed dword) 5 from [65] (bool~) f0::$10 ← (byte) ba#11 == (byte/signed byte/word/signed word/dword/signed dword) 5
Inversing boolean not [76] (bool~) f0::$13 ← (byte) ba#12 != (byte/signed byte/word/signed word/dword/signed dword) 6 from [75] (bool~) f0::$12 ← (byte) ba#12 == (byte/signed byte/word/signed word/dword/signed dword) 6
Inversing boolean not [86] (bool~) f0::$15 ← (byte) ba#13 != (byte/signed byte/word/signed word/dword/signed dword) 7 from [85] (bool~) f0::$14 ← (byte) ba#13 == (byte/signed byte/word/signed word/dword/signed dword) 7
Inversing boolean not [96] (bool~) f0::$17 ← (byte) ba#14 != (byte/signed byte/word/signed word/dword/signed dword) 8 from [95] (bool~) f0::$16 ← (byte) ba#14 == (byte/signed byte/word/signed word/dword/signed dword) 8
Inversing boolean not [106] (bool~) f0::$19 ← (byte) ba#15 != (byte/signed byte/word/signed word/dword/signed dword) 9 from [105] (bool~) f0::$18 ← (byte) ba#15 == (byte/signed byte/word/signed word/dword/signed dword) 9
Inversing boolean not [128] (bool~) fa::$1 ← (byte) bb#27 != (byte/signed byte/word/signed word/dword/signed dword) 0 from [127] (bool~) fa::$0 ← (byte) bb#27 == (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [132] (bool~) fa::$3 ← (byte) bb#28 != (byte/signed byte/word/signed word/dword/signed dword) 1 from [131] (bool~) fa::$2 ← (byte) bb#28 == (byte/signed byte/word/signed word/dword/signed dword) 1
Inversing boolean not [141] (bool~) fa::$5 ← (byte) bb#29 != (byte/signed byte/word/signed word/dword/signed dword) 2 from [140] (bool~) fa::$4 ← (byte) bb#29 == (byte/signed byte/word/signed word/dword/signed dword) 2
Inversing boolean not [150] (bool~) fa::$7 ← (byte) bb#30 != (byte/signed byte/word/signed word/dword/signed dword) 3 from [149] (bool~) fa::$6 ← (byte) bb#30 == (byte/signed byte/word/signed word/dword/signed dword) 3
Inversing boolean not [159] (bool~) fa::$9 ← (byte) bb#31 != (byte/signed byte/word/signed word/dword/signed dword) 4 from [158] (bool~) fa::$8 ← (byte) bb#31 == (byte/signed byte/word/signed word/dword/signed dword) 4
Inversing boolean not [168] (bool~) fa::$11 ← (byte) bb#32 != (byte/signed byte/word/signed word/dword/signed dword) 5 from [167] (bool~) fa::$10 ← (byte) bb#32 == (byte/signed byte/word/signed word/dword/signed dword) 5
Inversing boolean not [177] (bool~) fa::$13 ← (byte) bb#33 != (byte/signed byte/word/signed word/dword/signed dword) 6 from [176] (bool~) fa::$12 ← (byte) bb#33 == (byte/signed byte/word/signed word/dword/signed dword) 6
Inversing boolean not [186] (bool~) fa::$15 ← (byte) bb#34 != (byte/signed byte/word/signed word/dword/signed dword) 7 from [185] (bool~) fa::$14 ← (byte) bb#34 == (byte/signed byte/word/signed word/dword/signed dword) 7
Inversing boolean not [195] (bool~) fa::$17 ← (byte) bb#35 != (byte/signed byte/word/signed word/dword/signed dword) 8 from [194] (bool~) fa::$16 ← (byte) bb#35 == (byte/signed byte/word/signed word/dword/signed dword) 8
Inversing boolean not [204] (bool~) fa::$19 ← (byte) bb#36 != (byte/signed byte/word/signed word/dword/signed dword) 9 from [203] (bool~) fa::$18 ← (byte) bb#36 == (byte/signed byte/word/signed word/dword/signed dword) 9
Inversing boolean not [223] (bool~) fb::$1 ← (byte) bc#49 != (byte/signed byte/word/signed word/dword/signed dword) 0 from [222] (bool~) fb::$0 ← (byte) bc#49 == (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [227] (bool~) fb::$3 ← (byte) bc#50 != (byte/signed byte/word/signed word/dword/signed dword) 1 from [226] (bool~) fb::$2 ← (byte) bc#50 == (byte/signed byte/word/signed word/dword/signed dword) 1
Inversing boolean not [235] (bool~) fb::$5 ← (byte) bc#51 != (byte/signed byte/word/signed word/dword/signed dword) 2 from [234] (bool~) fb::$4 ← (byte) bc#51 == (byte/signed byte/word/signed word/dword/signed dword) 2
Inversing boolean not [243] (bool~) fb::$7 ← (byte) bc#52 != (byte/signed byte/word/signed word/dword/signed dword) 3 from [242] (bool~) fb::$6 ← (byte) bc#52 == (byte/signed byte/word/signed word/dword/signed dword) 3
Inversing boolean not [251] (bool~) fb::$9 ← (byte) bc#53 != (byte/signed byte/word/signed word/dword/signed dword) 4 from [250] (bool~) fb::$8 ← (byte) bc#53 == (byte/signed byte/word/signed word/dword/signed dword) 4
Inversing boolean not [259] (bool~) fb::$11 ← (byte) bc#54 != (byte/signed byte/word/signed word/dword/signed dword) 5 from [258] (bool~) fb::$10 ← (byte) bc#54 == (byte/signed byte/word/signed word/dword/signed dword) 5
Inversing boolean not [267] (bool~) fb::$13 ← (byte) bc#55 != (byte/signed byte/word/signed word/dword/signed dword) 6 from [266] (bool~) fb::$12 ← (byte) bc#55 == (byte/signed byte/word/signed word/dword/signed dword) 6
Inversing boolean not [275] (bool~) fb::$15 ← (byte) bc#56 != (byte/signed byte/word/signed word/dword/signed dword) 7 from [274] (bool~) fb::$14 ← (byte) bc#56 == (byte/signed byte/word/signed word/dword/signed dword) 7
Inversing boolean not [283] (bool~) fb::$17 ← (byte) bc#57 != (byte/signed byte/word/signed word/dword/signed dword) 8 from [282] (bool~) fb::$16 ← (byte) bc#57 == (byte/signed byte/word/signed word/dword/signed dword) 8
Inversing boolean not [291] (bool~) fb::$19 ← (byte) bc#58 != (byte/signed byte/word/signed word/dword/signed dword) 9 from [290] (bool~) fb::$18 ← (byte) bc#58 == (byte/signed byte/word/signed word/dword/signed dword) 9
Inversing boolean not [306] (bool~) fc::$1 ← (byte) bd#71 != (byte/signed byte/word/signed word/dword/signed dword) 0 from [305] (bool~) fc::$0 ← (byte) bd#71 == (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not [310] (bool~) fc::$3 ← (byte) bd#72 != (byte/signed byte/word/signed word/dword/signed dword) 1 from [309] (bool~) fc::$2 ← (byte) bd#72 == (byte/signed byte/word/signed word/dword/signed dword) 1
Inversing boolean not [314] (bool~) fc::$5 ← (byte) bd#73 != (byte/signed byte/word/signed word/dword/signed dword) 2 from [313] (bool~) fc::$4 ← (byte) bd#73 == (byte/signed byte/word/signed word/dword/signed dword) 2
Inversing boolean not [318] (bool~) fc::$7 ← (byte) bd#74 != (byte/signed byte/word/signed word/dword/signed dword) 3 from [317] (bool~) fc::$6 ← (byte) bd#74 == (byte/signed byte/word/signed word/dword/signed dword) 3
Inversing boolean not [322] (bool~) fc::$9 ← (byte) bd#75 != (byte/signed byte/word/signed word/dword/signed dword) 4 from [321] (bool~) fc::$8 ← (byte) bd#75 == (byte/signed byte/word/signed word/dword/signed dword) 4
Inversing boolean not [326] (bool~) fc::$11 ← (byte) bd#76 != (byte/signed byte/word/signed word/dword/signed dword) 5 from [325] (bool~) fc::$10 ← (byte) bd#76 == (byte/signed byte/word/signed word/dword/signed dword) 5
Inversing boolean not [330] (bool~) fc::$13 ← (byte) bd#77 != (byte/signed byte/word/signed word/dword/signed dword) 6 from [329] (bool~) fc::$12 ← (byte) bd#77 == (byte/signed byte/word/signed word/dword/signed dword) 6
Inversing boolean not [334] (bool~) fc::$15 ← (byte) bd#78 != (byte/signed byte/word/signed word/dword/signed dword) 7 from [333] (bool~) fc::$14 ← (byte) bd#78 == (byte/signed byte/word/signed word/dword/signed dword) 7
Inversing boolean not [338] (bool~) fc::$17 ← (byte) bd#79 != (byte/signed byte/word/signed word/dword/signed dword) 8 from [337] (bool~) fc::$16 ← (byte) bd#79 == (byte/signed byte/word/signed word/dword/signed dword) 8
Inversing boolean not [342] (bool~) fc::$19 ← (byte) bd#80 != (byte/signed byte/word/signed word/dword/signed dword) 9 from [341] (bool~) fc::$18 ← (byte) bd#80 == (byte/signed byte/word/signed word/dword/signed dword) 9
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte) bb#16 = (byte) bb#38 (byte) bb#39 (byte) bb#2 
Alias (byte) bc#2 = (byte) bc#60 (byte) bc#61 (byte) bc#27 
Alias (byte) bd#2 = (byte) bd#82 (byte) bd#83 (byte) bd#38 
Alias (byte) ba#17 = (byte) ba#18 (byte) ba#4 (byte) ba#5 (byte) ba#2 
Alias (byte) bb#1 = (byte) bb#15 
Alias (byte) bc#1 = (byte) bc#26 
Alias (byte) bd#1 = (byte) bd#37 
Alias (byte) bb#17 = (byte) bb#40 
Alias (byte) bc#62 = (byte) bc#95 
Alias (byte) bd#119 = (byte) bd#84 
Alias (byte) ba#19 = (byte) ba#30 (byte) ba#6 
Alias (byte) bb#3 = (byte) bb#62 
Alias (byte) bc#28 = (byte) bc#3 
Alias (byte) bd#3 = (byte) bd#39 
Alias (byte) bb#18 = (byte) bb#41 
Alias (byte) bc#63 = (byte) bc#96 
Alias (byte) bd#120 = (byte) bd#85 
Alias (byte) ba#20 = (byte) ba#31 (byte) ba#7 
Alias (byte) bb#4 = (byte) bb#63 
Alias (byte) bc#29 = (byte) bc#4 
Alias (byte) bd#4 = (byte) bd#40 
Alias (byte) bb#19 = (byte) bb#42 
Alias (byte) bc#64 = (byte) bc#97 
Alias (byte) bd#121 = (byte) bd#86 
Alias (byte) ba#21 = (byte) ba#32 (byte) ba#8 
Alias (byte) bb#5 = (byte) bb#64 
Alias (byte) bc#30 = (byte) bc#5 
Alias (byte) bd#41 = (byte) bd#5 
Alias (byte) bb#20 = (byte) bb#43 
Alias (byte) bc#65 = (byte) bc#98 
Alias (byte) bd#122 = (byte) bd#87 
Alias (byte) ba#22 = (byte) ba#33 (byte) ba#9 
Alias (byte) bb#6 = (byte) bb#65 
Alias (byte) bc#31 = (byte) bc#6 
Alias (byte) bd#42 = (byte) bd#6 
Alias (byte) bb#21 = (byte) bb#44 
Alias (byte) bc#66 = (byte) bc#99 
Alias (byte) bd#123 = (byte) bd#88 
Alias (byte) ba#10 = (byte) ba#34 (byte) ba#23 
Alias (byte) bb#66 = (byte) bb#7 
Alias (byte) bc#32 = (byte) bc#7 
Alias (byte) bd#43 = (byte) bd#7 
Alias (byte) bb#22 = (byte) bb#45 
Alias (byte) bc#100 = (byte) bc#67 
Alias (byte) bd#124 = (byte) bd#89 
Alias (byte) ba#11 = (byte) ba#35 (byte) ba#24 
Alias (byte) bb#67 = (byte) bb#8 
Alias (byte) bc#33 = (byte) bc#8 
Alias (byte) bd#44 = (byte) bd#8 
Alias (byte) bb#23 = (byte) bb#46 
Alias (byte) bc#101 = (byte) bc#68 
Alias (byte) bd#125 = (byte) bd#90 
Alias (byte) ba#12 = (byte) ba#36 (byte) ba#25 
Alias (byte) bb#68 = (byte) bb#9 
Alias (byte) bc#34 = (byte) bc#9 
Alias (byte) bd#45 = (byte) bd#9 
Alias (byte) bb#24 = (byte) bb#47 
Alias (byte) bc#102 = (byte) bc#69 
Alias (byte) bd#126 = (byte) bd#91 
Alias (byte) ba#13 = (byte) ba#37 (byte) ba#26 
Alias (byte) bb#10 = (byte) bb#69 
Alias (byte) bc#10 = (byte) bc#35 
Alias (byte) bd#10 = (byte) bd#46 
Alias (byte) bb#25 = (byte) bb#48 
Alias (byte) bc#103 = (byte) bc#70 
Alias (byte) bd#127 = (byte) bd#92 
Alias (byte) ba#14 = (byte) ba#38 (byte) ba#27 
Alias (byte) bb#11 = (byte) bb#80 
Alias (byte) bc#11 = (byte) bc#36 
Alias (byte) bd#11 = (byte) bd#47 
Alias (byte) bb#49 = (byte) bb#70 
Alias (byte) bc#104 = (byte) bc#72 (byte) bc#71 
Alias (byte) bd#128 = (byte) bd#94 (byte) bd#93 
Alias (byte) bb#12 = (byte) bb#50 
Alias (byte) bc#12 = (byte) bc#37 
Alias (byte) bd#12 = (byte) bd#48 
Alias (byte) bb#13 = (byte) bb#26 
Alias (byte) bc#13 = (byte) bc#38 
Alias (byte) bd#13 = (byte) bd#49 
Alias (byte) bc#39 = (byte) bc#73 
Alias (byte) bd#129 = (byte) bd#95 
Alias (byte) bb#27 = (byte) bb#71 (byte) bb#51 
Alias (byte) bc#105 = (byte) bc#14 
Alias (byte) bd#14 = (byte) bd#50 
Alias (byte) bc#40 = (byte) bc#74 
Alias (byte) bd#130 = (byte) bd#96 
Alias (byte) bb#28 = (byte) bb#72 (byte) bb#52 
Alias (byte) bc#106 = (byte) bc#15 
Alias (byte) bd#15 = (byte) bd#51 
Alias (byte) bc#41 = (byte) bc#75 
Alias (byte) bd#131 = (byte) bd#97 
Alias (byte) bb#29 = (byte) bb#73 (byte) bb#53 
Alias (byte) bc#107 = (byte) bc#16 
Alias (byte) bd#16 = (byte) bd#52 
Alias (byte) bc#42 = (byte) bc#76 
Alias (byte) bd#132 = (byte) bd#98 
Alias (byte) bb#30 = (byte) bb#74 (byte) bb#54 
Alias (byte) bc#108 = (byte) bc#17 
Alias (byte) bd#17 = (byte) bd#53 
Alias (byte) bc#43 = (byte) bc#77 
Alias (byte) bd#133 = (byte) bd#99 
Alias (byte) bb#31 = (byte) bb#75 (byte) bb#55 
Alias (byte) bc#109 = (byte) bc#18 
Alias (byte) bd#18 = (byte) bd#54 
Alias (byte) bc#44 = (byte) bc#78 
Alias (byte) bd#100 = (byte) bd#134 
Alias (byte) bb#32 = (byte) bb#76 (byte) bb#56 
Alias (byte) bc#110 = (byte) bc#19 
Alias (byte) bd#19 = (byte) bd#55 
Alias (byte) bc#45 = (byte) bc#79 
Alias (byte) bd#101 = (byte) bd#135 
Alias (byte) bb#33 = (byte) bb#77 (byte) bb#57 
Alias (byte) bc#111 = (byte) bc#20 
Alias (byte) bd#20 = (byte) bd#56 
Alias (byte) bc#46 = (byte) bc#80 
Alias (byte) bd#102 = (byte) bd#136 
Alias (byte) bb#34 = (byte) bb#78 (byte) bb#58 
Alias (byte) bc#112 = (byte) bc#21 
Alias (byte) bd#21 = (byte) bd#57 
Alias (byte) bc#47 = (byte) bc#81 
Alias (byte) bd#103 = (byte) bd#137 
Alias (byte) bb#35 = (byte) bb#79 (byte) bb#59 
Alias (byte) bc#123 = (byte) bc#22 
Alias (byte) bd#22 = (byte) bd#58 
Alias (byte) bc#113 = (byte) bc#82 
Alias (byte) bd#104 = (byte) bd#105 (byte) bd#138 
Alias (byte) bc#23 = (byte) bc#83 
Alias (byte) bd#23 = (byte) bd#59 
Alias (byte) bc#24 = (byte) bc#48 
Alias (byte) bd#24 = (byte) bd#60 
Alias (byte) bd#106 = (byte) bd#61 
Alias (byte) bc#114 = (byte) bc#49 (byte) bc#84 
Alias (byte) bd#139 = (byte) bd#25 
Alias (byte) bd#107 = (byte) bd#62 
Alias (byte) bc#115 = (byte) bc#50 (byte) bc#85 
Alias (byte) bd#140 = (byte) bd#26 
Alias (byte) bd#108 = (byte) bd#63 
Alias (byte) bc#116 = (byte) bc#51 (byte) bc#86 
Alias (byte) bd#141 = (byte) bd#27 
Alias (byte) bd#109 = (byte) bd#64 
Alias (byte) bc#117 = (byte) bc#52 (byte) bc#87 
Alias (byte) bd#142 = (byte) bd#28 
Alias (byte) bd#110 = (byte) bd#65 
Alias (byte) bc#118 = (byte) bc#53 (byte) bc#88 
Alias (byte) bd#143 = (byte) bd#29 
Alias (byte) bd#111 = (byte) bd#66 
Alias (byte) bc#119 = (byte) bc#54 (byte) bc#89 
Alias (byte) bd#144 = (byte) bd#30 
Alias (byte) bd#112 = (byte) bd#67 
Alias (byte) bc#120 = (byte) bc#55 (byte) bc#90 
Alias (byte) bd#145 = (byte) bd#31 
Alias (byte) bd#113 = (byte) bd#68 
Alias (byte) bc#121 = (byte) bc#56 (byte) bc#91 
Alias (byte) bd#146 = (byte) bd#32 
Alias (byte) bd#114 = (byte) bd#69 
Alias (byte) bc#122 = (byte) bc#57 (byte) bc#92 
Alias (byte) bd#148 = (byte) bd#33 
Alias (byte) bd#115 = (byte) bd#147 
Alias (byte) bd#116 = (byte) bd#34 
Alias (byte) bd#35 = (byte) bd#70 
Alias (byte) bd#71 = (byte) bd#72 (byte) bd#73 (byte) bd#74 (byte) bd#75 (byte) bd#76 (byte) bd#77 (byte) bd#78 (byte) bd#79 (byte) bd#80 
Alias (byte) bb#0 = (byte) bb#60 
Alias (byte) bc#0 = (byte) bc#93 
Alias (byte) bd#0 = (byte) bd#117 
Alias (byte) ba#0 = (byte) ba#28 
Alias (byte) bb#14 = (byte) bb#37 
Alias (byte) bc#25 = (byte) bc#59 
Alias (byte) bd#36 = (byte) bd#81 
Alias (byte) ba#16 = (byte) ba#3 
Successful SSA optimization Pass2AliasElimination
Alias (byte) ba#10 = (byte) ba#20 (byte) ba#19 (byte) ba#21 (byte) ba#22 (byte) ba#11 (byte) ba#12 (byte) ba#13 (byte) ba#14 (byte) ba#15 
Alias (byte) bb#27 = (byte) bb#28 (byte) bb#29 (byte) bb#30 (byte) bb#31 (byte) bb#32 (byte) bb#33 (byte) bb#34 (byte) bb#35 (byte) bb#36 
Alias (byte) bc#114 = (byte) bc#115 (byte) bc#116 (byte) bc#117 (byte) bc#118 (byte) bc#119 (byte) bc#120 (byte) bc#121 (byte) bc#122 (byte) bc#58 
Successful SSA optimization Pass2AliasElimination
Redundant Phi (byte) bb#61 (byte) bb#0
Redundant Phi (byte) bc#94 (byte) bc#0
Redundant Phi (byte) bd#118 (byte) bd#0
Redundant Phi (byte) ba#29 (byte) ba#0
Redundant Phi (byte) bb#1 (byte) bb#13
Redundant Phi (byte) bc#1 (byte) bc#13
Redundant Phi (byte) bd#1 (byte) bd#13
Redundant Phi (byte) ba#10 (byte) ba#17
Redundant Phi (byte) bb#17 (byte) bb#16
Redundant Phi (byte) bc#62 (byte) bc#2
Redundant Phi (byte) bd#119 (byte) bd#2
Redundant Phi (byte) bc#28 (byte) bc#24
Redundant Phi (byte) bd#3 (byte) bd#24
Redundant Phi (byte) bc#29 (byte) bc#24
Redundant Phi (byte) bd#4 (byte) bd#24
Redundant Phi (byte) bc#30 (byte) bc#24
Redundant Phi (byte) bd#41 (byte) bd#24
Redundant Phi (byte) bc#31 (byte) bc#24
Redundant Phi (byte) bd#42 (byte) bd#24
Redundant Phi (byte) bc#32 (byte) bc#24
Redundant Phi (byte) bd#43 (byte) bd#24
Redundant Phi (byte) bc#33 (byte) bc#24
Redundant Phi (byte) bd#44 (byte) bd#24
Redundant Phi (byte) bc#34 (byte) bc#24
Redundant Phi (byte) bd#45 (byte) bd#24
Redundant Phi (byte) bc#10 (byte) bc#24
Redundant Phi (byte) bd#10 (byte) bd#24
Redundant Phi (byte) bc#11 (byte) bc#24
Redundant Phi (byte) bd#11 (byte) bd#24
Redundant Phi (byte) bc#12 (byte) bc#24
Redundant Phi (byte) bd#12 (byte) bd#24
Redundant Phi (byte) bd#14 (byte) bd#35
Redundant Phi (byte) bd#15 (byte) bd#35
Redundant Phi (byte) bd#16 (byte) bd#35
Redundant Phi (byte) bd#17 (byte) bd#35
Redundant Phi (byte) bd#18 (byte) bd#35
Redundant Phi (byte) bd#19 (byte) bd#35
Redundant Phi (byte) bd#20 (byte) bd#35
Redundant Phi (byte) bd#21 (byte) bd#35
Redundant Phi (byte) bd#22 (byte) bd#35
Redundant Phi (byte) bd#23 (byte) bd#35
Redundant Phi (byte) bb#14 (byte) bb#16
Redundant Phi (byte) bc#25 (byte) bc#2
Redundant Phi (byte) bd#36 (byte) bd#2
Redundant Phi (byte) ba#16 (byte) ba#17
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) f0::$1 [23] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto f0::@1
Simple Condition (bool~) f0::$3 [27] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto f0::@2
Simple Condition (bool~) f0::$5 [37] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 2) goto f0::@3
Simple Condition (bool~) f0::$7 [47] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto f0::@4
Simple Condition (bool~) f0::$9 [57] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto f0::@5
Simple Condition (bool~) f0::$11 [67] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto f0::@6
Simple Condition (bool~) f0::$13 [77] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto f0::@7
Simple Condition (bool~) f0::$15 [87] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto f0::@8
Simple Condition (bool~) f0::$17 [97] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto f0::@9
Simple Condition (bool~) f0::$19 [107] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 9) goto f0::@10
Simple Condition (bool~) fa::$1 [129] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto fa::@1
Simple Condition (bool~) fa::$3 [133] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto fa::@2
Simple Condition (bool~) fa::$5 [142] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 2) goto fa::@3
Simple Condition (bool~) fa::$7 [151] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto fa::@4
Simple Condition (bool~) fa::$9 [160] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto fa::@5
Simple Condition (bool~) fa::$11 [169] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto fa::@6
Simple Condition (bool~) fa::$13 [178] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto fa::@7
Simple Condition (bool~) fa::$15 [187] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto fa::@8
Simple Condition (bool~) fa::$17 [196] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto fa::@9
Simple Condition (bool~) fa::$19 [205] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 9) goto fa::@10
Simple Condition (bool~) fb::$1 [224] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto fb::@1
Simple Condition (bool~) fb::$3 [228] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto fb::@2
Simple Condition (bool~) fb::$5 [236] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 2) goto fb::@3
Simple Condition (bool~) fb::$7 [244] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto fb::@4
Simple Condition (bool~) fb::$9 [252] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto fb::@5
Simple Condition (bool~) fb::$11 [260] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto fb::@6
Simple Condition (bool~) fb::$13 [268] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto fb::@7
Simple Condition (bool~) fb::$15 [276] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto fb::@8
Simple Condition (bool~) fb::$17 [284] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto fb::@9
Simple Condition (bool~) fb::$19 [292] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 9) goto fb::@10
Simple Condition (bool~) fc::$1 [307] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto fc::@1
Simple Condition (bool~) fc::$3 [311] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto fc::@2
Simple Condition (bool~) fc::$5 [315] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 2) goto fc::@3
Simple Condition (bool~) fc::$7 [319] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto fc::@4
Simple Condition (bool~) fc::$9 [323] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto fc::@5
Simple Condition (bool~) fc::$11 [327] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto fc::@6
Simple Condition (bool~) fc::$13 [331] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto fc::@7
Simple Condition (bool~) fc::$15 [335] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto fc::@8
Simple Condition (bool~) fc::$17 [339] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto fc::@9
Simple Condition (bool~) fc::$19 [343] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 9) goto fc::@10
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) ba#0 = 0
Constant (const byte) bb#0 = 0
Constant (const byte) bc#0 = 0
Constant (const byte) bd#0 = 0
Constant (const byte) bb#12 = 0
Constant (const byte) bc#23 = 0
Constant (const byte) bd#116 = 0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [1] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Culled Empty Block (label) f0::@21
Culled Empty Block (label) f0::@22
Culled Empty Block (label) f0::@23
Culled Empty Block (label) f0::@24
Culled Empty Block (label) f0::@25
Culled Empty Block (label) f0::@26
Culled Empty Block (label) f0::@27
Culled Empty Block (label) f0::@28
Culled Empty Block (label) f0::@29
Culled Empty Block (label) f0::@10
Culled Empty Block (label) f0::@30
Culled Empty Block (label) fa::@21
Culled Empty Block (label) fa::@22
Culled Empty Block (label) fa::@23
Culled Empty Block (label) fa::@24
Culled Empty Block (label) fa::@25
Culled Empty Block (label) fa::@26
Culled Empty Block (label) fa::@27
Culled Empty Block (label) fa::@28
Culled Empty Block (label) fa::@29
Culled Empty Block (label) fa::@10
Culled Empty Block (label) fa::@30
Culled Empty Block (label) fb::@21
Culled Empty Block (label) fb::@22
Culled Empty Block (label) fb::@23
Culled Empty Block (label) fb::@24
Culled Empty Block (label) fb::@25
Culled Empty Block (label) fb::@26
Culled Empty Block (label) fb::@27
Culled Empty Block (label) fb::@28
Culled Empty Block (label) fb::@29
Culled Empty Block (label) fb::@10
Culled Empty Block (label) fb::@30
Culled Empty Block (label) @6
Successful SSA optimization Pass2CullEmptyBlocks
Inlining constant with var siblings (const byte) ba#0
Inlining constant with var siblings (const byte) bb#0
Inlining constant with var siblings (const byte) bc#0
Inlining constant with var siblings (const byte) bd#0
Inlining constant with var siblings (const byte) bb#12
Inlining constant with var siblings (const byte) bc#23
Inlining constant with var siblings (const byte) bd#116
Constant inlined bc#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined ba#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined bd#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined bc#23 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined bb#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined bb#12 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined bd#116 = (byte/signed byte/word/signed word/dword/signed dword) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting f0::@31(between f0 and f0::@1)
Added new block during phi lifting f0::@32(between f0::@1 and f0::@2)
Added new block during phi lifting f0::@33(between f0::@2 and f0::@3)
Added new block during phi lifting f0::@34(between f0::@3 and f0::@4)
Added new block during phi lifting f0::@35(between f0::@4 and f0::@5)
Added new block during phi lifting f0::@36(between f0::@5 and f0::@6)
Added new block during phi lifting f0::@37(between f0::@6 and f0::@7)
Added new block during phi lifting f0::@38(between f0::@7 and f0::@8)
Added new block during phi lifting f0::@39(between f0::@8 and f0::@9)
Added new block during phi lifting f0::@40(between f0::@9 and f0::@return)
Added new block during phi lifting fa::@31(between fa and fa::@1)
Added new block during phi lifting fa::@32(between fa::@1 and fa::@2)
Added new block during phi lifting fa::@33(between fa::@2 and fa::@3)
Added new block during phi lifting fa::@34(between fa::@3 and fa::@4)
Added new block during phi lifting fa::@35(between fa::@4 and fa::@5)
Added new block during phi lifting fa::@36(between fa::@5 and fa::@6)
Added new block during phi lifting fa::@37(between fa::@6 and fa::@7)
Added new block during phi lifting fa::@38(between fa::@7 and fa::@8)
Added new block during phi lifting fa::@39(between fa::@8 and fa::@9)
Added new block during phi lifting fa::@40(between fa::@9 and fa::@return)
Added new block during phi lifting fb::@31(between fb and fb::@1)
Added new block during phi lifting fb::@32(between fb::@1 and fb::@2)
Added new block during phi lifting fb::@33(between fb::@2 and fb::@3)
Added new block during phi lifting fb::@34(between fb::@3 and fb::@4)
Added new block during phi lifting fb::@35(between fb::@4 and fb::@5)
Added new block during phi lifting fb::@36(between fb::@5 and fb::@6)
Added new block during phi lifting fb::@37(between fb::@6 and fb::@7)
Added new block during phi lifting fb::@38(between fb::@7 and fb::@8)
Added new block during phi lifting fb::@39(between fb::@8 and fb::@9)
Added new block during phi lifting fb::@40(between fb::@9 and fb::@return)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @5
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of fb::@20
Adding NOP phi() at start of fc::@10
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to f0:7 
Calls in [f0] to fa:18 fa:28 fa:38 fa:48 fa:58 fa:68 fa:78 fa:88 fa:98 fa:106 
Calls in [fa] to fb:146 fb:154 fb:162 fb:170 fb:178 fb:186 fb:194 fb:202 fb:210 fb:216 
Calls in [fb] to fc:244 fc:250 fc:256 fc:262 fc:268 fc:274 fc:280 fc:286 fc:292 fc:297 

Created 70 initial phi equivalence classes
Coalesced [9] bb#81 ← bb#13
Coalesced [10] bc#124 ← bc#13
Coalesced [11] bd#149 ← bd#13
Coalesced [12] ba#39 ← ba#1
Not coalescing [15] bb#101 ← bb#3
Coalesced [16] bc#145 ← bc#2
Coalesced [17] bd#170 ← bd#2
Coalesced [19] bb#83 ← bb#3
Coalesced [20] bc#126 ← bc#24
Coalesced [21] bd#151 ← bd#24
Not coalescing [25] bb#102 ← bb#4
Coalesced [26] bc#146 ← bc#63
Coalesced [27] bd#171 ← bd#120
Coalesced [29] bb#85 ← bb#4
Coalesced [30] bc#128 ← bc#24
Coalesced [31] bd#153 ← bd#24
Not coalescing [35] bb#103 ← bb#5
Coalesced (already) [36] bc#147 ← bc#64
Coalesced (already) [37] bd#172 ← bd#121
Coalesced [39] bb#87 ← bb#5
Coalesced [40] bc#130 ← bc#24
Coalesced [41] bd#155 ← bd#24
Not coalescing [45] bb#104 ← bb#6
Coalesced (already) [46] bc#148 ← bc#65
Coalesced (already) [47] bd#173 ← bd#122
Coalesced [49] bb#88 ← bb#6
Coalesced [50] bc#131 ← bc#24
Coalesced [51] bd#156 ← bd#24
Not coalescing [55] bb#105 ← bb#66
Coalesced (already) [56] bc#149 ← bc#66
Coalesced (already) [57] bd#174 ← bd#123
Coalesced [59] bb#90 ← bb#66
Coalesced [60] bc#133 ← bc#24
Coalesced [61] bd#158 ← bd#24
Not coalescing [65] bb#106 ← bb#67
Coalesced (already) [66] bc#150 ← bc#100
Coalesced (already) [67] bd#175 ← bd#124
Coalesced [69] bb#92 ← bb#67
Coalesced [70] bc#135 ← bc#24
Coalesced [71] bd#160 ← bd#24
Not coalescing [75] bb#107 ← bb#68
Coalesced (already) [76] bc#151 ← bc#101
Coalesced (already) [77] bd#176 ← bd#125
Coalesced [79] bb#94 ← bb#68
Coalesced [80] bc#137 ← bc#24
Coalesced [81] bd#162 ← bd#24
Not coalescing [85] bb#108 ← bb#10
Coalesced (already) [86] bc#152 ← bc#102
Coalesced (already) [87] bd#177 ← bd#126
Coalesced [89] bb#96 ← bb#10
Coalesced [90] bc#139 ← bc#24
Coalesced [91] bd#164 ← bd#24
Not coalescing [95] bb#109 ← bb#11
Coalesced (already) [96] bc#153 ← bc#103
Coalesced (already) [97] bd#178 ← bd#127
Coalesced [99] bb#98 ← bb#11
Coalesced [100] bc#141 ← bc#24
Coalesced [101] bd#166 ← bd#24
Coalesced (already) [104] bc#154 ← bc#104
Coalesced (already) [105] bd#179 ← bd#128
Coalesced (already) [107] bc#144 ← bc#24
Coalesced (already) [108] bd#169 ← bd#24
Coalesced [111] bb#100 ← bb#49
Coalesced (already) [112] bc#143 ← bc#104
Coalesced (already) [113] bd#168 ← bd#128
Coalesced [114] bb#99 ← bb#25
Coalesced (already) [115] bc#142 ← bc#103
Coalesced (already) [116] bd#167 ← bd#127
Coalesced [117] bb#97 ← bb#24
Coalesced (already) [118] bc#140 ← bc#102
Coalesced (already) [119] bd#165 ← bd#126
Coalesced [120] bb#95 ← bb#23
Coalesced (already) [121] bc#138 ← bc#101
Coalesced (already) [122] bd#163 ← bd#125
Coalesced [123] bb#93 ← bb#22
Coalesced (already) [124] bc#136 ← bc#100
Coalesced (already) [125] bd#161 ← bd#124
Coalesced [126] bb#91 ← bb#21
Coalesced (already) [127] bc#134 ← bc#66
Coalesced (already) [128] bd#159 ← bd#123
Coalesced [129] bb#89 ← bb#20
Coalesced (already) [130] bc#132 ← bc#65
Coalesced (already) [131] bd#157 ← bd#122
Coalesced [132] bb#86 ← bb#19
Coalesced (already) [133] bc#129 ← bc#64
Coalesced (already) [134] bd#154 ← bd#121
Coalesced [135] bb#84 ← bb#18
Coalesced (already) [136] bc#127 ← bc#63
Coalesced (already) [137] bd#152 ← bd#120
Coalesced (already) [138] bb#82 ← bb#16
Coalesced (already) [139] bc#125 ← bc#2
Coalesced (already) [140] bd#150 ← bd#2
Not coalescing [144] bc#174 ← bc#105
Coalesced [145] bd#200 ← bd#129
Coalesced [147] bc#156 ← bc#105
Coalesced [148] bd#181 ← bd#35
Not coalescing [152] bc#175 ← bc#106
Coalesced [153] bd#201 ← bd#130
Coalesced [155] bc#158 ← bc#106
Coalesced [156] bd#183 ← bd#35
Not coalescing [160] bc#176 ← bc#107
Coalesced (already) [161] bd#202 ← bd#131
Coalesced [163] bc#160 ← bc#107
Coalesced [164] bd#185 ← bd#35
Not coalescing [168] bc#177 ← bc#108
Coalesced (already) [169] bd#203 ← bd#132
Coalesced [171] bc#161 ← bc#108
Coalesced [172] bd#186 ← bd#35
Not coalescing [176] bc#178 ← bc#109
Coalesced (already) [177] bd#204 ← bd#133
Coalesced [179] bc#163 ← bc#109
Coalesced [180] bd#188 ← bd#35
Not coalescing [184] bc#179 ← bc#110
Coalesced (already) [185] bd#205 ← bd#100
Coalesced [187] bc#165 ← bc#110
Coalesced [188] bd#190 ← bd#35
Not coalescing [192] bc#180 ← bc#111
Coalesced (already) [193] bd#206 ← bd#101
Coalesced [195] bc#167 ← bc#111
Coalesced [196] bd#192 ← bd#35
Not coalescing [200] bc#181 ← bc#112
Coalesced (already) [201] bd#207 ← bd#102
Coalesced [203] bc#169 ← bc#112
Coalesced [204] bd#194 ← bd#35
Not coalescing [208] bc#182 ← bc#123
Coalesced (already) [209] bd#208 ← bd#103
Coalesced [211] bc#171 ← bc#123
Coalesced [212] bd#196 ← bd#35
Coalesced (already) [215] bd#209 ← bd#104
Coalesced (already) [217] bd#199 ← bd#35
Coalesced [220] bc#173 ← bc#113
Coalesced (already) [221] bd#198 ← bd#104
Coalesced [222] bc#172 ← bc#47
Coalesced (already) [223] bd#197 ← bd#103
Coalesced [224] bc#170 ← bc#46
Coalesced (already) [225] bd#195 ← bd#102
Coalesced [226] bc#168 ← bc#45
Coalesced (already) [227] bd#193 ← bd#101
Coalesced [228] bc#166 ← bc#44
Coalesced (already) [229] bd#191 ← bd#100
Coalesced [230] bc#164 ← bc#43
Coalesced (already) [231] bd#189 ← bd#133
Coalesced [232] bc#162 ← bc#42
Coalesced (already) [233] bd#187 ← bd#132
Coalesced [234] bc#159 ← bc#41
Coalesced (already) [235] bd#184 ← bd#131
Coalesced [236] bc#157 ← bc#40
Coalesced (already) [237] bd#182 ← bd#130
Coalesced (already) [238] bc#155 ← bc#39
Coalesced (already) [239] bd#180 ← bd#129
Not coalescing [243] bd#229 ← bd#139
Coalesced [245] bd#211 ← bd#139
Not coalescing [249] bd#230 ← bd#140
Coalesced [251] bd#213 ← bd#140
Not coalescing [255] bd#231 ← bd#141
Coalesced [257] bd#215 ← bd#141
Not coalescing [261] bd#232 ← bd#142
Coalesced [263] bd#216 ← bd#142
Not coalescing [267] bd#233 ← bd#143
Coalesced [269] bd#218 ← bd#143
Not coalescing [273] bd#234 ← bd#144
Coalesced [275] bd#220 ← bd#144
Not coalescing [279] bd#235 ← bd#145
Coalesced [281] bd#222 ← bd#145
Not coalescing [285] bd#236 ← bd#146
Coalesced [287] bd#224 ← bd#146
Not coalescing [291] bd#237 ← bd#148
Coalesced [293] bd#226 ← bd#148
Coalesced [300] bd#228 ← bd#115
Coalesced [301] bd#227 ← bd#114
Coalesced [302] bd#225 ← bd#113
Coalesced [303] bd#223 ← bd#112
Coalesced [304] bd#221 ← bd#111
Coalesced [305] bd#219 ← bd#110
Coalesced [306] bd#217 ← bd#109
Coalesced [307] bd#214 ← bd#108
Coalesced [308] bd#212 ← bd#107
Coalesced (already) [309] bd#210 ← bd#106
Coalesced down to 7 phi equivalence classes
Culled Empty Block (label) f0::@40
Culled Empty Block (label) f0::@39
Culled Empty Block (label) f0::@38
Culled Empty Block (label) f0::@37
Culled Empty Block (label) f0::@36
Culled Empty Block (label) f0::@35
Culled Empty Block (label) f0::@34
Culled Empty Block (label) f0::@33
Culled Empty Block (label) f0::@32
Culled Empty Block (label) f0::@31
Culled Empty Block (label) fa::@40
Culled Empty Block (label) fa::@39
Culled Empty Block (label) fa::@38
Culled Empty Block (label) fa::@37
Culled Empty Block (label) fa::@36
Culled Empty Block (label) fa::@35
Culled Empty Block (label) fa::@34
Culled Empty Block (label) fa::@33
Culled Empty Block (label) fa::@32
Culled Empty Block (label) fa::@31
Culled Empty Block (label) fb::@40
Culled Empty Block (label) fb::@39
Culled Empty Block (label) fb::@38
Culled Empty Block (label) fb::@37
Culled Empty Block (label) fb::@36
Culled Empty Block (label) fb::@35
Culled Empty Block (label) fb::@34
Culled Empty Block (label) fb::@33
Culled Empty Block (label) fb::@32
Culled Empty Block (label) fb::@31
Renumbering block @5 to @1
Renumbering block main::@7 to main::@3
Renumbering block f0::@11 to f0::@10
Renumbering block f0::@12 to f0::@11
Renumbering block f0::@13 to f0::@12
Renumbering block f0::@14 to f0::@13
Renumbering block f0::@15 to f0::@14
Renumbering block f0::@16 to f0::@15
Renumbering block f0::@17 to f0::@16
Renumbering block f0::@18 to f0::@17
Renumbering block f0::@19 to f0::@18
Renumbering block f0::@20 to f0::@19
Renumbering block fa::@11 to fa::@10
Renumbering block fa::@12 to fa::@11
Renumbering block fa::@13 to fa::@12
Renumbering block fa::@14 to fa::@13
Renumbering block fa::@15 to fa::@14
Renumbering block fa::@16 to fa::@15
Renumbering block fa::@17 to fa::@16
Renumbering block fa::@18 to fa::@17
Renumbering block fa::@19 to fa::@18
Renumbering block fa::@20 to fa::@19
Renumbering block fb::@11 to fb::@10
Renumbering block fb::@12 to fb::@11
Renumbering block fb::@13 to fb::@12
Renumbering block fb::@14 to fb::@13
Renumbering block fb::@15 to fb::@14
Renumbering block fb::@16 to fb::@15
Renumbering block fb::@17 to fb::@16
Renumbering block fb::@18 to fb::@17
Renumbering block fb::@19 to fb::@18
Renumbering block fb::@20 to fb::@19
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of f0::@19
Adding NOP phi() at start of fa::@19
Adding NOP phi() at start of fb::@19
Adding NOP phi() at start of fc::@10

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [5] (byte) ba#17 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@3/(byte) ba#1 )
  [5] (byte) bd#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@3/(byte) bd#13 )
  [5] (byte) bc#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@3/(byte) bc#13 )
  [5] (byte) bb#16 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@3/(byte) bb#13 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [6] phi()
  [7] call f0 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [8] (byte) ba#1 ← ++ (byte) ba#17
  to:main::@1
f0: scope:[f0]  from main::@2
  [9] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto f0::@1
  to:f0::@10
f0::@10: scope:[f0]  from f0
  [10] (byte) bb#3 ← ++ (byte) bb#16
  [11] (byte~) bb#101 ← (byte) bb#3
  [12] call fa 
  to:f0::@1
f0::@1: scope:[f0]  from f0 f0::@10
  [13] (byte) bd#120 ← phi( f0/(byte) bd#2 f0::@10/(byte) bd#24 )
  [13] (byte) bc#63 ← phi( f0/(byte) bc#2 f0::@10/(byte) bc#24 )
  [13] (byte) bb#18 ← phi( f0/(byte) bb#16 f0::@10/(byte) bb#3 )
  [14] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto f0::@2
  to:f0::@11
f0::@11: scope:[f0]  from f0::@1
  [15] (byte) bb#4 ← ++ (byte) bb#18
  [16] (byte~) bb#102 ← (byte) bb#4
  [17] call fa 
  to:f0::@2
f0::@2: scope:[f0]  from f0::@1 f0::@11
  [18] (byte) bd#121 ← phi( f0::@1/(byte) bd#120 f0::@11/(byte) bd#24 )
  [18] (byte) bc#64 ← phi( f0::@1/(byte) bc#63 f0::@11/(byte) bc#24 )
  [18] (byte) bb#19 ← phi( f0::@1/(byte) bb#18 f0::@11/(byte) bb#4 )
  [19] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 2) goto f0::@3
  to:f0::@12
f0::@12: scope:[f0]  from f0::@2
  [20] (byte) bb#5 ← ++ (byte) bb#19
  [21] (byte~) bb#103 ← (byte) bb#5
  [22] call fa 
  to:f0::@3
f0::@3: scope:[f0]  from f0::@12 f0::@2
  [23] (byte) bd#122 ← phi( f0::@2/(byte) bd#121 f0::@12/(byte) bd#24 )
  [23] (byte) bc#65 ← phi( f0::@2/(byte) bc#64 f0::@12/(byte) bc#24 )
  [23] (byte) bb#20 ← phi( f0::@2/(byte) bb#19 f0::@12/(byte) bb#5 )
  [24] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto f0::@4
  to:f0::@13
f0::@13: scope:[f0]  from f0::@3
  [25] (byte) bb#6 ← ++ (byte) bb#20
  [26] (byte~) bb#104 ← (byte) bb#6
  [27] call fa 
  to:f0::@4
f0::@4: scope:[f0]  from f0::@13 f0::@3
  [28] (byte) bd#123 ← phi( f0::@13/(byte) bd#24 f0::@3/(byte) bd#122 )
  [28] (byte) bc#66 ← phi( f0::@13/(byte) bc#24 f0::@3/(byte) bc#65 )
  [28] (byte) bb#21 ← phi( f0::@13/(byte) bb#6 f0::@3/(byte) bb#20 )
  [29] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto f0::@5
  to:f0::@14
f0::@14: scope:[f0]  from f0::@4
  [30] (byte) bb#66 ← ++ (byte) bb#21
  [31] (byte~) bb#105 ← (byte) bb#66
  [32] call fa 
  to:f0::@5
f0::@5: scope:[f0]  from f0::@14 f0::@4
  [33] (byte) bd#124 ← phi( f0::@14/(byte) bd#24 f0::@4/(byte) bd#123 )
  [33] (byte) bc#100 ← phi( f0::@14/(byte) bc#24 f0::@4/(byte) bc#66 )
  [33] (byte) bb#22 ← phi( f0::@14/(byte) bb#66 f0::@4/(byte) bb#21 )
  [34] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto f0::@6
  to:f0::@15
f0::@15: scope:[f0]  from f0::@5
  [35] (byte) bb#67 ← ++ (byte) bb#22
  [36] (byte~) bb#106 ← (byte) bb#67
  [37] call fa 
  to:f0::@6
f0::@6: scope:[f0]  from f0::@15 f0::@5
  [38] (byte) bd#125 ← phi( f0::@15/(byte) bd#24 f0::@5/(byte) bd#124 )
  [38] (byte) bc#101 ← phi( f0::@15/(byte) bc#24 f0::@5/(byte) bc#100 )
  [38] (byte) bb#23 ← phi( f0::@15/(byte) bb#67 f0::@5/(byte) bb#22 )
  [39] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto f0::@7
  to:f0::@16
f0::@16: scope:[f0]  from f0::@6
  [40] (byte) bb#68 ← ++ (byte) bb#23
  [41] (byte~) bb#107 ← (byte) bb#68
  [42] call fa 
  to:f0::@7
f0::@7: scope:[f0]  from f0::@16 f0::@6
  [43] (byte) bd#126 ← phi( f0::@16/(byte) bd#24 f0::@6/(byte) bd#125 )
  [43] (byte) bc#102 ← phi( f0::@16/(byte) bc#24 f0::@6/(byte) bc#101 )
  [43] (byte) bb#24 ← phi( f0::@16/(byte) bb#68 f0::@6/(byte) bb#23 )
  [44] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto f0::@8
  to:f0::@17
f0::@17: scope:[f0]  from f0::@7
  [45] (byte) bb#10 ← ++ (byte) bb#24
  [46] (byte~) bb#108 ← (byte) bb#10
  [47] call fa 
  to:f0::@8
f0::@8: scope:[f0]  from f0::@17 f0::@7
  [48] (byte) bd#127 ← phi( f0::@17/(byte) bd#24 f0::@7/(byte) bd#126 )
  [48] (byte) bc#103 ← phi( f0::@17/(byte) bc#24 f0::@7/(byte) bc#102 )
  [48] (byte) bb#25 ← phi( f0::@17/(byte) bb#10 f0::@7/(byte) bb#24 )
  [49] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto f0::@9
  to:f0::@18
f0::@18: scope:[f0]  from f0::@8
  [50] (byte) bb#11 ← ++ (byte) bb#25
  [51] (byte~) bb#109 ← (byte) bb#11
  [52] call fa 
  to:f0::@9
f0::@9: scope:[f0]  from f0::@18 f0::@8
  [53] (byte) bd#128 ← phi( f0::@18/(byte) bd#24 f0::@8/(byte) bd#127 )
  [53] (byte) bc#104 ← phi( f0::@18/(byte) bc#24 f0::@8/(byte) bc#103 )
  [53] (byte) bb#49 ← phi( f0::@18/(byte) bb#11 f0::@8/(byte) bb#25 )
  [54] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 9) goto f0::@return
  to:f0::@19
f0::@19: scope:[f0]  from f0::@9
  [55] phi()
  [56] call fa 
  to:f0::@return
f0::@return: scope:[f0]  from f0::@19 f0::@9
  [57] (byte) bd#13 ← phi( f0::@9/(byte) bd#128 f0::@19/(byte) bd#24 )
  [57] (byte) bc#13 ← phi( f0::@9/(byte) bc#104 f0::@19/(byte) bc#24 )
  [57] (byte) bb#13 ← phi( f0::@9/(byte) bb#49 f0::@19/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [58] return 
  to:@return
fa: scope:[fa]  from f0::@10 f0::@11 f0::@12 f0::@13 f0::@14 f0::@15 f0::@16 f0::@17 f0::@18 f0::@19
  [59] (byte) bd#129 ← phi( f0::@10/(byte) bd#2 f0::@11/(byte) bd#120 f0::@12/(byte) bd#121 f0::@13/(byte) bd#122 f0::@14/(byte) bd#123 f0::@15/(byte) bd#124 f0::@16/(byte) bd#125 f0::@17/(byte) bd#126 f0::@18/(byte) bd#127 f0::@19/(byte) bd#128 )
  [59] (byte) bc#39 ← phi( f0::@10/(byte) bc#2 f0::@11/(byte) bc#63 f0::@12/(byte) bc#64 f0::@13/(byte) bc#65 f0::@14/(byte) bc#66 f0::@15/(byte) bc#100 f0::@16/(byte) bc#101 f0::@17/(byte) bc#102 f0::@18/(byte) bc#103 f0::@19/(byte) bc#104 )
  [59] (byte) bb#27 ← phi( f0::@10/(byte~) bb#101 f0::@11/(byte~) bb#102 f0::@12/(byte~) bb#103 f0::@13/(byte~) bb#104 f0::@14/(byte~) bb#105 f0::@15/(byte~) bb#106 f0::@16/(byte~) bb#107 f0::@17/(byte~) bb#108 f0::@18/(byte~) bb#109 f0::@19/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [60] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto fa::@1
  to:fa::@10
fa::@10: scope:[fa]  from fa
  [61] (byte) bc#105 ← ++ (byte) bc#39
  [62] (byte~) bc#174 ← (byte) bc#105
  [63] call fb 
  to:fa::@1
fa::@1: scope:[fa]  from fa fa::@10
  [64] (byte) bd#130 ← phi( fa/(byte) bd#129 fa::@10/(byte) bd#35 )
  [64] (byte) bc#40 ← phi( fa/(byte) bc#39 fa::@10/(byte) bc#105 )
  [65] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto fa::@2
  to:fa::@11
fa::@11: scope:[fa]  from fa::@1
  [66] (byte) bc#106 ← ++ (byte) bc#40
  [67] (byte~) bc#175 ← (byte) bc#106
  [68] call fb 
  to:fa::@2
fa::@2: scope:[fa]  from fa::@1 fa::@11
  [69] (byte) bd#131 ← phi( fa::@1/(byte) bd#130 fa::@11/(byte) bd#35 )
  [69] (byte) bc#41 ← phi( fa::@1/(byte) bc#40 fa::@11/(byte) bc#106 )
  [70] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 2) goto fa::@3
  to:fa::@12
fa::@12: scope:[fa]  from fa::@2
  [71] (byte) bc#107 ← ++ (byte) bc#41
  [72] (byte~) bc#176 ← (byte) bc#107
  [73] call fb 
  to:fa::@3
fa::@3: scope:[fa]  from fa::@12 fa::@2
  [74] (byte) bd#132 ← phi( fa::@2/(byte) bd#131 fa::@12/(byte) bd#35 )
  [74] (byte) bc#42 ← phi( fa::@2/(byte) bc#41 fa::@12/(byte) bc#107 )
  [75] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto fa::@4
  to:fa::@13
fa::@13: scope:[fa]  from fa::@3
  [76] (byte) bc#108 ← ++ (byte) bc#42
  [77] (byte~) bc#177 ← (byte) bc#108
  [78] call fb 
  to:fa::@4
fa::@4: scope:[fa]  from fa::@13 fa::@3
  [79] (byte) bd#133 ← phi( fa::@13/(byte) bd#35 fa::@3/(byte) bd#132 )
  [79] (byte) bc#43 ← phi( fa::@13/(byte) bc#108 fa::@3/(byte) bc#42 )
  [80] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto fa::@5
  to:fa::@14
fa::@14: scope:[fa]  from fa::@4
  [81] (byte) bc#109 ← ++ (byte) bc#43
  [82] (byte~) bc#178 ← (byte) bc#109
  [83] call fb 
  to:fa::@5
fa::@5: scope:[fa]  from fa::@14 fa::@4
  [84] (byte) bd#100 ← phi( fa::@14/(byte) bd#35 fa::@4/(byte) bd#133 )
  [84] (byte) bc#44 ← phi( fa::@14/(byte) bc#109 fa::@4/(byte) bc#43 )
  [85] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto fa::@6
  to:fa::@15
fa::@15: scope:[fa]  from fa::@5
  [86] (byte) bc#110 ← ++ (byte) bc#44
  [87] (byte~) bc#179 ← (byte) bc#110
  [88] call fb 
  to:fa::@6
fa::@6: scope:[fa]  from fa::@15 fa::@5
  [89] (byte) bd#101 ← phi( fa::@15/(byte) bd#35 fa::@5/(byte) bd#100 )
  [89] (byte) bc#45 ← phi( fa::@15/(byte) bc#110 fa::@5/(byte) bc#44 )
  [90] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto fa::@7
  to:fa::@16
fa::@16: scope:[fa]  from fa::@6
  [91] (byte) bc#111 ← ++ (byte) bc#45
  [92] (byte~) bc#180 ← (byte) bc#111
  [93] call fb 
  to:fa::@7
fa::@7: scope:[fa]  from fa::@16 fa::@6
  [94] (byte) bd#102 ← phi( fa::@16/(byte) bd#35 fa::@6/(byte) bd#101 )
  [94] (byte) bc#46 ← phi( fa::@16/(byte) bc#111 fa::@6/(byte) bc#45 )
  [95] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto fa::@8
  to:fa::@17
fa::@17: scope:[fa]  from fa::@7
  [96] (byte) bc#112 ← ++ (byte) bc#46
  [97] (byte~) bc#181 ← (byte) bc#112
  [98] call fb 
  to:fa::@8
fa::@8: scope:[fa]  from fa::@17 fa::@7
  [99] (byte) bd#103 ← phi( fa::@17/(byte) bd#35 fa::@7/(byte) bd#102 )
  [99] (byte) bc#47 ← phi( fa::@17/(byte) bc#112 fa::@7/(byte) bc#46 )
  [100] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto fa::@9
  to:fa::@18
fa::@18: scope:[fa]  from fa::@8
  [101] (byte) bc#123 ← ++ (byte) bc#47
  [102] (byte~) bc#182 ← (byte) bc#123
  [103] call fb 
  to:fa::@9
fa::@9: scope:[fa]  from fa::@18 fa::@8
  [104] (byte) bd#104 ← phi( fa::@18/(byte) bd#35 fa::@8/(byte) bd#103 )
  [104] (byte) bc#113 ← phi( fa::@18/(byte) bc#123 fa::@8/(byte) bc#47 )
  [105] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 9) goto fa::@return
  to:fa::@19
fa::@19: scope:[fa]  from fa::@9
  [106] phi()
  [107] call fb 
  to:fa::@return
fa::@return: scope:[fa]  from fa::@19 fa::@9
  [108] (byte) bd#24 ← phi( fa::@9/(byte) bd#104 fa::@19/(byte) bd#35 )
  [108] (byte) bc#24 ← phi( fa::@9/(byte) bc#113 fa::@19/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [109] return 
  to:@return
fb: scope:[fb]  from fa::@10 fa::@11 fa::@12 fa::@13 fa::@14 fa::@15 fa::@16 fa::@17 fa::@18 fa::@19
  [110] (byte) bd#106 ← phi( fa::@10/(byte) bd#129 fa::@11/(byte) bd#130 fa::@12/(byte) bd#131 fa::@13/(byte) bd#132 fa::@14/(byte) bd#133 fa::@15/(byte) bd#100 fa::@16/(byte) bd#101 fa::@17/(byte) bd#102 fa::@18/(byte) bd#103 fa::@19/(byte) bd#104 )
  [110] (byte) bc#114 ← phi( fa::@10/(byte~) bc#174 fa::@11/(byte~) bc#175 fa::@12/(byte~) bc#176 fa::@13/(byte~) bc#177 fa::@14/(byte~) bc#178 fa::@15/(byte~) bc#179 fa::@16/(byte~) bc#180 fa::@17/(byte~) bc#181 fa::@18/(byte~) bc#182 fa::@19/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [111] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto fb::@1
  to:fb::@10
fb::@10: scope:[fb]  from fb
  [112] (byte) bd#139 ← ++ (byte) bd#106
  [113] (byte~) bd#229 ← (byte) bd#139
  [114] call fc 
  to:fb::@1
fb::@1: scope:[fb]  from fb fb::@10
  [115] (byte) bd#107 ← phi( fb/(byte) bd#106 fb::@10/(byte) bd#139 )
  [116] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto fb::@2
  to:fb::@11
fb::@11: scope:[fb]  from fb::@1
  [117] (byte) bd#140 ← ++ (byte) bd#107
  [118] (byte~) bd#230 ← (byte) bd#140
  [119] call fc 
  to:fb::@2
fb::@2: scope:[fb]  from fb::@1 fb::@11
  [120] (byte) bd#108 ← phi( fb::@1/(byte) bd#107 fb::@11/(byte) bd#140 )
  [121] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 2) goto fb::@3
  to:fb::@12
fb::@12: scope:[fb]  from fb::@2
  [122] (byte) bd#141 ← ++ (byte) bd#108
  [123] (byte~) bd#231 ← (byte) bd#141
  [124] call fc 
  to:fb::@3
fb::@3: scope:[fb]  from fb::@12 fb::@2
  [125] (byte) bd#109 ← phi( fb::@2/(byte) bd#108 fb::@12/(byte) bd#141 )
  [126] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto fb::@4
  to:fb::@13
fb::@13: scope:[fb]  from fb::@3
  [127] (byte) bd#142 ← ++ (byte) bd#109
  [128] (byte~) bd#232 ← (byte) bd#142
  [129] call fc 
  to:fb::@4
fb::@4: scope:[fb]  from fb::@13 fb::@3
  [130] (byte) bd#110 ← phi( fb::@13/(byte) bd#142 fb::@3/(byte) bd#109 )
  [131] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto fb::@5
  to:fb::@14
fb::@14: scope:[fb]  from fb::@4
  [132] (byte) bd#143 ← ++ (byte) bd#110
  [133] (byte~) bd#233 ← (byte) bd#143
  [134] call fc 
  to:fb::@5
fb::@5: scope:[fb]  from fb::@14 fb::@4
  [135] (byte) bd#111 ← phi( fb::@14/(byte) bd#143 fb::@4/(byte) bd#110 )
  [136] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto fb::@6
  to:fb::@15
fb::@15: scope:[fb]  from fb::@5
  [137] (byte) bd#144 ← ++ (byte) bd#111
  [138] (byte~) bd#234 ← (byte) bd#144
  [139] call fc 
  to:fb::@6
fb::@6: scope:[fb]  from fb::@15 fb::@5
  [140] (byte) bd#112 ← phi( fb::@15/(byte) bd#144 fb::@5/(byte) bd#111 )
  [141] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto fb::@7
  to:fb::@16
fb::@16: scope:[fb]  from fb::@6
  [142] (byte) bd#145 ← ++ (byte) bd#112
  [143] (byte~) bd#235 ← (byte) bd#145
  [144] call fc 
  to:fb::@7
fb::@7: scope:[fb]  from fb::@16 fb::@6
  [145] (byte) bd#113 ← phi( fb::@16/(byte) bd#145 fb::@6/(byte) bd#112 )
  [146] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto fb::@8
  to:fb::@17
fb::@17: scope:[fb]  from fb::@7
  [147] (byte) bd#146 ← ++ (byte) bd#113
  [148] (byte~) bd#236 ← (byte) bd#146
  [149] call fc 
  to:fb::@8
fb::@8: scope:[fb]  from fb::@17 fb::@7
  [150] (byte) bd#114 ← phi( fb::@17/(byte) bd#146 fb::@7/(byte) bd#113 )
  [151] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto fb::@9
  to:fb::@18
fb::@18: scope:[fb]  from fb::@8
  [152] (byte) bd#148 ← ++ (byte) bd#114
  [153] (byte~) bd#237 ← (byte) bd#148
  [154] call fc 
  to:fb::@9
fb::@9: scope:[fb]  from fb::@18 fb::@8
  [155] (byte) bd#115 ← phi( fb::@18/(byte) bd#148 fb::@8/(byte) bd#114 )
  [156] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 9) goto fb::@return
  to:fb::@19
fb::@19: scope:[fb]  from fb::@9
  [157] phi()
  [158] call fc 
  to:fb::@return
fb::@return: scope:[fb]  from fb::@19 fb::@9
  [159] (byte) bd#35 ← phi( fb::@9/(byte) bd#115 fb::@19/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [160] return 
  to:@return
fc: scope:[fc]  from fb::@10 fb::@11 fb::@12 fb::@13 fb::@14 fb::@15 fb::@16 fb::@17 fb::@18 fb::@19
  [161] (byte) bd#71 ← phi( fb::@10/(byte~) bd#229 fb::@11/(byte~) bd#230 fb::@12/(byte~) bd#231 fb::@13/(byte~) bd#232 fb::@14/(byte~) bd#233 fb::@15/(byte~) bd#234 fb::@16/(byte~) bd#235 fb::@17/(byte~) bd#236 fb::@18/(byte~) bd#237 fb::@19/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [162] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto fc::@1
  to:fc::@1
fc::@1: scope:[fc]  from fc fc
  [163] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto fc::@2
  to:fc::@2
fc::@2: scope:[fc]  from fc::@1 fc::@1
  [164] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 2) goto fc::@3
  to:fc::@3
fc::@3: scope:[fc]  from fc::@2 fc::@2
  [165] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto fc::@4
  to:fc::@4
fc::@4: scope:[fc]  from fc::@3 fc::@3
  [166] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto fc::@5
  to:fc::@5
fc::@5: scope:[fc]  from fc::@4 fc::@4
  [167] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto fc::@6
  to:fc::@6
fc::@6: scope:[fc]  from fc::@5 fc::@5
  [168] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto fc::@7
  to:fc::@7
fc::@7: scope:[fc]  from fc::@6 fc::@6
  [169] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto fc::@8
  to:fc::@8
fc::@8: scope:[fc]  from fc::@7 fc::@7
  [170] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto fc::@9
  to:fc::@9
fc::@9: scope:[fc]  from fc::@8 fc::@8
  [171] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 9) goto fc::@10
  to:fc::@return
fc::@return: scope:[fc]  from fc::@10 fc::@9
  [172] return 
  to:@return
fc::@10: scope:[fc]  from fc::@9
  [173] phi()
  to:fc::@return


VARIABLE REGISTER WEIGHTS
(byte) ba
(byte) ba#1 22.0
(byte) ba#17 0.7924528301886792
(byte) bb
(byte) bb#10 2.0
(byte~) bb#101 4.0
(byte~) bb#102 4.0
(byte~) bb#103 4.0
(byte~) bb#104 4.0
(byte~) bb#105 4.0
(byte~) bb#106 4.0
(byte~) bb#107 4.0
(byte~) bb#108 4.0
(byte~) bb#109 4.0
(byte) bb#11 2.0
(byte) bb#13 3.25
(byte) bb#16 5.0
(byte) bb#18 4.0
(byte) bb#19 4.0
(byte) bb#20 4.0
(byte) bb#21 4.0
(byte) bb#22 4.0
(byte) bb#23 4.0
(byte) bb#24 4.0
(byte) bb#25 4.0
(byte) bb#27 0.8260869565217388
(byte) bb#3 2.0
(byte) bb#4 2.0
(byte) bb#49 3.0
(byte) bb#5 2.0
(byte) bb#6 2.0
(byte) bb#66 2.0
(byte) bb#67 2.0
(byte) bb#68 2.0
(byte) bc
(byte) bc#100 2.0
(byte) bc#101 2.0
(byte) bc#102 2.0
(byte) bc#103 2.0
(byte) bc#104 2.6666666666666665
(byte) bc#105 2.0
(byte) bc#106 2.0
(byte) bc#107 2.0
(byte) bc#108 2.0
(byte) bc#109 2.0
(byte) bc#110 2.0
(byte) bc#111 2.0
(byte) bc#112 2.0
(byte) bc#113 3.0
(byte) bc#114 0.8260869565217388
(byte) bc#123 2.0
(byte) bc#13 3.75
(byte~) bc#174 4.0
(byte~) bc#175 4.0
(byte~) bc#176 4.0
(byte~) bc#177 4.0
(byte~) bc#178 4.0
(byte~) bc#179 4.0
(byte~) bc#180 4.0
(byte~) bc#181 4.0
(byte~) bc#182 4.0
(byte) bc#2 3.0
(byte) bc#24 1.8333333333333335
(byte) bc#39 12.0
(byte) bc#40 4.0
(byte) bc#41 4.0
(byte) bc#42 4.0
(byte) bc#43 4.0
(byte) bc#44 4.0
(byte) bc#45 4.0
(byte) bc#46 4.0
(byte) bc#47 4.0
(byte) bc#63 2.0
(byte) bc#64 2.0
(byte) bc#65 2.0
(byte) bc#66 2.0
(byte) bd
(byte) bd#100 2.0
(byte) bd#101 2.0
(byte) bd#102 2.0
(byte) bd#103 2.0
(byte) bd#104 2.6666666666666665
(byte) bd#106 12.0
(byte) bd#107 4.0
(byte) bd#108 4.0
(byte) bd#109 4.0
(byte) bd#110 4.0
(byte) bd#111 4.0
(byte) bd#112 4.0
(byte) bd#113 4.0
(byte) bd#114 4.0
(byte) bd#115 3.0
(byte) bd#120 2.0
(byte) bd#121 2.0
(byte) bd#122 2.0
(byte) bd#123 2.0
(byte) bd#124 2.0
(byte) bd#125 2.0
(byte) bd#126 2.0
(byte) bd#127 2.0
(byte) bd#128 2.6666666666666665
(byte) bd#129 6.0
(byte) bd#13 3.75
(byte) bd#130 2.0
(byte) bd#131 2.0
(byte) bd#132 2.0
(byte) bd#133 2.0
(byte) bd#139 2.0
(byte) bd#140 2.0
(byte) bd#141 2.0
(byte) bd#142 2.0
(byte) bd#143 2.0
(byte) bd#144 2.0
(byte) bd#145 2.0
(byte) bd#146 2.0
(byte) bd#148 2.0
(byte) bd#2 3.0
(byte~) bd#229 4.0
(byte~) bd#230 4.0
(byte~) bd#231 4.0
(byte~) bd#232 4.0
(byte~) bd#233 4.0
(byte~) bd#234 4.0
(byte~) bd#235 4.0
(byte~) bd#236 4.0
(byte~) bd#237 4.0
(byte) bd#24 2.0
(byte) bd#35 1.8333333333333335
(byte) bd#71 3.800000000000001
(void()) f0()
(void()) fa()
(void()) fb()
(void()) fc()
(void()) main()

Initial phi equivalence classes
[ ba#17 ba#1 ]
[ bb#49 bb#11 bb#25 bb#10 bb#24 bb#68 bb#23 bb#67 bb#22 bb#66 bb#21 bb#6 bb#20 bb#19 bb#18 bb#16 bb#13 bb#3 bb#4 bb#5 ]
[ bb#27 bb#101 bb#102 bb#103 bb#104 bb#105 bb#106 bb#107 bb#108 bb#109 ]
[ bc#113 bc#123 bc#47 bc#112 bc#46 bc#111 bc#45 bc#110 bc#44 bc#109 bc#43 bc#108 bc#42 bc#41 bc#40 bc#39 bc#104 bc#103 bc#102 bc#101 bc#100 bc#66 bc#65 bc#64 bc#63 bc#2 bc#13 bc#24 bc#105 bc#106 bc#107 ]
[ bc#114 bc#174 bc#175 bc#176 bc#177 bc#178 bc#179 bc#180 bc#181 bc#182 ]
[ bd#115 bd#148 bd#114 bd#146 bd#113 bd#145 bd#112 bd#144 bd#111 bd#143 bd#110 bd#142 bd#109 bd#108 bd#107 bd#106 bd#104 bd#103 bd#102 bd#101 bd#100 bd#133 bd#132 bd#131 bd#130 bd#129 bd#128 bd#127 bd#126 bd#125 bd#124 bd#123 bd#122 bd#121 bd#120 bd#2 bd#13 bd#24 bd#35 bd#139 bd#140 bd#141 ]
[ bd#71 bd#229 bd#230 bd#231 bd#232 bd#233 bd#234 bd#235 bd#236 bd#237 ]
Complete equivalence classes
[ ba#17 ba#1 ]
[ bb#49 bb#11 bb#25 bb#10 bb#24 bb#68 bb#23 bb#67 bb#22 bb#66 bb#21 bb#6 bb#20 bb#19 bb#18 bb#16 bb#13 bb#3 bb#4 bb#5 ]
[ bb#27 bb#101 bb#102 bb#103 bb#104 bb#105 bb#106 bb#107 bb#108 bb#109 ]
[ bc#113 bc#123 bc#47 bc#112 bc#46 bc#111 bc#45 bc#110 bc#44 bc#109 bc#43 bc#108 bc#42 bc#41 bc#40 bc#39 bc#104 bc#103 bc#102 bc#101 bc#100 bc#66 bc#65 bc#64 bc#63 bc#2 bc#13 bc#24 bc#105 bc#106 bc#107 ]
[ bc#114 bc#174 bc#175 bc#176 bc#177 bc#178 bc#179 bc#180 bc#181 bc#182 ]
[ bd#115 bd#148 bd#114 bd#146 bd#113 bd#145 bd#112 bd#144 bd#111 bd#143 bd#110 bd#142 bd#109 bd#108 bd#107 bd#106 bd#104 bd#103 bd#102 bd#101 bd#100 bd#133 bd#132 bd#131 bd#130 bd#129 bd#128 bd#127 bd#126 bd#125 bd#124 bd#123 bd#122 bd#121 bd#120 bd#2 bd#13 bd#24 bd#35 bd#139 bd#140 bd#141 ]
[ bd#71 bd#229 bd#230 bd#231 bd#232 bd#233 bd#234 bd#235 bd#236 bd#237 ]
Allocated zp ZP_BYTE:2 [ ba#17 ba#1 ]
Allocated zp ZP_BYTE:3 [ bb#49 bb#11 bb#25 bb#10 bb#24 bb#68 bb#23 bb#67 bb#22 bb#66 bb#21 bb#6 bb#20 bb#19 bb#18 bb#16 bb#13 bb#3 bb#4 bb#5 ]
Allocated zp ZP_BYTE:4 [ bb#27 bb#101 bb#102 bb#103 bb#104 bb#105 bb#106 bb#107 bb#108 bb#109 ]
Allocated zp ZP_BYTE:5 [ bc#113 bc#123 bc#47 bc#112 bc#46 bc#111 bc#45 bc#110 bc#44 bc#109 bc#43 bc#108 bc#42 bc#41 bc#40 bc#39 bc#104 bc#103 bc#102 bc#101 bc#100 bc#66 bc#65 bc#64 bc#63 bc#2 bc#13 bc#24 bc#105 bc#106 bc#107 ]
Allocated zp ZP_BYTE:6 [ bc#114 bc#174 bc#175 bc#176 bc#177 bc#178 bc#179 bc#180 bc#181 bc#182 ]
Allocated zp ZP_BYTE:7 [ bd#115 bd#148 bd#114 bd#146 bd#113 bd#145 bd#112 bd#144 bd#111 bd#143 bd#110 bd#142 bd#109 bd#108 bd#107 bd#106 bd#104 bd#103 bd#102 bd#101 bd#100 bd#133 bd#132 bd#131 bd#130 bd#129 bd#128 bd#127 bd#126 bd#125 bd#124 bd#123 bd#122 bd#121 bd#120 bd#2 bd#13 bd#24 bd#35 bd#139 bd#140 bd#141 ]
Allocated zp ZP_BYTE:8 [ bd#71 bd#229 bd#230 bd#231 bd#232 bd#233 bd#234 bd#235 bd#236 bd#237 ]

INITIAL ASM
//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label ba = 2
  .label bc = 5
  .label bd = 7
  .label bb = 3
  .label bb_27 = 4
  .label bd_71 = 8
  .label bc_114 = 6
  .label bb_101 = 4
  .label bb_102 = 4
  .label bb_103 = 4
  .label bb_104 = 4
  .label bb_105 = 4
  .label bb_106 = 4
  .label bb_107 = 4
  .label bb_108 = 4
  .label bb_109 = 4
  .label bc_174 = 6
  .label bc_175 = 6
  .label bc_176 = 6
  .label bc_177 = 6
  .label bc_178 = 6
  .label bc_179 = 6
  .label bc_180 = 6
  .label bc_181 = 6
  .label bc_182 = 6
  .label bd_229 = 8
  .label bd_230 = 8
  .label bd_231 = 8
  .label bd_232 = 8
  .label bd_233 = 8
  .label bd_234 = 8
  .label bd_235 = 8
  .label bd_236 = 8
  .label bd_237 = 8
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte) ba#17 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta ba
  //SEG13 [5] phi (byte) bd#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta bd
  //SEG14 [5] phi (byte) bc#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta bc
  //SEG15 [5] phi (byte) bb#16 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta bb
    jmp b1
  //SEG16 main::@1
  b1:
  //SEG17 [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG18 main::@2
  b2:
  //SEG19 [7] call f0 
    jsr f0
    jmp b3
  //SEG20 main::@3
  b3:
  //SEG21 [8] (byte) ba#1 ← ++ (byte) ba#17 -- vbuz1=_inc_vbuz1 
    inc ba
  //SEG22 [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  b1_from_b3:
  //SEG23 [5] phi (byte) ba#17 = (byte) ba#1 [phi:main::@3->main::@1#0] -- register_copy 
  //SEG24 [5] phi (byte) bd#2 = (byte) bd#13 [phi:main::@3->main::@1#1] -- register_copy 
  //SEG25 [5] phi (byte) bc#2 = (byte) bc#13 [phi:main::@3->main::@1#2] -- register_copy 
  //SEG26 [5] phi (byte) bb#16 = (byte) bb#13 [phi:main::@3->main::@1#3] -- register_copy 
    jmp b1
}
//SEG27 f0
f0: {
  //SEG28 [9] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto f0::@1 -- vbuz1_neq_0_then_la1 
    lda ba
    cmp #0
    bne b1_from_f0
    jmp b10
  //SEG29 f0::@10
  b10:
  //SEG30 [10] (byte) bb#3 ← ++ (byte) bb#16 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG31 [11] (byte~) bb#101 ← (byte) bb#3 -- vbuz1=vbuz2 
    lda bb
    sta bb_101
  //SEG32 [12] call fa 
  //SEG33 [59] phi from f0::@10 to fa [phi:f0::@10->fa]
  fa_from_b10:
  //SEG34 [59] phi (byte) bd#129 = (byte) bd#2 [phi:f0::@10->fa#0] -- register_copy 
  //SEG35 [59] phi (byte) bc#39 = (byte) bc#2 [phi:f0::@10->fa#1] -- register_copy 
  //SEG36 [59] phi (byte) bb#27 = (byte~) bb#101 [phi:f0::@10->fa#2] -- register_copy 
    jsr fa
  //SEG37 [13] phi from f0 f0::@10 to f0::@1 [phi:f0/f0::@10->f0::@1]
  b1_from_f0:
  b1_from_b10:
  //SEG38 [13] phi (byte) bd#120 = (byte) bd#2 [phi:f0/f0::@10->f0::@1#0] -- register_copy 
  //SEG39 [13] phi (byte) bc#63 = (byte) bc#2 [phi:f0/f0::@10->f0::@1#1] -- register_copy 
  //SEG40 [13] phi (byte) bb#18 = (byte) bb#16 [phi:f0/f0::@10->f0::@1#2] -- register_copy 
    jmp b1
  //SEG41 f0::@1
  b1:
  //SEG42 [14] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto f0::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp ba
    bne b2_from_b1
    jmp b11
  //SEG43 f0::@11
  b11:
  //SEG44 [15] (byte) bb#4 ← ++ (byte) bb#18 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG45 [16] (byte~) bb#102 ← (byte) bb#4 -- vbuz1=vbuz2 
    lda bb
    sta bb_102
  //SEG46 [17] call fa 
  //SEG47 [59] phi from f0::@11 to fa [phi:f0::@11->fa]
  fa_from_b11:
  //SEG48 [59] phi (byte) bd#129 = (byte) bd#120 [phi:f0::@11->fa#0] -- register_copy 
  //SEG49 [59] phi (byte) bc#39 = (byte) bc#63 [phi:f0::@11->fa#1] -- register_copy 
  //SEG50 [59] phi (byte) bb#27 = (byte~) bb#102 [phi:f0::@11->fa#2] -- register_copy 
    jsr fa
  //SEG51 [18] phi from f0::@1 f0::@11 to f0::@2 [phi:f0::@1/f0::@11->f0::@2]
  b2_from_b1:
  b2_from_b11:
  //SEG52 [18] phi (byte) bd#121 = (byte) bd#120 [phi:f0::@1/f0::@11->f0::@2#0] -- register_copy 
  //SEG53 [18] phi (byte) bc#64 = (byte) bc#63 [phi:f0::@1/f0::@11->f0::@2#1] -- register_copy 
  //SEG54 [18] phi (byte) bb#19 = (byte) bb#18 [phi:f0::@1/f0::@11->f0::@2#2] -- register_copy 
    jmp b2
  //SEG55 f0::@2
  b2:
  //SEG56 [19] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 2) goto f0::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp ba
    bne b3_from_b2
    jmp b12
  //SEG57 f0::@12
  b12:
  //SEG58 [20] (byte) bb#5 ← ++ (byte) bb#19 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG59 [21] (byte~) bb#103 ← (byte) bb#5 -- vbuz1=vbuz2 
    lda bb
    sta bb_103
  //SEG60 [22] call fa 
  //SEG61 [59] phi from f0::@12 to fa [phi:f0::@12->fa]
  fa_from_b12:
  //SEG62 [59] phi (byte) bd#129 = (byte) bd#121 [phi:f0::@12->fa#0] -- register_copy 
  //SEG63 [59] phi (byte) bc#39 = (byte) bc#64 [phi:f0::@12->fa#1] -- register_copy 
  //SEG64 [59] phi (byte) bb#27 = (byte~) bb#103 [phi:f0::@12->fa#2] -- register_copy 
    jsr fa
  //SEG65 [23] phi from f0::@12 f0::@2 to f0::@3 [phi:f0::@12/f0::@2->f0::@3]
  b3_from_b12:
  b3_from_b2:
  //SEG66 [23] phi (byte) bd#122 = (byte) bd#24 [phi:f0::@12/f0::@2->f0::@3#0] -- register_copy 
  //SEG67 [23] phi (byte) bc#65 = (byte) bc#24 [phi:f0::@12/f0::@2->f0::@3#1] -- register_copy 
  //SEG68 [23] phi (byte) bb#20 = (byte) bb#5 [phi:f0::@12/f0::@2->f0::@3#2] -- register_copy 
    jmp b3
  //SEG69 f0::@3
  b3:
  //SEG70 [24] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto f0::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp ba
    bne b4_from_b3
    jmp b13
  //SEG71 f0::@13
  b13:
  //SEG72 [25] (byte) bb#6 ← ++ (byte) bb#20 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG73 [26] (byte~) bb#104 ← (byte) bb#6 -- vbuz1=vbuz2 
    lda bb
    sta bb_104
  //SEG74 [27] call fa 
  //SEG75 [59] phi from f0::@13 to fa [phi:f0::@13->fa]
  fa_from_b13:
  //SEG76 [59] phi (byte) bd#129 = (byte) bd#122 [phi:f0::@13->fa#0] -- register_copy 
  //SEG77 [59] phi (byte) bc#39 = (byte) bc#65 [phi:f0::@13->fa#1] -- register_copy 
  //SEG78 [59] phi (byte) bb#27 = (byte~) bb#104 [phi:f0::@13->fa#2] -- register_copy 
    jsr fa
  //SEG79 [28] phi from f0::@13 f0::@3 to f0::@4 [phi:f0::@13/f0::@3->f0::@4]
  b4_from_b13:
  b4_from_b3:
  //SEG80 [28] phi (byte) bd#123 = (byte) bd#24 [phi:f0::@13/f0::@3->f0::@4#0] -- register_copy 
  //SEG81 [28] phi (byte) bc#66 = (byte) bc#24 [phi:f0::@13/f0::@3->f0::@4#1] -- register_copy 
  //SEG82 [28] phi (byte) bb#21 = (byte) bb#6 [phi:f0::@13/f0::@3->f0::@4#2] -- register_copy 
    jmp b4
  //SEG83 f0::@4
  b4:
  //SEG84 [29] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto f0::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp ba
    bne b5_from_b4
    jmp b14
  //SEG85 f0::@14
  b14:
  //SEG86 [30] (byte) bb#66 ← ++ (byte) bb#21 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG87 [31] (byte~) bb#105 ← (byte) bb#66 -- vbuz1=vbuz2 
    lda bb
    sta bb_105
  //SEG88 [32] call fa 
  //SEG89 [59] phi from f0::@14 to fa [phi:f0::@14->fa]
  fa_from_b14:
  //SEG90 [59] phi (byte) bd#129 = (byte) bd#123 [phi:f0::@14->fa#0] -- register_copy 
  //SEG91 [59] phi (byte) bc#39 = (byte) bc#66 [phi:f0::@14->fa#1] -- register_copy 
  //SEG92 [59] phi (byte) bb#27 = (byte~) bb#105 [phi:f0::@14->fa#2] -- register_copy 
    jsr fa
  //SEG93 [33] phi from f0::@14 f0::@4 to f0::@5 [phi:f0::@14/f0::@4->f0::@5]
  b5_from_b14:
  b5_from_b4:
  //SEG94 [33] phi (byte) bd#124 = (byte) bd#24 [phi:f0::@14/f0::@4->f0::@5#0] -- register_copy 
  //SEG95 [33] phi (byte) bc#100 = (byte) bc#24 [phi:f0::@14/f0::@4->f0::@5#1] -- register_copy 
  //SEG96 [33] phi (byte) bb#22 = (byte) bb#66 [phi:f0::@14/f0::@4->f0::@5#2] -- register_copy 
    jmp b5
  //SEG97 f0::@5
  b5:
  //SEG98 [34] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto f0::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp ba
    bne b6_from_b5
    jmp b15
  //SEG99 f0::@15
  b15:
  //SEG100 [35] (byte) bb#67 ← ++ (byte) bb#22 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG101 [36] (byte~) bb#106 ← (byte) bb#67 -- vbuz1=vbuz2 
    lda bb
    sta bb_106
  //SEG102 [37] call fa 
  //SEG103 [59] phi from f0::@15 to fa [phi:f0::@15->fa]
  fa_from_b15:
  //SEG104 [59] phi (byte) bd#129 = (byte) bd#124 [phi:f0::@15->fa#0] -- register_copy 
  //SEG105 [59] phi (byte) bc#39 = (byte) bc#100 [phi:f0::@15->fa#1] -- register_copy 
  //SEG106 [59] phi (byte) bb#27 = (byte~) bb#106 [phi:f0::@15->fa#2] -- register_copy 
    jsr fa
  //SEG107 [38] phi from f0::@15 f0::@5 to f0::@6 [phi:f0::@15/f0::@5->f0::@6]
  b6_from_b15:
  b6_from_b5:
  //SEG108 [38] phi (byte) bd#125 = (byte) bd#24 [phi:f0::@15/f0::@5->f0::@6#0] -- register_copy 
  //SEG109 [38] phi (byte) bc#101 = (byte) bc#24 [phi:f0::@15/f0::@5->f0::@6#1] -- register_copy 
  //SEG110 [38] phi (byte) bb#23 = (byte) bb#67 [phi:f0::@15/f0::@5->f0::@6#2] -- register_copy 
    jmp b6
  //SEG111 f0::@6
  b6:
  //SEG112 [39] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto f0::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp ba
    bne b7_from_b6
    jmp b16
  //SEG113 f0::@16
  b16:
  //SEG114 [40] (byte) bb#68 ← ++ (byte) bb#23 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG115 [41] (byte~) bb#107 ← (byte) bb#68 -- vbuz1=vbuz2 
    lda bb
    sta bb_107
  //SEG116 [42] call fa 
  //SEG117 [59] phi from f0::@16 to fa [phi:f0::@16->fa]
  fa_from_b16:
  //SEG118 [59] phi (byte) bd#129 = (byte) bd#125 [phi:f0::@16->fa#0] -- register_copy 
  //SEG119 [59] phi (byte) bc#39 = (byte) bc#101 [phi:f0::@16->fa#1] -- register_copy 
  //SEG120 [59] phi (byte) bb#27 = (byte~) bb#107 [phi:f0::@16->fa#2] -- register_copy 
    jsr fa
  //SEG121 [43] phi from f0::@16 f0::@6 to f0::@7 [phi:f0::@16/f0::@6->f0::@7]
  b7_from_b16:
  b7_from_b6:
  //SEG122 [43] phi (byte) bd#126 = (byte) bd#24 [phi:f0::@16/f0::@6->f0::@7#0] -- register_copy 
  //SEG123 [43] phi (byte) bc#102 = (byte) bc#24 [phi:f0::@16/f0::@6->f0::@7#1] -- register_copy 
  //SEG124 [43] phi (byte) bb#24 = (byte) bb#68 [phi:f0::@16/f0::@6->f0::@7#2] -- register_copy 
    jmp b7
  //SEG125 f0::@7
  b7:
  //SEG126 [44] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto f0::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp ba
    bne b8_from_b7
    jmp b17
  //SEG127 f0::@17
  b17:
  //SEG128 [45] (byte) bb#10 ← ++ (byte) bb#24 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG129 [46] (byte~) bb#108 ← (byte) bb#10 -- vbuz1=vbuz2 
    lda bb
    sta bb_108
  //SEG130 [47] call fa 
  //SEG131 [59] phi from f0::@17 to fa [phi:f0::@17->fa]
  fa_from_b17:
  //SEG132 [59] phi (byte) bd#129 = (byte) bd#126 [phi:f0::@17->fa#0] -- register_copy 
  //SEG133 [59] phi (byte) bc#39 = (byte) bc#102 [phi:f0::@17->fa#1] -- register_copy 
  //SEG134 [59] phi (byte) bb#27 = (byte~) bb#108 [phi:f0::@17->fa#2] -- register_copy 
    jsr fa
  //SEG135 [48] phi from f0::@17 f0::@7 to f0::@8 [phi:f0::@17/f0::@7->f0::@8]
  b8_from_b17:
  b8_from_b7:
  //SEG136 [48] phi (byte) bd#127 = (byte) bd#24 [phi:f0::@17/f0::@7->f0::@8#0] -- register_copy 
  //SEG137 [48] phi (byte) bc#103 = (byte) bc#24 [phi:f0::@17/f0::@7->f0::@8#1] -- register_copy 
  //SEG138 [48] phi (byte) bb#25 = (byte) bb#10 [phi:f0::@17/f0::@7->f0::@8#2] -- register_copy 
    jmp b8
  //SEG139 f0::@8
  b8:
  //SEG140 [49] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto f0::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp ba
    bne b9_from_b8
    jmp b18
  //SEG141 f0::@18
  b18:
  //SEG142 [50] (byte) bb#11 ← ++ (byte) bb#25 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG143 [51] (byte~) bb#109 ← (byte) bb#11 -- vbuz1=vbuz2 
    lda bb
    sta bb_109
  //SEG144 [52] call fa 
  //SEG145 [59] phi from f0::@18 to fa [phi:f0::@18->fa]
  fa_from_b18:
  //SEG146 [59] phi (byte) bd#129 = (byte) bd#127 [phi:f0::@18->fa#0] -- register_copy 
  //SEG147 [59] phi (byte) bc#39 = (byte) bc#103 [phi:f0::@18->fa#1] -- register_copy 
  //SEG148 [59] phi (byte) bb#27 = (byte~) bb#109 [phi:f0::@18->fa#2] -- register_copy 
    jsr fa
  //SEG149 [53] phi from f0::@18 f0::@8 to f0::@9 [phi:f0::@18/f0::@8->f0::@9]
  b9_from_b18:
  b9_from_b8:
  //SEG150 [53] phi (byte) bd#128 = (byte) bd#24 [phi:f0::@18/f0::@8->f0::@9#0] -- register_copy 
  //SEG151 [53] phi (byte) bc#104 = (byte) bc#24 [phi:f0::@18/f0::@8->f0::@9#1] -- register_copy 
  //SEG152 [53] phi (byte) bb#49 = (byte) bb#11 [phi:f0::@18/f0::@8->f0::@9#2] -- register_copy 
    jmp b9
  //SEG153 f0::@9
  b9:
  //SEG154 [54] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 9) goto f0::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp ba
    bne breturn_from_b9
  //SEG155 [55] phi from f0::@9 to f0::@19 [phi:f0::@9->f0::@19]
  b19_from_b9:
    jmp b19
  //SEG156 f0::@19
  b19:
  //SEG157 [56] call fa 
  //SEG158 [59] phi from f0::@19 to fa [phi:f0::@19->fa]
  fa_from_b19:
  //SEG159 [59] phi (byte) bd#129 = (byte) bd#128 [phi:f0::@19->fa#0] -- register_copy 
  //SEG160 [59] phi (byte) bc#39 = (byte) bc#104 [phi:f0::@19->fa#1] -- register_copy 
  //SEG161 [59] phi (byte) bb#27 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:f0::@19->fa#2] -- vbuz1=vbuc1 
    lda #0
    sta bb_27
    jsr fa
  //SEG162 [57] phi from f0::@19 to f0::@return [phi:f0::@19->f0::@return]
  breturn_from_b19:
  //SEG163 [57] phi (byte) bd#13 = (byte) bd#24 [phi:f0::@19->f0::@return#0] -- register_copy 
  //SEG164 [57] phi (byte) bc#13 = (byte) bc#24 [phi:f0::@19->f0::@return#1] -- register_copy 
  //SEG165 [57] phi (byte) bb#13 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:f0::@19->f0::@return#2] -- vbuz1=vbuc1 
    lda #0
    sta bb
    jmp breturn
  //SEG166 [57] phi from f0::@9 to f0::@return [phi:f0::@9->f0::@return]
  breturn_from_b9:
  //SEG167 [57] phi (byte) bd#13 = (byte) bd#128 [phi:f0::@9->f0::@return#0] -- register_copy 
  //SEG168 [57] phi (byte) bc#13 = (byte) bc#104 [phi:f0::@9->f0::@return#1] -- register_copy 
  //SEG169 [57] phi (byte) bb#13 = (byte) bb#49 [phi:f0::@9->f0::@return#2] -- register_copy 
    jmp breturn
  //SEG170 f0::@return
  breturn:
  //SEG171 [58] return 
    rts
}
//SEG172 fa
fa: {
  //SEG173 [60] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto fa::@1 -- vbuz1_neq_0_then_la1 
    lda bb_27
    cmp #0
    bne b1_from_fa
    jmp b10
  //SEG174 fa::@10
  b10:
  //SEG175 [61] (byte) bc#105 ← ++ (byte) bc#39 -- vbuz1=_inc_vbuz1 
    inc bc
  //SEG176 [62] (byte~) bc#174 ← (byte) bc#105 -- vbuz1=vbuz2 
    lda bc
    sta bc_174
  //SEG177 [63] call fb 
  //SEG178 [110] phi from fa::@10 to fb [phi:fa::@10->fb]
  fb_from_b10:
  //SEG179 [110] phi (byte) bd#106 = (byte) bd#129 [phi:fa::@10->fb#0] -- register_copy 
  //SEG180 [110] phi (byte) bc#114 = (byte~) bc#174 [phi:fa::@10->fb#1] -- register_copy 
    jsr fb
  //SEG181 [64] phi from fa fa::@10 to fa::@1 [phi:fa/fa::@10->fa::@1]
  b1_from_fa:
  b1_from_b10:
  //SEG182 [64] phi (byte) bd#130 = (byte) bd#129 [phi:fa/fa::@10->fa::@1#0] -- register_copy 
  //SEG183 [64] phi (byte) bc#40 = (byte) bc#39 [phi:fa/fa::@10->fa::@1#1] -- register_copy 
    jmp b1
  //SEG184 fa::@1
  b1:
  //SEG185 [65] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto fa::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp bb_27
    bne b2_from_b1
    jmp b11
  //SEG186 fa::@11
  b11:
  //SEG187 [66] (byte) bc#106 ← ++ (byte) bc#40 -- vbuz1=_inc_vbuz1 
    inc bc
  //SEG188 [67] (byte~) bc#175 ← (byte) bc#106 -- vbuz1=vbuz2 
    lda bc
    sta bc_175
  //SEG189 [68] call fb 
  //SEG190 [110] phi from fa::@11 to fb [phi:fa::@11->fb]
  fb_from_b11:
  //SEG191 [110] phi (byte) bd#106 = (byte) bd#130 [phi:fa::@11->fb#0] -- register_copy 
  //SEG192 [110] phi (byte) bc#114 = (byte~) bc#175 [phi:fa::@11->fb#1] -- register_copy 
    jsr fb
  //SEG193 [69] phi from fa::@1 fa::@11 to fa::@2 [phi:fa::@1/fa::@11->fa::@2]
  b2_from_b1:
  b2_from_b11:
  //SEG194 [69] phi (byte) bd#131 = (byte) bd#130 [phi:fa::@1/fa::@11->fa::@2#0] -- register_copy 
  //SEG195 [69] phi (byte) bc#41 = (byte) bc#40 [phi:fa::@1/fa::@11->fa::@2#1] -- register_copy 
    jmp b2
  //SEG196 fa::@2
  b2:
  //SEG197 [70] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 2) goto fa::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp bb_27
    bne b3_from_b2
    jmp b12
  //SEG198 fa::@12
  b12:
  //SEG199 [71] (byte) bc#107 ← ++ (byte) bc#41 -- vbuz1=_inc_vbuz1 
    inc bc
  //SEG200 [72] (byte~) bc#176 ← (byte) bc#107 -- vbuz1=vbuz2 
    lda bc
    sta bc_176
  //SEG201 [73] call fb 
  //SEG202 [110] phi from fa::@12 to fb [phi:fa::@12->fb]
  fb_from_b12:
  //SEG203 [110] phi (byte) bd#106 = (byte) bd#131 [phi:fa::@12->fb#0] -- register_copy 
  //SEG204 [110] phi (byte) bc#114 = (byte~) bc#176 [phi:fa::@12->fb#1] -- register_copy 
    jsr fb
  //SEG205 [74] phi from fa::@12 fa::@2 to fa::@3 [phi:fa::@12/fa::@2->fa::@3]
  b3_from_b12:
  b3_from_b2:
  //SEG206 [74] phi (byte) bd#132 = (byte) bd#35 [phi:fa::@12/fa::@2->fa::@3#0] -- register_copy 
  //SEG207 [74] phi (byte) bc#42 = (byte) bc#107 [phi:fa::@12/fa::@2->fa::@3#1] -- register_copy 
    jmp b3
  //SEG208 fa::@3
  b3:
  //SEG209 [75] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto fa::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp bb_27
    bne b4_from_b3
    jmp b13
  //SEG210 fa::@13
  b13:
  //SEG211 [76] (byte) bc#108 ← ++ (byte) bc#42 -- vbuz1=_inc_vbuz1 
    inc bc
  //SEG212 [77] (byte~) bc#177 ← (byte) bc#108 -- vbuz1=vbuz2 
    lda bc
    sta bc_177
  //SEG213 [78] call fb 
  //SEG214 [110] phi from fa::@13 to fb [phi:fa::@13->fb]
  fb_from_b13:
  //SEG215 [110] phi (byte) bd#106 = (byte) bd#132 [phi:fa::@13->fb#0] -- register_copy 
  //SEG216 [110] phi (byte) bc#114 = (byte~) bc#177 [phi:fa::@13->fb#1] -- register_copy 
    jsr fb
  //SEG217 [79] phi from fa::@13 fa::@3 to fa::@4 [phi:fa::@13/fa::@3->fa::@4]
  b4_from_b13:
  b4_from_b3:
  //SEG218 [79] phi (byte) bd#133 = (byte) bd#35 [phi:fa::@13/fa::@3->fa::@4#0] -- register_copy 
  //SEG219 [79] phi (byte) bc#43 = (byte) bc#108 [phi:fa::@13/fa::@3->fa::@4#1] -- register_copy 
    jmp b4
  //SEG220 fa::@4
  b4:
  //SEG221 [80] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto fa::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp bb_27
    bne b5_from_b4
    jmp b14
  //SEG222 fa::@14
  b14:
  //SEG223 [81] (byte) bc#109 ← ++ (byte) bc#43 -- vbuz1=_inc_vbuz1 
    inc bc
  //SEG224 [82] (byte~) bc#178 ← (byte) bc#109 -- vbuz1=vbuz2 
    lda bc
    sta bc_178
  //SEG225 [83] call fb 
  //SEG226 [110] phi from fa::@14 to fb [phi:fa::@14->fb]
  fb_from_b14:
  //SEG227 [110] phi (byte) bd#106 = (byte) bd#133 [phi:fa::@14->fb#0] -- register_copy 
  //SEG228 [110] phi (byte) bc#114 = (byte~) bc#178 [phi:fa::@14->fb#1] -- register_copy 
    jsr fb
  //SEG229 [84] phi from fa::@14 fa::@4 to fa::@5 [phi:fa::@14/fa::@4->fa::@5]
  b5_from_b14:
  b5_from_b4:
  //SEG230 [84] phi (byte) bd#100 = (byte) bd#35 [phi:fa::@14/fa::@4->fa::@5#0] -- register_copy 
  //SEG231 [84] phi (byte) bc#44 = (byte) bc#109 [phi:fa::@14/fa::@4->fa::@5#1] -- register_copy 
    jmp b5
  //SEG232 fa::@5
  b5:
  //SEG233 [85] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto fa::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp bb_27
    bne b6_from_b5
    jmp b15
  //SEG234 fa::@15
  b15:
  //SEG235 [86] (byte) bc#110 ← ++ (byte) bc#44 -- vbuz1=_inc_vbuz1 
    inc bc
  //SEG236 [87] (byte~) bc#179 ← (byte) bc#110 -- vbuz1=vbuz2 
    lda bc
    sta bc_179
  //SEG237 [88] call fb 
  //SEG238 [110] phi from fa::@15 to fb [phi:fa::@15->fb]
  fb_from_b15:
  //SEG239 [110] phi (byte) bd#106 = (byte) bd#100 [phi:fa::@15->fb#0] -- register_copy 
  //SEG240 [110] phi (byte) bc#114 = (byte~) bc#179 [phi:fa::@15->fb#1] -- register_copy 
    jsr fb
  //SEG241 [89] phi from fa::@15 fa::@5 to fa::@6 [phi:fa::@15/fa::@5->fa::@6]
  b6_from_b15:
  b6_from_b5:
  //SEG242 [89] phi (byte) bd#101 = (byte) bd#35 [phi:fa::@15/fa::@5->fa::@6#0] -- register_copy 
  //SEG243 [89] phi (byte) bc#45 = (byte) bc#110 [phi:fa::@15/fa::@5->fa::@6#1] -- register_copy 
    jmp b6
  //SEG244 fa::@6
  b6:
  //SEG245 [90] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto fa::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp bb_27
    bne b7_from_b6
    jmp b16
  //SEG246 fa::@16
  b16:
  //SEG247 [91] (byte) bc#111 ← ++ (byte) bc#45 -- vbuz1=_inc_vbuz1 
    inc bc
  //SEG248 [92] (byte~) bc#180 ← (byte) bc#111 -- vbuz1=vbuz2 
    lda bc
    sta bc_180
  //SEG249 [93] call fb 
  //SEG250 [110] phi from fa::@16 to fb [phi:fa::@16->fb]
  fb_from_b16:
  //SEG251 [110] phi (byte) bd#106 = (byte) bd#101 [phi:fa::@16->fb#0] -- register_copy 
  //SEG252 [110] phi (byte) bc#114 = (byte~) bc#180 [phi:fa::@16->fb#1] -- register_copy 
    jsr fb
  //SEG253 [94] phi from fa::@16 fa::@6 to fa::@7 [phi:fa::@16/fa::@6->fa::@7]
  b7_from_b16:
  b7_from_b6:
  //SEG254 [94] phi (byte) bd#102 = (byte) bd#35 [phi:fa::@16/fa::@6->fa::@7#0] -- register_copy 
  //SEG255 [94] phi (byte) bc#46 = (byte) bc#111 [phi:fa::@16/fa::@6->fa::@7#1] -- register_copy 
    jmp b7
  //SEG256 fa::@7
  b7:
  //SEG257 [95] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto fa::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp bb_27
    bne b8_from_b7
    jmp b17
  //SEG258 fa::@17
  b17:
  //SEG259 [96] (byte) bc#112 ← ++ (byte) bc#46 -- vbuz1=_inc_vbuz1 
    inc bc
  //SEG260 [97] (byte~) bc#181 ← (byte) bc#112 -- vbuz1=vbuz2 
    lda bc
    sta bc_181
  //SEG261 [98] call fb 
  //SEG262 [110] phi from fa::@17 to fb [phi:fa::@17->fb]
  fb_from_b17:
  //SEG263 [110] phi (byte) bd#106 = (byte) bd#102 [phi:fa::@17->fb#0] -- register_copy 
  //SEG264 [110] phi (byte) bc#114 = (byte~) bc#181 [phi:fa::@17->fb#1] -- register_copy 
    jsr fb
  //SEG265 [99] phi from fa::@17 fa::@7 to fa::@8 [phi:fa::@17/fa::@7->fa::@8]
  b8_from_b17:
  b8_from_b7:
  //SEG266 [99] phi (byte) bd#103 = (byte) bd#35 [phi:fa::@17/fa::@7->fa::@8#0] -- register_copy 
  //SEG267 [99] phi (byte) bc#47 = (byte) bc#112 [phi:fa::@17/fa::@7->fa::@8#1] -- register_copy 
    jmp b8
  //SEG268 fa::@8
  b8:
  //SEG269 [100] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto fa::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp bb_27
    bne b9_from_b8
    jmp b18
  //SEG270 fa::@18
  b18:
  //SEG271 [101] (byte) bc#123 ← ++ (byte) bc#47 -- vbuz1=_inc_vbuz1 
    inc bc
  //SEG272 [102] (byte~) bc#182 ← (byte) bc#123 -- vbuz1=vbuz2 
    lda bc
    sta bc_182
  //SEG273 [103] call fb 
  //SEG274 [110] phi from fa::@18 to fb [phi:fa::@18->fb]
  fb_from_b18:
  //SEG275 [110] phi (byte) bd#106 = (byte) bd#103 [phi:fa::@18->fb#0] -- register_copy 
  //SEG276 [110] phi (byte) bc#114 = (byte~) bc#182 [phi:fa::@18->fb#1] -- register_copy 
    jsr fb
  //SEG277 [104] phi from fa::@18 fa::@8 to fa::@9 [phi:fa::@18/fa::@8->fa::@9]
  b9_from_b18:
  b9_from_b8:
  //SEG278 [104] phi (byte) bd#104 = (byte) bd#35 [phi:fa::@18/fa::@8->fa::@9#0] -- register_copy 
  //SEG279 [104] phi (byte) bc#113 = (byte) bc#123 [phi:fa::@18/fa::@8->fa::@9#1] -- register_copy 
    jmp b9
  //SEG280 fa::@9
  b9:
  //SEG281 [105] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 9) goto fa::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp bb_27
    bne breturn_from_b9
  //SEG282 [106] phi from fa::@9 to fa::@19 [phi:fa::@9->fa::@19]
  b19_from_b9:
    jmp b19
  //SEG283 fa::@19
  b19:
  //SEG284 [107] call fb 
  //SEG285 [110] phi from fa::@19 to fb [phi:fa::@19->fb]
  fb_from_b19:
  //SEG286 [110] phi (byte) bd#106 = (byte) bd#104 [phi:fa::@19->fb#0] -- register_copy 
  //SEG287 [110] phi (byte) bc#114 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:fa::@19->fb#1] -- vbuz1=vbuc1 
    lda #0
    sta bc_114
    jsr fb
  //SEG288 [108] phi from fa::@19 to fa::@return [phi:fa::@19->fa::@return]
  breturn_from_b19:
  //SEG289 [108] phi (byte) bd#24 = (byte) bd#35 [phi:fa::@19->fa::@return#0] -- register_copy 
  //SEG290 [108] phi (byte) bc#24 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:fa::@19->fa::@return#1] -- vbuz1=vbuc1 
    lda #0
    sta bc
    jmp breturn
  //SEG291 [108] phi from fa::@9 to fa::@return [phi:fa::@9->fa::@return]
  breturn_from_b9:
  //SEG292 [108] phi (byte) bd#24 = (byte) bd#104 [phi:fa::@9->fa::@return#0] -- register_copy 
  //SEG293 [108] phi (byte) bc#24 = (byte) bc#113 [phi:fa::@9->fa::@return#1] -- register_copy 
    jmp breturn
  //SEG294 fa::@return
  breturn:
  //SEG295 [109] return 
    rts
}
//SEG296 fb
fb: {
  //SEG297 [111] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto fb::@1 -- vbuz1_neq_0_then_la1 
    lda bc_114
    cmp #0
    bne b1_from_fb
    jmp b10
  //SEG298 fb::@10
  b10:
  //SEG299 [112] (byte) bd#139 ← ++ (byte) bd#106 -- vbuz1=_inc_vbuz1 
    inc bd
  //SEG300 [113] (byte~) bd#229 ← (byte) bd#139 -- vbuz1=vbuz2 
    lda bd
    sta bd_229
  //SEG301 [114] call fc 
  //SEG302 [161] phi from fb::@10 to fc [phi:fb::@10->fc]
  fc_from_b10:
  //SEG303 [161] phi (byte) bd#71 = (byte~) bd#229 [phi:fb::@10->fc#0] -- register_copy 
    jsr fc
  //SEG304 [115] phi from fb fb::@10 to fb::@1 [phi:fb/fb::@10->fb::@1]
  b1_from_fb:
  b1_from_b10:
  //SEG305 [115] phi (byte) bd#107 = (byte) bd#106 [phi:fb/fb::@10->fb::@1#0] -- register_copy 
    jmp b1
  //SEG306 fb::@1
  b1:
  //SEG307 [116] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto fb::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp bc_114
    bne b2_from_b1
    jmp b11
  //SEG308 fb::@11
  b11:
  //SEG309 [117] (byte) bd#140 ← ++ (byte) bd#107 -- vbuz1=_inc_vbuz1 
    inc bd
  //SEG310 [118] (byte~) bd#230 ← (byte) bd#140 -- vbuz1=vbuz2 
    lda bd
    sta bd_230
  //SEG311 [119] call fc 
  //SEG312 [161] phi from fb::@11 to fc [phi:fb::@11->fc]
  fc_from_b11:
  //SEG313 [161] phi (byte) bd#71 = (byte~) bd#230 [phi:fb::@11->fc#0] -- register_copy 
    jsr fc
  //SEG314 [120] phi from fb::@1 fb::@11 to fb::@2 [phi:fb::@1/fb::@11->fb::@2]
  b2_from_b1:
  b2_from_b11:
  //SEG315 [120] phi (byte) bd#108 = (byte) bd#107 [phi:fb::@1/fb::@11->fb::@2#0] -- register_copy 
    jmp b2
  //SEG316 fb::@2
  b2:
  //SEG317 [121] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 2) goto fb::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp bc_114
    bne b3_from_b2
    jmp b12
  //SEG318 fb::@12
  b12:
  //SEG319 [122] (byte) bd#141 ← ++ (byte) bd#108 -- vbuz1=_inc_vbuz1 
    inc bd
  //SEG320 [123] (byte~) bd#231 ← (byte) bd#141 -- vbuz1=vbuz2 
    lda bd
    sta bd_231
  //SEG321 [124] call fc 
  //SEG322 [161] phi from fb::@12 to fc [phi:fb::@12->fc]
  fc_from_b12:
  //SEG323 [161] phi (byte) bd#71 = (byte~) bd#231 [phi:fb::@12->fc#0] -- register_copy 
    jsr fc
  //SEG324 [125] phi from fb::@12 fb::@2 to fb::@3 [phi:fb::@12/fb::@2->fb::@3]
  b3_from_b12:
  b3_from_b2:
  //SEG325 [125] phi (byte) bd#109 = (byte) bd#141 [phi:fb::@12/fb::@2->fb::@3#0] -- register_copy 
    jmp b3
  //SEG326 fb::@3
  b3:
  //SEG327 [126] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto fb::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp bc_114
    bne b4_from_b3
    jmp b13
  //SEG328 fb::@13
  b13:
  //SEG329 [127] (byte) bd#142 ← ++ (byte) bd#109 -- vbuz1=_inc_vbuz1 
    inc bd
  //SEG330 [128] (byte~) bd#232 ← (byte) bd#142 -- vbuz1=vbuz2 
    lda bd
    sta bd_232
  //SEG331 [129] call fc 
  //SEG332 [161] phi from fb::@13 to fc [phi:fb::@13->fc]
  fc_from_b13:
  //SEG333 [161] phi (byte) bd#71 = (byte~) bd#232 [phi:fb::@13->fc#0] -- register_copy 
    jsr fc
  //SEG334 [130] phi from fb::@13 fb::@3 to fb::@4 [phi:fb::@13/fb::@3->fb::@4]
  b4_from_b13:
  b4_from_b3:
  //SEG335 [130] phi (byte) bd#110 = (byte) bd#142 [phi:fb::@13/fb::@3->fb::@4#0] -- register_copy 
    jmp b4
  //SEG336 fb::@4
  b4:
  //SEG337 [131] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto fb::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp bc_114
    bne b5_from_b4
    jmp b14
  //SEG338 fb::@14
  b14:
  //SEG339 [132] (byte) bd#143 ← ++ (byte) bd#110 -- vbuz1=_inc_vbuz1 
    inc bd
  //SEG340 [133] (byte~) bd#233 ← (byte) bd#143 -- vbuz1=vbuz2 
    lda bd
    sta bd_233
  //SEG341 [134] call fc 
  //SEG342 [161] phi from fb::@14 to fc [phi:fb::@14->fc]
  fc_from_b14:
  //SEG343 [161] phi (byte) bd#71 = (byte~) bd#233 [phi:fb::@14->fc#0] -- register_copy 
    jsr fc
  //SEG344 [135] phi from fb::@14 fb::@4 to fb::@5 [phi:fb::@14/fb::@4->fb::@5]
  b5_from_b14:
  b5_from_b4:
  //SEG345 [135] phi (byte) bd#111 = (byte) bd#143 [phi:fb::@14/fb::@4->fb::@5#0] -- register_copy 
    jmp b5
  //SEG346 fb::@5
  b5:
  //SEG347 [136] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto fb::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp bc_114
    bne b6_from_b5
    jmp b15
  //SEG348 fb::@15
  b15:
  //SEG349 [137] (byte) bd#144 ← ++ (byte) bd#111 -- vbuz1=_inc_vbuz1 
    inc bd
  //SEG350 [138] (byte~) bd#234 ← (byte) bd#144 -- vbuz1=vbuz2 
    lda bd
    sta bd_234
  //SEG351 [139] call fc 
  //SEG352 [161] phi from fb::@15 to fc [phi:fb::@15->fc]
  fc_from_b15:
  //SEG353 [161] phi (byte) bd#71 = (byte~) bd#234 [phi:fb::@15->fc#0] -- register_copy 
    jsr fc
  //SEG354 [140] phi from fb::@15 fb::@5 to fb::@6 [phi:fb::@15/fb::@5->fb::@6]
  b6_from_b15:
  b6_from_b5:
  //SEG355 [140] phi (byte) bd#112 = (byte) bd#144 [phi:fb::@15/fb::@5->fb::@6#0] -- register_copy 
    jmp b6
  //SEG356 fb::@6
  b6:
  //SEG357 [141] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto fb::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp bc_114
    bne b7_from_b6
    jmp b16
  //SEG358 fb::@16
  b16:
  //SEG359 [142] (byte) bd#145 ← ++ (byte) bd#112 -- vbuz1=_inc_vbuz1 
    inc bd
  //SEG360 [143] (byte~) bd#235 ← (byte) bd#145 -- vbuz1=vbuz2 
    lda bd
    sta bd_235
  //SEG361 [144] call fc 
  //SEG362 [161] phi from fb::@16 to fc [phi:fb::@16->fc]
  fc_from_b16:
  //SEG363 [161] phi (byte) bd#71 = (byte~) bd#235 [phi:fb::@16->fc#0] -- register_copy 
    jsr fc
  //SEG364 [145] phi from fb::@16 fb::@6 to fb::@7 [phi:fb::@16/fb::@6->fb::@7]
  b7_from_b16:
  b7_from_b6:
  //SEG365 [145] phi (byte) bd#113 = (byte) bd#145 [phi:fb::@16/fb::@6->fb::@7#0] -- register_copy 
    jmp b7
  //SEG366 fb::@7
  b7:
  //SEG367 [146] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto fb::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp bc_114
    bne b8_from_b7
    jmp b17
  //SEG368 fb::@17
  b17:
  //SEG369 [147] (byte) bd#146 ← ++ (byte) bd#113 -- vbuz1=_inc_vbuz1 
    inc bd
  //SEG370 [148] (byte~) bd#236 ← (byte) bd#146 -- vbuz1=vbuz2 
    lda bd
    sta bd_236
  //SEG371 [149] call fc 
  //SEG372 [161] phi from fb::@17 to fc [phi:fb::@17->fc]
  fc_from_b17:
  //SEG373 [161] phi (byte) bd#71 = (byte~) bd#236 [phi:fb::@17->fc#0] -- register_copy 
    jsr fc
  //SEG374 [150] phi from fb::@17 fb::@7 to fb::@8 [phi:fb::@17/fb::@7->fb::@8]
  b8_from_b17:
  b8_from_b7:
  //SEG375 [150] phi (byte) bd#114 = (byte) bd#146 [phi:fb::@17/fb::@7->fb::@8#0] -- register_copy 
    jmp b8
  //SEG376 fb::@8
  b8:
  //SEG377 [151] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto fb::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp bc_114
    bne b9_from_b8
    jmp b18
  //SEG378 fb::@18
  b18:
  //SEG379 [152] (byte) bd#148 ← ++ (byte) bd#114 -- vbuz1=_inc_vbuz1 
    inc bd
  //SEG380 [153] (byte~) bd#237 ← (byte) bd#148 -- vbuz1=vbuz2 
    lda bd
    sta bd_237
  //SEG381 [154] call fc 
  //SEG382 [161] phi from fb::@18 to fc [phi:fb::@18->fc]
  fc_from_b18:
  //SEG383 [161] phi (byte) bd#71 = (byte~) bd#237 [phi:fb::@18->fc#0] -- register_copy 
    jsr fc
  //SEG384 [155] phi from fb::@18 fb::@8 to fb::@9 [phi:fb::@18/fb::@8->fb::@9]
  b9_from_b18:
  b9_from_b8:
  //SEG385 [155] phi (byte) bd#115 = (byte) bd#148 [phi:fb::@18/fb::@8->fb::@9#0] -- register_copy 
    jmp b9
  //SEG386 fb::@9
  b9:
  //SEG387 [156] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 9) goto fb::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp bc_114
    bne breturn_from_b9
  //SEG388 [157] phi from fb::@9 to fb::@19 [phi:fb::@9->fb::@19]
  b19_from_b9:
    jmp b19
  //SEG389 fb::@19
  b19:
  //SEG390 [158] call fc 
  //SEG391 [161] phi from fb::@19 to fc [phi:fb::@19->fc]
  fc_from_b19:
  //SEG392 [161] phi (byte) bd#71 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:fb::@19->fc#0] -- vbuz1=vbuc1 
    lda #0
    sta bd_71
    jsr fc
  //SEG393 [159] phi from fb::@19 to fb::@return [phi:fb::@19->fb::@return]
  breturn_from_b19:
  //SEG394 [159] phi (byte) bd#35 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:fb::@19->fb::@return#0] -- vbuz1=vbuc1 
    lda #0
    sta bd
    jmp breturn
  //SEG395 [159] phi from fb::@9 to fb::@return [phi:fb::@9->fb::@return]
  breturn_from_b9:
  //SEG396 [159] phi (byte) bd#35 = (byte) bd#115 [phi:fb::@9->fb::@return#0] -- register_copy 
    jmp breturn
  //SEG397 fb::@return
  breturn:
  //SEG398 [160] return 
    rts
}
//SEG399 fc
fc: {
  //SEG400 [162] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto fc::@1 -- vbuz1_neq_0_then_la1 
    lda bd_71
    cmp #0
    bne b1
    jmp b1
  //SEG401 fc::@1
  b1:
  //SEG402 [163] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto fc::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp bd_71
    bne b2
    jmp b2
  //SEG403 fc::@2
  b2:
  //SEG404 [164] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 2) goto fc::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp bd_71
    bne b3
    jmp b3
  //SEG405 fc::@3
  b3:
  //SEG406 [165] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto fc::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp bd_71
    bne b4
    jmp b4
  //SEG407 fc::@4
  b4:
  //SEG408 [166] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto fc::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp bd_71
    bne b5
    jmp b5
  //SEG409 fc::@5
  b5:
  //SEG410 [167] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto fc::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp bd_71
    bne b6
    jmp b6
  //SEG411 fc::@6
  b6:
  //SEG412 [168] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto fc::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp bd_71
    bne b7
    jmp b7
  //SEG413 fc::@7
  b7:
  //SEG414 [169] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto fc::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp bd_71
    bne b8
    jmp b8
  //SEG415 fc::@8
  b8:
  //SEG416 [170] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto fc::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp bd_71
    bne b9
    jmp b9
  //SEG417 fc::@9
  b9:
  //SEG418 [171] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 9) goto fc::@10 -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp bd_71
    bne b10_from_b9
    jmp breturn
  //SEG419 fc::@return
  breturn:
  //SEG420 [172] return 
    rts
  //SEG421 [173] phi from fc::@9 to fc::@10 [phi:fc::@9->fc::@10]
  b10_from_b9:
    jmp b10
  //SEG422 fc::@10
  b10:
    jmp breturn
}

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 [ ba#17 ba#1 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ bb#49 bb#11 bb#25 bb#10 bb#24 bb#68 bb#23 bb#67 bb#22 bb#66 bb#21 bb#6 bb#20 bb#19 bb#18 bb#16 bb#13 bb#3 bb#4 bb#5 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ bb#27 bb#101 bb#102 bb#103 bb#104 bb#105 bb#106 bb#107 bb#108 bb#109 ] : zp ZP_BYTE:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ bc#113 bc#123 bc#47 bc#112 bc#46 bc#111 bc#45 bc#110 bc#44 bc#109 bc#43 bc#108 bc#42 bc#41 bc#40 bc#39 bc#104 bc#103 bc#102 bc#101 bc#100 bc#66 bc#65 bc#64 bc#63 bc#2 bc#13 bc#24 bc#105 bc#106 bc#107 ] : zp ZP_BYTE:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ bc#114 bc#174 bc#175 bc#176 bc#177 bc#178 bc#179 bc#180 bc#181 bc#182 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ bd#115 bd#148 bd#114 bd#146 bd#113 bd#145 bd#112 bd#144 bd#111 bd#143 bd#110 bd#142 bd#109 bd#108 bd#107 bd#106 bd#104 bd#103 bd#102 bd#101 bd#100 bd#133 bd#132 bd#131 bd#130 bd#129 bd#128 bd#127 bd#126 bd#125 bd#124 bd#123 bd#122 bd#121 bd#120 bd#2 bd#13 bd#24 bd#35 bd#139 bd#140 bd#141 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ bd#71 bd#229 bd#230 bd#231 bd#232 bd#233 bd#234 bd#235 bd#236 bd#237 ] : zp ZP_BYTE:8 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 118.92: zp ZP_BYTE:7 [ bd#115 bd#148 bd#114 bd#146 bd#113 bd#145 bd#112 bd#144 bd#111 bd#143 bd#110 bd#142 bd#109 bd#108 bd#107 bd#106 bd#104 bd#103 bd#102 bd#101 bd#100 bd#133 bd#132 bd#131 bd#130 bd#129 bd#128 bd#127 bd#126 bd#125 bd#124 bd#123 bd#122 bd#121 bd#120 bd#2 bd#13 bd#24 bd#35 bd#139 bd#140 bd#141 ] 92.25: zp ZP_BYTE:5 [ bc#113 bc#123 bc#47 bc#112 bc#46 bc#111 bc#45 bc#110 bc#44 bc#109 bc#43 bc#108 bc#42 bc#41 bc#40 bc#39 bc#104 bc#103 bc#102 bc#101 bc#100 bc#66 bc#65 bc#64 bc#63 bc#2 bc#13 bc#24 bc#105 bc#106 bc#107 ] 61.25: zp ZP_BYTE:3 [ bb#49 bb#11 bb#25 bb#10 bb#24 bb#68 bb#23 bb#67 bb#22 bb#66 bb#21 bb#6 bb#20 bb#19 bb#18 bb#16 bb#13 bb#3 bb#4 bb#5 ] 39.8: zp ZP_BYTE:8 [ bd#71 bd#229 bd#230 bd#231 bd#232 bd#233 bd#234 bd#235 bd#236 bd#237 ] 36.83: zp ZP_BYTE:4 [ bb#27 bb#101 bb#102 bb#103 bb#104 bb#105 bb#106 bb#107 bb#108 bb#109 ] 36.83: zp ZP_BYTE:6 [ bc#114 bc#174 bc#175 bc#176 bc#177 bc#178 bc#179 bc#180 bc#181 bc#182 ] 22.79: zp ZP_BYTE:2 [ ba#17 ba#1 ] 
Uplift Scope [main] 
Uplift Scope [f0] 
Uplift Scope [fa] 
Uplift Scope [fb] 
Uplift Scope [fc] 

Uplifting [] best 1289 combination reg byte y [ bd#115 bd#148 bd#114 bd#146 bd#113 bd#145 bd#112 bd#144 bd#111 bd#143 bd#110 bd#142 bd#109 bd#108 bd#107 bd#106 bd#104 bd#103 bd#102 bd#101 bd#100 bd#133 bd#132 bd#131 bd#130 bd#129 bd#128 bd#127 bd#126 bd#125 bd#124 bd#123 bd#122 bd#121 bd#120 bd#2 bd#13 bd#24 bd#35 bd#139 bd#140 bd#141 ] reg byte x [ bc#113 bc#123 bc#47 bc#112 bc#46 bc#111 bc#45 bc#110 bc#44 bc#109 bc#43 bc#108 bc#42 bc#41 bc#40 bc#39 bc#104 bc#103 bc#102 bc#101 bc#100 bc#66 bc#65 bc#64 bc#63 bc#2 bc#13 bc#24 bc#105 bc#106 bc#107 ] zp ZP_BYTE:3 [ bb#49 bb#11 bb#25 bb#10 bb#24 bb#68 bb#23 bb#67 bb#22 bb#66 bb#21 bb#6 bb#20 bb#19 bb#18 bb#16 bb#13 bb#3 bb#4 bb#5 ] reg byte a [ bd#71 bd#229 bd#230 bd#231 bd#232 bd#233 bd#234 bd#235 bd#236 bd#237 ] zp ZP_BYTE:4 [ bb#27 bb#101 bb#102 bb#103 bb#104 bb#105 bb#106 bb#107 bb#108 bb#109 ] zp ZP_BYTE:6 [ bc#114 bc#174 bc#175 bc#176 bc#177 bc#178 bc#179 bc#180 bc#181 bc#182 ] zp ZP_BYTE:2 [ ba#17 ba#1 ] 
Limited combination testing to 100 combinations of 16384 possible.
Uplifting [main] best 1289 combination 
Uplifting [f0] best 1289 combination 
Uplifting [fa] best 1289 combination 
Uplifting [fb] best 1289 combination 
Uplifting [fc] best 1289 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ bb#49 bb#11 bb#25 bb#10 bb#24 bb#68 bb#23 bb#67 bb#22 bb#66 bb#21 bb#6 bb#20 bb#19 bb#18 bb#16 bb#13 bb#3 bb#4 bb#5 ]
Uplifting [] best 1289 combination zp ZP_BYTE:3 [ bb#49 bb#11 bb#25 bb#10 bb#24 bb#68 bb#23 bb#67 bb#22 bb#66 bb#21 bb#6 bb#20 bb#19 bb#18 bb#16 bb#13 bb#3 bb#4 bb#5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:4 [ bb#27 bb#101 bb#102 bb#103 bb#104 bb#105 bb#106 bb#107 bb#108 bb#109 ]
Uplifting [] best 1289 combination zp ZP_BYTE:4 [ bb#27 bb#101 bb#102 bb#103 bb#104 bb#105 bb#106 bb#107 bb#108 bb#109 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ bc#114 bc#174 bc#175 bc#176 bc#177 bc#178 bc#179 bc#180 bc#181 bc#182 ]
Uplifting [] best 1289 combination zp ZP_BYTE:6 [ bc#114 bc#174 bc#175 bc#176 bc#177 bc#178 bc#179 bc#180 bc#181 bc#182 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ ba#17 ba#1 ]
Uplifting [] best 1289 combination zp ZP_BYTE:2 [ ba#17 ba#1 ] 
Allocated (was zp ZP_BYTE:6) zp ZP_BYTE:5 [ bc#114 bc#174 bc#175 bc#176 bc#177 bc#178 bc#179 bc#180 bc#181 bc#182 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label ba = 2
  .label bb = 3
  .label bb_27 = 4
  .label bc = 5
  .label bb_101 = 4
  .label bb_102 = 4
  .label bb_103 = 4
  .label bb_104 = 4
  .label bb_105 = 4
  .label bb_106 = 4
  .label bb_107 = 4
  .label bb_108 = 4
  .label bb_109 = 4
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte) ba#17 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta ba
  //SEG13 [5] phi (byte) bd#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #0
  //SEG14 [5] phi (byte) bc#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#2] -- vbuxx=vbuc1 
    ldx #0
  //SEG15 [5] phi (byte) bb#16 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta bb
    jmp b1
  //SEG16 main::@1
  b1:
  //SEG17 [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG18 main::@2
  b2:
  //SEG19 [7] call f0 
    jsr f0
    jmp b3
  //SEG20 main::@3
  b3:
  //SEG21 [8] (byte) ba#1 ← ++ (byte) ba#17 -- vbuz1=_inc_vbuz1 
    inc ba
  //SEG22 [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  b1_from_b3:
  //SEG23 [5] phi (byte) ba#17 = (byte) ba#1 [phi:main::@3->main::@1#0] -- register_copy 
  //SEG24 [5] phi (byte) bd#2 = (byte) bd#13 [phi:main::@3->main::@1#1] -- register_copy 
  //SEG25 [5] phi (byte) bc#2 = (byte) bc#13 [phi:main::@3->main::@1#2] -- register_copy 
  //SEG26 [5] phi (byte) bb#16 = (byte) bb#13 [phi:main::@3->main::@1#3] -- register_copy 
    jmp b1
}
//SEG27 f0
f0: {
  //SEG28 [9] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto f0::@1 -- vbuz1_neq_0_then_la1 
    lda ba
    cmp #0
    bne b1_from_f0
    jmp b10
  //SEG29 f0::@10
  b10:
  //SEG30 [10] (byte) bb#3 ← ++ (byte) bb#16 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG31 [11] (byte~) bb#101 ← (byte) bb#3 -- vbuz1=vbuz2 
    lda bb
    sta bb_101
  //SEG32 [12] call fa 
  //SEG33 [59] phi from f0::@10 to fa [phi:f0::@10->fa]
  fa_from_b10:
  //SEG34 [59] phi (byte) bd#129 = (byte) bd#2 [phi:f0::@10->fa#0] -- register_copy 
  //SEG35 [59] phi (byte) bc#39 = (byte) bc#2 [phi:f0::@10->fa#1] -- register_copy 
  //SEG36 [59] phi (byte) bb#27 = (byte~) bb#101 [phi:f0::@10->fa#2] -- register_copy 
    jsr fa
  //SEG37 [13] phi from f0 f0::@10 to f0::@1 [phi:f0/f0::@10->f0::@1]
  b1_from_f0:
  b1_from_b10:
  //SEG38 [13] phi (byte) bd#120 = (byte) bd#2 [phi:f0/f0::@10->f0::@1#0] -- register_copy 
  //SEG39 [13] phi (byte) bc#63 = (byte) bc#2 [phi:f0/f0::@10->f0::@1#1] -- register_copy 
  //SEG40 [13] phi (byte) bb#18 = (byte) bb#16 [phi:f0/f0::@10->f0::@1#2] -- register_copy 
    jmp b1
  //SEG41 f0::@1
  b1:
  //SEG42 [14] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto f0::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp ba
    bne b2_from_b1
    jmp b11
  //SEG43 f0::@11
  b11:
  //SEG44 [15] (byte) bb#4 ← ++ (byte) bb#18 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG45 [16] (byte~) bb#102 ← (byte) bb#4 -- vbuz1=vbuz2 
    lda bb
    sta bb_102
  //SEG46 [17] call fa 
  //SEG47 [59] phi from f0::@11 to fa [phi:f0::@11->fa]
  fa_from_b11:
  //SEG48 [59] phi (byte) bd#129 = (byte) bd#120 [phi:f0::@11->fa#0] -- register_copy 
  //SEG49 [59] phi (byte) bc#39 = (byte) bc#63 [phi:f0::@11->fa#1] -- register_copy 
  //SEG50 [59] phi (byte) bb#27 = (byte~) bb#102 [phi:f0::@11->fa#2] -- register_copy 
    jsr fa
  //SEG51 [18] phi from f0::@1 f0::@11 to f0::@2 [phi:f0::@1/f0::@11->f0::@2]
  b2_from_b1:
  b2_from_b11:
  //SEG52 [18] phi (byte) bd#121 = (byte) bd#120 [phi:f0::@1/f0::@11->f0::@2#0] -- register_copy 
  //SEG53 [18] phi (byte) bc#64 = (byte) bc#63 [phi:f0::@1/f0::@11->f0::@2#1] -- register_copy 
  //SEG54 [18] phi (byte) bb#19 = (byte) bb#18 [phi:f0::@1/f0::@11->f0::@2#2] -- register_copy 
    jmp b2
  //SEG55 f0::@2
  b2:
  //SEG56 [19] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 2) goto f0::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp ba
    bne b3_from_b2
    jmp b12
  //SEG57 f0::@12
  b12:
  //SEG58 [20] (byte) bb#5 ← ++ (byte) bb#19 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG59 [21] (byte~) bb#103 ← (byte) bb#5 -- vbuz1=vbuz2 
    lda bb
    sta bb_103
  //SEG60 [22] call fa 
  //SEG61 [59] phi from f0::@12 to fa [phi:f0::@12->fa]
  fa_from_b12:
  //SEG62 [59] phi (byte) bd#129 = (byte) bd#121 [phi:f0::@12->fa#0] -- register_copy 
  //SEG63 [59] phi (byte) bc#39 = (byte) bc#64 [phi:f0::@12->fa#1] -- register_copy 
  //SEG64 [59] phi (byte) bb#27 = (byte~) bb#103 [phi:f0::@12->fa#2] -- register_copy 
    jsr fa
  //SEG65 [23] phi from f0::@12 f0::@2 to f0::@3 [phi:f0::@12/f0::@2->f0::@3]
  b3_from_b12:
  b3_from_b2:
  //SEG66 [23] phi (byte) bd#122 = (byte) bd#24 [phi:f0::@12/f0::@2->f0::@3#0] -- register_copy 
  //SEG67 [23] phi (byte) bc#65 = (byte) bc#24 [phi:f0::@12/f0::@2->f0::@3#1] -- register_copy 
  //SEG68 [23] phi (byte) bb#20 = (byte) bb#5 [phi:f0::@12/f0::@2->f0::@3#2] -- register_copy 
    jmp b3
  //SEG69 f0::@3
  b3:
  //SEG70 [24] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto f0::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp ba
    bne b4_from_b3
    jmp b13
  //SEG71 f0::@13
  b13:
  //SEG72 [25] (byte) bb#6 ← ++ (byte) bb#20 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG73 [26] (byte~) bb#104 ← (byte) bb#6 -- vbuz1=vbuz2 
    lda bb
    sta bb_104
  //SEG74 [27] call fa 
  //SEG75 [59] phi from f0::@13 to fa [phi:f0::@13->fa]
  fa_from_b13:
  //SEG76 [59] phi (byte) bd#129 = (byte) bd#122 [phi:f0::@13->fa#0] -- register_copy 
  //SEG77 [59] phi (byte) bc#39 = (byte) bc#65 [phi:f0::@13->fa#1] -- register_copy 
  //SEG78 [59] phi (byte) bb#27 = (byte~) bb#104 [phi:f0::@13->fa#2] -- register_copy 
    jsr fa
  //SEG79 [28] phi from f0::@13 f0::@3 to f0::@4 [phi:f0::@13/f0::@3->f0::@4]
  b4_from_b13:
  b4_from_b3:
  //SEG80 [28] phi (byte) bd#123 = (byte) bd#24 [phi:f0::@13/f0::@3->f0::@4#0] -- register_copy 
  //SEG81 [28] phi (byte) bc#66 = (byte) bc#24 [phi:f0::@13/f0::@3->f0::@4#1] -- register_copy 
  //SEG82 [28] phi (byte) bb#21 = (byte) bb#6 [phi:f0::@13/f0::@3->f0::@4#2] -- register_copy 
    jmp b4
  //SEG83 f0::@4
  b4:
  //SEG84 [29] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto f0::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp ba
    bne b5_from_b4
    jmp b14
  //SEG85 f0::@14
  b14:
  //SEG86 [30] (byte) bb#66 ← ++ (byte) bb#21 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG87 [31] (byte~) bb#105 ← (byte) bb#66 -- vbuz1=vbuz2 
    lda bb
    sta bb_105
  //SEG88 [32] call fa 
  //SEG89 [59] phi from f0::@14 to fa [phi:f0::@14->fa]
  fa_from_b14:
  //SEG90 [59] phi (byte) bd#129 = (byte) bd#123 [phi:f0::@14->fa#0] -- register_copy 
  //SEG91 [59] phi (byte) bc#39 = (byte) bc#66 [phi:f0::@14->fa#1] -- register_copy 
  //SEG92 [59] phi (byte) bb#27 = (byte~) bb#105 [phi:f0::@14->fa#2] -- register_copy 
    jsr fa
  //SEG93 [33] phi from f0::@14 f0::@4 to f0::@5 [phi:f0::@14/f0::@4->f0::@5]
  b5_from_b14:
  b5_from_b4:
  //SEG94 [33] phi (byte) bd#124 = (byte) bd#24 [phi:f0::@14/f0::@4->f0::@5#0] -- register_copy 
  //SEG95 [33] phi (byte) bc#100 = (byte) bc#24 [phi:f0::@14/f0::@4->f0::@5#1] -- register_copy 
  //SEG96 [33] phi (byte) bb#22 = (byte) bb#66 [phi:f0::@14/f0::@4->f0::@5#2] -- register_copy 
    jmp b5
  //SEG97 f0::@5
  b5:
  //SEG98 [34] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto f0::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp ba
    bne b6_from_b5
    jmp b15
  //SEG99 f0::@15
  b15:
  //SEG100 [35] (byte) bb#67 ← ++ (byte) bb#22 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG101 [36] (byte~) bb#106 ← (byte) bb#67 -- vbuz1=vbuz2 
    lda bb
    sta bb_106
  //SEG102 [37] call fa 
  //SEG103 [59] phi from f0::@15 to fa [phi:f0::@15->fa]
  fa_from_b15:
  //SEG104 [59] phi (byte) bd#129 = (byte) bd#124 [phi:f0::@15->fa#0] -- register_copy 
  //SEG105 [59] phi (byte) bc#39 = (byte) bc#100 [phi:f0::@15->fa#1] -- register_copy 
  //SEG106 [59] phi (byte) bb#27 = (byte~) bb#106 [phi:f0::@15->fa#2] -- register_copy 
    jsr fa
  //SEG107 [38] phi from f0::@15 f0::@5 to f0::@6 [phi:f0::@15/f0::@5->f0::@6]
  b6_from_b15:
  b6_from_b5:
  //SEG108 [38] phi (byte) bd#125 = (byte) bd#24 [phi:f0::@15/f0::@5->f0::@6#0] -- register_copy 
  //SEG109 [38] phi (byte) bc#101 = (byte) bc#24 [phi:f0::@15/f0::@5->f0::@6#1] -- register_copy 
  //SEG110 [38] phi (byte) bb#23 = (byte) bb#67 [phi:f0::@15/f0::@5->f0::@6#2] -- register_copy 
    jmp b6
  //SEG111 f0::@6
  b6:
  //SEG112 [39] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto f0::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp ba
    bne b7_from_b6
    jmp b16
  //SEG113 f0::@16
  b16:
  //SEG114 [40] (byte) bb#68 ← ++ (byte) bb#23 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG115 [41] (byte~) bb#107 ← (byte) bb#68 -- vbuz1=vbuz2 
    lda bb
    sta bb_107
  //SEG116 [42] call fa 
  //SEG117 [59] phi from f0::@16 to fa [phi:f0::@16->fa]
  fa_from_b16:
  //SEG118 [59] phi (byte) bd#129 = (byte) bd#125 [phi:f0::@16->fa#0] -- register_copy 
  //SEG119 [59] phi (byte) bc#39 = (byte) bc#101 [phi:f0::@16->fa#1] -- register_copy 
  //SEG120 [59] phi (byte) bb#27 = (byte~) bb#107 [phi:f0::@16->fa#2] -- register_copy 
    jsr fa
  //SEG121 [43] phi from f0::@16 f0::@6 to f0::@7 [phi:f0::@16/f0::@6->f0::@7]
  b7_from_b16:
  b7_from_b6:
  //SEG122 [43] phi (byte) bd#126 = (byte) bd#24 [phi:f0::@16/f0::@6->f0::@7#0] -- register_copy 
  //SEG123 [43] phi (byte) bc#102 = (byte) bc#24 [phi:f0::@16/f0::@6->f0::@7#1] -- register_copy 
  //SEG124 [43] phi (byte) bb#24 = (byte) bb#68 [phi:f0::@16/f0::@6->f0::@7#2] -- register_copy 
    jmp b7
  //SEG125 f0::@7
  b7:
  //SEG126 [44] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto f0::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp ba
    bne b8_from_b7
    jmp b17
  //SEG127 f0::@17
  b17:
  //SEG128 [45] (byte) bb#10 ← ++ (byte) bb#24 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG129 [46] (byte~) bb#108 ← (byte) bb#10 -- vbuz1=vbuz2 
    lda bb
    sta bb_108
  //SEG130 [47] call fa 
  //SEG131 [59] phi from f0::@17 to fa [phi:f0::@17->fa]
  fa_from_b17:
  //SEG132 [59] phi (byte) bd#129 = (byte) bd#126 [phi:f0::@17->fa#0] -- register_copy 
  //SEG133 [59] phi (byte) bc#39 = (byte) bc#102 [phi:f0::@17->fa#1] -- register_copy 
  //SEG134 [59] phi (byte) bb#27 = (byte~) bb#108 [phi:f0::@17->fa#2] -- register_copy 
    jsr fa
  //SEG135 [48] phi from f0::@17 f0::@7 to f0::@8 [phi:f0::@17/f0::@7->f0::@8]
  b8_from_b17:
  b8_from_b7:
  //SEG136 [48] phi (byte) bd#127 = (byte) bd#24 [phi:f0::@17/f0::@7->f0::@8#0] -- register_copy 
  //SEG137 [48] phi (byte) bc#103 = (byte) bc#24 [phi:f0::@17/f0::@7->f0::@8#1] -- register_copy 
  //SEG138 [48] phi (byte) bb#25 = (byte) bb#10 [phi:f0::@17/f0::@7->f0::@8#2] -- register_copy 
    jmp b8
  //SEG139 f0::@8
  b8:
  //SEG140 [49] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto f0::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp ba
    bne b9_from_b8
    jmp b18
  //SEG141 f0::@18
  b18:
  //SEG142 [50] (byte) bb#11 ← ++ (byte) bb#25 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG143 [51] (byte~) bb#109 ← (byte) bb#11 -- vbuz1=vbuz2 
    lda bb
    sta bb_109
  //SEG144 [52] call fa 
  //SEG145 [59] phi from f0::@18 to fa [phi:f0::@18->fa]
  fa_from_b18:
  //SEG146 [59] phi (byte) bd#129 = (byte) bd#127 [phi:f0::@18->fa#0] -- register_copy 
  //SEG147 [59] phi (byte) bc#39 = (byte) bc#103 [phi:f0::@18->fa#1] -- register_copy 
  //SEG148 [59] phi (byte) bb#27 = (byte~) bb#109 [phi:f0::@18->fa#2] -- register_copy 
    jsr fa
  //SEG149 [53] phi from f0::@18 f0::@8 to f0::@9 [phi:f0::@18/f0::@8->f0::@9]
  b9_from_b18:
  b9_from_b8:
  //SEG150 [53] phi (byte) bd#128 = (byte) bd#24 [phi:f0::@18/f0::@8->f0::@9#0] -- register_copy 
  //SEG151 [53] phi (byte) bc#104 = (byte) bc#24 [phi:f0::@18/f0::@8->f0::@9#1] -- register_copy 
  //SEG152 [53] phi (byte) bb#49 = (byte) bb#11 [phi:f0::@18/f0::@8->f0::@9#2] -- register_copy 
    jmp b9
  //SEG153 f0::@9
  b9:
  //SEG154 [54] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 9) goto f0::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp ba
    bne breturn_from_b9
  //SEG155 [55] phi from f0::@9 to f0::@19 [phi:f0::@9->f0::@19]
  b19_from_b9:
    jmp b19
  //SEG156 f0::@19
  b19:
  //SEG157 [56] call fa 
  //SEG158 [59] phi from f0::@19 to fa [phi:f0::@19->fa]
  fa_from_b19:
  //SEG159 [59] phi (byte) bd#129 = (byte) bd#128 [phi:f0::@19->fa#0] -- register_copy 
  //SEG160 [59] phi (byte) bc#39 = (byte) bc#104 [phi:f0::@19->fa#1] -- register_copy 
  //SEG161 [59] phi (byte) bb#27 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:f0::@19->fa#2] -- vbuz1=vbuc1 
    lda #0
    sta bb_27
    jsr fa
  //SEG162 [57] phi from f0::@19 to f0::@return [phi:f0::@19->f0::@return]
  breturn_from_b19:
  //SEG163 [57] phi (byte) bd#13 = (byte) bd#24 [phi:f0::@19->f0::@return#0] -- register_copy 
  //SEG164 [57] phi (byte) bc#13 = (byte) bc#24 [phi:f0::@19->f0::@return#1] -- register_copy 
  //SEG165 [57] phi (byte) bb#13 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:f0::@19->f0::@return#2] -- vbuz1=vbuc1 
    lda #0
    sta bb
    jmp breturn
  //SEG166 [57] phi from f0::@9 to f0::@return [phi:f0::@9->f0::@return]
  breturn_from_b9:
  //SEG167 [57] phi (byte) bd#13 = (byte) bd#128 [phi:f0::@9->f0::@return#0] -- register_copy 
  //SEG168 [57] phi (byte) bc#13 = (byte) bc#104 [phi:f0::@9->f0::@return#1] -- register_copy 
  //SEG169 [57] phi (byte) bb#13 = (byte) bb#49 [phi:f0::@9->f0::@return#2] -- register_copy 
    jmp breturn
  //SEG170 f0::@return
  breturn:
  //SEG171 [58] return 
    rts
}
//SEG172 fa
fa: {
  //SEG173 [60] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto fa::@1 -- vbuz1_neq_0_then_la1 
    lda bb_27
    cmp #0
    bne b1_from_fa
    jmp b10
  //SEG174 fa::@10
  b10:
  //SEG175 [61] (byte) bc#105 ← ++ (byte) bc#39 -- vbuxx=_inc_vbuxx 
    inx
  //SEG176 [62] (byte~) bc#174 ← (byte) bc#105 -- vbuz1=vbuxx 
    stx bc
  //SEG177 [63] call fb 
  //SEG178 [110] phi from fa::@10 to fb [phi:fa::@10->fb]
  fb_from_b10:
  //SEG179 [110] phi (byte) bd#106 = (byte) bd#129 [phi:fa::@10->fb#0] -- register_copy 
  //SEG180 [110] phi (byte) bc#114 = (byte~) bc#174 [phi:fa::@10->fb#1] -- register_copy 
    jsr fb
  //SEG181 [64] phi from fa fa::@10 to fa::@1 [phi:fa/fa::@10->fa::@1]
  b1_from_fa:
  b1_from_b10:
  //SEG182 [64] phi (byte) bd#130 = (byte) bd#129 [phi:fa/fa::@10->fa::@1#0] -- register_copy 
  //SEG183 [64] phi (byte) bc#40 = (byte) bc#39 [phi:fa/fa::@10->fa::@1#1] -- register_copy 
    jmp b1
  //SEG184 fa::@1
  b1:
  //SEG185 [65] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto fa::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp bb_27
    bne b2_from_b1
    jmp b11
  //SEG186 fa::@11
  b11:
  //SEG187 [66] (byte) bc#106 ← ++ (byte) bc#40 -- vbuxx=_inc_vbuxx 
    inx
  //SEG188 [67] (byte~) bc#175 ← (byte) bc#106 -- vbuz1=vbuxx 
    stx bc
  //SEG189 [68] call fb 
  //SEG190 [110] phi from fa::@11 to fb [phi:fa::@11->fb]
  fb_from_b11:
  //SEG191 [110] phi (byte) bd#106 = (byte) bd#130 [phi:fa::@11->fb#0] -- register_copy 
  //SEG192 [110] phi (byte) bc#114 = (byte~) bc#175 [phi:fa::@11->fb#1] -- register_copy 
    jsr fb
  //SEG193 [69] phi from fa::@1 fa::@11 to fa::@2 [phi:fa::@1/fa::@11->fa::@2]
  b2_from_b1:
  b2_from_b11:
  //SEG194 [69] phi (byte) bd#131 = (byte) bd#130 [phi:fa::@1/fa::@11->fa::@2#0] -- register_copy 
  //SEG195 [69] phi (byte) bc#41 = (byte) bc#40 [phi:fa::@1/fa::@11->fa::@2#1] -- register_copy 
    jmp b2
  //SEG196 fa::@2
  b2:
  //SEG197 [70] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 2) goto fa::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp bb_27
    bne b3_from_b2
    jmp b12
  //SEG198 fa::@12
  b12:
  //SEG199 [71] (byte) bc#107 ← ++ (byte) bc#41 -- vbuxx=_inc_vbuxx 
    inx
  //SEG200 [72] (byte~) bc#176 ← (byte) bc#107 -- vbuz1=vbuxx 
    stx bc
  //SEG201 [73] call fb 
  //SEG202 [110] phi from fa::@12 to fb [phi:fa::@12->fb]
  fb_from_b12:
  //SEG203 [110] phi (byte) bd#106 = (byte) bd#131 [phi:fa::@12->fb#0] -- register_copy 
  //SEG204 [110] phi (byte) bc#114 = (byte~) bc#176 [phi:fa::@12->fb#1] -- register_copy 
    jsr fb
  //SEG205 [74] phi from fa::@12 fa::@2 to fa::@3 [phi:fa::@12/fa::@2->fa::@3]
  b3_from_b12:
  b3_from_b2:
  //SEG206 [74] phi (byte) bd#132 = (byte) bd#35 [phi:fa::@12/fa::@2->fa::@3#0] -- register_copy 
  //SEG207 [74] phi (byte) bc#42 = (byte) bc#107 [phi:fa::@12/fa::@2->fa::@3#1] -- register_copy 
    jmp b3
  //SEG208 fa::@3
  b3:
  //SEG209 [75] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto fa::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp bb_27
    bne b4_from_b3
    jmp b13
  //SEG210 fa::@13
  b13:
  //SEG211 [76] (byte) bc#108 ← ++ (byte) bc#42 -- vbuxx=_inc_vbuxx 
    inx
  //SEG212 [77] (byte~) bc#177 ← (byte) bc#108 -- vbuz1=vbuxx 
    stx bc
  //SEG213 [78] call fb 
  //SEG214 [110] phi from fa::@13 to fb [phi:fa::@13->fb]
  fb_from_b13:
  //SEG215 [110] phi (byte) bd#106 = (byte) bd#132 [phi:fa::@13->fb#0] -- register_copy 
  //SEG216 [110] phi (byte) bc#114 = (byte~) bc#177 [phi:fa::@13->fb#1] -- register_copy 
    jsr fb
  //SEG217 [79] phi from fa::@13 fa::@3 to fa::@4 [phi:fa::@13/fa::@3->fa::@4]
  b4_from_b13:
  b4_from_b3:
  //SEG218 [79] phi (byte) bd#133 = (byte) bd#35 [phi:fa::@13/fa::@3->fa::@4#0] -- register_copy 
  //SEG219 [79] phi (byte) bc#43 = (byte) bc#108 [phi:fa::@13/fa::@3->fa::@4#1] -- register_copy 
    jmp b4
  //SEG220 fa::@4
  b4:
  //SEG221 [80] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto fa::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp bb_27
    bne b5_from_b4
    jmp b14
  //SEG222 fa::@14
  b14:
  //SEG223 [81] (byte) bc#109 ← ++ (byte) bc#43 -- vbuxx=_inc_vbuxx 
    inx
  //SEG224 [82] (byte~) bc#178 ← (byte) bc#109 -- vbuz1=vbuxx 
    stx bc
  //SEG225 [83] call fb 
  //SEG226 [110] phi from fa::@14 to fb [phi:fa::@14->fb]
  fb_from_b14:
  //SEG227 [110] phi (byte) bd#106 = (byte) bd#133 [phi:fa::@14->fb#0] -- register_copy 
  //SEG228 [110] phi (byte) bc#114 = (byte~) bc#178 [phi:fa::@14->fb#1] -- register_copy 
    jsr fb
  //SEG229 [84] phi from fa::@14 fa::@4 to fa::@5 [phi:fa::@14/fa::@4->fa::@5]
  b5_from_b14:
  b5_from_b4:
  //SEG230 [84] phi (byte) bd#100 = (byte) bd#35 [phi:fa::@14/fa::@4->fa::@5#0] -- register_copy 
  //SEG231 [84] phi (byte) bc#44 = (byte) bc#109 [phi:fa::@14/fa::@4->fa::@5#1] -- register_copy 
    jmp b5
  //SEG232 fa::@5
  b5:
  //SEG233 [85] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto fa::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp bb_27
    bne b6_from_b5
    jmp b15
  //SEG234 fa::@15
  b15:
  //SEG235 [86] (byte) bc#110 ← ++ (byte) bc#44 -- vbuxx=_inc_vbuxx 
    inx
  //SEG236 [87] (byte~) bc#179 ← (byte) bc#110 -- vbuz1=vbuxx 
    stx bc
  //SEG237 [88] call fb 
  //SEG238 [110] phi from fa::@15 to fb [phi:fa::@15->fb]
  fb_from_b15:
  //SEG239 [110] phi (byte) bd#106 = (byte) bd#100 [phi:fa::@15->fb#0] -- register_copy 
  //SEG240 [110] phi (byte) bc#114 = (byte~) bc#179 [phi:fa::@15->fb#1] -- register_copy 
    jsr fb
  //SEG241 [89] phi from fa::@15 fa::@5 to fa::@6 [phi:fa::@15/fa::@5->fa::@6]
  b6_from_b15:
  b6_from_b5:
  //SEG242 [89] phi (byte) bd#101 = (byte) bd#35 [phi:fa::@15/fa::@5->fa::@6#0] -- register_copy 
  //SEG243 [89] phi (byte) bc#45 = (byte) bc#110 [phi:fa::@15/fa::@5->fa::@6#1] -- register_copy 
    jmp b6
  //SEG244 fa::@6
  b6:
  //SEG245 [90] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto fa::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp bb_27
    bne b7_from_b6
    jmp b16
  //SEG246 fa::@16
  b16:
  //SEG247 [91] (byte) bc#111 ← ++ (byte) bc#45 -- vbuxx=_inc_vbuxx 
    inx
  //SEG248 [92] (byte~) bc#180 ← (byte) bc#111 -- vbuz1=vbuxx 
    stx bc
  //SEG249 [93] call fb 
  //SEG250 [110] phi from fa::@16 to fb [phi:fa::@16->fb]
  fb_from_b16:
  //SEG251 [110] phi (byte) bd#106 = (byte) bd#101 [phi:fa::@16->fb#0] -- register_copy 
  //SEG252 [110] phi (byte) bc#114 = (byte~) bc#180 [phi:fa::@16->fb#1] -- register_copy 
    jsr fb
  //SEG253 [94] phi from fa::@16 fa::@6 to fa::@7 [phi:fa::@16/fa::@6->fa::@7]
  b7_from_b16:
  b7_from_b6:
  //SEG254 [94] phi (byte) bd#102 = (byte) bd#35 [phi:fa::@16/fa::@6->fa::@7#0] -- register_copy 
  //SEG255 [94] phi (byte) bc#46 = (byte) bc#111 [phi:fa::@16/fa::@6->fa::@7#1] -- register_copy 
    jmp b7
  //SEG256 fa::@7
  b7:
  //SEG257 [95] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto fa::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp bb_27
    bne b8_from_b7
    jmp b17
  //SEG258 fa::@17
  b17:
  //SEG259 [96] (byte) bc#112 ← ++ (byte) bc#46 -- vbuxx=_inc_vbuxx 
    inx
  //SEG260 [97] (byte~) bc#181 ← (byte) bc#112 -- vbuz1=vbuxx 
    stx bc
  //SEG261 [98] call fb 
  //SEG262 [110] phi from fa::@17 to fb [phi:fa::@17->fb]
  fb_from_b17:
  //SEG263 [110] phi (byte) bd#106 = (byte) bd#102 [phi:fa::@17->fb#0] -- register_copy 
  //SEG264 [110] phi (byte) bc#114 = (byte~) bc#181 [phi:fa::@17->fb#1] -- register_copy 
    jsr fb
  //SEG265 [99] phi from fa::@17 fa::@7 to fa::@8 [phi:fa::@17/fa::@7->fa::@8]
  b8_from_b17:
  b8_from_b7:
  //SEG266 [99] phi (byte) bd#103 = (byte) bd#35 [phi:fa::@17/fa::@7->fa::@8#0] -- register_copy 
  //SEG267 [99] phi (byte) bc#47 = (byte) bc#112 [phi:fa::@17/fa::@7->fa::@8#1] -- register_copy 
    jmp b8
  //SEG268 fa::@8
  b8:
  //SEG269 [100] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto fa::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp bb_27
    bne b9_from_b8
    jmp b18
  //SEG270 fa::@18
  b18:
  //SEG271 [101] (byte) bc#123 ← ++ (byte) bc#47 -- vbuxx=_inc_vbuxx 
    inx
  //SEG272 [102] (byte~) bc#182 ← (byte) bc#123 -- vbuz1=vbuxx 
    stx bc
  //SEG273 [103] call fb 
  //SEG274 [110] phi from fa::@18 to fb [phi:fa::@18->fb]
  fb_from_b18:
  //SEG275 [110] phi (byte) bd#106 = (byte) bd#103 [phi:fa::@18->fb#0] -- register_copy 
  //SEG276 [110] phi (byte) bc#114 = (byte~) bc#182 [phi:fa::@18->fb#1] -- register_copy 
    jsr fb
  //SEG277 [104] phi from fa::@18 fa::@8 to fa::@9 [phi:fa::@18/fa::@8->fa::@9]
  b9_from_b18:
  b9_from_b8:
  //SEG278 [104] phi (byte) bd#104 = (byte) bd#35 [phi:fa::@18/fa::@8->fa::@9#0] -- register_copy 
  //SEG279 [104] phi (byte) bc#113 = (byte) bc#123 [phi:fa::@18/fa::@8->fa::@9#1] -- register_copy 
    jmp b9
  //SEG280 fa::@9
  b9:
  //SEG281 [105] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 9) goto fa::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp bb_27
    bne breturn_from_b9
  //SEG282 [106] phi from fa::@9 to fa::@19 [phi:fa::@9->fa::@19]
  b19_from_b9:
    jmp b19
  //SEG283 fa::@19
  b19:
  //SEG284 [107] call fb 
  //SEG285 [110] phi from fa::@19 to fb [phi:fa::@19->fb]
  fb_from_b19:
  //SEG286 [110] phi (byte) bd#106 = (byte) bd#104 [phi:fa::@19->fb#0] -- register_copy 
  //SEG287 [110] phi (byte) bc#114 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:fa::@19->fb#1] -- vbuz1=vbuc1 
    lda #0
    sta bc
    jsr fb
  //SEG288 [108] phi from fa::@19 to fa::@return [phi:fa::@19->fa::@return]
  breturn_from_b19:
  //SEG289 [108] phi (byte) bd#24 = (byte) bd#35 [phi:fa::@19->fa::@return#0] -- register_copy 
  //SEG290 [108] phi (byte) bc#24 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:fa::@19->fa::@return#1] -- vbuxx=vbuc1 
    ldx #0
    jmp breturn
  //SEG291 [108] phi from fa::@9 to fa::@return [phi:fa::@9->fa::@return]
  breturn_from_b9:
  //SEG292 [108] phi (byte) bd#24 = (byte) bd#104 [phi:fa::@9->fa::@return#0] -- register_copy 
  //SEG293 [108] phi (byte) bc#24 = (byte) bc#113 [phi:fa::@9->fa::@return#1] -- register_copy 
    jmp breturn
  //SEG294 fa::@return
  breturn:
  //SEG295 [109] return 
    rts
}
//SEG296 fb
fb: {
  //SEG297 [111] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto fb::@1 -- vbuz1_neq_0_then_la1 
    lda bc
    cmp #0
    bne b1_from_fb
    jmp b10
  //SEG298 fb::@10
  b10:
  //SEG299 [112] (byte) bd#139 ← ++ (byte) bd#106 -- vbuyy=_inc_vbuyy 
    iny
  //SEG300 [113] (byte~) bd#229 ← (byte) bd#139 -- vbuaa=vbuyy 
    tya
  //SEG301 [114] call fc 
  //SEG302 [161] phi from fb::@10 to fc [phi:fb::@10->fc]
  fc_from_b10:
  //SEG303 [161] phi (byte) bd#71 = (byte~) bd#229 [phi:fb::@10->fc#0] -- register_copy 
    jsr fc
  //SEG304 [115] phi from fb fb::@10 to fb::@1 [phi:fb/fb::@10->fb::@1]
  b1_from_fb:
  b1_from_b10:
  //SEG305 [115] phi (byte) bd#107 = (byte) bd#106 [phi:fb/fb::@10->fb::@1#0] -- register_copy 
    jmp b1
  //SEG306 fb::@1
  b1:
  //SEG307 [116] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto fb::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp bc
    bne b2_from_b1
    jmp b11
  //SEG308 fb::@11
  b11:
  //SEG309 [117] (byte) bd#140 ← ++ (byte) bd#107 -- vbuyy=_inc_vbuyy 
    iny
  //SEG310 [118] (byte~) bd#230 ← (byte) bd#140 -- vbuaa=vbuyy 
    tya
  //SEG311 [119] call fc 
  //SEG312 [161] phi from fb::@11 to fc [phi:fb::@11->fc]
  fc_from_b11:
  //SEG313 [161] phi (byte) bd#71 = (byte~) bd#230 [phi:fb::@11->fc#0] -- register_copy 
    jsr fc
  //SEG314 [120] phi from fb::@1 fb::@11 to fb::@2 [phi:fb::@1/fb::@11->fb::@2]
  b2_from_b1:
  b2_from_b11:
  //SEG315 [120] phi (byte) bd#108 = (byte) bd#107 [phi:fb::@1/fb::@11->fb::@2#0] -- register_copy 
    jmp b2
  //SEG316 fb::@2
  b2:
  //SEG317 [121] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 2) goto fb::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp bc
    bne b3_from_b2
    jmp b12
  //SEG318 fb::@12
  b12:
  //SEG319 [122] (byte) bd#141 ← ++ (byte) bd#108 -- vbuyy=_inc_vbuyy 
    iny
  //SEG320 [123] (byte~) bd#231 ← (byte) bd#141 -- vbuaa=vbuyy 
    tya
  //SEG321 [124] call fc 
  //SEG322 [161] phi from fb::@12 to fc [phi:fb::@12->fc]
  fc_from_b12:
  //SEG323 [161] phi (byte) bd#71 = (byte~) bd#231 [phi:fb::@12->fc#0] -- register_copy 
    jsr fc
  //SEG324 [125] phi from fb::@12 fb::@2 to fb::@3 [phi:fb::@12/fb::@2->fb::@3]
  b3_from_b12:
  b3_from_b2:
  //SEG325 [125] phi (byte) bd#109 = (byte) bd#141 [phi:fb::@12/fb::@2->fb::@3#0] -- register_copy 
    jmp b3
  //SEG326 fb::@3
  b3:
  //SEG327 [126] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto fb::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp bc
    bne b4_from_b3
    jmp b13
  //SEG328 fb::@13
  b13:
  //SEG329 [127] (byte) bd#142 ← ++ (byte) bd#109 -- vbuyy=_inc_vbuyy 
    iny
  //SEG330 [128] (byte~) bd#232 ← (byte) bd#142 -- vbuaa=vbuyy 
    tya
  //SEG331 [129] call fc 
  //SEG332 [161] phi from fb::@13 to fc [phi:fb::@13->fc]
  fc_from_b13:
  //SEG333 [161] phi (byte) bd#71 = (byte~) bd#232 [phi:fb::@13->fc#0] -- register_copy 
    jsr fc
  //SEG334 [130] phi from fb::@13 fb::@3 to fb::@4 [phi:fb::@13/fb::@3->fb::@4]
  b4_from_b13:
  b4_from_b3:
  //SEG335 [130] phi (byte) bd#110 = (byte) bd#142 [phi:fb::@13/fb::@3->fb::@4#0] -- register_copy 
    jmp b4
  //SEG336 fb::@4
  b4:
  //SEG337 [131] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto fb::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp bc
    bne b5_from_b4
    jmp b14
  //SEG338 fb::@14
  b14:
  //SEG339 [132] (byte) bd#143 ← ++ (byte) bd#110 -- vbuyy=_inc_vbuyy 
    iny
  //SEG340 [133] (byte~) bd#233 ← (byte) bd#143 -- vbuaa=vbuyy 
    tya
  //SEG341 [134] call fc 
  //SEG342 [161] phi from fb::@14 to fc [phi:fb::@14->fc]
  fc_from_b14:
  //SEG343 [161] phi (byte) bd#71 = (byte~) bd#233 [phi:fb::@14->fc#0] -- register_copy 
    jsr fc
  //SEG344 [135] phi from fb::@14 fb::@4 to fb::@5 [phi:fb::@14/fb::@4->fb::@5]
  b5_from_b14:
  b5_from_b4:
  //SEG345 [135] phi (byte) bd#111 = (byte) bd#143 [phi:fb::@14/fb::@4->fb::@5#0] -- register_copy 
    jmp b5
  //SEG346 fb::@5
  b5:
  //SEG347 [136] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto fb::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp bc
    bne b6_from_b5
    jmp b15
  //SEG348 fb::@15
  b15:
  //SEG349 [137] (byte) bd#144 ← ++ (byte) bd#111 -- vbuyy=_inc_vbuyy 
    iny
  //SEG350 [138] (byte~) bd#234 ← (byte) bd#144 -- vbuaa=vbuyy 
    tya
  //SEG351 [139] call fc 
  //SEG352 [161] phi from fb::@15 to fc [phi:fb::@15->fc]
  fc_from_b15:
  //SEG353 [161] phi (byte) bd#71 = (byte~) bd#234 [phi:fb::@15->fc#0] -- register_copy 
    jsr fc
  //SEG354 [140] phi from fb::@15 fb::@5 to fb::@6 [phi:fb::@15/fb::@5->fb::@6]
  b6_from_b15:
  b6_from_b5:
  //SEG355 [140] phi (byte) bd#112 = (byte) bd#144 [phi:fb::@15/fb::@5->fb::@6#0] -- register_copy 
    jmp b6
  //SEG356 fb::@6
  b6:
  //SEG357 [141] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto fb::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp bc
    bne b7_from_b6
    jmp b16
  //SEG358 fb::@16
  b16:
  //SEG359 [142] (byte) bd#145 ← ++ (byte) bd#112 -- vbuyy=_inc_vbuyy 
    iny
  //SEG360 [143] (byte~) bd#235 ← (byte) bd#145 -- vbuaa=vbuyy 
    tya
  //SEG361 [144] call fc 
  //SEG362 [161] phi from fb::@16 to fc [phi:fb::@16->fc]
  fc_from_b16:
  //SEG363 [161] phi (byte) bd#71 = (byte~) bd#235 [phi:fb::@16->fc#0] -- register_copy 
    jsr fc
  //SEG364 [145] phi from fb::@16 fb::@6 to fb::@7 [phi:fb::@16/fb::@6->fb::@7]
  b7_from_b16:
  b7_from_b6:
  //SEG365 [145] phi (byte) bd#113 = (byte) bd#145 [phi:fb::@16/fb::@6->fb::@7#0] -- register_copy 
    jmp b7
  //SEG366 fb::@7
  b7:
  //SEG367 [146] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto fb::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp bc
    bne b8_from_b7
    jmp b17
  //SEG368 fb::@17
  b17:
  //SEG369 [147] (byte) bd#146 ← ++ (byte) bd#113 -- vbuyy=_inc_vbuyy 
    iny
  //SEG370 [148] (byte~) bd#236 ← (byte) bd#146 -- vbuaa=vbuyy 
    tya
  //SEG371 [149] call fc 
  //SEG372 [161] phi from fb::@17 to fc [phi:fb::@17->fc]
  fc_from_b17:
  //SEG373 [161] phi (byte) bd#71 = (byte~) bd#236 [phi:fb::@17->fc#0] -- register_copy 
    jsr fc
  //SEG374 [150] phi from fb::@17 fb::@7 to fb::@8 [phi:fb::@17/fb::@7->fb::@8]
  b8_from_b17:
  b8_from_b7:
  //SEG375 [150] phi (byte) bd#114 = (byte) bd#146 [phi:fb::@17/fb::@7->fb::@8#0] -- register_copy 
    jmp b8
  //SEG376 fb::@8
  b8:
  //SEG377 [151] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto fb::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp bc
    bne b9_from_b8
    jmp b18
  //SEG378 fb::@18
  b18:
  //SEG379 [152] (byte) bd#148 ← ++ (byte) bd#114 -- vbuyy=_inc_vbuyy 
    iny
  //SEG380 [153] (byte~) bd#237 ← (byte) bd#148 -- vbuaa=vbuyy 
    tya
  //SEG381 [154] call fc 
  //SEG382 [161] phi from fb::@18 to fc [phi:fb::@18->fc]
  fc_from_b18:
  //SEG383 [161] phi (byte) bd#71 = (byte~) bd#237 [phi:fb::@18->fc#0] -- register_copy 
    jsr fc
  //SEG384 [155] phi from fb::@18 fb::@8 to fb::@9 [phi:fb::@18/fb::@8->fb::@9]
  b9_from_b18:
  b9_from_b8:
  //SEG385 [155] phi (byte) bd#115 = (byte) bd#148 [phi:fb::@18/fb::@8->fb::@9#0] -- register_copy 
    jmp b9
  //SEG386 fb::@9
  b9:
  //SEG387 [156] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 9) goto fb::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp bc
    bne breturn_from_b9
  //SEG388 [157] phi from fb::@9 to fb::@19 [phi:fb::@9->fb::@19]
  b19_from_b9:
    jmp b19
  //SEG389 fb::@19
  b19:
  //SEG390 [158] call fc 
  //SEG391 [161] phi from fb::@19 to fc [phi:fb::@19->fc]
  fc_from_b19:
  //SEG392 [161] phi (byte) bd#71 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:fb::@19->fc#0] -- vbuaa=vbuc1 
    lda #0
    jsr fc
  //SEG393 [159] phi from fb::@19 to fb::@return [phi:fb::@19->fb::@return]
  breturn_from_b19:
  //SEG394 [159] phi (byte) bd#35 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:fb::@19->fb::@return#0] -- vbuyy=vbuc1 
    ldy #0
    jmp breturn
  //SEG395 [159] phi from fb::@9 to fb::@return [phi:fb::@9->fb::@return]
  breturn_from_b9:
  //SEG396 [159] phi (byte) bd#35 = (byte) bd#115 [phi:fb::@9->fb::@return#0] -- register_copy 
    jmp breturn
  //SEG397 fb::@return
  breturn:
  //SEG398 [160] return 
    rts
}
//SEG399 fc
fc: {
  //SEG400 [162] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto fc::@1 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b1
    jmp b1
  //SEG401 fc::@1
  b1:
  //SEG402 [163] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto fc::@2 -- vbuaa_neq_vbuc1_then_la1 
    cmp #1
    bne b2
    jmp b2
  //SEG403 fc::@2
  b2:
  //SEG404 [164] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 2) goto fc::@3 -- vbuaa_neq_vbuc1_then_la1 
    cmp #2
    bne b3
    jmp b3
  //SEG405 fc::@3
  b3:
  //SEG406 [165] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto fc::@4 -- vbuaa_neq_vbuc1_then_la1 
    cmp #3
    bne b4
    jmp b4
  //SEG407 fc::@4
  b4:
  //SEG408 [166] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto fc::@5 -- vbuaa_neq_vbuc1_then_la1 
    cmp #4
    bne b5
    jmp b5
  //SEG409 fc::@5
  b5:
  //SEG410 [167] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto fc::@6 -- vbuaa_neq_vbuc1_then_la1 
    cmp #5
    bne b6
    jmp b6
  //SEG411 fc::@6
  b6:
  //SEG412 [168] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto fc::@7 -- vbuaa_neq_vbuc1_then_la1 
    cmp #6
    bne b7
    jmp b7
  //SEG413 fc::@7
  b7:
  //SEG414 [169] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto fc::@8 -- vbuaa_neq_vbuc1_then_la1 
    cmp #7
    bne b8
    jmp b8
  //SEG415 fc::@8
  b8:
  //SEG416 [170] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto fc::@9 -- vbuaa_neq_vbuc1_then_la1 
    cmp #8
    bne b9
    jmp b9
  //SEG417 fc::@9
  b9:
  //SEG418 [171] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 9) goto fc::@10 -- vbuaa_neq_vbuc1_then_la1 
    cmp #9
    bne b10_from_b9
    jmp breturn
  //SEG419 fc::@return
  breturn:
  //SEG420 [172] return 
    rts
  //SEG421 [173] phi from fc::@9 to fc::@10 [phi:fc::@9->fc::@10]
  b10_from_b9:
    jmp b10
  //SEG422 fc::@10
  b10:
    jmp breturn
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b10
Removing instruction jmp b1
Removing instruction jmp b11
Removing instruction jmp b2
Removing instruction jmp b12
Removing instruction jmp b3
Removing instruction jmp b13
Removing instruction jmp b4
Removing instruction jmp b14
Removing instruction jmp b5
Removing instruction jmp b15
Removing instruction jmp b6
Removing instruction jmp b16
Removing instruction jmp b7
Removing instruction jmp b17
Removing instruction jmp b8
Removing instruction jmp b18
Removing instruction jmp b9
Removing instruction jmp b19
Removing instruction jmp breturn
Removing instruction jmp b10
Removing instruction jmp b1
Removing instruction jmp b11
Removing instruction jmp b2
Removing instruction jmp b12
Removing instruction jmp b3
Removing instruction jmp b13
Removing instruction jmp b4
Removing instruction jmp b14
Removing instruction jmp b5
Removing instruction jmp b15
Removing instruction jmp b6
Removing instruction jmp b16
Removing instruction jmp b7
Removing instruction jmp b17
Removing instruction jmp b8
Removing instruction jmp b18
Removing instruction jmp b9
Removing instruction jmp b19
Removing instruction jmp breturn
Removing instruction jmp b10
Removing instruction jmp b1
Removing instruction jmp b11
Removing instruction jmp b2
Removing instruction jmp b12
Removing instruction jmp b3
Removing instruction jmp b13
Removing instruction jmp b4
Removing instruction jmp b14
Removing instruction jmp b5
Removing instruction jmp b15
Removing instruction jmp b6
Removing instruction jmp b16
Removing instruction jmp b7
Removing instruction jmp b17
Removing instruction jmp b8
Removing instruction jmp b18
Removing instruction jmp b9
Removing instruction jmp b19
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp breturn
Removing instruction jmp b10
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldy #0 with TAY
Replacing instruction ldx #0 with TAX
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1 with b2
Replacing label b1_from_f0 with b1
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b4_from_b3 with b4
Replacing label b5_from_b4 with b5
Replacing label b6_from_b5 with b6
Replacing label b7_from_b6 with b7
Replacing label b8_from_b7 with b8
Replacing label b9_from_b8 with b9
Replacing label breturn_from_b9 with breturn
Replacing label b1_from_fa with b1
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b4_from_b3 with b4
Replacing label b5_from_b4 with b5
Replacing label b6_from_b5 with b6
Replacing label b7_from_b6 with b7
Replacing label b8_from_b7 with b8
Replacing label b9_from_b8 with b9
Replacing label breturn_from_b9 with breturn
Replacing label b1_from_fb with b1
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b4_from_b3 with b4
Replacing label b5_from_b4 with b5
Replacing label b6_from_b5 with b6
Replacing label b7_from_b6 with b7
Replacing label b8_from_b7 with b8
Replacing label b9_from_b8 with b9
Replacing label breturn_from_b9 with breturn
Replacing label b10_from_b9 with b10
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1:
Removing instruction b2_from_b1:
Removing instruction b1_from_f0:
Removing instruction b1_from_b10:
Removing instruction b2_from_b1:
Removing instruction b2_from_b11:
Removing instruction b3_from_b12:
Removing instruction b3_from_b2:
Removing instruction b4_from_b13:
Removing instruction b4_from_b3:
Removing instruction b5_from_b14:
Removing instruction b5_from_b4:
Removing instruction b6_from_b15:
Removing instruction b6_from_b5:
Removing instruction b7_from_b16:
Removing instruction b7_from_b6:
Removing instruction b8_from_b17:
Removing instruction b8_from_b7:
Removing instruction b9_from_b18:
Removing instruction b9_from_b8:
Removing instruction b19_from_b9:
Removing instruction fa_from_b19:
Removing instruction breturn_from_b9:
Removing instruction b1_from_fa:
Removing instruction b1_from_b10:
Removing instruction b2_from_b1:
Removing instruction b2_from_b11:
Removing instruction b3_from_b12:
Removing instruction b3_from_b2:
Removing instruction b4_from_b13:
Removing instruction b4_from_b3:
Removing instruction b5_from_b14:
Removing instruction b5_from_b4:
Removing instruction b6_from_b15:
Removing instruction b6_from_b5:
Removing instruction b7_from_b16:
Removing instruction b7_from_b6:
Removing instruction b8_from_b17:
Removing instruction b8_from_b7:
Removing instruction b9_from_b18:
Removing instruction b9_from_b8:
Removing instruction b19_from_b9:
Removing instruction fb_from_b19:
Removing instruction breturn_from_b9:
Removing instruction b1_from_fb:
Removing instruction b1_from_b10:
Removing instruction b2_from_b1:
Removing instruction b2_from_b11:
Removing instruction b3_from_b12:
Removing instruction b3_from_b2:
Removing instruction b4_from_b13:
Removing instruction b4_from_b3:
Removing instruction b5_from_b14:
Removing instruction b5_from_b4:
Removing instruction b6_from_b15:
Removing instruction b6_from_b5:
Removing instruction b7_from_b16:
Removing instruction b7_from_b6:
Removing instruction b8_from_b17:
Removing instruction b8_from_b7:
Removing instruction b9_from_b18:
Removing instruction b9_from_b8:
Removing instruction b19_from_b9:
Removing instruction fc_from_b19:
Removing instruction breturn_from_b9:
Removing instruction b10_from_b9:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b3:
Removing instruction b1_from_b3:
Removing instruction b10:
Removing instruction fa_from_b10:
Removing instruction b11:
Removing instruction fa_from_b11:
Removing instruction b12:
Removing instruction fa_from_b12:
Removing instruction b13:
Removing instruction fa_from_b13:
Removing instruction b14:
Removing instruction fa_from_b14:
Removing instruction b15:
Removing instruction fa_from_b15:
Removing instruction b16:
Removing instruction fa_from_b16:
Removing instruction b17:
Removing instruction fa_from_b17:
Removing instruction b18:
Removing instruction fa_from_b18:
Removing instruction b19:
Removing instruction breturn_from_b19:
Removing instruction b10:
Removing instruction fb_from_b10:
Removing instruction b11:
Removing instruction fb_from_b11:
Removing instruction b12:
Removing instruction fb_from_b12:
Removing instruction b13:
Removing instruction fb_from_b13:
Removing instruction b14:
Removing instruction fb_from_b14:
Removing instruction b15:
Removing instruction fb_from_b15:
Removing instruction b16:
Removing instruction fb_from_b16:
Removing instruction b17:
Removing instruction fb_from_b17:
Removing instruction b18:
Removing instruction fb_from_b18:
Removing instruction b19:
Removing instruction breturn_from_b19:
Removing instruction b10:
Removing instruction fc_from_b10:
Removing instruction b11:
Removing instruction fc_from_b11:
Removing instruction b12:
Removing instruction fc_from_b12:
Removing instruction b13:
Removing instruction fc_from_b13:
Removing instruction b14:
Removing instruction fc_from_b14:
Removing instruction b15:
Removing instruction fc_from_b15:
Removing instruction b16:
Removing instruction fc_from_b16:
Removing instruction b17:
Removing instruction fc_from_b17:
Removing instruction b18:
Removing instruction fc_from_b18:
Removing instruction b19:
Removing instruction breturn_from_b19:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Replacing jump to rts with rts in jmp breturn
Skipping double jump to breturn in bne b10
Replacing jump to rts with rts in jmp breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction bne b1
Removing instruction bne b2
Removing instruction bne b3
Removing instruction bne b4
Removing instruction bne b5
Removing instruction bne b6
Removing instruction bne b7
Removing instruction bne b8
Removing instruction bne b9
Removing instruction bne breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Removing instruction b1:
Removing instruction b2:
Removing instruction b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction breturn:
Removing instruction b10:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction rts
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte) ba
(byte) ba#1 ba zp ZP_BYTE:2 22.0
(byte) ba#17 ba zp ZP_BYTE:2 0.7924528301886792
(byte) bb
(byte) bb#10 bb zp ZP_BYTE:3 2.0
(byte~) bb#101 bb#101 zp ZP_BYTE:4 4.0
(byte~) bb#102 bb#102 zp ZP_BYTE:4 4.0
(byte~) bb#103 bb#103 zp ZP_BYTE:4 4.0
(byte~) bb#104 bb#104 zp ZP_BYTE:4 4.0
(byte~) bb#105 bb#105 zp ZP_BYTE:4 4.0
(byte~) bb#106 bb#106 zp ZP_BYTE:4 4.0
(byte~) bb#107 bb#107 zp ZP_BYTE:4 4.0
(byte~) bb#108 bb#108 zp ZP_BYTE:4 4.0
(byte~) bb#109 bb#109 zp ZP_BYTE:4 4.0
(byte) bb#11 bb zp ZP_BYTE:3 2.0
(byte) bb#13 bb zp ZP_BYTE:3 3.25
(byte) bb#16 bb zp ZP_BYTE:3 5.0
(byte) bb#18 bb zp ZP_BYTE:3 4.0
(byte) bb#19 bb zp ZP_BYTE:3 4.0
(byte) bb#20 bb zp ZP_BYTE:3 4.0
(byte) bb#21 bb zp ZP_BYTE:3 4.0
(byte) bb#22 bb zp ZP_BYTE:3 4.0
(byte) bb#23 bb zp ZP_BYTE:3 4.0
(byte) bb#24 bb zp ZP_BYTE:3 4.0
(byte) bb#25 bb zp ZP_BYTE:3 4.0
(byte) bb#27 bb#27 zp ZP_BYTE:4 0.8260869565217388
(byte) bb#3 bb zp ZP_BYTE:3 2.0
(byte) bb#4 bb zp ZP_BYTE:3 2.0
(byte) bb#49 bb zp ZP_BYTE:3 3.0
(byte) bb#5 bb zp ZP_BYTE:3 2.0
(byte) bb#6 bb zp ZP_BYTE:3 2.0
(byte) bb#66 bb zp ZP_BYTE:3 2.0
(byte) bb#67 bb zp ZP_BYTE:3 2.0
(byte) bb#68 bb zp ZP_BYTE:3 2.0
(byte) bc
(byte) bc#100 reg byte x 2.0
(byte) bc#101 reg byte x 2.0
(byte) bc#102 reg byte x 2.0
(byte) bc#103 reg byte x 2.0
(byte) bc#104 reg byte x 2.6666666666666665
(byte) bc#105 reg byte x 2.0
(byte) bc#106 reg byte x 2.0
(byte) bc#107 reg byte x 2.0
(byte) bc#108 reg byte x 2.0
(byte) bc#109 reg byte x 2.0
(byte) bc#110 reg byte x 2.0
(byte) bc#111 reg byte x 2.0
(byte) bc#112 reg byte x 2.0
(byte) bc#113 reg byte x 3.0
(byte) bc#114 bc zp ZP_BYTE:5 0.8260869565217388
(byte) bc#123 reg byte x 2.0
(byte) bc#13 reg byte x 3.75
(byte~) bc#174 bc zp ZP_BYTE:5 4.0
(byte~) bc#175 bc zp ZP_BYTE:5 4.0
(byte~) bc#176 bc zp ZP_BYTE:5 4.0
(byte~) bc#177 bc zp ZP_BYTE:5 4.0
(byte~) bc#178 bc zp ZP_BYTE:5 4.0
(byte~) bc#179 bc zp ZP_BYTE:5 4.0
(byte~) bc#180 bc zp ZP_BYTE:5 4.0
(byte~) bc#181 bc zp ZP_BYTE:5 4.0
(byte~) bc#182 bc zp ZP_BYTE:5 4.0
(byte) bc#2 reg byte x 3.0
(byte) bc#24 reg byte x 1.8333333333333335
(byte) bc#39 reg byte x 12.0
(byte) bc#40 reg byte x 4.0
(byte) bc#41 reg byte x 4.0
(byte) bc#42 reg byte x 4.0
(byte) bc#43 reg byte x 4.0
(byte) bc#44 reg byte x 4.0
(byte) bc#45 reg byte x 4.0
(byte) bc#46 reg byte x 4.0
(byte) bc#47 reg byte x 4.0
(byte) bc#63 reg byte x 2.0
(byte) bc#64 reg byte x 2.0
(byte) bc#65 reg byte x 2.0
(byte) bc#66 reg byte x 2.0
(byte) bd
(byte) bd#100 reg byte y 2.0
(byte) bd#101 reg byte y 2.0
(byte) bd#102 reg byte y 2.0
(byte) bd#103 reg byte y 2.0
(byte) bd#104 reg byte y 2.6666666666666665
(byte) bd#106 reg byte y 12.0
(byte) bd#107 reg byte y 4.0
(byte) bd#108 reg byte y 4.0
(byte) bd#109 reg byte y 4.0
(byte) bd#110 reg byte y 4.0
(byte) bd#111 reg byte y 4.0
(byte) bd#112 reg byte y 4.0
(byte) bd#113 reg byte y 4.0
(byte) bd#114 reg byte y 4.0
(byte) bd#115 reg byte y 3.0
(byte) bd#120 reg byte y 2.0
(byte) bd#121 reg byte y 2.0
(byte) bd#122 reg byte y 2.0
(byte) bd#123 reg byte y 2.0
(byte) bd#124 reg byte y 2.0
(byte) bd#125 reg byte y 2.0
(byte) bd#126 reg byte y 2.0
(byte) bd#127 reg byte y 2.0
(byte) bd#128 reg byte y 2.6666666666666665
(byte) bd#129 reg byte y 6.0
(byte) bd#13 reg byte y 3.75
(byte) bd#130 reg byte y 2.0
(byte) bd#131 reg byte y 2.0
(byte) bd#132 reg byte y 2.0
(byte) bd#133 reg byte y 2.0
(byte) bd#139 reg byte y 2.0
(byte) bd#140 reg byte y 2.0
(byte) bd#141 reg byte y 2.0
(byte) bd#142 reg byte y 2.0
(byte) bd#143 reg byte y 2.0
(byte) bd#144 reg byte y 2.0
(byte) bd#145 reg byte y 2.0
(byte) bd#146 reg byte y 2.0
(byte) bd#148 reg byte y 2.0
(byte) bd#2 reg byte y 3.0
(byte~) bd#229 reg byte a 4.0
(byte~) bd#230 reg byte a 4.0
(byte~) bd#231 reg byte a 4.0
(byte~) bd#232 reg byte a 4.0
(byte~) bd#233 reg byte a 4.0
(byte~) bd#234 reg byte a 4.0
(byte~) bd#235 reg byte a 4.0
(byte~) bd#236 reg byte a 4.0
(byte~) bd#237 reg byte a 4.0
(byte) bd#24 reg byte y 2.0
(byte) bd#35 reg byte y 1.8333333333333335
(byte) bd#71 reg byte a 3.800000000000001
(void()) f0()
(label) f0::@1
(label) f0::@10
(label) f0::@11
(label) f0::@12
(label) f0::@13
(label) f0::@14
(label) f0::@15
(label) f0::@16
(label) f0::@17
(label) f0::@18
(label) f0::@19
(label) f0::@2
(label) f0::@3
(label) f0::@4
(label) f0::@5
(label) f0::@6
(label) f0::@7
(label) f0::@8
(label) f0::@9
(label) f0::@return
(void()) fa()
(label) fa::@1
(label) fa::@10
(label) fa::@11
(label) fa::@12
(label) fa::@13
(label) fa::@14
(label) fa::@15
(label) fa::@16
(label) fa::@17
(label) fa::@18
(label) fa::@19
(label) fa::@2
(label) fa::@3
(label) fa::@4
(label) fa::@5
(label) fa::@6
(label) fa::@7
(label) fa::@8
(label) fa::@9
(label) fa::@return
(void()) fb()
(label) fb::@1
(label) fb::@10
(label) fb::@11
(label) fb::@12
(label) fb::@13
(label) fb::@14
(label) fb::@15
(label) fb::@16
(label) fb::@17
(label) fb::@18
(label) fb::@19
(label) fb::@2
(label) fb::@3
(label) fb::@4
(label) fb::@5
(label) fb::@6
(label) fb::@7
(label) fb::@8
(label) fb::@9
(label) fb::@return
(void()) fc()
(label) fc::@1
(label) fc::@10
(label) fc::@2
(label) fc::@3
(label) fc::@4
(label) fc::@5
(label) fc::@6
(label) fc::@7
(label) fc::@8
(label) fc::@9
(label) fc::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3

zp ZP_BYTE:2 [ ba#17 ba#1 ]
zp ZP_BYTE:3 [ bb#49 bb#11 bb#25 bb#10 bb#24 bb#68 bb#23 bb#67 bb#22 bb#66 bb#21 bb#6 bb#20 bb#19 bb#18 bb#16 bb#13 bb#3 bb#4 bb#5 ]
zp ZP_BYTE:4 [ bb#27 bb#101 bb#102 bb#103 bb#104 bb#105 bb#106 bb#107 bb#108 bb#109 ]
reg byte x [ bc#113 bc#123 bc#47 bc#112 bc#46 bc#111 bc#45 bc#110 bc#44 bc#109 bc#43 bc#108 bc#42 bc#41 bc#40 bc#39 bc#104 bc#103 bc#102 bc#101 bc#100 bc#66 bc#65 bc#64 bc#63 bc#2 bc#13 bc#24 bc#105 bc#106 bc#107 ]
zp ZP_BYTE:5 [ bc#114 bc#174 bc#175 bc#176 bc#177 bc#178 bc#179 bc#180 bc#181 bc#182 ]
reg byte y [ bd#115 bd#148 bd#114 bd#146 bd#113 bd#145 bd#112 bd#144 bd#111 bd#143 bd#110 bd#142 bd#109 bd#108 bd#107 bd#106 bd#104 bd#103 bd#102 bd#101 bd#100 bd#133 bd#132 bd#131 bd#130 bd#129 bd#128 bd#127 bd#126 bd#125 bd#124 bd#123 bd#122 bd#121 bd#120 bd#2 bd#13 bd#24 bd#35 bd#139 bd#140 bd#141 ]
reg byte a [ bd#71 bd#229 bd#230 bd#231 bd#232 bd#233 bd#234 bd#235 bd#236 bd#237 ]


FINAL ASSEMBLER
Score: 913

//SEG0 File Comments
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label ba = 2
  .label bb = 3
  .label bb_27 = 4
  .label bc = 5
  .label bb_101 = 4
  .label bb_102 = 4
  .label bb_103 = 4
  .label bb_104 = 4
  .label bb_105 = 4
  .label bb_106 = 4
  .label bb_107 = 4
  .label bb_108 = 4
  .label bb_109 = 4
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG12 [5] phi (byte) ba#17 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta ba
  //SEG13 [5] phi (byte) bd#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#1] -- vbuyy=vbuc1 
    tay
  //SEG14 [5] phi (byte) bc#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#2] -- vbuxx=vbuc1 
    tax
  //SEG15 [5] phi (byte) bb#16 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#3] -- vbuz1=vbuc1 
    sta bb
  //SEG16 main::@1
  //SEG17 [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG18 main::@2
  b2:
  //SEG19 [7] call f0 
    jsr f0
  //SEG20 main::@3
  //SEG21 [8] (byte) ba#1 ← ++ (byte) ba#17 -- vbuz1=_inc_vbuz1 
    inc ba
  //SEG22 [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  //SEG23 [5] phi (byte) ba#17 = (byte) ba#1 [phi:main::@3->main::@1#0] -- register_copy 
  //SEG24 [5] phi (byte) bd#2 = (byte) bd#13 [phi:main::@3->main::@1#1] -- register_copy 
  //SEG25 [5] phi (byte) bc#2 = (byte) bc#13 [phi:main::@3->main::@1#2] -- register_copy 
  //SEG26 [5] phi (byte) bb#16 = (byte) bb#13 [phi:main::@3->main::@1#3] -- register_copy 
    jmp b2
}
//SEG27 f0
f0: {
  //SEG28 [9] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto f0::@1 -- vbuz1_neq_0_then_la1 
    lda ba
    cmp #0
    bne b1
  //SEG29 f0::@10
  //SEG30 [10] (byte) bb#3 ← ++ (byte) bb#16 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG31 [11] (byte~) bb#101 ← (byte) bb#3 -- vbuz1=vbuz2 
    lda bb
    sta bb_101
  //SEG32 [12] call fa 
  //SEG33 [59] phi from f0::@10 to fa [phi:f0::@10->fa]
  //SEG34 [59] phi (byte) bd#129 = (byte) bd#2 [phi:f0::@10->fa#0] -- register_copy 
  //SEG35 [59] phi (byte) bc#39 = (byte) bc#2 [phi:f0::@10->fa#1] -- register_copy 
  //SEG36 [59] phi (byte) bb#27 = (byte~) bb#101 [phi:f0::@10->fa#2] -- register_copy 
    jsr fa
  //SEG37 [13] phi from f0 f0::@10 to f0::@1 [phi:f0/f0::@10->f0::@1]
  //SEG38 [13] phi (byte) bd#120 = (byte) bd#2 [phi:f0/f0::@10->f0::@1#0] -- register_copy 
  //SEG39 [13] phi (byte) bc#63 = (byte) bc#2 [phi:f0/f0::@10->f0::@1#1] -- register_copy 
  //SEG40 [13] phi (byte) bb#18 = (byte) bb#16 [phi:f0/f0::@10->f0::@1#2] -- register_copy 
  //SEG41 f0::@1
  b1:
  //SEG42 [14] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto f0::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp ba
    bne b2
  //SEG43 f0::@11
  //SEG44 [15] (byte) bb#4 ← ++ (byte) bb#18 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG45 [16] (byte~) bb#102 ← (byte) bb#4 -- vbuz1=vbuz2 
    lda bb
    sta bb_102
  //SEG46 [17] call fa 
  //SEG47 [59] phi from f0::@11 to fa [phi:f0::@11->fa]
  //SEG48 [59] phi (byte) bd#129 = (byte) bd#120 [phi:f0::@11->fa#0] -- register_copy 
  //SEG49 [59] phi (byte) bc#39 = (byte) bc#63 [phi:f0::@11->fa#1] -- register_copy 
  //SEG50 [59] phi (byte) bb#27 = (byte~) bb#102 [phi:f0::@11->fa#2] -- register_copy 
    jsr fa
  //SEG51 [18] phi from f0::@1 f0::@11 to f0::@2 [phi:f0::@1/f0::@11->f0::@2]
  //SEG52 [18] phi (byte) bd#121 = (byte) bd#120 [phi:f0::@1/f0::@11->f0::@2#0] -- register_copy 
  //SEG53 [18] phi (byte) bc#64 = (byte) bc#63 [phi:f0::@1/f0::@11->f0::@2#1] -- register_copy 
  //SEG54 [18] phi (byte) bb#19 = (byte) bb#18 [phi:f0::@1/f0::@11->f0::@2#2] -- register_copy 
  //SEG55 f0::@2
  b2:
  //SEG56 [19] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 2) goto f0::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp ba
    bne b3
  //SEG57 f0::@12
  //SEG58 [20] (byte) bb#5 ← ++ (byte) bb#19 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG59 [21] (byte~) bb#103 ← (byte) bb#5 -- vbuz1=vbuz2 
    lda bb
    sta bb_103
  //SEG60 [22] call fa 
  //SEG61 [59] phi from f0::@12 to fa [phi:f0::@12->fa]
  //SEG62 [59] phi (byte) bd#129 = (byte) bd#121 [phi:f0::@12->fa#0] -- register_copy 
  //SEG63 [59] phi (byte) bc#39 = (byte) bc#64 [phi:f0::@12->fa#1] -- register_copy 
  //SEG64 [59] phi (byte) bb#27 = (byte~) bb#103 [phi:f0::@12->fa#2] -- register_copy 
    jsr fa
  //SEG65 [23] phi from f0::@12 f0::@2 to f0::@3 [phi:f0::@12/f0::@2->f0::@3]
  //SEG66 [23] phi (byte) bd#122 = (byte) bd#24 [phi:f0::@12/f0::@2->f0::@3#0] -- register_copy 
  //SEG67 [23] phi (byte) bc#65 = (byte) bc#24 [phi:f0::@12/f0::@2->f0::@3#1] -- register_copy 
  //SEG68 [23] phi (byte) bb#20 = (byte) bb#5 [phi:f0::@12/f0::@2->f0::@3#2] -- register_copy 
  //SEG69 f0::@3
  b3:
  //SEG70 [24] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto f0::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp ba
    bne b4
  //SEG71 f0::@13
  //SEG72 [25] (byte) bb#6 ← ++ (byte) bb#20 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG73 [26] (byte~) bb#104 ← (byte) bb#6 -- vbuz1=vbuz2 
    lda bb
    sta bb_104
  //SEG74 [27] call fa 
  //SEG75 [59] phi from f0::@13 to fa [phi:f0::@13->fa]
  //SEG76 [59] phi (byte) bd#129 = (byte) bd#122 [phi:f0::@13->fa#0] -- register_copy 
  //SEG77 [59] phi (byte) bc#39 = (byte) bc#65 [phi:f0::@13->fa#1] -- register_copy 
  //SEG78 [59] phi (byte) bb#27 = (byte~) bb#104 [phi:f0::@13->fa#2] -- register_copy 
    jsr fa
  //SEG79 [28] phi from f0::@13 f0::@3 to f0::@4 [phi:f0::@13/f0::@3->f0::@4]
  //SEG80 [28] phi (byte) bd#123 = (byte) bd#24 [phi:f0::@13/f0::@3->f0::@4#0] -- register_copy 
  //SEG81 [28] phi (byte) bc#66 = (byte) bc#24 [phi:f0::@13/f0::@3->f0::@4#1] -- register_copy 
  //SEG82 [28] phi (byte) bb#21 = (byte) bb#6 [phi:f0::@13/f0::@3->f0::@4#2] -- register_copy 
  //SEG83 f0::@4
  b4:
  //SEG84 [29] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto f0::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp ba
    bne b5
  //SEG85 f0::@14
  //SEG86 [30] (byte) bb#66 ← ++ (byte) bb#21 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG87 [31] (byte~) bb#105 ← (byte) bb#66 -- vbuz1=vbuz2 
    lda bb
    sta bb_105
  //SEG88 [32] call fa 
  //SEG89 [59] phi from f0::@14 to fa [phi:f0::@14->fa]
  //SEG90 [59] phi (byte) bd#129 = (byte) bd#123 [phi:f0::@14->fa#0] -- register_copy 
  //SEG91 [59] phi (byte) bc#39 = (byte) bc#66 [phi:f0::@14->fa#1] -- register_copy 
  //SEG92 [59] phi (byte) bb#27 = (byte~) bb#105 [phi:f0::@14->fa#2] -- register_copy 
    jsr fa
  //SEG93 [33] phi from f0::@14 f0::@4 to f0::@5 [phi:f0::@14/f0::@4->f0::@5]
  //SEG94 [33] phi (byte) bd#124 = (byte) bd#24 [phi:f0::@14/f0::@4->f0::@5#0] -- register_copy 
  //SEG95 [33] phi (byte) bc#100 = (byte) bc#24 [phi:f0::@14/f0::@4->f0::@5#1] -- register_copy 
  //SEG96 [33] phi (byte) bb#22 = (byte) bb#66 [phi:f0::@14/f0::@4->f0::@5#2] -- register_copy 
  //SEG97 f0::@5
  b5:
  //SEG98 [34] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto f0::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp ba
    bne b6
  //SEG99 f0::@15
  //SEG100 [35] (byte) bb#67 ← ++ (byte) bb#22 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG101 [36] (byte~) bb#106 ← (byte) bb#67 -- vbuz1=vbuz2 
    lda bb
    sta bb_106
  //SEG102 [37] call fa 
  //SEG103 [59] phi from f0::@15 to fa [phi:f0::@15->fa]
  //SEG104 [59] phi (byte) bd#129 = (byte) bd#124 [phi:f0::@15->fa#0] -- register_copy 
  //SEG105 [59] phi (byte) bc#39 = (byte) bc#100 [phi:f0::@15->fa#1] -- register_copy 
  //SEG106 [59] phi (byte) bb#27 = (byte~) bb#106 [phi:f0::@15->fa#2] -- register_copy 
    jsr fa
  //SEG107 [38] phi from f0::@15 f0::@5 to f0::@6 [phi:f0::@15/f0::@5->f0::@6]
  //SEG108 [38] phi (byte) bd#125 = (byte) bd#24 [phi:f0::@15/f0::@5->f0::@6#0] -- register_copy 
  //SEG109 [38] phi (byte) bc#101 = (byte) bc#24 [phi:f0::@15/f0::@5->f0::@6#1] -- register_copy 
  //SEG110 [38] phi (byte) bb#23 = (byte) bb#67 [phi:f0::@15/f0::@5->f0::@6#2] -- register_copy 
  //SEG111 f0::@6
  b6:
  //SEG112 [39] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto f0::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp ba
    bne b7
  //SEG113 f0::@16
  //SEG114 [40] (byte) bb#68 ← ++ (byte) bb#23 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG115 [41] (byte~) bb#107 ← (byte) bb#68 -- vbuz1=vbuz2 
    lda bb
    sta bb_107
  //SEG116 [42] call fa 
  //SEG117 [59] phi from f0::@16 to fa [phi:f0::@16->fa]
  //SEG118 [59] phi (byte) bd#129 = (byte) bd#125 [phi:f0::@16->fa#0] -- register_copy 
  //SEG119 [59] phi (byte) bc#39 = (byte) bc#101 [phi:f0::@16->fa#1] -- register_copy 
  //SEG120 [59] phi (byte) bb#27 = (byte~) bb#107 [phi:f0::@16->fa#2] -- register_copy 
    jsr fa
  //SEG121 [43] phi from f0::@16 f0::@6 to f0::@7 [phi:f0::@16/f0::@6->f0::@7]
  //SEG122 [43] phi (byte) bd#126 = (byte) bd#24 [phi:f0::@16/f0::@6->f0::@7#0] -- register_copy 
  //SEG123 [43] phi (byte) bc#102 = (byte) bc#24 [phi:f0::@16/f0::@6->f0::@7#1] -- register_copy 
  //SEG124 [43] phi (byte) bb#24 = (byte) bb#68 [phi:f0::@16/f0::@6->f0::@7#2] -- register_copy 
  //SEG125 f0::@7
  b7:
  //SEG126 [44] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto f0::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp ba
    bne b8
  //SEG127 f0::@17
  //SEG128 [45] (byte) bb#10 ← ++ (byte) bb#24 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG129 [46] (byte~) bb#108 ← (byte) bb#10 -- vbuz1=vbuz2 
    lda bb
    sta bb_108
  //SEG130 [47] call fa 
  //SEG131 [59] phi from f0::@17 to fa [phi:f0::@17->fa]
  //SEG132 [59] phi (byte) bd#129 = (byte) bd#126 [phi:f0::@17->fa#0] -- register_copy 
  //SEG133 [59] phi (byte) bc#39 = (byte) bc#102 [phi:f0::@17->fa#1] -- register_copy 
  //SEG134 [59] phi (byte) bb#27 = (byte~) bb#108 [phi:f0::@17->fa#2] -- register_copy 
    jsr fa
  //SEG135 [48] phi from f0::@17 f0::@7 to f0::@8 [phi:f0::@17/f0::@7->f0::@8]
  //SEG136 [48] phi (byte) bd#127 = (byte) bd#24 [phi:f0::@17/f0::@7->f0::@8#0] -- register_copy 
  //SEG137 [48] phi (byte) bc#103 = (byte) bc#24 [phi:f0::@17/f0::@7->f0::@8#1] -- register_copy 
  //SEG138 [48] phi (byte) bb#25 = (byte) bb#10 [phi:f0::@17/f0::@7->f0::@8#2] -- register_copy 
  //SEG139 f0::@8
  b8:
  //SEG140 [49] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto f0::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp ba
    bne b9
  //SEG141 f0::@18
  //SEG142 [50] (byte) bb#11 ← ++ (byte) bb#25 -- vbuz1=_inc_vbuz1 
    inc bb
  //SEG143 [51] (byte~) bb#109 ← (byte) bb#11 -- vbuz1=vbuz2 
    lda bb
    sta bb_109
  //SEG144 [52] call fa 
  //SEG145 [59] phi from f0::@18 to fa [phi:f0::@18->fa]
  //SEG146 [59] phi (byte) bd#129 = (byte) bd#127 [phi:f0::@18->fa#0] -- register_copy 
  //SEG147 [59] phi (byte) bc#39 = (byte) bc#103 [phi:f0::@18->fa#1] -- register_copy 
  //SEG148 [59] phi (byte) bb#27 = (byte~) bb#109 [phi:f0::@18->fa#2] -- register_copy 
    jsr fa
  //SEG149 [53] phi from f0::@18 f0::@8 to f0::@9 [phi:f0::@18/f0::@8->f0::@9]
  //SEG150 [53] phi (byte) bd#128 = (byte) bd#24 [phi:f0::@18/f0::@8->f0::@9#0] -- register_copy 
  //SEG151 [53] phi (byte) bc#104 = (byte) bc#24 [phi:f0::@18/f0::@8->f0::@9#1] -- register_copy 
  //SEG152 [53] phi (byte) bb#49 = (byte) bb#11 [phi:f0::@18/f0::@8->f0::@9#2] -- register_copy 
  //SEG153 f0::@9
  b9:
  //SEG154 [54] if((byte) ba#17!=(byte/signed byte/word/signed word/dword/signed dword) 9) goto f0::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp ba
    bne breturn
  //SEG155 [55] phi from f0::@9 to f0::@19 [phi:f0::@9->f0::@19]
  //SEG156 f0::@19
  //SEG157 [56] call fa 
  //SEG158 [59] phi from f0::@19 to fa [phi:f0::@19->fa]
  //SEG159 [59] phi (byte) bd#129 = (byte) bd#128 [phi:f0::@19->fa#0] -- register_copy 
  //SEG160 [59] phi (byte) bc#39 = (byte) bc#104 [phi:f0::@19->fa#1] -- register_copy 
  //SEG161 [59] phi (byte) bb#27 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:f0::@19->fa#2] -- vbuz1=vbuc1 
    lda #0
    sta bb_27
    jsr fa
  //SEG162 [57] phi from f0::@19 to f0::@return [phi:f0::@19->f0::@return]
  //SEG163 [57] phi (byte) bd#13 = (byte) bd#24 [phi:f0::@19->f0::@return#0] -- register_copy 
  //SEG164 [57] phi (byte) bc#13 = (byte) bc#24 [phi:f0::@19->f0::@return#1] -- register_copy 
  //SEG165 [57] phi (byte) bb#13 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:f0::@19->f0::@return#2] -- vbuz1=vbuc1 
    lda #0
    sta bb
    rts
  //SEG166 [57] phi from f0::@9 to f0::@return [phi:f0::@9->f0::@return]
  //SEG167 [57] phi (byte) bd#13 = (byte) bd#128 [phi:f0::@9->f0::@return#0] -- register_copy 
  //SEG168 [57] phi (byte) bc#13 = (byte) bc#104 [phi:f0::@9->f0::@return#1] -- register_copy 
  //SEG169 [57] phi (byte) bb#13 = (byte) bb#49 [phi:f0::@9->f0::@return#2] -- register_copy 
  //SEG170 f0::@return
  breturn:
  //SEG171 [58] return 
    rts
}
//SEG172 fa
fa: {
  //SEG173 [60] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto fa::@1 -- vbuz1_neq_0_then_la1 
    lda bb_27
    cmp #0
    bne b1
  //SEG174 fa::@10
  //SEG175 [61] (byte) bc#105 ← ++ (byte) bc#39 -- vbuxx=_inc_vbuxx 
    inx
  //SEG176 [62] (byte~) bc#174 ← (byte) bc#105 -- vbuz1=vbuxx 
    stx bc
  //SEG177 [63] call fb 
  //SEG178 [110] phi from fa::@10 to fb [phi:fa::@10->fb]
  //SEG179 [110] phi (byte) bd#106 = (byte) bd#129 [phi:fa::@10->fb#0] -- register_copy 
  //SEG180 [110] phi (byte) bc#114 = (byte~) bc#174 [phi:fa::@10->fb#1] -- register_copy 
    jsr fb
  //SEG181 [64] phi from fa fa::@10 to fa::@1 [phi:fa/fa::@10->fa::@1]
  //SEG182 [64] phi (byte) bd#130 = (byte) bd#129 [phi:fa/fa::@10->fa::@1#0] -- register_copy 
  //SEG183 [64] phi (byte) bc#40 = (byte) bc#39 [phi:fa/fa::@10->fa::@1#1] -- register_copy 
  //SEG184 fa::@1
  b1:
  //SEG185 [65] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto fa::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp bb_27
    bne b2
  //SEG186 fa::@11
  //SEG187 [66] (byte) bc#106 ← ++ (byte) bc#40 -- vbuxx=_inc_vbuxx 
    inx
  //SEG188 [67] (byte~) bc#175 ← (byte) bc#106 -- vbuz1=vbuxx 
    stx bc
  //SEG189 [68] call fb 
  //SEG190 [110] phi from fa::@11 to fb [phi:fa::@11->fb]
  //SEG191 [110] phi (byte) bd#106 = (byte) bd#130 [phi:fa::@11->fb#0] -- register_copy 
  //SEG192 [110] phi (byte) bc#114 = (byte~) bc#175 [phi:fa::@11->fb#1] -- register_copy 
    jsr fb
  //SEG193 [69] phi from fa::@1 fa::@11 to fa::@2 [phi:fa::@1/fa::@11->fa::@2]
  //SEG194 [69] phi (byte) bd#131 = (byte) bd#130 [phi:fa::@1/fa::@11->fa::@2#0] -- register_copy 
  //SEG195 [69] phi (byte) bc#41 = (byte) bc#40 [phi:fa::@1/fa::@11->fa::@2#1] -- register_copy 
  //SEG196 fa::@2
  b2:
  //SEG197 [70] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 2) goto fa::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp bb_27
    bne b3
  //SEG198 fa::@12
  //SEG199 [71] (byte) bc#107 ← ++ (byte) bc#41 -- vbuxx=_inc_vbuxx 
    inx
  //SEG200 [72] (byte~) bc#176 ← (byte) bc#107 -- vbuz1=vbuxx 
    stx bc
  //SEG201 [73] call fb 
  //SEG202 [110] phi from fa::@12 to fb [phi:fa::@12->fb]
  //SEG203 [110] phi (byte) bd#106 = (byte) bd#131 [phi:fa::@12->fb#0] -- register_copy 
  //SEG204 [110] phi (byte) bc#114 = (byte~) bc#176 [phi:fa::@12->fb#1] -- register_copy 
    jsr fb
  //SEG205 [74] phi from fa::@12 fa::@2 to fa::@3 [phi:fa::@12/fa::@2->fa::@3]
  //SEG206 [74] phi (byte) bd#132 = (byte) bd#35 [phi:fa::@12/fa::@2->fa::@3#0] -- register_copy 
  //SEG207 [74] phi (byte) bc#42 = (byte) bc#107 [phi:fa::@12/fa::@2->fa::@3#1] -- register_copy 
  //SEG208 fa::@3
  b3:
  //SEG209 [75] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto fa::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp bb_27
    bne b4
  //SEG210 fa::@13
  //SEG211 [76] (byte) bc#108 ← ++ (byte) bc#42 -- vbuxx=_inc_vbuxx 
    inx
  //SEG212 [77] (byte~) bc#177 ← (byte) bc#108 -- vbuz1=vbuxx 
    stx bc
  //SEG213 [78] call fb 
  //SEG214 [110] phi from fa::@13 to fb [phi:fa::@13->fb]
  //SEG215 [110] phi (byte) bd#106 = (byte) bd#132 [phi:fa::@13->fb#0] -- register_copy 
  //SEG216 [110] phi (byte) bc#114 = (byte~) bc#177 [phi:fa::@13->fb#1] -- register_copy 
    jsr fb
  //SEG217 [79] phi from fa::@13 fa::@3 to fa::@4 [phi:fa::@13/fa::@3->fa::@4]
  //SEG218 [79] phi (byte) bd#133 = (byte) bd#35 [phi:fa::@13/fa::@3->fa::@4#0] -- register_copy 
  //SEG219 [79] phi (byte) bc#43 = (byte) bc#108 [phi:fa::@13/fa::@3->fa::@4#1] -- register_copy 
  //SEG220 fa::@4
  b4:
  //SEG221 [80] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto fa::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp bb_27
    bne b5
  //SEG222 fa::@14
  //SEG223 [81] (byte) bc#109 ← ++ (byte) bc#43 -- vbuxx=_inc_vbuxx 
    inx
  //SEG224 [82] (byte~) bc#178 ← (byte) bc#109 -- vbuz1=vbuxx 
    stx bc
  //SEG225 [83] call fb 
  //SEG226 [110] phi from fa::@14 to fb [phi:fa::@14->fb]
  //SEG227 [110] phi (byte) bd#106 = (byte) bd#133 [phi:fa::@14->fb#0] -- register_copy 
  //SEG228 [110] phi (byte) bc#114 = (byte~) bc#178 [phi:fa::@14->fb#1] -- register_copy 
    jsr fb
  //SEG229 [84] phi from fa::@14 fa::@4 to fa::@5 [phi:fa::@14/fa::@4->fa::@5]
  //SEG230 [84] phi (byte) bd#100 = (byte) bd#35 [phi:fa::@14/fa::@4->fa::@5#0] -- register_copy 
  //SEG231 [84] phi (byte) bc#44 = (byte) bc#109 [phi:fa::@14/fa::@4->fa::@5#1] -- register_copy 
  //SEG232 fa::@5
  b5:
  //SEG233 [85] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto fa::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp bb_27
    bne b6
  //SEG234 fa::@15
  //SEG235 [86] (byte) bc#110 ← ++ (byte) bc#44 -- vbuxx=_inc_vbuxx 
    inx
  //SEG236 [87] (byte~) bc#179 ← (byte) bc#110 -- vbuz1=vbuxx 
    stx bc
  //SEG237 [88] call fb 
  //SEG238 [110] phi from fa::@15 to fb [phi:fa::@15->fb]
  //SEG239 [110] phi (byte) bd#106 = (byte) bd#100 [phi:fa::@15->fb#0] -- register_copy 
  //SEG240 [110] phi (byte) bc#114 = (byte~) bc#179 [phi:fa::@15->fb#1] -- register_copy 
    jsr fb
  //SEG241 [89] phi from fa::@15 fa::@5 to fa::@6 [phi:fa::@15/fa::@5->fa::@6]
  //SEG242 [89] phi (byte) bd#101 = (byte) bd#35 [phi:fa::@15/fa::@5->fa::@6#0] -- register_copy 
  //SEG243 [89] phi (byte) bc#45 = (byte) bc#110 [phi:fa::@15/fa::@5->fa::@6#1] -- register_copy 
  //SEG244 fa::@6
  b6:
  //SEG245 [90] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto fa::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp bb_27
    bne b7
  //SEG246 fa::@16
  //SEG247 [91] (byte) bc#111 ← ++ (byte) bc#45 -- vbuxx=_inc_vbuxx 
    inx
  //SEG248 [92] (byte~) bc#180 ← (byte) bc#111 -- vbuz1=vbuxx 
    stx bc
  //SEG249 [93] call fb 
  //SEG250 [110] phi from fa::@16 to fb [phi:fa::@16->fb]
  //SEG251 [110] phi (byte) bd#106 = (byte) bd#101 [phi:fa::@16->fb#0] -- register_copy 
  //SEG252 [110] phi (byte) bc#114 = (byte~) bc#180 [phi:fa::@16->fb#1] -- register_copy 
    jsr fb
  //SEG253 [94] phi from fa::@16 fa::@6 to fa::@7 [phi:fa::@16/fa::@6->fa::@7]
  //SEG254 [94] phi (byte) bd#102 = (byte) bd#35 [phi:fa::@16/fa::@6->fa::@7#0] -- register_copy 
  //SEG255 [94] phi (byte) bc#46 = (byte) bc#111 [phi:fa::@16/fa::@6->fa::@7#1] -- register_copy 
  //SEG256 fa::@7
  b7:
  //SEG257 [95] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto fa::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp bb_27
    bne b8
  //SEG258 fa::@17
  //SEG259 [96] (byte) bc#112 ← ++ (byte) bc#46 -- vbuxx=_inc_vbuxx 
    inx
  //SEG260 [97] (byte~) bc#181 ← (byte) bc#112 -- vbuz1=vbuxx 
    stx bc
  //SEG261 [98] call fb 
  //SEG262 [110] phi from fa::@17 to fb [phi:fa::@17->fb]
  //SEG263 [110] phi (byte) bd#106 = (byte) bd#102 [phi:fa::@17->fb#0] -- register_copy 
  //SEG264 [110] phi (byte) bc#114 = (byte~) bc#181 [phi:fa::@17->fb#1] -- register_copy 
    jsr fb
  //SEG265 [99] phi from fa::@17 fa::@7 to fa::@8 [phi:fa::@17/fa::@7->fa::@8]
  //SEG266 [99] phi (byte) bd#103 = (byte) bd#35 [phi:fa::@17/fa::@7->fa::@8#0] -- register_copy 
  //SEG267 [99] phi (byte) bc#47 = (byte) bc#112 [phi:fa::@17/fa::@7->fa::@8#1] -- register_copy 
  //SEG268 fa::@8
  b8:
  //SEG269 [100] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto fa::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp bb_27
    bne b9
  //SEG270 fa::@18
  //SEG271 [101] (byte) bc#123 ← ++ (byte) bc#47 -- vbuxx=_inc_vbuxx 
    inx
  //SEG272 [102] (byte~) bc#182 ← (byte) bc#123 -- vbuz1=vbuxx 
    stx bc
  //SEG273 [103] call fb 
  //SEG274 [110] phi from fa::@18 to fb [phi:fa::@18->fb]
  //SEG275 [110] phi (byte) bd#106 = (byte) bd#103 [phi:fa::@18->fb#0] -- register_copy 
  //SEG276 [110] phi (byte) bc#114 = (byte~) bc#182 [phi:fa::@18->fb#1] -- register_copy 
    jsr fb
  //SEG277 [104] phi from fa::@18 fa::@8 to fa::@9 [phi:fa::@18/fa::@8->fa::@9]
  //SEG278 [104] phi (byte) bd#104 = (byte) bd#35 [phi:fa::@18/fa::@8->fa::@9#0] -- register_copy 
  //SEG279 [104] phi (byte) bc#113 = (byte) bc#123 [phi:fa::@18/fa::@8->fa::@9#1] -- register_copy 
  //SEG280 fa::@9
  b9:
  //SEG281 [105] if((byte) bb#27!=(byte/signed byte/word/signed word/dword/signed dword) 9) goto fa::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp bb_27
    bne breturn
  //SEG282 [106] phi from fa::@9 to fa::@19 [phi:fa::@9->fa::@19]
  //SEG283 fa::@19
  //SEG284 [107] call fb 
  //SEG285 [110] phi from fa::@19 to fb [phi:fa::@19->fb]
  //SEG286 [110] phi (byte) bd#106 = (byte) bd#104 [phi:fa::@19->fb#0] -- register_copy 
  //SEG287 [110] phi (byte) bc#114 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:fa::@19->fb#1] -- vbuz1=vbuc1 
    lda #0
    sta bc
    jsr fb
  //SEG288 [108] phi from fa::@19 to fa::@return [phi:fa::@19->fa::@return]
  //SEG289 [108] phi (byte) bd#24 = (byte) bd#35 [phi:fa::@19->fa::@return#0] -- register_copy 
  //SEG290 [108] phi (byte) bc#24 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:fa::@19->fa::@return#1] -- vbuxx=vbuc1 
    ldx #0
    rts
  //SEG291 [108] phi from fa::@9 to fa::@return [phi:fa::@9->fa::@return]
  //SEG292 [108] phi (byte) bd#24 = (byte) bd#104 [phi:fa::@9->fa::@return#0] -- register_copy 
  //SEG293 [108] phi (byte) bc#24 = (byte) bc#113 [phi:fa::@9->fa::@return#1] -- register_copy 
  //SEG294 fa::@return
  breturn:
  //SEG295 [109] return 
    rts
}
//SEG296 fb
fb: {
  //SEG297 [111] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto fb::@1 -- vbuz1_neq_0_then_la1 
    lda bc
    cmp #0
    bne b1
  //SEG298 fb::@10
  //SEG299 [112] (byte) bd#139 ← ++ (byte) bd#106 -- vbuyy=_inc_vbuyy 
    iny
  //SEG300 [113] (byte~) bd#229 ← (byte) bd#139 -- vbuaa=vbuyy 
    tya
  //SEG301 [114] call fc 
  //SEG302 [161] phi from fb::@10 to fc [phi:fb::@10->fc]
  //SEG303 [161] phi (byte) bd#71 = (byte~) bd#229 [phi:fb::@10->fc#0] -- register_copy 
    jsr fc
  //SEG304 [115] phi from fb fb::@10 to fb::@1 [phi:fb/fb::@10->fb::@1]
  //SEG305 [115] phi (byte) bd#107 = (byte) bd#106 [phi:fb/fb::@10->fb::@1#0] -- register_copy 
  //SEG306 fb::@1
  b1:
  //SEG307 [116] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto fb::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp bc
    bne b2
  //SEG308 fb::@11
  //SEG309 [117] (byte) bd#140 ← ++ (byte) bd#107 -- vbuyy=_inc_vbuyy 
    iny
  //SEG310 [118] (byte~) bd#230 ← (byte) bd#140 -- vbuaa=vbuyy 
    tya
  //SEG311 [119] call fc 
  //SEG312 [161] phi from fb::@11 to fc [phi:fb::@11->fc]
  //SEG313 [161] phi (byte) bd#71 = (byte~) bd#230 [phi:fb::@11->fc#0] -- register_copy 
    jsr fc
  //SEG314 [120] phi from fb::@1 fb::@11 to fb::@2 [phi:fb::@1/fb::@11->fb::@2]
  //SEG315 [120] phi (byte) bd#108 = (byte) bd#107 [phi:fb::@1/fb::@11->fb::@2#0] -- register_copy 
  //SEG316 fb::@2
  b2:
  //SEG317 [121] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 2) goto fb::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp bc
    bne b3
  //SEG318 fb::@12
  //SEG319 [122] (byte) bd#141 ← ++ (byte) bd#108 -- vbuyy=_inc_vbuyy 
    iny
  //SEG320 [123] (byte~) bd#231 ← (byte) bd#141 -- vbuaa=vbuyy 
    tya
  //SEG321 [124] call fc 
  //SEG322 [161] phi from fb::@12 to fc [phi:fb::@12->fc]
  //SEG323 [161] phi (byte) bd#71 = (byte~) bd#231 [phi:fb::@12->fc#0] -- register_copy 
    jsr fc
  //SEG324 [125] phi from fb::@12 fb::@2 to fb::@3 [phi:fb::@12/fb::@2->fb::@3]
  //SEG325 [125] phi (byte) bd#109 = (byte) bd#141 [phi:fb::@12/fb::@2->fb::@3#0] -- register_copy 
  //SEG326 fb::@3
  b3:
  //SEG327 [126] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto fb::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp bc
    bne b4
  //SEG328 fb::@13
  //SEG329 [127] (byte) bd#142 ← ++ (byte) bd#109 -- vbuyy=_inc_vbuyy 
    iny
  //SEG330 [128] (byte~) bd#232 ← (byte) bd#142 -- vbuaa=vbuyy 
    tya
  //SEG331 [129] call fc 
  //SEG332 [161] phi from fb::@13 to fc [phi:fb::@13->fc]
  //SEG333 [161] phi (byte) bd#71 = (byte~) bd#232 [phi:fb::@13->fc#0] -- register_copy 
    jsr fc
  //SEG334 [130] phi from fb::@13 fb::@3 to fb::@4 [phi:fb::@13/fb::@3->fb::@4]
  //SEG335 [130] phi (byte) bd#110 = (byte) bd#142 [phi:fb::@13/fb::@3->fb::@4#0] -- register_copy 
  //SEG336 fb::@4
  b4:
  //SEG337 [131] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto fb::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp bc
    bne b5
  //SEG338 fb::@14
  //SEG339 [132] (byte) bd#143 ← ++ (byte) bd#110 -- vbuyy=_inc_vbuyy 
    iny
  //SEG340 [133] (byte~) bd#233 ← (byte) bd#143 -- vbuaa=vbuyy 
    tya
  //SEG341 [134] call fc 
  //SEG342 [161] phi from fb::@14 to fc [phi:fb::@14->fc]
  //SEG343 [161] phi (byte) bd#71 = (byte~) bd#233 [phi:fb::@14->fc#0] -- register_copy 
    jsr fc
  //SEG344 [135] phi from fb::@14 fb::@4 to fb::@5 [phi:fb::@14/fb::@4->fb::@5]
  //SEG345 [135] phi (byte) bd#111 = (byte) bd#143 [phi:fb::@14/fb::@4->fb::@5#0] -- register_copy 
  //SEG346 fb::@5
  b5:
  //SEG347 [136] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto fb::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #5
    cmp bc
    bne b6
  //SEG348 fb::@15
  //SEG349 [137] (byte) bd#144 ← ++ (byte) bd#111 -- vbuyy=_inc_vbuyy 
    iny
  //SEG350 [138] (byte~) bd#234 ← (byte) bd#144 -- vbuaa=vbuyy 
    tya
  //SEG351 [139] call fc 
  //SEG352 [161] phi from fb::@15 to fc [phi:fb::@15->fc]
  //SEG353 [161] phi (byte) bd#71 = (byte~) bd#234 [phi:fb::@15->fc#0] -- register_copy 
    jsr fc
  //SEG354 [140] phi from fb::@15 fb::@5 to fb::@6 [phi:fb::@15/fb::@5->fb::@6]
  //SEG355 [140] phi (byte) bd#112 = (byte) bd#144 [phi:fb::@15/fb::@5->fb::@6#0] -- register_copy 
  //SEG356 fb::@6
  b6:
  //SEG357 [141] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto fb::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp bc
    bne b7
  //SEG358 fb::@16
  //SEG359 [142] (byte) bd#145 ← ++ (byte) bd#112 -- vbuyy=_inc_vbuyy 
    iny
  //SEG360 [143] (byte~) bd#235 ← (byte) bd#145 -- vbuaa=vbuyy 
    tya
  //SEG361 [144] call fc 
  //SEG362 [161] phi from fb::@16 to fc [phi:fb::@16->fc]
  //SEG363 [161] phi (byte) bd#71 = (byte~) bd#235 [phi:fb::@16->fc#0] -- register_copy 
    jsr fc
  //SEG364 [145] phi from fb::@16 fb::@6 to fb::@7 [phi:fb::@16/fb::@6->fb::@7]
  //SEG365 [145] phi (byte) bd#113 = (byte) bd#145 [phi:fb::@16/fb::@6->fb::@7#0] -- register_copy 
  //SEG366 fb::@7
  b7:
  //SEG367 [146] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto fb::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp bc
    bne b8
  //SEG368 fb::@17
  //SEG369 [147] (byte) bd#146 ← ++ (byte) bd#113 -- vbuyy=_inc_vbuyy 
    iny
  //SEG370 [148] (byte~) bd#236 ← (byte) bd#146 -- vbuaa=vbuyy 
    tya
  //SEG371 [149] call fc 
  //SEG372 [161] phi from fb::@17 to fc [phi:fb::@17->fc]
  //SEG373 [161] phi (byte) bd#71 = (byte~) bd#236 [phi:fb::@17->fc#0] -- register_copy 
    jsr fc
  //SEG374 [150] phi from fb::@17 fb::@7 to fb::@8 [phi:fb::@17/fb::@7->fb::@8]
  //SEG375 [150] phi (byte) bd#114 = (byte) bd#146 [phi:fb::@17/fb::@7->fb::@8#0] -- register_copy 
  //SEG376 fb::@8
  b8:
  //SEG377 [151] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto fb::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp bc
    bne b9
  //SEG378 fb::@18
  //SEG379 [152] (byte) bd#148 ← ++ (byte) bd#114 -- vbuyy=_inc_vbuyy 
    iny
  //SEG380 [153] (byte~) bd#237 ← (byte) bd#148 -- vbuaa=vbuyy 
    tya
  //SEG381 [154] call fc 
  //SEG382 [161] phi from fb::@18 to fc [phi:fb::@18->fc]
  //SEG383 [161] phi (byte) bd#71 = (byte~) bd#237 [phi:fb::@18->fc#0] -- register_copy 
    jsr fc
  //SEG384 [155] phi from fb::@18 fb::@8 to fb::@9 [phi:fb::@18/fb::@8->fb::@9]
  //SEG385 [155] phi (byte) bd#115 = (byte) bd#148 [phi:fb::@18/fb::@8->fb::@9#0] -- register_copy 
  //SEG386 fb::@9
  b9:
  //SEG387 [156] if((byte) bc#114!=(byte/signed byte/word/signed word/dword/signed dword) 9) goto fb::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp bc
    bne breturn
  //SEG388 [157] phi from fb::@9 to fb::@19 [phi:fb::@9->fb::@19]
  //SEG389 fb::@19
  //SEG390 [158] call fc 
  //SEG391 [161] phi from fb::@19 to fc [phi:fb::@19->fc]
  //SEG392 [161] phi (byte) bd#71 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:fb::@19->fc#0] -- vbuaa=vbuc1 
    lda #0
    jsr fc
  //SEG393 [159] phi from fb::@19 to fb::@return [phi:fb::@19->fb::@return]
  //SEG394 [159] phi (byte) bd#35 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:fb::@19->fb::@return#0] -- vbuyy=vbuc1 
    ldy #0
    rts
  //SEG395 [159] phi from fb::@9 to fb::@return [phi:fb::@9->fb::@return]
  //SEG396 [159] phi (byte) bd#35 = (byte) bd#115 [phi:fb::@9->fb::@return#0] -- register_copy 
  //SEG397 fb::@return
  breturn:
  //SEG398 [160] return 
    rts
}
//SEG399 fc
fc: {
  //SEG400 [162] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto fc::@1 -- vbuaa_neq_0_then_la1 
    cmp #0
  //SEG401 fc::@1
  //SEG402 [163] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto fc::@2 -- vbuaa_neq_vbuc1_then_la1 
    cmp #1
  //SEG403 fc::@2
  //SEG404 [164] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 2) goto fc::@3 -- vbuaa_neq_vbuc1_then_la1 
    cmp #2
  //SEG405 fc::@3
  //SEG406 [165] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto fc::@4 -- vbuaa_neq_vbuc1_then_la1 
    cmp #3
  //SEG407 fc::@4
  //SEG408 [166] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto fc::@5 -- vbuaa_neq_vbuc1_then_la1 
    cmp #4
  //SEG409 fc::@5
  //SEG410 [167] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 5) goto fc::@6 -- vbuaa_neq_vbuc1_then_la1 
    cmp #5
  //SEG411 fc::@6
  //SEG412 [168] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto fc::@7 -- vbuaa_neq_vbuc1_then_la1 
    cmp #6
  //SEG413 fc::@7
  //SEG414 [169] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto fc::@8 -- vbuaa_neq_vbuc1_then_la1 
    cmp #7
  //SEG415 fc::@8
  //SEG416 [170] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto fc::@9 -- vbuaa_neq_vbuc1_then_la1 
    cmp #8
  //SEG417 fc::@9
  //SEG418 [171] if((byte) bd#71!=(byte/signed byte/word/signed word/dword/signed dword) 9) goto fc::@10 -- vbuaa_neq_vbuc1_then_la1 
    cmp #9
  //SEG419 fc::@return
  //SEG420 [172] return 
    rts
  //SEG421 [173] phi from fc::@9 to fc::@10 [phi:fc::@9->fc::@10]
  //SEG422 fc::@10
}

