Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) RASTER#0 ← ((byte*)) (word/dword/signed dword) 53266
  (byte*) BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) 53280
  (byte) LIGHT_BLUE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 14
  to:@3
@3: scope:[]  from @begin
  (signed byte*) COSH#0 ← ((signed byte*)) (word/signed word/dword/signed dword) 8192
  (signed byte*~) $0 ← (signed byte*) COSH#0 + (byte/signed byte/word/signed word/dword/signed dword) 64
  (signed byte*) SINH#0 ← (signed byte*~) $0
  (signed byte*) COSQ#0 ← ((signed byte*)) (word/signed word/dword/signed dword) 8704
  (signed byte*~) $1 ← (signed byte*) COSQ#0 + (byte/signed byte/word/signed word/dword/signed dword) 64
  (signed byte*) SINQ#0 ← (signed byte*~) $1
  kickasm(location (signed byte*) COSH#0) {{ {
    .var min = -$1fff
    .var max = $1fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }
 }}
  kickasm(location (signed byte*) COSQ#0) {{ {
    .var min = -$0fff
    .var max = $0fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }
 }}
  (byte[512]) mulf_sqr1#0 ← { fill( 512, 0) }
  (byte[512]) mulf_sqr2#0 ← { fill( 512, 0) }
  to:@4
mulf_init: scope:[mulf_init]  from main
  (signed word) mulf_init::sqr1#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (signed word) mulf_init::add#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) mulf_init::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@1
  (signed word) mulf_init::add#2 ← phi( mulf_init/(signed word) mulf_init::add#0 mulf_init::@1/(signed word) mulf_init::add#1 )
  (byte) mulf_init::i#2 ← phi( mulf_init/(byte) mulf_init::i#0 mulf_init::@1/(byte) mulf_init::i#1 )
  (signed word) mulf_init::sqr1#2 ← phi( mulf_init/(signed word) mulf_init::sqr1#0 mulf_init::@1/(signed word) mulf_init::sqr1#1 )
  (byte~) mulf_init::$0 ← > (signed word) mulf_init::sqr1#2
  *((byte[512]) mulf_sqr1#0 + (byte) mulf_init::i#2) ← (byte~) mulf_init::$0
  (byte~) mulf_init::$1 ← - (byte) mulf_init::i#2
  (byte~) mulf_init::$2 ← > (signed word) mulf_init::sqr1#2
  *((byte[512]) mulf_sqr1#0 + (byte~) mulf_init::$1) ← (byte~) mulf_init::$2
  (byte/signed word/word/dword/signed dword~) mulf_init::$3 ← (byte) mulf_init::i#2 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte~) mulf_init::$4 ← > (signed word) mulf_init::sqr1#2
  *((byte[512]) mulf_sqr2#0 + (byte/signed word/word/dword/signed dword~) mulf_init::$3) ← (byte~) mulf_init::$4
  (byte/signed word/word/dword/signed dword~) mulf_init::$5 ← (byte/signed byte/word/signed word/dword/signed dword) 1 - (byte) mulf_init::i#2
  (byte~) mulf_init::$6 ← > (signed word) mulf_init::sqr1#2
  *((byte[512]) mulf_sqr2#0 + (byte/signed word/word/dword/signed dword~) mulf_init::$5) ← (byte~) mulf_init::$6
  (signed word) mulf_init::sqr1#1 ← (signed word) mulf_init::sqr1#2 + (signed word) mulf_init::add#2
  (signed word) mulf_init::add#1 ← (signed word) mulf_init::add#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) mulf_init::i#1 ← (byte) mulf_init::i#2 + rangenext(0,128)
  (bool~) mulf_init::$7 ← (byte) mulf_init::i#1 != rangelast(0,128)
  if((bool~) mulf_init::$7) goto mulf_init::@1
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@1
  return 
  to:@return
@4: scope:[]  from @3
  (signed byte*) SINQ#6 ← phi( @3/(signed byte*) SINQ#0 )
  (signed byte*) COSQ#6 ← phi( @3/(signed byte*) COSQ#0 )
  (signed byte*) SINH#6 ← phi( @3/(signed byte*) SINH#0 )
  (signed byte*) COSH#6 ← phi( @3/(signed byte*) COSH#0 )
  (signed byte*) xr#0 ← ((signed byte*)) (byte/word/signed word/dword/signed dword) 240
  (signed byte*) yr#0 ← ((signed byte*)) (byte/word/signed word/dword/signed dword) 241
  (signed byte*) zr#0 ← ((signed byte*)) (byte/word/signed word/dword/signed dword) 242
  to:@5
main: scope:[main]  from @7
  (signed byte*) zr#12 ← phi( @7/(signed byte*) zr#13 )
  (signed byte*) yr#12 ← phi( @7/(signed byte*) yr#13 )
  (signed byte*) xr#12 ← phi( @7/(signed byte*) xr#13 )
  (signed byte*) SINQ#3 ← phi( @7/(signed byte*) SINQ#4 )
  (signed byte*) COSQ#3 ← phi( @7/(signed byte*) COSQ#4 )
  (signed byte*) SINH#3 ← phi( @7/(signed byte*) SINH#4 )
  (signed byte*) COSH#3 ← phi( @7/(signed byte*) COSH#4 )
  (byte*) main::SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  asm { sei  }
  call mulf_init 
  to:main::@13
main::@13: scope:[main]  from main
  (signed byte*) zr#11 ← phi( main/(signed byte*) zr#12 )
  (signed byte*) yr#11 ← phi( main/(signed byte*) yr#12 )
  (byte*) main::SCREEN#10 ← phi( main/(byte*) main::SCREEN#0 )
  (signed byte*) xr#11 ← phi( main/(signed byte*) xr#12 )
  (signed byte*) SINQ#2 ← phi( main/(signed byte*) SINQ#3 )
  (signed byte*) COSQ#2 ← phi( main/(signed byte*) COSQ#3 )
  (signed byte*) SINH#2 ← phi( main/(signed byte*) SINH#3 )
  (signed byte*) COSH#2 ← phi( main/(signed byte*) COSH#3 )
  (signed byte) prepare_matrix::sx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (signed byte) prepare_matrix::sy#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (signed byte) prepare_matrix::sz#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call prepare_matrix 
  to:main::@14
main::@14: scope:[main]  from main::@13
  (signed byte*) zr#10 ← phi( main::@13/(signed byte*) zr#11 )
  (signed byte*) yr#10 ← phi( main::@13/(signed byte*) yr#11 )
  (byte*) main::SCREEN#9 ← phi( main::@13/(byte*) main::SCREEN#10 )
  (signed byte*) xr#10 ← phi( main::@13/(signed byte*) xr#11 )
  to:main::@1
main::@1: scope:[main]  from main::@14 main::@17
  (signed byte*) zr#9 ← phi( main::@14/(signed byte*) zr#10 main::@17/(signed byte*) zr#3 )
  (signed byte*) yr#9 ← phi( main::@14/(signed byte*) yr#10 main::@17/(signed byte*) yr#3 )
  (byte*) main::SCREEN#8 ← phi( main::@14/(byte*) main::SCREEN#9 main::@17/(byte*) main::SCREEN#3 )
  (signed byte*) xr#9 ← phi( main::@14/(signed byte*) xr#10 main::@17/(signed byte*) xr#3 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (signed byte*) zr#7 ← phi( main::@1/(signed byte*) zr#9 )
  (signed byte*) yr#7 ← phi( main::@1/(signed byte*) yr#9 )
  (byte*) main::SCREEN#6 ← phi( main::@1/(byte*) main::SCREEN#8 )
  (signed byte*) xr#7 ← phi( main::@1/(signed byte*) xr#9 )
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@5
  (signed byte*) zr#6 ← phi( main::@2/(signed byte*) zr#7 main::@5/(signed byte*) zr#8 )
  (signed byte*) yr#6 ← phi( main::@2/(signed byte*) yr#7 main::@5/(signed byte*) yr#8 )
  (byte*) main::SCREEN#5 ← phi( main::@2/(byte*) main::SCREEN#6 main::@5/(byte*) main::SCREEN#7 )
  (signed byte*) xr#6 ← phi( main::@2/(signed byte*) xr#7 main::@5/(signed byte*) xr#8 )
  (bool~) main::$2 ← *((byte*) RASTER#0) != (byte/word/signed word/dword/signed dword) 255
  if((bool~) main::$2) goto main::@5
  to:main::@6
main::@5: scope:[main]  from main::@4
  (signed byte*) zr#8 ← phi( main::@4/(signed byte*) zr#6 )
  (signed byte*) yr#8 ← phi( main::@4/(signed byte*) yr#6 )
  (byte*) main::SCREEN#7 ← phi( main::@4/(byte*) main::SCREEN#5 )
  (signed byte*) xr#8 ← phi( main::@4/(signed byte*) xr#6 )
  to:main::@4
main::@6: scope:[main]  from main::@4
  (signed byte*) zr#5 ← phi( main::@4/(signed byte*) zr#6 )
  (signed byte*) yr#5 ← phi( main::@4/(signed byte*) yr#6 )
  (byte*) main::SCREEN#4 ← phi( main::@4/(byte*) main::SCREEN#5 )
  (signed byte*) xr#5 ← phi( main::@4/(signed byte*) xr#6 )
  *((byte*) BORDERCOL#0) ← ++ *((byte*) BORDERCOL#0)
  (signed byte) rotate::x#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (signed byte) rotate::y#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (signed byte) rotate::z#0 ← (byte/signed byte/word/signed word/dword/signed dword) 63
  call rotate 
  to:main::@15
main::@15: scope:[main]  from main::@6
  (signed byte*) zr#1 ← phi( main::@6/(signed byte*) zr#5 )
  (signed byte*) yr#1 ← phi( main::@6/(signed byte*) yr#5 )
  (byte*) main::SCREEN#1 ← phi( main::@6/(byte*) main::SCREEN#4 )
  (signed byte*) xr#1 ← phi( main::@6/(signed byte*) xr#5 )
  (byte~) main::$4 ← ((byte)) *((signed byte*) xr#1)
  *((byte*) main::SCREEN#1 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte~) main::$4
  (byte~) main::$5 ← ((byte)) *((signed byte*) yr#1)
  *((byte*) main::SCREEN#1 + (byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte~) main::$5
  (byte~) main::$6 ← ((byte)) *((signed byte*) zr#1)
  *((byte*) main::SCREEN#1 + (byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte~) main::$6
  *((byte*) BORDERCOL#0) ← ++ *((byte*) BORDERCOL#0)
  (signed byte) rotate::x#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (signed byte) rotate::y#1 ← (byte/signed byte/word/signed word/dword/signed dword) 63
  (signed byte) rotate::z#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call rotate 
  to:main::@16
main::@16: scope:[main]  from main::@15
  (signed byte*) zr#2 ← phi( main::@15/(signed byte*) zr#1 )
  (signed byte*) yr#2 ← phi( main::@15/(signed byte*) yr#1 )
  (byte*) main::SCREEN#2 ← phi( main::@15/(byte*) main::SCREEN#1 )
  (signed byte*) xr#2 ← phi( main::@15/(signed byte*) xr#1 )
  (byte~) main::$8 ← ((byte)) *((signed byte*) xr#2)
  *((byte*) main::SCREEN#2 + (byte/signed byte/word/signed word/dword/signed dword) 40) ← (byte~) main::$8
  (byte~) main::$9 ← ((byte)) *((signed byte*) yr#2)
  *((byte*) main::SCREEN#2 + (byte/signed byte/word/signed word/dword/signed dword) 41) ← (byte~) main::$9
  (byte~) main::$10 ← ((byte)) *((signed byte*) zr#2)
  *((byte*) main::SCREEN#2 + (byte/signed byte/word/signed word/dword/signed dword) 42) ← (byte~) main::$10
  *((byte*) BORDERCOL#0) ← ++ *((byte*) BORDERCOL#0)
  (signed byte) rotate::x#2 ← (byte/signed byte/word/signed word/dword/signed dword) 63
  (signed byte) rotate::y#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (signed byte) rotate::z#2 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call rotate 
  to:main::@17
main::@17: scope:[main]  from main::@16
  (signed byte*) zr#3 ← phi( main::@16/(signed byte*) zr#2 )
  (signed byte*) yr#3 ← phi( main::@16/(signed byte*) yr#2 )
  (byte*) main::SCREEN#3 ← phi( main::@16/(byte*) main::SCREEN#2 )
  (signed byte*) xr#3 ← phi( main::@16/(signed byte*) xr#2 )
  (byte~) main::$12 ← ((byte)) *((signed byte*) xr#3)
  *((byte*) main::SCREEN#3 + (byte/signed byte/word/signed word/dword/signed dword) 80) ← (byte~) main::$12
  (byte~) main::$13 ← ((byte)) *((signed byte*) yr#3)
  *((byte*) main::SCREEN#3 + (byte/signed byte/word/signed word/dword/signed dword) 81) ← (byte~) main::$13
  (byte~) main::$14 ← ((byte)) *((signed byte*) zr#3)
  *((byte*) main::SCREEN#3 + (byte/signed byte/word/signed word/dword/signed dword) 82) ← (byte~) main::$14
  *((byte*) BORDERCOL#0) ← (byte) LIGHT_BLUE#0
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@5: scope:[]  from @4
  (signed byte*) zr#14 ← phi( @4/(signed byte*) zr#0 )
  (signed byte*) yr#14 ← phi( @4/(signed byte*) yr#0 )
  (signed byte*) xr#14 ← phi( @4/(signed byte*) xr#0 )
  (signed byte*) SINQ#5 ← phi( @4/(signed byte*) SINQ#6 )
  (signed byte*) COSQ#5 ← phi( @4/(signed byte*) COSQ#6 )
  (signed byte*) SINH#5 ← phi( @4/(signed byte*) SINH#6 )
  (signed byte*) COSH#5 ← phi( @4/(signed byte*) COSH#6 )
  (signed byte[9]) rotation_matrix#0 ← { fill( 9, 0) }
  to:@7
prepare_matrix: scope:[prepare_matrix]  from main::@13
  (signed byte*) SINQ#1 ← phi( main::@13/(signed byte*) SINQ#2 )
  (signed byte*) COSQ#1 ← phi( main::@13/(signed byte*) COSQ#2 )
  (signed byte*) SINH#1 ← phi( main::@13/(signed byte*) SINH#2 )
  (signed byte*) COSH#1 ← phi( main::@13/(signed byte*) COSH#2 )
  (signed byte) prepare_matrix::sx#1 ← phi( main::@13/(signed byte) prepare_matrix::sx#0 )
  (signed byte) prepare_matrix::sz#1 ← phi( main::@13/(signed byte) prepare_matrix::sz#0 )
  (signed byte) prepare_matrix::sy#1 ← phi( main::@13/(signed byte) prepare_matrix::sy#0 )
  (signed byte~) prepare_matrix::$0 ← (signed byte) prepare_matrix::sy#1 - (signed byte) prepare_matrix::sz#1
  (signed byte) prepare_matrix::t1#0 ← (signed byte~) prepare_matrix::$0
  (signed byte~) prepare_matrix::$1 ← (signed byte) prepare_matrix::sy#1 + (signed byte) prepare_matrix::sz#1
  (signed byte) prepare_matrix::t2#0 ← (signed byte~) prepare_matrix::$1
  (signed byte~) prepare_matrix::$2 ← (signed byte) prepare_matrix::sx#1 + (signed byte) prepare_matrix::sz#1
  (signed byte) prepare_matrix::t3#0 ← (signed byte~) prepare_matrix::$2
  (signed byte~) prepare_matrix::$3 ← (signed byte) prepare_matrix::sx#1 - (signed byte) prepare_matrix::sz#1
  (signed byte) prepare_matrix::t4#0 ← (signed byte~) prepare_matrix::$3
  (signed byte~) prepare_matrix::$4 ← (signed byte) prepare_matrix::sx#1 + (signed byte) prepare_matrix::t2#0
  (signed byte) prepare_matrix::t5#0 ← (signed byte~) prepare_matrix::$4
  (signed byte~) prepare_matrix::$5 ← (signed byte) prepare_matrix::sx#1 - (signed byte) prepare_matrix::t1#0
  (signed byte) prepare_matrix::t6#0 ← (signed byte~) prepare_matrix::$5
  (signed byte~) prepare_matrix::$6 ← (signed byte) prepare_matrix::sx#1 + (signed byte) prepare_matrix::t1#0
  (signed byte) prepare_matrix::t7#0 ← (signed byte~) prepare_matrix::$6
  (signed byte~) prepare_matrix::$7 ← (signed byte) prepare_matrix::t2#0 - (signed byte) prepare_matrix::sx#1
  (signed byte) prepare_matrix::t8#0 ← (signed byte~) prepare_matrix::$7
  (signed byte~) prepare_matrix::$8 ← (signed byte) prepare_matrix::sy#1 - (signed byte) prepare_matrix::sx#1
  (signed byte) prepare_matrix::t9#0 ← (signed byte~) prepare_matrix::$8
  (signed byte~) prepare_matrix::$9 ← (signed byte) prepare_matrix::sy#1 + (signed byte) prepare_matrix::sx#1
  (signed byte) prepare_matrix::t10#0 ← (signed byte~) prepare_matrix::$9
  (signed byte~) prepare_matrix::$10 ← *((signed byte*) COSH#1 + (signed byte) prepare_matrix::t1#0) + *((signed byte*) COSH#1 + (signed byte) prepare_matrix::t2#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (signed byte~) prepare_matrix::$10
  (signed byte~) prepare_matrix::$11 ← *((signed byte*) SINH#1 + (signed byte) prepare_matrix::t1#0) - *((signed byte*) SINH#1 + (signed byte) prepare_matrix::t2#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 1) ← (signed byte~) prepare_matrix::$11
  (signed byte~) prepare_matrix::$12 ← *((signed byte*) SINH#1 + (signed byte) prepare_matrix::sy#1) + *((signed byte*) SINH#1 + (signed byte) prepare_matrix::sy#1)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 2) ← (signed byte~) prepare_matrix::$12
  (signed byte~) prepare_matrix::$13 ← *((signed byte*) SINH#1 + (signed byte) prepare_matrix::t3#0) - *((signed byte*) SINH#1 + (signed byte) prepare_matrix::t4#0)
  (signed byte~) prepare_matrix::$14 ← (signed byte~) prepare_matrix::$13 + *((signed byte*) COSQ#1 + (signed byte) prepare_matrix::t6#0)
  (signed byte~) prepare_matrix::$15 ← (signed byte~) prepare_matrix::$14 - *((signed byte*) COSQ#1 + (signed byte) prepare_matrix::t5#0)
  (signed byte~) prepare_matrix::$16 ← (signed byte~) prepare_matrix::$15 + *((signed byte*) COSQ#1 + (signed byte) prepare_matrix::t8#0)
  (signed byte~) prepare_matrix::$17 ← (signed byte~) prepare_matrix::$16 - *((signed byte*) COSQ#1 + (signed byte) prepare_matrix::t7#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 3) ← (signed byte~) prepare_matrix::$17
  (signed byte~) prepare_matrix::$18 ← *((signed byte*) COSH#1 + (signed byte) prepare_matrix::t3#0) + *((signed byte*) COSH#1 + (signed byte) prepare_matrix::t4#0)
  (signed byte~) prepare_matrix::$19 ← (signed byte~) prepare_matrix::$18 + *((signed byte*) SINQ#1 + (signed byte) prepare_matrix::t5#0)
  (signed byte~) prepare_matrix::$20 ← (signed byte~) prepare_matrix::$19 - *((signed byte*) SINQ#1 + (signed byte) prepare_matrix::t6#0)
  (signed byte~) prepare_matrix::$21 ← (signed byte~) prepare_matrix::$20 - *((signed byte*) SINQ#1 + (signed byte) prepare_matrix::t7#0)
  (signed byte~) prepare_matrix::$22 ← (signed byte~) prepare_matrix::$21 - *((signed byte*) SINQ#1 + (signed byte) prepare_matrix::t8#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 4) ← (signed byte~) prepare_matrix::$22
  (signed byte~) prepare_matrix::$23 ← *((signed byte*) SINH#1 + (signed byte) prepare_matrix::t9#0) - *((signed byte*) SINH#1 + (signed byte) prepare_matrix::t10#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 5) ← (signed byte~) prepare_matrix::$23
  (signed byte~) prepare_matrix::$24 ← *((signed byte*) COSH#1 + (signed byte) prepare_matrix::t4#0) - *((signed byte*) COSH#1 + (signed byte) prepare_matrix::t3#0)
  (signed byte~) prepare_matrix::$25 ← (signed byte~) prepare_matrix::$24 + *((signed byte*) SINQ#1 + (signed byte) prepare_matrix::t6#0)
  (signed byte~) prepare_matrix::$26 ← (signed byte~) prepare_matrix::$25 - *((signed byte*) SINQ#1 + (signed byte) prepare_matrix::t5#0)
  (signed byte~) prepare_matrix::$27 ← (signed byte~) prepare_matrix::$26 - *((signed byte*) SINQ#1 + (signed byte) prepare_matrix::t8#0)
  (signed byte~) prepare_matrix::$28 ← (signed byte~) prepare_matrix::$27 - *((signed byte*) SINQ#1 + (signed byte) prepare_matrix::t7#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 6) ← (signed byte~) prepare_matrix::$28
  (signed byte~) prepare_matrix::$29 ← *((signed byte*) SINH#1 + (signed byte) prepare_matrix::t3#0) + *((signed byte*) SINH#1 + (signed byte) prepare_matrix::t4#0)
  (signed byte~) prepare_matrix::$30 ← (signed byte~) prepare_matrix::$29 + *((signed byte*) COSQ#1 + (signed byte) prepare_matrix::t6#0)
  (signed byte~) prepare_matrix::$31 ← (signed byte~) prepare_matrix::$30 - *((signed byte*) COSQ#1 + (signed byte) prepare_matrix::t5#0)
  (signed byte~) prepare_matrix::$32 ← (signed byte~) prepare_matrix::$31 + *((signed byte*) COSQ#1 + (signed byte) prepare_matrix::t7#0)
  (signed byte~) prepare_matrix::$33 ← (signed byte~) prepare_matrix::$32 - *((signed byte*) COSQ#1 + (signed byte) prepare_matrix::t8#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 7) ← (signed byte~) prepare_matrix::$33
  (signed byte~) prepare_matrix::$34 ← *((signed byte*) COSH#1 + (signed byte) prepare_matrix::t9#0) + *((signed byte*) COSH#1 + (signed byte) prepare_matrix::t10#0)
  *((signed byte[9]) rotation_matrix#0 + (byte/signed byte/word/signed word/dword/signed dword) 8) ← (signed byte~) prepare_matrix::$34
  asm { ldarotation_matrix+0 starotate.A1+1 eor#$ff starotate.A2+1 ldarotation_matrix+1 starotate.B1+1 eor#$ff starotate.B2+1 ldarotation_matrix+2 starotate.C1+1 eor#$ff starotate.C2+1 ldarotation_matrix+3 starotate.D1+1 eor#$ff starotate.D2+1 ldarotation_matrix+4 starotate.E1+1 eor#$ff starotate.E2+1 ldarotation_matrix+5 starotate.F1+1 eor#$ff starotate.F2+1 ldarotation_matrix+6 starotate.G1+1 eor#$ff starotate.G2+1 ldarotation_matrix+7 starotate.H1+1 eor#$ff starotate.H2+1 ldarotation_matrix+8 starotate.I1+1 eor#$ff starotate.I2+1  }
  to:prepare_matrix::@return
prepare_matrix::@return: scope:[prepare_matrix]  from prepare_matrix
  return 
  to:@return
rotate: scope:[rotate]  from main::@15 main::@16 main::@6
  (signed byte*) zr#4 ← phi( main::@15/(signed byte*) zr#1 main::@16/(signed byte*) zr#2 main::@6/(signed byte*) zr#5 )
  (signed byte) rotate::z#3 ← phi( main::@15/(signed byte) rotate::z#1 main::@16/(signed byte) rotate::z#2 main::@6/(signed byte) rotate::z#0 )
  (signed byte*) yr#4 ← phi( main::@15/(signed byte*) yr#1 main::@16/(signed byte*) yr#2 main::@6/(signed byte*) yr#5 )
  (signed byte) rotate::y#3 ← phi( main::@15/(signed byte) rotate::y#1 main::@16/(signed byte) rotate::y#2 main::@6/(signed byte) rotate::y#0 )
  (signed byte*) xr#4 ← phi( main::@15/(signed byte*) xr#1 main::@16/(signed byte*) xr#2 main::@6/(signed byte*) xr#5 )
  (signed byte) rotate::x#3 ← phi( main::@15/(signed byte) rotate::x#1 main::@16/(signed byte) rotate::x#2 main::@6/(signed byte) rotate::x#0 )
  *((signed byte*) xr#4) ← (signed byte) rotate::x#3
  *((signed byte*) yr#4) ← (signed byte) rotate::y#3
  *((signed byte*) zr#4) ← (signed byte) rotate::z#3
  asm { clc ldxzr lda#$80 C1: adcmulf_sqr1,x C2: sbcmulf_sqr2,x staC3+1 lda#$80 F1: adcmulf_sqr1,x F2: sbcmulf_sqr2,x staF3+1 lda#$80 I1: adcmulf_sqr1,x I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr C3: lda#0 A1: adcmulf_sqr1,x A2: sbcmulf_sqr2,x B1: adcmulf_sqr1,y B2: sbcmulf_sqr2,y staxr F3: lda#0 D1: adcmulf_sqr1,x D2: sbcmulf_sqr2,x E1: adcmulf_sqr1,y E2: sbcmulf_sqr2,y stayr I3: lda#0 G1: adcmulf_sqr1,x G2: sbcmulf_sqr2,x H1: adcmulf_sqr1,y H2: sbcmulf_sqr2,y stazr  }
  to:rotate::@return
rotate::@return: scope:[rotate]  from rotate
  return 
  to:@return
@7: scope:[]  from @5
  (signed byte*) zr#13 ← phi( @5/(signed byte*) zr#14 )
  (signed byte*) yr#13 ← phi( @5/(signed byte*) yr#14 )
  (signed byte*) xr#13 ← phi( @5/(signed byte*) xr#14 )
  (signed byte*) SINQ#4 ← phi( @5/(signed byte*) SINQ#5 )
  (signed byte*) COSQ#4 ← phi( @5/(signed byte*) COSQ#5 )
  (signed byte*) SINH#4 ← phi( @5/(signed byte*) SINH#5 )
  (signed byte*) COSH#4 ← phi( @5/(signed byte*) COSH#5 )
  call main 
  to:@8
@8: scope:[]  from @7
  to:@end
@end: scope:[]  from @8

SYMBOL TABLE SSA
(signed byte*~) $0
(signed byte*~) $1
(label) @3
(label) @4
(label) @5
(label) @7
(label) @8
(label) @begin
(label) @end
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(signed byte*) COSH
(signed byte*) COSH#0
(signed byte*) COSH#1
(signed byte*) COSH#2
(signed byte*) COSH#3
(signed byte*) COSH#4
(signed byte*) COSH#5
(signed byte*) COSH#6
(signed byte*) COSQ
(signed byte*) COSQ#0
(signed byte*) COSQ#1
(signed byte*) COSQ#2
(signed byte*) COSQ#3
(signed byte*) COSQ#4
(signed byte*) COSQ#5
(signed byte*) COSQ#6
(byte) LIGHT_BLUE
(byte) LIGHT_BLUE#0
(byte*) RASTER
(byte*) RASTER#0
(signed byte*) SINH
(signed byte*) SINH#0
(signed byte*) SINH#1
(signed byte*) SINH#2
(signed byte*) SINH#3
(signed byte*) SINH#4
(signed byte*) SINH#5
(signed byte*) SINH#6
(signed byte*) SINQ
(signed byte*) SINQ#0
(signed byte*) SINQ#1
(signed byte*) SINQ#2
(signed byte*) SINQ#3
(signed byte*) SINQ#4
(signed byte*) SINQ#5
(signed byte*) SINQ#6
(void()) main()
(byte~) main::$10
(byte~) main::$12
(byte~) main::$13
(byte~) main::$14
(bool~) main::$2
(byte~) main::$4
(byte~) main::$5
(byte~) main::$6
(byte~) main::$8
(byte~) main::$9
(label) main::@1
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@2
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(byte*) main::SCREEN
(byte*) main::SCREEN#0
(byte*) main::SCREEN#1
(byte*) main::SCREEN#10
(byte*) main::SCREEN#2
(byte*) main::SCREEN#3
(byte*) main::SCREEN#4
(byte*) main::SCREEN#5
(byte*) main::SCREEN#6
(byte*) main::SCREEN#7
(byte*) main::SCREEN#8
(byte*) main::SCREEN#9
(void()) mulf_init()
(byte~) mulf_init::$0
(byte~) mulf_init::$1
(byte~) mulf_init::$2
(byte/signed word/word/dword/signed dword~) mulf_init::$3
(byte~) mulf_init::$4
(byte/signed word/word/dword/signed dword~) mulf_init::$5
(byte~) mulf_init::$6
(bool~) mulf_init::$7
(label) mulf_init::@1
(label) mulf_init::@return
(signed word) mulf_init::add
(signed word) mulf_init::add#0
(signed word) mulf_init::add#1
(signed word) mulf_init::add#2
(byte) mulf_init::i
(byte) mulf_init::i#0
(byte) mulf_init::i#1
(byte) mulf_init::i#2
(signed word) mulf_init::sqr1
(signed word) mulf_init::sqr1#0
(signed word) mulf_init::sqr1#1
(signed word) mulf_init::sqr1#2
(byte[512]) mulf_sqr1
(byte[512]) mulf_sqr1#0
(byte[512]) mulf_sqr2
(byte[512]) mulf_sqr2#0
(void()) prepare_matrix((signed byte) prepare_matrix::sx , (signed byte) prepare_matrix::sy , (signed byte) prepare_matrix::sz)
(signed byte~) prepare_matrix::$0
(signed byte~) prepare_matrix::$1
(signed byte~) prepare_matrix::$10
(signed byte~) prepare_matrix::$11
(signed byte~) prepare_matrix::$12
(signed byte~) prepare_matrix::$13
(signed byte~) prepare_matrix::$14
(signed byte~) prepare_matrix::$15
(signed byte~) prepare_matrix::$16
(signed byte~) prepare_matrix::$17
(signed byte~) prepare_matrix::$18
(signed byte~) prepare_matrix::$19
(signed byte~) prepare_matrix::$2
(signed byte~) prepare_matrix::$20
(signed byte~) prepare_matrix::$21
(signed byte~) prepare_matrix::$22
(signed byte~) prepare_matrix::$23
(signed byte~) prepare_matrix::$24
(signed byte~) prepare_matrix::$25
(signed byte~) prepare_matrix::$26
(signed byte~) prepare_matrix::$27
(signed byte~) prepare_matrix::$28
(signed byte~) prepare_matrix::$29
(signed byte~) prepare_matrix::$3
(signed byte~) prepare_matrix::$30
(signed byte~) prepare_matrix::$31
(signed byte~) prepare_matrix::$32
(signed byte~) prepare_matrix::$33
(signed byte~) prepare_matrix::$34
(signed byte~) prepare_matrix::$4
(signed byte~) prepare_matrix::$5
(signed byte~) prepare_matrix::$6
(signed byte~) prepare_matrix::$7
(signed byte~) prepare_matrix::$8
(signed byte~) prepare_matrix::$9
(label) prepare_matrix::@return
(signed byte) prepare_matrix::sx
(signed byte) prepare_matrix::sx#0
(signed byte) prepare_matrix::sx#1
(signed byte) prepare_matrix::sy
(signed byte) prepare_matrix::sy#0
(signed byte) prepare_matrix::sy#1
(signed byte) prepare_matrix::sz
(signed byte) prepare_matrix::sz#0
(signed byte) prepare_matrix::sz#1
(signed byte) prepare_matrix::t1
(signed byte) prepare_matrix::t1#0
(signed byte) prepare_matrix::t10
(signed byte) prepare_matrix::t10#0
(signed byte) prepare_matrix::t2
(signed byte) prepare_matrix::t2#0
(signed byte) prepare_matrix::t3
(signed byte) prepare_matrix::t3#0
(signed byte) prepare_matrix::t4
(signed byte) prepare_matrix::t4#0
(signed byte) prepare_matrix::t5
(signed byte) prepare_matrix::t5#0
(signed byte) prepare_matrix::t6
(signed byte) prepare_matrix::t6#0
(signed byte) prepare_matrix::t7
(signed byte) prepare_matrix::t7#0
(signed byte) prepare_matrix::t8
(signed byte) prepare_matrix::t8#0
(signed byte) prepare_matrix::t9
(signed byte) prepare_matrix::t9#0
(void()) rotate((signed byte) rotate::x , (signed byte) rotate::y , (signed byte) rotate::z)
(label) rotate::@return
(signed byte) rotate::x
(signed byte) rotate::x#0
(signed byte) rotate::x#1
(signed byte) rotate::x#2
(signed byte) rotate::x#3
(signed byte) rotate::y
(signed byte) rotate::y#0
(signed byte) rotate::y#1
(signed byte) rotate::y#2
(signed byte) rotate::y#3
(signed byte) rotate::z
(signed byte) rotate::z#0
(signed byte) rotate::z#1
(signed byte) rotate::z#2
(signed byte) rotate::z#3
(signed byte[9]) rotation_matrix
(signed byte[9]) rotation_matrix#0
(signed byte*) xr
(signed byte*) xr#0
(signed byte*) xr#1
(signed byte*) xr#10
(signed byte*) xr#11
(signed byte*) xr#12
(signed byte*) xr#13
(signed byte*) xr#14
(signed byte*) xr#2
(signed byte*) xr#3
(signed byte*) xr#4
(signed byte*) xr#5
(signed byte*) xr#6
(signed byte*) xr#7
(signed byte*) xr#8
(signed byte*) xr#9
(signed byte*) yr
(signed byte*) yr#0
(signed byte*) yr#1
(signed byte*) yr#10
(signed byte*) yr#11
(signed byte*) yr#12
(signed byte*) yr#13
(signed byte*) yr#14
(signed byte*) yr#2
(signed byte*) yr#3
(signed byte*) yr#4
(signed byte*) yr#5
(signed byte*) yr#6
(signed byte*) yr#7
(signed byte*) yr#8
(signed byte*) yr#9
(signed byte*) zr
(signed byte*) zr#0
(signed byte*) zr#1
(signed byte*) zr#10
(signed byte*) zr#11
(signed byte*) zr#12
(signed byte*) zr#13
(signed byte*) zr#14
(signed byte*) zr#2
(signed byte*) zr#3
(signed byte*) zr#4
(signed byte*) zr#5
(signed byte*) zr#6
(signed byte*) zr#7
(signed byte*) zr#8
(signed byte*) zr#9

Culled Empty Block (label) @8
Successful SSA optimization Pass2CullEmptyBlocks
Alias (signed byte*) SINH#0 = (signed byte*~) $0 (signed byte*) SINH#6 (signed byte*) SINH#5 (signed byte*) SINH#4 
Alias (signed byte*) SINQ#0 = (signed byte*~) $1 (signed byte*) SINQ#6 (signed byte*) SINQ#5 (signed byte*) SINQ#4 
Alias (signed byte*) COSH#0 = (signed byte*) COSH#6 (signed byte*) COSH#5 (signed byte*) COSH#4 
Alias (signed byte*) COSQ#0 = (signed byte*) COSQ#6 (signed byte*) COSQ#5 (signed byte*) COSQ#4 
Alias (signed byte*) COSH#2 = (signed byte*) COSH#3 
Alias (signed byte*) SINH#2 = (signed byte*) SINH#3 
Alias (signed byte*) COSQ#2 = (signed byte*) COSQ#3 
Alias (signed byte*) SINQ#2 = (signed byte*) SINQ#3 
Alias (signed byte*) xr#10 = (signed byte*) xr#11 (signed byte*) xr#12 
Alias (byte*) main::SCREEN#0 = (byte*) main::SCREEN#10 (byte*) main::SCREEN#9 
Alias (signed byte*) yr#10 = (signed byte*) yr#11 (signed byte*) yr#12 
Alias (signed byte*) zr#10 = (signed byte*) zr#11 (signed byte*) zr#12 
Alias (signed byte*) xr#7 = (signed byte*) xr#9 
Alias (byte*) main::SCREEN#6 = (byte*) main::SCREEN#8 
Alias (signed byte*) yr#7 = (signed byte*) yr#9 
Alias (signed byte*) zr#7 = (signed byte*) zr#9 
Alias (signed byte*) xr#1 = (signed byte*) xr#8 (signed byte*) xr#6 (signed byte*) xr#5 (signed byte*) xr#2 (signed byte*) xr#3 
Alias (byte*) main::SCREEN#1 = (byte*) main::SCREEN#7 (byte*) main::SCREEN#5 (byte*) main::SCREEN#4 (byte*) main::SCREEN#2 (byte*) main::SCREEN#3 
Alias (signed byte*) yr#1 = (signed byte*) yr#8 (signed byte*) yr#6 (signed byte*) yr#5 (signed byte*) yr#2 (signed byte*) yr#3 
Alias (signed byte*) zr#1 = (signed byte*) zr#8 (signed byte*) zr#6 (signed byte*) zr#5 (signed byte*) zr#2 (signed byte*) zr#3 
Alias (signed byte*) xr#0 = (signed byte*) xr#14 (signed byte*) xr#13 
Alias (signed byte*) yr#0 = (signed byte*) yr#14 (signed byte*) yr#13 
Alias (signed byte*) zr#0 = (signed byte*) zr#14 (signed byte*) zr#13 
Alias (signed byte) prepare_matrix::t1#0 = (signed byte~) prepare_matrix::$0 
Alias (signed byte) prepare_matrix::t2#0 = (signed byte~) prepare_matrix::$1 
Alias (signed byte) prepare_matrix::t3#0 = (signed byte~) prepare_matrix::$2 
Alias (signed byte) prepare_matrix::t4#0 = (signed byte~) prepare_matrix::$3 
Alias (signed byte) prepare_matrix::t5#0 = (signed byte~) prepare_matrix::$4 
Alias (signed byte) prepare_matrix::t6#0 = (signed byte~) prepare_matrix::$5 
Alias (signed byte) prepare_matrix::t7#0 = (signed byte~) prepare_matrix::$6 
Alias (signed byte) prepare_matrix::t8#0 = (signed byte~) prepare_matrix::$7 
Alias (signed byte) prepare_matrix::t9#0 = (signed byte~) prepare_matrix::$8 
Alias (signed byte) prepare_matrix::t10#0 = (signed byte~) prepare_matrix::$9 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (signed byte*) xr#1
Self Phi Eliminated (byte*) main::SCREEN#1
Self Phi Eliminated (signed byte*) yr#1
Self Phi Eliminated (signed byte*) zr#1
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (signed byte*) COSH#2 (signed byte*) COSH#0
Redundant Phi (signed byte*) SINH#2 (signed byte*) SINH#0
Redundant Phi (signed byte*) COSQ#2 (signed byte*) COSQ#0
Redundant Phi (signed byte*) SINQ#2 (signed byte*) SINQ#0
Redundant Phi (signed byte*) xr#10 (signed byte*) xr#0
Redundant Phi (signed byte*) yr#10 (signed byte*) yr#0
Redundant Phi (signed byte*) zr#10 (signed byte*) zr#0
Redundant Phi (signed byte*) xr#1 (signed byte*) xr#7
Redundant Phi (byte*) main::SCREEN#1 (byte*) main::SCREEN#6
Redundant Phi (signed byte*) yr#1 (signed byte*) yr#7
Redundant Phi (signed byte*) zr#1 (signed byte*) zr#7
Redundant Phi (signed byte) prepare_matrix::sy#1 (signed byte) prepare_matrix::sy#0
Redundant Phi (signed byte) prepare_matrix::sz#1 (signed byte) prepare_matrix::sz#0
Redundant Phi (signed byte) prepare_matrix::sx#1 (signed byte) prepare_matrix::sx#0
Redundant Phi (signed byte*) COSH#1 (signed byte*) COSH#2
Redundant Phi (signed byte*) SINH#1 (signed byte*) SINH#2
Redundant Phi (signed byte*) COSQ#1 (signed byte*) COSQ#2
Redundant Phi (signed byte*) SINQ#1 (signed byte*) SINQ#2
Redundant Phi (signed byte*) xr#4 (signed byte*) xr#1
Redundant Phi (signed byte*) yr#4 (signed byte*) yr#1
Redundant Phi (signed byte*) zr#4 (signed byte*) zr#1
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) mulf_init::$7 if((byte) mulf_init::i#1!=rangelast(0,128)) goto mulf_init::@1
Simple Condition (bool~) main::$2 if(*((byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@5
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) RASTER#0 = ((byte*))53266
Constant (const byte*) BORDERCOL#0 = ((byte*))53280
Constant (const byte) LIGHT_BLUE#0 = 14
Constant (const signed byte*) COSH#0 = ((signed byte*))8192
Constant (const signed byte*) COSQ#0 = ((signed byte*))8704
Constant (const byte[512]) mulf_sqr1#0 = { fill( 512, 0) }
Constant (const byte[512]) mulf_sqr2#0 = { fill( 512, 0) }
Constant (const signed word) mulf_init::sqr1#0 = 0
Constant (const signed word) mulf_init::add#0 = 1
Constant (const byte) mulf_init::i#0 = 0
Constant (const signed byte*) xr#0 = ((signed byte*))240
Constant (const signed byte*) yr#0 = ((signed byte*))241
Constant (const signed byte*) zr#0 = ((signed byte*))242
Constant (const byte*) main::SCREEN#0 = ((byte*))1024
Constant (const signed byte) prepare_matrix::sx#0 = 0
Constant (const signed byte) prepare_matrix::sy#0 = 0
Constant (const signed byte) prepare_matrix::sz#0 = 0
Constant (const signed byte) rotate::x#0 = 0
Constant (const signed byte) rotate::y#0 = 0
Constant (const signed byte) rotate::z#0 = 63
Constant (const signed byte) rotate::x#1 = 0
Constant (const signed byte) rotate::y#1 = 63
Constant (const signed byte) rotate::z#1 = 0
Constant (const signed byte) rotate::x#2 = 63
Constant (const signed byte) rotate::y#2 = 0
Constant (const signed byte) rotate::z#2 = 0
Constant (const signed byte[9]) rotation_matrix#0 = { fill( 9, 0) }
Successful SSA optimization Pass2ConstantIdentification
Constant (const signed byte*) SINH#0 = COSH#0+64
Constant (const signed byte*) SINQ#0 = COSQ#0+64
Constant (const signed byte) prepare_matrix::t1#0 = prepare_matrix::sy#0-prepare_matrix::sz#0
Constant (const signed byte) prepare_matrix::t2#0 = prepare_matrix::sy#0+prepare_matrix::sz#0
Constant (const signed byte) prepare_matrix::t3#0 = prepare_matrix::sx#0+prepare_matrix::sz#0
Constant (const signed byte) prepare_matrix::t4#0 = prepare_matrix::sx#0-prepare_matrix::sz#0
Constant (const signed byte) prepare_matrix::t9#0 = prepare_matrix::sy#0-prepare_matrix::sx#0
Constant (const signed byte) prepare_matrix::t10#0 = prepare_matrix::sy#0+prepare_matrix::sx#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const signed byte) prepare_matrix::t5#0 = prepare_matrix::sx#0+prepare_matrix::t2#0
Constant (const signed byte) prepare_matrix::t6#0 = prepare_matrix::sx#0-prepare_matrix::t1#0
Constant (const signed byte) prepare_matrix::t7#0 = prepare_matrix::sx#0+prepare_matrix::t1#0
Constant (const signed byte) prepare_matrix::t8#0 = prepare_matrix::t2#0-prepare_matrix::sx#0
Successful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in assignment *(mulf_sqr2#0+1 + mulf_init::$3)
Consolidated array index constant in *(COSH#0+prepare_matrix::t1#0)
Consolidated array index constant in *(COSH#0+prepare_matrix::t2#0)
Consolidated array index constant in *(rotation_matrix#0+0)
Consolidated array index constant in *(SINH#0+prepare_matrix::t1#0)
Consolidated array index constant in *(SINH#0+prepare_matrix::t2#0)
Consolidated array index constant in *(rotation_matrix#0+1)
Consolidated array index constant in *(SINH#0+prepare_matrix::sy#0)
Consolidated array index constant in *(SINH#0+prepare_matrix::sy#0)
Consolidated array index constant in *(rotation_matrix#0+2)
Consolidated array index constant in *(SINH#0+prepare_matrix::t3#0)
Consolidated array index constant in *(SINH#0+prepare_matrix::t4#0)
Consolidated array index constant in *(COSQ#0+prepare_matrix::t6#0)
Consolidated array index constant in *(COSQ#0+prepare_matrix::t5#0)
Consolidated array index constant in *(COSQ#0+prepare_matrix::t8#0)
Consolidated array index constant in *(COSQ#0+prepare_matrix::t7#0)
Consolidated array index constant in *(rotation_matrix#0+3)
Consolidated array index constant in *(COSH#0+prepare_matrix::t3#0)
Consolidated array index constant in *(COSH#0+prepare_matrix::t4#0)
Consolidated array index constant in *(SINQ#0+prepare_matrix::t5#0)
Consolidated array index constant in *(SINQ#0+prepare_matrix::t6#0)
Consolidated array index constant in *(SINQ#0+prepare_matrix::t7#0)
Consolidated array index constant in *(SINQ#0+prepare_matrix::t8#0)
Consolidated array index constant in *(rotation_matrix#0+4)
Consolidated array index constant in *(SINH#0+prepare_matrix::t9#0)
Consolidated array index constant in *(SINH#0+prepare_matrix::t10#0)
Consolidated array index constant in *(rotation_matrix#0+5)
Consolidated array index constant in *(COSH#0+prepare_matrix::t4#0)
Consolidated array index constant in *(COSH#0+prepare_matrix::t3#0)
Consolidated array index constant in *(SINQ#0+prepare_matrix::t6#0)
Consolidated array index constant in *(SINQ#0+prepare_matrix::t5#0)
Consolidated array index constant in *(SINQ#0+prepare_matrix::t8#0)
Consolidated array index constant in *(SINQ#0+prepare_matrix::t7#0)
Consolidated array index constant in *(rotation_matrix#0+6)
Consolidated array index constant in *(SINH#0+prepare_matrix::t3#0)
Consolidated array index constant in *(SINH#0+prepare_matrix::t4#0)
Consolidated array index constant in *(COSQ#0+prepare_matrix::t6#0)
Consolidated array index constant in *(COSQ#0+prepare_matrix::t5#0)
Consolidated array index constant in *(COSQ#0+prepare_matrix::t7#0)
Consolidated array index constant in *(COSQ#0+prepare_matrix::t8#0)
Consolidated array index constant in *(rotation_matrix#0+7)
Consolidated array index constant in *(COSH#0+prepare_matrix::t9#0)
Consolidated array index constant in *(COSH#0+prepare_matrix::t10#0)
Consolidated array index constant in *(rotation_matrix#0+8)
Successful SSA optimization Pass2ConstantAdditionElimination
if() condition always true - replacing block destination if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Inferred type updated to byte in (byte/signed word/word/dword/signed dword~) mulf_init::$3 ← (byte) mulf_init::i#2
Eliminating Noop Cast (byte~) main::$4 ← ((byte)) *((signed byte*) xr#7)
Eliminating Noop Cast (byte~) main::$5 ← ((byte)) *((signed byte*) yr#7)
Eliminating Noop Cast (byte~) main::$6 ← ((byte)) *((signed byte*) zr#7)
Eliminating Noop Cast (byte~) main::$8 ← ((byte)) *((signed byte*) xr#7)
Eliminating Noop Cast (byte~) main::$9 ← ((byte)) *((signed byte*) yr#7)
Eliminating Noop Cast (byte~) main::$10 ← ((byte)) *((signed byte*) zr#7)
Eliminating Noop Cast (byte~) main::$12 ← ((byte)) *((signed byte*) xr#7)
Eliminating Noop Cast (byte~) main::$13 ← ((byte)) *((signed byte*) yr#7)
Eliminating Noop Cast (byte~) main::$14 ← ((byte)) *((signed byte*) zr#7)
Successful SSA optimization Pass2NopCastElimination
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Resolved ranged next value mulf_init::i#1 ← ++ mulf_init::i#2 to ++
Resolved ranged comparison value if(mulf_init::i#1!=rangelast(0,128)) goto mulf_init::@1 to (byte/word/signed word/dword/signed dword) 129
Culled Empty Block (label) @4
Culled Empty Block (label) main::@14
Culled Empty Block (label) main::@2
Culled Empty Block (label) main::@5
Culled Empty Block (label) @5
Successful SSA optimization Pass2CullEmptyBlocks
Alias (byte) mulf_init::i#2 = (byte~) mulf_init::$3 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (signed byte*) xr#7
Self Phi Eliminated (byte*) main::SCREEN#6
Self Phi Eliminated (signed byte*) yr#7
Self Phi Eliminated (signed byte*) zr#7
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (signed byte*) xr#7 (const signed byte*) xr#0
Redundant Phi (byte*) main::SCREEN#6 (const byte*) main::SCREEN#0
Redundant Phi (signed byte*) yr#7 (const signed byte*) yr#0
Redundant Phi (signed byte*) zr#7 (const signed byte*) zr#0
Successful SSA optimization Pass2RedundantPhiElimination
Consolidated array index constant in *(main::SCREEN#0+0)
Consolidated array index constant in *(main::SCREEN#0+1)
Consolidated array index constant in *(main::SCREEN#0+2)
Consolidated array index constant in *(main::SCREEN#0+40)
Consolidated array index constant in *(main::SCREEN#0+41)
Consolidated array index constant in *(main::SCREEN#0+42)
Consolidated array index constant in *(main::SCREEN#0+80)
Consolidated array index constant in *(main::SCREEN#0+81)
Consolidated array index constant in *(main::SCREEN#0+82)
Successful SSA optimization Pass2ConstantAdditionElimination
Culled Empty Block (label) main::@1
Successful SSA optimization Pass2CullEmptyBlocks
Inlining constant with var siblings (const signed word) mulf_init::sqr1#0
Inlining constant with var siblings (const signed word) mulf_init::add#0
Inlining constant with var siblings (const byte) mulf_init::i#0
Inlining constant with var siblings (const signed byte) rotate::x#0
Inlining constant with var siblings (const signed byte) rotate::y#0
Inlining constant with var siblings (const signed byte) rotate::z#0
Inlining constant with var siblings (const signed byte) rotate::x#1
Inlining constant with var siblings (const signed byte) rotate::y#1
Inlining constant with var siblings (const signed byte) rotate::z#1
Inlining constant with var siblings (const signed byte) rotate::x#2
Inlining constant with var siblings (const signed byte) rotate::y#2
Inlining constant with var siblings (const signed byte) rotate::z#2
Constant inlined mulf_init::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined mulf_init::sqr1#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined rotate::z#1 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined rotate::y#2 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined rotate::z#0 = (byte/signed byte/word/signed word/dword/signed dword) 63
Constant inlined rotate::y#1 = (byte/signed byte/word/signed word/dword/signed dword) 63
Constant inlined rotate::x#2 = (byte/signed byte/word/signed word/dword/signed dword) 63
Constant inlined mulf_init::add#0 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined rotate::z#2 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined rotate::y#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined rotate::x#1 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined rotate::x#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Successful SSA optimization Pass2ConstantInlining
Simplifying constant plus zero main::SCREEN#0+0
Simplifying constant plus zero rotation_matrix#0+0
Added new block during phi lifting mulf_init::@3(between mulf_init::@1 and mulf_init::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @7
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of mulf_init
CALL GRAPH
Calls in [] to main:4 
Calls in [main] to mulf_init:7 prepare_matrix:9 rotate:12 rotate:17 rotate:22 

Created 6 initial phi equivalence classes
Coalesced [86] mulf_init::sqr1#3 ← mulf_init::sqr1#1
Coalesced [87] mulf_init::i#3 ← mulf_init::i#1
Coalesced [88] mulf_init::add#3 ← mulf_init::add#1
Coalesced down to 6 phi equivalence classes
Culled Empty Block (label) mulf_init::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @7
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of mulf_init

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@3
@3: scope:[]  from @begin
  kickasm(location (const signed byte*) COSH#0) {{ {
    .var min = -$1fff
    .var max = $1fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }
 }}
  kickasm(location (const signed byte*) COSQ#0) {{ {
    .var min = -$0fff
    .var max = $0fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }
 }}
  to:@7
@7: scope:[]  from @3
  [3] phi() [ ] ( )
  [4] call main  [ ] ( )
  to:@end
@end: scope:[]  from @7
  [5] phi() [ ] ( )
main: scope:[main]  from @7
  asm { sei  }
  [7] call mulf_init  [ ] ( main:4 [ ] )
  to:main::@13
main::@13: scope:[main]  from main
  [8] phi() [ ] ( main:4 [ ] )
  [9] call prepare_matrix  [ ] ( main:4 [ ] )
  to:main::@4
main::@4: scope:[main]  from main::@13 main::@17 main::@4
  [10] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4 [ ] ( main:4 [ ] )
  to:main::@6
main::@6: scope:[main]  from main::@4
  [11] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ ] ( main:4 [ ] )
  [12] call rotate  [ ] ( main:4 [ ] )
  to:main::@15
main::@15: scope:[main]  from main::@6
  [13] *((const byte*) main::SCREEN#0) ← (byte)*((const signed byte*) xr#0) [ ] ( main:4 [ ] )
  [14] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte)*((const signed byte*) yr#0) [ ] ( main:4 [ ] )
  [15] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte)*((const signed byte*) zr#0) [ ] ( main:4 [ ] )
  [16] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ ] ( main:4 [ ] )
  [17] call rotate  [ ] ( main:4 [ ] )
  to:main::@16
main::@16: scope:[main]  from main::@15
  [18] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 40) ← (byte)*((const signed byte*) xr#0) [ ] ( main:4 [ ] )
  [19] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 41) ← (byte)*((const signed byte*) yr#0) [ ] ( main:4 [ ] )
  [20] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 42) ← (byte)*((const signed byte*) zr#0) [ ] ( main:4 [ ] )
  [21] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ ] ( main:4 [ ] )
  [22] call rotate  [ ] ( main:4 [ ] )
  to:main::@17
main::@17: scope:[main]  from main::@16
  [23] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 80) ← (byte)*((const signed byte*) xr#0) [ ] ( main:4 [ ] )
  [24] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 81) ← (byte)*((const signed byte*) yr#0) [ ] ( main:4 [ ] )
  [25] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 82) ← (byte)*((const signed byte*) zr#0) [ ] ( main:4 [ ] )
  [26] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 [ ] ( main:4 [ ] )
  to:main::@4
rotate: scope:[rotate]  from main::@15 main::@16 main::@6
  [27] (signed byte) rotate::z#3 ← phi( main::@15/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@16/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@6/(byte/signed byte/word/signed word/dword/signed dword) 63 ) [ rotate::x#3 rotate::y#3 rotate::z#3 ] ( main:4::rotate:12 [ rotate::x#3 rotate::y#3 rotate::z#3 ] main:4::rotate:17 [ rotate::x#3 rotate::y#3 rotate::z#3 ] main:4::rotate:22 [ rotate::x#3 rotate::y#3 rotate::z#3 ] )
  [27] (signed byte) rotate::y#3 ← phi( main::@15/(byte/signed byte/word/signed word/dword/signed dword) 63 main::@16/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 ) [ rotate::x#3 rotate::y#3 rotate::z#3 ] ( main:4::rotate:12 [ rotate::x#3 rotate::y#3 rotate::z#3 ] main:4::rotate:17 [ rotate::x#3 rotate::y#3 rotate::z#3 ] main:4::rotate:22 [ rotate::x#3 rotate::y#3 rotate::z#3 ] )
  [27] (signed byte) rotate::x#3 ← phi( main::@15/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@16/(byte/signed byte/word/signed word/dword/signed dword) 63 main::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 ) [ rotate::x#3 rotate::y#3 rotate::z#3 ] ( main:4::rotate:12 [ rotate::x#3 rotate::y#3 rotate::z#3 ] main:4::rotate:17 [ rotate::x#3 rotate::y#3 rotate::z#3 ] main:4::rotate:22 [ rotate::x#3 rotate::y#3 rotate::z#3 ] )
  [28] *((const signed byte*) xr#0) ← (signed byte) rotate::x#3 [ rotate::y#3 rotate::z#3 ] ( main:4::rotate:12 [ rotate::y#3 rotate::z#3 ] main:4::rotate:17 [ rotate::y#3 rotate::z#3 ] main:4::rotate:22 [ rotate::y#3 rotate::z#3 ] )
  [29] *((const signed byte*) yr#0) ← (signed byte) rotate::y#3 [ rotate::z#3 ] ( main:4::rotate:12 [ rotate::z#3 ] main:4::rotate:17 [ rotate::z#3 ] main:4::rotate:22 [ rotate::z#3 ] )
  [30] *((const signed byte*) zr#0) ← (signed byte) rotate::z#3 [ ] ( main:4::rotate:12 [ ] main:4::rotate:17 [ ] main:4::rotate:22 [ ] )
  asm { clc ldxzr lda#$80 C1: adcmulf_sqr1,x C2: sbcmulf_sqr2,x staC3+1 lda#$80 F1: adcmulf_sqr1,x F2: sbcmulf_sqr2,x staF3+1 lda#$80 I1: adcmulf_sqr1,x I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr C3: lda#0 A1: adcmulf_sqr1,x A2: sbcmulf_sqr2,x B1: adcmulf_sqr1,y B2: sbcmulf_sqr2,y staxr F3: lda#0 D1: adcmulf_sqr1,x D2: sbcmulf_sqr2,x E1: adcmulf_sqr1,y E2: sbcmulf_sqr2,y stayr I3: lda#0 G1: adcmulf_sqr1,x G2: sbcmulf_sqr2,x H1: adcmulf_sqr1,y H2: sbcmulf_sqr2,y stazr  }
  to:rotate::@return
rotate::@return: scope:[rotate]  from rotate
  [32] return  [ ] ( main:4::rotate:12 [ ] main:4::rotate:17 [ ] main:4::rotate:22 [ ] )
  to:@return
prepare_matrix: scope:[prepare_matrix]  from main::@13
  [33] (signed byte~) prepare_matrix::$10 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t1#0) + *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t2#0) [ prepare_matrix::$10 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$10 ] )
  [34] *((const signed byte[9]) rotation_matrix#0) ← (signed byte~) prepare_matrix::$10 [ ] ( main:4::prepare_matrix:9 [ ] )
  [35] (signed byte~) prepare_matrix::$11 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t1#0) - *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t2#0) [ prepare_matrix::$11 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$11 ] )
  [36] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (signed byte~) prepare_matrix::$11 [ ] ( main:4::prepare_matrix:9 [ ] )
  [37] (signed byte~) prepare_matrix::$12 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::sy#0) + *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::sy#0) [ prepare_matrix::$12 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$12 ] )
  [38] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (signed byte~) prepare_matrix::$12 [ ] ( main:4::prepare_matrix:9 [ ] )
  [39] (signed byte~) prepare_matrix::$13 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t3#0) - *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t4#0) [ prepare_matrix::$13 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$13 ] )
  [40] (signed byte~) prepare_matrix::$14 ← (signed byte~) prepare_matrix::$13 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$14 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$14 ] )
  [41] (signed byte~) prepare_matrix::$15 ← (signed byte~) prepare_matrix::$14 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$15 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$15 ] )
  [42] (signed byte~) prepare_matrix::$16 ← (signed byte~) prepare_matrix::$15 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$16 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$16 ] )
  [43] (signed byte~) prepare_matrix::$17 ← (signed byte~) prepare_matrix::$16 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$17 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$17 ] )
  [44] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (signed byte~) prepare_matrix::$17 [ ] ( main:4::prepare_matrix:9 [ ] )
  [45] (signed byte~) prepare_matrix::$18 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t3#0) + *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t4#0) [ prepare_matrix::$18 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$18 ] )
  [46] (signed byte~) prepare_matrix::$19 ← (signed byte~) prepare_matrix::$18 + *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$19 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$19 ] )
  [47] (signed byte~) prepare_matrix::$20 ← (signed byte~) prepare_matrix::$19 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$20 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$20 ] )
  [48] (signed byte~) prepare_matrix::$21 ← (signed byte~) prepare_matrix::$20 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$21 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$21 ] )
  [49] (signed byte~) prepare_matrix::$22 ← (signed byte~) prepare_matrix::$21 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$22 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$22 ] )
  [50] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (signed byte~) prepare_matrix::$22 [ ] ( main:4::prepare_matrix:9 [ ] )
  [51] (signed byte~) prepare_matrix::$23 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t9#0) - *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t10#0) [ prepare_matrix::$23 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$23 ] )
  [52] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (signed byte~) prepare_matrix::$23 [ ] ( main:4::prepare_matrix:9 [ ] )
  [53] (signed byte~) prepare_matrix::$24 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t4#0) - *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t3#0) [ prepare_matrix::$24 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$24 ] )
  [54] (signed byte~) prepare_matrix::$25 ← (signed byte~) prepare_matrix::$24 + *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$25 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$25 ] )
  [55] (signed byte~) prepare_matrix::$26 ← (signed byte~) prepare_matrix::$25 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$26 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$26 ] )
  [56] (signed byte~) prepare_matrix::$27 ← (signed byte~) prepare_matrix::$26 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$27 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$27 ] )
  [57] (signed byte~) prepare_matrix::$28 ← (signed byte~) prepare_matrix::$27 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$28 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$28 ] )
  [58] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (signed byte~) prepare_matrix::$28 [ ] ( main:4::prepare_matrix:9 [ ] )
  [59] (signed byte~) prepare_matrix::$29 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t3#0) + *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t4#0) [ prepare_matrix::$29 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$29 ] )
  [60] (signed byte~) prepare_matrix::$30 ← (signed byte~) prepare_matrix::$29 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$30 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$30 ] )
  [61] (signed byte~) prepare_matrix::$31 ← (signed byte~) prepare_matrix::$30 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$31 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$31 ] )
  [62] (signed byte~) prepare_matrix::$32 ← (signed byte~) prepare_matrix::$31 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$32 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$32 ] )
  [63] (signed byte~) prepare_matrix::$33 ← (signed byte~) prepare_matrix::$32 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$33 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$33 ] )
  [64] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 7) ← (signed byte~) prepare_matrix::$33 [ ] ( main:4::prepare_matrix:9 [ ] )
  [65] (signed byte~) prepare_matrix::$34 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t9#0) + *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t10#0) [ prepare_matrix::$34 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$34 ] )
  [66] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (signed byte~) prepare_matrix::$34 [ ] ( main:4::prepare_matrix:9 [ ] )
  asm { ldarotation_matrix+0 starotate.A1+1 eor#$ff starotate.A2+1 ldarotation_matrix+1 starotate.B1+1 eor#$ff starotate.B2+1 ldarotation_matrix+2 starotate.C1+1 eor#$ff starotate.C2+1 ldarotation_matrix+3 starotate.D1+1 eor#$ff starotate.D2+1 ldarotation_matrix+4 starotate.E1+1 eor#$ff starotate.E2+1 ldarotation_matrix+5 starotate.F1+1 eor#$ff starotate.F2+1 ldarotation_matrix+6 starotate.G1+1 eor#$ff starotate.G2+1 ldarotation_matrix+7 starotate.H1+1 eor#$ff starotate.H2+1 ldarotation_matrix+8 starotate.I1+1 eor#$ff starotate.I2+1  }
  to:prepare_matrix::@return
prepare_matrix::@return: scope:[prepare_matrix]  from prepare_matrix
  [68] return  [ ] ( main:4::prepare_matrix:9 [ ] )
  to:@return
mulf_init: scope:[mulf_init]  from main
  [69] phi() [ ] ( main:4::mulf_init:7 [ ] )
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@1
  [70] (signed word) mulf_init::add#2 ← phi( mulf_init/(byte/signed byte/word/signed word/dword/signed dword) 1 mulf_init::@1/(signed word) mulf_init::add#1 ) [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] )
  [70] (byte) mulf_init::i#2 ← phi( mulf_init/(byte/signed byte/word/signed word/dword/signed dword) 0 mulf_init::@1/(byte) mulf_init::i#1 ) [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] )
  [70] (signed word) mulf_init::sqr1#2 ← phi( mulf_init/(byte/signed byte/word/signed word/dword/signed dword) 0 mulf_init::@1/(signed word) mulf_init::sqr1#1 ) [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] )
  [71] (byte~) mulf_init::$0 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$0 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$0 ] )
  [72] *((const byte[512]) mulf_sqr1#0 + (byte) mulf_init::i#2) ← (byte~) mulf_init::$0 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] )
  [73] (byte~) mulf_init::$1 ← - (byte) mulf_init::i#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 ] )
  [74] (byte~) mulf_init::$2 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 mulf_init::$2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 mulf_init::$2 ] )
  [75] *((const byte[512]) mulf_sqr1#0 + (byte~) mulf_init::$1) ← (byte~) mulf_init::$2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] )
  [76] (byte~) mulf_init::$4 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$4 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$4 ] )
  [77] *((const byte[512]) mulf_sqr2#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mulf_init::i#2) ← (byte~) mulf_init::$4 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] )
  [78] (byte/signed word/word/dword/signed dword~) mulf_init::$5 ← (byte/signed byte/word/signed word/dword/signed dword) 1 - (byte) mulf_init::i#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 ] )
  [79] (byte~) mulf_init::$6 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 mulf_init::$6 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 mulf_init::$6 ] )
  [80] *((const byte[512]) mulf_sqr2#0 + (byte/signed word/word/dword/signed dword~) mulf_init::$5) ← (byte~) mulf_init::$6 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] )
  [81] (signed word) mulf_init::sqr1#1 ← (signed word) mulf_init::sqr1#2 + (signed word) mulf_init::add#2 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr1#1 ] ( main:4::mulf_init:7 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr1#1 ] )
  [82] (signed word) mulf_init::add#1 ← (signed word) mulf_init::add#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ mulf_init::i#2 mulf_init::sqr1#1 mulf_init::add#1 ] ( main:4::mulf_init:7 [ mulf_init::i#2 mulf_init::sqr1#1 mulf_init::add#1 ] )
  [83] (byte) mulf_init::i#1 ← ++ (byte) mulf_init::i#2 [ mulf_init::sqr1#1 mulf_init::i#1 mulf_init::add#1 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#1 mulf_init::i#1 mulf_init::add#1 ] )
  [84] if((byte) mulf_init::i#1!=(byte/word/signed word/dword/signed dword) 129) goto mulf_init::@1 [ mulf_init::sqr1#1 mulf_init::i#1 mulf_init::add#1 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#1 mulf_init::i#1 mulf_init::add#1 ] )
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@1
  [85] return  [ ] ( main:4::mulf_init:7 [ ] )
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) BORDERCOL
(signed byte*) COSH
(signed byte*) COSQ
(byte) LIGHT_BLUE
(byte*) RASTER
(signed byte*) SINH
(signed byte*) SINQ
(void()) main()
(byte*) main::SCREEN
(void()) mulf_init()
(byte~) mulf_init::$0 22.0
(byte~) mulf_init::$1 11.0
(byte~) mulf_init::$2 22.0
(byte~) mulf_init::$4 22.0
(byte/signed word/word/dword/signed dword~) mulf_init::$5 11.0
(byte~) mulf_init::$6 22.0
(signed word) mulf_init::add
(signed word) mulf_init::add#1 7.333333333333333
(signed word) mulf_init::add#2 2.75
(byte) mulf_init::i
(byte) mulf_init::i#1 16.5
(byte) mulf_init::i#2 5.076923076923077
(signed word) mulf_init::sqr1
(signed word) mulf_init::sqr1#1 5.5
(signed word) mulf_init::sqr1#2 6.0
(byte[512]) mulf_sqr1
(byte[512]) mulf_sqr2
(void()) prepare_matrix((signed byte) prepare_matrix::sx , (signed byte) prepare_matrix::sy , (signed byte) prepare_matrix::sz)
(signed byte~) prepare_matrix::$10 4.0
(signed byte~) prepare_matrix::$11 4.0
(signed byte~) prepare_matrix::$12 4.0
(signed byte~) prepare_matrix::$13 4.0
(signed byte~) prepare_matrix::$14 4.0
(signed byte~) prepare_matrix::$15 4.0
(signed byte~) prepare_matrix::$16 4.0
(signed byte~) prepare_matrix::$17 4.0
(signed byte~) prepare_matrix::$18 4.0
(signed byte~) prepare_matrix::$19 4.0
(signed byte~) prepare_matrix::$20 4.0
(signed byte~) prepare_matrix::$21 4.0
(signed byte~) prepare_matrix::$22 4.0
(signed byte~) prepare_matrix::$23 4.0
(signed byte~) prepare_matrix::$24 4.0
(signed byte~) prepare_matrix::$25 4.0
(signed byte~) prepare_matrix::$26 4.0
(signed byte~) prepare_matrix::$27 4.0
(signed byte~) prepare_matrix::$28 4.0
(signed byte~) prepare_matrix::$29 4.0
(signed byte~) prepare_matrix::$30 4.0
(signed byte~) prepare_matrix::$31 4.0
(signed byte~) prepare_matrix::$32 4.0
(signed byte~) prepare_matrix::$33 4.0
(signed byte~) prepare_matrix::$34 4.0
(signed byte) prepare_matrix::sx
(signed byte) prepare_matrix::sy
(signed byte) prepare_matrix::sz
(signed byte) prepare_matrix::t1
(signed byte) prepare_matrix::t10
(signed byte) prepare_matrix::t2
(signed byte) prepare_matrix::t3
(signed byte) prepare_matrix::t4
(signed byte) prepare_matrix::t5
(signed byte) prepare_matrix::t6
(signed byte) prepare_matrix::t7
(signed byte) prepare_matrix::t8
(signed byte) prepare_matrix::t9
(void()) rotate((signed byte) rotate::x , (signed byte) rotate::y , (signed byte) rotate::z)
(signed byte) rotate::x
(signed byte) rotate::x#3 2.0
(signed byte) rotate::y
(signed byte) rotate::y#3 1.0
(signed byte) rotate::z
(signed byte) rotate::z#3 0.6666666666666666
(signed byte[9]) rotation_matrix
(signed byte*) xr
(signed byte*) yr
(signed byte*) zr

Initial phi equivalence classes
[ rotate::x#3 ]
[ rotate::y#3 ]
[ rotate::z#3 ]
[ mulf_init::sqr1#2 mulf_init::sqr1#1 ]
[ mulf_init::i#2 mulf_init::i#1 ]
[ mulf_init::add#2 mulf_init::add#1 ]
Added variable prepare_matrix::$10 to zero page equivalence class [ prepare_matrix::$10 ]
Added variable prepare_matrix::$11 to zero page equivalence class [ prepare_matrix::$11 ]
Added variable prepare_matrix::$12 to zero page equivalence class [ prepare_matrix::$12 ]
Added variable prepare_matrix::$13 to zero page equivalence class [ prepare_matrix::$13 ]
Added variable prepare_matrix::$14 to zero page equivalence class [ prepare_matrix::$14 ]
Added variable prepare_matrix::$15 to zero page equivalence class [ prepare_matrix::$15 ]
Added variable prepare_matrix::$16 to zero page equivalence class [ prepare_matrix::$16 ]
Added variable prepare_matrix::$17 to zero page equivalence class [ prepare_matrix::$17 ]
Added variable prepare_matrix::$18 to zero page equivalence class [ prepare_matrix::$18 ]
Added variable prepare_matrix::$19 to zero page equivalence class [ prepare_matrix::$19 ]
Added variable prepare_matrix::$20 to zero page equivalence class [ prepare_matrix::$20 ]
Added variable prepare_matrix::$21 to zero page equivalence class [ prepare_matrix::$21 ]
Added variable prepare_matrix::$22 to zero page equivalence class [ prepare_matrix::$22 ]
Added variable prepare_matrix::$23 to zero page equivalence class [ prepare_matrix::$23 ]
Added variable prepare_matrix::$24 to zero page equivalence class [ prepare_matrix::$24 ]
Added variable prepare_matrix::$25 to zero page equivalence class [ prepare_matrix::$25 ]
Added variable prepare_matrix::$26 to zero page equivalence class [ prepare_matrix::$26 ]
Added variable prepare_matrix::$27 to zero page equivalence class [ prepare_matrix::$27 ]
Added variable prepare_matrix::$28 to zero page equivalence class [ prepare_matrix::$28 ]
Added variable prepare_matrix::$29 to zero page equivalence class [ prepare_matrix::$29 ]
Added variable prepare_matrix::$30 to zero page equivalence class [ prepare_matrix::$30 ]
Added variable prepare_matrix::$31 to zero page equivalence class [ prepare_matrix::$31 ]
Added variable prepare_matrix::$32 to zero page equivalence class [ prepare_matrix::$32 ]
Added variable prepare_matrix::$33 to zero page equivalence class [ prepare_matrix::$33 ]
Added variable prepare_matrix::$34 to zero page equivalence class [ prepare_matrix::$34 ]
Added variable mulf_init::$0 to zero page equivalence class [ mulf_init::$0 ]
Added variable mulf_init::$1 to zero page equivalence class [ mulf_init::$1 ]
Added variable mulf_init::$2 to zero page equivalence class [ mulf_init::$2 ]
Added variable mulf_init::$4 to zero page equivalence class [ mulf_init::$4 ]
Added variable mulf_init::$5 to zero page equivalence class [ mulf_init::$5 ]
Added variable mulf_init::$6 to zero page equivalence class [ mulf_init::$6 ]
Complete equivalence classes
[ rotate::x#3 ]
[ rotate::y#3 ]
[ rotate::z#3 ]
[ mulf_init::sqr1#2 mulf_init::sqr1#1 ]
[ mulf_init::i#2 mulf_init::i#1 ]
[ mulf_init::add#2 mulf_init::add#1 ]
[ prepare_matrix::$10 ]
[ prepare_matrix::$11 ]
[ prepare_matrix::$12 ]
[ prepare_matrix::$13 ]
[ prepare_matrix::$14 ]
[ prepare_matrix::$15 ]
[ prepare_matrix::$16 ]
[ prepare_matrix::$17 ]
[ prepare_matrix::$18 ]
[ prepare_matrix::$19 ]
[ prepare_matrix::$20 ]
[ prepare_matrix::$21 ]
[ prepare_matrix::$22 ]
[ prepare_matrix::$23 ]
[ prepare_matrix::$24 ]
[ prepare_matrix::$25 ]
[ prepare_matrix::$26 ]
[ prepare_matrix::$27 ]
[ prepare_matrix::$28 ]
[ prepare_matrix::$29 ]
[ prepare_matrix::$30 ]
[ prepare_matrix::$31 ]
[ prepare_matrix::$32 ]
[ prepare_matrix::$33 ]
[ prepare_matrix::$34 ]
[ mulf_init::$0 ]
[ mulf_init::$1 ]
[ mulf_init::$2 ]
[ mulf_init::$4 ]
[ mulf_init::$5 ]
[ mulf_init::$6 ]
Allocated zp ZP_BYTE:2 [ rotate::x#3 ]
Allocated zp ZP_BYTE:3 [ rotate::y#3 ]
Allocated zp ZP_BYTE:4 [ rotate::z#3 ]
Allocated zp ZP_WORD:5 [ mulf_init::sqr1#2 mulf_init::sqr1#1 ]
Allocated zp ZP_BYTE:7 [ mulf_init::i#2 mulf_init::i#1 ]
Allocated zp ZP_WORD:8 [ mulf_init::add#2 mulf_init::add#1 ]
Allocated zp ZP_BYTE:10 [ prepare_matrix::$10 ]
Allocated zp ZP_BYTE:11 [ prepare_matrix::$11 ]
Allocated zp ZP_BYTE:12 [ prepare_matrix::$12 ]
Allocated zp ZP_BYTE:13 [ prepare_matrix::$13 ]
Allocated zp ZP_BYTE:14 [ prepare_matrix::$14 ]
Allocated zp ZP_BYTE:15 [ prepare_matrix::$15 ]
Allocated zp ZP_BYTE:16 [ prepare_matrix::$16 ]
Allocated zp ZP_BYTE:17 [ prepare_matrix::$17 ]
Allocated zp ZP_BYTE:18 [ prepare_matrix::$18 ]
Allocated zp ZP_BYTE:19 [ prepare_matrix::$19 ]
Allocated zp ZP_BYTE:20 [ prepare_matrix::$20 ]
Allocated zp ZP_BYTE:21 [ prepare_matrix::$21 ]
Allocated zp ZP_BYTE:22 [ prepare_matrix::$22 ]
Allocated zp ZP_BYTE:23 [ prepare_matrix::$23 ]
Allocated zp ZP_BYTE:24 [ prepare_matrix::$24 ]
Allocated zp ZP_BYTE:25 [ prepare_matrix::$25 ]
Allocated zp ZP_BYTE:26 [ prepare_matrix::$26 ]
Allocated zp ZP_BYTE:27 [ prepare_matrix::$27 ]
Allocated zp ZP_BYTE:28 [ prepare_matrix::$28 ]
Allocated zp ZP_BYTE:29 [ prepare_matrix::$29 ]
Allocated zp ZP_BYTE:30 [ prepare_matrix::$30 ]
Allocated zp ZP_BYTE:31 [ prepare_matrix::$31 ]
Allocated zp ZP_BYTE:32 [ prepare_matrix::$32 ]
Allocated zp ZP_BYTE:33 [ prepare_matrix::$33 ]
Allocated zp ZP_BYTE:34 [ prepare_matrix::$34 ]
Allocated zp ZP_BYTE:35 [ mulf_init::$0 ]
Allocated zp ZP_BYTE:36 [ mulf_init::$1 ]
Allocated zp ZP_BYTE:37 [ mulf_init::$2 ]
Allocated zp ZP_BYTE:38 [ mulf_init::$4 ]
Allocated zp ZP_BYTE:39 [ mulf_init::$5 ]
Allocated zp ZP_BYTE:40 [ mulf_init::$6 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .const LIGHT_BLUE = $e
  .label COSH = $2000
  .label COSQ = $2200
  .label xr = $f0
  .label yr = $f1
  .label zr = $f2
  .label SINH = COSH+$40
  .label SINQ = COSQ+$40
//SEG2 @begin
bbegin:
  jmp b3
//SEG3 @3
b3:
//SEG4 kickasm(location (const signed byte*) COSH#0) {{ {     .var min = -$1fff     .var max = $1fff     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))     }     }  }}
//SEG5 kickasm(location (const signed byte*) COSQ#0) {{ {     .var min = -$0fff     .var max = $0fff     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))     }     }  }}
//SEG6 [3] phi from @3 to @7 [phi:@3->@7]
b7_from_b3:
  jmp b7
//SEG7 @7
b7:
//SEG8 [4] call main  [ ] ( )
  jsr main
//SEG9 [5] phi from @7 to @end [phi:@7->@end]
bend_from_b7:
  jmp bend
//SEG10 @end
bend:
//SEG11 main
main: {
    .label SCREEN = $400
  //SEG12 asm { sei  }
    sei
  //SEG13 [7] call mulf_init  [ ] ( main:4 [ ] )
  //SEG14 [69] phi from main to mulf_init [phi:main->mulf_init]
  mulf_init_from_main:
    jsr mulf_init
  //SEG15 [8] phi from main to main::@13 [phi:main->main::@13]
  b13_from_main:
    jmp b13
  //SEG16 main::@13
  b13:
  //SEG17 [9] call prepare_matrix  [ ] ( main:4 [ ] )
    jsr prepare_matrix
    jmp b4
  //SEG18 main::@4
  b4:
  //SEG19 [10] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4 [ ] ( main:4 [ ] ) -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
    jmp b6
  //SEG20 main::@6
  b6:
  //SEG21 [11] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG22 [12] call rotate  [ ] ( main:4 [ ] )
  //SEG23 [27] phi from main::@6 to rotate [phi:main::@6->rotate]
  rotate_from_b6:
  //SEG24 [27] phi (signed byte) rotate::z#3 = (byte/signed byte/word/signed word/dword/signed dword) 63 [phi:main::@6->rotate#0] -- vbsz1=vbuc1 
    lda #$3f
    sta rotate.z
  //SEG25 [27] phi (signed byte) rotate::y#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@6->rotate#1] -- vbsz1=vbuc1 
    lda #0
    sta rotate.y
  //SEG26 [27] phi (signed byte) rotate::x#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@6->rotate#2] -- vbsz1=vbuc1 
    lda #0
    sta rotate.x
    jsr rotate
    jmp b15
  //SEG27 main::@15
  b15:
  //SEG28 [13] *((const byte*) main::SCREEN#0) ← (byte)*((const signed byte*) xr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda xr
    sta SCREEN
  //SEG29 [14] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte)*((const signed byte*) yr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda yr
    sta SCREEN+1
  //SEG30 [15] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte)*((const signed byte*) zr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda zr
    sta SCREEN+2
  //SEG31 [16] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG32 [17] call rotate  [ ] ( main:4 [ ] )
  //SEG33 [27] phi from main::@15 to rotate [phi:main::@15->rotate]
  rotate_from_b15:
  //SEG34 [27] phi (signed byte) rotate::z#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@15->rotate#0] -- vbsz1=vbuc1 
    lda #0
    sta rotate.z
  //SEG35 [27] phi (signed byte) rotate::y#3 = (byte/signed byte/word/signed word/dword/signed dword) 63 [phi:main::@15->rotate#1] -- vbsz1=vbuc1 
    lda #$3f
    sta rotate.y
  //SEG36 [27] phi (signed byte) rotate::x#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@15->rotate#2] -- vbsz1=vbuc1 
    lda #0
    sta rotate.x
    jsr rotate
    jmp b16
  //SEG37 main::@16
  b16:
  //SEG38 [18] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 40) ← (byte)*((const signed byte*) xr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda xr
    sta SCREEN+$28
  //SEG39 [19] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 41) ← (byte)*((const signed byte*) yr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda yr
    sta SCREEN+$29
  //SEG40 [20] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 42) ← (byte)*((const signed byte*) zr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda zr
    sta SCREEN+$2a
  //SEG41 [21] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG42 [22] call rotate  [ ] ( main:4 [ ] )
  //SEG43 [27] phi from main::@16 to rotate [phi:main::@16->rotate]
  rotate_from_b16:
  //SEG44 [27] phi (signed byte) rotate::z#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@16->rotate#0] -- vbsz1=vbuc1 
    lda #0
    sta rotate.z
  //SEG45 [27] phi (signed byte) rotate::y#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@16->rotate#1] -- vbsz1=vbuc1 
    lda #0
    sta rotate.y
  //SEG46 [27] phi (signed byte) rotate::x#3 = (byte/signed byte/word/signed word/dword/signed dword) 63 [phi:main::@16->rotate#2] -- vbsz1=vbuc1 
    lda #$3f
    sta rotate.x
    jsr rotate
    jmp b17
  //SEG47 main::@17
  b17:
  //SEG48 [23] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 80) ← (byte)*((const signed byte*) xr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda xr
    sta SCREEN+$50
  //SEG49 [24] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 81) ← (byte)*((const signed byte*) yr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda yr
    sta SCREEN+$51
  //SEG50 [25] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 82) ← (byte)*((const signed byte*) zr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda zr
    sta SCREEN+$52
  //SEG51 [26] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 [ ] ( main:4 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta BORDERCOL
    jmp b4
}
//SEG52 rotate
rotate: {
    .label x = 2
    .label y = 3
    .label z = 4
  //SEG53 [28] *((const signed byte*) xr#0) ← (signed byte) rotate::x#3 [ rotate::y#3 rotate::z#3 ] ( main:4::rotate:12 [ rotate::y#3 rotate::z#3 ] main:4::rotate:17 [ rotate::y#3 rotate::z#3 ] main:4::rotate:22 [ rotate::y#3 rotate::z#3 ] ) -- _deref_pbsc1=vbsz1 
    lda x
    sta xr
  //SEG54 [29] *((const signed byte*) yr#0) ← (signed byte) rotate::y#3 [ rotate::z#3 ] ( main:4::rotate:12 [ rotate::z#3 ] main:4::rotate:17 [ rotate::z#3 ] main:4::rotate:22 [ rotate::z#3 ] ) -- _deref_pbsc1=vbsz1 
    lda y
    sta yr
  //SEG55 [30] *((const signed byte*) zr#0) ← (signed byte) rotate::z#3 [ ] ( main:4::rotate:12 [ ] main:4::rotate:17 [ ] main:4::rotate:22 [ ] ) -- _deref_pbsc1=vbsz1 
    lda z
    sta zr
  //SEG56 asm { clc ldxzr lda#$80 C1: adcmulf_sqr1,x C2: sbcmulf_sqr2,x staC3+1 lda#$80 F1: adcmulf_sqr1,x F2: sbcmulf_sqr2,x staF3+1 lda#$80 I1: adcmulf_sqr1,x I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr C3: lda#0 A1: adcmulf_sqr1,x A2: sbcmulf_sqr2,x B1: adcmulf_sqr1,y B2: sbcmulf_sqr2,y staxr F3: lda#0 D1: adcmulf_sqr1,x D2: sbcmulf_sqr2,x E1: adcmulf_sqr1,y E2: sbcmulf_sqr2,y stayr I3: lda#0 G1: adcmulf_sqr1,x G2: sbcmulf_sqr2,x H1: adcmulf_sqr1,y H2: sbcmulf_sqr2,y stazr  }
    clc
    ldx zr
    lda #$80
  C1:
    adc mulf_sqr1,x
  C2:
    sbc mulf_sqr2,x
    sta C3+1
    lda #$80
  F1:
    adc mulf_sqr1,x
  F2:
    sbc mulf_sqr2,x
    sta F3+1
    lda #$80
  I1:
    adc mulf_sqr1,x
  I2:
    sbc mulf_sqr2,x
    sta I3+1
    ldx xr
    ldy yr
  C3:
    lda #0
  A1:
    adc mulf_sqr1,x
  A2:
    sbc mulf_sqr2,x
  B1:
    adc mulf_sqr1,y
  B2:
    sbc mulf_sqr2,y
    sta xr
  F3:
    lda #0
  D1:
    adc mulf_sqr1,x
  D2:
    sbc mulf_sqr2,x
  E1:
    adc mulf_sqr1,y
  E2:
    sbc mulf_sqr2,y
    sta yr
  I3:
    lda #0
  G1:
    adc mulf_sqr1,x
  G2:
    sbc mulf_sqr2,x
  H1:
    adc mulf_sqr1,y
  H2:
    sbc mulf_sqr2,y
    sta zr
    jmp breturn
  //SEG57 rotate::@return
  breturn:
  //SEG58 [32] return  [ ] ( main:4::rotate:12 [ ] main:4::rotate:17 [ ] main:4::rotate:22 [ ] )
    rts
}
//SEG59 prepare_matrix
prepare_matrix: {
    .const sx = 0
    .const sy = 0
    .const sz = 0
    .const t1 = sy-sz
    .const t2 = sy+sz
    .const t3 = sx+sz
    .const t4 = sx-sz
    .const t9 = sy-sx
    .const t10 = sy+sx
    .const t5 = sx+t2
    .const t6 = sx-t1
    .const t7 = sx+t1
    .const t8 = t2-sx
    .label _10 = $a
    .label _11 = $b
    .label _12 = $c
    .label _13 = $d
    .label _14 = $e
    .label _15 = $f
    .label _16 = $10
    .label _17 = $11
    .label _18 = $12
    .label _19 = $13
    .label _20 = $14
    .label _21 = $15
    .label _22 = $16
    .label _23 = $17
    .label _24 = $18
    .label _25 = $19
    .label _26 = $1a
    .label _27 = $1b
    .label _28 = $1c
    .label _29 = $1d
    .label _30 = $1e
    .label _31 = $1f
    .label _32 = $20
    .label _33 = $21
    .label _34 = $22
  //SEG60 [33] (signed byte~) prepare_matrix::$10 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t1#0) + *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t2#0) [ prepare_matrix::$10 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$10 ] ) -- vbsz1=_deref_pbsc1_plus__deref_pbsc2 
    lda COSH+t1
    ldy COSH+t2
    sty $ff
    clc
    adc $ff
    sta _10
  //SEG61 [34] *((const signed byte[9]) rotation_matrix#0) ← (signed byte~) prepare_matrix::$10 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsz1 
    lda _10
    sta rotation_matrix
  //SEG62 [35] (signed byte~) prepare_matrix::$11 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t1#0) - *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t2#0) [ prepare_matrix::$11 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$11 ] ) -- vbsz1=_deref_pbsc1_minus__deref_pbsc2 
    lda SINH+t1
    ldy SINH+t2
    sty $ff
    sec
    sbc $ff
    sta _11
  //SEG63 [36] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (signed byte~) prepare_matrix::$11 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsz1 
    lda _11
    sta rotation_matrix+1
  //SEG64 [37] (signed byte~) prepare_matrix::$12 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::sy#0) + *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::sy#0) [ prepare_matrix::$12 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$12 ] ) -- vbsz1=_deref_pbsc1_plus__deref_pbsc2 
    lda SINH+sy
    ldy SINH+sy
    sty $ff
    clc
    adc $ff
    sta _12
  //SEG65 [38] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (signed byte~) prepare_matrix::$12 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsz1 
    lda _12
    sta rotation_matrix+2
  //SEG66 [39] (signed byte~) prepare_matrix::$13 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t3#0) - *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t4#0) [ prepare_matrix::$13 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$13 ] ) -- vbsz1=_deref_pbsc1_minus__deref_pbsc2 
    lda SINH+t3
    ldy SINH+t4
    sty $ff
    sec
    sbc $ff
    sta _13
  //SEG67 [40] (signed byte~) prepare_matrix::$14 ← (signed byte~) prepare_matrix::$13 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$14 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$14 ] ) -- vbsz1=vbsz2_plus__deref_pbsc1 
    lda COSQ+t6
    clc
    adc _13
    sta _14
  //SEG68 [41] (signed byte~) prepare_matrix::$15 ← (signed byte~) prepare_matrix::$14 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$15 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$15 ] ) -- vbsz1=vbsz2_minus__deref_pbsc1 
    lda COSQ+t5
    eor #$ff
    sec
    adc _14
    sta _15
  //SEG69 [42] (signed byte~) prepare_matrix::$16 ← (signed byte~) prepare_matrix::$15 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$16 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$16 ] ) -- vbsz1=vbsz2_plus__deref_pbsc1 
    lda COSQ+t8
    clc
    adc _15
    sta _16
  //SEG70 [43] (signed byte~) prepare_matrix::$17 ← (signed byte~) prepare_matrix::$16 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$17 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$17 ] ) -- vbsz1=vbsz2_minus__deref_pbsc1 
    lda COSQ+t7
    eor #$ff
    sec
    adc _16
    sta _17
  //SEG71 [44] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (signed byte~) prepare_matrix::$17 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsz1 
    lda _17
    sta rotation_matrix+3
  //SEG72 [45] (signed byte~) prepare_matrix::$18 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t3#0) + *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t4#0) [ prepare_matrix::$18 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$18 ] ) -- vbsz1=_deref_pbsc1_plus__deref_pbsc2 
    lda COSH+t3
    ldy COSH+t4
    sty $ff
    clc
    adc $ff
    sta _18
  //SEG73 [46] (signed byte~) prepare_matrix::$19 ← (signed byte~) prepare_matrix::$18 + *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$19 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$19 ] ) -- vbsz1=vbsz2_plus__deref_pbsc1 
    lda SINQ+t5
    clc
    adc _18
    sta _19
  //SEG74 [47] (signed byte~) prepare_matrix::$20 ← (signed byte~) prepare_matrix::$19 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$20 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$20 ] ) -- vbsz1=vbsz2_minus__deref_pbsc1 
    lda SINQ+t6
    eor #$ff
    sec
    adc _19
    sta _20
  //SEG75 [48] (signed byte~) prepare_matrix::$21 ← (signed byte~) prepare_matrix::$20 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$21 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$21 ] ) -- vbsz1=vbsz2_minus__deref_pbsc1 
    lda SINQ+t7
    eor #$ff
    sec
    adc _20
    sta _21
  //SEG76 [49] (signed byte~) prepare_matrix::$22 ← (signed byte~) prepare_matrix::$21 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$22 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$22 ] ) -- vbsz1=vbsz2_minus__deref_pbsc1 
    lda SINQ+t8
    eor #$ff
    sec
    adc _21
    sta _22
  //SEG77 [50] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (signed byte~) prepare_matrix::$22 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsz1 
    lda _22
    sta rotation_matrix+4
  //SEG78 [51] (signed byte~) prepare_matrix::$23 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t9#0) - *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t10#0) [ prepare_matrix::$23 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$23 ] ) -- vbsz1=_deref_pbsc1_minus__deref_pbsc2 
    lda SINH+t9
    ldy SINH+t10
    sty $ff
    sec
    sbc $ff
    sta _23
  //SEG79 [52] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (signed byte~) prepare_matrix::$23 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsz1 
    lda _23
    sta rotation_matrix+5
  //SEG80 [53] (signed byte~) prepare_matrix::$24 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t4#0) - *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t3#0) [ prepare_matrix::$24 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$24 ] ) -- vbsz1=_deref_pbsc1_minus__deref_pbsc2 
    lda COSH+t4
    ldy COSH+t3
    sty $ff
    sec
    sbc $ff
    sta _24
  //SEG81 [54] (signed byte~) prepare_matrix::$25 ← (signed byte~) prepare_matrix::$24 + *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$25 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$25 ] ) -- vbsz1=vbsz2_plus__deref_pbsc1 
    lda SINQ+t6
    clc
    adc _24
    sta _25
  //SEG82 [55] (signed byte~) prepare_matrix::$26 ← (signed byte~) prepare_matrix::$25 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$26 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$26 ] ) -- vbsz1=vbsz2_minus__deref_pbsc1 
    lda SINQ+t5
    eor #$ff
    sec
    adc _25
    sta _26
  //SEG83 [56] (signed byte~) prepare_matrix::$27 ← (signed byte~) prepare_matrix::$26 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$27 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$27 ] ) -- vbsz1=vbsz2_minus__deref_pbsc1 
    lda SINQ+t8
    eor #$ff
    sec
    adc _26
    sta _27
  //SEG84 [57] (signed byte~) prepare_matrix::$28 ← (signed byte~) prepare_matrix::$27 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$28 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$28 ] ) -- vbsz1=vbsz2_minus__deref_pbsc1 
    lda SINQ+t7
    eor #$ff
    sec
    adc _27
    sta _28
  //SEG85 [58] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (signed byte~) prepare_matrix::$28 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsz1 
    lda _28
    sta rotation_matrix+6
  //SEG86 [59] (signed byte~) prepare_matrix::$29 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t3#0) + *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t4#0) [ prepare_matrix::$29 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$29 ] ) -- vbsz1=_deref_pbsc1_plus__deref_pbsc2 
    lda SINH+t3
    ldy SINH+t4
    sty $ff
    clc
    adc $ff
    sta _29
  //SEG87 [60] (signed byte~) prepare_matrix::$30 ← (signed byte~) prepare_matrix::$29 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$30 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$30 ] ) -- vbsz1=vbsz2_plus__deref_pbsc1 
    lda COSQ+t6
    clc
    adc _29
    sta _30
  //SEG88 [61] (signed byte~) prepare_matrix::$31 ← (signed byte~) prepare_matrix::$30 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$31 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$31 ] ) -- vbsz1=vbsz2_minus__deref_pbsc1 
    lda COSQ+t5
    eor #$ff
    sec
    adc _30
    sta _31
  //SEG89 [62] (signed byte~) prepare_matrix::$32 ← (signed byte~) prepare_matrix::$31 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$32 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$32 ] ) -- vbsz1=vbsz2_plus__deref_pbsc1 
    lda COSQ+t7
    clc
    adc _31
    sta _32
  //SEG90 [63] (signed byte~) prepare_matrix::$33 ← (signed byte~) prepare_matrix::$32 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$33 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$33 ] ) -- vbsz1=vbsz2_minus__deref_pbsc1 
    lda COSQ+t8
    eor #$ff
    sec
    adc _32
    sta _33
  //SEG91 [64] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 7) ← (signed byte~) prepare_matrix::$33 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsz1 
    lda _33
    sta rotation_matrix+7
  //SEG92 [65] (signed byte~) prepare_matrix::$34 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t9#0) + *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t10#0) [ prepare_matrix::$34 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$34 ] ) -- vbsz1=_deref_pbsc1_plus__deref_pbsc2 
    lda COSH+t9
    ldy COSH+t10
    sty $ff
    clc
    adc $ff
    sta _34
  //SEG93 [66] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (signed byte~) prepare_matrix::$34 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsz1 
    lda _34
    sta rotation_matrix+8
  //SEG94 asm { ldarotation_matrix+0 starotate.A1+1 eor#$ff starotate.A2+1 ldarotation_matrix+1 starotate.B1+1 eor#$ff starotate.B2+1 ldarotation_matrix+2 starotate.C1+1 eor#$ff starotate.C2+1 ldarotation_matrix+3 starotate.D1+1 eor#$ff starotate.D2+1 ldarotation_matrix+4 starotate.E1+1 eor#$ff starotate.E2+1 ldarotation_matrix+5 starotate.F1+1 eor#$ff starotate.F2+1 ldarotation_matrix+6 starotate.G1+1 eor#$ff starotate.G2+1 ldarotation_matrix+7 starotate.H1+1 eor#$ff starotate.H2+1 ldarotation_matrix+8 starotate.I1+1 eor#$ff starotate.I2+1  }
    lda rotation_matrix+0
    sta rotate.A1+1
    eor #$ff
    sta rotate.A2+1
    lda rotation_matrix+1
    sta rotate.B1+1
    eor #$ff
    sta rotate.B2+1
    lda rotation_matrix+2
    sta rotate.C1+1
    eor #$ff
    sta rotate.C2+1
    lda rotation_matrix+3
    sta rotate.D1+1
    eor #$ff
    sta rotate.D2+1
    lda rotation_matrix+4
    sta rotate.E1+1
    eor #$ff
    sta rotate.E2+1
    lda rotation_matrix+5
    sta rotate.F1+1
    eor #$ff
    sta rotate.F2+1
    lda rotation_matrix+6
    sta rotate.G1+1
    eor #$ff
    sta rotate.G2+1
    lda rotation_matrix+7
    sta rotate.H1+1
    eor #$ff
    sta rotate.H2+1
    lda rotation_matrix+8
    sta rotate.I1+1
    eor #$ff
    sta rotate.I2+1
    jmp breturn
  //SEG95 prepare_matrix::@return
  breturn:
  //SEG96 [68] return  [ ] ( main:4::prepare_matrix:9 [ ] )
    rts
}
//SEG97 mulf_init
mulf_init: {
    .label _0 = $23
    .label _1 = $24
    .label _2 = $25
    .label _4 = $26
    .label _5 = $27
    .label _6 = $28
    .label sqr1 = 5
    .label add = 8
    .label i = 7
  //SEG98 [70] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
  b1_from_mulf_init:
  //SEG99 [70] phi (signed word) mulf_init::add#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init->mulf_init::@1#0] -- vwsz1=vbuc1 
    lda #<1
    sta add
    lda #>1
    sta add+1
  //SEG100 [70] phi (byte) mulf_init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG101 [70] phi (signed word) mulf_init::sqr1#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#2] -- vwsz1=vbuc1 
    lda #<0
    sta sqr1
    lda #>0
    sta sqr1+1
    jmp b1
  //SEG102 [70] phi from mulf_init::@1 to mulf_init::@1 [phi:mulf_init::@1->mulf_init::@1]
  b1_from_b1:
  //SEG103 [70] phi (signed word) mulf_init::add#2 = (signed word) mulf_init::add#1 [phi:mulf_init::@1->mulf_init::@1#0] -- register_copy 
  //SEG104 [70] phi (byte) mulf_init::i#2 = (byte) mulf_init::i#1 [phi:mulf_init::@1->mulf_init::@1#1] -- register_copy 
  //SEG105 [70] phi (signed word) mulf_init::sqr1#2 = (signed word) mulf_init::sqr1#1 [phi:mulf_init::@1->mulf_init::@1#2] -- register_copy 
    jmp b1
  //SEG106 mulf_init::@1
  b1:
  //SEG107 [71] (byte~) mulf_init::$0 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$0 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$0 ] ) -- vbuz1=_hi_vwsz2 
    lda sqr1+1
    sta _0
  //SEG108 [72] *((const byte[512]) mulf_sqr1#0 + (byte) mulf_init::i#2) ← (byte~) mulf_init::$0 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _0
    ldy i
    sta mulf_sqr1,y
  //SEG109 [73] (byte~) mulf_init::$1 ← - (byte) mulf_init::i#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 ] ) -- vbuz1=_neg_vbuz2 
    lda i
    eor #$ff
    clc
    adc #1
    sta _1
  //SEG110 [74] (byte~) mulf_init::$2 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 mulf_init::$2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 mulf_init::$2 ] ) -- vbuz1=_hi_vwsz2 
    lda sqr1+1
    sta _2
  //SEG111 [75] *((const byte[512]) mulf_sqr1#0 + (byte~) mulf_init::$1) ← (byte~) mulf_init::$2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _2
    ldy _1
    sta mulf_sqr1,y
  //SEG112 [76] (byte~) mulf_init::$4 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$4 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$4 ] ) -- vbuz1=_hi_vwsz2 
    lda sqr1+1
    sta _4
  //SEG113 [77] *((const byte[512]) mulf_sqr2#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mulf_init::i#2) ← (byte~) mulf_init::$4 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _4
    ldy i
    sta mulf_sqr2+1,y
  //SEG114 [78] (byte/signed word/word/dword/signed dword~) mulf_init::$5 ← (byte/signed byte/word/signed word/dword/signed dword) 1 - (byte) mulf_init::i#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 ] ) -- vbuz1=vbuc1_minus_vbuz2 
    lda #1
    sec
    sbc i
    sta _5
  //SEG115 [79] (byte~) mulf_init::$6 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 mulf_init::$6 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 mulf_init::$6 ] ) -- vbuz1=_hi_vwsz2 
    lda sqr1+1
    sta _6
  //SEG116 [80] *((const byte[512]) mulf_sqr2#0 + (byte/signed word/word/dword/signed dword~) mulf_init::$5) ← (byte~) mulf_init::$6 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _6
    ldy _5
    sta mulf_sqr2,y
  //SEG117 [81] (signed word) mulf_init::sqr1#1 ← (signed word) mulf_init::sqr1#2 + (signed word) mulf_init::add#2 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr1#1 ] ( main:4::mulf_init:7 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr1#1 ] ) -- vwsz1=vwsz1_plus_vwsz2 
    lda sqr1
    clc
    adc add
    sta sqr1
    lda sqr1+1
    adc add+1
    sta sqr1+1
  //SEG118 [82] (signed word) mulf_init::add#1 ← (signed word) mulf_init::add#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ mulf_init::i#2 mulf_init::sqr1#1 mulf_init::add#1 ] ( main:4::mulf_init:7 [ mulf_init::i#2 mulf_init::sqr1#1 mulf_init::add#1 ] ) -- vwsz1=vwsz1_plus_2 
    lda add
    clc
    adc #2
    sta add
    bcc !+
    inc add+1
  !:
  //SEG119 [83] (byte) mulf_init::i#1 ← ++ (byte) mulf_init::i#2 [ mulf_init::sqr1#1 mulf_init::i#1 mulf_init::add#1 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#1 mulf_init::i#1 mulf_init::add#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG120 [84] if((byte) mulf_init::i#1!=(byte/word/signed word/dword/signed dword) 129) goto mulf_init::@1 [ mulf_init::sqr1#1 mulf_init::i#1 mulf_init::add#1 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#1 mulf_init::i#1 mulf_init::add#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$81
    bne b1_from_b1
    jmp breturn
  //SEG121 mulf_init::@return
  breturn:
  //SEG122 [85] return  [ ] ( main:4::mulf_init:7 [ ] )
    rts
}
  .align $100
  mulf_sqr1: .fill $200, 0
  .align $100
  mulf_sqr2: .fill $200, 0
  rotation_matrix: .fill 9, 0
.pc = COSH "Inline"
  {
    .var min = -$1fff
    .var max = $1fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }

.pc = COSQ "Inline"
  {
    .var min = -$0fff
    .var max = $0fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }


REGISTER UPLIFT POTENTIAL REGISTERS
Statement [10] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4 [ ] ( main:4 [ ] ) always clobbers reg byte a 
Statement [13] *((const byte*) main::SCREEN#0) ← (byte)*((const signed byte*) xr#0) [ ] ( main:4 [ ] ) always clobbers reg byte a 
Statement [14] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte)*((const signed byte*) yr#0) [ ] ( main:4 [ ] ) always clobbers reg byte a 
Statement [15] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte)*((const signed byte*) zr#0) [ ] ( main:4 [ ] ) always clobbers reg byte a 
Statement [18] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 40) ← (byte)*((const signed byte*) xr#0) [ ] ( main:4 [ ] ) always clobbers reg byte a 
Statement [19] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 41) ← (byte)*((const signed byte*) yr#0) [ ] ( main:4 [ ] ) always clobbers reg byte a 
Statement [20] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 42) ← (byte)*((const signed byte*) zr#0) [ ] ( main:4 [ ] ) always clobbers reg byte a 
Statement [23] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 80) ← (byte)*((const signed byte*) xr#0) [ ] ( main:4 [ ] ) always clobbers reg byte a 
Statement [24] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 81) ← (byte)*((const signed byte*) yr#0) [ ] ( main:4 [ ] ) always clobbers reg byte a 
Statement [25] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 82) ← (byte)*((const signed byte*) zr#0) [ ] ( main:4 [ ] ) always clobbers reg byte a 
Statement [26] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 [ ] ( main:4 [ ] ) always clobbers reg byte a 
Statement asm { clc ldxzr lda#$80 C1: adcmulf_sqr1,x C2: sbcmulf_sqr2,x staC3+1 lda#$80 F1: adcmulf_sqr1,x F2: sbcmulf_sqr2,x staF3+1 lda#$80 I1: adcmulf_sqr1,x I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr C3: lda#0 A1: adcmulf_sqr1,x A2: sbcmulf_sqr2,x B1: adcmulf_sqr1,y B2: sbcmulf_sqr2,y staxr F3: lda#0 D1: adcmulf_sqr1,x D2: sbcmulf_sqr2,x E1: adcmulf_sqr1,y E2: sbcmulf_sqr2,y stayr I3: lda#0 G1: adcmulf_sqr1,x G2: sbcmulf_sqr2,x H1: adcmulf_sqr1,y H2: sbcmulf_sqr2,y stazr  } always clobbers reg byte a reg byte x reg byte y 
Statement [33] (signed byte~) prepare_matrix::$10 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t1#0) + *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t2#0) [ prepare_matrix::$10 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$10 ] ) always clobbers reg byte a 
Statement [35] (signed byte~) prepare_matrix::$11 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t1#0) - *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t2#0) [ prepare_matrix::$11 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$11 ] ) always clobbers reg byte a 
Statement [37] (signed byte~) prepare_matrix::$12 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::sy#0) + *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::sy#0) [ prepare_matrix::$12 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$12 ] ) always clobbers reg byte a 
Statement [39] (signed byte~) prepare_matrix::$13 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t3#0) - *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t4#0) [ prepare_matrix::$13 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$13 ] ) always clobbers reg byte a 
Statement [40] (signed byte~) prepare_matrix::$14 ← (signed byte~) prepare_matrix::$13 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$14 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$14 ] ) always clobbers reg byte a 
Statement [41] (signed byte~) prepare_matrix::$15 ← (signed byte~) prepare_matrix::$14 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$15 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$15 ] ) always clobbers reg byte a 
Statement [42] (signed byte~) prepare_matrix::$16 ← (signed byte~) prepare_matrix::$15 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$16 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$16 ] ) always clobbers reg byte a 
Statement [43] (signed byte~) prepare_matrix::$17 ← (signed byte~) prepare_matrix::$16 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$17 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$17 ] ) always clobbers reg byte a 
Statement [45] (signed byte~) prepare_matrix::$18 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t3#0) + *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t4#0) [ prepare_matrix::$18 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$18 ] ) always clobbers reg byte a 
Statement [46] (signed byte~) prepare_matrix::$19 ← (signed byte~) prepare_matrix::$18 + *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$19 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$19 ] ) always clobbers reg byte a 
Statement [47] (signed byte~) prepare_matrix::$20 ← (signed byte~) prepare_matrix::$19 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$20 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$20 ] ) always clobbers reg byte a 
Statement [48] (signed byte~) prepare_matrix::$21 ← (signed byte~) prepare_matrix::$20 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$21 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$21 ] ) always clobbers reg byte a 
Statement [49] (signed byte~) prepare_matrix::$22 ← (signed byte~) prepare_matrix::$21 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$22 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$22 ] ) always clobbers reg byte a 
Statement [51] (signed byte~) prepare_matrix::$23 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t9#0) - *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t10#0) [ prepare_matrix::$23 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$23 ] ) always clobbers reg byte a 
Statement [53] (signed byte~) prepare_matrix::$24 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t4#0) - *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t3#0) [ prepare_matrix::$24 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$24 ] ) always clobbers reg byte a 
Statement [54] (signed byte~) prepare_matrix::$25 ← (signed byte~) prepare_matrix::$24 + *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$25 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$25 ] ) always clobbers reg byte a 
Statement [55] (signed byte~) prepare_matrix::$26 ← (signed byte~) prepare_matrix::$25 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$26 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$26 ] ) always clobbers reg byte a 
Statement [56] (signed byte~) prepare_matrix::$27 ← (signed byte~) prepare_matrix::$26 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$27 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$27 ] ) always clobbers reg byte a 
Statement [57] (signed byte~) prepare_matrix::$28 ← (signed byte~) prepare_matrix::$27 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$28 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$28 ] ) always clobbers reg byte a 
Statement [59] (signed byte~) prepare_matrix::$29 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t3#0) + *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t4#0) [ prepare_matrix::$29 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$29 ] ) always clobbers reg byte a 
Statement [60] (signed byte~) prepare_matrix::$30 ← (signed byte~) prepare_matrix::$29 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$30 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$30 ] ) always clobbers reg byte a 
Statement [61] (signed byte~) prepare_matrix::$31 ← (signed byte~) prepare_matrix::$30 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$31 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$31 ] ) always clobbers reg byte a 
Statement [62] (signed byte~) prepare_matrix::$32 ← (signed byte~) prepare_matrix::$31 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$32 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$32 ] ) always clobbers reg byte a 
Statement [63] (signed byte~) prepare_matrix::$33 ← (signed byte~) prepare_matrix::$32 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$33 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$33 ] ) always clobbers reg byte a 
Statement [65] (signed byte~) prepare_matrix::$34 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t9#0) + *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t10#0) [ prepare_matrix::$34 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$34 ] ) always clobbers reg byte a 
Statement asm { ldarotation_matrix+0 starotate.A1+1 eor#$ff starotate.A2+1 ldarotation_matrix+1 starotate.B1+1 eor#$ff starotate.B2+1 ldarotation_matrix+2 starotate.C1+1 eor#$ff starotate.C2+1 ldarotation_matrix+3 starotate.D1+1 eor#$ff starotate.D2+1 ldarotation_matrix+4 starotate.E1+1 eor#$ff starotate.E2+1 ldarotation_matrix+5 starotate.F1+1 eor#$ff starotate.F2+1 ldarotation_matrix+6 starotate.G1+1 eor#$ff starotate.G2+1 ldarotation_matrix+7 starotate.H1+1 eor#$ff starotate.H2+1 ldarotation_matrix+8 starotate.I1+1 eor#$ff starotate.I2+1  } always clobbers reg byte a 
Statement [71] (byte~) mulf_init::$0 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$0 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ mulf_init::i#2 mulf_init::i#1 ]
Statement [73] (byte~) mulf_init::$1 ← - (byte) mulf_init::i#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 ] ) always clobbers reg byte a 
Statement [74] (byte~) mulf_init::$2 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 mulf_init::$2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 mulf_init::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:36 [ mulf_init::$1 ]
Statement [76] (byte~) mulf_init::$4 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$4 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$4 ] ) always clobbers reg byte a 
Statement [78] (byte/signed word/word/dword/signed dword~) mulf_init::$5 ← (byte/signed byte/word/signed word/dword/signed dword) 1 - (byte) mulf_init::i#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 ] ) always clobbers reg byte a 
Statement [79] (byte~) mulf_init::$6 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 mulf_init::$6 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 mulf_init::$6 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:39 [ mulf_init::$5 ]
Statement [81] (signed word) mulf_init::sqr1#1 ← (signed word) mulf_init::sqr1#2 + (signed word) mulf_init::add#2 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr1#1 ] ( main:4::mulf_init:7 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr1#1 ] ) always clobbers reg byte a 
Statement [82] (signed word) mulf_init::add#1 ← (signed word) mulf_init::add#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ mulf_init::i#2 mulf_init::sqr1#1 mulf_init::add#1 ] ( main:4::mulf_init:7 [ mulf_init::i#2 mulf_init::sqr1#1 mulf_init::add#1 ] ) always clobbers reg byte a 
Statement [10] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4 [ ] ( main:4 [ ] ) always clobbers reg byte a 
Statement [13] *((const byte*) main::SCREEN#0) ← (byte)*((const signed byte*) xr#0) [ ] ( main:4 [ ] ) always clobbers reg byte a 
Statement [14] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte)*((const signed byte*) yr#0) [ ] ( main:4 [ ] ) always clobbers reg byte a 
Statement [15] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte)*((const signed byte*) zr#0) [ ] ( main:4 [ ] ) always clobbers reg byte a 
Statement [18] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 40) ← (byte)*((const signed byte*) xr#0) [ ] ( main:4 [ ] ) always clobbers reg byte a 
Statement [19] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 41) ← (byte)*((const signed byte*) yr#0) [ ] ( main:4 [ ] ) always clobbers reg byte a 
Statement [20] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 42) ← (byte)*((const signed byte*) zr#0) [ ] ( main:4 [ ] ) always clobbers reg byte a 
Statement [23] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 80) ← (byte)*((const signed byte*) xr#0) [ ] ( main:4 [ ] ) always clobbers reg byte a 
Statement [24] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 81) ← (byte)*((const signed byte*) yr#0) [ ] ( main:4 [ ] ) always clobbers reg byte a 
Statement [25] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 82) ← (byte)*((const signed byte*) zr#0) [ ] ( main:4 [ ] ) always clobbers reg byte a 
Statement [26] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 [ ] ( main:4 [ ] ) always clobbers reg byte a 
Statement asm { clc ldxzr lda#$80 C1: adcmulf_sqr1,x C2: sbcmulf_sqr2,x staC3+1 lda#$80 F1: adcmulf_sqr1,x F2: sbcmulf_sqr2,x staF3+1 lda#$80 I1: adcmulf_sqr1,x I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr C3: lda#0 A1: adcmulf_sqr1,x A2: sbcmulf_sqr2,x B1: adcmulf_sqr1,y B2: sbcmulf_sqr2,y staxr F3: lda#0 D1: adcmulf_sqr1,x D2: sbcmulf_sqr2,x E1: adcmulf_sqr1,y E2: sbcmulf_sqr2,y stayr I3: lda#0 G1: adcmulf_sqr1,x G2: sbcmulf_sqr2,x H1: adcmulf_sqr1,y H2: sbcmulf_sqr2,y stazr  } always clobbers reg byte a reg byte x reg byte y 
Statement [33] (signed byte~) prepare_matrix::$10 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t1#0) + *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t2#0) [ prepare_matrix::$10 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$10 ] ) always clobbers reg byte a 
Statement [35] (signed byte~) prepare_matrix::$11 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t1#0) - *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t2#0) [ prepare_matrix::$11 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$11 ] ) always clobbers reg byte a 
Statement [37] (signed byte~) prepare_matrix::$12 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::sy#0) + *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::sy#0) [ prepare_matrix::$12 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$12 ] ) always clobbers reg byte a 
Statement [39] (signed byte~) prepare_matrix::$13 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t3#0) - *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t4#0) [ prepare_matrix::$13 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$13 ] ) always clobbers reg byte a 
Statement [40] (signed byte~) prepare_matrix::$14 ← (signed byte~) prepare_matrix::$13 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$14 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$14 ] ) always clobbers reg byte a 
Statement [41] (signed byte~) prepare_matrix::$15 ← (signed byte~) prepare_matrix::$14 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$15 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$15 ] ) always clobbers reg byte a 
Statement [42] (signed byte~) prepare_matrix::$16 ← (signed byte~) prepare_matrix::$15 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$16 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$16 ] ) always clobbers reg byte a 
Statement [43] (signed byte~) prepare_matrix::$17 ← (signed byte~) prepare_matrix::$16 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$17 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$17 ] ) always clobbers reg byte a 
Statement [45] (signed byte~) prepare_matrix::$18 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t3#0) + *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t4#0) [ prepare_matrix::$18 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$18 ] ) always clobbers reg byte a 
Statement [46] (signed byte~) prepare_matrix::$19 ← (signed byte~) prepare_matrix::$18 + *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$19 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$19 ] ) always clobbers reg byte a 
Statement [47] (signed byte~) prepare_matrix::$20 ← (signed byte~) prepare_matrix::$19 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$20 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$20 ] ) always clobbers reg byte a 
Statement [48] (signed byte~) prepare_matrix::$21 ← (signed byte~) prepare_matrix::$20 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$21 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$21 ] ) always clobbers reg byte a 
Statement [49] (signed byte~) prepare_matrix::$22 ← (signed byte~) prepare_matrix::$21 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$22 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$22 ] ) always clobbers reg byte a 
Statement [51] (signed byte~) prepare_matrix::$23 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t9#0) - *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t10#0) [ prepare_matrix::$23 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$23 ] ) always clobbers reg byte a 
Statement [53] (signed byte~) prepare_matrix::$24 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t4#0) - *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t3#0) [ prepare_matrix::$24 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$24 ] ) always clobbers reg byte a 
Statement [54] (signed byte~) prepare_matrix::$25 ← (signed byte~) prepare_matrix::$24 + *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$25 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$25 ] ) always clobbers reg byte a 
Statement [55] (signed byte~) prepare_matrix::$26 ← (signed byte~) prepare_matrix::$25 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$26 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$26 ] ) always clobbers reg byte a 
Statement [56] (signed byte~) prepare_matrix::$27 ← (signed byte~) prepare_matrix::$26 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$27 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$27 ] ) always clobbers reg byte a 
Statement [57] (signed byte~) prepare_matrix::$28 ← (signed byte~) prepare_matrix::$27 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$28 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$28 ] ) always clobbers reg byte a 
Statement [59] (signed byte~) prepare_matrix::$29 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t3#0) + *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t4#0) [ prepare_matrix::$29 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$29 ] ) always clobbers reg byte a 
Statement [60] (signed byte~) prepare_matrix::$30 ← (signed byte~) prepare_matrix::$29 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$30 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$30 ] ) always clobbers reg byte a 
Statement [61] (signed byte~) prepare_matrix::$31 ← (signed byte~) prepare_matrix::$30 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$31 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$31 ] ) always clobbers reg byte a 
Statement [62] (signed byte~) prepare_matrix::$32 ← (signed byte~) prepare_matrix::$31 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$32 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$32 ] ) always clobbers reg byte a 
Statement [63] (signed byte~) prepare_matrix::$33 ← (signed byte~) prepare_matrix::$32 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$33 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$33 ] ) always clobbers reg byte a 
Statement [65] (signed byte~) prepare_matrix::$34 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t9#0) + *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t10#0) [ prepare_matrix::$34 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$34 ] ) always clobbers reg byte a 
Statement asm { ldarotation_matrix+0 starotate.A1+1 eor#$ff starotate.A2+1 ldarotation_matrix+1 starotate.B1+1 eor#$ff starotate.B2+1 ldarotation_matrix+2 starotate.C1+1 eor#$ff starotate.C2+1 ldarotation_matrix+3 starotate.D1+1 eor#$ff starotate.D2+1 ldarotation_matrix+4 starotate.E1+1 eor#$ff starotate.E2+1 ldarotation_matrix+5 starotate.F1+1 eor#$ff starotate.F2+1 ldarotation_matrix+6 starotate.G1+1 eor#$ff starotate.G2+1 ldarotation_matrix+7 starotate.H1+1 eor#$ff starotate.H2+1 ldarotation_matrix+8 starotate.I1+1 eor#$ff starotate.I2+1  } always clobbers reg byte a 
Statement [71] (byte~) mulf_init::$0 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$0 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$0 ] ) always clobbers reg byte a 
Statement [73] (byte~) mulf_init::$1 ← - (byte) mulf_init::i#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 ] ) always clobbers reg byte a 
Statement [74] (byte~) mulf_init::$2 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 mulf_init::$2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 mulf_init::$2 ] ) always clobbers reg byte a 
Statement [76] (byte~) mulf_init::$4 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$4 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$4 ] ) always clobbers reg byte a 
Statement [78] (byte/signed word/word/dword/signed dword~) mulf_init::$5 ← (byte/signed byte/word/signed word/dword/signed dword) 1 - (byte) mulf_init::i#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 ] ) always clobbers reg byte a 
Statement [79] (byte~) mulf_init::$6 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 mulf_init::$6 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 mulf_init::$6 ] ) always clobbers reg byte a 
Statement [81] (signed word) mulf_init::sqr1#1 ← (signed word) mulf_init::sqr1#2 + (signed word) mulf_init::add#2 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr1#1 ] ( main:4::mulf_init:7 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr1#1 ] ) always clobbers reg byte a 
Statement [82] (signed word) mulf_init::add#1 ← (signed word) mulf_init::add#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ mulf_init::i#2 mulf_init::sqr1#1 mulf_init::add#1 ] ( main:4::mulf_init:7 [ mulf_init::i#2 mulf_init::sqr1#1 mulf_init::add#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ rotate::x#3 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ rotate::y#3 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ rotate::z#3 ] : zp ZP_BYTE:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:5 [ mulf_init::sqr1#2 mulf_init::sqr1#1 ] : zp ZP_WORD:5 , 
Potential registers zp ZP_BYTE:7 [ mulf_init::i#2 mulf_init::i#1 ] : zp ZP_BYTE:7 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:8 [ mulf_init::add#2 mulf_init::add#1 ] : zp ZP_WORD:8 , 
Potential registers zp ZP_BYTE:10 [ prepare_matrix::$10 ] : zp ZP_BYTE:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:11 [ prepare_matrix::$11 ] : zp ZP_BYTE:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:12 [ prepare_matrix::$12 ] : zp ZP_BYTE:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ prepare_matrix::$13 ] : zp ZP_BYTE:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:14 [ prepare_matrix::$14 ] : zp ZP_BYTE:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:15 [ prepare_matrix::$15 ] : zp ZP_BYTE:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:16 [ prepare_matrix::$16 ] : zp ZP_BYTE:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:17 [ prepare_matrix::$17 ] : zp ZP_BYTE:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:18 [ prepare_matrix::$18 ] : zp ZP_BYTE:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:19 [ prepare_matrix::$19 ] : zp ZP_BYTE:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:20 [ prepare_matrix::$20 ] : zp ZP_BYTE:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:21 [ prepare_matrix::$21 ] : zp ZP_BYTE:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:22 [ prepare_matrix::$22 ] : zp ZP_BYTE:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:23 [ prepare_matrix::$23 ] : zp ZP_BYTE:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:24 [ prepare_matrix::$24 ] : zp ZP_BYTE:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:25 [ prepare_matrix::$25 ] : zp ZP_BYTE:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:26 [ prepare_matrix::$26 ] : zp ZP_BYTE:26 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:27 [ prepare_matrix::$27 ] : zp ZP_BYTE:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:28 [ prepare_matrix::$28 ] : zp ZP_BYTE:28 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:29 [ prepare_matrix::$29 ] : zp ZP_BYTE:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:30 [ prepare_matrix::$30 ] : zp ZP_BYTE:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:31 [ prepare_matrix::$31 ] : zp ZP_BYTE:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:32 [ prepare_matrix::$32 ] : zp ZP_BYTE:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:33 [ prepare_matrix::$33 ] : zp ZP_BYTE:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:34 [ prepare_matrix::$34 ] : zp ZP_BYTE:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:35 [ mulf_init::$0 ] : zp ZP_BYTE:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:36 [ mulf_init::$1 ] : zp ZP_BYTE:36 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:37 [ mulf_init::$2 ] : zp ZP_BYTE:37 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:38 [ mulf_init::$4 ] : zp ZP_BYTE:38 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:39 [ mulf_init::$5 ] : zp ZP_BYTE:39 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:40 [ mulf_init::$6 ] : zp ZP_BYTE:40 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [mulf_init] 22: zp ZP_BYTE:35 [ mulf_init::$0 ] 22: zp ZP_BYTE:37 [ mulf_init::$2 ] 22: zp ZP_BYTE:38 [ mulf_init::$4 ] 22: zp ZP_BYTE:40 [ mulf_init::$6 ] 21.58: zp ZP_BYTE:7 [ mulf_init::i#2 mulf_init::i#1 ] 11.5: zp ZP_WORD:5 [ mulf_init::sqr1#2 mulf_init::sqr1#1 ] 11: zp ZP_BYTE:36 [ mulf_init::$1 ] 11: zp ZP_BYTE:39 [ mulf_init::$5 ] 10.08: zp ZP_WORD:8 [ mulf_init::add#2 mulf_init::add#1 ] 
Uplift Scope [prepare_matrix] 4: zp ZP_BYTE:10 [ prepare_matrix::$10 ] 4: zp ZP_BYTE:11 [ prepare_matrix::$11 ] 4: zp ZP_BYTE:12 [ prepare_matrix::$12 ] 4: zp ZP_BYTE:13 [ prepare_matrix::$13 ] 4: zp ZP_BYTE:14 [ prepare_matrix::$14 ] 4: zp ZP_BYTE:15 [ prepare_matrix::$15 ] 4: zp ZP_BYTE:16 [ prepare_matrix::$16 ] 4: zp ZP_BYTE:17 [ prepare_matrix::$17 ] 4: zp ZP_BYTE:18 [ prepare_matrix::$18 ] 4: zp ZP_BYTE:19 [ prepare_matrix::$19 ] 4: zp ZP_BYTE:20 [ prepare_matrix::$20 ] 4: zp ZP_BYTE:21 [ prepare_matrix::$21 ] 4: zp ZP_BYTE:22 [ prepare_matrix::$22 ] 4: zp ZP_BYTE:23 [ prepare_matrix::$23 ] 4: zp ZP_BYTE:24 [ prepare_matrix::$24 ] 4: zp ZP_BYTE:25 [ prepare_matrix::$25 ] 4: zp ZP_BYTE:26 [ prepare_matrix::$26 ] 4: zp ZP_BYTE:27 [ prepare_matrix::$27 ] 4: zp ZP_BYTE:28 [ prepare_matrix::$28 ] 4: zp ZP_BYTE:29 [ prepare_matrix::$29 ] 4: zp ZP_BYTE:30 [ prepare_matrix::$30 ] 4: zp ZP_BYTE:31 [ prepare_matrix::$31 ] 4: zp ZP_BYTE:32 [ prepare_matrix::$32 ] 4: zp ZP_BYTE:33 [ prepare_matrix::$33 ] 4: zp ZP_BYTE:34 [ prepare_matrix::$34 ] 
Uplift Scope [rotate] 2: zp ZP_BYTE:2 [ rotate::x#3 ] 1: zp ZP_BYTE:3 [ rotate::y#3 ] 0.67: zp ZP_BYTE:4 [ rotate::z#3 ] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [mulf_init] best 5034 combination reg byte a [ mulf_init::$0 ] reg byte a [ mulf_init::$2 ] reg byte a [ mulf_init::$4 ] reg byte a [ mulf_init::$6 ] zp ZP_BYTE:7 [ mulf_init::i#2 mulf_init::i#1 ] zp ZP_WORD:5 [ mulf_init::sqr1#2 mulf_init::sqr1#1 ] zp ZP_BYTE:36 [ mulf_init::$1 ] zp ZP_BYTE:39 [ mulf_init::$5 ] zp ZP_WORD:8 [ mulf_init::add#2 mulf_init::add#1 ] 
Limited combination testing to 100 combinations of 6912 possible.
Uplifting [rotate] best 5026 combination reg byte y [ rotate::x#3 ] reg byte x [ rotate::y#3 ] zp ZP_BYTE:4 [ rotate::z#3 ] 
Uplifting [main] best 5026 combination 
Uplifting [] best 5026 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ mulf_init::i#2 mulf_init::i#1 ]
Uplifting [mulf_init] best 4876 combination reg byte x [ mulf_init::i#2 mulf_init::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:36 [ mulf_init::$1 ]
Uplifting [mulf_init] best 4836 combination reg byte y [ mulf_init::$1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:39 [ mulf_init::$5 ]
Uplifting [mulf_init] best 4796 combination reg byte y [ mulf_init::$5 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:10 [ prepare_matrix::$10 ]
Uplifting [prepare_matrix] best 4790 combination reg byte a [ prepare_matrix::$10 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:11 [ prepare_matrix::$11 ]
Uplifting [prepare_matrix] best 4784 combination reg byte a [ prepare_matrix::$11 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:12 [ prepare_matrix::$12 ]
Uplifting [prepare_matrix] best 4778 combination reg byte a [ prepare_matrix::$12 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:13 [ prepare_matrix::$13 ]
Uplifting [prepare_matrix] best 4778 combination zp ZP_BYTE:13 [ prepare_matrix::$13 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:14 [ prepare_matrix::$14 ]
Uplifting [prepare_matrix] best 4776 combination reg byte a [ prepare_matrix::$14 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:15 [ prepare_matrix::$15 ]
Uplifting [prepare_matrix] best 4776 combination zp ZP_BYTE:15 [ prepare_matrix::$15 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:16 [ prepare_matrix::$16 ]
Uplifting [prepare_matrix] best 4774 combination reg byte a [ prepare_matrix::$16 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:17 [ prepare_matrix::$17 ]
Uplifting [prepare_matrix] best 4768 combination reg byte a [ prepare_matrix::$17 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:18 [ prepare_matrix::$18 ]
Uplifting [prepare_matrix] best 4768 combination zp ZP_BYTE:18 [ prepare_matrix::$18 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:19 [ prepare_matrix::$19 ]
Uplifting [prepare_matrix] best 4766 combination reg byte a [ prepare_matrix::$19 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:20 [ prepare_matrix::$20 ]
Uplifting [prepare_matrix] best 4764 combination reg byte a [ prepare_matrix::$20 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:21 [ prepare_matrix::$21 ]
Uplifting [prepare_matrix] best 4762 combination reg byte a [ prepare_matrix::$21 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:22 [ prepare_matrix::$22 ]
Uplifting [prepare_matrix] best 4756 combination reg byte a [ prepare_matrix::$22 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:23 [ prepare_matrix::$23 ]
Uplifting [prepare_matrix] best 4750 combination reg byte a [ prepare_matrix::$23 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:24 [ prepare_matrix::$24 ]
Uplifting [prepare_matrix] best 4750 combination zp ZP_BYTE:24 [ prepare_matrix::$24 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:25 [ prepare_matrix::$25 ]
Uplifting [prepare_matrix] best 4748 combination reg byte a [ prepare_matrix::$25 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:26 [ prepare_matrix::$26 ]
Uplifting [prepare_matrix] best 4746 combination reg byte a [ prepare_matrix::$26 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:27 [ prepare_matrix::$27 ]
Uplifting [prepare_matrix] best 4744 combination reg byte a [ prepare_matrix::$27 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:28 [ prepare_matrix::$28 ]
Uplifting [prepare_matrix] best 4738 combination reg byte a [ prepare_matrix::$28 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:29 [ prepare_matrix::$29 ]
Uplifting [prepare_matrix] best 4738 combination zp ZP_BYTE:29 [ prepare_matrix::$29 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:30 [ prepare_matrix::$30 ]
Uplifting [prepare_matrix] best 4736 combination reg byte a [ prepare_matrix::$30 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:31 [ prepare_matrix::$31 ]
Uplifting [prepare_matrix] best 4736 combination zp ZP_BYTE:31 [ prepare_matrix::$31 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:32 [ prepare_matrix::$32 ]
Uplifting [prepare_matrix] best 4734 combination reg byte a [ prepare_matrix::$32 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:33 [ prepare_matrix::$33 ]
Uplifting [prepare_matrix] best 4728 combination reg byte a [ prepare_matrix::$33 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:34 [ prepare_matrix::$34 ]
Uplifting [prepare_matrix] best 4722 combination reg byte a [ prepare_matrix::$34 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:4 [ rotate::z#3 ]
Uplifting [rotate] best 4722 combination zp ZP_BYTE:4 [ rotate::z#3 ] 
Coalescing zero page register [ zp ZP_BYTE:4 [ rotate::z#3 ] ] with [ zp ZP_BYTE:13 [ prepare_matrix::$13 ] ]
Coalescing zero page register [ zp ZP_BYTE:4 [ rotate::z#3 prepare_matrix::$13 ] ] with [ zp ZP_BYTE:15 [ prepare_matrix::$15 ] ]
Coalescing zero page register [ zp ZP_BYTE:4 [ rotate::z#3 prepare_matrix::$13 prepare_matrix::$15 ] ] with [ zp ZP_BYTE:18 [ prepare_matrix::$18 ] ]
Coalescing zero page register [ zp ZP_BYTE:4 [ rotate::z#3 prepare_matrix::$13 prepare_matrix::$15 prepare_matrix::$18 ] ] with [ zp ZP_BYTE:24 [ prepare_matrix::$24 ] ]
Coalescing zero page register [ zp ZP_BYTE:4 [ rotate::z#3 prepare_matrix::$13 prepare_matrix::$15 prepare_matrix::$18 prepare_matrix::$24 ] ] with [ zp ZP_BYTE:29 [ prepare_matrix::$29 ] ]
Coalescing zero page register [ zp ZP_BYTE:4 [ rotate::z#3 prepare_matrix::$13 prepare_matrix::$15 prepare_matrix::$18 prepare_matrix::$24 prepare_matrix::$29 ] ] with [ zp ZP_BYTE:31 [ prepare_matrix::$31 ] ]
Allocated (was zp ZP_BYTE:4) zp ZP_BYTE:2 [ rotate::z#3 prepare_matrix::$13 prepare_matrix::$15 prepare_matrix::$18 prepare_matrix::$24 prepare_matrix::$29 prepare_matrix::$31 ]
Allocated (was zp ZP_WORD:5) zp ZP_WORD:3 [ mulf_init::sqr1#2 mulf_init::sqr1#1 ]
Allocated (was zp ZP_WORD:8) zp ZP_WORD:5 [ mulf_init::add#2 mulf_init::add#1 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .const LIGHT_BLUE = $e
  .label COSH = $2000
  .label COSQ = $2200
  .label xr = $f0
  .label yr = $f1
  .label zr = $f2
  .label SINH = COSH+$40
  .label SINQ = COSQ+$40
//SEG2 @begin
bbegin:
  jmp b3
//SEG3 @3
b3:
//SEG4 kickasm(location (const signed byte*) COSH#0) {{ {     .var min = -$1fff     .var max = $1fff     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))     }     }  }}
//SEG5 kickasm(location (const signed byte*) COSQ#0) {{ {     .var min = -$0fff     .var max = $0fff     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))     }     }  }}
//SEG6 [3] phi from @3 to @7 [phi:@3->@7]
b7_from_b3:
  jmp b7
//SEG7 @7
b7:
//SEG8 [4] call main  [ ] ( )
  jsr main
//SEG9 [5] phi from @7 to @end [phi:@7->@end]
bend_from_b7:
  jmp bend
//SEG10 @end
bend:
//SEG11 main
main: {
    .label SCREEN = $400
  //SEG12 asm { sei  }
    sei
  //SEG13 [7] call mulf_init  [ ] ( main:4 [ ] )
  //SEG14 [69] phi from main to mulf_init [phi:main->mulf_init]
  mulf_init_from_main:
    jsr mulf_init
  //SEG15 [8] phi from main to main::@13 [phi:main->main::@13]
  b13_from_main:
    jmp b13
  //SEG16 main::@13
  b13:
  //SEG17 [9] call prepare_matrix  [ ] ( main:4 [ ] )
    jsr prepare_matrix
    jmp b4
  //SEG18 main::@4
  b4:
  //SEG19 [10] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4 [ ] ( main:4 [ ] ) -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
    jmp b6
  //SEG20 main::@6
  b6:
  //SEG21 [11] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG22 [12] call rotate  [ ] ( main:4 [ ] )
  //SEG23 [27] phi from main::@6 to rotate [phi:main::@6->rotate]
  rotate_from_b6:
  //SEG24 [27] phi (signed byte) rotate::z#3 = (byte/signed byte/word/signed word/dword/signed dword) 63 [phi:main::@6->rotate#0] -- vbsz1=vbuc1 
    lda #$3f
    sta rotate.z
  //SEG25 [27] phi (signed byte) rotate::y#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@6->rotate#1] -- vbsxx=vbuc1 
    lda #0
    tax
  //SEG26 [27] phi (signed byte) rotate::x#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@6->rotate#2] -- vbsyy=vbuc1 
    lda #0
    tay
    jsr rotate
    jmp b15
  //SEG27 main::@15
  b15:
  //SEG28 [13] *((const byte*) main::SCREEN#0) ← (byte)*((const signed byte*) xr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda xr
    sta SCREEN
  //SEG29 [14] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte)*((const signed byte*) yr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda yr
    sta SCREEN+1
  //SEG30 [15] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte)*((const signed byte*) zr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda zr
    sta SCREEN+2
  //SEG31 [16] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG32 [17] call rotate  [ ] ( main:4 [ ] )
  //SEG33 [27] phi from main::@15 to rotate [phi:main::@15->rotate]
  rotate_from_b15:
  //SEG34 [27] phi (signed byte) rotate::z#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@15->rotate#0] -- vbsz1=vbuc1 
    lda #0
    sta rotate.z
  //SEG35 [27] phi (signed byte) rotate::y#3 = (byte/signed byte/word/signed word/dword/signed dword) 63 [phi:main::@15->rotate#1] -- vbsxx=vbuc1 
    lda #$3f
    tax
  //SEG36 [27] phi (signed byte) rotate::x#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@15->rotate#2] -- vbsyy=vbuc1 
    lda #0
    tay
    jsr rotate
    jmp b16
  //SEG37 main::@16
  b16:
  //SEG38 [18] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 40) ← (byte)*((const signed byte*) xr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda xr
    sta SCREEN+$28
  //SEG39 [19] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 41) ← (byte)*((const signed byte*) yr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda yr
    sta SCREEN+$29
  //SEG40 [20] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 42) ← (byte)*((const signed byte*) zr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda zr
    sta SCREEN+$2a
  //SEG41 [21] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG42 [22] call rotate  [ ] ( main:4 [ ] )
  //SEG43 [27] phi from main::@16 to rotate [phi:main::@16->rotate]
  rotate_from_b16:
  //SEG44 [27] phi (signed byte) rotate::z#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@16->rotate#0] -- vbsz1=vbuc1 
    lda #0
    sta rotate.z
  //SEG45 [27] phi (signed byte) rotate::y#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@16->rotate#1] -- vbsxx=vbuc1 
    lda #0
    tax
  //SEG46 [27] phi (signed byte) rotate::x#3 = (byte/signed byte/word/signed word/dword/signed dword) 63 [phi:main::@16->rotate#2] -- vbsyy=vbuc1 
    lda #$3f
    tay
    jsr rotate
    jmp b17
  //SEG47 main::@17
  b17:
  //SEG48 [23] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 80) ← (byte)*((const signed byte*) xr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda xr
    sta SCREEN+$50
  //SEG49 [24] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 81) ← (byte)*((const signed byte*) yr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda yr
    sta SCREEN+$51
  //SEG50 [25] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 82) ← (byte)*((const signed byte*) zr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda zr
    sta SCREEN+$52
  //SEG51 [26] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 [ ] ( main:4 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta BORDERCOL
    jmp b4
}
//SEG52 rotate
rotate: {
    .label z = 2
  //SEG53 [28] *((const signed byte*) xr#0) ← (signed byte) rotate::x#3 [ rotate::y#3 rotate::z#3 ] ( main:4::rotate:12 [ rotate::y#3 rotate::z#3 ] main:4::rotate:17 [ rotate::y#3 rotate::z#3 ] main:4::rotate:22 [ rotate::y#3 rotate::z#3 ] ) -- _deref_pbsc1=vbsyy 
    tya
    sta xr
  //SEG54 [29] *((const signed byte*) yr#0) ← (signed byte) rotate::y#3 [ rotate::z#3 ] ( main:4::rotate:12 [ rotate::z#3 ] main:4::rotate:17 [ rotate::z#3 ] main:4::rotate:22 [ rotate::z#3 ] ) -- _deref_pbsc1=vbsxx 
    txa
    sta yr
  //SEG55 [30] *((const signed byte*) zr#0) ← (signed byte) rotate::z#3 [ ] ( main:4::rotate:12 [ ] main:4::rotate:17 [ ] main:4::rotate:22 [ ] ) -- _deref_pbsc1=vbsz1 
    lda z
    sta zr
  //SEG56 asm { clc ldxzr lda#$80 C1: adcmulf_sqr1,x C2: sbcmulf_sqr2,x staC3+1 lda#$80 F1: adcmulf_sqr1,x F2: sbcmulf_sqr2,x staF3+1 lda#$80 I1: adcmulf_sqr1,x I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr C3: lda#0 A1: adcmulf_sqr1,x A2: sbcmulf_sqr2,x B1: adcmulf_sqr1,y B2: sbcmulf_sqr2,y staxr F3: lda#0 D1: adcmulf_sqr1,x D2: sbcmulf_sqr2,x E1: adcmulf_sqr1,y E2: sbcmulf_sqr2,y stayr I3: lda#0 G1: adcmulf_sqr1,x G2: sbcmulf_sqr2,x H1: adcmulf_sqr1,y H2: sbcmulf_sqr2,y stazr  }
    clc
    ldx zr
    lda #$80
  C1:
    adc mulf_sqr1,x
  C2:
    sbc mulf_sqr2,x
    sta C3+1
    lda #$80
  F1:
    adc mulf_sqr1,x
  F2:
    sbc mulf_sqr2,x
    sta F3+1
    lda #$80
  I1:
    adc mulf_sqr1,x
  I2:
    sbc mulf_sqr2,x
    sta I3+1
    ldx xr
    ldy yr
  C3:
    lda #0
  A1:
    adc mulf_sqr1,x
  A2:
    sbc mulf_sqr2,x
  B1:
    adc mulf_sqr1,y
  B2:
    sbc mulf_sqr2,y
    sta xr
  F3:
    lda #0
  D1:
    adc mulf_sqr1,x
  D2:
    sbc mulf_sqr2,x
  E1:
    adc mulf_sqr1,y
  E2:
    sbc mulf_sqr2,y
    sta yr
  I3:
    lda #0
  G1:
    adc mulf_sqr1,x
  G2:
    sbc mulf_sqr2,x
  H1:
    adc mulf_sqr1,y
  H2:
    sbc mulf_sqr2,y
    sta zr
    jmp breturn
  //SEG57 rotate::@return
  breturn:
  //SEG58 [32] return  [ ] ( main:4::rotate:12 [ ] main:4::rotate:17 [ ] main:4::rotate:22 [ ] )
    rts
}
//SEG59 prepare_matrix
prepare_matrix: {
    .const sx = 0
    .const sy = 0
    .const sz = 0
    .const t1 = sy-sz
    .const t2 = sy+sz
    .const t3 = sx+sz
    .const t4 = sx-sz
    .const t9 = sy-sx
    .const t10 = sy+sx
    .const t5 = sx+t2
    .const t6 = sx-t1
    .const t7 = sx+t1
    .const t8 = t2-sx
    .label _13 = 2
    .label _15 = 2
    .label _18 = 2
    .label _24 = 2
    .label _29 = 2
    .label _31 = 2
  //SEG60 [33] (signed byte~) prepare_matrix::$10 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t1#0) + *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t2#0) [ prepare_matrix::$10 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$10 ] ) -- vbsaa=_deref_pbsc1_plus__deref_pbsc2 
    lda COSH+t1
    ldy COSH+t2
    sty $ff
    clc
    adc $ff
  //SEG61 [34] *((const signed byte[9]) rotation_matrix#0) ← (signed byte~) prepare_matrix::$10 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix
  //SEG62 [35] (signed byte~) prepare_matrix::$11 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t1#0) - *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t2#0) [ prepare_matrix::$11 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$11 ] ) -- vbsaa=_deref_pbsc1_minus__deref_pbsc2 
    lda SINH+t1
    ldy SINH+t2
    sty $ff
    sec
    sbc $ff
  //SEG63 [36] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (signed byte~) prepare_matrix::$11 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+1
  //SEG64 [37] (signed byte~) prepare_matrix::$12 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::sy#0) + *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::sy#0) [ prepare_matrix::$12 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$12 ] ) -- vbsaa=_deref_pbsc1_plus__deref_pbsc2 
    lda SINH+sy
    ldy SINH+sy
    sty $ff
    clc
    adc $ff
  //SEG65 [38] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (signed byte~) prepare_matrix::$12 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+2
  //SEG66 [39] (signed byte~) prepare_matrix::$13 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t3#0) - *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t4#0) [ prepare_matrix::$13 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$13 ] ) -- vbsz1=_deref_pbsc1_minus__deref_pbsc2 
    lda SINH+t3
    ldy SINH+t4
    sty $ff
    sec
    sbc $ff
    sta _13
  //SEG67 [40] (signed byte~) prepare_matrix::$14 ← (signed byte~) prepare_matrix::$13 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$14 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$14 ] ) -- vbsaa=vbsz1_plus__deref_pbsc1 
    lda COSQ+t6
    clc
    adc _13
  //SEG68 [41] (signed byte~) prepare_matrix::$15 ← (signed byte~) prepare_matrix::$14 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$15 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$15 ] ) -- vbsz1=vbsaa_minus__deref_pbsc1 
    ldy COSQ+t5
    sty $ff
    sec
    sbc $ff
    sta _15
  //SEG69 [42] (signed byte~) prepare_matrix::$16 ← (signed byte~) prepare_matrix::$15 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$16 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$16 ] ) -- vbsaa=vbsz1_plus__deref_pbsc1 
    lda COSQ+t8
    clc
    adc _15
  //SEG70 [43] (signed byte~) prepare_matrix::$17 ← (signed byte~) prepare_matrix::$16 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$17 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$17 ] ) -- vbsaa=vbsaa_minus__deref_pbsc1 
    ldy COSQ+t7
    sty $ff
    sec
    sbc $ff
  //SEG71 [44] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (signed byte~) prepare_matrix::$17 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+3
  //SEG72 [45] (signed byte~) prepare_matrix::$18 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t3#0) + *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t4#0) [ prepare_matrix::$18 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$18 ] ) -- vbsz1=_deref_pbsc1_plus__deref_pbsc2 
    lda COSH+t3
    ldy COSH+t4
    sty $ff
    clc
    adc $ff
    sta _18
  //SEG73 [46] (signed byte~) prepare_matrix::$19 ← (signed byte~) prepare_matrix::$18 + *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$19 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$19 ] ) -- vbsaa=vbsz1_plus__deref_pbsc1 
    lda SINQ+t5
    clc
    adc _18
  //SEG74 [47] (signed byte~) prepare_matrix::$20 ← (signed byte~) prepare_matrix::$19 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$20 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$20 ] ) -- vbsaa=vbsaa_minus__deref_pbsc1 
    ldy SINQ+t6
    sty $ff
    sec
    sbc $ff
  //SEG75 [48] (signed byte~) prepare_matrix::$21 ← (signed byte~) prepare_matrix::$20 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$21 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$21 ] ) -- vbsaa=vbsaa_minus__deref_pbsc1 
    ldy SINQ+t7
    sty $ff
    sec
    sbc $ff
  //SEG76 [49] (signed byte~) prepare_matrix::$22 ← (signed byte~) prepare_matrix::$21 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$22 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$22 ] ) -- vbsaa=vbsaa_minus__deref_pbsc1 
    ldy SINQ+t8
    sty $ff
    sec
    sbc $ff
  //SEG77 [50] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (signed byte~) prepare_matrix::$22 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+4
  //SEG78 [51] (signed byte~) prepare_matrix::$23 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t9#0) - *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t10#0) [ prepare_matrix::$23 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$23 ] ) -- vbsaa=_deref_pbsc1_minus__deref_pbsc2 
    lda SINH+t9
    ldy SINH+t10
    sty $ff
    sec
    sbc $ff
  //SEG79 [52] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (signed byte~) prepare_matrix::$23 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+5
  //SEG80 [53] (signed byte~) prepare_matrix::$24 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t4#0) - *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t3#0) [ prepare_matrix::$24 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$24 ] ) -- vbsz1=_deref_pbsc1_minus__deref_pbsc2 
    lda COSH+t4
    ldy COSH+t3
    sty $ff
    sec
    sbc $ff
    sta _24
  //SEG81 [54] (signed byte~) prepare_matrix::$25 ← (signed byte~) prepare_matrix::$24 + *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$25 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$25 ] ) -- vbsaa=vbsz1_plus__deref_pbsc1 
    lda SINQ+t6
    clc
    adc _24
  //SEG82 [55] (signed byte~) prepare_matrix::$26 ← (signed byte~) prepare_matrix::$25 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$26 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$26 ] ) -- vbsaa=vbsaa_minus__deref_pbsc1 
    ldy SINQ+t5
    sty $ff
    sec
    sbc $ff
  //SEG83 [56] (signed byte~) prepare_matrix::$27 ← (signed byte~) prepare_matrix::$26 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$27 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$27 ] ) -- vbsaa=vbsaa_minus__deref_pbsc1 
    ldy SINQ+t8
    sty $ff
    sec
    sbc $ff
  //SEG84 [57] (signed byte~) prepare_matrix::$28 ← (signed byte~) prepare_matrix::$27 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$28 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$28 ] ) -- vbsaa=vbsaa_minus__deref_pbsc1 
    ldy SINQ+t7
    sty $ff
    sec
    sbc $ff
  //SEG85 [58] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (signed byte~) prepare_matrix::$28 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+6
  //SEG86 [59] (signed byte~) prepare_matrix::$29 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t3#0) + *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t4#0) [ prepare_matrix::$29 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$29 ] ) -- vbsz1=_deref_pbsc1_plus__deref_pbsc2 
    lda SINH+t3
    ldy SINH+t4
    sty $ff
    clc
    adc $ff
    sta _29
  //SEG87 [60] (signed byte~) prepare_matrix::$30 ← (signed byte~) prepare_matrix::$29 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$30 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$30 ] ) -- vbsaa=vbsz1_plus__deref_pbsc1 
    lda COSQ+t6
    clc
    adc _29
  //SEG88 [61] (signed byte~) prepare_matrix::$31 ← (signed byte~) prepare_matrix::$30 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$31 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$31 ] ) -- vbsz1=vbsaa_minus__deref_pbsc1 
    ldy COSQ+t5
    sty $ff
    sec
    sbc $ff
    sta _31
  //SEG89 [62] (signed byte~) prepare_matrix::$32 ← (signed byte~) prepare_matrix::$31 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$32 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$32 ] ) -- vbsaa=vbsz1_plus__deref_pbsc1 
    lda COSQ+t7
    clc
    adc _31
  //SEG90 [63] (signed byte~) prepare_matrix::$33 ← (signed byte~) prepare_matrix::$32 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$33 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$33 ] ) -- vbsaa=vbsaa_minus__deref_pbsc1 
    ldy COSQ+t8
    sty $ff
    sec
    sbc $ff
  //SEG91 [64] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 7) ← (signed byte~) prepare_matrix::$33 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+7
  //SEG92 [65] (signed byte~) prepare_matrix::$34 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t9#0) + *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t10#0) [ prepare_matrix::$34 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$34 ] ) -- vbsaa=_deref_pbsc1_plus__deref_pbsc2 
    lda COSH+t9
    ldy COSH+t10
    sty $ff
    clc
    adc $ff
  //SEG93 [66] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (signed byte~) prepare_matrix::$34 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+8
  //SEG94 asm { ldarotation_matrix+0 starotate.A1+1 eor#$ff starotate.A2+1 ldarotation_matrix+1 starotate.B1+1 eor#$ff starotate.B2+1 ldarotation_matrix+2 starotate.C1+1 eor#$ff starotate.C2+1 ldarotation_matrix+3 starotate.D1+1 eor#$ff starotate.D2+1 ldarotation_matrix+4 starotate.E1+1 eor#$ff starotate.E2+1 ldarotation_matrix+5 starotate.F1+1 eor#$ff starotate.F2+1 ldarotation_matrix+6 starotate.G1+1 eor#$ff starotate.G2+1 ldarotation_matrix+7 starotate.H1+1 eor#$ff starotate.H2+1 ldarotation_matrix+8 starotate.I1+1 eor#$ff starotate.I2+1  }
    lda rotation_matrix+0
    sta rotate.A1+1
    eor #$ff
    sta rotate.A2+1
    lda rotation_matrix+1
    sta rotate.B1+1
    eor #$ff
    sta rotate.B2+1
    lda rotation_matrix+2
    sta rotate.C1+1
    eor #$ff
    sta rotate.C2+1
    lda rotation_matrix+3
    sta rotate.D1+1
    eor #$ff
    sta rotate.D2+1
    lda rotation_matrix+4
    sta rotate.E1+1
    eor #$ff
    sta rotate.E2+1
    lda rotation_matrix+5
    sta rotate.F1+1
    eor #$ff
    sta rotate.F2+1
    lda rotation_matrix+6
    sta rotate.G1+1
    eor #$ff
    sta rotate.G2+1
    lda rotation_matrix+7
    sta rotate.H1+1
    eor #$ff
    sta rotate.H2+1
    lda rotation_matrix+8
    sta rotate.I1+1
    eor #$ff
    sta rotate.I2+1
    jmp breturn
  //SEG95 prepare_matrix::@return
  breturn:
  //SEG96 [68] return  [ ] ( main:4::prepare_matrix:9 [ ] )
    rts
}
//SEG97 mulf_init
mulf_init: {
    .label sqr1 = 3
    .label add = 5
  //SEG98 [70] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
  b1_from_mulf_init:
  //SEG99 [70] phi (signed word) mulf_init::add#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init->mulf_init::@1#0] -- vwsz1=vbuc1 
    lda #<1
    sta add
    lda #>1
    sta add+1
  //SEG100 [70] phi (byte) mulf_init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG101 [70] phi (signed word) mulf_init::sqr1#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#2] -- vwsz1=vbuc1 
    lda #<0
    sta sqr1
    lda #>0
    sta sqr1+1
    jmp b1
  //SEG102 [70] phi from mulf_init::@1 to mulf_init::@1 [phi:mulf_init::@1->mulf_init::@1]
  b1_from_b1:
  //SEG103 [70] phi (signed word) mulf_init::add#2 = (signed word) mulf_init::add#1 [phi:mulf_init::@1->mulf_init::@1#0] -- register_copy 
  //SEG104 [70] phi (byte) mulf_init::i#2 = (byte) mulf_init::i#1 [phi:mulf_init::@1->mulf_init::@1#1] -- register_copy 
  //SEG105 [70] phi (signed word) mulf_init::sqr1#2 = (signed word) mulf_init::sqr1#1 [phi:mulf_init::@1->mulf_init::@1#2] -- register_copy 
    jmp b1
  //SEG106 mulf_init::@1
  b1:
  //SEG107 [71] (byte~) mulf_init::$0 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$0 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$0 ] ) -- vbuaa=_hi_vwsz1 
    lda sqr1+1
  //SEG108 [72] *((const byte[512]) mulf_sqr1#0 + (byte) mulf_init::i#2) ← (byte~) mulf_init::$0 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta mulf_sqr1,x
  //SEG109 [73] (byte~) mulf_init::$1 ← - (byte) mulf_init::i#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 ] ) -- vbuyy=_neg_vbuxx 
    txa
    eor #$ff
    clc
    adc #1
    tay
  //SEG110 [74] (byte~) mulf_init::$2 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 mulf_init::$2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 mulf_init::$2 ] ) -- vbuaa=_hi_vwsz1 
    lda sqr1+1
  //SEG111 [75] *((const byte[512]) mulf_sqr1#0 + (byte~) mulf_init::$1) ← (byte~) mulf_init::$2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ) -- pbuc1_derefidx_vbuyy=vbuaa 
    sta mulf_sqr1,y
  //SEG112 [76] (byte~) mulf_init::$4 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$4 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$4 ] ) -- vbuaa=_hi_vwsz1 
    lda sqr1+1
  //SEG113 [77] *((const byte[512]) mulf_sqr2#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mulf_init::i#2) ← (byte~) mulf_init::$4 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta mulf_sqr2+1,x
  //SEG114 [78] (byte/signed word/word/dword/signed dword~) mulf_init::$5 ← (byte/signed byte/word/signed word/dword/signed dword) 1 - (byte) mulf_init::i#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 ] ) -- vbuyy=vbuc1_minus_vbuxx 
    txa
    eor #$ff
    clc
    adc #1+1
    tay
  //SEG115 [79] (byte~) mulf_init::$6 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 mulf_init::$6 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 mulf_init::$6 ] ) -- vbuaa=_hi_vwsz1 
    lda sqr1+1
  //SEG116 [80] *((const byte[512]) mulf_sqr2#0 + (byte/signed word/word/dword/signed dword~) mulf_init::$5) ← (byte~) mulf_init::$6 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ) -- pbuc1_derefidx_vbuyy=vbuaa 
    sta mulf_sqr2,y
  //SEG117 [81] (signed word) mulf_init::sqr1#1 ← (signed word) mulf_init::sqr1#2 + (signed word) mulf_init::add#2 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr1#1 ] ( main:4::mulf_init:7 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr1#1 ] ) -- vwsz1=vwsz1_plus_vwsz2 
    lda sqr1
    clc
    adc add
    sta sqr1
    lda sqr1+1
    adc add+1
    sta sqr1+1
  //SEG118 [82] (signed word) mulf_init::add#1 ← (signed word) mulf_init::add#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ mulf_init::i#2 mulf_init::sqr1#1 mulf_init::add#1 ] ( main:4::mulf_init:7 [ mulf_init::i#2 mulf_init::sqr1#1 mulf_init::add#1 ] ) -- vwsz1=vwsz1_plus_2 
    lda add
    clc
    adc #2
    sta add
    bcc !+
    inc add+1
  !:
  //SEG119 [83] (byte) mulf_init::i#1 ← ++ (byte) mulf_init::i#2 [ mulf_init::sqr1#1 mulf_init::i#1 mulf_init::add#1 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#1 mulf_init::i#1 mulf_init::add#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG120 [84] if((byte) mulf_init::i#1!=(byte/word/signed word/dword/signed dword) 129) goto mulf_init::@1 [ mulf_init::sqr1#1 mulf_init::i#1 mulf_init::add#1 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#1 mulf_init::i#1 mulf_init::add#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$81
    bne b1_from_b1
    jmp breturn
  //SEG121 mulf_init::@return
  breturn:
  //SEG122 [85] return  [ ] ( main:4::mulf_init:7 [ ] )
    rts
}
  .align $100
  mulf_sqr1: .fill $200, 0
  .align $100
  mulf_sqr2: .fill $200, 0
  rotation_matrix: .fill 9, 0
.pc = COSH "Inline"
  {
    .var min = -$1fff
    .var max = $1fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }

.pc = COSQ "Inline"
  {
    .var min = -$0fff
    .var max = $0fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b3
Removing instruction jmp b7
Removing instruction jmp bend
Removing instruction jmp b13
Removing instruction jmp b4
Removing instruction jmp b6
Removing instruction jmp b15
Removing instruction jmp b16
Removing instruction jmp b17
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction ldx zr with TAX
Replacing instruction ldy SINH+sy with TAY
Replacing instruction ldx #0 with TAX
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda sqr1+1
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction b3:
Removing instruction b7_from_b3:
Removing instruction bend_from_b7:
Removing instruction b13_from_main:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b7:
Removing instruction bend:
Removing instruction mulf_init_from_main:
Removing instruction b13:
Removing instruction b6:
Removing instruction rotate_from_b6:
Removing instruction b15:
Removing instruction rotate_from_b15:
Removing instruction b16:
Removing instruction rotate_from_b16:
Removing instruction b17:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_mulf_init:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @3
(label) @7
(label) @begin
(label) @end
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) 53280
(signed byte*) COSH
(const signed byte*) COSH#0 COSH = ((signed byte*))(word/signed word/dword/signed dword) 8192
(signed byte*) COSQ
(const signed byte*) COSQ#0 COSQ = ((signed byte*))(word/signed word/dword/signed dword) 8704
(byte) LIGHT_BLUE
(const byte) LIGHT_BLUE#0 LIGHT_BLUE = (byte/signed byte/word/signed word/dword/signed dword) 14
(byte*) RASTER
(const byte*) RASTER#0 RASTER = ((byte*))(word/dword/signed dword) 53266
(signed byte*) SINH
(const signed byte*) SINH#0 SINH = (const signed byte*) COSH#0+(byte/signed byte/word/signed word/dword/signed dword) 64
(signed byte*) SINQ
(const signed byte*) SINQ#0 SINQ = (const signed byte*) COSQ#0+(byte/signed byte/word/signed word/dword/signed dword) 64
(void()) main()
(label) main::@13
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@4
(label) main::@6
(byte*) main::SCREEN
(const byte*) main::SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) 1024
(void()) mulf_init()
(byte~) mulf_init::$0 reg byte a 22.0
(byte~) mulf_init::$1 reg byte y 11.0
(byte~) mulf_init::$2 reg byte a 22.0
(byte~) mulf_init::$4 reg byte a 22.0
(byte/signed word/word/dword/signed dword~) mulf_init::$5 reg byte y 11.0
(byte~) mulf_init::$6 reg byte a 22.0
(label) mulf_init::@1
(label) mulf_init::@return
(signed word) mulf_init::add
(signed word) mulf_init::add#1 add zp ZP_WORD:5 7.333333333333333
(signed word) mulf_init::add#2 add zp ZP_WORD:5 2.75
(byte) mulf_init::i
(byte) mulf_init::i#1 reg byte x 16.5
(byte) mulf_init::i#2 reg byte x 5.076923076923077
(signed word) mulf_init::sqr1
(signed word) mulf_init::sqr1#1 sqr1 zp ZP_WORD:3 5.5
(signed word) mulf_init::sqr1#2 sqr1 zp ZP_WORD:3 6.0
(byte[512]) mulf_sqr1
(const byte[512]) mulf_sqr1#0 mulf_sqr1 = { fill( 512, 0) }
(byte[512]) mulf_sqr2
(const byte[512]) mulf_sqr2#0 mulf_sqr2 = { fill( 512, 0) }
(void()) prepare_matrix((signed byte) prepare_matrix::sx , (signed byte) prepare_matrix::sy , (signed byte) prepare_matrix::sz)
(signed byte~) prepare_matrix::$10 reg byte a 4.0
(signed byte~) prepare_matrix::$11 reg byte a 4.0
(signed byte~) prepare_matrix::$12 reg byte a 4.0
(signed byte~) prepare_matrix::$13 $13 zp ZP_BYTE:2 4.0
(signed byte~) prepare_matrix::$14 reg byte a 4.0
(signed byte~) prepare_matrix::$15 $15 zp ZP_BYTE:2 4.0
(signed byte~) prepare_matrix::$16 reg byte a 4.0
(signed byte~) prepare_matrix::$17 reg byte a 4.0
(signed byte~) prepare_matrix::$18 $18 zp ZP_BYTE:2 4.0
(signed byte~) prepare_matrix::$19 reg byte a 4.0
(signed byte~) prepare_matrix::$20 reg byte a 4.0
(signed byte~) prepare_matrix::$21 reg byte a 4.0
(signed byte~) prepare_matrix::$22 reg byte a 4.0
(signed byte~) prepare_matrix::$23 reg byte a 4.0
(signed byte~) prepare_matrix::$24 $24 zp ZP_BYTE:2 4.0
(signed byte~) prepare_matrix::$25 reg byte a 4.0
(signed byte~) prepare_matrix::$26 reg byte a 4.0
(signed byte~) prepare_matrix::$27 reg byte a 4.0
(signed byte~) prepare_matrix::$28 reg byte a 4.0
(signed byte~) prepare_matrix::$29 $29 zp ZP_BYTE:2 4.0
(signed byte~) prepare_matrix::$30 reg byte a 4.0
(signed byte~) prepare_matrix::$31 $31 zp ZP_BYTE:2 4.0
(signed byte~) prepare_matrix::$32 reg byte a 4.0
(signed byte~) prepare_matrix::$33 reg byte a 4.0
(signed byte~) prepare_matrix::$34 reg byte a 4.0
(label) prepare_matrix::@return
(signed byte) prepare_matrix::sx
(const signed byte) prepare_matrix::sx#0 sx = (byte/signed byte/word/signed word/dword/signed dword) 0
(signed byte) prepare_matrix::sy
(const signed byte) prepare_matrix::sy#0 sy = (byte/signed byte/word/signed word/dword/signed dword) 0
(signed byte) prepare_matrix::sz
(const signed byte) prepare_matrix::sz#0 sz = (byte/signed byte/word/signed word/dword/signed dword) 0
(signed byte) prepare_matrix::t1
(const signed byte) prepare_matrix::t1#0 t1 = (const signed byte) prepare_matrix::sy#0-(const signed byte) prepare_matrix::sz#0
(signed byte) prepare_matrix::t10
(const signed byte) prepare_matrix::t10#0 t10 = (const signed byte) prepare_matrix::sy#0+(const signed byte) prepare_matrix::sx#0
(signed byte) prepare_matrix::t2
(const signed byte) prepare_matrix::t2#0 t2 = (const signed byte) prepare_matrix::sy#0+(const signed byte) prepare_matrix::sz#0
(signed byte) prepare_matrix::t3
(const signed byte) prepare_matrix::t3#0 t3 = (const signed byte) prepare_matrix::sx#0+(const signed byte) prepare_matrix::sz#0
(signed byte) prepare_matrix::t4
(const signed byte) prepare_matrix::t4#0 t4 = (const signed byte) prepare_matrix::sx#0-(const signed byte) prepare_matrix::sz#0
(signed byte) prepare_matrix::t5
(const signed byte) prepare_matrix::t5#0 t5 = (const signed byte) prepare_matrix::sx#0+(const signed byte) prepare_matrix::t2#0
(signed byte) prepare_matrix::t6
(const signed byte) prepare_matrix::t6#0 t6 = (const signed byte) prepare_matrix::sx#0-(const signed byte) prepare_matrix::t1#0
(signed byte) prepare_matrix::t7
(const signed byte) prepare_matrix::t7#0 t7 = (const signed byte) prepare_matrix::sx#0+(const signed byte) prepare_matrix::t1#0
(signed byte) prepare_matrix::t8
(const signed byte) prepare_matrix::t8#0 t8 = (const signed byte) prepare_matrix::t2#0-(const signed byte) prepare_matrix::sx#0
(signed byte) prepare_matrix::t9
(const signed byte) prepare_matrix::t9#0 t9 = (const signed byte) prepare_matrix::sy#0-(const signed byte) prepare_matrix::sx#0
(void()) rotate((signed byte) rotate::x , (signed byte) rotate::y , (signed byte) rotate::z)
(label) rotate::@return
(signed byte) rotate::x
(signed byte) rotate::x#3 reg byte y 2.0
(signed byte) rotate::y
(signed byte) rotate::y#3 reg byte x 1.0
(signed byte) rotate::z
(signed byte) rotate::z#3 z zp ZP_BYTE:2 0.6666666666666666
(signed byte[9]) rotation_matrix
(const signed byte[9]) rotation_matrix#0 rotation_matrix = { fill( 9, 0) }
(signed byte*) xr
(const signed byte*) xr#0 xr = ((signed byte*))(byte/word/signed word/dword/signed dword) 240
(signed byte*) yr
(const signed byte*) yr#0 yr = ((signed byte*))(byte/word/signed word/dword/signed dword) 241
(signed byte*) zr
(const signed byte*) zr#0 zr = ((signed byte*))(byte/word/signed word/dword/signed dword) 242

reg byte y [ rotate::x#3 ]
reg byte x [ rotate::y#3 ]
zp ZP_BYTE:2 [ rotate::z#3 prepare_matrix::$13 prepare_matrix::$15 prepare_matrix::$18 prepare_matrix::$24 prepare_matrix::$29 prepare_matrix::$31 ]
zp ZP_WORD:3 [ mulf_init::sqr1#2 mulf_init::sqr1#1 ]
reg byte x [ mulf_init::i#2 mulf_init::i#1 ]
zp ZP_WORD:5 [ mulf_init::add#2 mulf_init::add#1 ]
reg byte a [ prepare_matrix::$10 ]
reg byte a [ prepare_matrix::$11 ]
reg byte a [ prepare_matrix::$12 ]
reg byte a [ prepare_matrix::$14 ]
reg byte a [ prepare_matrix::$16 ]
reg byte a [ prepare_matrix::$17 ]
reg byte a [ prepare_matrix::$19 ]
reg byte a [ prepare_matrix::$20 ]
reg byte a [ prepare_matrix::$21 ]
reg byte a [ prepare_matrix::$22 ]
reg byte a [ prepare_matrix::$23 ]
reg byte a [ prepare_matrix::$25 ]
reg byte a [ prepare_matrix::$26 ]
reg byte a [ prepare_matrix::$27 ]
reg byte a [ prepare_matrix::$28 ]
reg byte a [ prepare_matrix::$30 ]
reg byte a [ prepare_matrix::$32 ]
reg byte a [ prepare_matrix::$33 ]
reg byte a [ prepare_matrix::$34 ]
reg byte a [ mulf_init::$0 ]
reg byte y [ mulf_init::$1 ]
reg byte a [ mulf_init::$2 ]
reg byte a [ mulf_init::$4 ]
reg byte y [ mulf_init::$5 ]
reg byte a [ mulf_init::$6 ]


FINAL ASSEMBLER
Score: 4197

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .const LIGHT_BLUE = $e
  .label COSH = $2000
  .label COSQ = $2200
  .label xr = $f0
  .label yr = $f1
  .label zr = $f2
  .label SINH = COSH+$40
  .label SINQ = COSQ+$40
//SEG2 @begin
//SEG3 @3
//SEG4 kickasm(location (const signed byte*) COSH#0) {{ {     .var min = -$1fff     .var max = $1fff     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))     }     }  }}
//SEG5 kickasm(location (const signed byte*) COSQ#0) {{ {     .var min = -$0fff     .var max = $0fff     .var ampl = max-min;     .for(var i=0;i<$140;i++) {         .var rad = i*2*PI/256;         .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))     }     }  }}
//SEG6 [3] phi from @3 to @7 [phi:@3->@7]
//SEG7 @7
//SEG8 [4] call main  [ ] ( )
  jsr main
//SEG9 [5] phi from @7 to @end [phi:@7->@end]
//SEG10 @end
//SEG11 main
main: {
    .label SCREEN = $400
  //SEG12 asm { sei  }
    sei
  //SEG13 [7] call mulf_init  [ ] ( main:4 [ ] )
  //SEG14 [69] phi from main to mulf_init [phi:main->mulf_init]
    jsr mulf_init
  //SEG15 [8] phi from main to main::@13 [phi:main->main::@13]
  //SEG16 main::@13
  //SEG17 [9] call prepare_matrix  [ ] ( main:4 [ ] )
    jsr prepare_matrix
  //SEG18 main::@4
  b4:
  //SEG19 [10] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4 [ ] ( main:4 [ ] ) -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
  //SEG20 main::@6
  //SEG21 [11] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG22 [12] call rotate  [ ] ( main:4 [ ] )
  //SEG23 [27] phi from main::@6 to rotate [phi:main::@6->rotate]
  //SEG24 [27] phi (signed byte) rotate::z#3 = (byte/signed byte/word/signed word/dword/signed dword) 63 [phi:main::@6->rotate#0] -- vbsz1=vbuc1 
    lda #$3f
    sta rotate.z
  //SEG25 [27] phi (signed byte) rotate::y#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@6->rotate#1] -- vbsxx=vbuc1 
    lda #0
    tax
  //SEG26 [27] phi (signed byte) rotate::x#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@6->rotate#2] -- vbsyy=vbuc1 
    tay
    jsr rotate
  //SEG27 main::@15
  //SEG28 [13] *((const byte*) main::SCREEN#0) ← (byte)*((const signed byte*) xr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda xr
    sta SCREEN
  //SEG29 [14] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte)*((const signed byte*) yr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda yr
    sta SCREEN+1
  //SEG30 [15] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte)*((const signed byte*) zr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda zr
    sta SCREEN+2
  //SEG31 [16] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG32 [17] call rotate  [ ] ( main:4 [ ] )
  //SEG33 [27] phi from main::@15 to rotate [phi:main::@15->rotate]
  //SEG34 [27] phi (signed byte) rotate::z#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@15->rotate#0] -- vbsz1=vbuc1 
    lda #0
    sta rotate.z
  //SEG35 [27] phi (signed byte) rotate::y#3 = (byte/signed byte/word/signed word/dword/signed dword) 63 [phi:main::@15->rotate#1] -- vbsxx=vbuc1 
    lda #$3f
    tax
  //SEG36 [27] phi (signed byte) rotate::x#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@15->rotate#2] -- vbsyy=vbuc1 
    lda #0
    tay
    jsr rotate
  //SEG37 main::@16
  //SEG38 [18] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 40) ← (byte)*((const signed byte*) xr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda xr
    sta SCREEN+$28
  //SEG39 [19] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 41) ← (byte)*((const signed byte*) yr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda yr
    sta SCREEN+$29
  //SEG40 [20] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 42) ← (byte)*((const signed byte*) zr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda zr
    sta SCREEN+$2a
  //SEG41 [21] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG42 [22] call rotate  [ ] ( main:4 [ ] )
  //SEG43 [27] phi from main::@16 to rotate [phi:main::@16->rotate]
  //SEG44 [27] phi (signed byte) rotate::z#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@16->rotate#0] -- vbsz1=vbuc1 
    lda #0
    sta rotate.z
  //SEG45 [27] phi (signed byte) rotate::y#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@16->rotate#1] -- vbsxx=vbuc1 
    tax
  //SEG46 [27] phi (signed byte) rotate::x#3 = (byte/signed byte/word/signed word/dword/signed dword) 63 [phi:main::@16->rotate#2] -- vbsyy=vbuc1 
    lda #$3f
    tay
    jsr rotate
  //SEG47 main::@17
  //SEG48 [23] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 80) ← (byte)*((const signed byte*) xr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda xr
    sta SCREEN+$50
  //SEG49 [24] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 81) ← (byte)*((const signed byte*) yr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda yr
    sta SCREEN+$51
  //SEG50 [25] *((const byte*) main::SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 82) ← (byte)*((const signed byte*) zr#0) [ ] ( main:4 [ ] ) -- _deref_pbuc1=_deref_pbuc2 
    lda zr
    sta SCREEN+$52
  //SEG51 [26] *((const byte*) BORDERCOL#0) ← (const byte) LIGHT_BLUE#0 [ ] ( main:4 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #LIGHT_BLUE
    sta BORDERCOL
    jmp b4
}
//SEG52 rotate
rotate: {
    .label z = 2
  //SEG53 [28] *((const signed byte*) xr#0) ← (signed byte) rotate::x#3 [ rotate::y#3 rotate::z#3 ] ( main:4::rotate:12 [ rotate::y#3 rotate::z#3 ] main:4::rotate:17 [ rotate::y#3 rotate::z#3 ] main:4::rotate:22 [ rotate::y#3 rotate::z#3 ] ) -- _deref_pbsc1=vbsyy 
    tya
    sta xr
  //SEG54 [29] *((const signed byte*) yr#0) ← (signed byte) rotate::y#3 [ rotate::z#3 ] ( main:4::rotate:12 [ rotate::z#3 ] main:4::rotate:17 [ rotate::z#3 ] main:4::rotate:22 [ rotate::z#3 ] ) -- _deref_pbsc1=vbsxx 
    txa
    sta yr
  //SEG55 [30] *((const signed byte*) zr#0) ← (signed byte) rotate::z#3 [ ] ( main:4::rotate:12 [ ] main:4::rotate:17 [ ] main:4::rotate:22 [ ] ) -- _deref_pbsc1=vbsz1 
    lda z
    sta zr
  //SEG56 asm { clc ldxzr lda#$80 C1: adcmulf_sqr1,x C2: sbcmulf_sqr2,x staC3+1 lda#$80 F1: adcmulf_sqr1,x F2: sbcmulf_sqr2,x staF3+1 lda#$80 I1: adcmulf_sqr1,x I2: sbcmulf_sqr2,x staI3+1 ldxxr ldyyr C3: lda#0 A1: adcmulf_sqr1,x A2: sbcmulf_sqr2,x B1: adcmulf_sqr1,y B2: sbcmulf_sqr2,y staxr F3: lda#0 D1: adcmulf_sqr1,x D2: sbcmulf_sqr2,x E1: adcmulf_sqr1,y E2: sbcmulf_sqr2,y stayr I3: lda#0 G1: adcmulf_sqr1,x G2: sbcmulf_sqr2,x H1: adcmulf_sqr1,y H2: sbcmulf_sqr2,y stazr  }
    clc
    tax
    lda #$80
  C1:
    adc mulf_sqr1,x
  C2:
    sbc mulf_sqr2,x
    sta C3+1
    lda #$80
  F1:
    adc mulf_sqr1,x
  F2:
    sbc mulf_sqr2,x
    sta F3+1
    lda #$80
  I1:
    adc mulf_sqr1,x
  I2:
    sbc mulf_sqr2,x
    sta I3+1
    ldx xr
    ldy yr
  C3:
    lda #0
  A1:
    adc mulf_sqr1,x
  A2:
    sbc mulf_sqr2,x
  B1:
    adc mulf_sqr1,y
  B2:
    sbc mulf_sqr2,y
    sta xr
  F3:
    lda #0
  D1:
    adc mulf_sqr1,x
  D2:
    sbc mulf_sqr2,x
  E1:
    adc mulf_sqr1,y
  E2:
    sbc mulf_sqr2,y
    sta yr
  I3:
    lda #0
  G1:
    adc mulf_sqr1,x
  G2:
    sbc mulf_sqr2,x
  H1:
    adc mulf_sqr1,y
  H2:
    sbc mulf_sqr2,y
    sta zr
  //SEG57 rotate::@return
  //SEG58 [32] return  [ ] ( main:4::rotate:12 [ ] main:4::rotate:17 [ ] main:4::rotate:22 [ ] )
    rts
}
//SEG59 prepare_matrix
prepare_matrix: {
    .const sx = 0
    .const sy = 0
    .const sz = 0
    .const t1 = sy-sz
    .const t2 = sy+sz
    .const t3 = sx+sz
    .const t4 = sx-sz
    .const t9 = sy-sx
    .const t10 = sy+sx
    .const t5 = sx+t2
    .const t6 = sx-t1
    .const t7 = sx+t1
    .const t8 = t2-sx
    .label _13 = 2
    .label _15 = 2
    .label _18 = 2
    .label _24 = 2
    .label _29 = 2
    .label _31 = 2
  //SEG60 [33] (signed byte~) prepare_matrix::$10 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t1#0) + *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t2#0) [ prepare_matrix::$10 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$10 ] ) -- vbsaa=_deref_pbsc1_plus__deref_pbsc2 
    lda COSH+t1
    ldy COSH+t2
    sty $ff
    clc
    adc $ff
  //SEG61 [34] *((const signed byte[9]) rotation_matrix#0) ← (signed byte~) prepare_matrix::$10 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix
  //SEG62 [35] (signed byte~) prepare_matrix::$11 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t1#0) - *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t2#0) [ prepare_matrix::$11 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$11 ] ) -- vbsaa=_deref_pbsc1_minus__deref_pbsc2 
    lda SINH+t1
    ldy SINH+t2
    sty $ff
    sec
    sbc $ff
  //SEG63 [36] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (signed byte~) prepare_matrix::$11 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+1
  //SEG64 [37] (signed byte~) prepare_matrix::$12 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::sy#0) + *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::sy#0) [ prepare_matrix::$12 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$12 ] ) -- vbsaa=_deref_pbsc1_plus__deref_pbsc2 
    lda SINH+sy
    tay
    sty $ff
    clc
    adc $ff
  //SEG65 [38] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (signed byte~) prepare_matrix::$12 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+2
  //SEG66 [39] (signed byte~) prepare_matrix::$13 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t3#0) - *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t4#0) [ prepare_matrix::$13 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$13 ] ) -- vbsz1=_deref_pbsc1_minus__deref_pbsc2 
    lda SINH+t3
    ldy SINH+t4
    sty $ff
    sec
    sbc $ff
    sta _13
  //SEG67 [40] (signed byte~) prepare_matrix::$14 ← (signed byte~) prepare_matrix::$13 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$14 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$14 ] ) -- vbsaa=vbsz1_plus__deref_pbsc1 
    lda COSQ+t6
    clc
    adc _13
  //SEG68 [41] (signed byte~) prepare_matrix::$15 ← (signed byte~) prepare_matrix::$14 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$15 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$15 ] ) -- vbsz1=vbsaa_minus__deref_pbsc1 
    ldy COSQ+t5
    sty $ff
    sec
    sbc $ff
    sta _15
  //SEG69 [42] (signed byte~) prepare_matrix::$16 ← (signed byte~) prepare_matrix::$15 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$16 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$16 ] ) -- vbsaa=vbsz1_plus__deref_pbsc1 
    lda COSQ+t8
    clc
    adc _15
  //SEG70 [43] (signed byte~) prepare_matrix::$17 ← (signed byte~) prepare_matrix::$16 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$17 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$17 ] ) -- vbsaa=vbsaa_minus__deref_pbsc1 
    ldy COSQ+t7
    sty $ff
    sec
    sbc $ff
  //SEG71 [44] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (signed byte~) prepare_matrix::$17 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+3
  //SEG72 [45] (signed byte~) prepare_matrix::$18 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t3#0) + *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t4#0) [ prepare_matrix::$18 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$18 ] ) -- vbsz1=_deref_pbsc1_plus__deref_pbsc2 
    lda COSH+t3
    ldy COSH+t4
    sty $ff
    clc
    adc $ff
    sta _18
  //SEG73 [46] (signed byte~) prepare_matrix::$19 ← (signed byte~) prepare_matrix::$18 + *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$19 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$19 ] ) -- vbsaa=vbsz1_plus__deref_pbsc1 
    lda SINQ+t5
    clc
    adc _18
  //SEG74 [47] (signed byte~) prepare_matrix::$20 ← (signed byte~) prepare_matrix::$19 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$20 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$20 ] ) -- vbsaa=vbsaa_minus__deref_pbsc1 
    ldy SINQ+t6
    sty $ff
    sec
    sbc $ff
  //SEG75 [48] (signed byte~) prepare_matrix::$21 ← (signed byte~) prepare_matrix::$20 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$21 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$21 ] ) -- vbsaa=vbsaa_minus__deref_pbsc1 
    ldy SINQ+t7
    sty $ff
    sec
    sbc $ff
  //SEG76 [49] (signed byte~) prepare_matrix::$22 ← (signed byte~) prepare_matrix::$21 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$22 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$22 ] ) -- vbsaa=vbsaa_minus__deref_pbsc1 
    ldy SINQ+t8
    sty $ff
    sec
    sbc $ff
  //SEG77 [50] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (signed byte~) prepare_matrix::$22 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+4
  //SEG78 [51] (signed byte~) prepare_matrix::$23 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t9#0) - *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t10#0) [ prepare_matrix::$23 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$23 ] ) -- vbsaa=_deref_pbsc1_minus__deref_pbsc2 
    lda SINH+t9
    ldy SINH+t10
    sty $ff
    sec
    sbc $ff
  //SEG79 [52] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 5) ← (signed byte~) prepare_matrix::$23 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+5
  //SEG80 [53] (signed byte~) prepare_matrix::$24 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t4#0) - *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t3#0) [ prepare_matrix::$24 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$24 ] ) -- vbsz1=_deref_pbsc1_minus__deref_pbsc2 
    lda COSH+t4
    ldy COSH+t3
    sty $ff
    sec
    sbc $ff
    sta _24
  //SEG81 [54] (signed byte~) prepare_matrix::$25 ← (signed byte~) prepare_matrix::$24 + *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$25 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$25 ] ) -- vbsaa=vbsz1_plus__deref_pbsc1 
    lda SINQ+t6
    clc
    adc _24
  //SEG82 [55] (signed byte~) prepare_matrix::$26 ← (signed byte~) prepare_matrix::$25 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$26 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$26 ] ) -- vbsaa=vbsaa_minus__deref_pbsc1 
    ldy SINQ+t5
    sty $ff
    sec
    sbc $ff
  //SEG83 [56] (signed byte~) prepare_matrix::$27 ← (signed byte~) prepare_matrix::$26 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$27 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$27 ] ) -- vbsaa=vbsaa_minus__deref_pbsc1 
    ldy SINQ+t8
    sty $ff
    sec
    sbc $ff
  //SEG84 [57] (signed byte~) prepare_matrix::$28 ← (signed byte~) prepare_matrix::$27 - *((const signed byte*) SINQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$28 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$28 ] ) -- vbsaa=vbsaa_minus__deref_pbsc1 
    ldy SINQ+t7
    sty $ff
    sec
    sbc $ff
  //SEG85 [58] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (signed byte~) prepare_matrix::$28 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+6
  //SEG86 [59] (signed byte~) prepare_matrix::$29 ← *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t3#0) + *((const signed byte*) SINH#0+(const signed byte) prepare_matrix::t4#0) [ prepare_matrix::$29 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$29 ] ) -- vbsz1=_deref_pbsc1_plus__deref_pbsc2 
    lda SINH+t3
    ldy SINH+t4
    sty $ff
    clc
    adc $ff
    sta _29
  //SEG87 [60] (signed byte~) prepare_matrix::$30 ← (signed byte~) prepare_matrix::$29 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t6#0) [ prepare_matrix::$30 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$30 ] ) -- vbsaa=vbsz1_plus__deref_pbsc1 
    lda COSQ+t6
    clc
    adc _29
  //SEG88 [61] (signed byte~) prepare_matrix::$31 ← (signed byte~) prepare_matrix::$30 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t5#0) [ prepare_matrix::$31 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$31 ] ) -- vbsz1=vbsaa_minus__deref_pbsc1 
    ldy COSQ+t5
    sty $ff
    sec
    sbc $ff
    sta _31
  //SEG89 [62] (signed byte~) prepare_matrix::$32 ← (signed byte~) prepare_matrix::$31 + *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t7#0) [ prepare_matrix::$32 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$32 ] ) -- vbsaa=vbsz1_plus__deref_pbsc1 
    lda COSQ+t7
    clc
    adc _31
  //SEG90 [63] (signed byte~) prepare_matrix::$33 ← (signed byte~) prepare_matrix::$32 - *((const signed byte*) COSQ#0+(const signed byte) prepare_matrix::t8#0) [ prepare_matrix::$33 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$33 ] ) -- vbsaa=vbsaa_minus__deref_pbsc1 
    ldy COSQ+t8
    sty $ff
    sec
    sbc $ff
  //SEG91 [64] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 7) ← (signed byte~) prepare_matrix::$33 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+7
  //SEG92 [65] (signed byte~) prepare_matrix::$34 ← *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t9#0) + *((const signed byte*) COSH#0+(const signed byte) prepare_matrix::t10#0) [ prepare_matrix::$34 ] ( main:4::prepare_matrix:9 [ prepare_matrix::$34 ] ) -- vbsaa=_deref_pbsc1_plus__deref_pbsc2 
    lda COSH+t9
    ldy COSH+t10
    sty $ff
    clc
    adc $ff
  //SEG93 [66] *((const signed byte[9]) rotation_matrix#0+(byte/signed byte/word/signed word/dword/signed dword) 8) ← (signed byte~) prepare_matrix::$34 [ ] ( main:4::prepare_matrix:9 [ ] ) -- _deref_pbsc1=vbsaa 
    sta rotation_matrix+8
  //SEG94 asm { ldarotation_matrix+0 starotate.A1+1 eor#$ff starotate.A2+1 ldarotation_matrix+1 starotate.B1+1 eor#$ff starotate.B2+1 ldarotation_matrix+2 starotate.C1+1 eor#$ff starotate.C2+1 ldarotation_matrix+3 starotate.D1+1 eor#$ff starotate.D2+1 ldarotation_matrix+4 starotate.E1+1 eor#$ff starotate.E2+1 ldarotation_matrix+5 starotate.F1+1 eor#$ff starotate.F2+1 ldarotation_matrix+6 starotate.G1+1 eor#$ff starotate.G2+1 ldarotation_matrix+7 starotate.H1+1 eor#$ff starotate.H2+1 ldarotation_matrix+8 starotate.I1+1 eor#$ff starotate.I2+1  }
    lda rotation_matrix+0
    sta rotate.A1+1
    eor #$ff
    sta rotate.A2+1
    lda rotation_matrix+1
    sta rotate.B1+1
    eor #$ff
    sta rotate.B2+1
    lda rotation_matrix+2
    sta rotate.C1+1
    eor #$ff
    sta rotate.C2+1
    lda rotation_matrix+3
    sta rotate.D1+1
    eor #$ff
    sta rotate.D2+1
    lda rotation_matrix+4
    sta rotate.E1+1
    eor #$ff
    sta rotate.E2+1
    lda rotation_matrix+5
    sta rotate.F1+1
    eor #$ff
    sta rotate.F2+1
    lda rotation_matrix+6
    sta rotate.G1+1
    eor #$ff
    sta rotate.G2+1
    lda rotation_matrix+7
    sta rotate.H1+1
    eor #$ff
    sta rotate.H2+1
    lda rotation_matrix+8
    sta rotate.I1+1
    eor #$ff
    sta rotate.I2+1
  //SEG95 prepare_matrix::@return
  //SEG96 [68] return  [ ] ( main:4::prepare_matrix:9 [ ] )
    rts
}
//SEG97 mulf_init
mulf_init: {
    .label sqr1 = 3
    .label add = 5
  //SEG98 [70] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
  //SEG99 [70] phi (signed word) mulf_init::add#2 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:mulf_init->mulf_init::@1#0] -- vwsz1=vbuc1 
    lda #<1
    sta add
    lda #>1
    sta add+1
  //SEG100 [70] phi (byte) mulf_init::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#1] -- vbuxx=vbuc1 
    tax
  //SEG101 [70] phi (signed word) mulf_init::sqr1#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:mulf_init->mulf_init::@1#2] -- vwsz1=vbuc1 
    sta sqr1
    sta sqr1+1
  //SEG102 [70] phi from mulf_init::@1 to mulf_init::@1 [phi:mulf_init::@1->mulf_init::@1]
  //SEG103 [70] phi (signed word) mulf_init::add#2 = (signed word) mulf_init::add#1 [phi:mulf_init::@1->mulf_init::@1#0] -- register_copy 
  //SEG104 [70] phi (byte) mulf_init::i#2 = (byte) mulf_init::i#1 [phi:mulf_init::@1->mulf_init::@1#1] -- register_copy 
  //SEG105 [70] phi (signed word) mulf_init::sqr1#2 = (signed word) mulf_init::sqr1#1 [phi:mulf_init::@1->mulf_init::@1#2] -- register_copy 
  //SEG106 mulf_init::@1
  b1:
  //SEG107 [71] (byte~) mulf_init::$0 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$0 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$0 ] ) -- vbuaa=_hi_vwsz1 
    lda sqr1+1
  //SEG108 [72] *((const byte[512]) mulf_sqr1#0 + (byte) mulf_init::i#2) ← (byte~) mulf_init::$0 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta mulf_sqr1,x
  //SEG109 [73] (byte~) mulf_init::$1 ← - (byte) mulf_init::i#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 ] ) -- vbuyy=_neg_vbuxx 
    txa
    eor #$ff
    clc
    adc #1
    tay
  //SEG110 [74] (byte~) mulf_init::$2 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 mulf_init::$2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$1 mulf_init::$2 ] ) -- vbuaa=_hi_vwsz1 
    lda sqr1+1
  //SEG111 [75] *((const byte[512]) mulf_sqr1#0 + (byte~) mulf_init::$1) ← (byte~) mulf_init::$2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ) -- pbuc1_derefidx_vbuyy=vbuaa 
    sta mulf_sqr1,y
  //SEG112 [76] (byte~) mulf_init::$4 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$4 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$4 ] ) -- vbuaa=_hi_vwsz1 
  //SEG113 [77] *((const byte[512]) mulf_sqr2#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) mulf_init::i#2) ← (byte~) mulf_init::$4 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ) -- pbuc1_derefidx_vbuxx=vbuaa 
    sta mulf_sqr2+1,x
  //SEG114 [78] (byte/signed word/word/dword/signed dword~) mulf_init::$5 ← (byte/signed byte/word/signed word/dword/signed dword) 1 - (byte) mulf_init::i#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 ] ) -- vbuyy=vbuc1_minus_vbuxx 
    txa
    eor #$ff
    clc
    adc #1+1
    tay
  //SEG115 [79] (byte~) mulf_init::$6 ← > (signed word) mulf_init::sqr1#2 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 mulf_init::$6 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 mulf_init::$5 mulf_init::$6 ] ) -- vbuaa=_hi_vwsz1 
    lda sqr1+1
  //SEG116 [80] *((const byte[512]) mulf_sqr2#0 + (byte/signed word/word/dword/signed dword~) mulf_init::$5) ← (byte~) mulf_init::$6 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#2 mulf_init::i#2 mulf_init::add#2 ] ) -- pbuc1_derefidx_vbuyy=vbuaa 
    sta mulf_sqr2,y
  //SEG117 [81] (signed word) mulf_init::sqr1#1 ← (signed word) mulf_init::sqr1#2 + (signed word) mulf_init::add#2 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr1#1 ] ( main:4::mulf_init:7 [ mulf_init::i#2 mulf_init::add#2 mulf_init::sqr1#1 ] ) -- vwsz1=vwsz1_plus_vwsz2 
    lda sqr1
    clc
    adc add
    sta sqr1
    lda sqr1+1
    adc add+1
    sta sqr1+1
  //SEG118 [82] (signed word) mulf_init::add#1 ← (signed word) mulf_init::add#2 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ mulf_init::i#2 mulf_init::sqr1#1 mulf_init::add#1 ] ( main:4::mulf_init:7 [ mulf_init::i#2 mulf_init::sqr1#1 mulf_init::add#1 ] ) -- vwsz1=vwsz1_plus_2 
    lda add
    clc
    adc #2
    sta add
    bcc !+
    inc add+1
  !:
  //SEG119 [83] (byte) mulf_init::i#1 ← ++ (byte) mulf_init::i#2 [ mulf_init::sqr1#1 mulf_init::i#1 mulf_init::add#1 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#1 mulf_init::i#1 mulf_init::add#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG120 [84] if((byte) mulf_init::i#1!=(byte/word/signed word/dword/signed dword) 129) goto mulf_init::@1 [ mulf_init::sqr1#1 mulf_init::i#1 mulf_init::add#1 ] ( main:4::mulf_init:7 [ mulf_init::sqr1#1 mulf_init::i#1 mulf_init::add#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$81
    bne b1
  //SEG121 mulf_init::@return
  //SEG122 [85] return  [ ] ( main:4::mulf_init:7 [ ] )
    rts
}
  .align $100
  mulf_sqr1: .fill $200, 0
  .align $100
  mulf_sqr2: .fill $200, 0
  rotation_matrix: .fill 9, 0
.pc = COSH "Inline"
  {
    .var min = -$1fff
    .var max = $1fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }

.pc = COSQ "Inline"
  {
    .var min = -$0fff
    .var max = $0fff
    .var ampl = max-min;
    .for(var i=0;i<$140;i++) {
        .var rad = i*2*PI/256;
        .byte >round(min+(ampl/2)+(ampl/2)*cos(rad))
    }
    }


