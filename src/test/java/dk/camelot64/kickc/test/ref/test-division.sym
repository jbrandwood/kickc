(label) @17
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) 1024
(byte*) char_cursor
(byte*) char_cursor#1 char_cursor zp ZP_WORD:10 101.0
(byte*) char_cursor#126 char_cursor zp ZP_WORD:10 15.607142857142856
(byte*) char_cursor#128 char_cursor zp ZP_WORD:10 3.0
(byte*) char_cursor#129 char_cursor zp ZP_WORD:10 15.999999999999998
(byte*) char_cursor#130 char_cursor zp ZP_WORD:10 3.0
(byte*) char_cursor#131 char_cursor zp ZP_WORD:10 15.999999999999998
(byte*) char_cursor#132 char_cursor zp ZP_WORD:10 24.0
(byte*) char_cursor#133 char_cursor zp ZP_WORD:10 17.333333333333332
(byte*) char_cursor#135 char_cursor zp ZP_WORD:10 2.4444444444444446
(byte*~) char_cursor#155 char_cursor zp ZP_WORD:10 22.0
(byte*~) char_cursor#162 char_cursor zp ZP_WORD:10 22.0
(byte*) char_cursor#17 char_cursor zp ZP_WORD:10 2.0178571428571432
(byte*~) char_cursor#179 char_cursor zp ZP_WORD:10 22.0
(byte*~) char_cursor#185 char_cursor zp ZP_WORD:10 22.0
(byte*) char_cursor#80 char_cursor zp ZP_WORD:10 6.0
(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
(signed word~) div16s::$2 $2 zp ZP_WORD:10 2.0
(signed word~) div16s::$7 $7 zp ZP_WORD:12 1.0
(label) div16s::@15
(label) div16s::@16
(label) div16s::@17
(label) div16s::@18
(label) div16s::@2
(label) div16s::@4
(label) div16s::@5
(label) div16s::@7
(label) div16s::@9
(label) div16s::@return
(signed word) div16s::dividend
(signed word) div16s::dividend#0 dividend zp ZP_WORD:7 5.0
(word) div16s::dividendu
(word) div16s::dividendu#3 dividendu zp ZP_WORD:10 0.8571428571428571
(word~) div16s::dividendu#7 dividendu zp ZP_WORD:10 4.0
(word~) div16s::dividendu#8 dividendu zp ZP_WORD:10 4.0
(signed word) div16s::divisor
(signed word) div16s::divisor#0 divisor zp ZP_WORD:12 2.142857142857143
(word) div16s::divisoru
(word) div16s::divisoru#3 divisoru zp ZP_WORD:12 3.0
(word~) div16s::divisoru#4 divisoru zp ZP_WORD:12 4.0
(word~) div16s::divisoru#5 divisoru zp ZP_WORD:12 4.0
(byte) div16s::neg
(byte) div16s::neg#2 reg byte y 2.0
(byte) div16s::neg#3 reg byte y 1.0
(byte) div16s::neg#4 reg byte y 1.0
(word) div16s::resultu
(word) div16s::resultu#0 resultu zp ZP_WORD:14 0.6666666666666666
(signed word) div16s::return
(signed word) div16s::return#0 return zp ZP_WORD:14 4.0
(signed word) div16s::return#2 return zp ZP_WORD:14 5.0
(signed word) div16s::return#3 return zp ZP_WORD:14 22.0
(signed word~) div16s::return#6 return zp ZP_WORD:14 2.0
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(byte~) div16u::$1 reg byte a 202.0
(byte~) div16u::$2 reg byte a 202.0
(label) div16u::@1
(label) div16u::@2
(label) div16u::@3
(label) div16u::@4
(label) div16u::@5
(label) div16u::@6
(label) div16u::@return
(word) div16u::dividend
(word) div16u::dividend#0 dividend zp ZP_WORD:10 25.25
(word) div16u::dividend#1 dividend zp ZP_WORD:10 2.0
(word) div16u::dividend#2 dividend zp ZP_WORD:10 11.0
(word) div16u::dividend#3 dividend zp ZP_WORD:10 43.57142857142858
(word) div16u::dividend#5 dividend zp ZP_WORD:10 15.0
(word) div16u::divisor
(word) div16u::divisor#0 divisor zp ZP_WORD:12 4.0
(word) div16u::divisor#1 divisor zp ZP_WORD:12 22.0
(word) div16u::divisor#6 divisor zp ZP_WORD:12 13.4375
(byte) div16u::i
(byte) div16u::i#1 reg byte x 151.5
(byte) div16u::i#2 reg byte x 15.538461538461538
(word) div16u::quotient
(word) div16u::quotient#1 quotient zp ZP_WORD:14 151.5
(word) div16u::quotient#2 quotient zp ZP_WORD:14 101.0
(word) div16u::quotient#3 quotient zp ZP_WORD:14 25.25
(word) div16u::rem
(word) div16u::rem#1 rem zp ZP_WORD:3 75.75
(word) div16u::rem#2 rem zp ZP_WORD:3 202.0
(word) div16u::rem#3 rem zp ZP_WORD:3 202.0
(word) div16u::rem#4 rem zp ZP_WORD:3 202.0
(word) div16u::rem#5 rem zp ZP_WORD:3 101.0
(word) div16u::rem#8 rem zp ZP_WORD:3 101.66666666666667
(word) div16u::return
(word) div16u::return#0 return zp ZP_WORD:14 45.142857142857146
(word) div16u::return#2 return zp ZP_WORD:14 4.0
(word) div16u::return#3 return zp ZP_WORD:14 22.0
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(signed byte~) div8s::$2 reg byte a 2.0
(signed byte~) div8s::$7 reg byte x 1.0
(label) div8s::@15
(label) div8s::@16
(label) div8s::@17
(label) div8s::@18
(label) div8s::@2
(label) div8s::@4
(label) div8s::@5
(label) div8s::@7
(label) div8s::@9
(label) div8s::@return
(signed byte) div8s::dividend
(signed byte) div8s::dividend#0 reg byte a 5.0
(byte) div8s::dividendu
(byte) div8s::dividendu#3 reg byte y 0.8571428571428571
(byte~) div8s::dividendu#7 reg byte y 4.0
(byte~) div8s::dividendu#8 reg byte y 4.0
(signed byte) div8s::divisor
(signed byte) div8s::divisor#0 reg byte x 2.142857142857143
(byte) div8s::divisoru
(byte) div8s::divisoru#3 reg byte x 3.0
(byte~) div8s::divisoru#4 reg byte x 4.0
(byte~) div8s::divisoru#5 reg byte x 4.0
(byte) div8s::neg
(byte) div8s::neg#2 neg zp ZP_BYTE:16 2.0
(byte) div8s::neg#3 neg zp ZP_BYTE:16 1.0
(byte) div8s::neg#4 neg zp ZP_BYTE:16 1.0
(byte) div8s::resultu
(byte) div8s::resultu#0 reg byte y 0.6666666666666666
(signed byte) div8s::return
(signed byte) div8s::return#0 reg byte a 4.0
(signed byte) div8s::return#2 reg byte a 5.0
(signed byte) div8s::return#3 reg byte a 22.0
(signed byte~) div8s::return#6 reg byte a 2.0
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(byte~) div8u::$1 reg byte a 202.0
(label) div8u::@1
(label) div8u::@2
(label) div8u::@3
(label) div8u::@4
(label) div8u::@5
(label) div8u::@6
(label) div8u::@return
(byte) div8u::dividend
(byte) div8u::dividend#0 dividend zp ZP_BYTE:18 25.25
(byte) div8u::dividend#1 dividend zp ZP_BYTE:18 2.0
(byte) div8u::dividend#2 dividend zp ZP_BYTE:18 11.0
(byte) div8u::dividend#3 dividend zp ZP_BYTE:18 50.83333333333333
(byte) div8u::dividend#5 dividend zp ZP_BYTE:18 15.0
(byte) div8u::divisor
(byte) div8u::divisor#0 divisor zp ZP_BYTE:17 4.0
(byte) div8u::divisor#1 divisor zp ZP_BYTE:17 22.0
(byte) div8u::divisor#6 divisor zp ZP_BYTE:17 14.333333333333332
(byte) div8u::i
(byte) div8u::i#1 reg byte x 151.5
(byte) div8u::i#2 reg byte x 16.833333333333332
(byte) div8u::quotient
(byte) div8u::quotient#1 quotient zp ZP_BYTE:19 151.5
(byte) div8u::quotient#2 quotient zp ZP_BYTE:19 101.0
(byte) div8u::quotient#3 quotient zp ZP_BYTE:19 28.857142857142858
(byte) div8u::rem
(byte) div8u::rem#1 reg byte y 101.0
(byte) div8u::rem#2 reg byte y 202.0
(byte) div8u::rem#3 reg byte y 202.0
(byte) div8u::rem#4 reg byte y 202.0
(byte) div8u::rem#5 reg byte y 101.0
(byte) div8u::rem#8 reg byte y 101.66666666666667
(byte) div8u::return
(byte) div8u::return#0 return zp ZP_BYTE:19 45.142857142857146
(byte) div8u::return#2 reg byte a 4.0
(byte) div8u::return#3 reg byte a 22.0
(byte*) line_cursor
(byte*) line_cursor#1 line_cursor zp ZP_WORD:5 3.9099999999999993
(byte*) line_cursor#20 line_cursor zp ZP_WORD:5 204.0
(byte*) line_cursor#39 line_cursor zp ZP_WORD:5 46.0
(byte*) line_cursor#41 line_cursor zp ZP_WORD:5 0.9565217391304348
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#1 b zp ZP_BYTE:9 4.0
(byte) print_byte::b#2 b zp ZP_BYTE:9 4.0
(byte) print_byte::b#3 b zp ZP_BYTE:9 22.0
(byte) print_byte::b#4 b zp ZP_BYTE:9 22.0
(byte) print_byte::b#5 b zp ZP_BYTE:9 22.0
(byte) print_byte::b#6 b zp ZP_BYTE:9 22.0
(byte) print_byte::b#7 b zp ZP_BYTE:9 13.5
(byte~) print_byte::b#9 b zp ZP_BYTE:9 4.0
(byte[]) print_byte::hextab
(const string) print_byte::hextab#0 hextab = (string) "0123456789abcdef"
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#2 reg byte a 4.0
(byte) print_char::ch#3 reg byte a 4.0
(byte) print_char::ch#4 reg byte a 6.0
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:3 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:3 16.5
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(label) print_sbyte::@1
(label) print_sbyte::@2
(label) print_sbyte::@4
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0 b zp ZP_BYTE:9 4.0
(signed byte) print_sbyte::b#1 b zp ZP_BYTE:9 11.0
(signed byte) print_sbyte::b#2 b zp ZP_BYTE:9 22.0
(signed byte) print_sbyte::b#3 b zp ZP_BYTE:9 22.0
(signed byte) print_sbyte::b#4 b zp ZP_BYTE:9 22.0
(signed byte) print_sbyte::b#5 b zp ZP_BYTE:9 12.5
(signed byte) print_sbyte::b#6 b zp ZP_BYTE:9 4.0
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp ZP_WORD:7 202.0
(byte*) print_str::str#13 str zp ZP_WORD:7 101.5
(byte*) print_str::str#15 str zp ZP_WORD:7 2.0
(void()) print_sword((signed word) print_sword::w)
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@4
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0 w zp ZP_WORD:7 4.0
(signed word) print_sword::w#1 w zp ZP_WORD:7 11.0
(signed word) print_sword::w#2 w zp ZP_WORD:7 22.0
(signed word) print_sword::w#3 w zp ZP_WORD:7 22.0
(signed word) print_sword::w#4 w zp ZP_WORD:7 22.0
(signed word) print_sword::w#5 w zp ZP_WORD:7 12.5
(signed word) print_sword::w#6 w zp ZP_WORD:7 4.0
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(word) print_word::w#1 w zp ZP_WORD:7 11.0
(word) print_word::w#2 w zp ZP_WORD:7 22.0
(word) print_word::w#3 w zp ZP_WORD:7 22.0
(word) print_word::w#4 w zp ZP_WORD:7 22.0
(word) print_word::w#5 w zp ZP_WORD:7 16.666666666666664
(word~) print_word::w#7 w zp ZP_WORD:7 4.0
(signed word) rem16s
(signed word) rem16s#1 rem16s zp ZP_WORD:3 2.0
(signed word) rem16s#17 rem16s zp ZP_WORD:3 110.0
(signed word) rem16s#3 rem16s zp ZP_WORD:3 1.0833333333333333
(signed word~) rem16s#32 rem16s zp ZP_WORD:3 4.0
(word) rem16u
(word) rem16u#1 rem16u zp ZP_WORD:3 0.8275862068965517
(word) rem16u#30 rem16u zp ZP_WORD:3 110.0
(signed byte) rem8s
(signed byte) rem8s#1 reg byte x 2.0
(signed byte) rem8s#18 reg byte x 110.0
(signed byte) rem8s#3 reg byte x 1.0833333333333333
(signed byte~) rem8s#33 reg byte x 4.0
(byte) rem8u
(byte) rem8u#1 reg byte x 0.8275862068965517
(byte) rem8u#31 reg byte x 110.0
(void()) test_16s()
(label) test_16s::@1
(label) test_16s::@10
(label) test_16s::@11
(label) test_16s::@3
(label) test_16s::@4
(label) test_16s::@5
(label) test_16s::@6
(label) test_16s::@7
(label) test_16s::@8
(label) test_16s::@9
(label) test_16s::@return
(signed word) test_16s::dividend
(signed word) test_16s::dividend#0 dividend zp ZP_WORD:7 4.714285714285714
(signed word[]) test_16s::dividends
(const signed word[]) test_16s::dividends#0 dividends = { (word/signed word/dword/signed dword) 32767, (word/signed word/dword/signed dword) 32767, -(word/signed word/dword/signed dword) 32767, -(word/signed word/dword/signed dword) 32767, (word/signed word/dword/signed dword) 32767, -(word/signed word/dword/signed dword) 32767 }
(signed word) test_16s::divisor
(signed word) test_16s::divisor#0 divisor zp ZP_WORD:20 3.0
(signed word[]) test_16s::divisors
(const signed word[]) test_16s::divisors#0 divisors = { (byte/signed byte/word/signed word/dword/signed dword) 5, -(byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, -(byte/signed byte/word/signed word/dword/signed dword) 13, -(byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
(byte) test_16s::i
(byte) test_16s::i#1 i zp ZP_BYTE:2 16.5
(byte) test_16s::i#10 i zp ZP_BYTE:2 1.76
(signed word) test_16s::res
(signed word) test_16s::res#0 res zp ZP_WORD:14 2.2
(const string) test_16s::str str = (string) " / @"
(const string) test_16s::str1 str1 = (string) " = @"
(const string) test_16s::str2 str2 = (string) " @"
(void()) test_16u()
(label) test_16u::@1
(label) test_16u::@10
(label) test_16u::@11
(label) test_16u::@3
(label) test_16u::@4
(label) test_16u::@5
(label) test_16u::@6
(label) test_16u::@7
(label) test_16u::@8
(label) test_16u::@9
(label) test_16u::@return
(word) test_16u::dividend
(word) test_16u::dividend#0 dividend zp ZP_WORD:7 4.714285714285714
(word[]) test_16u::dividends
(const word[]) test_16u::dividends#0 dividends = { (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535 }
(word) test_16u::divisor
(word) test_16u::divisor#0 divisor zp ZP_WORD:12 3.0
(word[]) test_16u::divisors
(const word[]) test_16u::divisors#0 divisors = { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
(byte) test_16u::i
(byte) test_16u::i#1 i zp ZP_BYTE:2 16.5
(byte) test_16u::i#10 i zp ZP_BYTE:2 1.76
(word) test_16u::res
(word) test_16u::res#0 res zp ZP_WORD:14 2.2
(const string) test_16u::str str = (string) " / @"
(const string) test_16u::str1 str1 = (string) " = @"
(const string) test_16u::str2 str2 = (string) " @"
(void()) test_8s()
(label) test_8s::@1
(label) test_8s::@10
(label) test_8s::@11
(label) test_8s::@3
(label) test_8s::@4
(label) test_8s::@5
(label) test_8s::@6
(label) test_8s::@7
(label) test_8s::@8
(label) test_8s::@9
(label) test_8s::@return
(signed byte) test_8s::dividend
(signed byte) test_8s::dividend#0 dividend zp ZP_BYTE:9 4.714285714285714
(signed byte[]) test_8s::dividends
(const signed byte[]) test_8s::dividends#0 dividends = { (byte/signed byte/word/signed word/dword/signed dword) 127, -(byte/signed byte/word/signed word/dword/signed dword) 127, -(byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127 }
(signed byte) test_8s::divisor
(signed byte) test_8s::divisor#0 divisor zp ZP_BYTE:22 3.0
(signed byte[]) test_8s::divisors
(const signed byte[]) test_8s::divisors#0 divisors = { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, -(byte/signed byte/word/signed word/dword/signed dword) 11, -(byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
(byte) test_8s::i
(byte) test_8s::i#1 i zp ZP_BYTE:2 16.5
(byte) test_8s::i#10 i zp ZP_BYTE:2 1.76
(signed byte) test_8s::res
(signed byte) test_8s::res#0 res zp ZP_BYTE:16 2.2
(const string) test_8s::str str = (string) " / @"
(const string) test_8s::str1 str1 = (string) " = @"
(const string) test_8s::str2 str2 = (string) " @"
(void()) test_8u()
(label) test_8u::@1
(label) test_8u::@10
(label) test_8u::@11
(label) test_8u::@12
(label) test_8u::@3
(label) test_8u::@4
(label) test_8u::@5
(label) test_8u::@6
(label) test_8u::@7
(label) test_8u::@8
(label) test_8u::@9
(label) test_8u::@return
(byte) test_8u::dividend
(byte) test_8u::dividend#0 dividend zp ZP_BYTE:9 4.714285714285714
(byte[]) test_8u::dividends
(const byte[]) test_8u::dividends#0 dividends = { (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255 }
(byte) test_8u::divisor
(byte) test_8u::divisor#0 divisor zp ZP_BYTE:17 3.3000000000000003
(byte[]) test_8u::divisors
(const byte[]) test_8u::divisors#0 divisors = { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
(byte) test_8u::i
(byte) test_8u::i#1 i zp ZP_BYTE:2 11.0
(byte) test_8u::i#10 i zp ZP_BYTE:2 1.8333333333333333
(byte) test_8u::res
(byte) test_8u::res#0 res zp ZP_BYTE:16 2.4444444444444446
(const string) test_8u::str str = (string) " / @"
(const string) test_8u::str1 str1 = (string) " = @"
(const string) test_8u::str2 str2 = (string) " @"

zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 test_8s::i#10 test_8s::i#1 test_16u::i#10 test_16u::i#1 test_8u::i#10 test_8u::i#1 ]
zp ZP_WORD:3 [ rem16s#17 rem16s#3 rem16s#32 rem16s#1 rem16u#30 rem16u#1 div16u::rem#4 div16u::rem#8 div16u::rem#5 div16u::rem#1 div16u::rem#2 div16u::rem#3 print_cls::sc#2 print_cls::sc#1 ]
zp ZP_WORD:5 [ line_cursor#20 line_cursor#39 line_cursor#1 line_cursor#41 ]
zp ZP_WORD:7 [ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 test_16s::dividend#0 div16s::dividend#0 test_16u::dividend#0 print_str::str#13 print_str::str#15 print_str::str#0 ]
zp ZP_BYTE:9 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 test_8s::dividend#0 test_8u::dividend#0 ]
reg byte a [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
zp ZP_WORD:10 [ char_cursor#80 char_cursor#133 char_cursor#130 char_cursor#132 char_cursor#128 char_cursor#129 char_cursor#155 char_cursor#126 char_cursor#17 char_cursor#162 char_cursor#135 char_cursor#131 char_cursor#1 char_cursor#179 char_cursor#185 div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 div16u::dividend#3 div16u::dividend#5 div16u::dividend#1 div16u::dividend#2 div16u::dividend#0 div16s::$2 ]
zp ZP_WORD:12 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 div16u::divisor#6 div16u::divisor#0 div16u::divisor#1 div16s::divisor#0 div16s::$7 test_16u::divisor#0 ]
reg byte y [ div16s::neg#4 div16s::neg#3 div16s::neg#2 ]
zp ZP_WORD:14 [ div16s::return#2 div16s::return#6 div16s::return#0 div16s::resultu#0 div16s::return#3 test_16s::res#0 div16u::return#2 div16u::quotient#3 div16u::return#0 div16u::quotient#1 div16u::quotient#2 div16u::return#3 test_16u::res#0 ]
reg byte x [ div16u::i#2 div16u::i#1 ]
reg byte x [ rem8s#18 rem8s#3 rem8s#33 rem8s#1 ]
reg byte y [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
reg byte x [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ]
zp ZP_BYTE:16 [ div8s::neg#4 div8s::neg#3 div8s::neg#2 test_8s::res#0 test_8u::res#0 ]
reg byte a [ div8s::return#2 div8s::return#6 div8s::return#0 ]
zp ZP_BYTE:17 [ div8u::divisor#6 div8u::divisor#0 div8u::divisor#1 test_8u::divisor#0 ]
reg byte y [ div8u::rem#4 div8u::rem#8 div8u::rem#5 div8u::rem#1 div8u::rem#2 div8u::rem#3 ]
zp ZP_BYTE:18 [ div8u::dividend#3 div8u::dividend#5 div8u::dividend#1 div8u::dividend#2 div8u::dividend#0 ]
zp ZP_BYTE:19 [ div8u::quotient#3 div8u::return#0 div8u::quotient#1 div8u::quotient#2 ]
reg byte x [ div8u::i#2 div8u::i#1 ]
reg byte x [ rem8u#31 rem8u#1 ]
zp ZP_WORD:20 [ test_16s::divisor#0 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]
reg byte a [ div16u::$1 ]
reg byte a [ div16u::$2 ]
zp ZP_BYTE:22 [ test_8s::divisor#0 ]
reg byte a [ div8s::dividend#0 ]
reg byte x [ div8s::divisor#0 ]
reg byte a [ div8s::return#3 ]
reg byte a [ div8s::$2 ]
reg byte x [ div8s::$7 ]
reg byte a [ div8u::return#2 ]
reg byte y [ div8s::resultu#0 ]
reg byte a [ div8u::$1 ]
reg byte a [ div8u::return#3 ]
