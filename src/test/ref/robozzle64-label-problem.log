Eliminating unused variable with no statement main::$0
Eliminating unused variable with no statement main::$1

CONTROL FLOW GRAPH SSA

unsigned int mul8u(char a , char b)
mul8u: scope:[mul8u]  from main::@1 main::@2
  mul8u::a#6 = phi( main::@1/mul8u::a#1, main::@2/mul8u::a#2 )
  mul8u::b#2 = phi( main::@1/mul8u::b#0, main::@2/mul8u::b#1 )
  mul8u::res#0 = 0
  mul8u::mb#0 = (unsigned int)mul8u::b#2
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@4
  mul8u::mb#5 = phi( mul8u/mul8u::mb#0, mul8u::@4/mul8u::mb#1 )
  mul8u::res#4 = phi( mul8u/mul8u::res#0, mul8u::@4/mul8u::res#6 )
  mul8u::a#3 = phi( mul8u/mul8u::a#6, mul8u::@4/mul8u::a#0 )
  mul8u::$0 = mul8u::a#3 != 0
  if(mul8u::$0) goto mul8u::@2
  to:mul8u::@3
mul8u::@2: scope:[mul8u]  from mul8u::@1
  mul8u::res#5 = phi( mul8u::@1/mul8u::res#4 )
  mul8u::mb#4 = phi( mul8u::@1/mul8u::mb#5 )
  mul8u::a#4 = phi( mul8u::@1/mul8u::a#3 )
  mul8u::$1 = mul8u::a#4 & 1
  mul8u::$2 = mul8u::$1 != 0
  mul8u::$3 = ! mul8u::$2
  if(mul8u::$3) goto mul8u::@4
  to:mul8u::@5
mul8u::@3: scope:[mul8u]  from mul8u::@1
  mul8u::res#2 = phi( mul8u::@1/mul8u::res#4 )
  mul8u::return#0 = mul8u::res#2
  to:mul8u::@return
mul8u::@4: scope:[mul8u]  from mul8u::@2 mul8u::@5
  mul8u::res#6 = phi( mul8u::@2/mul8u::res#5, mul8u::@5/mul8u::res#1 )
  mul8u::mb#2 = phi( mul8u::@2/mul8u::mb#4, mul8u::@5/mul8u::mb#3 )
  mul8u::a#5 = phi( mul8u::@2/mul8u::a#4, mul8u::@5/mul8u::a#7 )
  mul8u::$5 = mul8u::a#5 >> 1
  mul8u::a#0 = mul8u::$5
  mul8u::$6 = mul8u::mb#2 << 1
  mul8u::mb#1 = mul8u::$6
  to:mul8u::@1
mul8u::@5: scope:[mul8u]  from mul8u::@2
  mul8u::a#7 = phi( mul8u::@2/mul8u::a#4 )
  mul8u::mb#3 = phi( mul8u::@2/mul8u::mb#4 )
  mul8u::res#3 = phi( mul8u::@2/mul8u::res#5 )
  mul8u::$4 = mul8u::res#3 + mul8u::mb#3
  mul8u::res#1 = mul8u::$4
  to:mul8u::@4
mul8u::@return: scope:[mul8u]  from mul8u::@3
  mul8u::return#4 = phi( mul8u::@3/mul8u::return#0 )
  mul8u::return#1 = mul8u::return#4
  return 
  to:@return

void main()
main: scope:[main]  from __start
  main::screen#0 = (char *)$400
  main::y#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@3
  main::screen#5 = phi( main/main::screen#0, main::@3/main::screen#2 )
  main::y#2 = phi( main/main::y#0, main::@3/main::y#1 )
  mul8u::a#1 = main::y#2
  mul8u::b#0 = $28
  call mul8u
  mul8u::return#2 = mul8u::return#1
  to:main::@2
main::@2: scope:[main]  from main::@1
  main::y#3 = phi( main::@1/main::y#2 )
  main::screen#3 = phi( main::@1/main::screen#5 )
  mul8u::return#5 = phi( main::@1/mul8u::return#2 )
  main::z1#0 = mul8u::return#5
  *main::screen#3 = main::z1#0
  main::screen#1 = main::screen#3 + SIZEOF_UNSIGNED_INT
  mul8u::a#2 = main::y#3
  mul8u::b#1 = $28
  call mul8u
  mul8u::return#3 = mul8u::return#1
  to:main::@3
main::@3: scope:[main]  from main::@2
  main::y#4 = phi( main::@2/main::y#3 )
  main::screen#4 = phi( main::@2/main::screen#1 )
  mul8u::return#6 = phi( main::@2/mul8u::return#3 )
  main::z2#0 = mul8u::return#6
  *main::screen#4 = main::z2#0
  main::screen#2 = main::screen#4 + SIZEOF_UNSIGNED_INT
  main::y#1 = main::y#4 + rangenext(0,5)
  main::$2 = main::y#1 != rangelast(0,5)
  if(main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
__constant char SIZEOF_UNSIGNED_INT = 2
void __start()
void main()
bool main::$2
unsigned int *main::screen
unsigned int *main::screen#0
unsigned int *main::screen#1
unsigned int *main::screen#2
unsigned int *main::screen#3
unsigned int *main::screen#4
unsigned int *main::screen#5
char main::y
char main::y#0
char main::y#1
char main::y#2
char main::y#3
char main::y#4
unsigned int main::z1
unsigned int main::z1#0
unsigned int main::z2
unsigned int main::z2#0
unsigned int mul8u(char a , char b)
bool mul8u::$0
number mul8u::$1
bool mul8u::$2
bool mul8u::$3
unsigned int mul8u::$4
char mul8u::$5
unsigned int mul8u::$6
char mul8u::a
char mul8u::a#0
char mul8u::a#1
char mul8u::a#2
char mul8u::a#3
char mul8u::a#4
char mul8u::a#5
char mul8u::a#6
char mul8u::a#7
char mul8u::b
char mul8u::b#0
char mul8u::b#1
char mul8u::b#2
unsigned int mul8u::mb
unsigned int mul8u::mb#0
unsigned int mul8u::mb#1
unsigned int mul8u::mb#2
unsigned int mul8u::mb#3
unsigned int mul8u::mb#4
unsigned int mul8u::mb#5
unsigned int mul8u::res
unsigned int mul8u::res#0
unsigned int mul8u::res#1
unsigned int mul8u::res#2
unsigned int mul8u::res#3
unsigned int mul8u::res#4
unsigned int mul8u::res#5
unsigned int mul8u::res#6
unsigned int mul8u::return
unsigned int mul8u::return#0
unsigned int mul8u::return#1
unsigned int mul8u::return#2
unsigned int mul8u::return#3
unsigned int mul8u::return#4
unsigned int mul8u::return#5
unsigned int mul8u::return#6

Adding number conversion cast (unumber) 0 in mul8u::$0 = mul8u::a#3 != 0
Adding number conversion cast (unumber) 1 in mul8u::$1 = mul8u::a#4 & 1
Adding number conversion cast (unumber) mul8u::$1 in mul8u::$1 = mul8u::a#4 & (unumber)1
Adding number conversion cast (unumber) 0 in mul8u::$2 = mul8u::$1 != 0
Adding number conversion cast (unumber) 1 in mul8u::$5 = mul8u::a#5 >> 1
Adding number conversion cast (unumber) 1 in mul8u::$6 = mul8u::mb#2 << 1
Adding number conversion cast (unumber) $28 in mul8u::b#0 = $28
Adding number conversion cast (unumber) $28 in mul8u::b#1 = $28
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast mul8u::b#0 = (unumber)$28
Inlining cast mul8u::b#1 = (unumber)$28
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to char in mul8u::$1 = mul8u::a#4 & 1
Inversing boolean not [9] mul8u::$3 = mul8u::$1 == 0 from [8] mul8u::$2 = mul8u::$1 != 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias mul8u::a#3 = mul8u::a#4 mul8u::a#7 
Alias mul8u::mb#3 = mul8u::mb#4 mul8u::mb#5 
Alias mul8u::res#2 = mul8u::res#5 mul8u::res#4 mul8u::return#0 mul8u::res#3 mul8u::return#4 mul8u::return#1 
Alias mul8u::a#0 = mul8u::$5 
Alias mul8u::mb#1 = mul8u::$6 
Alias mul8u::res#1 = mul8u::$4 
Alias mul8u::return#2 = mul8u::return#5 
Alias main::screen#3 = main::screen#5 
Alias main::y#2 = main::y#3 main::y#4 
Alias mul8u::return#3 = mul8u::return#6 
Alias main::screen#1 = main::screen#4 
Successful SSA optimization Pass2AliasElimination
Alias mul8u::a#3 = mul8u::a#5 
Alias mul8u::mb#2 = mul8u::mb#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition mul8u::$0 [5] if(mul8u::a#3!=0) goto mul8u::@2
Simple Condition mul8u::$3 [8] if(mul8u::$1==0) goto mul8u::@4
Simple Condition main::$2 [33] if(main::y#1!=rangelast(0,5)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant mul8u::res#0 = 0
Constant main::screen#0 = (char *) 1024
Constant main::y#0 = 0
Constant mul8u::b#0 = $28
Constant mul8u::b#1 = $28
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [31] main::y#1 = ++ main::y#2 to ++
Resolved ranged comparison value [33] if(main::y#1!=rangelast(0,5)) goto main::@1 to 6
Converting *(pointer+n) to pointer[n] [29] *main::screen#1 = main::z2#0  -- main::screen#3[SIZEOF_UNSIGNED_INT]
Successful SSA optimization Pass2InlineDerefIdx
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 6 in [25] if(main::y#1!=6) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 6
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 6
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings mul8u::res#0
Inlining constant with var siblings mul8u::b#0
Inlining constant with var siblings mul8u::b#1
Inlining constant with var siblings main::screen#0
Inlining constant with var siblings main::y#0
Constant inlined main::screen#0 = (char *) 1024
Constant inlined mul8u::res#0 = 0
Constant inlined main::y#0 = 0
Constant inlined mul8u::b#1 = $28
Constant inlined mul8u::b#0 = $28
Successful SSA optimization Pass2ConstantInlining
Consolidated constant in assignment main::screen#2
Successful SSA optimization Pass2ConstantAdditionElimination
Alias main::screen#1 = main::screen#3 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values mul8u::b#2 $28
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [1] mul8u::mb#0 = (unsigned int)$28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant mul8u::mb#0 = (unsigned int)$28
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings mul8u::mb#0
Constant inlined mul8u::mb#0 = (unsigned int)$28
Successful SSA optimization Pass2ConstantInlining
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Added new block during phi lifting mul8u::@6(between mul8u::@2 and mul8u::@4)
Added new block during phi lifting main::@4(between main::@3 and main::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of mul8u::@3
CALL GRAPH
Calls in [main] to mul8u:4 mul8u:10 

Created 7 initial phi equivalence classes
Coalesced [3] mul8u::a#8 = mul8u::a#1
Coalesced [9] mul8u::a#9 = mul8u::a#2
Coalesced [18] main::y#5 = main::y#1
Coalesced [19] main::screen#6 = main::screen#2
Coalesced [21] mul8u::a#10 = mul8u::a#6
Coalesced [29] mul8u::res#9 = mul8u::res#1
Coalesced [33] mul8u::a#11 = mul8u::a#0
Coalesced [34] mul8u::res#7 = mul8u::res#6
Coalesced [35] mul8u::mb#6 = mul8u::mb#1
Coalesced (already) [36] mul8u::res#8 = mul8u::res#2
Coalesced down to 5 phi equivalence classes
Culled Empty Block label main::@4
Culled Empty Block label mul8u::@3
Culled Empty Block label mul8u::@6
Renumbering block mul8u::@4 to mul8u::@3
Renumbering block mul8u::@5 to mul8u::@4
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [1] main::screen#1 = phi( main/(char *) 1024, main::@3/main::screen#2 )
  [1] main::y#2 = phi( main/0, main::@3/main::y#1 )
  [2] mul8u::a#1 = main::y#2
  [3] call mul8u
  [4] mul8u::return#2 = mul8u::res#2
  to:main::@2
main::@2: scope:[main]  from main::@1
  [5] main::z1#0 = mul8u::return#2
  [6] *main::screen#1 = main::z1#0
  [7] mul8u::a#2 = main::y#2
  [8] call mul8u
  [9] mul8u::return#3 = mul8u::res#2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] main::z2#0 = mul8u::return#3
  [11] main::screen#1[SIZEOF_UNSIGNED_INT] = main::z2#0
  [12] main::screen#2 = main::screen#1 + SIZEOF_UNSIGNED_INT+SIZEOF_UNSIGNED_INT
  [13] main::y#1 = ++ main::y#2
  [14] if(main::y#1!=6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [15] return 
  to:@return

unsigned int mul8u(char a , char b)
mul8u: scope:[mul8u]  from main::@1 main::@2
  [16] mul8u::a#6 = phi( main::@1/mul8u::a#1, main::@2/mul8u::a#2 )
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [17] mul8u::mb#2 = phi( mul8u/$28, mul8u::@3/mul8u::mb#1 )
  [17] mul8u::res#2 = phi( mul8u/0, mul8u::@3/mul8u::res#6 )
  [17] mul8u::a#3 = phi( mul8u/mul8u::a#6, mul8u::@3/mul8u::a#0 )
  [18] if(mul8u::a#3!=0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [19] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [20] mul8u::$1 = mul8u::a#3 & 1
  [21] if(mul8u::$1==0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [22] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [23] mul8u::res#6 = phi( mul8u::@2/mul8u::res#2, mul8u::@4/mul8u::res#1 )
  [24] mul8u::a#0 = mul8u::a#3 >> 1
  [25] mul8u::mb#1 = mul8u::mb#2 << 1
  to:mul8u::@1


VARIABLE REGISTER WEIGHTS
void main()
unsigned int *main::screen
unsigned int *main::screen#1 // 4.0
unsigned int *main::screen#2 // 7.333333333333333
char main::y
char main::y#1 // 16.5
char main::y#2 // 3.6666666666666665
unsigned int main::z1
unsigned int main::z1#0 // 22.0
unsigned int main::z2
unsigned int main::z2#0 // 22.0
unsigned int mul8u(char a , char b)
char mul8u::$1 // 20002.0
char mul8u::a
char mul8u::a#0 // 10001.0
char mul8u::a#1 // 22.0
char mul8u::a#2 // 22.0
char mul8u::a#3 // 6684.166666666666
char mul8u::a#6 // 123.0
char mul8u::b
unsigned int mul8u::mb
unsigned int mul8u::mb#1 // 20002.0
unsigned int mul8u::mb#2 // 4286.142857142857
unsigned int mul8u::res
unsigned int mul8u::res#1 // 20002.0
unsigned int mul8u::res#2 // 4289.285714285714
unsigned int mul8u::res#6 // 10001.0
unsigned int mul8u::return
unsigned int mul8u::return#2 // 22.0
unsigned int mul8u::return#3 // 22.0

Initial phi equivalence classes
[ main::y#2 main::y#1 ]
[ main::screen#1 main::screen#2 ]
[ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#1 ]
Added variable mul8u::return#2 to live range equivalence class [ mul8u::return#2 ]
Added variable main::z1#0 to live range equivalence class [ main::z1#0 ]
Added variable mul8u::return#3 to live range equivalence class [ mul8u::return#3 ]
Added variable main::z2#0 to live range equivalence class [ main::z2#0 ]
Added variable mul8u::$1 to live range equivalence class [ mul8u::$1 ]
Complete equivalence classes
[ main::y#2 main::y#1 ]
[ main::screen#1 main::screen#2 ]
[ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ]
[ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
[ mul8u::mb#2 mul8u::mb#1 ]
[ mul8u::return#2 ]
[ main::z1#0 ]
[ mul8u::return#3 ]
[ main::z2#0 ]
[ mul8u::$1 ]
Allocated zp[2]:2 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ]
Allocated zp[2]:4 [ mul8u::mb#2 mul8u::mb#1 ]
Allocated zp[1]:6 [ mul8u::$1 ]
Allocated zp[1]:7 [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ]
Allocated zp[2]:8 [ mul8u::return#2 ]
Allocated zp[2]:10 [ main::z1#0 ]
Allocated zp[2]:12 [ mul8u::return#3 ]
Allocated zp[2]:14 [ main::z2#0 ]
Allocated zp[1]:16 [ main::y#2 main::y#1 ]
Allocated zp[2]:17 [ main::screen#1 main::screen#2 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] mul8u::return#2 = mul8u::res#2 [ main::y#2 main::screen#1 mul8u::return#2 ] (  [ main::y#2 main::screen#1 mul8u::return#2 ] { { mul8u::a#1 = mul8u::a#6 main::y#2 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:16 [ main::y#2 main::y#1 ]
Statement [5] main::z1#0 = mul8u::return#2 [ main::y#2 main::screen#1 main::z1#0 ] (  [ main::y#2 main::screen#1 main::z1#0 ] { { mul8u::a#2 = mul8u::a#6 main::y#2 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [6] *main::screen#1 = main::z1#0 [ main::y#2 main::screen#1 ] (  [ main::y#2 main::screen#1 ] { { mul8u::a#2 = mul8u::a#6 main::y#2 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:16 [ main::y#2 main::y#1 ]
Statement [9] mul8u::return#3 = mul8u::res#2 [ main::y#2 main::screen#1 mul8u::return#3 ] (  [ main::y#2 main::screen#1 mul8u::return#3 ] { { mul8u::a#2 = mul8u::a#6 main::y#2 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [10] main::z2#0 = mul8u::return#3 [ main::y#2 main::screen#1 main::z2#0 ] (  [ main::y#2 main::screen#1 main::z2#0 ] { }  ) always clobbers reg byte a 
Statement [11] main::screen#1[SIZEOF_UNSIGNED_INT] = main::z2#0 [ main::y#2 main::screen#1 ] (  [ main::y#2 main::screen#1 ] { }  ) always clobbers reg byte a reg byte y 
Statement [12] main::screen#2 = main::screen#1 + SIZEOF_UNSIGNED_INT+SIZEOF_UNSIGNED_INT [ main::y#2 main::screen#2 ] (  [ main::y#2 main::screen#2 ] { }  ) always clobbers reg byte a 
Statement [22] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2 [ mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ( mul8u:3 [ main::y#2 main::screen#1 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { mul8u::a#1 = mul8u::a#6 main::y#2 } { mul8u::return#2 = mul8u::res#2 } }  mul8u:8 [ main::y#2 main::screen#1 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { mul8u::a#2 = mul8u::a#6 main::y#2 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ]
Statement [4] mul8u::return#2 = mul8u::res#2 [ main::y#2 main::screen#1 mul8u::return#2 ] (  [ main::y#2 main::screen#1 mul8u::return#2 ] { { mul8u::a#1 = mul8u::a#6 main::y#2 } { mul8u::return#2 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [5] main::z1#0 = mul8u::return#2 [ main::y#2 main::screen#1 main::z1#0 ] (  [ main::y#2 main::screen#1 main::z1#0 ] { { mul8u::a#2 = mul8u::a#6 main::y#2 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [6] *main::screen#1 = main::z1#0 [ main::y#2 main::screen#1 ] (  [ main::y#2 main::screen#1 ] { { mul8u::a#2 = mul8u::a#6 main::y#2 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a reg byte y 
Statement [9] mul8u::return#3 = mul8u::res#2 [ main::y#2 main::screen#1 mul8u::return#3 ] (  [ main::y#2 main::screen#1 mul8u::return#3 ] { { mul8u::a#2 = mul8u::a#6 main::y#2 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [10] main::z2#0 = mul8u::return#3 [ main::y#2 main::screen#1 main::z2#0 ] (  [ main::y#2 main::screen#1 main::z2#0 ] { }  ) always clobbers reg byte a 
Statement [11] main::screen#1[SIZEOF_UNSIGNED_INT] = main::z2#0 [ main::y#2 main::screen#1 ] (  [ main::y#2 main::screen#1 ] { }  ) always clobbers reg byte a reg byte y 
Statement [12] main::screen#2 = main::screen#1 + SIZEOF_UNSIGNED_INT+SIZEOF_UNSIGNED_INT [ main::y#2 main::screen#2 ] (  [ main::y#2 main::screen#2 ] { }  ) always clobbers reg byte a 
Statement [20] mul8u::$1 = mul8u::a#3 & 1 [ mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] ( mul8u:3 [ main::y#2 main::screen#1 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { mul8u::a#1 = mul8u::a#6 main::y#2 } { mul8u::return#2 = mul8u::res#2 } }  mul8u:8 [ main::y#2 main::screen#1 mul8u::res#2 mul8u::a#3 mul8u::mb#2 mul8u::$1 ] { { mul8u::a#2 = mul8u::a#6 main::y#2 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Statement [22] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2 [ mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] ( mul8u:3 [ main::y#2 main::screen#1 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { mul8u::a#1 = mul8u::a#6 main::y#2 } { mul8u::return#2 = mul8u::res#2 } }  mul8u:8 [ main::y#2 main::screen#1 mul8u::a#3 mul8u::mb#2 mul8u::res#1 ] { { mul8u::a#2 = mul8u::a#6 main::y#2 } { mul8u::return#3 = mul8u::res#2 } }  ) always clobbers reg byte a 
Potential registers zp[1]:16 [ main::y#2 main::y#1 ] : zp[1]:16 , reg byte x , 
Potential registers zp[2]:17 [ main::screen#1 main::screen#2 ] : zp[2]:17 , 
Potential registers zp[1]:7 [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ] : zp[1]:7 , reg byte x , reg byte y , 
Potential registers zp[2]:2 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] : zp[2]:2 , 
Potential registers zp[2]:4 [ mul8u::mb#2 mul8u::mb#1 ] : zp[2]:4 , 
Potential registers zp[2]:8 [ mul8u::return#2 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ main::z1#0 ] : zp[2]:10 , 
Potential registers zp[2]:12 [ mul8u::return#3 ] : zp[2]:12 , 
Potential registers zp[2]:14 [ main::z2#0 ] : zp[2]:14 , 
Potential registers zp[1]:6 [ mul8u::$1 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [mul8u] 34,292.29: zp[2]:2 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] 24,288.14: zp[2]:4 [ mul8u::mb#2 mul8u::mb#1 ] 20,002: zp[1]:6 [ mul8u::$1 ] 16,852.17: zp[1]:7 [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ] 22: zp[2]:8 [ mul8u::return#2 ] 22: zp[2]:12 [ mul8u::return#3 ] 
Uplift Scope [main] 22: zp[2]:10 [ main::z1#0 ] 22: zp[2]:14 [ main::z2#0 ] 20.17: zp[1]:16 [ main::y#2 main::y#1 ] 11.33: zp[2]:17 [ main::screen#1 main::screen#2 ] 
Uplift Scope [] 

Uplifting [mul8u] best 10004 combination zp[2]:2 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] zp[2]:4 [ mul8u::mb#2 mul8u::mb#1 ] reg byte a [ mul8u::$1 ] reg byte x [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ] zp[2]:8 [ mul8u::return#2 ] zp[2]:12 [ mul8u::return#3 ] 
Uplifting [main] best 10004 combination zp[2]:10 [ main::z1#0 ] zp[2]:14 [ main::z2#0 ] zp[1]:16 [ main::y#2 main::y#1 ] zp[2]:17 [ main::screen#1 main::screen#2 ] 
Uplifting [] best 10004 combination 
Attempting to uplift remaining variables inzp[1]:16 [ main::y#2 main::y#1 ]
Uplifting [main] best 10004 combination zp[1]:16 [ main::y#2 main::y#1 ] 
Coalescing zero page register [ zp[2]:2 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 ] ] with [ zp[2]:8 [ mul8u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:2 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 ] ] with [ zp[2]:12 [ mul8u::return#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:2 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mul8u::return#3 ] ] with [ zp[2]:10 [ main::z1#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:2 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mul8u::return#3 main::z1#0 ] ] with [ zp[2]:14 [ main::z2#0 ] ] - score: 1
Allocated (was zp[1]:16) zp[1]:6 [ main::y#2 main::y#1 ]
Allocated (was zp[2]:17) zp[2]:7 [ main::screen#1 main::screen#2 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
/// @file
/// Simple binary multiplication implementation
  // Upstart
  // Commodore 64 PRG executable file
.file [name="robozzle64-label-problem.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_UNSIGNED_INT = 2
.segment Code
  // main
main: {
    .label z1 = 2
    .label screen = 7
    .label z2 = 2
    .label y = 6
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::screen#1 = (char *) 1024 [phi:main->main::@1#0] -- pwuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [1] phi main::y#2 = 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    jmp __b1
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [1] phi main::screen#1 = main::screen#2 [phi:main::@3->main::@1#0] -- register_copy 
    // [1] phi main::y#2 = main::y#1 [phi:main::@3->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] mul8u::a#1 = main::y#2 -- vbuxx=vbuz1 
    ldx.z y
    // [3] call mul8u
    // [16] phi from main::@1 to mul8u [phi:main::@1->mul8u]
  mul8u_from___b1:
    // [16] phi mul8u::a#6 = mul8u::a#1 [phi:main::@1->mul8u#0] -- register_copy 
    jsr mul8u
    // [4] mul8u::return#2 = mul8u::res#2
    jmp __b2
    // main::@2
  __b2:
    // [5] main::z1#0 = mul8u::return#2
    // [6] *main::screen#1 = main::z1#0 -- _deref_pwuz1=vwuz2 
    ldy #0
    lda.z z1
    sta (screen),y
    iny
    lda.z z1+1
    sta (screen),y
    // [7] mul8u::a#2 = main::y#2 -- vbuxx=vbuz1 
    ldx.z y
    // [8] call mul8u
    // [16] phi from main::@2 to mul8u [phi:main::@2->mul8u]
  mul8u_from___b2:
    // [16] phi mul8u::a#6 = mul8u::a#2 [phi:main::@2->mul8u#0] -- register_copy 
    jsr mul8u
    // [9] mul8u::return#3 = mul8u::res#2
    jmp __b3
    // main::@3
  __b3:
    // [10] main::z2#0 = mul8u::return#3
    // [11] main::screen#1[SIZEOF_UNSIGNED_INT] = main::z2#0 -- pwuz1_derefidx_vbuc1=vwuz2 
    ldy #SIZEOF_UNSIGNED_INT
    lda.z z2
    sta (screen),y
    iny
    lda.z z2+1
    sta (screen),y
    // [12] main::screen#2 = main::screen#1 + SIZEOF_UNSIGNED_INT+SIZEOF_UNSIGNED_INT -- pwuz1=pwuz1_plus_vbuc1 
    lda #SIZEOF_UNSIGNED_INT+SIZEOF_UNSIGNED_INT
    clc
    adc.z screen
    sta.z screen
    bcc !+
    inc.z screen+1
  !:
    // [13] main::y#1 = ++ main::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [14] if(main::y#1!=6) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z y
    bne __b1_from___b3
    jmp __breturn
    // main::@return
  __breturn:
    // [15] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// __zp(2) unsigned int mul8u(__register(X) char a, char b)
mul8u: {
    .label mb = 4
    .label res = 2
    .label return = 2
    // [17] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
  __b1_from_mul8u:
    // [17] phi mul8u::mb#2 = $28 [phi:mul8u->mul8u::@1#0] -- vwuz1=vwuc1 
    lda #<$28
    sta.z mb
    lda #>$28
    sta.z mb+1
    // [17] phi mul8u::res#2 = 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    // [17] phi mul8u::a#3 = mul8u::a#6 [phi:mul8u->mul8u::@1#2] -- register_copy 
    jmp __b1
    // mul8u::@1
  __b1:
    // [18] if(mul8u::a#3!=0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    jmp __breturn
    // mul8u::@return
  __breturn:
    // [19] return 
    rts
    // mul8u::@2
  __b2:
    // [20] mul8u::$1 = mul8u::a#3 & 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [21] if(mul8u::$1==0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul8u::@4
  __b4:
    // [22] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    clc
    lda.z res
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [23] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [23] phi mul8u::res#6 = mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    jmp __b3
    // mul8u::@3
  __b3:
    // [24] mul8u::a#0 = mul8u::a#3 >> 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // [25] mul8u::mb#1 = mul8u::mb#2 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [17] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
  __b1_from___b3:
    // [17] phi mul8u::mb#2 = mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [17] phi mul8u::res#2 = mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [17] phi mul8u::a#3 = mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b3 with __b1
Replacing label __b3_from___b2 with __b3
Removing instruction __b1_from___b3:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction mul8u_from___b1:
Removing instruction __b2:
Removing instruction mul8u_from___b2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_mul8u:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
__constant char SIZEOF_UNSIGNED_INT = 2
void main()
unsigned int *main::screen
unsigned int *main::screen#1 // screen zp[2]:7 4.0
unsigned int *main::screen#2 // screen zp[2]:7 7.333333333333333
char main::y
char main::y#1 // y zp[1]:6 16.5
char main::y#2 // y zp[1]:6 3.6666666666666665
unsigned int main::z1
unsigned int main::z1#0 // z1 zp[2]:2 22.0
unsigned int main::z2
unsigned int main::z2#0 // z2 zp[2]:2 22.0
unsigned int mul8u(char a , char b)
char mul8u::$1 // reg byte a 20002.0
char mul8u::a
char mul8u::a#0 // reg byte x 10001.0
char mul8u::a#1 // reg byte x 22.0
char mul8u::a#2 // reg byte x 22.0
char mul8u::a#3 // reg byte x 6684.166666666666
char mul8u::a#6 // reg byte x 123.0
char mul8u::b
unsigned int mul8u::mb
unsigned int mul8u::mb#1 // mb zp[2]:4 20002.0
unsigned int mul8u::mb#2 // mb zp[2]:4 4286.142857142857
unsigned int mul8u::res
unsigned int mul8u::res#1 // res zp[2]:2 20002.0
unsigned int mul8u::res#2 // res zp[2]:2 4289.285714285714
unsigned int mul8u::res#6 // res zp[2]:2 10001.0
unsigned int mul8u::return
unsigned int mul8u::return#2 // return zp[2]:2 22.0
unsigned int mul8u::return#3 // return zp[2]:2 22.0

zp[1]:6 [ main::y#2 main::y#1 ]
zp[2]:7 [ main::screen#1 main::screen#2 ]
reg byte x [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ]
zp[2]:2 [ mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#2 mul8u::return#3 main::z1#0 main::z2#0 ]
zp[2]:4 [ mul8u::mb#2 mul8u::mb#1 ]
reg byte a [ mul8u::$1 ]


FINAL ASSEMBLER
Score: 7974

  // File Comments
/// @file
/// Simple binary multiplication implementation
  // Upstart
  // Commodore 64 PRG executable file
.file [name="robozzle64-label-problem.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_UNSIGNED_INT = 2
.segment Code
  // main
main: {
    .label z1 = 2
    .label screen = 7
    .label z2 = 2
    .label y = 6
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::screen#1 = (char *) 1024 [phi:main->main::@1#0] -- pwuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [1] phi main::y#2 = 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [1] phi main::screen#1 = main::screen#2 [phi:main::@3->main::@1#0] -- register_copy 
    // [1] phi main::y#2 = main::y#1 [phi:main::@3->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // word z1 = mul8u(y,40)
    // [2] mul8u::a#1 = main::y#2 -- vbuxx=vbuz1 
    ldx.z y
    // [3] call mul8u
    // [16] phi from main::@1 to mul8u [phi:main::@1->mul8u]
    // [16] phi mul8u::a#6 = mul8u::a#1 [phi:main::@1->mul8u#0] -- register_copy 
    jsr mul8u
    // word z1 = mul8u(y,40)
    // [4] mul8u::return#2 = mul8u::res#2
    // main::@2
    // [5] main::z1#0 = mul8u::return#2
    // *screen++ = z1
    // [6] *main::screen#1 = main::z1#0 -- _deref_pwuz1=vwuz2 
    ldy #0
    lda.z z1
    sta (screen),y
    iny
    lda.z z1+1
    sta (screen),y
    // word z2 = mul8u(y,40)
    // [7] mul8u::a#2 = main::y#2 -- vbuxx=vbuz1 
    ldx.z y
    // [8] call mul8u
    // [16] phi from main::@2 to mul8u [phi:main::@2->mul8u]
    // [16] phi mul8u::a#6 = mul8u::a#2 [phi:main::@2->mul8u#0] -- register_copy 
    jsr mul8u
    // word z2 = mul8u(y,40)
    // [9] mul8u::return#3 = mul8u::res#2
    // main::@3
    // [10] main::z2#0 = mul8u::return#3
    // *screen++ = z2
    // [11] main::screen#1[SIZEOF_UNSIGNED_INT] = main::z2#0 -- pwuz1_derefidx_vbuc1=vwuz2 
    ldy #SIZEOF_UNSIGNED_INT
    lda.z z2
    sta (screen),y
    iny
    lda.z z2+1
    sta (screen),y
    // *screen++ = z2;
    // [12] main::screen#2 = main::screen#1 + SIZEOF_UNSIGNED_INT+SIZEOF_UNSIGNED_INT -- pwuz1=pwuz1_plus_vbuc1 
    lda #SIZEOF_UNSIGNED_INT+SIZEOF_UNSIGNED_INT
    clc
    adc.z screen
    sta.z screen
    bcc !+
    inc.z screen+1
  !:
    // for( byte y: 0..5)
    // [13] main::y#1 = ++ main::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [14] if(main::y#1!=6) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #6
    cmp.z y
    bne __b1
    // main::@return
    // }
    // [15] return 
    rts
}
  // mul8u
// Perform binary multiplication of two unsigned 8-bit chars into a 16-bit unsigned int
// __zp(2) unsigned int mul8u(__register(X) char a, char b)
mul8u: {
    .label mb = 4
    .label res = 2
    .label return = 2
    // [17] phi from mul8u to mul8u::@1 [phi:mul8u->mul8u::@1]
    // [17] phi mul8u::mb#2 = $28 [phi:mul8u->mul8u::@1#0] -- vwuz1=vwuc1 
    lda #<$28
    sta.z mb
    lda #>$28
    sta.z mb+1
    // [17] phi mul8u::res#2 = 0 [phi:mul8u->mul8u::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z res
    sta.z res+1
    // [17] phi mul8u::a#3 = mul8u::a#6 [phi:mul8u->mul8u::@1#2] -- register_copy 
    // mul8u::@1
  __b1:
    // while(a!=0)
    // [18] if(mul8u::a#3!=0) goto mul8u::@2 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b2
    // mul8u::@return
    // }
    // [19] return 
    rts
    // mul8u::@2
  __b2:
    // a&1
    // [20] mul8u::$1 = mul8u::a#3 & 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // if( (a&1) != 0)
    // [21] if(mul8u::$1==0) goto mul8u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // mul8u::@4
    // res = res + mb
    // [22] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2 -- vwuz1=vwuz1_plus_vwuz2 
    clc
    lda.z res
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    // [23] phi from mul8u::@2 mul8u::@4 to mul8u::@3 [phi:mul8u::@2/mul8u::@4->mul8u::@3]
    // [23] phi mul8u::res#6 = mul8u::res#2 [phi:mul8u::@2/mul8u::@4->mul8u::@3#0] -- register_copy 
    // mul8u::@3
  __b3:
    // a = a>>1
    // [24] mul8u::a#0 = mul8u::a#3 >> 1 -- vbuxx=vbuxx_ror_1 
    txa
    lsr
    tax
    // mb = mb<<1
    // [25] mul8u::mb#1 = mul8u::mb#2 << 1 -- vwuz1=vwuz1_rol_1 
    asl.z mb
    rol.z mb+1
    // [17] phi from mul8u::@3 to mul8u::@1 [phi:mul8u::@3->mul8u::@1]
    // [17] phi mul8u::mb#2 = mul8u::mb#1 [phi:mul8u::@3->mul8u::@1#0] -- register_copy 
    // [17] phi mul8u::res#2 = mul8u::res#6 [phi:mul8u::@3->mul8u::@1#1] -- register_copy 
    // [17] phi mul8u::a#3 = mul8u::a#0 [phi:mul8u::@3->mul8u::@1#2] -- register_copy 
    jmp __b1
}
  // File Data

