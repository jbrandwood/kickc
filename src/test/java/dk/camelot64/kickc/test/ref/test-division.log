PARSING src/test/java/dk/camelot64/kickc/test/kc/test-division.kc
// Test the binary division library
import "print.kc"
import "division.kc"

void main() {
    print_cls();
    test_8u();
    test_16u();
    test_8s();
    test_16s();
}

void test_8u() {
    byte[] dividends = { 255, 255, 255, 255, 255, 255};
    byte[] divisors = { 5, 7, 11, 13, 17, 19 };
    byte rem = 0;
    for( byte i: 0..5 ) {
        byte dividend = dividends[i];
        byte divisor = divisors[i];
        byte res = div8u(dividend, divisor);
        print_byte(dividend);
        print_str(" / @");
        print_byte(divisor);
        print_str(" = @");
        print_byte(res);
        print_str(" @");
        print_byte(rem8u);
        print_ln();
    }
}

void test_16u() {
    word[] dividends = { $ffff, $ffff, $ffff, $ffff, $ffff, $ffff};
    word[] divisors = { 5, 7, 11, 13, 17, 19 };
    for( byte i=0;i!=12;i=i+2) {
        word dividend = dividends[i];
        word divisor = divisors[i];
        word res = div16u(dividend, divisor);
        print_word(dividend);
        print_str(" / @");
        print_word(divisor);
        print_str(" = @");
        print_word(res);
        print_str(" @");
        print_word(rem16u);
        print_ln();
    }
}

void test_8s() {
    signed byte[] dividends = { 127, -127, -127, 127, 127, 127};
    signed byte[] divisors = { 5, 7, -11, -13, 17, 19 };
    for( byte i: 0..5 ) {
        signed byte dividend = dividends[i];
        signed byte divisor = divisors[i];
        signed byte res = div8s(dividend, divisor);
        print_sbyte(dividend);
        print_str(" / @");
        print_sbyte(divisor);
        print_str(" = @");
        print_sbyte(res);
        print_str(" @");
        print_sbyte(rem8s);
        print_ln();
    }
}

void test_16s() {
    signed word[] dividends = { $7fff, $7fff, -$7fff, -$7fff, $7fff, -$7fff};
    signed word[] divisors = { 5, -7, 11, -13, -17, 19 };
    for( byte i=0;i!=12;i=i+2) {
        signed word dividend = dividends[i];
        signed word divisor = divisors[i];
        signed word res = div16s(dividend, divisor);
        print_sword(dividend);
        print_str(" / @");
        print_sword(divisor);
        print_str(" = @");
        print_sword(res);
        print_str(" @");
        print_sword(rem16s);
        print_ln();
    }
}

Importing print.kc
PARSING src/test/java/dk/camelot64/kickc/test/kc/print.kc

byte* print_screen = $0400;
byte* print_line_cursor = print_screen;
byte* print_char_cursor = print_line_cursor;

// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
void print_str_lines(byte* str) {
    while(*str!='@') {
        do {
            byte ch = *(str++);
            if(ch!='@') {
                *(print_char_cursor++) = ch;
            }
        } while (ch!='@');
        print_ln();
    }
}

// Print a zero-terminated string followed by a newline
void print_str_ln(byte* str) {
    print_str(str);
    print_ln();
}

// Print a zero-terminated string
void print_str(byte* str) {
    while(*str!='@') {
        *(print_char_cursor++) = *(str++);
    }
}

// Print a string at a specific screen position
void print_str_at(byte* str, byte* at) {
    while(*str!='@') {
        *(at++) = *(str++);
    }
}

// Print a newline
void print_ln() {
    do {
        print_line_cursor = print_line_cursor + $28;
    } while (print_line_cursor<print_char_cursor);
    print_char_cursor = print_line_cursor;
}

// Print a signed word as HEX
void print_sword(signed word w) {
    if(w<0) {
        print_char('-');
        w = -w;
    }
    print_word((word)w);
}

// Print a signed byte as HEX
void print_sbyte(signed byte b) {
    if(b<0) {
        print_char('-');
        b = -b;
    }
    print_byte((byte)b);
}

// Print a word as HEX
void print_word(word w) {
    print_byte(>w);
    print_byte(<w);
}

// Print a dword as HEX
void print_dword(dword dw) {
    print_word(>dw);
    print_word(<dw);
}

// Print a signed dword as HEX
void print_sdword(signed dword dw) {
    if(dw<0) {
        print_char('-');
        dw = -dw;
    }
    print_dword((dword)dw);
}

const byte[] print_hextab = "0123456789abcdef";

// Print a byte as HEX
void print_byte(byte b) {
    // Table of hexadecimal digits
    print_char(print_hextab[b>>4]);
    print_char(print_hextab[b&$f]);
}

// Print a single char
void print_char(byte ch) {
    *(print_char_cursor++) = ch;
}

// Clear the screen. Also resets current line/char cursor.
void print_cls() {
    for(byte* sc=print_screen; sc!=print_screen+1000; sc++) {
        *sc = ' ';
    }
    print_line_cursor = print_screen;
    print_char_cursor = print_line_cursor;
}

// Set the screen to print on. Also resets current line/char cursor.
void print_set_screen(byte* screen) {
    print_screen = screen;
    print_line_cursor = print_screen;
    print_char_cursor = print_line_cursor;
}

Adding pre/post-modifier (byte*) print_str_lines::str ← ++ (byte*) print_str_lines::str
Adding pre/post-modifier (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
Adding pre/post-modifier (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
Adding pre/post-modifier (byte*) print_str::str ← ++ (byte*) print_str::str
Adding pre/post-modifier (byte*) print_str_at::at ← ++ (byte*) print_str_at::at
Adding pre/post-modifier (byte*) print_str_at::str ← ++ (byte*) print_str_at::str
Adding pre/post-modifier (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
Adding pre/post-modifier (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
Importing division.kc
PARSING src/test/java/dk/camelot64/kickc/test/kc/division.kc
// Simple binary division implementation
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5

// Remainder after signed 8 bit division
byte rem8u =0;

// Performs division on two 8 bit unsigned bytes
// Returns dividend/divisor.
// The remainder will be set into the global variable rem8u
// Implemented using simple binary division
byte div8u(byte dividend, byte divisor) {
    return divr8u(dividend, divisor, 0);
}

// Performs division on two 8 bit unsigned bytes and an initial remainder
// Returns dividend/divisor.
// The final remainder will be set into the global variable rem8u
// Implemented using simple binary division
byte divr8u(byte dividend, byte divisor, byte rem) {
    byte quotient = 0;
    for( byte i : 0..7) {
        rem = rem << 1;
        if( (dividend & $80) != 0 ) {
            rem = rem | 1;
        }
        dividend = dividend << 1;
        quotient = quotient << 1;
        if(rem>=divisor) {
            quotient++;
            rem = rem - divisor;
        }
    }
    rem8u = rem;
    return quotient;
}

// Remainder after unsigned 16-bit division
word rem16u = 0;

// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
word divr16u(word dividend, word divisor, word rem) {
    word quotient = 0;
    for( byte i : 0..15) {
        rem = rem << 1;
        if( (>dividend & $80) != 0 ) {
            rem = rem | 1;
        }
        dividend = dividend << 1;
        quotient = quotient << 1;
        if(rem>=divisor) {
            quotient++;
            rem = rem - divisor;
        }
    }
    rem16u = rem;
    return quotient;
}

// Performs division on two 16 bit unsigned words
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
word div16u(word dividend, word divisor) {
    return divr16u(dividend, divisor, 0);
}

// Divide unsigned 32-bit dword dividend with a 16-bit word divisor
// The 16-bit word remainder can be found in rem16u after the division
dword div32u16u(dword dividend, word divisor) {
  word quotient_hi = divr16u(>dividend, divisor, 0);
  word quotient_lo = divr16u(<dividend, divisor, rem16u);
  dword quotient = { quotient_hi, quotient_lo};
  return quotient;
}

// Remainder after signed 8 bit division
signed byte rem8s = 0;

// Perform division on two signed 8-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem8s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
signed byte div8s(signed byte dividend, signed byte divisor) {
    byte neg = 0;
    byte dividendu = 0;
    if(dividend<0) {
      dividendu = (byte)-dividend;
      neg = 1;
    } else {
      dividendu = (byte)dividend;
    }
    byte divisoru = 0;
    if(divisor<0) {
        divisoru = (byte)-divisor;
        neg = neg ^ 1;
    } else {
        divisoru = (byte)divisor;
    }
    byte resultu = div8u(dividendu, divisoru);
    if(neg==0) {
        rem8s = (signed byte)rem8u;
        return (signed byte)resultu;
    } else {
        rem8s = -(signed byte)rem8u;
        return -(signed byte)resultu;
    }
}

// Remainder after signed 16 bit division
signed word rem16s = 0;

// Perform division on two signed 16-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
signed word div16s(signed word dividend, signed word divisor) {
    byte neg = 0;
    word dividendu = 0;
    if(dividend<0) {
      dividendu = (word)-dividend;
      neg = 1;
    } else {
      dividendu = (word)dividend;
    }
    word divisoru = 0;
    if(divisor<0) {
        divisoru = (word)-divisor;
        neg = neg ^ 1;
    } else {
        divisoru = (word)divisor;
    }
    word resultu = div16u(dividendu, divisoru);
    if(neg==0) {
        rem16s = (signed word)rem16u;
        return (signed word)resultu;
    } else {
        rem16s = -(signed word)rem16u;
        return -(signed word)resultu;
    }
}

Adding pre/post-modifier (byte) divr8u::quotient ← ++ (byte) divr8u::quotient
Adding pre/post-modifier (word) divr16u::quotient ← ++ (word) divr16u::quotient
SYMBOLS
(label) @1
(label) @10
(label) @11
(label) @12
(label) @13
(label) @14
(label) @15
(label) @16
(label) @17
(label) @18
(label) @19
(label) @2
(label) @20
(label) @21
(label) @22
(label) @23
(label) @24
(label) @25
(label) @26
(label) @3
(label) @4
(label) @5
(label) @6
(label) @7
(label) @8
(label) @9
(label) @begin
(label) @end
(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
(boolean~) div16s::$0
(word~) div16s::$1
(boolean~) div16s::$10
(signed word~) div16s::$11
(signed word~) div16s::$12
(signed word~) div16s::$13
(signed word~) div16s::$14
(signed word~) div16s::$15
(signed word~) div16s::$16
(signed word~) div16s::$2
(word~) div16s::$3
(boolean~) div16s::$4
(word~) div16s::$5
(signed word~) div16s::$6
(word~) div16s::$7
(byte/word/dword~) div16s::$8
(word~) div16s::$9
(label) div16s::@1
(label) div16s::@10
(label) div16s::@11
(label) div16s::@12
(label) div16s::@13
(label) div16s::@14
(label) div16s::@2
(label) div16s::@3
(label) div16s::@4
(label) div16s::@5
(label) div16s::@6
(label) div16s::@7
(label) div16s::@8
(label) div16s::@9
(label) div16s::@return
(signed word) div16s::dividend
(word) div16s::dividendu
(signed word) div16s::divisor
(word) div16s::divisoru
(byte) div16s::neg
(word) div16s::resultu
(signed word) div16s::return
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word~) div16u::$0
(label) div16u::@1
(label) div16u::@return
(word) div16u::dividend
(word) div16u::divisor
(word) div16u::return
(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
(word~) div32u16u::$0
(word~) div32u16u::$1
(word~) div32u16u::$2
(word~) div32u16u::$3
(label) div32u16u::@1
(label) div32u16u::@return
(dword) div32u16u::dividend
(word) div32u16u::divisor
(dword) div32u16u::quotient
(word) div32u16u::quotient_hi
(word) div32u16u::quotient_lo
(dword) div32u16u::return
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(boolean~) div8s::$0
(byte~) div8s::$1
(boolean~) div8s::$10
(signed byte~) div8s::$11
(signed byte~) div8s::$12
(signed byte~) div8s::$13
(signed byte~) div8s::$14
(signed byte~) div8s::$15
(signed byte~) div8s::$16
(signed byte~) div8s::$2
(byte~) div8s::$3
(boolean~) div8s::$4
(byte~) div8s::$5
(signed byte~) div8s::$6
(byte~) div8s::$7
(byte/word/dword~) div8s::$8
(byte~) div8s::$9
(label) div8s::@1
(label) div8s::@10
(label) div8s::@11
(label) div8s::@12
(label) div8s::@13
(label) div8s::@14
(label) div8s::@2
(label) div8s::@3
(label) div8s::@4
(label) div8s::@5
(label) div8s::@6
(label) div8s::@7
(label) div8s::@8
(label) div8s::@9
(label) div8s::@return
(signed byte) div8s::dividend
(byte) div8s::dividendu
(signed byte) div8s::divisor
(byte) div8s::divisoru
(byte) div8s::neg
(byte) div8s::resultu
(signed byte) div8s::return
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(byte~) div8u::$0
(label) div8u::@1
(label) div8u::@return
(byte) div8u::dividend
(byte) div8u::divisor
(byte) div8u::return
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(word~) divr16u::$0
(byte~) divr16u::$1
(word~) divr16u::$10
(boolean~) divr16u::$11
(byte~) divr16u::$2
(boolean~) divr16u::$3
(boolean~) divr16u::$4
(word/dword~) divr16u::$5
(word~) divr16u::$6
(word~) divr16u::$7
(boolean~) divr16u::$8
(boolean~) divr16u::$9
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@7
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::divisor
(byte) divr16u::i
(word) divr16u::quotient
(word) divr16u::rem
(word) divr16u::return
(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
(byte~) divr8u::$0
(byte~) divr8u::$1
(boolean~) divr8u::$10
(boolean~) divr8u::$2
(boolean~) divr8u::$3
(byte/word/dword~) divr8u::$4
(byte~) divr8u::$5
(byte~) divr8u::$6
(boolean~) divr8u::$7
(boolean~) divr8u::$8
(byte~) divr8u::$9
(label) divr8u::@1
(label) divr8u::@2
(label) divr8u::@3
(label) divr8u::@4
(label) divr8u::@5
(label) divr8u::@6
(label) divr8u::@7
(label) divr8u::@return
(byte) divr8u::dividend
(byte) divr8u::divisor
(byte) divr8u::i
(byte) divr8u::quotient
(byte) divr8u::rem
(byte) divr8u::return
(void()) main()
(void~) main::$0
(void~) main::$1
(void~) main::$2
(void~) main::$3
(void~) main::$4
(label) main::@return
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(void~) print_byte::$1
(byte~) print_byte::$2
(void~) print_byte::$3
(label) print_byte::@return
(byte) print_byte::b
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte*) print_char_cursor
(void()) print_cls()
(byte*~) print_cls::$0
(boolean~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(void()) print_dword((dword) print_dword::dw)
(word~) print_dword::$0
(void~) print_dword::$1
(word~) print_dword::$2
(void~) print_dword::$3
(label) print_dword::@return
(dword) print_dword::dw
(byte[]) print_hextab
(byte*) print_line_cursor
(void()) print_ln()
(byte*~) print_ln::$0
(boolean~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(boolean~) print_sbyte::$0
(boolean~) print_sbyte::$1
(void~) print_sbyte::$2
(signed byte~) print_sbyte::$3
(byte~) print_sbyte::$4
(void~) print_sbyte::$5
(label) print_sbyte::@1
(label) print_sbyte::@2
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(byte*) print_screen
(void()) print_sdword((signed dword) print_sdword::dw)
(boolean~) print_sdword::$0
(boolean~) print_sdword::$1
(void~) print_sdword::$2
(signed dword~) print_sdword::$3
(dword~) print_sdword::$4
(void~) print_sdword::$5
(label) print_sdword::@1
(label) print_sdword::@2
(label) print_sdword::@return
(signed dword) print_sdword::dw
(void()) print_set_screen((byte*) print_set_screen::screen)
(label) print_set_screen::@return
(byte*) print_set_screen::screen
(void()) print_str((byte*) print_str::str)
(boolean~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@4
(label) print_str::@5
(label) print_str::@6
(label) print_str::@return
(byte*) print_str::str
(void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
(boolean~) print_str_at::$0
(label) print_str_at::@1
(label) print_str_at::@2
(label) print_str_at::@3
(label) print_str_at::@4
(label) print_str_at::@5
(label) print_str_at::@6
(label) print_str_at::@return
(byte*) print_str_at::at
(byte*) print_str_at::str
(void()) print_str_lines((byte*) print_str_lines::str)
(boolean~) print_str_lines::$0
(boolean~) print_str_lines::$1
(boolean~) print_str_lines::$2
(boolean~) print_str_lines::$3
(void~) print_str_lines::$4
(label) print_str_lines::@1
(label) print_str_lines::@10
(label) print_str_lines::@2
(label) print_str_lines::@3
(label) print_str_lines::@4
(label) print_str_lines::@5
(label) print_str_lines::@6
(label) print_str_lines::@7
(label) print_str_lines::@8
(label) print_str_lines::@9
(label) print_str_lines::@return
(byte) print_str_lines::ch
(byte*) print_str_lines::str
(void()) print_str_ln((byte*) print_str_ln::str)
(void~) print_str_ln::$0
(void~) print_str_ln::$1
(label) print_str_ln::@return
(byte*) print_str_ln::str
(void()) print_sword((signed word) print_sword::w)
(boolean~) print_sword::$0
(boolean~) print_sword::$1
(void~) print_sword::$2
(signed word~) print_sword::$3
(word~) print_sword::$4
(void~) print_sword::$5
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@return
(signed word) print_sword::w
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(void~) print_word::$1
(byte~) print_word::$2
(void~) print_word::$3
(label) print_word::@return
(word) print_word::w
(signed word) rem16s
(word) rem16u
(signed byte) rem8s
(byte) rem8u
(void()) test_16s()
(signed word/signed dword~) test_16s::$0
(signed word/signed dword~) test_16s::$1
(void~) test_16s::$10
(void~) test_16s::$11
(void~) test_16s::$12
(void~) test_16s::$13
(void~) test_16s::$14
(byte/signed word/word/dword/signed dword~) test_16s::$15
(boolean~) test_16s::$16
(signed word/signed dword~) test_16s::$2
(signed byte/signed word/signed dword~) test_16s::$3
(signed byte/signed word/signed dword~) test_16s::$4
(signed byte/signed word/signed dword~) test_16s::$5
(signed word~) test_16s::$6
(void~) test_16s::$7
(void~) test_16s::$8
(void~) test_16s::$9
(label) test_16s::@1
(label) test_16s::@2
(label) test_16s::@return
(signed word) test_16s::dividend
(signed word[]) test_16s::dividends
(signed word) test_16s::divisor
(signed word[]) test_16s::divisors
(byte) test_16s::i
(signed word) test_16s::res
(void()) test_16u()
(word~) test_16u::$0
(void~) test_16u::$1
(boolean~) test_16u::$10
(void~) test_16u::$2
(void~) test_16u::$3
(void~) test_16u::$4
(void~) test_16u::$5
(void~) test_16u::$6
(void~) test_16u::$7
(void~) test_16u::$8
(byte/signed word/word/dword/signed dword~) test_16u::$9
(label) test_16u::@1
(label) test_16u::@2
(label) test_16u::@return
(word) test_16u::dividend
(word[]) test_16u::dividends
(word) test_16u::divisor
(word[]) test_16u::divisors
(byte) test_16u::i
(word) test_16u::res
(void()) test_8s()
(signed byte/signed word/signed dword~) test_8s::$0
(signed byte/signed word/signed dword~) test_8s::$1
(void~) test_8s::$10
(void~) test_8s::$11
(void~) test_8s::$12
(boolean~) test_8s::$13
(signed byte/signed word/signed dword~) test_8s::$2
(signed byte/signed word/signed dword~) test_8s::$3
(signed byte~) test_8s::$4
(void~) test_8s::$5
(void~) test_8s::$6
(void~) test_8s::$7
(void~) test_8s::$8
(void~) test_8s::$9
(label) test_8s::@1
(label) test_8s::@2
(label) test_8s::@return
(signed byte) test_8s::dividend
(signed byte[]) test_8s::dividends
(signed byte) test_8s::divisor
(signed byte[]) test_8s::divisors
(byte) test_8s::i
(signed byte) test_8s::res
(void()) test_8u()
(byte~) test_8u::$0
(void~) test_8u::$1
(void~) test_8u::$2
(void~) test_8u::$3
(void~) test_8u::$4
(void~) test_8u::$5
(void~) test_8u::$6
(void~) test_8u::$7
(void~) test_8u::$8
(boolean~) test_8u::$9
(label) test_8u::@1
(label) test_8u::@2
(label) test_8u::@return
(byte) test_8u::dividend
(byte[]) test_8u::dividends
(byte) test_8u::divisor
(byte[]) test_8u::divisors
(byte) test_8u::i
(byte) test_8u::rem
(byte) test_8u::res

Promoting word/signed word/dword/signed dword to byte* in print_screen ← ((byte*)) 1024
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) print_screen ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) print_line_cursor ← (byte*) print_screen
  (byte*) print_char_cursor ← (byte*) print_line_cursor
  to:@1
print_str_lines: scope:[print_str_lines]  from
  to:print_str_lines::@1
print_str_lines::@1: scope:[print_str_lines]  from print_str_lines print_str_lines::@9
  (boolean~) print_str_lines::$0 ← *((byte*) print_str_lines::str) != (byte) '@'
  if((boolean~) print_str_lines::$0) goto print_str_lines::@2
  to:print_str_lines::@6
print_str_lines::@2: scope:[print_str_lines]  from print_str_lines::@1 print_str_lines::@7
  to:print_str_lines::@4
print_str_lines::@6: scope:[print_str_lines]  from print_str_lines::@1
  to:print_str_lines::@3
print_str_lines::@3: scope:[print_str_lines]  from print_str_lines::@10 print_str_lines::@6
  to:print_str_lines::@return
print_str_lines::@7: scope:[print_str_lines]  from
  to:print_str_lines::@2
print_str_lines::@4: scope:[print_str_lines]  from print_str_lines::@2 print_str_lines::@5
  (byte) print_str_lines::ch ← *((byte*) print_str_lines::str)
  (byte*) print_str_lines::str ← ++ (byte*) print_str_lines::str
  (boolean~) print_str_lines::$1 ← (byte) print_str_lines::ch != (byte) '@'
  (boolean~) print_str_lines::$2 ← ! (boolean~) print_str_lines::$1
  if((boolean~) print_str_lines::$2) goto print_str_lines::@5
  to:print_str_lines::@8
print_str_lines::@5: scope:[print_str_lines]  from print_str_lines::@4 print_str_lines::@8
  (boolean~) print_str_lines::$3 ← (byte) print_str_lines::ch != (byte) '@'
  if((boolean~) print_str_lines::$3) goto print_str_lines::@4
  to:print_str_lines::@9
print_str_lines::@8: scope:[print_str_lines]  from print_str_lines::@4
  *((byte*) print_char_cursor) ← (byte) print_str_lines::ch
  (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
  to:print_str_lines::@5
print_str_lines::@9: scope:[print_str_lines]  from print_str_lines::@5
  (void~) print_str_lines::$4 ← call print_ln 
  to:print_str_lines::@1
print_str_lines::@10: scope:[print_str_lines]  from
  to:print_str_lines::@3
print_str_lines::@return: scope:[print_str_lines]  from print_str_lines::@3
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
print_str_ln: scope:[print_str_ln]  from
  (void~) print_str_ln::$0 ← call print_str (byte*) print_str_ln::str 
  (void~) print_str_ln::$1 ← call print_ln 
  to:print_str_ln::@return
print_str_ln::@return: scope:[print_str_ln]  from print_str_ln
  return 
  to:@return
@2: scope:[]  from @1
  to:@3
print_str: scope:[print_str]  from
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (boolean~) print_str::$0 ← *((byte*) print_str::str) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  to:print_str::@4
print_str::@2: scope:[print_str]  from print_str::@1 print_str::@5
  *((byte*) print_char_cursor) ← *((byte*) print_str::str)
  (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
  (byte*) print_str::str ← ++ (byte*) print_str::str
  to:print_str::@1
print_str::@4: scope:[print_str]  from print_str::@1
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@4 print_str::@6
  to:print_str::@return
print_str::@5: scope:[print_str]  from
  to:print_str::@2
print_str::@6: scope:[print_str]  from
  to:print_str::@3
print_str::@return: scope:[print_str]  from print_str::@3
  return 
  to:@return
@3: scope:[]  from @2
  to:@4
print_str_at: scope:[print_str_at]  from
  to:print_str_at::@1
print_str_at::@1: scope:[print_str_at]  from print_str_at print_str_at::@2
  (boolean~) print_str_at::$0 ← *((byte*) print_str_at::str) != (byte) '@'
  if((boolean~) print_str_at::$0) goto print_str_at::@2
  to:print_str_at::@4
print_str_at::@2: scope:[print_str_at]  from print_str_at::@1 print_str_at::@5
  *((byte*) print_str_at::at) ← *((byte*) print_str_at::str)
  (byte*) print_str_at::at ← ++ (byte*) print_str_at::at
  (byte*) print_str_at::str ← ++ (byte*) print_str_at::str
  to:print_str_at::@1
print_str_at::@4: scope:[print_str_at]  from print_str_at::@1
  to:print_str_at::@3
print_str_at::@3: scope:[print_str_at]  from print_str_at::@4 print_str_at::@6
  to:print_str_at::@return
print_str_at::@5: scope:[print_str_at]  from
  to:print_str_at::@2
print_str_at::@6: scope:[print_str_at]  from
  to:print_str_at::@3
print_str_at::@return: scope:[print_str_at]  from print_str_at::@3
  return 
  to:@return
@4: scope:[]  from @3
  to:@5
print_ln: scope:[print_ln]  from
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) print_line_cursor ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) print_line_cursor < (byte*) print_char_cursor
  if((boolean~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_char_cursor ← (byte*) print_line_cursor
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  return 
  to:@return
@5: scope:[]  from @4
  to:@6
print_sword: scope:[print_sword]  from
  (boolean~) print_sword::$0 ← (signed word) print_sword::w < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sword::$1 ← ! (boolean~) print_sword::$0
  if((boolean~) print_sword::$1) goto print_sword::@1
  to:print_sword::@2
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@2
  (word~) print_sword::$4 ← ((word)) (signed word) print_sword::w
  (void~) print_sword::$5 ← call print_word (word~) print_sword::$4 
  to:print_sword::@return
print_sword::@2: scope:[print_sword]  from print_sword
  (void~) print_sword::$2 ← call print_char (byte) '-' 
  (signed word~) print_sword::$3 ← - (signed word) print_sword::w
  (signed word) print_sword::w ← (signed word~) print_sword::$3
  to:print_sword::@1
print_sword::@return: scope:[print_sword]  from print_sword::@1
  return 
  to:@return
@6: scope:[]  from @5
  to:@7
print_sbyte: scope:[print_sbyte]  from
  (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sbyte::$1 ← ! (boolean~) print_sbyte::$0
  if((boolean~) print_sbyte::$1) goto print_sbyte::@1
  to:print_sbyte::@2
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte print_sbyte::@2
  (byte~) print_sbyte::$4 ← ((byte)) (signed byte) print_sbyte::b
  (void~) print_sbyte::$5 ← call print_byte (byte~) print_sbyte::$4 
  to:print_sbyte::@return
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte
  (void~) print_sbyte::$2 ← call print_char (byte) '-' 
  (signed byte~) print_sbyte::$3 ← - (signed byte) print_sbyte::b
  (signed byte) print_sbyte::b ← (signed byte~) print_sbyte::$3
  to:print_sbyte::@1
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@1
  return 
  to:@return
@7: scope:[]  from @6
  to:@8
print_word: scope:[print_word]  from
  (byte~) print_word::$0 ← > (word) print_word::w
  (void~) print_word::$1 ← call print_byte (byte~) print_word::$0 
  (byte~) print_word::$2 ← < (word) print_word::w
  (void~) print_word::$3 ← call print_byte (byte~) print_word::$2 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word
  return 
  to:@return
@8: scope:[]  from @7
  to:@9
print_dword: scope:[print_dword]  from
  (word~) print_dword::$0 ← > (dword) print_dword::dw
  (void~) print_dword::$1 ← call print_word (word~) print_dword::$0 
  (word~) print_dword::$2 ← < (dword) print_dword::dw
  (void~) print_dword::$3 ← call print_word (word~) print_dword::$2 
  to:print_dword::@return
print_dword::@return: scope:[print_dword]  from print_dword
  return 
  to:@return
@9: scope:[]  from @8
  to:@10
print_sdword: scope:[print_sdword]  from
  (boolean~) print_sdword::$0 ← (signed dword) print_sdword::dw < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sdword::$1 ← ! (boolean~) print_sdword::$0
  if((boolean~) print_sdword::$1) goto print_sdword::@1
  to:print_sdword::@2
print_sdword::@1: scope:[print_sdword]  from print_sdword print_sdword::@2
  (dword~) print_sdword::$4 ← ((dword)) (signed dword) print_sdword::dw
  (void~) print_sdword::$5 ← call print_dword (dword~) print_sdword::$4 
  to:print_sdword::@return
print_sdword::@2: scope:[print_sdword]  from print_sdword
  (void~) print_sdword::$2 ← call print_char (byte) '-' 
  (signed dword~) print_sdword::$3 ← - (signed dword) print_sdword::dw
  (signed dword) print_sdword::dw ← (signed dword~) print_sdword::$3
  to:print_sdword::@1
print_sdword::@return: scope:[print_sdword]  from print_sdword::@1
  return 
  to:@return
@10: scope:[]  from @9
  (byte[]) print_hextab ← (string) "0123456789abcdef"
  to:@11
print_byte: scope:[print_byte]  from
  (byte~) print_byte::$0 ← (byte) print_byte::b >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (void~) print_byte::$1 ← call print_char *((byte[]) print_hextab + (byte~) print_byte::$0) 
  (byte~) print_byte::$2 ← (byte) print_byte::b & (byte/signed byte/word/signed word/dword/signed dword) 15
  (void~) print_byte::$3 ← call print_char *((byte[]) print_hextab + (byte~) print_byte::$2) 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte
  return 
  to:@return
@11: scope:[]  from @10
  to:@12
print_char: scope:[print_char]  from
  *((byte*) print_char_cursor) ← (byte) print_char::ch
  (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  return 
  to:@return
@12: scope:[]  from @11
  to:@13
print_cls: scope:[print_cls]  from
  (byte*) print_cls::sc ← (byte*) print_screen
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  *((byte*) print_cls::sc) ← (byte) ' '
  (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
  (byte*~) print_cls::$0 ← (byte*) print_screen + (word/signed word/dword/signed dword) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc != (byte*~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) print_line_cursor ← (byte*) print_screen
  (byte*) print_char_cursor ← (byte*) print_line_cursor
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  return 
  to:@return
@13: scope:[]  from @12
  to:@14
print_set_screen: scope:[print_set_screen]  from
  (byte*) print_screen ← (byte*) print_set_screen::screen
  (byte*) print_line_cursor ← (byte*) print_screen
  (byte*) print_char_cursor ← (byte*) print_line_cursor
  to:print_set_screen::@return
print_set_screen::@return: scope:[print_set_screen]  from print_set_screen
  return 
  to:@return
@14: scope:[]  from @13
  (byte) rem8u ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@15
div8u: scope:[div8u]  from
  (byte~) div8u::$0 ← call divr8u (byte) div8u::dividend (byte) div8u::divisor (byte/signed byte/word/signed word/dword/signed dword) 0 
  (byte) div8u::return ← (byte~) div8u::$0
  to:div8u::@return
div8u::@return: scope:[div8u]  from div8u div8u::@1
  (byte) div8u::return ← (byte) div8u::return
  return (byte) div8u::return
  to:@return
div8u::@1: scope:[div8u]  from
  to:div8u::@return
@15: scope:[]  from @14
  to:@16
divr8u: scope:[divr8u]  from
  (byte) divr8u::quotient ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) divr8u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:divr8u::@1
divr8u::@1: scope:[divr8u]  from divr8u divr8u::@3
  (byte~) divr8u::$0 ← (byte) divr8u::rem << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::rem ← (byte~) divr8u::$0
  (byte~) divr8u::$1 ← (byte) divr8u::dividend & (byte/word/signed word/dword/signed dword) 128
  (boolean~) divr8u::$2 ← (byte~) divr8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) divr8u::$3 ← ! (boolean~) divr8u::$2
  if((boolean~) divr8u::$3) goto divr8u::@2
  to:divr8u::@4
divr8u::@2: scope:[divr8u]  from divr8u::@1 divr8u::@4
  (byte~) divr8u::$5 ← (byte) divr8u::dividend << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::dividend ← (byte~) divr8u::$5
  (byte~) divr8u::$6 ← (byte) divr8u::quotient << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::quotient ← (byte~) divr8u::$6
  (boolean~) divr8u::$7 ← (byte) divr8u::rem >= (byte) divr8u::divisor
  (boolean~) divr8u::$8 ← ! (boolean~) divr8u::$7
  if((boolean~) divr8u::$8) goto divr8u::@3
  to:divr8u::@5
divr8u::@4: scope:[divr8u]  from divr8u::@1
  (byte/word/dword~) divr8u::$4 ← (byte) divr8u::rem | (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::rem ← (byte/word/dword~) divr8u::$4
  to:divr8u::@2
divr8u::@3: scope:[divr8u]  from divr8u::@2 divr8u::@5
  (byte) divr8u::i ← ++ (byte) divr8u::i
  (boolean~) divr8u::$10 ← (byte) divr8u::i != (byte/signed byte/word/signed word/dword/signed dword) 8
  if((boolean~) divr8u::$10) goto divr8u::@1
  to:divr8u::@6
divr8u::@5: scope:[divr8u]  from divr8u::@2
  (byte) divr8u::quotient ← ++ (byte) divr8u::quotient
  (byte~) divr8u::$9 ← (byte) divr8u::rem - (byte) divr8u::divisor
  (byte) divr8u::rem ← (byte~) divr8u::$9
  to:divr8u::@3
divr8u::@6: scope:[divr8u]  from divr8u::@3
  (byte) rem8u ← (byte) divr8u::rem
  (byte) divr8u::return ← (byte) divr8u::quotient
  to:divr8u::@return
divr8u::@return: scope:[divr8u]  from divr8u::@6 divr8u::@7
  (byte) divr8u::return ← (byte) divr8u::return
  return (byte) divr8u::return
  to:@return
divr8u::@7: scope:[divr8u]  from
  to:divr8u::@return
@16: scope:[]  from @15
  (word) rem16u ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@17
divr16u: scope:[divr16u]  from
  (word) divr16u::quotient ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) divr16u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  (word~) divr16u::$0 ← (word) divr16u::rem << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::rem ← (word~) divr16u::$0
  (byte~) divr16u::$1 ← > (word) divr16u::dividend
  (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128
  (boolean~) divr16u::$3 ← (byte~) divr16u::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) divr16u::$4 ← ! (boolean~) divr16u::$3
  if((boolean~) divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  (word~) divr16u::$6 ← (word) divr16u::dividend << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::dividend ← (word~) divr16u::$6
  (word~) divr16u::$7 ← (word) divr16u::quotient << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::quotient ← (word~) divr16u::$7
  (boolean~) divr16u::$8 ← (word) divr16u::rem >= (word) divr16u::divisor
  (boolean~) divr16u::$9 ← ! (boolean~) divr16u::$8
  if((boolean~) divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  (word/dword~) divr16u::$5 ← (word) divr16u::rem | (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::rem ← (word/dword~) divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  (byte) divr16u::i ← ++ (byte) divr16u::i
  (boolean~) divr16u::$11 ← (byte) divr16u::i != (byte/signed byte/word/signed word/dword/signed dword) 16
  if((boolean~) divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  (word) divr16u::quotient ← ++ (word) divr16u::quotient
  (word~) divr16u::$10 ← (word) divr16u::rem - (word) divr16u::divisor
  (word) divr16u::rem ← (word~) divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  (word) rem16u ← (word) divr16u::rem
  (word) divr16u::return ← (word) divr16u::quotient
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6 divr16u::@7
  (word) divr16u::return ← (word) divr16u::return
  return (word) divr16u::return
  to:@return
divr16u::@7: scope:[divr16u]  from
  to:divr16u::@return
@17: scope:[]  from @16
  to:@18
div16u: scope:[div16u]  from
  (word~) div16u::$0 ← call divr16u (word) div16u::dividend (word) div16u::divisor (byte/signed byte/word/signed word/dword/signed dword) 0 
  (word) div16u::return ← (word~) div16u::$0
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u div16u::@1
  (word) div16u::return ← (word) div16u::return
  return (word) div16u::return
  to:@return
div16u::@1: scope:[div16u]  from
  to:div16u::@return
@18: scope:[]  from @17
  to:@19
div32u16u: scope:[div32u16u]  from
  (word~) div32u16u::$0 ← > (dword) div32u16u::dividend
  (word~) div32u16u::$1 ← call divr16u (word~) div32u16u::$0 (word) div32u16u::divisor (byte/signed byte/word/signed word/dword/signed dword) 0 
  (word) div32u16u::quotient_hi ← (word~) div32u16u::$1
  (word~) div32u16u::$2 ← < (dword) div32u16u::dividend
  (word~) div32u16u::$3 ← call divr16u (word~) div32u16u::$2 (word) div32u16u::divisor (word) rem16u 
  (word) div32u16u::quotient_lo ← (word~) div32u16u::$3
  (dword) div32u16u::quotient ← { (word) div32u16u::quotient_hi, (word) div32u16u::quotient_lo }
  (dword) div32u16u::return ← (dword) div32u16u::quotient
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u div32u16u::@1
  (dword) div32u16u::return ← (dword) div32u16u::return
  return (dword) div32u16u::return
  to:@return
div32u16u::@1: scope:[div32u16u]  from
  to:div32u16u::@return
@19: scope:[]  from @18
  (signed byte) rem8s ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@20
div8s: scope:[div8s]  from
  (byte) div8s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8s::dividendu ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$0 ← (signed byte) div8s::dividend < (byte/signed byte/word/signed word/dword/signed dword) 0
  if((boolean~) div8s::$0) goto div8s::@1
  to:div8s::@7
div8s::@1: scope:[div8s]  from div8s div8s::@8
  (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend
  (byte~) div8s::$3 ← ((byte)) (signed byte~) div8s::$2
  (byte) div8s::dividendu ← (byte~) div8s::$3
  (byte) div8s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:div8s::@2
div8s::@7: scope:[div8s]  from div8s
  (byte~) div8s::$1 ← ((byte)) (signed byte) div8s::dividend
  (byte) div8s::dividendu ← (byte~) div8s::$1
  to:div8s::@2
div8s::@2: scope:[div8s]  from div8s::@1 div8s::@7
  (byte) div8s::divisoru ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$4 ← (signed byte) div8s::divisor < (byte/signed byte/word/signed word/dword/signed dword) 0
  if((boolean~) div8s::$4) goto div8s::@3
  to:div8s::@9
div8s::@8: scope:[div8s]  from
  to:div8s::@1
div8s::@3: scope:[div8s]  from div8s::@10 div8s::@2
  (signed byte~) div8s::$6 ← - (signed byte) div8s::divisor
  (byte~) div8s::$7 ← ((byte)) (signed byte~) div8s::$6
  (byte) div8s::divisoru ← (byte~) div8s::$7
  (byte/word/dword~) div8s::$8 ← (byte) div8s::neg ^ (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8s::neg ← (byte/word/dword~) div8s::$8
  to:div8s::@4
div8s::@9: scope:[div8s]  from div8s::@2
  (byte~) div8s::$5 ← ((byte)) (signed byte) div8s::divisor
  (byte) div8s::divisoru ← (byte~) div8s::$5
  to:div8s::@4
div8s::@4: scope:[div8s]  from div8s::@3 div8s::@9
  (byte~) div8s::$9 ← call div8u (byte) div8s::dividendu (byte) div8s::divisoru 
  (byte) div8s::resultu ← (byte~) div8s::$9
  (boolean~) div8s::$10 ← (byte) div8s::neg == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((boolean~) div8s::$10) goto div8s::@5
  to:div8s::@11
div8s::@10: scope:[div8s]  from
  to:div8s::@3
div8s::@5: scope:[div8s]  from div8s::@13 div8s::@4
  (signed byte~) div8s::$15 ← ((signed byte)) (byte) rem8u
  (signed byte) rem8s ← (signed byte~) div8s::$15
  (signed byte~) div8s::$16 ← ((signed byte)) (byte) div8s::resultu
  (signed byte) div8s::return ← (signed byte~) div8s::$16
  to:div8s::@return
div8s::@11: scope:[div8s]  from div8s::@4
  (signed byte~) div8s::$11 ← ((signed byte)) (byte) rem8u
  (signed byte~) div8s::$12 ← - (signed byte~) div8s::$11
  (signed byte) rem8s ← (signed byte~) div8s::$12
  (signed byte~) div8s::$13 ← ((signed byte)) (byte) div8s::resultu
  (signed byte~) div8s::$14 ← - (signed byte~) div8s::$13
  (signed byte) div8s::return ← (signed byte~) div8s::$14
  to:div8s::@return
div8s::@return: scope:[div8s]  from div8s::@11 div8s::@5 div8s::@6
  (signed byte) div8s::return ← (signed byte) div8s::return
  return (signed byte) div8s::return
  to:@return
div8s::@12: scope:[div8s]  from
  to:div8s::@6
div8s::@6: scope:[div8s]  from div8s::@12 div8s::@14
  to:div8s::@return
div8s::@13: scope:[div8s]  from
  to:div8s::@5
div8s::@14: scope:[div8s]  from
  to:div8s::@6
@20: scope:[]  from @19
  (signed word) rem16s ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@21
div16s: scope:[div16s]  from
  (byte) div16s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) div16s::dividendu ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$0 ← (signed word) div16s::dividend < (byte/signed byte/word/signed word/dword/signed dword) 0
  if((boolean~) div16s::$0) goto div16s::@1
  to:div16s::@7
div16s::@1: scope:[div16s]  from div16s div16s::@8
  (signed word~) div16s::$2 ← - (signed word) div16s::dividend
  (word~) div16s::$3 ← ((word)) (signed word~) div16s::$2
  (word) div16s::dividendu ← (word~) div16s::$3
  (byte) div16s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:div16s::@2
div16s::@7: scope:[div16s]  from div16s
  (word~) div16s::$1 ← ((word)) (signed word) div16s::dividend
  (word) div16s::dividendu ← (word~) div16s::$1
  to:div16s::@2
div16s::@2: scope:[div16s]  from div16s::@1 div16s::@7
  (word) div16s::divisoru ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$4 ← (signed word) div16s::divisor < (byte/signed byte/word/signed word/dword/signed dword) 0
  if((boolean~) div16s::$4) goto div16s::@3
  to:div16s::@9
div16s::@8: scope:[div16s]  from
  to:div16s::@1
div16s::@3: scope:[div16s]  from div16s::@10 div16s::@2
  (signed word~) div16s::$6 ← - (signed word) div16s::divisor
  (word~) div16s::$7 ← ((word)) (signed word~) div16s::$6
  (word) div16s::divisoru ← (word~) div16s::$7
  (byte/word/dword~) div16s::$8 ← (byte) div16s::neg ^ (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div16s::neg ← (byte/word/dword~) div16s::$8
  to:div16s::@4
div16s::@9: scope:[div16s]  from div16s::@2
  (word~) div16s::$5 ← ((word)) (signed word) div16s::divisor
  (word) div16s::divisoru ← (word~) div16s::$5
  to:div16s::@4
div16s::@4: scope:[div16s]  from div16s::@3 div16s::@9
  (word~) div16s::$9 ← call div16u (word) div16s::dividendu (word) div16s::divisoru 
  (word) div16s::resultu ← (word~) div16s::$9
  (boolean~) div16s::$10 ← (byte) div16s::neg == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((boolean~) div16s::$10) goto div16s::@5
  to:div16s::@11
div16s::@10: scope:[div16s]  from
  to:div16s::@3
div16s::@5: scope:[div16s]  from div16s::@13 div16s::@4
  (signed word~) div16s::$15 ← ((signed word)) (word) rem16u
  (signed word) rem16s ← (signed word~) div16s::$15
  (signed word~) div16s::$16 ← ((signed word)) (word) div16s::resultu
  (signed word) div16s::return ← (signed word~) div16s::$16
  to:div16s::@return
div16s::@11: scope:[div16s]  from div16s::@4
  (signed word~) div16s::$11 ← ((signed word)) (word) rem16u
  (signed word~) div16s::$12 ← - (signed word~) div16s::$11
  (signed word) rem16s ← (signed word~) div16s::$12
  (signed word~) div16s::$13 ← ((signed word)) (word) div16s::resultu
  (signed word~) div16s::$14 ← - (signed word~) div16s::$13
  (signed word) div16s::return ← (signed word~) div16s::$14
  to:div16s::@return
div16s::@return: scope:[div16s]  from div16s::@11 div16s::@5 div16s::@6
  (signed word) div16s::return ← (signed word) div16s::return
  return (signed word) div16s::return
  to:@return
div16s::@12: scope:[div16s]  from
  to:div16s::@6
div16s::@6: scope:[div16s]  from div16s::@12 div16s::@14
  to:div16s::@return
div16s::@13: scope:[div16s]  from
  to:div16s::@5
div16s::@14: scope:[div16s]  from
  to:div16s::@6
@21: scope:[]  from @20
  to:@22
main: scope:[main]  from
  (void~) main::$0 ← call print_cls 
  (void~) main::$1 ← call test_8u 
  (void~) main::$2 ← call test_16u 
  (void~) main::$3 ← call test_8s 
  (void~) main::$4 ← call test_16s 
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@22: scope:[]  from @21
  to:@23
test_8u: scope:[test_8u]  from
  (byte[]) test_8u::dividends ← { (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255 }
  (byte[]) test_8u::divisors ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_8u::rem ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) test_8u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:test_8u::@1
test_8u::@1: scope:[test_8u]  from test_8u test_8u::@1
  (byte) test_8u::dividend ← *((byte[]) test_8u::dividends + (byte) test_8u::i)
  (byte) test_8u::divisor ← *((byte[]) test_8u::divisors + (byte) test_8u::i)
  (byte~) test_8u::$0 ← call div8u (byte) test_8u::dividend (byte) test_8u::divisor 
  (byte) test_8u::res ← (byte~) test_8u::$0
  (void~) test_8u::$1 ← call print_byte (byte) test_8u::dividend 
  (void~) test_8u::$2 ← call print_str (string) " / @" 
  (void~) test_8u::$3 ← call print_byte (byte) test_8u::divisor 
  (void~) test_8u::$4 ← call print_str (string) " = @" 
  (void~) test_8u::$5 ← call print_byte (byte) test_8u::res 
  (void~) test_8u::$6 ← call print_str (string) " @" 
  (void~) test_8u::$7 ← call print_byte (byte) rem8u 
  (void~) test_8u::$8 ← call print_ln 
  (byte) test_8u::i ← ++ (byte) test_8u::i
  (boolean~) test_8u::$9 ← (byte) test_8u::i != (byte/signed byte/word/signed word/dword/signed dword) 6
  if((boolean~) test_8u::$9) goto test_8u::@1
  to:test_8u::@2
test_8u::@2: scope:[test_8u]  from test_8u::@1
  to:test_8u::@return
test_8u::@return: scope:[test_8u]  from test_8u::@2
  return 
  to:@return
@23: scope:[]  from @22
  to:@24
test_16u: scope:[test_16u]  from
  (word[]) test_16u::dividends ← { (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535 }
  (word[]) test_16u::divisors ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_16u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:test_16u::@1
test_16u::@1: scope:[test_16u]  from test_16u test_16u::@1
  (word) test_16u::dividend ← *((word[]) test_16u::dividends + (byte) test_16u::i)
  (word) test_16u::divisor ← *((word[]) test_16u::divisors + (byte) test_16u::i)
  (word~) test_16u::$0 ← call div16u (word) test_16u::dividend (word) test_16u::divisor 
  (word) test_16u::res ← (word~) test_16u::$0
  (void~) test_16u::$1 ← call print_word (word) test_16u::dividend 
  (void~) test_16u::$2 ← call print_str (string) " / @" 
  (void~) test_16u::$3 ← call print_word (word) test_16u::divisor 
  (void~) test_16u::$4 ← call print_str (string) " = @" 
  (void~) test_16u::$5 ← call print_word (word) test_16u::res 
  (void~) test_16u::$6 ← call print_str (string) " @" 
  (void~) test_16u::$7 ← call print_word (word) rem16u 
  (void~) test_16u::$8 ← call print_ln 
  (byte/signed word/word/dword/signed dword~) test_16u::$9 ← (byte) test_16u::i + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) test_16u::i ← (byte/signed word/word/dword/signed dword~) test_16u::$9
  (boolean~) test_16u::$10 ← (byte) test_16u::i != (byte/signed byte/word/signed word/dword/signed dword) 12
  if((boolean~) test_16u::$10) goto test_16u::@1
  to:test_16u::@2
test_16u::@2: scope:[test_16u]  from test_16u::@1
  to:test_16u::@return
test_16u::@return: scope:[test_16u]  from test_16u::@2
  return 
  to:@return
@24: scope:[]  from @23
  to:@25
test_8s: scope:[test_8s]  from
  (signed byte/signed word/signed dword~) test_8s::$0 ← - (byte/signed byte/word/signed word/dword/signed dword) 127
  (signed byte/signed word/signed dword~) test_8s::$1 ← - (byte/signed byte/word/signed word/dword/signed dword) 127
  (signed byte[]) test_8s::dividends ← { (byte/signed byte/word/signed word/dword/signed dword) 127, (signed byte/signed word/signed dword~) test_8s::$0, (signed byte/signed word/signed dword~) test_8s::$1, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127 }
  (signed byte/signed word/signed dword~) test_8s::$2 ← - (byte/signed byte/word/signed word/dword/signed dword) 11
  (signed byte/signed word/signed dword~) test_8s::$3 ← - (byte/signed byte/word/signed word/dword/signed dword) 13
  (signed byte[]) test_8s::divisors ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (signed byte/signed word/signed dword~) test_8s::$2, (signed byte/signed word/signed dword~) test_8s::$3, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_8s::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:test_8s::@1
test_8s::@1: scope:[test_8s]  from test_8s test_8s::@1
  (signed byte) test_8s::dividend ← *((signed byte[]) test_8s::dividends + (byte) test_8s::i)
  (signed byte) test_8s::divisor ← *((signed byte[]) test_8s::divisors + (byte) test_8s::i)
  (signed byte~) test_8s::$4 ← call div8s (signed byte) test_8s::dividend (signed byte) test_8s::divisor 
  (signed byte) test_8s::res ← (signed byte~) test_8s::$4
  (void~) test_8s::$5 ← call print_sbyte (signed byte) test_8s::dividend 
  (void~) test_8s::$6 ← call print_str (string) " / @" 
  (void~) test_8s::$7 ← call print_sbyte (signed byte) test_8s::divisor 
  (void~) test_8s::$8 ← call print_str (string) " = @" 
  (void~) test_8s::$9 ← call print_sbyte (signed byte) test_8s::res 
  (void~) test_8s::$10 ← call print_str (string) " @" 
  (void~) test_8s::$11 ← call print_sbyte (signed byte) rem8s 
  (void~) test_8s::$12 ← call print_ln 
  (byte) test_8s::i ← ++ (byte) test_8s::i
  (boolean~) test_8s::$13 ← (byte) test_8s::i != (byte/signed byte/word/signed word/dword/signed dword) 6
  if((boolean~) test_8s::$13) goto test_8s::@1
  to:test_8s::@2
test_8s::@2: scope:[test_8s]  from test_8s::@1
  to:test_8s::@return
test_8s::@return: scope:[test_8s]  from test_8s::@2
  return 
  to:@return
@25: scope:[]  from @24
  to:@26
test_16s: scope:[test_16s]  from
  (signed word/signed dword~) test_16s::$0 ← - (word/signed word/dword/signed dword) 32767
  (signed word/signed dword~) test_16s::$1 ← - (word/signed word/dword/signed dword) 32767
  (signed word/signed dword~) test_16s::$2 ← - (word/signed word/dword/signed dword) 32767
  (signed word[]) test_16s::dividends ← { (word/signed word/dword/signed dword) 32767, (word/signed word/dword/signed dword) 32767, (signed word/signed dword~) test_16s::$0, (signed word/signed dword~) test_16s::$1, (word/signed word/dword/signed dword) 32767, (signed word/signed dword~) test_16s::$2 }
  (signed byte/signed word/signed dword~) test_16s::$3 ← - (byte/signed byte/word/signed word/dword/signed dword) 7
  (signed byte/signed word/signed dword~) test_16s::$4 ← - (byte/signed byte/word/signed word/dword/signed dword) 13
  (signed byte/signed word/signed dword~) test_16s::$5 ← - (byte/signed byte/word/signed word/dword/signed dword) 17
  (signed word[]) test_16s::divisors ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (signed byte/signed word/signed dword~) test_16s::$3, (byte/signed byte/word/signed word/dword/signed dword) 11, (signed byte/signed word/signed dword~) test_16s::$4, (signed byte/signed word/signed dword~) test_16s::$5, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_16s::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:test_16s::@1
test_16s::@1: scope:[test_16s]  from test_16s test_16s::@1
  (signed word) test_16s::dividend ← *((signed word[]) test_16s::dividends + (byte) test_16s::i)
  (signed word) test_16s::divisor ← *((signed word[]) test_16s::divisors + (byte) test_16s::i)
  (signed word~) test_16s::$6 ← call div16s (signed word) test_16s::dividend (signed word) test_16s::divisor 
  (signed word) test_16s::res ← (signed word~) test_16s::$6
  (void~) test_16s::$7 ← call print_sword (signed word) test_16s::dividend 
  (void~) test_16s::$8 ← call print_str (string) " / @" 
  (void~) test_16s::$9 ← call print_sword (signed word) test_16s::divisor 
  (void~) test_16s::$10 ← call print_str (string) " = @" 
  (void~) test_16s::$11 ← call print_sword (signed word) test_16s::res 
  (void~) test_16s::$12 ← call print_str (string) " @" 
  (void~) test_16s::$13 ← call print_sword (signed word) rem16s 
  (void~) test_16s::$14 ← call print_ln 
  (byte/signed word/word/dword/signed dword~) test_16s::$15 ← (byte) test_16s::i + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) test_16s::i ← (byte/signed word/word/dword/signed dword~) test_16s::$15
  (boolean~) test_16s::$16 ← (byte) test_16s::i != (byte/signed byte/word/signed word/dword/signed dword) 12
  if((boolean~) test_16s::$16) goto test_16s::@1
  to:test_16s::@2
test_16s::@2: scope:[test_16s]  from test_16s::@1
  to:test_16s::@return
test_16s::@return: scope:[test_16s]  from test_16s::@2
  return 
  to:@return
@26: scope:[]  from @25
  call main 
  to:@end
@end: scope:[]  from @26

Removing unused procedure print_str_lines
Removing unused procedure print_str_ln
Removing unused procedure print_str_at
Removing unused procedure print_sdword
Removing unused procedure print_set_screen
Removing unused procedure div32u16u
Removing unused procedure print_dword
Eliminating unused variable - keeping the call (void~) print_sword::$5
Eliminating unused variable - keeping the call (void~) print_sword::$2
Eliminating unused variable - keeping the call (void~) print_sbyte::$5
Eliminating unused variable - keeping the call (void~) print_sbyte::$2
Eliminating unused variable - keeping the call (void~) print_word::$1
Eliminating unused variable - keeping the call (void~) print_word::$3
Eliminating unused variable - keeping the call (void~) print_byte::$1
Eliminating unused variable - keeping the call (void~) print_byte::$3
Eliminating unused variable - keeping the call (void~) main::$0
Eliminating unused variable - keeping the call (void~) main::$1
Eliminating unused variable - keeping the call (void~) main::$2
Eliminating unused variable - keeping the call (void~) main::$3
Eliminating unused variable - keeping the call (void~) main::$4
Eliminating unused variable (byte) test_8u::rem and assignment [203] (byte) test_8u::rem ← (byte/signed byte/word/signed word/dword/signed dword) 0
Eliminating unused variable - keeping the call (void~) test_8u::$1
Eliminating unused variable - keeping the call (void~) test_8u::$2
Eliminating unused variable - keeping the call (void~) test_8u::$3
Eliminating unused variable - keeping the call (void~) test_8u::$4
Eliminating unused variable - keeping the call (void~) test_8u::$5
Eliminating unused variable - keeping the call (void~) test_8u::$6
Eliminating unused variable - keeping the call (void~) test_8u::$7
Eliminating unused variable - keeping the call (void~) test_8u::$8
Eliminating unused variable - keeping the call (void~) test_16u::$1
Eliminating unused variable - keeping the call (void~) test_16u::$2
Eliminating unused variable - keeping the call (void~) test_16u::$3
Eliminating unused variable - keeping the call (void~) test_16u::$4
Eliminating unused variable - keeping the call (void~) test_16u::$5
Eliminating unused variable - keeping the call (void~) test_16u::$6
Eliminating unused variable - keeping the call (void~) test_16u::$7
Eliminating unused variable - keeping the call (void~) test_16u::$8
Eliminating unused variable - keeping the call (void~) test_8s::$5
Eliminating unused variable - keeping the call (void~) test_8s::$6
Eliminating unused variable - keeping the call (void~) test_8s::$7
Eliminating unused variable - keeping the call (void~) test_8s::$8
Eliminating unused variable - keeping the call (void~) test_8s::$9
Eliminating unused variable - keeping the call (void~) test_8s::$10
Eliminating unused variable - keeping the call (void~) test_8s::$11
Eliminating unused variable - keeping the call (void~) test_8s::$12
Eliminating unused variable - keeping the call (void~) test_16s::$7
Eliminating unused variable - keeping the call (void~) test_16s::$8
Eliminating unused variable - keeping the call (void~) test_16s::$9
Eliminating unused variable - keeping the call (void~) test_16s::$10
Eliminating unused variable - keeping the call (void~) test_16s::$11
Eliminating unused variable - keeping the call (void~) test_16s::$12
Eliminating unused variable - keeping the call (void~) test_16s::$13
Eliminating unused variable - keeping the call (void~) test_16s::$14
Creating constant string variable for inline (const string) $0 "0123456789abcdef"
Creating constant string variable for inline (const string) test_8u::str " / @"
Creating constant string variable for inline (const string) test_8u::str1 " = @"
Creating constant string variable for inline (const string) test_8u::str2 " @"
Creating constant string variable for inline (const string) test_16u::str " / @"
Creating constant string variable for inline (const string) test_16u::str1 " = @"
Creating constant string variable for inline (const string) test_16u::str2 " @"
Creating constant string variable for inline (const string) test_8s::str " / @"
Creating constant string variable for inline (const string) test_8s::str1 " = @"
Creating constant string variable for inline (const string) test_8s::str2 " @"
Creating constant string variable for inline (const string) test_16s::str " / @"
Creating constant string variable for inline (const string) test_16s::str1 " = @"
Creating constant string variable for inline (const string) test_16s::str2 " @"
Removing empty block @1
Removing empty block @2
Removing empty block print_str::@4
Removing empty block print_str::@3
Removing empty block print_str::@5
Removing empty block print_str::@6
Removing empty block @3
Removing empty block @4
Removing empty block @5
Removing empty block @6
Removing empty block @7
Removing empty block @8
Removing empty block @9
Removing empty block @11
Removing empty block @12
Removing empty block @13
Removing empty block div8u::@1
Removing empty block @15
Removing empty block divr8u::@7
Removing empty block divr16u::@7
Removing empty block @17
Removing empty block div16u::@1
Removing empty block @18
Removing empty block div8s::@8
Removing empty block div8s::@10
Removing empty block div8s::@12
Removing empty block div8s::@6
Removing empty block div8s::@13
Removing empty block div8s::@14
Removing empty block div16s::@8
Removing empty block div16s::@10
Removing empty block div16s::@12
Removing empty block div16s::@6
Removing empty block div16s::@13
Removing empty block div16s::@14
Removing empty block @21
Removing empty block @22
Removing empty block test_8u::@2
Removing empty block @23
Removing empty block test_16u::@2
Removing empty block @24
Removing empty block test_8s::@2
Removing empty block @25
Removing empty block test_16s::@2
PROCEDURE MODIFY VARIABLE ANALYSIS
print_str modifies print_char_cursor
print_ln modifies print_line_cursor
print_ln modifies print_char_cursor
print_sword modifies print_char_cursor
print_sbyte modifies print_char_cursor
print_word modifies print_char_cursor
print_byte modifies print_char_cursor
print_char modifies print_char_cursor
print_cls modifies print_line_cursor
print_cls modifies print_char_cursor
div8u modifies rem8u
divr8u modifies rem8u
divr16u modifies rem16u
div16u modifies rem16u
div8s modifies rem8u
div8s modifies rem8s
div16s modifies rem16u
div16s modifies rem16s
main modifies print_line_cursor
main modifies print_char_cursor
main modifies rem8u
main modifies rem16u
main modifies rem8s
main modifies rem16s
test_8u modifies rem8u
test_8u modifies print_char_cursor
test_8u modifies print_line_cursor
test_16u modifies rem16u
test_16u modifies print_char_cursor
test_16u modifies print_line_cursor
test_8s modifies rem8u
test_8s modifies rem8s
test_8s modifies print_char_cursor
test_8s modifies print_line_cursor
test_16s modifies rem16u
test_16s modifies rem16s
test_16s modifies print_char_cursor
test_16s modifies print_line_cursor

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) print_screen#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@10
print_str: scope:[print_str]  from test_16s::@4 test_16s::@6 test_16s::@8 test_16u::@4 test_16u::@6 test_16u::@8 test_8s::@4 test_8s::@6 test_8s::@8 test_8u::@4 test_8u::@6 test_8u::@8
  (byte*) print_char_cursor#140 ← phi( test_16s::@4/(byte*) print_char_cursor#54 test_16s::@6/(byte*) print_char_cursor#56 test_16s::@8/(byte*) print_char_cursor#58 test_16u::@4/(byte*) print_char_cursor#36 test_16u::@6/(byte*) print_char_cursor#38 test_16u::@8/(byte*) print_char_cursor#40 test_8s::@4/(byte*) print_char_cursor#45 test_8s::@6/(byte*) print_char_cursor#47 test_8s::@8/(byte*) print_char_cursor#49 test_8u::@4/(byte*) print_char_cursor#27 test_8u::@6/(byte*) print_char_cursor#29 test_8u::@8/(byte*) print_char_cursor#31 )
  (byte*) print_str::str#15 ← phi( test_16s::@4/(byte*) print_str::str#10 test_16s::@6/(byte*) print_str::str#11 test_16s::@8/(byte*) print_str::str#12 test_16u::@4/(byte*) print_str::str#4 test_16u::@6/(byte*) print_str::str#5 test_16u::@8/(byte*) print_str::str#6 test_8s::@4/(byte*) print_str::str#7 test_8s::@6/(byte*) print_str::str#8 test_8s::@8/(byte*) print_str::str#9 test_8u::@4/(byte*) print_str::str#1 test_8u::@6/(byte*) print_str::str#2 test_8u::@8/(byte*) print_str::str#3 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (byte*) print_char_cursor#126 ← phi( print_str/(byte*) print_char_cursor#140 print_str::@2/(byte*) print_char_cursor#1 )
  (byte*) print_str::str#13 ← phi( print_str/(byte*) print_str::str#15 print_str::@2/(byte*) print_str::str#0 )
  (boolean~) print_str::$0 ← *((byte*) print_str::str#13) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#64 ← phi( print_str::@1/(byte*) print_char_cursor#126 )
  (byte*) print_str::str#14 ← phi( print_str::@1/(byte*) print_str::str#13 )
  *((byte*) print_char_cursor#64) ← *((byte*) print_str::str#14)
  (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#64
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#14
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#65 ← phi( print_str::@1/(byte*) print_char_cursor#126 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#65
  return 
  to:@return
print_ln: scope:[print_ln]  from test_16s::@10 test_16u::@10 test_8s::@10 test_8u::@10
  (byte*) print_char_cursor#127 ← phi( test_16s::@10/(byte*) print_char_cursor#60 test_16u::@10/(byte*) print_char_cursor#42 test_8s::@10/(byte*) print_char_cursor#51 test_8u::@10/(byte*) print_char_cursor#33 )
  (byte*) print_line_cursor#39 ← phi( test_16s::@10/(byte*) print_line_cursor#44 test_16u::@10/(byte*) print_line_cursor#42 test_8s::@10/(byte*) print_line_cursor#43 test_8u::@10/(byte*) print_line_cursor#41 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#66 ← phi( print_ln/(byte*) print_char_cursor#127 print_ln::@1/(byte*) print_char_cursor#66 )
  (byte*) print_line_cursor#20 ← phi( print_ln/(byte*) print_line_cursor#39 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#20 + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#66
  if((boolean~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#21 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#3 ← (byte*) print_line_cursor#21
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#67 ← phi( print_ln::@2/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#22 ← phi( print_ln::@2/(byte*) print_line_cursor#21 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#22
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#67
  return 
  to:@return
print_sword: scope:[print_sword]  from test_16s::@3 test_16s::@5 test_16s::@7 test_16s::@9
  (byte*) print_char_cursor#141 ← phi( test_16s::@3/(byte*) print_char_cursor#138 test_16s::@5/(byte*) print_char_cursor#55 test_16s::@7/(byte*) print_char_cursor#57 test_16s::@9/(byte*) print_char_cursor#59 )
  (signed word) print_sword::w#5 ← phi( test_16s::@3/(signed word) print_sword::w#1 test_16s::@5/(signed word) print_sword::w#2 test_16s::@7/(signed word) print_sword::w#3 test_16s::@9/(signed word) print_sword::w#4 )
  (boolean~) print_sword::$0 ← (signed word) print_sword::w#5 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sword::$1 ← ! (boolean~) print_sword::$0
  if((boolean~) print_sword::$1) goto print_sword::@1
  to:print_sword::@2
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@4
  (byte*) print_char_cursor#128 ← phi( print_sword/(byte*) print_char_cursor#141 print_sword::@4/(byte*) print_char_cursor#6 )
  (signed word) print_sword::w#6 ← phi( print_sword/(signed word) print_sword::w#5 print_sword::@4/(signed word) print_sword::w#0 )
  (word~) print_sword::$4 ← ((word)) (signed word) print_sword::w#6
  (word) print_word::w#0 ← (word~) print_sword::$4
  call print_word param-assignment
  to:print_sword::@3
print_sword::@3: scope:[print_sword]  from print_sword::@1
  (byte*) print_char_cursor#68 ← phi( print_sword::@1/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#68
  to:print_sword::@return
print_sword::@2: scope:[print_sword]  from print_sword
  (signed word) print_sword::w#8 ← phi( print_sword/(signed word) print_sword::w#5 )
  (byte*) print_char_cursor#129 ← phi( print_sword/(byte*) print_char_cursor#141 )
  (byte) print_char::ch#0 ← (byte) '-'
  call print_char param-assignment
  to:print_sword::@4
print_sword::@4: scope:[print_sword]  from print_sword::@2
  (signed word) print_sword::w#7 ← phi( print_sword::@2/(signed word) print_sword::w#8 )
  (byte*) print_char_cursor#69 ← phi( print_sword::@2/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#69
  (signed word~) print_sword::$3 ← - (signed word) print_sword::w#7
  (signed word) print_sword::w#0 ← (signed word~) print_sword::$3
  to:print_sword::@1
print_sword::@return: scope:[print_sword]  from print_sword::@3
  (byte*) print_char_cursor#70 ← phi( print_sword::@3/(byte*) print_char_cursor#5 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#70
  return 
  to:@return
print_sbyte: scope:[print_sbyte]  from test_8s::@3 test_8s::@5 test_8s::@7 test_8s::@9
  (byte*) print_char_cursor#142 ← phi( test_8s::@3/(byte*) print_char_cursor#137 test_8s::@5/(byte*) print_char_cursor#46 test_8s::@7/(byte*) print_char_cursor#48 test_8s::@9/(byte*) print_char_cursor#50 )
  (signed byte) print_sbyte::b#5 ← phi( test_8s::@3/(signed byte) print_sbyte::b#1 test_8s::@5/(signed byte) print_sbyte::b#2 test_8s::@7/(signed byte) print_sbyte::b#3 test_8s::@9/(signed byte) print_sbyte::b#4 )
  (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b#5 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sbyte::$1 ← ! (boolean~) print_sbyte::$0
  if((boolean~) print_sbyte::$1) goto print_sbyte::@1
  to:print_sbyte::@2
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte print_sbyte::@4
  (byte*) print_char_cursor#130 ← phi( print_sbyte/(byte*) print_char_cursor#142 print_sbyte::@4/(byte*) print_char_cursor#9 )
  (signed byte) print_sbyte::b#6 ← phi( print_sbyte/(signed byte) print_sbyte::b#5 print_sbyte::@4/(signed byte) print_sbyte::b#0 )
  (byte~) print_sbyte::$4 ← ((byte)) (signed byte) print_sbyte::b#6
  (byte) print_byte::b#0 ← (byte~) print_sbyte::$4
  call print_byte param-assignment
  to:print_sbyte::@3
print_sbyte::@3: scope:[print_sbyte]  from print_sbyte::@1
  (byte*) print_char_cursor#71 ← phi( print_sbyte::@1/(byte*) print_char_cursor#16 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#71
  to:print_sbyte::@return
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte
  (signed byte) print_sbyte::b#8 ← phi( print_sbyte/(signed byte) print_sbyte::b#5 )
  (byte*) print_char_cursor#131 ← phi( print_sbyte/(byte*) print_char_cursor#142 )
  (byte) print_char::ch#1 ← (byte) '-'
  call print_char param-assignment
  to:print_sbyte::@4
print_sbyte::@4: scope:[print_sbyte]  from print_sbyte::@2
  (signed byte) print_sbyte::b#7 ← phi( print_sbyte::@2/(signed byte) print_sbyte::b#8 )
  (byte*) print_char_cursor#72 ← phi( print_sbyte::@2/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#72
  (signed byte~) print_sbyte::$3 ← - (signed byte) print_sbyte::b#7
  (signed byte) print_sbyte::b#0 ← (signed byte~) print_sbyte::$3
  to:print_sbyte::@1
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@3
  (byte*) print_char_cursor#73 ← phi( print_sbyte::@3/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#73
  return 
  to:@return
print_word: scope:[print_word]  from print_sword::@1 test_16u::@3 test_16u::@5 test_16u::@7 test_16u::@9
  (byte*) print_char_cursor#132 ← phi( print_sword::@1/(byte*) print_char_cursor#128 test_16u::@3/(byte*) print_char_cursor#136 test_16u::@5/(byte*) print_char_cursor#37 test_16u::@7/(byte*) print_char_cursor#39 test_16u::@9/(byte*) print_char_cursor#41 )
  (word) print_word::w#5 ← phi( print_sword::@1/(word) print_word::w#0 test_16u::@3/(word) print_word::w#1 test_16u::@5/(word) print_word::w#2 test_16u::@7/(word) print_word::w#3 test_16u::@9/(word) print_word::w#4 )
  (byte~) print_word::$0 ← > (word) print_word::w#5
  (byte) print_byte::b#1 ← (byte~) print_word::$0
  call print_byte param-assignment
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  (word) print_word::w#6 ← phi( print_word/(word) print_word::w#5 )
  (byte*) print_char_cursor#74 ← phi( print_word/(byte*) print_char_cursor#16 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#74
  (byte~) print_word::$2 ← < (word) print_word::w#6
  (byte) print_byte::b#2 ← (byte~) print_word::$2
  call print_byte param-assignment
  to:print_word::@2
print_word::@2: scope:[print_word]  from print_word::@1
  (byte*) print_char_cursor#75 ← phi( print_word::@1/(byte*) print_char_cursor#16 )
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#75
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@2
  (byte*) print_char_cursor#76 ← phi( print_word::@2/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#76
  return 
  to:@return
@10: scope:[]  from @begin
  (byte*) print_screen#10 ← phi( @begin/(byte*) print_screen#0 )
  (byte*) print_char_cursor#155 ← phi( @begin/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#66 ← phi( @begin/(byte*) print_line_cursor#0 )
  (byte[]) print_hextab#0 ← (const string) $0
  to:@14
print_byte: scope:[print_byte]  from print_sbyte::@1 print_word print_word::@1 test_8u::@3 test_8u::@5 test_8u::@7 test_8u::@9
  (byte*) print_char_cursor#133 ← phi( print_sbyte::@1/(byte*) print_char_cursor#130 print_word/(byte*) print_char_cursor#132 print_word::@1/(byte*) print_char_cursor#11 test_8u::@3/(byte*) print_char_cursor#135 test_8u::@5/(byte*) print_char_cursor#28 test_8u::@7/(byte*) print_char_cursor#30 test_8u::@9/(byte*) print_char_cursor#32 )
  (byte) print_byte::b#7 ← phi( print_sbyte::@1/(byte) print_byte::b#0 print_word/(byte) print_byte::b#1 print_word::@1/(byte) print_byte::b#2 test_8u::@3/(byte) print_byte::b#3 test_8u::@5/(byte) print_byte::b#4 test_8u::@7/(byte) print_byte::b#5 test_8u::@9/(byte) print_byte::b#6 )
  (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) print_char::ch#2 ← *((byte[]) print_hextab#0 + (byte~) print_byte::$0)
  call print_char param-assignment
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#8 ← phi( print_byte/(byte) print_byte::b#7 )
  (byte*) print_char_cursor#77 ← phi( print_byte/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#77
  (byte~) print_byte::$2 ← (byte) print_byte::b#8 & (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte) print_char::ch#3 ← *((byte[]) print_hextab#0 + (byte~) print_byte::$2)
  call print_char param-assignment
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) print_char_cursor#78 ← phi( print_byte::@1/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#78
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) print_char_cursor#79 ← phi( print_byte::@2/(byte*) print_char_cursor#15 )
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#79
  return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sbyte::@2 print_sword::@2
  (byte*) print_char_cursor#80 ← phi( print_byte/(byte*) print_char_cursor#133 print_byte::@1/(byte*) print_char_cursor#14 print_sbyte::@2/(byte*) print_char_cursor#131 print_sword::@2/(byte*) print_char_cursor#129 )
  (byte) print_char::ch#4 ← phi( print_byte/(byte) print_char::ch#2 print_byte::@1/(byte) print_char::ch#3 print_sbyte::@2/(byte) print_char::ch#1 print_sword::@2/(byte) print_char::ch#0 )
  *((byte*) print_char_cursor#80) ← (byte) print_char::ch#4
  (byte*) print_char_cursor#17 ← ++ (byte*) print_char_cursor#80
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#81 ← phi( print_char/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#81
  return 
  to:@return
print_cls: scope:[print_cls]  from main
  (byte*) print_screen#1 ← phi( main/(byte*) print_screen#4 )
  (byte*) print_cls::sc#0 ← (byte*) print_screen#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (word/signed word/dword/signed dword) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc#1 != (byte*~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) print_screen#3 ← phi( print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_line_cursor#3 ← (byte*) print_screen#3
  (byte*) print_char_cursor#19 ← (byte*) print_line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  (byte*) print_char_cursor#82 ← phi( print_cls::@2/(byte*) print_char_cursor#19 )
  (byte*) print_line_cursor#23 ← phi( print_cls::@2/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#23
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#82
  return 
  to:@return
@14: scope:[]  from @10
  (byte*) print_screen#9 ← phi( @10/(byte*) print_screen#10 )
  (byte*) print_char_cursor#154 ← phi( @10/(byte*) print_char_cursor#155 )
  (byte*) print_line_cursor#61 ← phi( @10/(byte*) print_line_cursor#66 )
  (byte) rem8u#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@16
div8u: scope:[div8u]  from div8s::@4 test_8u::@1
  (byte) rem8u#31 ← phi( div8s::@4/(byte) rem8u#32 test_8u::@1/(byte) rem8u#36 )
  (byte) div8u::divisor#2 ← phi( div8s::@4/(byte) div8u::divisor#0 test_8u::@1/(byte) div8u::divisor#1 )
  (byte) div8u::dividend#2 ← phi( div8s::@4/(byte) div8u::dividend#0 test_8u::@1/(byte) div8u::dividend#1 )
  (byte) divr8u::dividend#0 ← (byte) div8u::dividend#2
  (byte) divr8u::divisor#0 ← (byte) div8u::divisor#2
  (byte) divr8u::rem#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call divr8u param-assignment
  (byte) divr8u::return#0 ← (byte) divr8u::return#2
  to:div8u::@2
div8u::@2: scope:[div8u]  from div8u
  (byte) rem8u#15 ← phi( div8u/(byte) rem8u#4 )
  (byte) divr8u::return#3 ← phi( div8u/(byte) divr8u::return#0 )
  (byte~) div8u::$0 ← (byte) divr8u::return#3
  (byte) rem8u#1 ← (byte) rem8u#15
  (byte) div8u::return#0 ← (byte~) div8u::$0
  to:div8u::@return
div8u::@return: scope:[div8u]  from div8u::@2
  (byte) rem8u#16 ← phi( div8u::@2/(byte) rem8u#1 )
  (byte) div8u::return#4 ← phi( div8u::@2/(byte) div8u::return#0 )
  (byte) div8u::return#1 ← (byte) div8u::return#4
  (byte) rem8u#2 ← (byte) rem8u#16
  return 
  to:@return
divr8u: scope:[divr8u]  from div8u
  (byte) divr8u::divisor#5 ← phi( div8u/(byte) divr8u::divisor#0 )
  (byte) divr8u::dividend#4 ← phi( div8u/(byte) divr8u::dividend#0 )
  (byte) divr8u::rem#9 ← phi( div8u/(byte) divr8u::rem#0 )
  (byte) divr8u::quotient#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) divr8u::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:divr8u::@1
divr8u::@1: scope:[divr8u]  from divr8u divr8u::@3
  (byte) divr8u::i#5 ← phi( divr8u/(byte) divr8u::i#0 divr8u::@3/(byte) divr8u::i#1 )
  (byte) divr8u::divisor#3 ← phi( divr8u/(byte) divr8u::divisor#5 divr8u::@3/(byte) divr8u::divisor#6 )
  (byte) divr8u::quotient#6 ← phi( divr8u/(byte) divr8u::quotient#0 divr8u::@3/(byte) divr8u::quotient#8 )
  (byte) divr8u::dividend#2 ← phi( divr8u/(byte) divr8u::dividend#4 divr8u::@3/(byte) divr8u::dividend#5 )
  (byte) divr8u::rem#4 ← phi( divr8u/(byte) divr8u::rem#9 divr8u::@3/(byte) divr8u::rem#10 )
  (byte~) divr8u::$0 ← (byte) divr8u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::rem#1 ← (byte~) divr8u::$0
  (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte/word/signed word/dword/signed dword) 128
  (boolean~) divr8u::$2 ← (byte~) divr8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) divr8u::$3 ← ! (boolean~) divr8u::$2
  if((boolean~) divr8u::$3) goto divr8u::@2
  to:divr8u::@4
divr8u::@2: scope:[divr8u]  from divr8u::@1 divr8u::@4
  (byte) divr8u::i#3 ← phi( divr8u::@1/(byte) divr8u::i#5 divr8u::@4/(byte) divr8u::i#6 )
  (byte) divr8u::divisor#1 ← phi( divr8u::@1/(byte) divr8u::divisor#3 divr8u::@4/(byte) divr8u::divisor#4 )
  (byte) divr8u::rem#5 ← phi( divr8u::@1/(byte) divr8u::rem#1 divr8u::@4/(byte) divr8u::rem#2 )
  (byte) divr8u::quotient#3 ← phi( divr8u::@1/(byte) divr8u::quotient#6 divr8u::@4/(byte) divr8u::quotient#7 )
  (byte) divr8u::dividend#3 ← phi( divr8u::@1/(byte) divr8u::dividend#2 divr8u::@4/(byte) divr8u::dividend#6 )
  (byte~) divr8u::$5 ← (byte) divr8u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::dividend#1 ← (byte~) divr8u::$5
  (byte~) divr8u::$6 ← (byte) divr8u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::quotient#1 ← (byte~) divr8u::$6
  (boolean~) divr8u::$7 ← (byte) divr8u::rem#5 >= (byte) divr8u::divisor#1
  (boolean~) divr8u::$8 ← ! (boolean~) divr8u::$7
  if((boolean~) divr8u::$8) goto divr8u::@3
  to:divr8u::@5
divr8u::@4: scope:[divr8u]  from divr8u::@1
  (byte) divr8u::i#6 ← phi( divr8u::@1/(byte) divr8u::i#5 )
  (byte) divr8u::divisor#4 ← phi( divr8u::@1/(byte) divr8u::divisor#3 )
  (byte) divr8u::quotient#7 ← phi( divr8u::@1/(byte) divr8u::quotient#6 )
  (byte) divr8u::dividend#6 ← phi( divr8u::@1/(byte) divr8u::dividend#2 )
  (byte) divr8u::rem#6 ← phi( divr8u::@1/(byte) divr8u::rem#1 )
  (byte/word/dword~) divr8u::$4 ← (byte) divr8u::rem#6 | (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::rem#2 ← (byte/word/dword~) divr8u::$4
  to:divr8u::@2
divr8u::@3: scope:[divr8u]  from divr8u::@2 divr8u::@5
  (byte) divr8u::divisor#6 ← phi( divr8u::@2/(byte) divr8u::divisor#1 divr8u::@5/(byte) divr8u::divisor#2 )
  (byte) divr8u::quotient#8 ← phi( divr8u::@2/(byte) divr8u::quotient#1 divr8u::@5/(byte) divr8u::quotient#2 )
  (byte) divr8u::dividend#5 ← phi( divr8u::@2/(byte) divr8u::dividend#1 divr8u::@5/(byte) divr8u::dividend#7 )
  (byte) divr8u::rem#10 ← phi( divr8u::@2/(byte) divr8u::rem#5 divr8u::@5/(byte) divr8u::rem#3 )
  (byte) divr8u::i#2 ← phi( divr8u::@2/(byte) divr8u::i#3 divr8u::@5/(byte) divr8u::i#4 )
  (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2
  (boolean~) divr8u::$10 ← (byte) divr8u::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 8
  if((boolean~) divr8u::$10) goto divr8u::@1
  to:divr8u::@6
divr8u::@5: scope:[divr8u]  from divr8u::@2
  (byte) divr8u::dividend#7 ← phi( divr8u::@2/(byte) divr8u::dividend#1 )
  (byte) divr8u::i#4 ← phi( divr8u::@2/(byte) divr8u::i#3 )
  (byte) divr8u::divisor#2 ← phi( divr8u::@2/(byte) divr8u::divisor#1 )
  (byte) divr8u::rem#7 ← phi( divr8u::@2/(byte) divr8u::rem#5 )
  (byte) divr8u::quotient#4 ← phi( divr8u::@2/(byte) divr8u::quotient#1 )
  (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#4
  (byte~) divr8u::$9 ← (byte) divr8u::rem#7 - (byte) divr8u::divisor#2
  (byte) divr8u::rem#3 ← (byte~) divr8u::$9
  to:divr8u::@3
divr8u::@6: scope:[divr8u]  from divr8u::@3
  (byte) divr8u::quotient#5 ← phi( divr8u::@3/(byte) divr8u::quotient#8 )
  (byte) divr8u::rem#8 ← phi( divr8u::@3/(byte) divr8u::rem#10 )
  (byte) rem8u#3 ← (byte) divr8u::rem#8
  (byte) divr8u::return#1 ← (byte) divr8u::quotient#5
  to:divr8u::@return
divr8u::@return: scope:[divr8u]  from divr8u::@6
  (byte) rem8u#17 ← phi( divr8u::@6/(byte) rem8u#3 )
  (byte) divr8u::return#4 ← phi( divr8u::@6/(byte) divr8u::return#1 )
  (byte) divr8u::return#2 ← (byte) divr8u::return#4
  (byte) rem8u#4 ← (byte) rem8u#17
  return 
  to:@return
@16: scope:[]  from @14
  (byte*) print_screen#8 ← phi( @14/(byte*) print_screen#9 )
  (byte) rem8u#55 ← phi( @14/(byte) rem8u#0 )
  (byte*) print_char_cursor#153 ← phi( @14/(byte*) print_char_cursor#154 )
  (byte*) print_line_cursor#56 ← phi( @14/(byte*) print_line_cursor#61 )
  (word) rem16u#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@19
divr16u: scope:[divr16u]  from div16u
  (word) divr16u::divisor#5 ← phi( div16u/(word) divr16u::divisor#0 )
  (word) divr16u::dividend#4 ← phi( div16u/(word) divr16u::dividend#1 )
  (word) divr16u::rem#9 ← phi( div16u/(word) divr16u::rem#3 )
  (word) divr16u::quotient#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) divr16u::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  (byte) divr16u::i#5 ← phi( divr16u/(byte) divr16u::i#0 divr16u::@3/(byte) divr16u::i#1 )
  (word) divr16u::divisor#3 ← phi( divr16u/(word) divr16u::divisor#5 divr16u::@3/(word) divr16u::divisor#6 )
  (word) divr16u::quotient#6 ← phi( divr16u/(word) divr16u::quotient#0 divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::dividend#2 ← phi( divr16u/(word) divr16u::dividend#4 divr16u::@3/(word) divr16u::dividend#5 )
  (word) divr16u::rem#4 ← phi( divr16u/(word) divr16u::rem#9 divr16u::@3/(word) divr16u::rem#10 )
  (word~) divr16u::$0 ← (word) divr16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::rem#0 ← (word~) divr16u::$0
  (byte~) divr16u::$1 ← > (word) divr16u::dividend#2
  (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128
  (boolean~) divr16u::$3 ← (byte~) divr16u::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) divr16u::$4 ← ! (boolean~) divr16u::$3
  if((boolean~) divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  (byte) divr16u::i#3 ← phi( divr16u::@1/(byte) divr16u::i#5 divr16u::@4/(byte) divr16u::i#6 )
  (word) divr16u::divisor#1 ← phi( divr16u::@1/(word) divr16u::divisor#3 divr16u::@4/(word) divr16u::divisor#4 )
  (word) divr16u::rem#5 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  (word) divr16u::quotient#3 ← phi( divr16u::@1/(word) divr16u::quotient#6 divr16u::@4/(word) divr16u::quotient#7 )
  (word) divr16u::dividend#3 ← phi( divr16u::@1/(word) divr16u::dividend#2 divr16u::@4/(word) divr16u::dividend#6 )
  (word~) divr16u::$6 ← (word) divr16u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::dividend#0 ← (word~) divr16u::$6
  (word~) divr16u::$7 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::quotient#1 ← (word~) divr16u::$7
  (boolean~) divr16u::$8 ← (word) divr16u::rem#5 >= (word) divr16u::divisor#1
  (boolean~) divr16u::$9 ← ! (boolean~) divr16u::$8
  if((boolean~) divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  (byte) divr16u::i#6 ← phi( divr16u::@1/(byte) divr16u::i#5 )
  (word) divr16u::divisor#4 ← phi( divr16u::@1/(word) divr16u::divisor#3 )
  (word) divr16u::quotient#7 ← phi( divr16u::@1/(word) divr16u::quotient#6 )
  (word) divr16u::dividend#6 ← phi( divr16u::@1/(word) divr16u::dividend#2 )
  (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 )
  (word/dword~) divr16u::$5 ← (word) divr16u::rem#6 | (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::rem#1 ← (word/dword~) divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  (word) divr16u::divisor#6 ← phi( divr16u::@2/(word) divr16u::divisor#1 divr16u::@5/(word) divr16u::divisor#2 )
  (word) divr16u::quotient#8 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  (word) divr16u::dividend#5 ← phi( divr16u::@2/(word) divr16u::dividend#0 divr16u::@5/(word) divr16u::dividend#7 )
  (word) divr16u::rem#10 ← phi( divr16u::@2/(word) divr16u::rem#5 divr16u::@5/(word) divr16u::rem#2 )
  (byte) divr16u::i#2 ← phi( divr16u::@2/(byte) divr16u::i#3 divr16u::@5/(byte) divr16u::i#4 )
  (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  (boolean~) divr16u::$11 ← (byte) divr16u::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 16
  if((boolean~) divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  (word) divr16u::dividend#7 ← phi( divr16u::@2/(word) divr16u::dividend#0 )
  (byte) divr16u::i#4 ← phi( divr16u::@2/(byte) divr16u::i#3 )
  (word) divr16u::divisor#2 ← phi( divr16u::@2/(word) divr16u::divisor#1 )
  (word) divr16u::rem#7 ← phi( divr16u::@2/(word) divr16u::rem#5 )
  (word) divr16u::quotient#4 ← phi( divr16u::@2/(word) divr16u::quotient#1 )
  (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#4
  (word~) divr16u::$10 ← (word) divr16u::rem#7 - (word) divr16u::divisor#2
  (word) divr16u::rem#2 ← (word~) divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  (word) divr16u::quotient#5 ← phi( divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::rem#8 ← phi( divr16u::@3/(word) divr16u::rem#10 )
  (word) rem16u#1 ← (word) divr16u::rem#8
  (word) divr16u::return#0 ← (word) divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  (word) rem16u#15 ← phi( divr16u::@6/(word) rem16u#1 )
  (word) divr16u::return#3 ← phi( divr16u::@6/(word) divr16u::return#0 )
  (word) divr16u::return#1 ← (word) divr16u::return#3
  (word) rem16u#2 ← (word) rem16u#15
  return 
  to:@return
div16u: scope:[div16u]  from div16s::@4 test_16u::@1
  (word) rem16u#31 ← phi( div16s::@4/(word) rem16u#32 test_16u::@1/(word) rem16u#35 )
  (word) div16u::divisor#2 ← phi( div16s::@4/(word) div16u::divisor#0 test_16u::@1/(word) div16u::divisor#1 )
  (word) div16u::dividend#2 ← phi( div16s::@4/(word) div16u::dividend#0 test_16u::@1/(word) div16u::dividend#1 )
  (word) divr16u::dividend#1 ← (word) div16u::dividend#2
  (word) divr16u::divisor#0 ← (word) div16u::divisor#2
  (word) divr16u::rem#3 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call divr16u param-assignment
  (word) divr16u::return#2 ← (word) divr16u::return#1
  to:div16u::@2
div16u::@2: scope:[div16u]  from div16u
  (word) rem16u#16 ← phi( div16u/(word) rem16u#2 )
  (word) divr16u::return#4 ← phi( div16u/(word) divr16u::return#2 )
  (word~) div16u::$0 ← (word) divr16u::return#4
  (word) rem16u#3 ← (word) rem16u#16
  (word) div16u::return#0 ← (word~) div16u::$0
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@2
  (word) rem16u#17 ← phi( div16u::@2/(word) rem16u#3 )
  (word) div16u::return#4 ← phi( div16u::@2/(word) div16u::return#0 )
  (word) div16u::return#1 ← (word) div16u::return#4
  (word) rem16u#4 ← (word) rem16u#17
  return 
  to:@return
@19: scope:[]  from @16
  (byte*) print_screen#7 ← phi( @16/(byte*) print_screen#8 )
  (word) rem16u#50 ← phi( @16/(word) rem16u#0 )
  (byte) rem8u#52 ← phi( @16/(byte) rem8u#55 )
  (byte*) print_char_cursor#148 ← phi( @16/(byte*) print_char_cursor#153 )
  (byte*) print_line_cursor#51 ← phi( @16/(byte*) print_line_cursor#56 )
  (signed byte) rem8s#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@20
div8s: scope:[div8s]  from test_8s::@1
  (byte) rem8u#60 ← phi( test_8s::@1/(byte) rem8u#39 )
  (signed byte) div8s::divisor#6 ← phi( test_8s::@1/(signed byte) div8s::divisor#0 )
  (signed byte) div8s::dividend#1 ← phi( test_8s::@1/(signed byte) div8s::dividend#0 )
  (byte) div8s::neg#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8s::dividendu#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$0 ← (signed byte) div8s::dividend#1 < (byte/signed byte/word/signed word/dword/signed dword) 0
  if((boolean~) div8s::$0) goto div8s::@1
  to:div8s::@7
div8s::@1: scope:[div8s]  from div8s
  (byte) rem8u#56 ← phi( div8s/(byte) rem8u#60 )
  (signed byte) div8s::divisor#4 ← phi( div8s/(signed byte) div8s::divisor#6 )
  (signed byte) div8s::dividend#2 ← phi( div8s/(signed byte) div8s::dividend#1 )
  (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#2
  (byte~) div8s::$3 ← ((byte)) (signed byte~) div8s::$2
  (byte) div8s::dividendu#1 ← (byte~) div8s::$3
  (byte) div8s::neg#1 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:div8s::@2
div8s::@7: scope:[div8s]  from div8s
  (byte) rem8u#57 ← phi( div8s/(byte) rem8u#60 )
  (byte) div8s::neg#7 ← phi( div8s/(byte) div8s::neg#0 )
  (signed byte) div8s::divisor#5 ← phi( div8s/(signed byte) div8s::divisor#6 )
  (signed byte) div8s::dividend#3 ← phi( div8s/(signed byte) div8s::dividend#1 )
  (byte~) div8s::$1 ← ((byte)) (signed byte) div8s::dividend#3
  (byte) div8s::dividendu#2 ← (byte~) div8s::$1
  to:div8s::@2
div8s::@2: scope:[div8s]  from div8s::@1 div8s::@7
  (byte) rem8u#51 ← phi( div8s::@1/(byte) rem8u#56 div8s::@7/(byte) rem8u#57 )
  (byte) div8s::dividendu#6 ← phi( div8s::@1/(byte) div8s::dividendu#1 div8s::@7/(byte) div8s::dividendu#2 )
  (byte) div8s::neg#5 ← phi( div8s::@1/(byte) div8s::neg#1 div8s::@7/(byte) div8s::neg#7 )
  (signed byte) div8s::divisor#1 ← phi( div8s::@1/(signed byte) div8s::divisor#4 div8s::@7/(signed byte) div8s::divisor#5 )
  (byte) div8s::divisoru#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$4 ← (signed byte) div8s::divisor#1 < (byte/signed byte/word/signed word/dword/signed dword) 0
  if((boolean~) div8s::$4) goto div8s::@3
  to:div8s::@9
div8s::@3: scope:[div8s]  from div8s::@2
  (byte) rem8u#42 ← phi( div8s::@2/(byte) rem8u#51 )
  (byte) div8s::dividendu#4 ← phi( div8s::@2/(byte) div8s::dividendu#6 )
  (byte) div8s::neg#3 ← phi( div8s::@2/(byte) div8s::neg#5 )
  (signed byte) div8s::divisor#2 ← phi( div8s::@2/(signed byte) div8s::divisor#1 )
  (signed byte~) div8s::$6 ← - (signed byte) div8s::divisor#2
  (byte~) div8s::$7 ← ((byte)) (signed byte~) div8s::$6
  (byte) div8s::divisoru#1 ← (byte~) div8s::$7
  (byte/word/dword~) div8s::$8 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8s::neg#2 ← (byte/word/dword~) div8s::$8
  to:div8s::@4
div8s::@9: scope:[div8s]  from div8s::@2
  (byte) div8s::neg#8 ← phi( div8s::@2/(byte) div8s::neg#5 )
  (byte) rem8u#43 ← phi( div8s::@2/(byte) rem8u#51 )
  (byte) div8s::dividendu#5 ← phi( div8s::@2/(byte) div8s::dividendu#6 )
  (signed byte) div8s::divisor#3 ← phi( div8s::@2/(signed byte) div8s::divisor#1 )
  (byte~) div8s::$5 ← ((byte)) (signed byte) div8s::divisor#3
  (byte) div8s::divisoru#2 ← (byte~) div8s::$5
  to:div8s::@4
div8s::@4: scope:[div8s]  from div8s::@3 div8s::@9
  (byte) div8s::neg#6 ← phi( div8s::@3/(byte) div8s::neg#2 div8s::@9/(byte) div8s::neg#8 )
  (byte) rem8u#32 ← phi( div8s::@3/(byte) rem8u#42 div8s::@9/(byte) rem8u#43 )
  (byte) div8s::divisoru#3 ← phi( div8s::@3/(byte) div8s::divisoru#1 div8s::@9/(byte) div8s::divisoru#2 )
  (byte) div8s::dividendu#3 ← phi( div8s::@3/(byte) div8s::dividendu#4 div8s::@9/(byte) div8s::dividendu#5 )
  (byte) div8u::dividend#0 ← (byte) div8s::dividendu#3
  (byte) div8u::divisor#0 ← (byte) div8s::divisoru#3
  call div8u param-assignment
  (byte) div8u::return#2 ← (byte) div8u::return#1
  to:div8s::@15
div8s::@15: scope:[div8s]  from div8s::@4
  (byte) div8s::neg#4 ← phi( div8s::@4/(byte) div8s::neg#6 )
  (byte) rem8u#18 ← phi( div8s::@4/(byte) rem8u#2 )
  (byte) div8u::return#5 ← phi( div8s::@4/(byte) div8u::return#2 )
  (byte~) div8s::$9 ← (byte) div8u::return#5
  (byte) rem8u#5 ← (byte) rem8u#18
  (byte) div8s::resultu#0 ← (byte~) div8s::$9
  (boolean~) div8s::$10 ← (byte) div8s::neg#4 == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((boolean~) div8s::$10) goto div8s::@5
  to:div8s::@11
div8s::@5: scope:[div8s]  from div8s::@15
  (byte) div8s::resultu#1 ← phi( div8s::@15/(byte) div8s::resultu#0 )
  (byte) rem8u#19 ← phi( div8s::@15/(byte) rem8u#5 )
  (signed byte~) div8s::$15 ← ((signed byte)) (byte) rem8u#19
  (signed byte) rem8s#1 ← (signed byte~) div8s::$15
  (signed byte~) div8s::$16 ← ((signed byte)) (byte) div8s::resultu#1
  (signed byte) div8s::return#0 ← (signed byte~) div8s::$16
  to:div8s::@return
div8s::@11: scope:[div8s]  from div8s::@15
  (byte) div8s::resultu#2 ← phi( div8s::@15/(byte) div8s::resultu#0 )
  (byte) rem8u#20 ← phi( div8s::@15/(byte) rem8u#5 )
  (signed byte~) div8s::$11 ← ((signed byte)) (byte) rem8u#20
  (signed byte~) div8s::$12 ← - (signed byte~) div8s::$11
  (signed byte) rem8s#2 ← (signed byte~) div8s::$12
  (signed byte~) div8s::$13 ← ((signed byte)) (byte) div8s::resultu#2
  (signed byte~) div8s::$14 ← - (signed byte~) div8s::$13
  (signed byte) div8s::return#1 ← (signed byte~) div8s::$14
  to:div8s::@return
div8s::@return: scope:[div8s]  from div8s::@11 div8s::@5
  (signed byte) rem8s#9 ← phi( div8s::@11/(signed byte) rem8s#2 div8s::@5/(signed byte) rem8s#1 )
  (byte) rem8u#21 ← phi( div8s::@11/(byte) rem8u#20 div8s::@5/(byte) rem8u#19 )
  (signed byte) div8s::return#4 ← phi( div8s::@11/(signed byte) div8s::return#1 div8s::@5/(signed byte) div8s::return#0 )
  (signed byte) div8s::return#2 ← (signed byte) div8s::return#4
  (byte) rem8u#6 ← (byte) rem8u#21
  (signed byte) rem8s#3 ← (signed byte) rem8s#9
  return 
  to:@return
@20: scope:[]  from @19
  (byte*) print_screen#6 ← phi( @19/(byte*) print_screen#7 )
  (signed byte) rem8s#26 ← phi( @19/(signed byte) rem8s#0 )
  (word) rem16u#49 ← phi( @19/(word) rem16u#50 )
  (byte) rem8u#50 ← phi( @19/(byte) rem8u#52 )
  (byte*) print_char_cursor#147 ← phi( @19/(byte*) print_char_cursor#148 )
  (byte*) print_line_cursor#50 ← phi( @19/(byte*) print_line_cursor#51 )
  (signed word) rem16s#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@26
div16s: scope:[div16s]  from test_16s::@1
  (word) rem16u#59 ← phi( test_16s::@1/(word) rem16u#38 )
  (signed word) div16s::divisor#6 ← phi( test_16s::@1/(signed word) div16s::divisor#0 )
  (signed word) div16s::dividend#1 ← phi( test_16s::@1/(signed word) div16s::dividend#0 )
  (byte) div16s::neg#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) div16s::dividendu#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$0 ← (signed word) div16s::dividend#1 < (byte/signed byte/word/signed word/dword/signed dword) 0
  if((boolean~) div16s::$0) goto div16s::@1
  to:div16s::@7
div16s::@1: scope:[div16s]  from div16s
  (word) rem16u#55 ← phi( div16s/(word) rem16u#59 )
  (signed word) div16s::divisor#4 ← phi( div16s/(signed word) div16s::divisor#6 )
  (signed word) div16s::dividend#2 ← phi( div16s/(signed word) div16s::dividend#1 )
  (signed word~) div16s::$2 ← - (signed word) div16s::dividend#2
  (word~) div16s::$3 ← ((word)) (signed word~) div16s::$2
  (word) div16s::dividendu#1 ← (word~) div16s::$3
  (byte) div16s::neg#1 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:div16s::@2
div16s::@7: scope:[div16s]  from div16s
  (word) rem16u#56 ← phi( div16s/(word) rem16u#59 )
  (byte) div16s::neg#7 ← phi( div16s/(byte) div16s::neg#0 )
  (signed word) div16s::divisor#5 ← phi( div16s/(signed word) div16s::divisor#6 )
  (signed word) div16s::dividend#3 ← phi( div16s/(signed word) div16s::dividend#1 )
  (word~) div16s::$1 ← ((word)) (signed word) div16s::dividend#3
  (word) div16s::dividendu#2 ← (word~) div16s::$1
  to:div16s::@2
div16s::@2: scope:[div16s]  from div16s::@1 div16s::@7
  (word) rem16u#51 ← phi( div16s::@1/(word) rem16u#55 div16s::@7/(word) rem16u#56 )
  (word) div16s::dividendu#6 ← phi( div16s::@1/(word) div16s::dividendu#1 div16s::@7/(word) div16s::dividendu#2 )
  (byte) div16s::neg#5 ← phi( div16s::@1/(byte) div16s::neg#1 div16s::@7/(byte) div16s::neg#7 )
  (signed word) div16s::divisor#1 ← phi( div16s::@1/(signed word) div16s::divisor#4 div16s::@7/(signed word) div16s::divisor#5 )
  (word) div16s::divisoru#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$4 ← (signed word) div16s::divisor#1 < (byte/signed byte/word/signed word/dword/signed dword) 0
  if((boolean~) div16s::$4) goto div16s::@3
  to:div16s::@9
div16s::@3: scope:[div16s]  from div16s::@2
  (word) rem16u#41 ← phi( div16s::@2/(word) rem16u#51 )
  (word) div16s::dividendu#4 ← phi( div16s::@2/(word) div16s::dividendu#6 )
  (byte) div16s::neg#3 ← phi( div16s::@2/(byte) div16s::neg#5 )
  (signed word) div16s::divisor#2 ← phi( div16s::@2/(signed word) div16s::divisor#1 )
  (signed word~) div16s::$6 ← - (signed word) div16s::divisor#2
  (word~) div16s::$7 ← ((word)) (signed word~) div16s::$6
  (word) div16s::divisoru#1 ← (word~) div16s::$7
  (byte/word/dword~) div16s::$8 ← (byte) div16s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div16s::neg#2 ← (byte/word/dword~) div16s::$8
  to:div16s::@4
div16s::@9: scope:[div16s]  from div16s::@2
  (byte) div16s::neg#8 ← phi( div16s::@2/(byte) div16s::neg#5 )
  (word) rem16u#42 ← phi( div16s::@2/(word) rem16u#51 )
  (word) div16s::dividendu#5 ← phi( div16s::@2/(word) div16s::dividendu#6 )
  (signed word) div16s::divisor#3 ← phi( div16s::@2/(signed word) div16s::divisor#1 )
  (word~) div16s::$5 ← ((word)) (signed word) div16s::divisor#3
  (word) div16s::divisoru#2 ← (word~) div16s::$5
  to:div16s::@4
div16s::@4: scope:[div16s]  from div16s::@3 div16s::@9
  (byte) div16s::neg#6 ← phi( div16s::@3/(byte) div16s::neg#2 div16s::@9/(byte) div16s::neg#8 )
  (word) rem16u#32 ← phi( div16s::@3/(word) rem16u#41 div16s::@9/(word) rem16u#42 )
  (word) div16s::divisoru#3 ← phi( div16s::@3/(word) div16s::divisoru#1 div16s::@9/(word) div16s::divisoru#2 )
  (word) div16s::dividendu#3 ← phi( div16s::@3/(word) div16s::dividendu#4 div16s::@9/(word) div16s::dividendu#5 )
  (word) div16u::dividend#0 ← (word) div16s::dividendu#3
  (word) div16u::divisor#0 ← (word) div16s::divisoru#3
  call div16u param-assignment
  (word) div16u::return#2 ← (word) div16u::return#1
  to:div16s::@15
div16s::@15: scope:[div16s]  from div16s::@4
  (byte) div16s::neg#4 ← phi( div16s::@4/(byte) div16s::neg#6 )
  (word) rem16u#18 ← phi( div16s::@4/(word) rem16u#4 )
  (word) div16u::return#5 ← phi( div16s::@4/(word) div16u::return#2 )
  (word~) div16s::$9 ← (word) div16u::return#5
  (word) rem16u#5 ← (word) rem16u#18
  (word) div16s::resultu#0 ← (word~) div16s::$9
  (boolean~) div16s::$10 ← (byte) div16s::neg#4 == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((boolean~) div16s::$10) goto div16s::@5
  to:div16s::@11
div16s::@5: scope:[div16s]  from div16s::@15
  (word) div16s::resultu#1 ← phi( div16s::@15/(word) div16s::resultu#0 )
  (word) rem16u#19 ← phi( div16s::@15/(word) rem16u#5 )
  (signed word~) div16s::$15 ← ((signed word)) (word) rem16u#19
  (signed word) rem16s#1 ← (signed word~) div16s::$15
  (signed word~) div16s::$16 ← ((signed word)) (word) div16s::resultu#1
  (signed word) div16s::return#0 ← (signed word~) div16s::$16
  to:div16s::@return
div16s::@11: scope:[div16s]  from div16s::@15
  (word) div16s::resultu#2 ← phi( div16s::@15/(word) div16s::resultu#0 )
  (word) rem16u#20 ← phi( div16s::@15/(word) rem16u#5 )
  (signed word~) div16s::$11 ← ((signed word)) (word) rem16u#20
  (signed word~) div16s::$12 ← - (signed word~) div16s::$11
  (signed word) rem16s#2 ← (signed word~) div16s::$12
  (signed word~) div16s::$13 ← ((signed word)) (word) div16s::resultu#2
  (signed word~) div16s::$14 ← - (signed word~) div16s::$13
  (signed word) div16s::return#1 ← (signed word~) div16s::$14
  to:div16s::@return
div16s::@return: scope:[div16s]  from div16s::@11 div16s::@5
  (signed word) rem16s#9 ← phi( div16s::@11/(signed word) rem16s#2 div16s::@5/(signed word) rem16s#1 )
  (word) rem16u#21 ← phi( div16s::@11/(word) rem16u#20 div16s::@5/(word) rem16u#19 )
  (signed word) div16s::return#4 ← phi( div16s::@11/(signed word) div16s::return#1 div16s::@5/(signed word) div16s::return#0 )
  (signed word) div16s::return#2 ← (signed word) div16s::return#4
  (word) rem16u#6 ← (word) rem16u#21
  (signed word) rem16s#3 ← (signed word) rem16s#9
  return 
  to:@return
main: scope:[main]  from @26
  (signed word) rem16s#29 ← phi( @26/(signed word) rem16s#20 )
  (signed byte) rem8s#29 ← phi( @26/(signed byte) rem8s#21 )
  (word) rem16u#52 ← phi( @26/(word) rem16u#40 )
  (byte) rem8u#44 ← phi( @26/(byte) rem8u#41 )
  (byte*) print_char_cursor#134 ← phi( @26/(byte*) print_char_cursor#139 )
  (byte*) print_line_cursor#40 ← phi( @26/(byte*) print_line_cursor#45 )
  (byte*) print_screen#4 ← phi( @26/(byte*) print_screen#5 )
  call print_cls param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (signed word) rem16s#27 ← phi( main/(signed word) rem16s#29 )
  (signed byte) rem8s#27 ← phi( main/(signed byte) rem8s#29 )
  (word) rem16u#43 ← phi( main/(word) rem16u#52 )
  (byte) rem8u#33 ← phi( main/(byte) rem8u#44 )
  (byte*) print_char_cursor#83 ← phi( main/(byte*) print_char_cursor#20 )
  (byte*) print_line_cursor#24 ← phi( main/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#24
  (byte*) print_char_cursor#21 ← (byte*) print_char_cursor#83
  call test_8u param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (signed word) rem16s#25 ← phi( main::@1/(signed word) rem16s#27 )
  (signed byte) rem8s#22 ← phi( main::@1/(signed byte) rem8s#27 )
  (word) rem16u#33 ← phi( main::@1/(word) rem16u#43 )
  (byte*) print_line_cursor#25 ← phi( main::@1/(byte*) print_line_cursor#12 )
  (byte*) print_char_cursor#84 ← phi( main::@1/(byte*) print_char_cursor#35 )
  (byte) rem8u#22 ← phi( main::@1/(byte) rem8u#11 )
  (byte) rem8u#7 ← (byte) rem8u#22
  (byte*) print_char_cursor#22 ← (byte*) print_char_cursor#84
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#25
  call test_16u param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@2
  (signed word) rem16s#21 ← phi( main::@2/(signed word) rem16s#25 )
  (signed byte) rem8s#16 ← phi( main::@2/(signed byte) rem8s#22 )
  (byte) rem8u#34 ← phi( main::@2/(byte) rem8u#7 )
  (byte*) print_line_cursor#26 ← phi( main::@2/(byte*) print_line_cursor#14 )
  (byte*) print_char_cursor#85 ← phi( main::@2/(byte*) print_char_cursor#44 )
  (word) rem16u#22 ← phi( main::@2/(word) rem16u#11 )
  (word) rem16u#7 ← (word) rem16u#22
  (byte*) print_char_cursor#23 ← (byte*) print_char_cursor#85
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#26
  call test_8s param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (signed word) rem16s#16 ← phi( main::@3/(signed word) rem16s#21 )
  (word) rem16u#34 ← phi( main::@3/(word) rem16u#7 )
  (byte*) print_line_cursor#27 ← phi( main::@3/(byte*) print_line_cursor#16 )
  (byte*) print_char_cursor#86 ← phi( main::@3/(byte*) print_char_cursor#53 )
  (signed byte) rem8s#10 ← phi( main::@3/(signed byte) rem8s#7 )
  (byte) rem8u#23 ← phi( main::@3/(byte) rem8u#13 )
  (byte) rem8u#8 ← (byte) rem8u#23
  (signed byte) rem8s#4 ← (signed byte) rem8s#10
  (byte*) print_char_cursor#24 ← (byte*) print_char_cursor#86
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#27
  call test_16s param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (signed byte) rem8s#17 ← phi( main::@4/(signed byte) rem8s#4 )
  (byte) rem8u#35 ← phi( main::@4/(byte) rem8u#8 )
  (byte*) print_line_cursor#28 ← phi( main::@4/(byte*) print_line_cursor#18 )
  (byte*) print_char_cursor#87 ← phi( main::@4/(byte*) print_char_cursor#62 )
  (signed word) rem16s#10 ← phi( main::@4/(signed word) rem16s#7 )
  (word) rem16u#23 ← phi( main::@4/(word) rem16u#13 )
  (word) rem16u#8 ← (word) rem16u#23
  (signed word) rem16s#4 ← (signed word) rem16s#10
  (byte*) print_char_cursor#25 ← (byte*) print_char_cursor#87
  (byte*) print_line_cursor#9 ← (byte*) print_line_cursor#28
  to:main::@return
main::@return: scope:[main]  from main::@5
  (signed word) rem16s#11 ← phi( main::@5/(signed word) rem16s#4 )
  (signed byte) rem8s#11 ← phi( main::@5/(signed byte) rem8s#17 )
  (word) rem16u#24 ← phi( main::@5/(word) rem16u#8 )
  (byte) rem8u#24 ← phi( main::@5/(byte) rem8u#35 )
  (byte*) print_char_cursor#88 ← phi( main::@5/(byte*) print_char_cursor#25 )
  (byte*) print_line_cursor#29 ← phi( main::@5/(byte*) print_line_cursor#9 )
  (byte*) print_line_cursor#10 ← (byte*) print_line_cursor#29
  (byte*) print_char_cursor#26 ← (byte*) print_char_cursor#88
  (byte) rem8u#9 ← (byte) rem8u#24
  (word) rem16u#9 ← (word) rem16u#24
  (signed byte) rem8s#5 ← (signed byte) rem8s#11
  (signed word) rem16s#5 ← (signed word) rem16s#11
  return 
  to:@return
test_8u: scope:[test_8u]  from main::@1
  (byte*) print_line_cursor#83 ← phi( main::@1/(byte*) print_line_cursor#5 )
  (byte*) print_char_cursor#149 ← phi( main::@1/(byte*) print_char_cursor#21 )
  (byte) rem8u#45 ← phi( main::@1/(byte) rem8u#33 )
  (byte[]) test_8u::dividends#0 ← { (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255 }
  (byte[]) test_8u::divisors#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_8u::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:test_8u::@1
test_8u::@1: scope:[test_8u]  from test_8u test_8u::@11
  (byte*) print_line_cursor#79 ← phi( test_8u/(byte*) print_line_cursor#83 test_8u::@11/(byte*) print_line_cursor#11 )
  (byte*) print_char_cursor#143 ← phi( test_8u/(byte*) print_char_cursor#149 test_8u::@11/(byte*) print_char_cursor#34 )
  (byte) rem8u#36 ← phi( test_8u/(byte) rem8u#45 test_8u::@11/(byte) rem8u#38 )
  (byte) test_8u::i#2 ← phi( test_8u/(byte) test_8u::i#0 test_8u::@11/(byte) test_8u::i#1 )
  (byte) test_8u::dividend#0 ← *((byte[]) test_8u::dividends#0 + (byte) test_8u::i#2)
  (byte) test_8u::divisor#0 ← *((byte[]) test_8u::divisors#0 + (byte) test_8u::i#2)
  (byte) div8u::dividend#1 ← (byte) test_8u::dividend#0
  (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0
  call div8u param-assignment
  (byte) div8u::return#3 ← (byte) div8u::return#1
  to:test_8u::@3
test_8u::@3: scope:[test_8u]  from test_8u::@1
  (byte) test_8u::i#11 ← phi( test_8u::@1/(byte) test_8u::i#2 )
  (byte*) print_line_cursor#75 ← phi( test_8u::@1/(byte*) print_line_cursor#79 )
  (byte) test_8u::divisor#3 ← phi( test_8u::@1/(byte) test_8u::divisor#0 )
  (byte*) print_char_cursor#135 ← phi( test_8u::@1/(byte*) print_char_cursor#143 )
  (byte) test_8u::dividend#1 ← phi( test_8u::@1/(byte) test_8u::dividend#0 )
  (byte) rem8u#25 ← phi( test_8u::@1/(byte) rem8u#2 )
  (byte) div8u::return#6 ← phi( test_8u::@1/(byte) div8u::return#3 )
  (byte~) test_8u::$0 ← (byte) div8u::return#6
  (byte) rem8u#10 ← (byte) rem8u#25
  (byte) test_8u::res#0 ← (byte~) test_8u::$0
  (byte) print_byte::b#3 ← (byte) test_8u::dividend#1
  call print_byte param-assignment
  to:test_8u::@4
test_8u::@4: scope:[test_8u]  from test_8u::@3
  (byte) test_8u::i#10 ← phi( test_8u::@3/(byte) test_8u::i#11 )
  (byte*) print_line_cursor#71 ← phi( test_8u::@3/(byte*) print_line_cursor#75 )
  (byte) rem8u#61 ← phi( test_8u::@3/(byte) rem8u#10 )
  (byte) test_8u::res#4 ← phi( test_8u::@3/(byte) test_8u::res#0 )
  (byte) test_8u::divisor#2 ← phi( test_8u::@3/(byte) test_8u::divisor#3 )
  (byte*) print_char_cursor#89 ← phi( test_8u::@3/(byte*) print_char_cursor#16 )
  (byte*) print_char_cursor#27 ← (byte*) print_char_cursor#89
  (byte*) print_str::str#1 ← (const string) test_8u::str
  call print_str param-assignment
  to:test_8u::@5
test_8u::@5: scope:[test_8u]  from test_8u::@4
  (byte) test_8u::i#9 ← phi( test_8u::@4/(byte) test_8u::i#10 )
  (byte*) print_line_cursor#67 ← phi( test_8u::@4/(byte*) print_line_cursor#71 )
  (byte) rem8u#58 ← phi( test_8u::@4/(byte) rem8u#61 )
  (byte) test_8u::res#3 ← phi( test_8u::@4/(byte) test_8u::res#4 )
  (byte) test_8u::divisor#1 ← phi( test_8u::@4/(byte) test_8u::divisor#2 )
  (byte*) print_char_cursor#90 ← phi( test_8u::@4/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#28 ← (byte*) print_char_cursor#90
  (byte) print_byte::b#4 ← (byte) test_8u::divisor#1
  call print_byte param-assignment
  to:test_8u::@6
test_8u::@6: scope:[test_8u]  from test_8u::@5
  (byte) test_8u::i#8 ← phi( test_8u::@5/(byte) test_8u::i#9 )
  (byte*) print_line_cursor#62 ← phi( test_8u::@5/(byte*) print_line_cursor#67 )
  (byte) rem8u#53 ← phi( test_8u::@5/(byte) rem8u#58 )
  (byte) test_8u::res#2 ← phi( test_8u::@5/(byte) test_8u::res#3 )
  (byte*) print_char_cursor#91 ← phi( test_8u::@5/(byte*) print_char_cursor#16 )
  (byte*) print_char_cursor#29 ← (byte*) print_char_cursor#91
  (byte*) print_str::str#2 ← (const string) test_8u::str1
  call print_str param-assignment
  to:test_8u::@7
test_8u::@7: scope:[test_8u]  from test_8u::@6
  (byte) test_8u::i#7 ← phi( test_8u::@6/(byte) test_8u::i#8 )
  (byte*) print_line_cursor#57 ← phi( test_8u::@6/(byte*) print_line_cursor#62 )
  (byte) rem8u#46 ← phi( test_8u::@6/(byte) rem8u#53 )
  (byte) test_8u::res#1 ← phi( test_8u::@6/(byte) test_8u::res#2 )
  (byte*) print_char_cursor#92 ← phi( test_8u::@6/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#30 ← (byte*) print_char_cursor#92
  (byte) print_byte::b#5 ← (byte) test_8u::res#1
  call print_byte param-assignment
  to:test_8u::@8
test_8u::@8: scope:[test_8u]  from test_8u::@7
  (byte) test_8u::i#6 ← phi( test_8u::@7/(byte) test_8u::i#7 )
  (byte*) print_line_cursor#52 ← phi( test_8u::@7/(byte*) print_line_cursor#57 )
  (byte) rem8u#37 ← phi( test_8u::@7/(byte) rem8u#46 )
  (byte*) print_char_cursor#93 ← phi( test_8u::@7/(byte*) print_char_cursor#16 )
  (byte*) print_char_cursor#31 ← (byte*) print_char_cursor#93
  (byte*) print_str::str#3 ← (const string) test_8u::str2
  call print_str param-assignment
  to:test_8u::@9
test_8u::@9: scope:[test_8u]  from test_8u::@8
  (byte) test_8u::i#5 ← phi( test_8u::@8/(byte) test_8u::i#6 )
  (byte*) print_line_cursor#46 ← phi( test_8u::@8/(byte*) print_line_cursor#52 )
  (byte) rem8u#26 ← phi( test_8u::@8/(byte) rem8u#37 )
  (byte*) print_char_cursor#94 ← phi( test_8u::@8/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#32 ← (byte*) print_char_cursor#94
  (byte) print_byte::b#6 ← (byte) rem8u#26
  call print_byte param-assignment
  to:test_8u::@10
test_8u::@10: scope:[test_8u]  from test_8u::@9
  (byte) rem8u#47 ← phi( test_8u::@9/(byte) rem8u#26 )
  (byte) test_8u::i#4 ← phi( test_8u::@9/(byte) test_8u::i#5 )
  (byte*) print_line_cursor#41 ← phi( test_8u::@9/(byte*) print_line_cursor#46 )
  (byte*) print_char_cursor#95 ← phi( test_8u::@9/(byte*) print_char_cursor#16 )
  (byte*) print_char_cursor#33 ← (byte*) print_char_cursor#95
  call print_ln param-assignment
  to:test_8u::@11
test_8u::@11: scope:[test_8u]  from test_8u::@10
  (byte) rem8u#38 ← phi( test_8u::@10/(byte) rem8u#47 )
  (byte) test_8u::i#3 ← phi( test_8u::@10/(byte) test_8u::i#4 )
  (byte*) print_char_cursor#96 ← phi( test_8u::@10/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#30 ← phi( test_8u::@10/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#11 ← (byte*) print_line_cursor#30
  (byte*) print_char_cursor#34 ← (byte*) print_char_cursor#96
  (byte) test_8u::i#1 ← ++ (byte) test_8u::i#3
  (boolean~) test_8u::$9 ← (byte) test_8u::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 6
  if((boolean~) test_8u::$9) goto test_8u::@1
  to:test_8u::@return
test_8u::@return: scope:[test_8u]  from test_8u::@11
  (byte*) print_line_cursor#31 ← phi( test_8u::@11/(byte*) print_line_cursor#11 )
  (byte*) print_char_cursor#97 ← phi( test_8u::@11/(byte*) print_char_cursor#34 )
  (byte) rem8u#27 ← phi( test_8u::@11/(byte) rem8u#38 )
  (byte) rem8u#11 ← (byte) rem8u#27
  (byte*) print_char_cursor#35 ← (byte*) print_char_cursor#97
  (byte*) print_line_cursor#12 ← (byte*) print_line_cursor#31
  return 
  to:@return
test_16u: scope:[test_16u]  from main::@2
  (byte*) print_line_cursor#84 ← phi( main::@2/(byte*) print_line_cursor#6 )
  (byte*) print_char_cursor#150 ← phi( main::@2/(byte*) print_char_cursor#22 )
  (word) rem16u#44 ← phi( main::@2/(word) rem16u#33 )
  (word[]) test_16u::dividends#0 ← { (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535 }
  (word[]) test_16u::divisors#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_16u::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:test_16u::@1
test_16u::@1: scope:[test_16u]  from test_16u test_16u::@11
  (byte*) print_line_cursor#80 ← phi( test_16u/(byte*) print_line_cursor#84 test_16u::@11/(byte*) print_line_cursor#13 )
  (byte*) print_char_cursor#144 ← phi( test_16u/(byte*) print_char_cursor#150 test_16u::@11/(byte*) print_char_cursor#43 )
  (word) rem16u#35 ← phi( test_16u/(word) rem16u#44 test_16u::@11/(word) rem16u#37 )
  (byte) test_16u::i#2 ← phi( test_16u/(byte) test_16u::i#0 test_16u::@11/(byte) test_16u::i#1 )
  (word) test_16u::dividend#0 ← *((word[]) test_16u::dividends#0 + (byte) test_16u::i#2)
  (word) test_16u::divisor#0 ← *((word[]) test_16u::divisors#0 + (byte) test_16u::i#2)
  (word) div16u::dividend#1 ← (word) test_16u::dividend#0
  (word) div16u::divisor#1 ← (word) test_16u::divisor#0
  call div16u param-assignment
  (word) div16u::return#3 ← (word) div16u::return#1
  to:test_16u::@3
test_16u::@3: scope:[test_16u]  from test_16u::@1
  (byte) test_16u::i#11 ← phi( test_16u::@1/(byte) test_16u::i#2 )
  (byte*) print_line_cursor#76 ← phi( test_16u::@1/(byte*) print_line_cursor#80 )
  (word) test_16u::divisor#3 ← phi( test_16u::@1/(word) test_16u::divisor#0 )
  (byte*) print_char_cursor#136 ← phi( test_16u::@1/(byte*) print_char_cursor#144 )
  (word) test_16u::dividend#1 ← phi( test_16u::@1/(word) test_16u::dividend#0 )
  (word) rem16u#25 ← phi( test_16u::@1/(word) rem16u#4 )
  (word) div16u::return#6 ← phi( test_16u::@1/(word) div16u::return#3 )
  (word~) test_16u::$0 ← (word) div16u::return#6
  (word) rem16u#10 ← (word) rem16u#25
  (word) test_16u::res#0 ← (word~) test_16u::$0
  (word) print_word::w#1 ← (word) test_16u::dividend#1
  call print_word param-assignment
  to:test_16u::@4
test_16u::@4: scope:[test_16u]  from test_16u::@3
  (byte) test_16u::i#10 ← phi( test_16u::@3/(byte) test_16u::i#11 )
  (byte*) print_line_cursor#72 ← phi( test_16u::@3/(byte*) print_line_cursor#76 )
  (word) rem16u#60 ← phi( test_16u::@3/(word) rem16u#10 )
  (word) test_16u::res#4 ← phi( test_16u::@3/(word) test_16u::res#0 )
  (word) test_16u::divisor#2 ← phi( test_16u::@3/(word) test_16u::divisor#3 )
  (byte*) print_char_cursor#98 ← phi( test_16u::@3/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#36 ← (byte*) print_char_cursor#98
  (byte*) print_str::str#4 ← (const string) test_16u::str
  call print_str param-assignment
  to:test_16u::@5
test_16u::@5: scope:[test_16u]  from test_16u::@4
  (byte) test_16u::i#9 ← phi( test_16u::@4/(byte) test_16u::i#10 )
  (byte*) print_line_cursor#68 ← phi( test_16u::@4/(byte*) print_line_cursor#72 )
  (word) rem16u#57 ← phi( test_16u::@4/(word) rem16u#60 )
  (word) test_16u::res#3 ← phi( test_16u::@4/(word) test_16u::res#4 )
  (word) test_16u::divisor#1 ← phi( test_16u::@4/(word) test_16u::divisor#2 )
  (byte*) print_char_cursor#99 ← phi( test_16u::@4/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#37 ← (byte*) print_char_cursor#99
  (word) print_word::w#2 ← (word) test_16u::divisor#1
  call print_word param-assignment
  to:test_16u::@6
test_16u::@6: scope:[test_16u]  from test_16u::@5
  (byte) test_16u::i#8 ← phi( test_16u::@5/(byte) test_16u::i#9 )
  (byte*) print_line_cursor#63 ← phi( test_16u::@5/(byte*) print_line_cursor#68 )
  (word) rem16u#53 ← phi( test_16u::@5/(word) rem16u#57 )
  (word) test_16u::res#2 ← phi( test_16u::@5/(word) test_16u::res#3 )
  (byte*) print_char_cursor#100 ← phi( test_16u::@5/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#38 ← (byte*) print_char_cursor#100
  (byte*) print_str::str#5 ← (const string) test_16u::str1
  call print_str param-assignment
  to:test_16u::@7
test_16u::@7: scope:[test_16u]  from test_16u::@6
  (byte) test_16u::i#7 ← phi( test_16u::@6/(byte) test_16u::i#8 )
  (byte*) print_line_cursor#58 ← phi( test_16u::@6/(byte*) print_line_cursor#63 )
  (word) rem16u#45 ← phi( test_16u::@6/(word) rem16u#53 )
  (word) test_16u::res#1 ← phi( test_16u::@6/(word) test_16u::res#2 )
  (byte*) print_char_cursor#101 ← phi( test_16u::@6/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#39 ← (byte*) print_char_cursor#101
  (word) print_word::w#3 ← (word) test_16u::res#1
  call print_word param-assignment
  to:test_16u::@8
test_16u::@8: scope:[test_16u]  from test_16u::@7
  (byte) test_16u::i#6 ← phi( test_16u::@7/(byte) test_16u::i#7 )
  (byte*) print_line_cursor#53 ← phi( test_16u::@7/(byte*) print_line_cursor#58 )
  (word) rem16u#36 ← phi( test_16u::@7/(word) rem16u#45 )
  (byte*) print_char_cursor#102 ← phi( test_16u::@7/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#40 ← (byte*) print_char_cursor#102
  (byte*) print_str::str#6 ← (const string) test_16u::str2
  call print_str param-assignment
  to:test_16u::@9
test_16u::@9: scope:[test_16u]  from test_16u::@8
  (byte) test_16u::i#5 ← phi( test_16u::@8/(byte) test_16u::i#6 )
  (byte*) print_line_cursor#47 ← phi( test_16u::@8/(byte*) print_line_cursor#53 )
  (word) rem16u#26 ← phi( test_16u::@8/(word) rem16u#36 )
  (byte*) print_char_cursor#103 ← phi( test_16u::@8/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#41 ← (byte*) print_char_cursor#103
  (word) print_word::w#4 ← (word) rem16u#26
  call print_word param-assignment
  to:test_16u::@10
test_16u::@10: scope:[test_16u]  from test_16u::@9
  (word) rem16u#46 ← phi( test_16u::@9/(word) rem16u#26 )
  (byte) test_16u::i#4 ← phi( test_16u::@9/(byte) test_16u::i#5 )
  (byte*) print_line_cursor#42 ← phi( test_16u::@9/(byte*) print_line_cursor#47 )
  (byte*) print_char_cursor#104 ← phi( test_16u::@9/(byte*) print_char_cursor#13 )
  (byte*) print_char_cursor#42 ← (byte*) print_char_cursor#104
  call print_ln param-assignment
  to:test_16u::@11
test_16u::@11: scope:[test_16u]  from test_16u::@10
  (word) rem16u#37 ← phi( test_16u::@10/(word) rem16u#46 )
  (byte) test_16u::i#3 ← phi( test_16u::@10/(byte) test_16u::i#4 )
  (byte*) print_char_cursor#105 ← phi( test_16u::@10/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#32 ← phi( test_16u::@10/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#13 ← (byte*) print_line_cursor#32
  (byte*) print_char_cursor#43 ← (byte*) print_char_cursor#105
  (byte/signed word/word/dword/signed dword~) test_16u::$9 ← (byte) test_16u::i#3 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) test_16u::i#1 ← (byte/signed word/word/dword/signed dword~) test_16u::$9
  (boolean~) test_16u::$10 ← (byte) test_16u::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 12
  if((boolean~) test_16u::$10) goto test_16u::@1
  to:test_16u::@return
test_16u::@return: scope:[test_16u]  from test_16u::@11
  (byte*) print_line_cursor#33 ← phi( test_16u::@11/(byte*) print_line_cursor#13 )
  (byte*) print_char_cursor#106 ← phi( test_16u::@11/(byte*) print_char_cursor#43 )
  (word) rem16u#27 ← phi( test_16u::@11/(word) rem16u#37 )
  (word) rem16u#11 ← (word) rem16u#27
  (byte*) print_char_cursor#44 ← (byte*) print_char_cursor#106
  (byte*) print_line_cursor#14 ← (byte*) print_line_cursor#33
  return 
  to:@return
test_8s: scope:[test_8s]  from main::@3
  (byte*) print_line_cursor#85 ← phi( main::@3/(byte*) print_line_cursor#7 )
  (byte*) print_char_cursor#151 ← phi( main::@3/(byte*) print_char_cursor#23 )
  (signed byte) rem8s#23 ← phi( main::@3/(signed byte) rem8s#16 )
  (byte) rem8u#48 ← phi( main::@3/(byte) rem8u#34 )
  (signed byte/signed word/signed dword~) test_8s::$0 ← - (byte/signed byte/word/signed word/dword/signed dword) 127
  (signed byte/signed word/signed dword~) test_8s::$1 ← - (byte/signed byte/word/signed word/dword/signed dword) 127
  (signed byte[]) test_8s::dividends#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 127, (signed byte/signed word/signed dword~) test_8s::$0, (signed byte/signed word/signed dword~) test_8s::$1, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127 }
  (signed byte/signed word/signed dword~) test_8s::$2 ← - (byte/signed byte/word/signed word/dword/signed dword) 11
  (signed byte/signed word/signed dword~) test_8s::$3 ← - (byte/signed byte/word/signed word/dword/signed dword) 13
  (signed byte[]) test_8s::divisors#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (signed byte/signed word/signed dword~) test_8s::$2, (signed byte/signed word/signed dword~) test_8s::$3, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_8s::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:test_8s::@1
test_8s::@1: scope:[test_8s]  from test_8s test_8s::@11
  (byte*) print_line_cursor#81 ← phi( test_8s/(byte*) print_line_cursor#85 test_8s::@11/(byte*) print_line_cursor#15 )
  (byte*) print_char_cursor#145 ← phi( test_8s/(byte*) print_char_cursor#151 test_8s::@11/(byte*) print_char_cursor#52 )
  (signed byte) rem8s#18 ← phi( test_8s/(signed byte) rem8s#23 test_8s::@11/(signed byte) rem8s#20 )
  (byte) rem8u#39 ← phi( test_8s/(byte) rem8u#48 test_8s::@11/(byte) rem8u#40 )
  (byte) test_8s::i#2 ← phi( test_8s/(byte) test_8s::i#0 test_8s::@11/(byte) test_8s::i#1 )
  (signed byte) test_8s::dividend#0 ← *((signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#2)
  (signed byte) test_8s::divisor#0 ← *((signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#2)
  (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0
  (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0
  call div8s param-assignment
  (signed byte) div8s::return#3 ← (signed byte) div8s::return#2
  to:test_8s::@3
test_8s::@3: scope:[test_8s]  from test_8s::@1
  (byte) test_8s::i#11 ← phi( test_8s::@1/(byte) test_8s::i#2 )
  (byte*) print_line_cursor#77 ← phi( test_8s::@1/(byte*) print_line_cursor#81 )
  (signed byte) test_8s::divisor#3 ← phi( test_8s::@1/(signed byte) test_8s::divisor#0 )
  (byte*) print_char_cursor#137 ← phi( test_8s::@1/(byte*) print_char_cursor#145 )
  (signed byte) test_8s::dividend#1 ← phi( test_8s::@1/(signed byte) test_8s::dividend#0 )
  (signed byte) rem8s#12 ← phi( test_8s::@1/(signed byte) rem8s#3 )
  (byte) rem8u#28 ← phi( test_8s::@1/(byte) rem8u#6 )
  (signed byte) div8s::return#5 ← phi( test_8s::@1/(signed byte) div8s::return#3 )
  (signed byte~) test_8s::$4 ← (signed byte) div8s::return#5
  (byte) rem8u#12 ← (byte) rem8u#28
  (signed byte) rem8s#6 ← (signed byte) rem8s#12
  (signed byte) test_8s::res#0 ← (signed byte~) test_8s::$4
  (signed byte) print_sbyte::b#1 ← (signed byte) test_8s::dividend#1
  call print_sbyte param-assignment
  to:test_8s::@4
test_8s::@4: scope:[test_8s]  from test_8s::@3
  (byte) rem8u#65 ← phi( test_8s::@3/(byte) rem8u#12 )
  (byte) test_8s::i#10 ← phi( test_8s::@3/(byte) test_8s::i#11 )
  (byte*) print_line_cursor#73 ← phi( test_8s::@3/(byte*) print_line_cursor#77 )
  (signed byte) rem8s#31 ← phi( test_8s::@3/(signed byte) rem8s#6 )
  (signed byte) test_8s::res#4 ← phi( test_8s::@3/(signed byte) test_8s::res#0 )
  (signed byte) test_8s::divisor#2 ← phi( test_8s::@3/(signed byte) test_8s::divisor#3 )
  (byte*) print_char_cursor#107 ← phi( test_8s::@3/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#45 ← (byte*) print_char_cursor#107
  (byte*) print_str::str#7 ← (const string) test_8s::str
  call print_str param-assignment
  to:test_8s::@5
test_8s::@5: scope:[test_8s]  from test_8s::@4
  (byte) rem8u#64 ← phi( test_8s::@4/(byte) rem8u#65 )
  (byte) test_8s::i#9 ← phi( test_8s::@4/(byte) test_8s::i#10 )
  (byte*) print_line_cursor#69 ← phi( test_8s::@4/(byte*) print_line_cursor#73 )
  (signed byte) rem8s#30 ← phi( test_8s::@4/(signed byte) rem8s#31 )
  (signed byte) test_8s::res#3 ← phi( test_8s::@4/(signed byte) test_8s::res#4 )
  (signed byte) test_8s::divisor#1 ← phi( test_8s::@4/(signed byte) test_8s::divisor#2 )
  (byte*) print_char_cursor#108 ← phi( test_8s::@4/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#46 ← (byte*) print_char_cursor#108
  (signed byte) print_sbyte::b#2 ← (signed byte) test_8s::divisor#1
  call print_sbyte param-assignment
  to:test_8s::@6
test_8s::@6: scope:[test_8s]  from test_8s::@5
  (byte) rem8u#63 ← phi( test_8s::@5/(byte) rem8u#64 )
  (byte) test_8s::i#8 ← phi( test_8s::@5/(byte) test_8s::i#9 )
  (byte*) print_line_cursor#64 ← phi( test_8s::@5/(byte*) print_line_cursor#69 )
  (signed byte) rem8s#28 ← phi( test_8s::@5/(signed byte) rem8s#30 )
  (signed byte) test_8s::res#2 ← phi( test_8s::@5/(signed byte) test_8s::res#3 )
  (byte*) print_char_cursor#109 ← phi( test_8s::@5/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#47 ← (byte*) print_char_cursor#109
  (byte*) print_str::str#8 ← (const string) test_8s::str1
  call print_str param-assignment
  to:test_8s::@7
test_8s::@7: scope:[test_8s]  from test_8s::@6
  (byte) rem8u#62 ← phi( test_8s::@6/(byte) rem8u#63 )
  (byte) test_8s::i#7 ← phi( test_8s::@6/(byte) test_8s::i#8 )
  (byte*) print_line_cursor#59 ← phi( test_8s::@6/(byte*) print_line_cursor#64 )
  (signed byte) rem8s#24 ← phi( test_8s::@6/(signed byte) rem8s#28 )
  (signed byte) test_8s::res#1 ← phi( test_8s::@6/(signed byte) test_8s::res#2 )
  (byte*) print_char_cursor#110 ← phi( test_8s::@6/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#48 ← (byte*) print_char_cursor#110
  (signed byte) print_sbyte::b#3 ← (signed byte) test_8s::res#1
  call print_sbyte param-assignment
  to:test_8s::@8
test_8s::@8: scope:[test_8s]  from test_8s::@7
  (byte) rem8u#59 ← phi( test_8s::@7/(byte) rem8u#62 )
  (byte) test_8s::i#6 ← phi( test_8s::@7/(byte) test_8s::i#7 )
  (byte*) print_line_cursor#54 ← phi( test_8s::@7/(byte*) print_line_cursor#59 )
  (signed byte) rem8s#19 ← phi( test_8s::@7/(signed byte) rem8s#24 )
  (byte*) print_char_cursor#111 ← phi( test_8s::@7/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#49 ← (byte*) print_char_cursor#111
  (byte*) print_str::str#9 ← (const string) test_8s::str2
  call print_str param-assignment
  to:test_8s::@9
test_8s::@9: scope:[test_8s]  from test_8s::@8
  (byte) rem8u#54 ← phi( test_8s::@8/(byte) rem8u#59 )
  (byte) test_8s::i#5 ← phi( test_8s::@8/(byte) test_8s::i#6 )
  (byte*) print_line_cursor#48 ← phi( test_8s::@8/(byte*) print_line_cursor#54 )
  (signed byte) rem8s#13 ← phi( test_8s::@8/(signed byte) rem8s#19 )
  (byte*) print_char_cursor#112 ← phi( test_8s::@8/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#50 ← (byte*) print_char_cursor#112
  (signed byte) print_sbyte::b#4 ← (signed byte) rem8s#13
  call print_sbyte param-assignment
  to:test_8s::@10
test_8s::@10: scope:[test_8s]  from test_8s::@9
  (signed byte) rem8s#25 ← phi( test_8s::@9/(signed byte) rem8s#13 )
  (byte) rem8u#49 ← phi( test_8s::@9/(byte) rem8u#54 )
  (byte) test_8s::i#4 ← phi( test_8s::@9/(byte) test_8s::i#5 )
  (byte*) print_line_cursor#43 ← phi( test_8s::@9/(byte*) print_line_cursor#48 )
  (byte*) print_char_cursor#113 ← phi( test_8s::@9/(byte*) print_char_cursor#10 )
  (byte*) print_char_cursor#51 ← (byte*) print_char_cursor#113
  call print_ln param-assignment
  to:test_8s::@11
test_8s::@11: scope:[test_8s]  from test_8s::@10
  (signed byte) rem8s#20 ← phi( test_8s::@10/(signed byte) rem8s#25 )
  (byte) rem8u#40 ← phi( test_8s::@10/(byte) rem8u#49 )
  (byte) test_8s::i#3 ← phi( test_8s::@10/(byte) test_8s::i#4 )
  (byte*) print_char_cursor#114 ← phi( test_8s::@10/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#34 ← phi( test_8s::@10/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#15 ← (byte*) print_line_cursor#34
  (byte*) print_char_cursor#52 ← (byte*) print_char_cursor#114
  (byte) test_8s::i#1 ← ++ (byte) test_8s::i#3
  (boolean~) test_8s::$13 ← (byte) test_8s::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 6
  if((boolean~) test_8s::$13) goto test_8s::@1
  to:test_8s::@return
test_8s::@return: scope:[test_8s]  from test_8s::@11
  (byte*) print_line_cursor#35 ← phi( test_8s::@11/(byte*) print_line_cursor#15 )
  (byte*) print_char_cursor#115 ← phi( test_8s::@11/(byte*) print_char_cursor#52 )
  (signed byte) rem8s#14 ← phi( test_8s::@11/(signed byte) rem8s#20 )
  (byte) rem8u#29 ← phi( test_8s::@11/(byte) rem8u#40 )
  (byte) rem8u#13 ← (byte) rem8u#29
  (signed byte) rem8s#7 ← (signed byte) rem8s#14
  (byte*) print_char_cursor#53 ← (byte*) print_char_cursor#115
  (byte*) print_line_cursor#16 ← (byte*) print_line_cursor#35
  return 
  to:@return
test_16s: scope:[test_16s]  from main::@4
  (byte*) print_line_cursor#86 ← phi( main::@4/(byte*) print_line_cursor#8 )
  (byte*) print_char_cursor#152 ← phi( main::@4/(byte*) print_char_cursor#24 )
  (signed word) rem16s#22 ← phi( main::@4/(signed word) rem16s#16 )
  (word) rem16u#47 ← phi( main::@4/(word) rem16u#34 )
  (signed word/signed dword~) test_16s::$0 ← - (word/signed word/dword/signed dword) 32767
  (signed word/signed dword~) test_16s::$1 ← - (word/signed word/dword/signed dword) 32767
  (signed word/signed dword~) test_16s::$2 ← - (word/signed word/dword/signed dword) 32767
  (signed word[]) test_16s::dividends#0 ← { (word/signed word/dword/signed dword) 32767, (word/signed word/dword/signed dword) 32767, (signed word/signed dword~) test_16s::$0, (signed word/signed dword~) test_16s::$1, (word/signed word/dword/signed dword) 32767, (signed word/signed dword~) test_16s::$2 }
  (signed byte/signed word/signed dword~) test_16s::$3 ← - (byte/signed byte/word/signed word/dword/signed dword) 7
  (signed byte/signed word/signed dword~) test_16s::$4 ← - (byte/signed byte/word/signed word/dword/signed dword) 13
  (signed byte/signed word/signed dword~) test_16s::$5 ← - (byte/signed byte/word/signed word/dword/signed dword) 17
  (signed word[]) test_16s::divisors#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (signed byte/signed word/signed dword~) test_16s::$3, (byte/signed byte/word/signed word/dword/signed dword) 11, (signed byte/signed word/signed dword~) test_16s::$4, (signed byte/signed word/signed dword~) test_16s::$5, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_16s::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:test_16s::@1
test_16s::@1: scope:[test_16s]  from test_16s test_16s::@11
  (byte*) print_line_cursor#82 ← phi( test_16s/(byte*) print_line_cursor#86 test_16s::@11/(byte*) print_line_cursor#17 )
  (byte*) print_char_cursor#146 ← phi( test_16s/(byte*) print_char_cursor#152 test_16s::@11/(byte*) print_char_cursor#61 )
  (signed word) rem16s#17 ← phi( test_16s/(signed word) rem16s#22 test_16s::@11/(signed word) rem16s#19 )
  (word) rem16u#38 ← phi( test_16s/(word) rem16u#47 test_16s::@11/(word) rem16u#39 )
  (byte) test_16s::i#2 ← phi( test_16s/(byte) test_16s::i#0 test_16s::@11/(byte) test_16s::i#1 )
  (signed word) test_16s::dividend#0 ← *((signed word[]) test_16s::dividends#0 + (byte) test_16s::i#2)
  (signed word) test_16s::divisor#0 ← *((signed word[]) test_16s::divisors#0 + (byte) test_16s::i#2)
  (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0
  (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0
  call div16s param-assignment
  (signed word) div16s::return#3 ← (signed word) div16s::return#2
  to:test_16s::@3
test_16s::@3: scope:[test_16s]  from test_16s::@1
  (byte) test_16s::i#11 ← phi( test_16s::@1/(byte) test_16s::i#2 )
  (byte*) print_line_cursor#78 ← phi( test_16s::@1/(byte*) print_line_cursor#82 )
  (signed word) test_16s::divisor#3 ← phi( test_16s::@1/(signed word) test_16s::divisor#0 )
  (byte*) print_char_cursor#138 ← phi( test_16s::@1/(byte*) print_char_cursor#146 )
  (signed word) test_16s::dividend#1 ← phi( test_16s::@1/(signed word) test_16s::dividend#0 )
  (signed word) rem16s#12 ← phi( test_16s::@1/(signed word) rem16s#3 )
  (word) rem16u#28 ← phi( test_16s::@1/(word) rem16u#6 )
  (signed word) div16s::return#5 ← phi( test_16s::@1/(signed word) div16s::return#3 )
  (signed word~) test_16s::$6 ← (signed word) div16s::return#5
  (word) rem16u#12 ← (word) rem16u#28
  (signed word) rem16s#6 ← (signed word) rem16s#12
  (signed word) test_16s::res#0 ← (signed word~) test_16s::$6
  (signed word) print_sword::w#1 ← (signed word) test_16s::dividend#1
  call print_sword param-assignment
  to:test_16s::@4
test_16s::@4: scope:[test_16s]  from test_16s::@3
  (word) rem16u#64 ← phi( test_16s::@3/(word) rem16u#12 )
  (byte) test_16s::i#10 ← phi( test_16s::@3/(byte) test_16s::i#11 )
  (byte*) print_line_cursor#74 ← phi( test_16s::@3/(byte*) print_line_cursor#78 )
  (signed word) rem16s#30 ← phi( test_16s::@3/(signed word) rem16s#6 )
  (signed word) test_16s::res#4 ← phi( test_16s::@3/(signed word) test_16s::res#0 )
  (signed word) test_16s::divisor#2 ← phi( test_16s::@3/(signed word) test_16s::divisor#3 )
  (byte*) print_char_cursor#116 ← phi( test_16s::@3/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#54 ← (byte*) print_char_cursor#116
  (byte*) print_str::str#10 ← (const string) test_16s::str
  call print_str param-assignment
  to:test_16s::@5
test_16s::@5: scope:[test_16s]  from test_16s::@4
  (word) rem16u#63 ← phi( test_16s::@4/(word) rem16u#64 )
  (byte) test_16s::i#9 ← phi( test_16s::@4/(byte) test_16s::i#10 )
  (byte*) print_line_cursor#70 ← phi( test_16s::@4/(byte*) print_line_cursor#74 )
  (signed word) rem16s#28 ← phi( test_16s::@4/(signed word) rem16s#30 )
  (signed word) test_16s::res#3 ← phi( test_16s::@4/(signed word) test_16s::res#4 )
  (signed word) test_16s::divisor#1 ← phi( test_16s::@4/(signed word) test_16s::divisor#2 )
  (byte*) print_char_cursor#117 ← phi( test_16s::@4/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#55 ← (byte*) print_char_cursor#117
  (signed word) print_sword::w#2 ← (signed word) test_16s::divisor#1
  call print_sword param-assignment
  to:test_16s::@6
test_16s::@6: scope:[test_16s]  from test_16s::@5
  (word) rem16u#62 ← phi( test_16s::@5/(word) rem16u#63 )
  (byte) test_16s::i#8 ← phi( test_16s::@5/(byte) test_16s::i#9 )
  (byte*) print_line_cursor#65 ← phi( test_16s::@5/(byte*) print_line_cursor#70 )
  (signed word) rem16s#26 ← phi( test_16s::@5/(signed word) rem16s#28 )
  (signed word) test_16s::res#2 ← phi( test_16s::@5/(signed word) test_16s::res#3 )
  (byte*) print_char_cursor#118 ← phi( test_16s::@5/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#56 ← (byte*) print_char_cursor#118
  (byte*) print_str::str#11 ← (const string) test_16s::str1
  call print_str param-assignment
  to:test_16s::@7
test_16s::@7: scope:[test_16s]  from test_16s::@6
  (word) rem16u#61 ← phi( test_16s::@6/(word) rem16u#62 )
  (byte) test_16s::i#7 ← phi( test_16s::@6/(byte) test_16s::i#8 )
  (byte*) print_line_cursor#60 ← phi( test_16s::@6/(byte*) print_line_cursor#65 )
  (signed word) rem16s#23 ← phi( test_16s::@6/(signed word) rem16s#26 )
  (signed word) test_16s::res#1 ← phi( test_16s::@6/(signed word) test_16s::res#2 )
  (byte*) print_char_cursor#119 ← phi( test_16s::@6/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#57 ← (byte*) print_char_cursor#119
  (signed word) print_sword::w#3 ← (signed word) test_16s::res#1
  call print_sword param-assignment
  to:test_16s::@8
test_16s::@8: scope:[test_16s]  from test_16s::@7
  (word) rem16u#58 ← phi( test_16s::@7/(word) rem16u#61 )
  (byte) test_16s::i#6 ← phi( test_16s::@7/(byte) test_16s::i#7 )
  (byte*) print_line_cursor#55 ← phi( test_16s::@7/(byte*) print_line_cursor#60 )
  (signed word) rem16s#18 ← phi( test_16s::@7/(signed word) rem16s#23 )
  (byte*) print_char_cursor#120 ← phi( test_16s::@7/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#58 ← (byte*) print_char_cursor#120
  (byte*) print_str::str#12 ← (const string) test_16s::str2
  call print_str param-assignment
  to:test_16s::@9
test_16s::@9: scope:[test_16s]  from test_16s::@8
  (word) rem16u#54 ← phi( test_16s::@8/(word) rem16u#58 )
  (byte) test_16s::i#5 ← phi( test_16s::@8/(byte) test_16s::i#6 )
  (byte*) print_line_cursor#49 ← phi( test_16s::@8/(byte*) print_line_cursor#55 )
  (signed word) rem16s#13 ← phi( test_16s::@8/(signed word) rem16s#18 )
  (byte*) print_char_cursor#121 ← phi( test_16s::@8/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#59 ← (byte*) print_char_cursor#121
  (signed word) print_sword::w#4 ← (signed word) rem16s#13
  call print_sword param-assignment
  to:test_16s::@10
test_16s::@10: scope:[test_16s]  from test_16s::@9
  (signed word) rem16s#24 ← phi( test_16s::@9/(signed word) rem16s#13 )
  (word) rem16u#48 ← phi( test_16s::@9/(word) rem16u#54 )
  (byte) test_16s::i#4 ← phi( test_16s::@9/(byte) test_16s::i#5 )
  (byte*) print_line_cursor#44 ← phi( test_16s::@9/(byte*) print_line_cursor#49 )
  (byte*) print_char_cursor#122 ← phi( test_16s::@9/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#60 ← (byte*) print_char_cursor#122
  call print_ln param-assignment
  to:test_16s::@11
test_16s::@11: scope:[test_16s]  from test_16s::@10
  (signed word) rem16s#19 ← phi( test_16s::@10/(signed word) rem16s#24 )
  (word) rem16u#39 ← phi( test_16s::@10/(word) rem16u#48 )
  (byte) test_16s::i#3 ← phi( test_16s::@10/(byte) test_16s::i#4 )
  (byte*) print_char_cursor#123 ← phi( test_16s::@10/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#36 ← phi( test_16s::@10/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#17 ← (byte*) print_line_cursor#36
  (byte*) print_char_cursor#61 ← (byte*) print_char_cursor#123
  (byte/signed word/word/dword/signed dword~) test_16s::$15 ← (byte) test_16s::i#3 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) test_16s::i#1 ← (byte/signed word/word/dword/signed dword~) test_16s::$15
  (boolean~) test_16s::$16 ← (byte) test_16s::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 12
  if((boolean~) test_16s::$16) goto test_16s::@1
  to:test_16s::@return
test_16s::@return: scope:[test_16s]  from test_16s::@11
  (byte*) print_line_cursor#37 ← phi( test_16s::@11/(byte*) print_line_cursor#17 )
  (byte*) print_char_cursor#124 ← phi( test_16s::@11/(byte*) print_char_cursor#61 )
  (signed word) rem16s#14 ← phi( test_16s::@11/(signed word) rem16s#19 )
  (word) rem16u#29 ← phi( test_16s::@11/(word) rem16u#39 )
  (word) rem16u#13 ← (word) rem16u#29
  (signed word) rem16s#7 ← (signed word) rem16s#14
  (byte*) print_char_cursor#62 ← (byte*) print_char_cursor#124
  (byte*) print_line_cursor#18 ← (byte*) print_line_cursor#37
  return 
  to:@return
@26: scope:[]  from @20
  (byte*) print_screen#5 ← phi( @20/(byte*) print_screen#6 )
  (signed word) rem16s#20 ← phi( @20/(signed word) rem16s#0 )
  (signed byte) rem8s#21 ← phi( @20/(signed byte) rem8s#26 )
  (word) rem16u#40 ← phi( @20/(word) rem16u#49 )
  (byte) rem8u#41 ← phi( @20/(byte) rem8u#50 )
  (byte*) print_char_cursor#139 ← phi( @20/(byte*) print_char_cursor#147 )
  (byte*) print_line_cursor#45 ← phi( @20/(byte*) print_line_cursor#50 )
  call main param-assignment
  to:@27
@27: scope:[]  from @26
  (signed word) rem16s#15 ← phi( @26/(signed word) rem16s#5 )
  (signed byte) rem8s#15 ← phi( @26/(signed byte) rem8s#5 )
  (word) rem16u#30 ← phi( @26/(word) rem16u#9 )
  (byte) rem8u#30 ← phi( @26/(byte) rem8u#9 )
  (byte*) print_char_cursor#125 ← phi( @26/(byte*) print_char_cursor#26 )
  (byte*) print_line_cursor#38 ← phi( @26/(byte*) print_line_cursor#10 )
  (byte*) print_line_cursor#19 ← (byte*) print_line_cursor#38
  (byte*) print_char_cursor#63 ← (byte*) print_char_cursor#125
  (byte) rem8u#14 ← (byte) rem8u#30
  (word) rem16u#14 ← (word) rem16u#30
  (signed byte) rem8s#8 ← (signed byte) rem8s#15
  (signed word) rem16s#8 ← (signed word) rem16s#15
  to:@end
@end: scope:[]  from @27

SYMBOL TABLE SSA
(const string) $0 = (string) "0123456789abcdef"
(label) @10
(label) @14
(label) @16
(label) @19
(label) @20
(label) @26
(label) @27
(label) @begin
(label) @end
(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
(boolean~) div16s::$0
(word~) div16s::$1
(boolean~) div16s::$10
(signed word~) div16s::$11
(signed word~) div16s::$12
(signed word~) div16s::$13
(signed word~) div16s::$14
(signed word~) div16s::$15
(signed word~) div16s::$16
(signed word~) div16s::$2
(word~) div16s::$3
(boolean~) div16s::$4
(word~) div16s::$5
(signed word~) div16s::$6
(word~) div16s::$7
(byte/word/dword~) div16s::$8
(word~) div16s::$9
(label) div16s::@1
(label) div16s::@11
(label) div16s::@15
(label) div16s::@2
(label) div16s::@3
(label) div16s::@4
(label) div16s::@5
(label) div16s::@7
(label) div16s::@9
(label) div16s::@return
(signed word) div16s::dividend
(signed word) div16s::dividend#0
(signed word) div16s::dividend#1
(signed word) div16s::dividend#2
(signed word) div16s::dividend#3
(word) div16s::dividendu
(word) div16s::dividendu#0
(word) div16s::dividendu#1
(word) div16s::dividendu#2
(word) div16s::dividendu#3
(word) div16s::dividendu#4
(word) div16s::dividendu#5
(word) div16s::dividendu#6
(signed word) div16s::divisor
(signed word) div16s::divisor#0
(signed word) div16s::divisor#1
(signed word) div16s::divisor#2
(signed word) div16s::divisor#3
(signed word) div16s::divisor#4
(signed word) div16s::divisor#5
(signed word) div16s::divisor#6
(word) div16s::divisoru
(word) div16s::divisoru#0
(word) div16s::divisoru#1
(word) div16s::divisoru#2
(word) div16s::divisoru#3
(byte) div16s::neg
(byte) div16s::neg#0
(byte) div16s::neg#1
(byte) div16s::neg#2
(byte) div16s::neg#3
(byte) div16s::neg#4
(byte) div16s::neg#5
(byte) div16s::neg#6
(byte) div16s::neg#7
(byte) div16s::neg#8
(word) div16s::resultu
(word) div16s::resultu#0
(word) div16s::resultu#1
(word) div16s::resultu#2
(signed word) div16s::return
(signed word) div16s::return#0
(signed word) div16s::return#1
(signed word) div16s::return#2
(signed word) div16s::return#3
(signed word) div16s::return#4
(signed word) div16s::return#5
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word~) div16u::$0
(label) div16u::@2
(label) div16u::@return
(word) div16u::dividend
(word) div16u::dividend#0
(word) div16u::dividend#1
(word) div16u::dividend#2
(word) div16u::divisor
(word) div16u::divisor#0
(word) div16u::divisor#1
(word) div16u::divisor#2
(word) div16u::return
(word) div16u::return#0
(word) div16u::return#1
(word) div16u::return#2
(word) div16u::return#3
(word) div16u::return#4
(word) div16u::return#5
(word) div16u::return#6
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(boolean~) div8s::$0
(byte~) div8s::$1
(boolean~) div8s::$10
(signed byte~) div8s::$11
(signed byte~) div8s::$12
(signed byte~) div8s::$13
(signed byte~) div8s::$14
(signed byte~) div8s::$15
(signed byte~) div8s::$16
(signed byte~) div8s::$2
(byte~) div8s::$3
(boolean~) div8s::$4
(byte~) div8s::$5
(signed byte~) div8s::$6
(byte~) div8s::$7
(byte/word/dword~) div8s::$8
(byte~) div8s::$9
(label) div8s::@1
(label) div8s::@11
(label) div8s::@15
(label) div8s::@2
(label) div8s::@3
(label) div8s::@4
(label) div8s::@5
(label) div8s::@7
(label) div8s::@9
(label) div8s::@return
(signed byte) div8s::dividend
(signed byte) div8s::dividend#0
(signed byte) div8s::dividend#1
(signed byte) div8s::dividend#2
(signed byte) div8s::dividend#3
(byte) div8s::dividendu
(byte) div8s::dividendu#0
(byte) div8s::dividendu#1
(byte) div8s::dividendu#2
(byte) div8s::dividendu#3
(byte) div8s::dividendu#4
(byte) div8s::dividendu#5
(byte) div8s::dividendu#6
(signed byte) div8s::divisor
(signed byte) div8s::divisor#0
(signed byte) div8s::divisor#1
(signed byte) div8s::divisor#2
(signed byte) div8s::divisor#3
(signed byte) div8s::divisor#4
(signed byte) div8s::divisor#5
(signed byte) div8s::divisor#6
(byte) div8s::divisoru
(byte) div8s::divisoru#0
(byte) div8s::divisoru#1
(byte) div8s::divisoru#2
(byte) div8s::divisoru#3
(byte) div8s::neg
(byte) div8s::neg#0
(byte) div8s::neg#1
(byte) div8s::neg#2
(byte) div8s::neg#3
(byte) div8s::neg#4
(byte) div8s::neg#5
(byte) div8s::neg#6
(byte) div8s::neg#7
(byte) div8s::neg#8
(byte) div8s::resultu
(byte) div8s::resultu#0
(byte) div8s::resultu#1
(byte) div8s::resultu#2
(signed byte) div8s::return
(signed byte) div8s::return#0
(signed byte) div8s::return#1
(signed byte) div8s::return#2
(signed byte) div8s::return#3
(signed byte) div8s::return#4
(signed byte) div8s::return#5
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(byte~) div8u::$0
(label) div8u::@2
(label) div8u::@return
(byte) div8u::dividend
(byte) div8u::dividend#0
(byte) div8u::dividend#1
(byte) div8u::dividend#2
(byte) div8u::divisor
(byte) div8u::divisor#0
(byte) div8u::divisor#1
(byte) div8u::divisor#2
(byte) div8u::return
(byte) div8u::return#0
(byte) div8u::return#1
(byte) div8u::return#2
(byte) div8u::return#3
(byte) div8u::return#4
(byte) div8u::return#5
(byte) div8u::return#6
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(word~) divr16u::$0
(byte~) divr16u::$1
(word~) divr16u::$10
(boolean~) divr16u::$11
(byte~) divr16u::$2
(boolean~) divr16u::$3
(boolean~) divr16u::$4
(word/dword~) divr16u::$5
(word~) divr16u::$6
(word~) divr16u::$7
(boolean~) divr16u::$8
(boolean~) divr16u::$9
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0
(word) divr16u::dividend#1
(word) divr16u::dividend#2
(word) divr16u::dividend#3
(word) divr16u::dividend#4
(word) divr16u::dividend#5
(word) divr16u::dividend#6
(word) divr16u::dividend#7
(word) divr16u::divisor
(word) divr16u::divisor#0
(word) divr16u::divisor#1
(word) divr16u::divisor#2
(word) divr16u::divisor#3
(word) divr16u::divisor#4
(word) divr16u::divisor#5
(word) divr16u::divisor#6
(byte) divr16u::i
(byte) divr16u::i#0
(byte) divr16u::i#1
(byte) divr16u::i#2
(byte) divr16u::i#3
(byte) divr16u::i#4
(byte) divr16u::i#5
(byte) divr16u::i#6
(word) divr16u::quotient
(word) divr16u::quotient#0
(word) divr16u::quotient#1
(word) divr16u::quotient#2
(word) divr16u::quotient#3
(word) divr16u::quotient#4
(word) divr16u::quotient#5
(word) divr16u::quotient#6
(word) divr16u::quotient#7
(word) divr16u::quotient#8
(word) divr16u::rem
(word) divr16u::rem#0
(word) divr16u::rem#1
(word) divr16u::rem#10
(word) divr16u::rem#2
(word) divr16u::rem#3
(word) divr16u::rem#4
(word) divr16u::rem#5
(word) divr16u::rem#6
(word) divr16u::rem#7
(word) divr16u::rem#8
(word) divr16u::rem#9
(word) divr16u::return
(word) divr16u::return#0
(word) divr16u::return#1
(word) divr16u::return#2
(word) divr16u::return#3
(word) divr16u::return#4
(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
(byte~) divr8u::$0
(byte~) divr8u::$1
(boolean~) divr8u::$10
(boolean~) divr8u::$2
(boolean~) divr8u::$3
(byte/word/dword~) divr8u::$4
(byte~) divr8u::$5
(byte~) divr8u::$6
(boolean~) divr8u::$7
(boolean~) divr8u::$8
(byte~) divr8u::$9
(label) divr8u::@1
(label) divr8u::@2
(label) divr8u::@3
(label) divr8u::@4
(label) divr8u::@5
(label) divr8u::@6
(label) divr8u::@return
(byte) divr8u::dividend
(byte) divr8u::dividend#0
(byte) divr8u::dividend#1
(byte) divr8u::dividend#2
(byte) divr8u::dividend#3
(byte) divr8u::dividend#4
(byte) divr8u::dividend#5
(byte) divr8u::dividend#6
(byte) divr8u::dividend#7
(byte) divr8u::divisor
(byte) divr8u::divisor#0
(byte) divr8u::divisor#1
(byte) divr8u::divisor#2
(byte) divr8u::divisor#3
(byte) divr8u::divisor#4
(byte) divr8u::divisor#5
(byte) divr8u::divisor#6
(byte) divr8u::i
(byte) divr8u::i#0
(byte) divr8u::i#1
(byte) divr8u::i#2
(byte) divr8u::i#3
(byte) divr8u::i#4
(byte) divr8u::i#5
(byte) divr8u::i#6
(byte) divr8u::quotient
(byte) divr8u::quotient#0
(byte) divr8u::quotient#1
(byte) divr8u::quotient#2
(byte) divr8u::quotient#3
(byte) divr8u::quotient#4
(byte) divr8u::quotient#5
(byte) divr8u::quotient#6
(byte) divr8u::quotient#7
(byte) divr8u::quotient#8
(byte) divr8u::rem
(byte) divr8u::rem#0
(byte) divr8u::rem#1
(byte) divr8u::rem#10
(byte) divr8u::rem#2
(byte) divr8u::rem#3
(byte) divr8u::rem#4
(byte) divr8u::rem#5
(byte) divr8u::rem#6
(byte) divr8u::rem#7
(byte) divr8u::rem#8
(byte) divr8u::rem#9
(byte) divr8u::return
(byte) divr8u::return#0
(byte) divr8u::return#1
(byte) divr8u::return#2
(byte) divr8u::return#3
(byte) divr8u::return#4
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(byte~) print_byte::$2
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(byte) print_byte::b#4
(byte) print_byte::b#5
(byte) print_byte::b#6
(byte) print_byte::b#7
(byte) print_byte::b#8
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#100
(byte*) print_char_cursor#101
(byte*) print_char_cursor#102
(byte*) print_char_cursor#103
(byte*) print_char_cursor#104
(byte*) print_char_cursor#105
(byte*) print_char_cursor#106
(byte*) print_char_cursor#107
(byte*) print_char_cursor#108
(byte*) print_char_cursor#109
(byte*) print_char_cursor#11
(byte*) print_char_cursor#110
(byte*) print_char_cursor#111
(byte*) print_char_cursor#112
(byte*) print_char_cursor#113
(byte*) print_char_cursor#114
(byte*) print_char_cursor#115
(byte*) print_char_cursor#116
(byte*) print_char_cursor#117
(byte*) print_char_cursor#118
(byte*) print_char_cursor#119
(byte*) print_char_cursor#12
(byte*) print_char_cursor#120
(byte*) print_char_cursor#121
(byte*) print_char_cursor#122
(byte*) print_char_cursor#123
(byte*) print_char_cursor#124
(byte*) print_char_cursor#125
(byte*) print_char_cursor#126
(byte*) print_char_cursor#127
(byte*) print_char_cursor#128
(byte*) print_char_cursor#129
(byte*) print_char_cursor#13
(byte*) print_char_cursor#130
(byte*) print_char_cursor#131
(byte*) print_char_cursor#132
(byte*) print_char_cursor#133
(byte*) print_char_cursor#134
(byte*) print_char_cursor#135
(byte*) print_char_cursor#136
(byte*) print_char_cursor#137
(byte*) print_char_cursor#138
(byte*) print_char_cursor#139
(byte*) print_char_cursor#14
(byte*) print_char_cursor#140
(byte*) print_char_cursor#141
(byte*) print_char_cursor#142
(byte*) print_char_cursor#143
(byte*) print_char_cursor#144
(byte*) print_char_cursor#145
(byte*) print_char_cursor#146
(byte*) print_char_cursor#147
(byte*) print_char_cursor#148
(byte*) print_char_cursor#149
(byte*) print_char_cursor#15
(byte*) print_char_cursor#150
(byte*) print_char_cursor#151
(byte*) print_char_cursor#152
(byte*) print_char_cursor#153
(byte*) print_char_cursor#154
(byte*) print_char_cursor#155
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#61
(byte*) print_char_cursor#62
(byte*) print_char_cursor#63
(byte*) print_char_cursor#64
(byte*) print_char_cursor#65
(byte*) print_char_cursor#66
(byte*) print_char_cursor#67
(byte*) print_char_cursor#68
(byte*) print_char_cursor#69
(byte*) print_char_cursor#7
(byte*) print_char_cursor#70
(byte*) print_char_cursor#71
(byte*) print_char_cursor#72
(byte*) print_char_cursor#73
(byte*) print_char_cursor#74
(byte*) print_char_cursor#75
(byte*) print_char_cursor#76
(byte*) print_char_cursor#77
(byte*) print_char_cursor#78
(byte*) print_char_cursor#79
(byte*) print_char_cursor#8
(byte*) print_char_cursor#80
(byte*) print_char_cursor#81
(byte*) print_char_cursor#82
(byte*) print_char_cursor#83
(byte*) print_char_cursor#84
(byte*) print_char_cursor#85
(byte*) print_char_cursor#86
(byte*) print_char_cursor#87
(byte*) print_char_cursor#88
(byte*) print_char_cursor#89
(byte*) print_char_cursor#9
(byte*) print_char_cursor#90
(byte*) print_char_cursor#91
(byte*) print_char_cursor#92
(byte*) print_char_cursor#93
(byte*) print_char_cursor#94
(byte*) print_char_cursor#95
(byte*) print_char_cursor#96
(byte*) print_char_cursor#97
(byte*) print_char_cursor#98
(byte*) print_char_cursor#99
(void()) print_cls()
(byte*~) print_cls::$0
(boolean~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(byte[]) print_hextab
(byte[]) print_hextab#0
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#36
(byte*) print_line_cursor#37
(byte*) print_line_cursor#38
(byte*) print_line_cursor#39
(byte*) print_line_cursor#4
(byte*) print_line_cursor#40
(byte*) print_line_cursor#41
(byte*) print_line_cursor#42
(byte*) print_line_cursor#43
(byte*) print_line_cursor#44
(byte*) print_line_cursor#45
(byte*) print_line_cursor#46
(byte*) print_line_cursor#47
(byte*) print_line_cursor#48
(byte*) print_line_cursor#49
(byte*) print_line_cursor#5
(byte*) print_line_cursor#50
(byte*) print_line_cursor#51
(byte*) print_line_cursor#52
(byte*) print_line_cursor#53
(byte*) print_line_cursor#54
(byte*) print_line_cursor#55
(byte*) print_line_cursor#56
(byte*) print_line_cursor#57
(byte*) print_line_cursor#58
(byte*) print_line_cursor#59
(byte*) print_line_cursor#6
(byte*) print_line_cursor#60
(byte*) print_line_cursor#61
(byte*) print_line_cursor#62
(byte*) print_line_cursor#63
(byte*) print_line_cursor#64
(byte*) print_line_cursor#65
(byte*) print_line_cursor#66
(byte*) print_line_cursor#67
(byte*) print_line_cursor#68
(byte*) print_line_cursor#69
(byte*) print_line_cursor#7
(byte*) print_line_cursor#70
(byte*) print_line_cursor#71
(byte*) print_line_cursor#72
(byte*) print_line_cursor#73
(byte*) print_line_cursor#74
(byte*) print_line_cursor#75
(byte*) print_line_cursor#76
(byte*) print_line_cursor#77
(byte*) print_line_cursor#78
(byte*) print_line_cursor#79
(byte*) print_line_cursor#8
(byte*) print_line_cursor#80
(byte*) print_line_cursor#81
(byte*) print_line_cursor#82
(byte*) print_line_cursor#83
(byte*) print_line_cursor#84
(byte*) print_line_cursor#85
(byte*) print_line_cursor#86
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(boolean~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(boolean~) print_sbyte::$0
(boolean~) print_sbyte::$1
(signed byte~) print_sbyte::$3
(byte~) print_sbyte::$4
(label) print_sbyte::@1
(label) print_sbyte::@2
(label) print_sbyte::@3
(label) print_sbyte::@4
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0
(signed byte) print_sbyte::b#1
(signed byte) print_sbyte::b#2
(signed byte) print_sbyte::b#3
(signed byte) print_sbyte::b#4
(signed byte) print_sbyte::b#5
(signed byte) print_sbyte::b#6
(signed byte) print_sbyte::b#7
(signed byte) print_sbyte::b#8
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#10
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(byte*) print_screen#7
(byte*) print_screen#8
(byte*) print_screen#9
(void()) print_str((byte*) print_str::str)
(boolean~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#10
(byte*) print_str::str#11
(byte*) print_str::str#12
(byte*) print_str::str#13
(byte*) print_str::str#14
(byte*) print_str::str#15
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(byte*) print_str::str#6
(byte*) print_str::str#7
(byte*) print_str::str#8
(byte*) print_str::str#9
(void()) print_sword((signed word) print_sword::w)
(boolean~) print_sword::$0
(boolean~) print_sword::$1
(signed word~) print_sword::$3
(word~) print_sword::$4
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@4
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0
(signed word) print_sword::w#1
(signed word) print_sword::w#2
(signed word) print_sword::w#3
(signed word) print_sword::w#4
(signed word) print_sword::w#5
(signed word) print_sword::w#6
(signed word) print_sword::w#7
(signed word) print_sword::w#8
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(byte~) print_word::$2
(label) print_word::@1
(label) print_word::@2
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0
(word) print_word::w#1
(word) print_word::w#2
(word) print_word::w#3
(word) print_word::w#4
(word) print_word::w#5
(word) print_word::w#6
(signed word) rem16s
(signed word) rem16s#0
(signed word) rem16s#1
(signed word) rem16s#10
(signed word) rem16s#11
(signed word) rem16s#12
(signed word) rem16s#13
(signed word) rem16s#14
(signed word) rem16s#15
(signed word) rem16s#16
(signed word) rem16s#17
(signed word) rem16s#18
(signed word) rem16s#19
(signed word) rem16s#2
(signed word) rem16s#20
(signed word) rem16s#21
(signed word) rem16s#22
(signed word) rem16s#23
(signed word) rem16s#24
(signed word) rem16s#25
(signed word) rem16s#26
(signed word) rem16s#27
(signed word) rem16s#28
(signed word) rem16s#29
(signed word) rem16s#3
(signed word) rem16s#30
(signed word) rem16s#4
(signed word) rem16s#5
(signed word) rem16s#6
(signed word) rem16s#7
(signed word) rem16s#8
(signed word) rem16s#9
(word) rem16u
(word) rem16u#0
(word) rem16u#1
(word) rem16u#10
(word) rem16u#11
(word) rem16u#12
(word) rem16u#13
(word) rem16u#14
(word) rem16u#15
(word) rem16u#16
(word) rem16u#17
(word) rem16u#18
(word) rem16u#19
(word) rem16u#2
(word) rem16u#20
(word) rem16u#21
(word) rem16u#22
(word) rem16u#23
(word) rem16u#24
(word) rem16u#25
(word) rem16u#26
(word) rem16u#27
(word) rem16u#28
(word) rem16u#29
(word) rem16u#3
(word) rem16u#30
(word) rem16u#31
(word) rem16u#32
(word) rem16u#33
(word) rem16u#34
(word) rem16u#35
(word) rem16u#36
(word) rem16u#37
(word) rem16u#38
(word) rem16u#39
(word) rem16u#4
(word) rem16u#40
(word) rem16u#41
(word) rem16u#42
(word) rem16u#43
(word) rem16u#44
(word) rem16u#45
(word) rem16u#46
(word) rem16u#47
(word) rem16u#48
(word) rem16u#49
(word) rem16u#5
(word) rem16u#50
(word) rem16u#51
(word) rem16u#52
(word) rem16u#53
(word) rem16u#54
(word) rem16u#55
(word) rem16u#56
(word) rem16u#57
(word) rem16u#58
(word) rem16u#59
(word) rem16u#6
(word) rem16u#60
(word) rem16u#61
(word) rem16u#62
(word) rem16u#63
(word) rem16u#64
(word) rem16u#7
(word) rem16u#8
(word) rem16u#9
(signed byte) rem8s
(signed byte) rem8s#0
(signed byte) rem8s#1
(signed byte) rem8s#10
(signed byte) rem8s#11
(signed byte) rem8s#12
(signed byte) rem8s#13
(signed byte) rem8s#14
(signed byte) rem8s#15
(signed byte) rem8s#16
(signed byte) rem8s#17
(signed byte) rem8s#18
(signed byte) rem8s#19
(signed byte) rem8s#2
(signed byte) rem8s#20
(signed byte) rem8s#21
(signed byte) rem8s#22
(signed byte) rem8s#23
(signed byte) rem8s#24
(signed byte) rem8s#25
(signed byte) rem8s#26
(signed byte) rem8s#27
(signed byte) rem8s#28
(signed byte) rem8s#29
(signed byte) rem8s#3
(signed byte) rem8s#30
(signed byte) rem8s#31
(signed byte) rem8s#4
(signed byte) rem8s#5
(signed byte) rem8s#6
(signed byte) rem8s#7
(signed byte) rem8s#8
(signed byte) rem8s#9
(byte) rem8u
(byte) rem8u#0
(byte) rem8u#1
(byte) rem8u#10
(byte) rem8u#11
(byte) rem8u#12
(byte) rem8u#13
(byte) rem8u#14
(byte) rem8u#15
(byte) rem8u#16
(byte) rem8u#17
(byte) rem8u#18
(byte) rem8u#19
(byte) rem8u#2
(byte) rem8u#20
(byte) rem8u#21
(byte) rem8u#22
(byte) rem8u#23
(byte) rem8u#24
(byte) rem8u#25
(byte) rem8u#26
(byte) rem8u#27
(byte) rem8u#28
(byte) rem8u#29
(byte) rem8u#3
(byte) rem8u#30
(byte) rem8u#31
(byte) rem8u#32
(byte) rem8u#33
(byte) rem8u#34
(byte) rem8u#35
(byte) rem8u#36
(byte) rem8u#37
(byte) rem8u#38
(byte) rem8u#39
(byte) rem8u#4
(byte) rem8u#40
(byte) rem8u#41
(byte) rem8u#42
(byte) rem8u#43
(byte) rem8u#44
(byte) rem8u#45
(byte) rem8u#46
(byte) rem8u#47
(byte) rem8u#48
(byte) rem8u#49
(byte) rem8u#5
(byte) rem8u#50
(byte) rem8u#51
(byte) rem8u#52
(byte) rem8u#53
(byte) rem8u#54
(byte) rem8u#55
(byte) rem8u#56
(byte) rem8u#57
(byte) rem8u#58
(byte) rem8u#59
(byte) rem8u#6
(byte) rem8u#60
(byte) rem8u#61
(byte) rem8u#62
(byte) rem8u#63
(byte) rem8u#64
(byte) rem8u#65
(byte) rem8u#7
(byte) rem8u#8
(byte) rem8u#9
(void()) test_16s()
(signed word/signed dword~) test_16s::$0
(signed word/signed dword~) test_16s::$1
(byte/signed word/word/dword/signed dword~) test_16s::$15
(boolean~) test_16s::$16
(signed word/signed dword~) test_16s::$2
(signed byte/signed word/signed dword~) test_16s::$3
(signed byte/signed word/signed dword~) test_16s::$4
(signed byte/signed word/signed dword~) test_16s::$5
(signed word~) test_16s::$6
(label) test_16s::@1
(label) test_16s::@10
(label) test_16s::@11
(label) test_16s::@3
(label) test_16s::@4
(label) test_16s::@5
(label) test_16s::@6
(label) test_16s::@7
(label) test_16s::@8
(label) test_16s::@9
(label) test_16s::@return
(signed word) test_16s::dividend
(signed word) test_16s::dividend#0
(signed word) test_16s::dividend#1
(signed word[]) test_16s::dividends
(signed word[]) test_16s::dividends#0
(signed word) test_16s::divisor
(signed word) test_16s::divisor#0
(signed word) test_16s::divisor#1
(signed word) test_16s::divisor#2
(signed word) test_16s::divisor#3
(signed word[]) test_16s::divisors
(signed word[]) test_16s::divisors#0
(byte) test_16s::i
(byte) test_16s::i#0
(byte) test_16s::i#1
(byte) test_16s::i#10
(byte) test_16s::i#11
(byte) test_16s::i#2
(byte) test_16s::i#3
(byte) test_16s::i#4
(byte) test_16s::i#5
(byte) test_16s::i#6
(byte) test_16s::i#7
(byte) test_16s::i#8
(byte) test_16s::i#9
(signed word) test_16s::res
(signed word) test_16s::res#0
(signed word) test_16s::res#1
(signed word) test_16s::res#2
(signed word) test_16s::res#3
(signed word) test_16s::res#4
(const string) test_16s::str = (string) " / @"
(const string) test_16s::str1 = (string) " = @"
(const string) test_16s::str2 = (string) " @"
(void()) test_16u()
(word~) test_16u::$0
(boolean~) test_16u::$10
(byte/signed word/word/dword/signed dword~) test_16u::$9
(label) test_16u::@1
(label) test_16u::@10
(label) test_16u::@11
(label) test_16u::@3
(label) test_16u::@4
(label) test_16u::@5
(label) test_16u::@6
(label) test_16u::@7
(label) test_16u::@8
(label) test_16u::@9
(label) test_16u::@return
(word) test_16u::dividend
(word) test_16u::dividend#0
(word) test_16u::dividend#1
(word[]) test_16u::dividends
(word[]) test_16u::dividends#0
(word) test_16u::divisor
(word) test_16u::divisor#0
(word) test_16u::divisor#1
(word) test_16u::divisor#2
(word) test_16u::divisor#3
(word[]) test_16u::divisors
(word[]) test_16u::divisors#0
(byte) test_16u::i
(byte) test_16u::i#0
(byte) test_16u::i#1
(byte) test_16u::i#10
(byte) test_16u::i#11
(byte) test_16u::i#2
(byte) test_16u::i#3
(byte) test_16u::i#4
(byte) test_16u::i#5
(byte) test_16u::i#6
(byte) test_16u::i#7
(byte) test_16u::i#8
(byte) test_16u::i#9
(word) test_16u::res
(word) test_16u::res#0
(word) test_16u::res#1
(word) test_16u::res#2
(word) test_16u::res#3
(word) test_16u::res#4
(const string) test_16u::str = (string) " / @"
(const string) test_16u::str1 = (string) " = @"
(const string) test_16u::str2 = (string) " @"
(void()) test_8s()
(signed byte/signed word/signed dword~) test_8s::$0
(signed byte/signed word/signed dword~) test_8s::$1
(boolean~) test_8s::$13
(signed byte/signed word/signed dword~) test_8s::$2
(signed byte/signed word/signed dword~) test_8s::$3
(signed byte~) test_8s::$4
(label) test_8s::@1
(label) test_8s::@10
(label) test_8s::@11
(label) test_8s::@3
(label) test_8s::@4
(label) test_8s::@5
(label) test_8s::@6
(label) test_8s::@7
(label) test_8s::@8
(label) test_8s::@9
(label) test_8s::@return
(signed byte) test_8s::dividend
(signed byte) test_8s::dividend#0
(signed byte) test_8s::dividend#1
(signed byte[]) test_8s::dividends
(signed byte[]) test_8s::dividends#0
(signed byte) test_8s::divisor
(signed byte) test_8s::divisor#0
(signed byte) test_8s::divisor#1
(signed byte) test_8s::divisor#2
(signed byte) test_8s::divisor#3
(signed byte[]) test_8s::divisors
(signed byte[]) test_8s::divisors#0
(byte) test_8s::i
(byte) test_8s::i#0
(byte) test_8s::i#1
(byte) test_8s::i#10
(byte) test_8s::i#11
(byte) test_8s::i#2
(byte) test_8s::i#3
(byte) test_8s::i#4
(byte) test_8s::i#5
(byte) test_8s::i#6
(byte) test_8s::i#7
(byte) test_8s::i#8
(byte) test_8s::i#9
(signed byte) test_8s::res
(signed byte) test_8s::res#0
(signed byte) test_8s::res#1
(signed byte) test_8s::res#2
(signed byte) test_8s::res#3
(signed byte) test_8s::res#4
(const string) test_8s::str = (string) " / @"
(const string) test_8s::str1 = (string) " = @"
(const string) test_8s::str2 = (string) " @"
(void()) test_8u()
(byte~) test_8u::$0
(boolean~) test_8u::$9
(label) test_8u::@1
(label) test_8u::@10
(label) test_8u::@11
(label) test_8u::@3
(label) test_8u::@4
(label) test_8u::@5
(label) test_8u::@6
(label) test_8u::@7
(label) test_8u::@8
(label) test_8u::@9
(label) test_8u::@return
(byte) test_8u::dividend
(byte) test_8u::dividend#0
(byte) test_8u::dividend#1
(byte[]) test_8u::dividends
(byte[]) test_8u::dividends#0
(byte) test_8u::divisor
(byte) test_8u::divisor#0
(byte) test_8u::divisor#1
(byte) test_8u::divisor#2
(byte) test_8u::divisor#3
(byte[]) test_8u::divisors
(byte[]) test_8u::divisors#0
(byte) test_8u::i
(byte) test_8u::i#0
(byte) test_8u::i#1
(byte) test_8u::i#10
(byte) test_8u::i#11
(byte) test_8u::i#2
(byte) test_8u::i#3
(byte) test_8u::i#4
(byte) test_8u::i#5
(byte) test_8u::i#6
(byte) test_8u::i#7
(byte) test_8u::i#8
(byte) test_8u::i#9
(byte) test_8u::res
(byte) test_8u::res#0
(byte) test_8u::res#1
(byte) test_8u::res#2
(byte) test_8u::res#3
(byte) test_8u::res#4
(const string) test_8u::str = (string) " / @"
(const string) test_8u::str1 = (string) " = @"
(const string) test_8u::str2 = (string) " @"

OPTIMIZING CONTROL FLOW GRAPH
Inversing boolean not (boolean~) print_sword::$1 ← (signed word) print_sword::w#5 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) print_sword::$0 ← (signed word) print_sword::w#5 < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) print_sbyte::$1 ← (signed byte) print_sbyte::b#5 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b#5 < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) divr8u::$3 ← (byte~) divr8u::$1 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) divr8u::$2 ← (byte~) divr8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) divr8u::$8 ← (byte) divr8u::rem#5 < (byte) divr8u::divisor#1 from (boolean~) divr8u::$7 ← (byte) divr8u::rem#5 >= (byte) divr8u::divisor#1
Inversing boolean not (boolean~) divr16u::$4 ← (byte~) divr16u::$2 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) divr16u::$3 ← (byte~) divr16u::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) divr16u::$9 ← (word) divr16u::rem#5 < (word) divr16u::divisor#1 from (boolean~) divr16u::$8 ← (word) divr16u::rem#5 >= (word) divr16u::divisor#1
Succesful SSA optimization Pass2UnaryNotSimplification
Not aliassing across scopes: print_str::str#15 print_str::str#10
Not aliassing across scopes: print_char_cursor#140 print_char_cursor#54
Not aliassing across scopes: print_line_cursor#39 print_line_cursor#44
Not aliassing across scopes: print_char_cursor#127 print_char_cursor#60
Not aliassing across scopes: print_sword::w#5 print_sword::w#1
Not aliassing across scopes: print_char_cursor#141 print_char_cursor#138
Not aliassing across scopes: print_char_cursor#68 print_char_cursor#13
Not aliassing across scopes: print_char_cursor#69 print_char_cursor#18
Not aliassing across scopes: print_sbyte::b#5 print_sbyte::b#1
Not aliassing across scopes: print_char_cursor#142 print_char_cursor#137
Not aliassing across scopes: print_char_cursor#71 print_char_cursor#16
Not aliassing across scopes: print_char_cursor#72 print_char_cursor#18
Not aliassing across scopes: print_word::w#5 print_word::w#0
Not aliassing across scopes: print_char_cursor#132 print_char_cursor#128
Not aliassing across scopes: print_char_cursor#74 print_char_cursor#16
Not aliassing across scopes: print_char_cursor#75 print_char_cursor#16
Not aliassing across scopes: print_byte::b#7 print_byte::b#0
Not aliassing across scopes: print_char_cursor#133 print_char_cursor#130
Not aliassing across scopes: print_char_cursor#77 print_char_cursor#18
Not aliassing across scopes: print_char_cursor#78 print_char_cursor#18
Not aliassing across scopes: print_char::ch#4 print_char::ch#2
Not aliassing across scopes: print_char_cursor#80 print_char_cursor#133
Not aliassing across scopes: print_screen#1 print_screen#4
Not aliassing across scopes: print_cls::sc#0 print_screen#1
Not aliassing across scopes: div8u::dividend#2 div8u::dividend#0
Not aliassing across scopes: div8u::divisor#2 div8u::divisor#0
Not aliassing across scopes: rem8u#31 rem8u#32
Not aliassing across scopes: divr8u::dividend#0 div8u::dividend#2
Not aliassing across scopes: divr8u::divisor#0 div8u::divisor#2
Not aliassing across scopes: divr8u::return#0 divr8u::return#2
Not aliassing across scopes: rem8u#15 rem8u#4
Not aliassing across scopes: div8u::$0 divr8u::return#3
Not aliassing across scopes: divr8u::rem#9 divr8u::rem#0
Not aliassing across scopes: divr8u::dividend#4 divr8u::dividend#0
Not aliassing across scopes: divr8u::divisor#5 divr8u::divisor#0
Not aliassing across scopes: rem8u#3 divr8u::rem#8
Not aliassing across scopes: divr16u::rem#9 divr16u::rem#3
Not aliassing across scopes: divr16u::dividend#4 divr16u::dividend#1
Not aliassing across scopes: divr16u::divisor#5 divr16u::divisor#0
Not aliassing across scopes: rem16u#1 divr16u::rem#8
Not aliassing across scopes: div16u::dividend#2 div16u::dividend#0
Not aliassing across scopes: div16u::divisor#2 div16u::divisor#0
Not aliassing across scopes: rem16u#31 rem16u#32
Not aliassing across scopes: divr16u::dividend#1 div16u::dividend#2
Not aliassing across scopes: divr16u::divisor#0 div16u::divisor#2
Not aliassing across scopes: divr16u::return#2 divr16u::return#1
Not aliassing across scopes: rem16u#16 rem16u#2
Not aliassing across scopes: div16u::$0 divr16u::return#4
Not aliassing across scopes: div8s::dividend#1 div8s::dividend#0
Not aliassing across scopes: div8s::divisor#6 div8s::divisor#0
Not aliassing across scopes: rem8u#60 rem8u#39
Not aliassing across scopes: div8u::dividend#0 div8s::dividendu#3
Not aliassing across scopes: div8u::divisor#0 div8s::divisoru#3
Not aliassing across scopes: div8u::return#2 div8u::return#1
Not aliassing across scopes: rem8u#18 rem8u#2
Not aliassing across scopes: div8s::$9 div8u::return#5
Not aliassing across scopes: div16s::dividend#1 div16s::dividend#0
Not aliassing across scopes: div16s::divisor#6 div16s::divisor#0
Not aliassing across scopes: rem16u#59 rem16u#38
Not aliassing across scopes: div16u::dividend#0 div16s::dividendu#3
Not aliassing across scopes: div16u::divisor#0 div16s::divisoru#3
Not aliassing across scopes: div16u::return#2 div16u::return#1
Not aliassing across scopes: rem16u#18 rem16u#4
Not aliassing across scopes: div16s::$9 div16u::return#5
Not aliassing across scopes: print_screen#4 print_screen#5
Not aliassing across scopes: print_line_cursor#40 print_line_cursor#45
Not aliassing across scopes: print_char_cursor#134 print_char_cursor#139
Not aliassing across scopes: rem8u#44 rem8u#41
Not aliassing across scopes: rem16u#52 rem16u#40
Not aliassing across scopes: rem8s#29 rem8s#21
Not aliassing across scopes: rem16s#29 rem16s#20
Not aliassing across scopes: print_line_cursor#24 print_line_cursor#4
Not aliassing across scopes: print_char_cursor#83 print_char_cursor#20
Not aliassing across scopes: rem8u#22 rem8u#11
Not aliassing across scopes: print_char_cursor#84 print_char_cursor#35
Not aliassing across scopes: print_line_cursor#25 print_line_cursor#12
Not aliassing across scopes: rem16u#22 rem16u#11
Not aliassing across scopes: print_char_cursor#85 print_char_cursor#44
Not aliassing across scopes: print_line_cursor#26 print_line_cursor#14
Not aliassing across scopes: rem8u#23 rem8u#13
Not aliassing across scopes: rem8s#10 rem8s#7
Not aliassing across scopes: print_char_cursor#86 print_char_cursor#53
Not aliassing across scopes: print_line_cursor#27 print_line_cursor#16
Not aliassing across scopes: rem16u#23 rem16u#13
Not aliassing across scopes: rem16s#10 rem16s#7
Not aliassing across scopes: print_char_cursor#87 print_char_cursor#62
Not aliassing across scopes: print_line_cursor#28 print_line_cursor#18
Not aliassing across scopes: rem8u#45 rem8u#33
Not aliassing across scopes: print_char_cursor#149 print_char_cursor#21
Not aliassing across scopes: print_line_cursor#83 print_line_cursor#5
Not aliassing across scopes: div8u::dividend#1 test_8u::dividend#0
Not aliassing across scopes: div8u::divisor#1 test_8u::divisor#0
Not aliassing across scopes: div8u::return#3 div8u::return#1
Not aliassing across scopes: rem8u#25 rem8u#2
Not aliassing across scopes: test_8u::$0 div8u::return#6
Not aliassing across scopes: print_byte::b#3 test_8u::dividend#1
Not aliassing across scopes: print_char_cursor#89 print_char_cursor#16
Not aliassing across scopes: print_char_cursor#90 print_char_cursor#2
Not aliassing across scopes: print_byte::b#4 test_8u::divisor#1
Not aliassing across scopes: print_char_cursor#91 print_char_cursor#16
Not aliassing across scopes: print_char_cursor#92 print_char_cursor#2
Not aliassing across scopes: print_byte::b#5 test_8u::res#1
Not aliassing across scopes: print_char_cursor#93 print_char_cursor#16
Not aliassing across scopes: print_char_cursor#94 print_char_cursor#2
Not aliassing across scopes: print_byte::b#6 rem8u#26
Not aliassing across scopes: print_char_cursor#95 print_char_cursor#16
Not aliassing across scopes: print_line_cursor#30 print_line_cursor#2
Not aliassing across scopes: print_char_cursor#96 print_char_cursor#4
Not aliassing across scopes: rem16u#44 rem16u#33
Not aliassing across scopes: print_char_cursor#150 print_char_cursor#22
Not aliassing across scopes: print_line_cursor#84 print_line_cursor#6
Not aliassing across scopes: div16u::dividend#1 test_16u::dividend#0
Not aliassing across scopes: div16u::divisor#1 test_16u::divisor#0
Not aliassing across scopes: div16u::return#3 div16u::return#1
Not aliassing across scopes: rem16u#25 rem16u#4
Not aliassing across scopes: test_16u::$0 div16u::return#6
Not aliassing across scopes: print_word::w#1 test_16u::dividend#1
Not aliassing across scopes: print_char_cursor#98 print_char_cursor#13
Not aliassing across scopes: print_char_cursor#99 print_char_cursor#2
Not aliassing across scopes: print_word::w#2 test_16u::divisor#1
Not aliassing across scopes: print_char_cursor#100 print_char_cursor#13
Not aliassing across scopes: print_char_cursor#101 print_char_cursor#2
Not aliassing across scopes: print_word::w#3 test_16u::res#1
Not aliassing across scopes: print_char_cursor#102 print_char_cursor#13
Not aliassing across scopes: print_char_cursor#103 print_char_cursor#2
Not aliassing across scopes: print_word::w#4 rem16u#26
Not aliassing across scopes: print_char_cursor#104 print_char_cursor#13
Not aliassing across scopes: print_line_cursor#32 print_line_cursor#2
Not aliassing across scopes: print_char_cursor#105 print_char_cursor#4
Not aliassing across scopes: rem8u#48 rem8u#34
Not aliassing across scopes: rem8s#23 rem8s#16
Not aliassing across scopes: print_char_cursor#151 print_char_cursor#23
Not aliassing across scopes: print_line_cursor#85 print_line_cursor#7
Not aliassing across scopes: div8s::dividend#0 test_8s::dividend#0
Not aliassing across scopes: div8s::divisor#0 test_8s::divisor#0
Not aliassing across scopes: div8s::return#3 div8s::return#2
Not aliassing across scopes: rem8u#28 rem8u#6
Not aliassing across scopes: rem8s#12 rem8s#3
Not aliassing across scopes: test_8s::$4 div8s::return#5
Not aliassing across scopes: print_sbyte::b#1 test_8s::dividend#1
Not aliassing across scopes: print_char_cursor#107 print_char_cursor#10
Not aliassing across scopes: print_char_cursor#108 print_char_cursor#2
Not aliassing across scopes: print_sbyte::b#2 test_8s::divisor#1
Not aliassing across scopes: print_char_cursor#109 print_char_cursor#10
Not aliassing across scopes: print_char_cursor#110 print_char_cursor#2
Not aliassing across scopes: print_sbyte::b#3 test_8s::res#1
Not aliassing across scopes: print_char_cursor#111 print_char_cursor#10
Not aliassing across scopes: print_char_cursor#112 print_char_cursor#2
Not aliassing across scopes: print_sbyte::b#4 rem8s#13
Not aliassing across scopes: print_char_cursor#113 print_char_cursor#10
Not aliassing across scopes: print_line_cursor#34 print_line_cursor#2
Not aliassing across scopes: print_char_cursor#114 print_char_cursor#4
Not aliassing across scopes: rem16u#47 rem16u#34
Not aliassing across scopes: rem16s#22 rem16s#16
Not aliassing across scopes: print_char_cursor#152 print_char_cursor#24
Not aliassing across scopes: print_line_cursor#86 print_line_cursor#8
Not aliassing across scopes: div16s::dividend#0 test_16s::dividend#0
Not aliassing across scopes: div16s::divisor#0 test_16s::divisor#0
Not aliassing across scopes: div16s::return#3 div16s::return#2
Not aliassing across scopes: rem16u#28 rem16u#6
Not aliassing across scopes: rem16s#12 rem16s#3
Not aliassing across scopes: test_16s::$6 div16s::return#5
Not aliassing across scopes: print_sword::w#1 test_16s::dividend#1
Not aliassing across scopes: print_char_cursor#116 print_char_cursor#7
Not aliassing across scopes: print_char_cursor#117 print_char_cursor#2
Not aliassing across scopes: print_sword::w#2 test_16s::divisor#1
Not aliassing across scopes: print_char_cursor#118 print_char_cursor#7
Not aliassing across scopes: print_char_cursor#119 print_char_cursor#2
Not aliassing across scopes: print_sword::w#3 test_16s::res#1
Not aliassing across scopes: print_char_cursor#120 print_char_cursor#7
Not aliassing across scopes: print_char_cursor#121 print_char_cursor#2
Not aliassing across scopes: print_sword::w#4 rem16s#13
Not aliassing across scopes: print_char_cursor#122 print_char_cursor#7
Not aliassing across scopes: print_line_cursor#36 print_line_cursor#2
Not aliassing across scopes: print_char_cursor#123 print_char_cursor#4
Not aliassing across scopes: print_line_cursor#38 print_line_cursor#10
Not aliassing across scopes: print_char_cursor#125 print_char_cursor#26
Not aliassing across scopes: rem8u#30 rem8u#9
Not aliassing across scopes: rem16u#30 rem16u#9
Not aliassing across scopes: rem8s#15 rem8s#5
Not aliassing across scopes: rem16s#15 rem16s#5
Alias (byte*) print_line_cursor#0 = (byte*) print_screen#0 (byte*) print_char_cursor#0 (byte*) print_line_cursor#66 (byte*) print_char_cursor#155 (byte*) print_screen#10 (byte*) print_line_cursor#61 (byte*) print_char_cursor#154 (byte*) print_screen#9 (byte*) print_line_cursor#56 (byte*) print_char_cursor#153 (byte*) print_screen#8 (byte*) print_line_cursor#51 (byte*) print_char_cursor#148 (byte*) print_screen#7 (byte*) print_line_cursor#50 (byte*) print_char_cursor#147 (byte*) print_screen#6 (byte*) print_line_cursor#45 (byte*) print_char_cursor#139 (byte*) print_screen#5 
Alias (byte*) print_str::str#13 = (byte*) print_str::str#14 
Alias (byte*) print_char_cursor#126 = (byte*) print_char_cursor#64 (byte*) print_char_cursor#65 (byte*) print_char_cursor#2 
Alias (byte*) print_line_cursor#1 = (byte*~) print_ln::$0 (byte*) print_line_cursor#21 (byte*) print_char_cursor#3 (byte*) print_line_cursor#22 (byte*) print_char_cursor#67 (byte*) print_line_cursor#2 (byte*) print_char_cursor#4 
Alias (word) print_word::w#0 = (word~) print_sword::$4 
Alias (byte*) print_char_cursor#5 = (byte*) print_char_cursor#68 (byte*) print_char_cursor#70 (byte*) print_char_cursor#7 
Alias (byte*) print_char_cursor#129 = (byte*) print_char_cursor#141 
Alias (signed word) print_sword::w#5 = (signed word) print_sword::w#8 (signed word) print_sword::w#7 
Alias (byte*) print_char_cursor#6 = (byte*) print_char_cursor#69 
Alias (signed word) print_sword::w#0 = (signed word~) print_sword::$3 
Alias (byte) print_byte::b#0 = (byte~) print_sbyte::$4 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#8 (byte*) print_char_cursor#71 (byte*) print_char_cursor#73 
Alias (byte*) print_char_cursor#131 = (byte*) print_char_cursor#142 
Alias (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#8 (signed byte) print_sbyte::b#7 
Alias (byte*) print_char_cursor#72 = (byte*) print_char_cursor#9 
Alias (signed byte) print_sbyte::b#0 = (signed byte~) print_sbyte::$3 
Alias (byte) print_byte::b#1 = (byte~) print_word::$0 
Alias (word) print_word::w#5 = (word) print_word::w#6 
Alias (byte*) print_char_cursor#11 = (byte*) print_char_cursor#74 
Alias (byte) print_byte::b#2 = (byte~) print_word::$2 
Alias (byte*) print_char_cursor#12 = (byte*) print_char_cursor#75 (byte*) print_char_cursor#76 (byte*) print_char_cursor#13 
Alias (byte) print_byte::b#7 = (byte) print_byte::b#8 
Alias (byte*) print_char_cursor#14 = (byte*) print_char_cursor#77 
Alias (byte*) print_char_cursor#15 = (byte*) print_char_cursor#78 (byte*) print_char_cursor#79 (byte*) print_char_cursor#16 
Alias (byte*) print_char_cursor#17 = (byte*) print_char_cursor#81 (byte*) print_char_cursor#18 
Alias (byte*) print_line_cursor#23 = (byte*) print_screen#3 (byte*) print_screen#2 (byte*) print_line_cursor#3 (byte*) print_char_cursor#19 (byte*) print_char_cursor#82 (byte*) print_line_cursor#4 (byte*) print_char_cursor#20 
Alias (byte) divr8u::return#0 = (byte) divr8u::return#3 
Alias (byte) rem8u#1 = (byte) rem8u#15 (byte) rem8u#16 (byte) rem8u#2 
Alias (byte) div8u::return#0 = (byte~) div8u::$0 (byte) div8u::return#4 (byte) div8u::return#1 
Alias (byte) divr8u::rem#1 = (byte~) divr8u::$0 (byte) divr8u::rem#6 
Alias (byte) divr8u::dividend#1 = (byte~) divr8u::$5 (byte) divr8u::dividend#7 
Alias (byte) divr8u::quotient#1 = (byte~) divr8u::$6 (byte) divr8u::quotient#4 
Alias (byte) divr8u::dividend#2 = (byte) divr8u::dividend#6 
Alias (byte) divr8u::quotient#6 = (byte) divr8u::quotient#7 
Alias (byte) divr8u::divisor#3 = (byte) divr8u::divisor#4 
Alias (byte) divr8u::i#5 = (byte) divr8u::i#6 
Alias (byte) divr8u::rem#2 = (byte/word/dword~) divr8u::$4 
Alias (byte) divr8u::rem#5 = (byte) divr8u::rem#7 
Alias (byte) divr8u::divisor#1 = (byte) divr8u::divisor#2 
Alias (byte) divr8u::i#3 = (byte) divr8u::i#4 
Alias (byte) divr8u::rem#3 = (byte~) divr8u::$9 
Alias (byte) divr8u::rem#10 = (byte) divr8u::rem#8 
Alias (byte) divr8u::return#1 = (byte) divr8u::quotient#5 (byte) divr8u::quotient#8 (byte) divr8u::return#4 (byte) divr8u::return#2 
Alias (byte) rem8u#17 = (byte) rem8u#3 (byte) rem8u#4 
Alias (byte) rem8u#0 = (byte) rem8u#55 (byte) rem8u#52 (byte) rem8u#50 (byte) rem8u#41 
Alias (word) divr16u::rem#0 = (word~) divr16u::$0 (word) divr16u::rem#6 
Alias (word) divr16u::dividend#0 = (word~) divr16u::$6 (word) divr16u::dividend#7 
Alias (word) divr16u::quotient#1 = (word~) divr16u::$7 (word) divr16u::quotient#4 
Alias (word) divr16u::dividend#2 = (word) divr16u::dividend#6 
Alias (word) divr16u::quotient#6 = (word) divr16u::quotient#7 
Alias (word) divr16u::divisor#3 = (word) divr16u::divisor#4 
Alias (byte) divr16u::i#5 = (byte) divr16u::i#6 
Alias (word) divr16u::rem#1 = (word/dword~) divr16u::$5 
Alias (word) divr16u::rem#5 = (word) divr16u::rem#7 
Alias (word) divr16u::divisor#1 = (word) divr16u::divisor#2 
Alias (byte) divr16u::i#3 = (byte) divr16u::i#4 
Alias (word) divr16u::rem#2 = (word~) divr16u::$10 
Alias (word) divr16u::rem#10 = (word) divr16u::rem#8 
Alias (word) divr16u::return#0 = (word) divr16u::quotient#5 (word) divr16u::quotient#8 (word) divr16u::return#3 (word) divr16u::return#1 
Alias (word) rem16u#1 = (word) rem16u#15 (word) rem16u#2 
Alias (word) divr16u::return#2 = (word) divr16u::return#4 
Alias (word) rem16u#16 = (word) rem16u#3 (word) rem16u#17 (word) rem16u#4 
Alias (word) div16u::return#0 = (word~) div16u::$0 (word) div16u::return#4 (word) div16u::return#1 
Alias (word) rem16u#0 = (word) rem16u#50 (word) rem16u#49 (word) rem16u#40 
Alias (signed byte) div8s::dividend#1 = (signed byte) div8s::dividend#2 (signed byte) div8s::dividend#3 
Alias (signed byte) div8s::divisor#4 = (signed byte) div8s::divisor#6 (signed byte) div8s::divisor#5 
Alias (byte) rem8u#56 = (byte) rem8u#60 (byte) rem8u#57 
Alias (byte) div8s::dividendu#1 = (byte~) div8s::$3 
Alias (byte) div8s::neg#0 = (byte) div8s::neg#7 
Alias (byte) div8s::dividendu#2 = (byte~) div8s::$1 
Alias (signed byte) div8s::divisor#1 = (signed byte) div8s::divisor#2 (signed byte) div8s::divisor#3 
Alias (byte) div8s::neg#3 = (byte) div8s::neg#5 (byte) div8s::neg#8 
Alias (byte) div8s::dividendu#4 = (byte) div8s::dividendu#6 (byte) div8s::dividendu#5 
Alias (byte) rem8u#42 = (byte) rem8u#51 (byte) rem8u#43 
Alias (byte) div8s::divisoru#1 = (byte~) div8s::$7 
Alias (byte) div8s::neg#2 = (byte/word/dword~) div8s::$8 
Alias (byte) div8s::divisoru#2 = (byte~) div8s::$5 
Alias (byte) div8u::return#2 = (byte) div8u::return#5 
Alias (byte) div8s::neg#4 = (byte) div8s::neg#6 
Alias (byte) rem8u#18 = (byte) rem8u#5 (byte) rem8u#19 (byte) rem8u#20 
Alias (byte) div8s::resultu#0 = (byte~) div8s::$9 (byte) div8s::resultu#1 (byte) div8s::resultu#2 
Alias (signed byte) rem8s#1 = (signed byte~) div8s::$15 
Alias (signed byte) div8s::return#0 = (signed byte~) div8s::$16 
Alias (signed byte) rem8s#2 = (signed byte~) div8s::$12 
Alias (signed byte) div8s::return#1 = (signed byte~) div8s::$14 
Alias (signed byte) div8s::return#2 = (signed byte) div8s::return#4 
Alias (byte) rem8u#21 = (byte) rem8u#6 
Alias (signed byte) rem8s#3 = (signed byte) rem8s#9 
Alias (signed byte) rem8s#0 = (signed byte) rem8s#26 (signed byte) rem8s#21 
Alias (signed word) div16s::dividend#1 = (signed word) div16s::dividend#2 (signed word) div16s::dividend#3 
Alias (signed word) div16s::divisor#4 = (signed word) div16s::divisor#6 (signed word) div16s::divisor#5 
Alias (word) rem16u#55 = (word) rem16u#59 (word) rem16u#56 
Alias (word) div16s::dividendu#1 = (word~) div16s::$3 
Alias (byte) div16s::neg#0 = (byte) div16s::neg#7 
Alias (word) div16s::dividendu#2 = (word~) div16s::$1 
Alias (signed word) div16s::divisor#1 = (signed word) div16s::divisor#2 (signed word) div16s::divisor#3 
Alias (byte) div16s::neg#3 = (byte) div16s::neg#5 (byte) div16s::neg#8 
Alias (word) div16s::dividendu#4 = (word) div16s::dividendu#6 (word) div16s::dividendu#5 
Alias (word) rem16u#41 = (word) rem16u#51 (word) rem16u#42 
Alias (word) div16s::divisoru#1 = (word~) div16s::$7 
Alias (byte) div16s::neg#2 = (byte/word/dword~) div16s::$8 
Alias (word) div16s::divisoru#2 = (word~) div16s::$5 
Alias (word) div16u::return#2 = (word) div16u::return#5 
Alias (byte) div16s::neg#4 = (byte) div16s::neg#6 
Alias (word) rem16u#18 = (word) rem16u#5 (word) rem16u#19 (word) rem16u#20 
Alias (word) div16s::resultu#0 = (word~) div16s::$9 (word) div16s::resultu#1 (word) div16s::resultu#2 
Alias (signed word) rem16s#1 = (signed word~) div16s::$15 
Alias (signed word) div16s::return#0 = (signed word~) div16s::$16 
Alias (signed word) rem16s#2 = (signed word~) div16s::$12 
Alias (signed word) div16s::return#1 = (signed word~) div16s::$14 
Alias (signed word) div16s::return#2 = (signed word) div16s::return#4 
Alias (word) rem16u#21 = (word) rem16u#6 
Alias (signed word) rem16s#3 = (signed word) rem16s#9 
Alias (byte) rem8u#33 = (byte) rem8u#44 
Alias (word) rem16u#33 = (word) rem16u#43 (word) rem16u#52 
Alias (signed byte) rem8s#16 = (signed byte) rem8s#27 (signed byte) rem8s#29 (signed byte) rem8s#22 
Alias (signed word) rem16s#16 = (signed word) rem16s#27 (signed word) rem16s#29 (signed word) rem16s#25 (signed word) rem16s#21 
Alias (byte*) print_line_cursor#24 = (byte*) print_line_cursor#5 
Alias (byte*) print_char_cursor#21 = (byte*) print_char_cursor#83 
Alias (byte) rem8u#22 = (byte) rem8u#7 (byte) rem8u#34 
Alias (byte*) print_char_cursor#22 = (byte*) print_char_cursor#84 
Alias (byte*) print_line_cursor#25 = (byte*) print_line_cursor#6 
Alias (word) rem16u#22 = (word) rem16u#7 (word) rem16u#34 
Alias (byte*) print_char_cursor#23 = (byte*) print_char_cursor#85 
Alias (byte*) print_line_cursor#26 = (byte*) print_line_cursor#7 
Alias (byte) rem8u#23 = (byte) rem8u#8 (byte) rem8u#35 (byte) rem8u#24 (byte) rem8u#9 
Alias (signed byte) rem8s#10 = (signed byte) rem8s#4 (signed byte) rem8s#17 (signed byte) rem8s#11 (signed byte) rem8s#5 
Alias (byte*) print_char_cursor#24 = (byte*) print_char_cursor#86 
Alias (byte*) print_line_cursor#27 = (byte*) print_line_cursor#8 
Alias (word) rem16u#23 = (word) rem16u#8 (word) rem16u#24 (word) rem16u#9 
Alias (signed word) rem16s#10 = (signed word) rem16s#4 (signed word) rem16s#11 (signed word) rem16s#5 
Alias (byte*) print_char_cursor#25 = (byte*) print_char_cursor#87 (byte*) print_char_cursor#88 (byte*) print_char_cursor#26 
Alias (byte*) print_line_cursor#10 = (byte*) print_line_cursor#9 (byte*) print_line_cursor#28 (byte*) print_line_cursor#29 
Alias (byte) div8u::return#3 = (byte) div8u::return#6 
Alias (byte) test_8u::dividend#0 = (byte) test_8u::dividend#1 
Alias (byte*) print_char_cursor#135 = (byte*) print_char_cursor#143 
Alias (byte) test_8u::divisor#0 = (byte) test_8u::divisor#3 (byte) test_8u::divisor#2 (byte) test_8u::divisor#1 
Alias (byte*) print_line_cursor#41 = (byte*) print_line_cursor#75 (byte*) print_line_cursor#79 (byte*) print_line_cursor#71 (byte*) print_line_cursor#67 (byte*) print_line_cursor#62 (byte*) print_line_cursor#57 (byte*) print_line_cursor#52 (byte*) print_line_cursor#46 
Alias (byte) test_8u::i#10 = (byte) test_8u::i#11 (byte) test_8u::i#2 (byte) test_8u::i#9 (byte) test_8u::i#8 (byte) test_8u::i#7 (byte) test_8u::i#6 (byte) test_8u::i#5 (byte) test_8u::i#4 (byte) test_8u::i#3 
Alias (byte) rem8u#10 = (byte) rem8u#25 (byte) rem8u#61 (byte) rem8u#58 (byte) rem8u#53 (byte) rem8u#46 (byte) rem8u#37 (byte) rem8u#26 (byte) rem8u#47 (byte) rem8u#38 (byte) rem8u#27 (byte) rem8u#11 
Alias (byte) test_8u::res#0 = (byte~) test_8u::$0 (byte) test_8u::res#4 (byte) test_8u::res#3 (byte) test_8u::res#2 (byte) test_8u::res#1 
Alias (byte*) print_char_cursor#27 = (byte*) print_char_cursor#89 
Alias (byte*) print_char_cursor#28 = (byte*) print_char_cursor#90 
Alias (byte*) print_char_cursor#29 = (byte*) print_char_cursor#91 
Alias (byte*) print_char_cursor#30 = (byte*) print_char_cursor#92 
Alias (byte*) print_char_cursor#31 = (byte*) print_char_cursor#93 
Alias (byte*) print_char_cursor#32 = (byte*) print_char_cursor#94 
Alias (byte*) print_char_cursor#33 = (byte*) print_char_cursor#95 
Alias (byte*) print_line_cursor#11 = (byte*) print_line_cursor#30 (byte*) print_line_cursor#31 (byte*) print_line_cursor#12 
Alias (byte*) print_char_cursor#34 = (byte*) print_char_cursor#96 (byte*) print_char_cursor#97 (byte*) print_char_cursor#35 
Alias (word) div16u::return#3 = (word) div16u::return#6 
Alias (word) test_16u::dividend#0 = (word) test_16u::dividend#1 
Alias (byte*) print_char_cursor#136 = (byte*) print_char_cursor#144 
Alias (word) test_16u::divisor#0 = (word) test_16u::divisor#3 (word) test_16u::divisor#2 (word) test_16u::divisor#1 
Alias (byte*) print_line_cursor#42 = (byte*) print_line_cursor#76 (byte*) print_line_cursor#80 (byte*) print_line_cursor#72 (byte*) print_line_cursor#68 (byte*) print_line_cursor#63 (byte*) print_line_cursor#58 (byte*) print_line_cursor#53 (byte*) print_line_cursor#47 
Alias (byte) test_16u::i#10 = (byte) test_16u::i#11 (byte) test_16u::i#2 (byte) test_16u::i#9 (byte) test_16u::i#8 (byte) test_16u::i#7 (byte) test_16u::i#6 (byte) test_16u::i#5 (byte) test_16u::i#4 (byte) test_16u::i#3 
Alias (word) rem16u#10 = (word) rem16u#25 (word) rem16u#60 (word) rem16u#57 (word) rem16u#53 (word) rem16u#45 (word) rem16u#36 (word) rem16u#26 (word) rem16u#46 (word) rem16u#37 (word) rem16u#27 (word) rem16u#11 
Alias (word) test_16u::res#0 = (word~) test_16u::$0 (word) test_16u::res#4 (word) test_16u::res#3 (word) test_16u::res#2 (word) test_16u::res#1 
Alias (byte*) print_char_cursor#36 = (byte*) print_char_cursor#98 
Alias (byte*) print_char_cursor#37 = (byte*) print_char_cursor#99 
Alias (byte*) print_char_cursor#100 = (byte*) print_char_cursor#38 
Alias (byte*) print_char_cursor#101 = (byte*) print_char_cursor#39 
Alias (byte*) print_char_cursor#102 = (byte*) print_char_cursor#40 
Alias (byte*) print_char_cursor#103 = (byte*) print_char_cursor#41 
Alias (byte*) print_char_cursor#104 = (byte*) print_char_cursor#42 
Alias (byte*) print_line_cursor#13 = (byte*) print_line_cursor#32 (byte*) print_line_cursor#33 (byte*) print_line_cursor#14 
Alias (byte*) print_char_cursor#105 = (byte*) print_char_cursor#43 (byte*) print_char_cursor#106 (byte*) print_char_cursor#44 
Alias (byte) test_16u::i#1 = (byte/signed word/word/dword/signed dword~) test_16u::$9 
Alias (signed byte) div8s::return#3 = (signed byte) div8s::return#5 
Alias (signed byte) test_8s::dividend#0 = (signed byte) test_8s::dividend#1 
Alias (byte*) print_char_cursor#137 = (byte*) print_char_cursor#145 
Alias (signed byte) test_8s::divisor#0 = (signed byte) test_8s::divisor#3 (signed byte) test_8s::divisor#2 (signed byte) test_8s::divisor#1 
Alias (byte*) print_line_cursor#43 = (byte*) print_line_cursor#77 (byte*) print_line_cursor#81 (byte*) print_line_cursor#73 (byte*) print_line_cursor#69 (byte*) print_line_cursor#64 (byte*) print_line_cursor#59 (byte*) print_line_cursor#54 (byte*) print_line_cursor#48 
Alias (byte) test_8s::i#10 = (byte) test_8s::i#11 (byte) test_8s::i#2 (byte) test_8s::i#9 (byte) test_8s::i#8 (byte) test_8s::i#7 (byte) test_8s::i#6 (byte) test_8s::i#5 (byte) test_8s::i#4 (byte) test_8s::i#3 
Alias (byte) rem8u#12 = (byte) rem8u#28 (byte) rem8u#65 (byte) rem8u#64 (byte) rem8u#63 (byte) rem8u#62 (byte) rem8u#59 (byte) rem8u#54 (byte) rem8u#49 (byte) rem8u#40 (byte) rem8u#29 (byte) rem8u#13 
Alias (signed byte) rem8s#12 = (signed byte) rem8s#6 (signed byte) rem8s#31 (signed byte) rem8s#30 (signed byte) rem8s#28 (signed byte) rem8s#24 (signed byte) rem8s#19 (signed byte) rem8s#13 (signed byte) rem8s#25 (signed byte) rem8s#20 (signed byte) rem8s#14 (signed byte) rem8s#7 
Alias (signed byte) test_8s::res#0 = (signed byte~) test_8s::$4 (signed byte) test_8s::res#4 (signed byte) test_8s::res#3 (signed byte) test_8s::res#2 (signed byte) test_8s::res#1 
Alias (byte*) print_char_cursor#107 = (byte*) print_char_cursor#45 
Alias (byte*) print_char_cursor#108 = (byte*) print_char_cursor#46 
Alias (byte*) print_char_cursor#109 = (byte*) print_char_cursor#47 
Alias (byte*) print_char_cursor#110 = (byte*) print_char_cursor#48 
Alias (byte*) print_char_cursor#111 = (byte*) print_char_cursor#49 
Alias (byte*) print_char_cursor#112 = (byte*) print_char_cursor#50 
Alias (byte*) print_char_cursor#113 = (byte*) print_char_cursor#51 
Alias (byte*) print_line_cursor#15 = (byte*) print_line_cursor#34 (byte*) print_line_cursor#35 (byte*) print_line_cursor#16 
Alias (byte*) print_char_cursor#114 = (byte*) print_char_cursor#52 (byte*) print_char_cursor#115 (byte*) print_char_cursor#53 
Alias (signed word) div16s::return#3 = (signed word) div16s::return#5 
Alias (signed word) test_16s::dividend#0 = (signed word) test_16s::dividend#1 
Alias (byte*) print_char_cursor#138 = (byte*) print_char_cursor#146 
Alias (signed word) test_16s::divisor#0 = (signed word) test_16s::divisor#3 (signed word) test_16s::divisor#2 (signed word) test_16s::divisor#1 
Alias (byte*) print_line_cursor#44 = (byte*) print_line_cursor#78 (byte*) print_line_cursor#82 (byte*) print_line_cursor#74 (byte*) print_line_cursor#70 (byte*) print_line_cursor#65 (byte*) print_line_cursor#60 (byte*) print_line_cursor#55 (byte*) print_line_cursor#49 
Alias (byte) test_16s::i#10 = (byte) test_16s::i#11 (byte) test_16s::i#2 (byte) test_16s::i#9 (byte) test_16s::i#8 (byte) test_16s::i#7 (byte) test_16s::i#6 (byte) test_16s::i#5 (byte) test_16s::i#4 (byte) test_16s::i#3 
Alias (word) rem16u#12 = (word) rem16u#28 (word) rem16u#64 (word) rem16u#63 (word) rem16u#62 (word) rem16u#61 (word) rem16u#58 (word) rem16u#54 (word) rem16u#48 (word) rem16u#39 (word) rem16u#29 (word) rem16u#13 
Alias (signed word) rem16s#12 = (signed word) rem16s#6 (signed word) rem16s#30 (signed word) rem16s#28 (signed word) rem16s#26 (signed word) rem16s#23 (signed word) rem16s#18 (signed word) rem16s#13 (signed word) rem16s#24 (signed word) rem16s#19 (signed word) rem16s#14 (signed word) rem16s#7 
Alias (signed word) test_16s::res#0 = (signed word~) test_16s::$6 (signed word) test_16s::res#4 (signed word) test_16s::res#3 (signed word) test_16s::res#2 (signed word) test_16s::res#1 
Alias (byte*) print_char_cursor#116 = (byte*) print_char_cursor#54 
Alias (byte*) print_char_cursor#117 = (byte*) print_char_cursor#55 
Alias (byte*) print_char_cursor#118 = (byte*) print_char_cursor#56 
Alias (byte*) print_char_cursor#119 = (byte*) print_char_cursor#57 
Alias (byte*) print_char_cursor#120 = (byte*) print_char_cursor#58 
Alias (byte*) print_char_cursor#121 = (byte*) print_char_cursor#59 
Alias (byte*) print_char_cursor#122 = (byte*) print_char_cursor#60 
Alias (byte*) print_line_cursor#17 = (byte*) print_line_cursor#36 (byte*) print_line_cursor#37 (byte*) print_line_cursor#18 
Alias (byte*) print_char_cursor#123 = (byte*) print_char_cursor#61 (byte*) print_char_cursor#124 (byte*) print_char_cursor#62 
Alias (byte) test_16s::i#1 = (byte/signed word/word/dword/signed dword~) test_16s::$15 
Alias (signed word) rem16s#0 = (signed word) rem16s#20 
Alias (byte*) print_line_cursor#19 = (byte*) print_line_cursor#38 
Alias (byte*) print_char_cursor#125 = (byte*) print_char_cursor#63 
Alias (byte) rem8u#14 = (byte) rem8u#30 
Alias (word) rem16u#14 = (word) rem16u#30 
Alias (signed byte) rem8s#15 = (signed byte) rem8s#8 
Alias (signed word) rem16s#15 = (signed word) rem16s#8 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: print_str::str#15 print_str::str#10
Not aliassing across scopes: print_char_cursor#140 print_char_cursor#116
Not aliassing across scopes: print_line_cursor#39 print_line_cursor#44
Not aliassing across scopes: print_char_cursor#127 print_char_cursor#122
Not aliassing across scopes: print_sword::w#5 print_sword::w#1
Not aliassing across scopes: print_char_cursor#129 print_char_cursor#138
Not aliassing across scopes: print_char_cursor#5 print_char_cursor#12
Not aliassing across scopes: print_char_cursor#6 print_char_cursor#17
Not aliassing across scopes: print_sbyte::b#5 print_sbyte::b#1
Not aliassing across scopes: print_char_cursor#131 print_char_cursor#137
Not aliassing across scopes: print_char_cursor#10 print_char_cursor#15
Not aliassing across scopes: print_char_cursor#72 print_char_cursor#17
Not aliassing across scopes: print_word::w#5 print_word::w#0
Not aliassing across scopes: print_char_cursor#132 print_char_cursor#128
Not aliassing across scopes: print_char_cursor#11 print_char_cursor#15
Not aliassing across scopes: print_char_cursor#12 print_char_cursor#15
Not aliassing across scopes: print_byte::b#7 print_byte::b#0
Not aliassing across scopes: print_char_cursor#133 print_char_cursor#130
Not aliassing across scopes: print_char_cursor#14 print_char_cursor#17
Not aliassing across scopes: print_char_cursor#15 print_char_cursor#17
Not aliassing across scopes: print_char::ch#4 print_char::ch#2
Not aliassing across scopes: print_char_cursor#80 print_char_cursor#133
Not aliassing across scopes: print_screen#1 print_screen#4
Not aliassing across scopes: print_cls::sc#0 print_screen#1
Not aliassing across scopes: div8u::dividend#2 div8u::dividend#0
Not aliassing across scopes: div8u::divisor#2 div8u::divisor#0
Not aliassing across scopes: rem8u#31 rem8u#32
Not aliassing across scopes: divr8u::dividend#0 div8u::dividend#2
Not aliassing across scopes: divr8u::divisor#0 div8u::divisor#2
Not aliassing across scopes: divr8u::return#0 divr8u::return#1
Not aliassing across scopes: rem8u#1 rem8u#17
Not aliassing across scopes: div8u::return#0 divr8u::return#0
Not aliassing across scopes: divr8u::rem#9 divr8u::rem#0
Not aliassing across scopes: divr8u::dividend#4 divr8u::dividend#0
Not aliassing across scopes: divr8u::divisor#5 divr8u::divisor#0
Not aliassing across scopes: rem8u#17 divr8u::rem#10
Not aliassing across scopes: divr16u::rem#9 divr16u::rem#3
Not aliassing across scopes: divr16u::dividend#4 divr16u::dividend#1
Not aliassing across scopes: divr16u::divisor#5 divr16u::divisor#0
Not aliassing across scopes: rem16u#1 divr16u::rem#10
Not aliassing across scopes: div16u::dividend#2 div16u::dividend#0
Not aliassing across scopes: div16u::divisor#2 div16u::divisor#0
Not aliassing across scopes: rem16u#31 rem16u#32
Not aliassing across scopes: divr16u::dividend#1 div16u::dividend#2
Not aliassing across scopes: divr16u::divisor#0 div16u::divisor#2
Not aliassing across scopes: divr16u::return#2 divr16u::return#0
Not aliassing across scopes: rem16u#16 rem16u#1
Not aliassing across scopes: div16u::return#0 divr16u::return#2
Not aliassing across scopes: div8s::dividend#1 div8s::dividend#0
Not aliassing across scopes: div8s::divisor#4 div8s::divisor#0
Not aliassing across scopes: rem8u#56 rem8u#39
Not aliassing across scopes: div8u::dividend#0 div8s::dividendu#3
Not aliassing across scopes: div8u::divisor#0 div8s::divisoru#3
Not aliassing across scopes: div8u::return#2 div8u::return#0
Not aliassing across scopes: rem8u#18 rem8u#1
Not aliassing across scopes: div8s::resultu#0 div8u::return#2
Not aliassing across scopes: div16s::dividend#1 div16s::dividend#0
Not aliassing across scopes: div16s::divisor#4 div16s::divisor#0
Not aliassing across scopes: rem16u#55 rem16u#38
Not aliassing across scopes: div16u::dividend#0 div16s::dividendu#3
Not aliassing across scopes: div16u::divisor#0 div16s::divisoru#3
Not aliassing across scopes: div16u::return#2 div16u::return#0
Not aliassing across scopes: rem16u#18 rem16u#16
Not aliassing across scopes: div16s::resultu#0 div16u::return#2
Not aliassing across scopes: print_screen#4 print_line_cursor#0
Not aliassing across scopes: print_line_cursor#40 print_line_cursor#0
Not aliassing across scopes: print_char_cursor#134 print_line_cursor#0
Not aliassing across scopes: rem8u#33 rem8u#0
Not aliassing across scopes: rem16u#33 rem16u#0
Not aliassing across scopes: rem8s#16 rem8s#0
Not aliassing across scopes: rem16s#16 rem16s#0
Not aliassing across scopes: print_line_cursor#24 print_line_cursor#23
Not aliassing across scopes: print_char_cursor#21 print_line_cursor#23
Not aliassing across scopes: rem8u#22 rem8u#10
Not aliassing across scopes: print_char_cursor#22 print_char_cursor#34
Not aliassing across scopes: print_line_cursor#25 print_line_cursor#11
Not aliassing across scopes: rem16u#22 rem16u#10
Not aliassing across scopes: print_char_cursor#23 print_char_cursor#105
Not aliassing across scopes: print_line_cursor#26 print_line_cursor#13
Not aliassing across scopes: rem8u#23 rem8u#12
Not aliassing across scopes: rem8s#10 rem8s#12
Not aliassing across scopes: print_char_cursor#24 print_char_cursor#114
Not aliassing across scopes: print_line_cursor#27 print_line_cursor#15
Not aliassing across scopes: rem16u#23 rem16u#12
Not aliassing across scopes: rem16s#10 rem16s#12
Not aliassing across scopes: print_char_cursor#25 print_char_cursor#123
Not aliassing across scopes: print_line_cursor#10 print_line_cursor#17
Not aliassing across scopes: rem8u#45 rem8u#33
Not aliassing across scopes: print_char_cursor#149 print_char_cursor#21
Not aliassing across scopes: print_line_cursor#83 print_line_cursor#24
Not aliassing across scopes: div8u::dividend#1 test_8u::dividend#0
Not aliassing across scopes: div8u::divisor#1 test_8u::divisor#0
Not aliassing across scopes: div8u::return#3 div8u::return#0
Not aliassing across scopes: rem8u#10 rem8u#1
Not aliassing across scopes: test_8u::res#0 div8u::return#3
Not aliassing across scopes: print_byte::b#3 test_8u::dividend#0
Not aliassing across scopes: print_char_cursor#27 print_char_cursor#15
Not aliassing across scopes: print_char_cursor#28 print_char_cursor#126
Not aliassing across scopes: print_byte::b#4 test_8u::divisor#0
Not aliassing across scopes: print_char_cursor#29 print_char_cursor#15
Not aliassing across scopes: print_char_cursor#30 print_char_cursor#126
Not aliassing across scopes: print_byte::b#5 test_8u::res#0
Not aliassing across scopes: print_char_cursor#31 print_char_cursor#15
Not aliassing across scopes: print_char_cursor#32 print_char_cursor#126
Not aliassing across scopes: print_byte::b#6 rem8u#10
Not aliassing across scopes: print_char_cursor#33 print_char_cursor#15
Not aliassing across scopes: print_line_cursor#11 print_line_cursor#1
Not aliassing across scopes: print_char_cursor#34 print_line_cursor#1
Not aliassing across scopes: rem16u#44 rem16u#33
Not aliassing across scopes: print_char_cursor#150 print_char_cursor#22
Not aliassing across scopes: print_line_cursor#84 print_line_cursor#25
Not aliassing across scopes: div16u::dividend#1 test_16u::dividend#0
Not aliassing across scopes: div16u::divisor#1 test_16u::divisor#0
Not aliassing across scopes: div16u::return#3 div16u::return#0
Not aliassing across scopes: rem16u#10 rem16u#16
Not aliassing across scopes: test_16u::res#0 div16u::return#3
Not aliassing across scopes: print_word::w#1 test_16u::dividend#0
Not aliassing across scopes: print_char_cursor#36 print_char_cursor#12
Not aliassing across scopes: print_char_cursor#37 print_char_cursor#126
Not aliassing across scopes: print_word::w#2 test_16u::divisor#0
Not aliassing across scopes: print_char_cursor#100 print_char_cursor#12
Not aliassing across scopes: print_char_cursor#101 print_char_cursor#126
Not aliassing across scopes: print_word::w#3 test_16u::res#0
Not aliassing across scopes: print_char_cursor#102 print_char_cursor#12
Not aliassing across scopes: print_char_cursor#103 print_char_cursor#126
Not aliassing across scopes: print_word::w#4 rem16u#10
Not aliassing across scopes: print_char_cursor#104 print_char_cursor#12
Not aliassing across scopes: print_line_cursor#13 print_line_cursor#1
Not aliassing across scopes: print_char_cursor#105 print_line_cursor#1
Not aliassing across scopes: rem8u#48 rem8u#22
Not aliassing across scopes: rem8s#23 rem8s#16
Not aliassing across scopes: print_char_cursor#151 print_char_cursor#23
Not aliassing across scopes: print_line_cursor#85 print_line_cursor#26
Not aliassing across scopes: div8s::dividend#0 test_8s::dividend#0
Not aliassing across scopes: div8s::divisor#0 test_8s::divisor#0
Not aliassing across scopes: div8s::return#3 div8s::return#2
Not aliassing across scopes: rem8u#12 rem8u#21
Not aliassing across scopes: rem8s#12 rem8s#3
Not aliassing across scopes: test_8s::res#0 div8s::return#3
Not aliassing across scopes: print_sbyte::b#1 test_8s::dividend#0
Not aliassing across scopes: print_char_cursor#107 print_char_cursor#10
Not aliassing across scopes: print_char_cursor#108 print_char_cursor#126
Not aliassing across scopes: print_sbyte::b#2 test_8s::divisor#0
Not aliassing across scopes: print_char_cursor#109 print_char_cursor#10
Not aliassing across scopes: print_char_cursor#110 print_char_cursor#126
Not aliassing across scopes: print_sbyte::b#3 test_8s::res#0
Not aliassing across scopes: print_char_cursor#111 print_char_cursor#10
Not aliassing across scopes: print_char_cursor#112 print_char_cursor#126
Not aliassing across scopes: print_sbyte::b#4 rem8s#12
Not aliassing across scopes: print_char_cursor#113 print_char_cursor#10
Not aliassing across scopes: print_line_cursor#15 print_line_cursor#1
Not aliassing across scopes: print_char_cursor#114 print_line_cursor#1
Not aliassing across scopes: rem16u#47 rem16u#22
Not aliassing across scopes: rem16s#22 rem16s#16
Not aliassing across scopes: print_char_cursor#152 print_char_cursor#24
Not aliassing across scopes: print_line_cursor#86 print_line_cursor#27
Not aliassing across scopes: div16s::dividend#0 test_16s::dividend#0
Not aliassing across scopes: div16s::divisor#0 test_16s::divisor#0
Not aliassing across scopes: div16s::return#3 div16s::return#2
Not aliassing across scopes: rem16u#12 rem16u#21
Not aliassing across scopes: rem16s#12 rem16s#3
Not aliassing across scopes: test_16s::res#0 div16s::return#3
Not aliassing across scopes: print_sword::w#1 test_16s::dividend#0
Not aliassing across scopes: print_char_cursor#116 print_char_cursor#5
Not aliassing across scopes: print_char_cursor#117 print_char_cursor#126
Not aliassing across scopes: print_sword::w#2 test_16s::divisor#0
Not aliassing across scopes: print_char_cursor#118 print_char_cursor#5
Not aliassing across scopes: print_char_cursor#119 print_char_cursor#126
Not aliassing across scopes: print_sword::w#3 test_16s::res#0
Not aliassing across scopes: print_char_cursor#120 print_char_cursor#5
Not aliassing across scopes: print_char_cursor#121 print_char_cursor#126
Not aliassing across scopes: print_sword::w#4 rem16s#12
Not aliassing across scopes: print_char_cursor#122 print_char_cursor#5
Not aliassing across scopes: print_line_cursor#17 print_line_cursor#1
Not aliassing across scopes: print_char_cursor#123 print_line_cursor#1
Not aliassing across scopes: print_line_cursor#19 print_line_cursor#10
Not aliassing across scopes: print_char_cursor#125 print_char_cursor#25
Not aliassing across scopes: rem8u#14 rem8u#23
Not aliassing across scopes: rem16u#14 rem16u#23
Not aliassing across scopes: rem8s#15 rem8s#10
Not aliassing across scopes: rem16s#15 rem16s#10
Alias (byte) divr8u::dividend#2 = (byte) divr8u::dividend#3 
Alias (byte) divr8u::quotient#3 = (byte) divr8u::quotient#6 
Alias (byte) divr8u::divisor#1 = (byte) divr8u::divisor#3 (byte) divr8u::divisor#6 
Alias (byte) divr8u::i#2 = (byte) divr8u::i#3 (byte) divr8u::i#5 
Alias (byte) divr8u::dividend#1 = (byte) divr8u::dividend#5 
Alias (word) divr16u::dividend#2 = (word) divr16u::dividend#3 
Alias (word) divr16u::quotient#3 = (word) divr16u::quotient#6 
Alias (word) divr16u::divisor#1 = (word) divr16u::divisor#3 (word) divr16u::divisor#6 
Alias (byte) divr16u::i#2 = (byte) divr16u::i#3 (byte) divr16u::i#5 
Alias (word) divr16u::dividend#0 = (word) divr16u::dividend#5 
Alias (signed byte) div8s::divisor#1 = (signed byte) div8s::divisor#4 
Alias (byte) rem8u#32 = (byte) rem8u#42 (byte) rem8u#56 
Alias (byte) div8s::dividendu#3 = (byte) div8s::dividendu#4 
Alias (byte) rem8u#18 = (byte) rem8u#21 
Alias (signed word) div16s::divisor#1 = (signed word) div16s::divisor#4 
Alias (word) rem16u#32 = (word) rem16u#41 (word) rem16u#55 
Alias (word) div16s::dividendu#3 = (word) div16s::dividendu#4 
Alias (word) rem16u#18 = (word) rem16u#21 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: print_str::str#15 print_str::str#10
Not aliassing across scopes: print_char_cursor#140 print_char_cursor#116
Not aliassing across scopes: print_line_cursor#39 print_line_cursor#44
Not aliassing across scopes: print_char_cursor#127 print_char_cursor#122
Not aliassing across scopes: print_sword::w#5 print_sword::w#1
Not aliassing across scopes: print_char_cursor#129 print_char_cursor#138
Not aliassing across scopes: print_char_cursor#5 print_char_cursor#12
Not aliassing across scopes: print_char_cursor#6 print_char_cursor#17
Not aliassing across scopes: print_sbyte::b#5 print_sbyte::b#1
Not aliassing across scopes: print_char_cursor#131 print_char_cursor#137
Not aliassing across scopes: print_char_cursor#10 print_char_cursor#15
Not aliassing across scopes: print_char_cursor#72 print_char_cursor#17
Not aliassing across scopes: print_word::w#5 print_word::w#0
Not aliassing across scopes: print_char_cursor#132 print_char_cursor#128
Not aliassing across scopes: print_char_cursor#11 print_char_cursor#15
Not aliassing across scopes: print_char_cursor#12 print_char_cursor#15
Not aliassing across scopes: print_byte::b#7 print_byte::b#0
Not aliassing across scopes: print_char_cursor#133 print_char_cursor#130
Not aliassing across scopes: print_char_cursor#14 print_char_cursor#17
Not aliassing across scopes: print_char_cursor#15 print_char_cursor#17
Not aliassing across scopes: print_char::ch#4 print_char::ch#2
Not aliassing across scopes: print_char_cursor#80 print_char_cursor#133
Not aliassing across scopes: print_screen#1 print_screen#4
Not aliassing across scopes: print_cls::sc#0 print_screen#1
Not aliassing across scopes: div8u::dividend#2 div8u::dividend#0
Not aliassing across scopes: div8u::divisor#2 div8u::divisor#0
Not aliassing across scopes: rem8u#31 rem8u#32
Not aliassing across scopes: divr8u::dividend#0 div8u::dividend#2
Not aliassing across scopes: divr8u::divisor#0 div8u::divisor#2
Not aliassing across scopes: divr8u::return#0 divr8u::return#1
Not aliassing across scopes: rem8u#1 rem8u#17
Not aliassing across scopes: div8u::return#0 divr8u::return#0
Not aliassing across scopes: divr8u::rem#9 divr8u::rem#0
Not aliassing across scopes: divr8u::dividend#4 divr8u::dividend#0
Not aliassing across scopes: divr8u::divisor#5 divr8u::divisor#0
Not aliassing across scopes: rem8u#17 divr8u::rem#10
Not aliassing across scopes: divr16u::rem#9 divr16u::rem#3
Not aliassing across scopes: divr16u::dividend#4 divr16u::dividend#1
Not aliassing across scopes: divr16u::divisor#5 divr16u::divisor#0
Not aliassing across scopes: rem16u#1 divr16u::rem#10
Not aliassing across scopes: div16u::dividend#2 div16u::dividend#0
Not aliassing across scopes: div16u::divisor#2 div16u::divisor#0
Not aliassing across scopes: rem16u#31 rem16u#32
Not aliassing across scopes: divr16u::dividend#1 div16u::dividend#2
Not aliassing across scopes: divr16u::divisor#0 div16u::divisor#2
Not aliassing across scopes: divr16u::return#2 divr16u::return#0
Not aliassing across scopes: rem16u#16 rem16u#1
Not aliassing across scopes: div16u::return#0 divr16u::return#2
Not aliassing across scopes: div8s::dividend#1 div8s::dividend#0
Not aliassing across scopes: div8s::divisor#1 div8s::divisor#0
Not aliassing across scopes: rem8u#32 rem8u#39
Not aliassing across scopes: div8u::dividend#0 div8s::dividendu#3
Not aliassing across scopes: div8u::divisor#0 div8s::divisoru#3
Not aliassing across scopes: div8u::return#2 div8u::return#0
Not aliassing across scopes: rem8u#18 rem8u#1
Not aliassing across scopes: div8s::resultu#0 div8u::return#2
Not aliassing across scopes: div16s::dividend#1 div16s::dividend#0
Not aliassing across scopes: div16s::divisor#1 div16s::divisor#0
Not aliassing across scopes: rem16u#32 rem16u#38
Not aliassing across scopes: div16u::dividend#0 div16s::dividendu#3
Not aliassing across scopes: div16u::divisor#0 div16s::divisoru#3
Not aliassing across scopes: div16u::return#2 div16u::return#0
Not aliassing across scopes: rem16u#18 rem16u#16
Not aliassing across scopes: div16s::resultu#0 div16u::return#2
Not aliassing across scopes: print_screen#4 print_line_cursor#0
Not aliassing across scopes: print_line_cursor#40 print_line_cursor#0
Not aliassing across scopes: print_char_cursor#134 print_line_cursor#0
Not aliassing across scopes: rem8u#33 rem8u#0
Not aliassing across scopes: rem16u#33 rem16u#0
Not aliassing across scopes: rem8s#16 rem8s#0
Not aliassing across scopes: rem16s#16 rem16s#0
Not aliassing across scopes: print_line_cursor#24 print_line_cursor#23
Not aliassing across scopes: print_char_cursor#21 print_line_cursor#23
Not aliassing across scopes: rem8u#22 rem8u#10
Not aliassing across scopes: print_char_cursor#22 print_char_cursor#34
Not aliassing across scopes: print_line_cursor#25 print_line_cursor#11
Not aliassing across scopes: rem16u#22 rem16u#10
Not aliassing across scopes: print_char_cursor#23 print_char_cursor#105
Not aliassing across scopes: print_line_cursor#26 print_line_cursor#13
Not aliassing across scopes: rem8u#23 rem8u#12
Not aliassing across scopes: rem8s#10 rem8s#12
Not aliassing across scopes: print_char_cursor#24 print_char_cursor#114
Not aliassing across scopes: print_line_cursor#27 print_line_cursor#15
Not aliassing across scopes: rem16u#23 rem16u#12
Not aliassing across scopes: rem16s#10 rem16s#12
Not aliassing across scopes: print_char_cursor#25 print_char_cursor#123
Not aliassing across scopes: print_line_cursor#10 print_line_cursor#17
Not aliassing across scopes: rem8u#45 rem8u#33
Not aliassing across scopes: print_char_cursor#149 print_char_cursor#21
Not aliassing across scopes: print_line_cursor#83 print_line_cursor#24
Not aliassing across scopes: div8u::dividend#1 test_8u::dividend#0
Not aliassing across scopes: div8u::divisor#1 test_8u::divisor#0
Not aliassing across scopes: div8u::return#3 div8u::return#0
Not aliassing across scopes: rem8u#10 rem8u#1
Not aliassing across scopes: test_8u::res#0 div8u::return#3
Not aliassing across scopes: print_byte::b#3 test_8u::dividend#0
Not aliassing across scopes: print_char_cursor#27 print_char_cursor#15
Not aliassing across scopes: print_char_cursor#28 print_char_cursor#126
Not aliassing across scopes: print_byte::b#4 test_8u::divisor#0
Not aliassing across scopes: print_char_cursor#29 print_char_cursor#15
Not aliassing across scopes: print_char_cursor#30 print_char_cursor#126
Not aliassing across scopes: print_byte::b#5 test_8u::res#0
Not aliassing across scopes: print_char_cursor#31 print_char_cursor#15
Not aliassing across scopes: print_char_cursor#32 print_char_cursor#126
Not aliassing across scopes: print_byte::b#6 rem8u#10
Not aliassing across scopes: print_char_cursor#33 print_char_cursor#15
Not aliassing across scopes: print_line_cursor#11 print_line_cursor#1
Not aliassing across scopes: print_char_cursor#34 print_line_cursor#1
Not aliassing across scopes: rem16u#44 rem16u#33
Not aliassing across scopes: print_char_cursor#150 print_char_cursor#22
Not aliassing across scopes: print_line_cursor#84 print_line_cursor#25
Not aliassing across scopes: div16u::dividend#1 test_16u::dividend#0
Not aliassing across scopes: div16u::divisor#1 test_16u::divisor#0
Not aliassing across scopes: div16u::return#3 div16u::return#0
Not aliassing across scopes: rem16u#10 rem16u#16
Not aliassing across scopes: test_16u::res#0 div16u::return#3
Not aliassing across scopes: print_word::w#1 test_16u::dividend#0
Not aliassing across scopes: print_char_cursor#36 print_char_cursor#12
Not aliassing across scopes: print_char_cursor#37 print_char_cursor#126
Not aliassing across scopes: print_word::w#2 test_16u::divisor#0
Not aliassing across scopes: print_char_cursor#100 print_char_cursor#12
Not aliassing across scopes: print_char_cursor#101 print_char_cursor#126
Not aliassing across scopes: print_word::w#3 test_16u::res#0
Not aliassing across scopes: print_char_cursor#102 print_char_cursor#12
Not aliassing across scopes: print_char_cursor#103 print_char_cursor#126
Not aliassing across scopes: print_word::w#4 rem16u#10
Not aliassing across scopes: print_char_cursor#104 print_char_cursor#12
Not aliassing across scopes: print_line_cursor#13 print_line_cursor#1
Not aliassing across scopes: print_char_cursor#105 print_line_cursor#1
Not aliassing across scopes: rem8u#48 rem8u#22
Not aliassing across scopes: rem8s#23 rem8s#16
Not aliassing across scopes: print_char_cursor#151 print_char_cursor#23
Not aliassing across scopes: print_line_cursor#85 print_line_cursor#26
Not aliassing across scopes: div8s::dividend#0 test_8s::dividend#0
Not aliassing across scopes: div8s::divisor#0 test_8s::divisor#0
Not aliassing across scopes: div8s::return#3 div8s::return#2
Not aliassing across scopes: rem8u#12 rem8u#18
Not aliassing across scopes: rem8s#12 rem8s#3
Not aliassing across scopes: test_8s::res#0 div8s::return#3
Not aliassing across scopes: print_sbyte::b#1 test_8s::dividend#0
Not aliassing across scopes: print_char_cursor#107 print_char_cursor#10
Not aliassing across scopes: print_char_cursor#108 print_char_cursor#126
Not aliassing across scopes: print_sbyte::b#2 test_8s::divisor#0
Not aliassing across scopes: print_char_cursor#109 print_char_cursor#10
Not aliassing across scopes: print_char_cursor#110 print_char_cursor#126
Not aliassing across scopes: print_sbyte::b#3 test_8s::res#0
Not aliassing across scopes: print_char_cursor#111 print_char_cursor#10
Not aliassing across scopes: print_char_cursor#112 print_char_cursor#126
Not aliassing across scopes: print_sbyte::b#4 rem8s#12
Not aliassing across scopes: print_char_cursor#113 print_char_cursor#10
Not aliassing across scopes: print_line_cursor#15 print_line_cursor#1
Not aliassing across scopes: print_char_cursor#114 print_line_cursor#1
Not aliassing across scopes: rem16u#47 rem16u#22
Not aliassing across scopes: rem16s#22 rem16s#16
Not aliassing across scopes: print_char_cursor#152 print_char_cursor#24
Not aliassing across scopes: print_line_cursor#86 print_line_cursor#27
Not aliassing across scopes: div16s::dividend#0 test_16s::dividend#0
Not aliassing across scopes: div16s::divisor#0 test_16s::divisor#0
Not aliassing across scopes: div16s::return#3 div16s::return#2
Not aliassing across scopes: rem16u#12 rem16u#18
Not aliassing across scopes: rem16s#12 rem16s#3
Not aliassing across scopes: test_16s::res#0 div16s::return#3
Not aliassing across scopes: print_sword::w#1 test_16s::dividend#0
Not aliassing across scopes: print_char_cursor#116 print_char_cursor#5
Not aliassing across scopes: print_char_cursor#117 print_char_cursor#126
Not aliassing across scopes: print_sword::w#2 test_16s::divisor#0
Not aliassing across scopes: print_char_cursor#118 print_char_cursor#5
Not aliassing across scopes: print_char_cursor#119 print_char_cursor#126
Not aliassing across scopes: print_sword::w#3 test_16s::res#0
Not aliassing across scopes: print_char_cursor#120 print_char_cursor#5
Not aliassing across scopes: print_char_cursor#121 print_char_cursor#126
Not aliassing across scopes: print_sword::w#4 rem16s#12
Not aliassing across scopes: print_char_cursor#122 print_char_cursor#5
Not aliassing across scopes: print_line_cursor#17 print_line_cursor#1
Not aliassing across scopes: print_char_cursor#123 print_line_cursor#1
Not aliassing across scopes: print_line_cursor#19 print_line_cursor#10
Not aliassing across scopes: print_char_cursor#125 print_char_cursor#25
Not aliassing across scopes: rem8u#14 rem8u#23
Not aliassing across scopes: rem16u#14 rem16u#23
Not aliassing across scopes: rem8s#15 rem8s#10
Not aliassing across scopes: rem16s#15 rem16s#10
Self Phi Eliminated (byte*) print_char_cursor#66
Self Phi Eliminated (byte*) print_line_cursor#23
Self Phi Eliminated (byte) divr8u::divisor#1
Self Phi Eliminated (word) divr16u::divisor#1
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) print_char_cursor#66 (byte*) print_char_cursor#127
Redundant Phi (byte*) print_char_cursor#5 (byte*) print_char_cursor#12
Redundant Phi (byte*) print_char_cursor#6 (byte*) print_char_cursor#17
Redundant Phi (byte*) print_char_cursor#10 (byte*) print_char_cursor#15
Redundant Phi (byte*) print_char_cursor#72 (byte*) print_char_cursor#17
Redundant Phi (byte*) print_char_cursor#11 (byte*) print_char_cursor#15
Redundant Phi (byte*) print_char_cursor#12 (byte*) print_char_cursor#15
Redundant Phi (byte*) print_char_cursor#14 (byte*) print_char_cursor#17
Redundant Phi (byte*) print_char_cursor#15 (byte*) print_char_cursor#17
Redundant Phi (byte*) print_screen#1 (byte*) print_screen#4
Redundant Phi (byte*) print_line_cursor#23 (byte*) print_screen#1
Redundant Phi (byte) rem8u#1 (byte) rem8u#17
Redundant Phi (byte) divr8u::rem#9 (byte) divr8u::rem#0
Redundant Phi (byte) divr8u::dividend#4 (byte) divr8u::dividend#0
Redundant Phi (byte) divr8u::divisor#5 (byte) divr8u::divisor#0
Redundant Phi (byte) divr8u::divisor#1 (byte) divr8u::divisor#5
Redundant Phi (word) divr16u::rem#9 (word) divr16u::rem#3
Redundant Phi (word) divr16u::dividend#4 (word) divr16u::dividend#1
Redundant Phi (word) divr16u::divisor#5 (word) divr16u::divisor#0
Redundant Phi (word) divr16u::divisor#1 (word) divr16u::divisor#5
Redundant Phi (word) rem16u#16 (word) rem16u#1
Redundant Phi (signed byte) div8s::dividend#1 (signed byte) div8s::dividend#0
Redundant Phi (signed byte) div8s::divisor#1 (signed byte) div8s::divisor#0
Redundant Phi (byte) rem8u#32 (byte) rem8u#39
Redundant Phi (byte) rem8u#18 (byte) rem8u#1
Redundant Phi (signed word) div16s::dividend#1 (signed word) div16s::dividend#0
Redundant Phi (signed word) div16s::divisor#1 (signed word) div16s::divisor#0
Redundant Phi (word) rem16u#32 (word) rem16u#38
Redundant Phi (word) rem16u#18 (word) rem16u#16
Redundant Phi (byte*) print_screen#4 (byte*) print_line_cursor#0
Redundant Phi (byte*) print_line_cursor#40 (byte*) print_line_cursor#0
Redundant Phi (byte*) print_char_cursor#134 (byte*) print_line_cursor#0
Redundant Phi (byte) rem8u#33 (byte) rem8u#0
Redundant Phi (word) rem16u#33 (word) rem16u#0
Redundant Phi (signed byte) rem8s#16 (signed byte) rem8s#0
Redundant Phi (signed word) rem16s#16 (signed word) rem16s#0
Redundant Phi (byte*) print_line_cursor#24 (byte*) print_line_cursor#23
Redundant Phi (byte*) print_char_cursor#21 (byte*) print_line_cursor#23
Redundant Phi (byte) rem8u#22 (byte) rem8u#10
Redundant Phi (byte*) print_char_cursor#22 (byte*) print_char_cursor#34
Redundant Phi (byte*) print_line_cursor#25 (byte*) print_line_cursor#11
Redundant Phi (word) rem16u#22 (word) rem16u#10
Redundant Phi (byte*) print_char_cursor#23 (byte*) print_char_cursor#105
Redundant Phi (byte*) print_line_cursor#26 (byte*) print_line_cursor#13
Redundant Phi (byte) rem8u#23 (byte) rem8u#12
Redundant Phi (signed byte) rem8s#10 (signed byte) rem8s#12
Redundant Phi (byte*) print_char_cursor#24 (byte*) print_char_cursor#114
Redundant Phi (byte*) print_line_cursor#27 (byte*) print_line_cursor#15
Redundant Phi (word) rem16u#23 (word) rem16u#12
Redundant Phi (signed word) rem16s#10 (signed word) rem16s#12
Redundant Phi (byte*) print_char_cursor#25 (byte*) print_char_cursor#123
Redundant Phi (byte*) print_line_cursor#10 (byte*) print_line_cursor#17
Redundant Phi (byte) rem8u#45 (byte) rem8u#33
Redundant Phi (byte*) print_char_cursor#149 (byte*) print_char_cursor#21
Redundant Phi (byte*) print_line_cursor#83 (byte*) print_line_cursor#24
Redundant Phi (byte) rem8u#10 (byte) rem8u#1
Redundant Phi (byte*) print_char_cursor#27 (byte*) print_char_cursor#15
Redundant Phi (byte*) print_char_cursor#28 (byte*) print_char_cursor#126
Redundant Phi (byte*) print_char_cursor#29 (byte*) print_char_cursor#15
Redundant Phi (byte*) print_char_cursor#30 (byte*) print_char_cursor#126
Redundant Phi (byte*) print_char_cursor#31 (byte*) print_char_cursor#15
Redundant Phi (byte*) print_char_cursor#32 (byte*) print_char_cursor#126
Redundant Phi (byte*) print_char_cursor#33 (byte*) print_char_cursor#15
Redundant Phi (byte*) print_line_cursor#11 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#34 (byte*) print_line_cursor#1
Redundant Phi (word) rem16u#44 (word) rem16u#33
Redundant Phi (byte*) print_char_cursor#150 (byte*) print_char_cursor#22
Redundant Phi (byte*) print_line_cursor#84 (byte*) print_line_cursor#25
Redundant Phi (word) rem16u#10 (word) rem16u#16
Redundant Phi (byte*) print_char_cursor#36 (byte*) print_char_cursor#12
Redundant Phi (byte*) print_char_cursor#37 (byte*) print_char_cursor#126
Redundant Phi (byte*) print_char_cursor#100 (byte*) print_char_cursor#12
Redundant Phi (byte*) print_char_cursor#101 (byte*) print_char_cursor#126
Redundant Phi (byte*) print_char_cursor#102 (byte*) print_char_cursor#12
Redundant Phi (byte*) print_char_cursor#103 (byte*) print_char_cursor#126
Redundant Phi (byte*) print_char_cursor#104 (byte*) print_char_cursor#12
Redundant Phi (byte*) print_line_cursor#13 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#105 (byte*) print_line_cursor#1
Redundant Phi (byte) rem8u#48 (byte) rem8u#22
Redundant Phi (signed byte) rem8s#23 (signed byte) rem8s#16
Redundant Phi (byte*) print_char_cursor#151 (byte*) print_char_cursor#23
Redundant Phi (byte*) print_line_cursor#85 (byte*) print_line_cursor#26
Redundant Phi (byte) rem8u#12 (byte) rem8u#18
Redundant Phi (signed byte) rem8s#12 (signed byte) rem8s#3
Redundant Phi (byte*) print_char_cursor#107 (byte*) print_char_cursor#10
Redundant Phi (byte*) print_char_cursor#108 (byte*) print_char_cursor#126
Redundant Phi (byte*) print_char_cursor#109 (byte*) print_char_cursor#10
Redundant Phi (byte*) print_char_cursor#110 (byte*) print_char_cursor#126
Redundant Phi (byte*) print_char_cursor#111 (byte*) print_char_cursor#10
Redundant Phi (byte*) print_char_cursor#112 (byte*) print_char_cursor#126
Redundant Phi (byte*) print_char_cursor#113 (byte*) print_char_cursor#10
Redundant Phi (byte*) print_line_cursor#15 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#114 (byte*) print_line_cursor#1
Redundant Phi (word) rem16u#47 (word) rem16u#22
Redundant Phi (signed word) rem16s#22 (signed word) rem16s#16
Redundant Phi (byte*) print_char_cursor#152 (byte*) print_char_cursor#24
Redundant Phi (byte*) print_line_cursor#86 (byte*) print_line_cursor#27
Redundant Phi (word) rem16u#12 (word) rem16u#18
Redundant Phi (signed word) rem16s#12 (signed word) rem16s#3
Redundant Phi (byte*) print_char_cursor#116 (byte*) print_char_cursor#5
Redundant Phi (byte*) print_char_cursor#117 (byte*) print_char_cursor#126
Redundant Phi (byte*) print_char_cursor#118 (byte*) print_char_cursor#5
Redundant Phi (byte*) print_char_cursor#119 (byte*) print_char_cursor#126
Redundant Phi (byte*) print_char_cursor#120 (byte*) print_char_cursor#5
Redundant Phi (byte*) print_char_cursor#121 (byte*) print_char_cursor#126
Redundant Phi (byte*) print_char_cursor#122 (byte*) print_char_cursor#5
Redundant Phi (byte*) print_line_cursor#17 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#123 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_line_cursor#19 (byte*) print_line_cursor#10
Redundant Phi (byte*) print_char_cursor#125 (byte*) print_char_cursor#25
Redundant Phi (byte) rem8u#14 (byte) rem8u#23
Redundant Phi (word) rem16u#14 (word) rem16u#23
Redundant Phi (signed byte) rem8s#15 (signed byte) rem8s#10
Redundant Phi (signed word) rem16s#15 (signed word) rem16s#10
Succesful SSA optimization Pass2RedundantPhiElimination
Redundant Phi (byte*) print_char_cursor#140 (byte*) print_char_cursor#17
Redundant Phi (byte*) print_char_cursor#127 (byte*) print_char_cursor#17
Redundant Phi (byte*) print_char_cursor#136 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_line_cursor#42 (byte*) print_line_cursor#1
Redundant Phi (byte) rem8u#39 (byte) rem8u#17
Redundant Phi (byte*) print_char_cursor#137 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_line_cursor#43 (byte*) print_line_cursor#1
Redundant Phi (word) rem16u#38 (word) rem16u#1
Redundant Phi (byte*) print_char_cursor#138 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_line_cursor#44 (byte*) print_line_cursor#1
Succesful SSA optimization Pass2RedundantPhiElimination
Simple Condition (boolean~) print_str::$0 if(*((byte*) print_str::str#13)!=(byte) '@') goto print_str::@2
Simple Condition (boolean~) print_ln::$1 if((byte*) print_line_cursor#1<(byte*) print_char_cursor#17) goto print_ln::@1
Simple Condition (boolean~) print_sword::$1 if((signed word) print_sword::w#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1
Simple Condition (boolean~) print_sbyte::$1 if((signed byte) print_sbyte::b#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte::@1
Simple Condition (boolean~) print_cls::$1 if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
Simple Condition (boolean~) divr8u::$3 if((byte~) divr8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr8u::@2
Simple Condition (boolean~) divr8u::$8 if((byte) divr8u::rem#5<(byte) divr8u::divisor#0) goto divr8u::@3
Simple Condition (boolean~) divr8u::$10 if((byte) divr8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto divr8u::@1
Simple Condition (boolean~) divr16u::$4 if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2
Simple Condition (boolean~) divr16u::$9 if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3
Simple Condition (boolean~) divr16u::$11 if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto divr16u::@1
Simple Condition (boolean~) div8s::$0 if((signed byte) div8s::dividend#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@1
Simple Condition (boolean~) div8s::$4 if((signed byte) div8s::divisor#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@3
Simple Condition (boolean~) div8s::$10 if((byte) div8s::neg#4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@5
Simple Condition (boolean~) div16s::$0 if((signed word) div16s::dividend#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@1
Simple Condition (boolean~) div16s::$4 if((signed word) div16s::divisor#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@3
Simple Condition (boolean~) div16s::$10 if((byte) div16s::neg#4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@5
Simple Condition (boolean~) test_8u::$9 if((byte) test_8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8u::@1
Simple Condition (boolean~) test_16u::$10 if((byte) test_16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16u::@1
Simple Condition (boolean~) test_8s::$13 if((byte) test_8s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8s::@1
Simple Condition (boolean~) test_16s::$16 if((byte) test_16s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16s::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) print_line_cursor#0 = ((byte*))1024
Constant (const byte) print_char::ch#0 = '-'
Constant (const byte) print_char::ch#1 = '-'
Constant (const string) print_hextab#0 = $0
Constant (const byte) rem8u#0 = 0
Constant (const byte) divr8u::rem#0 = 0
Constant (const byte) divr8u::quotient#0 = 0
Constant (const byte) divr8u::i#0 = 0
Constant (const word) rem16u#0 = 0
Constant (const word) divr16u::quotient#0 = 0
Constant (const byte) divr16u::i#0 = 0
Constant (const word) divr16u::rem#3 = 0
Constant (const signed byte) rem8s#0 = 0
Constant (const byte) div8s::neg#0 = 0
Constant (const byte) div8s::dividendu#0 = 0
Constant (const byte) div8s::neg#1 = 1
Constant (const byte) div8s::divisoru#0 = 0
Constant (const signed word) rem16s#0 = 0
Constant (const byte) div16s::neg#0 = 0
Constant (const word) div16s::dividendu#0 = 0
Constant (const byte) div16s::neg#1 = 1
Constant (const word) div16s::divisoru#0 = 0
Constant (const byte[]) test_8u::dividends#0 = { 255, 255, 255, 255, 255, 255 }
Constant (const byte[]) test_8u::divisors#0 = { 5, 7, 11, 13, 17, 19 }
Constant (const byte) test_8u::i#0 = 0
Constant (const string) print_str::str#1 = test_8u::str
Constant (const string) print_str::str#2 = test_8u::str1
Constant (const string) print_str::str#3 = test_8u::str2
Constant (const word[]) test_16u::dividends#0 = { 65535, 65535, 65535, 65535, 65535, 65535 }
Constant (const word[]) test_16u::divisors#0 = { 5, 7, 11, 13, 17, 19 }
Constant (const byte) test_16u::i#0 = 0
Constant (const string) print_str::str#4 = test_16u::str
Constant (const string) print_str::str#5 = test_16u::str1
Constant (const string) print_str::str#6 = test_16u::str2
Constant (const signed byte/signed word/signed dword) test_8s::$0 = -127
Constant (const signed byte/signed word/signed dword) test_8s::$1 = -127
Constant (const signed byte/signed word/signed dword) test_8s::$2 = -11
Constant (const signed byte/signed word/signed dword) test_8s::$3 = -13
Constant (const byte) test_8s::i#0 = 0
Constant (const string) print_str::str#7 = test_8s::str
Constant (const string) print_str::str#8 = test_8s::str1
Constant (const string) print_str::str#9 = test_8s::str2
Constant (const signed word/signed dword) test_16s::$0 = -32767
Constant (const signed word/signed dword) test_16s::$1 = -32767
Constant (const signed word/signed dword) test_16s::$2 = -32767
Constant (const signed byte/signed word/signed dword) test_16s::$3 = -7
Constant (const signed byte/signed word/signed dword) test_16s::$4 = -13
Constant (const signed byte/signed word/signed dword) test_16s::$5 = -17
Constant (const byte) test_16s::i#0 = 0
Constant (const string) print_str::str#10 = test_16s::str
Constant (const string) print_str::str#11 = test_16s::str1
Constant (const string) print_str::str#12 = test_16s::str2
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_cls::sc#0 = print_line_cursor#0
Constant (const byte*) print_cls::$0 = print_line_cursor#0+1000
Constant (const signed byte[]) test_8s::dividends#0 = { 127, test_8s::$0, test_8s::$1, 127, 127, 127 }
Constant (const signed byte[]) test_8s::divisors#0 = { 5, 7, test_8s::$2, test_8s::$3, 17, 19 }
Constant (const signed word[]) test_16s::dividends#0 = { 32767, 32767, test_16s::$0, test_16s::$1, 32767, test_16s::$2 }
Constant (const signed word[]) test_16s::divisors#0 = { 5, test_16s::$3, 11, test_16s::$4, test_16s::$5, 19 }
Succesful SSA optimization Pass2ConstantIdentification
Eliminating unused variable - keeping the phi block (byte) rem8u#31
Eliminating unused variable - keeping the phi block (word) rem16u#31
Eliminating unused variable - keeping the phi block (signed byte) rem8s#18
Eliminating unused variable - keeping the phi block (signed word) rem16s#17
Eliminating unused constant (const byte) div8s::dividendu#0
Eliminating unused constant (const byte) div8s::divisoru#0
Eliminating unused constant (const word) div16s::dividendu#0
Eliminating unused constant (const word) div16s::divisoru#0
Succesful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable - keeping the phi block (byte) rem8u#36
Eliminating unused variable - keeping the phi block (word) rem16u#35
Eliminating unused constant (const signed byte) rem8s#0
Eliminating unused constant (const signed word) rem16s#0
Succesful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) rem8u#0
Eliminating unused constant (const word) rem16u#0
Succesful SSA optimization PassNEliminateUnusedVars
Eliminating Noop Cast (word) print_word::w#0 ← ((word)) (signed word) print_sword::w#6
Eliminating Noop Cast (byte) print_byte::b#0 ← ((byte)) (signed byte) print_sbyte::b#6
Eliminating Noop Cast (byte) div8s::dividendu#1 ← ((byte)) (signed byte~) div8s::$2
Eliminating Noop Cast (byte) div8s::dividendu#2 ← ((byte)) (signed byte) div8s::dividend#0
Eliminating Noop Cast (byte) div8s::divisoru#1 ← ((byte)) (signed byte~) div8s::$6
Eliminating Noop Cast (byte) div8s::divisoru#2 ← ((byte)) (signed byte) div8s::divisor#0
Eliminating Noop Cast (signed byte) rem8s#1 ← ((signed byte)) (byte) rem8u#17
Eliminating Noop Cast (signed byte) div8s::return#0 ← ((signed byte)) (byte) div8s::resultu#0
Eliminating Noop Cast (signed byte~) div8s::$11 ← ((signed byte)) (byte) rem8u#17
Eliminating Noop Cast (signed byte~) div8s::$13 ← ((signed byte)) (byte) div8s::resultu#0
Eliminating Noop Cast (word) div16s::dividendu#1 ← ((word)) (signed word~) div16s::$2
Eliminating Noop Cast (word) div16s::dividendu#2 ← ((word)) (signed word) div16s::dividend#0
Eliminating Noop Cast (word) div16s::divisoru#1 ← ((word)) (signed word~) div16s::$6
Eliminating Noop Cast (word) div16s::divisoru#2 ← ((word)) (signed word) div16s::divisor#0
Eliminating Noop Cast (signed word) rem16s#1 ← ((signed word)) (word) rem16u#1
Eliminating Noop Cast (signed word) div16s::return#0 ← ((signed word)) (word) div16s::resultu#0
Eliminating Noop Cast (signed word~) div16s::$11 ← ((signed word)) (word) rem16u#1
Eliminating Noop Cast (signed word~) div16s::$13 ← ((signed word)) (word) div16s::resultu#0
Succesful SSA optimization Pass2NopCastElimination
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_sword::@3
Culled Empty Block (label) print_sbyte::@3
Culled Empty Block (label) print_word::@2
Culled Empty Block (label) @10
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) print_cls::@2
Culled Empty Block (label) @14
Culled Empty Block (label) @16
Culled Empty Block (label) @19
Culled Empty Block (label) div8s::@7
Culled Empty Block (label) div8s::@9
Culled Empty Block (label) div8s::@5
Culled Empty Block (label) @20
Culled Empty Block (label) div16s::@7
Culled Empty Block (label) div16s::@9
Culled Empty Block (label) div16s::@5
Culled Empty Block (label) main::@5
Culled Empty Block (label) @27
Succesful SSA optimization Pass2CullEmptyBlocks
Not aliassing across scopes: print_char_cursor#126 print_char_cursor#17
Not aliassing across scopes: print_sword::w#5 print_sword::w#1
Not aliassing across scopes: print_char_cursor#129 print_line_cursor#1
Not aliassing across scopes: print_sbyte::b#5 print_sbyte::b#1
Not aliassing across scopes: print_char_cursor#131 print_line_cursor#1
Not aliassing across scopes: print_char_cursor#132 print_char_cursor#128
Not aliassing across scopes: print_char_cursor#133 print_char_cursor#130
Not aliassing across scopes: print_char::ch#4 print_char::ch#2
Not aliassing across scopes: print_char_cursor#80 print_char_cursor#133
Not aliassing across scopes: div8u::dividend#2 div8u::dividend#0
Not aliassing across scopes: div8u::divisor#2 div8u::divisor#0
Not aliassing across scopes: divr8u::dividend#0 div8u::dividend#2
Not aliassing across scopes: divr8u::divisor#0 div8u::divisor#2
Not aliassing across scopes: divr8u::return#0 divr8u::return#1
Not aliassing across scopes: div8u::return#0 divr8u::return#0
Not aliassing across scopes: divr8u::dividend#2 divr8u::dividend#0
Not aliassing across scopes: rem8u#17 divr8u::rem#10
Not aliassing across scopes: divr16u::dividend#2 divr16u::dividend#1
Not aliassing across scopes: rem16u#1 divr16u::rem#10
Not aliassing across scopes: div16u::dividend#2 div16u::dividend#0
Not aliassing across scopes: div16u::divisor#2 div16u::divisor#0
Not aliassing across scopes: divr16u::dividend#1 div16u::dividend#2
Not aliassing across scopes: divr16u::divisor#0 div16u::divisor#2
Not aliassing across scopes: divr16u::return#2 divr16u::return#0
Not aliassing across scopes: div16u::return#0 divr16u::return#2
Not aliassing across scopes: div8u::dividend#0 div8s::dividendu#3
Not aliassing across scopes: div8u::divisor#0 div8s::divisoru#3
Not aliassing across scopes: div8u::return#2 div8u::return#0
Not aliassing across scopes: div8s::resultu#0 div8u::return#2
Not aliassing across scopes: div16u::dividend#0 div16s::dividendu#3
Not aliassing across scopes: div16u::divisor#0 div16s::divisoru#3
Not aliassing across scopes: div16u::return#2 div16u::return#0
Not aliassing across scopes: div16s::resultu#0 div16u::return#2
Not aliassing across scopes: div8u::dividend#1 test_8u::dividend#0
Not aliassing across scopes: div8u::divisor#1 test_8u::divisor#0
Not aliassing across scopes: div8u::return#3 div8u::return#0
Not aliassing across scopes: test_8u::res#0 div8u::return#3
Not aliassing across scopes: print_byte::b#3 test_8u::dividend#0
Not aliassing across scopes: print_byte::b#4 test_8u::divisor#0
Not aliassing across scopes: print_byte::b#5 test_8u::res#0
Not aliassing across scopes: print_byte::b#6 rem8u#17
Not aliassing across scopes: div16u::dividend#1 test_16u::dividend#0
Not aliassing across scopes: div16u::divisor#1 test_16u::divisor#0
Not aliassing across scopes: div16u::return#3 div16u::return#0
Not aliassing across scopes: test_16u::res#0 div16u::return#3
Not aliassing across scopes: print_word::w#1 test_16u::dividend#0
Not aliassing across scopes: print_word::w#2 test_16u::divisor#0
Not aliassing across scopes: print_word::w#3 test_16u::res#0
Not aliassing across scopes: print_word::w#4 rem16u#1
Not aliassing across scopes: div8s::dividend#0 test_8s::dividend#0
Not aliassing across scopes: div8s::divisor#0 test_8s::divisor#0
Not aliassing across scopes: div8s::return#3 div8s::return#2
Not aliassing across scopes: test_8s::res#0 div8s::return#3
Not aliassing across scopes: print_sbyte::b#1 test_8s::dividend#0
Not aliassing across scopes: print_sbyte::b#2 test_8s::divisor#0
Not aliassing across scopes: print_sbyte::b#3 test_8s::res#0
Not aliassing across scopes: print_sbyte::b#4 rem8s#3
Not aliassing across scopes: div16s::dividend#0 test_16s::dividend#0
Not aliassing across scopes: div16s::divisor#0 test_16s::divisor#0
Not aliassing across scopes: div16s::return#3 div16s::return#2
Not aliassing across scopes: test_16s::res#0 div16s::return#3
Not aliassing across scopes: print_sword::w#1 test_16s::dividend#0
Not aliassing across scopes: print_sword::w#2 test_16s::divisor#0
Not aliassing across scopes: print_sword::w#3 test_16s::res#0
Not aliassing across scopes: print_sword::w#4 rem16s#3
Not aliassing across scopes: print_char_cursor#126 print_char_cursor#17
Not aliassing across scopes: print_sword::w#5 print_sword::w#1
Not aliassing across scopes: print_char_cursor#129 print_line_cursor#1
Not aliassing across scopes: print_sbyte::b#5 print_sbyte::b#1
Not aliassing across scopes: print_char_cursor#131 print_line_cursor#1
Not aliassing across scopes: print_char_cursor#132 print_char_cursor#128
Not aliassing across scopes: print_char_cursor#133 print_char_cursor#130
Not aliassing across scopes: print_char::ch#4 print_char::ch#2
Not aliassing across scopes: print_char_cursor#80 print_char_cursor#133
Not aliassing across scopes: div8u::dividend#2 div8u::dividend#0
Not aliassing across scopes: div8u::divisor#2 div8u::divisor#0
Not aliassing across scopes: divr8u::dividend#0 div8u::dividend#2
Not aliassing across scopes: divr8u::divisor#0 div8u::divisor#2
Not aliassing across scopes: divr8u::return#0 divr8u::return#1
Not aliassing across scopes: div8u::return#0 divr8u::return#0
Not aliassing across scopes: divr8u::dividend#2 divr8u::dividend#0
Not aliassing across scopes: rem8u#17 divr8u::rem#10
Not aliassing across scopes: divr16u::dividend#2 divr16u::dividend#1
Not aliassing across scopes: rem16u#1 divr16u::rem#10
Not aliassing across scopes: div16u::dividend#2 div16u::dividend#0
Not aliassing across scopes: div16u::divisor#2 div16u::divisor#0
Not aliassing across scopes: divr16u::dividend#1 div16u::dividend#2
Not aliassing across scopes: divr16u::divisor#0 div16u::divisor#2
Not aliassing across scopes: divr16u::return#2 divr16u::return#0
Not aliassing across scopes: div16u::return#0 divr16u::return#2
Not aliassing across scopes: div8u::dividend#0 div8s::dividendu#3
Not aliassing across scopes: div8u::divisor#0 div8s::divisoru#3
Not aliassing across scopes: div8u::return#2 div8u::return#0
Not aliassing across scopes: div8s::resultu#0 div8u::return#2
Not aliassing across scopes: div16u::dividend#0 div16s::dividendu#3
Not aliassing across scopes: div16u::divisor#0 div16s::divisoru#3
Not aliassing across scopes: div16u::return#2 div16u::return#0
Not aliassing across scopes: div16s::resultu#0 div16u::return#2
Not aliassing across scopes: div8u::dividend#1 test_8u::dividend#0
Not aliassing across scopes: div8u::divisor#1 test_8u::divisor#0
Not aliassing across scopes: div8u::return#3 div8u::return#0
Not aliassing across scopes: test_8u::res#0 div8u::return#3
Not aliassing across scopes: print_byte::b#3 test_8u::dividend#0
Not aliassing across scopes: print_byte::b#4 test_8u::divisor#0
Not aliassing across scopes: print_byte::b#5 test_8u::res#0
Not aliassing across scopes: print_byte::b#6 rem8u#17
Not aliassing across scopes: div16u::dividend#1 test_16u::dividend#0
Not aliassing across scopes: div16u::divisor#1 test_16u::divisor#0
Not aliassing across scopes: div16u::return#3 div16u::return#0
Not aliassing across scopes: test_16u::res#0 div16u::return#3
Not aliassing across scopes: print_word::w#1 test_16u::dividend#0
Not aliassing across scopes: print_word::w#2 test_16u::divisor#0
Not aliassing across scopes: print_word::w#3 test_16u::res#0
Not aliassing across scopes: print_word::w#4 rem16u#1
Not aliassing across scopes: div8s::dividend#0 test_8s::dividend#0
Not aliassing across scopes: div8s::divisor#0 test_8s::divisor#0
Not aliassing across scopes: div8s::return#3 div8s::return#2
Not aliassing across scopes: test_8s::res#0 div8s::return#3
Not aliassing across scopes: print_sbyte::b#1 test_8s::dividend#0
Not aliassing across scopes: print_sbyte::b#2 test_8s::divisor#0
Not aliassing across scopes: print_sbyte::b#3 test_8s::res#0
Not aliassing across scopes: print_sbyte::b#4 rem8s#3
Not aliassing across scopes: div16s::dividend#0 test_16s::dividend#0
Not aliassing across scopes: div16s::divisor#0 test_16s::divisor#0
Not aliassing across scopes: div16s::return#3 div16s::return#2
Not aliassing across scopes: test_16s::res#0 div16s::return#3
Not aliassing across scopes: print_sword::w#1 test_16s::dividend#0
Not aliassing across scopes: print_sword::w#2 test_16s::divisor#0
Not aliassing across scopes: print_sword::w#3 test_16s::res#0
Not aliassing across scopes: print_sword::w#4 rem16s#3
OPTIMIZING CONTROL FLOW GRAPH
Inlining constant with var siblings (const string) print_str::str#1
Inlining constant with var siblings (const string) print_str::str#1
Inlining constant with var siblings (const string) print_str::str#1
Inlining constant with var siblings (const string) print_str::str#2
Inlining constant with var siblings (const string) print_str::str#2
Inlining constant with var siblings (const string) print_str::str#2
Inlining constant with var siblings (const string) print_str::str#3
Inlining constant with var siblings (const string) print_str::str#3
Inlining constant with var siblings (const string) print_str::str#3
Inlining constant with var siblings (const string) print_str::str#4
Inlining constant with var siblings (const string) print_str::str#4
Inlining constant with var siblings (const string) print_str::str#4
Inlining constant with var siblings (const string) print_str::str#5
Inlining constant with var siblings (const string) print_str::str#5
Inlining constant with var siblings (const string) print_str::str#5
Inlining constant with var siblings (const string) print_str::str#6
Inlining constant with var siblings (const string) print_str::str#6
Inlining constant with var siblings (const string) print_str::str#6
Inlining constant with var siblings (const string) print_str::str#7
Inlining constant with var siblings (const string) print_str::str#7
Inlining constant with var siblings (const string) print_str::str#7
Inlining constant with var siblings (const string) print_str::str#8
Inlining constant with var siblings (const string) print_str::str#8
Inlining constant with var siblings (const string) print_str::str#8
Inlining constant with var siblings (const string) print_str::str#9
Inlining constant with var siblings (const string) print_str::str#9
Inlining constant with var siblings (const string) print_str::str#9
Inlining constant with var siblings (const string) print_str::str#10
Inlining constant with var siblings (const string) print_str::str#10
Inlining constant with var siblings (const string) print_str::str#10
Inlining constant with var siblings (const string) print_str::str#11
Inlining constant with var siblings (const string) print_str::str#11
Inlining constant with var siblings (const string) print_str::str#11
Inlining constant with var siblings (const string) print_str::str#12
Inlining constant with var siblings (const string) print_str::str#12
Inlining constant with var siblings (const string) print_str::str#12
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with different constant siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte) print_char::ch#1
Inlining constant with var siblings (const byte) print_char::ch#1
Inlining constant with var siblings (const byte) print_char::ch#1
Inlining constant with different constant siblings (const byte) print_char::ch#1
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte) divr8u::rem#0
Inlining constant with var siblings (const byte) divr8u::rem#0
Inlining constant with var siblings (const byte) divr8u::rem#0
Inlining constant with var siblings (const byte) divr8u::rem#0
Inlining constant with var siblings (const byte) divr8u::rem#0
Inlining constant with var siblings (const byte) divr8u::rem#0
Inlining constant with var siblings (const byte) divr8u::quotient#0
Inlining constant with var siblings (const byte) divr8u::quotient#0
Inlining constant with var siblings (const byte) divr8u::quotient#0
Inlining constant with var siblings (const byte) divr8u::i#0
Inlining constant with var siblings (const byte) divr8u::i#0
Inlining constant with var siblings (const word) divr16u::quotient#0
Inlining constant with var siblings (const word) divr16u::quotient#0
Inlining constant with var siblings (const word) divr16u::quotient#0
Inlining constant with var siblings (const byte) divr16u::i#0
Inlining constant with var siblings (const byte) divr16u::i#0
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const word) divr16u::rem#3
Inlining constant with var siblings (const byte) div8s::neg#0
Inlining constant with var siblings (const byte) div8s::neg#0
Inlining constant with var siblings (const byte) div8s::neg#0
Inlining constant with different constant siblings (const byte) div8s::neg#0
Inlining constant with var siblings (const byte) div8s::neg#1
Inlining constant with var siblings (const byte) div8s::neg#1
Inlining constant with var siblings (const byte) div8s::neg#1
Inlining constant with different constant siblings (const byte) div8s::neg#1
Inlining constant with var siblings (const byte) div16s::neg#0
Inlining constant with var siblings (const byte) div16s::neg#0
Inlining constant with var siblings (const byte) div16s::neg#0
Inlining constant with different constant siblings (const byte) div16s::neg#0
Inlining constant with var siblings (const byte) div16s::neg#1
Inlining constant with var siblings (const byte) div16s::neg#1
Inlining constant with var siblings (const byte) div16s::neg#1
Inlining constant with different constant siblings (const byte) div16s::neg#1
Inlining constant with var siblings (const byte) test_8u::i#0
Inlining constant with var siblings (const byte) test_8u::i#0
Inlining constant with var siblings (const byte) test_16u::i#0
Inlining constant with var siblings (const byte) test_16u::i#0
Inlining constant with var siblings (const byte) test_8s::i#0
Inlining constant with var siblings (const byte) test_8s::i#0
Inlining constant with var siblings (const byte) test_16s::i#0
Inlining constant with var siblings (const byte) test_16s::i#0
Inlining constant with var siblings (const byte*) print_line_cursor#0
Inlining constant with var siblings (const byte*) print_line_cursor#0
Inlining constant with var siblings (const byte*) print_line_cursor#0
Inlining constant with var siblings (const byte*) print_line_cursor#0
Constant inlined divr16u::rem#3 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_cls::$0 = ((byte*))(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000
Constant inlined divr16u::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_str::str#12 = (const string) test_16s::str2
Constant inlined print_str::str#11 = (const string) test_16s::str1
Constant inlined print_str::str#10 = (const string) test_16s::str
Constant inlined $0 = (const string) print_hextab#0
Constant inlined divr8u::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test_16u::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined divr16u::quotient#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test_8u::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test_8s::$3 = -(byte/signed byte/word/signed word/dword/signed dword) 13
Constant inlined test_8s::$2 = -(byte/signed byte/word/signed word/dword/signed dword) 11
Constant inlined test_8s::$1 = -(byte/signed byte/word/signed word/dword/signed dword) 127
Constant inlined div16s::neg#1 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined test_8s::$0 = -(byte/signed byte/word/signed word/dword/signed dword) 127
Constant inlined div16s::neg#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test_16s::$3 = -(byte/signed byte/word/signed word/dword/signed dword) 7
Constant inlined test_16s::$4 = -(byte/signed byte/word/signed word/dword/signed dword) 13
Constant inlined test_16s::$5 = -(byte/signed byte/word/signed word/dword/signed dword) 17
Constant inlined print_line_cursor#0 = ((byte*))(word/signed word/dword/signed dword) 1024
Constant inlined test_16s::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_cls::sc#0 = ((byte*))(word/signed word/dword/signed dword) 1024
Constant inlined divr8u::rem#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined divr8u::quotient#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_str::str#9 = (const string) test_8s::str2
Constant inlined print_char::ch#1 = (byte) '-'
Constant inlined print_char::ch#0 = (byte) '-'
Constant inlined print_str::str#4 = (const string) test_16u::str
Constant inlined print_str::str#3 = (const string) test_8u::str2
Constant inlined div8s::neg#1 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined print_str::str#2 = (const string) test_8u::str1
Constant inlined div8s::neg#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_str::str#1 = (const string) test_8u::str
Constant inlined print_str::str#8 = (const string) test_8s::str1
Constant inlined test_16s::$0 = -(word/signed word/dword/signed dword) 32767
Constant inlined print_str::str#7 = (const string) test_8s::str
Constant inlined test_16s::$1 = -(word/signed word/dword/signed dword) 32767
Constant inlined print_str::str#6 = (const string) test_16u::str2
Constant inlined test_8s::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test_16s::$2 = -(word/signed word/dword/signed dword) 32767
Constant inlined print_str::str#5 = (const string) test_16u::str1
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @26 @end main main::@1 main::@2 main::@3 main::@4 main::@return test_16s test_16s::@1 test_16s::@3 test_16s::@4 test_16s::@5 test_16s::@6 test_16s::@7 test_16s::@8 test_16s::@9 test_16s::@10 test_16s::@11 test_16s::@return print_ln print_ln::@1 print_ln::@return print_sword print_sword::@2 print_sword::@4 print_sword::@1 print_sword::@return print_word print_word::@1 print_word::@return print_byte print_byte::@1 print_byte::@return print_char print_char::@return print_str print_str::@1 print_str::@return print_str::@2 div16s div16s::@2 div16s::@4 div16s::@15 div16s::@11 div16s::@return div16s::@3 div16s::@1 div16u div16u::@2 div16u::@return divr16u divr16u::@1 divr16u::@4 divr16u::@2 divr16u::@5 divr16u::@3 divr16u::@6 divr16u::@return test_8s test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 test_8s::@8 test_8s::@9 test_8s::@10 test_8s::@11 test_8s::@return print_sbyte print_sbyte::@2 print_sbyte::@4 print_sbyte::@1 print_sbyte::@return div8s div8s::@2 div8s::@4 div8s::@15 div8s::@11 div8s::@return div8s::@3 div8s::@1 div8u div8u::@2 div8u::@return divr8u divr8u::@1 divr8u::@4 divr8u::@2 divr8u::@5 divr8u::@3 divr8u::@6 divr8u::@return test_16u test_16u::@1 test_16u::@3 test_16u::@4 test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@9 test_16u::@10 test_16u::@11 test_16u::@return test_8u test_8u::@1 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u::@10 test_8u::@11 test_8u::@return print_cls print_cls::@1 print_cls::@return 
Added new block during phi lifting test_16s::@12(between test_16s::@11 and test_16s::@1)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting print_sword::@5(between print_sword and print_sword::@1)
Added new block during phi lifting div16s::@16(between div16s and div16s::@2)
Fixing phi predecessor for div16s::neg#3 to new block ( div16s -> div16s::@16 ) during phi lifting.
Added new block during phi lifting div16s::@17(between div16s::@2 and div16s::@4)
Added new block during phi lifting div16s::@18(between div16s::@15 and div16s::@return)
Added new block during phi lifting divr16u::@8(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@9(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@10(between divr16u::@2 and divr16u::@3)
Added new block during phi lifting test_8s::@12(between test_8s::@11 and test_8s::@1)
Added new block during phi lifting print_sbyte::@5(between print_sbyte and print_sbyte::@1)
Added new block during phi lifting div8s::@16(between div8s and div8s::@2)
Fixing phi predecessor for div8s::neg#3 to new block ( div8s -> div8s::@16 ) during phi lifting.
Added new block during phi lifting div8s::@17(between div8s::@2 and div8s::@4)
Added new block during phi lifting div8s::@18(between div8s::@15 and div8s::@return)
Added new block during phi lifting divr8u::@8(between divr8u::@3 and divr8u::@1)
Added new block during phi lifting divr8u::@9(between divr8u::@1 and divr8u::@2)
Added new block during phi lifting divr8u::@10(between divr8u::@2 and divr8u::@3)
Added new block during phi lifting test_16u::@12(between test_16u::@11 and test_16u::@1)
Added new block during phi lifting test_8u::@12(between test_8u::@11 and test_8u::@1)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Block Sequence Planned @begin @26 @end main main::@1 main::@2 main::@3 main::@4 main::@return test_16s test_16s::@1 test_16s::@3 test_16s::@4 test_16s::@5 test_16s::@6 test_16s::@7 test_16s::@8 test_16s::@9 test_16s::@10 test_16s::@11 test_16s::@return test_16s::@12 print_ln print_ln::@1 print_ln::@return print_ln::@3 print_sword print_sword::@2 print_sword::@4 print_sword::@1 print_sword::@return print_sword::@5 print_word print_word::@1 print_word::@return print_byte print_byte::@1 print_byte::@return print_char print_char::@return print_str print_str::@1 print_str::@return print_str::@2 div16s div16s::@16 div16s::@2 div16s::@17 div16s::@4 div16s::@15 div16s::@11 div16s::@return div16s::@18 div16s::@3 div16s::@1 div16u div16u::@2 div16u::@return divr16u divr16u::@1 divr16u::@4 divr16u::@2 divr16u::@5 divr16u::@3 divr16u::@6 divr16u::@return divr16u::@8 divr16u::@10 divr16u::@9 test_8s test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 test_8s::@8 test_8s::@9 test_8s::@10 test_8s::@11 test_8s::@return test_8s::@12 print_sbyte print_sbyte::@2 print_sbyte::@4 print_sbyte::@1 print_sbyte::@return print_sbyte::@5 div8s div8s::@16 div8s::@2 div8s::@17 div8s::@4 div8s::@15 div8s::@11 div8s::@return div8s::@18 div8s::@3 div8s::@1 div8u div8u::@2 div8u::@return divr8u divr8u::@1 divr8u::@4 divr8u::@2 divr8u::@5 divr8u::@3 divr8u::@6 divr8u::@return divr8u::@8 divr8u::@10 divr8u::@9 test_16u test_16u::@1 test_16u::@3 test_16u::@4 test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@9 test_16u::@10 test_16u::@11 test_16u::@return test_16u::@12 test_8u test_8u::@1 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u::@10 test_8u::@11 test_8u::@return test_8u::@12 print_cls print_cls::@1 print_cls::@return print_cls::@3 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @26
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of test_16s
Adding NOP phi() at start of test_16s::@4
Adding NOP phi() at start of test_16s::@6
Adding NOP phi() at start of test_16s::@8
Adding NOP phi() at start of test_8s
Adding NOP phi() at start of test_8s::@4
Adding NOP phi() at start of test_8s::@6
Adding NOP phi() at start of test_8s::@8
Adding NOP phi() at start of test_16u
Adding NOP phi() at start of test_16u::@4
Adding NOP phi() at start of test_16u::@6
Adding NOP phi() at start of test_16u::@8
Adding NOP phi() at start of test_8u
Adding NOP phi() at start of test_8u::@4
Adding NOP phi() at start of test_8u::@6
Adding NOP phi() at start of test_8u::@8
Adding NOP phi() at start of print_cls
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to print_cls:5 test_8u:7 test_16u:9 test_8s:11 test_16s:13 
Calls in [test_16s] to div16s:21 print_sword:27 print_str:29 print_sword:33 print_str:35 print_sword:39 print_str:41 print_sword:45 print_ln:47 
Calls in [print_sword] to print_char:62 print_word:69 
Calls in [print_word] to print_byte:77 print_byte:81 
Calls in [print_byte] to print_char:88 print_char:93 
Calls in [div16s] to div16u:121 
Calls in [div16u] to divr16u:142 
Calls in [test_8s] to div8s:180 print_sbyte:186 print_str:188 print_sbyte:192 print_str:194 print_sbyte:198 print_str:200 print_sbyte:204 print_ln:206 
Calls in [print_sbyte] to print_char:214 print_byte:221 
Calls in [div8s] to div8u:236 
Calls in [div8u] to divr8u:257 
Calls in [test_16u] to div16u:296 print_word:302 print_str:304 print_word:308 print_str:310 print_word:314 print_str:316 print_word:320 print_ln:322 
Calls in [test_8u] to div8u:335 print_byte:341 print_str:343 print_byte:347 print_str:349 print_byte:353 print_str:355 print_byte:359 print_ln:361 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 56 initial phi equivalence classes
Coalesced [25] print_sword::w#9 ← print_sword::w#1
Not coalescing [26] print_char_cursor#156 ← print_line_cursor#1
Coalesced [31] print_sword::w#10 ← print_sword::w#2
Coalesced [32] print_char_cursor#157 ← print_char_cursor#126
Coalesced [37] print_sword::w#11 ← print_sword::w#3
Coalesced (already) [38] print_char_cursor#158 ← print_char_cursor#126
Coalesced [43] print_sword::w#12 ← print_sword::w#4
Coalesced (already) [44] print_char_cursor#159 ← print_char_cursor#126
Coalesced [46] print_line_cursor#87 ← print_line_cursor#1
Coalesced [51] test_16s::i#12 ← test_16s::i#1
Coalesced [53] print_line_cursor#91 ← print_line_cursor#39
Coalesced (already) [58] print_line_cursor#92 ← print_line_cursor#1
Coalesced [61] print_char_cursor#177 ← print_char_cursor#129
Coalesced [64] print_sword::w#14 ← print_sword::w#0
Coalesced [65] print_char_cursor#161 ← print_char_cursor#17
Coalesced [68] print_char_cursor#162 ← print_char_cursor#128
Coalesced [71] print_sword::w#13 ← print_sword::w#5
Coalesced [72] print_char_cursor#160 ← print_char_cursor#129
Coalesced [75] print_byte::b#10 ← print_byte::b#1
Coalesced [76] print_char_cursor#168 ← print_char_cursor#132
Coalesced [79] print_byte::b#11 ← print_byte::b#2
Coalesced (already) [80] print_char_cursor#169 ← print_char_cursor#17
Coalesced [86] print_char::ch#5 ← print_char::ch#2
Coalesced (already) [87] print_char_cursor#174 ← print_char_cursor#133
Coalesced [91] print_char::ch#6 ← print_char::ch#3
Coalesced (already) [92] print_char_cursor#175 ← print_char_cursor#17
Coalesced [100] print_str::str#16 ← print_str::str#15
Coalesced (already) [101] print_char_cursor#178 ← print_char_cursor#17
Coalesced [108] print_str::str#17 ← print_str::str#0
Coalesced [109] print_char_cursor#179 ← print_char_cursor#1
Coalesced [115] div16s::neg#10 ← div16s::neg#3
Coalesced [119] div16u::dividend#3 ← div16u::dividend#0
Coalesced [120] div16u::divisor#3 ← div16u::divisor#0
Coalesced [127] div16s::return#6 ← div16s::return#1
Coalesced [128] rem16s#31 ← rem16s#2
Coalesced [136] div16s::neg#9 ← div16s::neg#2
Coalesced [146] divr16u::dividend#8 ← divr16u::dividend#1
Coalesced [153] divr16u::rem#13 ← divr16u::rem#1
Coalesced [160] divr16u::rem#15 ← divr16u::rem#2
Coalesced [161] divr16u::return#6 ← divr16u::quotient#2
Coalesced [167] divr16u::rem#11 ← divr16u::rem#10
Coalesced [168] divr16u::dividend#9 ← divr16u::dividend#0
Coalesced [169] divr16u::quotient#9 ← divr16u::return#0
Coalesced [170] divr16u::i#7 ← divr16u::i#1
Coalesced [171] divr16u::rem#14 ← divr16u::rem#5
Coalesced [172] divr16u::return#5 ← divr16u::quotient#1
Coalesced [173] divr16u::rem#12 ← divr16u::rem#0
Coalesced [184] print_sbyte::b#9 ← print_sbyte::b#1
Not coalescing [185] print_char_cursor#180 ← print_line_cursor#1
Coalesced [190] print_sbyte::b#10 ← print_sbyte::b#2
Coalesced [191] print_char_cursor#181 ← print_char_cursor#126
Coalesced [196] print_sbyte::b#11 ← print_sbyte::b#3
Coalesced (already) [197] print_char_cursor#182 ← print_char_cursor#126
Coalesced [202] print_sbyte::b#12 ← print_sbyte::b#4
Coalesced (already) [203] print_char_cursor#183 ← print_char_cursor#126
Coalesced (already) [205] print_line_cursor#89 ← print_line_cursor#1
Coalesced [210] test_8s::i#12 ← test_8s::i#1
Coalesced (already) [213] print_char_cursor#176 ← print_char_cursor#131
Coalesced [216] print_sbyte::b#14 ← print_sbyte::b#0
Coalesced [217] print_char_cursor#185 ← print_char_cursor#17
Coalesced (already) [220] print_char_cursor#167 ← print_char_cursor#130
Coalesced [223] print_sbyte::b#13 ← print_sbyte::b#5
Coalesced (already) [224] print_char_cursor#184 ← print_char_cursor#131
Coalesced [230] div8s::neg#10 ← div8s::neg#3
Coalesced [234] div8u::dividend#3 ← div8u::dividend#0
Coalesced [235] div8u::divisor#3 ← div8u::divisor#0
Coalesced [242] div8s::return#6 ← div8s::return#1
Coalesced [243] rem8s#32 ← rem8s#2
Coalesced [251] div8s::neg#9 ← div8s::neg#2
Coalesced [261] divr8u::dividend#8 ← divr8u::dividend#0
Coalesced [267] divr8u::rem#13 ← divr8u::rem#2
Coalesced [274] divr8u::rem#15 ← divr8u::rem#3
Coalesced [275] divr8u::return#6 ← divr8u::quotient#2
Coalesced [281] divr8u::rem#11 ← divr8u::rem#10
Coalesced [282] divr8u::dividend#9 ← divr8u::dividend#1
Coalesced [283] divr8u::quotient#9 ← divr8u::return#1
Coalesced [284] divr8u::i#7 ← divr8u::i#1
Coalesced [285] divr8u::rem#14 ← divr8u::rem#5
Coalesced [286] divr8u::return#5 ← divr8u::quotient#1
Coalesced [287] divr8u::rem#12 ← divr8u::rem#1
Coalesced [294] div16u::dividend#4 ← div16u::dividend#1
Coalesced [295] div16u::divisor#4 ← div16u::divisor#1
Coalesced [300] print_word::w#8 ← print_word::w#1
Not coalescing [301] print_char_cursor#163 ← print_line_cursor#1
Coalesced [306] print_word::w#9 ← print_word::w#2
Coalesced (already) [307] print_char_cursor#164 ← print_char_cursor#126
Coalesced [312] print_word::w#10 ← print_word::w#3
Coalesced (already) [313] print_char_cursor#165 ← print_char_cursor#126
Coalesced [318] print_word::w#11 ← print_word::w#4
Coalesced (already) [319] print_char_cursor#166 ← print_char_cursor#126
Coalesced (already) [321] print_line_cursor#88 ← print_line_cursor#1
Coalesced [326] test_16u::i#12 ← test_16u::i#1
Coalesced [333] div8u::dividend#4 ← div8u::dividend#1
Coalesced [334] div8u::divisor#4 ← div8u::divisor#1
Coalesced [339] print_byte::b#12 ← print_byte::b#3
Coalesced [340] print_char_cursor#170 ← print_char_cursor#135
Coalesced [345] print_byte::b#13 ← print_byte::b#4
Coalesced (already) [346] print_char_cursor#171 ← print_char_cursor#126
Coalesced [351] print_byte::b#14 ← print_byte::b#5
Coalesced (already) [352] print_char_cursor#172 ← print_char_cursor#126
Coalesced [357] print_byte::b#15 ← print_byte::b#6
Coalesced (already) [358] print_char_cursor#173 ← print_char_cursor#126
Coalesced [360] print_line_cursor#90 ← print_line_cursor#41
Coalesced [365] test_8u::i#12 ← test_8u::i#1
Not coalescing [366] print_char_cursor#186 ← print_line_cursor#1
Coalesced (already) [367] print_line_cursor#93 ← print_line_cursor#1
Coalesced [374] print_cls::sc#3 ← print_cls::sc#1
Coalesced down to 35 phi equivalence classes
Culled Empty Block (label) test_16s::@12
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_sword::@5
Culled Empty Block (label) divr16u::@8
Culled Empty Block (label) divr16u::@10
Culled Empty Block (label) divr16u::@9
Culled Empty Block (label) test_8s::@12
Culled Empty Block (label) print_sbyte::@5
Culled Empty Block (label) divr8u::@8
Culled Empty Block (label) divr8u::@10
Culled Empty Block (label) divr8u::@9
Culled Empty Block (label) test_16u::@12
Culled Empty Block (label) print_cls::@3
Block Sequence Planned @begin @26 @end main main::@1 main::@2 main::@3 main::@4 main::@return test_16s test_16s::@1 test_16s::@3 test_16s::@4 test_16s::@5 test_16s::@6 test_16s::@7 test_16s::@8 test_16s::@9 test_16s::@10 test_16s::@11 test_16s::@return print_ln print_ln::@1 print_ln::@return print_sword print_sword::@2 print_sword::@4 print_sword::@1 print_sword::@return print_word print_word::@1 print_word::@return print_byte print_byte::@1 print_byte::@return print_char print_char::@return print_str print_str::@1 print_str::@return print_str::@2 div16s div16s::@16 div16s::@2 div16s::@17 div16s::@4 div16s::@15 div16s::@11 div16s::@return div16s::@18 div16s::@3 div16s::@1 div16u div16u::@2 div16u::@return divr16u divr16u::@1 divr16u::@4 divr16u::@2 divr16u::@5 divr16u::@3 divr16u::@6 divr16u::@return test_8s test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 test_8s::@8 test_8s::@9 test_8s::@10 test_8s::@11 test_8s::@return print_sbyte print_sbyte::@2 print_sbyte::@4 print_sbyte::@1 print_sbyte::@return div8s div8s::@16 div8s::@2 div8s::@17 div8s::@4 div8s::@15 div8s::@11 div8s::@return div8s::@18 div8s::@3 div8s::@1 div8u div8u::@2 div8u::@return divr8u divr8u::@1 divr8u::@4 divr8u::@2 divr8u::@5 divr8u::@3 divr8u::@6 divr8u::@return test_16u test_16u::@1 test_16u::@3 test_16u::@4 test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@9 test_16u::@10 test_16u::@11 test_16u::@return test_8u test_8u::@1 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u::@10 test_8u::@11 test_8u::@return test_8u::@12 print_cls print_cls::@1 print_cls::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @26
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of test_16s
Adding NOP phi() at start of test_16s::@4
Adding NOP phi() at start of test_16s::@6
Adding NOP phi() at start of test_16s::@8
Adding NOP phi() at start of test_16s::@10
Adding NOP phi() at start of print_sword::@2
Adding NOP phi() at start of divr16u
Adding NOP phi() at start of test_8s
Adding NOP phi() at start of test_8s::@4
Adding NOP phi() at start of test_8s::@6
Adding NOP phi() at start of test_8s::@8
Adding NOP phi() at start of test_8s::@10
Adding NOP phi() at start of print_sbyte::@2
Adding NOP phi() at start of divr8u
Adding NOP phi() at start of test_16u
Adding NOP phi() at start of test_16u::@4
Adding NOP phi() at start of test_16u::@6
Adding NOP phi() at start of test_16u::@8
Adding NOP phi() at start of test_16u::@10
Adding NOP phi() at start of test_8u
Adding NOP phi() at start of test_8u::@4
Adding NOP phi() at start of test_8u::@6
Adding NOP phi() at start of test_8u::@8
Adding NOP phi() at start of test_8u::@10
Adding NOP phi() at start of print_cls
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@26
@26: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @26
  [3] phi() [ ] ( )
main: scope:[main]  from @26
  [4] phi() [ ] ( main:2 [ ] )
  [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi() [ ] ( main:2 [ ] )
  [7] call test_8u param-assignment [ print_line_cursor#1 ] ( main:2 [ print_line_cursor#1 ] )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi() [ print_line_cursor#1 ] ( main:2 [ print_line_cursor#1 ] )
  [9] call test_16u param-assignment [ print_line_cursor#1 ] ( main:2 [ print_line_cursor#1 ] )
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] phi() [ print_line_cursor#1 ] ( main:2 [ print_line_cursor#1 ] )
  [11] call test_8s param-assignment [ print_line_cursor#1 ] ( main:2 [ print_line_cursor#1 ] )
  to:main::@4
main::@4: scope:[main]  from main::@3
  [12] phi() [ print_line_cursor#1 ] ( main:2 [ print_line_cursor#1 ] )
  [13] call test_16s param-assignment [ ] ( main:2 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@4
  [14] return  [ ] ( main:2 [ ] )
  to:@return
test_16s: scope:[test_16s]  from main::@4
  [15] phi() [ print_line_cursor#1 ] ( main:2::test_16s:13 [ print_line_cursor#1 ] )
  to:test_16s::@1
test_16s::@1: scope:[test_16s]  from test_16s test_16s::@11
  [16] (byte) test_16s::i#10 ← phi( test_16s/(byte/signed byte/word/signed word/dword/signed dword) 0 test_16s::@11/(byte) test_16s::i#1 ) [ test_16s::i#10 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 ] )
  [17] (signed word) test_16s::dividend#0 ← *((const signed word[]) test_16s::dividends#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 print_line_cursor#1 ] )
  [18] (signed word) test_16s::divisor#0 ← *((const signed word[]) test_16s::divisors#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 ] )
  [19] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#1 ] )
  [20] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#1 ] )
  [21] call div16s param-assignment [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 print_line_cursor#1 rem16s#3 ] )
  [22] (signed word) div16s::return#3 ← (signed word) div16s::return#2 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 print_line_cursor#1 rem16s#3 ] )
  to:test_16s::@3
test_16s::@3: scope:[test_16s]  from test_16s::@1
  [23] (signed word) test_16s::res#0 ← (signed word) div16s::return#3 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 ] )
  [24] (signed word) print_sword::w#1 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_line_cursor#1 rem16s#3 ] )
  [25] (byte*~) print_char_cursor#156 ← (byte*) print_line_cursor#1 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_char_cursor#156 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_char_cursor#156 print_line_cursor#1 rem16s#3 ] )
  [26] call print_sword param-assignment [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] )
  to:test_16s::@4
test_16s::@4: scope:[test_16s]  from test_16s::@3
  [27] phi() [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] )
  [28] call print_str param-assignment [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] )
  to:test_16s::@5
test_16s::@5: scope:[test_16s]  from test_16s::@4
  [29] (signed word) print_sword::w#2 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 print_sword::w#2 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 print_sword::w#2 rem16s#3 print_char_cursor#126 ] )
  [30] call print_sword param-assignment [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] )
  to:test_16s::@6
test_16s::@6: scope:[test_16s]  from test_16s::@5
  [31] phi() [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] )
  [32] call print_str param-assignment [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] )
  to:test_16s::@7
test_16s::@7: scope:[test_16s]  from test_16s::@6
  [33] (signed word) print_sword::w#3 ← (signed word) test_16s::res#0 [ test_16s::i#10 print_line_cursor#1 print_sword::w#3 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_sword::w#3 rem16s#3 print_char_cursor#126 ] )
  [34] call print_sword param-assignment [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] )
  to:test_16s::@8
test_16s::@8: scope:[test_16s]  from test_16s::@7
  [35] phi() [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] )
  [36] call print_str param-assignment [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] )
  to:test_16s::@9
test_16s::@9: scope:[test_16s]  from test_16s::@8
  [37] (signed word) print_sword::w#4 ← (signed word) rem16s#3 [ test_16s::i#10 print_line_cursor#1 print_sword::w#4 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_sword::w#4 print_char_cursor#126 ] )
  [38] call print_sword param-assignment [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] )
  to:test_16s::@10
test_16s::@10: scope:[test_16s]  from test_16s::@9
  [39] phi() [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] )
  [40] call print_ln param-assignment [ test_16s::i#10 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 ] )
  to:test_16s::@11
test_16s::@11: scope:[test_16s]  from test_16s::@10
  [41] (byte) test_16s::i#1 ← (byte) test_16s::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ test_16s::i#1 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#1 print_line_cursor#1 ] )
  [42] if((byte) test_16s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16s::@1 [ test_16s::i#1 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#1 print_line_cursor#1 ] )
  to:test_16s::@return
test_16s::@return: scope:[test_16s]  from test_16s::@11
  [43] return  [ ] ( main:2::test_16s:13 [ ] )
  to:@return
print_ln: scope:[print_ln]  from test_16s::@10 test_16u::@10 test_8s::@10 test_8u::@10
  [44] (byte*) print_line_cursor#39 ← phi( test_16s::@10/(byte*) print_line_cursor#1 test_16u::@10/(byte*) print_line_cursor#1 test_8s::@10/(byte*) print_line_cursor#1 test_8u::@10/(byte*) print_line_cursor#41 ) [ print_line_cursor#39 print_char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 print_line_cursor#39 print_char_cursor#17 ] main:2::test_8s:11::print_ln:156 [ test_8s::i#10 print_line_cursor#39 print_char_cursor#17 ] main:2::test_16u:9::print_ln:241 [ test_16u::i#10 print_line_cursor#39 print_char_cursor#17 ] main:2::test_8u:7::print_ln:269 [ test_8u::i#10 print_line_cursor#39 print_char_cursor#17 ] )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [45] (byte*) print_line_cursor#20 ← phi( print_ln/(byte*) print_line_cursor#39 print_ln::@1/(byte*) print_line_cursor#1 ) [ print_line_cursor#20 print_char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 print_line_cursor#20 print_char_cursor#17 ] main:2::test_8s:11::print_ln:156 [ test_8s::i#10 print_line_cursor#20 print_char_cursor#17 ] main:2::test_16u:9::print_ln:241 [ test_16u::i#10 print_line_cursor#20 print_char_cursor#17 ] main:2::test_8u:7::print_ln:269 [ test_8u::i#10 print_line_cursor#20 print_char_cursor#17 ] )
  [46] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#20 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#1 print_char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8s:11::print_ln:156 [ test_8s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_ln:241 [ test_16u::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8u:7::print_ln:269 [ test_8u::i#10 print_line_cursor#1 print_char_cursor#17 ] )
  [47] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#17) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8s:11::print_ln:156 [ test_8s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_ln:241 [ test_16u::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8u:7::print_ln:269 [ test_8u::i#10 print_line_cursor#1 print_char_cursor#17 ] )
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [48] return  [ print_line_cursor#1 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 print_line_cursor#1 ] main:2::test_8s:11::print_ln:156 [ test_8s::i#10 print_line_cursor#1 ] main:2::test_16u:9::print_ln:241 [ test_16u::i#10 print_line_cursor#1 ] main:2::test_8u:7::print_ln:269 [ test_8u::i#10 print_line_cursor#1 ] )
  to:@return
print_sword: scope:[print_sword]  from test_16s::@3 test_16s::@5 test_16s::@7 test_16s::@9
  [49] (byte*) print_char_cursor#129 ← phi( test_16s::@3/(byte*~) print_char_cursor#156 test_16s::@5/(byte*) print_char_cursor#126 test_16s::@7/(byte*) print_char_cursor#126 test_16s::@9/(byte*) print_char_cursor#126 ) [ print_sword::w#5 print_char_cursor#129 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#129 ] )
  [49] (signed word) print_sword::w#5 ← phi( test_16s::@3/(signed word) print_sword::w#1 test_16s::@5/(signed word) print_sword::w#2 test_16s::@7/(signed word) print_sword::w#3 test_16s::@9/(signed word) print_sword::w#4 ) [ print_sword::w#5 print_char_cursor#129 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#129 ] )
  [50] if((signed word) print_sword::w#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 [ print_sword::w#5 print_char_cursor#129 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#129 ] )
  to:print_sword::@2
print_sword::@2: scope:[print_sword]  from print_sword
  [51] phi() [ print_sword::w#5 print_char_cursor#129 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#129 ] )
  [52] call print_char param-assignment [ print_char_cursor#17 print_sword::w#5 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_sword::w#5 ] )
  to:print_sword::@4
print_sword::@4: scope:[print_sword]  from print_sword::@2
  [53] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#5 [ print_char_cursor#17 print_sword::w#0 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_sword::w#0 ] )
  to:print_sword::@1
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@4
  [54] (byte*) print_char_cursor#128 ← phi( print_sword/(byte*) print_char_cursor#129 print_sword::@4/(byte*) print_char_cursor#17 ) [ print_sword::w#6 print_char_cursor#128 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#6 print_char_cursor#128 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#6 print_char_cursor#128 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#6 print_char_cursor#128 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_sword::w#6 print_char_cursor#128 ] )
  [54] (signed word) print_sword::w#6 ← phi( print_sword/(signed word) print_sword::w#5 print_sword::@4/(signed word) print_sword::w#0 ) [ print_sword::w#6 print_char_cursor#128 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#6 print_char_cursor#128 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#6 print_char_cursor#128 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#6 print_char_cursor#128 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_sword::w#6 print_char_cursor#128 ] )
  [55] (word~) print_word::w#7 ← (word)(signed word) print_sword::w#6 [ print_char_cursor#128 print_word::w#7 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#128 print_word::w#7 ] )
  [56] call print_word param-assignment [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] )
  to:print_sword::@return
print_sword::@return: scope:[print_sword]  from print_sword::@1
  [57] return  [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] )
  to:@return
print_word: scope:[print_word]  from print_sword::@1 test_16u::@3 test_16u::@5 test_16u::@7 test_16u::@9
  [58] (byte*) print_char_cursor#132 ← phi( print_sword::@1/(byte*) print_char_cursor#128 test_16u::@3/(byte*~) print_char_cursor#163 test_16u::@5/(byte*) print_char_cursor#126 test_16u::@7/(byte*) print_char_cursor#126 test_16u::@9/(byte*) print_char_cursor#126 ) [ print_word::w#5 print_char_cursor#132 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#132 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#132 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#132 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#132 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#132 ] )
  [58] (word) print_word::w#5 ← phi( print_sword::@1/(word~) print_word::w#7 test_16u::@3/(word) print_word::w#1 test_16u::@5/(word) print_word::w#2 test_16u::@7/(word) print_word::w#3 test_16u::@9/(word) print_word::w#4 ) [ print_word::w#5 print_char_cursor#132 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#132 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#132 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#132 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#132 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#132 ] )
  [59] (byte) print_byte::b#1 ← > (word) print_word::w#5 [ print_word::w#5 print_char_cursor#132 print_byte::b#1 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] )
  [60] call print_byte param-assignment [ print_char_cursor#17 print_word::w#5 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_word::w#5 ] )
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [61] (byte) print_byte::b#2 ← < (word) print_word::w#5 [ print_char_cursor#17 print_byte::b#2 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_byte::b#2 ] )
  [62] call print_byte param-assignment [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] )
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [63] return  [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] )
  to:@return
print_byte: scope:[print_byte]  from print_sbyte::@1 print_word print_word::@1 test_8u::@3 test_8u::@5 test_8u::@7 test_8u::@9
  [64] (byte*) print_char_cursor#133 ← phi( print_sbyte::@1/(byte*) print_char_cursor#130 print_word/(byte*) print_char_cursor#132 print_word::@1/(byte*) print_char_cursor#17 test_8u::@3/(byte*) print_char_cursor#135 test_8u::@5/(byte*) print_char_cursor#126 test_8u::@7/(byte*) print_char_cursor#126 test_8u::@9/(byte*) print_char_cursor#126 ) [ print_byte::b#7 print_char_cursor#133 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#133 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#133 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#133 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#133 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#133 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#133 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#133 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#133 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#133 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#133 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#133 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#133 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#133 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#133 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#133 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#133 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#133 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#133 ] )
  [64] (byte) print_byte::b#7 ← phi( print_sbyte::@1/(byte~) print_byte::b#9 print_word/(byte) print_byte::b#1 print_word::@1/(byte) print_byte::b#2 test_8u::@3/(byte) print_byte::b#3 test_8u::@5/(byte) print_byte::b#4 test_8u::@7/(byte) print_byte::b#5 test_8u::@9/(byte) print_byte::b#6 ) [ print_byte::b#7 print_char_cursor#133 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#133 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#133 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#133 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#133 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#133 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#133 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#133 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#133 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#133 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#133 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#133 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#133 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#133 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#133 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#133 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#133 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#133 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#133 ] )
  [65] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#7 print_char_cursor#133 print_byte::$0 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] )
  [66] (byte) print_char::ch#2 ← *((const string) print_hextab#0 + (byte~) print_byte::$0) [ print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] )
  [67] call print_char param-assignment [ print_char_cursor#17 print_byte::b#7 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 print_byte::b#7 ] )
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [68] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ print_char_cursor#17 print_byte::$2 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 print_byte::$2 ] )
  [69] (byte) print_char::ch#3 ← *((const string) print_hextab#0 + (byte~) print_byte::$2) [ print_char_cursor#17 print_char::ch#3 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 print_char::ch#3 ] )
  [70] call print_char param-assignment [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 ] )
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [71] return  [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 ] )
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sbyte::@2 print_sword::@2
  [72] (byte*) print_char_cursor#80 ← phi( print_byte/(byte*) print_char_cursor#133 print_byte::@1/(byte*) print_char_cursor#17 print_sbyte::@2/(byte*) print_char_cursor#131 print_sword::@2/(byte*) print_char_cursor#129 ) [ print_char::ch#4 print_char_cursor#80 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_8u:7::print_byte:255::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_8u:7::print_byte:259::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_8u:7::print_byte:263::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_8u:7::print_byte:267::print_char:67 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 print_char::ch#4 print_char_cursor#80 ] main:2::test_8u:7::print_byte:255::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char::ch#4 print_char_cursor#80 ] main:2::test_8u:7::print_byte:259::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char::ch#4 print_char_cursor#80 ] main:2::test_8u:7::print_byte:263::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char::ch#4 print_char_cursor#80 ] main:2::test_8u:7::print_byte:267::print_char:70 [ print_line_cursor#41 test_8u::i#10 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_char:163 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_char:163 [ print_line_cursor#1 test_8s::i#10 print_sbyte::b#5 print_char::ch#4 print_char_cursor#80 ] )
  [72] (byte) print_char::ch#4 ← phi( print_byte/(byte) print_char::ch#2 print_byte::@1/(byte) print_char::ch#3 print_sbyte::@2/(byte) '-' print_sword::@2/(byte) '-' ) [ print_char::ch#4 print_char_cursor#80 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_8u:7::print_byte:255::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_8u:7::print_byte:259::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_8u:7::print_byte:263::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_8u:7::print_byte:267::print_char:67 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char::ch#4 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char::ch#4 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 print_char::ch#4 print_char_cursor#80 ] main:2::test_8u:7::print_byte:255::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char::ch#4 print_char_cursor#80 ] main:2::test_8u:7::print_byte:259::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char::ch#4 print_char_cursor#80 ] main:2::test_8u:7::print_byte:263::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char::ch#4 print_char_cursor#80 ] main:2::test_8u:7::print_byte:267::print_char:70 [ print_line_cursor#41 test_8u::i#10 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_char:163 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char::ch#4 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_char:163 [ print_line_cursor#1 test_8s::i#10 print_sbyte::b#5 print_char::ch#4 print_char_cursor#80 ] )
  [73] *((byte*) print_char_cursor#80) ← (byte) print_char::ch#4 [ print_char_cursor#80 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:255::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:259::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:263::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:267::print_char:67 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#80 ] main:2::test_8u:7::print_byte:255::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#80 ] main:2::test_8u:7::print_byte:259::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#80 ] main:2::test_8u:7::print_byte:263::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#80 ] main:2::test_8u:7::print_byte:267::print_char:70 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_char:163 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_char:163 [ print_line_cursor#1 test_8s::i#10 print_sbyte::b#5 print_char_cursor#80 ] )
  [74] (byte*) print_char_cursor#17 ← ++ (byte*) print_char_cursor#80 [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267::print_char:67 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267::print_char:70 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_char:163 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_char:163 [ print_line_cursor#1 test_8s::i#10 print_sbyte::b#5 print_char_cursor#17 ] )
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [75] return  [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267::print_char:67 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267::print_char:70 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_char:163 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_char:163 [ print_line_cursor#1 test_8s::i#10 print_sbyte::b#5 print_char_cursor#17 ] )
  to:@return
print_str: scope:[print_str]  from test_16s::@4 test_16s::@6 test_16s::@8 test_16u::@4 test_16u::@6 test_16u::@8 test_8s::@4 test_8s::@6 test_8s::@8 test_8u::@4 test_8u::@6 test_8u::@8
  [76] (byte*) print_str::str#15 ← phi( test_16s::@4/(const string) test_16s::str test_16s::@6/(const string) test_16s::str1 test_16s::@8/(const string) test_16s::str2 test_16u::@4/(const string) test_16u::str test_16u::@6/(const string) test_16u::str1 test_16u::@8/(const string) test_16u::str2 test_8s::@4/(const string) test_8s::str test_8s::@6/(const string) test_8s::str1 test_8s::@8/(const string) test_8s::str2 test_8u::@4/(const string) test_8u::str test_8u::@6/(const string) test_8u::str1 test_8u::@8/(const string) test_8u::str2 ) [ print_char_cursor#17 print_str::str#15 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_str::str#15 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_str::str#15 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_str::str#15 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_str::str#15 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_str::str#15 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_str::str#15 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_str::str#15 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_str::str#15 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_str::str#15 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 print_str::str#15 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 print_str::str#15 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 print_str::str#15 ] )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [77] (byte*) print_char_cursor#126 ← phi( print_str/(byte*) print_char_cursor#17 print_str::@2/(byte*) print_char_cursor#1 ) [ print_char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#126 print_str::str#13 ] )
  [77] (byte*) print_str::str#13 ← phi( print_str/(byte*) print_str::str#15 print_str::@2/(byte*) print_str::str#0 ) [ print_char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#126 print_str::str#13 ] )
  [78] if(*((byte*) print_str::str#13)!=(byte) '@') goto print_str::@2 [ print_char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#126 print_str::str#13 ] )
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [79] return  [ print_char_cursor#126 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#126 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#126 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#126 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#126 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#126 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#126 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#126 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#126 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#126 ] )
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [80] *((byte*) print_char_cursor#126) ← *((byte*) print_str::str#13) [ print_char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#126 print_str::str#13 ] )
  [81] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#126 [ print_str::str#13 print_char_cursor#1 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_str::str#13 print_char_cursor#1 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_str::str#13 print_char_cursor#1 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_str::str#13 print_char_cursor#1 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_str::str#13 print_char_cursor#1 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_str::str#13 print_char_cursor#1 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_str::str#13 print_char_cursor#1 ] )
  [82] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#13 [ print_str::str#0 print_char_cursor#1 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_str::str#0 print_char_cursor#1 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_str::str#0 print_char_cursor#1 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_str::str#0 print_char_cursor#1 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_str::str#0 print_char_cursor#1 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_str::str#0 print_char_cursor#1 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_str::str#0 print_char_cursor#1 ] )
  to:print_str::@1
div16s: scope:[div16s]  from test_16s::@1
  [83] if((signed word) div16s::dividend#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@1 [ div16s::dividend#0 div16s::divisor#0 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::dividend#0 div16s::divisor#0 ] )
  to:div16s::@16
div16s::@16: scope:[div16s]  from div16s
  [84] (word~) div16s::dividendu#8 ← (word)(signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::dividendu#8 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::dividendu#8 ] )
  to:div16s::@2
div16s::@2: scope:[div16s]  from div16s::@1 div16s::@16
  [85] (word) div16s::dividendu#3 ← phi( div16s::@1/(word~) div16s::dividendu#7 div16s::@16/(word~) div16s::dividendu#8 ) [ div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 ] )
  [85] (byte) div16s::neg#3 ← phi( div16s::@1/(byte/signed byte/word/signed word/dword/signed dword) 1 div16s::@16/(byte/signed byte/word/signed word/dword/signed dword) 0 ) [ div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 ] )
  [86] if((signed word) div16s::divisor#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@3 [ div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 ] )
  to:div16s::@17
div16s::@17: scope:[div16s]  from div16s::@2
  [87] (word~) div16s::divisoru#5 ← (word)(signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::divisoru#5 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::divisoru#5 ] )
  to:div16s::@4
div16s::@4: scope:[div16s]  from div16s::@17 div16s::@3
  [88] (byte) div16s::neg#4 ← phi( div16s::@3/(byte) div16s::neg#2 div16s::@17/(byte) div16s::neg#3 ) [ div16s::dividendu#3 div16s::divisoru#3 div16s::neg#4 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::dividendu#3 div16s::divisoru#3 div16s::neg#4 ] )
  [88] (word) div16s::divisoru#3 ← phi( div16s::@3/(word~) div16s::divisoru#4 div16s::@17/(word~) div16s::divisoru#5 ) [ div16s::dividendu#3 div16s::divisoru#3 div16s::neg#4 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::dividendu#3 div16s::divisoru#3 div16s::neg#4 ] )
  [89] (word) div16u::dividend#0 ← (word) div16s::dividendu#3 [ div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 ] )
  [90] (word) div16u::divisor#0 ← (word) div16s::divisoru#3 [ div16s::neg#4 div16u::dividend#0 div16u::divisor#0 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::dividend#0 div16u::divisor#0 ] )
  [91] call div16u param-assignment [ div16s::neg#4 div16u::return#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::return#0 rem16u#1 ] )
  [92] (word) div16u::return#2 ← (word) div16u::return#0 [ div16s::neg#4 div16u::return#2 rem16u#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::return#2 rem16u#1 ] )
  to:div16s::@15
div16s::@15: scope:[div16s]  from div16s::@4
  [93] (word) div16s::resultu#0 ← (word) div16u::return#2 [ div16s::neg#4 div16s::resultu#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16s::resultu#0 rem16u#1 ] )
  [94] if((byte) div16s::neg#4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@18 [ div16s::resultu#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::resultu#0 rem16u#1 ] )
  to:div16s::@11
div16s::@11: scope:[div16s]  from div16s::@15
  [95] (signed word) rem16s#2 ← - (signed word)(word) rem16u#1 [ div16s::resultu#0 rem16s#2 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::resultu#0 rem16s#2 ] )
  [96] (signed word) div16s::return#1 ← - (signed word)(word) div16s::resultu#0 [ rem16s#2 div16s::return#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 rem16s#2 div16s::return#1 ] )
  to:div16s::@return
div16s::@return: scope:[div16s]  from div16s::@11 div16s::@18
  [97] (signed word) rem16s#3 ← phi( div16s::@11/(signed word) rem16s#2 div16s::@18/(signed word~) rem16s#32 ) [ div16s::return#2 rem16s#3 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::return#2 rem16s#3 ] )
  [97] (signed word) div16s::return#2 ← phi( div16s::@11/(signed word) div16s::return#1 div16s::@18/(signed word~) div16s::return#7 ) [ div16s::return#2 rem16s#3 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::return#2 rem16s#3 ] )
  [98] return  [ div16s::return#2 rem16s#3 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::return#2 rem16s#3 ] )
  to:@return
div16s::@18: scope:[div16s]  from div16s::@15
  [99] (signed word~) div16s::return#7 ← (signed word)(word) div16s::resultu#0 [ rem16u#1 div16s::return#7 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 rem16u#1 div16s::return#7 ] )
  [100] (signed word~) rem16s#32 ← (signed word)(word) rem16u#1 [ div16s::return#7 rem16s#32 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::return#7 rem16s#32 ] )
  to:div16s::@return
div16s::@3: scope:[div16s]  from div16s::@2
  [101] (signed word~) div16s::$6 ← - (signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::$6 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::$6 ] )
  [102] (byte) div16s::neg#2 ← (byte) div16s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16s::dividendu#3 div16s::neg#2 div16s::$6 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::dividendu#3 div16s::neg#2 div16s::$6 ] )
  [103] (word~) div16s::divisoru#4 ← (word)(signed word~) div16s::$6 [ div16s::dividendu#3 div16s::divisoru#4 div16s::neg#2 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::dividendu#3 div16s::divisoru#4 div16s::neg#2 ] )
  to:div16s::@4
div16s::@1: scope:[div16s]  from div16s
  [104] (signed word~) div16s::$2 ← - (signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::$2 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::$2 ] )
  [105] (word~) div16s::dividendu#7 ← (word)(signed word~) div16s::$2 [ div16s::divisor#0 div16s::dividendu#7 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::dividendu#7 ] )
  to:div16s::@2
div16u: scope:[div16u]  from div16s::@4 test_16u::@1
  [106] (word) div16u::divisor#2 ← phi( div16s::@4/(word) div16u::divisor#0 test_16u::@1/(word) div16u::divisor#1 ) [ div16u::dividend#2 div16u::divisor#2 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::dividend#2 div16u::divisor#2 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#2 div16u::divisor#2 ] )
  [106] (word) div16u::dividend#2 ← phi( div16s::@4/(word) div16u::dividend#0 test_16u::@1/(word) div16u::dividend#1 ) [ div16u::dividend#2 div16u::divisor#2 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::dividend#2 div16u::divisor#2 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#2 div16u::divisor#2 ] )
  [107] (word) divr16u::dividend#1 ← (word) div16u::dividend#2 [ div16u::divisor#2 divr16u::dividend#1 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::divisor#2 divr16u::dividend#1 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::divisor#2 divr16u::dividend#1 ] )
  [108] (word) divr16u::divisor#0 ← (word) div16u::divisor#2 [ divr16u::dividend#1 divr16u::divisor#0 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::dividend#1 divr16u::divisor#0 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#1 divr16u::divisor#0 ] )
  [109] call divr16u param-assignment [ rem16u#1 divr16u::return#0 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 rem16u#1 divr16u::return#0 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#0 ] )
  [110] (word) divr16u::return#2 ← (word) divr16u::return#0 [ rem16u#1 divr16u::return#2 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 rem16u#1 divr16u::return#2 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#2 ] )
  to:div16u::@2
div16u::@2: scope:[div16u]  from div16u
  [111] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::return#0 rem16u#1 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 rem16u#1 ] )
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@2
  [112] return  [ div16u::return#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::return#0 rem16u#1 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 rem16u#1 ] )
  to:@return
divr16u: scope:[divr16u]  from div16u
  [113] phi() [ divr16u::dividend#1 divr16u::divisor#0 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::dividend#1 divr16u::divisor#0 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#1 divr16u::divisor#0 ] )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [114] (byte) divr16u::i#2 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(byte) divr16u::i#1 ) [ divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] )
  [114] (word) divr16u::quotient#3 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(word) divr16u::return#0 ) [ divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] )
  [114] (word) divr16u::dividend#2 ← phi( divr16u/(word) divr16u::dividend#1 divr16u::@3/(word) divr16u::dividend#0 ) [ divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] )
  [114] (word) divr16u::rem#4 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(word) divr16u::rem#10 ) [ divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] )
  [115] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] )
  [116] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] )
  [117] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] )
  [118] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] )
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [119] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] )
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [120] (word) divr16u::rem#5 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 ) [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#5 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#5 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#5 ] )
  [121] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 ] )
  [122] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] )
  [123] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] )
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [124] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#2 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#2 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#2 ] )
  [125] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (word) divr16u::divisor#0 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] )
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [126] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 ) [ divr16u::divisor#0 divr16u::return#0 divr16u::i#2 divr16u::rem#10 divr16u::dividend#0 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::return#0 divr16u::i#2 divr16u::rem#10 divr16u::dividend#0 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::return#0 divr16u::i#2 divr16u::rem#10 divr16u::dividend#0 ] )
  [126] (word) divr16u::rem#10 ← phi( divr16u::@2/(word) divr16u::rem#5 divr16u::@5/(word) divr16u::rem#2 ) [ divr16u::divisor#0 divr16u::return#0 divr16u::i#2 divr16u::rem#10 divr16u::dividend#0 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::return#0 divr16u::i#2 divr16u::rem#10 divr16u::dividend#0 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::return#0 divr16u::i#2 divr16u::rem#10 divr16u::dividend#0 ] )
  [127] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 [ divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] )
  [128] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto divr16u::@1 [ divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] )
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [129] (word) rem16u#1 ← (word) divr16u::rem#10 [ rem16u#1 divr16u::return#0 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 rem16u#1 divr16u::return#0 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#0 ] )
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [130] return  [ rem16u#1 divr16u::return#0 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 rem16u#1 divr16u::return#0 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#0 ] )
  to:@return
test_8s: scope:[test_8s]  from main::@3
  [131] phi() [ print_line_cursor#1 ] ( main:2::test_8s:11 [ print_line_cursor#1 ] )
  to:test_8s::@1
test_8s::@1: scope:[test_8s]  from test_8s test_8s::@11
  [132] (byte) test_8s::i#10 ← phi( test_8s/(byte/signed byte/word/signed word/dword/signed dword) 0 test_8s::@11/(byte) test_8s::i#1 ) [ print_line_cursor#1 test_8s::i#10 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 ] )
  [133] (signed byte) test_8s::dividend#0 ← *((const signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#10) [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 ] )
  [134] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 ] )
  [135] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 ] )
  [136] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] )
  [137] call div8s param-assignment [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 rem8s#3 ] )
  [138] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 rem8s#3 ] )
  to:test_8s::@3
test_8s::@3: scope:[test_8s]  from test_8s::@1
  [139] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] )
  [140] (signed byte) print_sbyte::b#1 ← (signed byte) test_8s::dividend#0 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 rem8s#3 ] )
  [141] (byte*~) print_char_cursor#180 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 print_char_cursor#180 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 print_char_cursor#180 rem8s#3 ] )
  [142] call print_sbyte param-assignment [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] )
  to:test_8s::@4
test_8s::@4: scope:[test_8s]  from test_8s::@3
  [143] phi() [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] )
  [144] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] )
  to:test_8s::@5
test_8s::@5: scope:[test_8s]  from test_8s::@4
  [145] (signed byte) print_sbyte::b#2 ← (signed byte) test_8s::divisor#0 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::res#0 print_sbyte::b#2 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::res#0 print_sbyte::b#2 rem8s#3 ] )
  [146] call print_sbyte param-assignment [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 test_8s::res#0 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 test_8s::res#0 rem8s#3 ] )
  to:test_8s::@6
test_8s::@6: scope:[test_8s]  from test_8s::@5
  [147] phi() [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 test_8s::res#0 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 test_8s::res#0 rem8s#3 ] )
  [148] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::res#0 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::res#0 rem8s#3 ] )
  to:test_8s::@7
test_8s::@7: scope:[test_8s]  from test_8s::@6
  [149] (signed byte) print_sbyte::b#3 ← (signed byte) test_8s::res#0 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 print_sbyte::b#3 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 print_sbyte::b#3 rem8s#3 ] )
  [150] call print_sbyte param-assignment [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 rem8s#3 ] )
  to:test_8s::@8
test_8s::@8: scope:[test_8s]  from test_8s::@7
  [151] phi() [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 rem8s#3 ] )
  [152] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 rem8s#3 ] )
  to:test_8s::@9
test_8s::@9: scope:[test_8s]  from test_8s::@8
  [153] (signed byte) print_sbyte::b#4 ← (signed byte) rem8s#3 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 print_sbyte::b#4 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 print_sbyte::b#4 ] )
  [154] call print_sbyte param-assignment [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 ] )
  to:test_8s::@10
test_8s::@10: scope:[test_8s]  from test_8s::@9
  [155] phi() [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 ] )
  [156] call print_ln param-assignment [ print_line_cursor#1 test_8s::i#10 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 ] )
  to:test_8s::@11
test_8s::@11: scope:[test_8s]  from test_8s::@10
  [157] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10 [ print_line_cursor#1 test_8s::i#1 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#1 ] )
  [158] if((byte) test_8s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8s::@1 [ print_line_cursor#1 test_8s::i#1 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#1 ] )
  to:test_8s::@return
test_8s::@return: scope:[test_8s]  from test_8s::@11
  [159] return  [ print_line_cursor#1 ] ( main:2::test_8s:11 [ print_line_cursor#1 ] )
  to:@return
print_sbyte: scope:[print_sbyte]  from test_8s::@3 test_8s::@5 test_8s::@7 test_8s::@9
  [160] (byte*) print_char_cursor#131 ← phi( test_8s::@3/(byte*~) print_char_cursor#180 test_8s::@5/(byte*) print_char_cursor#126 test_8s::@7/(byte*) print_char_cursor#126 test_8s::@9/(byte*) print_char_cursor#126 ) [ print_char_cursor#131 print_sbyte::b#5 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#131 print_sbyte::b#5 ] )
  [160] (signed byte) print_sbyte::b#5 ← phi( test_8s::@3/(signed byte) print_sbyte::b#1 test_8s::@5/(signed byte) print_sbyte::b#2 test_8s::@7/(signed byte) print_sbyte::b#3 test_8s::@9/(signed byte) print_sbyte::b#4 ) [ print_char_cursor#131 print_sbyte::b#5 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#131 print_sbyte::b#5 ] )
  [161] if((signed byte) print_sbyte::b#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte::@1 [ print_char_cursor#131 print_sbyte::b#5 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#131 print_sbyte::b#5 ] )
  to:print_sbyte::@2
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte
  [162] phi() [ print_char_cursor#131 print_sbyte::b#5 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#131 print_sbyte::b#5 ] )
  [163] call print_char param-assignment [ print_char_cursor#17 print_sbyte::b#5 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_sbyte::b#5 ] )
  to:print_sbyte::@4
print_sbyte::@4: scope:[print_sbyte]  from print_sbyte::@2
  [164] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#5 [ print_char_cursor#17 print_sbyte::b#0 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_sbyte::b#0 ] )
  to:print_sbyte::@1
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte print_sbyte::@4
  [165] (byte*) print_char_cursor#130 ← phi( print_sbyte/(byte*) print_char_cursor#131 print_sbyte::@4/(byte*) print_char_cursor#17 ) [ print_char_cursor#130 print_sbyte::b#6 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#130 print_sbyte::b#6 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#130 print_sbyte::b#6 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#130 print_sbyte::b#6 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#130 print_sbyte::b#6 ] )
  [165] (signed byte) print_sbyte::b#6 ← phi( print_sbyte/(signed byte) print_sbyte::b#5 print_sbyte::@4/(signed byte) print_sbyte::b#0 ) [ print_char_cursor#130 print_sbyte::b#6 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#130 print_sbyte::b#6 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#130 print_sbyte::b#6 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#130 print_sbyte::b#6 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#130 print_sbyte::b#6 ] )
  [166] (byte~) print_byte::b#9 ← (byte)(signed byte) print_sbyte::b#6 [ print_byte::b#9 print_char_cursor#130 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#9 print_char_cursor#130 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#9 print_char_cursor#130 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#9 print_char_cursor#130 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_byte::b#9 print_char_cursor#130 ] )
  [167] call print_byte param-assignment [ print_char_cursor#17 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] )
  to:print_sbyte::@return
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@1
  [168] return  [ print_char_cursor#17 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] )
  to:@return
div8s: scope:[div8s]  from test_8s::@1
  [169] if((signed byte) div8s::dividend#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@1 [ div8s::dividend#0 div8s::divisor#0 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] )
  to:div8s::@16
div8s::@16: scope:[div8s]  from div8s
  [170] (byte~) div8s::dividendu#8 ← (byte)(signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::dividendu#8 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendu#8 ] )
  to:div8s::@2
div8s::@2: scope:[div8s]  from div8s::@1 div8s::@16
  [171] (byte) div8s::dividendu#3 ← phi( div8s::@1/(byte~) div8s::dividendu#7 div8s::@16/(byte~) div8s::dividendu#8 ) [ div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 ] )
  [171] (byte) div8s::neg#3 ← phi( div8s::@1/(byte/signed byte/word/signed word/dword/signed dword) 1 div8s::@16/(byte/signed byte/word/signed word/dword/signed dword) 0 ) [ div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 ] )
  [172] if((signed byte) div8s::divisor#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@3 [ div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 ] )
  to:div8s::@17
div8s::@17: scope:[div8s]  from div8s::@2
  [173] (byte~) div8s::divisoru#5 ← (byte)(signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::divisoru#5 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::divisoru#5 ] )
  to:div8s::@4
div8s::@4: scope:[div8s]  from div8s::@17 div8s::@3
  [174] (byte) div8s::neg#4 ← phi( div8s::@3/(byte) div8s::neg#2 div8s::@17/(byte) div8s::neg#3 ) [ div8s::dividendu#3 div8s::divisoru#3 div8s::neg#4 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::divisoru#3 div8s::neg#4 ] )
  [174] (byte) div8s::divisoru#3 ← phi( div8s::@3/(byte~) div8s::divisoru#4 div8s::@17/(byte~) div8s::divisoru#5 ) [ div8s::dividendu#3 div8s::divisoru#3 div8s::neg#4 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::divisoru#3 div8s::neg#4 ] )
  [175] (byte) div8u::dividend#0 ← (byte) div8s::dividendu#3 [ div8s::divisoru#3 div8s::neg#4 div8u::dividend#0 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisoru#3 div8s::neg#4 div8u::dividend#0 ] )
  [176] (byte) div8u::divisor#0 ← (byte) div8s::divisoru#3 [ div8s::neg#4 div8u::dividend#0 div8u::divisor#0 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::dividend#0 div8u::divisor#0 ] )
  [177] call div8u param-assignment [ div8s::neg#4 div8u::return#0 rem8u#17 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 rem8u#17 ] )
  [178] (byte) div8u::return#2 ← (byte) div8u::return#0 [ div8s::neg#4 div8u::return#2 rem8u#17 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#2 rem8u#17 ] )
  to:div8s::@15
div8s::@15: scope:[div8s]  from div8s::@4
  [179] (byte) div8s::resultu#0 ← (byte) div8u::return#2 [ div8s::neg#4 div8s::resultu#0 rem8u#17 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8s::resultu#0 rem8u#17 ] )
  [180] if((byte) div8s::neg#4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@18 [ div8s::resultu#0 rem8u#17 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 rem8u#17 ] )
  to:div8s::@11
div8s::@11: scope:[div8s]  from div8s::@15
  [181] (signed byte) rem8s#2 ← - (signed byte)(byte) rem8u#17 [ div8s::resultu#0 rem8s#2 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 rem8s#2 ] )
  [182] (signed byte) div8s::return#1 ← - (signed byte)(byte) div8s::resultu#0 [ rem8s#2 div8s::return#1 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 rem8s#2 div8s::return#1 ] )
  to:div8s::@return
div8s::@return: scope:[div8s]  from div8s::@11 div8s::@18
  [183] (signed byte) rem8s#3 ← phi( div8s::@11/(signed byte) rem8s#2 div8s::@18/(signed byte~) rem8s#33 ) [ div8s::return#2 rem8s#3 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 rem8s#3 ] )
  [183] (signed byte) div8s::return#2 ← phi( div8s::@11/(signed byte) div8s::return#1 div8s::@18/(signed byte~) div8s::return#7 ) [ div8s::return#2 rem8s#3 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 rem8s#3 ] )
  [184] return  [ div8s::return#2 rem8s#3 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 rem8s#3 ] )
  to:@return
div8s::@18: scope:[div8s]  from div8s::@15
  [185] (signed byte~) div8s::return#7 ← (signed byte)(byte) div8s::resultu#0 [ rem8u#17 div8s::return#7 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 rem8u#17 div8s::return#7 ] )
  [186] (signed byte~) rem8s#33 ← (signed byte)(byte) rem8u#17 [ div8s::return#7 rem8s#33 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#7 rem8s#33 ] )
  to:div8s::@return
div8s::@3: scope:[div8s]  from div8s::@2
  [187] (signed byte~) div8s::$6 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::$6 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::$6 ] )
  [188] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8s::dividendu#3 div8s::neg#2 div8s::$6 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::neg#2 div8s::$6 ] )
  [189] (byte~) div8s::divisoru#4 ← (byte)(signed byte~) div8s::$6 [ div8s::dividendu#3 div8s::divisoru#4 div8s::neg#2 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::divisoru#4 div8s::neg#2 ] )
  to:div8s::@4
div8s::@1: scope:[div8s]  from div8s
  [190] (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::$2 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::$2 ] )
  [191] (byte~) div8s::dividendu#7 ← (byte)(signed byte~) div8s::$2 [ div8s::divisor#0 div8s::dividendu#7 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendu#7 ] )
  to:div8s::@2
div8u: scope:[div8u]  from div8s::@4 test_8u::@1
  [192] (byte) div8u::divisor#2 ← phi( div8s::@4/(byte) div8u::divisor#0 test_8u::@1/(byte) div8u::divisor#1 ) [ div8u::dividend#2 div8u::divisor#2 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::dividend#2 div8u::divisor#2 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 div8u::divisor#2 ] )
  [192] (byte) div8u::dividend#2 ← phi( div8s::@4/(byte) div8u::dividend#0 test_8u::@1/(byte) div8u::dividend#1 ) [ div8u::dividend#2 div8u::divisor#2 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::dividend#2 div8u::divisor#2 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 div8u::divisor#2 ] )
  [193] (byte) divr8u::dividend#0 ← (byte) div8u::dividend#2 [ div8u::divisor#2 divr8u::dividend#0 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#2 divr8u::dividend#0 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#2 divr8u::dividend#0 ] )
  [194] (byte) divr8u::divisor#0 ← (byte) div8u::divisor#2 [ divr8u::dividend#0 divr8u::divisor#0 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::dividend#0 divr8u::divisor#0 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::dividend#0 divr8u::divisor#0 ] )
  [195] call divr8u param-assignment [ rem8u#17 divr8u::return#1 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 rem8u#17 divr8u::return#1 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 rem8u#17 divr8u::return#1 ] )
  [196] (byte) divr8u::return#0 ← (byte) divr8u::return#1 [ rem8u#17 divr8u::return#0 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 rem8u#17 divr8u::return#0 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 rem8u#17 divr8u::return#0 ] )
  to:div8u::@2
div8u::@2: scope:[div8u]  from div8u
  [197] (byte) div8u::return#0 ← (byte) divr8u::return#0 [ div8u::return#0 rem8u#17 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 rem8u#17 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#17 ] )
  to:div8u::@return
div8u::@return: scope:[div8u]  from div8u::@2
  [198] return  [ div8u::return#0 rem8u#17 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 rem8u#17 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#17 ] )
  to:@return
divr8u: scope:[divr8u]  from div8u
  [199] phi() [ divr8u::dividend#0 divr8u::divisor#0 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::dividend#0 divr8u::divisor#0 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::dividend#0 divr8u::divisor#0 ] )
  to:divr8u::@1
divr8u::@1: scope:[divr8u]  from divr8u divr8u::@3
  [200] (byte) divr8u::i#2 ← phi( divr8u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr8u::@3/(byte) divr8u::i#1 ) [ divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] )
  [200] (byte) divr8u::quotient#3 ← phi( divr8u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr8u::@3/(byte) divr8u::return#1 ) [ divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] )
  [200] (byte) divr8u::dividend#2 ← phi( divr8u/(byte) divr8u::dividend#0 divr8u::@3/(byte) divr8u::dividend#1 ) [ divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] )
  [200] (byte) divr8u::rem#4 ← phi( divr8u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr8u::@3/(byte) divr8u::rem#10 ) [ divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] )
  [201] (byte) divr8u::rem#1 ← (byte) divr8u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] )
  [202] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte/word/signed word/dword/signed dword) 128 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] )
  [203] if((byte~) divr8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr8u::@2 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] )
  to:divr8u::@4
divr8u::@4: scope:[divr8u]  from divr8u::@1
  [204] (byte) divr8u::rem#2 ← (byte) divr8u::rem#1 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] )
  to:divr8u::@2
divr8u::@2: scope:[divr8u]  from divr8u::@1 divr8u::@4
  [205] (byte) divr8u::rem#5 ← phi( divr8u::@1/(byte) divr8u::rem#1 divr8u::@4/(byte) divr8u::rem#2 ) [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#5 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#5 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#5 ] )
  [206] (byte) divr8u::dividend#1 ← (byte) divr8u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] )
  [207] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] )
  [208] if((byte) divr8u::rem#5<(byte) divr8u::divisor#0) goto divr8u::@3 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] )
  to:divr8u::@5
divr8u::@5: scope:[divr8u]  from divr8u::@2
  [209] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] )
  [210] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] )
  to:divr8u::@3
divr8u::@3: scope:[divr8u]  from divr8u::@2 divr8u::@5
  [211] (byte) divr8u::return#1 ← phi( divr8u::@2/(byte) divr8u::quotient#1 divr8u::@5/(byte) divr8u::quotient#2 ) [ divr8u::divisor#0 divr8u::return#1 divr8u::i#2 divr8u::rem#10 divr8u::dividend#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::return#1 divr8u::i#2 divr8u::rem#10 divr8u::dividend#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::return#1 divr8u::i#2 divr8u::rem#10 divr8u::dividend#1 ] )
  [211] (byte) divr8u::rem#10 ← phi( divr8u::@2/(byte) divr8u::rem#5 divr8u::@5/(byte) divr8u::rem#3 ) [ divr8u::divisor#0 divr8u::return#1 divr8u::i#2 divr8u::rem#10 divr8u::dividend#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::return#1 divr8u::i#2 divr8u::rem#10 divr8u::dividend#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::return#1 divr8u::i#2 divr8u::rem#10 divr8u::dividend#1 ] )
  [212] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2 [ divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] )
  [213] if((byte) divr8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto divr8u::@1 [ divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] )
  to:divr8u::@6
divr8u::@6: scope:[divr8u]  from divr8u::@3
  [214] (byte) rem8u#17 ← (byte) divr8u::rem#10 [ rem8u#17 divr8u::return#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 rem8u#17 divr8u::return#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 rem8u#17 divr8u::return#1 ] )
  to:divr8u::@return
divr8u::@return: scope:[divr8u]  from divr8u::@6
  [215] return  [ rem8u#17 divr8u::return#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 rem8u#17 divr8u::return#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 rem8u#17 divr8u::return#1 ] )
  to:@return
test_16u: scope:[test_16u]  from main::@2
  [216] phi() [ print_line_cursor#1 ] ( main:2::test_16u:9 [ print_line_cursor#1 ] )
  to:test_16u::@1
test_16u::@1: scope:[test_16u]  from test_16u test_16u::@11
  [217] (byte) test_16u::i#10 ← phi( test_16u/(byte/signed byte/word/signed word/dword/signed dword) 0 test_16u::@11/(byte) test_16u::i#1 ) [ print_line_cursor#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 ] )
  [218] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte) test_16u::i#10) [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 ] )
  [219] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte) test_16u::i#10) [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] )
  [220] (word) div16u::dividend#1 ← (word) test_16u::dividend#0 [ print_line_cursor#1 div16u::dividend#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 div16u::dividend#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] )
  [221] (word) div16u::divisor#1 ← (word) test_16u::divisor#0 [ print_line_cursor#1 div16u::dividend#1 div16u::divisor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 div16u::dividend#1 div16u::divisor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] )
  [222] call div16u param-assignment [ print_line_cursor#1 div16u::return#0 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 div16u::return#0 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] )
  [223] (word) div16u::return#3 ← (word) div16u::return#0 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] ( main:2::test_16u:9 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] )
  to:test_16u::@3
test_16u::@3: scope:[test_16u]  from test_16u::@1
  [224] (word) test_16u::res#0 ← (word) div16u::return#3 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] )
  [225] (word) print_word::w#1 ← (word) test_16u::dividend#0 [ print_line_cursor#1 print_word::w#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_word::w#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
  [226] (byte*~) print_char_cursor#163 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_word::w#1 print_char_cursor#163 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_word::w#1 print_char_cursor#163 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
  [227] call print_word param-assignment [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
  to:test_16u::@4
test_16u::@4: scope:[test_16u]  from test_16u::@3
  [228] phi() [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
  [229] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
  to:test_16u::@5
test_16u::@5: scope:[test_16u]  from test_16u::@4
  [230] (word) print_word::w#2 ← (word) test_16u::divisor#0 [ print_line_cursor#1 print_char_cursor#126 print_word::w#2 rem16u#1 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 print_word::w#2 rem16u#1 test_16u::i#10 test_16u::res#0 ] )
  [231] call print_word param-assignment [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 test_16u::res#0 ] )
  to:test_16u::@6
test_16u::@6: scope:[test_16u]  from test_16u::@5
  [232] phi() [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 test_16u::res#0 ] )
  [233] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 test_16u::res#0 ] )
  to:test_16u::@7
test_16u::@7: scope:[test_16u]  from test_16u::@6
  [234] (word) print_word::w#3 ← (word) test_16u::res#0 [ print_line_cursor#1 print_char_cursor#126 print_word::w#3 rem16u#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 print_word::w#3 rem16u#1 test_16u::i#10 ] )
  [235] call print_word param-assignment [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 ] )
  to:test_16u::@8
test_16u::@8: scope:[test_16u]  from test_16u::@7
  [236] phi() [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 ] )
  [237] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 ] )
  to:test_16u::@9
test_16u::@9: scope:[test_16u]  from test_16u::@8
  [238] (word) print_word::w#4 ← (word) rem16u#1 [ print_line_cursor#1 print_char_cursor#126 print_word::w#4 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 print_word::w#4 test_16u::i#10 ] )
  [239] call print_word param-assignment [ print_line_cursor#1 print_char_cursor#17 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#17 test_16u::i#10 ] )
  to:test_16u::@10
test_16u::@10: scope:[test_16u]  from test_16u::@9
  [240] phi() [ print_line_cursor#1 print_char_cursor#17 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#17 test_16u::i#10 ] )
  [241] call print_ln param-assignment [ print_line_cursor#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 ] )
  to:test_16u::@11
test_16u::@11: scope:[test_16u]  from test_16u::@10
  [242] (byte) test_16u::i#1 ← (byte) test_16u::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ print_line_cursor#1 test_16u::i#1 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#1 ] )
  [243] if((byte) test_16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16u::@1 [ print_line_cursor#1 test_16u::i#1 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#1 ] )
  to:test_16u::@return
test_16u::@return: scope:[test_16u]  from test_16u::@11
  [244] return  [ print_line_cursor#1 ] ( main:2::test_16u:9 [ print_line_cursor#1 ] )
  to:@return
test_8u: scope:[test_8u]  from main::@1
  [245] phi() [ ] ( main:2::test_8u:7 [ ] )
  to:test_8u::@1
test_8u::@1: scope:[test_8u]  from test_8u test_8u::@12
  [246] (byte*) print_line_cursor#41 ← phi( test_8u/((byte*))(word/signed word/dword/signed dword) 1024 test_8u::@12/(byte*) print_line_cursor#1 ) [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 ] )
  [246] (byte*) print_char_cursor#135 ← phi( test_8u/((byte*))(word/signed word/dword/signed dword) 1024 test_8u::@12/(byte*~) print_char_cursor#186 ) [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 ] )
  [246] (byte) test_8u::i#10 ← phi( test_8u/(byte/signed byte/word/signed word/dword/signed dword) 0 test_8u::@12/(byte) test_8u::i#1 ) [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 ] )
  [247] (byte) test_8u::dividend#0 ← *((const byte[]) test_8u::dividends#0 + (byte) test_8u::i#10) [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 ] )
  [248] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] )
  [249] (byte) div8u::dividend#1 ← (byte) test_8u::dividend#0 [ print_line_cursor#41 print_char_cursor#135 div8u::dividend#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 div8u::dividend#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] )
  [250] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0 [ print_line_cursor#41 print_char_cursor#135 div8u::dividend#1 div8u::divisor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 div8u::dividend#1 div8u::divisor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] )
  [251] call div8u param-assignment [ print_line_cursor#41 print_char_cursor#135 div8u::return#0 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 div8u::return#0 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] )
  [252] (byte) div8u::return#3 ← (byte) div8u::return#0 [ print_line_cursor#41 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 ] )
  to:test_8u::@3
test_8u::@3: scope:[test_8u]  from test_8u::@1
  [253] (byte) test_8u::res#0 ← (byte) div8u::return#3 [ print_line_cursor#41 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 ] )
  [254] (byte) print_byte::b#3 ← (byte) test_8u::dividend#0 [ print_line_cursor#41 print_byte::b#3 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_byte::b#3 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
  [255] call print_byte param-assignment [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
  to:test_8u::@4
test_8u::@4: scope:[test_8u]  from test_8u::@3
  [256] phi() [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
  [257] call print_str param-assignment [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
  to:test_8u::@5
test_8u::@5: scope:[test_8u]  from test_8u::@4
  [258] (byte) print_byte::b#4 ← (byte) test_8u::divisor#0 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#4 rem8u#17 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#4 rem8u#17 test_8u::i#10 test_8u::res#0 ] )
  [259] call print_byte param-assignment [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 test_8u::res#0 ] )
  to:test_8u::@6
test_8u::@6: scope:[test_8u]  from test_8u::@5
  [260] phi() [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 test_8u::res#0 ] )
  [261] call print_str param-assignment [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 test_8u::res#0 ] )
  to:test_8u::@7
test_8u::@7: scope:[test_8u]  from test_8u::@6
  [262] (byte) print_byte::b#5 ← (byte) test_8u::res#0 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#5 rem8u#17 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#5 rem8u#17 test_8u::i#10 ] )
  [263] call print_byte param-assignment [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 ] )
  to:test_8u::@8
test_8u::@8: scope:[test_8u]  from test_8u::@7
  [264] phi() [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 ] )
  [265] call print_str param-assignment [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 ] )
  to:test_8u::@9
test_8u::@9: scope:[test_8u]  from test_8u::@8
  [266] (byte) print_byte::b#6 ← (byte) rem8u#17 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#6 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#6 test_8u::i#10 ] )
  [267] call print_byte param-assignment [ print_line_cursor#41 print_char_cursor#17 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#17 test_8u::i#10 ] )
  to:test_8u::@10
test_8u::@10: scope:[test_8u]  from test_8u::@9
  [268] phi() [ print_line_cursor#41 print_char_cursor#17 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#17 test_8u::i#10 ] )
  [269] call print_ln param-assignment [ print_line_cursor#1 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#1 test_8u::i#10 ] )
  to:test_8u::@11
test_8u::@11: scope:[test_8u]  from test_8u::@10
  [270] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10 [ print_line_cursor#1 test_8u::i#1 ] ( main:2::test_8u:7 [ print_line_cursor#1 test_8u::i#1 ] )
  [271] if((byte) test_8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8u::@12 [ print_line_cursor#1 test_8u::i#1 ] ( main:2::test_8u:7 [ print_line_cursor#1 test_8u::i#1 ] )
  to:test_8u::@return
test_8u::@return: scope:[test_8u]  from test_8u::@11
  [272] return  [ print_line_cursor#1 ] ( main:2::test_8u:7 [ print_line_cursor#1 ] )
  to:@return
test_8u::@12: scope:[test_8u]  from test_8u::@11
  [273] (byte*~) print_char_cursor#186 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 test_8u::i#1 print_char_cursor#186 ] ( main:2::test_8u:7 [ print_line_cursor#1 test_8u::i#1 print_char_cursor#186 ] )
  to:test_8u::@1
print_cls: scope:[print_cls]  from main
  [274] phi() [ ] ( main:2::print_cls:5 [ ] )
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [275] (byte*) print_cls::sc#2 ← phi( print_cls/((byte*))(word/signed word/dword/signed dword) 1024 print_cls::@1/(byte*) print_cls::sc#1 ) [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] )
  [276] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] )
  [277] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] )
  [278] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] )
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [279] return  [ ] ( main:2::print_cls:5 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@26 dominated by  @26 @begin 
@end dominated by  @26 @end @begin 
main dominated by  @26 main @begin 
main::@1 dominated by  main::@1 @26 main @begin 
main::@2 dominated by  main::@1 main::@2 @26 main @begin 
main::@3 dominated by  main::@1 main::@2 main::@3 @26 main @begin 
main::@4 dominated by  main::@1 main::@2 main::@3 main::@4 @26 main @begin 
main::@return dominated by  main::@1 main::@2 main::@3 main::@4 main::@return @26 main @begin 
test_16s dominated by  main::@1 main::@2 main::@3 main::@4 test_16s @26 main @begin 
test_16s::@1 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s test_16s::@1 @26 main @begin 
test_16s::@3 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s test_16s::@1 @26 test_16s::@3 main @begin 
test_16s::@4 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s test_16s::@1 @26 test_16s::@3 test_16s::@4 main @begin 
test_16s::@5 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s test_16s::@1 @26 test_16s::@3 test_16s::@4 test_16s::@5 main @begin 
test_16s::@6 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s test_16s::@1 @26 test_16s::@3 test_16s::@4 test_16s::@5 test_16s::@6 main @begin 
test_16s::@7 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s test_16s::@1 @26 test_16s::@3 test_16s::@4 test_16s::@5 test_16s::@6 test_16s::@7 main @begin 
test_16s::@8 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s test_16s::@1 @26 test_16s::@3 test_16s::@4 test_16s::@5 test_16s::@6 test_16s::@7 test_16s::@8 main @begin 
test_16s::@9 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s test_16s::@1 @26 test_16s::@3 test_16s::@4 test_16s::@5 test_16s::@6 test_16s::@7 test_16s::@8 main test_16s::@9 @begin 
test_16s::@10 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s test_16s::@1 @26 test_16s::@3 test_16s::@4 test_16s::@5 test_16s::@6 test_16s::@7 test_16s::@8 main test_16s::@9 @begin test_16s::@10 
test_16s::@11 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s test_16s::@1 @26 test_16s::@3 test_16s::@4 test_16s::@5 test_16s::@6 test_16s::@7 test_16s::@8 main test_16s::@9 @begin test_16s::@11 test_16s::@10 
test_16s::@return dominated by  main::@1 main::@2 main::@3 main::@4 test_16s::@return test_16s test_16s::@1 @26 test_16s::@3 test_16s::@4 test_16s::@5 test_16s::@6 test_16s::@7 test_16s::@8 main test_16s::@9 @begin test_16s::@11 test_16s::@10 
print_ln dominated by  main::@1 print_ln @26 main @begin 
print_ln::@1 dominated by  main::@1 print_ln print_ln::@1 @26 main @begin 
print_ln::@return dominated by  print_ln::@return main::@1 print_ln print_ln::@1 @26 main @begin 
print_sword dominated by  main::@1 main::@2 main::@3 main::@4 test_16s print_sword test_16s::@1 @26 test_16s::@3 main @begin 
print_sword::@2 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s print_sword test_16s::@1 @26 test_16s::@3 print_sword::@2 main @begin 
print_sword::@4 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s print_sword test_16s::@1 @26 test_16s::@3 print_sword::@2 print_sword::@4 main @begin 
print_sword::@1 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s print_sword test_16s::@1 @26 test_16s::@3 print_sword::@1 main @begin 
print_sword::@return dominated by  main::@1 main::@2 main::@3 main::@4 test_16s print_sword test_16s::@1 @26 test_16s::@3 print_sword::@1 main @begin print_sword::@return 
print_word dominated by  print_word main::@1 main::@2 @26 main @begin 
print_word::@1 dominated by  print_word main::@1 main::@2 print_word::@1 @26 main @begin 
print_word::@return dominated by  print_word main::@1 main::@2 print_word::@return print_word::@1 @26 main @begin 
print_byte dominated by  main::@1 print_byte @26 main @begin 
print_byte::@1 dominated by  main::@1 print_byte::@1 print_byte @26 main @begin 
print_byte::@return dominated by  main::@1 print_byte::@1 print_byte @26 main @begin print_byte::@return 
print_char dominated by  main::@1 @26 main print_char @begin 
print_char::@return dominated by  main::@1 @26 main print_char print_char::@return @begin 
print_str dominated by  main::@1 print_str @26 main @begin 
print_str::@1 dominated by  main::@1 print_str::@1 print_str @26 main @begin 
print_str::@return dominated by  main::@1 print_str::@return print_str::@1 print_str @26 main @begin 
print_str::@2 dominated by  main::@1 print_str::@1 print_str::@2 print_str @26 main @begin 
div16s dominated by  main::@1 main::@2 main::@3 main::@4 div16s test_16s test_16s::@1 @26 main @begin 
div16s::@16 dominated by  main::@1 main::@2 main::@3 main::@4 div16s test_16s test_16s::@1 @26 main @begin div16s::@16 
div16s::@2 dominated by  main::@1 main::@2 main::@3 main::@4 div16s div16s::@2 test_16s test_16s::@1 @26 main @begin 
div16s::@17 dominated by  main::@1 main::@2 main::@3 main::@4 div16s div16s::@2 test_16s test_16s::@1 @26 main @begin div16s::@17 
div16s::@4 dominated by  main::@1 main::@2 main::@3 main::@4 div16s div16s::@4 div16s::@2 test_16s test_16s::@1 @26 main @begin 
div16s::@15 dominated by  main::@1 main::@2 main::@3 main::@4 div16s div16s::@4 div16s::@2 test_16s test_16s::@1 @26 main @begin div16s::@15 
div16s::@11 dominated by  main::@1 main::@2 main::@3 main::@4 div16s div16s::@4 div16s::@2 test_16s test_16s::@1 @26 main @begin div16s::@15 div16s::@11 
div16s::@return dominated by  main::@1 main::@2 main::@3 main::@4 div16s div16s::@4 div16s::@2 test_16s test_16s::@1 @26 main @begin div16s::@return div16s::@15 
div16s::@18 dominated by  main::@1 main::@2 main::@3 main::@4 div16s div16s::@4 div16s::@2 test_16s test_16s::@1 @26 main @begin div16s::@15 div16s::@18 
div16s::@3 dominated by  main::@1 main::@2 main::@3 main::@4 div16s div16s::@3 div16s::@2 test_16s test_16s::@1 @26 main @begin 
div16s::@1 dominated by  main::@1 main::@2 main::@3 main::@4 div16s div16s::@1 test_16s test_16s::@1 @26 main @begin 
div16u dominated by  main::@1 main::@2 div16u @26 main @begin 
div16u::@2 dominated by  main::@1 main::@2 div16u div16u::@2 @26 main @begin 
div16u::@return dominated by  div16u::@return main::@1 main::@2 div16u div16u::@2 @26 main @begin 
divr16u dominated by  main::@1 main::@2 div16u divr16u @26 main @begin 
divr16u::@1 dominated by  divr16u::@1 main::@1 main::@2 div16u divr16u @26 main @begin 
divr16u::@4 dominated by  divr16u::@1 divr16u::@4 main::@1 main::@2 div16u divr16u @26 main @begin 
divr16u::@2 dominated by  divr16u::@2 divr16u::@1 main::@1 main::@2 div16u divr16u @26 main @begin 
divr16u::@5 dominated by  divr16u::@2 divr16u::@1 divr16u::@5 main::@1 main::@2 div16u divr16u @26 main @begin 
divr16u::@3 dominated by  divr16u::@2 divr16u::@1 divr16u::@3 main::@1 main::@2 div16u divr16u @26 main @begin 
divr16u::@6 dominated by  divr16u::@2 divr16u::@1 divr16u::@3 divr16u::@6 main::@1 main::@2 div16u divr16u @26 main @begin 
divr16u::@return dominated by  divr16u::@2 divr16u::@1 divr16u::@3 divr16u::@6 main::@1 main::@2 div16u divr16u::@return divr16u @26 main @begin 
test_8s dominated by  main::@1 main::@2 main::@3 test_8s @26 main @begin 
test_8s::@1 dominated by  main::@1 main::@2 main::@3 test_8s @26 main @begin test_8s::@1 
test_8s::@3 dominated by  main::@1 main::@2 main::@3 test_8s @26 main @begin test_8s::@1 test_8s::@3 
test_8s::@4 dominated by  main::@1 main::@2 main::@3 test_8s @26 main @begin test_8s::@1 test_8s::@3 test_8s::@4 
test_8s::@5 dominated by  main::@1 main::@2 main::@3 test_8s @26 main @begin test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 
test_8s::@6 dominated by  main::@1 main::@2 main::@3 test_8s @26 main @begin test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 
test_8s::@7 dominated by  main::@1 main::@2 main::@3 test_8s @26 main @begin test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 
test_8s::@8 dominated by  main::@1 main::@2 main::@3 test_8s @26 main test_8s::@8 @begin test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 
test_8s::@9 dominated by  main::@1 main::@2 main::@3 test_8s @26 main test_8s::@8 test_8s::@9 @begin test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 
test_8s::@10 dominated by  main::@1 main::@2 main::@3 test_8s::@10 test_8s @26 main test_8s::@8 test_8s::@9 @begin test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 
test_8s::@11 dominated by  main::@1 main::@2 main::@3 test_8s::@10 test_8s::@11 test_8s @26 main test_8s::@8 test_8s::@9 @begin test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 
test_8s::@return dominated by  main::@1 main::@2 main::@3 test_8s::@10 test_8s::@11 test_8s @26 main test_8s::@8 test_8s::@9 @begin test_8s::@return test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 
print_sbyte dominated by  main::@1 main::@2 main::@3 test_8s print_sbyte @26 main @begin test_8s::@1 test_8s::@3 
print_sbyte::@2 dominated by  main::@1 main::@2 main::@3 test_8s print_sbyte @26 main print_sbyte::@2 @begin test_8s::@1 test_8s::@3 
print_sbyte::@4 dominated by  main::@1 main::@2 main::@3 test_8s print_sbyte @26 main print_sbyte::@4 print_sbyte::@2 @begin test_8s::@1 test_8s::@3 
print_sbyte::@1 dominated by  main::@1 main::@2 main::@3 test_8s print_sbyte @26 main print_sbyte::@1 @begin test_8s::@1 test_8s::@3 
print_sbyte::@return dominated by  main::@1 main::@2 main::@3 test_8s print_sbyte @26 main print_sbyte::@1 @begin print_sbyte::@return test_8s::@1 test_8s::@3 
div8s dominated by  main::@1 main::@2 main::@3 div8s test_8s @26 main @begin test_8s::@1 
div8s::@16 dominated by  main::@1 main::@2 main::@3 div8s test_8s div8s::@16 @26 main @begin test_8s::@1 
div8s::@2 dominated by  main::@1 main::@2 main::@3 div8s test_8s @26 main div8s::@2 @begin test_8s::@1 
div8s::@17 dominated by  main::@1 main::@2 main::@3 div8s test_8s div8s::@17 @26 main div8s::@2 @begin test_8s::@1 
div8s::@4 dominated by  main::@1 main::@2 main::@3 div8s test_8s @26 main div8s::@2 @begin test_8s::@1 div8s::@4 
div8s::@15 dominated by  main::@1 main::@2 main::@3 div8s test_8s div8s::@15 @26 main div8s::@2 @begin test_8s::@1 div8s::@4 
div8s::@11 dominated by  main::@1 main::@2 main::@3 div8s test_8s div8s::@11 div8s::@15 @26 main div8s::@2 @begin test_8s::@1 div8s::@4 
div8s::@return dominated by  main::@1 main::@2 main::@3 div8s test_8s div8s::@15 @26 main div8s::@2 div8s::@return @begin test_8s::@1 div8s::@4 
div8s::@18 dominated by  main::@1 main::@2 main::@3 div8s test_8s div8s::@18 div8s::@15 @26 main div8s::@2 @begin test_8s::@1 div8s::@4 
div8s::@3 dominated by  main::@1 main::@2 main::@3 div8s test_8s @26 main div8s::@3 div8s::@2 @begin test_8s::@1 
div8s::@1 dominated by  main::@1 main::@2 main::@3 div8s test_8s @26 div8s::@1 main @begin test_8s::@1 
div8u dominated by  main::@1 div8u @26 main @begin 
div8u::@2 dominated by  main::@1 div8u @26 main div8u::@2 @begin 
div8u::@return dominated by  main::@1 div8u div8u::@return @26 main div8u::@2 @begin 
divr8u dominated by  main::@1 div8u divr8u @26 main @begin 
divr8u::@1 dominated by  divr8u::@1 main::@1 div8u divr8u @26 main @begin 
divr8u::@4 dominated by  divr8u::@1 main::@1 divr8u::@4 div8u divr8u @26 main @begin 
divr8u::@2 dominated by  divr8u::@1 main::@1 divr8u::@2 div8u divr8u @26 main @begin 
divr8u::@5 dominated by  divr8u::@1 main::@1 divr8u::@5 divr8u::@2 div8u divr8u @26 main @begin 
divr8u::@3 dominated by  divr8u::@1 main::@1 divr8u::@2 divr8u::@3 div8u divr8u @26 main @begin 
divr8u::@6 dominated by  divr8u::@1 main::@1 divr8u::@6 divr8u::@2 divr8u::@3 div8u divr8u @26 main @begin 
divr8u::@return dominated by  divr8u::@1 main::@1 divr8u::@6 divr8u::@2 divr8u::@3 div8u divr8u @26 main @begin divr8u::@return 
test_16u dominated by  main::@1 main::@2 test_16u @26 main @begin 
test_16u::@1 dominated by  main::@1 main::@2 test_16u test_16u::@1 @26 main @begin 
test_16u::@3 dominated by  main::@1 main::@2 test_16u test_16u::@1 test_16u::@3 @26 main @begin 
test_16u::@4 dominated by  main::@1 main::@2 test_16u test_16u::@1 test_16u::@3 test_16u::@4 @26 main @begin 
test_16u::@5 dominated by  main::@1 main::@2 test_16u test_16u::@5 test_16u::@1 test_16u::@3 test_16u::@4 @26 main @begin 
test_16u::@6 dominated by  main::@1 main::@2 test_16u test_16u::@5 test_16u::@6 test_16u::@1 test_16u::@3 test_16u::@4 @26 main @begin 
test_16u::@7 dominated by  main::@1 main::@2 test_16u test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@1 test_16u::@3 test_16u::@4 @26 main @begin 
test_16u::@8 dominated by  main::@1 main::@2 test_16u test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@1 test_16u::@3 test_16u::@4 @26 main @begin 
test_16u::@9 dominated by  main::@1 main::@2 test_16u test_16u::@9 test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@1 test_16u::@3 test_16u::@4 @26 main @begin 
test_16u::@10 dominated by  main::@1 main::@2 test_16u::@10 test_16u test_16u::@9 test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@1 test_16u::@3 test_16u::@4 @26 main @begin 
test_16u::@11 dominated by  main::@1 main::@2 test_16u::@11 test_16u::@10 test_16u test_16u::@9 test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@1 test_16u::@3 test_16u::@4 @26 main @begin 
test_16u::@return dominated by  main::@1 main::@2 test_16u::@11 test_16u::@10 test_16u test_16u::@9 test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@1 test_16u::@3 test_16u::@4 @26 main @begin test_16u::@return 
test_8u dominated by  main::@1 test_8u @26 main @begin 
test_8u::@1 dominated by  main::@1 test_8u @26 main @begin test_8u::@1 
test_8u::@3 dominated by  main::@1 test_8u @26 main @begin test_8u::@3 test_8u::@1 
test_8u::@4 dominated by  main::@1 test_8u @26 main @begin test_8u::@3 test_8u::@4 test_8u::@1 
test_8u::@5 dominated by  main::@1 test_8u @26 main @begin test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 
test_8u::@6 dominated by  main::@1 test_8u @26 main @begin test_8u::@6 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 
test_8u::@7 dominated by  main::@1 test_8u @26 main @begin test_8u::@6 test_8u::@7 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 
test_8u::@8 dominated by  main::@1 test_8u @26 main @begin test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 
test_8u::@9 dominated by  main::@1 test_8u @26 main @begin test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 
test_8u::@10 dominated by  main::@1 test_8u @26 main @begin test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u::@10 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 
test_8u::@11 dominated by  main::@1 test_8u @26 main @begin test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u::@10 test_8u::@11 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 
test_8u::@return dominated by  main::@1 test_8u @26 main @begin test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u::@10 test_8u::@11 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 test_8u::@return 
test_8u::@12 dominated by  main::@1 test_8u @26 main @begin test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u::@10 test_8u::@12 test_8u::@11 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 
print_cls dominated by  print_cls @26 main @begin 
print_cls::@1 dominated by  print_cls @26 main @begin print_cls::@1 
print_cls::@return dominated by  print_cls @26 main @begin print_cls::@return print_cls::@1 

NATURAL LOOPS
Found back edge: Loop head: test_16s::@1 tails: test_16s::@11 blocks: null
Found back edge: Loop head: print_ln::@1 tails: print_ln::@1 blocks: null
Found back edge: Loop head: print_str::@1 tails: print_str::@2 blocks: null
Found back edge: Loop head: divr16u::@1 tails: divr16u::@3 blocks: null
Found back edge: Loop head: test_8s::@1 tails: test_8s::@11 blocks: null
Found back edge: Loop head: divr8u::@1 tails: divr8u::@3 blocks: null
Found back edge: Loop head: test_16u::@1 tails: test_16u::@11 blocks: null
Found back edge: Loop head: test_8u::@1 tails: test_8u::@12 blocks: null
Found back edge: Loop head: print_cls::@1 tails: print_cls::@1 blocks: null
Populated: Loop head: test_16s::@1 tails: test_16s::@11 blocks: test_16s::@11 test_16s::@10 test_16s::@9 test_16s::@8 test_16s::@7 test_16s::@6 test_16s::@5 test_16s::@4 test_16s::@3 test_16s::@1 
Populated: Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Populated: Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1 
Populated: Loop head: divr16u::@1 tails: divr16u::@3 blocks: divr16u::@3 divr16u::@2 divr16u::@5 divr16u::@1 divr16u::@4 
Populated: Loop head: test_8s::@1 tails: test_8s::@11 blocks: test_8s::@11 test_8s::@10 test_8s::@9 test_8s::@8 test_8s::@7 test_8s::@6 test_8s::@5 test_8s::@4 test_8s::@3 test_8s::@1 
Populated: Loop head: divr8u::@1 tails: divr8u::@3 blocks: divr8u::@3 divr8u::@2 divr8u::@5 divr8u::@1 divr8u::@4 
Populated: Loop head: test_16u::@1 tails: test_16u::@11 blocks: test_16u::@11 test_16u::@10 test_16u::@9 test_16u::@8 test_16u::@7 test_16u::@6 test_16u::@5 test_16u::@4 test_16u::@3 test_16u::@1 
Populated: Loop head: test_8u::@1 tails: test_8u::@12 blocks: test_8u::@12 test_8u::@11 test_8u::@10 test_8u::@9 test_8u::@8 test_8u::@7 test_8u::@6 test_8u::@5 test_8u::@4 test_8u::@3 test_8u::@1 
Populated: Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 
Loop head: test_16s::@1 tails: test_16s::@11 blocks: test_16s::@11 test_16s::@10 test_16s::@9 test_16s::@8 test_16s::@7 test_16s::@6 test_16s::@5 test_16s::@4 test_16s::@3 test_16s::@1 
Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1 
Loop head: divr16u::@1 tails: divr16u::@3 blocks: divr16u::@3 divr16u::@2 divr16u::@5 divr16u::@1 divr16u::@4 
Loop head: test_8s::@1 tails: test_8s::@11 blocks: test_8s::@11 test_8s::@10 test_8s::@9 test_8s::@8 test_8s::@7 test_8s::@6 test_8s::@5 test_8s::@4 test_8s::@3 test_8s::@1 
Loop head: divr8u::@1 tails: divr8u::@3 blocks: divr8u::@3 divr8u::@2 divr8u::@5 divr8u::@1 divr8u::@4 
Loop head: test_16u::@1 tails: test_16u::@11 blocks: test_16u::@11 test_16u::@10 test_16u::@9 test_16u::@8 test_16u::@7 test_16u::@6 test_16u::@5 test_16u::@4 test_16u::@3 test_16u::@1 
Loop head: test_8u::@1 tails: test_8u::@12 blocks: test_8u::@12 test_8u::@11 test_8u::@10 test_8u::@9 test_8u::@8 test_8u::@7 test_8u::@6 test_8u::@5 test_8u::@4 test_8u::@3 test_8u::@1 
Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 

NATURAL LOOPS WITH DEPTH
Found 0 loops in scope []
Found 0 loops in scope [main]
Found 1 loops in scope [print_cls]
  Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 
Found 1 loops in scope [test_8u]
  Loop head: test_8u::@1 tails: test_8u::@12 blocks: test_8u::@12 test_8u::@11 test_8u::@10 test_8u::@9 test_8u::@8 test_8u::@7 test_8u::@6 test_8u::@5 test_8u::@4 test_8u::@3 test_8u::@1 
Found 1 loops in scope [test_16u]
  Loop head: test_16u::@1 tails: test_16u::@11 blocks: test_16u::@11 test_16u::@10 test_16u::@9 test_16u::@8 test_16u::@7 test_16u::@6 test_16u::@5 test_16u::@4 test_16u::@3 test_16u::@1 
Found 1 loops in scope [test_8s]
  Loop head: test_8s::@1 tails: test_8s::@11 blocks: test_8s::@11 test_8s::@10 test_8s::@9 test_8s::@8 test_8s::@7 test_8s::@6 test_8s::@5 test_8s::@4 test_8s::@3 test_8s::@1 
Found 1 loops in scope [test_16s]
  Loop head: test_16s::@1 tails: test_16s::@11 blocks: test_16s::@11 test_16s::@10 test_16s::@9 test_16s::@8 test_16s::@7 test_16s::@6 test_16s::@5 test_16s::@4 test_16s::@3 test_16s::@1 
Found 0 loops in scope [div8u]
Found 0 loops in scope [print_byte]
Found 1 loops in scope [print_str]
  Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1 
Found 1 loops in scope [print_ln]
  Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Found 0 loops in scope [div16u]
Found 0 loops in scope [print_word]
Found 0 loops in scope [div8s]
Found 0 loops in scope [print_sbyte]
Found 0 loops in scope [div16s]
Found 0 loops in scope [print_sword]
Found 1 loops in scope [divr8u]
  Loop head: divr8u::@1 tails: divr8u::@3 blocks: divr8u::@3 divr8u::@2 divr8u::@5 divr8u::@1 divr8u::@4 
Found 0 loops in scope [print_char]
Found 1 loops in scope [divr16u]
  Loop head: divr16u::@1 tails: divr16u::@3 blocks: divr16u::@3 divr16u::@2 divr16u::@5 divr16u::@1 divr16u::@4 
Loop head: test_16s::@1 tails: test_16s::@11 blocks: test_16s::@11 test_16s::@10 test_16s::@9 test_16s::@8 test_16s::@7 test_16s::@6 test_16s::@5 test_16s::@4 test_16s::@3 test_16s::@1  depth: 1
Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1  depth: 2
Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1  depth: 2
Loop head: divr16u::@1 tails: divr16u::@3 blocks: divr16u::@3 divr16u::@2 divr16u::@5 divr16u::@1 divr16u::@4  depth: 2
Loop head: test_8s::@1 tails: test_8s::@11 blocks: test_8s::@11 test_8s::@10 test_8s::@9 test_8s::@8 test_8s::@7 test_8s::@6 test_8s::@5 test_8s::@4 test_8s::@3 test_8s::@1  depth: 1
Loop head: divr8u::@1 tails: divr8u::@3 blocks: divr8u::@3 divr8u::@2 divr8u::@5 divr8u::@1 divr8u::@4  depth: 2
Loop head: test_16u::@1 tails: test_16u::@11 blocks: test_16u::@11 test_16u::@10 test_16u::@9 test_16u::@8 test_16u::@7 test_16u::@6 test_16u::@5 test_16u::@4 test_16u::@3 test_16u::@1  depth: 1
Loop head: test_8u::@1 tails: test_8u::@12 blocks: test_8u::@12 test_8u::@11 test_8u::@10 test_8u::@9 test_8u::@8 test_8u::@7 test_8u::@6 test_8u::@5 test_8u::@4 test_8u::@3 test_8u::@1  depth: 1
Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
(signed word~) div16s::$2 2.0
(signed word~) div16s::$6 1.0
(signed word) div16s::dividend
(signed word) div16s::dividend#0 5.0
(word) div16s::dividendu
(word) div16s::dividendu#3 0.8571428571428571
(word~) div16s::dividendu#7 4.0
(word~) div16s::dividendu#8 4.0
(signed word) div16s::divisor
(signed word) div16s::divisor#0 2.142857142857143
(word) div16s::divisoru
(word) div16s::divisoru#3 3.0
(word~) div16s::divisoru#4 4.0
(word~) div16s::divisoru#5 4.0
(byte) div16s::neg
(byte) div16s::neg#2 2.0
(byte) div16s::neg#3 1.0
(byte) div16s::neg#4 1.0
(word) div16s::resultu
(word) div16s::resultu#0 0.6666666666666666
(signed word) div16s::return
(signed word) div16s::return#1 4.0
(signed word) div16s::return#2 5.0
(signed word) div16s::return#3 22.0
(signed word~) div16s::return#7 2.0
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word) div16u::dividend
(word) div16u::dividend#0 2.0
(word) div16u::dividend#1 11.0
(word) div16u::dividend#2 15.0
(word) div16u::divisor
(word) div16u::divisor#0 4.0
(word) div16u::divisor#1 22.0
(word) div16u::divisor#2 7.5
(word) div16u::return
(word) div16u::return#0 3.75
(word) div16u::return#2 4.0
(word) div16u::return#3 22.0
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(signed byte~) div8s::$2 2.0
(signed byte~) div8s::$6 1.0
(signed byte) div8s::dividend
(signed byte) div8s::dividend#0 5.0
(byte) div8s::dividendu
(byte) div8s::dividendu#3 0.8571428571428571
(byte~) div8s::dividendu#7 4.0
(byte~) div8s::dividendu#8 4.0
(signed byte) div8s::divisor
(signed byte) div8s::divisor#0 2.142857142857143
(byte) div8s::divisoru
(byte) div8s::divisoru#3 3.0
(byte~) div8s::divisoru#4 4.0
(byte~) div8s::divisoru#5 4.0
(byte) div8s::neg
(byte) div8s::neg#2 2.0
(byte) div8s::neg#3 1.0
(byte) div8s::neg#4 1.0
(byte) div8s::resultu
(byte) div8s::resultu#0 0.6666666666666666
(signed byte) div8s::return
(signed byte) div8s::return#1 4.0
(signed byte) div8s::return#2 5.0
(signed byte) div8s::return#3 22.0
(signed byte~) div8s::return#7 2.0
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(byte) div8u::dividend
(byte) div8u::dividend#0 2.0
(byte) div8u::dividend#1 11.0
(byte) div8u::dividend#2 15.0
(byte) div8u::divisor
(byte) div8u::divisor#0 4.0
(byte) div8u::divisor#1 22.0
(byte) div8u::divisor#2 7.5
(byte) div8u::return
(byte) div8u::return#0 3.75
(byte) div8u::return#2 4.0
(byte) div8u::return#3 22.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 202.0
(byte~) divr16u::$2 202.0
(word) divr16u::dividend
(word) divr16u::dividend#0 25.25
(word) divr16u::dividend#1 1.3333333333333333
(word) divr16u::dividend#2 43.57142857142858
(word) divr16u::divisor
(word) divr16u::divisor#0 12.0
(byte) divr16u::i
(byte) divr16u::i#1 151.5
(byte) divr16u::i#2 15.538461538461538
(word) divr16u::quotient
(word) divr16u::quotient#1 151.5
(word) divr16u::quotient#2 101.0
(word) divr16u::quotient#3 25.25
(word) divr16u::rem
(word) divr16u::rem#0 75.75
(word) divr16u::rem#1 202.0
(word) divr16u::rem#10 101.66666666666667
(word) divr16u::rem#2 202.0
(word) divr16u::rem#4 202.0
(word) divr16u::rem#5 101.0
(word) divr16u::return
(word) divr16u::return#0 50.83333333333333
(word) divr16u::return#2 4.0
(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
(byte~) divr8u::$1 202.0
(byte) divr8u::dividend
(byte) divr8u::dividend#0 1.3333333333333333
(byte) divr8u::dividend#1 25.25
(byte) divr8u::dividend#2 50.83333333333333
(byte) divr8u::divisor
(byte) divr8u::divisor#0 12.75
(byte) divr8u::i
(byte) divr8u::i#1 151.5
(byte) divr8u::i#2 16.833333333333332
(byte) divr8u::quotient
(byte) divr8u::quotient#1 151.5
(byte) divr8u::quotient#2 101.0
(byte) divr8u::quotient#3 28.857142857142858
(byte) divr8u::rem
(byte) divr8u::rem#1 101.0
(byte) divr8u::rem#10 101.66666666666667
(byte) divr8u::rem#2 202.0
(byte) divr8u::rem#3 202.0
(byte) divr8u::rem#4 202.0
(byte) divr8u::rem#5 101.0
(byte) divr8u::return
(byte) divr8u::return#0 4.0
(byte) divr8u::return#1 50.83333333333333
(void()) main()
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#1 4.0
(byte) print_byte::b#2 4.0
(byte) print_byte::b#3 22.0
(byte) print_byte::b#4 22.0
(byte) print_byte::b#5 22.0
(byte) print_byte::b#6 22.0
(byte) print_byte::b#7 13.5
(byte~) print_byte::b#9 4.0
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#2 4.0
(byte) print_char::ch#3 4.0
(byte) print_char::ch#4 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 101.0
(byte*) print_char_cursor#126 15.607142857142856
(byte*) print_char_cursor#128 3.0
(byte*) print_char_cursor#129 15.999999999999998
(byte*) print_char_cursor#130 3.0
(byte*) print_char_cursor#131 15.999999999999998
(byte*) print_char_cursor#132 24.0
(byte*) print_char_cursor#133 17.333333333333332
(byte*) print_char_cursor#135 2.4444444444444446
(byte*~) print_char_cursor#156 22.0
(byte*~) print_char_cursor#163 22.0
(byte*) print_char_cursor#17 2.0178571428571432
(byte*~) print_char_cursor#180 22.0
(byte*~) print_char_cursor#186 22.0
(byte*) print_char_cursor#80 6.0
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 16.5
(byte*) print_cls::sc#2 16.5
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_line_cursor#1 3.9099999999999993
(byte*) print_line_cursor#20 204.0
(byte*) print_line_cursor#39 46.0
(byte*) print_line_cursor#41 0.9565217391304348
(void()) print_ln()
(void()) print_sbyte((signed byte) print_sbyte::b)
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0 4.0
(signed byte) print_sbyte::b#1 11.0
(signed byte) print_sbyte::b#2 22.0
(signed byte) print_sbyte::b#3 22.0
(signed byte) print_sbyte::b#4 22.0
(signed byte) print_sbyte::b#5 12.5
(signed byte) print_sbyte::b#6 4.0
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 202.0
(byte*) print_str::str#13 101.5
(byte*) print_str::str#15 2.0
(void()) print_sword((signed word) print_sword::w)
(signed word) print_sword::w
(signed word) print_sword::w#0 4.0
(signed word) print_sword::w#1 11.0
(signed word) print_sword::w#2 22.0
(signed word) print_sword::w#3 22.0
(signed word) print_sword::w#4 22.0
(signed word) print_sword::w#5 12.5
(signed word) print_sword::w#6 4.0
(void()) print_word((word) print_word::w)
(word) print_word::w
(word) print_word::w#1 11.0
(word) print_word::w#2 22.0
(word) print_word::w#3 22.0
(word) print_word::w#4 22.0
(word) print_word::w#5 16.666666666666664
(word~) print_word::w#7 4.0
(signed word) rem16s
(signed word) rem16s#2 2.0
(signed word) rem16s#3 0.8333333333333335
(signed word~) rem16s#32 4.0
(word) rem16u
(word) rem16u#1 0.48148148148148145
(signed byte) rem8s
(signed byte) rem8s#2 2.0
(signed byte) rem8s#3 0.8333333333333335
(signed byte~) rem8s#33 4.0
(byte) rem8u
(byte) rem8u#17 0.5
(void()) test_16s()
(signed word) test_16s::dividend
(signed word) test_16s::dividend#0 4.714285714285714
(signed word[]) test_16s::dividends
(signed word) test_16s::divisor
(signed word) test_16s::divisor#0 3.0
(signed word[]) test_16s::divisors
(byte) test_16s::i
(byte) test_16s::i#1 16.5
(byte) test_16s::i#10 1.76
(signed word) test_16s::res
(signed word) test_16s::res#0 2.2
(void()) test_16u()
(word) test_16u::dividend
(word) test_16u::dividend#0 4.714285714285714
(word[]) test_16u::dividends
(word) test_16u::divisor
(word) test_16u::divisor#0 3.0
(word[]) test_16u::divisors
(byte) test_16u::i
(byte) test_16u::i#1 16.5
(byte) test_16u::i#10 1.76
(word) test_16u::res
(word) test_16u::res#0 2.2
(void()) test_8s()
(signed byte) test_8s::dividend
(signed byte) test_8s::dividend#0 4.714285714285714
(signed byte[]) test_8s::dividends
(signed byte) test_8s::divisor
(signed byte) test_8s::divisor#0 3.0
(signed byte[]) test_8s::divisors
(byte) test_8s::i
(byte) test_8s::i#1 16.5
(byte) test_8s::i#10 1.76
(signed byte) test_8s::res
(signed byte) test_8s::res#0 2.2
(void()) test_8u()
(byte) test_8u::dividend
(byte) test_8u::dividend#0 4.714285714285714
(byte[]) test_8u::dividends
(byte) test_8u::divisor
(byte) test_8u::divisor#0 3.3000000000000003
(byte[]) test_8u::divisors
(byte) test_8u::i
(byte) test_8u::i#1 11.0
(byte) test_8u::i#10 1.8333333333333333
(byte) test_8u::res
(byte) test_8u::res#0 2.4444444444444446

Initial phi equivalence classes
[ test_16s::i#10 test_16s::i#1 ]
[ print_line_cursor#20 print_line_cursor#39 print_line_cursor#1 print_line_cursor#41 ]
[ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 ]
[ print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ]
[ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ]
[ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
[ print_char_cursor#80 print_char_cursor#133 print_char_cursor#130 print_char_cursor#132 print_char_cursor#128 print_char_cursor#129 print_char_cursor#156 print_char_cursor#126 print_char_cursor#17 print_char_cursor#163 print_char_cursor#135 print_char_cursor#131 print_char_cursor#1 print_char_cursor#180 print_char_cursor#186 ]
[ print_str::str#13 print_str::str#15 print_str::str#0 ]
[ div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 ]
[ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 ]
[ div16s::neg#4 div16s::neg#2 div16s::neg#3 ]
[ div16s::return#2 div16s::return#1 div16s::return#7 ]
[ rem16s#3 rem16s#2 rem16s#32 ]
[ div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 ]
[ div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 ]
[ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ test_8s::i#10 test_8s::i#1 ]
[ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ]
[ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
[ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ]
[ div8s::neg#4 div8s::neg#2 div8s::neg#3 ]
[ div8s::return#2 div8s::return#1 div8s::return#7 ]
[ rem8s#3 rem8s#2 rem8s#33 ]
[ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
[ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ]
[ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
[ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
[ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
[ divr8u::i#2 divr8u::i#1 ]
[ test_16u::i#10 test_16u::i#1 ]
[ test_8u::i#10 test_8u::i#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
Added variable test_16s::dividend#0 to zero page equivalence class [ test_16s::dividend#0 ]
Added variable test_16s::divisor#0 to zero page equivalence class [ test_16s::divisor#0 ]
Added variable div16s::dividend#0 to zero page equivalence class [ div16s::dividend#0 ]
Added variable div16s::divisor#0 to zero page equivalence class [ div16s::divisor#0 ]
Added variable div16s::return#3 to zero page equivalence class [ div16s::return#3 ]
Added variable test_16s::res#0 to zero page equivalence class [ test_16s::res#0 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Added variable div16u::return#2 to zero page equivalence class [ div16u::return#2 ]
Added variable div16s::resultu#0 to zero page equivalence class [ div16s::resultu#0 ]
Added variable div16s::$6 to zero page equivalence class [ div16s::$6 ]
Added variable div16s::$2 to zero page equivalence class [ div16s::$2 ]
Added variable divr16u::divisor#0 to zero page equivalence class [ divr16u::divisor#0 ]
Added variable divr16u::return#2 to zero page equivalence class [ divr16u::return#2 ]
Added variable div16u::return#0 to zero page equivalence class [ div16u::return#0 ]
Added variable divr16u::$1 to zero page equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to zero page equivalence class [ divr16u::$2 ]
Added variable rem16u#1 to zero page equivalence class [ rem16u#1 ]
Added variable test_8s::dividend#0 to zero page equivalence class [ test_8s::dividend#0 ]
Added variable test_8s::divisor#0 to zero page equivalence class [ test_8s::divisor#0 ]
Added variable div8s::dividend#0 to zero page equivalence class [ div8s::dividend#0 ]
Added variable div8s::divisor#0 to zero page equivalence class [ div8s::divisor#0 ]
Added variable div8s::return#3 to zero page equivalence class [ div8s::return#3 ]
Added variable test_8s::res#0 to zero page equivalence class [ test_8s::res#0 ]
Added variable div8u::return#2 to zero page equivalence class [ div8u::return#2 ]
Added variable div8s::resultu#0 to zero page equivalence class [ div8s::resultu#0 ]
Added variable div8s::$6 to zero page equivalence class [ div8s::$6 ]
Added variable div8s::$2 to zero page equivalence class [ div8s::$2 ]
Added variable divr8u::divisor#0 to zero page equivalence class [ divr8u::divisor#0 ]
Added variable divr8u::return#0 to zero page equivalence class [ divr8u::return#0 ]
Added variable div8u::return#0 to zero page equivalence class [ div8u::return#0 ]
Added variable divr8u::$1 to zero page equivalence class [ divr8u::$1 ]
Added variable rem8u#17 to zero page equivalence class [ rem8u#17 ]
Added variable test_16u::dividend#0 to zero page equivalence class [ test_16u::dividend#0 ]
Added variable test_16u::divisor#0 to zero page equivalence class [ test_16u::divisor#0 ]
Added variable div16u::return#3 to zero page equivalence class [ div16u::return#3 ]
Added variable test_16u::res#0 to zero page equivalence class [ test_16u::res#0 ]
Added variable test_8u::dividend#0 to zero page equivalence class [ test_8u::dividend#0 ]
Added variable test_8u::divisor#0 to zero page equivalence class [ test_8u::divisor#0 ]
Added variable div8u::return#3 to zero page equivalence class [ div8u::return#3 ]
Added variable test_8u::res#0 to zero page equivalence class [ test_8u::res#0 ]
Complete equivalence classes
[ test_16s::i#10 test_16s::i#1 ]
[ print_line_cursor#20 print_line_cursor#39 print_line_cursor#1 print_line_cursor#41 ]
[ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 ]
[ print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ]
[ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ]
[ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
[ print_char_cursor#80 print_char_cursor#133 print_char_cursor#130 print_char_cursor#132 print_char_cursor#128 print_char_cursor#129 print_char_cursor#156 print_char_cursor#126 print_char_cursor#17 print_char_cursor#163 print_char_cursor#135 print_char_cursor#131 print_char_cursor#1 print_char_cursor#180 print_char_cursor#186 ]
[ print_str::str#13 print_str::str#15 print_str::str#0 ]
[ div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 ]
[ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 ]
[ div16s::neg#4 div16s::neg#2 div16s::neg#3 ]
[ div16s::return#2 div16s::return#1 div16s::return#7 ]
[ rem16s#3 rem16s#2 rem16s#32 ]
[ div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 ]
[ div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 ]
[ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
[ divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ]
[ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ test_8s::i#10 test_8s::i#1 ]
[ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ]
[ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
[ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ]
[ div8s::neg#4 div8s::neg#2 div8s::neg#3 ]
[ div8s::return#2 div8s::return#1 div8s::return#7 ]
[ rem8s#3 rem8s#2 rem8s#33 ]
[ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
[ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ]
[ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
[ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
[ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
[ divr8u::i#2 divr8u::i#1 ]
[ test_16u::i#10 test_16u::i#1 ]
[ test_8u::i#10 test_8u::i#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ test_16s::dividend#0 ]
[ test_16s::divisor#0 ]
[ div16s::dividend#0 ]
[ div16s::divisor#0 ]
[ div16s::return#3 ]
[ test_16s::res#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
[ div16u::return#2 ]
[ div16s::resultu#0 ]
[ div16s::$6 ]
[ div16s::$2 ]
[ divr16u::divisor#0 ]
[ divr16u::return#2 ]
[ div16u::return#0 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
[ rem16u#1 ]
[ test_8s::dividend#0 ]
[ test_8s::divisor#0 ]
[ div8s::dividend#0 ]
[ div8s::divisor#0 ]
[ div8s::return#3 ]
[ test_8s::res#0 ]
[ div8u::return#2 ]
[ div8s::resultu#0 ]
[ div8s::$6 ]
[ div8s::$2 ]
[ divr8u::divisor#0 ]
[ divr8u::return#0 ]
[ div8u::return#0 ]
[ divr8u::$1 ]
[ rem8u#17 ]
[ test_16u::dividend#0 ]
[ test_16u::divisor#0 ]
[ div16u::return#3 ]
[ test_16u::res#0 ]
[ test_8u::dividend#0 ]
[ test_8u::divisor#0 ]
[ div8u::return#3 ]
[ test_8u::res#0 ]
Allocated zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ]
Allocated zp ZP_WORD:3 [ print_line_cursor#20 print_line_cursor#39 print_line_cursor#1 print_line_cursor#41 ]
Allocated zp ZP_WORD:5 [ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 ]
Allocated zp ZP_WORD:7 [ print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ]
Allocated zp ZP_BYTE:9 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ]
Allocated zp ZP_BYTE:10 [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
Allocated zp ZP_WORD:11 [ print_char_cursor#80 print_char_cursor#133 print_char_cursor#130 print_char_cursor#132 print_char_cursor#128 print_char_cursor#129 print_char_cursor#156 print_char_cursor#126 print_char_cursor#17 print_char_cursor#163 print_char_cursor#135 print_char_cursor#131 print_char_cursor#1 print_char_cursor#180 print_char_cursor#186 ]
Allocated zp ZP_WORD:13 [ print_str::str#13 print_str::str#15 print_str::str#0 ]
Allocated zp ZP_WORD:15 [ div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 ]
Allocated zp ZP_WORD:17 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 ]
Allocated zp ZP_BYTE:19 [ div16s::neg#4 div16s::neg#2 div16s::neg#3 ]
Allocated zp ZP_WORD:20 [ div16s::return#2 div16s::return#1 div16s::return#7 ]
Allocated zp ZP_WORD:22 [ rem16s#3 rem16s#2 rem16s#32 ]
Allocated zp ZP_WORD:24 [ div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 ]
Allocated zp ZP_WORD:26 [ div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 ]
Allocated zp ZP_WORD:28 [ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated zp ZP_WORD:30 [ divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ]
Allocated zp ZP_WORD:32 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp ZP_BYTE:34 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp ZP_BYTE:35 [ test_8s::i#10 test_8s::i#1 ]
Allocated zp ZP_BYTE:36 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ]
Allocated zp ZP_BYTE:37 [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
Allocated zp ZP_BYTE:38 [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ]
Allocated zp ZP_BYTE:39 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ]
Allocated zp ZP_BYTE:40 [ div8s::return#2 div8s::return#1 div8s::return#7 ]
Allocated zp ZP_BYTE:41 [ rem8s#3 rem8s#2 rem8s#33 ]
Allocated zp ZP_BYTE:42 [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
Allocated zp ZP_BYTE:43 [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ]
Allocated zp ZP_BYTE:44 [ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
Allocated zp ZP_BYTE:45 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
Allocated zp ZP_BYTE:46 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
Allocated zp ZP_BYTE:47 [ divr8u::i#2 divr8u::i#1 ]
Allocated zp ZP_BYTE:48 [ test_16u::i#10 test_16u::i#1 ]
Allocated zp ZP_BYTE:49 [ test_8u::i#10 test_8u::i#1 ]
Allocated zp ZP_WORD:50 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_WORD:52 [ test_16s::dividend#0 ]
Allocated zp ZP_WORD:54 [ test_16s::divisor#0 ]
Allocated zp ZP_WORD:56 [ div16s::dividend#0 ]
Allocated zp ZP_WORD:58 [ div16s::divisor#0 ]
Allocated zp ZP_WORD:60 [ div16s::return#3 ]
Allocated zp ZP_WORD:62 [ test_16s::res#0 ]
Allocated zp ZP_BYTE:64 [ print_byte::$0 ]
Allocated zp ZP_BYTE:65 [ print_byte::$2 ]
Allocated zp ZP_WORD:66 [ div16u::return#2 ]
Allocated zp ZP_WORD:68 [ div16s::resultu#0 ]
Allocated zp ZP_WORD:70 [ div16s::$6 ]
Allocated zp ZP_WORD:72 [ div16s::$2 ]
Allocated zp ZP_WORD:74 [ divr16u::divisor#0 ]
Allocated zp ZP_WORD:76 [ divr16u::return#2 ]
Allocated zp ZP_WORD:78 [ div16u::return#0 ]
Allocated zp ZP_BYTE:80 [ divr16u::$1 ]
Allocated zp ZP_BYTE:81 [ divr16u::$2 ]
Allocated zp ZP_WORD:82 [ rem16u#1 ]
Allocated zp ZP_BYTE:84 [ test_8s::dividend#0 ]
Allocated zp ZP_BYTE:85 [ test_8s::divisor#0 ]
Allocated zp ZP_BYTE:86 [ div8s::dividend#0 ]
Allocated zp ZP_BYTE:87 [ div8s::divisor#0 ]
Allocated zp ZP_BYTE:88 [ div8s::return#3 ]
Allocated zp ZP_BYTE:89 [ test_8s::res#0 ]
Allocated zp ZP_BYTE:90 [ div8u::return#2 ]
Allocated zp ZP_BYTE:91 [ div8s::resultu#0 ]
Allocated zp ZP_BYTE:92 [ div8s::$6 ]
Allocated zp ZP_BYTE:93 [ div8s::$2 ]
Allocated zp ZP_BYTE:94 [ divr8u::divisor#0 ]
Allocated zp ZP_BYTE:95 [ divr8u::return#0 ]
Allocated zp ZP_BYTE:96 [ div8u::return#0 ]
Allocated zp ZP_BYTE:97 [ divr8u::$1 ]
Allocated zp ZP_BYTE:98 [ rem8u#17 ]
Allocated zp ZP_WORD:99 [ test_16u::dividend#0 ]
Allocated zp ZP_WORD:101 [ test_16u::divisor#0 ]
Allocated zp ZP_WORD:103 [ div16u::return#3 ]
Allocated zp ZP_WORD:105 [ test_16u::res#0 ]
Allocated zp ZP_BYTE:107 [ test_8u::dividend#0 ]
Allocated zp ZP_BYTE:108 [ test_8u::divisor#0 ]
Allocated zp ZP_BYTE:109 [ div8u::return#3 ]
Allocated zp ZP_BYTE:110 [ test_8u::res#0 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label print_char_cursor = $b
  .label print_line_cursor = 3
  .label rem16u = $52
  .label rem8s = $29
  .label rem16s = $16
  .label rem8u = $62
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @26 [phi:@begin->@26]
b26_from_bbegin:
  jmp b26
//SEG4 @26
b26:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @26 to main [phi:@26->main]
main_from_b26:
  jsr main
//SEG7 [3] phi from @26 to @end [phi:@26->@end]
bend_from_b26:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  //SEG11 [274] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [7] call test_8u param-assignment [ print_line_cursor#1 ] ( main:2 [ print_line_cursor#1 ] )
  //SEG15 [245] phi from main::@1 to test_8u [phi:main::@1->test_8u]
  test_8u_from_b1:
    jsr test_8u
  //SEG16 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG17 main::@2
  b2:
  //SEG18 [9] call test_16u param-assignment [ print_line_cursor#1 ] ( main:2 [ print_line_cursor#1 ] )
  //SEG19 [216] phi from main::@2 to test_16u [phi:main::@2->test_16u]
  test_16u_from_b2:
    jsr test_16u
  //SEG20 [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
  //SEG21 main::@3
  b3:
  //SEG22 [11] call test_8s param-assignment [ print_line_cursor#1 ] ( main:2 [ print_line_cursor#1 ] )
  //SEG23 [131] phi from main::@3 to test_8s [phi:main::@3->test_8s]
  test_8s_from_b3:
    jsr test_8s
  //SEG24 [12] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
  //SEG25 main::@4
  b4:
  //SEG26 [13] call test_16s param-assignment [ ] ( main:2 [ ] )
  //SEG27 [15] phi from main::@4 to test_16s [phi:main::@4->test_16s]
  test_16s_from_b4:
    jsr test_16s
    jmp breturn
  //SEG28 main::@return
  breturn:
  //SEG29 [14] return  [ ] ( main:2 [ ] )
    rts
}
//SEG30 test_16s
test_16s: {
    .label dividend = $34
    .label divisor = $36
    .label res = $3e
    .label i = 2
  //SEG31 [16] phi from test_16s to test_16s::@1 [phi:test_16s->test_16s::@1]
  b1_from_test_16s:
  //SEG32 [16] phi (byte) test_16s::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16s->test_16s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG33 [16] phi from test_16s::@11 to test_16s::@1 [phi:test_16s::@11->test_16s::@1]
  b1_from_b11:
  //SEG34 [16] phi (byte) test_16s::i#10 = (byte) test_16s::i#1 [phi:test_16s::@11->test_16s::@1#0] -- register_copy 
    jmp b1
  //SEG35 test_16s::@1
  b1:
  //SEG36 [17] (signed word) test_16s::dividend#0 ← *((const signed word[]) test_16s::dividends#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 print_line_cursor#1 ] ) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
    lda dividends+1,y
    sta dividend+1
  //SEG37 [18] (signed word) test_16s::divisor#0 ← *((const signed word[]) test_16s::divisors#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 ] ) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
    lda divisors+1,y
    sta divisor+1
  //SEG38 [19] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#1 ] ) -- vwsz1=vwsz2 
    lda dividend
    sta div16s.dividend
    lda dividend+1
    sta div16s.dividend+1
  //SEG39 [20] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#1 ] ) -- vwsz1=vwsz2 
    lda divisor
    sta div16s.divisor
    lda divisor+1
    sta div16s.divisor+1
  //SEG40 [21] call div16s param-assignment [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 print_line_cursor#1 rem16s#3 ] )
    jsr div16s
  //SEG41 [22] (signed word) div16s::return#3 ← (signed word) div16s::return#2 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 print_line_cursor#1 rem16s#3 ] ) -- vwsz1=vwsz2 
    lda div16s.return
    sta div16s.return_3
    lda div16s.return+1
    sta div16s.return_3+1
    jmp b3
  //SEG42 test_16s::@3
  b3:
  //SEG43 [23] (signed word) test_16s::res#0 ← (signed word) div16s::return#3 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 ] ) -- vwsz1=vwsz2 
    lda div16s.return_3
    sta res
    lda div16s.return_3+1
    sta res+1
  //SEG44 [24] (signed word) print_sword::w#1 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_line_cursor#1 rem16s#3 ] ) -- vwsz1=vwsz2 
    lda dividend
    sta print_sword.w
    lda dividend+1
    sta print_sword.w+1
  //SEG45 [25] (byte*~) print_char_cursor#156 ← (byte*) print_line_cursor#1 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_char_cursor#156 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_char_cursor#156 print_line_cursor#1 rem16s#3 ] ) -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG46 [26] call print_sword param-assignment [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] )
  //SEG47 [49] phi from test_16s::@3 to print_sword [phi:test_16s::@3->print_sword]
  print_sword_from_b3:
  //SEG48 [49] phi (byte*) print_char_cursor#129 = (byte*~) print_char_cursor#156 [phi:test_16s::@3->print_sword#0] -- register_copy 
  //SEG49 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#1 [phi:test_16s::@3->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG50 [27] phi from test_16s::@3 to test_16s::@4 [phi:test_16s::@3->test_16s::@4]
  b4_from_b3:
    jmp b4
  //SEG51 test_16s::@4
  b4:
  //SEG52 [28] call print_str param-assignment [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] )
  //SEG53 [76] phi from test_16s::@4 to print_str [phi:test_16s::@4->print_str]
  print_str_from_b4:
  //SEG54 [76] phi (byte*) print_str::str#15 = (const string) test_16s::str [phi:test_16s::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG55 test_16s::@5
  b5:
  //SEG56 [29] (signed word) print_sword::w#2 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 print_sword::w#2 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 print_sword::w#2 rem16s#3 print_char_cursor#126 ] ) -- vwsz1=vwsz2 
    lda divisor
    sta print_sword.w
    lda divisor+1
    sta print_sword.w+1
  //SEG57 [30] call print_sword param-assignment [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] )
  //SEG58 [49] phi from test_16s::@5 to print_sword [phi:test_16s::@5->print_sword]
  print_sword_from_b5:
  //SEG59 [49] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#126 [phi:test_16s::@5->print_sword#0] -- register_copy 
  //SEG60 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#2 [phi:test_16s::@5->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG61 [31] phi from test_16s::@5 to test_16s::@6 [phi:test_16s::@5->test_16s::@6]
  b6_from_b5:
    jmp b6
  //SEG62 test_16s::@6
  b6:
  //SEG63 [32] call print_str param-assignment [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] )
  //SEG64 [76] phi from test_16s::@6 to print_str [phi:test_16s::@6->print_str]
  print_str_from_b6:
  //SEG65 [76] phi (byte*) print_str::str#15 = (const string) test_16s::str1 [phi:test_16s::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG66 test_16s::@7
  b7:
  //SEG67 [33] (signed word) print_sword::w#3 ← (signed word) test_16s::res#0 [ test_16s::i#10 print_line_cursor#1 print_sword::w#3 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_sword::w#3 rem16s#3 print_char_cursor#126 ] ) -- vwsz1=vwsz2 
    lda res
    sta print_sword.w
    lda res+1
    sta print_sword.w+1
  //SEG68 [34] call print_sword param-assignment [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] )
  //SEG69 [49] phi from test_16s::@7 to print_sword [phi:test_16s::@7->print_sword]
  print_sword_from_b7:
  //SEG70 [49] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#126 [phi:test_16s::@7->print_sword#0] -- register_copy 
  //SEG71 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#3 [phi:test_16s::@7->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG72 [35] phi from test_16s::@7 to test_16s::@8 [phi:test_16s::@7->test_16s::@8]
  b8_from_b7:
    jmp b8
  //SEG73 test_16s::@8
  b8:
  //SEG74 [36] call print_str param-assignment [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] )
  //SEG75 [76] phi from test_16s::@8 to print_str [phi:test_16s::@8->print_str]
  print_str_from_b8:
  //SEG76 [76] phi (byte*) print_str::str#15 = (const string) test_16s::str2 [phi:test_16s::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG77 test_16s::@9
  b9:
  //SEG78 [37] (signed word) print_sword::w#4 ← (signed word) rem16s#3 [ test_16s::i#10 print_line_cursor#1 print_sword::w#4 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_sword::w#4 print_char_cursor#126 ] ) -- vwsz1=vwsz2 
    lda rem16s
    sta print_sword.w
    lda rem16s+1
    sta print_sword.w+1
  //SEG79 [38] call print_sword param-assignment [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] )
  //SEG80 [49] phi from test_16s::@9 to print_sword [phi:test_16s::@9->print_sword]
  print_sword_from_b9:
  //SEG81 [49] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#126 [phi:test_16s::@9->print_sword#0] -- register_copy 
  //SEG82 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#4 [phi:test_16s::@9->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG83 [39] phi from test_16s::@9 to test_16s::@10 [phi:test_16s::@9->test_16s::@10]
  b10_from_b9:
    jmp b10
  //SEG84 test_16s::@10
  b10:
  //SEG85 [40] call print_ln param-assignment [ test_16s::i#10 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 ] )
  //SEG86 [44] phi from test_16s::@10 to print_ln [phi:test_16s::@10->print_ln]
  print_ln_from_b10:
  //SEG87 [44] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#1 [phi:test_16s::@10->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b11
  //SEG88 test_16s::@11
  b11:
  //SEG89 [41] (byte) test_16s::i#1 ← (byte) test_16s::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ test_16s::i#1 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#1 print_line_cursor#1 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda #2
    clc
    adc i
    sta i
  //SEG90 [42] if((byte) test_16s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16s::@1 [ test_16s::i#1 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#1 print_line_cursor#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$c
    bne b1_from_b11
    jmp breturn
  //SEG91 test_16s::@return
  breturn:
  //SEG92 [43] return  [ ] ( main:2::test_16s:13 [ ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .word $7fff, $7fff, -$7fff, -$7fff, $7fff, -$7fff
    divisors: .word 5, -7, $b, -$d, -$11, $13
}
//SEG93 print_ln
print_ln: {
  //SEG94 [45] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG95 [45] phi (byte*) print_line_cursor#20 = (byte*) print_line_cursor#39 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG96 print_ln::@1
  b1:
  //SEG97 [46] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#20 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#1 print_char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8s:11::print_ln:156 [ test_8s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_ln:241 [ test_16u::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8u:7::print_ln:269 [ test_8u::i#10 print_line_cursor#1 print_char_cursor#17 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda print_line_cursor
    clc
    adc #$28
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG98 [47] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#17) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8s:11::print_ln:156 [ test_8s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_ln:241 [ test_16u::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8u:7::print_ln:269 [ test_8u::i#10 print_line_cursor#1 print_char_cursor#17 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG99 print_ln::@return
  breturn:
  //SEG100 [48] return  [ print_line_cursor#1 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 print_line_cursor#1 ] main:2::test_8s:11::print_ln:156 [ test_8s::i#10 print_line_cursor#1 ] main:2::test_16u:9::print_ln:241 [ test_16u::i#10 print_line_cursor#1 ] main:2::test_8u:7::print_ln:269 [ test_8u::i#10 print_line_cursor#1 ] )
    rts
}
//SEG101 print_sword
print_sword: {
    .label w = 5
  //SEG102 [50] if((signed word) print_sword::w#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 [ print_sword::w#5 print_char_cursor#129 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#129 ] ) -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1_from_print_sword
  //SEG103 [51] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  b2_from_print_sword:
    jmp b2
  //SEG104 print_sword::@2
  b2:
  //SEG105 [52] call print_char param-assignment [ print_char_cursor#17 print_sword::w#5 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_sword::w#5 ] )
  //SEG106 [72] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  print_char_from_b2:
  //SEG107 [72] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#129 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG108 [72] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta print_char.ch
    jsr print_char
    jmp b4
  //SEG109 print_sword::@4
  b4:
  //SEG110 [53] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#5 [ print_char_cursor#17 print_sword::w#0 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_sword::w#0 ] ) -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG111 [54] phi from print_sword print_sword::@4 to print_sword::@1 [phi:print_sword/print_sword::@4->print_sword::@1]
  b1_from_print_sword:
  b1_from_b4:
  //SEG112 [54] phi (byte*) print_char_cursor#128 = (byte*) print_char_cursor#129 [phi:print_sword/print_sword::@4->print_sword::@1#0] -- register_copy 
  //SEG113 [54] phi (signed word) print_sword::w#6 = (signed word) print_sword::w#5 [phi:print_sword/print_sword::@4->print_sword::@1#1] -- register_copy 
    jmp b1
  //SEG114 print_sword::@1
  b1:
  //SEG115 [55] (word~) print_word::w#7 ← (word)(signed word) print_sword::w#6 [ print_char_cursor#128 print_word::w#7 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#128 print_word::w#7 ] ) -- vwuz1=vwuz2 
    lda w
    sta print_word.w
    lda w+1
    sta print_word.w+1
  //SEG116 [56] call print_word param-assignment [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] )
  //SEG117 [58] phi from print_sword::@1 to print_word [phi:print_sword::@1->print_word]
  print_word_from_b1:
  //SEG118 [58] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#128 [phi:print_sword::@1->print_word#0] -- register_copy 
  //SEG119 [58] phi (word) print_word::w#5 = (word~) print_word::w#7 [phi:print_sword::@1->print_word#1] -- register_copy 
    jsr print_word
    jmp breturn
  //SEG120 print_sword::@return
  breturn:
  //SEG121 [57] return  [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] )
    rts
}
//SEG122 print_word
print_word: {
    .label w = 7
  //SEG123 [59] (byte) print_byte::b#1 ← > (word) print_word::w#5 [ print_word::w#5 print_char_cursor#132 print_byte::b#1 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] ) -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG124 [60] call print_byte param-assignment [ print_char_cursor#17 print_word::w#5 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_word::w#5 ] )
  //SEG125 [64] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG126 [64] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#132 [phi:print_word->print_byte#0] -- register_copy 
  //SEG127 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#1 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG128 print_word::@1
  b1:
  //SEG129 [61] (byte) print_byte::b#2 ← < (word) print_word::w#5 [ print_char_cursor#17 print_byte::b#2 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_byte::b#2 ] ) -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG130 [62] call print_byte param-assignment [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] )
  //SEG131 [64] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG132 [64] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#17 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG133 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#2 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG134 print_word::@return
  breturn:
  //SEG135 [63] return  [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] )
    rts
}
//SEG136 print_byte
print_byte: {
    .label _0 = $40
    .label _2 = $41
    .label b = 9
  //SEG137 [65] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#7 print_char_cursor#133 print_byte::$0 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] ) -- vbuz1=vbuz2_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    sta _0
  //SEG138 [66] (byte) print_char::ch#2 ← *((const string) print_hextab#0 + (byte~) print_byte::$0) [ print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda print_hextab,y
    sta print_char.ch
  //SEG139 [67] call print_char param-assignment [ print_char_cursor#17 print_byte::b#7 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 print_byte::b#7 ] )
  //SEG140 [72] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG141 [72] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#133 [phi:print_byte->print_char#0] -- register_copy 
  //SEG142 [72] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG143 print_byte::@1
  b1:
  //SEG144 [68] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ print_char_cursor#17 print_byte::$2 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 print_byte::$2 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and b
    sta _2
  //SEG145 [69] (byte) print_char::ch#3 ← *((const string) print_hextab#0 + (byte~) print_byte::$2) [ print_char_cursor#17 print_char::ch#3 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 print_char::ch#3 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda print_hextab,y
    sta print_char.ch
  //SEG146 [70] call print_char param-assignment [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 ] )
  //SEG147 [72] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG148 [72] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#17 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG149 [72] phi (byte) print_char::ch#4 = (byte) print_char::ch#3 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG150 print_byte::@return
  breturn:
  //SEG151 [71] return  [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 ] )
    rts
}
//SEG152 print_char
print_char: {
    .label ch = $a
  //SEG153 [73] *((byte*) print_char_cursor#80) ← (byte) print_char::ch#4 [ print_char_cursor#80 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:255::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:259::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:263::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:267::print_char:67 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#80 ] main:2::test_8u:7::print_byte:255::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#80 ] main:2::test_8u:7::print_byte:259::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#80 ] main:2::test_8u:7::print_byte:263::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#80 ] main:2::test_8u:7::print_byte:267::print_char:70 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_char:163 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_char:163 [ print_line_cursor#1 test_8s::i#10 print_sbyte::b#5 print_char_cursor#80 ] ) -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (print_char_cursor),y
  //SEG154 [74] (byte*) print_char_cursor#17 ← ++ (byte*) print_char_cursor#80 [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267::print_char:67 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267::print_char:70 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_char:163 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_char:163 [ print_line_cursor#1 test_8s::i#10 print_sbyte::b#5 print_char_cursor#17 ] ) -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG155 print_char::@return
  breturn:
  //SEG156 [75] return  [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267::print_char:67 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267::print_char:70 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_char:163 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_char:163 [ print_line_cursor#1 test_8s::i#10 print_sbyte::b#5 print_char_cursor#17 ] )
    rts
}
//SEG157 print_str
print_str: {
    .label str = $d
  //SEG158 [77] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG159 [77] phi (byte*) print_char_cursor#126 = (byte*) print_char_cursor#17 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG160 [77] phi (byte*) print_str::str#13 = (byte*) print_str::str#15 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG161 print_str::@1
  b1:
  //SEG162 [78] if(*((byte*) print_str::str#13)!=(byte) '@') goto print_str::@2 [ print_char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#126 print_str::str#13 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG163 print_str::@return
  breturn:
  //SEG164 [79] return  [ print_char_cursor#126 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#126 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#126 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#126 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#126 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#126 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#126 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#126 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#126 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#126 ] )
    rts
  //SEG165 print_str::@2
  b2:
  //SEG166 [80] *((byte*) print_char_cursor#126) ← *((byte*) print_str::str#13) [ print_char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#126 print_str::str#13 ] ) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG167 [81] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#126 [ print_str::str#13 print_char_cursor#1 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_str::str#13 print_char_cursor#1 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_str::str#13 print_char_cursor#1 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_str::str#13 print_char_cursor#1 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_str::str#13 print_char_cursor#1 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_str::str#13 print_char_cursor#1 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_str::str#13 print_char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG168 [82] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#13 [ print_str::str#0 print_char_cursor#1 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_str::str#0 print_char_cursor#1 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_str::str#0 print_char_cursor#1 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_str::str#0 print_char_cursor#1 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_str::str#0 print_char_cursor#1 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_str::str#0 print_char_cursor#1 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_str::str#0 print_char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG169 div16s
div16s: {
    .label _2 = $48
    .label _6 = $46
    .label neg = $13
    .label resultu = $44
    .label return = $14
    .label dividend = $38
    .label divisor = $3a
    .label return_3 = $3c
    .label dividendu = $f
    .label divisoru = $11
  //SEG170 [83] if((signed word) div16s::dividend#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@1 [ div16s::dividend#0 div16s::divisor#0 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::dividend#0 div16s::divisor#0 ] ) -- vwsz1_lt_0_then_la1 
    lda dividend+1
    bmi b1
    jmp b16
  //SEG171 div16s::@16
  b16:
  //SEG172 [84] (word~) div16s::dividendu#8 ← (word)(signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::dividendu#8 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::dividendu#8 ] ) -- vwuz1=vwuz2 
    lda dividend
    sta dividendu
    lda dividend+1
    sta dividendu+1
  //SEG173 [85] phi from div16s::@16 to div16s::@2 [phi:div16s::@16->div16s::@2]
  b2_from_b16:
  //SEG174 [85] phi (word) div16s::dividendu#3 = (word~) div16s::dividendu#8 [phi:div16s::@16->div16s::@2#0] -- register_copy 
  //SEG175 [85] phi (byte) div16s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div16s::@16->div16s::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta neg
    jmp b2
  //SEG176 div16s::@2
  b2:
  //SEG177 [86] if((signed word) div16s::divisor#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@3 [ div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 ] ) -- vwsz1_lt_0_then_la1 
    lda divisor+1
    bmi b3
    jmp b17
  //SEG178 div16s::@17
  b17:
  //SEG179 [87] (word~) div16s::divisoru#5 ← (word)(signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::divisoru#5 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::divisoru#5 ] ) -- vwuz1=vwuz2 
    lda divisor
    sta divisoru
    lda divisor+1
    sta divisoru+1
  //SEG180 [88] phi from div16s::@17 div16s::@3 to div16s::@4 [phi:div16s::@17/div16s::@3->div16s::@4]
  b4_from_b17:
  b4_from_b3:
  //SEG181 [88] phi (byte) div16s::neg#4 = (byte) div16s::neg#3 [phi:div16s::@17/div16s::@3->div16s::@4#0] -- register_copy 
  //SEG182 [88] phi (word) div16s::divisoru#3 = (word~) div16s::divisoru#5 [phi:div16s::@17/div16s::@3->div16s::@4#1] -- register_copy 
    jmp b4
  //SEG183 div16s::@4
  b4:
  //SEG184 [89] (word) div16u::dividend#0 ← (word) div16s::dividendu#3 [ div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 ] ) -- vwuz1=vwuz2 
    lda dividendu
    sta div16u.dividend
    lda dividendu+1
    sta div16u.dividend+1
  //SEG185 [90] (word) div16u::divisor#0 ← (word) div16s::divisoru#3 [ div16s::neg#4 div16u::dividend#0 div16u::divisor#0 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::dividend#0 div16u::divisor#0 ] ) -- vwuz1=vwuz2 
    lda divisoru
    sta div16u.divisor
    lda divisoru+1
    sta div16u.divisor+1
  //SEG186 [91] call div16u param-assignment [ div16s::neg#4 div16u::return#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::return#0 rem16u#1 ] )
  //SEG187 [106] phi from div16s::@4 to div16u [phi:div16s::@4->div16u]
  div16u_from_b4:
  //SEG188 [106] phi (word) div16u::divisor#2 = (word) div16u::divisor#0 [phi:div16s::@4->div16u#0] -- register_copy 
  //SEG189 [106] phi (word) div16u::dividend#2 = (word) div16u::dividend#0 [phi:div16s::@4->div16u#1] -- register_copy 
    jsr div16u
  //SEG190 [92] (word) div16u::return#2 ← (word) div16u::return#0 [ div16s::neg#4 div16u::return#2 rem16u#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::return#2 rem16u#1 ] ) -- vwuz1=vwuz2 
    lda div16u.return
    sta div16u.return_2
    lda div16u.return+1
    sta div16u.return_2+1
    jmp b15
  //SEG191 div16s::@15
  b15:
  //SEG192 [93] (word) div16s::resultu#0 ← (word) div16u::return#2 [ div16s::neg#4 div16s::resultu#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16s::resultu#0 rem16u#1 ] ) -- vwuz1=vwuz2 
    lda div16u.return_2
    sta resultu
    lda div16u.return_2+1
    sta resultu+1
  //SEG193 [94] if((byte) div16s::neg#4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@18 [ div16s::resultu#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::resultu#0 rem16u#1 ] ) -- vbuz1_eq_0_then_la1 
    lda neg
    beq b18
    jmp b11
  //SEG194 div16s::@11
  b11:
  //SEG195 [95] (signed word) rem16s#2 ← - (signed word)(word) rem16u#1 [ div16s::resultu#0 rem16s#2 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::resultu#0 rem16s#2 ] ) -- vwsz1=_neg_vwsz2 
    sec
    lda rem16u
    eor #$ff
    adc #0
    sta rem16s
    lda rem16u+1
    eor #$ff
    adc #0
    sta rem16s+1
  //SEG196 [96] (signed word) div16s::return#1 ← - (signed word)(word) div16s::resultu#0 [ rem16s#2 div16s::return#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 rem16s#2 div16s::return#1 ] ) -- vwsz1=_neg_vwsz2 
    sec
    lda resultu
    eor #$ff
    adc #0
    sta return
    lda resultu+1
    eor #$ff
    adc #0
    sta return+1
  //SEG197 [97] phi from div16s::@11 div16s::@18 to div16s::@return [phi:div16s::@11/div16s::@18->div16s::@return]
  breturn_from_b11:
  breturn_from_b18:
  //SEG198 [97] phi (signed word) rem16s#3 = (signed word) rem16s#2 [phi:div16s::@11/div16s::@18->div16s::@return#0] -- register_copy 
  //SEG199 [97] phi (signed word) div16s::return#2 = (signed word) div16s::return#1 [phi:div16s::@11/div16s::@18->div16s::@return#1] -- register_copy 
    jmp breturn
  //SEG200 div16s::@return
  breturn:
  //SEG201 [98] return  [ div16s::return#2 rem16s#3 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::return#2 rem16s#3 ] )
    rts
  //SEG202 div16s::@18
  b18:
  //SEG203 [99] (signed word~) div16s::return#7 ← (signed word)(word) div16s::resultu#0 [ rem16u#1 div16s::return#7 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 rem16u#1 div16s::return#7 ] ) -- vwsz1=vwsz2 
    lda resultu
    sta return
    lda resultu+1
    sta return+1
  //SEG204 [100] (signed word~) rem16s#32 ← (signed word)(word) rem16u#1 [ div16s::return#7 rem16s#32 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::return#7 rem16s#32 ] ) -- vwsz1=vwsz2 
    lda rem16u
    sta rem16s
    lda rem16u+1
    sta rem16s+1
    jmp breturn_from_b18
  //SEG205 div16s::@3
  b3:
  //SEG206 [101] (signed word~) div16s::$6 ← - (signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::$6 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::$6 ] ) -- vwsz1=_neg_vwsz2 
    sec
    lda divisor
    eor #$ff
    adc #0
    sta _6
    lda divisor+1
    eor #$ff
    adc #0
    sta _6+1
  //SEG207 [102] (byte) div16s::neg#2 ← (byte) div16s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16s::dividendu#3 div16s::neg#2 div16s::$6 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::dividendu#3 div16s::neg#2 div16s::$6 ] ) -- vbuz1=vbuz1_bxor_vbuc1 
    lda neg
    eor #1
    sta neg
  //SEG208 [103] (word~) div16s::divisoru#4 ← (word)(signed word~) div16s::$6 [ div16s::dividendu#3 div16s::divisoru#4 div16s::neg#2 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::dividendu#3 div16s::divisoru#4 div16s::neg#2 ] ) -- vwuz1=vwuz2 
    lda _6
    sta divisoru
    lda _6+1
    sta divisoru+1
    jmp b4_from_b3
  //SEG209 div16s::@1
  b1:
  //SEG210 [104] (signed word~) div16s::$2 ← - (signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::$2 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::$2 ] ) -- vwsz1=_neg_vwsz2 
    sec
    lda dividend
    eor #$ff
    adc #0
    sta _2
    lda dividend+1
    eor #$ff
    adc #0
    sta _2+1
  //SEG211 [105] (word~) div16s::dividendu#7 ← (word)(signed word~) div16s::$2 [ div16s::divisor#0 div16s::dividendu#7 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::dividendu#7 ] ) -- vwuz1=vwuz2 
    lda _2
    sta dividendu
    lda _2+1
    sta dividendu+1
  //SEG212 [85] phi from div16s::@1 to div16s::@2 [phi:div16s::@1->div16s::@2]
  b2_from_b1:
  //SEG213 [85] phi (word) div16s::dividendu#3 = (word~) div16s::dividendu#7 [phi:div16s::@1->div16s::@2#0] -- register_copy 
  //SEG214 [85] phi (byte) div16s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:div16s::@1->div16s::@2#1] -- vbuz1=vbuc1 
    lda #1
    sta neg
    jmp b2
}
//SEG215 div16u
div16u: {
    .label return = $4e
    .label dividend = $18
    .label divisor = $1a
    .label return_2 = $42
    .label return_3 = $67
  //SEG216 [107] (word) divr16u::dividend#1 ← (word) div16u::dividend#2 [ div16u::divisor#2 divr16u::dividend#1 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::divisor#2 divr16u::dividend#1 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::divisor#2 divr16u::dividend#1 ] ) -- vwuz1=vwuz2 
    lda dividend
    sta divr16u.dividend
    lda dividend+1
    sta divr16u.dividend+1
  //SEG217 [108] (word) divr16u::divisor#0 ← (word) div16u::divisor#2 [ divr16u::dividend#1 divr16u::divisor#0 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::dividend#1 divr16u::divisor#0 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#1 divr16u::divisor#0 ] ) -- vwuz1=vwuz2 
    lda divisor
    sta divr16u.divisor
    lda divisor+1
    sta divr16u.divisor+1
  //SEG218 [109] call divr16u param-assignment [ rem16u#1 divr16u::return#0 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 rem16u#1 divr16u::return#0 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#0 ] )
  //SEG219 [113] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
    jsr divr16u
  //SEG220 [110] (word) divr16u::return#2 ← (word) divr16u::return#0 [ rem16u#1 divr16u::return#2 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 rem16u#1 divr16u::return#2 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#2 ] ) -- vwuz1=vwuz2 
    lda divr16u.return
    sta divr16u.return_2
    lda divr16u.return+1
    sta divr16u.return_2+1
    jmp b2
  //SEG221 div16u::@2
  b2:
  //SEG222 [111] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::return#0 rem16u#1 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 rem16u#1 ] ) -- vwuz1=vwuz2 
    lda divr16u.return_2
    sta return
    lda divr16u.return_2+1
    sta return+1
    jmp breturn
  //SEG223 div16u::@return
  breturn:
  //SEG224 [112] return  [ div16u::return#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::return#0 rem16u#1 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 rem16u#1 ] )
    rts
}
//SEG225 divr16u
divr16u: {
    .label _1 = $50
    .label _2 = $51
    .label rem = $1c
    .label dividend = $1e
    .label quotient = $20
    .label i = $22
    .label return = $20
    .label divisor = $4a
    .label return_2 = $4c
  //SEG226 [114] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  b1_from_divr16u:
  //SEG227 [114] phi (byte) divr16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG228 [114] phi (word) divr16u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta quotient
    lda #>0
    sta quotient+1
  //SEG229 [114] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#1 [phi:divr16u->divr16u::@1#2] -- register_copy 
  //SEG230 [114] phi (word) divr16u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta rem
    lda #>0
    sta rem+1
    jmp b1
  //SEG231 [114] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  b1_from_b3:
  //SEG232 [114] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG233 [114] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG234 [114] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG235 [114] phi (word) divr16u::rem#4 = (word) divr16u::rem#10 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG236 divr16u::@1
  b1:
  //SEG237 [115] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ) -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG238 [116] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) -- vbuz1=_hi_vwuz2 
    lda dividend+1
    sta _1
  //SEG239 [117] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and _1
    sta _2
  //SEG240 [118] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ) -- vbuz1_eq_0_then_la1 
    lda _2
    beq b2_from_b1
    jmp b4
  //SEG241 divr16u::@4
  b4:
  //SEG242 [119] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG243 [120] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG244 [120] phi (word) divr16u::rem#5 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp b2
  //SEG245 divr16u::@2
  b2:
  //SEG246 [121] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 ] ) -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG247 [122] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ) -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG248 [123] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ) -- vwuz1_lt_vwuz2_then_la1 
    lda rem+1
    cmp divisor+1
    bcc b3_from_b2
    bne !+
    lda rem
    cmp divisor
    bcc b3_from_b2
  !:
    jmp b5
  //SEG249 divr16u::@5
  b5:
  //SEG250 [124] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#2 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#2 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#2 ] ) -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG251 [125] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (word) divr16u::divisor#0 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) -- vwuz1=vwuz1_minus_vwuz2 
    lda rem
    sec
    sbc divisor
    sta rem
    lda rem+1
    sbc divisor+1
    sta rem+1
  //SEG252 [126] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG253 [126] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG254 [126] phi (word) divr16u::rem#10 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp b3
  //SEG255 divr16u::@3
  b3:
  //SEG256 [127] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 [ divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG257 [128] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto divr16u::@1 [ divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b3
    jmp b6
  //SEG258 divr16u::@6
  b6:
  //SEG259 [129] (word) rem16u#1 ← (word) divr16u::rem#10 [ rem16u#1 divr16u::return#0 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 rem16u#1 divr16u::return#0 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#0 ] ) -- vwuz1=vwuz2 
    lda rem
    sta rem16u
    lda rem+1
    sta rem16u+1
    jmp breturn
  //SEG260 divr16u::@return
  breturn:
  //SEG261 [130] return  [ rem16u#1 divr16u::return#0 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 rem16u#1 divr16u::return#0 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#0 ] )
    rts
}
//SEG262 test_8s
test_8s: {
    .label dividend = $54
    .label divisor = $55
    .label res = $59
    .label i = $23
  //SEG263 [132] phi from test_8s to test_8s::@1 [phi:test_8s->test_8s::@1]
  b1_from_test_8s:
  //SEG264 [132] phi (byte) test_8s::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8s->test_8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG265 [132] phi from test_8s::@11 to test_8s::@1 [phi:test_8s::@11->test_8s::@1]
  b1_from_b11:
  //SEG266 [132] phi (byte) test_8s::i#10 = (byte) test_8s::i#1 [phi:test_8s::@11->test_8s::@1#0] -- register_copy 
    jmp b1
  //SEG267 test_8s::@1
  b1:
  //SEG268 [133] (signed byte) test_8s::dividend#0 ← *((const signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#10) [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG269 [134] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
  //SEG270 [135] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 ] ) -- vbsz1=vbsz2 
    lda dividend
    sta div8s.dividend
  //SEG271 [136] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] ) -- vbsz1=vbsz2 
    lda divisor
    sta div8s.divisor
  //SEG272 [137] call div8s param-assignment [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 rem8s#3 ] )
    jsr div8s
  //SEG273 [138] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 rem8s#3 ] ) -- vbsz1=vbsz2 
    lda div8s.return
    sta div8s.return_3
    jmp b3
  //SEG274 test_8s::@3
  b3:
  //SEG275 [139] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] ) -- vbsz1=vbsz2 
    lda div8s.return_3
    sta res
  //SEG276 [140] (signed byte) print_sbyte::b#1 ← (signed byte) test_8s::dividend#0 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 rem8s#3 ] ) -- vbsz1=vbsz2 
    lda dividend
    sta print_sbyte.b
  //SEG277 [141] (byte*~) print_char_cursor#180 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 print_char_cursor#180 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 print_char_cursor#180 rem8s#3 ] ) -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG278 [142] call print_sbyte param-assignment [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] )
  //SEG279 [160] phi from test_8s::@3 to print_sbyte [phi:test_8s::@3->print_sbyte]
  print_sbyte_from_b3:
  //SEG280 [160] phi (byte*) print_char_cursor#131 = (byte*~) print_char_cursor#180 [phi:test_8s::@3->print_sbyte#0] -- register_copy 
  //SEG281 [160] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#1 [phi:test_8s::@3->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG282 [143] phi from test_8s::@3 to test_8s::@4 [phi:test_8s::@3->test_8s::@4]
  b4_from_b3:
    jmp b4
  //SEG283 test_8s::@4
  b4:
  //SEG284 [144] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] )
  //SEG285 [76] phi from test_8s::@4 to print_str [phi:test_8s::@4->print_str]
  print_str_from_b4:
  //SEG286 [76] phi (byte*) print_str::str#15 = (const string) test_8s::str [phi:test_8s::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG287 test_8s::@5
  b5:
  //SEG288 [145] (signed byte) print_sbyte::b#2 ← (signed byte) test_8s::divisor#0 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::res#0 print_sbyte::b#2 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::res#0 print_sbyte::b#2 rem8s#3 ] ) -- vbsz1=vbsz2 
    lda divisor
    sta print_sbyte.b
  //SEG289 [146] call print_sbyte param-assignment [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 test_8s::res#0 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 test_8s::res#0 rem8s#3 ] )
  //SEG290 [160] phi from test_8s::@5 to print_sbyte [phi:test_8s::@5->print_sbyte]
  print_sbyte_from_b5:
  //SEG291 [160] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#126 [phi:test_8s::@5->print_sbyte#0] -- register_copy 
  //SEG292 [160] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#2 [phi:test_8s::@5->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG293 [147] phi from test_8s::@5 to test_8s::@6 [phi:test_8s::@5->test_8s::@6]
  b6_from_b5:
    jmp b6
  //SEG294 test_8s::@6
  b6:
  //SEG295 [148] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::res#0 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::res#0 rem8s#3 ] )
  //SEG296 [76] phi from test_8s::@6 to print_str [phi:test_8s::@6->print_str]
  print_str_from_b6:
  //SEG297 [76] phi (byte*) print_str::str#15 = (const string) test_8s::str1 [phi:test_8s::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG298 test_8s::@7
  b7:
  //SEG299 [149] (signed byte) print_sbyte::b#3 ← (signed byte) test_8s::res#0 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 print_sbyte::b#3 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 print_sbyte::b#3 rem8s#3 ] ) -- vbsz1=vbsz2 
    lda res
    sta print_sbyte.b
  //SEG300 [150] call print_sbyte param-assignment [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 rem8s#3 ] )
  //SEG301 [160] phi from test_8s::@7 to print_sbyte [phi:test_8s::@7->print_sbyte]
  print_sbyte_from_b7:
  //SEG302 [160] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#126 [phi:test_8s::@7->print_sbyte#0] -- register_copy 
  //SEG303 [160] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#3 [phi:test_8s::@7->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG304 [151] phi from test_8s::@7 to test_8s::@8 [phi:test_8s::@7->test_8s::@8]
  b8_from_b7:
    jmp b8
  //SEG305 test_8s::@8
  b8:
  //SEG306 [152] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 rem8s#3 ] )
  //SEG307 [76] phi from test_8s::@8 to print_str [phi:test_8s::@8->print_str]
  print_str_from_b8:
  //SEG308 [76] phi (byte*) print_str::str#15 = (const string) test_8s::str2 [phi:test_8s::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG309 test_8s::@9
  b9:
  //SEG310 [153] (signed byte) print_sbyte::b#4 ← (signed byte) rem8s#3 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 print_sbyte::b#4 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 print_sbyte::b#4 ] ) -- vbsz1=vbsz2 
    lda rem8s
    sta print_sbyte.b
  //SEG311 [154] call print_sbyte param-assignment [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 ] )
  //SEG312 [160] phi from test_8s::@9 to print_sbyte [phi:test_8s::@9->print_sbyte]
  print_sbyte_from_b9:
  //SEG313 [160] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#126 [phi:test_8s::@9->print_sbyte#0] -- register_copy 
  //SEG314 [160] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#4 [phi:test_8s::@9->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG315 [155] phi from test_8s::@9 to test_8s::@10 [phi:test_8s::@9->test_8s::@10]
  b10_from_b9:
    jmp b10
  //SEG316 test_8s::@10
  b10:
  //SEG317 [156] call print_ln param-assignment [ print_line_cursor#1 test_8s::i#10 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 ] )
  //SEG318 [44] phi from test_8s::@10 to print_ln [phi:test_8s::@10->print_ln]
  print_ln_from_b10:
  //SEG319 [44] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#1 [phi:test_8s::@10->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b11
  //SEG320 test_8s::@11
  b11:
  //SEG321 [157] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10 [ print_line_cursor#1 test_8s::i#1 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG322 [158] if((byte) test_8s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8s::@1 [ print_line_cursor#1 test_8s::i#1 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #6
    bne b1_from_b11
    jmp breturn
  //SEG323 test_8s::@return
  breturn:
  //SEG324 [159] return  [ print_line_cursor#1 ] ( main:2::test_8s:11 [ print_line_cursor#1 ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .byte $7f, -$7f, -$7f, $7f, $7f, $7f
    divisors: .byte 5, 7, -$b, -$d, $11, $13
}
//SEG325 print_sbyte
print_sbyte: {
    .label b = $24
  //SEG326 [161] if((signed byte) print_sbyte::b#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte::@1 [ print_char_cursor#131 print_sbyte::b#5 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#131 print_sbyte::b#5 ] ) -- vbsz1_ge_0_then_la1 
    lda b
    cmp #0
    bpl b1_from_print_sbyte
  //SEG327 [162] phi from print_sbyte to print_sbyte::@2 [phi:print_sbyte->print_sbyte::@2]
  b2_from_print_sbyte:
    jmp b2
  //SEG328 print_sbyte::@2
  b2:
  //SEG329 [163] call print_char param-assignment [ print_char_cursor#17 print_sbyte::b#5 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_sbyte::b#5 ] )
  //SEG330 [72] phi from print_sbyte::@2 to print_char [phi:print_sbyte::@2->print_char]
  print_char_from_b2:
  //SEG331 [72] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#131 [phi:print_sbyte::@2->print_char#0] -- register_copy 
  //SEG332 [72] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sbyte::@2->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta print_char.ch
    jsr print_char
    jmp b4
  //SEG333 print_sbyte::@4
  b4:
  //SEG334 [164] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#5 [ print_char_cursor#17 print_sbyte::b#0 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_sbyte::b#0 ] ) -- vbsz1=_neg_vbsz1 
    lda b
    eor #$ff
    clc
    adc #1
    sta b
  //SEG335 [165] phi from print_sbyte print_sbyte::@4 to print_sbyte::@1 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1]
  b1_from_print_sbyte:
  b1_from_b4:
  //SEG336 [165] phi (byte*) print_char_cursor#130 = (byte*) print_char_cursor#131 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1#0] -- register_copy 
  //SEG337 [165] phi (signed byte) print_sbyte::b#6 = (signed byte) print_sbyte::b#5 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1#1] -- register_copy 
    jmp b1
  //SEG338 print_sbyte::@1
  b1:
  //SEG339 [166] (byte~) print_byte::b#9 ← (byte)(signed byte) print_sbyte::b#6 [ print_byte::b#9 print_char_cursor#130 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#9 print_char_cursor#130 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#9 print_char_cursor#130 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#9 print_char_cursor#130 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_byte::b#9 print_char_cursor#130 ] ) -- vbuz1=vbuz2 
    lda b
    sta print_byte.b
  //SEG340 [167] call print_byte param-assignment [ print_char_cursor#17 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] )
  //SEG341 [64] phi from print_sbyte::@1 to print_byte [phi:print_sbyte::@1->print_byte]
  print_byte_from_b1:
  //SEG342 [64] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#130 [phi:print_sbyte::@1->print_byte#0] -- register_copy 
  //SEG343 [64] phi (byte) print_byte::b#7 = (byte~) print_byte::b#9 [phi:print_sbyte::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG344 print_sbyte::@return
  breturn:
  //SEG345 [168] return  [ print_char_cursor#17 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] )
    rts
}
//SEG346 div8s
div8s: {
    .label _2 = $5d
    .label _6 = $5c
    .label neg = $27
    .label resultu = $5b
    .label return = $28
    .label dividend = $56
    .label divisor = $57
    .label return_3 = $58
    .label dividendu = $25
    .label divisoru = $26
  //SEG347 [169] if((signed byte) div8s::dividend#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@1 [ div8s::dividend#0 div8s::divisor#0 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] ) -- vbsz1_lt_0_then_la1 
    lda dividend
    bmi b1
    jmp b16
  //SEG348 div8s::@16
  b16:
  //SEG349 [170] (byte~) div8s::dividendu#8 ← (byte)(signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::dividendu#8 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendu#8 ] ) -- vbuz1=vbuz2 
    lda dividend
    sta dividendu
  //SEG350 [171] phi from div8s::@16 to div8s::@2 [phi:div8s::@16->div8s::@2]
  b2_from_b16:
  //SEG351 [171] phi (byte) div8s::dividendu#3 = (byte~) div8s::dividendu#8 [phi:div8s::@16->div8s::@2#0] -- register_copy 
  //SEG352 [171] phi (byte) div8s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8s::@16->div8s::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta neg
    jmp b2
  //SEG353 div8s::@2
  b2:
  //SEG354 [172] if((signed byte) div8s::divisor#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@3 [ div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 ] ) -- vbsz1_lt_0_then_la1 
    lda divisor
    bmi b3
    jmp b17
  //SEG355 div8s::@17
  b17:
  //SEG356 [173] (byte~) div8s::divisoru#5 ← (byte)(signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::divisoru#5 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::divisoru#5 ] ) -- vbuz1=vbuz2 
    lda divisor
    sta divisoru
  //SEG357 [174] phi from div8s::@17 div8s::@3 to div8s::@4 [phi:div8s::@17/div8s::@3->div8s::@4]
  b4_from_b17:
  b4_from_b3:
  //SEG358 [174] phi (byte) div8s::neg#4 = (byte) div8s::neg#3 [phi:div8s::@17/div8s::@3->div8s::@4#0] -- register_copy 
  //SEG359 [174] phi (byte) div8s::divisoru#3 = (byte~) div8s::divisoru#5 [phi:div8s::@17/div8s::@3->div8s::@4#1] -- register_copy 
    jmp b4
  //SEG360 div8s::@4
  b4:
  //SEG361 [175] (byte) div8u::dividend#0 ← (byte) div8s::dividendu#3 [ div8s::divisoru#3 div8s::neg#4 div8u::dividend#0 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisoru#3 div8s::neg#4 div8u::dividend#0 ] ) -- vbuz1=vbuz2 
    lda dividendu
    sta div8u.dividend
  //SEG362 [176] (byte) div8u::divisor#0 ← (byte) div8s::divisoru#3 [ div8s::neg#4 div8u::dividend#0 div8u::divisor#0 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::dividend#0 div8u::divisor#0 ] ) -- vbuz1=vbuz2 
    lda divisoru
    sta div8u.divisor
  //SEG363 [177] call div8u param-assignment [ div8s::neg#4 div8u::return#0 rem8u#17 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 rem8u#17 ] )
  //SEG364 [192] phi from div8s::@4 to div8u [phi:div8s::@4->div8u]
  div8u_from_b4:
  //SEG365 [192] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#0 [phi:div8s::@4->div8u#0] -- register_copy 
  //SEG366 [192] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#0 [phi:div8s::@4->div8u#1] -- register_copy 
    jsr div8u
  //SEG367 [178] (byte) div8u::return#2 ← (byte) div8u::return#0 [ div8s::neg#4 div8u::return#2 rem8u#17 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#2 rem8u#17 ] ) -- vbuz1=vbuz2 
    lda div8u.return
    sta div8u.return_2
    jmp b15
  //SEG368 div8s::@15
  b15:
  //SEG369 [179] (byte) div8s::resultu#0 ← (byte) div8u::return#2 [ div8s::neg#4 div8s::resultu#0 rem8u#17 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8s::resultu#0 rem8u#17 ] ) -- vbuz1=vbuz2 
    lda div8u.return_2
    sta resultu
  //SEG370 [180] if((byte) div8s::neg#4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@18 [ div8s::resultu#0 rem8u#17 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 rem8u#17 ] ) -- vbuz1_eq_0_then_la1 
    lda neg
    beq b18
    jmp b11
  //SEG371 div8s::@11
  b11:
  //SEG372 [181] (signed byte) rem8s#2 ← - (signed byte)(byte) rem8u#17 [ div8s::resultu#0 rem8s#2 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 rem8s#2 ] ) -- vbsz1=_neg_vbsz2 
    lda rem8u
    eor #$ff
    clc
    adc #1
    sta rem8s
  //SEG373 [182] (signed byte) div8s::return#1 ← - (signed byte)(byte) div8s::resultu#0 [ rem8s#2 div8s::return#1 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 rem8s#2 div8s::return#1 ] ) -- vbsz1=_neg_vbsz2 
    lda resultu
    eor #$ff
    clc
    adc #1
    sta return
  //SEG374 [183] phi from div8s::@11 div8s::@18 to div8s::@return [phi:div8s::@11/div8s::@18->div8s::@return]
  breturn_from_b11:
  breturn_from_b18:
  //SEG375 [183] phi (signed byte) rem8s#3 = (signed byte) rem8s#2 [phi:div8s::@11/div8s::@18->div8s::@return#0] -- register_copy 
  //SEG376 [183] phi (signed byte) div8s::return#2 = (signed byte) div8s::return#1 [phi:div8s::@11/div8s::@18->div8s::@return#1] -- register_copy 
    jmp breturn
  //SEG377 div8s::@return
  breturn:
  //SEG378 [184] return  [ div8s::return#2 rem8s#3 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 rem8s#3 ] )
    rts
  //SEG379 div8s::@18
  b18:
  //SEG380 [185] (signed byte~) div8s::return#7 ← (signed byte)(byte) div8s::resultu#0 [ rem8u#17 div8s::return#7 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 rem8u#17 div8s::return#7 ] ) -- vbsz1=vbsz2 
    lda resultu
    sta return
  //SEG381 [186] (signed byte~) rem8s#33 ← (signed byte)(byte) rem8u#17 [ div8s::return#7 rem8s#33 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#7 rem8s#33 ] ) -- vbsz1=vbsz2 
    lda rem8u
    sta rem8s
    jmp breturn_from_b18
  //SEG382 div8s::@3
  b3:
  //SEG383 [187] (signed byte~) div8s::$6 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::$6 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::$6 ] ) -- vbsz1=_neg_vbsz2 
    lda divisor
    eor #$ff
    clc
    adc #1
    sta _6
  //SEG384 [188] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8s::dividendu#3 div8s::neg#2 div8s::$6 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::neg#2 div8s::$6 ] ) -- vbuz1=vbuz1_bxor_vbuc1 
    lda neg
    eor #1
    sta neg
  //SEG385 [189] (byte~) div8s::divisoru#4 ← (byte)(signed byte~) div8s::$6 [ div8s::dividendu#3 div8s::divisoru#4 div8s::neg#2 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::divisoru#4 div8s::neg#2 ] ) -- vbuz1=vbuz2 
    lda _6
    sta divisoru
    jmp b4_from_b3
  //SEG386 div8s::@1
  b1:
  //SEG387 [190] (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::$2 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::$2 ] ) -- vbsz1=_neg_vbsz2 
    lda dividend
    eor #$ff
    clc
    adc #1
    sta _2
  //SEG388 [191] (byte~) div8s::dividendu#7 ← (byte)(signed byte~) div8s::$2 [ div8s::divisor#0 div8s::dividendu#7 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendu#7 ] ) -- vbuz1=vbuz2 
    lda _2
    sta dividendu
  //SEG389 [171] phi from div8s::@1 to div8s::@2 [phi:div8s::@1->div8s::@2]
  b2_from_b1:
  //SEG390 [171] phi (byte) div8s::dividendu#3 = (byte~) div8s::dividendu#7 [phi:div8s::@1->div8s::@2#0] -- register_copy 
  //SEG391 [171] phi (byte) div8s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:div8s::@1->div8s::@2#1] -- vbuz1=vbuc1 
    lda #1
    sta neg
    jmp b2
}
//SEG392 div8u
div8u: {
    .label return = $60
    .label dividend = $2a
    .label divisor = $2b
    .label return_2 = $5a
    .label return_3 = $6d
  //SEG393 [193] (byte) divr8u::dividend#0 ← (byte) div8u::dividend#2 [ div8u::divisor#2 divr8u::dividend#0 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#2 divr8u::dividend#0 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#2 divr8u::dividend#0 ] ) -- vbuz1=vbuz2 
    lda dividend
    sta divr8u.dividend
  //SEG394 [194] (byte) divr8u::divisor#0 ← (byte) div8u::divisor#2 [ divr8u::dividend#0 divr8u::divisor#0 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::dividend#0 divr8u::divisor#0 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::dividend#0 divr8u::divisor#0 ] ) -- vbuz1=vbuz2 
    lda divisor
    sta divr8u.divisor
  //SEG395 [195] call divr8u param-assignment [ rem8u#17 divr8u::return#1 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 rem8u#17 divr8u::return#1 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 rem8u#17 divr8u::return#1 ] )
  //SEG396 [199] phi from div8u to divr8u [phi:div8u->divr8u]
  divr8u_from_div8u:
    jsr divr8u
  //SEG397 [196] (byte) divr8u::return#0 ← (byte) divr8u::return#1 [ rem8u#17 divr8u::return#0 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 rem8u#17 divr8u::return#0 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 rem8u#17 divr8u::return#0 ] ) -- vbuz1=vbuz2 
    lda divr8u.return_1
    sta divr8u.return
    jmp b2
  //SEG398 div8u::@2
  b2:
  //SEG399 [197] (byte) div8u::return#0 ← (byte) divr8u::return#0 [ div8u::return#0 rem8u#17 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 rem8u#17 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#17 ] ) -- vbuz1=vbuz2 
    lda divr8u.return
    sta return
    jmp breturn
  //SEG400 div8u::@return
  breturn:
  //SEG401 [198] return  [ div8u::return#0 rem8u#17 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 rem8u#17 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#17 ] )
    rts
}
//SEG402 divr8u
divr8u: {
    .label _1 = $61
    .label dividend = $2d
    .label divisor = $5e
    .label return = $5f
    .label rem = $2c
    .label quotient = $2e
    .label i = $2f
    .label return_1 = $2e
  //SEG403 [200] phi from divr8u to divr8u::@1 [phi:divr8u->divr8u::@1]
  b1_from_divr8u:
  //SEG404 [200] phi (byte) divr8u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr8u->divr8u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG405 [200] phi (byte) divr8u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr8u->divr8u::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta quotient
  //SEG406 [200] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#0 [phi:divr8u->divr8u::@1#2] -- register_copy 
  //SEG407 [200] phi (byte) divr8u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr8u->divr8u::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta rem
    jmp b1
  //SEG408 [200] phi from divr8u::@3 to divr8u::@1 [phi:divr8u::@3->divr8u::@1]
  b1_from_b3:
  //SEG409 [200] phi (byte) divr8u::i#2 = (byte) divr8u::i#1 [phi:divr8u::@3->divr8u::@1#0] -- register_copy 
  //SEG410 [200] phi (byte) divr8u::quotient#3 = (byte) divr8u::return#1 [phi:divr8u::@3->divr8u::@1#1] -- register_copy 
  //SEG411 [200] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#1 [phi:divr8u::@3->divr8u::@1#2] -- register_copy 
  //SEG412 [200] phi (byte) divr8u::rem#4 = (byte) divr8u::rem#10 [phi:divr8u::@3->divr8u::@1#3] -- register_copy 
    jmp b1
  //SEG413 divr8u::@1
  b1:
  //SEG414 [201] (byte) divr8u::rem#1 ← (byte) divr8u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ) -- vbuz1=vbuz1_rol_1 
    asl rem
  //SEG415 [202] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte/word/signed word/dword/signed dword) 128 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and dividend
    sta _1
  //SEG416 [203] if((byte~) divr8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr8u::@2 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ) -- vbuz1_eq_0_then_la1 
    lda _1
    beq b2_from_b1
    jmp b4
  //SEG417 divr8u::@4
  b4:
  //SEG418 [204] (byte) divr8u::rem#2 ← (byte) divr8u::rem#1 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ) -- vbuz1=vbuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG419 [205] phi from divr8u::@1 divr8u::@4 to divr8u::@2 [phi:divr8u::@1/divr8u::@4->divr8u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG420 [205] phi (byte) divr8u::rem#5 = (byte) divr8u::rem#1 [phi:divr8u::@1/divr8u::@4->divr8u::@2#0] -- register_copy 
    jmp b2
  //SEG421 divr8u::@2
  b2:
  //SEG422 [206] (byte) divr8u::dividend#1 ← (byte) divr8u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] ) -- vbuz1=vbuz1_rol_1 
    asl dividend
  //SEG423 [207] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ) -- vbuz1=vbuz1_rol_1 
    asl quotient
  //SEG424 [208] if((byte) divr8u::rem#5<(byte) divr8u::divisor#0) goto divr8u::@3 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ) -- vbuz1_lt_vbuz2_then_la1 
    lda rem
    cmp divisor
    bcc b3_from_b2
    jmp b5
  //SEG425 divr8u::@5
  b5:
  //SEG426 [209] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] ) -- vbuz1=_inc_vbuz1 
    inc quotient
  //SEG427 [210] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ) -- vbuz1=vbuz1_minus_vbuz2 
    lda rem
    sec
    sbc divisor
    sta rem
  //SEG428 [211] phi from divr8u::@2 divr8u::@5 to divr8u::@3 [phi:divr8u::@2/divr8u::@5->divr8u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG429 [211] phi (byte) divr8u::return#1 = (byte) divr8u::quotient#1 [phi:divr8u::@2/divr8u::@5->divr8u::@3#0] -- register_copy 
  //SEG430 [211] phi (byte) divr8u::rem#10 = (byte) divr8u::rem#5 [phi:divr8u::@2/divr8u::@5->divr8u::@3#1] -- register_copy 
    jmp b3
  //SEG431 divr8u::@3
  b3:
  //SEG432 [212] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2 [ divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG433 [213] if((byte) divr8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto divr8u::@1 [ divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #8
    bne b1_from_b3
    jmp b6
  //SEG434 divr8u::@6
  b6:
  //SEG435 [214] (byte) rem8u#17 ← (byte) divr8u::rem#10 [ rem8u#17 divr8u::return#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 rem8u#17 divr8u::return#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 rem8u#17 divr8u::return#1 ] ) -- vbuz1=vbuz2 
    lda rem
    sta rem8u
    jmp breturn
  //SEG436 divr8u::@return
  breturn:
  //SEG437 [215] return  [ rem8u#17 divr8u::return#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 rem8u#17 divr8u::return#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 rem8u#17 divr8u::return#1 ] )
    rts
}
//SEG438 test_16u
test_16u: {
    .label dividend = $63
    .label divisor = $65
    .label res = $69
    .label i = $30
  //SEG439 [217] phi from test_16u to test_16u::@1 [phi:test_16u->test_16u::@1]
  b1_from_test_16u:
  //SEG440 [217] phi (byte) test_16u::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16u->test_16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG441 [217] phi from test_16u::@11 to test_16u::@1 [phi:test_16u::@11->test_16u::@1]
  b1_from_b11:
  //SEG442 [217] phi (byte) test_16u::i#10 = (byte) test_16u::i#1 [phi:test_16u::@11->test_16u::@1#0] -- register_copy 
    jmp b1
  //SEG443 test_16u::@1
  b1:
  //SEG444 [218] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte) test_16u::i#10) [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 ] ) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
    lda dividends+1,y
    sta dividend+1
  //SEG445 [219] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte) test_16u::i#10) [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
    lda divisors+1,y
    sta divisor+1
  //SEG446 [220] (word) div16u::dividend#1 ← (word) test_16u::dividend#0 [ print_line_cursor#1 div16u::dividend#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 div16u::dividend#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) -- vwuz1=vwuz2 
    lda dividend
    sta div16u.dividend
    lda dividend+1
    sta div16u.dividend+1
  //SEG447 [221] (word) div16u::divisor#1 ← (word) test_16u::divisor#0 [ print_line_cursor#1 div16u::dividend#1 div16u::divisor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 div16u::dividend#1 div16u::divisor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) -- vwuz1=vwuz2 
    lda divisor
    sta div16u.divisor
    lda divisor+1
    sta div16u.divisor+1
  //SEG448 [222] call div16u param-assignment [ print_line_cursor#1 div16u::return#0 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 div16u::return#0 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] )
  //SEG449 [106] phi from test_16u::@1 to div16u [phi:test_16u::@1->div16u]
  div16u_from_b1:
  //SEG450 [106] phi (word) div16u::divisor#2 = (word) div16u::divisor#1 [phi:test_16u::@1->div16u#0] -- register_copy 
  //SEG451 [106] phi (word) div16u::dividend#2 = (word) div16u::dividend#1 [phi:test_16u::@1->div16u#1] -- register_copy 
    jsr div16u
  //SEG452 [223] (word) div16u::return#3 ← (word) div16u::return#0 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] ( main:2::test_16u:9 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] ) -- vwuz1=vwuz2 
    lda div16u.return
    sta div16u.return_3
    lda div16u.return+1
    sta div16u.return_3+1
    jmp b3
  //SEG453 test_16u::@3
  b3:
  //SEG454 [224] (word) test_16u::res#0 ← (word) div16u::return#3 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ) -- vwuz1=vwuz2 
    lda div16u.return_3
    sta res
    lda div16u.return_3+1
    sta res+1
  //SEG455 [225] (word) print_word::w#1 ← (word) test_16u::dividend#0 [ print_line_cursor#1 print_word::w#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_word::w#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ) -- vwuz1=vwuz2 
    lda dividend
    sta print_word.w
    lda dividend+1
    sta print_word.w+1
  //SEG456 [226] (byte*~) print_char_cursor#163 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_word::w#1 print_char_cursor#163 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_word::w#1 print_char_cursor#163 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ) -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG457 [227] call print_word param-assignment [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
  //SEG458 [58] phi from test_16u::@3 to print_word [phi:test_16u::@3->print_word]
  print_word_from_b3:
  //SEG459 [58] phi (byte*) print_char_cursor#132 = (byte*~) print_char_cursor#163 [phi:test_16u::@3->print_word#0] -- register_copy 
  //SEG460 [58] phi (word) print_word::w#5 = (word) print_word::w#1 [phi:test_16u::@3->print_word#1] -- register_copy 
    jsr print_word
  //SEG461 [228] phi from test_16u::@3 to test_16u::@4 [phi:test_16u::@3->test_16u::@4]
  b4_from_b3:
    jmp b4
  //SEG462 test_16u::@4
  b4:
  //SEG463 [229] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
  //SEG464 [76] phi from test_16u::@4 to print_str [phi:test_16u::@4->print_str]
  print_str_from_b4:
  //SEG465 [76] phi (byte*) print_str::str#15 = (const string) test_16u::str [phi:test_16u::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG466 test_16u::@5
  b5:
  //SEG467 [230] (word) print_word::w#2 ← (word) test_16u::divisor#0 [ print_line_cursor#1 print_char_cursor#126 print_word::w#2 rem16u#1 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 print_word::w#2 rem16u#1 test_16u::i#10 test_16u::res#0 ] ) -- vwuz1=vwuz2 
    lda divisor
    sta print_word.w
    lda divisor+1
    sta print_word.w+1
  //SEG468 [231] call print_word param-assignment [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 test_16u::res#0 ] )
  //SEG469 [58] phi from test_16u::@5 to print_word [phi:test_16u::@5->print_word]
  print_word_from_b5:
  //SEG470 [58] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#126 [phi:test_16u::@5->print_word#0] -- register_copy 
  //SEG471 [58] phi (word) print_word::w#5 = (word) print_word::w#2 [phi:test_16u::@5->print_word#1] -- register_copy 
    jsr print_word
  //SEG472 [232] phi from test_16u::@5 to test_16u::@6 [phi:test_16u::@5->test_16u::@6]
  b6_from_b5:
    jmp b6
  //SEG473 test_16u::@6
  b6:
  //SEG474 [233] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 test_16u::res#0 ] )
  //SEG475 [76] phi from test_16u::@6 to print_str [phi:test_16u::@6->print_str]
  print_str_from_b6:
  //SEG476 [76] phi (byte*) print_str::str#15 = (const string) test_16u::str1 [phi:test_16u::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG477 test_16u::@7
  b7:
  //SEG478 [234] (word) print_word::w#3 ← (word) test_16u::res#0 [ print_line_cursor#1 print_char_cursor#126 print_word::w#3 rem16u#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 print_word::w#3 rem16u#1 test_16u::i#10 ] ) -- vwuz1=vwuz2 
    lda res
    sta print_word.w
    lda res+1
    sta print_word.w+1
  //SEG479 [235] call print_word param-assignment [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 ] )
  //SEG480 [58] phi from test_16u::@7 to print_word [phi:test_16u::@7->print_word]
  print_word_from_b7:
  //SEG481 [58] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#126 [phi:test_16u::@7->print_word#0] -- register_copy 
  //SEG482 [58] phi (word) print_word::w#5 = (word) print_word::w#3 [phi:test_16u::@7->print_word#1] -- register_copy 
    jsr print_word
  //SEG483 [236] phi from test_16u::@7 to test_16u::@8 [phi:test_16u::@7->test_16u::@8]
  b8_from_b7:
    jmp b8
  //SEG484 test_16u::@8
  b8:
  //SEG485 [237] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 ] )
  //SEG486 [76] phi from test_16u::@8 to print_str [phi:test_16u::@8->print_str]
  print_str_from_b8:
  //SEG487 [76] phi (byte*) print_str::str#15 = (const string) test_16u::str2 [phi:test_16u::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG488 test_16u::@9
  b9:
  //SEG489 [238] (word) print_word::w#4 ← (word) rem16u#1 [ print_line_cursor#1 print_char_cursor#126 print_word::w#4 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 print_word::w#4 test_16u::i#10 ] ) -- vwuz1=vwuz2 
    lda rem16u
    sta print_word.w
    lda rem16u+1
    sta print_word.w+1
  //SEG490 [239] call print_word param-assignment [ print_line_cursor#1 print_char_cursor#17 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#17 test_16u::i#10 ] )
  //SEG491 [58] phi from test_16u::@9 to print_word [phi:test_16u::@9->print_word]
  print_word_from_b9:
  //SEG492 [58] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#126 [phi:test_16u::@9->print_word#0] -- register_copy 
  //SEG493 [58] phi (word) print_word::w#5 = (word) print_word::w#4 [phi:test_16u::@9->print_word#1] -- register_copy 
    jsr print_word
  //SEG494 [240] phi from test_16u::@9 to test_16u::@10 [phi:test_16u::@9->test_16u::@10]
  b10_from_b9:
    jmp b10
  //SEG495 test_16u::@10
  b10:
  //SEG496 [241] call print_ln param-assignment [ print_line_cursor#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 ] )
  //SEG497 [44] phi from test_16u::@10 to print_ln [phi:test_16u::@10->print_ln]
  print_ln_from_b10:
  //SEG498 [44] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#1 [phi:test_16u::@10->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b11
  //SEG499 test_16u::@11
  b11:
  //SEG500 [242] (byte) test_16u::i#1 ← (byte) test_16u::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ print_line_cursor#1 test_16u::i#1 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#1 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda #2
    clc
    adc i
    sta i
  //SEG501 [243] if((byte) test_16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16u::@1 [ print_line_cursor#1 test_16u::i#1 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$c
    bne b1_from_b11
    jmp breturn
  //SEG502 test_16u::@return
  breturn:
  //SEG503 [244] return  [ print_line_cursor#1 ] ( main:2::test_16u:9 [ print_line_cursor#1 ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .word $ffff, $ffff, $ffff, $ffff, $ffff, $ffff
    divisors: .word 5, 7, $b, $d, $11, $13
}
//SEG504 test_8u
test_8u: {
    .label dividend = $6b
    .label divisor = $6c
    .label res = $6e
    .label i = $31
  //SEG505 [246] phi from test_8u to test_8u::@1 [phi:test_8u->test_8u::@1]
  b1_from_test_8u:
  //SEG506 [246] phi (byte*) print_line_cursor#41 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:test_8u->test_8u::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG507 [246] phi (byte*) print_char_cursor#135 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:test_8u->test_8u::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG508 [246] phi (byte) test_8u::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8u->test_8u::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG509 test_8u::@1
  b1:
  //SEG510 [247] (byte) test_8u::dividend#0 ← *((const byte[]) test_8u::dividends#0 + (byte) test_8u::i#10) [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG511 [248] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
  //SEG512 [249] (byte) div8u::dividend#1 ← (byte) test_8u::dividend#0 [ print_line_cursor#41 print_char_cursor#135 div8u::dividend#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 div8u::dividend#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) -- vbuz1=vbuz2 
    lda dividend
    sta div8u.dividend
  //SEG513 [250] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0 [ print_line_cursor#41 print_char_cursor#135 div8u::dividend#1 div8u::divisor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 div8u::dividend#1 div8u::divisor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) -- vbuz1=vbuz2 
    lda divisor
    sta div8u.divisor
  //SEG514 [251] call div8u param-assignment [ print_line_cursor#41 print_char_cursor#135 div8u::return#0 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 div8u::return#0 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] )
  //SEG515 [192] phi from test_8u::@1 to div8u [phi:test_8u::@1->div8u]
  div8u_from_b1:
  //SEG516 [192] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#1 [phi:test_8u::@1->div8u#0] -- register_copy 
  //SEG517 [192] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#1 [phi:test_8u::@1->div8u#1] -- register_copy 
    jsr div8u
  //SEG518 [252] (byte) div8u::return#3 ← (byte) div8u::return#0 [ print_line_cursor#41 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 ] ) -- vbuz1=vbuz2 
    lda div8u.return
    sta div8u.return_3
    jmp b3
  //SEG519 test_8u::@3
  b3:
  //SEG520 [253] (byte) test_8u::res#0 ← (byte) div8u::return#3 [ print_line_cursor#41 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 ] ) -- vbuz1=vbuz2 
    lda div8u.return_3
    sta res
  //SEG521 [254] (byte) print_byte::b#3 ← (byte) test_8u::dividend#0 [ print_line_cursor#41 print_byte::b#3 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_byte::b#3 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ) -- vbuz1=vbuz2 
    lda dividend
    sta print_byte.b
  //SEG522 [255] call print_byte param-assignment [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
  //SEG523 [64] phi from test_8u::@3 to print_byte [phi:test_8u::@3->print_byte]
  print_byte_from_b3:
  //SEG524 [64] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#135 [phi:test_8u::@3->print_byte#0] -- register_copy 
  //SEG525 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#3 [phi:test_8u::@3->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG526 [256] phi from test_8u::@3 to test_8u::@4 [phi:test_8u::@3->test_8u::@4]
  b4_from_b3:
    jmp b4
  //SEG527 test_8u::@4
  b4:
  //SEG528 [257] call print_str param-assignment [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
  //SEG529 [76] phi from test_8u::@4 to print_str [phi:test_8u::@4->print_str]
  print_str_from_b4:
  //SEG530 [76] phi (byte*) print_str::str#15 = (const string) test_8u::str [phi:test_8u::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG531 test_8u::@5
  b5:
  //SEG532 [258] (byte) print_byte::b#4 ← (byte) test_8u::divisor#0 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#4 rem8u#17 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#4 rem8u#17 test_8u::i#10 test_8u::res#0 ] ) -- vbuz1=vbuz2 
    lda divisor
    sta print_byte.b
  //SEG533 [259] call print_byte param-assignment [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 test_8u::res#0 ] )
  //SEG534 [64] phi from test_8u::@5 to print_byte [phi:test_8u::@5->print_byte]
  print_byte_from_b5:
  //SEG535 [64] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#126 [phi:test_8u::@5->print_byte#0] -- register_copy 
  //SEG536 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#4 [phi:test_8u::@5->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG537 [260] phi from test_8u::@5 to test_8u::@6 [phi:test_8u::@5->test_8u::@6]
  b6_from_b5:
    jmp b6
  //SEG538 test_8u::@6
  b6:
  //SEG539 [261] call print_str param-assignment [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 test_8u::res#0 ] )
  //SEG540 [76] phi from test_8u::@6 to print_str [phi:test_8u::@6->print_str]
  print_str_from_b6:
  //SEG541 [76] phi (byte*) print_str::str#15 = (const string) test_8u::str1 [phi:test_8u::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG542 test_8u::@7
  b7:
  //SEG543 [262] (byte) print_byte::b#5 ← (byte) test_8u::res#0 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#5 rem8u#17 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#5 rem8u#17 test_8u::i#10 ] ) -- vbuz1=vbuz2 
    lda res
    sta print_byte.b
  //SEG544 [263] call print_byte param-assignment [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 ] )
  //SEG545 [64] phi from test_8u::@7 to print_byte [phi:test_8u::@7->print_byte]
  print_byte_from_b7:
  //SEG546 [64] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#126 [phi:test_8u::@7->print_byte#0] -- register_copy 
  //SEG547 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#5 [phi:test_8u::@7->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG548 [264] phi from test_8u::@7 to test_8u::@8 [phi:test_8u::@7->test_8u::@8]
  b8_from_b7:
    jmp b8
  //SEG549 test_8u::@8
  b8:
  //SEG550 [265] call print_str param-assignment [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 ] )
  //SEG551 [76] phi from test_8u::@8 to print_str [phi:test_8u::@8->print_str]
  print_str_from_b8:
  //SEG552 [76] phi (byte*) print_str::str#15 = (const string) test_8u::str2 [phi:test_8u::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG553 test_8u::@9
  b9:
  //SEG554 [266] (byte) print_byte::b#6 ← (byte) rem8u#17 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#6 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#6 test_8u::i#10 ] ) -- vbuz1=vbuz2 
    lda rem8u
    sta print_byte.b
  //SEG555 [267] call print_byte param-assignment [ print_line_cursor#41 print_char_cursor#17 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#17 test_8u::i#10 ] )
  //SEG556 [64] phi from test_8u::@9 to print_byte [phi:test_8u::@9->print_byte]
  print_byte_from_b9:
  //SEG557 [64] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#126 [phi:test_8u::@9->print_byte#0] -- register_copy 
  //SEG558 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#6 [phi:test_8u::@9->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG559 [268] phi from test_8u::@9 to test_8u::@10 [phi:test_8u::@9->test_8u::@10]
  b10_from_b9:
    jmp b10
  //SEG560 test_8u::@10
  b10:
  //SEG561 [269] call print_ln param-assignment [ print_line_cursor#1 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#1 test_8u::i#10 ] )
  //SEG562 [44] phi from test_8u::@10 to print_ln [phi:test_8u::@10->print_ln]
  print_ln_from_b10:
  //SEG563 [44] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#41 [phi:test_8u::@10->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b11
  //SEG564 test_8u::@11
  b11:
  //SEG565 [270] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10 [ print_line_cursor#1 test_8u::i#1 ] ( main:2::test_8u:7 [ print_line_cursor#1 test_8u::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG566 [271] if((byte) test_8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8u::@12 [ print_line_cursor#1 test_8u::i#1 ] ( main:2::test_8u:7 [ print_line_cursor#1 test_8u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #6
    bne b12
    jmp breturn
  //SEG567 test_8u::@return
  breturn:
  //SEG568 [272] return  [ print_line_cursor#1 ] ( main:2::test_8u:7 [ print_line_cursor#1 ] )
    rts
  //SEG569 test_8u::@12
  b12:
  //SEG570 [273] (byte*~) print_char_cursor#186 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 test_8u::i#1 print_char_cursor#186 ] ( main:2::test_8u:7 [ print_line_cursor#1 test_8u::i#1 print_char_cursor#186 ] ) -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG571 [246] phi from test_8u::@12 to test_8u::@1 [phi:test_8u::@12->test_8u::@1]
  b1_from_b12:
  //SEG572 [246] phi (byte*) print_line_cursor#41 = (byte*) print_line_cursor#1 [phi:test_8u::@12->test_8u::@1#0] -- register_copy 
  //SEG573 [246] phi (byte*) print_char_cursor#135 = (byte*~) print_char_cursor#186 [phi:test_8u::@12->test_8u::@1#1] -- register_copy 
  //SEG574 [246] phi (byte) test_8u::i#10 = (byte) test_8u::i#1 [phi:test_8u::@12->test_8u::@1#2] -- register_copy 
    jmp b1
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .byte $ff, $ff, $ff, $ff, $ff, $ff
    divisors: .byte 5, 7, $b, $d, $11, $13
}
//SEG575 print_cls
print_cls: {
    .label sc = $32
  //SEG576 [275] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG577 [275] phi (byte*) print_cls::sc#2 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG578 [275] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG579 [275] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG580 print_cls::@1
  b1:
  //SEG581 [276] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG582 [277] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG583 [278] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG584 print_cls::@return
  breturn:
  //SEG585 [279] return  [ ] ( main:2::print_cls:5 [ ] )
    rts
}
  print_hextab: .text "0123456789abcdef"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [17] (signed word) test_16s::dividend#0 ← *((const signed word[]) test_16s::dividends#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 print_line_cursor#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ]
Statement [18] (signed word) test_16s::divisor#0 ← *((const signed word[]) test_16s::divisors#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [19] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [20] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [22] (signed word) div16s::return#3 ← (signed word) div16s::return#2 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 print_line_cursor#1 rem16s#3 ] ) always clobbers reg byte a 
Statement [23] (signed word) test_16s::res#0 ← (signed word) div16s::return#3 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 ] ) always clobbers reg byte a 
Statement [24] (signed word) print_sword::w#1 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_line_cursor#1 rem16s#3 ] ) always clobbers reg byte a 
Statement [25] (byte*~) print_char_cursor#156 ← (byte*) print_line_cursor#1 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_char_cursor#156 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_char_cursor#156 print_line_cursor#1 rem16s#3 ] ) always clobbers reg byte a 
Statement [29] (signed word) print_sword::w#2 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 print_sword::w#2 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 print_sword::w#2 rem16s#3 print_char_cursor#126 ] ) always clobbers reg byte a 
Statement [33] (signed word) print_sword::w#3 ← (signed word) test_16s::res#0 [ test_16s::i#10 print_line_cursor#1 print_sword::w#3 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_sword::w#3 rem16s#3 print_char_cursor#126 ] ) always clobbers reg byte a 
Statement [37] (signed word) print_sword::w#4 ← (signed word) rem16s#3 [ test_16s::i#10 print_line_cursor#1 print_sword::w#4 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_sword::w#4 print_char_cursor#126 ] ) always clobbers reg byte a 
Statement [41] (byte) test_16s::i#1 ← (byte) test_16s::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ test_16s::i#1 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#1 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [46] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#20 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#1 print_char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8s:11::print_ln:156 [ test_8s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_ln:241 [ test_16u::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8u:7::print_ln:269 [ test_8u::i#10 print_line_cursor#1 print_char_cursor#17 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:35 [ test_8s::i#10 test_8s::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:48 [ test_16u::i#10 test_16u::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:49 [ test_8u::i#10 test_8u::i#1 ]
Statement [47] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#17) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8s:11::print_ln:156 [ test_8s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_ln:241 [ test_16u::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8u:7::print_ln:269 [ test_8u::i#10 print_line_cursor#1 print_char_cursor#17 ] ) always clobbers reg byte a 
Statement [50] if((signed word) print_sword::w#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 [ print_sword::w#5 print_char_cursor#129 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#129 ] ) always clobbers reg byte a 
Statement [53] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#5 [ print_char_cursor#17 print_sword::w#0 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [55] (word~) print_word::w#7 ← (word)(signed word) print_sword::w#6 [ print_char_cursor#128 print_word::w#7 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#128 print_word::w#7 ] ) always clobbers reg byte a 
Statement [59] (byte) print_byte::b#1 ← > (word) print_word::w#5 [ print_word::w#5 print_char_cursor#132 print_byte::b#1 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [61] (byte) print_byte::b#2 ← < (word) print_word::w#5 [ print_char_cursor#17 print_byte::b#2 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_byte::b#2 ] ) always clobbers reg byte a 
Statement [68] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ print_char_cursor#17 print_byte::$2 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 print_byte::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:85 [ test_8s::divisor#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:89 [ test_8s::res#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:41 [ rem8s#3 rem8s#2 rem8s#33 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:98 [ rem8u#17 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:108 [ test_8u::divisor#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:110 [ test_8u::res#0 ]
Statement [73] *((byte*) print_char_cursor#80) ← (byte) print_char::ch#4 [ print_char_cursor#80 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:255::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:259::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:263::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:267::print_char:67 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#80 ] main:2::test_8u:7::print_byte:255::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#80 ] main:2::test_8u:7::print_byte:259::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#80 ] main:2::test_8u:7::print_byte:263::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#80 ] main:2::test_8u:7::print_byte:267::print_char:70 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_char:163 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_char:163 [ print_line_cursor#1 test_8s::i#10 print_sbyte::b#5 print_char_cursor#80 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:9 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:48 [ test_16u::i#10 test_16u::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:35 [ test_8s::i#10 test_8s::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:85 [ test_8s::divisor#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:89 [ test_8s::res#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:41 [ rem8s#3 rem8s#2 rem8s#33 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:98 [ rem8u#17 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:49 [ test_8u::i#10 test_8u::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:108 [ test_8u::divisor#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:110 [ test_8u::res#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:36 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ]
Statement [78] if(*((byte*) print_str::str#13)!=(byte) '@') goto print_str::@2 [ print_char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#126 print_str::str#13 ] ) always clobbers reg byte a reg byte y 
Statement [80] *((byte*) print_char_cursor#126) ← *((byte*) print_str::str#13) [ print_char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#126 print_str::str#13 ] ) always clobbers reg byte a reg byte y 
Statement [83] if((signed word) div16s::dividend#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@1 [ div16s::dividend#0 div16s::divisor#0 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::dividend#0 div16s::divisor#0 ] ) always clobbers reg byte a 
Statement [84] (word~) div16s::dividendu#8 ← (word)(signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::dividendu#8 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::dividendu#8 ] ) always clobbers reg byte a 
Statement [86] if((signed word) div16s::divisor#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@3 [ div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:19 [ div16s::neg#4 div16s::neg#2 div16s::neg#3 ]
Statement [87] (word~) div16s::divisoru#5 ← (word)(signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::divisoru#5 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::divisoru#5 ] ) always clobbers reg byte a 
Statement [89] (word) div16u::dividend#0 ← (word) div16s::dividendu#3 [ div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 ] ) always clobbers reg byte a 
Statement [90] (word) div16u::divisor#0 ← (word) div16s::divisoru#3 [ div16s::neg#4 div16u::dividend#0 div16u::divisor#0 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::dividend#0 div16u::divisor#0 ] ) always clobbers reg byte a 
Statement [92] (word) div16u::return#2 ← (word) div16u::return#0 [ div16s::neg#4 div16u::return#2 rem16u#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::return#2 rem16u#1 ] ) always clobbers reg byte a 
Statement [93] (word) div16s::resultu#0 ← (word) div16u::return#2 [ div16s::neg#4 div16s::resultu#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16s::resultu#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [95] (signed word) rem16s#2 ← - (signed word)(word) rem16u#1 [ div16s::resultu#0 rem16s#2 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::resultu#0 rem16s#2 ] ) always clobbers reg byte a 
Statement [96] (signed word) div16s::return#1 ← - (signed word)(word) div16s::resultu#0 [ rem16s#2 div16s::return#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 rem16s#2 div16s::return#1 ] ) always clobbers reg byte a 
Statement [99] (signed word~) div16s::return#7 ← (signed word)(word) div16s::resultu#0 [ rem16u#1 div16s::return#7 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 rem16u#1 div16s::return#7 ] ) always clobbers reg byte a 
Statement [100] (signed word~) rem16s#32 ← (signed word)(word) rem16u#1 [ div16s::return#7 rem16s#32 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::return#7 rem16s#32 ] ) always clobbers reg byte a 
Statement [101] (signed word~) div16s::$6 ← - (signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::$6 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::$6 ] ) always clobbers reg byte a 
Statement [102] (byte) div16s::neg#2 ← (byte) div16s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16s::dividendu#3 div16s::neg#2 div16s::$6 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::dividendu#3 div16s::neg#2 div16s::$6 ] ) always clobbers reg byte a 
Statement [103] (word~) div16s::divisoru#4 ← (word)(signed word~) div16s::$6 [ div16s::dividendu#3 div16s::divisoru#4 div16s::neg#2 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::dividendu#3 div16s::divisoru#4 div16s::neg#2 ] ) always clobbers reg byte a 
Statement [104] (signed word~) div16s::$2 ← - (signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::$2 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::$2 ] ) always clobbers reg byte a 
Statement [105] (word~) div16s::dividendu#7 ← (word)(signed word~) div16s::$2 [ div16s::divisor#0 div16s::dividendu#7 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::dividendu#7 ] ) always clobbers reg byte a 
Statement [107] (word) divr16u::dividend#1 ← (word) div16u::dividend#2 [ div16u::divisor#2 divr16u::dividend#1 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::divisor#2 divr16u::dividend#1 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::divisor#2 divr16u::dividend#1 ] ) always clobbers reg byte a 
Statement [108] (word) divr16u::divisor#0 ← (word) div16u::divisor#2 [ divr16u::dividend#1 divr16u::divisor#0 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::dividend#1 divr16u::divisor#0 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#1 divr16u::divisor#0 ] ) always clobbers reg byte a 
Statement [110] (word) divr16u::return#2 ← (word) divr16u::return#0 [ rem16u#1 divr16u::return#2 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 rem16u#1 divr16u::return#2 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#2 ] ) always clobbers reg byte a 
Statement [111] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::return#0 rem16u#1 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [116] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:34 [ divr16u::i#2 divr16u::i#1 ]
Statement [117] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ) always clobbers reg byte a 
Statement [119] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [123] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [125] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (word) divr16u::divisor#0 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Statement [129] (word) rem16u#1 ← (word) divr16u::rem#10 [ rem16u#1 divr16u::return#0 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 rem16u#1 divr16u::return#0 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#0 ] ) always clobbers reg byte a 
Statement [134] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:84 [ test_8s::dividend#0 ]
Statement [141] (byte*~) print_char_cursor#180 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 print_char_cursor#180 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 print_char_cursor#180 rem8s#3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:36 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ]
Statement [164] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#5 [ print_char_cursor#17 print_sbyte::b#0 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_sbyte::b#0 ] ) always clobbers reg byte a 
Statement [181] (signed byte) rem8s#2 ← - (signed byte)(byte) rem8u#17 [ div8s::resultu#0 rem8s#2 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 rem8s#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:91 [ div8s::resultu#0 ]
Statement [182] (signed byte) div8s::return#1 ← - (signed byte)(byte) div8s::resultu#0 [ rem8s#2 div8s::return#1 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 rem8s#2 div8s::return#1 ] ) always clobbers reg byte a 
Statement [187] (signed byte~) div8s::$6 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::$6 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::$6 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:39 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:37 [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
Statement [188] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8s::dividendu#3 div8s::neg#2 div8s::$6 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::neg#2 div8s::$6 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:92 [ div8s::$6 ]
Statement [190] (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::$2 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:87 [ div8s::divisor#0 ]
Statement [202] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte/word/signed word/dword/signed dword) 128 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:94 [ divr8u::divisor#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:45 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:46 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:47 [ divr8u::i#2 divr8u::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:44 [ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:107 [ test_8u::dividend#0 ]
Statement [204] (byte) divr8u::rem#2 ← (byte) divr8u::rem#1 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ) always clobbers reg byte a 
Statement [210] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ) always clobbers reg byte a 
Statement [218] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte) test_16u::i#10) [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 ] ) always clobbers reg byte a 
Statement [219] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte) test_16u::i#10) [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) always clobbers reg byte a 
Statement [220] (word) div16u::dividend#1 ← (word) test_16u::dividend#0 [ print_line_cursor#1 div16u::dividend#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 div16u::dividend#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) always clobbers reg byte a 
Statement [221] (word) div16u::divisor#1 ← (word) test_16u::divisor#0 [ print_line_cursor#1 div16u::dividend#1 div16u::divisor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 div16u::dividend#1 div16u::divisor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) always clobbers reg byte a 
Statement [223] (word) div16u::return#3 ← (word) div16u::return#0 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] ( main:2::test_16u:9 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] ) always clobbers reg byte a 
Statement [224] (word) test_16u::res#0 ← (word) div16u::return#3 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [225] (word) print_word::w#1 ← (word) test_16u::dividend#0 [ print_line_cursor#1 print_word::w#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_word::w#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [226] (byte*~) print_char_cursor#163 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_word::w#1 print_char_cursor#163 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_word::w#1 print_char_cursor#163 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [230] (word) print_word::w#2 ← (word) test_16u::divisor#0 [ print_line_cursor#1 print_char_cursor#126 print_word::w#2 rem16u#1 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 print_word::w#2 rem16u#1 test_16u::i#10 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [234] (word) print_word::w#3 ← (word) test_16u::res#0 [ print_line_cursor#1 print_char_cursor#126 print_word::w#3 rem16u#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 print_word::w#3 rem16u#1 test_16u::i#10 ] ) always clobbers reg byte a 
Statement [238] (word) print_word::w#4 ← (word) rem16u#1 [ print_line_cursor#1 print_char_cursor#126 print_word::w#4 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 print_word::w#4 test_16u::i#10 ] ) always clobbers reg byte a 
Statement [242] (byte) test_16u::i#1 ← (byte) test_16u::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ print_line_cursor#1 test_16u::i#1 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#1 ] ) always clobbers reg byte a 
Statement [248] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) always clobbers reg byte a 
Statement [273] (byte*~) print_char_cursor#186 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 test_8u::i#1 print_char_cursor#186 ] ( main:2::test_8u:7 [ print_line_cursor#1 test_8u::i#1 print_char_cursor#186 ] ) always clobbers reg byte a 
Statement [276] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [278] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [17] (signed word) test_16s::dividend#0 ← *((const signed word[]) test_16s::dividends#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [18] (signed word) test_16s::divisor#0 ← *((const signed word[]) test_16s::divisors#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [19] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [20] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [22] (signed word) div16s::return#3 ← (signed word) div16s::return#2 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 print_line_cursor#1 rem16s#3 ] ) always clobbers reg byte a 
Statement [23] (signed word) test_16s::res#0 ← (signed word) div16s::return#3 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 ] ) always clobbers reg byte a 
Statement [24] (signed word) print_sword::w#1 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_line_cursor#1 rem16s#3 ] ) always clobbers reg byte a 
Statement [25] (byte*~) print_char_cursor#156 ← (byte*) print_line_cursor#1 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_char_cursor#156 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_char_cursor#156 print_line_cursor#1 rem16s#3 ] ) always clobbers reg byte a 
Statement [29] (signed word) print_sword::w#2 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 print_sword::w#2 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 print_sword::w#2 rem16s#3 print_char_cursor#126 ] ) always clobbers reg byte a 
Statement [33] (signed word) print_sword::w#3 ← (signed word) test_16s::res#0 [ test_16s::i#10 print_line_cursor#1 print_sword::w#3 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_sword::w#3 rem16s#3 print_char_cursor#126 ] ) always clobbers reg byte a 
Statement [37] (signed word) print_sword::w#4 ← (signed word) rem16s#3 [ test_16s::i#10 print_line_cursor#1 print_sword::w#4 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_sword::w#4 print_char_cursor#126 ] ) always clobbers reg byte a 
Statement [41] (byte) test_16s::i#1 ← (byte) test_16s::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ test_16s::i#1 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#1 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [46] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#20 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#1 print_char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8s:11::print_ln:156 [ test_8s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_ln:241 [ test_16u::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8u:7::print_ln:269 [ test_8u::i#10 print_line_cursor#1 print_char_cursor#17 ] ) always clobbers reg byte a 
Statement [47] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#17) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8s:11::print_ln:156 [ test_8s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_ln:241 [ test_16u::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8u:7::print_ln:269 [ test_8u::i#10 print_line_cursor#1 print_char_cursor#17 ] ) always clobbers reg byte a 
Statement [50] if((signed word) print_sword::w#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 [ print_sword::w#5 print_char_cursor#129 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#129 ] ) always clobbers reg byte a 
Statement [53] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#5 [ print_char_cursor#17 print_sword::w#0 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [55] (word~) print_word::w#7 ← (word)(signed word) print_sword::w#6 [ print_char_cursor#128 print_word::w#7 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#128 print_word::w#7 ] ) always clobbers reg byte a 
Statement [59] (byte) print_byte::b#1 ← > (word) print_word::w#5 [ print_word::w#5 print_char_cursor#132 print_byte::b#1 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [61] (byte) print_byte::b#2 ← < (word) print_word::w#5 [ print_char_cursor#17 print_byte::b#2 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_byte::b#2 ] ) always clobbers reg byte a 
Statement [68] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ print_char_cursor#17 print_byte::$2 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 print_byte::$2 ] ) always clobbers reg byte a 
Statement [73] *((byte*) print_char_cursor#80) ← (byte) print_char::ch#4 [ print_char_cursor#80 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:255::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:259::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:263::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:267::print_char:67 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#80 ] main:2::test_8u:7::print_byte:255::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#80 ] main:2::test_8u:7::print_byte:259::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#80 ] main:2::test_8u:7::print_byte:263::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#80 ] main:2::test_8u:7::print_byte:267::print_char:70 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_char:163 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_char:163 [ print_line_cursor#1 test_8s::i#10 print_sbyte::b#5 print_char_cursor#80 ] ) always clobbers reg byte y 
Statement [78] if(*((byte*) print_str::str#13)!=(byte) '@') goto print_str::@2 [ print_char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#126 print_str::str#13 ] ) always clobbers reg byte a reg byte y 
Statement [80] *((byte*) print_char_cursor#126) ← *((byte*) print_str::str#13) [ print_char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#126 print_str::str#13 ] ) always clobbers reg byte a reg byte y 
Statement [83] if((signed word) div16s::dividend#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@1 [ div16s::dividend#0 div16s::divisor#0 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::dividend#0 div16s::divisor#0 ] ) always clobbers reg byte a 
Statement [84] (word~) div16s::dividendu#8 ← (word)(signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::dividendu#8 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::dividendu#8 ] ) always clobbers reg byte a 
Statement [86] if((signed word) div16s::divisor#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@3 [ div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 ] ) always clobbers reg byte a 
Statement [87] (word~) div16s::divisoru#5 ← (word)(signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::divisoru#5 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::divisoru#5 ] ) always clobbers reg byte a 
Statement [89] (word) div16u::dividend#0 ← (word) div16s::dividendu#3 [ div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 ] ) always clobbers reg byte a 
Statement [90] (word) div16u::divisor#0 ← (word) div16s::divisoru#3 [ div16s::neg#4 div16u::dividend#0 div16u::divisor#0 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::dividend#0 div16u::divisor#0 ] ) always clobbers reg byte a 
Statement [92] (word) div16u::return#2 ← (word) div16u::return#0 [ div16s::neg#4 div16u::return#2 rem16u#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::return#2 rem16u#1 ] ) always clobbers reg byte a 
Statement [93] (word) div16s::resultu#0 ← (word) div16u::return#2 [ div16s::neg#4 div16s::resultu#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16s::resultu#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [95] (signed word) rem16s#2 ← - (signed word)(word) rem16u#1 [ div16s::resultu#0 rem16s#2 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::resultu#0 rem16s#2 ] ) always clobbers reg byte a 
Statement [96] (signed word) div16s::return#1 ← - (signed word)(word) div16s::resultu#0 [ rem16s#2 div16s::return#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 rem16s#2 div16s::return#1 ] ) always clobbers reg byte a 
Statement [99] (signed word~) div16s::return#7 ← (signed word)(word) div16s::resultu#0 [ rem16u#1 div16s::return#7 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 rem16u#1 div16s::return#7 ] ) always clobbers reg byte a 
Statement [100] (signed word~) rem16s#32 ← (signed word)(word) rem16u#1 [ div16s::return#7 rem16s#32 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::return#7 rem16s#32 ] ) always clobbers reg byte a 
Statement [101] (signed word~) div16s::$6 ← - (signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::$6 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::$6 ] ) always clobbers reg byte a 
Statement [102] (byte) div16s::neg#2 ← (byte) div16s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16s::dividendu#3 div16s::neg#2 div16s::$6 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::dividendu#3 div16s::neg#2 div16s::$6 ] ) always clobbers reg byte a 
Statement [103] (word~) div16s::divisoru#4 ← (word)(signed word~) div16s::$6 [ div16s::dividendu#3 div16s::divisoru#4 div16s::neg#2 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::dividendu#3 div16s::divisoru#4 div16s::neg#2 ] ) always clobbers reg byte a 
Statement [104] (signed word~) div16s::$2 ← - (signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::$2 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::$2 ] ) always clobbers reg byte a 
Statement [105] (word~) div16s::dividendu#7 ← (word)(signed word~) div16s::$2 [ div16s::divisor#0 div16s::dividendu#7 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::dividendu#7 ] ) always clobbers reg byte a 
Statement [107] (word) divr16u::dividend#1 ← (word) div16u::dividend#2 [ div16u::divisor#2 divr16u::dividend#1 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::divisor#2 divr16u::dividend#1 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::divisor#2 divr16u::dividend#1 ] ) always clobbers reg byte a 
Statement [108] (word) divr16u::divisor#0 ← (word) div16u::divisor#2 [ divr16u::dividend#1 divr16u::divisor#0 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::dividend#1 divr16u::divisor#0 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#1 divr16u::divisor#0 ] ) always clobbers reg byte a 
Statement [110] (word) divr16u::return#2 ← (word) divr16u::return#0 [ rem16u#1 divr16u::return#2 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 rem16u#1 divr16u::return#2 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#2 ] ) always clobbers reg byte a 
Statement [111] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::return#0 rem16u#1 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 rem16u#1 ] ) always clobbers reg byte a 
Statement [116] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) always clobbers reg byte a 
Statement [117] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ) always clobbers reg byte a 
Statement [119] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) always clobbers reg byte a 
Statement [123] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [125] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (word) divr16u::divisor#0 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) always clobbers reg byte a 
Statement [129] (word) rem16u#1 ← (word) divr16u::rem#10 [ rem16u#1 divr16u::return#0 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 rem16u#1 divr16u::return#0 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#0 ] ) always clobbers reg byte a 
Statement [134] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 ] ) always clobbers reg byte a 
Statement [141] (byte*~) print_char_cursor#180 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 print_char_cursor#180 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 print_char_cursor#180 rem8s#3 ] ) always clobbers reg byte a 
Statement [164] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#5 [ print_char_cursor#17 print_sbyte::b#0 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_sbyte::b#0 ] ) always clobbers reg byte a 
Statement [181] (signed byte) rem8s#2 ← - (signed byte)(byte) rem8u#17 [ div8s::resultu#0 rem8s#2 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 rem8s#2 ] ) always clobbers reg byte a 
Statement [182] (signed byte) div8s::return#1 ← - (signed byte)(byte) div8s::resultu#0 [ rem8s#2 div8s::return#1 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 rem8s#2 div8s::return#1 ] ) always clobbers reg byte a 
Statement [187] (signed byte~) div8s::$6 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::$6 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::$6 ] ) always clobbers reg byte a 
Statement [188] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8s::dividendu#3 div8s::neg#2 div8s::$6 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::neg#2 div8s::$6 ] ) always clobbers reg byte a 
Statement [190] (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::$2 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::$2 ] ) always clobbers reg byte a 
Statement [202] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte/word/signed word/dword/signed dword) 128 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ) always clobbers reg byte a 
Statement [204] (byte) divr8u::rem#2 ← (byte) divr8u::rem#1 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ) always clobbers reg byte a 
Statement [210] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ) always clobbers reg byte a 
Statement [218] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte) test_16u::i#10) [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 ] ) always clobbers reg byte a 
Statement [219] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte) test_16u::i#10) [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) always clobbers reg byte a 
Statement [220] (word) div16u::dividend#1 ← (word) test_16u::dividend#0 [ print_line_cursor#1 div16u::dividend#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 div16u::dividend#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) always clobbers reg byte a 
Statement [221] (word) div16u::divisor#1 ← (word) test_16u::divisor#0 [ print_line_cursor#1 div16u::dividend#1 div16u::divisor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 div16u::dividend#1 div16u::divisor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) always clobbers reg byte a 
Statement [223] (word) div16u::return#3 ← (word) div16u::return#0 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] ( main:2::test_16u:9 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] ) always clobbers reg byte a 
Statement [224] (word) test_16u::res#0 ← (word) div16u::return#3 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [225] (word) print_word::w#1 ← (word) test_16u::dividend#0 [ print_line_cursor#1 print_word::w#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_word::w#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [226] (byte*~) print_char_cursor#163 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_word::w#1 print_char_cursor#163 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_word::w#1 print_char_cursor#163 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [230] (word) print_word::w#2 ← (word) test_16u::divisor#0 [ print_line_cursor#1 print_char_cursor#126 print_word::w#2 rem16u#1 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 print_word::w#2 rem16u#1 test_16u::i#10 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [234] (word) print_word::w#3 ← (word) test_16u::res#0 [ print_line_cursor#1 print_char_cursor#126 print_word::w#3 rem16u#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 print_word::w#3 rem16u#1 test_16u::i#10 ] ) always clobbers reg byte a 
Statement [238] (word) print_word::w#4 ← (word) rem16u#1 [ print_line_cursor#1 print_char_cursor#126 print_word::w#4 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 print_word::w#4 test_16u::i#10 ] ) always clobbers reg byte a 
Statement [242] (byte) test_16u::i#1 ← (byte) test_16u::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ print_line_cursor#1 test_16u::i#1 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#1 ] ) always clobbers reg byte a 
Statement [248] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) always clobbers reg byte a 
Statement [273] (byte*~) print_char_cursor#186 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 test_8u::i#1 print_char_cursor#186 ] ( main:2::test_8u:7 [ print_line_cursor#1 test_8u::i#1 print_char_cursor#186 ] ) always clobbers reg byte a 
Statement [276] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [278] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_WORD:3 [ print_line_cursor#20 print_line_cursor#39 print_line_cursor#1 print_line_cursor#41 ] : zp ZP_WORD:3 , 
Potential registers zp ZP_WORD:5 [ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 ] : zp ZP_WORD:5 , 
Potential registers zp ZP_WORD:7 [ print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ] : zp ZP_WORD:7 , 
Potential registers zp ZP_BYTE:9 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ] : zp ZP_BYTE:9 , reg byte a , reg byte x , 
Potential registers zp ZP_BYTE:10 [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ] : zp ZP_BYTE:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:11 [ print_char_cursor#80 print_char_cursor#133 print_char_cursor#130 print_char_cursor#132 print_char_cursor#128 print_char_cursor#129 print_char_cursor#156 print_char_cursor#126 print_char_cursor#17 print_char_cursor#163 print_char_cursor#135 print_char_cursor#131 print_char_cursor#1 print_char_cursor#180 print_char_cursor#186 ] : zp ZP_WORD:11 , 
Potential registers zp ZP_WORD:13 [ print_str::str#13 print_str::str#15 print_str::str#0 ] : zp ZP_WORD:13 , 
Potential registers zp ZP_WORD:15 [ div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 ] : zp ZP_WORD:15 , 
Potential registers zp ZP_WORD:17 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 ] : zp ZP_WORD:17 , 
Potential registers zp ZP_BYTE:19 [ div16s::neg#4 div16s::neg#2 div16s::neg#3 ] : zp ZP_BYTE:19 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:20 [ div16s::return#2 div16s::return#1 div16s::return#7 ] : zp ZP_WORD:20 , 
Potential registers zp ZP_WORD:22 [ rem16s#3 rem16s#2 rem16s#32 ] : zp ZP_WORD:22 , 
Potential registers zp ZP_WORD:24 [ div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 ] : zp ZP_WORD:24 , 
Potential registers zp ZP_WORD:26 [ div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 ] : zp ZP_WORD:26 , 
Potential registers zp ZP_WORD:28 [ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] : zp ZP_WORD:28 , 
Potential registers zp ZP_WORD:30 [ divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ] : zp ZP_WORD:30 , 
Potential registers zp ZP_WORD:32 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] : zp ZP_WORD:32 , 
Potential registers zp ZP_BYTE:34 [ divr16u::i#2 divr16u::i#1 ] : zp ZP_BYTE:34 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:35 [ test_8s::i#10 test_8s::i#1 ] : zp ZP_BYTE:35 , reg byte x , 
Potential registers zp ZP_BYTE:36 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ] : zp ZP_BYTE:36 , reg byte x , 
Potential registers zp ZP_BYTE:37 [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ] : zp ZP_BYTE:37 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:38 [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ] : zp ZP_BYTE:38 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:39 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ] : zp ZP_BYTE:39 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:40 [ div8s::return#2 div8s::return#1 div8s::return#7 ] : zp ZP_BYTE:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:41 [ rem8s#3 rem8s#2 rem8s#33 ] : zp ZP_BYTE:41 , reg byte x , 
Potential registers zp ZP_BYTE:42 [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ] : zp ZP_BYTE:42 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:43 [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ] : zp ZP_BYTE:43 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:44 [ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ] : zp ZP_BYTE:44 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:45 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ] : zp ZP_BYTE:45 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:46 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ] : zp ZP_BYTE:46 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:47 [ divr8u::i#2 divr8u::i#1 ] : zp ZP_BYTE:47 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:48 [ test_16u::i#10 test_16u::i#1 ] : zp ZP_BYTE:48 , reg byte x , 
Potential registers zp ZP_BYTE:49 [ test_8u::i#10 test_8u::i#1 ] : zp ZP_BYTE:49 , reg byte x , 
Potential registers zp ZP_WORD:50 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:50 , 
Potential registers zp ZP_WORD:52 [ test_16s::dividend#0 ] : zp ZP_WORD:52 , 
Potential registers zp ZP_WORD:54 [ test_16s::divisor#0 ] : zp ZP_WORD:54 , 
Potential registers zp ZP_WORD:56 [ div16s::dividend#0 ] : zp ZP_WORD:56 , 
Potential registers zp ZP_WORD:58 [ div16s::divisor#0 ] : zp ZP_WORD:58 , 
Potential registers zp ZP_WORD:60 [ div16s::return#3 ] : zp ZP_WORD:60 , 
Potential registers zp ZP_WORD:62 [ test_16s::res#0 ] : zp ZP_WORD:62 , 
Potential registers zp ZP_BYTE:64 [ print_byte::$0 ] : zp ZP_BYTE:64 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:65 [ print_byte::$2 ] : zp ZP_BYTE:65 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:66 [ div16u::return#2 ] : zp ZP_WORD:66 , 
Potential registers zp ZP_WORD:68 [ div16s::resultu#0 ] : zp ZP_WORD:68 , 
Potential registers zp ZP_WORD:70 [ div16s::$6 ] : zp ZP_WORD:70 , 
Potential registers zp ZP_WORD:72 [ div16s::$2 ] : zp ZP_WORD:72 , 
Potential registers zp ZP_WORD:74 [ divr16u::divisor#0 ] : zp ZP_WORD:74 , 
Potential registers zp ZP_WORD:76 [ divr16u::return#2 ] : zp ZP_WORD:76 , 
Potential registers zp ZP_WORD:78 [ div16u::return#0 ] : zp ZP_WORD:78 , 
Potential registers zp ZP_BYTE:80 [ divr16u::$1 ] : zp ZP_BYTE:80 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:81 [ divr16u::$2 ] : zp ZP_BYTE:81 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:82 [ rem16u#1 ] : zp ZP_WORD:82 , 
Potential registers zp ZP_BYTE:84 [ test_8s::dividend#0 ] : zp ZP_BYTE:84 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:85 [ test_8s::divisor#0 ] : zp ZP_BYTE:85 , reg byte x , 
Potential registers zp ZP_BYTE:86 [ div8s::dividend#0 ] : zp ZP_BYTE:86 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:87 [ div8s::divisor#0 ] : zp ZP_BYTE:87 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:88 [ div8s::return#3 ] : zp ZP_BYTE:88 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:89 [ test_8s::res#0 ] : zp ZP_BYTE:89 , reg byte x , 
Potential registers zp ZP_BYTE:90 [ div8u::return#2 ] : zp ZP_BYTE:90 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:91 [ div8s::resultu#0 ] : zp ZP_BYTE:91 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:92 [ div8s::$6 ] : zp ZP_BYTE:92 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:93 [ div8s::$2 ] : zp ZP_BYTE:93 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:94 [ divr8u::divisor#0 ] : zp ZP_BYTE:94 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:95 [ divr8u::return#0 ] : zp ZP_BYTE:95 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:96 [ div8u::return#0 ] : zp ZP_BYTE:96 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:97 [ divr8u::$1 ] : zp ZP_BYTE:97 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:98 [ rem8u#17 ] : zp ZP_BYTE:98 , reg byte x , 
Potential registers zp ZP_WORD:99 [ test_16u::dividend#0 ] : zp ZP_WORD:99 , 
Potential registers zp ZP_WORD:101 [ test_16u::divisor#0 ] : zp ZP_WORD:101 , 
Potential registers zp ZP_WORD:103 [ div16u::return#3 ] : zp ZP_WORD:103 , 
Potential registers zp ZP_WORD:105 [ test_16u::res#0 ] : zp ZP_WORD:105 , 
Potential registers zp ZP_BYTE:107 [ test_8u::dividend#0 ] : zp ZP_BYTE:107 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:108 [ test_8u::divisor#0 ] : zp ZP_BYTE:108 , reg byte x , 
Potential registers zp ZP_BYTE:109 [ div8u::return#3 ] : zp ZP_BYTE:109 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:110 [ test_8u::res#0 ] : zp ZP_BYTE:110 , reg byte x , 

REGISTER UPLIFT SCOPES
Uplift Scope [divr16u] 884.42: zp ZP_WORD:28 [ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] 328.58: zp ZP_WORD:32 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] 202: zp ZP_BYTE:80 [ divr16u::$1 ] 202: zp ZP_BYTE:81 [ divr16u::$2 ] 167.04: zp ZP_BYTE:34 [ divr16u::i#2 divr16u::i#1 ] 70.15: zp ZP_WORD:30 [ divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ] 12: zp ZP_WORD:74 [ divr16u::divisor#0 ] 4: zp ZP_WORD:76 [ divr16u::return#2 ] 
Uplift Scope [divr8u] 909.67: zp ZP_BYTE:44 [ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ] 332.19: zp ZP_BYTE:46 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ] 202: zp ZP_BYTE:97 [ divr8u::$1 ] 168.33: zp ZP_BYTE:47 [ divr8u::i#2 divr8u::i#1 ] 77.42: zp ZP_BYTE:45 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ] 12.75: zp ZP_BYTE:94 [ divr8u::divisor#0 ] 4: zp ZP_BYTE:95 [ divr8u::return#0 ] 
Uplift Scope [] 294.4: zp ZP_WORD:11 [ print_char_cursor#80 print_char_cursor#133 print_char_cursor#130 print_char_cursor#132 print_char_cursor#128 print_char_cursor#129 print_char_cursor#156 print_char_cursor#126 print_char_cursor#17 print_char_cursor#163 print_char_cursor#135 print_char_cursor#131 print_char_cursor#1 print_char_cursor#180 print_char_cursor#186 ] 254.87: zp ZP_WORD:3 [ print_line_cursor#20 print_line_cursor#39 print_line_cursor#1 print_line_cursor#41 ] 6.83: zp ZP_WORD:22 [ rem16s#3 rem16s#2 rem16s#32 ] 6.83: zp ZP_BYTE:41 [ rem8s#3 rem8s#2 rem8s#33 ] 0.5: zp ZP_BYTE:98 [ rem8u#17 ] 0.48: zp ZP_WORD:82 [ rem16u#1 ] 
Uplift Scope [print_str] 305.5: zp ZP_WORD:13 [ print_str::str#13 print_str::str#15 print_str::str#0 ] 
Uplift Scope [print_byte] 113.5: zp ZP_BYTE:9 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ] 4: zp ZP_BYTE:64 [ print_byte::$0 ] 4: zp ZP_BYTE:65 [ print_byte::$2 ] 
Uplift Scope [print_word] 97.67: zp ZP_WORD:7 [ print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ] 
Uplift Scope [print_sword] 97.5: zp ZP_WORD:5 [ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 ] 
Uplift Scope [print_sbyte] 97.5: zp ZP_BYTE:36 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ] 
Uplift Scope [div8u] 33.5: zp ZP_BYTE:43 [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ] 28: zp ZP_BYTE:42 [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ] 22: zp ZP_BYTE:109 [ div8u::return#3 ] 4: zp ZP_BYTE:90 [ div8u::return#2 ] 3.75: zp ZP_BYTE:96 [ div8u::return#0 ] 
Uplift Scope [div16u] 33.5: zp ZP_WORD:26 [ div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 ] 28: zp ZP_WORD:24 [ div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 ] 22: zp ZP_WORD:103 [ div16u::return#3 ] 4: zp ZP_WORD:66 [ div16u::return#2 ] 3.75: zp ZP_WORD:78 [ div16u::return#0 ] 
Uplift Scope [div8s] 22: zp ZP_BYTE:88 [ div8s::return#3 ] 11: zp ZP_BYTE:38 [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ] 11: zp ZP_BYTE:40 [ div8s::return#2 div8s::return#1 div8s::return#7 ] 8.86: zp ZP_BYTE:37 [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ] 5: zp ZP_BYTE:86 [ div8s::dividend#0 ] 4: zp ZP_BYTE:39 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ] 2.14: zp ZP_BYTE:87 [ div8s::divisor#0 ] 2: zp ZP_BYTE:93 [ div8s::$2 ] 1: zp ZP_BYTE:92 [ div8s::$6 ] 0.67: zp ZP_BYTE:91 [ div8s::resultu#0 ] 
Uplift Scope [div16s] 22: zp ZP_WORD:60 [ div16s::return#3 ] 11: zp ZP_WORD:17 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 ] 11: zp ZP_WORD:20 [ div16s::return#2 div16s::return#1 div16s::return#7 ] 8.86: zp ZP_WORD:15 [ div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 ] 5: zp ZP_WORD:56 [ div16s::dividend#0 ] 4: zp ZP_BYTE:19 [ div16s::neg#4 div16s::neg#2 div16s::neg#3 ] 2.14: zp ZP_WORD:58 [ div16s::divisor#0 ] 2: zp ZP_WORD:72 [ div16s::$2 ] 1: zp ZP_WORD:70 [ div16s::$6 ] 0.67: zp ZP_WORD:68 [ div16s::resultu#0 ] 
Uplift Scope [print_cls] 33: zp ZP_WORD:50 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [test_16u] 18.26: zp ZP_BYTE:48 [ test_16u::i#10 test_16u::i#1 ] 4.71: zp ZP_WORD:99 [ test_16u::dividend#0 ] 3: zp ZP_WORD:101 [ test_16u::divisor#0 ] 2.2: zp ZP_WORD:105 [ test_16u::res#0 ] 
Uplift Scope [test_8s] 18.26: zp ZP_BYTE:35 [ test_8s::i#10 test_8s::i#1 ] 4.71: zp ZP_BYTE:84 [ test_8s::dividend#0 ] 3: zp ZP_BYTE:85 [ test_8s::divisor#0 ] 2.2: zp ZP_BYTE:89 [ test_8s::res#0 ] 
Uplift Scope [test_16s] 18.26: zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ] 4.71: zp ZP_WORD:52 [ test_16s::dividend#0 ] 3: zp ZP_WORD:54 [ test_16s::divisor#0 ] 2.2: zp ZP_WORD:62 [ test_16s::res#0 ] 
Uplift Scope [test_8u] 12.83: zp ZP_BYTE:49 [ test_8u::i#10 test_8u::i#1 ] 4.71: zp ZP_BYTE:107 [ test_8u::dividend#0 ] 3.3: zp ZP_BYTE:108 [ test_8u::divisor#0 ] 2.44: zp ZP_BYTE:110 [ test_8u::res#0 ] 
Uplift Scope [print_char] 14: zp ZP_BYTE:10 [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ] 
Uplift Scope [print_ln] 
Uplift Scope [main] 

Uplifting [divr16u] best 44800 combination zp ZP_WORD:28 [ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] zp ZP_WORD:32 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp ZP_WORD:30 [ divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ] zp ZP_WORD:74 [ divr16u::divisor#0 ] zp ZP_WORD:76 [ divr16u::return#2 ] 
Uplifting [divr8u] best 42597 combination reg byte y [ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ] zp ZP_BYTE:46 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ] reg byte a [ divr8u::$1 ] reg byte x [ divr8u::i#2 divr8u::i#1 ] zp ZP_BYTE:45 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ] zp ZP_BYTE:94 [ divr8u::divisor#0 ] zp ZP_BYTE:95 [ divr8u::return#0 ] 
Limited combination testing to 100 combinations of 3888 possible.
Uplifting [] best 42530 combination zp ZP_WORD:11 [ print_char_cursor#80 print_char_cursor#133 print_char_cursor#130 print_char_cursor#132 print_char_cursor#128 print_char_cursor#129 print_char_cursor#156 print_char_cursor#126 print_char_cursor#17 print_char_cursor#163 print_char_cursor#135 print_char_cursor#131 print_char_cursor#1 print_char_cursor#180 print_char_cursor#186 ] zp ZP_WORD:3 [ print_line_cursor#20 print_line_cursor#39 print_line_cursor#1 print_line_cursor#41 ] zp ZP_WORD:22 [ rem16s#3 rem16s#2 rem16s#32 ] reg byte x [ rem8s#3 rem8s#2 rem8s#33 ] reg byte x [ rem8u#17 ] zp ZP_WORD:82 [ rem16u#1 ] 
Uplifting [print_str] best 42530 combination zp ZP_WORD:13 [ print_str::str#13 print_str::str#15 print_str::str#0 ] 
Uplifting [print_byte] best 42522 combination zp ZP_BYTE:9 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ] reg byte a [ print_byte::$0 ] reg byte a [ print_byte::$2 ] 
Uplifting [print_word] best 42522 combination zp ZP_WORD:7 [ print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ] 
Uplifting [print_sword] best 42522 combination zp ZP_WORD:5 [ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 ] 
Uplifting [print_sbyte] best 42522 combination zp ZP_BYTE:36 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ] 
Uplifting [div8u] best 42384 combination reg byte x [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ] reg byte a [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ] reg byte a [ div8u::return#3 ] reg byte a [ div8u::return#2 ] zp ZP_BYTE:96 [ div8u::return#0 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [div16u] best 42384 combination zp ZP_WORD:26 [ div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 ] zp ZP_WORD:24 [ div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 ] zp ZP_WORD:103 [ div16u::return#3 ] zp ZP_WORD:66 [ div16u::return#2 ] zp ZP_WORD:78 [ div16u::return#0 ] 
Uplifting [div8s] best 42279 combination reg byte a [ div8s::return#3 ] reg byte x [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ] reg byte a [ div8s::return#2 div8s::return#1 div8s::return#7 ] zp ZP_BYTE:37 [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ] zp ZP_BYTE:86 [ div8s::dividend#0 ] zp ZP_BYTE:39 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ] zp ZP_BYTE:87 [ div8s::divisor#0 ] zp ZP_BYTE:93 [ div8s::$2 ] zp ZP_BYTE:92 [ div8s::$6 ] zp ZP_BYTE:91 [ div8s::resultu#0 ] 
Limited combination testing to 100 combinations of 248832 possible.
Uplifting [div16s] best 42270 combination zp ZP_WORD:60 [ div16s::return#3 ] zp ZP_WORD:17 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 ] zp ZP_WORD:20 [ div16s::return#2 div16s::return#1 div16s::return#7 ] zp ZP_WORD:15 [ div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 ] zp ZP_WORD:56 [ div16s::dividend#0 ] reg byte y [ div16s::neg#4 div16s::neg#2 div16s::neg#3 ] zp ZP_WORD:58 [ div16s::divisor#0 ] zp ZP_WORD:72 [ div16s::$2 ] zp ZP_WORD:70 [ div16s::$6 ] zp ZP_WORD:68 [ div16s::resultu#0 ] 
Uplifting [print_cls] best 42270 combination zp ZP_WORD:50 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [test_16u] best 42270 combination zp ZP_BYTE:48 [ test_16u::i#10 test_16u::i#1 ] zp ZP_WORD:99 [ test_16u::dividend#0 ] zp ZP_WORD:101 [ test_16u::divisor#0 ] zp ZP_WORD:105 [ test_16u::res#0 ] 
Uplifting [test_8s] best 42270 combination zp ZP_BYTE:35 [ test_8s::i#10 test_8s::i#1 ] zp ZP_BYTE:84 [ test_8s::dividend#0 ] zp ZP_BYTE:85 [ test_8s::divisor#0 ] zp ZP_BYTE:89 [ test_8s::res#0 ] 
Uplifting [test_16s] best 42270 combination zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ] zp ZP_WORD:52 [ test_16s::dividend#0 ] zp ZP_WORD:54 [ test_16s::divisor#0 ] zp ZP_WORD:62 [ test_16s::res#0 ] 
Uplifting [test_8u] best 42270 combination zp ZP_BYTE:49 [ test_8u::i#10 test_8u::i#1 ] zp ZP_BYTE:107 [ test_8u::dividend#0 ] zp ZP_BYTE:108 [ test_8u::divisor#0 ] zp ZP_BYTE:110 [ test_8u::res#0 ] 
Uplifting [print_char] best 42255 combination reg byte a [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ] 
Uplifting [print_ln] best 42255 combination 
Uplifting [main] best 42255 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:46 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
Uplifting [divr8u] best 42255 combination zp ZP_BYTE:46 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:9 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ]
Uplifting [print_byte] best 42255 combination zp ZP_BYTE:9 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:36 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ]
Uplifting [print_sbyte] best 42255 combination zp ZP_BYTE:36 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:45 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
Uplifting [divr8u] best 42255 combination zp ZP_BYTE:45 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ]
Uplifting [test_16s] best 42255 combination zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:35 [ test_8s::i#10 test_8s::i#1 ]
Uplifting [test_8s] best 42255 combination zp ZP_BYTE:35 [ test_8s::i#10 test_8s::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:48 [ test_16u::i#10 test_16u::i#1 ]
Uplifting [test_16u] best 42255 combination zp ZP_BYTE:48 [ test_16u::i#10 test_16u::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:49 [ test_8u::i#10 test_8u::i#1 ]
Uplifting [test_8u] best 42255 combination zp ZP_BYTE:49 [ test_8u::i#10 test_8u::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:94 [ divr8u::divisor#0 ]
Uplifting [divr8u] best 42255 combination zp ZP_BYTE:94 [ divr8u::divisor#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:37 [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
Uplifting [div8s] best 42248 combination reg byte y [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:86 [ div8s::dividend#0 ]
Uplifting [div8s] best 42213 combination reg byte y [ div8s::dividend#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:84 [ test_8s::dividend#0 ]
Uplifting [test_8s] best 42213 combination zp ZP_BYTE:84 [ test_8s::dividend#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:107 [ test_8u::dividend#0 ]
Uplifting [test_8u] best 42213 combination zp ZP_BYTE:107 [ test_8u::dividend#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:39 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ]
Uplifting [div8s] best 42213 combination zp ZP_BYTE:39 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:95 [ divr8u::return#0 ]
Uplifting [divr8u] best 42207 combination reg byte a [ divr8u::return#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:96 [ div8u::return#0 ]
Uplifting [div8u] best 42171 combination reg byte a [ div8u::return#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:108 [ test_8u::divisor#0 ]
Uplifting [test_8u] best 42171 combination zp ZP_BYTE:108 [ test_8u::divisor#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:85 [ test_8s::divisor#0 ]
Uplifting [test_8s] best 42171 combination zp ZP_BYTE:85 [ test_8s::divisor#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:110 [ test_8u::res#0 ]
Uplifting [test_8u] best 42171 combination zp ZP_BYTE:110 [ test_8u::res#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:89 [ test_8s::res#0 ]
Uplifting [test_8s] best 42171 combination zp ZP_BYTE:89 [ test_8s::res#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:87 [ div8s::divisor#0 ]
Uplifting [div8s] best 42136 combination reg byte x [ div8s::divisor#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:93 [ div8s::$2 ]
Uplifting [div8s] best 42132 combination reg byte a [ div8s::$2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:92 [ div8s::$6 ]
Uplifting [div8s] best 42128 combination reg byte x [ div8s::$6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:91 [ div8s::resultu#0 ]
Uplifting [div8s] best 42125 combination reg byte y [ div8s::resultu#0 ] 
Coalescing zero page register with common assignment [ zp ZP_WORD:20 [ div16s::return#2 div16s::return#1 div16s::return#7 ] ] with [ zp ZP_WORD:68 [ div16s::resultu#0 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_WORD:22 [ rem16s#3 rem16s#2 rem16s#32 ] ] with [ zp ZP_WORD:82 [ rem16u#1 ] ] - score: 2
Coalescing zero page register with common assignment [ zp ZP_WORD:5 [ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 ] ] with [ zp ZP_WORD:7 [ print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:5 [ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ] ] with [ zp ZP_WORD:52 [ test_16s::dividend#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:9 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ] ] with [ zp ZP_BYTE:36 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:9 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ] ] with [ zp ZP_BYTE:107 [ test_8u::dividend#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:15 [ div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 ] ] with [ zp ZP_WORD:24 [ div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:15 [ div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 ] ] with [ zp ZP_WORD:56 [ div16s::dividend#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:15 [ div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 div16s::dividend#0 ] ] with [ zp ZP_WORD:72 [ div16s::$2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:17 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 ] ] with [ zp ZP_WORD:26 [ div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:17 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 ] ] with [ zp ZP_WORD:58 [ div16s::divisor#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:17 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 div16s::divisor#0 ] ] with [ zp ZP_WORD:70 [ div16s::$6 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:20 [ div16s::return#2 div16s::return#1 div16s::return#7 div16s::resultu#0 ] ] with [ zp ZP_WORD:60 [ div16s::return#3 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:32 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 ] ] with [ zp ZP_WORD:76 [ divr16u::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:66 [ div16u::return#2 ] ] with [ zp ZP_WORD:78 [ div16u::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:103 [ div16u::return#3 ] ] with [ zp ZP_WORD:105 [ test_16u::res#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:5 [ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 test_16s::dividend#0 ] ] with [ zp ZP_WORD:99 [ test_16u::dividend#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_BYTE:9 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 test_8u::dividend#0 ] ] with [ zp ZP_BYTE:84 [ test_8s::dividend#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:15 [ div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 div16s::dividend#0 div16s::$2 ] ] with [ zp ZP_WORD:30 [ divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:17 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 div16s::divisor#0 div16s::$6 ] ] with [ zp ZP_WORD:74 [ divr16u::divisor#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:17 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 div16s::divisor#0 div16s::$6 divr16u::divisor#0 ] ] with [ zp ZP_WORD:101 [ test_16u::divisor#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:20 [ div16s::return#2 div16s::return#1 div16s::return#7 div16s::resultu#0 div16s::return#3 ] ] with [ zp ZP_WORD:62 [ test_16s::res#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:20 [ div16s::return#2 div16s::return#1 div16s::return#7 div16s::resultu#0 div16s::return#3 test_16s::res#0 ] ] with [ zp ZP_WORD:66 [ div16u::return#2 div16u::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:22 [ rem16s#3 rem16s#2 rem16s#32 rem16u#1 ] ] with [ zp ZP_WORD:28 [ divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:20 [ div16s::return#2 div16s::return#1 div16s::return#7 div16s::resultu#0 div16s::return#3 test_16s::res#0 div16u::return#2 div16u::return#0 ] ] with [ zp ZP_WORD:32 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:20 [ div16s::return#2 div16s::return#1 div16s::return#7 div16s::resultu#0 div16s::return#3 test_16s::res#0 div16u::return#2 div16u::return#0 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 ] ] with [ zp ZP_WORD:103 [ div16u::return#3 test_16u::res#0 ] ] - score: 1
Coalescing zero page register [ zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ] ] with [ zp ZP_BYTE:35 [ test_8s::i#10 test_8s::i#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 test_8s::i#10 test_8s::i#1 ] ] with [ zp ZP_BYTE:48 [ test_16u::i#10 test_16u::i#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 test_8s::i#10 test_8s::i#1 test_16u::i#10 test_16u::i#1 ] ] with [ zp ZP_BYTE:49 [ test_8u::i#10 test_8u::i#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ print_line_cursor#20 print_line_cursor#39 print_line_cursor#1 print_line_cursor#41 ] ] with [ zp ZP_WORD:50 [ print_cls::sc#2 print_cls::sc#1 ] ]
Coalescing zero page register [ zp ZP_WORD:5 [ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 test_16s::dividend#0 test_16u::dividend#0 ] ] with [ zp ZP_WORD:13 [ print_str::str#13 print_str::str#15 print_str::str#0 ] ]
Coalescing zero page register [ zp ZP_WORD:11 [ print_char_cursor#80 print_char_cursor#133 print_char_cursor#130 print_char_cursor#132 print_char_cursor#128 print_char_cursor#129 print_char_cursor#156 print_char_cursor#126 print_char_cursor#17 print_char_cursor#163 print_char_cursor#135 print_char_cursor#131 print_char_cursor#1 print_char_cursor#180 print_char_cursor#186 ] ] with [ zp ZP_WORD:15 [ div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 div16s::dividend#0 div16s::$2 divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:39 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 ] ] with [ zp ZP_BYTE:89 [ test_8s::res#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:39 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 test_8s::res#0 ] ] with [ zp ZP_BYTE:108 [ test_8u::divisor#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:45 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ] ] with [ zp ZP_BYTE:110 [ test_8u::res#0 ] ]
Allocated (was zp ZP_BYTE:9) zp ZP_BYTE:7 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 test_8u::dividend#0 test_8s::dividend#0 ]
Allocated (was zp ZP_WORD:11) zp ZP_WORD:8 [ print_char_cursor#80 print_char_cursor#133 print_char_cursor#130 print_char_cursor#132 print_char_cursor#128 print_char_cursor#129 print_char_cursor#156 print_char_cursor#126 print_char_cursor#17 print_char_cursor#163 print_char_cursor#135 print_char_cursor#131 print_char_cursor#1 print_char_cursor#180 print_char_cursor#186 div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 div16s::dividend#0 div16s::$2 divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ]
Allocated (was zp ZP_WORD:17) zp ZP_WORD:10 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 div16s::divisor#0 div16s::$6 divr16u::divisor#0 test_16u::divisor#0 ]
Allocated (was zp ZP_WORD:20) zp ZP_WORD:12 [ div16s::return#2 div16s::return#1 div16s::return#7 div16s::resultu#0 div16s::return#3 test_16s::res#0 div16u::return#2 div16u::return#0 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 div16u::return#3 test_16u::res#0 ]
Allocated (was zp ZP_WORD:22) zp ZP_WORD:14 [ rem16s#3 rem16s#2 rem16s#32 rem16u#1 divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
Allocated (was zp ZP_BYTE:39) zp ZP_BYTE:16 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 test_8s::res#0 test_8u::divisor#0 ]
Allocated (was zp ZP_BYTE:45) zp ZP_BYTE:17 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 test_8u::res#0 ]
Allocated (was zp ZP_BYTE:46) zp ZP_BYTE:18 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
Allocated (was zp ZP_WORD:54) zp ZP_WORD:19 [ test_16s::divisor#0 ]
Allocated (was zp ZP_BYTE:85) zp ZP_BYTE:21 [ test_8s::divisor#0 ]
Allocated (was zp ZP_BYTE:94) zp ZP_BYTE:22 [ divr8u::divisor#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label print_char_cursor = 8
  .label print_line_cursor = 3
  .label rem16u = $e
  .label rem16s = $e
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @26 [phi:@begin->@26]
b26_from_bbegin:
  jmp b26
//SEG4 @26
b26:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @26 to main [phi:@26->main]
main_from_b26:
  jsr main
//SEG7 [3] phi from @26 to @end [phi:@26->@end]
bend_from_b26:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  //SEG11 [274] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [7] call test_8u param-assignment [ print_line_cursor#1 ] ( main:2 [ print_line_cursor#1 ] )
  //SEG15 [245] phi from main::@1 to test_8u [phi:main::@1->test_8u]
  test_8u_from_b1:
    jsr test_8u
  //SEG16 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG17 main::@2
  b2:
  //SEG18 [9] call test_16u param-assignment [ print_line_cursor#1 ] ( main:2 [ print_line_cursor#1 ] )
  //SEG19 [216] phi from main::@2 to test_16u [phi:main::@2->test_16u]
  test_16u_from_b2:
    jsr test_16u
  //SEG20 [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
  //SEG21 main::@3
  b3:
  //SEG22 [11] call test_8s param-assignment [ print_line_cursor#1 ] ( main:2 [ print_line_cursor#1 ] )
  //SEG23 [131] phi from main::@3 to test_8s [phi:main::@3->test_8s]
  test_8s_from_b3:
    jsr test_8s
  //SEG24 [12] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
  //SEG25 main::@4
  b4:
  //SEG26 [13] call test_16s param-assignment [ ] ( main:2 [ ] )
  //SEG27 [15] phi from main::@4 to test_16s [phi:main::@4->test_16s]
  test_16s_from_b4:
    jsr test_16s
    jmp breturn
  //SEG28 main::@return
  breturn:
  //SEG29 [14] return  [ ] ( main:2 [ ] )
    rts
}
//SEG30 test_16s
test_16s: {
    .label dividend = 5
    .label divisor = $13
    .label res = $c
    .label i = 2
  //SEG31 [16] phi from test_16s to test_16s::@1 [phi:test_16s->test_16s::@1]
  b1_from_test_16s:
  //SEG32 [16] phi (byte) test_16s::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16s->test_16s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG33 [16] phi from test_16s::@11 to test_16s::@1 [phi:test_16s::@11->test_16s::@1]
  b1_from_b11:
  //SEG34 [16] phi (byte) test_16s::i#10 = (byte) test_16s::i#1 [phi:test_16s::@11->test_16s::@1#0] -- register_copy 
    jmp b1
  //SEG35 test_16s::@1
  b1:
  //SEG36 [17] (signed word) test_16s::dividend#0 ← *((const signed word[]) test_16s::dividends#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 print_line_cursor#1 ] ) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
    lda dividends+1,y
    sta dividend+1
  //SEG37 [18] (signed word) test_16s::divisor#0 ← *((const signed word[]) test_16s::divisors#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 ] ) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
    lda divisors+1,y
    sta divisor+1
  //SEG38 [19] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#1 ] ) -- vwsz1=vwsz2 
    lda dividend
    sta div16s.dividend
    lda dividend+1
    sta div16s.dividend+1
  //SEG39 [20] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#1 ] ) -- vwsz1=vwsz2 
    lda divisor
    sta div16s.divisor
    lda divisor+1
    sta div16s.divisor+1
  //SEG40 [21] call div16s param-assignment [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 print_line_cursor#1 rem16s#3 ] )
    jsr div16s
  //SEG41 [22] (signed word) div16s::return#3 ← (signed word) div16s::return#2 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 print_line_cursor#1 rem16s#3 ] )
    // (signed word) div16s::return#3 = (signed word) div16s::return#2  // register copy zp ZP_WORD:12
    jmp b3
  //SEG42 test_16s::@3
  b3:
  //SEG43 [23] (signed word) test_16s::res#0 ← (signed word) div16s::return#3 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 ] )
    // (signed word) test_16s::res#0 = (signed word) div16s::return#3  // register copy zp ZP_WORD:12
  //SEG44 [24] (signed word) print_sword::w#1 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_line_cursor#1 rem16s#3 ] )
    // (signed word) print_sword::w#1 = (signed word) test_16s::dividend#0  // register copy zp ZP_WORD:5
  //SEG45 [25] (byte*~) print_char_cursor#156 ← (byte*) print_line_cursor#1 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_char_cursor#156 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_char_cursor#156 print_line_cursor#1 rem16s#3 ] ) -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG46 [26] call print_sword param-assignment [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] )
  //SEG47 [49] phi from test_16s::@3 to print_sword [phi:test_16s::@3->print_sword]
  print_sword_from_b3:
  //SEG48 [49] phi (byte*) print_char_cursor#129 = (byte*~) print_char_cursor#156 [phi:test_16s::@3->print_sword#0] -- register_copy 
  //SEG49 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#1 [phi:test_16s::@3->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG50 [27] phi from test_16s::@3 to test_16s::@4 [phi:test_16s::@3->test_16s::@4]
  b4_from_b3:
    jmp b4
  //SEG51 test_16s::@4
  b4:
  //SEG52 [28] call print_str param-assignment [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] )
  //SEG53 [76] phi from test_16s::@4 to print_str [phi:test_16s::@4->print_str]
  print_str_from_b4:
  //SEG54 [76] phi (byte*) print_str::str#15 = (const string) test_16s::str [phi:test_16s::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG55 test_16s::@5
  b5:
  //SEG56 [29] (signed word) print_sword::w#2 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 print_sword::w#2 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 print_sword::w#2 rem16s#3 print_char_cursor#126 ] ) -- vwsz1=vwsz2 
    lda divisor
    sta print_sword.w
    lda divisor+1
    sta print_sword.w+1
  //SEG57 [30] call print_sword param-assignment [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] )
  //SEG58 [49] phi from test_16s::@5 to print_sword [phi:test_16s::@5->print_sword]
  print_sword_from_b5:
  //SEG59 [49] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#126 [phi:test_16s::@5->print_sword#0] -- register_copy 
  //SEG60 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#2 [phi:test_16s::@5->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG61 [31] phi from test_16s::@5 to test_16s::@6 [phi:test_16s::@5->test_16s::@6]
  b6_from_b5:
    jmp b6
  //SEG62 test_16s::@6
  b6:
  //SEG63 [32] call print_str param-assignment [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] )
  //SEG64 [76] phi from test_16s::@6 to print_str [phi:test_16s::@6->print_str]
  print_str_from_b6:
  //SEG65 [76] phi (byte*) print_str::str#15 = (const string) test_16s::str1 [phi:test_16s::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG66 test_16s::@7
  b7:
  //SEG67 [33] (signed word) print_sword::w#3 ← (signed word) test_16s::res#0 [ test_16s::i#10 print_line_cursor#1 print_sword::w#3 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_sword::w#3 rem16s#3 print_char_cursor#126 ] ) -- vwsz1=vwsz2 
    lda res
    sta print_sword.w
    lda res+1
    sta print_sword.w+1
  //SEG68 [34] call print_sword param-assignment [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] )
  //SEG69 [49] phi from test_16s::@7 to print_sword [phi:test_16s::@7->print_sword]
  print_sword_from_b7:
  //SEG70 [49] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#126 [phi:test_16s::@7->print_sword#0] -- register_copy 
  //SEG71 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#3 [phi:test_16s::@7->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG72 [35] phi from test_16s::@7 to test_16s::@8 [phi:test_16s::@7->test_16s::@8]
  b8_from_b7:
    jmp b8
  //SEG73 test_16s::@8
  b8:
  //SEG74 [36] call print_str param-assignment [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] )
  //SEG75 [76] phi from test_16s::@8 to print_str [phi:test_16s::@8->print_str]
  print_str_from_b8:
  //SEG76 [76] phi (byte*) print_str::str#15 = (const string) test_16s::str2 [phi:test_16s::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG77 test_16s::@9
  b9:
  //SEG78 [37] (signed word) print_sword::w#4 ← (signed word) rem16s#3 [ test_16s::i#10 print_line_cursor#1 print_sword::w#4 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_sword::w#4 print_char_cursor#126 ] ) -- vwsz1=vwsz2 
    lda rem16s
    sta print_sword.w
    lda rem16s+1
    sta print_sword.w+1
  //SEG79 [38] call print_sword param-assignment [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] )
  //SEG80 [49] phi from test_16s::@9 to print_sword [phi:test_16s::@9->print_sword]
  print_sword_from_b9:
  //SEG81 [49] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#126 [phi:test_16s::@9->print_sword#0] -- register_copy 
  //SEG82 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#4 [phi:test_16s::@9->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG83 [39] phi from test_16s::@9 to test_16s::@10 [phi:test_16s::@9->test_16s::@10]
  b10_from_b9:
    jmp b10
  //SEG84 test_16s::@10
  b10:
  //SEG85 [40] call print_ln param-assignment [ test_16s::i#10 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 ] )
  //SEG86 [44] phi from test_16s::@10 to print_ln [phi:test_16s::@10->print_ln]
  print_ln_from_b10:
  //SEG87 [44] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#1 [phi:test_16s::@10->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b11
  //SEG88 test_16s::@11
  b11:
  //SEG89 [41] (byte) test_16s::i#1 ← (byte) test_16s::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ test_16s::i#1 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#1 print_line_cursor#1 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda #2
    clc
    adc i
    sta i
  //SEG90 [42] if((byte) test_16s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16s::@1 [ test_16s::i#1 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#1 print_line_cursor#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$c
    bne b1_from_b11
    jmp breturn
  //SEG91 test_16s::@return
  breturn:
  //SEG92 [43] return  [ ] ( main:2::test_16s:13 [ ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .word $7fff, $7fff, -$7fff, -$7fff, $7fff, -$7fff
    divisors: .word 5, -7, $b, -$d, -$11, $13
}
//SEG93 print_ln
print_ln: {
  //SEG94 [45] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG95 [45] phi (byte*) print_line_cursor#20 = (byte*) print_line_cursor#39 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG96 print_ln::@1
  b1:
  //SEG97 [46] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#20 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#1 print_char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8s:11::print_ln:156 [ test_8s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_ln:241 [ test_16u::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8u:7::print_ln:269 [ test_8u::i#10 print_line_cursor#1 print_char_cursor#17 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda print_line_cursor
    clc
    adc #$28
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG98 [47] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#17) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8s:11::print_ln:156 [ test_8s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_ln:241 [ test_16u::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8u:7::print_ln:269 [ test_8u::i#10 print_line_cursor#1 print_char_cursor#17 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG99 print_ln::@return
  breturn:
  //SEG100 [48] return  [ print_line_cursor#1 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 print_line_cursor#1 ] main:2::test_8s:11::print_ln:156 [ test_8s::i#10 print_line_cursor#1 ] main:2::test_16u:9::print_ln:241 [ test_16u::i#10 print_line_cursor#1 ] main:2::test_8u:7::print_ln:269 [ test_8u::i#10 print_line_cursor#1 ] )
    rts
}
//SEG101 print_sword
print_sword: {
    .label w = 5
  //SEG102 [50] if((signed word) print_sword::w#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 [ print_sword::w#5 print_char_cursor#129 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#129 ] ) -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1_from_print_sword
  //SEG103 [51] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  b2_from_print_sword:
    jmp b2
  //SEG104 print_sword::@2
  b2:
  //SEG105 [52] call print_char param-assignment [ print_char_cursor#17 print_sword::w#5 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_sword::w#5 ] )
  //SEG106 [72] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  print_char_from_b2:
  //SEG107 [72] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#129 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG108 [72] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp b4
  //SEG109 print_sword::@4
  b4:
  //SEG110 [53] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#5 [ print_char_cursor#17 print_sword::w#0 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_sword::w#0 ] ) -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG111 [54] phi from print_sword print_sword::@4 to print_sword::@1 [phi:print_sword/print_sword::@4->print_sword::@1]
  b1_from_print_sword:
  b1_from_b4:
  //SEG112 [54] phi (byte*) print_char_cursor#128 = (byte*) print_char_cursor#129 [phi:print_sword/print_sword::@4->print_sword::@1#0] -- register_copy 
  //SEG113 [54] phi (signed word) print_sword::w#6 = (signed word) print_sword::w#5 [phi:print_sword/print_sword::@4->print_sword::@1#1] -- register_copy 
    jmp b1
  //SEG114 print_sword::@1
  b1:
  //SEG115 [55] (word~) print_word::w#7 ← (word)(signed word) print_sword::w#6 [ print_char_cursor#128 print_word::w#7 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#128 print_word::w#7 ] )
    // (word~) print_word::w#7 = (word)(signed word) print_sword::w#6  // register copy zp ZP_WORD:5
  //SEG116 [56] call print_word param-assignment [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] )
  //SEG117 [58] phi from print_sword::@1 to print_word [phi:print_sword::@1->print_word]
  print_word_from_b1:
  //SEG118 [58] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#128 [phi:print_sword::@1->print_word#0] -- register_copy 
  //SEG119 [58] phi (word) print_word::w#5 = (word~) print_word::w#7 [phi:print_sword::@1->print_word#1] -- register_copy 
    jsr print_word
    jmp breturn
  //SEG120 print_sword::@return
  breturn:
  //SEG121 [57] return  [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] )
    rts
}
//SEG122 print_word
print_word: {
    .label w = 5
  //SEG123 [59] (byte) print_byte::b#1 ← > (word) print_word::w#5 [ print_word::w#5 print_char_cursor#132 print_byte::b#1 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] ) -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG124 [60] call print_byte param-assignment [ print_char_cursor#17 print_word::w#5 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_word::w#5 ] )
  //SEG125 [64] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG126 [64] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#132 [phi:print_word->print_byte#0] -- register_copy 
  //SEG127 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#1 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG128 print_word::@1
  b1:
  //SEG129 [61] (byte) print_byte::b#2 ← < (word) print_word::w#5 [ print_char_cursor#17 print_byte::b#2 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_byte::b#2 ] ) -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG130 [62] call print_byte param-assignment [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] )
  //SEG131 [64] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG132 [64] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#17 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG133 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#2 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG134 print_word::@return
  breturn:
  //SEG135 [63] return  [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] )
    rts
}
//SEG136 print_byte
print_byte: {
    .label b = 7
  //SEG137 [65] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#7 print_char_cursor#133 print_byte::$0 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] ) -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG138 [66] (byte) print_char::ch#2 ← *((const string) print_hextab#0 + (byte~) print_byte::$0) [ print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] ) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG139 [67] call print_char param-assignment [ print_char_cursor#17 print_byte::b#7 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 print_byte::b#7 ] )
  //SEG140 [72] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG141 [72] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#133 [phi:print_byte->print_char#0] -- register_copy 
  //SEG142 [72] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG143 print_byte::@1
  b1:
  //SEG144 [68] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ print_char_cursor#17 print_byte::$2 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 print_byte::$2 ] ) -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG145 [69] (byte) print_char::ch#3 ← *((const string) print_hextab#0 + (byte~) print_byte::$2) [ print_char_cursor#17 print_char::ch#3 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 print_char::ch#3 ] ) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG146 [70] call print_char param-assignment [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 ] )
  //SEG147 [72] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG148 [72] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#17 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG149 [72] phi (byte) print_char::ch#4 = (byte) print_char::ch#3 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG150 print_byte::@return
  breturn:
  //SEG151 [71] return  [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 ] )
    rts
}
//SEG152 print_char
print_char: {
  //SEG153 [73] *((byte*) print_char_cursor#80) ← (byte) print_char::ch#4 [ print_char_cursor#80 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:255::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:259::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:263::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:267::print_char:67 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#80 ] main:2::test_8u:7::print_byte:255::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#80 ] main:2::test_8u:7::print_byte:259::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#80 ] main:2::test_8u:7::print_byte:263::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#80 ] main:2::test_8u:7::print_byte:267::print_char:70 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_char:163 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_char:163 [ print_line_cursor#1 test_8s::i#10 print_sbyte::b#5 print_char_cursor#80 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG154 [74] (byte*) print_char_cursor#17 ← ++ (byte*) print_char_cursor#80 [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267::print_char:67 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267::print_char:70 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_char:163 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_char:163 [ print_line_cursor#1 test_8s::i#10 print_sbyte::b#5 print_char_cursor#17 ] ) -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG155 print_char::@return
  breturn:
  //SEG156 [75] return  [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267::print_char:67 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267::print_char:70 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_char:163 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_char:163 [ print_line_cursor#1 test_8s::i#10 print_sbyte::b#5 print_char_cursor#17 ] )
    rts
}
//SEG157 print_str
print_str: {
    .label str = 5
  //SEG158 [77] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG159 [77] phi (byte*) print_char_cursor#126 = (byte*) print_char_cursor#17 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG160 [77] phi (byte*) print_str::str#13 = (byte*) print_str::str#15 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG161 print_str::@1
  b1:
  //SEG162 [78] if(*((byte*) print_str::str#13)!=(byte) '@') goto print_str::@2 [ print_char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#126 print_str::str#13 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG163 print_str::@return
  breturn:
  //SEG164 [79] return  [ print_char_cursor#126 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#126 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#126 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#126 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#126 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#126 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#126 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#126 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#126 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#126 ] )
    rts
  //SEG165 print_str::@2
  b2:
  //SEG166 [80] *((byte*) print_char_cursor#126) ← *((byte*) print_str::str#13) [ print_char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#126 print_str::str#13 ] ) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG167 [81] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#126 [ print_str::str#13 print_char_cursor#1 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_str::str#13 print_char_cursor#1 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_str::str#13 print_char_cursor#1 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_str::str#13 print_char_cursor#1 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_str::str#13 print_char_cursor#1 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_str::str#13 print_char_cursor#1 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_str::str#13 print_char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG168 [82] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#13 [ print_str::str#0 print_char_cursor#1 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_str::str#0 print_char_cursor#1 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_str::str#0 print_char_cursor#1 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_str::str#0 print_char_cursor#1 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_str::str#0 print_char_cursor#1 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_str::str#0 print_char_cursor#1 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_str::str#0 print_char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG169 div16s
div16s: {
    .label _2 = 8
    .label _6 = $a
    .label resultu = $c
    .label return = $c
    .label dividend = 8
    .label divisor = $a
    .label dividendu = 8
    .label divisoru = $a
  //SEG170 [83] if((signed word) div16s::dividend#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@1 [ div16s::dividend#0 div16s::divisor#0 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::dividend#0 div16s::divisor#0 ] ) -- vwsz1_lt_0_then_la1 
    lda dividend+1
    bmi b1
    jmp b16
  //SEG171 div16s::@16
  b16:
  //SEG172 [84] (word~) div16s::dividendu#8 ← (word)(signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::dividendu#8 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::dividendu#8 ] )
    // (word~) div16s::dividendu#8 = (word)(signed word) div16s::dividend#0  // register copy zp ZP_WORD:8
  //SEG173 [85] phi from div16s::@16 to div16s::@2 [phi:div16s::@16->div16s::@2]
  b2_from_b16:
  //SEG174 [85] phi (word) div16s::dividendu#3 = (word~) div16s::dividendu#8 [phi:div16s::@16->div16s::@2#0] -- register_copy 
  //SEG175 [85] phi (byte) div16s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div16s::@16->div16s::@2#1] -- vbuyy=vbuc1 
    ldy #0
    jmp b2
  //SEG176 div16s::@2
  b2:
  //SEG177 [86] if((signed word) div16s::divisor#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@3 [ div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 ] ) -- vwsz1_lt_0_then_la1 
    lda divisor+1
    bmi b3
    jmp b17
  //SEG178 div16s::@17
  b17:
  //SEG179 [87] (word~) div16s::divisoru#5 ← (word)(signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::divisoru#5 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::divisoru#5 ] )
    // (word~) div16s::divisoru#5 = (word)(signed word) div16s::divisor#0  // register copy zp ZP_WORD:10
  //SEG180 [88] phi from div16s::@17 div16s::@3 to div16s::@4 [phi:div16s::@17/div16s::@3->div16s::@4]
  b4_from_b17:
  b4_from_b3:
  //SEG181 [88] phi (byte) div16s::neg#4 = (byte) div16s::neg#3 [phi:div16s::@17/div16s::@3->div16s::@4#0] -- register_copy 
  //SEG182 [88] phi (word) div16s::divisoru#3 = (word~) div16s::divisoru#5 [phi:div16s::@17/div16s::@3->div16s::@4#1] -- register_copy 
    jmp b4
  //SEG183 div16s::@4
  b4:
  //SEG184 [89] (word) div16u::dividend#0 ← (word) div16s::dividendu#3 [ div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 ] )
    // (word) div16u::dividend#0 = (word) div16s::dividendu#3  // register copy zp ZP_WORD:8
  //SEG185 [90] (word) div16u::divisor#0 ← (word) div16s::divisoru#3 [ div16s::neg#4 div16u::dividend#0 div16u::divisor#0 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::dividend#0 div16u::divisor#0 ] )
    // (word) div16u::divisor#0 = (word) div16s::divisoru#3  // register copy zp ZP_WORD:10
  //SEG186 [91] call div16u param-assignment [ div16s::neg#4 div16u::return#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::return#0 rem16u#1 ] )
  //SEG187 [106] phi from div16s::@4 to div16u [phi:div16s::@4->div16u]
  div16u_from_b4:
  //SEG188 [106] phi (word) div16u::divisor#2 = (word) div16u::divisor#0 [phi:div16s::@4->div16u#0] -- register_copy 
  //SEG189 [106] phi (word) div16u::dividend#2 = (word) div16u::dividend#0 [phi:div16s::@4->div16u#1] -- register_copy 
    jsr div16u
  //SEG190 [92] (word) div16u::return#2 ← (word) div16u::return#0 [ div16s::neg#4 div16u::return#2 rem16u#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::return#2 rem16u#1 ] )
    // (word) div16u::return#2 = (word) div16u::return#0  // register copy zp ZP_WORD:12
    jmp b15
  //SEG191 div16s::@15
  b15:
  //SEG192 [93] (word) div16s::resultu#0 ← (word) div16u::return#2 [ div16s::neg#4 div16s::resultu#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16s::resultu#0 rem16u#1 ] )
    // (word) div16s::resultu#0 = (word) div16u::return#2  // register copy zp ZP_WORD:12
  //SEG193 [94] if((byte) div16s::neg#4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@18 [ div16s::resultu#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::resultu#0 rem16u#1 ] ) -- vbuyy_eq_0_then_la1 
    cpy #0
    beq b18
    jmp b11
  //SEG194 div16s::@11
  b11:
  //SEG195 [95] (signed word) rem16s#2 ← - (signed word)(word) rem16u#1 [ div16s::resultu#0 rem16s#2 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::resultu#0 rem16s#2 ] ) -- vwsz1=_neg_vwsz1 
    sec
    lda rem16s
    eor #$ff
    adc #0
    sta rem16s
    lda rem16s+1
    eor #$ff
    adc #0
    sta rem16s+1
  //SEG196 [96] (signed word) div16s::return#1 ← - (signed word)(word) div16s::resultu#0 [ rem16s#2 div16s::return#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 rem16s#2 div16s::return#1 ] ) -- vwsz1=_neg_vwsz1 
    sec
    lda return
    eor #$ff
    adc #0
    sta return
    lda return+1
    eor #$ff
    adc #0
    sta return+1
  //SEG197 [97] phi from div16s::@11 div16s::@18 to div16s::@return [phi:div16s::@11/div16s::@18->div16s::@return]
  breturn_from_b11:
  breturn_from_b18:
  //SEG198 [97] phi (signed word) rem16s#3 = (signed word) rem16s#2 [phi:div16s::@11/div16s::@18->div16s::@return#0] -- register_copy 
  //SEG199 [97] phi (signed word) div16s::return#2 = (signed word) div16s::return#1 [phi:div16s::@11/div16s::@18->div16s::@return#1] -- register_copy 
    jmp breturn
  //SEG200 div16s::@return
  breturn:
  //SEG201 [98] return  [ div16s::return#2 rem16s#3 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::return#2 rem16s#3 ] )
    rts
  //SEG202 div16s::@18
  b18:
  //SEG203 [99] (signed word~) div16s::return#7 ← (signed word)(word) div16s::resultu#0 [ rem16u#1 div16s::return#7 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 rem16u#1 div16s::return#7 ] )
    // (signed word~) div16s::return#7 = (signed word)(word) div16s::resultu#0  // register copy zp ZP_WORD:12
  //SEG204 [100] (signed word~) rem16s#32 ← (signed word)(word) rem16u#1 [ div16s::return#7 rem16s#32 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::return#7 rem16s#32 ] )
    // (signed word~) rem16s#32 = (signed word)(word) rem16u#1  // register copy zp ZP_WORD:14
    jmp breturn_from_b18
  //SEG205 div16s::@3
  b3:
  //SEG206 [101] (signed word~) div16s::$6 ← - (signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::$6 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::$6 ] ) -- vwsz1=_neg_vwsz1 
    sec
    lda _6
    eor #$ff
    adc #0
    sta _6
    lda _6+1
    eor #$ff
    adc #0
    sta _6+1
  //SEG207 [102] (byte) div16s::neg#2 ← (byte) div16s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16s::dividendu#3 div16s::neg#2 div16s::$6 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::dividendu#3 div16s::neg#2 div16s::$6 ] ) -- vbuyy=vbuyy_bxor_vbuc1 
    tya
    eor #1
    tay
  //SEG208 [103] (word~) div16s::divisoru#4 ← (word)(signed word~) div16s::$6 [ div16s::dividendu#3 div16s::divisoru#4 div16s::neg#2 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::dividendu#3 div16s::divisoru#4 div16s::neg#2 ] )
    // (word~) div16s::divisoru#4 = (word)(signed word~) div16s::$6  // register copy zp ZP_WORD:10
    jmp b4_from_b3
  //SEG209 div16s::@1
  b1:
  //SEG210 [104] (signed word~) div16s::$2 ← - (signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::$2 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::$2 ] ) -- vwsz1=_neg_vwsz1 
    sec
    lda _2
    eor #$ff
    adc #0
    sta _2
    lda _2+1
    eor #$ff
    adc #0
    sta _2+1
  //SEG211 [105] (word~) div16s::dividendu#7 ← (word)(signed word~) div16s::$2 [ div16s::divisor#0 div16s::dividendu#7 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::dividendu#7 ] )
    // (word~) div16s::dividendu#7 = (word)(signed word~) div16s::$2  // register copy zp ZP_WORD:8
  //SEG212 [85] phi from div16s::@1 to div16s::@2 [phi:div16s::@1->div16s::@2]
  b2_from_b1:
  //SEG213 [85] phi (word) div16s::dividendu#3 = (word~) div16s::dividendu#7 [phi:div16s::@1->div16s::@2#0] -- register_copy 
  //SEG214 [85] phi (byte) div16s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:div16s::@1->div16s::@2#1] -- vbuyy=vbuc1 
    ldy #1
    jmp b2
}
//SEG215 div16u
div16u: {
    .label return = $c
    .label dividend = 8
    .label divisor = $a
  //SEG216 [107] (word) divr16u::dividend#1 ← (word) div16u::dividend#2 [ div16u::divisor#2 divr16u::dividend#1 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::divisor#2 divr16u::dividend#1 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::divisor#2 divr16u::dividend#1 ] )
    // (word) divr16u::dividend#1 = (word) div16u::dividend#2  // register copy zp ZP_WORD:8
  //SEG217 [108] (word) divr16u::divisor#0 ← (word) div16u::divisor#2 [ divr16u::dividend#1 divr16u::divisor#0 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::dividend#1 divr16u::divisor#0 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#1 divr16u::divisor#0 ] )
    // (word) divr16u::divisor#0 = (word) div16u::divisor#2  // register copy zp ZP_WORD:10
  //SEG218 [109] call divr16u param-assignment [ rem16u#1 divr16u::return#0 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 rem16u#1 divr16u::return#0 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#0 ] )
  //SEG219 [113] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
    jsr divr16u
  //SEG220 [110] (word) divr16u::return#2 ← (word) divr16u::return#0 [ rem16u#1 divr16u::return#2 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 rem16u#1 divr16u::return#2 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#2 ] )
    // (word) divr16u::return#2 = (word) divr16u::return#0  // register copy zp ZP_WORD:12
    jmp b2
  //SEG221 div16u::@2
  b2:
  //SEG222 [111] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::return#0 rem16u#1 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 rem16u#1 ] )
    // (word) div16u::return#0 = (word) divr16u::return#2  // register copy zp ZP_WORD:12
    jmp breturn
  //SEG223 div16u::@return
  breturn:
  //SEG224 [112] return  [ div16u::return#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::return#0 rem16u#1 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 rem16u#1 ] )
    rts
}
//SEG225 divr16u
divr16u: {
    .label rem = $e
    .label dividend = 8
    .label quotient = $c
    .label return = $c
    .label divisor = $a
  //SEG226 [114] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  b1_from_divr16u:
  //SEG227 [114] phi (byte) divr16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG228 [114] phi (word) divr16u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta quotient
    lda #>0
    sta quotient+1
  //SEG229 [114] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#1 [phi:divr16u->divr16u::@1#2] -- register_copy 
  //SEG230 [114] phi (word) divr16u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta rem
    lda #>0
    sta rem+1
    jmp b1
  //SEG231 [114] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  b1_from_b3:
  //SEG232 [114] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG233 [114] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG234 [114] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG235 [114] phi (word) divr16u::rem#4 = (word) divr16u::rem#10 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG236 divr16u::@1
  b1:
  //SEG237 [115] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ) -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG238 [116] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) -- vbuaa=_hi_vwuz1 
    lda dividend+1
  //SEG239 [117] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ) -- vbuaa=vbuaa_band_vbuc1 
    and #$80
  //SEG240 [118] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ) -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b1
    jmp b4
  //SEG241 divr16u::@4
  b4:
  //SEG242 [119] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG243 [120] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG244 [120] phi (word) divr16u::rem#5 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp b2
  //SEG245 divr16u::@2
  b2:
  //SEG246 [121] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 ] ) -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG247 [122] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ) -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG248 [123] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ) -- vwuz1_lt_vwuz2_then_la1 
    lda rem+1
    cmp divisor+1
    bcc b3_from_b2
    bne !+
    lda rem
    cmp divisor
    bcc b3_from_b2
  !:
    jmp b5
  //SEG249 divr16u::@5
  b5:
  //SEG250 [124] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#2 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#2 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#2 ] ) -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG251 [125] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (word) divr16u::divisor#0 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) -- vwuz1=vwuz1_minus_vwuz2 
    lda rem
    sec
    sbc divisor
    sta rem
    lda rem+1
    sbc divisor+1
    sta rem+1
  //SEG252 [126] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG253 [126] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG254 [126] phi (word) divr16u::rem#10 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp b3
  //SEG255 divr16u::@3
  b3:
  //SEG256 [127] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 [ divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG257 [128] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto divr16u::@1 [ divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b3
    jmp b6
  //SEG258 divr16u::@6
  b6:
  //SEG259 [129] (word) rem16u#1 ← (word) divr16u::rem#10 [ rem16u#1 divr16u::return#0 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 rem16u#1 divr16u::return#0 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#0 ] )
    // (word) rem16u#1 = (word) divr16u::rem#10  // register copy zp ZP_WORD:14
    jmp breturn
  //SEG260 divr16u::@return
  breturn:
  //SEG261 [130] return  [ rem16u#1 divr16u::return#0 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 rem16u#1 divr16u::return#0 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#0 ] )
    rts
}
//SEG262 test_8s
test_8s: {
    .label dividend = 7
    .label divisor = $15
    .label res = $10
    .label i = 2
  //SEG263 [132] phi from test_8s to test_8s::@1 [phi:test_8s->test_8s::@1]
  b1_from_test_8s:
  //SEG264 [132] phi (byte) test_8s::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8s->test_8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG265 [132] phi from test_8s::@11 to test_8s::@1 [phi:test_8s::@11->test_8s::@1]
  b1_from_b11:
  //SEG266 [132] phi (byte) test_8s::i#10 = (byte) test_8s::i#1 [phi:test_8s::@11->test_8s::@1#0] -- register_copy 
    jmp b1
  //SEG267 test_8s::@1
  b1:
  //SEG268 [133] (signed byte) test_8s::dividend#0 ← *((const signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#10) [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG269 [134] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
  //SEG270 [135] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 ] ) -- vbsyy=vbsz1 
    ldy dividend
  //SEG271 [136] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] ) -- vbsxx=vbsz1 
    ldx divisor
  //SEG272 [137] call div8s param-assignment [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 rem8s#3 ] )
    jsr div8s
  //SEG273 [138] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 rem8s#3 ] )
    // (signed byte) div8s::return#3 = (signed byte) div8s::return#2  // register copy reg byte a
    jmp b3
  //SEG274 test_8s::@3
  b3:
  //SEG275 [139] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] ) -- vbsz1=vbsaa 
    sta res
  //SEG276 [140] (signed byte) print_sbyte::b#1 ← (signed byte) test_8s::dividend#0 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 rem8s#3 ] )
    // (signed byte) print_sbyte::b#1 = (signed byte) test_8s::dividend#0  // register copy zp ZP_BYTE:7
  //SEG277 [141] (byte*~) print_char_cursor#180 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 print_char_cursor#180 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 print_char_cursor#180 rem8s#3 ] ) -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG278 [142] call print_sbyte param-assignment [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] )
  //SEG279 [160] phi from test_8s::@3 to print_sbyte [phi:test_8s::@3->print_sbyte]
  print_sbyte_from_b3:
  //SEG280 [160] phi (byte*) print_char_cursor#131 = (byte*~) print_char_cursor#180 [phi:test_8s::@3->print_sbyte#0] -- register_copy 
  //SEG281 [160] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#1 [phi:test_8s::@3->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG282 [143] phi from test_8s::@3 to test_8s::@4 [phi:test_8s::@3->test_8s::@4]
  b4_from_b3:
    jmp b4
  //SEG283 test_8s::@4
  b4:
  //SEG284 [144] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] )
  //SEG285 [76] phi from test_8s::@4 to print_str [phi:test_8s::@4->print_str]
  print_str_from_b4:
  //SEG286 [76] phi (byte*) print_str::str#15 = (const string) test_8s::str [phi:test_8s::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG287 test_8s::@5
  b5:
  //SEG288 [145] (signed byte) print_sbyte::b#2 ← (signed byte) test_8s::divisor#0 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::res#0 print_sbyte::b#2 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::res#0 print_sbyte::b#2 rem8s#3 ] ) -- vbsz1=vbsz2 
    lda divisor
    sta print_sbyte.b
  //SEG289 [146] call print_sbyte param-assignment [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 test_8s::res#0 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 test_8s::res#0 rem8s#3 ] )
  //SEG290 [160] phi from test_8s::@5 to print_sbyte [phi:test_8s::@5->print_sbyte]
  print_sbyte_from_b5:
  //SEG291 [160] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#126 [phi:test_8s::@5->print_sbyte#0] -- register_copy 
  //SEG292 [160] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#2 [phi:test_8s::@5->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG293 [147] phi from test_8s::@5 to test_8s::@6 [phi:test_8s::@5->test_8s::@6]
  b6_from_b5:
    jmp b6
  //SEG294 test_8s::@6
  b6:
  //SEG295 [148] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::res#0 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::res#0 rem8s#3 ] )
  //SEG296 [76] phi from test_8s::@6 to print_str [phi:test_8s::@6->print_str]
  print_str_from_b6:
  //SEG297 [76] phi (byte*) print_str::str#15 = (const string) test_8s::str1 [phi:test_8s::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG298 test_8s::@7
  b7:
  //SEG299 [149] (signed byte) print_sbyte::b#3 ← (signed byte) test_8s::res#0 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 print_sbyte::b#3 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 print_sbyte::b#3 rem8s#3 ] ) -- vbsz1=vbsz2 
    lda res
    sta print_sbyte.b
  //SEG300 [150] call print_sbyte param-assignment [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 rem8s#3 ] )
  //SEG301 [160] phi from test_8s::@7 to print_sbyte [phi:test_8s::@7->print_sbyte]
  print_sbyte_from_b7:
  //SEG302 [160] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#126 [phi:test_8s::@7->print_sbyte#0] -- register_copy 
  //SEG303 [160] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#3 [phi:test_8s::@7->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG304 [151] phi from test_8s::@7 to test_8s::@8 [phi:test_8s::@7->test_8s::@8]
  b8_from_b7:
    jmp b8
  //SEG305 test_8s::@8
  b8:
  //SEG306 [152] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 rem8s#3 ] )
  //SEG307 [76] phi from test_8s::@8 to print_str [phi:test_8s::@8->print_str]
  print_str_from_b8:
  //SEG308 [76] phi (byte*) print_str::str#15 = (const string) test_8s::str2 [phi:test_8s::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG309 test_8s::@9
  b9:
  //SEG310 [153] (signed byte) print_sbyte::b#4 ← (signed byte) rem8s#3 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 print_sbyte::b#4 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 print_sbyte::b#4 ] ) -- vbsz1=vbsxx 
    stx print_sbyte.b
  //SEG311 [154] call print_sbyte param-assignment [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 ] )
  //SEG312 [160] phi from test_8s::@9 to print_sbyte [phi:test_8s::@9->print_sbyte]
  print_sbyte_from_b9:
  //SEG313 [160] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#126 [phi:test_8s::@9->print_sbyte#0] -- register_copy 
  //SEG314 [160] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#4 [phi:test_8s::@9->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG315 [155] phi from test_8s::@9 to test_8s::@10 [phi:test_8s::@9->test_8s::@10]
  b10_from_b9:
    jmp b10
  //SEG316 test_8s::@10
  b10:
  //SEG317 [156] call print_ln param-assignment [ print_line_cursor#1 test_8s::i#10 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 ] )
  //SEG318 [44] phi from test_8s::@10 to print_ln [phi:test_8s::@10->print_ln]
  print_ln_from_b10:
  //SEG319 [44] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#1 [phi:test_8s::@10->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b11
  //SEG320 test_8s::@11
  b11:
  //SEG321 [157] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10 [ print_line_cursor#1 test_8s::i#1 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG322 [158] if((byte) test_8s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8s::@1 [ print_line_cursor#1 test_8s::i#1 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #6
    bne b1_from_b11
    jmp breturn
  //SEG323 test_8s::@return
  breturn:
  //SEG324 [159] return  [ print_line_cursor#1 ] ( main:2::test_8s:11 [ print_line_cursor#1 ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .byte $7f, -$7f, -$7f, $7f, $7f, $7f
    divisors: .byte 5, 7, -$b, -$d, $11, $13
}
//SEG325 print_sbyte
print_sbyte: {
    .label b = 7
  //SEG326 [161] if((signed byte) print_sbyte::b#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte::@1 [ print_char_cursor#131 print_sbyte::b#5 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#131 print_sbyte::b#5 ] ) -- vbsz1_ge_0_then_la1 
    lda b
    cmp #0
    bpl b1_from_print_sbyte
  //SEG327 [162] phi from print_sbyte to print_sbyte::@2 [phi:print_sbyte->print_sbyte::@2]
  b2_from_print_sbyte:
    jmp b2
  //SEG328 print_sbyte::@2
  b2:
  //SEG329 [163] call print_char param-assignment [ print_char_cursor#17 print_sbyte::b#5 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_sbyte::b#5 ] )
  //SEG330 [72] phi from print_sbyte::@2 to print_char [phi:print_sbyte::@2->print_char]
  print_char_from_b2:
  //SEG331 [72] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#131 [phi:print_sbyte::@2->print_char#0] -- register_copy 
  //SEG332 [72] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sbyte::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp b4
  //SEG333 print_sbyte::@4
  b4:
  //SEG334 [164] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#5 [ print_char_cursor#17 print_sbyte::b#0 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_sbyte::b#0 ] ) -- vbsz1=_neg_vbsz1 
    lda b
    eor #$ff
    clc
    adc #1
    sta b
  //SEG335 [165] phi from print_sbyte print_sbyte::@4 to print_sbyte::@1 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1]
  b1_from_print_sbyte:
  b1_from_b4:
  //SEG336 [165] phi (byte*) print_char_cursor#130 = (byte*) print_char_cursor#131 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1#0] -- register_copy 
  //SEG337 [165] phi (signed byte) print_sbyte::b#6 = (signed byte) print_sbyte::b#5 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1#1] -- register_copy 
    jmp b1
  //SEG338 print_sbyte::@1
  b1:
  //SEG339 [166] (byte~) print_byte::b#9 ← (byte)(signed byte) print_sbyte::b#6 [ print_byte::b#9 print_char_cursor#130 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#9 print_char_cursor#130 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#9 print_char_cursor#130 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#9 print_char_cursor#130 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_byte::b#9 print_char_cursor#130 ] )
    // (byte~) print_byte::b#9 = (byte)(signed byte) print_sbyte::b#6  // register copy zp ZP_BYTE:7
  //SEG340 [167] call print_byte param-assignment [ print_char_cursor#17 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] )
  //SEG341 [64] phi from print_sbyte::@1 to print_byte [phi:print_sbyte::@1->print_byte]
  print_byte_from_b1:
  //SEG342 [64] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#130 [phi:print_sbyte::@1->print_byte#0] -- register_copy 
  //SEG343 [64] phi (byte) print_byte::b#7 = (byte~) print_byte::b#9 [phi:print_sbyte::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG344 print_sbyte::@return
  breturn:
  //SEG345 [168] return  [ print_char_cursor#17 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] )
    rts
}
//SEG346 div8s
div8s: {
    .label neg = $10
  //SEG347 [169] if((signed byte) div8s::dividend#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@1 [ div8s::dividend#0 div8s::divisor#0 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] ) -- vbsyy_lt_0_then_la1 
    cpy #0
    bmi b1
    jmp b16
  //SEG348 div8s::@16
  b16:
  //SEG349 [170] (byte~) div8s::dividendu#8 ← (byte)(signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::dividendu#8 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendu#8 ] )
    // (byte~) div8s::dividendu#8 = (byte)(signed byte) div8s::dividend#0  // register copy reg byte y
  //SEG350 [171] phi from div8s::@16 to div8s::@2 [phi:div8s::@16->div8s::@2]
  b2_from_b16:
  //SEG351 [171] phi (byte) div8s::dividendu#3 = (byte~) div8s::dividendu#8 [phi:div8s::@16->div8s::@2#0] -- register_copy 
  //SEG352 [171] phi (byte) div8s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8s::@16->div8s::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta neg
    jmp b2
  //SEG353 div8s::@2
  b2:
  //SEG354 [172] if((signed byte) div8s::divisor#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@3 [ div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 ] ) -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi b3
    jmp b17
  //SEG355 div8s::@17
  b17:
  //SEG356 [173] (byte~) div8s::divisoru#5 ← (byte)(signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::divisoru#5 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::divisoru#5 ] )
    // (byte~) div8s::divisoru#5 = (byte)(signed byte) div8s::divisor#0  // register copy reg byte x
  //SEG357 [174] phi from div8s::@17 div8s::@3 to div8s::@4 [phi:div8s::@17/div8s::@3->div8s::@4]
  b4_from_b17:
  b4_from_b3:
  //SEG358 [174] phi (byte) div8s::neg#4 = (byte) div8s::neg#3 [phi:div8s::@17/div8s::@3->div8s::@4#0] -- register_copy 
  //SEG359 [174] phi (byte) div8s::divisoru#3 = (byte~) div8s::divisoru#5 [phi:div8s::@17/div8s::@3->div8s::@4#1] -- register_copy 
    jmp b4
  //SEG360 div8s::@4
  b4:
  //SEG361 [175] (byte) div8u::dividend#0 ← (byte) div8s::dividendu#3 [ div8s::divisoru#3 div8s::neg#4 div8u::dividend#0 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisoru#3 div8s::neg#4 div8u::dividend#0 ] ) -- vbuaa=vbuyy 
    tya
  //SEG362 [176] (byte) div8u::divisor#0 ← (byte) div8s::divisoru#3 [ div8s::neg#4 div8u::dividend#0 div8u::divisor#0 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::dividend#0 div8u::divisor#0 ] )
    // (byte) div8u::divisor#0 = (byte) div8s::divisoru#3  // register copy reg byte x
  //SEG363 [177] call div8u param-assignment [ div8s::neg#4 div8u::return#0 rem8u#17 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 rem8u#17 ] )
  //SEG364 [192] phi from div8s::@4 to div8u [phi:div8s::@4->div8u]
  div8u_from_b4:
  //SEG365 [192] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#0 [phi:div8s::@4->div8u#0] -- register_copy 
  //SEG366 [192] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#0 [phi:div8s::@4->div8u#1] -- register_copy 
    jsr div8u
  //SEG367 [178] (byte) div8u::return#2 ← (byte) div8u::return#0 [ div8s::neg#4 div8u::return#2 rem8u#17 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#2 rem8u#17 ] )
    // (byte) div8u::return#2 = (byte) div8u::return#0  // register copy reg byte a
    jmp b15
  //SEG368 div8s::@15
  b15:
  //SEG369 [179] (byte) div8s::resultu#0 ← (byte) div8u::return#2 [ div8s::neg#4 div8s::resultu#0 rem8u#17 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8s::resultu#0 rem8u#17 ] ) -- vbuyy=vbuaa 
    tay
  //SEG370 [180] if((byte) div8s::neg#4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@18 [ div8s::resultu#0 rem8u#17 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 rem8u#17 ] ) -- vbuz1_eq_0_then_la1 
    lda neg
    beq b18
    jmp b11
  //SEG371 div8s::@11
  b11:
  //SEG372 [181] (signed byte) rem8s#2 ← - (signed byte)(byte) rem8u#17 [ div8s::resultu#0 rem8s#2 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 rem8s#2 ] ) -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
  //SEG373 [182] (signed byte) div8s::return#1 ← - (signed byte)(byte) div8s::resultu#0 [ rem8s#2 div8s::return#1 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 rem8s#2 div8s::return#1 ] ) -- vbsaa=_neg_vbsyy 
    tya
    eor #$ff
    clc
    adc #1
  //SEG374 [183] phi from div8s::@11 div8s::@18 to div8s::@return [phi:div8s::@11/div8s::@18->div8s::@return]
  breturn_from_b11:
  breturn_from_b18:
  //SEG375 [183] phi (signed byte) rem8s#3 = (signed byte) rem8s#2 [phi:div8s::@11/div8s::@18->div8s::@return#0] -- register_copy 
  //SEG376 [183] phi (signed byte) div8s::return#2 = (signed byte) div8s::return#1 [phi:div8s::@11/div8s::@18->div8s::@return#1] -- register_copy 
    jmp breturn
  //SEG377 div8s::@return
  breturn:
  //SEG378 [184] return  [ div8s::return#2 rem8s#3 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 rem8s#3 ] )
    rts
  //SEG379 div8s::@18
  b18:
  //SEG380 [185] (signed byte~) div8s::return#7 ← (signed byte)(byte) div8s::resultu#0 [ rem8u#17 div8s::return#7 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 rem8u#17 div8s::return#7 ] ) -- vbsaa=vbsyy 
    tya
  //SEG381 [186] (signed byte~) rem8s#33 ← (signed byte)(byte) rem8u#17 [ div8s::return#7 rem8s#33 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#7 rem8s#33 ] )
    // (signed byte~) rem8s#33 = (signed byte)(byte) rem8u#17  // register copy reg byte x
    jmp breturn_from_b18
  //SEG382 div8s::@3
  b3:
  //SEG383 [187] (signed byte~) div8s::$6 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::$6 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::$6 ] ) -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
  //SEG384 [188] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8s::dividendu#3 div8s::neg#2 div8s::$6 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::neg#2 div8s::$6 ] ) -- vbuz1=vbuz1_bxor_vbuc1 
    lda neg
    eor #1
    sta neg
  //SEG385 [189] (byte~) div8s::divisoru#4 ← (byte)(signed byte~) div8s::$6 [ div8s::dividendu#3 div8s::divisoru#4 div8s::neg#2 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::divisoru#4 div8s::neg#2 ] )
    // (byte~) div8s::divisoru#4 = (byte)(signed byte~) div8s::$6  // register copy reg byte x
    jmp b4_from_b3
  //SEG386 div8s::@1
  b1:
  //SEG387 [190] (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::$2 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::$2 ] ) -- vbsaa=_neg_vbsyy 
    tya
    eor #$ff
    clc
    adc #1
  //SEG388 [191] (byte~) div8s::dividendu#7 ← (byte)(signed byte~) div8s::$2 [ div8s::divisor#0 div8s::dividendu#7 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendu#7 ] ) -- vbuyy=vbuaa 
    tay
  //SEG389 [171] phi from div8s::@1 to div8s::@2 [phi:div8s::@1->div8s::@2]
  b2_from_b1:
  //SEG390 [171] phi (byte) div8s::dividendu#3 = (byte~) div8s::dividendu#7 [phi:div8s::@1->div8s::@2#0] -- register_copy 
  //SEG391 [171] phi (byte) div8s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:div8s::@1->div8s::@2#1] -- vbuz1=vbuc1 
    lda #1
    sta neg
    jmp b2
}
//SEG392 div8u
div8u: {
  //SEG393 [193] (byte) divr8u::dividend#0 ← (byte) div8u::dividend#2 [ div8u::divisor#2 divr8u::dividend#0 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#2 divr8u::dividend#0 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#2 divr8u::dividend#0 ] ) -- vbuz1=vbuaa 
    sta divr8u.dividend
  //SEG394 [194] (byte) divr8u::divisor#0 ← (byte) div8u::divisor#2 [ divr8u::dividend#0 divr8u::divisor#0 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::dividend#0 divr8u::divisor#0 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::dividend#0 divr8u::divisor#0 ] ) -- vbuz1=vbuxx 
    stx divr8u.divisor
  //SEG395 [195] call divr8u param-assignment [ rem8u#17 divr8u::return#1 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 rem8u#17 divr8u::return#1 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 rem8u#17 divr8u::return#1 ] )
  //SEG396 [199] phi from div8u to divr8u [phi:div8u->divr8u]
  divr8u_from_div8u:
    jsr divr8u
  //SEG397 [196] (byte) divr8u::return#0 ← (byte) divr8u::return#1 [ rem8u#17 divr8u::return#0 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 rem8u#17 divr8u::return#0 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 rem8u#17 divr8u::return#0 ] ) -- vbuaa=vbuz1 
    lda divr8u.return
    jmp b2
  //SEG398 div8u::@2
  b2:
  //SEG399 [197] (byte) div8u::return#0 ← (byte) divr8u::return#0 [ div8u::return#0 rem8u#17 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 rem8u#17 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#17 ] )
    // (byte) div8u::return#0 = (byte) divr8u::return#0  // register copy reg byte a
    jmp breturn
  //SEG400 div8u::@return
  breturn:
  //SEG401 [198] return  [ div8u::return#0 rem8u#17 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 rem8u#17 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#17 ] )
    rts
}
//SEG402 divr8u
divr8u: {
    .label dividend = $11
    .label divisor = $16
    .label quotient = $12
    .label return = $12
  //SEG403 [200] phi from divr8u to divr8u::@1 [phi:divr8u->divr8u::@1]
  b1_from_divr8u:
  //SEG404 [200] phi (byte) divr8u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr8u->divr8u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG405 [200] phi (byte) divr8u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr8u->divr8u::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta quotient
  //SEG406 [200] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#0 [phi:divr8u->divr8u::@1#2] -- register_copy 
  //SEG407 [200] phi (byte) divr8u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr8u->divr8u::@1#3] -- vbuyy=vbuc1 
    ldy #0
    jmp b1
  //SEG408 [200] phi from divr8u::@3 to divr8u::@1 [phi:divr8u::@3->divr8u::@1]
  b1_from_b3:
  //SEG409 [200] phi (byte) divr8u::i#2 = (byte) divr8u::i#1 [phi:divr8u::@3->divr8u::@1#0] -- register_copy 
  //SEG410 [200] phi (byte) divr8u::quotient#3 = (byte) divr8u::return#1 [phi:divr8u::@3->divr8u::@1#1] -- register_copy 
  //SEG411 [200] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#1 [phi:divr8u::@3->divr8u::@1#2] -- register_copy 
  //SEG412 [200] phi (byte) divr8u::rem#4 = (byte) divr8u::rem#10 [phi:divr8u::@3->divr8u::@1#3] -- register_copy 
    jmp b1
  //SEG413 divr8u::@1
  b1:
  //SEG414 [201] (byte) divr8u::rem#1 ← (byte) divr8u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ) -- vbuyy=vbuyy_rol_1 
    tya
    asl
    tay
  //SEG415 [202] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte/word/signed word/dword/signed dword) 128 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ) -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and dividend
  //SEG416 [203] if((byte~) divr8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr8u::@2 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ) -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b1
    jmp b4
  //SEG417 divr8u::@4
  b4:
  //SEG418 [204] (byte) divr8u::rem#2 ← (byte) divr8u::rem#1 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ) -- vbuyy=vbuyy_bor_vbuc1 
    tya
    ora #1
    tay
  //SEG419 [205] phi from divr8u::@1 divr8u::@4 to divr8u::@2 [phi:divr8u::@1/divr8u::@4->divr8u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG420 [205] phi (byte) divr8u::rem#5 = (byte) divr8u::rem#1 [phi:divr8u::@1/divr8u::@4->divr8u::@2#0] -- register_copy 
    jmp b2
  //SEG421 divr8u::@2
  b2:
  //SEG422 [206] (byte) divr8u::dividend#1 ← (byte) divr8u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] ) -- vbuz1=vbuz1_rol_1 
    asl dividend
  //SEG423 [207] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ) -- vbuz1=vbuz1_rol_1 
    asl quotient
  //SEG424 [208] if((byte) divr8u::rem#5<(byte) divr8u::divisor#0) goto divr8u::@3 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ) -- vbuyy_lt_vbuz1_then_la1 
    cpy divisor
    bcc b3_from_b2
    jmp b5
  //SEG425 divr8u::@5
  b5:
  //SEG426 [209] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] ) -- vbuz1=_inc_vbuz1 
    inc quotient
  //SEG427 [210] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ) -- vbuyy=vbuyy_minus_vbuz1 
    tya
    sec
    sbc divisor
    tay
  //SEG428 [211] phi from divr8u::@2 divr8u::@5 to divr8u::@3 [phi:divr8u::@2/divr8u::@5->divr8u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG429 [211] phi (byte) divr8u::return#1 = (byte) divr8u::quotient#1 [phi:divr8u::@2/divr8u::@5->divr8u::@3#0] -- register_copy 
  //SEG430 [211] phi (byte) divr8u::rem#10 = (byte) divr8u::rem#5 [phi:divr8u::@2/divr8u::@5->divr8u::@3#1] -- register_copy 
    jmp b3
  //SEG431 divr8u::@3
  b3:
  //SEG432 [212] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2 [ divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG433 [213] if((byte) divr8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto divr8u::@1 [ divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b1_from_b3
    jmp b6
  //SEG434 divr8u::@6
  b6:
  //SEG435 [214] (byte) rem8u#17 ← (byte) divr8u::rem#10 [ rem8u#17 divr8u::return#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 rem8u#17 divr8u::return#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 rem8u#17 divr8u::return#1 ] ) -- vbuxx=vbuyy 
    tya
    tax
    jmp breturn
  //SEG436 divr8u::@return
  breturn:
  //SEG437 [215] return  [ rem8u#17 divr8u::return#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 rem8u#17 divr8u::return#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 rem8u#17 divr8u::return#1 ] )
    rts
}
//SEG438 test_16u
test_16u: {
    .label dividend = 5
    .label divisor = $a
    .label res = $c
    .label i = 2
  //SEG439 [217] phi from test_16u to test_16u::@1 [phi:test_16u->test_16u::@1]
  b1_from_test_16u:
  //SEG440 [217] phi (byte) test_16u::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16u->test_16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG441 [217] phi from test_16u::@11 to test_16u::@1 [phi:test_16u::@11->test_16u::@1]
  b1_from_b11:
  //SEG442 [217] phi (byte) test_16u::i#10 = (byte) test_16u::i#1 [phi:test_16u::@11->test_16u::@1#0] -- register_copy 
    jmp b1
  //SEG443 test_16u::@1
  b1:
  //SEG444 [218] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte) test_16u::i#10) [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 ] ) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
    lda dividends+1,y
    sta dividend+1
  //SEG445 [219] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte) test_16u::i#10) [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
    lda divisors+1,y
    sta divisor+1
  //SEG446 [220] (word) div16u::dividend#1 ← (word) test_16u::dividend#0 [ print_line_cursor#1 div16u::dividend#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 div16u::dividend#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) -- vwuz1=vwuz2 
    lda dividend
    sta div16u.dividend
    lda dividend+1
    sta div16u.dividend+1
  //SEG447 [221] (word) div16u::divisor#1 ← (word) test_16u::divisor#0 [ print_line_cursor#1 div16u::dividend#1 div16u::divisor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 div16u::dividend#1 div16u::divisor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] )
    // (word) div16u::divisor#1 = (word) test_16u::divisor#0  // register copy zp ZP_WORD:10
  //SEG448 [222] call div16u param-assignment [ print_line_cursor#1 div16u::return#0 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 div16u::return#0 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] )
  //SEG449 [106] phi from test_16u::@1 to div16u [phi:test_16u::@1->div16u]
  div16u_from_b1:
  //SEG450 [106] phi (word) div16u::divisor#2 = (word) div16u::divisor#1 [phi:test_16u::@1->div16u#0] -- register_copy 
  //SEG451 [106] phi (word) div16u::dividend#2 = (word) div16u::dividend#1 [phi:test_16u::@1->div16u#1] -- register_copy 
    jsr div16u
  //SEG452 [223] (word) div16u::return#3 ← (word) div16u::return#0 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] ( main:2::test_16u:9 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] )
    // (word) div16u::return#3 = (word) div16u::return#0  // register copy zp ZP_WORD:12
    jmp b3
  //SEG453 test_16u::@3
  b3:
  //SEG454 [224] (word) test_16u::res#0 ← (word) div16u::return#3 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] )
    // (word) test_16u::res#0 = (word) div16u::return#3  // register copy zp ZP_WORD:12
  //SEG455 [225] (word) print_word::w#1 ← (word) test_16u::dividend#0 [ print_line_cursor#1 print_word::w#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_word::w#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
    // (word) print_word::w#1 = (word) test_16u::dividend#0  // register copy zp ZP_WORD:5
  //SEG456 [226] (byte*~) print_char_cursor#163 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_word::w#1 print_char_cursor#163 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_word::w#1 print_char_cursor#163 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ) -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG457 [227] call print_word param-assignment [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
  //SEG458 [58] phi from test_16u::@3 to print_word [phi:test_16u::@3->print_word]
  print_word_from_b3:
  //SEG459 [58] phi (byte*) print_char_cursor#132 = (byte*~) print_char_cursor#163 [phi:test_16u::@3->print_word#0] -- register_copy 
  //SEG460 [58] phi (word) print_word::w#5 = (word) print_word::w#1 [phi:test_16u::@3->print_word#1] -- register_copy 
    jsr print_word
  //SEG461 [228] phi from test_16u::@3 to test_16u::@4 [phi:test_16u::@3->test_16u::@4]
  b4_from_b3:
    jmp b4
  //SEG462 test_16u::@4
  b4:
  //SEG463 [229] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
  //SEG464 [76] phi from test_16u::@4 to print_str [phi:test_16u::@4->print_str]
  print_str_from_b4:
  //SEG465 [76] phi (byte*) print_str::str#15 = (const string) test_16u::str [phi:test_16u::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG466 test_16u::@5
  b5:
  //SEG467 [230] (word) print_word::w#2 ← (word) test_16u::divisor#0 [ print_line_cursor#1 print_char_cursor#126 print_word::w#2 rem16u#1 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 print_word::w#2 rem16u#1 test_16u::i#10 test_16u::res#0 ] ) -- vwuz1=vwuz2 
    lda divisor
    sta print_word.w
    lda divisor+1
    sta print_word.w+1
  //SEG468 [231] call print_word param-assignment [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 test_16u::res#0 ] )
  //SEG469 [58] phi from test_16u::@5 to print_word [phi:test_16u::@5->print_word]
  print_word_from_b5:
  //SEG470 [58] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#126 [phi:test_16u::@5->print_word#0] -- register_copy 
  //SEG471 [58] phi (word) print_word::w#5 = (word) print_word::w#2 [phi:test_16u::@5->print_word#1] -- register_copy 
    jsr print_word
  //SEG472 [232] phi from test_16u::@5 to test_16u::@6 [phi:test_16u::@5->test_16u::@6]
  b6_from_b5:
    jmp b6
  //SEG473 test_16u::@6
  b6:
  //SEG474 [233] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 test_16u::res#0 ] )
  //SEG475 [76] phi from test_16u::@6 to print_str [phi:test_16u::@6->print_str]
  print_str_from_b6:
  //SEG476 [76] phi (byte*) print_str::str#15 = (const string) test_16u::str1 [phi:test_16u::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG477 test_16u::@7
  b7:
  //SEG478 [234] (word) print_word::w#3 ← (word) test_16u::res#0 [ print_line_cursor#1 print_char_cursor#126 print_word::w#3 rem16u#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 print_word::w#3 rem16u#1 test_16u::i#10 ] ) -- vwuz1=vwuz2 
    lda res
    sta print_word.w
    lda res+1
    sta print_word.w+1
  //SEG479 [235] call print_word param-assignment [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 ] )
  //SEG480 [58] phi from test_16u::@7 to print_word [phi:test_16u::@7->print_word]
  print_word_from_b7:
  //SEG481 [58] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#126 [phi:test_16u::@7->print_word#0] -- register_copy 
  //SEG482 [58] phi (word) print_word::w#5 = (word) print_word::w#3 [phi:test_16u::@7->print_word#1] -- register_copy 
    jsr print_word
  //SEG483 [236] phi from test_16u::@7 to test_16u::@8 [phi:test_16u::@7->test_16u::@8]
  b8_from_b7:
    jmp b8
  //SEG484 test_16u::@8
  b8:
  //SEG485 [237] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 ] )
  //SEG486 [76] phi from test_16u::@8 to print_str [phi:test_16u::@8->print_str]
  print_str_from_b8:
  //SEG487 [76] phi (byte*) print_str::str#15 = (const string) test_16u::str2 [phi:test_16u::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG488 test_16u::@9
  b9:
  //SEG489 [238] (word) print_word::w#4 ← (word) rem16u#1 [ print_line_cursor#1 print_char_cursor#126 print_word::w#4 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 print_word::w#4 test_16u::i#10 ] ) -- vwuz1=vwuz2 
    lda rem16u
    sta print_word.w
    lda rem16u+1
    sta print_word.w+1
  //SEG490 [239] call print_word param-assignment [ print_line_cursor#1 print_char_cursor#17 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#17 test_16u::i#10 ] )
  //SEG491 [58] phi from test_16u::@9 to print_word [phi:test_16u::@9->print_word]
  print_word_from_b9:
  //SEG492 [58] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#126 [phi:test_16u::@9->print_word#0] -- register_copy 
  //SEG493 [58] phi (word) print_word::w#5 = (word) print_word::w#4 [phi:test_16u::@9->print_word#1] -- register_copy 
    jsr print_word
  //SEG494 [240] phi from test_16u::@9 to test_16u::@10 [phi:test_16u::@9->test_16u::@10]
  b10_from_b9:
    jmp b10
  //SEG495 test_16u::@10
  b10:
  //SEG496 [241] call print_ln param-assignment [ print_line_cursor#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 ] )
  //SEG497 [44] phi from test_16u::@10 to print_ln [phi:test_16u::@10->print_ln]
  print_ln_from_b10:
  //SEG498 [44] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#1 [phi:test_16u::@10->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b11
  //SEG499 test_16u::@11
  b11:
  //SEG500 [242] (byte) test_16u::i#1 ← (byte) test_16u::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ print_line_cursor#1 test_16u::i#1 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#1 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda #2
    clc
    adc i
    sta i
  //SEG501 [243] if((byte) test_16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16u::@1 [ print_line_cursor#1 test_16u::i#1 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$c
    bne b1_from_b11
    jmp breturn
  //SEG502 test_16u::@return
  breturn:
  //SEG503 [244] return  [ print_line_cursor#1 ] ( main:2::test_16u:9 [ print_line_cursor#1 ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .word $ffff, $ffff, $ffff, $ffff, $ffff, $ffff
    divisors: .word 5, 7, $b, $d, $11, $13
}
//SEG504 test_8u
test_8u: {
    .label dividend = 7
    .label divisor = $10
    .label res = $11
    .label i = 2
  //SEG505 [246] phi from test_8u to test_8u::@1 [phi:test_8u->test_8u::@1]
  b1_from_test_8u:
  //SEG506 [246] phi (byte*) print_line_cursor#41 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:test_8u->test_8u::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG507 [246] phi (byte*) print_char_cursor#135 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:test_8u->test_8u::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG508 [246] phi (byte) test_8u::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8u->test_8u::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG509 test_8u::@1
  b1:
  //SEG510 [247] (byte) test_8u::dividend#0 ← *((const byte[]) test_8u::dividends#0 + (byte) test_8u::i#10) [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG511 [248] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
  //SEG512 [249] (byte) div8u::dividend#1 ← (byte) test_8u::dividend#0 [ print_line_cursor#41 print_char_cursor#135 div8u::dividend#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 div8u::dividend#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) -- vbuaa=vbuz1 
    lda dividend
  //SEG513 [250] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0 [ print_line_cursor#41 print_char_cursor#135 div8u::dividend#1 div8u::divisor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 div8u::dividend#1 div8u::divisor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) -- vbuxx=vbuz1 
    ldx divisor
  //SEG514 [251] call div8u param-assignment [ print_line_cursor#41 print_char_cursor#135 div8u::return#0 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 div8u::return#0 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] )
  //SEG515 [192] phi from test_8u::@1 to div8u [phi:test_8u::@1->div8u]
  div8u_from_b1:
  //SEG516 [192] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#1 [phi:test_8u::@1->div8u#0] -- register_copy 
  //SEG517 [192] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#1 [phi:test_8u::@1->div8u#1] -- register_copy 
    jsr div8u
  //SEG518 [252] (byte) div8u::return#3 ← (byte) div8u::return#0 [ print_line_cursor#41 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 ] )
    // (byte) div8u::return#3 = (byte) div8u::return#0  // register copy reg byte a
    jmp b3
  //SEG519 test_8u::@3
  b3:
  //SEG520 [253] (byte) test_8u::res#0 ← (byte) div8u::return#3 [ print_line_cursor#41 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 ] ) -- vbuz1=vbuaa 
    sta res
  //SEG521 [254] (byte) print_byte::b#3 ← (byte) test_8u::dividend#0 [ print_line_cursor#41 print_byte::b#3 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_byte::b#3 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
    // (byte) print_byte::b#3 = (byte) test_8u::dividend#0  // register copy zp ZP_BYTE:7
  //SEG522 [255] call print_byte param-assignment [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
  //SEG523 [64] phi from test_8u::@3 to print_byte [phi:test_8u::@3->print_byte]
  print_byte_from_b3:
  //SEG524 [64] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#135 [phi:test_8u::@3->print_byte#0] -- register_copy 
  //SEG525 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#3 [phi:test_8u::@3->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG526 [256] phi from test_8u::@3 to test_8u::@4 [phi:test_8u::@3->test_8u::@4]
  b4_from_b3:
    jmp b4
  //SEG527 test_8u::@4
  b4:
  //SEG528 [257] call print_str param-assignment [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
  //SEG529 [76] phi from test_8u::@4 to print_str [phi:test_8u::@4->print_str]
  print_str_from_b4:
  //SEG530 [76] phi (byte*) print_str::str#15 = (const string) test_8u::str [phi:test_8u::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG531 test_8u::@5
  b5:
  //SEG532 [258] (byte) print_byte::b#4 ← (byte) test_8u::divisor#0 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#4 rem8u#17 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#4 rem8u#17 test_8u::i#10 test_8u::res#0 ] ) -- vbuz1=vbuz2 
    lda divisor
    sta print_byte.b
  //SEG533 [259] call print_byte param-assignment [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 test_8u::res#0 ] )
  //SEG534 [64] phi from test_8u::@5 to print_byte [phi:test_8u::@5->print_byte]
  print_byte_from_b5:
  //SEG535 [64] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#126 [phi:test_8u::@5->print_byte#0] -- register_copy 
  //SEG536 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#4 [phi:test_8u::@5->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG537 [260] phi from test_8u::@5 to test_8u::@6 [phi:test_8u::@5->test_8u::@6]
  b6_from_b5:
    jmp b6
  //SEG538 test_8u::@6
  b6:
  //SEG539 [261] call print_str param-assignment [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 test_8u::res#0 ] )
  //SEG540 [76] phi from test_8u::@6 to print_str [phi:test_8u::@6->print_str]
  print_str_from_b6:
  //SEG541 [76] phi (byte*) print_str::str#15 = (const string) test_8u::str1 [phi:test_8u::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG542 test_8u::@7
  b7:
  //SEG543 [262] (byte) print_byte::b#5 ← (byte) test_8u::res#0 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#5 rem8u#17 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#5 rem8u#17 test_8u::i#10 ] ) -- vbuz1=vbuz2 
    lda res
    sta print_byte.b
  //SEG544 [263] call print_byte param-assignment [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 ] )
  //SEG545 [64] phi from test_8u::@7 to print_byte [phi:test_8u::@7->print_byte]
  print_byte_from_b7:
  //SEG546 [64] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#126 [phi:test_8u::@7->print_byte#0] -- register_copy 
  //SEG547 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#5 [phi:test_8u::@7->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG548 [264] phi from test_8u::@7 to test_8u::@8 [phi:test_8u::@7->test_8u::@8]
  b8_from_b7:
    jmp b8
  //SEG549 test_8u::@8
  b8:
  //SEG550 [265] call print_str param-assignment [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 ] )
  //SEG551 [76] phi from test_8u::@8 to print_str [phi:test_8u::@8->print_str]
  print_str_from_b8:
  //SEG552 [76] phi (byte*) print_str::str#15 = (const string) test_8u::str2 [phi:test_8u::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG553 test_8u::@9
  b9:
  //SEG554 [266] (byte) print_byte::b#6 ← (byte) rem8u#17 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#6 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#6 test_8u::i#10 ] ) -- vbuz1=vbuxx 
    stx print_byte.b
  //SEG555 [267] call print_byte param-assignment [ print_line_cursor#41 print_char_cursor#17 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#17 test_8u::i#10 ] )
  //SEG556 [64] phi from test_8u::@9 to print_byte [phi:test_8u::@9->print_byte]
  print_byte_from_b9:
  //SEG557 [64] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#126 [phi:test_8u::@9->print_byte#0] -- register_copy 
  //SEG558 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#6 [phi:test_8u::@9->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG559 [268] phi from test_8u::@9 to test_8u::@10 [phi:test_8u::@9->test_8u::@10]
  b10_from_b9:
    jmp b10
  //SEG560 test_8u::@10
  b10:
  //SEG561 [269] call print_ln param-assignment [ print_line_cursor#1 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#1 test_8u::i#10 ] )
  //SEG562 [44] phi from test_8u::@10 to print_ln [phi:test_8u::@10->print_ln]
  print_ln_from_b10:
  //SEG563 [44] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#41 [phi:test_8u::@10->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b11
  //SEG564 test_8u::@11
  b11:
  //SEG565 [270] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10 [ print_line_cursor#1 test_8u::i#1 ] ( main:2::test_8u:7 [ print_line_cursor#1 test_8u::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG566 [271] if((byte) test_8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8u::@12 [ print_line_cursor#1 test_8u::i#1 ] ( main:2::test_8u:7 [ print_line_cursor#1 test_8u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #6
    bne b12
    jmp breturn
  //SEG567 test_8u::@return
  breturn:
  //SEG568 [272] return  [ print_line_cursor#1 ] ( main:2::test_8u:7 [ print_line_cursor#1 ] )
    rts
  //SEG569 test_8u::@12
  b12:
  //SEG570 [273] (byte*~) print_char_cursor#186 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 test_8u::i#1 print_char_cursor#186 ] ( main:2::test_8u:7 [ print_line_cursor#1 test_8u::i#1 print_char_cursor#186 ] ) -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG571 [246] phi from test_8u::@12 to test_8u::@1 [phi:test_8u::@12->test_8u::@1]
  b1_from_b12:
  //SEG572 [246] phi (byte*) print_line_cursor#41 = (byte*) print_line_cursor#1 [phi:test_8u::@12->test_8u::@1#0] -- register_copy 
  //SEG573 [246] phi (byte*) print_char_cursor#135 = (byte*~) print_char_cursor#186 [phi:test_8u::@12->test_8u::@1#1] -- register_copy 
  //SEG574 [246] phi (byte) test_8u::i#10 = (byte) test_8u::i#1 [phi:test_8u::@12->test_8u::@1#2] -- register_copy 
    jmp b1
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .byte $ff, $ff, $ff, $ff, $ff, $ff
    divisors: .byte 5, 7, $b, $d, $11, $13
}
//SEG575 print_cls
print_cls: {
    .label sc = 3
  //SEG576 [275] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG577 [275] phi (byte*) print_cls::sc#2 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG578 [275] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG579 [275] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG580 print_cls::@1
  b1:
  //SEG581 [276] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG582 [277] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG583 [278] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG584 print_cls::@return
  breturn:
  //SEG585 [279] return  [ ] ( main:2::print_cls:5 [ ] )
    rts
}
  print_hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b26
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b16
Removing instruction jmp b2
Removing instruction jmp b17
Removing instruction jmp b4
Removing instruction jmp b15
Removing instruction jmp b11
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b16
Removing instruction jmp b2
Removing instruction jmp b17
Removing instruction jmp b4
Removing instruction jmp b15
Removing instruction jmp b11
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy i
Removing instruction lda i
Removing instruction ldy #0
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction ldy i
Replacing instruction ldx divisor with TAX
Replacing instruction lda #0 with TXA
Replacing instruction ldy #0 with TAY
Removing instruction ldy i
Removing instruction lda i
Removing instruction ldy i
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b11 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_print_sword with b1
Replacing label b1_from_b2 with b1
Replacing label breturn_from_b18 with breturn
Replacing label b4_from_b3 with b4
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b3_from_b2 with b3
Replacing label b1_from_b3 with b1
Replacing label b1_from_b11 with b1
Replacing label b1_from_print_sbyte with b1
Replacing label breturn_from_b18 with breturn
Replacing label b4_from_b3 with b4
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b1_from_b3 with b1
Replacing label b1_from_b11 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction b26_from_bbegin:
Removing instruction main_from_b26:
Removing instruction bend_from_b26:
Removing instruction b1_from_main:
Removing instruction test_8u_from_b1:
Removing instruction b2_from_b1:
Removing instruction test_16u_from_b2:
Removing instruction b3_from_b2:
Removing instruction test_8s_from_b3:
Removing instruction b4_from_b3:
Removing instruction test_16s_from_b4:
Removing instruction b1_from_b11:
Removing instruction b4_from_b3:
Removing instruction print_str_from_b4:
Removing instruction b6_from_b5:
Removing instruction print_str_from_b6:
Removing instruction b8_from_b7:
Removing instruction print_str_from_b8:
Removing instruction b10_from_b9:
Removing instruction print_ln_from_b10:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Removing instruction b2_from_print_sword:
Removing instruction print_char_from_b2:
Removing instruction b1_from_print_sword:
Removing instruction b1_from_b4:
Removing instruction b1_from_print_str:
Removing instruction b1_from_b2:
Removing instruction b4_from_b17:
Removing instruction b4_from_b3:
Removing instruction breturn_from_b11:
Removing instruction breturn_from_b18:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b3_from_b2:
Removing instruction b3_from_b5:
Removing instruction b1_from_b11:
Removing instruction b4_from_b3:
Removing instruction print_str_from_b4:
Removing instruction b6_from_b5:
Removing instruction print_str_from_b6:
Removing instruction b8_from_b7:
Removing instruction print_str_from_b8:
Removing instruction b10_from_b9:
Removing instruction print_ln_from_b10:
Removing instruction b2_from_print_sbyte:
Removing instruction print_char_from_b2:
Removing instruction b1_from_print_sbyte:
Removing instruction b1_from_b4:
Removing instruction b4_from_b17:
Removing instruction b4_from_b3:
Removing instruction breturn_from_b11:
Removing instruction breturn_from_b18:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b3_from_b2:
Removing instruction b3_from_b5:
Removing instruction b1_from_b11:
Removing instruction b4_from_b3:
Removing instruction print_str_from_b4:
Removing instruction b6_from_b5:
Removing instruction print_str_from_b6:
Removing instruction b8_from_b7:
Removing instruction print_str_from_b8:
Removing instruction b10_from_b9:
Removing instruction print_ln_from_b10:
Removing instruction b4_from_b3:
Removing instruction print_str_from_b4:
Removing instruction b6_from_b5:
Removing instruction print_str_from_b6:
Removing instruction b8_from_b7:
Removing instruction print_str_from_b8:
Removing instruction b10_from_b9:
Removing instruction print_ln_from_b10:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b26:
Removing instruction bend:
Removing instruction print_cls_from_main:
Removing instruction b1:
Removing instruction b2:
Removing instruction b3:
Removing instruction b4:
Removing instruction breturn:
Removing instruction b1_from_test_16s:
Removing instruction b3:
Removing instruction print_sword_from_b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction print_sword_from_b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction print_sword_from_b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction print_sword_from_b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b2:
Removing instruction b4:
Removing instruction print_word_from_b1:
Removing instruction breturn:
Removing instruction print_byte_from_print_word:
Removing instruction b1:
Removing instruction print_byte_from_b1:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b16:
Removing instruction b2_from_b16:
Removing instruction b17:
Removing instruction div16u_from_b4:
Removing instruction b15:
Removing instruction b11:
Removing instruction b2_from_b1:
Removing instruction divr16u_from_div16u:
Removing instruction b2:
Removing instruction breturn:
Removing instruction b1_from_divr16u:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction breturn:
Removing instruction b1_from_test_8s:
Removing instruction b3:
Removing instruction print_sbyte_from_b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction print_sbyte_from_b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction print_sbyte_from_b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction print_sbyte_from_b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction breturn:
Removing instruction b2:
Removing instruction b4:
Removing instruction print_byte_from_b1:
Removing instruction breturn:
Removing instruction b16:
Removing instruction b2_from_b16:
Removing instruction b17:
Removing instruction div8u_from_b4:
Removing instruction b15:
Removing instruction b11:
Removing instruction b2_from_b1:
Removing instruction divr8u_from_div8u:
Removing instruction b2:
Removing instruction breturn:
Removing instruction b1_from_divr8u:
Removing instruction b4:
Removing instruction b5:
Removing instruction b6:
Removing instruction breturn:
Removing instruction b1_from_test_16u:
Removing instruction div16u_from_b1:
Removing instruction b3:
Removing instruction print_word_from_b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction print_word_from_b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction print_word_from_b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction print_word_from_b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction breturn:
Removing instruction b1_from_test_8u:
Removing instruction div8u_from_b1:
Removing instruction b3:
Removing instruction print_byte_from_b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction print_byte_from_b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction print_byte_from_b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction print_byte_from_b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction breturn:
Removing instruction b1_from_b12:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to breturn in beq b18
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b18:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp breturn
Succesful ASM optimization Pass5UnreachableCodeElimination
Fixing long branch [83] bne b1 to beq

FINAL SYMBOL TABLE
(label) @26
(label) @begin
(label) @end
(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
(signed word~) div16s::$2 $2 zp ZP_WORD:8 2.0
(signed word~) div16s::$6 $6 zp ZP_WORD:10 1.0
(label) div16s::@1
(label) div16s::@11
(label) div16s::@15
(label) div16s::@16
(label) div16s::@17
(label) div16s::@18
(label) div16s::@2
(label) div16s::@3
(label) div16s::@4
(label) div16s::@return
(signed word) div16s::dividend
(signed word) div16s::dividend#0 dividend zp ZP_WORD:8 5.0
(word) div16s::dividendu
(word) div16s::dividendu#3 dividendu zp ZP_WORD:8 0.8571428571428571
(word~) div16s::dividendu#7 dividendu zp ZP_WORD:8 4.0
(word~) div16s::dividendu#8 dividendu zp ZP_WORD:8 4.0
(signed word) div16s::divisor
(signed word) div16s::divisor#0 divisor zp ZP_WORD:10 2.142857142857143
(word) div16s::divisoru
(word) div16s::divisoru#3 divisoru zp ZP_WORD:10 3.0
(word~) div16s::divisoru#4 divisoru zp ZP_WORD:10 4.0
(word~) div16s::divisoru#5 divisoru zp ZP_WORD:10 4.0
(byte) div16s::neg
(byte) div16s::neg#2 reg byte y 2.0
(byte) div16s::neg#3 reg byte y 1.0
(byte) div16s::neg#4 reg byte y 1.0
(word) div16s::resultu
(word) div16s::resultu#0 resultu zp ZP_WORD:12 0.6666666666666666
(signed word) div16s::return
(signed word) div16s::return#1 return zp ZP_WORD:12 4.0
(signed word) div16s::return#2 return zp ZP_WORD:12 5.0
(signed word) div16s::return#3 return zp ZP_WORD:12 22.0
(signed word~) div16s::return#7 return zp ZP_WORD:12 2.0
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(label) div16u::@2
(label) div16u::@return
(word) div16u::dividend
(word) div16u::dividend#0 dividend zp ZP_WORD:8 2.0
(word) div16u::dividend#1 dividend zp ZP_WORD:8 11.0
(word) div16u::dividend#2 dividend zp ZP_WORD:8 15.0
(word) div16u::divisor
(word) div16u::divisor#0 divisor zp ZP_WORD:10 4.0
(word) div16u::divisor#1 divisor zp ZP_WORD:10 22.0
(word) div16u::divisor#2 divisor zp ZP_WORD:10 7.5
(word) div16u::return
(word) div16u::return#0 return zp ZP_WORD:12 3.75
(word) div16u::return#2 return zp ZP_WORD:12 4.0
(word) div16u::return#3 return zp ZP_WORD:12 22.0
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(signed byte~) div8s::$2 reg byte a 2.0
(signed byte~) div8s::$6 reg byte x 1.0
(label) div8s::@1
(label) div8s::@11
(label) div8s::@15
(label) div8s::@16
(label) div8s::@17
(label) div8s::@18
(label) div8s::@2
(label) div8s::@3
(label) div8s::@4
(label) div8s::@return
(signed byte) div8s::dividend
(signed byte) div8s::dividend#0 reg byte y 5.0
(byte) div8s::dividendu
(byte) div8s::dividendu#3 reg byte y 0.8571428571428571
(byte~) div8s::dividendu#7 reg byte y 4.0
(byte~) div8s::dividendu#8 reg byte y 4.0
(signed byte) div8s::divisor
(signed byte) div8s::divisor#0 reg byte x 2.142857142857143
(byte) div8s::divisoru
(byte) div8s::divisoru#3 reg byte x 3.0
(byte~) div8s::divisoru#4 reg byte x 4.0
(byte~) div8s::divisoru#5 reg byte x 4.0
(byte) div8s::neg
(byte) div8s::neg#2 neg zp ZP_BYTE:16 2.0
(byte) div8s::neg#3 neg zp ZP_BYTE:16 1.0
(byte) div8s::neg#4 neg zp ZP_BYTE:16 1.0
(byte) div8s::resultu
(byte) div8s::resultu#0 reg byte y 0.6666666666666666
(signed byte) div8s::return
(signed byte) div8s::return#1 reg byte a 4.0
(signed byte) div8s::return#2 reg byte a 5.0
(signed byte) div8s::return#3 reg byte a 22.0
(signed byte~) div8s::return#7 reg byte a 2.0
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(label) div8u::@2
(label) div8u::@return
(byte) div8u::dividend
(byte) div8u::dividend#0 reg byte a 2.0
(byte) div8u::dividend#1 reg byte a 11.0
(byte) div8u::dividend#2 reg byte a 15.0
(byte) div8u::divisor
(byte) div8u::divisor#0 reg byte x 4.0
(byte) div8u::divisor#1 reg byte x 22.0
(byte) div8u::divisor#2 reg byte x 7.5
(byte) div8u::return
(byte) div8u::return#0 reg byte a 3.75
(byte) div8u::return#2 reg byte a 4.0
(byte) div8u::return#3 reg byte a 22.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 202.0
(byte~) divr16u::$2 reg byte a 202.0
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp ZP_WORD:8 25.25
(word) divr16u::dividend#1 dividend zp ZP_WORD:8 1.3333333333333333
(word) divr16u::dividend#2 dividend zp ZP_WORD:8 43.57142857142858
(word) divr16u::divisor
(word) divr16u::divisor#0 divisor zp ZP_WORD:10 12.0
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 151.5
(byte) divr16u::i#2 reg byte x 15.538461538461538
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp ZP_WORD:12 151.5
(word) divr16u::quotient#2 quotient zp ZP_WORD:12 101.0
(word) divr16u::quotient#3 quotient zp ZP_WORD:12 25.25
(word) divr16u::rem
(word) divr16u::rem#0 rem zp ZP_WORD:14 75.75
(word) divr16u::rem#1 rem zp ZP_WORD:14 202.0
(word) divr16u::rem#10 rem zp ZP_WORD:14 101.66666666666667
(word) divr16u::rem#2 rem zp ZP_WORD:14 202.0
(word) divr16u::rem#4 rem zp ZP_WORD:14 202.0
(word) divr16u::rem#5 rem zp ZP_WORD:14 101.0
(word) divr16u::return
(word) divr16u::return#0 return zp ZP_WORD:12 50.83333333333333
(word) divr16u::return#2 return zp ZP_WORD:12 4.0
(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
(byte~) divr8u::$1 reg byte a 202.0
(label) divr8u::@1
(label) divr8u::@2
(label) divr8u::@3
(label) divr8u::@4
(label) divr8u::@5
(label) divr8u::@6
(label) divr8u::@return
(byte) divr8u::dividend
(byte) divr8u::dividend#0 dividend zp ZP_BYTE:17 1.3333333333333333
(byte) divr8u::dividend#1 dividend zp ZP_BYTE:17 25.25
(byte) divr8u::dividend#2 dividend zp ZP_BYTE:17 50.83333333333333
(byte) divr8u::divisor
(byte) divr8u::divisor#0 divisor zp ZP_BYTE:22 12.75
(byte) divr8u::i
(byte) divr8u::i#1 reg byte x 151.5
(byte) divr8u::i#2 reg byte x 16.833333333333332
(byte) divr8u::quotient
(byte) divr8u::quotient#1 quotient zp ZP_BYTE:18 151.5
(byte) divr8u::quotient#2 quotient zp ZP_BYTE:18 101.0
(byte) divr8u::quotient#3 quotient zp ZP_BYTE:18 28.857142857142858
(byte) divr8u::rem
(byte) divr8u::rem#1 reg byte y 101.0
(byte) divr8u::rem#10 reg byte y 101.66666666666667
(byte) divr8u::rem#2 reg byte y 202.0
(byte) divr8u::rem#3 reg byte y 202.0
(byte) divr8u::rem#4 reg byte y 202.0
(byte) divr8u::rem#5 reg byte y 101.0
(byte) divr8u::return
(byte) divr8u::return#0 reg byte a 4.0
(byte) divr8u::return#1 return zp ZP_BYTE:18 50.83333333333333
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#1 b zp ZP_BYTE:7 4.0
(byte) print_byte::b#2 b zp ZP_BYTE:7 4.0
(byte) print_byte::b#3 b zp ZP_BYTE:7 22.0
(byte) print_byte::b#4 b zp ZP_BYTE:7 22.0
(byte) print_byte::b#5 b zp ZP_BYTE:7 22.0
(byte) print_byte::b#6 b zp ZP_BYTE:7 22.0
(byte) print_byte::b#7 b zp ZP_BYTE:7 13.5
(byte~) print_byte::b#9 b zp ZP_BYTE:7 4.0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#2 reg byte a 4.0
(byte) print_char::ch#3 reg byte a 4.0
(byte) print_char::ch#4 reg byte a 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp ZP_WORD:8 101.0
(byte*) print_char_cursor#126 print_char_cursor zp ZP_WORD:8 15.607142857142856
(byte*) print_char_cursor#128 print_char_cursor zp ZP_WORD:8 3.0
(byte*) print_char_cursor#129 print_char_cursor zp ZP_WORD:8 15.999999999999998
(byte*) print_char_cursor#130 print_char_cursor zp ZP_WORD:8 3.0
(byte*) print_char_cursor#131 print_char_cursor zp ZP_WORD:8 15.999999999999998
(byte*) print_char_cursor#132 print_char_cursor zp ZP_WORD:8 24.0
(byte*) print_char_cursor#133 print_char_cursor zp ZP_WORD:8 17.333333333333332
(byte*) print_char_cursor#135 print_char_cursor zp ZP_WORD:8 2.4444444444444446
(byte*~) print_char_cursor#156 print_char_cursor zp ZP_WORD:8 22.0
(byte*~) print_char_cursor#163 print_char_cursor zp ZP_WORD:8 22.0
(byte*) print_char_cursor#17 print_char_cursor zp ZP_WORD:8 2.0178571428571432
(byte*~) print_char_cursor#180 print_char_cursor zp ZP_WORD:8 22.0
(byte*~) print_char_cursor#186 print_char_cursor zp ZP_WORD:8 22.0
(byte*) print_char_cursor#80 print_char_cursor zp ZP_WORD:8 6.0
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:3 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:3 16.5
(byte[]) print_hextab
(const string) print_hextab#0 print_hextab = (string) "0123456789abcdef"
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp ZP_WORD:3 3.9099999999999993
(byte*) print_line_cursor#20 print_line_cursor zp ZP_WORD:3 204.0
(byte*) print_line_cursor#39 print_line_cursor zp ZP_WORD:3 46.0
(byte*) print_line_cursor#41 print_line_cursor zp ZP_WORD:3 0.9565217391304348
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(label) print_sbyte::@1
(label) print_sbyte::@2
(label) print_sbyte::@4
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0 b zp ZP_BYTE:7 4.0
(signed byte) print_sbyte::b#1 b zp ZP_BYTE:7 11.0
(signed byte) print_sbyte::b#2 b zp ZP_BYTE:7 22.0
(signed byte) print_sbyte::b#3 b zp ZP_BYTE:7 22.0
(signed byte) print_sbyte::b#4 b zp ZP_BYTE:7 22.0
(signed byte) print_sbyte::b#5 b zp ZP_BYTE:7 12.5
(signed byte) print_sbyte::b#6 b zp ZP_BYTE:7 4.0
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp ZP_WORD:5 202.0
(byte*) print_str::str#13 str zp ZP_WORD:5 101.5
(byte*) print_str::str#15 str zp ZP_WORD:5 2.0
(void()) print_sword((signed word) print_sword::w)
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@4
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0 w zp ZP_WORD:5 4.0
(signed word) print_sword::w#1 w zp ZP_WORD:5 11.0
(signed word) print_sword::w#2 w zp ZP_WORD:5 22.0
(signed word) print_sword::w#3 w zp ZP_WORD:5 22.0
(signed word) print_sword::w#4 w zp ZP_WORD:5 22.0
(signed word) print_sword::w#5 w zp ZP_WORD:5 12.5
(signed word) print_sword::w#6 w zp ZP_WORD:5 4.0
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(word) print_word::w#1 w zp ZP_WORD:5 11.0
(word) print_word::w#2 w zp ZP_WORD:5 22.0
(word) print_word::w#3 w zp ZP_WORD:5 22.0
(word) print_word::w#4 w zp ZP_WORD:5 22.0
(word) print_word::w#5 w zp ZP_WORD:5 16.666666666666664
(word~) print_word::w#7 w zp ZP_WORD:5 4.0
(signed word) rem16s
(signed word) rem16s#2 rem16s zp ZP_WORD:14 2.0
(signed word) rem16s#3 rem16s zp ZP_WORD:14 0.8333333333333335
(signed word~) rem16s#32 rem16s zp ZP_WORD:14 4.0
(word) rem16u
(word) rem16u#1 rem16u zp ZP_WORD:14 0.48148148148148145
(signed byte) rem8s
(signed byte) rem8s#2 reg byte x 2.0
(signed byte) rem8s#3 reg byte x 0.8333333333333335
(signed byte~) rem8s#33 reg byte x 4.0
(byte) rem8u
(byte) rem8u#17 reg byte x 0.5
(void()) test_16s()
(label) test_16s::@1
(label) test_16s::@10
(label) test_16s::@11
(label) test_16s::@3
(label) test_16s::@4
(label) test_16s::@5
(label) test_16s::@6
(label) test_16s::@7
(label) test_16s::@8
(label) test_16s::@9
(label) test_16s::@return
(signed word) test_16s::dividend
(signed word) test_16s::dividend#0 dividend zp ZP_WORD:5 4.714285714285714
(signed word[]) test_16s::dividends
(const signed word[]) test_16s::dividends#0 dividends = { (word/signed word/dword/signed dword) 32767, (word/signed word/dword/signed dword) 32767, -(word/signed word/dword/signed dword) 32767, -(word/signed word/dword/signed dword) 32767, (word/signed word/dword/signed dword) 32767, -(word/signed word/dword/signed dword) 32767 }
(signed word) test_16s::divisor
(signed word) test_16s::divisor#0 divisor zp ZP_WORD:19 3.0
(signed word[]) test_16s::divisors
(const signed word[]) test_16s::divisors#0 divisors = { (byte/signed byte/word/signed word/dword/signed dword) 5, -(byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, -(byte/signed byte/word/signed word/dword/signed dword) 13, -(byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
(byte) test_16s::i
(byte) test_16s::i#1 i zp ZP_BYTE:2 16.5
(byte) test_16s::i#10 i zp ZP_BYTE:2 1.76
(signed word) test_16s::res
(signed word) test_16s::res#0 res zp ZP_WORD:12 2.2
(const string) test_16s::str str = (string) " / @"
(const string) test_16s::str1 str1 = (string) " = @"
(const string) test_16s::str2 str2 = (string) " @"
(void()) test_16u()
(label) test_16u::@1
(label) test_16u::@10
(label) test_16u::@11
(label) test_16u::@3
(label) test_16u::@4
(label) test_16u::@5
(label) test_16u::@6
(label) test_16u::@7
(label) test_16u::@8
(label) test_16u::@9
(label) test_16u::@return
(word) test_16u::dividend
(word) test_16u::dividend#0 dividend zp ZP_WORD:5 4.714285714285714
(word[]) test_16u::dividends
(const word[]) test_16u::dividends#0 dividends = { (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535 }
(word) test_16u::divisor
(word) test_16u::divisor#0 divisor zp ZP_WORD:10 3.0
(word[]) test_16u::divisors
(const word[]) test_16u::divisors#0 divisors = { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
(byte) test_16u::i
(byte) test_16u::i#1 i zp ZP_BYTE:2 16.5
(byte) test_16u::i#10 i zp ZP_BYTE:2 1.76
(word) test_16u::res
(word) test_16u::res#0 res zp ZP_WORD:12 2.2
(const string) test_16u::str str = (string) " / @"
(const string) test_16u::str1 str1 = (string) " = @"
(const string) test_16u::str2 str2 = (string) " @"
(void()) test_8s()
(label) test_8s::@1
(label) test_8s::@10
(label) test_8s::@11
(label) test_8s::@3
(label) test_8s::@4
(label) test_8s::@5
(label) test_8s::@6
(label) test_8s::@7
(label) test_8s::@8
(label) test_8s::@9
(label) test_8s::@return
(signed byte) test_8s::dividend
(signed byte) test_8s::dividend#0 dividend zp ZP_BYTE:7 4.714285714285714
(signed byte[]) test_8s::dividends
(const signed byte[]) test_8s::dividends#0 dividends = { (byte/signed byte/word/signed word/dword/signed dword) 127, -(byte/signed byte/word/signed word/dword/signed dword) 127, -(byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127 }
(signed byte) test_8s::divisor
(signed byte) test_8s::divisor#0 divisor zp ZP_BYTE:21 3.0
(signed byte[]) test_8s::divisors
(const signed byte[]) test_8s::divisors#0 divisors = { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, -(byte/signed byte/word/signed word/dword/signed dword) 11, -(byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
(byte) test_8s::i
(byte) test_8s::i#1 i zp ZP_BYTE:2 16.5
(byte) test_8s::i#10 i zp ZP_BYTE:2 1.76
(signed byte) test_8s::res
(signed byte) test_8s::res#0 res zp ZP_BYTE:16 2.2
(const string) test_8s::str str = (string) " / @"
(const string) test_8s::str1 str1 = (string) " = @"
(const string) test_8s::str2 str2 = (string) " @"
(void()) test_8u()
(label) test_8u::@1
(label) test_8u::@10
(label) test_8u::@11
(label) test_8u::@12
(label) test_8u::@3
(label) test_8u::@4
(label) test_8u::@5
(label) test_8u::@6
(label) test_8u::@7
(label) test_8u::@8
(label) test_8u::@9
(label) test_8u::@return
(byte) test_8u::dividend
(byte) test_8u::dividend#0 dividend zp ZP_BYTE:7 4.714285714285714
(byte[]) test_8u::dividends
(const byte[]) test_8u::dividends#0 dividends = { (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255 }
(byte) test_8u::divisor
(byte) test_8u::divisor#0 divisor zp ZP_BYTE:16 3.3000000000000003
(byte[]) test_8u::divisors
(const byte[]) test_8u::divisors#0 divisors = { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
(byte) test_8u::i
(byte) test_8u::i#1 i zp ZP_BYTE:2 11.0
(byte) test_8u::i#10 i zp ZP_BYTE:2 1.8333333333333333
(byte) test_8u::res
(byte) test_8u::res#0 res zp ZP_BYTE:17 2.4444444444444446
(const string) test_8u::str str = (string) " / @"
(const string) test_8u::str1 str1 = (string) " = @"
(const string) test_8u::str2 str2 = (string) " @"

zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 test_8s::i#10 test_8s::i#1 test_16u::i#10 test_16u::i#1 test_8u::i#10 test_8u::i#1 ]
zp ZP_WORD:3 [ print_line_cursor#20 print_line_cursor#39 print_line_cursor#1 print_line_cursor#41 print_cls::sc#2 print_cls::sc#1 ]
zp ZP_WORD:5 [ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 test_16s::dividend#0 test_16u::dividend#0 print_str::str#13 print_str::str#15 print_str::str#0 ]
zp ZP_BYTE:7 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 test_8u::dividend#0 test_8s::dividend#0 ]
reg byte a [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
zp ZP_WORD:8 [ print_char_cursor#80 print_char_cursor#133 print_char_cursor#130 print_char_cursor#132 print_char_cursor#128 print_char_cursor#129 print_char_cursor#156 print_char_cursor#126 print_char_cursor#17 print_char_cursor#163 print_char_cursor#135 print_char_cursor#131 print_char_cursor#1 print_char_cursor#180 print_char_cursor#186 div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 div16s::dividend#0 div16s::$2 divr16u::dividend#2 divr16u::dividend#1 divr16u::dividend#0 ]
zp ZP_WORD:10 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 div16s::divisor#0 div16s::$6 divr16u::divisor#0 test_16u::divisor#0 ]
reg byte y [ div16s::neg#4 div16s::neg#2 div16s::neg#3 ]
zp ZP_WORD:12 [ div16s::return#2 div16s::return#1 div16s::return#7 div16s::resultu#0 div16s::return#3 test_16s::res#0 div16u::return#2 div16u::return#0 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 div16u::return#3 test_16u::res#0 ]
zp ZP_WORD:14 [ rem16s#3 rem16s#2 rem16s#32 rem16u#1 divr16u::rem#4 divr16u::rem#10 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
reg byte y [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
reg byte x [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ]
zp ZP_BYTE:16 [ div8s::neg#4 div8s::neg#2 div8s::neg#3 test_8s::res#0 test_8u::divisor#0 ]
reg byte a [ div8s::return#2 div8s::return#1 div8s::return#7 ]
reg byte x [ rem8s#3 rem8s#2 rem8s#33 ]
reg byte a [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
reg byte x [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ]
reg byte y [ divr8u::rem#4 divr8u::rem#10 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
zp ZP_BYTE:17 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 test_8u::res#0 ]
zp ZP_BYTE:18 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
reg byte x [ divr8u::i#2 divr8u::i#1 ]
zp ZP_WORD:19 [ test_16s::divisor#0 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
zp ZP_BYTE:21 [ test_8s::divisor#0 ]
reg byte y [ div8s::dividend#0 ]
reg byte x [ div8s::divisor#0 ]
reg byte a [ div8s::return#3 ]
reg byte a [ div8u::return#2 ]
reg byte y [ div8s::resultu#0 ]
reg byte x [ div8s::$6 ]
reg byte a [ div8s::$2 ]
zp ZP_BYTE:22 [ divr8u::divisor#0 ]
reg byte a [ divr8u::return#0 ]
reg byte a [ div8u::return#0 ]
reg byte a [ divr8u::$1 ]
reg byte x [ rem8u#17 ]
reg byte a [ div8u::return#3 ]


FINAL ASSEMBLER
Score: 33416

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label print_char_cursor = 8
  .label print_line_cursor = 3
  .label rem16u = $e
  .label rem16s = $e
//SEG2 @begin
//SEG3 [1] phi from @begin to @26 [phi:@begin->@26]
//SEG4 @26
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @26 to main [phi:@26->main]
  jsr main
//SEG7 [3] phi from @26 to @end [phi:@26->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  //SEG11 [274] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG13 main::@1
  //SEG14 [7] call test_8u param-assignment [ print_line_cursor#1 ] ( main:2 [ print_line_cursor#1 ] )
  //SEG15 [245] phi from main::@1 to test_8u [phi:main::@1->test_8u]
    jsr test_8u
  //SEG16 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG17 main::@2
  //SEG18 [9] call test_16u param-assignment [ print_line_cursor#1 ] ( main:2 [ print_line_cursor#1 ] )
  //SEG19 [216] phi from main::@2 to test_16u [phi:main::@2->test_16u]
    jsr test_16u
  //SEG20 [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  //SEG21 main::@3
  //SEG22 [11] call test_8s param-assignment [ print_line_cursor#1 ] ( main:2 [ print_line_cursor#1 ] )
  //SEG23 [131] phi from main::@3 to test_8s [phi:main::@3->test_8s]
    jsr test_8s
  //SEG24 [12] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  //SEG25 main::@4
  //SEG26 [13] call test_16s param-assignment [ ] ( main:2 [ ] )
  //SEG27 [15] phi from main::@4 to test_16s [phi:main::@4->test_16s]
    jsr test_16s
  //SEG28 main::@return
  //SEG29 [14] return  [ ] ( main:2 [ ] )
    rts
}
//SEG30 test_16s
test_16s: {
    .label dividend = 5
    .label divisor = $13
    .label res = $c
    .label i = 2
  //SEG31 [16] phi from test_16s to test_16s::@1 [phi:test_16s->test_16s::@1]
  //SEG32 [16] phi (byte) test_16s::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16s->test_16s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG33 [16] phi from test_16s::@11 to test_16s::@1 [phi:test_16s::@11->test_16s::@1]
  //SEG34 [16] phi (byte) test_16s::i#10 = (byte) test_16s::i#1 [phi:test_16s::@11->test_16s::@1#0] -- register_copy 
  //SEG35 test_16s::@1
  b1:
  //SEG36 [17] (signed word) test_16s::dividend#0 ← *((const signed word[]) test_16s::dividends#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 print_line_cursor#1 ] ) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
    lda dividends+1,y
    sta dividend+1
  //SEG37 [18] (signed word) test_16s::divisor#0 ← *((const signed word[]) test_16s::divisors#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 ] ) -- vwsz1=pwsc1_derefidx_vbuz2 
    lda divisors,y
    sta divisor
    lda divisors+1,y
    sta divisor+1
  //SEG38 [19] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 print_line_cursor#1 ] ) -- vwsz1=vwsz2 
    lda dividend
    sta div16s.dividend
    lda dividend+1
    sta div16s.dividend+1
  //SEG39 [20] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 print_line_cursor#1 ] ) -- vwsz1=vwsz2 
    lda divisor
    sta div16s.divisor
    lda divisor+1
    sta div16s.divisor+1
  //SEG40 [21] call div16s param-assignment [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 print_line_cursor#1 rem16s#3 ] )
    jsr div16s
  //SEG41 [22] (signed word) div16s::return#3 ← (signed word) div16s::return#2 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 print_line_cursor#1 rem16s#3 ] )
    // (signed word) div16s::return#3 = (signed word) div16s::return#2  // register copy zp ZP_WORD:12
  //SEG42 test_16s::@3
  //SEG43 [23] (signed word) test_16s::res#0 ← (signed word) div16s::return#3 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 ] )
    // (signed word) test_16s::res#0 = (signed word) div16s::return#3  // register copy zp ZP_WORD:12
  //SEG44 [24] (signed word) print_sword::w#1 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_line_cursor#1 rem16s#3 ] )
    // (signed word) print_sword::w#1 = (signed word) test_16s::dividend#0  // register copy zp ZP_WORD:5
  //SEG45 [25] (byte*~) print_char_cursor#156 ← (byte*) print_line_cursor#1 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_char_cursor#156 print_line_cursor#1 rem16s#3 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 print_char_cursor#156 print_line_cursor#1 rem16s#3 ] ) -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG46 [26] call print_sword param-assignment [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] )
  //SEG47 [49] phi from test_16s::@3 to print_sword [phi:test_16s::@3->print_sword]
  //SEG48 [49] phi (byte*) print_char_cursor#129 = (byte*~) print_char_cursor#156 [phi:test_16s::@3->print_sword#0] -- register_copy 
  //SEG49 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#1 [phi:test_16s::@3->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG50 [27] phi from test_16s::@3 to test_16s::@4 [phi:test_16s::@3->test_16s::@4]
  //SEG51 test_16s::@4
  //SEG52 [28] call print_str param-assignment [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] )
  //SEG53 [76] phi from test_16s::@4 to print_str [phi:test_16s::@4->print_str]
  //SEG54 [76] phi (byte*) print_str::str#15 = (const string) test_16s::str [phi:test_16s::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG55 test_16s::@5
  //SEG56 [29] (signed word) print_sword::w#2 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 print_sword::w#2 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 print_sword::w#2 rem16s#3 print_char_cursor#126 ] ) -- vwsz1=vwsz2 
    lda divisor
    sta print_sword.w
    lda divisor+1
    sta print_sword.w+1
  //SEG57 [30] call print_sword param-assignment [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] )
  //SEG58 [49] phi from test_16s::@5 to print_sword [phi:test_16s::@5->print_sword]
  //SEG59 [49] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#126 [phi:test_16s::@5->print_sword#0] -- register_copy 
  //SEG60 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#2 [phi:test_16s::@5->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG61 [31] phi from test_16s::@5 to test_16s::@6 [phi:test_16s::@5->test_16s::@6]
  //SEG62 test_16s::@6
  //SEG63 [32] call print_str param-assignment [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] )
  //SEG64 [76] phi from test_16s::@6 to print_str [phi:test_16s::@6->print_str]
  //SEG65 [76] phi (byte*) print_str::str#15 = (const string) test_16s::str1 [phi:test_16s::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG66 test_16s::@7
  //SEG67 [33] (signed word) print_sword::w#3 ← (signed word) test_16s::res#0 [ test_16s::i#10 print_line_cursor#1 print_sword::w#3 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_sword::w#3 rem16s#3 print_char_cursor#126 ] ) -- vwsz1=vwsz2 
    lda res
    sta print_sword.w
    lda res+1
    sta print_sword.w+1
  //SEG68 [34] call print_sword param-assignment [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] )
  //SEG69 [49] phi from test_16s::@7 to print_sword [phi:test_16s::@7->print_sword]
  //SEG70 [49] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#126 [phi:test_16s::@7->print_sword#0] -- register_copy 
  //SEG71 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#3 [phi:test_16s::@7->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG72 [35] phi from test_16s::@7 to test_16s::@8 [phi:test_16s::@7->test_16s::@8]
  //SEG73 test_16s::@8
  //SEG74 [36] call print_str param-assignment [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] )
  //SEG75 [76] phi from test_16s::@8 to print_str [phi:test_16s::@8->print_str]
  //SEG76 [76] phi (byte*) print_str::str#15 = (const string) test_16s::str2 [phi:test_16s::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG77 test_16s::@9
  //SEG78 [37] (signed word) print_sword::w#4 ← (signed word) rem16s#3 [ test_16s::i#10 print_line_cursor#1 print_sword::w#4 print_char_cursor#126 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_sword::w#4 print_char_cursor#126 ] ) -- vwsz1=vwsz2 
    lda rem16s
    sta print_sword.w
    lda rem16s+1
    sta print_sword.w+1
  //SEG79 [38] call print_sword param-assignment [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] )
  //SEG80 [49] phi from test_16s::@9 to print_sword [phi:test_16s::@9->print_sword]
  //SEG81 [49] phi (byte*) print_char_cursor#129 = (byte*) print_char_cursor#126 [phi:test_16s::@9->print_sword#0] -- register_copy 
  //SEG82 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#4 [phi:test_16s::@9->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG83 [39] phi from test_16s::@9 to test_16s::@10 [phi:test_16s::@9->test_16s::@10]
  //SEG84 test_16s::@10
  //SEG85 [40] call print_ln param-assignment [ test_16s::i#10 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#10 print_line_cursor#1 ] )
  //SEG86 [44] phi from test_16s::@10 to print_ln [phi:test_16s::@10->print_ln]
  //SEG87 [44] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#1 [phi:test_16s::@10->print_ln#0] -- register_copy 
    jsr print_ln
  //SEG88 test_16s::@11
  //SEG89 [41] (byte) test_16s::i#1 ← (byte) test_16s::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ test_16s::i#1 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#1 print_line_cursor#1 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda #2
    clc
    adc i
    sta i
  //SEG90 [42] if((byte) test_16s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16s::@1 [ test_16s::i#1 print_line_cursor#1 ] ( main:2::test_16s:13 [ test_16s::i#1 print_line_cursor#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    cmp #$c
    beq !b1+
    jmp b1
  !b1:
  //SEG91 test_16s::@return
  //SEG92 [43] return  [ ] ( main:2::test_16s:13 [ ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .word $7fff, $7fff, -$7fff, -$7fff, $7fff, -$7fff
    divisors: .word 5, -7, $b, -$d, -$11, $13
}
//SEG93 print_ln
print_ln: {
  //SEG94 [45] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  //SEG95 [45] phi (byte*) print_line_cursor#20 = (byte*) print_line_cursor#39 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
  //SEG96 print_ln::@1
  b1:
  //SEG97 [46] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#20 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#1 print_char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8s:11::print_ln:156 [ test_8s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_ln:241 [ test_16u::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8u:7::print_ln:269 [ test_8u::i#10 print_line_cursor#1 print_char_cursor#17 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda print_line_cursor
    clc
    adc #$28
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG98 [47] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#17) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8s:11::print_ln:156 [ test_8s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_ln:241 [ test_16u::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_8u:7::print_ln:269 [ test_8u::i#10 print_line_cursor#1 print_char_cursor#17 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1
  !:
  //SEG99 print_ln::@return
  //SEG100 [48] return  [ print_line_cursor#1 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 print_line_cursor#1 ] main:2::test_8s:11::print_ln:156 [ test_8s::i#10 print_line_cursor#1 ] main:2::test_16u:9::print_ln:241 [ test_16u::i#10 print_line_cursor#1 ] main:2::test_8u:7::print_ln:269 [ test_8u::i#10 print_line_cursor#1 ] )
    rts
}
//SEG101 print_sword
print_sword: {
    .label w = 5
  //SEG102 [50] if((signed word) print_sword::w#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 [ print_sword::w#5 print_char_cursor#129 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#129 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#129 ] ) -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1
  //SEG103 [51] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  //SEG104 print_sword::@2
  //SEG105 [52] call print_char param-assignment [ print_char_cursor#17 print_sword::w#5 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_sword::w#5 ] )
  //SEG106 [72] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  //SEG107 [72] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#129 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG108 [72] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
  //SEG109 print_sword::@4
  //SEG110 [53] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#5 [ print_char_cursor#17 print_sword::w#0 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_sword::w#0 ] ) -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG111 [54] phi from print_sword print_sword::@4 to print_sword::@1 [phi:print_sword/print_sword::@4->print_sword::@1]
  //SEG112 [54] phi (byte*) print_char_cursor#128 = (byte*) print_char_cursor#129 [phi:print_sword/print_sword::@4->print_sword::@1#0] -- register_copy 
  //SEG113 [54] phi (signed word) print_sword::w#6 = (signed word) print_sword::w#5 [phi:print_sword/print_sword::@4->print_sword::@1#1] -- register_copy 
  //SEG114 print_sword::@1
  b1:
  //SEG115 [55] (word~) print_word::w#7 ← (word)(signed word) print_sword::w#6 [ print_char_cursor#128 print_word::w#7 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#128 print_word::w#7 ] )
    // (word~) print_word::w#7 = (word)(signed word) print_sword::w#6  // register copy zp ZP_WORD:5
  //SEG116 [56] call print_word param-assignment [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] )
  //SEG117 [58] phi from print_sword::@1 to print_word [phi:print_sword::@1->print_word]
  //SEG118 [58] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#128 [phi:print_sword::@1->print_word#0] -- register_copy 
  //SEG119 [58] phi (word) print_word::w#5 = (word~) print_word::w#7 [phi:print_sword::@1->print_word#1] -- register_copy 
    jsr print_word
  //SEG120 print_sword::@return
  //SEG121 [57] return  [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] )
    rts
}
//SEG122 print_word
print_word: {
    .label w = 5
  //SEG123 [59] (byte) print_byte::b#1 ← > (word) print_word::w#5 [ print_word::w#5 print_char_cursor#132 print_byte::b#1 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#132 print_byte::b#1 ] ) -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG124 [60] call print_byte param-assignment [ print_char_cursor#17 print_word::w#5 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_word::w#5 ] )
  //SEG125 [64] phi from print_word to print_byte [phi:print_word->print_byte]
  //SEG126 [64] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#132 [phi:print_word->print_byte#0] -- register_copy 
  //SEG127 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#1 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG128 print_word::@1
  //SEG129 [61] (byte) print_byte::b#2 ← < (word) print_word::w#5 [ print_char_cursor#17 print_byte::b#2 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_byte::b#2 ] ) -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG130 [62] call print_byte param-assignment [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] )
  //SEG131 [64] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  //SEG132 [64] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#17 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG133 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#2 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG134 print_word::@return
  //SEG135 [63] return  [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] )
    rts
}
//SEG136 print_byte
print_byte: {
    .label b = 7
  //SEG137 [65] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#7 print_char_cursor#133 print_byte::$0 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#133 print_byte::$0 ] ) -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG138 [66] (byte) print_char::ch#2 ← *((const string) print_hextab#0 + (byte~) print_byte::$0) [ print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#133 print_char::ch#2 ] ) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG139 [67] call print_char param-assignment [ print_char_cursor#17 print_byte::b#7 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 print_byte::b#7 ] )
  //SEG140 [72] phi from print_byte to print_char [phi:print_byte->print_char]
  //SEG141 [72] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#133 [phi:print_byte->print_char#0] -- register_copy 
  //SEG142 [72] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
  //SEG143 print_byte::@1
  //SEG144 [68] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ print_char_cursor#17 print_byte::$2 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 print_byte::$2 ] ) -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG145 [69] (byte) print_char::ch#3 ← *((const string) print_hextab#0 + (byte~) print_byte::$2) [ print_char_cursor#17 print_char::ch#3 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 print_char::ch#3 ] ) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG146 [70] call print_char param-assignment [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 ] )
  //SEG147 [72] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  //SEG148 [72] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#17 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG149 [72] phi (byte) print_char::ch#4 = (byte) print_char::ch#3 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
  //SEG150 print_byte::@return
  //SEG151 [71] return  [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 ] )
    rts
}
//SEG152 print_char
print_char: {
  //SEG153 [73] *((byte*) print_char_cursor#80) ← (byte) print_char::ch#4 [ print_char_cursor#80 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:255::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:259::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:263::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_8u:7::print_byte:267::print_char:67 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#80 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#80 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#80 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#80 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#80 ] main:2::test_8u:7::print_byte:255::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#80 ] main:2::test_8u:7::print_byte:259::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#80 ] main:2::test_8u:7::print_byte:263::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#80 ] main:2::test_8u:7::print_byte:267::print_char:70 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:142::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:146::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:150::print_char:163 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char_cursor#80 ] main:2::test_8s:11::print_sbyte:154::print_char:163 [ print_line_cursor#1 test_8s::i#10 print_sbyte::b#5 print_char_cursor#80 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG154 [74] (byte*) print_char_cursor#17 ← ++ (byte*) print_char_cursor#80 [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267::print_char:67 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267::print_char:70 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_char:163 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_char:163 [ print_line_cursor#1 test_8s::i#10 print_sbyte::b#5 print_char_cursor#17 ] ) -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG155 print_char::@return
  //SEG156 [75] return  [ print_char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 print_line_cursor#1 print_sword::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 print_line_cursor#1 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:67 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:67 [ print_line_cursor#1 test_16u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#7 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:67 [ print_line_cursor#1 test_8s::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263::print_char:67 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267::print_char:67 [ print_line_cursor#41 test_8u::i#10 print_byte::b#7 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:60::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:60::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_word::w#5 print_char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 print_line_cursor#1 print_char_cursor#17 ] main:2::test_16u:9::print_word:227::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:231::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#17 ] main:2::test_16u:9::print_word:235::print_byte:62::print_char:70 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_16u:9::print_word:239::print_byte:62::print_char:70 [ print_line_cursor#1 test_16u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_byte:167::print_char:70 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:255::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:259::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#17 ] main:2::test_8u:7::print_byte:263::print_char:70 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#17 ] main:2::test_8u:7::print_byte:267::print_char:70 [ print_line_cursor#41 test_8u::i#10 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:142::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146::print_char:163 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150::print_char:163 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_sbyte::b#5 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154::print_char:163 [ print_line_cursor#1 test_8s::i#10 print_sbyte::b#5 print_char_cursor#17 ] )
    rts
}
//SEG157 print_str
print_str: {
    .label str = 5
  //SEG158 [77] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  //SEG159 [77] phi (byte*) print_char_cursor#126 = (byte*) print_char_cursor#17 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG160 [77] phi (byte*) print_str::str#13 = (byte*) print_str::str#15 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
  //SEG161 print_str::@1
  b1:
  //SEG162 [78] if(*((byte*) print_str::str#13)!=(byte) '@') goto print_str::@2 [ print_char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#126 print_str::str#13 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
  //SEG163 print_str::@return
  //SEG164 [79] return  [ print_char_cursor#126 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#126 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#126 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#126 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#126 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#126 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#126 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#126 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#126 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#126 ] )
    rts
  //SEG165 print_str::@2
  b2:
  //SEG166 [80] *((byte*) print_char_cursor#126) ← *((byte*) print_str::str#13) [ print_char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_char_cursor#126 print_str::str#13 ] ) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (print_char_cursor),y
  //SEG167 [81] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#126 [ print_str::str#13 print_char_cursor#1 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_str::str#13 print_char_cursor#1 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_str::str#13 print_char_cursor#1 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_str::str#13 print_char_cursor#1 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_str::str#13 print_char_cursor#1 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_str::str#13 print_char_cursor#1 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_str::str#13 print_char_cursor#1 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_str::str#13 print_char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG168 [82] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#13 [ print_str::str#0 print_char_cursor#1 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 test_16s::divisor#0 test_16s::res#0 print_line_cursor#1 rem16s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 test_16s::res#0 print_line_cursor#1 rem16s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 print_line_cursor#1 rem16s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_8s:11::print_str:144 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_8s:11::print_str:148 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_8s:11::print_str:152 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_str::str#0 print_char_cursor#1 ] main:2::test_16u:9::print_str:229 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_str::str#0 print_char_cursor#1 ] main:2::test_16u:9::print_str:233 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::res#0 print_str::str#0 print_char_cursor#1 ] main:2::test_16u:9::print_str:237 [ print_line_cursor#1 rem16u#1 test_16u::i#10 print_str::str#0 print_char_cursor#1 ] main:2::test_8u:7::print_str:257 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_str::str#0 print_char_cursor#1 ] main:2::test_8u:7::print_str:261 [ print_line_cursor#41 rem8u#17 test_8u::i#10 test_8u::res#0 print_str::str#0 print_char_cursor#1 ] main:2::test_8u:7::print_str:265 [ print_line_cursor#41 rem8u#17 test_8u::i#10 print_str::str#0 print_char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1
}
//SEG169 div16s
div16s: {
    .label _2 = 8
    .label _6 = $a
    .label resultu = $c
    .label return = $c
    .label dividend = 8
    .label divisor = $a
    .label dividendu = 8
    .label divisoru = $a
  //SEG170 [83] if((signed word) div16s::dividend#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@1 [ div16s::dividend#0 div16s::divisor#0 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::dividend#0 div16s::divisor#0 ] ) -- vwsz1_lt_0_then_la1 
    lda dividend+1
    bmi b1
  //SEG171 div16s::@16
  //SEG172 [84] (word~) div16s::dividendu#8 ← (word)(signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::dividendu#8 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::dividendu#8 ] )
    // (word~) div16s::dividendu#8 = (word)(signed word) div16s::dividend#0  // register copy zp ZP_WORD:8
  //SEG173 [85] phi from div16s::@16 to div16s::@2 [phi:div16s::@16->div16s::@2]
  //SEG174 [85] phi (word) div16s::dividendu#3 = (word~) div16s::dividendu#8 [phi:div16s::@16->div16s::@2#0] -- register_copy 
  //SEG175 [85] phi (byte) div16s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div16s::@16->div16s::@2#1] -- vbuyy=vbuc1 
    ldy #0
  //SEG176 div16s::@2
  b2:
  //SEG177 [86] if((signed word) div16s::divisor#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@3 [ div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 ] ) -- vwsz1_lt_0_then_la1 
    lda divisor+1
    bmi b3
  //SEG178 div16s::@17
  //SEG179 [87] (word~) div16s::divisoru#5 ← (word)(signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::divisoru#5 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::divisoru#5 ] )
    // (word~) div16s::divisoru#5 = (word)(signed word) div16s::divisor#0  // register copy zp ZP_WORD:10
  //SEG180 [88] phi from div16s::@17 div16s::@3 to div16s::@4 [phi:div16s::@17/div16s::@3->div16s::@4]
  //SEG181 [88] phi (byte) div16s::neg#4 = (byte) div16s::neg#3 [phi:div16s::@17/div16s::@3->div16s::@4#0] -- register_copy 
  //SEG182 [88] phi (word) div16s::divisoru#3 = (word~) div16s::divisoru#5 [phi:div16s::@17/div16s::@3->div16s::@4#1] -- register_copy 
  //SEG183 div16s::@4
  b4:
  //SEG184 [89] (word) div16u::dividend#0 ← (word) div16s::dividendu#3 [ div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 ] )
    // (word) div16u::dividend#0 = (word) div16s::dividendu#3  // register copy zp ZP_WORD:8
  //SEG185 [90] (word) div16u::divisor#0 ← (word) div16s::divisoru#3 [ div16s::neg#4 div16u::dividend#0 div16u::divisor#0 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::dividend#0 div16u::divisor#0 ] )
    // (word) div16u::divisor#0 = (word) div16s::divisoru#3  // register copy zp ZP_WORD:10
  //SEG186 [91] call div16u param-assignment [ div16s::neg#4 div16u::return#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::return#0 rem16u#1 ] )
  //SEG187 [106] phi from div16s::@4 to div16u [phi:div16s::@4->div16u]
  //SEG188 [106] phi (word) div16u::divisor#2 = (word) div16u::divisor#0 [phi:div16s::@4->div16u#0] -- register_copy 
  //SEG189 [106] phi (word) div16u::dividend#2 = (word) div16u::dividend#0 [phi:div16s::@4->div16u#1] -- register_copy 
    jsr div16u
  //SEG190 [92] (word) div16u::return#2 ← (word) div16u::return#0 [ div16s::neg#4 div16u::return#2 rem16u#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::return#2 rem16u#1 ] )
    // (word) div16u::return#2 = (word) div16u::return#0  // register copy zp ZP_WORD:12
  //SEG191 div16s::@15
  //SEG192 [93] (word) div16s::resultu#0 ← (word) div16u::return#2 [ div16s::neg#4 div16s::resultu#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16s::resultu#0 rem16u#1 ] )
    // (word) div16s::resultu#0 = (word) div16u::return#2  // register copy zp ZP_WORD:12
  //SEG193 [94] if((byte) div16s::neg#4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@18 [ div16s::resultu#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::resultu#0 rem16u#1 ] ) -- vbuyy_eq_0_then_la1 
    cpy #0
    beq breturn
  //SEG194 div16s::@11
  //SEG195 [95] (signed word) rem16s#2 ← - (signed word)(word) rem16u#1 [ div16s::resultu#0 rem16s#2 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::resultu#0 rem16s#2 ] ) -- vwsz1=_neg_vwsz1 
    sec
    lda rem16s
    eor #$ff
    adc #0
    sta rem16s
    lda rem16s+1
    eor #$ff
    adc #0
    sta rem16s+1
  //SEG196 [96] (signed word) div16s::return#1 ← - (signed word)(word) div16s::resultu#0 [ rem16s#2 div16s::return#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 rem16s#2 div16s::return#1 ] ) -- vwsz1=_neg_vwsz1 
    sec
    lda return
    eor #$ff
    adc #0
    sta return
    lda return+1
    eor #$ff
    adc #0
    sta return+1
  //SEG197 [97] phi from div16s::@11 div16s::@18 to div16s::@return [phi:div16s::@11/div16s::@18->div16s::@return]
  //SEG198 [97] phi (signed word) rem16s#3 = (signed word) rem16s#2 [phi:div16s::@11/div16s::@18->div16s::@return#0] -- register_copy 
  //SEG199 [97] phi (signed word) div16s::return#2 = (signed word) div16s::return#1 [phi:div16s::@11/div16s::@18->div16s::@return#1] -- register_copy 
  //SEG200 div16s::@return
  breturn:
  //SEG201 [98] return  [ div16s::return#2 rem16s#3 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::return#2 rem16s#3 ] )
    rts
  //SEG202 div16s::@18
  //SEG203 [99] (signed word~) div16s::return#7 ← (signed word)(word) div16s::resultu#0 [ rem16u#1 div16s::return#7 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 rem16u#1 div16s::return#7 ] )
    // (signed word~) div16s::return#7 = (signed word)(word) div16s::resultu#0  // register copy zp ZP_WORD:12
  //SEG204 [100] (signed word~) rem16s#32 ← (signed word)(word) rem16u#1 [ div16s::return#7 rem16s#32 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::return#7 rem16s#32 ] )
    // (signed word~) rem16s#32 = (signed word)(word) rem16u#1  // register copy zp ZP_WORD:14
  //SEG205 div16s::@3
  b3:
  //SEG206 [101] (signed word~) div16s::$6 ← - (signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::$6 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::$6 ] ) -- vwsz1=_neg_vwsz1 
    sec
    lda _6
    eor #$ff
    adc #0
    sta _6
    lda _6+1
    eor #$ff
    adc #0
    sta _6+1
  //SEG207 [102] (byte) div16s::neg#2 ← (byte) div16s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16s::dividendu#3 div16s::neg#2 div16s::$6 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::dividendu#3 div16s::neg#2 div16s::$6 ] ) -- vbuyy=vbuyy_bxor_vbuc1 
    tya
    eor #1
    tay
  //SEG208 [103] (word~) div16s::divisoru#4 ← (word)(signed word~) div16s::$6 [ div16s::dividendu#3 div16s::divisoru#4 div16s::neg#2 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::dividendu#3 div16s::divisoru#4 div16s::neg#2 ] )
    // (word~) div16s::divisoru#4 = (word)(signed word~) div16s::$6  // register copy zp ZP_WORD:10
    jmp b4
  //SEG209 div16s::@1
  b1:
  //SEG210 [104] (signed word~) div16s::$2 ← - (signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::$2 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::$2 ] ) -- vwsz1=_neg_vwsz1 
    sec
    lda _2
    eor #$ff
    adc #0
    sta _2
    lda _2+1
    eor #$ff
    adc #0
    sta _2+1
  //SEG211 [105] (word~) div16s::dividendu#7 ← (word)(signed word~) div16s::$2 [ div16s::divisor#0 div16s::dividendu#7 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::divisor#0 div16s::dividendu#7 ] )
    // (word~) div16s::dividendu#7 = (word)(signed word~) div16s::$2  // register copy zp ZP_WORD:8
  //SEG212 [85] phi from div16s::@1 to div16s::@2 [phi:div16s::@1->div16s::@2]
  //SEG213 [85] phi (word) div16s::dividendu#3 = (word~) div16s::dividendu#7 [phi:div16s::@1->div16s::@2#0] -- register_copy 
  //SEG214 [85] phi (byte) div16s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:div16s::@1->div16s::@2#1] -- vbuyy=vbuc1 
    ldy #1
    jmp b2
}
//SEG215 div16u
div16u: {
    .label return = $c
    .label dividend = 8
    .label divisor = $a
  //SEG216 [107] (word) divr16u::dividend#1 ← (word) div16u::dividend#2 [ div16u::divisor#2 divr16u::dividend#1 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::divisor#2 divr16u::dividend#1 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::divisor#2 divr16u::dividend#1 ] )
    // (word) divr16u::dividend#1 = (word) div16u::dividend#2  // register copy zp ZP_WORD:8
  //SEG217 [108] (word) divr16u::divisor#0 ← (word) div16u::divisor#2 [ divr16u::dividend#1 divr16u::divisor#0 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::dividend#1 divr16u::divisor#0 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#1 divr16u::divisor#0 ] )
    // (word) divr16u::divisor#0 = (word) div16u::divisor#2  // register copy zp ZP_WORD:10
  //SEG218 [109] call divr16u param-assignment [ rem16u#1 divr16u::return#0 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 rem16u#1 divr16u::return#0 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#0 ] )
  //SEG219 [113] phi from div16u to divr16u [phi:div16u->divr16u]
    jsr divr16u
  //SEG220 [110] (word) divr16u::return#2 ← (word) divr16u::return#0 [ rem16u#1 divr16u::return#2 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 rem16u#1 divr16u::return#2 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#2 ] )
    // (word) divr16u::return#2 = (word) divr16u::return#0  // register copy zp ZP_WORD:12
  //SEG221 div16u::@2
  //SEG222 [111] (word) div16u::return#0 ← (word) divr16u::return#2 [ div16u::return#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::return#0 rem16u#1 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 rem16u#1 ] )
    // (word) div16u::return#0 = (word) divr16u::return#2  // register copy zp ZP_WORD:12
  //SEG223 div16u::@return
  //SEG224 [112] return  [ div16u::return#0 rem16u#1 ] ( main:2::test_16s:13::div16s:21::div16u:91 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 div16u::return#0 rem16u#1 ] main:2::test_16u:9::div16u:222 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 rem16u#1 ] )
    rts
}
//SEG225 divr16u
divr16u: {
    .label rem = $e
    .label dividend = 8
    .label quotient = $c
    .label return = $c
    .label divisor = $a
  //SEG226 [114] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  //SEG227 [114] phi (byte) divr16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG228 [114] phi (word) divr16u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    txa
    sta quotient
    sta quotient+1
  //SEG229 [114] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#1 [phi:divr16u->divr16u::@1#2] -- register_copy 
  //SEG230 [114] phi (word) divr16u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    sta rem
    sta rem+1
  //SEG231 [114] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  //SEG232 [114] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG233 [114] phi (word) divr16u::quotient#3 = (word) divr16u::return#0 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG234 [114] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG235 [114] phi (word) divr16u::rem#4 = (word) divr16u::rem#10 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
  //SEG236 divr16u::@1
  b1:
  //SEG237 [115] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ) -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG238 [116] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$1 ] ) -- vbuaa=_hi_vwuz1 
    lda dividend+1
  //SEG239 [117] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 divr16u::$2 ] ) -- vbuaa=vbuaa_band_vbuc1 
    and #$80
  //SEG240 [118] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#0 ] ) -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG241 divr16u::@4
  //SEG242 [119] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) -- vwuz1=vwuz1_bor_vbuc1 
    lda #1
    ora rem
    sta rem
  //SEG243 [120] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  //SEG244 [120] phi (word) divr16u::rem#5 = (word) divr16u::rem#0 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
  //SEG245 divr16u::@2
  b2:
  //SEG246 [121] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 ] ) -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG247 [122] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ) -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG248 [123] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#1 ] ) -- vwuz1_lt_vwuz2_then_la1 
    lda rem+1
    cmp divisor+1
    bcc b3
    bne !+
    lda rem
    cmp divisor
    bcc b3
  !:
  //SEG249 divr16u::@5
  //SEG250 [124] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#2 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#2 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::rem#5 divr16u::quotient#2 ] ) -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG251 [125] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (word) divr16u::divisor#0 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#0 divr16u::quotient#2 divr16u::rem#2 ] ) -- vwuz1=vwuz1_minus_vwuz2 
    lda rem
    sec
    sbc divisor
    sta rem
    lda rem+1
    sbc divisor+1
    sta rem+1
  //SEG252 [126] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  //SEG253 [126] phi (word) divr16u::return#0 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG254 [126] phi (word) divr16u::rem#10 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
  //SEG255 divr16u::@3
  b3:
  //SEG256 [127] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 [ divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG257 [128] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto divr16u::@1 [ divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::return#0 divr16u::rem#10 divr16u::dividend#0 divr16u::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG258 divr16u::@6
  //SEG259 [129] (word) rem16u#1 ← (word) divr16u::rem#10 [ rem16u#1 divr16u::return#0 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 rem16u#1 divr16u::return#0 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#0 ] )
    // (word) rem16u#1 = (word) divr16u::rem#10  // register copy zp ZP_WORD:14
  //SEG260 divr16u::@return
  //SEG261 [130] return  [ rem16u#1 divr16u::return#0 ] ( main:2::test_16s:13::div16s:21::div16u:91::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 print_line_cursor#1 div16s::neg#4 rem16u#1 divr16u::return#0 ] main:2::test_16u:9::div16u:222::divr16u:109 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 rem16u#1 divr16u::return#0 ] )
    rts
}
//SEG262 test_8s
test_8s: {
    .label dividend = 7
    .label divisor = $15
    .label res = $10
    .label i = 2
  //SEG263 [132] phi from test_8s to test_8s::@1 [phi:test_8s->test_8s::@1]
  //SEG264 [132] phi (byte) test_8s::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8s->test_8s::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG265 [132] phi from test_8s::@11 to test_8s::@1 [phi:test_8s::@11->test_8s::@1]
  //SEG266 [132] phi (byte) test_8s::i#10 = (byte) test_8s::i#1 [phi:test_8s::@11->test_8s::@1#0] -- register_copy 
  //SEG267 test_8s::@1
  b1:
  //SEG268 [133] (signed byte) test_8s::dividend#0 ← *((const signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#10) [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG269 [134] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    lda divisors,y
    sta divisor
  //SEG270 [135] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 ] ) -- vbsyy=vbsz1 
    ldy dividend
  //SEG271 [136] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] ) -- vbsxx=vbsz1 
    tax
  //SEG272 [137] call div8s param-assignment [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 rem8s#3 ] )
    jsr div8s
  //SEG273 [138] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 rem8s#3 ] )
    // (signed byte) div8s::return#3 = (signed byte) div8s::return#2  // register copy reg byte a
  //SEG274 test_8s::@3
  //SEG275 [139] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] ) -- vbsz1=vbsaa 
    sta res
  //SEG276 [140] (signed byte) print_sbyte::b#1 ← (signed byte) test_8s::dividend#0 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 rem8s#3 ] )
    // (signed byte) print_sbyte::b#1 = (signed byte) test_8s::dividend#0  // register copy zp ZP_BYTE:7
  //SEG277 [141] (byte*~) print_char_cursor#180 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 print_char_cursor#180 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 print_char_cursor#180 rem8s#3 ] ) -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG278 [142] call print_sbyte param-assignment [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] )
  //SEG279 [160] phi from test_8s::@3 to print_sbyte [phi:test_8s::@3->print_sbyte]
  //SEG280 [160] phi (byte*) print_char_cursor#131 = (byte*~) print_char_cursor#180 [phi:test_8s::@3->print_sbyte#0] -- register_copy 
  //SEG281 [160] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#1 [phi:test_8s::@3->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG282 [143] phi from test_8s::@3 to test_8s::@4 [phi:test_8s::@3->test_8s::@4]
  //SEG283 test_8s::@4
  //SEG284 [144] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 ] )
  //SEG285 [76] phi from test_8s::@4 to print_str [phi:test_8s::@4->print_str]
  //SEG286 [76] phi (byte*) print_str::str#15 = (const string) test_8s::str [phi:test_8s::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG287 test_8s::@5
  //SEG288 [145] (signed byte) print_sbyte::b#2 ← (signed byte) test_8s::divisor#0 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::res#0 print_sbyte::b#2 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::res#0 print_sbyte::b#2 rem8s#3 ] ) -- vbsz1=vbsz2 
    lda divisor
    sta print_sbyte.b
  //SEG289 [146] call print_sbyte param-assignment [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 test_8s::res#0 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 test_8s::res#0 rem8s#3 ] )
  //SEG290 [160] phi from test_8s::@5 to print_sbyte [phi:test_8s::@5->print_sbyte]
  //SEG291 [160] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#126 [phi:test_8s::@5->print_sbyte#0] -- register_copy 
  //SEG292 [160] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#2 [phi:test_8s::@5->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG293 [147] phi from test_8s::@5 to test_8s::@6 [phi:test_8s::@5->test_8s::@6]
  //SEG294 test_8s::@6
  //SEG295 [148] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::res#0 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 test_8s::res#0 rem8s#3 ] )
  //SEG296 [76] phi from test_8s::@6 to print_str [phi:test_8s::@6->print_str]
  //SEG297 [76] phi (byte*) print_str::str#15 = (const string) test_8s::str1 [phi:test_8s::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG298 test_8s::@7
  //SEG299 [149] (signed byte) print_sbyte::b#3 ← (signed byte) test_8s::res#0 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 print_sbyte::b#3 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 print_sbyte::b#3 rem8s#3 ] ) -- vbsz1=vbsz2 
    lda res
    sta print_sbyte.b
  //SEG300 [150] call print_sbyte param-assignment [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 rem8s#3 ] )
  //SEG301 [160] phi from test_8s::@7 to print_sbyte [phi:test_8s::@7->print_sbyte]
  //SEG302 [160] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#126 [phi:test_8s::@7->print_sbyte#0] -- register_copy 
  //SEG303 [160] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#3 [phi:test_8s::@7->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG304 [151] phi from test_8s::@7 to test_8s::@8 [phi:test_8s::@7->test_8s::@8]
  //SEG305 test_8s::@8
  //SEG306 [152] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 rem8s#3 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 rem8s#3 ] )
  //SEG307 [76] phi from test_8s::@8 to print_str [phi:test_8s::@8->print_str]
  //SEG308 [76] phi (byte*) print_str::str#15 = (const string) test_8s::str2 [phi:test_8s::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG309 test_8s::@9
  //SEG310 [153] (signed byte) print_sbyte::b#4 ← (signed byte) rem8s#3 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 print_sbyte::b#4 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#126 test_8s::i#10 print_sbyte::b#4 ] ) -- vbsz1=vbsxx 
    stx print_sbyte.b
  //SEG311 [154] call print_sbyte param-assignment [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 ] ( main:2::test_8s:11 [ print_line_cursor#1 print_char_cursor#17 test_8s::i#10 ] )
  //SEG312 [160] phi from test_8s::@9 to print_sbyte [phi:test_8s::@9->print_sbyte]
  //SEG313 [160] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#126 [phi:test_8s::@9->print_sbyte#0] -- register_copy 
  //SEG314 [160] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#4 [phi:test_8s::@9->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG315 [155] phi from test_8s::@9 to test_8s::@10 [phi:test_8s::@9->test_8s::@10]
  //SEG316 test_8s::@10
  //SEG317 [156] call print_ln param-assignment [ print_line_cursor#1 test_8s::i#10 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#10 ] )
  //SEG318 [44] phi from test_8s::@10 to print_ln [phi:test_8s::@10->print_ln]
  //SEG319 [44] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#1 [phi:test_8s::@10->print_ln#0] -- register_copy 
    jsr print_ln
  //SEG320 test_8s::@11
  //SEG321 [157] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10 [ print_line_cursor#1 test_8s::i#1 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG322 [158] if((byte) test_8s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8s::@1 [ print_line_cursor#1 test_8s::i#1 ] ( main:2::test_8s:11 [ print_line_cursor#1 test_8s::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #6
    bne b1
  //SEG323 test_8s::@return
  //SEG324 [159] return  [ print_line_cursor#1 ] ( main:2::test_8s:11 [ print_line_cursor#1 ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .byte $7f, -$7f, -$7f, $7f, $7f, $7f
    divisors: .byte 5, 7, -$b, -$d, $11, $13
}
//SEG325 print_sbyte
print_sbyte: {
    .label b = 7
  //SEG326 [161] if((signed byte) print_sbyte::b#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte::@1 [ print_char_cursor#131 print_sbyte::b#5 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#131 print_sbyte::b#5 ] ) -- vbsz1_ge_0_then_la1 
    lda b
    cmp #0
    bpl b1
  //SEG327 [162] phi from print_sbyte to print_sbyte::@2 [phi:print_sbyte->print_sbyte::@2]
  //SEG328 print_sbyte::@2
  //SEG329 [163] call print_char param-assignment [ print_char_cursor#17 print_sbyte::b#5 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_sbyte::b#5 ] )
  //SEG330 [72] phi from print_sbyte::@2 to print_char [phi:print_sbyte::@2->print_char]
  //SEG331 [72] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#131 [phi:print_sbyte::@2->print_char#0] -- register_copy 
  //SEG332 [72] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sbyte::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
  //SEG333 print_sbyte::@4
  //SEG334 [164] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#5 [ print_char_cursor#17 print_sbyte::b#0 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 print_sbyte::b#0 ] ) -- vbsz1=_neg_vbsz1 
    lda b
    eor #$ff
    clc
    adc #1
    sta b
  //SEG335 [165] phi from print_sbyte print_sbyte::@4 to print_sbyte::@1 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1]
  //SEG336 [165] phi (byte*) print_char_cursor#130 = (byte*) print_char_cursor#131 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1#0] -- register_copy 
  //SEG337 [165] phi (signed byte) print_sbyte::b#6 = (signed byte) print_sbyte::b#5 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1#1] -- register_copy 
  //SEG338 print_sbyte::@1
  b1:
  //SEG339 [166] (byte~) print_byte::b#9 ← (byte)(signed byte) print_sbyte::b#6 [ print_byte::b#9 print_char_cursor#130 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_byte::b#9 print_char_cursor#130 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_byte::b#9 print_char_cursor#130 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_byte::b#9 print_char_cursor#130 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_byte::b#9 print_char_cursor#130 ] )
    // (byte~) print_byte::b#9 = (byte)(signed byte) print_sbyte::b#6  // register copy zp ZP_BYTE:7
  //SEG340 [167] call print_byte param-assignment [ print_char_cursor#17 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] )
  //SEG341 [64] phi from print_sbyte::@1 to print_byte [phi:print_sbyte::@1->print_byte]
  //SEG342 [64] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#130 [phi:print_sbyte::@1->print_byte#0] -- register_copy 
  //SEG343 [64] phi (byte) print_byte::b#7 = (byte~) print_byte::b#9 [phi:print_sbyte::@1->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG344 print_sbyte::@return
  //SEG345 [168] return  [ print_char_cursor#17 ] ( main:2::test_8s:11::print_sbyte:142 [ print_line_cursor#1 test_8s::i#10 test_8s::divisor#0 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:146 [ print_line_cursor#1 test_8s::i#10 test_8s::res#0 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:150 [ print_line_cursor#1 test_8s::i#10 rem8s#3 print_char_cursor#17 ] main:2::test_8s:11::print_sbyte:154 [ print_line_cursor#1 test_8s::i#10 print_char_cursor#17 ] )
    rts
}
//SEG346 div8s
div8s: {
    .label neg = $10
  //SEG347 [169] if((signed byte) div8s::dividend#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@1 [ div8s::dividend#0 div8s::divisor#0 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 ] ) -- vbsyy_lt_0_then_la1 
    cpy #0
    bmi b1
  //SEG348 div8s::@16
  //SEG349 [170] (byte~) div8s::dividendu#8 ← (byte)(signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::dividendu#8 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendu#8 ] )
    // (byte~) div8s::dividendu#8 = (byte)(signed byte) div8s::dividend#0  // register copy reg byte y
  //SEG350 [171] phi from div8s::@16 to div8s::@2 [phi:div8s::@16->div8s::@2]
  //SEG351 [171] phi (byte) div8s::dividendu#3 = (byte~) div8s::dividendu#8 [phi:div8s::@16->div8s::@2#0] -- register_copy 
  //SEG352 [171] phi (byte) div8s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8s::@16->div8s::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta neg
  //SEG353 div8s::@2
  b2:
  //SEG354 [172] if((signed byte) div8s::divisor#0<(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@3 [ div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 ] ) -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi b3
  //SEG355 div8s::@17
  //SEG356 [173] (byte~) div8s::divisoru#5 ← (byte)(signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::divisoru#5 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::divisoru#5 ] )
    // (byte~) div8s::divisoru#5 = (byte)(signed byte) div8s::divisor#0  // register copy reg byte x
  //SEG357 [174] phi from div8s::@17 div8s::@3 to div8s::@4 [phi:div8s::@17/div8s::@3->div8s::@4]
  //SEG358 [174] phi (byte) div8s::neg#4 = (byte) div8s::neg#3 [phi:div8s::@17/div8s::@3->div8s::@4#0] -- register_copy 
  //SEG359 [174] phi (byte) div8s::divisoru#3 = (byte~) div8s::divisoru#5 [phi:div8s::@17/div8s::@3->div8s::@4#1] -- register_copy 
  //SEG360 div8s::@4
  b4:
  //SEG361 [175] (byte) div8u::dividend#0 ← (byte) div8s::dividendu#3 [ div8s::divisoru#3 div8s::neg#4 div8u::dividend#0 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisoru#3 div8s::neg#4 div8u::dividend#0 ] ) -- vbuaa=vbuyy 
    tya
  //SEG362 [176] (byte) div8u::divisor#0 ← (byte) div8s::divisoru#3 [ div8s::neg#4 div8u::dividend#0 div8u::divisor#0 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::dividend#0 div8u::divisor#0 ] )
    // (byte) div8u::divisor#0 = (byte) div8s::divisoru#3  // register copy reg byte x
  //SEG363 [177] call div8u param-assignment [ div8s::neg#4 div8u::return#0 rem8u#17 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 rem8u#17 ] )
  //SEG364 [192] phi from div8s::@4 to div8u [phi:div8s::@4->div8u]
  //SEG365 [192] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#0 [phi:div8s::@4->div8u#0] -- register_copy 
  //SEG366 [192] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#0 [phi:div8s::@4->div8u#1] -- register_copy 
    jsr div8u
  //SEG367 [178] (byte) div8u::return#2 ← (byte) div8u::return#0 [ div8s::neg#4 div8u::return#2 rem8u#17 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#2 rem8u#17 ] )
    // (byte) div8u::return#2 = (byte) div8u::return#0  // register copy reg byte a
  //SEG368 div8s::@15
  //SEG369 [179] (byte) div8s::resultu#0 ← (byte) div8u::return#2 [ div8s::neg#4 div8s::resultu#0 rem8u#17 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8s::resultu#0 rem8u#17 ] ) -- vbuyy=vbuaa 
    tay
  //SEG370 [180] if((byte) div8s::neg#4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@18 [ div8s::resultu#0 rem8u#17 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 rem8u#17 ] ) -- vbuz1_eq_0_then_la1 
    lda neg
    beq b18
  //SEG371 div8s::@11
  //SEG372 [181] (signed byte) rem8s#2 ← - (signed byte)(byte) rem8u#17 [ div8s::resultu#0 rem8s#2 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 rem8s#2 ] ) -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
  //SEG373 [182] (signed byte) div8s::return#1 ← - (signed byte)(byte) div8s::resultu#0 [ rem8s#2 div8s::return#1 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 rem8s#2 div8s::return#1 ] ) -- vbsaa=_neg_vbsyy 
    tya
    eor #$ff
    clc
    adc #1
  //SEG374 [183] phi from div8s::@11 div8s::@18 to div8s::@return [phi:div8s::@11/div8s::@18->div8s::@return]
  //SEG375 [183] phi (signed byte) rem8s#3 = (signed byte) rem8s#2 [phi:div8s::@11/div8s::@18->div8s::@return#0] -- register_copy 
  //SEG376 [183] phi (signed byte) div8s::return#2 = (signed byte) div8s::return#1 [phi:div8s::@11/div8s::@18->div8s::@return#1] -- register_copy 
  //SEG377 div8s::@return
  breturn:
  //SEG378 [184] return  [ div8s::return#2 rem8s#3 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 rem8s#3 ] )
    rts
  //SEG379 div8s::@18
  b18:
  //SEG380 [185] (signed byte~) div8s::return#7 ← (signed byte)(byte) div8s::resultu#0 [ rem8u#17 div8s::return#7 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 rem8u#17 div8s::return#7 ] ) -- vbsaa=vbsyy 
    tya
  //SEG381 [186] (signed byte~) rem8s#33 ← (signed byte)(byte) rem8u#17 [ div8s::return#7 rem8s#33 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#7 rem8s#33 ] )
    // (signed byte~) rem8s#33 = (signed byte)(byte) rem8u#17  // register copy reg byte x
    jmp breturn
  //SEG382 div8s::@3
  b3:
  //SEG383 [187] (signed byte~) div8s::$6 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::$6 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::$6 ] ) -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
  //SEG384 [188] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8s::dividendu#3 div8s::neg#2 div8s::$6 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::neg#2 div8s::$6 ] ) -- vbuz1=vbuz1_bxor_vbuc1 
    lda neg
    eor #1
    sta neg
  //SEG385 [189] (byte~) div8s::divisoru#4 ← (byte)(signed byte~) div8s::$6 [ div8s::dividendu#3 div8s::divisoru#4 div8s::neg#2 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::divisoru#4 div8s::neg#2 ] )
    // (byte~) div8s::divisoru#4 = (byte)(signed byte~) div8s::$6  // register copy reg byte x
    jmp b4
  //SEG386 div8s::@1
  b1:
  //SEG387 [190] (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::$2 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::$2 ] ) -- vbsaa=_neg_vbsyy 
    tya
    eor #$ff
    clc
    adc #1
  //SEG388 [191] (byte~) div8s::dividendu#7 ← (byte)(signed byte~) div8s::$2 [ div8s::divisor#0 div8s::dividendu#7 ] ( main:2::test_8s:11::div8s:137 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendu#7 ] ) -- vbuyy=vbuaa 
    tay
  //SEG389 [171] phi from div8s::@1 to div8s::@2 [phi:div8s::@1->div8s::@2]
  //SEG390 [171] phi (byte) div8s::dividendu#3 = (byte~) div8s::dividendu#7 [phi:div8s::@1->div8s::@2#0] -- register_copy 
  //SEG391 [171] phi (byte) div8s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:div8s::@1->div8s::@2#1] -- vbuz1=vbuc1 
    lda #1
    sta neg
    jmp b2
}
//SEG392 div8u
div8u: {
  //SEG393 [193] (byte) divr8u::dividend#0 ← (byte) div8u::dividend#2 [ div8u::divisor#2 divr8u::dividend#0 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#2 divr8u::dividend#0 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#2 divr8u::dividend#0 ] ) -- vbuz1=vbuaa 
    sta divr8u.dividend
  //SEG394 [194] (byte) divr8u::divisor#0 ← (byte) div8u::divisor#2 [ divr8u::dividend#0 divr8u::divisor#0 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::dividend#0 divr8u::divisor#0 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::dividend#0 divr8u::divisor#0 ] ) -- vbuz1=vbuxx 
    stx divr8u.divisor
  //SEG395 [195] call divr8u param-assignment [ rem8u#17 divr8u::return#1 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 rem8u#17 divr8u::return#1 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 rem8u#17 divr8u::return#1 ] )
  //SEG396 [199] phi from div8u to divr8u [phi:div8u->divr8u]
    jsr divr8u
  //SEG397 [196] (byte) divr8u::return#0 ← (byte) divr8u::return#1 [ rem8u#17 divr8u::return#0 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 rem8u#17 divr8u::return#0 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 rem8u#17 divr8u::return#0 ] ) -- vbuaa=vbuz1 
    lda divr8u.return
  //SEG398 div8u::@2
  //SEG399 [197] (byte) div8u::return#0 ← (byte) divr8u::return#0 [ div8u::return#0 rem8u#17 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 rem8u#17 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#17 ] )
    // (byte) div8u::return#0 = (byte) divr8u::return#0  // register copy reg byte a
  //SEG400 div8u::@return
  //SEG401 [198] return  [ div8u::return#0 rem8u#17 ] ( main:2::test_8s:11::div8s:137::div8u:177 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 rem8u#17 ] main:2::test_8u:7::div8u:251 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 rem8u#17 ] )
    rts
}
//SEG402 divr8u
divr8u: {
    .label dividend = $11
    .label divisor = $16
    .label quotient = $12
    .label return = $12
  //SEG403 [200] phi from divr8u to divr8u::@1 [phi:divr8u->divr8u::@1]
  //SEG404 [200] phi (byte) divr8u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr8u->divr8u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG405 [200] phi (byte) divr8u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr8u->divr8u::@1#1] -- vbuz1=vbuc1 
    txa
    sta quotient
  //SEG406 [200] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#0 [phi:divr8u->divr8u::@1#2] -- register_copy 
  //SEG407 [200] phi (byte) divr8u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr8u->divr8u::@1#3] -- vbuyy=vbuc1 
    tay
  //SEG408 [200] phi from divr8u::@3 to divr8u::@1 [phi:divr8u::@3->divr8u::@1]
  //SEG409 [200] phi (byte) divr8u::i#2 = (byte) divr8u::i#1 [phi:divr8u::@3->divr8u::@1#0] -- register_copy 
  //SEG410 [200] phi (byte) divr8u::quotient#3 = (byte) divr8u::return#1 [phi:divr8u::@3->divr8u::@1#1] -- register_copy 
  //SEG411 [200] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#1 [phi:divr8u::@3->divr8u::@1#2] -- register_copy 
  //SEG412 [200] phi (byte) divr8u::rem#4 = (byte) divr8u::rem#10 [phi:divr8u::@3->divr8u::@1#3] -- register_copy 
  //SEG413 divr8u::@1
  b1:
  //SEG414 [201] (byte) divr8u::rem#1 ← (byte) divr8u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ) -- vbuyy=vbuyy_rol_1 
    tya
    asl
    tay
  //SEG415 [202] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte/word/signed word/dword/signed dword) 128 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ) -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and dividend
  //SEG416 [203] if((byte~) divr8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr8u::@2 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ) -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG417 divr8u::@4
  //SEG418 [204] (byte) divr8u::rem#2 ← (byte) divr8u::rem#1 | (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ) -- vbuyy=vbuyy_bor_vbuc1 
    tya
    ora #1
    tay
  //SEG419 [205] phi from divr8u::@1 divr8u::@4 to divr8u::@2 [phi:divr8u::@1/divr8u::@4->divr8u::@2]
  //SEG420 [205] phi (byte) divr8u::rem#5 = (byte) divr8u::rem#1 [phi:divr8u::@1/divr8u::@4->divr8u::@2#0] -- register_copy 
  //SEG421 divr8u::@2
  b2:
  //SEG422 [206] (byte) divr8u::dividend#1 ← (byte) divr8u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] ) -- vbuz1=vbuz1_rol_1 
    asl dividend
  //SEG423 [207] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ) -- vbuz1=vbuz1_rol_1 
    asl quotient
  //SEG424 [208] if((byte) divr8u::rem#5<(byte) divr8u::divisor#0) goto divr8u::@3 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ) -- vbuyy_lt_vbuz1_then_la1 
    cpy divisor
    bcc b3
  //SEG425 divr8u::@5
  //SEG426 [209] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] ) -- vbuz1=_inc_vbuz1 
    inc quotient
  //SEG427 [210] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ) -- vbuyy=vbuyy_minus_vbuz1 
    tya
    sec
    sbc divisor
    tay
  //SEG428 [211] phi from divr8u::@2 divr8u::@5 to divr8u::@3 [phi:divr8u::@2/divr8u::@5->divr8u::@3]
  //SEG429 [211] phi (byte) divr8u::return#1 = (byte) divr8u::quotient#1 [phi:divr8u::@2/divr8u::@5->divr8u::@3#0] -- register_copy 
  //SEG430 [211] phi (byte) divr8u::rem#10 = (byte) divr8u::rem#5 [phi:divr8u::@2/divr8u::@5->divr8u::@3#1] -- register_copy 
  //SEG431 divr8u::@3
  b3:
  //SEG432 [212] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2 [ divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG433 [213] if((byte) divr8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto divr8u::@1 [ divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::return#1 divr8u::rem#10 divr8u::dividend#1 divr8u::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b1
  //SEG434 divr8u::@6
  //SEG435 [214] (byte) rem8u#17 ← (byte) divr8u::rem#10 [ rem8u#17 divr8u::return#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 rem8u#17 divr8u::return#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 rem8u#17 divr8u::return#1 ] ) -- vbuxx=vbuyy 
    tya
    tax
  //SEG436 divr8u::@return
  //SEG437 [215] return  [ rem8u#17 divr8u::return#1 ] ( main:2::test_8s:11::div8s:137::div8u:177::divr8u:195 [ print_line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 rem8u#17 divr8u::return#1 ] main:2::test_8u:7::div8u:251::divr8u:195 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 rem8u#17 divr8u::return#1 ] )
    rts
}
//SEG438 test_16u
test_16u: {
    .label dividend = 5
    .label divisor = $a
    .label res = $c
    .label i = 2
  //SEG439 [217] phi from test_16u to test_16u::@1 [phi:test_16u->test_16u::@1]
  //SEG440 [217] phi (byte) test_16u::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16u->test_16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG441 [217] phi from test_16u::@11 to test_16u::@1 [phi:test_16u::@11->test_16u::@1]
  //SEG442 [217] phi (byte) test_16u::i#10 = (byte) test_16u::i#1 [phi:test_16u::@11->test_16u::@1#0] -- register_copy 
  //SEG443 test_16u::@1
  b1:
  //SEG444 [218] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte) test_16u::i#10) [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 ] ) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
    lda dividends+1,y
    sta dividend+1
  //SEG445 [219] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte) test_16u::i#10) [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) -- vwuz1=pwuc1_derefidx_vbuz2 
    lda divisors,y
    sta divisor
    lda divisors+1,y
    sta divisor+1
  //SEG446 [220] (word) div16u::dividend#1 ← (word) test_16u::dividend#0 [ print_line_cursor#1 div16u::dividend#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 div16u::dividend#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) -- vwuz1=vwuz2 
    lda dividend
    sta div16u.dividend
    lda dividend+1
    sta div16u.dividend+1
  //SEG447 [221] (word) div16u::divisor#1 ← (word) test_16u::divisor#0 [ print_line_cursor#1 div16u::dividend#1 div16u::divisor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 div16u::dividend#1 div16u::divisor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] )
    // (word) div16u::divisor#1 = (word) test_16u::divisor#0  // register copy zp ZP_WORD:10
  //SEG448 [222] call div16u param-assignment [ print_line_cursor#1 div16u::return#0 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 div16u::return#0 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] )
  //SEG449 [106] phi from test_16u::@1 to div16u [phi:test_16u::@1->div16u]
  //SEG450 [106] phi (word) div16u::divisor#2 = (word) div16u::divisor#1 [phi:test_16u::@1->div16u#0] -- register_copy 
  //SEG451 [106] phi (word) div16u::dividend#2 = (word) div16u::dividend#1 [phi:test_16u::@1->div16u#1] -- register_copy 
    jsr div16u
  //SEG452 [223] (word) div16u::return#3 ← (word) div16u::return#0 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] ( main:2::test_16u:9 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] )
    // (word) div16u::return#3 = (word) div16u::return#0  // register copy zp ZP_WORD:12
  //SEG453 test_16u::@3
  //SEG454 [224] (word) test_16u::res#0 ← (word) div16u::return#3 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 rem16u#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] )
    // (word) test_16u::res#0 = (word) div16u::return#3  // register copy zp ZP_WORD:12
  //SEG455 [225] (word) print_word::w#1 ← (word) test_16u::dividend#0 [ print_line_cursor#1 print_word::w#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_word::w#1 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
    // (word) print_word::w#1 = (word) test_16u::dividend#0  // register copy zp ZP_WORD:5
  //SEG456 [226] (byte*~) print_char_cursor#163 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_word::w#1 print_char_cursor#163 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_word::w#1 print_char_cursor#163 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ) -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG457 [227] call print_word param-assignment [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
  //SEG458 [58] phi from test_16u::@3 to print_word [phi:test_16u::@3->print_word]
  //SEG459 [58] phi (byte*) print_char_cursor#132 = (byte*~) print_char_cursor#163 [phi:test_16u::@3->print_word#0] -- register_copy 
  //SEG460 [58] phi (word) print_word::w#5 = (word) print_word::w#1 [phi:test_16u::@3->print_word#1] -- register_copy 
    jsr print_word
  //SEG461 [228] phi from test_16u::@3 to test_16u::@4 [phi:test_16u::@3->test_16u::@4]
  //SEG462 test_16u::@4
  //SEG463 [229] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
  //SEG464 [76] phi from test_16u::@4 to print_str [phi:test_16u::@4->print_str]
  //SEG465 [76] phi (byte*) print_str::str#15 = (const string) test_16u::str [phi:test_16u::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG466 test_16u::@5
  //SEG467 [230] (word) print_word::w#2 ← (word) test_16u::divisor#0 [ print_line_cursor#1 print_char_cursor#126 print_word::w#2 rem16u#1 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 print_word::w#2 rem16u#1 test_16u::i#10 test_16u::res#0 ] ) -- vwuz1=vwuz2 
    lda divisor
    sta print_word.w
    lda divisor+1
    sta print_word.w+1
  //SEG468 [231] call print_word param-assignment [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 test_16u::res#0 ] )
  //SEG469 [58] phi from test_16u::@5 to print_word [phi:test_16u::@5->print_word]
  //SEG470 [58] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#126 [phi:test_16u::@5->print_word#0] -- register_copy 
  //SEG471 [58] phi (word) print_word::w#5 = (word) print_word::w#2 [phi:test_16u::@5->print_word#1] -- register_copy 
    jsr print_word
  //SEG472 [232] phi from test_16u::@5 to test_16u::@6 [phi:test_16u::@5->test_16u::@6]
  //SEG473 test_16u::@6
  //SEG474 [233] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 test_16u::res#0 ] )
  //SEG475 [76] phi from test_16u::@6 to print_str [phi:test_16u::@6->print_str]
  //SEG476 [76] phi (byte*) print_str::str#15 = (const string) test_16u::str1 [phi:test_16u::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG477 test_16u::@7
  //SEG478 [234] (word) print_word::w#3 ← (word) test_16u::res#0 [ print_line_cursor#1 print_char_cursor#126 print_word::w#3 rem16u#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 print_word::w#3 rem16u#1 test_16u::i#10 ] ) -- vwuz1=vwuz2 
    lda res
    sta print_word.w
    lda res+1
    sta print_word.w+1
  //SEG479 [235] call print_word param-assignment [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#17 rem16u#1 test_16u::i#10 ] )
  //SEG480 [58] phi from test_16u::@7 to print_word [phi:test_16u::@7->print_word]
  //SEG481 [58] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#126 [phi:test_16u::@7->print_word#0] -- register_copy 
  //SEG482 [58] phi (word) print_word::w#5 = (word) print_word::w#3 [phi:test_16u::@7->print_word#1] -- register_copy 
    jsr print_word
  //SEG483 [236] phi from test_16u::@7 to test_16u::@8 [phi:test_16u::@7->test_16u::@8]
  //SEG484 test_16u::@8
  //SEG485 [237] call print_str param-assignment [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 rem16u#1 test_16u::i#10 ] )
  //SEG486 [76] phi from test_16u::@8 to print_str [phi:test_16u::@8->print_str]
  //SEG487 [76] phi (byte*) print_str::str#15 = (const string) test_16u::str2 [phi:test_16u::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG488 test_16u::@9
  //SEG489 [238] (word) print_word::w#4 ← (word) rem16u#1 [ print_line_cursor#1 print_char_cursor#126 print_word::w#4 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#126 print_word::w#4 test_16u::i#10 ] ) -- vwuz1=vwuz2 
    lda rem16u
    sta print_word.w
    lda rem16u+1
    sta print_word.w+1
  //SEG490 [239] call print_word param-assignment [ print_line_cursor#1 print_char_cursor#17 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 print_char_cursor#17 test_16u::i#10 ] )
  //SEG491 [58] phi from test_16u::@9 to print_word [phi:test_16u::@9->print_word]
  //SEG492 [58] phi (byte*) print_char_cursor#132 = (byte*) print_char_cursor#126 [phi:test_16u::@9->print_word#0] -- register_copy 
  //SEG493 [58] phi (word) print_word::w#5 = (word) print_word::w#4 [phi:test_16u::@9->print_word#1] -- register_copy 
    jsr print_word
  //SEG494 [240] phi from test_16u::@9 to test_16u::@10 [phi:test_16u::@9->test_16u::@10]
  //SEG495 test_16u::@10
  //SEG496 [241] call print_ln param-assignment [ print_line_cursor#1 test_16u::i#10 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#10 ] )
  //SEG497 [44] phi from test_16u::@10 to print_ln [phi:test_16u::@10->print_ln]
  //SEG498 [44] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#1 [phi:test_16u::@10->print_ln#0] -- register_copy 
    jsr print_ln
  //SEG499 test_16u::@11
  //SEG500 [242] (byte) test_16u::i#1 ← (byte) test_16u::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ print_line_cursor#1 test_16u::i#1 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#1 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda #2
    clc
    adc i
    sta i
  //SEG501 [243] if((byte) test_16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16u::@1 [ print_line_cursor#1 test_16u::i#1 ] ( main:2::test_16u:9 [ print_line_cursor#1 test_16u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    cmp #$c
    bne b1
  //SEG502 test_16u::@return
  //SEG503 [244] return  [ print_line_cursor#1 ] ( main:2::test_16u:9 [ print_line_cursor#1 ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .word $ffff, $ffff, $ffff, $ffff, $ffff, $ffff
    divisors: .word 5, 7, $b, $d, $11, $13
}
//SEG504 test_8u
test_8u: {
    .label dividend = 7
    .label divisor = $10
    .label res = $11
    .label i = 2
  //SEG505 [246] phi from test_8u to test_8u::@1 [phi:test_8u->test_8u::@1]
  //SEG506 [246] phi (byte*) print_line_cursor#41 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:test_8u->test_8u::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG507 [246] phi (byte*) print_char_cursor#135 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:test_8u->test_8u::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG508 [246] phi (byte) test_8u::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8u->test_8u::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG509 test_8u::@1
  b1:
  //SEG510 [247] (byte) test_8u::dividend#0 ← *((const byte[]) test_8u::dividends#0 + (byte) test_8u::i#10) [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG511 [248] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    lda divisors,y
    sta divisor
  //SEG512 [249] (byte) div8u::dividend#1 ← (byte) test_8u::dividend#0 [ print_line_cursor#41 print_char_cursor#135 div8u::dividend#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 div8u::dividend#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) -- vbuaa=vbuz1 
    lda dividend
  //SEG513 [250] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0 [ print_line_cursor#41 print_char_cursor#135 div8u::dividend#1 div8u::divisor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 div8u::dividend#1 div8u::divisor#1 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) -- vbuxx=vbuz1 
    ldx divisor
  //SEG514 [251] call div8u param-assignment [ print_line_cursor#41 print_char_cursor#135 div8u::return#0 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 div8u::return#0 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] )
  //SEG515 [192] phi from test_8u::@1 to div8u [phi:test_8u::@1->div8u]
  //SEG516 [192] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#1 [phi:test_8u::@1->div8u#0] -- register_copy 
  //SEG517 [192] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#1 [phi:test_8u::@1->div8u#1] -- register_copy 
    jsr div8u
  //SEG518 [252] (byte) div8u::return#3 ← (byte) div8u::return#0 [ print_line_cursor#41 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 ] )
    // (byte) div8u::return#3 = (byte) div8u::return#0  // register copy reg byte a
  //SEG519 test_8u::@3
  //SEG520 [253] (byte) test_8u::res#0 ← (byte) div8u::return#3 [ print_line_cursor#41 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 ] ) -- vbuz1=vbuaa 
    sta res
  //SEG521 [254] (byte) print_byte::b#3 ← (byte) test_8u::dividend#0 [ print_line_cursor#41 print_byte::b#3 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_byte::b#3 print_char_cursor#135 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
    // (byte) print_byte::b#3 = (byte) test_8u::dividend#0  // register copy zp ZP_BYTE:7
  //SEG522 [255] call print_byte param-assignment [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
  //SEG523 [64] phi from test_8u::@3 to print_byte [phi:test_8u::@3->print_byte]
  //SEG524 [64] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#135 [phi:test_8u::@3->print_byte#0] -- register_copy 
  //SEG525 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#3 [phi:test_8u::@3->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG526 [256] phi from test_8u::@3 to test_8u::@4 [phi:test_8u::@3->test_8u::@4]
  //SEG527 test_8u::@4
  //SEG528 [257] call print_str param-assignment [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
  //SEG529 [76] phi from test_8u::@4 to print_str [phi:test_8u::@4->print_str]
  //SEG530 [76] phi (byte*) print_str::str#15 = (const string) test_8u::str [phi:test_8u::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG531 test_8u::@5
  //SEG532 [258] (byte) print_byte::b#4 ← (byte) test_8u::divisor#0 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#4 rem8u#17 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#4 rem8u#17 test_8u::i#10 test_8u::res#0 ] ) -- vbuz1=vbuz2 
    lda divisor
    sta print_byte.b
  //SEG533 [259] call print_byte param-assignment [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 test_8u::res#0 ] )
  //SEG534 [64] phi from test_8u::@5 to print_byte [phi:test_8u::@5->print_byte]
  //SEG535 [64] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#126 [phi:test_8u::@5->print_byte#0] -- register_copy 
  //SEG536 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#4 [phi:test_8u::@5->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG537 [260] phi from test_8u::@5 to test_8u::@6 [phi:test_8u::@5->test_8u::@6]
  //SEG538 test_8u::@6
  //SEG539 [261] call print_str param-assignment [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 test_8u::res#0 ] )
  //SEG540 [76] phi from test_8u::@6 to print_str [phi:test_8u::@6->print_str]
  //SEG541 [76] phi (byte*) print_str::str#15 = (const string) test_8u::str1 [phi:test_8u::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG542 test_8u::@7
  //SEG543 [262] (byte) print_byte::b#5 ← (byte) test_8u::res#0 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#5 rem8u#17 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#5 rem8u#17 test_8u::i#10 ] ) -- vbuz1=vbuz2 
    lda res
    sta print_byte.b
  //SEG544 [263] call print_byte param-assignment [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#17 rem8u#17 test_8u::i#10 ] )
  //SEG545 [64] phi from test_8u::@7 to print_byte [phi:test_8u::@7->print_byte]
  //SEG546 [64] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#126 [phi:test_8u::@7->print_byte#0] -- register_copy 
  //SEG547 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#5 [phi:test_8u::@7->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG548 [264] phi from test_8u::@7 to test_8u::@8 [phi:test_8u::@7->test_8u::@8]
  //SEG549 test_8u::@8
  //SEG550 [265] call print_str param-assignment [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 rem8u#17 test_8u::i#10 ] )
  //SEG551 [76] phi from test_8u::@8 to print_str [phi:test_8u::@8->print_str]
  //SEG552 [76] phi (byte*) print_str::str#15 = (const string) test_8u::str2 [phi:test_8u::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG553 test_8u::@9
  //SEG554 [266] (byte) print_byte::b#6 ← (byte) rem8u#17 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#6 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#126 print_byte::b#6 test_8u::i#10 ] ) -- vbuz1=vbuxx 
    stx print_byte.b
  //SEG555 [267] call print_byte param-assignment [ print_line_cursor#41 print_char_cursor#17 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#41 print_char_cursor#17 test_8u::i#10 ] )
  //SEG556 [64] phi from test_8u::@9 to print_byte [phi:test_8u::@9->print_byte]
  //SEG557 [64] phi (byte*) print_char_cursor#133 = (byte*) print_char_cursor#126 [phi:test_8u::@9->print_byte#0] -- register_copy 
  //SEG558 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#6 [phi:test_8u::@9->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG559 [268] phi from test_8u::@9 to test_8u::@10 [phi:test_8u::@9->test_8u::@10]
  //SEG560 test_8u::@10
  //SEG561 [269] call print_ln param-assignment [ print_line_cursor#1 test_8u::i#10 ] ( main:2::test_8u:7 [ print_line_cursor#1 test_8u::i#10 ] )
  //SEG562 [44] phi from test_8u::@10 to print_ln [phi:test_8u::@10->print_ln]
  //SEG563 [44] phi (byte*) print_line_cursor#39 = (byte*) print_line_cursor#41 [phi:test_8u::@10->print_ln#0] -- register_copy 
    jsr print_ln
  //SEG564 test_8u::@11
  //SEG565 [270] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10 [ print_line_cursor#1 test_8u::i#1 ] ( main:2::test_8u:7 [ print_line_cursor#1 test_8u::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG566 [271] if((byte) test_8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8u::@12 [ print_line_cursor#1 test_8u::i#1 ] ( main:2::test_8u:7 [ print_line_cursor#1 test_8u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #6
    bne b12
  //SEG567 test_8u::@return
  //SEG568 [272] return  [ print_line_cursor#1 ] ( main:2::test_8u:7 [ print_line_cursor#1 ] )
    rts
  //SEG569 test_8u::@12
  b12:
  //SEG570 [273] (byte*~) print_char_cursor#186 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 test_8u::i#1 print_char_cursor#186 ] ( main:2::test_8u:7 [ print_line_cursor#1 test_8u::i#1 print_char_cursor#186 ] ) -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG571 [246] phi from test_8u::@12 to test_8u::@1 [phi:test_8u::@12->test_8u::@1]
  //SEG572 [246] phi (byte*) print_line_cursor#41 = (byte*) print_line_cursor#1 [phi:test_8u::@12->test_8u::@1#0] -- register_copy 
  //SEG573 [246] phi (byte*) print_char_cursor#135 = (byte*~) print_char_cursor#186 [phi:test_8u::@12->test_8u::@1#1] -- register_copy 
  //SEG574 [246] phi (byte) test_8u::i#10 = (byte) test_8u::i#1 [phi:test_8u::@12->test_8u::@1#2] -- register_copy 
    jmp b1
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .byte $ff, $ff, $ff, $ff, $ff, $ff
    divisors: .byte 5, 7, $b, $d, $11, $13
}
//SEG575 print_cls
print_cls: {
    .label sc = 3
  //SEG576 [275] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG577 [275] phi (byte*) print_cls::sc#2 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
  //SEG578 [275] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG579 [275] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG580 print_cls::@1
  b1:
  //SEG581 [276] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG582 [277] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG583 [278] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1
    lda sc
    cmp #<$400+$3e8
    bne b1
  //SEG584 print_cls::@return
  //SEG585 [279] return  [ ] ( main:2::print_cls:5 [ ] )
    rts
}
  print_hextab: .text "0123456789abcdef"

