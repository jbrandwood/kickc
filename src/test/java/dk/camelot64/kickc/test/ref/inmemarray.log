PARSING src/test/java/dk/camelot64/kickc/test/kc/inmemarray.kc

byte* SCREEN = $0400;
byte[] TXT = { 3, 1, 13, 5, 12, 15, 20, 32};

void main() {
   byte j = 0;
   for(byte i : 0..100) {
      SCREEN[i] = TXT[j];
      if(++j==8) {
         j = 0;
      }
   }
}
Adding pre/post-modifier (byte) main::j ← ++ (byte) main::j

STATEMENTS
  (byte*) SCREEN ← (word/signed word) 1024
  (byte[]) TXT ← { (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 13, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 12, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 20, (byte/signed byte/word/signed word) 32 }
proc (void()) main()
  (byte) main::j ← (byte/signed byte/word/signed word) 0
  (byte) main::i ← (byte/signed byte/word/signed word) 0
main::@1:
  *((byte*) SCREEN + (byte) main::i) ← *((byte[]) TXT + (byte) main::j)
  (byte) main::j ← ++ (byte) main::j
  (boolean~) main::$0 ← (byte) main::j == (byte/signed byte/word/signed word) 8
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  (byte) main::j ← (byte/signed byte/word/signed word) 0
main::@2:
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$2 ← (byte) main::i != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$2) goto main::@1
main::@return:
  return 
endproc // main()
  call main 

SYMBOLS
(byte*) SCREEN
(byte[]) TXT
(void()) main()
(boolean~) main::$0
(boolean~) main::$1
(boolean~) main::$2
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i
(byte) main::j

Promoting word/signed word to byte* in SCREEN ← ((byte*)) 1024
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← ((byte*)) (word/signed word) 1024
  (byte[]) TXT ← { (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 13, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 12, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 20, (byte/signed byte/word/signed word) 32 }
  to:@1
main: scope:[main]  from
  (byte) main::j ← (byte/signed byte/word/signed word) 0
  (byte) main::i ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  *((byte*) SCREEN + (byte) main::i) ← *((byte[]) TXT + (byte) main::j)
  (byte) main::j ← ++ (byte) main::j
  (boolean~) main::$0 ← (byte) main::j == (byte/signed byte/word/signed word) 8
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$2 ← (byte) main::i != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$2) goto main::@1
  to:main::@4
main::@3: scope:[main]  from main::@1
  (byte) main::j ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@4: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

Removing empty block main::@4
PROCEDURE MODIFY VARIABLE ANALYSIS

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte[]) TXT#0 ← { (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 13, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 12, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 20, (byte/signed byte/word/signed word) 32 }
  to:@1
main: scope:[main]  from @1
  (byte*) SCREEN#2 ← phi( @1/(byte*) SCREEN#4 )
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#2 main::@2/(byte*) SCREEN#3 )
  (byte) main::j#3 ← phi( main/(byte) main::j#0 main::@2/(byte) main::j#4 )
  *((byte*) SCREEN#1 + (byte) main::i#2) ← *((byte[]) TXT#0 + (byte) main::j#3)
  (byte) main::j#1 ← ++ (byte) main::j#3
  (boolean~) main::$0 ← (byte) main::j#1 == (byte/signed byte/word/signed word) 8
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte*) SCREEN#3 ← phi( main::@1/(byte*) SCREEN#1 main::@3/(byte*) SCREEN#5 )
  (byte) main::j#4 ← phi( main::@1/(byte) main::j#1 main::@3/(byte) main::j#2 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#4 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$2 ← (byte) main::i#1 != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN#5 ← phi( main::@1/(byte*) SCREEN#1 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  (byte) main::j#2 ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) SCREEN#4 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte*) SCREEN#4
(byte*) SCREEN#5
(byte[]) TXT
(byte[]) TXT#0
(void()) main()
(boolean~) main::$0
(boolean~) main::$1
(boolean~) main::$2
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::j
(byte) main::j#0
(byte) main::j#1
(byte) main::j#2
(byte) main::j#3
(byte) main::j#4

OPTIMIZING CONTROL FLOW GRAPH
Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
Inversing boolean not (boolean~) main::$1 ← (byte) main::j#1 != (byte/signed byte/word/signed word) 8 from (boolean~) main::$0 ← (byte) main::j#1 == (byte/signed byte/word/signed word) 8
Succesful SSA optimization Pass2UnaryNotSimplification
Not aliassing across scopes: SCREEN#2 SCREEN#4
Alias (byte) main::i#2 = (byte) main::i#4 
Alias (byte*) SCREEN#1 = (byte*) SCREEN#5 
Alias (byte*) SCREEN#0 = (byte*) SCREEN#4 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: SCREEN#2 SCREEN#0
Alias (byte) main::i#2 = (byte) main::i#3 
Alias (byte*) SCREEN#1 = (byte*) SCREEN#3 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: SCREEN#2 SCREEN#0
Self Phi Eliminated (byte*) SCREEN#1
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) SCREEN#2 (byte*) SCREEN#0
Redundant Phi (byte*) SCREEN#1 (byte*) SCREEN#2
Succesful SSA optimization Pass2RedundantPhiElimination
Simple Condition (boolean~) main::$1 if((byte) main::j#1!=(byte/signed byte/word/signed word) 8) goto main::@2
Simple Condition (boolean~) main::$2 if((byte) main::i#1!=(byte/signed byte/word/signed word) 101) goto main::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) SCREEN#0 = ((byte*))1024
Constant (const byte[]) TXT#0 = { 3, 1, 13, 5, 12, 15, 20, 32 }
Constant (const byte) main::j#0 = 0
Constant (const byte) main::i#0 = 0
Constant (const byte) main::j#2 = 0
Succesful SSA optimization Pass2ConstantIdentification
Not culling empty block because it shares successor with its predecessor. (label) main::@3
OPTIMIZING CONTROL FLOW GRAPH
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::j#2
Inlining constant with var siblings (const byte) main::j#2
Inlining constant with var siblings (const byte) main::j#2
Constant inlined main::i#0 = (byte/signed byte/word/signed word) 0
Constant inlined main::j#0 = (byte/signed byte/word/signed word) 0
Constant inlined main::j#2 = (byte/signed byte/word/signed word) 0
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @1 @end main main::@1 main::@3 main::@2 main::@return 
Added new block during phi lifting main::@5(between main::@2 and main::@1)
Added new block during phi lifting main::@6(between main::@1 and main::@2)
Block Sequence Planned @begin @1 @end main main::@1 main::@3 main::@2 main::@return main::@5 main::@6 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
CALL GRAPH
Calls in [] to main:2 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 3 initial phi equivalence classes
Coalesced [14] main::j#5 ← main::j#4
Coalesced [15] main::i#5 ← main::i#1
Coalesced [16] main::j#6 ← main::j#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@5
Not culling empty block because it shares successor with its predecessor. (label) main::@6
Block Sequence Planned @begin @1 @end main main::@1 main::@2 main::@return main::@6 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@6
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ] ( )
main: scope:[main]  from @1
  [4] phi() [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@2/(byte) main::i#1 ) [ main::j#3 main::i#2 ] ( main:2 [ main::j#3 main::i#2 ] )
  [5] (byte) main::j#3 ← phi( main/(byte/signed byte/word/signed word) 0 main::@2/(byte) main::j#4 ) [ main::j#3 main::i#2 ] ( main:2 [ main::j#3 main::i#2 ] )
  [6] *((const byte*) SCREEN#0 + (byte) main::i#2) ← *((const byte[]) TXT#0 + (byte) main::j#3) [ main::j#3 main::i#2 ] ( main:2 [ main::j#3 main::i#2 ] )
  [7] (byte) main::j#1 ← ++ (byte) main::j#3 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] )
  [8] if((byte) main::j#1!=(byte/signed byte/word/signed word) 8) goto main::@6 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@6
  [9] (byte) main::j#4 ← phi( main::@6/(byte) main::j#1 main::@1/(byte/signed byte/word/signed word) 0 ) [ main::i#2 main::j#4 ] ( main:2 [ main::i#2 main::j#4 ] )
  [10] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] )
  [11] if((byte) main::i#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] )
  to:main::@return
main::@return: scope:[main]  from main::@2
  [12] return  [ ] ( main:2 [ ] )
  to:@return
main::@6: scope:[main]  from main::@1
  [13] phi() [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] )
  to:main::@2

DOMINATORS
@begin dominated by  @begin 
@1 dominated by  @1 @begin 
@end dominated by  @1 @begin @end 
main dominated by  @1 @begin main 
main::@1 dominated by  @1 @begin main::@1 main 
main::@2 dominated by  @1 @begin main::@1 main::@2 main 
main::@return dominated by  main::@return @1 @begin main::@1 main::@2 main 
main::@6 dominated by  @1 @begin main::@1 main main::@6 

NATURAL LOOPS
Found back edge: Loop head: main::@1 tails: main::@2 blocks: null
Populated: Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@6 
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@6 

NATURAL LOOPS WITH DEPTH
Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@6 
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@6  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(byte[]) TXT
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 5.5
(byte) main::j
(byte) main::j#1 11.0
(byte) main::j#3 16.5
(byte) main::j#4 7.333333333333333

Initial phi equivalence classes
[ main::j#3 main::j#4 main::j#1 ]
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::j#3 main::j#4 main::j#1 ]
[ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:2 [ main::j#3 main::j#4 main::j#1 ]
Allocated zp ZP_BYTE:3 [ main::i#2 main::i#1 ]
Fragment synthesis pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuaa - Sub clobber prevents synthesis from vbuaa=pbuc1_derefidx_vbuaa
Fragment synthesis pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuz1 - Sub clobber prevents synthesis from vbuaa=pbuc1_derefidx_vbuz1
Fragment synthesis pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuaa - Sub clobber prevents synthesis from vbuaa=pbuc1_derefidx_vbuaa
Fragment synthesis pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuz1 - Sub clobber prevents synthesis from vbuaa=pbuc1_derefidx_vbuz1
Fragment synthesis pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuz1 - Sub clobber prevents synthesis from vbuaa=pbuc1_derefidx_vbuz1
Fragment synthesis pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuz1 - Sub clobber prevents synthesis from vbuaa=pbuc1_derefidx_vbuz1

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label j = 2
    .label i = 3
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG12 [5] phi (byte) main::j#3 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta j
    jmp b1
  //SEG13 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG15 [5] phi (byte) main::j#3 = (byte) main::j#4 [phi:main::@2->main::@1#1] -- register_copy 
    jmp b1
  //SEG16 main::@1
  b1:
  //SEG17 [6] *((const byte*) SCREEN#0 + (byte) main::i#2) ← *((const byte[]) TXT#0 + (byte) main::j#3) [ main::j#3 main::i#2 ] ( main:2 [ main::j#3 main::i#2 ] ) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    ldy j
    lda TXT,y
    ldy i
    sta SCREEN,y
  //SEG18 [7] (byte) main::j#1 ← ++ (byte) main::j#3 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- vbuz1=_inc_vbuz1 
    inc j
  //SEG19 [8] if((byte) main::j#1!=(byte/signed byte/word/signed word) 8) goto main::@6 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda j
    cmp #8
    bne b6_from_b1
  //SEG20 [9] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG21 [9] phi (byte) main::j#4 = (byte/signed byte/word/signed word) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta j
    jmp b2
  //SEG22 main::@2
  b2:
  //SEG23 [10] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG24 [11] if((byte) main::i#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$65
    bne b1_from_b2
    jmp breturn
  //SEG25 main::@return
  breturn:
  //SEG26 [12] return  [ ] ( main:2 [ ] )
    rts
  //SEG27 [13] phi from main::@1 to main::@6 [phi:main::@1->main::@6]
  b6_from_b1:
    jmp b6
  //SEG28 main::@6
  b6:
  //SEG29 [9] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  b2_from_b6:
  //SEG30 [9] phi (byte) main::j#4 = (byte) main::j#1 [phi:main::@6->main::@2#0] -- register_copy 
    jmp b2
}
  TXT: .byte 3, 1, $d, 5, $c, $f, $14, $20

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] *((const byte*) SCREEN#0 + (byte) main::i#2) ← *((const byte[]) TXT#0 + (byte) main::j#3) [ main::j#3 main::i#2 ] ( main:2 [ main::j#3 main::i#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::j#3 main::j#4 main::j#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ main::i#2 main::i#1 ]
Statement [6] *((const byte*) SCREEN#0 + (byte) main::i#2) ← *((const byte[]) TXT#0 + (byte) main::j#3) [ main::j#3 main::i#2 ] ( main:2 [ main::j#3 main::i#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::j#3 main::j#4 main::j#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::i#2 main::i#1 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 34.83: zp ZP_BYTE:2 [ main::j#3 main::j#4 main::j#1 ] 22: zp ZP_BYTE:3 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 483 combination reg byte y [ main::j#3 main::j#4 main::j#1 ] reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 483 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG12 [5] phi (byte) main::j#3 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #0
    jmp b1
  //SEG13 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG15 [5] phi (byte) main::j#3 = (byte) main::j#4 [phi:main::@2->main::@1#1] -- register_copy 
    jmp b1
  //SEG16 main::@1
  b1:
  //SEG17 [6] *((const byte*) SCREEN#0 + (byte) main::i#2) ← *((const byte[]) TXT#0 + (byte) main::j#3) [ main::j#3 main::i#2 ] ( main:2 [ main::j#3 main::i#2 ] ) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda TXT,y
    sta SCREEN,x
  //SEG18 [7] (byte) main::j#1 ← ++ (byte) main::j#3 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- vbuyy=_inc_vbuyy 
    iny
  //SEG19 [8] if((byte) main::j#1!=(byte/signed byte/word/signed word) 8) goto main::@6 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne b6_from_b1
  //SEG20 [9] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG21 [9] phi (byte) main::j#4 = (byte/signed byte/word/signed word) 0 [phi:main::@1->main::@2#0] -- vbuyy=vbuc1 
    ldy #0
    jmp b2
  //SEG22 main::@2
  b2:
  //SEG23 [10] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG24 [11] if((byte) main::i#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$65
    bne b1_from_b2
    jmp breturn
  //SEG25 main::@return
  breturn:
  //SEG26 [12] return  [ ] ( main:2 [ ] )
    rts
  //SEG27 [13] phi from main::@1 to main::@6 [phi:main::@1->main::@6]
  b6_from_b1:
    jmp b6
  //SEG28 main::@6
  b6:
  //SEG29 [9] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  b2_from_b6:
  //SEG30 [9] phi (byte) main::j#4 = (byte) main::j#1 [phi:main::@6->main::@2#0] -- register_copy 
    jmp b2
}
  TXT: .byte 3, 1, $d, 5, $c, $f, $14, $20

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b6
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b6_from_b1 with b6
Replacing label b1_from_b2 with b1
Removing instruction bbegin:
Removing instruction b1_from_bbegin:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b2:
Removing instruction b6_from_b1:
Removing instruction b2_from_b6:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b1:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b2_from_b1:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to b2 in bne b6
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b6:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp b2
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word) 1024
(byte[]) TXT
(const byte[]) TXT#0 TXT = { (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 13, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 12, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 20, (byte/signed byte/word/signed word) 32 }
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@6
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 5.5
(byte) main::j
(byte) main::j#1 reg byte y 11.0
(byte) main::j#3 reg byte y 16.5
(byte) main::j#4 reg byte y 7.333333333333333

reg byte y [ main::j#3 main::j#4 main::j#1 ]
reg byte x [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 297

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG12 [5] phi (byte) main::j#3 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #0
  //SEG13 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG15 [5] phi (byte) main::j#3 = (byte) main::j#4 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG16 main::@1
  b1:
  //SEG17 [6] *((const byte*) SCREEN#0 + (byte) main::i#2) ← *((const byte[]) TXT#0 + (byte) main::j#3) [ main::j#3 main::i#2 ] ( main:2 [ main::j#3 main::i#2 ] ) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda TXT,y
    sta SCREEN,x
  //SEG18 [7] (byte) main::j#1 ← ++ (byte) main::j#3 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- vbuyy=_inc_vbuyy 
    iny
  //SEG19 [8] if((byte) main::j#1!=(byte/signed byte/word/signed word) 8) goto main::@6 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne b2
  //SEG20 [9] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG21 [9] phi (byte) main::j#4 = (byte/signed byte/word/signed word) 0 [phi:main::@1->main::@2#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG22 main::@2
  b2:
  //SEG23 [10] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG24 [11] if((byte) main::i#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$65
    bne b1
  //SEG25 main::@return
  //SEG26 [12] return  [ ] ( main:2 [ ] )
    rts
  //SEG27 [13] phi from main::@1 to main::@6 [phi:main::@1->main::@6]
  //SEG28 main::@6
  //SEG29 [9] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  //SEG30 [9] phi (byte) main::j#4 = (byte) main::j#1 [phi:main::@6->main::@2#0] -- register_copy 
}
  TXT: .byte 3, 1, $d, 5, $c, $f, $14, $20

