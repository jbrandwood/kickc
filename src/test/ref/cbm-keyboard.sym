__constant char * const COLORRAM = (char *) 55296
__constant char * const DEFAULT_FONT_MIXED = (char *) 6144
__constant char * const DEFAULT_SCREEN = (char *) 1024
__constant char DIGITS[] = "0123456789abcdef"z
char GETIN()
__constant char * const GETIN::ch = (char *) 255
char GETIN::return
char GETIN::return#0 // reg byte a 20002.0
char GETIN::return#1 // reg byte a 36667.33333333333
__constant const char LIGHT_BLUE = $e
__constant char OFFSET_STRUCT_MOS6569_VICII_MEMORY = $18
__constant char OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant char RADIX_HEXADECIMAL_VALUES_CHAR[] = { $10 }
__constant char SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
__constant unsigned int STACK_BASE = $103
__constant struct MOS6569_VICII * const VICII = (struct MOS6569_VICII *) 53248
void __start()
void clrscr()
char clrscr::c
char clrscr::c#1 // reg byte y 20002.0
char clrscr::c#2 // reg byte y 12501.25
char clrscr::l
char clrscr::l#1 // reg byte x 2002.0
char clrscr::l#2 // reg byte x 333.6666666666667
char *clrscr::line_cols
char *clrscr::line_cols#1 // line_cols zp[2]:14 1001.0
char *clrscr::line_cols#5 // line_cols zp[2]:14 1500.375
char *clrscr::line_text
char *clrscr::line_text#1 // line_text zp[2]:16 667.3333333333334
char *clrscr::line_text#5 // line_text zp[2]:16 1714.7142857142858
void conio_c64_init()
__constant char * const conio_c64_init::BASIC_CURSOR_LINE = (char *) 214
char conio_c64_init::line
char conio_c64_init::line#0 // reg byte x 11.0
char conio_c64_init::line#2 // reg byte x 22.0
__loadstore char conio_cursor_x // zp[1]:19 1.9480522207792208E7
__loadstore char conio_cursor_y // zp[1]:9 3.4408602375268817E8
__loadstore char *conio_line_color // zp[2]:10 2.4285714515384617E8
__loadstore char *conio_line_text // zp[2]:12 2.4021739357608694E8
__stackcall void cputc(char c)
__constant char cputc::OFFSET_STACK_C = 0
char cputc::c
char cputc::c#0 // reg byte a 1.500000015E8
void cputln()
void cscroll()
void gotoxy(char x , char y)
char *gotoxy::$5 // zp[2]:28 202.0
char *gotoxy::$6 // zp[2]:24 202.0
unsigned int gotoxy::$7 // zp[2]:24 151.5
unsigned int gotoxy::$8 // zp[2]:26 202.0
unsigned int gotoxy::$9 // zp[2]:24 202.0
unsigned int gotoxy::line_offset
unsigned int gotoxy::line_offset#0 // line_offset zp[2]:24 101.0
char gotoxy::x
__constant char gotoxy::x#2 = 0 // x
char gotoxy::y
char gotoxy::y#2 // reg byte x 71.0
char gotoxy::y#4 // reg byte x 67.33333333333333
int main()
char main::$6 // zp[1]:20 101.0
char main::ch
char main::ch#0 // ch zp[1]:23 1331.625
char main::current
char main::current#2 // current zp[1]:22 4220.8
char main::current#4 // current zp[1]:22 202.0
int main::return
__constant char main::s[2] = "'"
__constant char main::s1[4] = "'($"
__constant char main::s2[3] = ") "
char *main::toD0181_gfx
char main::toD0181_return
__constant char main::toD0181_return#0 = byte1 (unsigned int)DEFAULT_SCREEN&$3fff*4|byte1 (unsigned int)DEFAULT_FONT_MIXED/4&$f // toD0181_return
char *main::toD0181_screen
void * memcpy(void *destination , void *source , unsigned int num)
void *memcpy::destination
void *memcpy::destination#2 // destination zp[2]:4
char *memcpy::dst
char *memcpy::dst#1 // dst zp[2]:4 1.0000000000001E13
char *memcpy::dst#2 // dst zp[2]:4 1.0033333333334666E13
char *memcpy::dst#4 // dst zp[2]:4 2.00000000002E11
unsigned int memcpy::num
void *memcpy::return
void *memcpy::source
void *memcpy::source#2 // source zp[2]:2
char *memcpy::src
char *memcpy::src#1 // src zp[2]:2 2.0000000000002E13
char *memcpy::src#2 // src zp[2]:2 1.002500000000125E13
char *memcpy::src#4 // src zp[2]:2 1.00000000001E11
char *memcpy::src_end
char *memcpy::src_end#0 // src_end zp[2]:6 1.26250000000025E12
void * memset(void *str , char c , unsigned int num)
char memset::c
char memset::c#4 // reg byte x 1.4285714285715715E12
char *memset::dst
char *memset::dst#1 // dst zp[2]:2 2.0000000000002E13
char *memset::dst#2 // dst zp[2]:2 1.3366666666668332E13
char *memset::dst#4 // dst zp[2]:2 2.00000000002E11
char *memset::end
char *memset::end#0 // end zp[2]:4 1.6833333333336665E12
unsigned int memset::num
void *memset::return
void *memset::str
void *memset::str#3 // str zp[2]:2
char petscii_to_screencode(char petscii)
char petscii_to_screencode::petscii
char petscii_to_screencode::petscii#0 // reg byte a 1730.4285714285716
char petscii_to_screencode::return
char petscii_to_screencode::return#0 // reg byte a 202.0
char petscii_to_screencode::return#1 // reg byte a 2002.0
char petscii_to_screencode::return#10 // reg byte a 2035.666666666667
char petscii_to_screencode::return#3 // reg byte a 2002.0
char petscii_to_screencode::return#4 // reg byte a 2002.0
char petscii_to_screencode::return#5 // reg byte a 2002.0
char petscii_to_screencode::return#6 // reg byte a 2002.0
__loadstore struct printf_buffer_number printf_buffer = {} // mem[12]
void printf_number_buffer(void (*putc)(char) , char buffer_sign , char *buffer_digits , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
unsigned int printf_number_buffer::$19 // zp[2]:14 10001.0
struct printf_buffer_number printf_number_buffer::buffer
char *printf_number_buffer::buffer_digits
__constant char *printf_number_buffer::buffer_digits#0 = (char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS // buffer_digits
char printf_number_buffer::buffer_sign
char printf_number_buffer::buffer_sign#0 // buffer_sign zp[1]:8 1722.4444444444443
struct printf_format_number printf_number_buffer::format
char printf_number_buffer::format_justify_left
char printf_number_buffer::format_min_length
char printf_number_buffer::format_radix
char printf_number_buffer::format_sign_always
char printf_number_buffer::format_upper_case
char printf_number_buffer::format_zero_padding
signed char printf_number_buffer::len
signed char printf_number_buffer::len#0 // reg byte x 15001.5
signed char printf_number_buffer::len#1 // reg byte x 20002.0
signed char printf_number_buffer::len#2 // reg byte x 30003.0
signed char printf_number_buffer::padding
signed char printf_number_buffer::padding#1 // reg byte a 10001.0
signed char printf_number_buffer::padding#10 // reg byte a 10001.0
void (*printf_number_buffer::putc)(char)
void printf_padding(void (*putc)(char) , char pad , char length)
char printf_padding::i
char printf_padding::i#1 // i zp[1]:18 2.0000002E7
char printf_padding::i#2 // i zp[1]:18 6000000.6
char printf_padding::length
char printf_padding::length#0 // length zp[1]:21 1251250.25
char printf_padding::pad
__constant char printf_padding::pad#0 = ' ' // pad
void (*printf_padding::putc)(char)
void printf_str(void (*putc)(char) , const char *s)
char printf_str::c
char printf_str::c#1 // reg byte a 1.0000001E7
void (*printf_str::putc)(char)
void (*printf_str::putc#6)(char) // putc zp[2]:16
const char *printf_str::s
const char *printf_str::s#0 // s zp[2]:14 1.0000001E7
const char *printf_str::s#5 // s zp[2]:14 1.5050002E7
const char *printf_str::s#6 // s zp[2]:14 100001.0
void printf_uchar(void (*putc)(char) , char uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_format_number printf_uchar::format
char printf_uchar::format_justify_left
char printf_uchar::format_min_length
__constant char printf_uchar::format_min_length#0 = 2 // format_min_length
char printf_uchar::format_radix
char printf_uchar::format_sign_always
char printf_uchar::format_upper_case
char printf_uchar::format_zero_padding
void (*printf_uchar::putc)(char)
__constant void (*printf_uchar::putc#0)(char) = &cputc // putc
char printf_uchar::uvalue
char printf_uchar::uvalue#0 // reg byte x 367.33333333333337
unsigned int strlen(char *str)
unsigned int strlen::len
unsigned int strlen::len#1 // len zp[2]:14 1.0000001E7
unsigned int strlen::len#2 // len zp[2]:14 5002500.75
unsigned int strlen::return
unsigned int strlen::return#2 // return zp[2]:14 20002.0
char *strlen::str
char *strlen::str#0 // str zp[2]:16 2.0000002E7
char *strlen::str#2 // str zp[2]:16 1.0000001E7
void uctoa(char value , char *buffer , char radix)
char *uctoa::buffer
char *uctoa::buffer#11 // buffer zp[2]:16 335000.50000000006
char *uctoa::buffer#14 // buffer zp[2]:16 1500001.5
char *uctoa::buffer#3 // buffer zp[2]:16 20002.0
char *uctoa::buffer#4 // buffer zp[2]:16 2000002.0
char uctoa::digit
char uctoa::digit#1 // digit zp[1]:18 2000002.0
char uctoa::digit#2 // digit zp[1]:18 307692.6153846154
char uctoa::digit_value
char uctoa::digit_value#0 // digit_value zp[1]:8 600000.6000000001
char *uctoa::digit_values
char uctoa::max_digits
__constant char uctoa::max_digits#2 = 2 // max_digits
char uctoa::radix
char uctoa::started
char uctoa::started#2 // started zp[1]:20 600000.6000000001
char uctoa::started#4 // started zp[1]:20 1000001.0
char uctoa::value
char uctoa::value#0 // reg byte x 1000001.0
char uctoa::value#1 // reg byte x 5501.0
char uctoa::value#2 // reg byte x 670001.0000000001
char uctoa::value#6 // reg byte x 1500001.5
char uctoa_append(char *buffer , char value , char sub)
char *uctoa_append::buffer
char *uctoa_append::buffer#0 // buffer zp[2]:16 1375000.25
char uctoa_append::digit
char uctoa_append::digit#1 // reg byte y 1.0000000001E10
char uctoa_append::digit#2 // reg byte y 1.00050000015E10
char uctoa_append::return
char uctoa_append::return#0 // reg byte x 2000002.0
char uctoa_append::sub
char uctoa_append::sub#0 // sub zp[1]:8 3.3335000005E9
char uctoa_append::value
char uctoa_append::value#0 // reg byte x 3666667.333333333
char uctoa_append::value#1 // reg byte x 2.0000000002E10
char uctoa_append::value#2 // reg byte x 5.001833334166666E9

reg byte x [ conio_c64_init::line#2 conio_c64_init::line#0 ]
zp[1]:22 [ main::current#2 main::current#4 ]
reg byte x [ gotoxy::y#4 gotoxy::y#2 ]
reg byte x [ clrscr::l#2 clrscr::l#1 ]
reg byte y [ clrscr::c#2 clrscr::c#1 ]
reg byte a [ petscii_to_screencode::return#10 petscii_to_screencode::return#1 petscii_to_screencode::petscii#0 petscii_to_screencode::return#3 petscii_to_screencode::return#4 petscii_to_screencode::return#5 petscii_to_screencode::return#6 ]
reg byte x [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
reg byte x [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
reg byte a [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
zp[2]:2 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
reg byte x [ memset::c#4 ]
reg byte x [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
reg byte y [ uctoa_append::digit#2 uctoa_append::digit#1 ]
zp[2]:16 [ strlen::str#2 strlen::str#0 uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 printf_str::putc#6 clrscr::line_text#5 clrscr::line_text#1 ]
zp[2]:14 [ strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 printf_str::s#5 printf_str::s#6 printf_str::s#0 clrscr::line_cols#5 clrscr::line_cols#1 ]
zp[1]:18 [ printf_padding::i#2 printf_padding::i#1 uctoa::digit#2 uctoa::digit#1 ]
zp[1]:19 [ conio_cursor_x ]
zp[1]:9 [ conio_cursor_y ]
zp[2]:12 [ conio_line_text ]
zp[2]:10 [ conio_line_color ]
reg byte a [ cputc::c#0 ]
reg byte a [ GETIN::return#0 ]
zp[1]:23 [ main::ch#0 ]
reg byte a [ petscii_to_screencode::return#0 ]
zp[1]:20 [ main::$6 uctoa::started#2 uctoa::started#4 ]
reg byte x [ printf_uchar::uvalue#0 ]
zp[2]:24 [ gotoxy::$7 gotoxy::$9 gotoxy::line_offset#0 gotoxy::$6 ]
zp[2]:26 [ gotoxy::$8 ]
zp[2]:28 [ gotoxy::$5 ]
reg byte a [ GETIN::return#1 ]
reg byte a [ printf_str::c#1 ]
zp[1]:8 [ uctoa::digit_value#0 uctoa_append::sub#0 printf_number_buffer::buffer_sign#0 ]
reg byte x [ uctoa_append::return#0 ]
zp[1]:21 [ printf_padding::length#0 ]
zp[2]:6 [ memcpy::src_end#0 ]
zp[2]:4 [ memset::end#0 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
mem[12] [ printf_buffer ]
