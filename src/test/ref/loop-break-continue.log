
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::screen#0 = (char *)$400
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@4
  main::screen#4 = phi( main/main::screen#0, main::@4/main::screen#5 )
  main::i#2 = phi( main/main::i#0, main::@4/main::i#1 )
  main::$0 = main::str[main::i#2] == 0
  main::$1 = ! main::$0
  if(main::$1) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  main::screen#3 = phi( main::@1/main::screen#4 )
  main::i#3 = phi( main::@1/main::i#2 )
  main::$2 = main::str[main::i#3] == ' '
  main::$3 = ! main::$2
  if(main::$3) goto main::@3
  to:main::@4
main::@3: scope:[main]  from main::@2
  main::screen#2 = phi( main::@2/main::screen#3 )
  main::i#4 = phi( main::@2/main::i#3 )
  *main::screen#2 = main::str[main::i#4]
  main::screen#1 = ++ main::screen#2
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@3
  main::screen#5 = phi( main::@2/main::screen#3, main::@3/main::screen#1 )
  main::i#5 = phi( main::@2/main::i#3, main::@3/main::i#4 )
  main::i#1 = main::i#5 + rangenext(0,$ff)
  main::$4 = main::i#1 != rangelast(0,$ff)
  if(main::$4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1 main::@4
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
bool main::$0
bool main::$1
bool main::$2
bool main::$3
bool main::$4
char main::i
char main::i#0
char main::i#1
char main::i#2
char main::i#3
char main::i#4
char main::i#5
char *main::screen
char *main::screen#0
char *main::screen#1
char *main::screen#2
char *main::screen#3
char *main::screen#4
char *main::screen#5
__constant char main::str[] = "hello brave new world"

Adding number conversion cast (unumber) 0 in main::$0 = main::str[main::i#2] == 0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [4] main::$1 = main::str[main::i#2] != 0 from [3] main::$0 = main::str[main::i#2] == 0
Inversing boolean not [8] main::$3 = main::str[main::i#3] != ' ' from [7] main::$2 = main::str[main::i#3] == ' '
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::i#2 = main::i#3 main::i#4 
Alias main::screen#2 = main::screen#3 main::screen#4 
Successful SSA optimization Pass2AliasElimination
Alias main::i#2 = main::i#5 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$1 [4] if(main::str[main::i#2]!=0) goto main::@2
Simple Condition main::$3 [6] if(main::str[main::i#2]!=' ') goto main::@3
Simple Condition main::$4 [12] if(main::i#1!=rangelast(0,$ff)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [6] if(main::str[main::i#2]==' ') goto main::@4
Negating conditional jump and destination [12] if(main::i#1==rangelast(0,$ff)) goto main::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant main::screen#0 = (char *) 1024
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [10] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [12] if(main::i#1==rangelast(0,$ff)) goto main::@return to 0
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 0 in [7] if(main::i#1==0) goto main::@return
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::screen#0
Inlining constant with var siblings main::i#0
Constant inlined main::screen#0 = (char *) 1024
Constant inlined main::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@5(between main::@4 and main::@1)
Added new block during phi lifting main::@6(between main::@2 and main::@4)
Adding NOP phi() at start of main
CALL GRAPH

Created 3 initial phi equivalence classes
Coalesced [7] main::screen#8 = main::screen#1
Coalesced [11] main::i#6 = main::i#1
Coalesced [12] main::screen#6 = main::screen#5
Coalesced (already) [13] main::screen#7 = main::screen#2
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@5
Culled Empty Block label main::@6
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [1] main::screen#2 = phi( main/(char *) 1024, main::@4/main::screen#5 )
  [1] main::i#2 = phi( main/0, main::@4/main::i#1 )
  [2] if(main::str[main::i#2]!=0) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1 main::@4
  [3] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [4] if(main::str[main::i#2]==' ') goto main::@4
  to:main::@3
main::@3: scope:[main]  from main::@2
  [5] *main::screen#2 = main::str[main::i#2]
  [6] main::screen#1 = ++ main::screen#2
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@3
  [7] main::screen#5 = phi( main::@2/main::screen#2, main::@3/main::screen#1 )
  [8] main::i#1 = ++ main::i#2
  [9] if(main::i#1==0) goto main::@return
  to:main::@1


VARIABLE REGISTER WEIGHTS
void main()
char main::i
char main::i#1 // 16.5
char main::i#2 // 9.166666666666666
char *main::screen
char *main::screen#1 // 22.0
char *main::screen#2 // 11.0
char *main::screen#5 // 11.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::screen#2 main::screen#5 main::screen#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::screen#2 main::screen#5 main::screen#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[2]:3 [ main::screen#2 main::screen#5 main::screen#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] if(main::str[main::i#2]!=0) goto main::@2 [ main::i#2 main::screen#2 ] (  [ main::i#2 main::screen#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [4] if(main::str[main::i#2]==' ') goto main::@4 [ main::i#2 main::screen#2 ] (  [ main::i#2 main::screen#2 ] { }  ) always clobbers reg byte a 
Statement [5] *main::screen#2 = main::str[main::i#2] [ main::i#2 main::screen#2 ] (  [ main::i#2 main::screen#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [2] if(main::str[main::i#2]!=0) goto main::@2 [ main::i#2 main::screen#2 ] (  [ main::i#2 main::screen#2 ] { }  ) always clobbers reg byte a 
Statement [4] if(main::str[main::i#2]==' ') goto main::@4 [ main::i#2 main::screen#2 ] (  [ main::i#2 main::screen#2 ] { }  ) always clobbers reg byte a 
Statement [5] *main::screen#2 = main::str[main::i#2] [ main::i#2 main::screen#2 ] (  [ main::i#2 main::screen#2 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[2]:3 [ main::screen#2 main::screen#5 main::screen#1 ] : zp[2]:3 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 44: zp[2]:3 [ main::screen#2 main::screen#5 main::screen#1 ] 25.67: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 771 combination zp[2]:3 [ main::screen#2 main::screen#5 main::screen#1 ] reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 771 combination 
Allocated (was zp[2]:3) zp[2]:2 [ main::screen#2 main::screen#5 main::screen#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Illustrates both break & continue statements in a loop
// Prints a message ending at NUL skipping all spaces
  // Upstart
  // Commodore 64 PRG executable file
.file [name="loop-break-continue.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label screen = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::screen#2 = (char *) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [1] phi main::i#2 = 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // main::@1
  __b1:
    // [2] if(main::str[main::i#2]!=0) goto main::@2 -- pbuc1_derefidx_vbuxx_neq_0_then_la1 
    lda str,x
    cmp #0
    bne __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [3] return 
    rts
    // main::@2
  __b2:
    // [4] if(main::str[main::i#2]==' ') goto main::@4 -- pbuc1_derefidx_vbuxx_eq_vbuc2_then_la1 
    lda str,x
    cmp #' '
    beq __b4_from___b2
    jmp __b3
    // main::@3
  __b3:
    // [5] *main::screen#2 = main::str[main::i#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda str,x
    ldy #0
    sta (screen),y
    // [6] main::screen#1 = ++ main::screen#2 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [7] phi from main::@2 main::@3 to main::@4 [phi:main::@2/main::@3->main::@4]
  __b4_from___b2:
  __b4_from___b3:
    // [7] phi main::screen#5 = main::screen#2 [phi:main::@2/main::@3->main::@4#0] -- register_copy 
    jmp __b4
    // main::@4
  __b4:
    // [8] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [9] if(main::i#1==0) goto main::@return -- vbuxx_eq_0_then_la1 
    cpx #0
    beq __breturn
    // [1] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [1] phi main::screen#2 = main::screen#5 [phi:main::@4->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@4->main::@1#1] -- register_copy 
    jmp __b1
  .segment Data
    str: .text "hello brave new world"
    .byte 0
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b4
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b4_from___b2 with __b4
Removing instruction __b4_from___b2:
Removing instruction __b4_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __b1_from___b4:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
char main::i
char main::i#1 // reg byte x 16.5
char main::i#2 // reg byte x 9.166666666666666
char *main::screen
char *main::screen#1 // screen zp[2]:2 22.0
char *main::screen#2 // screen zp[2]:2 11.0
char *main::screen#5 // screen zp[2]:2 11.0
__constant char main::str[] = "hello brave new world"

reg byte x [ main::i#2 main::i#1 ]
zp[2]:2 [ main::screen#2 main::screen#5 main::screen#1 ]


FINAL ASSEMBLER
Score: 651

  // File Comments
// Illustrates both break & continue statements in a loop
// Prints a message ending at NUL skipping all spaces
  // Upstart
  // Commodore 64 PRG executable file
.file [name="loop-break-continue.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label screen = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::screen#2 = (char *) 1024 [phi:main->main::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [1] phi main::i#2 = 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // main::@1
  __b1:
    // if(str[i]==0)
    // [2] if(main::str[main::i#2]!=0) goto main::@2 -- pbuc1_derefidx_vbuxx_neq_0_then_la1 
    lda str,x
    cmp #0
    bne __b2
    // main::@return
  __breturn:
    // }
    // [3] return 
    rts
    // main::@2
  __b2:
    // if(str[i]==' ')
    // [4] if(main::str[main::i#2]==' ') goto main::@4 -- pbuc1_derefidx_vbuxx_eq_vbuc2_then_la1 
    lda str,x
    cmp #' '
    beq __b4
    // main::@3
    // *screen++ = str[i]
    // [5] *main::screen#2 = main::str[main::i#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda str,x
    ldy #0
    sta (screen),y
    // *screen++ = str[i];
    // [6] main::screen#1 = ++ main::screen#2 -- pbuz1=_inc_pbuz1 
    inc.z screen
    bne !+
    inc.z screen+1
  !:
    // [7] phi from main::@2 main::@3 to main::@4 [phi:main::@2/main::@3->main::@4]
    // [7] phi main::screen#5 = main::screen#2 [phi:main::@2/main::@3->main::@4#0] -- register_copy 
    // main::@4
  __b4:
    // for( byte i: 0..255)
    // [8] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [9] if(main::i#1==0) goto main::@return -- vbuxx_eq_0_then_la1 
    cpx #0
    beq __breturn
    // [1] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [1] phi main::screen#2 = main::screen#5 [phi:main::@4->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@4->main::@1#1] -- register_copy 
    jmp __b1
  .segment Data
    str: .text "hello brave new world"
    .byte 0
}
  // File Data

