Identified constant variable (byte) call
Identified constant variable (byte*) screen
Culled Empty Block (label) main::@1
Culled Empty Block (label) @1
Culled Empty Block (label) proc::@1

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@2

(void()) main()
main: scope:[main]  from @2
  *((const byte*) screen + (number) 0) ← (byte) 'a'
  (bool~) main::$0 ← (const byte) call != (number) 0
  (bool~) main::$1 ← ! (bool~) main::$0
  if((bool~) main::$1) goto main::@return
  to:main::@2
main::@2: scope:[main]  from main
  call proc 
  to:main::@3
main::@3: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main main::@3
  return 
  to:@return

(void()) proc()
proc: scope:[proc]  from main::@2
  *((const byte*) screen + (number) 1) ← (byte) 'a'
  (bool~) proc::$0 ← *((const byte*) screen + (number) 1) != (number) 0
  (bool~) proc::$1 ← ! (bool~) proc::$0
  if((bool~) proc::$1) goto proc::@return
  to:proc::@2
proc::@2: scope:[proc]  from proc
  *((const byte*) screen + (number) 2) ← (byte) 'a'
  to:proc::@return
proc::@return: scope:[proc]  from proc proc::@2
  return 
  to:@return
@2: scope:[]  from @begin
  call main 
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @2
(label) @3
(label) @begin
(label) @end
(const byte) call = (byte) 0
(void()) main()
(bool~) main::$0
(bool~) main::$1
(label) main::@2
(label) main::@3
(label) main::@return
(void()) proc()
(bool~) proc::$0
(bool~) proc::$1
(label) proc::@2
(label) proc::@return
(const byte*) screen = (byte*)(number) $400

Adding number conversion cast (unumber) 0 in *((const byte*) screen + (number) 0) ← (byte) 'a'
Adding number conversion cast (unumber) 0 in (bool~) main::$0 ← (const byte) call != (number) 0
Adding number conversion cast (unumber) 1 in *((const byte*) screen + (number) 1) ← (byte) 'a'
Adding number conversion cast (unumber) 0 in (bool~) proc::$0 ← *((const byte*) screen + (number) 1) != (number) 0
Adding number conversion cast (unumber) 1 in (bool~) proc::$0 ← *((const byte*) screen + (number) 1) != (unumber)(number) 0
Adding number conversion cast (unumber) 2 in *((const byte*) screen + (number) 2) ← (byte) 'a'
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [2] (bool~) main::$1 ← (const byte) call == (byte) 0 from [1] (bool~) main::$0 ← (const byte) call != (byte) 0
Inversing boolean not [8] (bool~) proc::$1 ← *((const byte*) screen + (byte) 1) == (byte) 0 from [7] (bool~) proc::$0 ← *((const byte*) screen + (byte) 1) != (byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Simple Condition (bool~) main::$1 [3] if((const byte) call==(byte) 0) goto main::@return
Simple Condition (bool~) proc::$1 [9] if(*((const byte*) screen + (byte) 1)==(byte) 0) goto proc::@return
Successful SSA optimization Pass2ConditionalJumpSimplification
if() condition always true - replacing block destination [3] if((const byte) call==(byte) 0) goto main::@return
Successful SSA optimization Pass2ConstantIfs
Simplifying expression containing zero screen in [0] *((const byte*) screen + (byte) 0) ← (byte) 'a'
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) call
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@2
Removing unused block main::@3
Removing unused procedure proc
Removing unused procedure block proc
Removing unused procedure block proc::@2
Removing unused procedure block proc::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @3
Renumbering block @2 to @1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((const byte*) screen) ← (byte) 'a'
  to:main::@return
main::@return: scope:[main]  from main
  [5] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests that a procedure that is never called, but requires static analysis is correctly eliminated
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [4] *((const byte*) screen) ← (byte) 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta screen
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) screen) ← (byte) 'a' [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 27 combination 
Uplifting [] best 27 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests that a procedure that is never called, but requires static analysis is correctly eliminated
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [4] *((const byte*) screen) ← (byte) 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta screen
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __bbegin with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@return
(const byte*) screen = (byte*) 1024



FINAL ASSEMBLER
Score: 12

  // File Comments
// Tests that a procedure that is never called, but requires static analysis is correctly eliminated
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label screen = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // screen[0] = 'a'
    // [4] *((const byte*) screen) ← (byte) 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta screen
    // main::@return
    // }
    // [5] return 
    rts
}
  // File Data

