Inlined call vicSelectGfxBank::$0 = call toDd00(vicSelectGfxBank::gfx)
Inlined call main::$1 = call memset_fast(main::screen, main::i, $100)
Inlined call call __init
Eliminating unused variable with no statement gotoxy::$4

CONTROL FLOW GRAPH SSA

void clrscr()
clrscr: scope:[clrscr]  from main
  clrscr::line_text#0 = DEFAULT_SCREEN
  clrscr::line_cols#0 = COLORRAM
  clrscr::l#0 = 0
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  clrscr::line_cols#6 = phi( clrscr/clrscr::line_cols#0, clrscr::@5/clrscr::line_cols#1 )
  clrscr::line_text#6 = phi( clrscr/clrscr::line_text#0, clrscr::@5/clrscr::line_text#1 )
  clrscr::l#2 = phi( clrscr/clrscr::l#0, clrscr::@5/clrscr::l#1 )
  clrscr::$0 = clrscr::l#2 < $19
  if(clrscr::$0) goto clrscr::@2
  to:clrscr::@return
clrscr::@2: scope:[clrscr]  from clrscr::@1
  clrscr::l#5 = phi( clrscr::@1/clrscr::l#2 )
  clrscr::line_cols#5 = phi( clrscr::@1/clrscr::line_cols#6 )
  clrscr::line_text#5 = phi( clrscr::@1/clrscr::line_text#6 )
  clrscr::c#0 = 0
  to:clrscr::@3
clrscr::@3: scope:[clrscr]  from clrscr::@2 clrscr::@4
  clrscr::l#4 = phi( clrscr::@2/clrscr::l#5, clrscr::@4/clrscr::l#6 )
  clrscr::line_cols#4 = phi( clrscr::@2/clrscr::line_cols#5, clrscr::@4/clrscr::line_cols#2 )
  clrscr::line_text#4 = phi( clrscr::@2/clrscr::line_text#5, clrscr::@4/clrscr::line_text#2 )
  clrscr::c#2 = phi( clrscr::@2/clrscr::c#0, clrscr::@4/clrscr::c#1 )
  clrscr::$1 = clrscr::c#2 < $28
  if(clrscr::$1) goto clrscr::@4
  to:clrscr::@5
clrscr::@4: scope:[clrscr]  from clrscr::@3
  clrscr::l#6 = phi( clrscr::@3/clrscr::l#4 )
  clrscr::line_cols#2 = phi( clrscr::@3/clrscr::line_cols#4 )
  clrscr::c#3 = phi( clrscr::@3/clrscr::c#2 )
  clrscr::line_text#2 = phi( clrscr::@3/clrscr::line_text#4 )
  clrscr::line_text#2[clrscr::c#3] = ' '
  clrscr::line_cols#2[clrscr::c#3] = conio_textcolor
  clrscr::c#1 = ++ clrscr::c#3
  to:clrscr::@3
clrscr::@5: scope:[clrscr]  from clrscr::@3
  clrscr::l#3 = phi( clrscr::@3/clrscr::l#4 )
  clrscr::line_cols#3 = phi( clrscr::@3/clrscr::line_cols#4 )
  clrscr::line_text#3 = phi( clrscr::@3/clrscr::line_text#4 )
  clrscr::line_text#1 = clrscr::line_text#3 + $28
  clrscr::line_cols#1 = clrscr::line_cols#3 + $28
  clrscr::l#1 = ++ clrscr::l#3
  to:clrscr::@1
clrscr::@return: scope:[clrscr]  from clrscr::@1
  return 
  to:@return

void gotoxy(char x , char y)
gotoxy: scope:[gotoxy]  from conio_c64_init::@1
  gotoxy::x#3 = phi( conio_c64_init::@1/gotoxy::x#1 )
  gotoxy::y#2 = phi( conio_c64_init::@1/gotoxy::y#1 )
  gotoxy::$0 = gotoxy::y#2 > $19
  gotoxy::$1 = ! gotoxy::$0
  if(gotoxy::$1) goto gotoxy::@1
  to:gotoxy::@2
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@2
  gotoxy::x#2 = phi( gotoxy/gotoxy::x#3, gotoxy::@2/gotoxy::x#4 )
  gotoxy::$2 = gotoxy::x#2 >= $28
  gotoxy::$3 = ! gotoxy::$2
  if(gotoxy::$3) goto gotoxy::@return
  to:gotoxy::@3
gotoxy::@2: scope:[gotoxy]  from gotoxy
  gotoxy::x#4 = phi( gotoxy/gotoxy::x#3 )
  gotoxy::y#0 = 0
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy::@1
  gotoxy::x#0 = 0
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@1 gotoxy::@3
  return 
  to:@return

char * memcpy_fast(char *destination , char *source , char num)
memcpy_fast: scope:[memcpy_fast]  from main::@2
  memcpy_fast::source#2 = phi( main::@2/memcpy_fast::source#0 )
  memcpy_fast::num#3 = phi( main::@2/memcpy_fast::num#1 )
  memcpy_fast::destination#3 = phi( main::@2/memcpy_fast::destination#0 )
  to:memcpy_fast::@1
memcpy_fast::@1: scope:[memcpy_fast]  from memcpy_fast memcpy_fast::@1
  memcpy_fast::source#1 = phi( memcpy_fast/memcpy_fast::source#2, memcpy_fast::@1/memcpy_fast::source#1 )
  memcpy_fast::num#2 = phi( memcpy_fast/memcpy_fast::num#3, memcpy_fast::@1/memcpy_fast::num#0 )
  memcpy_fast::destination#1 = phi( memcpy_fast/memcpy_fast::destination#3, memcpy_fast::@1/memcpy_fast::destination#1 )
  memcpy_fast::$0 = memcpy_fast::destination#1 + memcpy_fast::num#2
  memcpy_fast::$1 = memcpy_fast::source#1 + memcpy_fast::num#2
  *memcpy_fast::$0 = *memcpy_fast::$1
  memcpy_fast::num#0 = -- memcpy_fast::num#2
  memcpy_fast::$2 = 0 != memcpy_fast::num#0
  if(memcpy_fast::$2) goto memcpy_fast::@1
  to:memcpy_fast::@2
memcpy_fast::@2: scope:[memcpy_fast]  from memcpy_fast::@1
  memcpy_fast::destination#2 = phi( memcpy_fast::@1/memcpy_fast::destination#1 )
  memcpy_fast::return#0 = memcpy_fast::destination#2
  to:memcpy_fast::@return
memcpy_fast::@return: scope:[memcpy_fast]  from memcpy_fast::@2
  memcpy_fast::return#3 = phi( memcpy_fast::@2/memcpy_fast::return#0 )
  memcpy_fast::return#1 = memcpy_fast::return#3
  return 
  to:@return

void conio_c64_init()
conio_c64_init: scope:[conio_c64_init]  from __start::__init1
  conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE
  conio_c64_init::$0 = conio_c64_init::line#0 >= $19
  conio_c64_init::$1 = ! conio_c64_init::$0
  if(conio_c64_init::$1) goto conio_c64_init::@1
  to:conio_c64_init::@2
conio_c64_init::@1: scope:[conio_c64_init]  from conio_c64_init conio_c64_init::@2
  conio_c64_init::line#2 = phi( conio_c64_init/conio_c64_init::line#0, conio_c64_init::@2/conio_c64_init::line#1 )
  gotoxy::x#1 = 0
  gotoxy::y#1 = conio_c64_init::line#2
  call gotoxy
  to:conio_c64_init::@3
conio_c64_init::@3: scope:[conio_c64_init]  from conio_c64_init::@1
  to:conio_c64_init::@return
conio_c64_init::@2: scope:[conio_c64_init]  from conio_c64_init
  conio_c64_init::line#1 = $19-1
  to:conio_c64_init::@1
conio_c64_init::@return: scope:[conio_c64_init]  from conio_c64_init::@3
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  *((char *)$d018) = $17
  call clrscr
  to:main::@3
main::@3: scope:[main]  from main
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@4
  main::i#2 = phi( main::@3/main::i#0, main::@4/main::i#1 )
  main::memset_fast1_destination#0 = main::screen
  main::memset_fast1_c#0 = main::i#2
  main::memset_fast1_num#0 = $100
  to:main::memset_fast1
main::memset_fast1: scope:[main]  from main::@1
  main::i#6 = phi( main::@1/main::i#2 )
  main::memset_fast1_c#2 = phi( main::@1/main::memset_fast1_c#0 )
  main::memset_fast1_num#3 = phi( main::@1/main::memset_fast1_num#0 )
  main::memset_fast1_destination#2 = phi( main::@1/main::memset_fast1_destination#0 )
  to:main::memset_fast1_@1
main::memset_fast1_@1: scope:[main]  from main::memset_fast1 main::memset_fast1_@1
  main::i#5 = phi( main::memset_fast1/main::i#6, main::memset_fast1_@1/main::i#5 )
  main::memset_fast1_c#1 = phi( main::memset_fast1/main::memset_fast1_c#2, main::memset_fast1_@1/main::memset_fast1_c#1 )
  main::memset_fast1_num#2 = phi( main::memset_fast1/main::memset_fast1_num#3, main::memset_fast1_@1/main::memset_fast1_num#1 )
  main::memset_fast1_destination#1 = phi( main::memset_fast1/main::memset_fast1_destination#2, main::memset_fast1_@1/main::memset_fast1_destination#1 )
  main::memset_fast1_$0 = main::memset_fast1_destination#1 + main::memset_fast1_num#2
  *main::memset_fast1_$0 = main::memset_fast1_c#1
  main::memset_fast1_num#1 = -- main::memset_fast1_num#2
  main::memset_fast1_$1 = 0 != main::memset_fast1_num#1
  if(main::memset_fast1_$1) goto main::memset_fast1_@1
  to:main::@2
main::@2: scope:[main]  from main::memset_fast1_@1
  main::i#4 = phi( main::memset_fast1_@1/main::i#5 )
  memcpy_fast::destination#0 = main::bottom
  memcpy_fast::source#0 = main::screen
  memcpy_fast::num#1 = $100
  call memcpy_fast
  memcpy_fast::return#2 = memcpy_fast::return#1
  to:main::@4
main::@4: scope:[main]  from main::@2
  main::i#3 = phi( main::@2/main::i#4 )
  main::i#1 = main::i#3 + rangenext(0,$ff)
  main::$3 = main::i#1 != rangelast(0,$ff)
  if(main::$3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  conio_textcolor = LIGHT_BLUE
  call conio_c64_init
  to:__start::@2
__start::@2: scope:[__start]  from __start::__init1
  to:__start::@1
__start::@1: scope:[__start]  from __start::@2
  call main
  to:__start::@3
__start::@3: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@3
  return 
  to:@return

SYMBOL TABLE SSA
__constant char * const COLORRAM = (char *)$d800
__constant char * const DEFAULT_SCREEN = (char *)$400
__constant const char LIGHT_BLUE = $e
void __start()
void clrscr()
bool clrscr::$0
bool clrscr::$1
char clrscr::c
char clrscr::c#0
char clrscr::c#1
char clrscr::c#2
char clrscr::c#3
char clrscr::l
char clrscr::l#0
char clrscr::l#1
char clrscr::l#2
char clrscr::l#3
char clrscr::l#4
char clrscr::l#5
char clrscr::l#6
char *clrscr::line_cols
char *clrscr::line_cols#0
char *clrscr::line_cols#1
char *clrscr::line_cols#2
char *clrscr::line_cols#3
char *clrscr::line_cols#4
char *clrscr::line_cols#5
char *clrscr::line_cols#6
char *clrscr::line_text
char *clrscr::line_text#0
char *clrscr::line_text#1
char *clrscr::line_text#2
char *clrscr::line_text#3
char *clrscr::line_text#4
char *clrscr::line_text#5
char *clrscr::line_text#6
void conio_c64_init()
bool conio_c64_init::$0
bool conio_c64_init::$1
__constant char * const conio_c64_init::BASIC_CURSOR_LINE = (char *)$d6
char conio_c64_init::line
char conio_c64_init::line#0
char conio_c64_init::line#1
char conio_c64_init::line#2
__loadstore char conio_textcolor
void gotoxy(char x , char y)
bool gotoxy::$0
bool gotoxy::$1
bool gotoxy::$2
bool gotoxy::$3
char gotoxy::x
char gotoxy::x#0
char gotoxy::x#1
char gotoxy::x#2
char gotoxy::x#3
char gotoxy::x#4
char gotoxy::y
char gotoxy::y#0
char gotoxy::y#1
char gotoxy::y#2
void main()
bool main::$3
__constant const char *main::bottom = (char *)$400+$28*$c
char main::i
char main::i#0
char main::i#1
char main::i#2
char main::i#3
char main::i#4
char main::i#5
char main::i#6
char *main::memset_fast1_$0
bool main::memset_fast1_$1
char main::memset_fast1_c
char main::memset_fast1_c#0
char main::memset_fast1_c#1
char main::memset_fast1_c#2
char *main::memset_fast1_destination
char *main::memset_fast1_destination#0
char *main::memset_fast1_destination#1
char *main::memset_fast1_destination#2
char main::memset_fast1_num
char main::memset_fast1_num#0
char main::memset_fast1_num#1
char main::memset_fast1_num#2
char main::memset_fast1_num#3
__constant const char *main::screen = (char *)$400
char * memcpy_fast(char *destination , char *source , char num)
char *memcpy_fast::$0
char *memcpy_fast::$1
bool memcpy_fast::$2
char *memcpy_fast::destination
char *memcpy_fast::destination#0
char *memcpy_fast::destination#1
char *memcpy_fast::destination#2
char *memcpy_fast::destination#3
char memcpy_fast::num
char memcpy_fast::num#0
char memcpy_fast::num#1
char memcpy_fast::num#2
char memcpy_fast::num#3
char *memcpy_fast::return
char *memcpy_fast::return#0
char *memcpy_fast::return#1
char *memcpy_fast::return#2
char *memcpy_fast::return#3
char *memcpy_fast::source
char *memcpy_fast::source#0
char *memcpy_fast::source#1
char *memcpy_fast::source#2

Adding number conversion cast (unumber) $28*$c in 
Adding number conversion cast (unumber) $19 in clrscr::$0 = clrscr::l#2 < $19
Adding number conversion cast (unumber) $28 in clrscr::$1 = clrscr::c#2 < $28
Adding number conversion cast (unumber) $28 in clrscr::line_text#1 = clrscr::line_text#3 + $28
Adding number conversion cast (unumber) $28 in clrscr::line_cols#1 = clrscr::line_cols#3 + $28
Adding number conversion cast (unumber) $19 in gotoxy::$0 = gotoxy::y#2 > $19
Adding number conversion cast (unumber) $28 in gotoxy::$2 = gotoxy::x#2 >= $28
Adding number conversion cast (unumber) 0 in gotoxy::y#0 = 0
Adding number conversion cast (unumber) 0 in gotoxy::x#0 = 0
Adding number conversion cast (unumber) 0 in memcpy_fast::$2 = 0 != memcpy_fast::num#0
Adding number conversion cast (unumber) $19 in conio_c64_init::$0 = conio_c64_init::line#0 >= $19
Adding number conversion cast (unumber) 0 in gotoxy::x#1 = 0
Adding number conversion cast (unumber) $19-1 in conio_c64_init::line#1 = $19-1
Adding number conversion cast (unumber) $17 in *((char *)$d018) = $17
Adding number conversion cast (unumber) $100 in main::memset_fast1_num#0 = $100
Adding number conversion cast (unumber) 0 in main::memset_fast1_$1 = 0 != main::memset_fast1_num#1
Adding number conversion cast (unumber) $100 in memcpy_fast::num#1 = $100
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast gotoxy::y#0 = (unumber)0
Inlining cast gotoxy::x#0 = (unumber)0
Inlining cast gotoxy::x#1 = (unumber)0
Inlining cast conio_c64_init::line#1 = (unumber)$19-1
Inlining cast *((char *)$d018) = (unumber)$17
Inlining cast main::memset_fast1_num#0 = (unumber)$100
Inlining cast memcpy_fast::num#1 = (unumber)$100
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (char *) 55296
Simplifying constant pointer cast (char *) 1024
Simplifying constant pointer cast (char *) 214
Simplifying constant pointer cast (char *) 1024
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast $17
Simplifying constant pointer cast (char *) 53272
Simplifying constant integer cast $100
Simplifying constant integer cast 0
Simplifying constant integer cast $100
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $19
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) $19
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) $19
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) $17
Finalized unsigned number type (unsigned int) $100
Finalized unsigned number type (char) 0
Finalized unsigned number type (unsigned int) $100
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [22] gotoxy::$1 = gotoxy::y#2 <= $19 from [21] gotoxy::$0 = gotoxy::y#2 > $19
Inversing boolean not [26] gotoxy::$3 = gotoxy::x#2 < $28 from [25] gotoxy::$2 = gotoxy::x#2 >= $28
Inversing boolean not [47] conio_c64_init::$1 = conio_c64_init::line#0 < $19 from [46] conio_c64_init::$0 = conio_c64_init::line#0 >= $19
Successful SSA optimization Pass2UnaryNotSimplification
Alias clrscr::line_text#5 = clrscr::line_text#6 
Alias clrscr::line_cols#5 = clrscr::line_cols#6 
Alias clrscr::l#2 = clrscr::l#5 
Alias clrscr::line_text#2 = clrscr::line_text#4 clrscr::line_text#3 
Alias clrscr::c#2 = clrscr::c#3 
Alias clrscr::line_cols#2 = clrscr::line_cols#4 clrscr::line_cols#3 
Alias clrscr::l#3 = clrscr::l#6 clrscr::l#4 
Alias gotoxy::x#3 = gotoxy::x#4 
Alias memcpy_fast::return#0 = memcpy_fast::destination#2 memcpy_fast::destination#1 memcpy_fast::return#3 memcpy_fast::return#1 
Alias main::memset_fast1_c#0 = main::i#2 main::memset_fast1_c#2 main::i#6 
Alias main::memset_fast1_destination#0 = main::memset_fast1_destination#2 
Alias main::memset_fast1_num#0 = main::memset_fast1_num#3 
Alias main::i#3 = main::i#4 main::i#5 
Successful SSA optimization Pass2AliasElimination
Alias gotoxy::x#2 = gotoxy::x#3 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values clrscr::line_text#2 clrscr::line_text#5
Identical Phi Values clrscr::line_cols#2 clrscr::line_cols#5
Identical Phi Values clrscr::l#3 clrscr::l#2
Identical Phi Values gotoxy::y#2 gotoxy::y#1
Identical Phi Values gotoxy::x#2 gotoxy::x#1
Identical Phi Values memcpy_fast::destination#3 memcpy_fast::destination#0
Identical Phi Values memcpy_fast::num#3 memcpy_fast::num#1
Identical Phi Values memcpy_fast::source#2 memcpy_fast::source#0
Identical Phi Values memcpy_fast::return#0 memcpy_fast::destination#3
Identical Phi Values memcpy_fast::source#1 memcpy_fast::source#2
Identical Phi Values main::memset_fast1_destination#1 main::memset_fast1_destination#0
Identical Phi Values main::memset_fast1_c#1 main::memset_fast1_c#0
Identical Phi Values main::i#3 main::memset_fast1_c#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition clrscr::$0 [5] if(clrscr::l#2<$19) goto clrscr::@2
Simple Condition clrscr::$1 [9] if(clrscr::c#2<$28) goto clrscr::@4
Simple Condition gotoxy::$1 [19] if(gotoxy::y#1<=$19) goto gotoxy::@1
Simple Condition gotoxy::$3 [21] if(gotoxy::x#1<$28) goto gotoxy::@return
Simple Condition memcpy_fast::$2 [32] if(0!=memcpy_fast::num#0) goto memcpy_fast::@1
Simple Condition conio_c64_init::$1 [36] if(conio_c64_init::line#0<$19) goto conio_c64_init::@1
Simple Condition main::memset_fast1_$1 [54] if(0!=main::memset_fast1_num#1) goto main::memset_fast1_@1
Simple Condition main::$3 [62] if(main::i#1!=rangelast(0,$ff)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [41] conio_c64_init::line#1 = (unumber)$19-1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant clrscr::line_text#0 = DEFAULT_SCREEN
Constant clrscr::line_cols#0 = COLORRAM
Constant clrscr::l#0 = 0
Constant clrscr::c#0 = 0
Constant gotoxy::y#0 = 0
Constant gotoxy::x#0 = 0
Constant gotoxy::x#1 = 0
Constant conio_c64_init::line#1 = (unumber)$19-1
Constant main::i#0 = 0
Constant main::memset_fast1_destination#0 = main::screen
Constant main::memset_fast1_num#0 = $100
Constant memcpy_fast::destination#0 = main::bottom
Constant memcpy_fast::source#0 = main::screen
Constant memcpy_fast::num#1 = $100
Constant conio_textcolor = LIGHT_BLUE
Successful SSA optimization Pass2ConstantIdentification
Constant memcpy_fast::return#2 = memcpy_fast::destination#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [21] if(gotoxy::x#1<$28) goto gotoxy::@return
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [60] main::i#1 = ++ main::memset_fast1_c#0 to ++
Resolved ranged comparison value [62] if(main::i#1!=rangelast(0,$ff)) goto main::@1 to 0
Rewriting conditional comparison [19] if(gotoxy::y#1<=$19) goto gotoxy::@1
Converting *(pointer+n) to pointer[n] [29] *memcpy_fast::$0 = *memcpy_fast::$1  -- memcpy_fast::source#0[memcpy_fast::num#2]
Converting *(pointer+n) to pointer[n] [29] *memcpy_fast::$0 = memcpy_fast::source#0[memcpy_fast::num#2]  -- memcpy_fast::destination#0[memcpy_fast::num#2]
Converting *(pointer+n) to pointer[n] [51] *main::memset_fast1_$0 = main::memset_fast1_c#0  -- main::memset_fast1_destination#0[main::memset_fast1_num#2]
Successful SSA optimization Pass2InlineDerefIdx
Removing unused block gotoxy::@3
Successful SSA optimization Pass2EliminateUnusedBlocks
Eliminating unused variable memcpy_fast::$0 and assignment [14] memcpy_fast::$0 = memcpy_fast::destination#0 + memcpy_fast::num#2
Eliminating unused variable memcpy_fast::$1 and assignment [15] memcpy_fast::$1 = memcpy_fast::source#0 + memcpy_fast::num#2
Eliminating unused variable main::memset_fast1_$0 and assignment [30] main::memset_fast1_$0 = main::memset_fast1_destination#0 + main::memset_fast1_num#2
Eliminating unused constant gotoxy::y#0
Eliminating unused constant gotoxy::x#0
Eliminating unused constant gotoxy::x#1
Eliminating unused constant memcpy_fast::return#2
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) $19+1 in if(gotoxy::y#1<$19+1) goto gotoxy::@1
Adding number conversion cast (unumber) 1 in if(gotoxy::y#1<(unumber)$19+1) goto gotoxy::@1
Adding number conversion cast (unumber) 0 in if(main::i#1!=0) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $19+(unumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings clrscr::line_text#0
Inlining constant with var siblings clrscr::line_cols#0
Inlining constant with var siblings clrscr::l#0
Inlining constant with var siblings clrscr::c#0
Inlining constant with var siblings memcpy_fast::num#1
Inlining constant with var siblings conio_c64_init::line#1
Inlining constant with var siblings main::i#0
Inlining constant with var siblings main::memset_fast1_num#0
Constant inlined memcpy_fast::destination#0 = main::bottom
Constant inlined memcpy_fast::source#0 = main::screen
Constant inlined conio_c64_init::line#1 = (char)$19-1
Constant inlined main::memset_fast1_num#0 = $100
Constant inlined main::memset_fast1_destination#0 = main::screen
Constant inlined clrscr::line_text#0 = DEFAULT_SCREEN
Constant inlined main::i#0 = 0
Constant inlined conio_textcolor = LIGHT_BLUE
Constant inlined memcpy_fast::num#1 = $100
Constant inlined clrscr::l#0 = 0
Constant inlined clrscr::c#0 = 0
Constant inlined clrscr::line_cols#0 = COLORRAM
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) $c
Finalized unsigned number type (char) $19
Finalized unsigned number type (char) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying constant integer cast $19-1
Successful SSA optimization PassNCastSimplification
Added new block during phi lifting memcpy_fast::@3(between memcpy_fast::@1 and memcpy_fast::@1)
Added new block during phi lifting conio_c64_init::@4(between conio_c64_init and conio_c64_init::@1)
Added new block during phi lifting main::@5(between main::@4 and main::@1)
Added new block during phi lifting main::@6(between main::memset_fast1_@1 and main::memset_fast1_@1)
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::__init1
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@3
Adding NOP phi() at start of conio_c64_init::@2
Adding NOP phi() at start of conio_c64_init::@3
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::memset_fast1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of gotoxy::@2
Adding NOP phi() at start of gotoxy::@1
Adding NOP phi() at start of clrscr
Adding NOP phi() at start of clrscr::@2
Adding NOP phi() at start of memcpy_fast
Adding NOP phi() at start of memcpy_fast::@2
CALL GRAPH
Calls in [__start] to conio_c64_init:2 main:5 
Calls in [conio_c64_init] to gotoxy:13 
Calls in [main] to clrscr:18 memcpy_fast:27 

Created 8 initial phi equivalence classes
Coalesced [16] conio_c64_init::line#3 = conio_c64_init::line#0
Coalesced [31] main::memset_fast1_c#3 = main::i#1
Coalesced [32] main::memset_fast1_num#4 = main::memset_fast1_num#1
Coalesced [47] clrscr::l#7 = clrscr::l#1
Coalesced [48] clrscr::line_text#7 = clrscr::line_text#1
Coalesced [49] clrscr::line_cols#7 = clrscr::line_cols#1
Coalesced [53] clrscr::c#4 = clrscr::c#1
Coalesced [61] memcpy_fast::num#4 = memcpy_fast::num#0
Coalesced down to 8 phi equivalence classes
Culled Empty Block label __start::@2
Culled Empty Block label __start::@3
Culled Empty Block label conio_c64_init::@2
Culled Empty Block label conio_c64_init::@3
Culled Empty Block label main::@3
Culled Empty Block label main::@5
Culled Empty Block label main::@6
Culled Empty Block label gotoxy::@1
Culled Empty Block label clrscr::@2
Culled Empty Block label memcpy_fast::@2
Culled Empty Block label memcpy_fast::@3
Renumbering block clrscr::@3 to clrscr::@2
Renumbering block clrscr::@4 to clrscr::@3
Renumbering block clrscr::@5 to clrscr::@4
Renumbering block gotoxy::@2 to gotoxy::@1
Renumbering block conio_c64_init::@4 to conio_c64_init::@2
Renumbering block main::@4 to main::@3
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::__init1
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of conio_c64_init::@2
Adding NOP phi() at start of main::memset_fast1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of gotoxy::@1
Adding NOP phi() at start of clrscr
Adding NOP phi() at start of memcpy_fast

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] phi()
  [2] call conio_c64_init
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [3] phi()
  [4] call main
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [5] return 
  to:@return

void conio_c64_init()
conio_c64_init: scope:[conio_c64_init]  from __start::__init1
  [6] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE
  [7] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2
  to:conio_c64_init::@1
conio_c64_init::@2: scope:[conio_c64_init]  from conio_c64_init
  [8] phi()
  to:conio_c64_init::@1
conio_c64_init::@1: scope:[conio_c64_init]  from conio_c64_init conio_c64_init::@2
  [9] conio_c64_init::line#2 = phi( conio_c64_init::@2/conio_c64_init::line#0, conio_c64_init/$19-1 )
  [10] gotoxy::y#1 = conio_c64_init::line#2
  [11] call gotoxy
  to:conio_c64_init::@return
conio_c64_init::@return: scope:[conio_c64_init]  from conio_c64_init::@1
  [12] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [13] *((char *) 53272) = $17
  [14] call clrscr
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [15] main::memset_fast1_c#0 = phi( main/0, main::@3/main::i#1 )
  to:main::memset_fast1
main::memset_fast1: scope:[main]  from main::@1
  [16] phi()
  to:main::memset_fast1_@1
main::memset_fast1_@1: scope:[main]  from main::memset_fast1 main::memset_fast1_@1
  [17] main::memset_fast1_num#2 = phi( main::memset_fast1/$100, main::memset_fast1_@1/main::memset_fast1_num#1 )
  [18] main::screen[main::memset_fast1_num#2] = main::memset_fast1_c#0
  [19] main::memset_fast1_num#1 = -- main::memset_fast1_num#2
  [20] if(0!=main::memset_fast1_num#1) goto main::memset_fast1_@1
  to:main::@2
main::@2: scope:[main]  from main::memset_fast1_@1
  [21] phi()
  [22] call memcpy_fast
  to:main::@3
main::@3: scope:[main]  from main::@2
  [23] main::i#1 = ++ main::memset_fast1_c#0
  [24] if(main::i#1!=0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [25] return 
  to:@return

void gotoxy(char x , char y)
gotoxy: scope:[gotoxy]  from conio_c64_init::@1
  [26] if(gotoxy::y#1<$19+1) goto gotoxy::@return
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy
  [27] phi()
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy gotoxy::@1
  [28] return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  [29] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@4
  [30] clrscr::line_cols#5 = phi( clrscr/COLORRAM, clrscr::@4/clrscr::line_cols#1 )
  [30] clrscr::line_text#5 = phi( clrscr/DEFAULT_SCREEN, clrscr::@4/clrscr::line_text#1 )
  [30] clrscr::l#2 = phi( clrscr/0, clrscr::@4/clrscr::l#1 )
  [31] if(clrscr::l#2<$19) goto clrscr::@2
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@1
  [32] return 
  to:@return
clrscr::@2: scope:[clrscr]  from clrscr::@1 clrscr::@3
  [33] clrscr::c#2 = phi( clrscr::@1/0, clrscr::@3/clrscr::c#1 )
  [34] if(clrscr::c#2<$28) goto clrscr::@3
  to:clrscr::@4
clrscr::@4: scope:[clrscr]  from clrscr::@2
  [35] clrscr::line_text#1 = clrscr::line_text#5 + $28
  [36] clrscr::line_cols#1 = clrscr::line_cols#5 + $28
  [37] clrscr::l#1 = ++ clrscr::l#2
  to:clrscr::@1
clrscr::@3: scope:[clrscr]  from clrscr::@2
  [38] clrscr::line_text#5[clrscr::c#2] = ' '
  [39] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE
  [40] clrscr::c#1 = ++ clrscr::c#2
  to:clrscr::@2

char * memcpy_fast(char *destination , char *source , char num)
memcpy_fast: scope:[memcpy_fast]  from main::@2
  [41] phi()
  to:memcpy_fast::@1
memcpy_fast::@1: scope:[memcpy_fast]  from memcpy_fast memcpy_fast::@1
  [42] memcpy_fast::num#2 = phi( memcpy_fast/$100, memcpy_fast::@1/memcpy_fast::num#0 )
  [43] main::bottom[memcpy_fast::num#2] = main::screen[memcpy_fast::num#2]
  [44] memcpy_fast::num#0 = -- memcpy_fast::num#2
  [45] if(0!=memcpy_fast::num#0) goto memcpy_fast::@1
  to:memcpy_fast::@return
memcpy_fast::@return: scope:[memcpy_fast]  from memcpy_fast::@1
  [46] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void __start()
void clrscr()
char clrscr::c
char clrscr::c#1 // 20002.0
char clrscr::c#2 // 12501.25
char clrscr::l
char clrscr::l#1 // 2002.0
char clrscr::l#2 // 333.6666666666667
char *clrscr::line_cols
char *clrscr::line_cols#1 // 1001.0
char *clrscr::line_cols#5 // 1500.375
char *clrscr::line_text
char *clrscr::line_text#1 // 667.3333333333334
char *clrscr::line_text#5 // 1714.7142857142858
void conio_c64_init()
char conio_c64_init::line
char conio_c64_init::line#0 // 11.0
char conio_c64_init::line#2 // 22.0
void gotoxy(char x , char y)
char gotoxy::x
char gotoxy::y
char gotoxy::y#1 // 112.0
void main()
char main::i
char main::i#1 // 151.5
char main::memset_fast1_c
char main::memset_fast1_c#0 // 150.375
char *main::memset_fast1_destination
char main::memset_fast1_num
char main::memset_fast1_num#1 // 1501.5
char main::memset_fast1_num#2 // 1501.5
char * memcpy_fast(char *destination , char *source , char num)
char *memcpy_fast::destination
char memcpy_fast::num
char memcpy_fast::num#0 // 150001.5
char memcpy_fast::num#2 // 200002.0
char *memcpy_fast::return
char *memcpy_fast::source

Initial phi equivalence classes
[ conio_c64_init::line#2 conio_c64_init::line#0 ]
[ main::memset_fast1_c#0 main::i#1 ]
[ main::memset_fast1_num#2 main::memset_fast1_num#1 ]
[ clrscr::l#2 clrscr::l#1 ]
[ clrscr::line_text#5 clrscr::line_text#1 ]
[ clrscr::line_cols#5 clrscr::line_cols#1 ]
[ clrscr::c#2 clrscr::c#1 ]
[ memcpy_fast::num#2 memcpy_fast::num#0 ]
Added variable gotoxy::y#1 to live range equivalence class [ gotoxy::y#1 ]
Complete equivalence classes
[ conio_c64_init::line#2 conio_c64_init::line#0 ]
[ main::memset_fast1_c#0 main::i#1 ]
[ main::memset_fast1_num#2 main::memset_fast1_num#1 ]
[ clrscr::l#2 clrscr::l#1 ]
[ clrscr::line_text#5 clrscr::line_text#1 ]
[ clrscr::line_cols#5 clrscr::line_cols#1 ]
[ clrscr::c#2 clrscr::c#1 ]
[ memcpy_fast::num#2 memcpy_fast::num#0 ]
[ gotoxy::y#1 ]
Allocated zp[1]:2 [ memcpy_fast::num#2 memcpy_fast::num#0 ]
Allocated zp[1]:3 [ clrscr::c#2 clrscr::c#1 ]
Allocated zp[1]:4 [ main::memset_fast1_num#2 main::memset_fast1_num#1 ]
Allocated zp[2]:5 [ clrscr::line_cols#5 clrscr::line_cols#1 ]
Allocated zp[2]:7 [ clrscr::line_text#5 clrscr::line_text#1 ]
Allocated zp[1]:9 [ clrscr::l#2 clrscr::l#1 ]
Allocated zp[1]:10 [ main::memset_fast1_c#0 main::i#1 ]
Allocated zp[1]:11 [ gotoxy::y#1 ]
Allocated zp[1]:12 [ conio_c64_init::line#2 conio_c64_init::line#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [13] *((char *) 53272) = $17 [ ] ( main:4 [ ] { }  ) always clobbers reg byte a 
Statement [35] clrscr::line_text#1 = clrscr::line_text#5 + $28 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:4::clrscr:14 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:9 [ clrscr::l#2 clrscr::l#1 ]
Statement [36] clrscr::line_cols#1 = clrscr::line_cols#5 + $28 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:4::clrscr:14 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [38] clrscr::line_text#5[clrscr::c#2] = ' ' [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:4::clrscr:14 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ clrscr::c#2 clrscr::c#1 ]
Statement [39] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:4::clrscr:14 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [43] main::bottom[memcpy_fast::num#2] = main::screen[memcpy_fast::num#2] [ memcpy_fast::num#2 ] ( main:4::memcpy_fast:22 [ main::memset_fast1_c#0 memcpy_fast::num#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:10 [ main::memset_fast1_c#0 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:2 [ memcpy_fast::num#2 memcpy_fast::num#0 ]
Statement [13] *((char *) 53272) = $17 [ ] ( main:4 [ ] { }  ) always clobbers reg byte a 
Statement [18] main::screen[main::memset_fast1_num#2] = main::memset_fast1_c#0 [ main::memset_fast1_c#0 main::memset_fast1_num#2 ] ( main:4 [ main::memset_fast1_c#0 main::memset_fast1_num#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::memset_fast1_num#2 main::memset_fast1_num#1 ]
Statement [35] clrscr::line_text#1 = clrscr::line_text#5 + $28 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:4::clrscr:14 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Statement [36] clrscr::line_cols#1 = clrscr::line_cols#5 + $28 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:4::clrscr:14 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [38] clrscr::line_text#5[clrscr::c#2] = ' ' [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:4::clrscr:14 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [39] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:4::clrscr:14 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [43] main::bottom[memcpy_fast::num#2] = main::screen[memcpy_fast::num#2] [ memcpy_fast::num#2 ] ( main:4::memcpy_fast:22 [ main::memset_fast1_c#0 memcpy_fast::num#2 ] { }  ) always clobbers reg byte a 
Statement [13] *((char *) 53272) = $17 [ ] ( main:4 [ ] { }  ) always clobbers reg byte a 
Statement [18] main::screen[main::memset_fast1_num#2] = main::memset_fast1_c#0 [ main::memset_fast1_c#0 main::memset_fast1_num#2 ] ( main:4 [ main::memset_fast1_c#0 main::memset_fast1_num#2 ] { }  ) always clobbers reg byte a 
Statement [35] clrscr::line_text#1 = clrscr::line_text#5 + $28 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:4::clrscr:14 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Statement [36] clrscr::line_cols#1 = clrscr::line_cols#5 + $28 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:4::clrscr:14 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [38] clrscr::line_text#5[clrscr::c#2] = ' ' [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:4::clrscr:14 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [39] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:4::clrscr:14 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [43] main::bottom[memcpy_fast::num#2] = main::screen[memcpy_fast::num#2] [ memcpy_fast::num#2 ] ( main:4::memcpy_fast:22 [ main::memset_fast1_c#0 memcpy_fast::num#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:12 [ conio_c64_init::line#2 conio_c64_init::line#0 ] : zp[1]:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ main::memset_fast1_c#0 main::i#1 ] : zp[1]:10 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::memset_fast1_num#2 main::memset_fast1_num#1 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ clrscr::l#2 clrscr::l#1 ] : zp[1]:9 , reg byte x , reg byte y , 
Potential registers zp[2]:7 [ clrscr::line_text#5 clrscr::line_text#1 ] : zp[2]:7 , 
Potential registers zp[2]:5 [ clrscr::line_cols#5 clrscr::line_cols#1 ] : zp[2]:5 , 
Potential registers zp[1]:3 [ clrscr::c#2 clrscr::c#1 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:2 [ memcpy_fast::num#2 memcpy_fast::num#0 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:11 [ gotoxy::y#1 ] : zp[1]:11 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [memcpy_fast] 350,003.5: zp[1]:2 [ memcpy_fast::num#2 memcpy_fast::num#0 ] 
Uplift Scope [clrscr] 32,503.25: zp[1]:3 [ clrscr::c#2 clrscr::c#1 ] 2,501.38: zp[2]:5 [ clrscr::line_cols#5 clrscr::line_cols#1 ] 2,382.05: zp[2]:7 [ clrscr::line_text#5 clrscr::line_text#1 ] 2,335.67: zp[1]:9 [ clrscr::l#2 clrscr::l#1 ] 
Uplift Scope [main] 3,003: zp[1]:4 [ main::memset_fast1_num#2 main::memset_fast1_num#1 ] 301.88: zp[1]:10 [ main::memset_fast1_c#0 main::i#1 ] 
Uplift Scope [gotoxy] 112: zp[1]:11 [ gotoxy::y#1 ] 
Uplift Scope [conio_c64_init] 33: zp[1]:12 [ conio_c64_init::line#2 conio_c64_init::line#0 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [__start] 
Uplift Scope [] 

Uplifting [memcpy_fast] best 12080 combination reg byte x [ memcpy_fast::num#2 memcpy_fast::num#0 ] 
Uplifting [clrscr] best 10490 combination reg byte y [ clrscr::c#2 clrscr::c#1 ] zp[2]:5 [ clrscr::line_cols#5 clrscr::line_cols#1 ] zp[2]:7 [ clrscr::line_text#5 clrscr::line_text#1 ] reg byte x [ clrscr::l#2 clrscr::l#1 ] 
Uplifting [main] best 9320 combination reg byte x [ main::memset_fast1_num#2 main::memset_fast1_num#1 ] reg byte y [ main::memset_fast1_c#0 main::i#1 ] 
Uplifting [gotoxy] best 9314 combination reg byte a [ gotoxy::y#1 ] 
Uplifting [conio_c64_init] best 9302 combination reg byte a [ conio_c64_init::line#2 conio_c64_init::line#0 ] 
Uplifting [MOS6526_CIA] best 9302 combination 
Uplifting [MOS6569_VICII] best 9302 combination 
Uplifting [MOS6581_SID] best 9302 combination 
Uplifting [__start] best 9302 combination 
Uplifting [] best 9302 combination 
Allocated (was zp[2]:5) zp[2]:2 [ clrscr::line_cols#5 clrscr::line_cols#1 ]
Allocated (was zp[2]:7) zp[2]:4 [ clrscr::line_text#5 clrscr::line_text#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
/**
 * @file memfast.c
 * @author Sven Van de Velde (sven.van.de.velde@telenet.be)
 * @brief Demonstration of functions memcpy_fast and memset_fast
 * for 8 bit architectures.
 * @version 0.1
 * @date 2023-04-14
 * 
 * @copyright Copyright (c) 2023
 * 
 */
  // Upstart
  // Commodore 64 PRG executable file
.file [name="memfast.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  .const LIGHT_BLUE = $e
  /// Color Ram
  .label COLORRAM = $d800
  /// Default address of screen character matrix
  .label DEFAULT_SCREEN = $400
.segment Code
  // __start
__start: {
    // [1] phi from __start to __start::__init1 [phi:__start->__start::__init1]
  __init1_from___start:
    jmp __init1
    // __start::__init1
  __init1:
    // [2] call conio_c64_init
    jsr conio_c64_init
    // [3] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [4] call main
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [5] return 
    rts
}
  // conio_c64_init
// Set initial cursor position
conio_c64_init: {
    // Position cursor at current line
    .label BASIC_CURSOR_LINE = $d6
    // [6] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE -- vbuaa=_deref_pbuc1 
    lda.z BASIC_CURSOR_LINE
    // [7] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2 -- vbuaa_lt_vbuc1_then_la1 
    cmp #$19
    bcc __b2_from_conio_c64_init
    // [9] phi from conio_c64_init to conio_c64_init::@1 [phi:conio_c64_init->conio_c64_init::@1]
  __b1_from_conio_c64_init:
    // [9] phi conio_c64_init::line#2 = $19-1 [phi:conio_c64_init->conio_c64_init::@1#0] -- vbuaa=vbuc1 
    lda #$19-1
    jmp __b1
    // [8] phi from conio_c64_init to conio_c64_init::@2 [phi:conio_c64_init->conio_c64_init::@2]
  __b2_from_conio_c64_init:
    jmp __b2
    // conio_c64_init::@2
  __b2:
    // [9] phi from conio_c64_init::@2 to conio_c64_init::@1 [phi:conio_c64_init::@2->conio_c64_init::@1]
  __b1_from___b2:
    // [9] phi conio_c64_init::line#2 = conio_c64_init::line#0 [phi:conio_c64_init::@2->conio_c64_init::@1#0] -- register_copy 
    jmp __b1
    // conio_c64_init::@1
  __b1:
    // [10] gotoxy::y#1 = conio_c64_init::line#2
    // [11] call gotoxy
    jsr gotoxy
    jmp __breturn
    // conio_c64_init::@return
  __breturn:
    // [12] return 
    rts
}
  // main
main: {
    .label screen = $400
    .label bottom = $400+$28*$c
    // [13] *((char *) 53272) = $17 -- _deref_pbuc1=vbuc2 
    // Show mixed chars on screen
    lda #$17
    sta $d018
    // [14] call clrscr
  // Clear screen
    // [29] phi from main to clrscr [phi:main->clrscr]
  clrscr_from_main:
    jsr clrscr
    // [15] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [15] phi main::memset_fast1_c#0 = 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [15] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [15] phi main::memset_fast1_c#0 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [16] phi from main::@1 to main::memset_fast1 [phi:main::@1->main::memset_fast1]
  memset_fast1_from___b1:
    jmp memset_fast1
    // main::memset_fast1
  memset_fast1:
    // [17] phi from main::memset_fast1 to main::memset_fast1_@1 [phi:main::memset_fast1->main::memset_fast1_@1]
  memset_fast1___b1_from_memset_fast1:
    // [17] phi main::memset_fast1_num#2 = $100 [phi:main::memset_fast1->main::memset_fast1_@1#0] -- vbuxx=vwuc1 
    ldx #<$100
    jmp memset_fast1___b1
    // [17] phi from main::memset_fast1_@1 to main::memset_fast1_@1 [phi:main::memset_fast1_@1->main::memset_fast1_@1]
  memset_fast1___b1_from_memset_fast1___b1:
    // [17] phi main::memset_fast1_num#2 = main::memset_fast1_num#1 [phi:main::memset_fast1_@1->main::memset_fast1_@1#0] -- register_copy 
    jmp memset_fast1___b1
    // main::memset_fast1_@1
  memset_fast1___b1:
    // [18] main::screen[main::memset_fast1_num#2] = main::memset_fast1_c#0 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta screen,x
    // [19] main::memset_fast1_num#1 = -- main::memset_fast1_num#2 -- vbuxx=_dec_vbuxx 
    dex
    // [20] if(0!=main::memset_fast1_num#1) goto main::memset_fast1_@1 -- 0_neq_vbuxx_then_la1 
    cpx #0
    bne memset_fast1___b1_from_memset_fast1___b1
    // [21] phi from main::memset_fast1_@1 to main::@2 [phi:main::memset_fast1_@1->main::@2]
  __b2_from_memset_fast1___b1:
    jmp __b2
    // main::@2
  __b2:
    // [22] call memcpy_fast
  // 256 will be truncated to 0, which will copy 256 bytes!
    // [41] phi from main::@2 to memcpy_fast [phi:main::@2->memcpy_fast]
  memcpy_fast_from___b2:
    jsr memcpy_fast
    jmp __b3
    // main::@3
  __b3:
    // [23] main::i#1 = ++ main::memset_fast1_c#0 -- vbuyy=_inc_vbuyy 
    iny
    // [24] if(main::i#1!=0) goto main::@1 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b1_from___b3
    jmp __breturn
    // main::@return
  __breturn:
    // [25] return 
    rts
}
  // gotoxy
// Set the cursor to the specified position
// void gotoxy(char x, __register(A) char y)
gotoxy: {
    // [26] if(gotoxy::y#1<$19+1) goto gotoxy::@return -- vbuaa_lt_vbuc1_then_la1 
    cmp #$19+1
    bcc __breturn
    // [27] phi from gotoxy to gotoxy::@1 [phi:gotoxy->gotoxy::@1]
  __b1_from_gotoxy:
    jmp __b1
    // gotoxy::@1
  __b1:
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [28] return 
    rts
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label line_text = 4
    .label line_cols = 2
    // [30] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
  __b1_from_clrscr:
    // [30] phi clrscr::line_cols#5 = COLORRAM [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z line_cols
    lda #>COLORRAM
    sta.z line_cols+1
    // [30] phi clrscr::line_text#5 = DEFAULT_SCREEN [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z line_text
    lda #>DEFAULT_SCREEN
    sta.z line_text+1
    // [30] phi clrscr::l#2 = 0 [phi:clrscr->clrscr::@1#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // clrscr::@1
  __b1:
    // [31] if(clrscr::l#2<$19) goto clrscr::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b2_from___b1
    jmp __breturn
    // clrscr::@return
  __breturn:
    // [32] return 
    rts
    // [33] phi from clrscr::@1 to clrscr::@2 [phi:clrscr::@1->clrscr::@2]
  __b2_from___b1:
    // [33] phi clrscr::c#2 = 0 [phi:clrscr::@1->clrscr::@2#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b2
    // clrscr::@2
  __b2:
    // [34] if(clrscr::c#2<$28) goto clrscr::@3 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc __b3
    jmp __b4
    // clrscr::@4
  __b4:
    // [35] clrscr::line_text#1 = clrscr::line_text#5 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // [36] clrscr::line_cols#1 = clrscr::line_cols#5 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // [37] clrscr::l#1 = ++ clrscr::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [30] phi from clrscr::@4 to clrscr::@1 [phi:clrscr::@4->clrscr::@1]
  __b1_from___b4:
    // [30] phi clrscr::line_cols#5 = clrscr::line_cols#1 [phi:clrscr::@4->clrscr::@1#0] -- register_copy 
    // [30] phi clrscr::line_text#5 = clrscr::line_text#1 [phi:clrscr::@4->clrscr::@1#1] -- register_copy 
    // [30] phi clrscr::l#2 = clrscr::l#1 [phi:clrscr::@4->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@3
  __b3:
    // [38] clrscr::line_text#5[clrscr::c#2] = ' ' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #' '
    sta (line_text),y
    // [39] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #LIGHT_BLUE
    sta (line_cols),y
    // [40] clrscr::c#1 = ++ clrscr::c#2 -- vbuyy=_inc_vbuyy 
    iny
    // [33] phi from clrscr::@3 to clrscr::@2 [phi:clrscr::@3->clrscr::@2]
  __b2_from___b3:
    // [33] phi clrscr::c#2 = clrscr::c#1 [phi:clrscr::@3->clrscr::@2#0] -- register_copy 
    jmp __b2
}
  // memcpy_fast
/**
 * @brief Fast copy of data from a source to a destination memory address.
 * Since the amount of bytes to be copied is a byte long, it can be executed very fast.
 * The parameter num can have a value 0, which in case is equal to 256,
 * which allows 256 bytes to be copied using one single byte counter!
 * Depending on the optimization of the compiler, this implementation can
 * result in very fast code, but it should be inlined!
 * 
 * @param destination The memory address as the destination.
 * @param source The memory address as the source.
 * @param num The amount of bytes to be copied. A value of 0 will copy 256 bytes!!!
 * @return void* The resulting destination memory address.
 */
// char * memcpy_fast(char *destination, char *source, __register(X) char num)
memcpy_fast: {
    // [42] phi from memcpy_fast to memcpy_fast::@1 [phi:memcpy_fast->memcpy_fast::@1]
  __b1_from_memcpy_fast:
    // [42] phi memcpy_fast::num#2 = $100 [phi:memcpy_fast->memcpy_fast::@1#0] -- vbuxx=vwuc1 
    ldx #<$100
    jmp __b1
    // [42] phi from memcpy_fast::@1 to memcpy_fast::@1 [phi:memcpy_fast::@1->memcpy_fast::@1]
  __b1_from___b1:
    // [42] phi memcpy_fast::num#2 = memcpy_fast::num#0 [phi:memcpy_fast::@1->memcpy_fast::@1#0] -- register_copy 
    jmp __b1
    // memcpy_fast::@1
  __b1:
    // [43] main::bottom[memcpy_fast::num#2] = main::screen[memcpy_fast::num#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda main.screen,x
    sta main.bottom,x
    // [44] memcpy_fast::num#0 = -- memcpy_fast::num#2 -- vbuxx=_dec_vbuxx 
    dex
    // [45] if(0!=memcpy_fast::num#0) goto memcpy_fast::@1 -- 0_neq_vbuxx_then_la1 
    cpx #0
    bne __b1_from___b1
    jmp __breturn
    // memcpy_fast::@return
  __breturn:
    // [46] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp memset_fast1
Removing instruction jmp memset_fast1___b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b2_from_conio_c64_init with __b1
Replacing label memset_fast1___b1_from_memset_fast1___b1 with memset_fast1___b1
Replacing label __b1_from___b3 with __b1
Replacing label __breturn with __b1
Replacing label __b1_from___b1 with __b1
Removing instruction __init1_from___start:
Removing instruction __b1_from___init1:
Removing instruction __b2_from_conio_c64_init:
Removing instruction __b2:
Removing instruction __b1_from___b2:
Removing instruction __b1_from___b3:
Removing instruction memset_fast1_from___b1:
Removing instruction memset_fast1:
Removing instruction memset_fast1___b1_from_memset_fast1:
Removing instruction memset_fast1___b1_from_memset_fast1___b1:
Removing instruction __b2_from_memset_fast1___b1:
Removing instruction __b1_from_gotoxy:
Removing instruction __breturn:
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_conio_c64_init:
Removing instruction __breturn:
Removing instruction clrscr_from_main:
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction memcpy_fast_from___b2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_clrscr:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction __b2_from___b3:
Removing instruction __b1_from_memcpy_fast:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Relabelling long label __b2_from___b1 to __b4
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp memset_fast1___b1
Removing instruction bcc __b1
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant char * const COLORRAM = (char *) 55296
__constant char * const DEFAULT_SCREEN = (char *) 1024
__constant const char LIGHT_BLUE = $e
void __start()
void clrscr()
char clrscr::c
char clrscr::c#1 // reg byte y 20002.0
char clrscr::c#2 // reg byte y 12501.25
char clrscr::l
char clrscr::l#1 // reg byte x 2002.0
char clrscr::l#2 // reg byte x 333.6666666666667
char *clrscr::line_cols
char *clrscr::line_cols#1 // line_cols zp[2]:2 1001.0
char *clrscr::line_cols#5 // line_cols zp[2]:2 1500.375
char *clrscr::line_text
char *clrscr::line_text#1 // line_text zp[2]:4 667.3333333333334
char *clrscr::line_text#5 // line_text zp[2]:4 1714.7142857142858
void conio_c64_init()
__constant char * const conio_c64_init::BASIC_CURSOR_LINE = (char *) 214
char conio_c64_init::line
char conio_c64_init::line#0 // reg byte a 11.0
char conio_c64_init::line#2 // reg byte a 22.0
void gotoxy(char x , char y)
char gotoxy::x
char gotoxy::y
char gotoxy::y#1 // reg byte a 112.0
void main()
__constant const char *main::bottom = (char *) 1024+(unsigned int)$28*$c
char main::i
char main::i#1 // reg byte y 151.5
char main::memset_fast1_c
char main::memset_fast1_c#0 // reg byte y 150.375
char *main::memset_fast1_destination
char main::memset_fast1_num
char main::memset_fast1_num#1 // reg byte x 1501.5
char main::memset_fast1_num#2 // reg byte x 1501.5
__constant const char *main::screen = (char *) 1024
char * memcpy_fast(char *destination , char *source , char num)
char *memcpy_fast::destination
char memcpy_fast::num
char memcpy_fast::num#0 // reg byte x 150001.5
char memcpy_fast::num#2 // reg byte x 200002.0
char *memcpy_fast::return
char *memcpy_fast::source

reg byte a [ conio_c64_init::line#2 conio_c64_init::line#0 ]
reg byte y [ main::memset_fast1_c#0 main::i#1 ]
reg byte x [ main::memset_fast1_num#2 main::memset_fast1_num#1 ]
reg byte x [ clrscr::l#2 clrscr::l#1 ]
zp[2]:4 [ clrscr::line_text#5 clrscr::line_text#1 ]
zp[2]:2 [ clrscr::line_cols#5 clrscr::line_cols#1 ]
reg byte y [ clrscr::c#2 clrscr::c#1 ]
reg byte x [ memcpy_fast::num#2 memcpy_fast::num#0 ]
reg byte a [ gotoxy::y#1 ]


FINAL ASSEMBLER
Score: 6933

  // File Comments
/**
 * @file memfast.c
 * @author Sven Van de Velde (sven.van.de.velde@telenet.be)
 * @brief Demonstration of functions memcpy_fast and memset_fast
 * for 8 bit architectures.
 * @version 0.1
 * @date 2023-04-14
 * 
 * @copyright Copyright (c) 2023
 * 
 */
  // Upstart
  // Commodore 64 PRG executable file
.file [name="memfast.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  .const LIGHT_BLUE = $e
  /// Color Ram
  .label COLORRAM = $d800
  /// Default address of screen character matrix
  .label DEFAULT_SCREEN = $400
.segment Code
  // __start
__start: {
    // [1] phi from __start to __start::__init1 [phi:__start->__start::__init1]
    // __start::__init1
    // #pragma constructor_for(conio_c64_init, cputc, clrscr, cscroll)
    // [2] call conio_c64_init
    jsr conio_c64_init
    // [3] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [4] call main
    jsr main
    // __start::@return
    // [5] return 
    rts
}
  // conio_c64_init
// Set initial cursor position
conio_c64_init: {
    // Position cursor at current line
    .label BASIC_CURSOR_LINE = $d6
    // char line = *BASIC_CURSOR_LINE
    // [6] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE -- vbuaa=_deref_pbuc1 
    lda.z BASIC_CURSOR_LINE
    // if(line>=CONIO_HEIGHT)
    // [7] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2 -- vbuaa_lt_vbuc1_then_la1 
    cmp #$19
    bcc __b1
    // [9] phi from conio_c64_init to conio_c64_init::@1 [phi:conio_c64_init->conio_c64_init::@1]
    // [9] phi conio_c64_init::line#2 = $19-1 [phi:conio_c64_init->conio_c64_init::@1#0] -- vbuaa=vbuc1 
    lda #$19-1
    // [8] phi from conio_c64_init to conio_c64_init::@2 [phi:conio_c64_init->conio_c64_init::@2]
    // conio_c64_init::@2
    // [9] phi from conio_c64_init::@2 to conio_c64_init::@1 [phi:conio_c64_init::@2->conio_c64_init::@1]
    // [9] phi conio_c64_init::line#2 = conio_c64_init::line#0 [phi:conio_c64_init::@2->conio_c64_init::@1#0] -- register_copy 
    // conio_c64_init::@1
  __b1:
    // gotoxy(0, line)
    // [10] gotoxy::y#1 = conio_c64_init::line#2
    // [11] call gotoxy
    jsr gotoxy
    // conio_c64_init::@return
    // }
    // [12] return 
    rts
}
  // main
main: {
    .label screen = $400
    .label bottom = $400+$28*$c
    // *((char*)0xd018) = 0x17
    // [13] *((char *) 53272) = $17 -- _deref_pbuc1=vbuc2 
    // Show mixed chars on screen
    lda #$17
    sta $d018
    // clrscr()
    // [14] call clrscr
  // Clear screen
    // [29] phi from main to clrscr [phi:main->clrscr]
    jsr clrscr
    // [15] phi from main to main::@1 [phi:main->main::@1]
    // [15] phi main::memset_fast1_c#0 = 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [15] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [15] phi main::memset_fast1_c#0 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // [16] phi from main::@1 to main::memset_fast1 [phi:main::@1->main::memset_fast1]
    // main::memset_fast1
    // [17] phi from main::memset_fast1 to main::memset_fast1_@1 [phi:main::memset_fast1->main::memset_fast1_@1]
    // [17] phi main::memset_fast1_num#2 = $100 [phi:main::memset_fast1->main::memset_fast1_@1#0] -- vbuxx=vwuc1 
    ldx #<$100
    // [17] phi from main::memset_fast1_@1 to main::memset_fast1_@1 [phi:main::memset_fast1_@1->main::memset_fast1_@1]
    // [17] phi main::memset_fast1_num#2 = main::memset_fast1_num#1 [phi:main::memset_fast1_@1->main::memset_fast1_@1#0] -- register_copy 
    // main::memset_fast1_@1
  memset_fast1___b1:
    // *(destination+num) = c
    // [18] main::screen[main::memset_fast1_num#2] = main::memset_fast1_c#0 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta screen,x
    // num--;
    // [19] main::memset_fast1_num#1 = -- main::memset_fast1_num#2 -- vbuxx=_dec_vbuxx 
    dex
    // while(num)
    // [20] if(0!=main::memset_fast1_num#1) goto main::memset_fast1_@1 -- 0_neq_vbuxx_then_la1 
    cpx #0
    bne memset_fast1___b1
    // [21] phi from main::memset_fast1_@1 to main::@2 [phi:main::memset_fast1_@1->main::@2]
    // main::@2
    // memcpy_fast(bottom, screen, 256)
    // [22] call memcpy_fast
  // 256 will be truncated to 0, which will copy 256 bytes!
    // [41] phi from main::@2 to memcpy_fast [phi:main::@2->memcpy_fast]
    jsr memcpy_fast
    // main::@3
    // for(char i:0..255)
    // [23] main::i#1 = ++ main::memset_fast1_c#0 -- vbuyy=_inc_vbuyy 
    iny
    // [24] if(main::i#1!=0) goto main::@1 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b1
    // main::@return
    // }
    // [25] return 
    rts
}
  // gotoxy
// Set the cursor to the specified position
// void gotoxy(char x, __register(A) char y)
gotoxy: {
    // if(y>CONIO_HEIGHT)
    // [26] if(gotoxy::y#1<$19+1) goto gotoxy::@return -- vbuaa_lt_vbuc1_then_la1 
    cmp #$19+1
    // [27] phi from gotoxy to gotoxy::@1 [phi:gotoxy->gotoxy::@1]
    // gotoxy::@1
    // gotoxy::@return
    // }
    // [28] return 
    rts
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label line_text = 4
    .label line_cols = 2
    // [30] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
    // [30] phi clrscr::line_cols#5 = COLORRAM [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z line_cols
    lda #>COLORRAM
    sta.z line_cols+1
    // [30] phi clrscr::line_text#5 = DEFAULT_SCREEN [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z line_text
    lda #>DEFAULT_SCREEN
    sta.z line_text+1
    // [30] phi clrscr::l#2 = 0 [phi:clrscr->clrscr::@1#2] -- vbuxx=vbuc1 
    ldx #0
    // clrscr::@1
  __b1:
    // for( char l=0;l<CONIO_HEIGHT; l++ )
    // [31] if(clrscr::l#2<$19) goto clrscr::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b4
    // clrscr::@return
    // }
    // [32] return 
    rts
    // [33] phi from clrscr::@1 to clrscr::@2 [phi:clrscr::@1->clrscr::@2]
  __b4:
    // [33] phi clrscr::c#2 = 0 [phi:clrscr::@1->clrscr::@2#0] -- vbuyy=vbuc1 
    ldy #0
    // clrscr::@2
  __b2:
    // for( char c=0;c<CONIO_WIDTH; c++ )
    // [34] if(clrscr::c#2<$28) goto clrscr::@3 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc __b3
    // clrscr::@4
    // line_text += CONIO_WIDTH
    // [35] clrscr::line_text#1 = clrscr::line_text#5 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // line_cols += CONIO_WIDTH
    // [36] clrscr::line_cols#1 = clrscr::line_cols#5 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // for( char l=0;l<CONIO_HEIGHT; l++ )
    // [37] clrscr::l#1 = ++ clrscr::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [30] phi from clrscr::@4 to clrscr::@1 [phi:clrscr::@4->clrscr::@1]
    // [30] phi clrscr::line_cols#5 = clrscr::line_cols#1 [phi:clrscr::@4->clrscr::@1#0] -- register_copy 
    // [30] phi clrscr::line_text#5 = clrscr::line_text#1 [phi:clrscr::@4->clrscr::@1#1] -- register_copy 
    // [30] phi clrscr::l#2 = clrscr::l#1 [phi:clrscr::@4->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@3
  __b3:
    // line_text[c] = ' '
    // [38] clrscr::line_text#5[clrscr::c#2] = ' ' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #' '
    sta (line_text),y
    // line_cols[c] = conio_textcolor
    // [39] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #LIGHT_BLUE
    sta (line_cols),y
    // for( char c=0;c<CONIO_WIDTH; c++ )
    // [40] clrscr::c#1 = ++ clrscr::c#2 -- vbuyy=_inc_vbuyy 
    iny
    // [33] phi from clrscr::@3 to clrscr::@2 [phi:clrscr::@3->clrscr::@2]
    // [33] phi clrscr::c#2 = clrscr::c#1 [phi:clrscr::@3->clrscr::@2#0] -- register_copy 
    jmp __b2
}
  // memcpy_fast
/**
 * @brief Fast copy of data from a source to a destination memory address.
 * Since the amount of bytes to be copied is a byte long, it can be executed very fast.
 * The parameter num can have a value 0, which in case is equal to 256,
 * which allows 256 bytes to be copied using one single byte counter!
 * Depending on the optimization of the compiler, this implementation can
 * result in very fast code, but it should be inlined!
 * 
 * @param destination The memory address as the destination.
 * @param source The memory address as the source.
 * @param num The amount of bytes to be copied. A value of 0 will copy 256 bytes!!!
 * @return void* The resulting destination memory address.
 */
// char * memcpy_fast(char *destination, char *source, __register(X) char num)
memcpy_fast: {
    // [42] phi from memcpy_fast to memcpy_fast::@1 [phi:memcpy_fast->memcpy_fast::@1]
    // [42] phi memcpy_fast::num#2 = $100 [phi:memcpy_fast->memcpy_fast::@1#0] -- vbuxx=vwuc1 
    ldx #<$100
    // [42] phi from memcpy_fast::@1 to memcpy_fast::@1 [phi:memcpy_fast::@1->memcpy_fast::@1]
    // [42] phi memcpy_fast::num#2 = memcpy_fast::num#0 [phi:memcpy_fast::@1->memcpy_fast::@1#0] -- register_copy 
    // memcpy_fast::@1
  __b1:
    // *(destination+num) = *(source+num)
    // [43] main::bottom[memcpy_fast::num#2] = main::screen[memcpy_fast::num#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda main.screen,x
    sta main.bottom,x
    // num--;
    // [44] memcpy_fast::num#0 = -- memcpy_fast::num#2 -- vbuxx=_dec_vbuxx 
    dex
    // while(num)
    // [45] if(0!=memcpy_fast::num#0) goto memcpy_fast::@1 -- 0_neq_vbuxx_then_la1 
    cpx #0
    bne __b1
    // memcpy_fast::@return
    // }
    // [46] return 
    rts
}
  // File Data

