Eliminating unused variable with no statement main::$0
Eliminating unused variable with no statement main::$1
Unwinding list assignment { *((char *)&main::point1+OFFSET_STRUCT_POINT_X), *((char *)&main::point1+OFFSET_STRUCT_POINT_Y) } = { getPoint::return_x, getPoint::return_y }
Unwinding list assignment { *((char *)&main::point2+OFFSET_STRUCT_POINT_X), *((char *)&main::point2+OFFSET_STRUCT_POINT_Y) } = { getPoint::return_x, getPoint::return_y }
Unwinding list assignment { getPoint::return_x#0, getPoint::return_y#0 } = { getPoint::return_x#5, getPoint::return_y#5 }
Unwinding list assignment { getPoint::return_x#1, getPoint::return_y#1 } = { getPoint::return_x#5, getPoint::return_y#5 }

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  getPoint::x#0 = 2
  getPoint::y#0 = 3
  call getPoint
  getPoint::return_x#0 = getPoint::return_x#5
  getPoint::return_y#0 = getPoint::return_y#5
  to:main::@1
main::@1: scope:[main]  from main
  getPoint::return_y#3 = phi( main/getPoint::return_y#0 )
  getPoint::return_x#3 = phi( main/getPoint::return_x#0 )
  *((char *)&main::point1+OFFSET_STRUCT_POINT_X) = getPoint::return_x#3
  *((char *)&main::point1+OFFSET_STRUCT_POINT_Y) = getPoint::return_y#3
  SCREEN[0] = *((char *)&main::point1+OFFSET_STRUCT_POINT_X)
  SCREEN[1] = *((char *)&main::point1+OFFSET_STRUCT_POINT_Y)
  getPoint::x#1 = 4
  getPoint::y#1 = 5
  call getPoint
  getPoint::return_x#1 = getPoint::return_x#5
  getPoint::return_y#1 = getPoint::return_y#5
  to:main::@2
main::@2: scope:[main]  from main::@1
  getPoint::return_y#4 = phi( main::@1/getPoint::return_y#1 )
  getPoint::return_x#4 = phi( main::@1/getPoint::return_x#1 )
  *((char *)&main::point2+OFFSET_STRUCT_POINT_X) = getPoint::return_x#4
  *((char *)&main::point2+OFFSET_STRUCT_POINT_Y) = getPoint::return_y#4
  SCREEN[2] = *((char *)&main::point2+OFFSET_STRUCT_POINT_X)
  SCREEN[3] = *((char *)&main::point2+OFFSET_STRUCT_POINT_Y)
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

struct Point getPoint(char x , char y)
getPoint: scope:[getPoint]  from main main::@1
  getPoint::y#2 = phi( main/getPoint::y#0, main::@1/getPoint::y#1 )
  getPoint::x#2 = phi( main/getPoint::x#0, main::@1/getPoint::x#1 )
  getPoint::p_x#0 = getPoint::x#2
  getPoint::p_y#0 = getPoint::y#2
  getPoint::return_x#2 = getPoint::p_x#0
  getPoint::return_y#2 = getPoint::p_y#0
  getPoint::return#0 = struct-unwound {getPoint::return_x#2, getPoint::return_y#2}
  to:getPoint::@return
getPoint::@return: scope:[getPoint]  from getPoint
  getPoint::return_y#5 = phi( getPoint/getPoint::return_y#2 )
  getPoint::return_x#5 = phi( getPoint/getPoint::return_x#2 )
  getPoint::return#1 = struct-unwound {}
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
__constant char OFFSET_STRUCT_POINT_X = 0
__constant char OFFSET_STRUCT_POINT_Y = 1
__constant char * const SCREEN = (char *)$400
void __start()
struct Point getPoint(char x , char y)
char getPoint::p_x
char getPoint::p_x#0
char getPoint::p_y
char getPoint::p_y#0
struct Point getPoint::return
struct Point getPoint::return#0
struct Point getPoint::return#1
char getPoint::return_x
char getPoint::return_x#0
char getPoint::return_x#1
char getPoint::return_x#2
char getPoint::return_x#3
char getPoint::return_x#4
char getPoint::return_x#5
char getPoint::return_y
char getPoint::return_y#0
char getPoint::return_y#1
char getPoint::return_y#2
char getPoint::return_y#3
char getPoint::return_y#4
char getPoint::return_y#5
char getPoint::x
char getPoint::x#0
char getPoint::x#1
char getPoint::x#2
char getPoint::y
char getPoint::y#0
char getPoint::y#1
char getPoint::y#2
void main()
__loadstore struct Point main::point1
__loadstore struct Point main::point2

Adding number conversion cast (unumber) 2 in getPoint::x#0 = 2
Adding number conversion cast (unumber) 3 in getPoint::y#0 = 3
Adding number conversion cast (unumber) 0 in SCREEN[0] = *((char *)&main::point1+OFFSET_STRUCT_POINT_X)
Adding number conversion cast (unumber) 1 in SCREEN[1] = *((char *)&main::point1+OFFSET_STRUCT_POINT_Y)
Adding number conversion cast (unumber) 4 in getPoint::x#1 = 4
Adding number conversion cast (unumber) 5 in getPoint::y#1 = 5
Adding number conversion cast (unumber) 2 in SCREEN[2] = *((char *)&main::point2+OFFSET_STRUCT_POINT_X)
Adding number conversion cast (unumber) 3 in SCREEN[3] = *((char *)&main::point2+OFFSET_STRUCT_POINT_Y)
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast getPoint::x#0 = (unumber)2
Inlining cast getPoint::y#0 = (unumber)3
Inlining cast getPoint::x#1 = (unumber)4
Inlining cast getPoint::y#1 = (unumber)5
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) 3
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) 5
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias getPoint::return_x#0 = getPoint::return_x#3 
Alias getPoint::return_y#0 = getPoint::return_y#3 
Alias getPoint::return_x#1 = getPoint::return_x#4 
Alias getPoint::return_y#1 = getPoint::return_y#4 
Alias getPoint::return_x#2 = getPoint::p_x#0 getPoint::x#2 getPoint::return_x#5 
Alias getPoint::return_y#2 = getPoint::p_y#0 getPoint::y#2 getPoint::return_y#5 
Successful SSA optimization Pass2AliasElimination
Constant getPoint::x#0 = 2
Constant getPoint::y#0 = 3
Constant getPoint::x#1 = 4
Constant getPoint::y#1 = 5
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero (char *)&main::point1 in [5] *((char *)&main::point1+OFFSET_STRUCT_POINT_X) = getPoint::return_x#0
Simplifying expression containing zero (char *)&main::point1 in [7] SCREEN[0] = *((char *)&main::point1+OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero SCREEN in [7] SCREEN[0] = *((char *)&main::point1)
Simplifying expression containing zero (char *)&main::point2 in [14] *((char *)&main::point2+OFFSET_STRUCT_POINT_X) = getPoint::return_x#1
Simplifying expression containing zero (char *)&main::point2 in [16] SCREEN[2] = *((char *)&main::point2+OFFSET_STRUCT_POINT_X)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable getPoint::return#0 and assignment [16] getPoint::return#0 = struct-unwound {getPoint::return_x#2, getPoint::return_y#2}
Eliminating unused variable getPoint::return#1 and assignment [17] getPoint::return#1 = struct-unwound {}
Eliminating unused constant OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with different constant siblings getPoint::x#0
Inlining constant with different constant siblings getPoint::y#0
Inlining constant with different constant siblings getPoint::x#1
Inlining constant with different constant siblings getPoint::y#1
Constant inlined getPoint::y#0 = 3
Constant inlined getPoint::x#1 = 4
Constant inlined getPoint::y#1 = 5
Constant inlined getPoint::x#0 = 2
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN+1)
Consolidated array index constant in *(SCREEN+2)
Consolidated array index constant in *(SCREEN+3)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of main
CALL GRAPH
Calls in [main] to getPoint:1 getPoint:8 

Created 2 initial phi equivalence classes
Coalesced down to 2 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call getPoint
  [2] getPoint::return_x#0 = getPoint::return_x#2
  [3] getPoint::return_y#0 = getPoint::return_y#2
  to:main::@1
main::@1: scope:[main]  from main
  [4] *((char *)&main::point1) = getPoint::return_x#0
  [5] *((char *)&main::point1+OFFSET_STRUCT_POINT_Y) = getPoint::return_y#0
  [6] *SCREEN = *((char *)&main::point1)
  [7] *(SCREEN+1) = *((char *)&main::point1+OFFSET_STRUCT_POINT_Y)
  [8] call getPoint
  [9] getPoint::return_x#1 = getPoint::return_x#2
  [10] getPoint::return_y#1 = getPoint::return_y#2
  to:main::@2
main::@2: scope:[main]  from main::@1
  [11] *((char *)&main::point2) = getPoint::return_x#1
  [12] *((char *)&main::point2+OFFSET_STRUCT_POINT_Y) = getPoint::return_y#1
  [13] *(SCREEN+2) = *((char *)&main::point2)
  [14] *(SCREEN+3) = *((char *)&main::point2+OFFSET_STRUCT_POINT_Y)
  to:main::@return
main::@return: scope:[main]  from main::@2
  [15] return 
  to:@return

struct Point getPoint(char x , char y)
getPoint: scope:[getPoint]  from main main::@1
  [16] getPoint::return_y#2 = phi( main/3, main::@1/5 )
  [16] getPoint::return_x#2 = phi( main/2, main::@1/4 )
  to:getPoint::@return
getPoint::@return: scope:[getPoint]  from getPoint
  [17] return 
  to:@return


VARIABLE REGISTER WEIGHTS
struct Point getPoint(char x , char y)
char getPoint::p_x
char getPoint::p_y
struct Point getPoint::return
char getPoint::return_x
char getPoint::return_x#0 // 2.0
char getPoint::return_x#1 // 2.0
char getPoint::return_x#2 // 1.0
char getPoint::return_y
char getPoint::return_y#0 // 2.0
char getPoint::return_y#1 // 2.0
char getPoint::return_y#2 // 0.6666666666666666
char getPoint::x
char getPoint::y
void main()
__loadstore struct Point main::point1
__loadstore struct Point main::point2

Initial phi equivalence classes
[ getPoint::return_x#2 ]
[ getPoint::return_y#2 ]
Added variable getPoint::return_x#0 to live range equivalence class [ getPoint::return_x#0 ]
Added variable getPoint::return_y#0 to live range equivalence class [ getPoint::return_y#0 ]
Added variable getPoint::return_x#1 to live range equivalence class [ getPoint::return_x#1 ]
Added variable getPoint::return_y#1 to live range equivalence class [ getPoint::return_y#1 ]
Added variable main::point1 to live range equivalence class [ main::point1 ]
Added variable main::point2 to live range equivalence class [ main::point2 ]
Complete equivalence classes
[ getPoint::return_x#2 ]
[ getPoint::return_y#2 ]
[ getPoint::return_x#0 ]
[ getPoint::return_y#0 ]
[ getPoint::return_x#1 ]
[ getPoint::return_y#1 ]
[ main::point1 ]
[ main::point2 ]
Allocated zp[1]:2 [ getPoint::return_x#0 ]
Allocated zp[1]:3 [ getPoint::return_y#0 ]
Allocated zp[1]:4 [ getPoint::return_x#1 ]
Allocated zp[1]:5 [ getPoint::return_y#1 ]
Allocated zp[1]:6 [ getPoint::return_x#2 ]
Allocated zp[1]:7 [ getPoint::return_y#2 ]
Allocated zp[2]:8 [ main::point1 ]
Allocated zp[2]:10 [ main::point2 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] *SCREEN = *((char *)&main::point1) [ main::point1 main::point2 ] (  [ main::point1 main::point2 ] { { getPoint::return_x#1 = getPoint::return_x#2 } { getPoint::return_y#1 = getPoint::return_y#2 } }  ) always clobbers reg byte a 
Statement [7] *(SCREEN+1) = *((char *)&main::point1+OFFSET_STRUCT_POINT_Y) [ main::point2 ] (  [ main::point2 ] { { getPoint::return_x#1 = getPoint::return_x#2 } { getPoint::return_y#1 = getPoint::return_y#2 } }  ) always clobbers reg byte a 
Statement [13] *(SCREEN+2) = *((char *)&main::point2) [ main::point2 ] (  [ main::point2 ] { }  ) always clobbers reg byte a 
Statement [14] *(SCREEN+3) = *((char *)&main::point2+OFFSET_STRUCT_POINT_Y) [ ] (  [ ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:6 [ getPoint::return_x#2 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ getPoint::return_y#2 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:2 [ getPoint::return_x#0 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ getPoint::return_y#0 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ getPoint::return_x#1 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ getPoint::return_y#1 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:8 [ main::point1 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ main::point2 ] : zp[2]:10 , 

REGISTER UPLIFT SCOPES
Uplift Scope [getPoint] 2: zp[1]:2 [ getPoint::return_x#0 ] 2: zp[1]:3 [ getPoint::return_y#0 ] 2: zp[1]:4 [ getPoint::return_x#1 ] 2: zp[1]:5 [ getPoint::return_y#1 ] 1: zp[1]:6 [ getPoint::return_x#2 ] 0.67: zp[1]:7 [ getPoint::return_y#2 ] 
Uplift Scope [Point] 
Uplift Scope [main] 0: zp[2]:8 [ main::point1 ] 0: zp[2]:10 [ main::point2 ] 
Uplift Scope [] 

Uplifting [getPoint] best 141 combination reg byte x [ getPoint::return_x#0 ] reg byte a [ getPoint::return_y#0 ] reg byte x [ getPoint::return_x#1 ] zp[1]:5 [ getPoint::return_y#1 ] zp[1]:6 [ getPoint::return_x#2 ] zp[1]:7 [ getPoint::return_y#2 ] 
Limited combination testing to 100 combinations of 4096 possible.
Uplifting [Point] best 141 combination 
Uplifting [main] best 141 combination zp[2]:8 [ main::point1 ] zp[2]:10 [ main::point2 ] 
Uplifting [] best 141 combination 
Attempting to uplift remaining variables inzp[1]:5 [ getPoint::return_y#1 ]
Uplifting [getPoint] best 135 combination reg byte a [ getPoint::return_y#1 ] 
Attempting to uplift remaining variables inzp[1]:6 [ getPoint::return_x#2 ]
Uplifting [getPoint] best 123 combination reg byte x [ getPoint::return_x#2 ] 
Attempting to uplift remaining variables inzp[1]:7 [ getPoint::return_y#2 ]
Uplifting [getPoint] best 111 combination reg byte a [ getPoint::return_y#2 ] 
Allocated (was zp[2]:8) zp[2]:2 [ main::point1 ]
Allocated (was zp[2]:10) zp[2]:4 [ main::point2 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct with C-Standard behavior - call return value (not supported yet)
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-23.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label point1 = 2
    .label point2 = 4
    // [1] call getPoint
    // [16] phi from main to getPoint [phi:main->getPoint]
  getPoint_from_main:
    // [16] phi getPoint::return_y#2 = 3 [phi:main->getPoint#0] -- vbuaa=vbuc1 
    lda #3
    // [16] phi getPoint::return_x#2 = 2 [phi:main->getPoint#1] -- vbuxx=vbuc1 
    ldx #2
    jsr getPoint
    // [2] getPoint::return_x#0 = getPoint::return_x#2
    // [3] getPoint::return_y#0 = getPoint::return_y#2
    jmp __b1
    // main::@1
  __b1:
    // [4] *((char *)&main::point1) = getPoint::return_x#0 -- _deref_pbuc1=vbuxx 
    stx.z point1
    // [5] *((char *)&main::point1+OFFSET_STRUCT_POINT_Y) = getPoint::return_y#0 -- _deref_pbuc1=vbuaa 
    sta.z point1+OFFSET_STRUCT_POINT_Y
    // [6] *SCREEN = *((char *)&main::point1) -- _deref_pbuc1=_deref_pbuc2 
    lda.z point1
    sta SCREEN
    // [7] *(SCREEN+1) = *((char *)&main::point1+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda.z point1+OFFSET_STRUCT_POINT_Y
    sta SCREEN+1
    // [8] call getPoint
    // [16] phi from main::@1 to getPoint [phi:main::@1->getPoint]
  getPoint_from___b1:
    // [16] phi getPoint::return_y#2 = 5 [phi:main::@1->getPoint#0] -- vbuaa=vbuc1 
    lda #5
    // [16] phi getPoint::return_x#2 = 4 [phi:main::@1->getPoint#1] -- vbuxx=vbuc1 
    ldx #4
    jsr getPoint
    // [9] getPoint::return_x#1 = getPoint::return_x#2
    // [10] getPoint::return_y#1 = getPoint::return_y#2
    jmp __b2
    // main::@2
  __b2:
    // [11] *((char *)&main::point2) = getPoint::return_x#1 -- _deref_pbuc1=vbuxx 
    stx.z point2
    // [12] *((char *)&main::point2+OFFSET_STRUCT_POINT_Y) = getPoint::return_y#1 -- _deref_pbuc1=vbuaa 
    sta.z point2+OFFSET_STRUCT_POINT_Y
    // [13] *(SCREEN+2) = *((char *)&main::point2) -- _deref_pbuc1=_deref_pbuc2 
    lda.z point2
    sta SCREEN+2
    // [14] *(SCREEN+3) = *((char *)&main::point2+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda.z point2+OFFSET_STRUCT_POINT_Y
    sta SCREEN+3
    jmp __breturn
    // main::@return
  __breturn:
    // [15] return 
    rts
}
  // getPoint
// struct Point getPoint(char x, char y)
getPoint: {
    jmp __breturn
    // getPoint::@return
  __breturn:
    // [17] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda.z point1 with TXA
Replacing instruction lda.z point2 with TXA
Removing instruction getPoint_from_main:
Removing instruction __b1:
Removing instruction getPoint_from___b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant char OFFSET_STRUCT_POINT_Y = 1
__constant char * const SCREEN = (char *) 1024
struct Point getPoint(char x , char y)
char getPoint::p_x
char getPoint::p_y
struct Point getPoint::return
char getPoint::return_x
char getPoint::return_x#0 // reg byte x 2.0
char getPoint::return_x#1 // reg byte x 2.0
char getPoint::return_x#2 // reg byte x 1.0
char getPoint::return_y
char getPoint::return_y#0 // reg byte a 2.0
char getPoint::return_y#1 // reg byte a 2.0
char getPoint::return_y#2 // reg byte a 0.6666666666666666
char getPoint::x
char getPoint::y
void main()
__loadstore struct Point main::point1 // zp[2]:2
__loadstore struct Point main::point2 // zp[2]:4

reg byte x [ getPoint::return_x#2 ]
reg byte a [ getPoint::return_y#2 ]
reg byte x [ getPoint::return_x#0 ]
reg byte a [ getPoint::return_y#0 ]
reg byte x [ getPoint::return_x#1 ]
reg byte a [ getPoint::return_y#1 ]
zp[2]:2 [ main::point1 ]
zp[2]:4 [ main::point2 ]


FINAL ASSEMBLER
Score: 70

  // File Comments
// Minimal struct with C-Standard behavior - call return value (not supported yet)
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-23.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label point1 = 2
    .label point2 = 4
    // __ma struct Point point1 = getPoint(2, 3)
    // [1] call getPoint
    // [16] phi from main to getPoint [phi:main->getPoint]
    // [16] phi getPoint::return_y#2 = 3 [phi:main->getPoint#0] -- vbuaa=vbuc1 
    lda #3
    // [16] phi getPoint::return_x#2 = 2 [phi:main->getPoint#1] -- vbuxx=vbuc1 
    ldx #2
    jsr getPoint
    // __ma struct Point point1 = getPoint(2, 3)
    // [2] getPoint::return_x#0 = getPoint::return_x#2
    // [3] getPoint::return_y#0 = getPoint::return_y#2
    // main::@1
    // [4] *((char *)&main::point1) = getPoint::return_x#0 -- _deref_pbuc1=vbuxx 
    stx.z point1
    // [5] *((char *)&main::point1+OFFSET_STRUCT_POINT_Y) = getPoint::return_y#0 -- _deref_pbuc1=vbuaa 
    sta.z point1+OFFSET_STRUCT_POINT_Y
    // SCREEN[0] = point1.x
    // [6] *SCREEN = *((char *)&main::point1) -- _deref_pbuc1=_deref_pbuc2 
    txa
    sta SCREEN
    // SCREEN[1] = point1.y
    // [7] *(SCREEN+1) = *((char *)&main::point1+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda.z point1+OFFSET_STRUCT_POINT_Y
    sta SCREEN+1
    // __ma struct Point point2 = getPoint(4, 5)
    // [8] call getPoint
    // [16] phi from main::@1 to getPoint [phi:main::@1->getPoint]
    // [16] phi getPoint::return_y#2 = 5 [phi:main::@1->getPoint#0] -- vbuaa=vbuc1 
    lda #5
    // [16] phi getPoint::return_x#2 = 4 [phi:main::@1->getPoint#1] -- vbuxx=vbuc1 
    ldx #4
    jsr getPoint
    // __ma struct Point point2 = getPoint(4, 5)
    // [9] getPoint::return_x#1 = getPoint::return_x#2
    // [10] getPoint::return_y#1 = getPoint::return_y#2
    // main::@2
    // [11] *((char *)&main::point2) = getPoint::return_x#1 -- _deref_pbuc1=vbuxx 
    stx.z point2
    // [12] *((char *)&main::point2+OFFSET_STRUCT_POINT_Y) = getPoint::return_y#1 -- _deref_pbuc1=vbuaa 
    sta.z point2+OFFSET_STRUCT_POINT_Y
    // SCREEN[2] = point2.x
    // [13] *(SCREEN+2) = *((char *)&main::point2) -- _deref_pbuc1=_deref_pbuc2 
    txa
    sta SCREEN+2
    // SCREEN[3] = point2.y
    // [14] *(SCREEN+3) = *((char *)&main::point2+OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda.z point2+OFFSET_STRUCT_POINT_Y
    sta SCREEN+3
    // main::@return
    // }
    // [15] return 
    rts
}
  // getPoint
// struct Point getPoint(char x, char y)
getPoint: {
    // getPoint::@return
    // [17] return 
    rts
}
  // File Data

