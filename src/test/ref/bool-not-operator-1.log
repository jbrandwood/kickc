Eliminating unused variable with no statement main::$1

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@4
  main::i#2 = phi( main/main::i#0, main::@4/main::i#1 )
  main::$0 = main::i#2 & 1
  main::b#0 = main::$0 == 1
  main::$2 = ! main::b#0
  if(main::$2) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  main::i#4 = phi( main::@1/main::i#2 )
  main::$4 = 1
  to:main::@4
main::@3: scope:[main]  from main::@1
  main::i#5 = phi( main::@1/main::i#2 )
  main::$3 = 0
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@3
  main::i#3 = phi( main::@2/main::i#4, main::@3/main::i#5 )
  main::$5 = phi( main::@2/main::$4, main::@3/main::$3 )
  main::c#0 = main::$5
  main::screen[main::i#3] = main::c#0
  main::i#1 = main::i#3 + rangenext(0,7)
  main::$6 = main::i#1 != rangelast(0,7)
  if(main::$6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
number main::$0
bool main::$2
number main::$3
number main::$4
number main::$5
bool main::$6
bool main::b
bool main::b#0
char main::c
char main::c#0
char main::i
char main::i#0
char main::i#1
char main::i#2
char main::i#3
char main::i#4
char main::i#5
__constant char * const main::screen = (char *)$400

Adding number conversion cast (unumber) 1 in main::$0 = main::i#2 & 1
Adding number conversion cast (unumber) main::$0 in main::$0 = main::i#2 & (unumber)1
Adding number conversion cast (unumber) 1 in main::b#0 = main::$0 == 1
Adding number conversion cast (unumber) main::$5 in main::c#0 = main::$5
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast main::c#0 = (unumber)main::$5
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to char in main::$0 = main::i#2 & 1
Inversing boolean not [4] main::$2 = main::$0 != 1 from [3] main::b#0 = main::$0 == 1
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::i#2 = main::i#4 main::i#5 
Successful SSA optimization Pass2AliasElimination
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$2 [4] if(main::$0!=1) goto main::@2
Simple Condition main::$6 [12] if(main::i#1!=rangelast(0,7)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Constant main::$4 = 1
Constant main::$3 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [10] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [12] if(main::i#1!=rangelast(0,7)) goto main::@1 to 8
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 8 in [7] if(main::i#1!=8) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Constant inlined main::$3 = 0
Constant inlined main::$4 = 1
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Adding number conversion cast (unumber) main::$5 in main::$5 = phi( main::@2/1, main::@3/0 )
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast main::$5
Successful SSA optimization PassNCastSimplification
Inferred type updated to char for main::$5
Alias main::c#0 = main::$5 
Successful SSA optimization Pass2AliasElimination
Added new block during phi lifting main::@5(between main::@4 and main::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@2
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [10] main::i#6 = main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@3
Culled Empty Block label main::@5
Renumbering block main::@4 to main::@3
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [1] main::i#2 = phi( main/0, main::@3/main::i#1 )
  [2] main::$0 = main::i#2 & 1
  [3] if(main::$0!=1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  [4] phi()
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@2
  [5] main::c#0 = phi( main::@2/1, main::@1/0 )
  [6] main::screen[main::i#2] = main::c#0
  [7] main::i#1 = ++ main::i#2
  [8] if(main::i#1!=8) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [9] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
char main::$0 // 22.0
bool main::b
char main::c
char main::c#0 // 11.0
char main::i
char main::i#1 // 16.5
char main::i#2 // 7.333333333333333

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::c#0 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::c#0 ]
[ main::$0 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::$0 ]
Allocated zp[1]:4 [ main::c#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::c#0 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::$0 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 23.83: zp[1]:2 [ main::i#2 main::i#1 ] 22: zp[1]:3 [ main::$0 ] 11: zp[1]:4 [ main::c#0 ] 
Uplift Scope [] 

Uplifting [main] best 446 combination reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$0 ] reg byte a [ main::c#0 ] 
Uplifting [] best 446 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test the boolean NOT operator
// Bool not operator used in ternary operator
// Fails due to "Number integer type not resolved to fixed size integer type"
// https://gitlab.com/camelot/kickc/issues/199
  // Upstart
  // Commodore 64 PRG executable file
.file [name="bool-not-operator-1.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label screen = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [1] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::$0 = main::i#2 & 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // [3] if(main::$0!=1) goto main::@2 -- vbuaa_neq_vbuc1_then_la1 
    cmp #1
    bne __b2_from___b1
    // [5] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    // [5] phi main::c#0 = 0 [phi:main::@1->main::@3#0] -- vbuaa=vbuc1 
    lda #0
    jmp __b3
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [5] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [5] phi main::c#0 = 1 [phi:main::@2->main::@3#0] -- vbuaa=vbuc1 
    lda #1
    jmp __b3
    // main::@3
  __b3:
    // [6] main::screen[main::i#2] = main::c#0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta screen,x
    // [7] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [8] if(main::i#1!=8) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b1_from___b3
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b2_from___b1 with __b2
Replacing label __b1_from___b3 with __b1
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b3_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b3_from___b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
char main::$0 // reg byte a 22.0
bool main::b
char main::c
char main::c#0 // reg byte a 11.0
char main::i
char main::i#1 // reg byte x 16.5
char main::i#2 // reg byte x 7.333333333333333
__constant char * const main::screen = (char *) 1024

reg byte x [ main::i#2 main::i#1 ]
reg byte a [ main::c#0 ]
reg byte a [ main::$0 ]


FINAL ASSEMBLER
Score: 296

  // File Comments
// Test the boolean NOT operator
// Bool not operator used in ternary operator
// Fails due to "Number integer type not resolved to fixed size integer type"
// https://gitlab.com/camelot/kickc/issues/199
  // Upstart
  // Commodore 64 PRG executable file
.file [name="bool-not-operator-1.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label screen = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // i&1
    // [2] main::$0 = main::i#2 & 1 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #1
    // !b ? 1 : 0
    // [3] if(main::$0!=1) goto main::@2 -- vbuaa_neq_vbuc1_then_la1 
    cmp #1
    bne __b2
    // [5] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // [5] phi main::c#0 = 0 [phi:main::@1->main::@3#0] -- vbuaa=vbuc1 
    lda #0
    jmp __b3
    // [4] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
  __b2:
    // !b ? 1 : 0
    // [5] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // [5] phi main::c#0 = 1 [phi:main::@2->main::@3#0] -- vbuaa=vbuc1 
    lda #1
    // main::@3
  __b3:
    // screen[i] = c
    // [6] main::screen[main::i#2] = main::c#0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta screen,x
    // for(char i: 0..7)
    // [7] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [8] if(main::i#1!=8) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b1
    // main::@return
    // }
    // [9] return 
    rts
}
  // File Data

