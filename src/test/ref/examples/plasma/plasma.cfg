
(void()) main()
main: scope:[main]  from
  asm { sei  }
  [1] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) BLUE
  [2] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← (const nomodify byte) BLUE
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [3] (byte*) main::col#2 ← phi( main/(const nomodify byte*) COLS main::@1/(byte*) main::col#1 )
  [4] *((byte*) main::col#2) ← (const nomodify byte) BLACK
  [5] (byte*) main::col#1 ← ++ (byte*) main::col#2
  [6] if((byte*) main::col#1!=(const nomodify byte*) COLS+(word) $3e8+(byte) 1) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [7] phi()
  [8] call makecharset 
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@6
  [9] (byte) c2B#10 ← phi( main::@6/(byte) c2B#3 main::@2/(byte) 0 )
  [9] (byte) c2A#10 ← phi( main::@6/(byte) c2A#3 main::@2/(byte) 0 )
  [9] (byte) c1B#10 ← phi( main::@6/(byte) c1B#3 main::@2/(byte) 0 )
  [9] (byte) c1A#10 ← phi( main::@6/(byte) c1A#3 main::@2/(byte) 0 )
  to:main::@4
main::@4: scope:[main]  from main::@3
  [10] phi()
  [11] call doplasma 
  to:main::toD0181
main::toD0181: scope:[main]  from main::@4
  [12] phi()
  to:main::@5
main::@5: scope:[main]  from main::toD0181
  [13] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0
  [14] call doplasma 
  to:main::toD0182
main::toD0182: scope:[main]  from main::@5
  [15] phi()
  to:main::@6
main::@6: scope:[main]  from main::toD0182
  [16] *((const nomodify byte*) D018) ← (const byte) main::toD0182_return#0
  to:main::@3

(void()) doplasma((byte*) doplasma::screen)
doplasma: scope:[doplasma]  from main::@4 main::@5
  [17] (byte*) doplasma::screen#13 ← phi( main::@4/(const nomodify byte*) SCREEN1 main::@5/(const nomodify byte*) SCREEN2 )
  [17] (byte) c2B#26 ← phi( main::@4/(byte) c2B#10 main::@5/(byte) c2B#3 )
  [17] (byte) c2A#26 ← phi( main::@4/(byte) c2A#10 main::@5/(byte) c2A#3 )
  [17] (byte) c1B#11 ← phi( main::@4/(byte) c1B#10 main::@5/(byte) c1B#3 )
  [17] (byte) c1A#11 ← phi( main::@4/(byte) c1A#10 main::@5/(byte) c1A#3 )
  [18] (byte) doplasma::c1a#0 ← (byte) c1A#11
  [19] (byte) doplasma::c1b#0 ← (byte) c1B#11
  to:doplasma::@1
doplasma::@1: scope:[doplasma]  from doplasma doplasma::@2
  [20] (byte) doplasma::c1b#2 ← phi( doplasma/(byte) doplasma::c1b#0 doplasma::@2/(byte) doplasma::c1b#1 )
  [20] (byte) doplasma::c1a#2 ← phi( doplasma/(byte) doplasma::c1a#0 doplasma::@2/(byte) doplasma::c1a#1 )
  [20] (byte) doplasma::i#2 ← phi( doplasma/(byte) 0 doplasma::@2/(byte) doplasma::i#1 )
  [21] if((byte) doplasma::i#2<(byte) $19) goto doplasma::@2
  to:doplasma::@3
doplasma::@3: scope:[doplasma]  from doplasma::@1
  [22] (byte) c1A#3 ← (byte) c1A#11 + (byte) 3
  [23] (byte) c1B#3 ← (byte) c1B#11 - (byte) 5
  [24] (byte) doplasma::c2a#0 ← (byte) c2A#26
  [25] (byte) doplasma::c2b#0 ← (byte) c2B#26
  to:doplasma::@4
doplasma::@4: scope:[doplasma]  from doplasma::@3 doplasma::@5
  [26] (byte) doplasma::c2b#2 ← phi( doplasma::@3/(byte) doplasma::c2b#0 doplasma::@5/(byte) doplasma::c2b#1 )
  [26] (byte) doplasma::c2a#2 ← phi( doplasma::@3/(byte) doplasma::c2a#0 doplasma::@5/(byte) doplasma::c2a#1 )
  [26] (byte) doplasma::i1#2 ← phi( doplasma::@3/(byte) 0 doplasma::@5/(byte) doplasma::i1#1 )
  [27] if((byte) doplasma::i1#2<(byte) $28) goto doplasma::@5
  to:doplasma::@6
doplasma::@6: scope:[doplasma]  from doplasma::@4
  [28] (byte) c2A#3 ← (byte) c2A#26 + (byte) 2
  [29] (byte) c2B#3 ← (byte) c2B#26 - (byte) 3
  to:doplasma::@7
doplasma::@7: scope:[doplasma]  from doplasma::@10 doplasma::@6
  [30] (byte*) doplasma::screen#6 ← phi( doplasma::@10/(byte*) doplasma::screen#2 doplasma::@6/(byte*) doplasma::screen#13 )
  [30] (byte) doplasma::ii#2 ← phi( doplasma::@10/(byte) doplasma::ii#1 doplasma::@6/(byte) 0 )
  [31] if((byte) doplasma::ii#2<(byte) $19) goto doplasma::@8
  to:doplasma::@return
doplasma::@return: scope:[doplasma]  from doplasma::@7
  [32] return 
  to:@return
doplasma::@8: scope:[doplasma]  from doplasma::@7 doplasma::@9
  [33] (byte) doplasma::i2#2 ← phi( doplasma::@9/(byte) doplasma::i2#1 doplasma::@7/(byte) 0 )
  [34] if((byte) doplasma::i2#2<(byte) $28) goto doplasma::@9
  to:doplasma::@10
doplasma::@10: scope:[doplasma]  from doplasma::@8
  [35] (byte*) doplasma::screen#2 ← (byte*) doplasma::screen#6 + (byte) $28
  [36] (byte) doplasma::ii#1 ← ++ (byte) doplasma::ii#2
  to:doplasma::@7
doplasma::@9: scope:[doplasma]  from doplasma::@8
  [37] (byte~) doplasma::$6 ← *((const byte*) doplasma::xbuf + (byte) doplasma::i2#2) + *((const byte*) doplasma::ybuf + (byte) doplasma::ii#2)
  [38] *((byte*) doplasma::screen#6 + (byte) doplasma::i2#2) ← (byte~) doplasma::$6
  [39] (byte) doplasma::i2#1 ← ++ (byte) doplasma::i2#2
  to:doplasma::@8
doplasma::@5: scope:[doplasma]  from doplasma::@4
  [40] (byte~) doplasma::$3 ← *((const to_nomodify byte*) SINTABLE + (byte) doplasma::c2a#2) + *((const to_nomodify byte*) SINTABLE + (byte) doplasma::c2b#2)
  [41] *((const byte*) doplasma::xbuf + (byte) doplasma::i1#2) ← (byte~) doplasma::$3
  [42] (byte) doplasma::c2a#1 ← (byte) doplasma::c2a#2 + (byte) 3
  [43] (byte) doplasma::c2b#1 ← (byte) doplasma::c2b#2 + (byte) 7
  [44] (byte) doplasma::i1#1 ← ++ (byte) doplasma::i1#2
  to:doplasma::@4
doplasma::@2: scope:[doplasma]  from doplasma::@1
  [45] (byte~) doplasma::$1 ← *((const to_nomodify byte*) SINTABLE + (byte) doplasma::c1a#2) + *((const to_nomodify byte*) SINTABLE + (byte) doplasma::c1b#2)
  [46] *((const byte*) doplasma::ybuf + (byte) doplasma::i#2) ← (byte~) doplasma::$1
  [47] (byte) doplasma::c1a#1 ← (byte) doplasma::c1a#2 + (byte) 4
  [48] (byte) doplasma::c1b#1 ← (byte) doplasma::c1b#2 + (byte) 9
  [49] (byte) doplasma::i#1 ← ++ (byte) doplasma::i#2
  to:doplasma::@1

(void()) makecharset((byte*) makecharset::charset)
makecharset: scope:[makecharset]  from main::@2
  [50] phi()
  to:makecharset::sid_rnd_init1
makecharset::sid_rnd_init1: scope:[makecharset]  from makecharset
  [51] *((word*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_FREQ) ← (word) $ffff
  [52] *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_CONTROL) ← (const nomodify byte) SID_CONTROL_NOISE
  to:makecharset::@11
makecharset::@11: scope:[makecharset]  from makecharset::sid_rnd_init1
  [53] phi()
  [54] call print_cls 
  to:makecharset::@1
makecharset::@1: scope:[makecharset]  from makecharset::@10 makecharset::@11
  [55] (byte*) print_char_cursor#19 ← phi( makecharset::@10/(byte*) print_char_cursor#31 makecharset::@11/(const byte*) print_screen#0 )
  [55] (word) makecharset::c#2 ← phi( makecharset::@10/(word) makecharset::c#1 makecharset::@11/(word) 0 )
  [56] if((word) makecharset::c#2<(word) $100) goto makecharset::@2
  to:makecharset::@return
makecharset::@return: scope:[makecharset]  from makecharset::@1
  [57] return 
  to:@return
makecharset::@2: scope:[makecharset]  from makecharset::@1
  [58] (byte~) makecharset::$3 ← < (word) makecharset::c#2
  [59] (byte) makecharset::s#0 ← *((const to_nomodify byte*) SINTABLE + (byte~) makecharset::$3)
  to:makecharset::@3
makecharset::@3: scope:[makecharset]  from makecharset::@2 makecharset::@6
  [60] (byte) makecharset::i#2 ← phi( makecharset::@2/(byte) 0 makecharset::@6/(byte) makecharset::i#1 )
  [61] if((byte) makecharset::i#2<(byte) 8) goto makecharset::@5
  to:makecharset::@4
makecharset::@4: scope:[makecharset]  from makecharset::@3
  [62] (byte~) makecharset::$12 ← (word) makecharset::c#2 & (byte) 7
  [63] if((byte~) makecharset::$12!=(byte) 0) goto makecharset::@10
  to:makecharset::@9
makecharset::@9: scope:[makecharset]  from makecharset::@4
  [64] phi()
  [65] call print_char 
  to:makecharset::@10
makecharset::@10: scope:[makecharset]  from makecharset::@4 makecharset::@9
  [66] (byte*) print_char_cursor#31 ← phi( makecharset::@9/(byte*) print_char_cursor#0 makecharset::@4/(byte*) print_char_cursor#19 )
  [67] (word) makecharset::c#1 ← ++ (word) makecharset::c#2
  to:makecharset::@1
makecharset::@5: scope:[makecharset]  from makecharset::@3 makecharset::@7
  [68] (byte) makecharset::b#2 ← phi( makecharset::@3/(byte) 0 makecharset::@7/(byte) makecharset::b#6 )
  [68] (byte) makecharset::ii#2 ← phi( makecharset::@3/(byte) 0 makecharset::@7/(byte) makecharset::ii#1 )
  [69] if((byte) makecharset::ii#2<(byte) 8) goto makecharset::sid_rnd1
  to:makecharset::@6
makecharset::@6: scope:[makecharset]  from makecharset::@5
  [70] (word~) makecharset::$10 ← (word) makecharset::c#2 << (byte) 3
  [71] (word~) makecharset::$11 ← (word~) makecharset::$10 + (byte) makecharset::i#2
  [72] (byte*~) makecharset::$16 ← (const nomodify byte*) CHARSET + (word~) makecharset::$11
  [73] *((byte*~) makecharset::$16) ← (byte) makecharset::b#2
  [74] (byte) makecharset::i#1 ← ++ (byte) makecharset::i#2
  to:makecharset::@3
makecharset::sid_rnd1: scope:[makecharset]  from makecharset::@5
  [75] (byte) makecharset::sid_rnd1_return#0 ← *((byte*)(const nomodify struct MOS6581_SID*) SID+(const byte) OFFSET_STRUCT_MOS6581_SID_CH3_OSC)
  to:makecharset::@12
makecharset::@12: scope:[makecharset]  from makecharset::sid_rnd1
  [76] (byte~) makecharset::$7 ← (byte) makecharset::sid_rnd1_return#0 & (byte) $ff
  [77] if((byte~) makecharset::$7<=(byte) makecharset::s#0) goto makecharset::@7
  to:makecharset::@8
makecharset::@8: scope:[makecharset]  from makecharset::@12
  [78] (byte) makecharset::b#1 ← (byte) makecharset::b#2 | *((const to_nomodify byte*) makecharset::bittab + (byte) makecharset::ii#2)
  to:makecharset::@7
makecharset::@7: scope:[makecharset]  from makecharset::@12 makecharset::@8
  [79] (byte) makecharset::b#6 ← phi( makecharset::@12/(byte) makecharset::b#2 makecharset::@8/(byte) makecharset::b#1 )
  [80] (byte) makecharset::ii#1 ← ++ (byte) makecharset::ii#2
  to:makecharset::@5

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from makecharset::@9
  [81] *((byte*) print_char_cursor#19) ← (const byte) print_char::ch#0
  [82] (byte*) print_char_cursor#0 ← ++ (byte*) print_char_cursor#19
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [83] return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from makecharset::@11
  [84] phi()
  [85] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [86] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [87] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [88] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [89] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [90] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [91] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [92] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1
