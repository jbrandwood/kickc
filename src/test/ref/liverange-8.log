Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  (byte) idx#22 ← phi( _start::@1/(byte) idx#21 )
  (byte) main::c#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) idx#19 ← phi( main/(byte) idx#22 main::@2/(byte) idx#0 )
  (byte) main::c#2 ← phi( main/(byte) main::c#0 main::@2/(byte) main::c#1 )
  (byte) out2::c#0 ← (byte) main::c#2
  call out2 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) main::c#3 ← phi( main::@1/(byte) main::c#2 )
  (byte) idx#10 ← phi( main::@1/(byte) idx#4 )
  (byte) idx#0 ← (byte) idx#10
  (byte) main::c#1 ← (byte) main::c#3 + rangenext(0,$27)
  (bool~) main::$1 ← (byte) main::c#1 != rangelast(0,$27)
  if((bool~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte) idx#11 ← phi( main::@2/(byte) idx#0 )
  (byte) idx#1 ← (byte) idx#11
  return 
  to:@return

(void()) out2((byte) out2::c)
out2: scope:[out2]  from main::@1
  (byte) idx#20 ← phi( main::@1/(byte) idx#19 )
  (byte) out2::c#1 ← phi( main::@1/(byte) out2::c#0 )
  (byte) out::c#0 ← (byte) out2::c#1
  call out 
  to:out2::@1
out2::@1: scope:[out2]  from out2
  (byte) out2::c#2 ← phi( out2/(byte) out2::c#1 )
  (byte) idx#12 ← phi( out2/(byte) idx#6 )
  (byte) idx#2 ← (byte) idx#12
  (byte) out::c#1 ← (byte) out2::c#2
  call out 
  to:out2::@2
out2::@2: scope:[out2]  from out2::@1
  (byte) idx#13 ← phi( out2::@1/(byte) idx#6 )
  (byte) idx#3 ← (byte) idx#13
  to:out2::@return
out2::@return: scope:[out2]  from out2::@2
  (byte) idx#14 ← phi( out2::@2/(byte) idx#3 )
  (byte) idx#4 ← (byte) idx#14
  return 
  to:@return

(void()) out((byte) out::c)
out: scope:[out]  from out2 out2::@1
  (byte) out::c#2 ← phi( out2/(byte) out::c#0 out2::@1/(byte) out::c#1 )
  (byte) idx#15 ← phi( out2/(byte) idx#20 out2::@1/(byte) idx#2 )
  (byte) idx#5 ← ++ (byte) idx#15
  *((const nomodify byte*) SCREEN + (byte) idx#5) ← (byte) out::c#2
  to:out::@return
out::@return: scope:[out]  from out
  (byte) idx#16 ← phi( out/(byte) idx#5 )
  (byte) idx#6 ← (byte) idx#16
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (byte) idx#7 ← (byte) 0
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  (byte) idx#21 ← phi( _start::_init1/(byte) idx#7 )
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  (byte) idx#17 ← phi( _start::@1/(byte) idx#1 )
  (byte) idx#8 ← (byte) idx#17
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  (byte) idx#18 ← phi( _start::@2/(byte) idx#8 )
  (byte) idx#9 ← (byte) idx#18
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(byte) idx
(byte) idx#0
(byte) idx#1
(byte) idx#10
(byte) idx#11
(byte) idx#12
(byte) idx#13
(byte) idx#14
(byte) idx#15
(byte) idx#16
(byte) idx#17
(byte) idx#18
(byte) idx#19
(byte) idx#2
(byte) idx#20
(byte) idx#21
(byte) idx#22
(byte) idx#3
(byte) idx#4
(byte) idx#5
(byte) idx#6
(byte) idx#7
(byte) idx#8
(byte) idx#9
(void()) main()
(bool~) main::$1
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::c
(byte) main::c#0
(byte) main::c#1
(byte) main::c#2
(byte) main::c#3
(void()) out((byte) out::c)
(label) out::@return
(byte) out::c
(byte) out::c#0
(byte) out::c#1
(byte) out::c#2
(void()) out2((byte) out2::c)
(label) out2::@1
(label) out2::@2
(label) out2::@return
(byte) out2::c
(byte) out2::c#0
(byte) out2::c#1
(byte) out2::c#2

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Alias main::c#2 = main::c#3 
Alias idx#0 = idx#10 idx#11 idx#1 
Alias out2::c#1 = out2::c#2 
Alias idx#12 = idx#2 
Alias idx#13 = idx#3 idx#14 idx#4 
Alias idx#16 = idx#5 idx#6 
Alias idx#21 = idx#7 
Alias idx#17 = idx#8 idx#18 idx#9 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) idx#22 (byte) idx#21
Identical Phi Values (byte) idx#0 (byte) idx#13
Identical Phi Values (byte) out2::c#1 (byte) out2::c#0
Identical Phi Values (byte) idx#20 (byte) idx#19
Identical Phi Values (byte) idx#12 (byte) idx#16
Identical Phi Values (byte) idx#13 (byte) idx#16
Identical Phi Values (byte) idx#17 (byte) idx#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$1 [8] if((byte) main::c#1!=rangelast(0,$27)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::c#0 = 0
Constant (const byte) idx#21 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [6] main::c#1 ← ++ main::c#2 to ++
Resolved ranged comparison value [8] if(main::c#1!=rangelast(0,$27)) goto main::@1 to (number) $28
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $28 in [4] if((byte) main::c#1!=(number) $28) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte) main::c#0
Inlining constant with var siblings (const byte) idx#21
Constant inlined idx#21 = (byte) 0
Constant inlined main::c#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@3(between main::@2 and main::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of out2::@2
CALL GRAPH
Calls in [main] to out2:3 
Calls in [out2] to out:12 out:16 

Created 4 initial phi equivalence classes
Coalesced [7] main::c#4 ← main::c#1
Coalesced [8] idx#23 ← idx#16
Coalesced [10] idx#24 ← idx#19
Coalesced [11] out::c#3 ← out::c#0
Coalesced (already) [14] idx#25 ← idx#16
Coalesced [15] out::c#4 ← out::c#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) main::@3
Culled Empty Block (label) out2::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] (byte) idx#19 ← phi( main/(byte) 0 main::@2/(byte) idx#16 )
  [1] (byte) main::c#2 ← phi( main/(byte) 0 main::@2/(byte) main::c#1 )
  [2] (byte) out2::c#0 ← (byte) main::c#2
  [3] call out2 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] (byte) main::c#1 ← ++ (byte) main::c#2
  [5] if((byte) main::c#1!=(byte) $28) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [6] return 
  to:@return

(void()) out2((byte) out2::c)
out2: scope:[out2]  from main::@1
  [7] (byte) out::c#0 ← (byte) out2::c#0
  [8] call out 
  to:out2::@1
out2::@1: scope:[out2]  from out2
  [9] (byte) out::c#1 ← (byte) out2::c#0
  [10] call out 
  to:out2::@return
out2::@return: scope:[out2]  from out2::@1
  [11] return 
  to:@return

(void()) out((byte) out::c)
out: scope:[out]  from out2 out2::@1
  [12] (byte) out::c#2 ← phi( out2/(byte) out::c#0 out2::@1/(byte) out::c#1 )
  [12] (byte) idx#15 ← phi( out2/(byte) idx#19 out2::@1/(byte) idx#16 )
  [13] (byte) idx#16 ← ++ (byte) idx#15
  [14] *((const nomodify byte*) SCREEN + (byte) idx#16) ← (byte) out::c#2
  to:out::@return
out::@return: scope:[out]  from out
  [15] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) idx
(byte) idx#15 1203.0
(byte) idx#16 211.39999999999998
(byte) idx#19 37.33333333333333
(void()) main()
(byte) main::c
(byte) main::c#1 16.5
(byte) main::c#2 11.0
(void()) out((byte) out::c)
(byte) out::c
(byte) out::c#0 202.0
(byte) out::c#1 202.0
(byte) out::c#2 601.5
(void()) out2((byte) out2::c)
(byte) out2::c
(byte) out2::c#0 71.0

Initial phi equivalence classes
[ main::c#2 main::c#1 ]
[ idx#15 idx#19 idx#16 ]
[ out::c#2 out::c#0 out::c#1 ]
Added variable out2::c#0 to live range equivalence class [ out2::c#0 ]
Complete equivalence classes
[ main::c#2 main::c#1 ]
[ idx#15 idx#19 idx#16 ]
[ out::c#2 out::c#0 out::c#1 ]
[ out2::c#0 ]
Allocated zp[1]:2 [ main::c#2 main::c#1 ]
Allocated zp[1]:3 [ idx#15 idx#19 idx#16 ]
Allocated zp[1]:4 [ out::c#2 out::c#0 out::c#1 ]
Allocated zp[1]:5 [ out2::c#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test effective live range and register allocation
// Here main::c, out2::c and out::c can all have the same allocation - and the global idx can be allocated to a hardware register.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .label idx = 3
  // main
main: {
    .label c = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) idx#19 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [1] phi (byte) main::c#2 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi (byte) idx#19 = (byte) idx#16 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] (byte) out2::c#0 ← (byte) main::c#2 -- vbuz1=vbuz2 
    lda.z c
    sta.z out2.c
    // [3] call out2 
    jsr out2
    jmp __b2
    // main::@2
  __b2:
    // [4] (byte) main::c#1 ← ++ (byte) main::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [5] if((byte) main::c#1!=(byte) $28) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z c
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // out2
// out2(byte zp(5) c)
out2: {
    .label c = 5
    // [7] (byte) out::c#0 ← (byte) out2::c#0 -- vbuz1=vbuz2 
    lda.z c
    sta.z out.c
    // [8] call out 
    // [12] phi from out2 to out [phi:out2->out]
  out_from_out2:
    // [12] phi (byte) out::c#2 = (byte) out::c#0 [phi:out2->out#0] -- register_copy 
    // [12] phi (byte) idx#15 = (byte) idx#19 [phi:out2->out#1] -- register_copy 
    jsr out
    jmp __b1
    // out2::@1
  __b1:
    // [9] (byte) out::c#1 ← (byte) out2::c#0 -- vbuz1=vbuz2 
    lda.z c
    sta.z out.c
    // [10] call out 
    // [12] phi from out2::@1 to out [phi:out2::@1->out]
  out_from___b1:
    // [12] phi (byte) out::c#2 = (byte) out::c#1 [phi:out2::@1->out#0] -- register_copy 
    // [12] phi (byte) idx#15 = (byte) idx#16 [phi:out2::@1->out#1] -- register_copy 
    jsr out
    jmp __breturn
    // out2::@return
  __breturn:
    // [11] return 
    rts
}
  // out
// out(byte zp(4) c)
out: {
    .label c = 4
    // [13] (byte) idx#16 ← ++ (byte) idx#15 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [14] *((const nomodify byte*) SCREEN + (byte) idx#16) ← (byte) out::c#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z c
    ldy.z idx
    sta SCREEN,y
    jmp __breturn
    // out::@return
  __breturn:
    // [15] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::c#2 main::c#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ idx#15 idx#19 idx#16 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ out::c#2 out::c#0 out::c#1 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ out2::c#0 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 1,451.73: zp[1]:3 [ idx#15 idx#19 idx#16 ] 
Uplift Scope [out] 1,005.5: zp[1]:4 [ out::c#2 out::c#0 out::c#1 ] 
Uplift Scope [out2] 71: zp[1]:5 [ out2::c#0 ] 
Uplift Scope [main] 27.5: zp[1]:2 [ main::c#2 main::c#1 ] 

Uplifting [] best 496 combination reg byte x [ idx#15 idx#19 idx#16 ] 
Uplifting [out] best 487 combination reg byte a [ out::c#2 out::c#0 out::c#1 ] 
Uplifting [out2] best 451 combination reg byte a [ out2::c#0 ] 
Uplifting [main] best 351 combination reg byte a [ main::c#2 main::c#1 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test effective live range and register allocation
// Here main::c, out2::c and out::c can all have the same allocation - and the global idx can be allocated to a hardware register.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) idx#19 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi (byte) main::c#2 = (byte) 0 [phi:main->main::@1#1] -- vbuaa=vbuc1 
    lda #0
    jmp __b1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi (byte) idx#19 = (byte) idx#16 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] (byte) out2::c#0 ← (byte) main::c#2
    // [3] call out2 
    jsr out2
    jmp __b2
    // main::@2
  __b2:
    // [4] (byte) main::c#1 ← ++ (byte) main::c#2 -- vbuaa=_inc_vbuaa 
    clc
    adc #1
    // [5] if((byte) main::c#1!=(byte) $28) goto main::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$28
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // out2
// out2(byte register(A) c)
out2: {
    // [7] (byte) out::c#0 ← (byte) out2::c#0
    // [8] call out 
    // [12] phi from out2 to out [phi:out2->out]
  out_from_out2:
    // [12] phi (byte) out::c#2 = (byte) out::c#0 [phi:out2->out#0] -- register_copy 
    // [12] phi (byte) idx#15 = (byte) idx#19 [phi:out2->out#1] -- register_copy 
    jsr out
    jmp __b1
    // out2::@1
  __b1:
    // [9] (byte) out::c#1 ← (byte) out2::c#0
    // [10] call out 
    // [12] phi from out2::@1 to out [phi:out2::@1->out]
  out_from___b1:
    // [12] phi (byte) out::c#2 = (byte) out::c#1 [phi:out2::@1->out#0] -- register_copy 
    // [12] phi (byte) idx#15 = (byte) idx#16 [phi:out2::@1->out#1] -- register_copy 
    jsr out
    jmp __breturn
    // out2::@return
  __breturn:
    // [11] return 
    rts
}
  // out
// out(byte register(A) c)
out: {
    // [13] (byte) idx#16 ← ++ (byte) idx#15 -- vbuxx=_inc_vbuxx 
    inx
    // [14] *((const nomodify byte*) SCREEN + (byte) idx#16) ← (byte) out::c#2 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    jmp __breturn
    // out::@return
  __breturn:
    // [15] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda #0 with TXA
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from___b2:
Removing instruction out_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction out_from_out2:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(const nomodify byte*) SCREEN = (byte*) 1024
(byte) idx
(byte) idx#15 reg byte x 1203.0
(byte) idx#16 reg byte x 211.39999999999998
(byte) idx#19 reg byte x 37.33333333333333
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::c
(byte) main::c#1 reg byte a 16.5
(byte) main::c#2 reg byte a 11.0
(void()) out((byte) out::c)
(label) out::@return
(byte) out::c
(byte) out::c#0 reg byte a 202.0
(byte) out::c#1 reg byte a 202.0
(byte) out::c#2 reg byte a 601.5
(void()) out2((byte) out2::c)
(label) out2::@1
(label) out2::@return
(byte) out2::c
(byte) out2::c#0 reg byte a 71.0

reg byte a [ main::c#2 main::c#1 ]
reg byte x [ idx#15 idx#19 idx#16 ]
reg byte a [ out::c#2 out::c#0 out::c#1 ]
reg byte a [ out2::c#0 ]


FINAL ASSEMBLER
Score: 222

  // File Comments
// Test effective live range and register allocation
// Here main::c, out2::c and out::c can all have the same allocation - and the global idx can be allocated to a hardware register.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi (byte) idx#19 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi (byte) main::c#2 = (byte) 0 [phi:main->main::@1#1] -- vbuaa=vbuc1 
    txa
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi (byte) idx#19 = (byte) idx#16 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi (byte) main::c#2 = (byte) main::c#1 [phi:main::@2->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // out2(c)
    // [2] (byte) out2::c#0 ← (byte) main::c#2
    // [3] call out2 
    jsr out2
    // main::@2
    // for(char c: 0..39 )
    // [4] (byte) main::c#1 ← ++ (byte) main::c#2 -- vbuaa=_inc_vbuaa 
    clc
    adc #1
    // [5] if((byte) main::c#1!=(byte) $28) goto main::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$28
    bne __b1
    // main::@return
    // }
    // [6] return 
    rts
}
  // out2
// out2(byte register(A) c)
out2: {
    // out(c)
    // [7] (byte) out::c#0 ← (byte) out2::c#0
    // [8] call out 
    // [12] phi from out2 to out [phi:out2->out]
    // [12] phi (byte) out::c#2 = (byte) out::c#0 [phi:out2->out#0] -- register_copy 
    // [12] phi (byte) idx#15 = (byte) idx#19 [phi:out2->out#1] -- register_copy 
    jsr out
    // out2::@1
    // out(c)
    // [9] (byte) out::c#1 ← (byte) out2::c#0
    // [10] call out 
    // [12] phi from out2::@1 to out [phi:out2::@1->out]
    // [12] phi (byte) out::c#2 = (byte) out::c#1 [phi:out2::@1->out#0] -- register_copy 
    // [12] phi (byte) idx#15 = (byte) idx#16 [phi:out2::@1->out#1] -- register_copy 
    jsr out
    // out2::@return
    // }
    // [11] return 
    rts
}
  // out
// out(byte register(A) c)
out: {
    // idx++;
    // [13] (byte) idx#16 ← ++ (byte) idx#15 -- vbuxx=_inc_vbuxx 
    inx
    // SCREEN[idx] = c
    // [14] *((const nomodify byte*) SCREEN + (byte) idx#16) ← (byte) out::c#2 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // out::@return
    // }
    // [15] return 
    rts
}
  // File Data

