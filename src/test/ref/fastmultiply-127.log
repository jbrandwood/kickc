Fixing pointer addition (word*~) bsearch16u::$7 ← (word*) bsearch16u::items + (byte~) bsearch16u::$6
Fixing pointer addition (word*~) bsearch16u::$15 ← (word*) bsearch16u::pivot + (number) 1
Fixing pointer addition (word*~) bsearch16u::$1 ← (word*) bsearch16u::items - (number) 1
Fixing pointer array-indexing *((word*) utoa::digit_values + (byte) utoa::digit)
Fixing pointer array-indexing *((dword*) ultoa::digit_values + (byte) ultoa::digit)
Warning! Adding boolean cast to non-boolean condition *((byte*) strcpy::src)
Warning! Adding boolean cast to non-boolean condition *((byte*) strlen::str)
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str_lines::str)
Warning! Adding boolean cast to non-boolean condition (byte) print_str_lines::ch
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str::str)
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str_at::str)
Warning! Adding boolean cast to non-boolean sub-expression (byte) print_str_lines::ch
Identified constant variable (byte*) HEAP_TOP
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) memset::@7
Culled Empty Block (label) memset::@6
Culled Empty Block (label) memset::@8
Culled Empty Block (label) memset::@9
Culled Empty Block (label) memset::@3
Culled Empty Block (label) @3
Culled Empty Block (label) @4
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @12
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) print_str::@4
Culled Empty Block (label) print_str::@3
Culled Empty Block (label) print_str::@5
Culled Empty Block (label) print_str::@6
Culled Empty Block (label) @16
Culled Empty Block (label) @17
Culled Empty Block (label) @18
Culled Empty Block (label) print_sint::@4
Culled Empty Block (label) @19
Culled Empty Block (label) print_s8::@4
Culled Empty Block (label) @20
Culled Empty Block (label) @21
Culled Empty Block (label) @22
Culled Empty Block (label) @23
Culled Empty Block (label) @24
Culled Empty Block (label) @25
Culled Empty Block (label) @26
Culled Empty Block (label) @27
Culled Empty Block (label) @28
Culled Empty Block (label) @29
Culled Empty Block (label) @30
Culled Empty Block (label) @31
Culled Empty Block (label) @32
Culled Empty Block (label) @33
Culled Empty Block (label) @34
Culled Empty Block (label) @35
Culled Empty Block (label) @36
Culled Empty Block (label) @37
Culled Empty Block (label) @38
Culled Empty Block (label) @39
Culled Empty Block (label) @40
Culled Empty Block (label) mulf8u127::@1
Culled Empty Block (label) @41
Culled Empty Block (label) mulf8s127::@7

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@13

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  (byte) memset::c#4 ← phi( print_cls/(byte) memset::c#0 )
  (void*) memset::str#3 ← phi( print_cls/(void*) memset::str#0 )
  (word) memset::num#1 ← phi( print_cls/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@4
  (void*) memset::str#1 ← phi( memset/(void*) memset::str#3 memset::@4/(void*) memset::str#4 )
  (void*) memset::return#0 ← (void*) memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#2 ← phi( memset/(word) memset::num#1 )
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#3 )
  (byte*~) memset::$2 ← ((byte*)) (void*) memset::str#2
  (byte*~) memset::$3 ← (byte*~) memset::$2 + (word) memset::num#2
  (byte*) memset::end#0 ← (byte*~) memset::$3
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#2
  to:memset::@4
memset::@4: scope:[memset]  from memset::@2 memset::@5
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@5/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( memset::@2/(void*) memset::str#2 memset::@5/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@5/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@5/(byte*) memset::dst#1 )
  (bool~) memset::$4 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$4) goto memset::@5
  to:memset::@1
memset::@5: scope:[memset]  from memset::@4
  (void*) memset::str#5 ← phi( memset::@4/(void*) memset::str#4 )
  (byte*) memset::end#2 ← phi( memset::@4/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@4/(byte*) memset::dst#2 )
  (byte) memset::c#1 ← phi( memset::@4/(byte) memset::c#2 )
  *((byte*) memset::dst#3) ← (byte) memset::c#1
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@4
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#3 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#3
  return 
  to:@return
@13: scope:[]  from @begin
  (byte*) print_screen#0 ← (byte*)(number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@42

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from main::@1 main::@11
  (byte*) print_char_cursor#136 ← phi( main::@1/(byte*) print_char_cursor#23 main::@11/(byte*) print_char_cursor#33 )
  (byte*) print_str::str#5 ← phi( main::@1/(byte*) print_str::str#1 main::@11/(byte*) print_str::str#2 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (byte*) print_char_cursor#122 ← phi( print_str/(byte*) print_char_cursor#136 print_str::@2/(byte*) print_char_cursor#1 )
  (byte*) print_str::str#3 ← phi( print_str/(byte*) print_str::str#5 print_str::@2/(byte*) print_str::str#0 )
  (bool~) print_str::$0 ← (number) 0 != *((byte*) print_str::str#3)
  if((bool~) print_str::$0) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#62 ← phi( print_str::@1/(byte*) print_char_cursor#122 )
  (byte*) print_str::str#4 ← phi( print_str::@1/(byte*) print_str::str#3 )
  *((byte*) print_char_cursor#62) ← *((byte*) print_str::str#4)
  (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#62
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#4
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#63 ← phi( print_str::@1/(byte*) print_char_cursor#122 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#63
  return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from main::@12 main::@2 print_mulf8s127::@6 print_mulf8u127::@6
  (byte*) print_char_cursor#123 ← phi( main::@12/(byte*) print_char_cursor#34 main::@2/(byte*) print_char_cursor#24 print_mulf8s127::@6/(byte*) print_char_cursor#58 print_mulf8u127::@6/(byte*) print_char_cursor#51 )
  (byte*) print_line_cursor#63 ← phi( main::@12/(byte*) print_line_cursor#66 main::@2/(byte*) print_line_cursor#65 print_mulf8s127::@6/(byte*) print_line_cursor#68 print_mulf8u127::@6/(byte*) print_line_cursor#67 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#64 ← phi( print_ln/(byte*) print_char_cursor#123 print_ln::@1/(byte*) print_char_cursor#64 )
  (byte*) print_line_cursor#32 ← phi( print_ln/(byte*) print_line_cursor#63 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#32 + (number) $28
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#64
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#33 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#3 ← (byte*) print_line_cursor#33
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#65 ← phi( print_ln::@2/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#34 ← phi( print_ln::@2/(byte*) print_line_cursor#33 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#34
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#65
  return 
  to:@return

(void()) print_sint((signed word) print_sint::w)
print_sint: scope:[print_sint]  from print_mulf8s127::@5
  (byte*) print_char_cursor#137 ← phi( print_mulf8s127::@5/(byte*) print_char_cursor#57 )
  (signed word) print_sint::w#2 ← phi( print_mulf8s127::@5/(signed word) print_sint::w#1 )
  (bool~) print_sint::$0 ← (signed word) print_sint::w#2 < (number) 0
  if((bool~) print_sint::$0) goto print_sint::@1
  to:print_sint::@3
print_sint::@1: scope:[print_sint]  from print_sint
  (signed word) print_sint::w#5 ← phi( print_sint/(signed word) print_sint::w#2 )
  (byte*) print_char_cursor#124 ← phi( print_sint/(byte*) print_char_cursor#137 )
  (byte) print_char::ch#0 ← (byte) '-'
  call print_char 
  to:print_sint::@5
print_sint::@5: scope:[print_sint]  from print_sint::@1
  (signed word) print_sint::w#3 ← phi( print_sint::@1/(signed word) print_sint::w#5 )
  (byte*) print_char_cursor#66 ← phi( print_sint::@1/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#66
  (signed word~) print_sint::$5 ← - (signed word) print_sint::w#3
  (signed word) print_sint::w#0 ← (signed word~) print_sint::$5
  to:print_sint::@2
print_sint::@3: scope:[print_sint]  from print_sint
  (signed word) print_sint::w#7 ← phi( print_sint/(signed word) print_sint::w#2 )
  (byte*) print_char_cursor#125 ← phi( print_sint/(byte*) print_char_cursor#137 )
  (byte) print_char::ch#1 ← (byte) ' '
  call print_char 
  to:print_sint::@6
print_sint::@6: scope:[print_sint]  from print_sint::@3
  (signed word) print_sint::w#6 ← phi( print_sint::@3/(signed word) print_sint::w#7 )
  (byte*) print_char_cursor#67 ← phi( print_sint::@3/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#67
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@5 print_sint::@6
  (byte*) print_char_cursor#126 ← phi( print_sint::@5/(byte*) print_char_cursor#5 print_sint::@6/(byte*) print_char_cursor#6 )
  (signed word) print_sint::w#4 ← phi( print_sint::@5/(signed word) print_sint::w#0 print_sint::@6/(signed word) print_sint::w#6 )
  (word~) print_sint::$1 ← ((word)) (signed word) print_sint::w#4
  (word) print_uint::w#0 ← (word~) print_sint::$1
  call print_uint 
  to:print_sint::@7
print_sint::@7: scope:[print_sint]  from print_sint::@2
  (byte*) print_char_cursor#68 ← phi( print_sint::@2/(byte*) print_char_cursor#15 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#68
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@7
  (byte*) print_char_cursor#69 ← phi( print_sint::@7/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#69
  return 
  to:@return

(void()) print_s8((signed byte) print_s8::b)
print_s8: scope:[print_s8]  from print_mulf8s127::@1 print_mulf8s127::@3
  (byte*) print_char_cursor#138 ← phi( print_mulf8s127::@1/(byte*) print_char_cursor#134 print_mulf8s127::@3/(byte*) print_char_cursor#55 )
  (signed byte) print_s8::b#3 ← phi( print_mulf8s127::@1/(signed byte) print_s8::b#1 print_mulf8s127::@3/(signed byte) print_s8::b#2 )
  (bool~) print_s8::$0 ← (signed byte) print_s8::b#3 < (number) 0
  if((bool~) print_s8::$0) goto print_s8::@1
  to:print_s8::@3
print_s8::@1: scope:[print_s8]  from print_s8
  (signed byte) print_s8::b#6 ← phi( print_s8/(signed byte) print_s8::b#3 )
  (byte*) print_char_cursor#127 ← phi( print_s8/(byte*) print_char_cursor#138 )
  (byte) print_char::ch#2 ← (byte) '-'
  call print_char 
  to:print_s8::@5
print_s8::@5: scope:[print_s8]  from print_s8::@1
  (signed byte) print_s8::b#4 ← phi( print_s8::@1/(signed byte) print_s8::b#6 )
  (byte*) print_char_cursor#70 ← phi( print_s8::@1/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#70
  (signed byte~) print_s8::$5 ← - (signed byte) print_s8::b#4
  (signed byte) print_s8::b#0 ← (signed byte~) print_s8::$5
  to:print_s8::@2
print_s8::@3: scope:[print_s8]  from print_s8
  (signed byte) print_s8::b#8 ← phi( print_s8/(signed byte) print_s8::b#3 )
  (byte*) print_char_cursor#128 ← phi( print_s8/(byte*) print_char_cursor#138 )
  (byte) print_char::ch#3 ← (byte) ' '
  call print_char 
  to:print_s8::@6
print_s8::@6: scope:[print_s8]  from print_s8::@3
  (signed byte) print_s8::b#7 ← phi( print_s8::@3/(signed byte) print_s8::b#8 )
  (byte*) print_char_cursor#71 ← phi( print_s8::@3/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#71
  to:print_s8::@2
print_s8::@2: scope:[print_s8]  from print_s8::@5 print_s8::@6
  (byte*) print_char_cursor#129 ← phi( print_s8::@5/(byte*) print_char_cursor#9 print_s8::@6/(byte*) print_char_cursor#10 )
  (signed byte) print_s8::b#5 ← phi( print_s8::@5/(signed byte) print_s8::b#0 print_s8::@6/(signed byte) print_s8::b#7 )
  (byte~) print_s8::$1 ← ((byte)) (signed byte) print_s8::b#5
  (byte) print_u8::b#0 ← (byte~) print_s8::$1
  call print_u8 
  to:print_s8::@7
print_s8::@7: scope:[print_s8]  from print_s8::@2
  (byte*) print_char_cursor#72 ← phi( print_s8::@2/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#72
  to:print_s8::@return
print_s8::@return: scope:[print_s8]  from print_s8::@7
  (byte*) print_char_cursor#73 ← phi( print_s8::@7/(byte*) print_char_cursor#11 )
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#73
  return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from print_mulf8u127::@5 print_sint::@2
  (byte*) print_char_cursor#130 ← phi( print_mulf8u127::@5/(byte*) print_char_cursor#50 print_sint::@2/(byte*) print_char_cursor#126 )
  (word) print_uint::w#2 ← phi( print_mulf8u127::@5/(word) print_uint::w#1 print_sint::@2/(word) print_uint::w#0 )
  (byte~) print_uint::$0 ← > (word) print_uint::w#2
  (byte) print_u8::b#1 ← (byte~) print_uint::$0
  call print_u8 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  (word) print_uint::w#3 ← phi( print_uint/(word) print_uint::w#2 )
  (byte*) print_char_cursor#74 ← phi( print_uint/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#74
  (byte~) print_uint::$2 ← < (word) print_uint::w#3
  (byte) print_u8::b#2 ← (byte~) print_uint::$2
  call print_u8 
  to:print_uint::@2
print_uint::@2: scope:[print_uint]  from print_uint::@1
  (byte*) print_char_cursor#75 ← phi( print_uint::@1/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#75
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@2
  (byte*) print_char_cursor#76 ← phi( print_uint::@2/(byte*) print_char_cursor#14 )
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#76
  return 
  to:@return

(void()) print_u8((byte) print_u8::b)
print_u8: scope:[print_u8]  from print_mulf8u127::@1 print_mulf8u127::@3 print_s8::@2 print_uint print_uint::@1
  (byte*) print_char_cursor#131 ← phi( print_mulf8u127::@1/(byte*) print_char_cursor#133 print_mulf8u127::@3/(byte*) print_char_cursor#48 print_s8::@2/(byte*) print_char_cursor#129 print_uint/(byte*) print_char_cursor#130 print_uint::@1/(byte*) print_char_cursor#13 )
  (byte) print_u8::b#5 ← phi( print_mulf8u127::@1/(byte) print_u8::b#3 print_mulf8u127::@3/(byte) print_u8::b#4 print_s8::@2/(byte) print_u8::b#0 print_uint/(byte) print_u8::b#1 print_uint::@1/(byte) print_u8::b#2 )
  (byte~) print_u8::$0 ← (byte) print_u8::b#5 >> (number) 4
  (byte) print_char::ch#4 ← *((const to_nomodify byte*) print_hextab + (byte~) print_u8::$0)
  call print_char 
  to:print_u8::@1
print_u8::@1: scope:[print_u8]  from print_u8
  (byte) print_u8::b#6 ← phi( print_u8/(byte) print_u8::b#5 )
  (byte*) print_char_cursor#77 ← phi( print_u8/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#77
  (number~) print_u8::$2 ← (byte) print_u8::b#6 & (number) $f
  (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (number~) print_u8::$2)
  call print_char 
  to:print_u8::@2
print_u8::@2: scope:[print_u8]  from print_u8::@1
  (byte*) print_char_cursor#78 ← phi( print_u8::@1/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#78
  to:print_u8::@return
print_u8::@return: scope:[print_u8]  from print_u8::@2
  (byte*) print_char_cursor#79 ← phi( print_u8::@2/(byte*) print_char_cursor#17 )
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#79
  return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_mulf8s127::@2 print_mulf8s127::@4 print_mulf8u127::@2 print_mulf8u127::@4 print_s8::@1 print_s8::@3 print_sint::@1 print_sint::@3 print_u8 print_u8::@1
  (byte*) print_char_cursor#80 ← phi( print_mulf8s127::@2/(byte*) print_char_cursor#54 print_mulf8s127::@4/(byte*) print_char_cursor#56 print_mulf8u127::@2/(byte*) print_char_cursor#47 print_mulf8u127::@4/(byte*) print_char_cursor#49 print_s8::@1/(byte*) print_char_cursor#127 print_s8::@3/(byte*) print_char_cursor#128 print_sint::@1/(byte*) print_char_cursor#124 print_sint::@3/(byte*) print_char_cursor#125 print_u8/(byte*) print_char_cursor#131 print_u8::@1/(byte*) print_char_cursor#16 )
  (byte) print_char::ch#10 ← phi( print_mulf8s127::@2/(byte) print_char::ch#8 print_mulf8s127::@4/(byte) print_char::ch#9 print_mulf8u127::@2/(byte) print_char::ch#6 print_mulf8u127::@4/(byte) print_char::ch#7 print_s8::@1/(byte) print_char::ch#2 print_s8::@3/(byte) print_char::ch#3 print_sint::@1/(byte) print_char::ch#0 print_sint::@3/(byte) print_char::ch#1 print_u8/(byte) print_char::ch#4 print_u8::@1/(byte) print_char::ch#5 )
  *((byte*) print_char_cursor#80) ← (byte) print_char::ch#10
  (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#80
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#81 ← phi( print_char/(byte*) print_char_cursor#19 )
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#81
  return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  (byte*) print_screen#1 ← phi( main/(byte*) print_screen#3 )
  (void*) memset::str#0 ← (void*)(byte*) print_screen#1
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 )
  (byte*) print_line_cursor#3 ← (byte*) print_screen#2
  (byte*) print_char_cursor#21 ← (byte*) print_line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  (byte*) print_char_cursor#82 ← phi( print_cls::@1/(byte*) print_char_cursor#21 )
  (byte*) print_line_cursor#35 ← phi( print_cls::@1/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#35
  (byte*) print_char_cursor#22 ← (byte*) print_char_cursor#82
  return 
  to:@return

(void()) main()
main: scope:[main]  from @42
  (byte*) print_char_cursor#132 ← phi( @42/(byte*) print_char_cursor#135 )
  (byte*) print_line_cursor#64 ← phi( @42/(byte*) print_line_cursor#69 )
  (byte*) print_screen#3 ← phi( @42/(byte*) print_screen#4 )
  call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) print_char_cursor#83 ← phi( main/(byte*) print_char_cursor#22 )
  (byte*) print_line_cursor#36 ← phi( main/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#36
  (byte*) print_char_cursor#23 ← (byte*) print_char_cursor#83
  (byte*) print_str::str#1 ← (const byte*) main::str
  call print_str 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) print_line_cursor#65 ← phi( main::@1/(byte*) print_line_cursor#5 )
  (byte*) print_char_cursor#84 ← phi( main::@1/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#24 ← (byte*) print_char_cursor#84
  call print_ln 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte*) print_char_cursor#85 ← phi( main::@2/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#37 ← phi( main::@2/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#37
  (byte*) print_char_cursor#25 ← (byte*) print_char_cursor#85
  (byte) print_mulf8u127::a#0 ← (number) 0
  (byte) print_mulf8u127::b#0 ← (number) 0
  call print_mulf8u127 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) print_line_cursor#38 ← phi( main::@3/(byte*) print_line_cursor#28 )
  (byte*) print_char_cursor#86 ← phi( main::@3/(byte*) print_char_cursor#53 )
  (byte*) print_char_cursor#26 ← (byte*) print_char_cursor#86
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#38
  (byte) print_mulf8u127::a#1 ← (number) $7f
  (byte) print_mulf8u127::b#1 ← (number) $7f
  call print_mulf8u127 
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte*) print_line_cursor#39 ← phi( main::@4/(byte*) print_line_cursor#28 )
  (byte*) print_char_cursor#87 ← phi( main::@4/(byte*) print_char_cursor#53 )
  (byte*) print_char_cursor#27 ← (byte*) print_char_cursor#87
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#39
  (byte) print_mulf8u127::a#2 ← (number) $40
  (byte) print_mulf8u127::b#2 ← (number) $40
  call print_mulf8u127 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte*) print_line_cursor#40 ← phi( main::@5/(byte*) print_line_cursor#28 )
  (byte*) print_char_cursor#88 ← phi( main::@5/(byte*) print_char_cursor#53 )
  (byte*) print_char_cursor#28 ← (byte*) print_char_cursor#88
  (byte*) print_line_cursor#9 ← (byte*) print_line_cursor#40
  (byte) print_mulf8u127::a#3 ← (number) $40
  (byte) print_mulf8u127::b#3 ← (number) $7f
  call print_mulf8u127 
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte*) print_line_cursor#41 ← phi( main::@6/(byte*) print_line_cursor#28 )
  (byte*) print_char_cursor#89 ← phi( main::@6/(byte*) print_char_cursor#53 )
  (byte*) print_char_cursor#29 ← (byte*) print_char_cursor#89
  (byte*) print_line_cursor#10 ← (byte*) print_line_cursor#41
  (byte) print_mulf8u127::a#4 ← (number) $40
  (byte) print_mulf8u127::b#4 ← (number) $c0
  call print_mulf8u127 
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte*) print_line_cursor#42 ← phi( main::@7/(byte*) print_line_cursor#28 )
  (byte*) print_char_cursor#90 ← phi( main::@7/(byte*) print_char_cursor#53 )
  (byte*) print_char_cursor#30 ← (byte*) print_char_cursor#90
  (byte*) print_line_cursor#11 ← (byte*) print_line_cursor#42
  (byte) print_mulf8u127::a#5 ← (number) $ff
  (byte) print_mulf8u127::b#5 ← (number) $7f
  call print_mulf8u127 
  to:main::@9
main::@9: scope:[main]  from main::@8
  (byte*) print_line_cursor#43 ← phi( main::@8/(byte*) print_line_cursor#28 )
  (byte*) print_char_cursor#91 ← phi( main::@8/(byte*) print_char_cursor#53 )
  (byte*) print_char_cursor#31 ← (byte*) print_char_cursor#91
  (byte*) print_line_cursor#12 ← (byte*) print_line_cursor#43
  (byte) print_mulf8u127::a#6 ← (number) $c0
  (byte) print_mulf8u127::b#6 ← (number) $c0
  call print_mulf8u127 
  to:main::@10
main::@10: scope:[main]  from main::@9
  (byte*) print_line_cursor#44 ← phi( main::@9/(byte*) print_line_cursor#28 )
  (byte*) print_char_cursor#92 ← phi( main::@9/(byte*) print_char_cursor#53 )
  (byte*) print_char_cursor#32 ← (byte*) print_char_cursor#92
  (byte*) print_line_cursor#13 ← (byte*) print_line_cursor#44
  (byte) print_mulf8u127::a#7 ← (number) $ff
  (byte) print_mulf8u127::b#7 ← (number) $ff
  call print_mulf8u127 
  to:main::@11
main::@11: scope:[main]  from main::@10
  (byte*) print_line_cursor#45 ← phi( main::@10/(byte*) print_line_cursor#28 )
  (byte*) print_char_cursor#93 ← phi( main::@10/(byte*) print_char_cursor#53 )
  (byte*) print_char_cursor#33 ← (byte*) print_char_cursor#93
  (byte*) print_line_cursor#14 ← (byte*) print_line_cursor#45
  (byte*) print_str::str#2 ← (const byte*) main::str1
  call print_str 
  to:main::@12
main::@12: scope:[main]  from main::@11
  (byte*) print_line_cursor#66 ← phi( main::@11/(byte*) print_line_cursor#14 )
  (byte*) print_char_cursor#94 ← phi( main::@11/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#34 ← (byte*) print_char_cursor#94
  call print_ln 
  to:main::@13
main::@13: scope:[main]  from main::@12
  (byte*) print_char_cursor#95 ← phi( main::@12/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#46 ← phi( main::@12/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#15 ← (byte*) print_line_cursor#46
  (byte*) print_char_cursor#35 ← (byte*) print_char_cursor#95
  (signed byte) print_mulf8s127::a#0 ← (number) 0
  (signed byte) print_mulf8s127::b#0 ← (number) 0
  call print_mulf8s127 
  to:main::@14
main::@14: scope:[main]  from main::@13
  (byte*) print_line_cursor#47 ← phi( main::@13/(byte*) print_line_cursor#30 )
  (byte*) print_char_cursor#96 ← phi( main::@13/(byte*) print_char_cursor#60 )
  (byte*) print_char_cursor#36 ← (byte*) print_char_cursor#96
  (byte*) print_line_cursor#16 ← (byte*) print_line_cursor#47
  (signed byte) print_mulf8s127::a#1 ← (number) $40
  (signed byte) print_mulf8s127::b#1 ← (number) $40
  call print_mulf8s127 
  to:main::@15
main::@15: scope:[main]  from main::@14
  (byte*) print_line_cursor#48 ← phi( main::@14/(byte*) print_line_cursor#30 )
  (byte*) print_char_cursor#97 ← phi( main::@14/(byte*) print_char_cursor#60 )
  (byte*) print_char_cursor#37 ← (byte*) print_char_cursor#97
  (byte*) print_line_cursor#17 ← (byte*) print_line_cursor#48
  (signed byte) print_mulf8s127::a#2 ← (number) $40
  (signed byte) print_mulf8s127::b#2 ← (number) $7f
  call print_mulf8s127 
  to:main::@16
main::@16: scope:[main]  from main::@15
  (byte*) print_line_cursor#49 ← phi( main::@15/(byte*) print_line_cursor#30 )
  (byte*) print_char_cursor#98 ← phi( main::@15/(byte*) print_char_cursor#60 )
  (byte*) print_char_cursor#38 ← (byte*) print_char_cursor#98
  (byte*) print_line_cursor#18 ← (byte*) print_line_cursor#49
  (signed byte) print_mulf8s127::a#3 ← (number) -$40
  (signed byte) print_mulf8s127::b#3 ← (number) $40
  call print_mulf8s127 
  to:main::@17
main::@17: scope:[main]  from main::@16
  (byte*) print_line_cursor#50 ← phi( main::@16/(byte*) print_line_cursor#30 )
  (byte*) print_char_cursor#99 ← phi( main::@16/(byte*) print_char_cursor#60 )
  (byte*) print_char_cursor#39 ← (byte*) print_char_cursor#99
  (byte*) print_line_cursor#19 ← (byte*) print_line_cursor#50
  (signed byte) print_mulf8s127::a#4 ← (number) $40
  (signed byte) print_mulf8s127::b#4 ← (number) -$40
  call print_mulf8s127 
  to:main::@18
main::@18: scope:[main]  from main::@17
  (byte*) print_line_cursor#51 ← phi( main::@17/(byte*) print_line_cursor#30 )
  (byte*) print_char_cursor#100 ← phi( main::@17/(byte*) print_char_cursor#60 )
  (byte*) print_char_cursor#40 ← (byte*) print_char_cursor#100
  (byte*) print_line_cursor#20 ← (byte*) print_line_cursor#51
  (signed byte) print_mulf8s127::a#5 ← (number) -$40
  (signed byte) print_mulf8s127::b#5 ← (number) -$40
  call print_mulf8s127 
  to:main::@19
main::@19: scope:[main]  from main::@18
  (byte*) print_line_cursor#52 ← phi( main::@18/(byte*) print_line_cursor#30 )
  (byte*) print_char_cursor#101 ← phi( main::@18/(byte*) print_char_cursor#60 )
  (byte*) print_char_cursor#41 ← (byte*) print_char_cursor#101
  (byte*) print_line_cursor#21 ← (byte*) print_line_cursor#52
  (signed byte) print_mulf8s127::a#6 ← (number) $7f
  (signed byte) print_mulf8s127::b#6 ← (number) $7f
  call print_mulf8s127 
  to:main::@20
main::@20: scope:[main]  from main::@19
  (byte*) print_line_cursor#53 ← phi( main::@19/(byte*) print_line_cursor#30 )
  (byte*) print_char_cursor#102 ← phi( main::@19/(byte*) print_char_cursor#60 )
  (byte*) print_char_cursor#42 ← (byte*) print_char_cursor#102
  (byte*) print_line_cursor#22 ← (byte*) print_line_cursor#53
  (signed byte) print_mulf8s127::a#7 ← (number) -$7f
  (signed byte) print_mulf8s127::b#7 ← (number) $7f
  call print_mulf8s127 
  to:main::@21
main::@21: scope:[main]  from main::@20
  (byte*) print_line_cursor#54 ← phi( main::@20/(byte*) print_line_cursor#30 )
  (byte*) print_char_cursor#103 ← phi( main::@20/(byte*) print_char_cursor#60 )
  (byte*) print_char_cursor#43 ← (byte*) print_char_cursor#103
  (byte*) print_line_cursor#23 ← (byte*) print_line_cursor#54
  (signed byte) print_mulf8s127::a#8 ← (number) $7f
  (signed byte) print_mulf8s127::b#8 ← (number) -$7f
  call print_mulf8s127 
  to:main::@22
main::@22: scope:[main]  from main::@21
  (byte*) print_line_cursor#55 ← phi( main::@21/(byte*) print_line_cursor#30 )
  (byte*) print_char_cursor#104 ← phi( main::@21/(byte*) print_char_cursor#60 )
  (byte*) print_char_cursor#44 ← (byte*) print_char_cursor#104
  (byte*) print_line_cursor#24 ← (byte*) print_line_cursor#55
  (signed byte) print_mulf8s127::a#9 ← (number) -$7f
  (signed byte) print_mulf8s127::b#9 ← (number) -$7f
  call print_mulf8s127 
  to:main::@23
main::@23: scope:[main]  from main::@22
  (byte*) print_line_cursor#56 ← phi( main::@22/(byte*) print_line_cursor#30 )
  (byte*) print_char_cursor#105 ← phi( main::@22/(byte*) print_char_cursor#60 )
  (byte*) print_char_cursor#45 ← (byte*) print_char_cursor#105
  (byte*) print_line_cursor#25 ← (byte*) print_line_cursor#56
  to:main::@return
main::@return: scope:[main]  from main::@23
  (byte*) print_char_cursor#106 ← phi( main::@23/(byte*) print_char_cursor#45 )
  (byte*) print_line_cursor#57 ← phi( main::@23/(byte*) print_line_cursor#25 )
  (byte*) print_line_cursor#26 ← (byte*) print_line_cursor#57
  (byte*) print_char_cursor#46 ← (byte*) print_char_cursor#106
  return 
  to:@return

(void()) print_mulf8u127((byte) print_mulf8u127::a , (byte) print_mulf8u127::b)
print_mulf8u127: scope:[print_mulf8u127]  from main::@10 main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@9
  (byte*) print_line_cursor#80 ← phi( main::@10/(byte*) print_line_cursor#13 main::@3/(byte*) print_line_cursor#6 main::@4/(byte*) print_line_cursor#7 main::@5/(byte*) print_line_cursor#8 main::@6/(byte*) print_line_cursor#9 main::@7/(byte*) print_line_cursor#10 main::@8/(byte*) print_line_cursor#11 main::@9/(byte*) print_line_cursor#12 )
  (byte*) print_char_cursor#139 ← phi( main::@10/(byte*) print_char_cursor#32 main::@3/(byte*) print_char_cursor#25 main::@4/(byte*) print_char_cursor#26 main::@5/(byte*) print_char_cursor#27 main::@6/(byte*) print_char_cursor#28 main::@7/(byte*) print_char_cursor#29 main::@8/(byte*) print_char_cursor#30 main::@9/(byte*) print_char_cursor#31 )
  (byte) print_mulf8u127::b#8 ← phi( main::@10/(byte) print_mulf8u127::b#7 main::@3/(byte) print_mulf8u127::b#0 main::@4/(byte) print_mulf8u127::b#1 main::@5/(byte) print_mulf8u127::b#2 main::@6/(byte) print_mulf8u127::b#3 main::@7/(byte) print_mulf8u127::b#4 main::@8/(byte) print_mulf8u127::b#5 main::@9/(byte) print_mulf8u127::b#6 )
  (byte) print_mulf8u127::a#8 ← phi( main::@10/(byte) print_mulf8u127::a#7 main::@3/(byte) print_mulf8u127::a#0 main::@4/(byte) print_mulf8u127::a#1 main::@5/(byte) print_mulf8u127::a#2 main::@6/(byte) print_mulf8u127::a#3 main::@7/(byte) print_mulf8u127::a#4 main::@8/(byte) print_mulf8u127::a#5 main::@9/(byte) print_mulf8u127::a#6 )
  (byte) mulf8u127::a#0 ← (byte) print_mulf8u127::a#8
  (byte) mulf8u127::b#0 ← (byte) print_mulf8u127::b#8
  call mulf8u127 
  (word) mulf8u127::return#0 ← (word) mulf8u127::return#2
  to:print_mulf8u127::@1
print_mulf8u127::@1: scope:[print_mulf8u127]  from print_mulf8u127
  (byte*) print_line_cursor#78 ← phi( print_mulf8u127/(byte*) print_line_cursor#80 )
  (byte) print_mulf8u127::b#11 ← phi( print_mulf8u127/(byte) print_mulf8u127::b#8 )
  (byte*) print_char_cursor#133 ← phi( print_mulf8u127/(byte*) print_char_cursor#139 )
  (byte) print_mulf8u127::a#9 ← phi( print_mulf8u127/(byte) print_mulf8u127::a#8 )
  (word) mulf8u127::return#4 ← phi( print_mulf8u127/(word) mulf8u127::return#0 )
  (word~) print_mulf8u127::$0 ← (word) mulf8u127::return#4
  (word) print_mulf8u127::c#0 ← (word~) print_mulf8u127::$0
  (byte) print_u8::b#3 ← (byte) print_mulf8u127::a#9
  call print_u8 
  to:print_mulf8u127::@2
print_mulf8u127::@2: scope:[print_mulf8u127]  from print_mulf8u127::@1
  (byte*) print_line_cursor#76 ← phi( print_mulf8u127::@1/(byte*) print_line_cursor#78 )
  (word) print_mulf8u127::c#4 ← phi( print_mulf8u127::@1/(word) print_mulf8u127::c#0 )
  (byte) print_mulf8u127::b#10 ← phi( print_mulf8u127::@1/(byte) print_mulf8u127::b#11 )
  (byte*) print_char_cursor#107 ← phi( print_mulf8u127::@1/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#47 ← (byte*) print_char_cursor#107
  (byte) print_char::ch#6 ← (byte) '*'
  call print_char 
  to:print_mulf8u127::@3
print_mulf8u127::@3: scope:[print_mulf8u127]  from print_mulf8u127::@2
  (byte*) print_line_cursor#74 ← phi( print_mulf8u127::@2/(byte*) print_line_cursor#76 )
  (word) print_mulf8u127::c#3 ← phi( print_mulf8u127::@2/(word) print_mulf8u127::c#4 )
  (byte) print_mulf8u127::b#9 ← phi( print_mulf8u127::@2/(byte) print_mulf8u127::b#10 )
  (byte*) print_char_cursor#108 ← phi( print_mulf8u127::@2/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#48 ← (byte*) print_char_cursor#108
  (byte) print_u8::b#4 ← (byte) print_mulf8u127::b#9
  call print_u8 
  to:print_mulf8u127::@4
print_mulf8u127::@4: scope:[print_mulf8u127]  from print_mulf8u127::@3
  (byte*) print_line_cursor#72 ← phi( print_mulf8u127::@3/(byte*) print_line_cursor#74 )
  (word) print_mulf8u127::c#2 ← phi( print_mulf8u127::@3/(word) print_mulf8u127::c#3 )
  (byte*) print_char_cursor#109 ← phi( print_mulf8u127::@3/(byte*) print_char_cursor#18 )
  (byte*) print_char_cursor#49 ← (byte*) print_char_cursor#109
  (byte) print_char::ch#7 ← (byte) '='
  call print_char 
  to:print_mulf8u127::@5
print_mulf8u127::@5: scope:[print_mulf8u127]  from print_mulf8u127::@4
  (byte*) print_line_cursor#70 ← phi( print_mulf8u127::@4/(byte*) print_line_cursor#72 )
  (word) print_mulf8u127::c#1 ← phi( print_mulf8u127::@4/(word) print_mulf8u127::c#2 )
  (byte*) print_char_cursor#110 ← phi( print_mulf8u127::@4/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#50 ← (byte*) print_char_cursor#110
  (word) print_uint::w#1 ← (word) print_mulf8u127::c#1
  call print_uint 
  to:print_mulf8u127::@6
print_mulf8u127::@6: scope:[print_mulf8u127]  from print_mulf8u127::@5
  (byte*) print_line_cursor#67 ← phi( print_mulf8u127::@5/(byte*) print_line_cursor#70 )
  (byte*) print_char_cursor#111 ← phi( print_mulf8u127::@5/(byte*) print_char_cursor#15 )
  (byte*) print_char_cursor#51 ← (byte*) print_char_cursor#111
  call print_ln 
  to:print_mulf8u127::@7
print_mulf8u127::@7: scope:[print_mulf8u127]  from print_mulf8u127::@6
  (byte*) print_char_cursor#112 ← phi( print_mulf8u127::@6/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#58 ← phi( print_mulf8u127::@6/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#27 ← (byte*) print_line_cursor#58
  (byte*) print_char_cursor#52 ← (byte*) print_char_cursor#112
  to:print_mulf8u127::@return
print_mulf8u127::@return: scope:[print_mulf8u127]  from print_mulf8u127::@7
  (byte*) print_line_cursor#59 ← phi( print_mulf8u127::@7/(byte*) print_line_cursor#27 )
  (byte*) print_char_cursor#113 ← phi( print_mulf8u127::@7/(byte*) print_char_cursor#52 )
  (byte*) print_char_cursor#53 ← (byte*) print_char_cursor#113
  (byte*) print_line_cursor#28 ← (byte*) print_line_cursor#59
  return 
  to:@return

(void()) print_mulf8s127((signed byte) print_mulf8s127::a , (signed byte) print_mulf8s127::b)
print_mulf8s127: scope:[print_mulf8s127]  from main::@13 main::@14 main::@15 main::@16 main::@17 main::@18 main::@19 main::@20 main::@21 main::@22
  (byte*) print_line_cursor#81 ← phi( main::@13/(byte*) print_line_cursor#15 main::@14/(byte*) print_line_cursor#16 main::@15/(byte*) print_line_cursor#17 main::@16/(byte*) print_line_cursor#18 main::@17/(byte*) print_line_cursor#19 main::@18/(byte*) print_line_cursor#20 main::@19/(byte*) print_line_cursor#21 main::@20/(byte*) print_line_cursor#22 main::@21/(byte*) print_line_cursor#23 main::@22/(byte*) print_line_cursor#24 )
  (byte*) print_char_cursor#140 ← phi( main::@13/(byte*) print_char_cursor#35 main::@14/(byte*) print_char_cursor#36 main::@15/(byte*) print_char_cursor#37 main::@16/(byte*) print_char_cursor#38 main::@17/(byte*) print_char_cursor#39 main::@18/(byte*) print_char_cursor#40 main::@19/(byte*) print_char_cursor#41 main::@20/(byte*) print_char_cursor#42 main::@21/(byte*) print_char_cursor#43 main::@22/(byte*) print_char_cursor#44 )
  (signed byte) print_mulf8s127::b#10 ← phi( main::@13/(signed byte) print_mulf8s127::b#0 main::@14/(signed byte) print_mulf8s127::b#1 main::@15/(signed byte) print_mulf8s127::b#2 main::@16/(signed byte) print_mulf8s127::b#3 main::@17/(signed byte) print_mulf8s127::b#4 main::@18/(signed byte) print_mulf8s127::b#5 main::@19/(signed byte) print_mulf8s127::b#6 main::@20/(signed byte) print_mulf8s127::b#7 main::@21/(signed byte) print_mulf8s127::b#8 main::@22/(signed byte) print_mulf8s127::b#9 )
  (signed byte) print_mulf8s127::a#10 ← phi( main::@13/(signed byte) print_mulf8s127::a#0 main::@14/(signed byte) print_mulf8s127::a#1 main::@15/(signed byte) print_mulf8s127::a#2 main::@16/(signed byte) print_mulf8s127::a#3 main::@17/(signed byte) print_mulf8s127::a#4 main::@18/(signed byte) print_mulf8s127::a#5 main::@19/(signed byte) print_mulf8s127::a#6 main::@20/(signed byte) print_mulf8s127::a#7 main::@21/(signed byte) print_mulf8s127::a#8 main::@22/(signed byte) print_mulf8s127::a#9 )
  (signed byte) mulf8s127::a#0 ← (signed byte) print_mulf8s127::a#10
  (signed byte) mulf8s127::b#0 ← (signed byte) print_mulf8s127::b#10
  call mulf8s127 
  (signed word) mulf8s127::return#0 ← (signed word) mulf8s127::return#2
  to:print_mulf8s127::@1
print_mulf8s127::@1: scope:[print_mulf8s127]  from print_mulf8s127
  (byte*) print_line_cursor#79 ← phi( print_mulf8s127/(byte*) print_line_cursor#81 )
  (signed byte) print_mulf8s127::b#13 ← phi( print_mulf8s127/(signed byte) print_mulf8s127::b#10 )
  (byte*) print_char_cursor#134 ← phi( print_mulf8s127/(byte*) print_char_cursor#140 )
  (signed byte) print_mulf8s127::a#11 ← phi( print_mulf8s127/(signed byte) print_mulf8s127::a#10 )
  (signed word) mulf8s127::return#3 ← phi( print_mulf8s127/(signed word) mulf8s127::return#0 )
  (signed word~) print_mulf8s127::$0 ← (signed word) mulf8s127::return#3
  (signed word) print_mulf8s127::c#0 ← (signed word~) print_mulf8s127::$0
  (signed byte) print_s8::b#1 ← (signed byte) print_mulf8s127::a#11
  call print_s8 
  to:print_mulf8s127::@2
print_mulf8s127::@2: scope:[print_mulf8s127]  from print_mulf8s127::@1
  (byte*) print_line_cursor#77 ← phi( print_mulf8s127::@1/(byte*) print_line_cursor#79 )
  (signed word) print_mulf8s127::c#4 ← phi( print_mulf8s127::@1/(signed word) print_mulf8s127::c#0 )
  (signed byte) print_mulf8s127::b#12 ← phi( print_mulf8s127::@1/(signed byte) print_mulf8s127::b#13 )
  (byte*) print_char_cursor#114 ← phi( print_mulf8s127::@1/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#54 ← (byte*) print_char_cursor#114
  (byte) print_char::ch#8 ← (byte) '*'
  call print_char 
  to:print_mulf8s127::@3
print_mulf8s127::@3: scope:[print_mulf8s127]  from print_mulf8s127::@2
  (byte*) print_line_cursor#75 ← phi( print_mulf8s127::@2/(byte*) print_line_cursor#77 )
  (signed word) print_mulf8s127::c#3 ← phi( print_mulf8s127::@2/(signed word) print_mulf8s127::c#4 )
  (signed byte) print_mulf8s127::b#11 ← phi( print_mulf8s127::@2/(signed byte) print_mulf8s127::b#12 )
  (byte*) print_char_cursor#115 ← phi( print_mulf8s127::@2/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#55 ← (byte*) print_char_cursor#115
  (signed byte) print_s8::b#2 ← (signed byte) print_mulf8s127::b#11
  call print_s8 
  to:print_mulf8s127::@4
print_mulf8s127::@4: scope:[print_mulf8s127]  from print_mulf8s127::@3
  (byte*) print_line_cursor#73 ← phi( print_mulf8s127::@3/(byte*) print_line_cursor#75 )
  (signed word) print_mulf8s127::c#2 ← phi( print_mulf8s127::@3/(signed word) print_mulf8s127::c#3 )
  (byte*) print_char_cursor#116 ← phi( print_mulf8s127::@3/(byte*) print_char_cursor#12 )
  (byte*) print_char_cursor#56 ← (byte*) print_char_cursor#116
  (byte) print_char::ch#9 ← (byte) '='
  call print_char 
  to:print_mulf8s127::@5
print_mulf8s127::@5: scope:[print_mulf8s127]  from print_mulf8s127::@4
  (byte*) print_line_cursor#71 ← phi( print_mulf8s127::@4/(byte*) print_line_cursor#73 )
  (signed word) print_mulf8s127::c#1 ← phi( print_mulf8s127::@4/(signed word) print_mulf8s127::c#2 )
  (byte*) print_char_cursor#117 ← phi( print_mulf8s127::@4/(byte*) print_char_cursor#20 )
  (byte*) print_char_cursor#57 ← (byte*) print_char_cursor#117
  (signed word) print_sint::w#1 ← (signed word) print_mulf8s127::c#1
  call print_sint 
  to:print_mulf8s127::@6
print_mulf8s127::@6: scope:[print_mulf8s127]  from print_mulf8s127::@5
  (byte*) print_line_cursor#68 ← phi( print_mulf8s127::@5/(byte*) print_line_cursor#71 )
  (byte*) print_char_cursor#118 ← phi( print_mulf8s127::@5/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#58 ← (byte*) print_char_cursor#118
  call print_ln 
  to:print_mulf8s127::@7
print_mulf8s127::@7: scope:[print_mulf8s127]  from print_mulf8s127::@6
  (byte*) print_char_cursor#119 ← phi( print_mulf8s127::@6/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#60 ← phi( print_mulf8s127::@6/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#29 ← (byte*) print_line_cursor#60
  (byte*) print_char_cursor#59 ← (byte*) print_char_cursor#119
  to:print_mulf8s127::@return
print_mulf8s127::@return: scope:[print_mulf8s127]  from print_mulf8s127::@7
  (byte*) print_line_cursor#61 ← phi( print_mulf8s127::@7/(byte*) print_line_cursor#29 )
  (byte*) print_char_cursor#120 ← phi( print_mulf8s127::@7/(byte*) print_char_cursor#59 )
  (byte*) print_char_cursor#60 ← (byte*) print_char_cursor#120
  (byte*) print_line_cursor#30 ← (byte*) print_line_cursor#61
  return 
  to:@return

(word()) mulf8u127((byte) mulf8u127::a , (byte) mulf8u127::b)
mulf8u127: scope:[mulf8u127]  from mulf8s127 print_mulf8u127
  (byte) mulf8u127::b#2 ← phi( mulf8s127/(byte) mulf8u127::b#1 print_mulf8u127/(byte) mulf8u127::b#0 )
  (byte) mulf8u127::a#2 ← phi( mulf8s127/(byte) mulf8u127::a#1 print_mulf8u127/(byte) mulf8u127::a#0 )
  *((const nomodify byte*) mulf8u127::memA) ← (byte) mulf8u127::a#2
  *((const nomodify byte*) mulf8u127::memB) ← (byte) mulf8u127::b#2
  asm { ldamemA stasm1+1 stasm3+1 eor#$ff stasm2+1 stasm4+1 ldxmemB sec sm1: ldamulf127_sqr1_lo,x sm2: sbcmulf127_sqr2_lo,x staresL sm3: ldamulf127_sqr1_hi,x sm4: sbcmulf127_sqr2_hi,x staresH  }
  (word) mulf8u127::return#1 ← *((const nomodify word*) mulf8u127::res)
  to:mulf8u127::@return
mulf8u127::@return: scope:[mulf8u127]  from mulf8u127
  (word) mulf8u127::return#5 ← phi( mulf8u127/(word) mulf8u127::return#1 )
  (word) mulf8u127::return#2 ← (word) mulf8u127::return#5
  return 
  to:@return

(signed word()) mulf8s127((signed byte) mulf8s127::a , (signed byte) mulf8s127::b)
mulf8s127: scope:[mulf8s127]  from print_mulf8s127
  (signed byte) mulf8s127::b#1 ← phi( print_mulf8s127/(signed byte) mulf8s127::b#0 )
  (signed byte) mulf8s127::a#1 ← phi( print_mulf8s127/(signed byte) mulf8s127::a#0 )
  (byte~) mulf8s127::$0 ← ((byte)) (signed byte) mulf8s127::a#1
  (byte~) mulf8s127::$1 ← ((byte)) (signed byte) mulf8s127::b#1
  (byte) mulf8u127::a#1 ← (byte~) mulf8s127::$0
  (byte) mulf8u127::b#1 ← (byte~) mulf8s127::$1
  call mulf8u127 
  (word) mulf8u127::return#3 ← (word) mulf8u127::return#2
  to:mulf8s127::@8
mulf8s127::@8: scope:[mulf8s127]  from mulf8s127
  (signed byte) mulf8s127::b#5 ← phi( mulf8s127/(signed byte) mulf8s127::b#1 )
  (signed byte) mulf8s127::a#2 ← phi( mulf8s127/(signed byte) mulf8s127::a#1 )
  (word) mulf8u127::return#6 ← phi( mulf8s127/(word) mulf8u127::return#3 )
  (word~) mulf8s127::$2 ← (word) mulf8u127::return#6
  (signed word~) mulf8s127::$3 ← ((signed word)) (word~) mulf8s127::$2
  (signed word) mulf8s127::c#0 ← (signed word~) mulf8s127::$3
  (bool~) mulf8s127::$4 ← (signed byte) mulf8s127::a#2 < (number) 0
  (bool~) mulf8s127::$5 ← ! (bool~) mulf8s127::$4
  if((bool~) mulf8s127::$5) goto mulf8s127::@1
  to:mulf8s127::@4
mulf8s127::@1: scope:[mulf8s127]  from mulf8s127::@4 mulf8s127::@8
  (signed word) mulf8s127::c#8 ← phi( mulf8s127::@4/(signed word) mulf8s127::c#1 mulf8s127::@8/(signed word) mulf8s127::c#0 )
  (signed byte) mulf8s127::a#5 ← phi( mulf8s127::@4/(signed byte) mulf8s127::a#6 mulf8s127::@8/(signed byte) mulf8s127::a#2 )
  (signed byte) mulf8s127::b#2 ← phi( mulf8s127::@4/(signed byte) mulf8s127::b#3 mulf8s127::@8/(signed byte) mulf8s127::b#5 )
  (bool~) mulf8s127::$6 ← (signed byte) mulf8s127::b#2 < (number) 0
  (bool~) mulf8s127::$7 ← ! (bool~) mulf8s127::$6
  if((bool~) mulf8s127::$7) goto mulf8s127::@2
  to:mulf8s127::@5
mulf8s127::@4: scope:[mulf8s127]  from mulf8s127::@8
  (signed byte) mulf8s127::a#6 ← phi( mulf8s127::@8/(signed byte) mulf8s127::a#2 )
  (signed word) mulf8s127::c#4 ← phi( mulf8s127::@8/(signed word) mulf8s127::c#0 )
  (signed byte) mulf8s127::b#3 ← phi( mulf8s127::@8/(signed byte) mulf8s127::b#5 )
  (signed word~) mulf8s127::$12 ← ((signed word)) (signed byte) mulf8s127::b#3
  (number~) mulf8s127::$13 ← (signed word~) mulf8s127::$12 * (number) 2
  (signed word) mulf8s127::c#1 ← (signed word) mulf8s127::c#4 - (number~) mulf8s127::$13
  to:mulf8s127::@1
mulf8s127::@2: scope:[mulf8s127]  from mulf8s127::@1 mulf8s127::@5
  (signed word) mulf8s127::c#9 ← phi( mulf8s127::@1/(signed word) mulf8s127::c#8 mulf8s127::@5/(signed word) mulf8s127::c#2 )
  (signed byte) mulf8s127::b#4 ← phi( mulf8s127::@1/(signed byte) mulf8s127::b#2 mulf8s127::@5/(signed byte) mulf8s127::b#6 )
  (signed byte) mulf8s127::a#3 ← phi( mulf8s127::@1/(signed byte) mulf8s127::a#5 mulf8s127::@5/(signed byte) mulf8s127::a#4 )
  (bool~) mulf8s127::$8 ← (signed byte) mulf8s127::a#3 < (number) 0
  (bool~) mulf8s127::$9 ← (signed byte) mulf8s127::b#4 < (number) 0
  (bool~) mulf8s127::$10 ← (bool~) mulf8s127::$8 && (bool~) mulf8s127::$9
  (bool~) mulf8s127::$11 ← ! (bool~) mulf8s127::$10
  if((bool~) mulf8s127::$11) goto mulf8s127::@3
  to:mulf8s127::@6
mulf8s127::@5: scope:[mulf8s127]  from mulf8s127::@1
  (signed byte) mulf8s127::b#6 ← phi( mulf8s127::@1/(signed byte) mulf8s127::b#2 )
  (signed word) mulf8s127::c#5 ← phi( mulf8s127::@1/(signed word) mulf8s127::c#8 )
  (signed byte) mulf8s127::a#4 ← phi( mulf8s127::@1/(signed byte) mulf8s127::a#5 )
  (signed word~) mulf8s127::$14 ← ((signed word)) (signed byte) mulf8s127::a#4
  (number~) mulf8s127::$15 ← (signed word~) mulf8s127::$14 * (number) 2
  (signed word) mulf8s127::c#2 ← (signed word) mulf8s127::c#5 - (number~) mulf8s127::$15
  to:mulf8s127::@2
mulf8s127::@3: scope:[mulf8s127]  from mulf8s127::@2 mulf8s127::@6
  (signed word) mulf8s127::c#6 ← phi( mulf8s127::@2/(signed word) mulf8s127::c#9 mulf8s127::@6/(signed word) mulf8s127::c#3 )
  (signed word) mulf8s127::return#1 ← (signed word) mulf8s127::c#6
  to:mulf8s127::@return
mulf8s127::@6: scope:[mulf8s127]  from mulf8s127::@2
  (signed word) mulf8s127::c#7 ← phi( mulf8s127::@2/(signed word) mulf8s127::c#9 )
  (signed word) mulf8s127::c#3 ← (signed word) mulf8s127::c#7 - (number) $200
  to:mulf8s127::@3
mulf8s127::@return: scope:[mulf8s127]  from mulf8s127::@3
  (signed word) mulf8s127::return#4 ← phi( mulf8s127::@3/(signed word) mulf8s127::return#1 )
  (signed word) mulf8s127::return#2 ← (signed word) mulf8s127::return#4
  return 
  to:@return
@42: scope:[]  from @13
  (byte*) print_screen#4 ← phi( @13/(byte*) print_screen#0 )
  (byte*) print_char_cursor#135 ← phi( @13/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#69 ← phi( @13/(byte*) print_line_cursor#0 )
  call main 
  to:@43
@43: scope:[]  from @42
  (byte*) print_char_cursor#121 ← phi( @42/(byte*) print_char_cursor#46 )
  (byte*) print_line_cursor#62 ← phi( @42/(byte*) print_line_cursor#26 )
  (byte*) print_line_cursor#31 ← (byte*) print_line_cursor#62
  (byte*) print_char_cursor#61 ← (byte*) print_char_cursor#121
  to:@end
@end: scope:[]  from @43

SYMBOL TABLE SSA
(label) @13
(label) @42
(label) @43
(label) @begin
(label) @end
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@18
(label) main::@19
(label) main::@2
(label) main::@20
(label) main::@21
(label) main::@22
(label) main::@23
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(const byte*) main::str[(byte) 9]  = (byte*) "unsigned"
(const byte*) main::str1[(byte) 7]  = (byte*) "signed"
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(byte*~) memset::$3
(bool~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@4
(label) memset::@5
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(const byte*) mulf127_sqr1_hi[(number) $200]  = kickasm {{ .fill 512, >round((i/127*i/127)*127/4)  }}
(const byte*) mulf127_sqr1_lo[(number) $200]  = kickasm {{ .fill 512, <round((i/127*i/127)*127/4)  }}
(const byte*) mulf127_sqr2_hi[(number) $200]  = kickasm {{ .fill 512, >round(((i-255)/127*(i-255)/127)*127/4)  }}
(const byte*) mulf127_sqr2_lo[(number) $200]  = kickasm {{ .fill 512, <round(((i-255)/127*(i-255)/127)*127/4)  }}
(signed word()) mulf8s127((signed byte) mulf8s127::a , (signed byte) mulf8s127::b)
(byte~) mulf8s127::$0
(byte~) mulf8s127::$1
(bool~) mulf8s127::$10
(bool~) mulf8s127::$11
(signed word~) mulf8s127::$12
(number~) mulf8s127::$13
(signed word~) mulf8s127::$14
(number~) mulf8s127::$15
(word~) mulf8s127::$2
(signed word~) mulf8s127::$3
(bool~) mulf8s127::$4
(bool~) mulf8s127::$5
(bool~) mulf8s127::$6
(bool~) mulf8s127::$7
(bool~) mulf8s127::$8
(bool~) mulf8s127::$9
(label) mulf8s127::@1
(label) mulf8s127::@2
(label) mulf8s127::@3
(label) mulf8s127::@4
(label) mulf8s127::@5
(label) mulf8s127::@6
(label) mulf8s127::@8
(label) mulf8s127::@return
(signed byte) mulf8s127::a
(signed byte) mulf8s127::a#0
(signed byte) mulf8s127::a#1
(signed byte) mulf8s127::a#2
(signed byte) mulf8s127::a#3
(signed byte) mulf8s127::a#4
(signed byte) mulf8s127::a#5
(signed byte) mulf8s127::a#6
(signed byte) mulf8s127::b
(signed byte) mulf8s127::b#0
(signed byte) mulf8s127::b#1
(signed byte) mulf8s127::b#2
(signed byte) mulf8s127::b#3
(signed byte) mulf8s127::b#4
(signed byte) mulf8s127::b#5
(signed byte) mulf8s127::b#6
(signed word) mulf8s127::c
(signed word) mulf8s127::c#0
(signed word) mulf8s127::c#1
(signed word) mulf8s127::c#2
(signed word) mulf8s127::c#3
(signed word) mulf8s127::c#4
(signed word) mulf8s127::c#5
(signed word) mulf8s127::c#6
(signed word) mulf8s127::c#7
(signed word) mulf8s127::c#8
(signed word) mulf8s127::c#9
(signed word) mulf8s127::return
(signed word) mulf8s127::return#0
(signed word) mulf8s127::return#1
(signed word) mulf8s127::return#2
(signed word) mulf8s127::return#3
(signed word) mulf8s127::return#4
(word()) mulf8u127((byte) mulf8u127::a , (byte) mulf8u127::b)
(label) mulf8u127::@return
(byte) mulf8u127::a
(byte) mulf8u127::a#0
(byte) mulf8u127::a#1
(byte) mulf8u127::a#2
(byte) mulf8u127::b
(byte) mulf8u127::b#0
(byte) mulf8u127::b#1
(byte) mulf8u127::b#2
(const nomodify byte*) mulf8u127::memA = (byte*)(number) $fc
(const nomodify byte*) mulf8u127::memB = (byte*)(number) $fd
(const nomodify word*) mulf8u127::res = (word*)(number) $fe
(const nomodify byte*) mulf8u127::resH = (byte*)(number) $ff
(const nomodify byte*) mulf8u127::resL = (byte*)(number) $fe
(word) mulf8u127::return
(word) mulf8u127::return#0
(word) mulf8u127::return#1
(word) mulf8u127::return#2
(word) mulf8u127::return#3
(word) mulf8u127::return#4
(word) mulf8u127::return#5
(word) mulf8u127::return#6
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#10
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(byte) print_char::ch#5
(byte) print_char::ch#6
(byte) print_char::ch#7
(byte) print_char::ch#8
(byte) print_char::ch#9
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#100
(byte*) print_char_cursor#101
(byte*) print_char_cursor#102
(byte*) print_char_cursor#103
(byte*) print_char_cursor#104
(byte*) print_char_cursor#105
(byte*) print_char_cursor#106
(byte*) print_char_cursor#107
(byte*) print_char_cursor#108
(byte*) print_char_cursor#109
(byte*) print_char_cursor#11
(byte*) print_char_cursor#110
(byte*) print_char_cursor#111
(byte*) print_char_cursor#112
(byte*) print_char_cursor#113
(byte*) print_char_cursor#114
(byte*) print_char_cursor#115
(byte*) print_char_cursor#116
(byte*) print_char_cursor#117
(byte*) print_char_cursor#118
(byte*) print_char_cursor#119
(byte*) print_char_cursor#12
(byte*) print_char_cursor#120
(byte*) print_char_cursor#121
(byte*) print_char_cursor#122
(byte*) print_char_cursor#123
(byte*) print_char_cursor#124
(byte*) print_char_cursor#125
(byte*) print_char_cursor#126
(byte*) print_char_cursor#127
(byte*) print_char_cursor#128
(byte*) print_char_cursor#129
(byte*) print_char_cursor#13
(byte*) print_char_cursor#130
(byte*) print_char_cursor#131
(byte*) print_char_cursor#132
(byte*) print_char_cursor#133
(byte*) print_char_cursor#134
(byte*) print_char_cursor#135
(byte*) print_char_cursor#136
(byte*) print_char_cursor#137
(byte*) print_char_cursor#138
(byte*) print_char_cursor#139
(byte*) print_char_cursor#14
(byte*) print_char_cursor#140
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#61
(byte*) print_char_cursor#62
(byte*) print_char_cursor#63
(byte*) print_char_cursor#64
(byte*) print_char_cursor#65
(byte*) print_char_cursor#66
(byte*) print_char_cursor#67
(byte*) print_char_cursor#68
(byte*) print_char_cursor#69
(byte*) print_char_cursor#7
(byte*) print_char_cursor#70
(byte*) print_char_cursor#71
(byte*) print_char_cursor#72
(byte*) print_char_cursor#73
(byte*) print_char_cursor#74
(byte*) print_char_cursor#75
(byte*) print_char_cursor#76
(byte*) print_char_cursor#77
(byte*) print_char_cursor#78
(byte*) print_char_cursor#79
(byte*) print_char_cursor#8
(byte*) print_char_cursor#80
(byte*) print_char_cursor#81
(byte*) print_char_cursor#82
(byte*) print_char_cursor#83
(byte*) print_char_cursor#84
(byte*) print_char_cursor#85
(byte*) print_char_cursor#86
(byte*) print_char_cursor#87
(byte*) print_char_cursor#88
(byte*) print_char_cursor#89
(byte*) print_char_cursor#9
(byte*) print_char_cursor#90
(byte*) print_char_cursor#91
(byte*) print_char_cursor#92
(byte*) print_char_cursor#93
(byte*) print_char_cursor#94
(byte*) print_char_cursor#95
(byte*) print_char_cursor#96
(byte*) print_char_cursor#97
(byte*) print_char_cursor#98
(byte*) print_char_cursor#99
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#36
(byte*) print_line_cursor#37
(byte*) print_line_cursor#38
(byte*) print_line_cursor#39
(byte*) print_line_cursor#4
(byte*) print_line_cursor#40
(byte*) print_line_cursor#41
(byte*) print_line_cursor#42
(byte*) print_line_cursor#43
(byte*) print_line_cursor#44
(byte*) print_line_cursor#45
(byte*) print_line_cursor#46
(byte*) print_line_cursor#47
(byte*) print_line_cursor#48
(byte*) print_line_cursor#49
(byte*) print_line_cursor#5
(byte*) print_line_cursor#50
(byte*) print_line_cursor#51
(byte*) print_line_cursor#52
(byte*) print_line_cursor#53
(byte*) print_line_cursor#54
(byte*) print_line_cursor#55
(byte*) print_line_cursor#56
(byte*) print_line_cursor#57
(byte*) print_line_cursor#58
(byte*) print_line_cursor#59
(byte*) print_line_cursor#6
(byte*) print_line_cursor#60
(byte*) print_line_cursor#61
(byte*) print_line_cursor#62
(byte*) print_line_cursor#63
(byte*) print_line_cursor#64
(byte*) print_line_cursor#65
(byte*) print_line_cursor#66
(byte*) print_line_cursor#67
(byte*) print_line_cursor#68
(byte*) print_line_cursor#69
(byte*) print_line_cursor#7
(byte*) print_line_cursor#70
(byte*) print_line_cursor#71
(byte*) print_line_cursor#72
(byte*) print_line_cursor#73
(byte*) print_line_cursor#74
(byte*) print_line_cursor#75
(byte*) print_line_cursor#76
(byte*) print_line_cursor#77
(byte*) print_line_cursor#78
(byte*) print_line_cursor#79
(byte*) print_line_cursor#8
(byte*) print_line_cursor#80
(byte*) print_line_cursor#81
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(void()) print_mulf8s127((signed byte) print_mulf8s127::a , (signed byte) print_mulf8s127::b)
(signed word~) print_mulf8s127::$0
(label) print_mulf8s127::@1
(label) print_mulf8s127::@2
(label) print_mulf8s127::@3
(label) print_mulf8s127::@4
(label) print_mulf8s127::@5
(label) print_mulf8s127::@6
(label) print_mulf8s127::@7
(label) print_mulf8s127::@return
(signed byte) print_mulf8s127::a
(signed byte) print_mulf8s127::a#0
(signed byte) print_mulf8s127::a#1
(signed byte) print_mulf8s127::a#10
(signed byte) print_mulf8s127::a#11
(signed byte) print_mulf8s127::a#2
(signed byte) print_mulf8s127::a#3
(signed byte) print_mulf8s127::a#4
(signed byte) print_mulf8s127::a#5
(signed byte) print_mulf8s127::a#6
(signed byte) print_mulf8s127::a#7
(signed byte) print_mulf8s127::a#8
(signed byte) print_mulf8s127::a#9
(signed byte) print_mulf8s127::b
(signed byte) print_mulf8s127::b#0
(signed byte) print_mulf8s127::b#1
(signed byte) print_mulf8s127::b#10
(signed byte) print_mulf8s127::b#11
(signed byte) print_mulf8s127::b#12
(signed byte) print_mulf8s127::b#13
(signed byte) print_mulf8s127::b#2
(signed byte) print_mulf8s127::b#3
(signed byte) print_mulf8s127::b#4
(signed byte) print_mulf8s127::b#5
(signed byte) print_mulf8s127::b#6
(signed byte) print_mulf8s127::b#7
(signed byte) print_mulf8s127::b#8
(signed byte) print_mulf8s127::b#9
(signed word) print_mulf8s127::c
(signed word) print_mulf8s127::c#0
(signed word) print_mulf8s127::c#1
(signed word) print_mulf8s127::c#2
(signed word) print_mulf8s127::c#3
(signed word) print_mulf8s127::c#4
(void()) print_mulf8u127((byte) print_mulf8u127::a , (byte) print_mulf8u127::b)
(word~) print_mulf8u127::$0
(label) print_mulf8u127::@1
(label) print_mulf8u127::@2
(label) print_mulf8u127::@3
(label) print_mulf8u127::@4
(label) print_mulf8u127::@5
(label) print_mulf8u127::@6
(label) print_mulf8u127::@7
(label) print_mulf8u127::@return
(byte) print_mulf8u127::a
(byte) print_mulf8u127::a#0
(byte) print_mulf8u127::a#1
(byte) print_mulf8u127::a#2
(byte) print_mulf8u127::a#3
(byte) print_mulf8u127::a#4
(byte) print_mulf8u127::a#5
(byte) print_mulf8u127::a#6
(byte) print_mulf8u127::a#7
(byte) print_mulf8u127::a#8
(byte) print_mulf8u127::a#9
(byte) print_mulf8u127::b
(byte) print_mulf8u127::b#0
(byte) print_mulf8u127::b#1
(byte) print_mulf8u127::b#10
(byte) print_mulf8u127::b#11
(byte) print_mulf8u127::b#2
(byte) print_mulf8u127::b#3
(byte) print_mulf8u127::b#4
(byte) print_mulf8u127::b#5
(byte) print_mulf8u127::b#6
(byte) print_mulf8u127::b#7
(byte) print_mulf8u127::b#8
(byte) print_mulf8u127::b#9
(word) print_mulf8u127::c
(word) print_mulf8u127::c#0
(word) print_mulf8u127::c#1
(word) print_mulf8u127::c#2
(word) print_mulf8u127::c#3
(word) print_mulf8u127::c#4
(void()) print_s8((signed byte) print_s8::b)
(bool~) print_s8::$0
(byte~) print_s8::$1
(signed byte~) print_s8::$5
(label) print_s8::@1
(label) print_s8::@2
(label) print_s8::@3
(label) print_s8::@5
(label) print_s8::@6
(label) print_s8::@7
(label) print_s8::@return
(signed byte) print_s8::b
(signed byte) print_s8::b#0
(signed byte) print_s8::b#1
(signed byte) print_s8::b#2
(signed byte) print_s8::b#3
(signed byte) print_s8::b#4
(signed byte) print_s8::b#5
(signed byte) print_s8::b#6
(signed byte) print_s8::b#7
(signed byte) print_s8::b#8
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(void()) print_sint((signed word) print_sint::w)
(bool~) print_sint::$0
(word~) print_sint::$1
(signed word~) print_sint::$5
(label) print_sint::@1
(label) print_sint::@2
(label) print_sint::@3
(label) print_sint::@5
(label) print_sint::@6
(label) print_sint::@7
(label) print_sint::@return
(signed word) print_sint::w
(signed word) print_sint::w#0
(signed word) print_sint::w#1
(signed word) print_sint::w#2
(signed word) print_sint::w#3
(signed word) print_sint::w#4
(signed word) print_sint::w#5
(signed word) print_sint::w#6
(signed word) print_sint::w#7
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(void()) print_u8((byte) print_u8::b)
(byte~) print_u8::$0
(number~) print_u8::$2
(label) print_u8::@1
(label) print_u8::@2
(label) print_u8::@return
(byte) print_u8::b
(byte) print_u8::b#0
(byte) print_u8::b#1
(byte) print_u8::b#2
(byte) print_u8::b#3
(byte) print_u8::b#4
(byte) print_u8::b#5
(byte) print_u8::b#6
(void()) print_uint((word) print_uint::w)
(byte~) print_uint::$0
(byte~) print_uint::$2
(label) print_uint::@1
(label) print_uint::@2
(label) print_uint::@return
(word) print_uint::w
(word) print_uint::w#0
(word) print_uint::w#1
(word) print_uint::w#2
(word) print_uint::w#3

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) print_str::$0 ← (number) 0 != *((byte*) print_str::str#3)
Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#32 + (number) $28
Adding number conversion cast (snumber) 0 in (bool~) print_sint::$0 ← (signed word) print_sint::w#2 < (number) 0
Adding number conversion cast (snumber) 0 in (bool~) print_s8::$0 ← (signed byte) print_s8::b#3 < (number) 0
Adding number conversion cast (unumber) 4 in (byte~) print_u8::$0 ← (byte) print_u8::b#5 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_u8::$2 ← (byte) print_u8::b#6 & (number) $f
Adding number conversion cast (unumber) print_u8::$2 in (number~) print_u8::$2 ← (byte) print_u8::b#6 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (word) memset::num#0 ← (number) $3e8
Adding number conversion cast (unumber) 0 in (byte) print_mulf8u127::a#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) print_mulf8u127::b#0 ← (number) 0
Adding number conversion cast (unumber) $7f in (byte) print_mulf8u127::a#1 ← (number) $7f
Adding number conversion cast (unumber) $7f in (byte) print_mulf8u127::b#1 ← (number) $7f
Adding number conversion cast (unumber) $40 in (byte) print_mulf8u127::a#2 ← (number) $40
Adding number conversion cast (unumber) $40 in (byte) print_mulf8u127::b#2 ← (number) $40
Adding number conversion cast (unumber) $40 in (byte) print_mulf8u127::a#3 ← (number) $40
Adding number conversion cast (unumber) $7f in (byte) print_mulf8u127::b#3 ← (number) $7f
Adding number conversion cast (unumber) $40 in (byte) print_mulf8u127::a#4 ← (number) $40
Adding number conversion cast (unumber) $c0 in (byte) print_mulf8u127::b#4 ← (number) $c0
Adding number conversion cast (unumber) $ff in (byte) print_mulf8u127::a#5 ← (number) $ff
Adding number conversion cast (unumber) $7f in (byte) print_mulf8u127::b#5 ← (number) $7f
Adding number conversion cast (unumber) $c0 in (byte) print_mulf8u127::a#6 ← (number) $c0
Adding number conversion cast (unumber) $c0 in (byte) print_mulf8u127::b#6 ← (number) $c0
Adding number conversion cast (unumber) $ff in (byte) print_mulf8u127::a#7 ← (number) $ff
Adding number conversion cast (unumber) $ff in (byte) print_mulf8u127::b#7 ← (number) $ff
Adding number conversion cast (snumber) 0 in (signed byte) print_mulf8s127::a#0 ← (number) 0
Adding number conversion cast (snumber) 0 in (signed byte) print_mulf8s127::b#0 ← (number) 0
Adding number conversion cast (snumber) $40 in (signed byte) print_mulf8s127::a#1 ← (number) $40
Adding number conversion cast (snumber) $40 in (signed byte) print_mulf8s127::b#1 ← (number) $40
Adding number conversion cast (snumber) $40 in (signed byte) print_mulf8s127::a#2 ← (number) $40
Adding number conversion cast (snumber) $7f in (signed byte) print_mulf8s127::b#2 ← (number) $7f
Adding number conversion cast (snumber) -$40 in (signed byte) print_mulf8s127::a#3 ← (number) -$40
Adding number conversion cast (snumber) $40 in (signed byte) print_mulf8s127::b#3 ← (number) $40
Adding number conversion cast (snumber) $40 in (signed byte) print_mulf8s127::a#4 ← (number) $40
Adding number conversion cast (snumber) -$40 in (signed byte) print_mulf8s127::b#4 ← (number) -$40
Adding number conversion cast (snumber) -$40 in (signed byte) print_mulf8s127::a#5 ← (number) -$40
Adding number conversion cast (snumber) -$40 in (signed byte) print_mulf8s127::b#5 ← (number) -$40
Adding number conversion cast (snumber) $7f in (signed byte) print_mulf8s127::a#6 ← (number) $7f
Adding number conversion cast (snumber) $7f in (signed byte) print_mulf8s127::b#6 ← (number) $7f
Adding number conversion cast (snumber) -$7f in (signed byte) print_mulf8s127::a#7 ← (number) -$7f
Adding number conversion cast (snumber) $7f in (signed byte) print_mulf8s127::b#7 ← (number) $7f
Adding number conversion cast (snumber) $7f in (signed byte) print_mulf8s127::a#8 ← (number) $7f
Adding number conversion cast (snumber) -$7f in (signed byte) print_mulf8s127::b#8 ← (number) -$7f
Adding number conversion cast (snumber) -$7f in (signed byte) print_mulf8s127::a#9 ← (number) -$7f
Adding number conversion cast (snumber) -$7f in (signed byte) print_mulf8s127::b#9 ← (number) -$7f
Adding number conversion cast (snumber) 0 in (bool~) mulf8s127::$4 ← (signed byte) mulf8s127::a#2 < (number) 0
Adding number conversion cast (snumber) 0 in (bool~) mulf8s127::$6 ← (signed byte) mulf8s127::b#2 < (number) 0
Adding number conversion cast (snumber) 2 in (number~) mulf8s127::$13 ← (signed word~) mulf8s127::$12 * (number) 2
Adding number conversion cast (snumber) mulf8s127::$13 in (number~) mulf8s127::$13 ← (signed word~) mulf8s127::$12 * (snumber)(number) 2
Adding number conversion cast (snumber) 0 in (bool~) mulf8s127::$8 ← (signed byte) mulf8s127::a#3 < (number) 0
Adding number conversion cast (snumber) 0 in (bool~) mulf8s127::$9 ← (signed byte) mulf8s127::b#4 < (number) 0
Adding number conversion cast (snumber) 2 in (number~) mulf8s127::$15 ← (signed word~) mulf8s127::$14 * (number) 2
Adding number conversion cast (snumber) mulf8s127::$15 in (number~) mulf8s127::$15 ← (signed word~) mulf8s127::$14 * (snumber)(number) 2
Adding number conversion cast (snumber) $200 in (signed word) mulf8s127::c#3 ← (signed word) mulf8s127::c#7 - (number) $200
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*~) memset::$2 ← (byte*)(void*) memset::str#2
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#2
Inlining cast (word~) print_sint::$1 ← (word)(signed word) print_sint::w#4
Inlining cast (byte~) print_s8::$1 ← (byte)(signed byte) print_s8::b#5
Inlining cast (word) memset::num#0 ← (unumber)(number) $3e8
Inlining cast (byte) print_mulf8u127::a#0 ← (unumber)(number) 0
Inlining cast (byte) print_mulf8u127::b#0 ← (unumber)(number) 0
Inlining cast (byte) print_mulf8u127::a#1 ← (unumber)(number) $7f
Inlining cast (byte) print_mulf8u127::b#1 ← (unumber)(number) $7f
Inlining cast (byte) print_mulf8u127::a#2 ← (unumber)(number) $40
Inlining cast (byte) print_mulf8u127::b#2 ← (unumber)(number) $40
Inlining cast (byte) print_mulf8u127::a#3 ← (unumber)(number) $40
Inlining cast (byte) print_mulf8u127::b#3 ← (unumber)(number) $7f
Inlining cast (byte) print_mulf8u127::a#4 ← (unumber)(number) $40
Inlining cast (byte) print_mulf8u127::b#4 ← (unumber)(number) $c0
Inlining cast (byte) print_mulf8u127::a#5 ← (unumber)(number) $ff
Inlining cast (byte) print_mulf8u127::b#5 ← (unumber)(number) $7f
Inlining cast (byte) print_mulf8u127::a#6 ← (unumber)(number) $c0
Inlining cast (byte) print_mulf8u127::b#6 ← (unumber)(number) $c0
Inlining cast (byte) print_mulf8u127::a#7 ← (unumber)(number) $ff
Inlining cast (byte) print_mulf8u127::b#7 ← (unumber)(number) $ff
Inlining cast (signed byte) print_mulf8s127::a#0 ← (snumber)(number) 0
Inlining cast (signed byte) print_mulf8s127::b#0 ← (snumber)(number) 0
Inlining cast (signed byte) print_mulf8s127::a#1 ← (snumber)(number) $40
Inlining cast (signed byte) print_mulf8s127::b#1 ← (snumber)(number) $40
Inlining cast (signed byte) print_mulf8s127::a#2 ← (snumber)(number) $40
Inlining cast (signed byte) print_mulf8s127::b#2 ← (snumber)(number) $7f
Inlining cast (signed byte) print_mulf8s127::a#3 ← (snumber)(number) -$40
Inlining cast (signed byte) print_mulf8s127::b#3 ← (snumber)(number) $40
Inlining cast (signed byte) print_mulf8s127::a#4 ← (snumber)(number) $40
Inlining cast (signed byte) print_mulf8s127::b#4 ← (snumber)(number) -$40
Inlining cast (signed byte) print_mulf8s127::a#5 ← (snumber)(number) -$40
Inlining cast (signed byte) print_mulf8s127::b#5 ← (snumber)(number) -$40
Inlining cast (signed byte) print_mulf8s127::a#6 ← (snumber)(number) $7f
Inlining cast (signed byte) print_mulf8s127::b#6 ← (snumber)(number) $7f
Inlining cast (signed byte) print_mulf8s127::a#7 ← (snumber)(number) -$7f
Inlining cast (signed byte) print_mulf8s127::b#7 ← (snumber)(number) $7f
Inlining cast (signed byte) print_mulf8s127::a#8 ← (snumber)(number) $7f
Inlining cast (signed byte) print_mulf8s127::b#8 ← (snumber)(number) -$7f
Inlining cast (signed byte) print_mulf8s127::a#9 ← (snumber)(number) -$7f
Inlining cast (signed byte) print_mulf8s127::b#9 ← (snumber)(number) -$7f
Inlining cast (byte~) mulf8s127::$0 ← (byte)(signed byte) mulf8s127::a#1
Inlining cast (byte~) mulf8s127::$1 ← (byte)(signed byte) mulf8s127::b#1
Inlining cast (signed word~) mulf8s127::$3 ← (signed word)(word~) mulf8s127::$2
Inlining cast (signed word~) mulf8s127::$12 ← (signed word)(signed byte) mulf8s127::b#3
Inlining cast (signed word~) mulf8s127::$14 ← (signed word)(signed byte) mulf8s127::a#4
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 252
Simplifying constant pointer cast (byte*) 253
Simplifying constant pointer cast (word*) 254
Simplifying constant pointer cast (byte*) 254
Simplifying constant pointer cast (byte*) 255
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $7f
Simplifying constant integer cast $7f
Simplifying constant integer cast $40
Simplifying constant integer cast $40
Simplifying constant integer cast $40
Simplifying constant integer cast $7f
Simplifying constant integer cast $40
Simplifying constant integer cast $c0
Simplifying constant integer cast $ff
Simplifying constant integer cast $7f
Simplifying constant integer cast $c0
Simplifying constant integer cast $c0
Simplifying constant integer cast $ff
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast $40
Simplifying constant integer cast $40
Simplifying constant integer cast $7f
Simplifying constant integer cast -$40
Simplifying constant integer cast $40
Simplifying constant integer cast $40
Simplifying constant integer cast -$40
Simplifying constant integer cast -$40
Simplifying constant integer cast -$40
Simplifying constant integer cast $7f
Simplifying constant integer cast $7f
Simplifying constant integer cast -$7f
Simplifying constant integer cast $7f
Simplifying constant integer cast $7f
Simplifying constant integer cast -$7f
Simplifying constant integer cast -$7f
Simplifying constant integer cast -$7f
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast $200
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $c0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) $c0
Finalized unsigned number type (byte) $c0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) $ff
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) $40
Finalized signed number type (signed byte) $40
Finalized signed number type (signed byte) $40
Finalized signed number type (signed byte) $7f
Finalized signed number type (signed byte) -$40
Finalized signed number type (signed byte) $40
Finalized signed number type (signed byte) $40
Finalized signed number type (signed byte) -$40
Finalized signed number type (signed byte) -$40
Finalized signed number type (signed byte) -$40
Finalized signed number type (signed byte) $7f
Finalized signed number type (signed byte) $7f
Finalized signed number type (signed byte) -$7f
Finalized signed number type (signed byte) $7f
Finalized signed number type (signed byte) $7f
Finalized signed number type (signed byte) -$7f
Finalized signed number type (signed byte) -$7f
Finalized signed number type (signed byte) -$7f
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 2
Finalized signed number type (signed word) $200
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_u8::$2 ← (byte) print_u8::b#6 & (byte) $f
Inferred type updated to signed word in (snumber~) mulf8s127::$13 ← (signed word~) mulf8s127::$12 * (signed byte) 2
Inferred type updated to signed word in (snumber~) mulf8s127::$15 ← (signed word~) mulf8s127::$14 * (signed byte) 2
Inversing boolean not [2] (bool~) memset::$1 ← (word) memset::num#1 <= (byte) 0 from [1] (bool~) memset::$0 ← (word) memset::num#1 > (byte) 0
Inversing boolean not [366] (bool~) mulf8s127::$5 ← (signed byte) mulf8s127::a#2 >= (signed byte) 0 from [365] (bool~) mulf8s127::$4 ← (signed byte) mulf8s127::a#2 < (signed byte) 0
Inversing boolean not [370] (bool~) mulf8s127::$7 ← (signed byte) mulf8s127::b#2 >= (signed byte) 0 from [369] (bool~) mulf8s127::$6 ← (signed byte) mulf8s127::b#2 < (signed byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias memset::return#0 = memset::str#1 memset::return#3 memset::return#1 
Alias memset::str#2 = memset::str#3 
Alias memset::num#1 = memset::num#2 
Alias memset::c#3 = memset::c#4 
Alias memset::end#0 = memset::$3 
Alias memset::c#1 = memset::c#2 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#4 = memset::str#5 
Alias print_line_cursor#0 = print_screen#0 print_char_cursor#0 print_line_cursor#69 print_char_cursor#135 print_screen#4 
Alias print_str::str#3 = print_str::str#4 
Alias print_char_cursor#122 = print_char_cursor#62 print_char_cursor#63 print_char_cursor#2 
Alias print_line_cursor#1 = print_ln::$0 print_line_cursor#33 print_char_cursor#3 print_line_cursor#34 print_char_cursor#65 print_line_cursor#2 print_char_cursor#4 
Alias print_char_cursor#124 = print_char_cursor#137 print_char_cursor#125 
Alias print_sint::w#2 = print_sint::w#5 print_sint::w#3 print_sint::w#7 print_sint::w#6 
Alias print_char_cursor#5 = print_char_cursor#66 
Alias print_sint::w#0 = print_sint::$5 
Alias print_char_cursor#6 = print_char_cursor#67 
Alias print_uint::w#0 = print_sint::$1 
Alias print_char_cursor#68 = print_char_cursor#7 print_char_cursor#69 print_char_cursor#8 
Alias print_char_cursor#127 = print_char_cursor#138 print_char_cursor#128 
Alias print_s8::b#3 = print_s8::b#6 print_s8::b#4 print_s8::b#8 print_s8::b#7 
Alias print_char_cursor#70 = print_char_cursor#9 
Alias print_s8::b#0 = print_s8::$5 
Alias print_char_cursor#10 = print_char_cursor#71 
Alias print_u8::b#0 = print_s8::$1 
Alias print_char_cursor#11 = print_char_cursor#72 print_char_cursor#73 print_char_cursor#12 
Alias print_u8::b#1 = print_uint::$0 
Alias print_uint::w#2 = print_uint::w#3 
Alias print_char_cursor#13 = print_char_cursor#74 
Alias print_u8::b#2 = print_uint::$2 
Alias print_char_cursor#14 = print_char_cursor#75 print_char_cursor#76 print_char_cursor#15 
Alias print_u8::b#5 = print_u8::b#6 
Alias print_char_cursor#16 = print_char_cursor#77 
Alias print_char_cursor#17 = print_char_cursor#78 print_char_cursor#79 print_char_cursor#18 
Alias print_char_cursor#19 = print_char_cursor#81 print_char_cursor#20 
Alias print_line_cursor#3 = print_screen#2 print_screen#1 print_char_cursor#21 print_line_cursor#35 print_char_cursor#82 print_line_cursor#4 print_char_cursor#22 
Alias print_line_cursor#36 = print_line_cursor#5 print_line_cursor#65 
Alias print_char_cursor#23 = print_char_cursor#83 
Alias print_char_cursor#24 = print_char_cursor#84 
Alias print_line_cursor#37 = print_line_cursor#6 
Alias print_char_cursor#25 = print_char_cursor#85 
Alias print_char_cursor#26 = print_char_cursor#86 
Alias print_line_cursor#38 = print_line_cursor#7 
Alias print_char_cursor#27 = print_char_cursor#87 
Alias print_line_cursor#39 = print_line_cursor#8 
Alias print_char_cursor#28 = print_char_cursor#88 
Alias print_line_cursor#40 = print_line_cursor#9 
Alias print_char_cursor#29 = print_char_cursor#89 
Alias print_line_cursor#10 = print_line_cursor#41 
Alias print_char_cursor#30 = print_char_cursor#90 
Alias print_line_cursor#11 = print_line_cursor#42 
Alias print_char_cursor#31 = print_char_cursor#91 
Alias print_line_cursor#12 = print_line_cursor#43 
Alias print_char_cursor#32 = print_char_cursor#92 
Alias print_line_cursor#13 = print_line_cursor#44 
Alias print_char_cursor#33 = print_char_cursor#93 
Alias print_line_cursor#14 = print_line_cursor#45 print_line_cursor#66 
Alias print_char_cursor#34 = print_char_cursor#94 
Alias print_line_cursor#15 = print_line_cursor#46 
Alias print_char_cursor#35 = print_char_cursor#95 
Alias print_char_cursor#36 = print_char_cursor#96 
Alias print_line_cursor#16 = print_line_cursor#47 
Alias print_char_cursor#37 = print_char_cursor#97 
Alias print_line_cursor#17 = print_line_cursor#48 
Alias print_char_cursor#38 = print_char_cursor#98 
Alias print_line_cursor#18 = print_line_cursor#49 
Alias print_char_cursor#39 = print_char_cursor#99 
Alias print_line_cursor#19 = print_line_cursor#50 
Alias print_char_cursor#100 = print_char_cursor#40 
Alias print_line_cursor#20 = print_line_cursor#51 
Alias print_char_cursor#101 = print_char_cursor#41 
Alias print_line_cursor#21 = print_line_cursor#52 
Alias print_char_cursor#102 = print_char_cursor#42 
Alias print_line_cursor#22 = print_line_cursor#53 
Alias print_char_cursor#103 = print_char_cursor#43 
Alias print_line_cursor#23 = print_line_cursor#54 
Alias print_char_cursor#104 = print_char_cursor#44 
Alias print_line_cursor#24 = print_line_cursor#55 
Alias print_char_cursor#105 = print_char_cursor#45 print_char_cursor#106 print_char_cursor#46 
Alias print_line_cursor#25 = print_line_cursor#56 print_line_cursor#57 print_line_cursor#26 
Alias mulf8u127::return#0 = mulf8u127::return#4 
Alias print_mulf8u127::a#8 = print_mulf8u127::a#9 
Alias print_char_cursor#133 = print_char_cursor#139 
Alias print_mulf8u127::b#10 = print_mulf8u127::b#11 print_mulf8u127::b#8 print_mulf8u127::b#9 
Alias print_line_cursor#67 = print_line_cursor#78 print_line_cursor#80 print_line_cursor#76 print_line_cursor#74 print_line_cursor#72 print_line_cursor#70 
Alias print_mulf8u127::c#0 = print_mulf8u127::$0 print_mulf8u127::c#4 print_mulf8u127::c#3 print_mulf8u127::c#2 print_mulf8u127::c#1 
Alias print_char_cursor#107 = print_char_cursor#47 
Alias print_char_cursor#108 = print_char_cursor#48 
Alias print_char_cursor#109 = print_char_cursor#49 
Alias print_char_cursor#110 = print_char_cursor#50 
Alias print_char_cursor#111 = print_char_cursor#51 
Alias print_line_cursor#27 = print_line_cursor#58 print_line_cursor#59 print_line_cursor#28 
Alias print_char_cursor#112 = print_char_cursor#52 print_char_cursor#113 print_char_cursor#53 
Alias mulf8s127::return#0 = mulf8s127::return#3 
Alias print_mulf8s127::a#10 = print_mulf8s127::a#11 
Alias print_char_cursor#134 = print_char_cursor#140 
Alias print_mulf8s127::b#10 = print_mulf8s127::b#13 print_mulf8s127::b#12 print_mulf8s127::b#11 
Alias print_line_cursor#68 = print_line_cursor#79 print_line_cursor#81 print_line_cursor#77 print_line_cursor#75 print_line_cursor#73 print_line_cursor#71 
Alias print_mulf8s127::c#0 = print_mulf8s127::$0 print_mulf8s127::c#4 print_mulf8s127::c#3 print_mulf8s127::c#2 print_mulf8s127::c#1 
Alias print_char_cursor#114 = print_char_cursor#54 
Alias print_char_cursor#115 = print_char_cursor#55 
Alias print_char_cursor#116 = print_char_cursor#56 
Alias print_char_cursor#117 = print_char_cursor#57 
Alias print_char_cursor#118 = print_char_cursor#58 
Alias print_line_cursor#29 = print_line_cursor#60 print_line_cursor#61 print_line_cursor#30 
Alias print_char_cursor#119 = print_char_cursor#59 print_char_cursor#120 print_char_cursor#60 
Alias mulf8u127::return#1 = mulf8u127::return#5 mulf8u127::return#2 
Alias mulf8u127::a#1 = mulf8s127::$0 
Alias mulf8u127::b#1 = mulf8s127::$1 
Alias mulf8u127::return#3 = mulf8u127::return#6 
Alias mulf8s127::a#1 = mulf8s127::a#2 mulf8s127::a#6 
Alias mulf8s127::b#1 = mulf8s127::b#5 mulf8s127::b#3 
Alias mulf8s127::c#0 = mulf8s127::$3 mulf8s127::c#4 
Alias mulf8s127::a#4 = mulf8s127::a#5 
Alias mulf8s127::c#5 = mulf8s127::c#8 
Alias mulf8s127::b#2 = mulf8s127::b#6 
Alias mulf8s127::return#1 = mulf8s127::c#6 mulf8s127::return#4 mulf8s127::return#2 
Alias mulf8s127::c#7 = mulf8s127::c#9 
Alias print_line_cursor#31 = print_line_cursor#62 
Alias print_char_cursor#121 = print_char_cursor#61 
Successful SSA optimization Pass2AliasElimination
Alias mulf8s127::b#1 = mulf8s127::b#2 mulf8s127::b#4 
Alias mulf8s127::a#1 = mulf8s127::a#4 mulf8s127::a#3 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) memset::num#1 (word) memset::num#0
Identical Phi Values (void*) memset::str#2 (void*) memset::str#0
Identical Phi Values (byte) memset::c#3 (byte) memset::c#0
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#4 (void*) memset::str#2
Identical Phi Values (byte) memset::c#1 (byte) memset::c#3
Identical Phi Values (byte*) print_char_cursor#64 (byte*) print_char_cursor#123
Identical Phi Values (signed word) print_sint::w#2 (signed word) print_sint::w#1
Identical Phi Values (byte*) print_char_cursor#124 (byte*) print_char_cursor#117
Identical Phi Values (byte*) print_char_cursor#5 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#6 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#68 (byte*) print_char_cursor#14
Identical Phi Values (byte*) print_char_cursor#70 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#11 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#13 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#14 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#17 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_line_cursor#3 (byte*) print_screen#3
Identical Phi Values (byte*) print_screen#3 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#64 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#132 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#36 (byte*) print_line_cursor#3
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_line_cursor#3
Identical Phi Values (byte*) print_char_cursor#24 (byte*) print_char_cursor#122
Identical Phi Values (byte*) print_line_cursor#37 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#25 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#112
Identical Phi Values (byte*) print_line_cursor#38 (byte*) print_line_cursor#27
Identical Phi Values (byte*) print_char_cursor#27 (byte*) print_char_cursor#112
Identical Phi Values (byte*) print_line_cursor#39 (byte*) print_line_cursor#27
Identical Phi Values (byte*) print_char_cursor#28 (byte*) print_char_cursor#112
Identical Phi Values (byte*) print_line_cursor#40 (byte*) print_line_cursor#27
Identical Phi Values (byte*) print_char_cursor#29 (byte*) print_char_cursor#112
Identical Phi Values (byte*) print_line_cursor#10 (byte*) print_line_cursor#27
Identical Phi Values (byte*) print_char_cursor#30 (byte*) print_char_cursor#112
Identical Phi Values (byte*) print_line_cursor#11 (byte*) print_line_cursor#27
Identical Phi Values (byte*) print_char_cursor#31 (byte*) print_char_cursor#112
Identical Phi Values (byte*) print_line_cursor#12 (byte*) print_line_cursor#27
Identical Phi Values (byte*) print_char_cursor#32 (byte*) print_char_cursor#112
Identical Phi Values (byte*) print_line_cursor#13 (byte*) print_line_cursor#27
Identical Phi Values (byte*) print_char_cursor#33 (byte*) print_char_cursor#112
Identical Phi Values (byte*) print_line_cursor#14 (byte*) print_line_cursor#27
Identical Phi Values (byte*) print_char_cursor#34 (byte*) print_char_cursor#122
Identical Phi Values (byte*) print_line_cursor#15 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#35 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#36 (byte*) print_char_cursor#119
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_line_cursor#29
Identical Phi Values (byte*) print_char_cursor#37 (byte*) print_char_cursor#119
Identical Phi Values (byte*) print_line_cursor#17 (byte*) print_line_cursor#29
Identical Phi Values (byte*) print_char_cursor#38 (byte*) print_char_cursor#119
Identical Phi Values (byte*) print_line_cursor#18 (byte*) print_line_cursor#29
Identical Phi Values (byte*) print_char_cursor#39 (byte*) print_char_cursor#119
Identical Phi Values (byte*) print_line_cursor#19 (byte*) print_line_cursor#29
Identical Phi Values (byte*) print_char_cursor#100 (byte*) print_char_cursor#119
Identical Phi Values (byte*) print_line_cursor#20 (byte*) print_line_cursor#29
Identical Phi Values (byte*) print_char_cursor#101 (byte*) print_char_cursor#119
Identical Phi Values (byte*) print_line_cursor#21 (byte*) print_line_cursor#29
Identical Phi Values (byte*) print_char_cursor#102 (byte*) print_char_cursor#119
Identical Phi Values (byte*) print_line_cursor#22 (byte*) print_line_cursor#29
Identical Phi Values (byte*) print_char_cursor#103 (byte*) print_char_cursor#119
Identical Phi Values (byte*) print_line_cursor#23 (byte*) print_line_cursor#29
Identical Phi Values (byte*) print_char_cursor#104 (byte*) print_char_cursor#119
Identical Phi Values (byte*) print_line_cursor#24 (byte*) print_line_cursor#29
Identical Phi Values (byte*) print_char_cursor#105 (byte*) print_char_cursor#119
Identical Phi Values (byte*) print_line_cursor#25 (byte*) print_line_cursor#29
Identical Phi Values (byte*) print_char_cursor#107 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#108 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#109 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#110 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#111 (byte*) print_char_cursor#14
Identical Phi Values (byte*) print_line_cursor#27 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#112 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#114 (byte*) print_char_cursor#11
Identical Phi Values (byte*) print_char_cursor#115 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#116 (byte*) print_char_cursor#11
Identical Phi Values (byte*) print_char_cursor#117 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#118 (byte*) print_char_cursor#68
Identical Phi Values (byte*) print_line_cursor#29 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#119 (byte*) print_line_cursor#1
Identical Phi Values (signed byte) mulf8s127::a#1 (signed byte) mulf8s127::a#0
Identical Phi Values (signed byte) mulf8s127::b#1 (signed byte) mulf8s127::b#0
Identical Phi Values (byte*) print_line_cursor#31 (byte*) print_line_cursor#25
Identical Phi Values (byte*) print_char_cursor#121 (byte*) print_char_cursor#105
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#0
Identical Phi Values (byte*) print_char_cursor#126 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#129 (byte*) print_char_cursor#19
Identical Phi Values (byte*) print_char_cursor#133 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#67 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#134 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#68 (byte*) print_line_cursor#1
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) print_char_cursor#130 (byte*) print_char_cursor#19
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memset::$1 [2] if((word) memset::num#0<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$4 [9] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@5
Simple Condition (bool~) print_str::$0 [17] if((byte) 0!=*((byte*) print_str::str#3)) goto print_str::@2
Simple Condition (bool~) print_ln::$1 [26] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#123) goto print_ln::@1
Simple Condition (bool~) print_sint::$0 [30] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1
Simple Condition (bool~) print_s8::$0 [45] if((signed byte) print_s8::b#3<(signed byte) 0) goto print_s8::@1
Simple Condition (bool~) mulf8s127::$5 [235] if((signed byte) mulf8s127::a#0>=(signed byte) 0) goto mulf8s127::@1
Simple Condition (bool~) mulf8s127::$7 [238] if((signed byte) mulf8s127::b#0>=(signed byte) 0) goto mulf8s127::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting ! if()-condition to reversed if() [246] (bool~) mulf8s127::$11 ← ! (bool~) mulf8s127::$10
Rewriting && if()-condition to two if()s [245] (bool~) mulf8s127::$10 ← (bool~) mulf8s127::$8 && (bool~) mulf8s127::$9
Successful SSA optimization Pass2ConditionalAndOrRewriting
Constant (const byte*) print_line_cursor#0 = (byte*) 1024
Constant (const byte) print_char::ch#0 = '-'
Constant (const byte) print_char::ch#1 = ' '
Constant (const byte) print_char::ch#2 = '-'
Constant (const byte) print_char::ch#3 = ' '
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $3e8
Constant (const byte*) print_str::str#1 = main::str
Constant (const byte) print_mulf8u127::a#0 = 0
Constant (const byte) print_mulf8u127::b#0 = 0
Constant (const byte) print_mulf8u127::a#1 = $7f
Constant (const byte) print_mulf8u127::b#1 = $7f
Constant (const byte) print_mulf8u127::a#2 = $40
Constant (const byte) print_mulf8u127::b#2 = $40
Constant (const byte) print_mulf8u127::a#3 = $40
Constant (const byte) print_mulf8u127::b#3 = $7f
Constant (const byte) print_mulf8u127::a#4 = $40
Constant (const byte) print_mulf8u127::b#4 = $c0
Constant (const byte) print_mulf8u127::a#5 = $ff
Constant (const byte) print_mulf8u127::b#5 = $7f
Constant (const byte) print_mulf8u127::a#6 = $c0
Constant (const byte) print_mulf8u127::b#6 = $c0
Constant (const byte) print_mulf8u127::a#7 = $ff
Constant (const byte) print_mulf8u127::b#7 = $ff
Constant (const byte*) print_str::str#2 = main::str1
Constant (const signed byte) print_mulf8s127::a#0 = 0
Constant (const signed byte) print_mulf8s127::b#0 = 0
Constant (const signed byte) print_mulf8s127::a#1 = $40
Constant (const signed byte) print_mulf8s127::b#1 = $40
Constant (const signed byte) print_mulf8s127::a#2 = $40
Constant (const signed byte) print_mulf8s127::b#2 = $7f
Constant (const signed byte) print_mulf8s127::a#3 = -$40
Constant (const signed byte) print_mulf8s127::b#3 = $40
Constant (const signed byte) print_mulf8s127::a#4 = $40
Constant (const signed byte) print_mulf8s127::b#4 = -$40
Constant (const signed byte) print_mulf8s127::a#5 = -$40
Constant (const signed byte) print_mulf8s127::b#5 = -$40
Constant (const signed byte) print_mulf8s127::a#6 = $7f
Constant (const signed byte) print_mulf8s127::b#6 = $7f
Constant (const signed byte) print_mulf8s127::a#7 = -$7f
Constant (const signed byte) print_mulf8s127::b#7 = $7f
Constant (const signed byte) print_mulf8s127::a#8 = $7f
Constant (const signed byte) print_mulf8s127::b#8 = -$7f
Constant (const signed byte) print_mulf8s127::a#9 = -$7f
Constant (const signed byte) print_mulf8s127::b#9 = -$7f
Constant (const byte) print_char::ch#6 = '*'
Constant (const byte) print_char::ch#7 = '='
Constant (const byte) print_char::ch#8 = '*'
Constant (const byte) print_char::ch#9 = '='
Successful SSA optimization Pass2ConstantIdentification
Constant (const void*) memset::str#0 = (void*)print_line_cursor#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) memset::$2 = (byte*)memset::str#0
Constant (const byte*) memset::dst#0 = (byte*)memset::str#0
Constant (const void*) memset::return#2 = memset::str#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [2] if((const word) memset::num#0<=(byte) 0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant (const void*) memset::return#2
Successful SSA optimization PassNEliminateUnusedVars
Simple Condition (bool~) mulf8s127::$8 [132] if((signed byte) mulf8s127::a#0<(signed byte) 0) goto mulf8s127::@9
Simple Condition (bool~) mulf8s127::$9 [140] if((signed byte) mulf8s127::b#0<(signed byte) 0) goto mulf8s127::@6
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [132] if((signed byte) mulf8s127::a#0>=(signed byte) 0) goto mulf8s127::@3
Negating conditional jump and destination [140] if((signed byte) mulf8s127::b#0>=(signed byte) 0) goto mulf8s127::@3
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [0] (byte*) memset::end#0 ← (const byte*) memset::$2 + (const word) memset::num#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memset::end#0 = memset::$2+memset::num#0
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [121] (signed word) mulf8s127::c#0 ← (signed word)(word~) mulf8s127::$2 keeping mulf8s127::c#0
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [126] (signed word~) mulf8s127::$13 ← (signed word~) mulf8s127::$12 * (signed byte) 2
Rewriting multiplication to use shift [131] (signed word~) mulf8s127::$15 ← (signed word~) mulf8s127::$14 * (signed byte) 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte*) memset::dst#0
Inlining constant with var siblings (const byte*) print_str::str#1
Inlining constant with var siblings (const byte*) print_str::str#2
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte) print_char::ch#1
Inlining constant with var siblings (const byte) print_char::ch#2
Inlining constant with var siblings (const byte) print_char::ch#3
Inlining constant with var siblings (const byte) print_char::ch#6
Inlining constant with var siblings (const byte) print_char::ch#7
Inlining constant with var siblings (const byte) print_char::ch#8
Inlining constant with var siblings (const byte) print_char::ch#9
Inlining constant with var siblings (const byte) print_mulf8u127::a#0
Inlining constant with var siblings (const byte) print_mulf8u127::b#0
Inlining constant with var siblings (const byte) print_mulf8u127::a#1
Inlining constant with var siblings (const byte) print_mulf8u127::b#1
Inlining constant with var siblings (const byte) print_mulf8u127::a#2
Inlining constant with var siblings (const byte) print_mulf8u127::b#2
Inlining constant with var siblings (const byte) print_mulf8u127::a#3
Inlining constant with var siblings (const byte) print_mulf8u127::b#3
Inlining constant with var siblings (const byte) print_mulf8u127::a#4
Inlining constant with var siblings (const byte) print_mulf8u127::b#4
Inlining constant with var siblings (const byte) print_mulf8u127::a#5
Inlining constant with var siblings (const byte) print_mulf8u127::b#5
Inlining constant with var siblings (const byte) print_mulf8u127::a#6
Inlining constant with var siblings (const byte) print_mulf8u127::b#6
Inlining constant with var siblings (const byte) print_mulf8u127::a#7
Inlining constant with var siblings (const byte) print_mulf8u127::b#7
Inlining constant with var siblings (const signed byte) print_mulf8s127::a#0
Inlining constant with var siblings (const signed byte) print_mulf8s127::b#0
Inlining constant with var siblings (const signed byte) print_mulf8s127::a#1
Inlining constant with var siblings (const signed byte) print_mulf8s127::b#1
Inlining constant with var siblings (const signed byte) print_mulf8s127::a#2
Inlining constant with var siblings (const signed byte) print_mulf8s127::b#2
Inlining constant with var siblings (const signed byte) print_mulf8s127::a#3
Inlining constant with var siblings (const signed byte) print_mulf8s127::b#3
Inlining constant with var siblings (const signed byte) print_mulf8s127::a#4
Inlining constant with var siblings (const signed byte) print_mulf8s127::b#4
Inlining constant with var siblings (const signed byte) print_mulf8s127::a#5
Inlining constant with var siblings (const signed byte) print_mulf8s127::b#5
Inlining constant with var siblings (const signed byte) print_mulf8s127::a#6
Inlining constant with var siblings (const signed byte) print_mulf8s127::b#6
Inlining constant with var siblings (const signed byte) print_mulf8s127::a#7
Inlining constant with var siblings (const signed byte) print_mulf8s127::b#7
Inlining constant with var siblings (const signed byte) print_mulf8s127::a#8
Inlining constant with var siblings (const signed byte) print_mulf8s127::b#8
Inlining constant with var siblings (const signed byte) print_mulf8s127::a#9
Inlining constant with var siblings (const signed byte) print_mulf8s127::b#9
Inlining constant with var siblings (const byte*) print_line_cursor#0
Constant inlined print_char::ch#7 = (byte) '='
Constant inlined print_char::ch#6 = (byte) '*'
Constant inlined print_char::ch#9 = (byte) '='
Constant inlined print_char::ch#8 = (byte) '*'
Constant inlined print_mulf8s127::b#6 = (signed byte) $7f
Constant inlined print_mulf8s127::b#7 = (signed byte) $7f
Constant inlined print_mulf8s127::b#4 = (signed byte) -$40
Constant inlined print_mulf8s127::b#5 = (signed byte) -$40
Constant inlined print_mulf8s127::b#2 = (signed byte) $7f
Constant inlined print_mulf8s127::b#3 = (signed byte) $40
Constant inlined print_mulf8u127::b#7 = (byte) $ff
Constant inlined print_mulf8s127::b#0 = (signed byte) 0
Constant inlined print_line_cursor#0 = (byte*) 1024
Constant inlined print_mulf8u127::b#6 = (byte) $c0
Constant inlined print_mulf8s127::b#1 = (signed byte) $40
Constant inlined print_mulf8u127::b#5 = (byte) $7f
Constant inlined print_mulf8u127::b#4 = (byte) $c0
Constant inlined print_str::str#2 = (const byte*) main::str1
Constant inlined memset::dst#0 = (byte*)(const void*) memset::str#0
Constant inlined print_mulf8u127::b#3 = (byte) $7f
Constant inlined print_str::str#1 = (const byte*) main::str
Constant inlined print_mulf8u127::b#2 = (byte) $40
Constant inlined print_mulf8u127::b#1 = (byte) $7f
Constant inlined print_mulf8u127::b#0 = (byte) 0
Constant inlined print_mulf8s127::b#8 = (signed byte) -$7f
Constant inlined print_mulf8s127::b#9 = (signed byte) -$7f
Constant inlined memset::$2 = (byte*)(const void*) memset::str#0
Constant inlined print_mulf8s127::a#7 = (signed byte) -$7f
Constant inlined print_mulf8s127::a#8 = (signed byte) $7f
Constant inlined print_mulf8s127::a#5 = (signed byte) -$40
Constant inlined print_mulf8s127::a#6 = (signed byte) $7f
Constant inlined print_mulf8s127::a#3 = (signed byte) -$40
Constant inlined print_mulf8s127::a#4 = (signed byte) $40
Constant inlined print_mulf8s127::a#1 = (signed byte) $40
Constant inlined print_mulf8u127::a#7 = (byte) $ff
Constant inlined print_mulf8s127::a#2 = (signed byte) $40
Constant inlined print_mulf8s127::a#0 = (signed byte) 0
Constant inlined print_char::ch#3 = (byte) ' '
Constant inlined print_char::ch#2 = (byte) '-'
Constant inlined print_char::ch#1 = (byte) ' '
Constant inlined print_char::ch#0 = (byte) '-'
Constant inlined print_mulf8u127::a#6 = (byte) $c0
Constant inlined print_mulf8u127::a#5 = (byte) $ff
Constant inlined print_mulf8u127::a#4 = (byte) $40
Constant inlined print_mulf8u127::a#3 = (byte) $40
Constant inlined print_mulf8u127::a#2 = (byte) $40
Constant inlined print_mulf8u127::a#1 = (byte) $7f
Constant inlined print_mulf8u127::a#0 = (byte) 0
Constant inlined print_mulf8s127::a#9 = (signed byte) -$7f
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting mulf8s127::@10(between mulf8s127::@8 and mulf8s127::@1)
Added new block during phi lifting mulf8s127::@11(between mulf8s127::@1 and mulf8s127::@2)
Added new block during phi lifting mulf8s127::@12(between mulf8s127::@2 and mulf8s127::@3)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @13
Adding NOP phi() at start of @42
Adding NOP phi() at start of @43
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@14
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of main::@16
Adding NOP phi() at start of main::@17
Adding NOP phi() at start of main::@18
Adding NOP phi() at start of main::@19
Adding NOP phi() at start of main::@20
Adding NOP phi() at start of main::@21
Adding NOP phi() at start of main::@22
Adding NOP phi() at start of main::@23
Adding NOP phi() at start of print_mulf8s127::@7
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_sint::@7
Adding NOP phi() at start of print_uint::@2
Adding NOP phi() at start of print_u8::@2
Adding NOP phi() at start of print_s8::@7
Adding NOP phi() at start of print_mulf8u127::@7
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@2
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [] to main:3 
Calls in [main] to print_cls:7 print_str:9 print_ln:11 print_mulf8u127:13 print_mulf8u127:15 print_mulf8u127:17 print_mulf8u127:19 print_mulf8u127:21 print_mulf8u127:23 print_mulf8u127:25 print_mulf8u127:27 print_str:29 print_ln:32 print_mulf8s127:34 print_mulf8s127:36 print_mulf8s127:38 print_mulf8s127:40 print_mulf8s127:42 print_mulf8s127:44 print_mulf8s127:46 print_mulf8s127:48 print_mulf8s127:50 print_mulf8s127:52 
Calls in [print_mulf8s127] to mulf8s127:58 print_s8:64 print_char:66 print_s8:70 print_char:72 print_sint:74 print_ln:77 
Calls in [print_sint] to print_char:90 print_uint:95 print_char:99 
Calls in [print_uint] to print_u8:110 print_u8:114 
Calls in [print_u8] to print_char:122 print_char:127 
Calls in [print_s8] to print_char:133 print_u8:139 print_char:143 
Calls in [mulf8s127] to mulf8u127:150 
Calls in [print_mulf8u127] to mulf8u127:196 print_u8:202 print_char:204 print_u8:208 print_char:210 print_uint:213 print_ln:216 
Calls in [print_cls] to memset:220 

Created 26 initial phi equivalence classes
Coalesced [10] print_char_cursor#145 ← print_char_cursor#122
Not coalescing [28] print_char_cursor#141 ← print_line_cursor#1
Coalesced [30] print_line_cursor#82 ← print_line_cursor#1
Coalesced (already) [31] print_char_cursor#144 ← print_char_cursor#122
Coalesced [62] print_s8::b#9 ← print_s8::b#1
Not coalescing [63] print_char_cursor#148 ← print_line_cursor#1
Coalesced [65] print_char_cursor#155 ← print_char_cursor#19
Coalesced [68] print_s8::b#10 ← print_s8::b#2
Coalesced [69] print_char_cursor#149 ← print_char_cursor#19
Coalesced (already) [71] print_char_cursor#156 ← print_char_cursor#19
Coalesced (already) [75] print_line_cursor#83 ← print_line_cursor#1
Coalesced [76] print_char_cursor#146 ← print_char_cursor#19
Coalesced [81] print_line_cursor#85 ← print_line_cursor#63
Coalesced (already) [87] print_line_cursor#86 ← print_line_cursor#1
Coalesced (already) [89] print_char_cursor#162 ← print_char_cursor#19
Coalesced [91] print_sint::w#9 ← print_sint::w#1
Coalesced [94] print_uint::w#5 ← print_uint::w#0
Coalesced (already) [98] print_char_cursor#161 ← print_char_cursor#19
Coalesced [101] print_sint::w#8 ← print_sint::w#0
Coalesced [108] print_u8::b#10 ← print_u8::b#1
Coalesced [109] print_char_cursor#153 ← print_char_cursor#19
Coalesced [112] print_u8::b#11 ← print_u8::b#2
Coalesced (already) [113] print_char_cursor#154 ← print_char_cursor#19
Coalesced [120] print_char::ch#11 ← print_char::ch#4
Coalesced (already) [121] print_char_cursor#163 ← print_char_cursor#131
Coalesced [125] print_char::ch#12 ← print_char::ch#5
Coalesced (already) [126] print_char_cursor#164 ← print_char_cursor#19
Coalesced (already) [132] print_char_cursor#160 ← print_char_cursor#127
Coalesced [134] print_s8::b#12 ← print_s8::b#3
Coalesced [137] print_u8::b#9 ← print_u8::b#0
Coalesced (already) [138] print_char_cursor#152 ← print_char_cursor#19
Coalesced (already) [142] print_char_cursor#159 ← print_char_cursor#127
Coalesced [145] print_s8::b#11 ← print_s8::b#0
Coalesced [148] mulf8u127::a#3 ← mulf8u127::a#1
Coalesced [149] mulf8u127::b#3 ← mulf8u127::b#1
Coalesced [157] mulf8s127::c#10 ← mulf8s127::c#1
Coalesced [163] mulf8s127::c#13 ← mulf8s127::c#2
Coalesced [168] mulf8s127::return#6 ← mulf8s127::c#3
Coalesced [171] mulf8s127::return#5 ← mulf8s127::c#7
Coalesced [172] mulf8s127::c#12 ← mulf8s127::c#5
Coalesced [181] print_str::str#6 ← print_str::str#5
Coalesced [182] print_char_cursor#142 ← print_char_cursor#136
Coalesced [189] print_str::str#7 ← print_str::str#0
Coalesced [190] print_char_cursor#143 ← print_char_cursor#1
Coalesced [194] mulf8u127::a#4 ← mulf8u127::a#0
Coalesced [195] mulf8u127::b#4 ← mulf8u127::b#0
Coalesced [200] print_u8::b#7 ← print_u8::b#3
Not coalescing [201] print_char_cursor#150 ← print_line_cursor#1
Coalesced (already) [203] print_char_cursor#157 ← print_char_cursor#19
Coalesced [206] print_u8::b#8 ← print_u8::b#4
Coalesced (already) [207] print_char_cursor#151 ← print_char_cursor#19
Coalesced (already) [209] print_char_cursor#158 ← print_char_cursor#19
Coalesced [212] print_uint::w#4 ← print_uint::w#1
Coalesced (already) [214] print_line_cursor#84 ← print_line_cursor#1
Coalesced (already) [215] print_char_cursor#147 ← print_char_cursor#19
Coalesced [231] memset::dst#4 ← memset::dst#1
Coalesced down to 16 phi equivalence classes
Culled Empty Block (label) @13
Culled Empty Block (label) @43
Culled Empty Block (label) main::@23
Culled Empty Block (label) print_mulf8s127::@7
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_sint::@6
Culled Empty Block (label) print_sint::@7
Culled Empty Block (label) print_uint::@2
Culled Empty Block (label) print_u8::@2
Culled Empty Block (label) print_s8::@6
Culled Empty Block (label) print_s8::@7
Culled Empty Block (label) mulf8s127::@12
Culled Empty Block (label) mulf8s127::@11
Culled Empty Block (label) print_mulf8u127::@7
Culled Empty Block (label) print_cls::@1
Culled Empty Block (label) memset::@2
Culled Empty Block (label) memset::@1
Renumbering block @42 to @1
Renumbering block memset::@4 to memset::@1
Renumbering block memset::@5 to memset::@2
Renumbering block print_sint::@5 to print_sint::@4
Renumbering block print_s8::@5 to print_s8::@4
Renumbering block mulf8s127::@8 to mulf8s127::@7
Renumbering block mulf8s127::@9 to mulf8s127::@8
Renumbering block mulf8s127::@10 to mulf8s127::@9
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@10
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@14
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of main::@16
Adding NOP phi() at start of main::@17
Adding NOP phi() at start of main::@18
Adding NOP phi() at start of main::@19
Adding NOP phi() at start of main::@20
Adding NOP phi() at start of main::@21
Adding NOP phi() at start of main::@22
Adding NOP phi() at start of print_mulf8s127::@2
Adding NOP phi() at start of print_mulf8s127::@4
Adding NOP phi() at start of print_mulf8s127::@6
Adding NOP phi() at start of print_sint::@3
Adding NOP phi() at start of print_sint::@1
Adding NOP phi() at start of print_s8::@3
Adding NOP phi() at start of print_s8::@1
Adding NOP phi() at start of print_mulf8u127::@2
Adding NOP phi() at start of print_mulf8u127::@4
Adding NOP phi() at start of print_mulf8u127::@6
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of memset

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call print_str 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi()
  [9] call print_ln 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] phi()
  [11] call print_mulf8u127 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [12] phi()
  [13] call print_mulf8u127 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [14] phi()
  [15] call print_mulf8u127 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [16] phi()
  [17] call print_mulf8u127 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [18] phi()
  [19] call print_mulf8u127 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [20] phi()
  [21] call print_mulf8u127 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [22] phi()
  [23] call print_mulf8u127 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [24] phi()
  [25] call print_mulf8u127 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [26] (byte*) print_char_cursor#141 ← (byte*) print_line_cursor#1
  [27] call print_str 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [28] phi()
  [29] call print_ln 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [30] phi()
  [31] call print_mulf8s127 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [32] phi()
  [33] call print_mulf8s127 
  to:main::@15
main::@15: scope:[main]  from main::@14
  [34] phi()
  [35] call print_mulf8s127 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [36] phi()
  [37] call print_mulf8s127 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [38] phi()
  [39] call print_mulf8s127 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [40] phi()
  [41] call print_mulf8s127 
  to:main::@19
main::@19: scope:[main]  from main::@18
  [42] phi()
  [43] call print_mulf8s127 
  to:main::@20
main::@20: scope:[main]  from main::@19
  [44] phi()
  [45] call print_mulf8s127 
  to:main::@21
main::@21: scope:[main]  from main::@20
  [46] phi()
  [47] call print_mulf8s127 
  to:main::@22
main::@22: scope:[main]  from main::@21
  [48] phi()
  [49] call print_mulf8s127 
  to:main::@return
main::@return: scope:[main]  from main::@22
  [50] return 
  to:@return

(void()) print_mulf8s127((signed byte) print_mulf8s127::a , (signed byte) print_mulf8s127::b)
print_mulf8s127: scope:[print_mulf8s127]  from main::@13 main::@14 main::@15 main::@16 main::@17 main::@18 main::@19 main::@20 main::@21 main::@22
  [51] (signed byte) print_mulf8s127::b#10 ← phi( main::@13/(signed byte) 0 main::@14/(signed byte) $40 main::@15/(signed byte) $7f main::@16/(signed byte) $40 main::@17/(signed byte) -$40 main::@18/(signed byte) -$40 main::@19/(signed byte) $7f main::@20/(signed byte) $7f main::@21/(signed byte) -$7f main::@22/(signed byte) -$7f )
  [51] (signed byte) print_mulf8s127::a#10 ← phi( main::@13/(signed byte) 0 main::@14/(signed byte) $40 main::@15/(signed byte) $40 main::@16/(signed byte) -$40 main::@17/(signed byte) $40 main::@18/(signed byte) -$40 main::@19/(signed byte) $7f main::@20/(signed byte) -$7f main::@21/(signed byte) $7f main::@22/(signed byte) -$7f )
  [52] (signed byte) mulf8s127::a#0 ← (signed byte) print_mulf8s127::a#10
  [53] (signed byte) mulf8s127::b#0 ← (signed byte) print_mulf8s127::b#10
  [54] call mulf8s127 
  [55] (signed word) mulf8s127::return#0 ← (signed word) mulf8s127::return#1
  to:print_mulf8s127::@1
print_mulf8s127::@1: scope:[print_mulf8s127]  from print_mulf8s127
  [56] (signed word) print_mulf8s127::c#0 ← (signed word) mulf8s127::return#0
  [57] (signed byte) print_s8::b#1 ← (signed byte) print_mulf8s127::a#10
  [58] (byte*) print_char_cursor#148 ← (byte*) print_line_cursor#1
  [59] call print_s8 
  to:print_mulf8s127::@2
print_mulf8s127::@2: scope:[print_mulf8s127]  from print_mulf8s127::@1
  [60] phi()
  [61] call print_char 
  to:print_mulf8s127::@3
print_mulf8s127::@3: scope:[print_mulf8s127]  from print_mulf8s127::@2
  [62] (signed byte) print_s8::b#2 ← (signed byte) print_mulf8s127::b#10
  [63] call print_s8 
  to:print_mulf8s127::@4
print_mulf8s127::@4: scope:[print_mulf8s127]  from print_mulf8s127::@3
  [64] phi()
  [65] call print_char 
  to:print_mulf8s127::@5
print_mulf8s127::@5: scope:[print_mulf8s127]  from print_mulf8s127::@4
  [66] (signed word) print_sint::w#1 ← (signed word) print_mulf8s127::c#0
  [67] call print_sint 
  to:print_mulf8s127::@6
print_mulf8s127::@6: scope:[print_mulf8s127]  from print_mulf8s127::@5
  [68] phi()
  [69] call print_ln 
  to:print_mulf8s127::@return
print_mulf8s127::@return: scope:[print_mulf8s127]  from print_mulf8s127::@6
  [70] return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from main::@12 main::@2 print_mulf8s127::@6 print_mulf8u127::@6
  [71] (byte*) print_char_cursor#123 ← phi( main::@12/(byte*) print_char_cursor#122 main::@2/(byte*) print_char_cursor#122 print_mulf8s127::@6/(byte*) print_char_cursor#19 print_mulf8u127::@6/(byte*) print_char_cursor#19 )
  [71] (byte*) print_line_cursor#63 ← phi( main::@12/(byte*) print_line_cursor#1 main::@2/(byte*) 1024 print_mulf8s127::@6/(byte*) print_line_cursor#1 print_mulf8u127::@6/(byte*) print_line_cursor#1 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [72] (byte*) print_line_cursor#32 ← phi( print_ln/(byte*) print_line_cursor#63 print_ln::@1/(byte*) print_line_cursor#1 )
  [73] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#32 + (byte) $28
  [74] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#123) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [75] return 
  to:@return

(void()) print_sint((signed word) print_sint::w)
print_sint: scope:[print_sint]  from print_mulf8s127::@5
  [76] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1
  to:print_sint::@3
print_sint::@3: scope:[print_sint]  from print_sint
  [77] phi()
  [78] call print_char 
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@3 print_sint::@4
  [79] (signed word) print_sint::w#4 ← phi( print_sint::@4/(signed word) print_sint::w#0 print_sint::@3/(signed word) print_sint::w#1 )
  [80] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#4
  [81] call print_uint 
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@2
  [82] return 
  to:@return
print_sint::@1: scope:[print_sint]  from print_sint
  [83] phi()
  [84] call print_char 
  to:print_sint::@4
print_sint::@4: scope:[print_sint]  from print_sint::@1
  [85] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#1
  to:print_sint::@2

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_mulf8s127::@2 print_mulf8s127::@4 print_mulf8u127::@2 print_mulf8u127::@4 print_s8::@1 print_s8::@3 print_sint::@1 print_sint::@3 print_u8 print_u8::@1
  [86] (byte*) print_char_cursor#80 ← phi( print_mulf8s127::@2/(byte*) print_char_cursor#19 print_mulf8s127::@4/(byte*) print_char_cursor#19 print_mulf8u127::@2/(byte*) print_char_cursor#19 print_mulf8u127::@4/(byte*) print_char_cursor#19 print_s8::@1/(byte*) print_char_cursor#127 print_s8::@3/(byte*) print_char_cursor#127 print_sint::@1/(byte*) print_char_cursor#19 print_sint::@3/(byte*) print_char_cursor#19 print_u8/(byte*) print_char_cursor#131 print_u8::@1/(byte*) print_char_cursor#19 )
  [86] (byte) print_char::ch#10 ← phi( print_mulf8s127::@2/(byte) '*' print_mulf8s127::@4/(byte) '=' print_mulf8u127::@2/(byte) '*' print_mulf8u127::@4/(byte) '=' print_s8::@1/(byte) '-' print_s8::@3/(byte) ' ' print_sint::@1/(byte) '-' print_sint::@3/(byte) ' ' print_u8/(byte) print_char::ch#4 print_u8::@1/(byte) print_char::ch#5 )
  [87] *((byte*) print_char_cursor#80) ← (byte) print_char::ch#10
  [88] (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#80
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [89] return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from print_mulf8u127::@5 print_sint::@2
  [90] (word) print_uint::w#2 ← phi( print_mulf8u127::@5/(word) print_uint::w#1 print_sint::@2/(word) print_uint::w#0 )
  [91] (byte) print_u8::b#1 ← > (word) print_uint::w#2
  [92] call print_u8 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [93] (byte) print_u8::b#2 ← < (word) print_uint::w#2
  [94] call print_u8 
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [95] return 
  to:@return

(void()) print_u8((byte) print_u8::b)
print_u8: scope:[print_u8]  from print_mulf8u127::@1 print_mulf8u127::@3 print_s8::@2 print_uint print_uint::@1
  [96] (byte*) print_char_cursor#131 ← phi( print_mulf8u127::@1/(byte*) print_char_cursor#150 print_mulf8u127::@3/(byte*) print_char_cursor#19 print_s8::@2/(byte*) print_char_cursor#19 print_uint/(byte*) print_char_cursor#19 print_uint::@1/(byte*) print_char_cursor#19 )
  [96] (byte) print_u8::b#5 ← phi( print_mulf8u127::@1/(byte) print_u8::b#3 print_mulf8u127::@3/(byte) print_u8::b#4 print_s8::@2/(byte) print_u8::b#0 print_uint/(byte) print_u8::b#1 print_uint::@1/(byte) print_u8::b#2 )
  [97] (byte~) print_u8::$0 ← (byte) print_u8::b#5 >> (byte) 4
  [98] (byte) print_char::ch#4 ← *((const to_nomodify byte*) print_hextab + (byte~) print_u8::$0)
  [99] call print_char 
  to:print_u8::@1
print_u8::@1: scope:[print_u8]  from print_u8
  [100] (byte~) print_u8::$2 ← (byte) print_u8::b#5 & (byte) $f
  [101] (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (byte~) print_u8::$2)
  [102] call print_char 
  to:print_u8::@return
print_u8::@return: scope:[print_u8]  from print_u8::@1
  [103] return 
  to:@return

(void()) print_s8((signed byte) print_s8::b)
print_s8: scope:[print_s8]  from print_mulf8s127::@1 print_mulf8s127::@3
  [104] (byte*) print_char_cursor#127 ← phi( print_mulf8s127::@1/(byte*) print_char_cursor#148 print_mulf8s127::@3/(byte*) print_char_cursor#19 )
  [104] (signed byte) print_s8::b#3 ← phi( print_mulf8s127::@1/(signed byte) print_s8::b#1 print_mulf8s127::@3/(signed byte) print_s8::b#2 )
  [105] if((signed byte) print_s8::b#3<(signed byte) 0) goto print_s8::@1
  to:print_s8::@3
print_s8::@3: scope:[print_s8]  from print_s8
  [106] phi()
  [107] call print_char 
  to:print_s8::@2
print_s8::@2: scope:[print_s8]  from print_s8::@3 print_s8::@4
  [108] (signed byte) print_s8::b#5 ← phi( print_s8::@4/(signed byte) print_s8::b#0 print_s8::@3/(signed byte) print_s8::b#3 )
  [109] (byte) print_u8::b#0 ← (byte)(signed byte) print_s8::b#5
  [110] call print_u8 
  to:print_s8::@return
print_s8::@return: scope:[print_s8]  from print_s8::@2
  [111] return 
  to:@return
print_s8::@1: scope:[print_s8]  from print_s8
  [112] phi()
  [113] call print_char 
  to:print_s8::@4
print_s8::@4: scope:[print_s8]  from print_s8::@1
  [114] (signed byte) print_s8::b#0 ← - (signed byte) print_s8::b#3
  to:print_s8::@2

(signed word()) mulf8s127((signed byte) mulf8s127::a , (signed byte) mulf8s127::b)
mulf8s127: scope:[mulf8s127]  from print_mulf8s127
  [115] (byte) mulf8u127::a#1 ← (byte)(signed byte) mulf8s127::a#0
  [116] (byte) mulf8u127::b#1 ← (byte)(signed byte) mulf8s127::b#0
  [117] call mulf8u127 
  [118] (word) mulf8u127::return#3 ← (word) mulf8u127::return#1
  to:mulf8s127::@7
mulf8s127::@7: scope:[mulf8s127]  from mulf8s127
  [119] (word) mulf8s127::c#0 ← (word) mulf8u127::return#3
  [120] if((signed byte) mulf8s127::a#0>=(signed byte) 0) goto mulf8s127::@9
  to:mulf8s127::@4
mulf8s127::@4: scope:[mulf8s127]  from mulf8s127::@7
  [121] (signed word~) mulf8s127::$12 ← (signed word)(signed byte) mulf8s127::b#0
  [122] (signed word~) mulf8s127::$13 ← (signed word~) mulf8s127::$12 << (byte) 1
  [123] (signed word) mulf8s127::c#1 ← (signed word)(word) mulf8s127::c#0 - (signed word~) mulf8s127::$13
  to:mulf8s127::@1
mulf8s127::@1: scope:[mulf8s127]  from mulf8s127::@4 mulf8s127::@9
  [124] (signed word) mulf8s127::c#5 ← phi( mulf8s127::@4/(signed word) mulf8s127::c#1 mulf8s127::@9/(signed word) mulf8s127::c#11 )
  [125] if((signed byte) mulf8s127::b#0>=(signed byte) 0) goto mulf8s127::@2
  to:mulf8s127::@5
mulf8s127::@5: scope:[mulf8s127]  from mulf8s127::@1
  [126] (signed word~) mulf8s127::$14 ← (signed word)(signed byte) mulf8s127::a#0
  [127] (signed word~) mulf8s127::$15 ← (signed word~) mulf8s127::$14 << (byte) 1
  [128] (signed word) mulf8s127::c#2 ← (signed word) mulf8s127::c#5 - (signed word~) mulf8s127::$15
  to:mulf8s127::@2
mulf8s127::@2: scope:[mulf8s127]  from mulf8s127::@1 mulf8s127::@5
  [129] (signed word) mulf8s127::c#7 ← phi( mulf8s127::@1/(signed word) mulf8s127::c#5 mulf8s127::@5/(signed word) mulf8s127::c#2 )
  [130] if((signed byte) mulf8s127::a#0>=(signed byte) 0) goto mulf8s127::@3
  to:mulf8s127::@8
mulf8s127::@8: scope:[mulf8s127]  from mulf8s127::@2
  [131] if((signed byte) mulf8s127::b#0>=(signed byte) 0) goto mulf8s127::@3
  to:mulf8s127::@6
mulf8s127::@6: scope:[mulf8s127]  from mulf8s127::@8
  [132] (signed word) mulf8s127::c#3 ← (signed word) mulf8s127::c#7 - (signed word) $200
  to:mulf8s127::@3
mulf8s127::@3: scope:[mulf8s127]  from mulf8s127::@2 mulf8s127::@6 mulf8s127::@8
  [133] (signed word) mulf8s127::return#1 ← phi( mulf8s127::@2/(signed word) mulf8s127::c#7 mulf8s127::@6/(signed word) mulf8s127::c#3 )
  to:mulf8s127::@return
mulf8s127::@return: scope:[mulf8s127]  from mulf8s127::@3
  [134] return 
  to:@return
mulf8s127::@9: scope:[mulf8s127]  from mulf8s127::@7
  [135] (signed word) mulf8s127::c#11 ← (signed word)(word) mulf8s127::c#0
  to:mulf8s127::@1

(word()) mulf8u127((byte) mulf8u127::a , (byte) mulf8u127::b)
mulf8u127: scope:[mulf8u127]  from mulf8s127 print_mulf8u127
  [136] (byte) mulf8u127::b#2 ← phi( mulf8s127/(byte) mulf8u127::b#1 print_mulf8u127/(byte) mulf8u127::b#0 )
  [136] (byte) mulf8u127::a#2 ← phi( mulf8s127/(byte) mulf8u127::a#1 print_mulf8u127/(byte) mulf8u127::a#0 )
  [137] *((const nomodify byte*) mulf8u127::memA) ← (byte) mulf8u127::a#2
  [138] *((const nomodify byte*) mulf8u127::memB) ← (byte) mulf8u127::b#2
  asm { ldamemA stasm1+1 stasm3+1 eor#$ff stasm2+1 stasm4+1 ldxmemB sec sm1: ldamulf127_sqr1_lo,x sm2: sbcmulf127_sqr2_lo,x staresL sm3: ldamulf127_sqr1_hi,x sm4: sbcmulf127_sqr2_hi,x staresH  }
  [140] (word) mulf8u127::return#1 ← *((const nomodify word*) mulf8u127::res)
  to:mulf8u127::@return
mulf8u127::@return: scope:[mulf8u127]  from mulf8u127
  [141] return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from main::@1 main::@11
  [142] (byte*) print_char_cursor#136 ← phi( main::@1/(byte*) 1024 main::@11/(byte*) print_char_cursor#141 )
  [142] (byte*) print_str::str#5 ← phi( main::@1/(const byte*) main::str main::@11/(const byte*) main::str1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [143] (byte*) print_char_cursor#122 ← phi( print_str/(byte*) print_char_cursor#136 print_str::@2/(byte*) print_char_cursor#1 )
  [143] (byte*) print_str::str#3 ← phi( print_str/(byte*) print_str::str#5 print_str::@2/(byte*) print_str::str#0 )
  [144] if((byte) 0!=*((byte*) print_str::str#3)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [145] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [146] *((byte*) print_char_cursor#122) ← *((byte*) print_str::str#3)
  [147] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#122
  [148] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3
  to:print_str::@1

(void()) print_mulf8u127((byte) print_mulf8u127::a , (byte) print_mulf8u127::b)
print_mulf8u127: scope:[print_mulf8u127]  from main::@10 main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@9
  [149] (byte) print_mulf8u127::b#10 ← phi( main::@10/(byte) $ff main::@3/(byte) 0 main::@4/(byte) $7f main::@5/(byte) $40 main::@6/(byte) $7f main::@7/(byte) $c0 main::@8/(byte) $7f main::@9/(byte) $c0 )
  [149] (byte) print_mulf8u127::a#8 ← phi( main::@10/(byte) $ff main::@3/(byte) 0 main::@4/(byte) $7f main::@5/(byte) $40 main::@6/(byte) $40 main::@7/(byte) $40 main::@8/(byte) $ff main::@9/(byte) $c0 )
  [150] (byte) mulf8u127::a#0 ← (byte) print_mulf8u127::a#8
  [151] (byte) mulf8u127::b#0 ← (byte) print_mulf8u127::b#10
  [152] call mulf8u127 
  [153] (word) mulf8u127::return#0 ← (word) mulf8u127::return#1
  to:print_mulf8u127::@1
print_mulf8u127::@1: scope:[print_mulf8u127]  from print_mulf8u127
  [154] (word) print_mulf8u127::c#0 ← (word) mulf8u127::return#0
  [155] (byte) print_u8::b#3 ← (byte) print_mulf8u127::a#8
  [156] (byte*) print_char_cursor#150 ← (byte*) print_line_cursor#1
  [157] call print_u8 
  to:print_mulf8u127::@2
print_mulf8u127::@2: scope:[print_mulf8u127]  from print_mulf8u127::@1
  [158] phi()
  [159] call print_char 
  to:print_mulf8u127::@3
print_mulf8u127::@3: scope:[print_mulf8u127]  from print_mulf8u127::@2
  [160] (byte) print_u8::b#4 ← (byte) print_mulf8u127::b#10
  [161] call print_u8 
  to:print_mulf8u127::@4
print_mulf8u127::@4: scope:[print_mulf8u127]  from print_mulf8u127::@3
  [162] phi()
  [163] call print_char 
  to:print_mulf8u127::@5
print_mulf8u127::@5: scope:[print_mulf8u127]  from print_mulf8u127::@4
  [164] (word) print_uint::w#1 ← (word) print_mulf8u127::c#0
  [165] call print_uint 
  to:print_mulf8u127::@6
print_mulf8u127::@6: scope:[print_mulf8u127]  from print_mulf8u127::@5
  [166] phi()
  [167] call print_ln 
  to:print_mulf8u127::@return
print_mulf8u127::@return: scope:[print_mulf8u127]  from print_mulf8u127::@6
  [168] return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [169] phi()
  [170] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [171] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [172] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [173] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [174] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [175] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [176] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [177] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1


VARIABLE REGISTER WEIGHTS
(void()) main()
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte*) memset::dst
(byte*) memset::dst#1 20002.0
(byte*) memset::dst#2 13334.666666666666
(byte*) memset::end
(word) memset::num
(void*) memset::return
(void*) memset::str
(signed word()) mulf8s127((signed byte) mulf8s127::a , (signed byte) mulf8s127::b)
(signed word~) mulf8s127::$12 2002.0
(signed word~) mulf8s127::$13 2002.0
(signed word~) mulf8s127::$14 2002.0
(signed word~) mulf8s127::$15 2002.0
(signed byte) mulf8s127::a
(signed byte) mulf8s127::a#0 116.83333333333334
(signed byte) mulf8s127::b
(signed byte) mulf8s127::b#0 116.83333333333334
(signed word) mulf8s127::c
(word) mulf8s127::c#0 250.25
(signed word) mulf8s127::c#1 2002.0
(signed word) mulf8s127::c#11 2002.0
(signed word) mulf8s127::c#2 2002.0
(signed word) mulf8s127::c#3 2002.0
(signed word) mulf8s127::c#5 1001.0
(signed word) mulf8s127::c#7 1334.6666666666667
(signed word) mulf8s127::return
(signed word) mulf8s127::return#0 202.0
(signed word) mulf8s127::return#1 701.0
(word()) mulf8u127((byte) mulf8u127::a , (byte) mulf8u127::b)
(byte) mulf8u127::a
(byte) mulf8u127::a#0 101.0
(byte) mulf8u127::a#1 1001.0
(byte) mulf8u127::a#2 11103.0
(byte) mulf8u127::b
(byte) mulf8u127::b#0 202.0
(byte) mulf8u127::b#1 2002.0
(byte) mulf8u127::b#2 5551.5
(word) mulf8u127::return
(word) mulf8u127::return#0 202.0
(word) mulf8u127::return#1 2775.75
(word) mulf8u127::return#3 2002.0
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#10 1200003.0
(byte) print_char::ch#4 200002.0
(byte) print_char::ch#5 200002.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 1001.0
(byte*) print_char_cursor#122 390.75
(byte*) print_char_cursor#123 2556.25
(byte*) print_char_cursor#127 551.0
(byte*) print_char_cursor#131 40401.999999999985
(byte*) print_char_cursor#136 112.0
(byte*) print_char_cursor#141 22.0
(byte*) print_char_cursor#148 202.0
(byte*) print_char_cursor#150 202.0
(byte*) print_char_cursor#19 22476.300000000003
(byte*) print_char_cursor#80 1102206.0
(void()) print_cls()
(byte*) print_line_cursor
(byte*) print_line_cursor#1 366.6144578313253
(byte*) print_line_cursor#32 21003.0
(byte*) print_line_cursor#63 1214.0
(void()) print_ln()
(void()) print_mulf8s127((signed byte) print_mulf8s127::a , (signed byte) print_mulf8s127::b)
(signed byte) print_mulf8s127::a
(signed byte) print_mulf8s127::a#10 33.666666666666664
(signed byte) print_mulf8s127::b
(signed byte) print_mulf8s127::b#10 18.363636363636363
(signed word) print_mulf8s127::c
(signed word) print_mulf8s127::c#0 20.2
(void()) print_mulf8u127((byte) print_mulf8u127::a , (byte) print_mulf8u127::b)
(byte) print_mulf8u127::a
(byte) print_mulf8u127::a#8 33.666666666666664
(byte) print_mulf8u127::b
(byte) print_mulf8u127::b#10 18.363636363636363
(word) print_mulf8u127::c
(word) print_mulf8u127::c#0 20.2
(void()) print_s8((signed byte) print_s8::b)
(signed byte) print_s8::b
(signed byte) print_s8::b#0 2002.0
(signed byte) print_s8::b#1 101.0
(signed byte) print_s8::b#2 202.0
(signed byte) print_s8::b#3 534.1666666666667
(signed byte) print_s8::b#5 2002.0
(byte*) print_screen
(void()) print_sint((signed word) print_sint::w)
(signed word) print_sint::w
(signed word) print_sint::w#0 2002.0
(signed word) print_sint::w#1 517.3333333333334
(signed word) print_sint::w#4 2002.0
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 2002.0
(byte*) print_str::str#3 1026.25
(byte*) print_str::str#5 101.0
(void()) print_u8((byte) print_u8::b)
(byte~) print_u8::$0 200002.0
(byte~) print_u8::$2 200002.0
(byte) print_u8::b
(byte) print_u8::b#0 2002.0
(byte) print_u8::b#1 20002.0
(byte) print_u8::b#2 20002.0
(byte) print_u8::b#3 101.0
(byte) print_u8::b#4 202.0
(byte) print_u8::b#5 55301.75
(void()) print_uint((word) print_uint::w)
(word) print_uint::w
(word) print_uint::w#0 2002.0
(word) print_uint::w#1 202.0
(word) print_uint::w#2 7034.666666666666

Initial phi equivalence classes
[ print_mulf8s127::a#10 ]
[ print_mulf8s127::b#10 ]
[ print_line_cursor#32 print_line_cursor#63 print_line_cursor#1 ]
[ print_sint::w#4 print_sint::w#0 print_sint::w#1 ]
[ print_char::ch#10 print_char::ch#4 print_char::ch#5 ]
[ print_char_cursor#80 print_char_cursor#123 print_char_cursor#122 print_char_cursor#19 print_char_cursor#127 print_char_cursor#131 print_char_cursor#150 print_char_cursor#148 print_char_cursor#136 print_char_cursor#141 print_char_cursor#1 ]
[ print_uint::w#2 print_uint::w#1 print_uint::w#0 ]
[ print_u8::b#5 print_u8::b#3 print_u8::b#4 print_u8::b#0 print_u8::b#1 print_u8::b#2 ]
[ print_s8::b#5 print_s8::b#0 print_s8::b#3 print_s8::b#1 print_s8::b#2 ]
[ mulf8s127::return#1 mulf8s127::c#7 mulf8s127::c#5 mulf8s127::c#1 mulf8s127::c#11 mulf8s127::c#2 mulf8s127::c#3 ]
[ mulf8u127::a#2 mulf8u127::a#1 mulf8u127::a#0 ]
[ mulf8u127::b#2 mulf8u127::b#1 mulf8u127::b#0 ]
[ print_str::str#3 print_str::str#5 print_str::str#0 ]
[ print_mulf8u127::a#8 ]
[ print_mulf8u127::b#10 ]
[ memset::dst#2 memset::dst#1 ]
Added variable mulf8s127::a#0 to live range equivalence class [ mulf8s127::a#0 ]
Added variable mulf8s127::b#0 to live range equivalence class [ mulf8s127::b#0 ]
Added variable mulf8s127::return#0 to live range equivalence class [ mulf8s127::return#0 ]
Added variable print_mulf8s127::c#0 to live range equivalence class [ print_mulf8s127::c#0 ]
Added variable print_u8::$0 to live range equivalence class [ print_u8::$0 ]
Added variable print_u8::$2 to live range equivalence class [ print_u8::$2 ]
Added variable mulf8u127::return#3 to live range equivalence class [ mulf8u127::return#3 ]
Added variable mulf8s127::c#0 to live range equivalence class [ mulf8s127::c#0 ]
Added variable mulf8s127::$12 to live range equivalence class [ mulf8s127::$12 ]
Added variable mulf8s127::$13 to live range equivalence class [ mulf8s127::$13 ]
Added variable mulf8s127::$14 to live range equivalence class [ mulf8s127::$14 ]
Added variable mulf8s127::$15 to live range equivalence class [ mulf8s127::$15 ]
Added variable mulf8u127::return#1 to live range equivalence class [ mulf8u127::return#1 ]
Added variable mulf8u127::return#0 to live range equivalence class [ mulf8u127::return#0 ]
Added variable print_mulf8u127::c#0 to live range equivalence class [ print_mulf8u127::c#0 ]
Complete equivalence classes
[ print_mulf8s127::a#10 ]
[ print_mulf8s127::b#10 ]
[ print_line_cursor#32 print_line_cursor#63 print_line_cursor#1 ]
[ print_sint::w#4 print_sint::w#0 print_sint::w#1 ]
[ print_char::ch#10 print_char::ch#4 print_char::ch#5 ]
[ print_char_cursor#80 print_char_cursor#123 print_char_cursor#122 print_char_cursor#19 print_char_cursor#127 print_char_cursor#131 print_char_cursor#150 print_char_cursor#148 print_char_cursor#136 print_char_cursor#141 print_char_cursor#1 ]
[ print_uint::w#2 print_uint::w#1 print_uint::w#0 ]
[ print_u8::b#5 print_u8::b#3 print_u8::b#4 print_u8::b#0 print_u8::b#1 print_u8::b#2 ]
[ print_s8::b#5 print_s8::b#0 print_s8::b#3 print_s8::b#1 print_s8::b#2 ]
[ mulf8s127::return#1 mulf8s127::c#7 mulf8s127::c#5 mulf8s127::c#1 mulf8s127::c#11 mulf8s127::c#2 mulf8s127::c#3 ]
[ mulf8u127::a#2 mulf8u127::a#1 mulf8u127::a#0 ]
[ mulf8u127::b#2 mulf8u127::b#1 mulf8u127::b#0 ]
[ print_str::str#3 print_str::str#5 print_str::str#0 ]
[ print_mulf8u127::a#8 ]
[ print_mulf8u127::b#10 ]
[ memset::dst#2 memset::dst#1 ]
[ mulf8s127::a#0 ]
[ mulf8s127::b#0 ]
[ mulf8s127::return#0 ]
[ print_mulf8s127::c#0 ]
[ print_u8::$0 ]
[ print_u8::$2 ]
[ mulf8u127::return#3 ]
[ mulf8s127::c#0 ]
[ mulf8s127::$12 ]
[ mulf8s127::$13 ]
[ mulf8s127::$14 ]
[ mulf8s127::$15 ]
[ mulf8u127::return#1 ]
[ mulf8u127::return#0 ]
[ print_mulf8u127::c#0 ]
Allocated zp[1]:2 [ print_mulf8s127::a#10 ]
Allocated zp[1]:3 [ print_mulf8s127::b#10 ]
Allocated zp[2]:4 [ print_line_cursor#32 print_line_cursor#63 print_line_cursor#1 ]
Allocated zp[2]:6 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ]
Allocated zp[1]:8 [ print_char::ch#10 print_char::ch#4 print_char::ch#5 ]
Allocated zp[2]:9 [ print_char_cursor#80 print_char_cursor#123 print_char_cursor#122 print_char_cursor#19 print_char_cursor#127 print_char_cursor#131 print_char_cursor#150 print_char_cursor#148 print_char_cursor#136 print_char_cursor#141 print_char_cursor#1 ]
Allocated zp[2]:11 [ print_uint::w#2 print_uint::w#1 print_uint::w#0 ]
Allocated zp[1]:13 [ print_u8::b#5 print_u8::b#3 print_u8::b#4 print_u8::b#0 print_u8::b#1 print_u8::b#2 ]
Allocated zp[1]:14 [ print_s8::b#5 print_s8::b#0 print_s8::b#3 print_s8::b#1 print_s8::b#2 ]
Allocated zp[2]:15 [ mulf8s127::return#1 mulf8s127::c#7 mulf8s127::c#5 mulf8s127::c#1 mulf8s127::c#11 mulf8s127::c#2 mulf8s127::c#3 ]
Allocated zp[1]:17 [ mulf8u127::a#2 mulf8u127::a#1 mulf8u127::a#0 ]
Allocated zp[1]:18 [ mulf8u127::b#2 mulf8u127::b#1 mulf8u127::b#0 ]
Allocated zp[2]:19 [ print_str::str#3 print_str::str#5 print_str::str#0 ]
Allocated zp[1]:21 [ print_mulf8u127::a#8 ]
Allocated zp[1]:22 [ print_mulf8u127::b#10 ]
Allocated zp[2]:23 [ memset::dst#2 memset::dst#1 ]
Allocated zp[1]:25 [ mulf8s127::a#0 ]
Allocated zp[1]:26 [ mulf8s127::b#0 ]
Allocated zp[2]:27 [ mulf8s127::return#0 ]
Allocated zp[2]:29 [ print_mulf8s127::c#0 ]
Allocated zp[1]:31 [ print_u8::$0 ]
Allocated zp[1]:32 [ print_u8::$2 ]
Allocated zp[2]:33 [ mulf8u127::return#3 ]
Allocated zp[2]:35 [ mulf8s127::c#0 ]
Allocated zp[2]:37 [ mulf8s127::$12 ]
Allocated zp[2]:39 [ mulf8s127::$13 ]
Allocated zp[2]:41 [ mulf8s127::$14 ]
Allocated zp[2]:43 [ mulf8s127::$15 ]
Allocated zp[2]:45 [ mulf8u127::return#1 ]
Allocated zp[2]:47 [ mulf8u127::return#0 ]
Allocated zp[2]:49 [ print_mulf8u127::c#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// An implementation of seriously fast multiply for integer values in the interval [-1;1] with the best possible precision
// NOTE: So far unsuccessful - since the handling of sign and values where a+b>sqrt2) makes the code slower than regular fast multiply
// In this model 255 binary represents 1.0 - meaning that 255*255 = 255
// Uses principles from C=Hacking #16 https://codebase64.org/doku.php?id=magazines:chacking16
// Utilizes the fact that a*b = ((a+b)/2)^2 - ((a-b)/2)^2
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_char_cursor = 9
  .label print_line_cursor = 4
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] call print_cls 
    // [169] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [7] call print_str 
    // [142] phi from main::@1 to print_str [phi:main::@1->print_str]
  print_str_from___b1:
    // [142] phi (byte*) print_char_cursor#136 = (byte*) 1024 [phi:main::@1->print_str#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [142] phi (byte*) print_str::str#5 = (const byte*) main::str [phi:main::@1->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [9] call print_ln 
    // [71] phi from main::@2 to print_ln [phi:main::@2->print_ln]
  print_ln_from___b2:
    // [71] phi (byte*) print_char_cursor#123 = (byte*) print_char_cursor#122 [phi:main::@2->print_ln#0] -- register_copy 
    // [71] phi (byte*) print_line_cursor#63 = (byte*) 1024 [phi:main::@2->print_ln#1] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    jsr print_ln
    // [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [11] call print_mulf8u127 
    // [149] phi from main::@3 to print_mulf8u127 [phi:main::@3->print_mulf8u127]
  print_mulf8u127_from___b3:
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) 0 [phi:main::@3->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #0
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) 0 [phi:main::@3->print_mulf8u127#1] -- vbuz1=vbuc1 
    lda #0
    sta.z print_mulf8u127.a
    jsr print_mulf8u127
    // [12] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [13] call print_mulf8u127 
    // [149] phi from main::@4 to print_mulf8u127 [phi:main::@4->print_mulf8u127]
  print_mulf8u127_from___b4:
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) $7f [phi:main::@4->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #$7f
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) $7f [phi:main::@4->print_mulf8u127#1] -- vbuz1=vbuc1 
    lda #$7f
    sta.z print_mulf8u127.a
    jsr print_mulf8u127
    // [14] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [15] call print_mulf8u127 
    // [149] phi from main::@5 to print_mulf8u127 [phi:main::@5->print_mulf8u127]
  print_mulf8u127_from___b5:
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) $40 [phi:main::@5->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #$40
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) $40 [phi:main::@5->print_mulf8u127#1] -- vbuz1=vbuc1 
    lda #$40
    sta.z print_mulf8u127.a
    jsr print_mulf8u127
    // [16] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [17] call print_mulf8u127 
    // [149] phi from main::@6 to print_mulf8u127 [phi:main::@6->print_mulf8u127]
  print_mulf8u127_from___b6:
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) $7f [phi:main::@6->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #$7f
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) $40 [phi:main::@6->print_mulf8u127#1] -- vbuz1=vbuc1 
    lda #$40
    sta.z print_mulf8u127.a
    jsr print_mulf8u127
    // [18] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  __b7_from___b6:
    jmp __b7
    // main::@7
  __b7:
    // [19] call print_mulf8u127 
    // [149] phi from main::@7 to print_mulf8u127 [phi:main::@7->print_mulf8u127]
  print_mulf8u127_from___b7:
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) $c0 [phi:main::@7->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #$c0
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) $40 [phi:main::@7->print_mulf8u127#1] -- vbuz1=vbuc1 
    lda #$40
    sta.z print_mulf8u127.a
    jsr print_mulf8u127
    // [20] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  __b8_from___b7:
    jmp __b8
    // main::@8
  __b8:
    // [21] call print_mulf8u127 
    // [149] phi from main::@8 to print_mulf8u127 [phi:main::@8->print_mulf8u127]
  print_mulf8u127_from___b8:
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) $7f [phi:main::@8->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #$7f
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) $ff [phi:main::@8->print_mulf8u127#1] -- vbuz1=vbuc1 
    lda #$ff
    sta.z print_mulf8u127.a
    jsr print_mulf8u127
    // [22] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  __b9_from___b8:
    jmp __b9
    // main::@9
  __b9:
    // [23] call print_mulf8u127 
    // [149] phi from main::@9 to print_mulf8u127 [phi:main::@9->print_mulf8u127]
  print_mulf8u127_from___b9:
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) $c0 [phi:main::@9->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #$c0
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) $c0 [phi:main::@9->print_mulf8u127#1] -- vbuz1=vbuc1 
    lda #$c0
    sta.z print_mulf8u127.a
    jsr print_mulf8u127
    // [24] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  __b10_from___b9:
    jmp __b10
    // main::@10
  __b10:
    // [25] call print_mulf8u127 
    // [149] phi from main::@10 to print_mulf8u127 [phi:main::@10->print_mulf8u127]
  print_mulf8u127_from___b10:
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) $ff [phi:main::@10->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) $ff [phi:main::@10->print_mulf8u127#1] -- vbuz1=vbuc1 
    lda #$ff
    sta.z print_mulf8u127.a
    jsr print_mulf8u127
    jmp __b11
    // main::@11
  __b11:
    // [26] (byte*) print_char_cursor#141 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [27] call print_str 
    // [142] phi from main::@11 to print_str [phi:main::@11->print_str]
  print_str_from___b11:
    // [142] phi (byte*) print_char_cursor#136 = (byte*) print_char_cursor#141 [phi:main::@11->print_str#0] -- register_copy 
    // [142] phi (byte*) print_str::str#5 = (const byte*) main::str1 [phi:main::@11->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // [28] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  __b12_from___b11:
    jmp __b12
    // main::@12
  __b12:
    // [29] call print_ln 
    // [71] phi from main::@12 to print_ln [phi:main::@12->print_ln]
  print_ln_from___b12:
    // [71] phi (byte*) print_char_cursor#123 = (byte*) print_char_cursor#122 [phi:main::@12->print_ln#0] -- register_copy 
    // [71] phi (byte*) print_line_cursor#63 = (byte*) print_line_cursor#1 [phi:main::@12->print_ln#1] -- register_copy 
    jsr print_ln
    // [30] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  __b13_from___b12:
    jmp __b13
    // main::@13
  __b13:
    // [31] call print_mulf8s127 
    // [51] phi from main::@13 to print_mulf8s127 [phi:main::@13->print_mulf8s127]
  print_mulf8s127_from___b13:
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) 0 [phi:main::@13->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #0
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) 0 [phi:main::@13->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #0
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [32] phi from main::@13 to main::@14 [phi:main::@13->main::@14]
  __b14_from___b13:
    jmp __b14
    // main::@14
  __b14:
    // [33] call print_mulf8s127 
    // [51] phi from main::@14 to print_mulf8s127 [phi:main::@14->print_mulf8s127]
  print_mulf8s127_from___b14:
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) $40 [phi:main::@14->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #$40
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) $40 [phi:main::@14->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #$40
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [34] phi from main::@14 to main::@15 [phi:main::@14->main::@15]
  __b15_from___b14:
    jmp __b15
    // main::@15
  __b15:
    // [35] call print_mulf8s127 
    // [51] phi from main::@15 to print_mulf8s127 [phi:main::@15->print_mulf8s127]
  print_mulf8s127_from___b15:
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) $7f [phi:main::@15->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #$7f
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) $40 [phi:main::@15->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #$40
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [36] phi from main::@15 to main::@16 [phi:main::@15->main::@16]
  __b16_from___b15:
    jmp __b16
    // main::@16
  __b16:
    // [37] call print_mulf8s127 
    // [51] phi from main::@16 to print_mulf8s127 [phi:main::@16->print_mulf8s127]
  print_mulf8s127_from___b16:
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) $40 [phi:main::@16->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #$40
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) -$40 [phi:main::@16->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #-$40
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [38] phi from main::@16 to main::@17 [phi:main::@16->main::@17]
  __b17_from___b16:
    jmp __b17
    // main::@17
  __b17:
    // [39] call print_mulf8s127 
    // [51] phi from main::@17 to print_mulf8s127 [phi:main::@17->print_mulf8s127]
  print_mulf8s127_from___b17:
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) -$40 [phi:main::@17->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #-$40
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) $40 [phi:main::@17->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #$40
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [40] phi from main::@17 to main::@18 [phi:main::@17->main::@18]
  __b18_from___b17:
    jmp __b18
    // main::@18
  __b18:
    // [41] call print_mulf8s127 
    // [51] phi from main::@18 to print_mulf8s127 [phi:main::@18->print_mulf8s127]
  print_mulf8s127_from___b18:
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) -$40 [phi:main::@18->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #-$40
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) -$40 [phi:main::@18->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #-$40
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [42] phi from main::@18 to main::@19 [phi:main::@18->main::@19]
  __b19_from___b18:
    jmp __b19
    // main::@19
  __b19:
    // [43] call print_mulf8s127 
    // [51] phi from main::@19 to print_mulf8s127 [phi:main::@19->print_mulf8s127]
  print_mulf8s127_from___b19:
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) $7f [phi:main::@19->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #$7f
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) $7f [phi:main::@19->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #$7f
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [44] phi from main::@19 to main::@20 [phi:main::@19->main::@20]
  __b20_from___b19:
    jmp __b20
    // main::@20
  __b20:
    // [45] call print_mulf8s127 
    // [51] phi from main::@20 to print_mulf8s127 [phi:main::@20->print_mulf8s127]
  print_mulf8s127_from___b20:
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) $7f [phi:main::@20->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #$7f
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) -$7f [phi:main::@20->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #-$7f
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [46] phi from main::@20 to main::@21 [phi:main::@20->main::@21]
  __b21_from___b20:
    jmp __b21
    // main::@21
  __b21:
    // [47] call print_mulf8s127 
    // [51] phi from main::@21 to print_mulf8s127 [phi:main::@21->print_mulf8s127]
  print_mulf8s127_from___b21:
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) -$7f [phi:main::@21->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #-$7f
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) $7f [phi:main::@21->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #$7f
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [48] phi from main::@21 to main::@22 [phi:main::@21->main::@22]
  __b22_from___b21:
    jmp __b22
    // main::@22
  __b22:
    // [49] call print_mulf8s127 
    // [51] phi from main::@22 to print_mulf8s127 [phi:main::@22->print_mulf8s127]
  print_mulf8s127_from___b22:
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) -$7f [phi:main::@22->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #-$7f
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) -$7f [phi:main::@22->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #-$7f
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    jmp __breturn
    // main::@return
  __breturn:
    // [50] return 
    rts
    str: .text "unsigned"
    .byte 0
    str1: .text "signed"
    .byte 0
}
  // print_mulf8s127
// print_mulf8s127(signed byte zp(2) a, signed byte zp(3) b)
print_mulf8s127: {
    .label c = $1d
    .label a = 2
    .label b = 3
    // [52] (signed byte) mulf8s127::a#0 ← (signed byte) print_mulf8s127::a#10 -- vbsz1=vbsz2 
    lda.z a
    sta.z mulf8s127.a
    // [53] (signed byte) mulf8s127::b#0 ← (signed byte) print_mulf8s127::b#10 -- vbsz1=vbsz2 
    lda.z b
    sta.z mulf8s127.b
    // [54] call mulf8s127 
    jsr mulf8s127
    // [55] (signed word) mulf8s127::return#0 ← (signed word) mulf8s127::return#1 -- vwsz1=vwsz2 
    lda.z mulf8s127.return_1
    sta.z mulf8s127.return
    lda.z mulf8s127.return_1+1
    sta.z mulf8s127.return+1
    jmp __b1
    // print_mulf8s127::@1
  __b1:
    // [56] (signed word) print_mulf8s127::c#0 ← (signed word) mulf8s127::return#0 -- vwsz1=vwsz2 
    lda.z mulf8s127.return
    sta.z c
    lda.z mulf8s127.return+1
    sta.z c+1
    // [57] (signed byte) print_s8::b#1 ← (signed byte) print_mulf8s127::a#10 -- vbsz1=vbsz2 
    lda.z a
    sta.z print_s8.b
    // [58] (byte*) print_char_cursor#148 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [59] call print_s8 
    // [104] phi from print_mulf8s127::@1 to print_s8 [phi:print_mulf8s127::@1->print_s8]
  print_s8_from___b1:
    // [104] phi (byte*) print_char_cursor#127 = (byte*) print_char_cursor#148 [phi:print_mulf8s127::@1->print_s8#0] -- register_copy 
    // [104] phi (signed byte) print_s8::b#3 = (signed byte) print_s8::b#1 [phi:print_mulf8s127::@1->print_s8#1] -- register_copy 
    jsr print_s8
    // [60] phi from print_mulf8s127::@1 to print_mulf8s127::@2 [phi:print_mulf8s127::@1->print_mulf8s127::@2]
  __b2_from___b1:
    jmp __b2
    // print_mulf8s127::@2
  __b2:
    // [61] call print_char 
    // [86] phi from print_mulf8s127::@2 to print_char [phi:print_mulf8s127::@2->print_char]
  print_char_from___b2:
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#19 [phi:print_mulf8s127::@2->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) '*' [phi:print_mulf8s127::@2->print_char#1] -- vbuz1=vbuc1 
    lda #'*'
    sta.z print_char.ch
    jsr print_char
    jmp __b3
    // print_mulf8s127::@3
  __b3:
    // [62] (signed byte) print_s8::b#2 ← (signed byte) print_mulf8s127::b#10 -- vbsz1=vbsz2 
    lda.z b
    sta.z print_s8.b
    // [63] call print_s8 
    // [104] phi from print_mulf8s127::@3 to print_s8 [phi:print_mulf8s127::@3->print_s8]
  print_s8_from___b3:
    // [104] phi (byte*) print_char_cursor#127 = (byte*) print_char_cursor#19 [phi:print_mulf8s127::@3->print_s8#0] -- register_copy 
    // [104] phi (signed byte) print_s8::b#3 = (signed byte) print_s8::b#2 [phi:print_mulf8s127::@3->print_s8#1] -- register_copy 
    jsr print_s8
    // [64] phi from print_mulf8s127::@3 to print_mulf8s127::@4 [phi:print_mulf8s127::@3->print_mulf8s127::@4]
  __b4_from___b3:
    jmp __b4
    // print_mulf8s127::@4
  __b4:
    // [65] call print_char 
    // [86] phi from print_mulf8s127::@4 to print_char [phi:print_mulf8s127::@4->print_char]
  print_char_from___b4:
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#19 [phi:print_mulf8s127::@4->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) '=' [phi:print_mulf8s127::@4->print_char#1] -- vbuz1=vbuc1 
    lda #'='
    sta.z print_char.ch
    jsr print_char
    jmp __b5
    // print_mulf8s127::@5
  __b5:
    // [66] (signed word) print_sint::w#1 ← (signed word) print_mulf8s127::c#0 -- vwsz1=vwsz2 
    lda.z c
    sta.z print_sint.w
    lda.z c+1
    sta.z print_sint.w+1
    // [67] call print_sint 
    jsr print_sint
    // [68] phi from print_mulf8s127::@5 to print_mulf8s127::@6 [phi:print_mulf8s127::@5->print_mulf8s127::@6]
  __b6_from___b5:
    jmp __b6
    // print_mulf8s127::@6
  __b6:
    // [69] call print_ln 
    // [71] phi from print_mulf8s127::@6 to print_ln [phi:print_mulf8s127::@6->print_ln]
  print_ln_from___b6:
    // [71] phi (byte*) print_char_cursor#123 = (byte*) print_char_cursor#19 [phi:print_mulf8s127::@6->print_ln#0] -- register_copy 
    // [71] phi (byte*) print_line_cursor#63 = (byte*) print_line_cursor#1 [phi:print_mulf8s127::@6->print_ln#1] -- register_copy 
    jsr print_ln
    jmp __breturn
    // print_mulf8s127::@return
  __breturn:
    // [70] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [72] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [72] phi (byte*) print_line_cursor#32 = (byte*) print_line_cursor#63 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [73] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#32 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [74] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#123) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [75] return 
    rts
}
  // print_sint
// Print a signed int as HEX
// print_sint(signed word zp(6) w)
print_sint: {
    .label w = 6
    // [76] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1_from_print_sint
    // [77] phi from print_sint to print_sint::@3 [phi:print_sint->print_sint::@3]
  __b3_from_print_sint:
    jmp __b3
    // print_sint::@3
  __b3:
    // [78] call print_char 
    // [86] phi from print_sint::@3 to print_char [phi:print_sint::@3->print_char]
  print_char_from___b3:
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#19 [phi:print_sint::@3->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) ' ' [phi:print_sint::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    // [79] phi from print_sint::@3 print_sint::@4 to print_sint::@2 [phi:print_sint::@3/print_sint::@4->print_sint::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [79] phi (signed word) print_sint::w#4 = (signed word) print_sint::w#1 [phi:print_sint::@3/print_sint::@4->print_sint::@2#0] -- register_copy 
    jmp __b2
    // print_sint::@2
  __b2:
    // [80] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#4 -- vwuz1=vwuz2 
    lda.z w
    sta.z print_uint.w
    lda.z w+1
    sta.z print_uint.w+1
    // [81] call print_uint 
    // [90] phi from print_sint::@2 to print_uint [phi:print_sint::@2->print_uint]
  print_uint_from___b2:
    // [90] phi (word) print_uint::w#2 = (word) print_uint::w#0 [phi:print_sint::@2->print_uint#0] -- register_copy 
    jsr print_uint
    jmp __breturn
    // print_sint::@return
  __breturn:
    // [82] return 
    rts
    // [83] phi from print_sint to print_sint::@1 [phi:print_sint->print_sint::@1]
  __b1_from_print_sint:
    jmp __b1
    // print_sint::@1
  __b1:
    // [84] call print_char 
    // [86] phi from print_sint::@1 to print_char [phi:print_sint::@1->print_char]
  print_char_from___b1:
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#19 [phi:print_sint::@1->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) '-' [phi:print_sint::@1->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta.z print_char.ch
    jsr print_char
    jmp __b4
    // print_sint::@4
  __b4:
    // [85] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2_from___b4
}
  // print_char
// Print a single char
// print_char(byte zp(8) ch)
print_char: {
    .label ch = 8
    // [87] *((byte*) print_char_cursor#80) ← (byte) print_char::ch#10 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [88] (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#80 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [89] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp($b) w)
print_uint: {
    .label w = $b
    // [91] (byte) print_u8::b#1 ← > (word) print_uint::w#2 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z print_u8.b
    // [92] call print_u8 
    // [96] phi from print_uint to print_u8 [phi:print_uint->print_u8]
  print_u8_from_print_uint:
    // [96] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#19 [phi:print_uint->print_u8#0] -- register_copy 
    // [96] phi (byte) print_u8::b#5 = (byte) print_u8::b#1 [phi:print_uint->print_u8#1] -- register_copy 
    jsr print_u8
    jmp __b1
    // print_uint::@1
  __b1:
    // [93] (byte) print_u8::b#2 ← < (word) print_uint::w#2 -- vbuz1=_lo_vwuz2 
    lda.z w
    sta.z print_u8.b
    // [94] call print_u8 
    // [96] phi from print_uint::@1 to print_u8 [phi:print_uint::@1->print_u8]
  print_u8_from___b1:
    // [96] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#19 [phi:print_uint::@1->print_u8#0] -- register_copy 
    // [96] phi (byte) print_u8::b#5 = (byte) print_u8::b#2 [phi:print_uint::@1->print_u8#1] -- register_copy 
    jsr print_u8
    jmp __breturn
    // print_uint::@return
  __breturn:
    // [95] return 
    rts
}
  // print_u8
// Print a char as HEX
// print_u8(byte zp($d) b)
print_u8: {
    .label __0 = $1f
    .label __2 = $20
    .label b = $d
    // [97] (byte~) print_u8::$0 ← (byte) print_u8::b#5 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda.z b
    lsr
    lsr
    lsr
    lsr
    sta.z __0
    // [98] (byte) print_char::ch#4 ← *((const to_nomodify byte*) print_hextab + (byte~) print_u8::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __0
    lda print_hextab,y
    sta.z print_char.ch
    // [99] call print_char 
  // Table of hexadecimal digits
    // [86] phi from print_u8 to print_char [phi:print_u8->print_char]
  print_char_from_print_u8:
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#131 [phi:print_u8->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) print_char::ch#4 [phi:print_u8->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_u8::@1
  __b1:
    // [100] (byte~) print_u8::$2 ← (byte) print_u8::b#5 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z b
    sta.z __2
    // [101] (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (byte~) print_u8::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __2
    lda print_hextab,y
    sta.z print_char.ch
    // [102] call print_char 
    // [86] phi from print_u8::@1 to print_char [phi:print_u8::@1->print_char]
  print_char_from___b1:
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#19 [phi:print_u8::@1->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) print_char::ch#5 [phi:print_u8::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_u8::@return
  __breturn:
    // [103] return 
    rts
}
  // print_s8
// Print a signed char as HEX
// print_s8(signed byte zp($e) b)
print_s8: {
    .label b = $e
    // [105] if((signed byte) print_s8::b#3<(signed byte) 0) goto print_s8::@1 -- vbsz1_lt_0_then_la1 
    lda.z b
    bmi __b1_from_print_s8
    // [106] phi from print_s8 to print_s8::@3 [phi:print_s8->print_s8::@3]
  __b3_from_print_s8:
    jmp __b3
    // print_s8::@3
  __b3:
    // [107] call print_char 
    // [86] phi from print_s8::@3 to print_char [phi:print_s8::@3->print_char]
  print_char_from___b3:
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#127 [phi:print_s8::@3->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) ' ' [phi:print_s8::@3->print_char#1] -- vbuz1=vbuc1 
    lda #' '
    sta.z print_char.ch
    jsr print_char
    // [108] phi from print_s8::@3 print_s8::@4 to print_s8::@2 [phi:print_s8::@3/print_s8::@4->print_s8::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [108] phi (signed byte) print_s8::b#5 = (signed byte) print_s8::b#3 [phi:print_s8::@3/print_s8::@4->print_s8::@2#0] -- register_copy 
    jmp __b2
    // print_s8::@2
  __b2:
    // [109] (byte) print_u8::b#0 ← (byte)(signed byte) print_s8::b#5 -- vbuz1=vbuz2 
    lda.z b
    sta.z print_u8.b
    // [110] call print_u8 
    // [96] phi from print_s8::@2 to print_u8 [phi:print_s8::@2->print_u8]
  print_u8_from___b2:
    // [96] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#19 [phi:print_s8::@2->print_u8#0] -- register_copy 
    // [96] phi (byte) print_u8::b#5 = (byte) print_u8::b#0 [phi:print_s8::@2->print_u8#1] -- register_copy 
    jsr print_u8
    jmp __breturn
    // print_s8::@return
  __breturn:
    // [111] return 
    rts
    // [112] phi from print_s8 to print_s8::@1 [phi:print_s8->print_s8::@1]
  __b1_from_print_s8:
    jmp __b1
    // print_s8::@1
  __b1:
    // [113] call print_char 
    // [86] phi from print_s8::@1 to print_char [phi:print_s8::@1->print_char]
  print_char_from___b1:
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#127 [phi:print_s8::@1->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) '-' [phi:print_s8::@1->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta.z print_char.ch
    jsr print_char
    jmp __b4
    // print_s8::@4
  __b4:
    // [114] (signed byte) print_s8::b#0 ← - (signed byte) print_s8::b#3 -- vbsz1=_neg_vbsz1 
    lda.z b
    eor #$ff
    clc
    adc #1
    sta.z b
    jmp __b2_from___b4
}
  // mulf8s127
// mulf8s127(signed byte zp($19) a, signed byte zp($1a) b)
mulf8s127: {
    .label __12 = $25
    .label __13 = $27
    .label __14 = $29
    .label __15 = $2b
    .label a = $19
    .label b = $1a
    .label return = $1b
    .label c = $23
    .label c_1 = $f
    .label return_1 = $f
    // [115] (byte) mulf8u127::a#1 ← (byte)(signed byte) mulf8s127::a#0 -- vbuz1=vbuz2 
    lda.z a
    sta.z mulf8u127.a
    // [116] (byte) mulf8u127::b#1 ← (byte)(signed byte) mulf8s127::b#0 -- vbuz1=vbuz2 
    lda.z b
    sta.z mulf8u127.b
    // [117] call mulf8u127 
    // [136] phi from mulf8s127 to mulf8u127 [phi:mulf8s127->mulf8u127]
  mulf8u127_from_mulf8s127:
    // [136] phi (byte) mulf8u127::b#2 = (byte) mulf8u127::b#1 [phi:mulf8s127->mulf8u127#0] -- register_copy 
    // [136] phi (byte) mulf8u127::a#2 = (byte) mulf8u127::a#1 [phi:mulf8s127->mulf8u127#1] -- register_copy 
    jsr mulf8u127
    // [118] (word) mulf8u127::return#3 ← (word) mulf8u127::return#1 -- vwuz1=vwuz2 
    lda.z mulf8u127.return_1
    sta.z mulf8u127.return_2
    lda.z mulf8u127.return_1+1
    sta.z mulf8u127.return_2+1
    jmp __b7
    // mulf8s127::@7
  __b7:
    // [119] (word) mulf8s127::c#0 ← (word) mulf8u127::return#3 -- vwuz1=vwuz2 
    lda.z mulf8u127.return_2
    sta.z c
    lda.z mulf8u127.return_2+1
    sta.z c+1
    // [120] if((signed byte) mulf8s127::a#0>=(signed byte) 0) goto mulf8s127::@9 -- vbsz1_ge_0_then_la1 
    lda.z a
    cmp #0
    bpl __b9
    jmp __b4
    // mulf8s127::@4
  __b4:
    // [121] (signed word~) mulf8s127::$12 ← (signed word)(signed byte) mulf8s127::b#0 -- vwsz1=_sword_vbsz2 
    lda.z b
    sta.z __12
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z __12+1
    // [122] (signed word~) mulf8s127::$13 ← (signed word~) mulf8s127::$12 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z __12
    asl
    sta.z __13
    lda.z __12+1
    rol
    sta.z __13+1
    // [123] (signed word) mulf8s127::c#1 ← (signed word)(word) mulf8s127::c#0 - (signed word~) mulf8s127::$13 -- vwsz1=vwsz2_minus_vwsz3 
    lda.z c
    sec
    sbc.z __13
    sta.z c_1
    lda.z c+1
    sbc.z __13+1
    sta.z c_1+1
    // [124] phi from mulf8s127::@4 mulf8s127::@9 to mulf8s127::@1 [phi:mulf8s127::@4/mulf8s127::@9->mulf8s127::@1]
  __b1_from___b4:
  __b1_from___b9:
    // [124] phi (signed word) mulf8s127::c#5 = (signed word) mulf8s127::c#1 [phi:mulf8s127::@4/mulf8s127::@9->mulf8s127::@1#0] -- register_copy 
    jmp __b1
    // mulf8s127::@1
  __b1:
    // [125] if((signed byte) mulf8s127::b#0>=(signed byte) 0) goto mulf8s127::@2 -- vbsz1_ge_0_then_la1 
    lda.z b
    cmp #0
    bpl __b2_from___b1
    jmp __b5
    // mulf8s127::@5
  __b5:
    // [126] (signed word~) mulf8s127::$14 ← (signed word)(signed byte) mulf8s127::a#0 -- vwsz1=_sword_vbsz2 
    lda.z a
    sta.z __14
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z __14+1
    // [127] (signed word~) mulf8s127::$15 ← (signed word~) mulf8s127::$14 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z __14
    asl
    sta.z __15
    lda.z __14+1
    rol
    sta.z __15+1
    // [128] (signed word) mulf8s127::c#2 ← (signed word) mulf8s127::c#5 - (signed word~) mulf8s127::$15 -- vwsz1=vwsz1_minus_vwsz2 
    lda.z c_1
    sec
    sbc.z __15
    sta.z c_1
    lda.z c_1+1
    sbc.z __15+1
    sta.z c_1+1
    // [129] phi from mulf8s127::@1 mulf8s127::@5 to mulf8s127::@2 [phi:mulf8s127::@1/mulf8s127::@5->mulf8s127::@2]
  __b2_from___b1:
  __b2_from___b5:
    // [129] phi (signed word) mulf8s127::c#7 = (signed word) mulf8s127::c#5 [phi:mulf8s127::@1/mulf8s127::@5->mulf8s127::@2#0] -- register_copy 
    jmp __b2
    // mulf8s127::@2
  __b2:
    // [130] if((signed byte) mulf8s127::a#0>=(signed byte) 0) goto mulf8s127::@3 -- vbsz1_ge_0_then_la1 
    lda.z a
    cmp #0
    bpl __b3_from___b2
    jmp __b8
    // mulf8s127::@8
  __b8:
    // [131] if((signed byte) mulf8s127::b#0>=(signed byte) 0) goto mulf8s127::@3 -- vbsz1_ge_0_then_la1 
    lda.z b
    cmp #0
    bpl __b3_from___b8
    jmp __b6
    // mulf8s127::@6
  __b6:
    // [132] (signed word) mulf8s127::c#3 ← (signed word) mulf8s127::c#7 - (signed word) $200 -- vwsz1=vwsz1_minus_vwsc1 
    lda.z c_1
    sec
    sbc #<$200
    sta.z c_1
    lda.z c_1+1
    sbc #>$200
    sta.z c_1+1
    // [133] phi from mulf8s127::@2 mulf8s127::@6 to mulf8s127::@3 [phi:mulf8s127::@2/mulf8s127::@6->mulf8s127::@3]
  __b3_from___b2:
  __b3_from___b6:
    // [133] phi (signed word) mulf8s127::return#1 = (signed word) mulf8s127::c#7 [phi:mulf8s127::@2/mulf8s127::@6->mulf8s127::@3#0] -- register_copy 
    jmp __b3
    // [133] phi from mulf8s127::@8 to mulf8s127::@3 [phi:mulf8s127::@8->mulf8s127::@3]
  __b3_from___b8:
    jmp __b3
    // mulf8s127::@3
  __b3:
    jmp __breturn
    // mulf8s127::@return
  __breturn:
    // [134] return 
    rts
    // mulf8s127::@9
  __b9:
    // [135] (signed word) mulf8s127::c#11 ← (signed word)(word) mulf8s127::c#0 -- vwsz1=vwsz2 
    lda.z c
    sta.z c_1
    lda.z c+1
    sta.z c_1+1
    jmp __b1_from___b9
}
  // mulf8u127
// mulf8u127(byte zp($11) a, byte zp($12) b)
mulf8u127: {
    .label memA = $fc
    .label memB = $fd
    .label res = $fe
    .label resL = $fe
    .label resH = $ff
    .label a = $11
    .label b = $12
    .label return = $2f
    .label return_1 = $2d
    .label return_2 = $21
    // [137] *((const nomodify byte*) mulf8u127::memA) ← (byte) mulf8u127::a#2 -- _deref_pbuc1=vbuz1 
    lda.z a
    sta memA
    // [138] *((const nomodify byte*) mulf8u127::memB) ← (byte) mulf8u127::b#2 -- _deref_pbuc1=vbuz1 
    lda.z b
    sta memB
    // asm { ldamemA stasm1+1 stasm3+1 eor#$ff stasm2+1 stasm4+1 ldxmemB sec sm1: ldamulf127_sqr1_lo,x sm2: sbcmulf127_sqr2_lo,x staresL sm3: ldamulf127_sqr1_hi,x sm4: sbcmulf127_sqr2_hi,x staresH  }
    lda memA
    sta sm1+1
    sta sm3+1
    eor #$ff
    sta sm2+1
    sta sm4+1
    ldx memB
    sec
  sm1:
    lda mulf127_sqr1_lo,x
  sm2:
    sbc mulf127_sqr2_lo,x
    sta resL
  sm3:
    lda mulf127_sqr1_hi,x
  sm4:
    sbc mulf127_sqr2_hi,x
    sta resH
    // [140] (word) mulf8u127::return#1 ← *((const nomodify word*) mulf8u127::res) -- vwuz1=_deref_pwuc1 
    lda res
    sta.z return_1
    lda res+1
    sta.z return_1+1
    jmp __breturn
    // mulf8u127::@return
  __breturn:
    // [141] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp($13) str)
print_str: {
    .label str = $13
    // [143] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  __b1_from_print_str:
  __b1_from___b2:
    // [143] phi (byte*) print_char_cursor#122 = (byte*) print_char_cursor#136 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
    // [143] phi (byte*) print_str::str#3 = (byte*) print_str::str#5 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [144] if((byte) 0!=*((byte*) print_str::str#3)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [145] return 
    rts
    // print_str::@2
  __b2:
    // [146] *((byte*) print_char_cursor#122) ← *((byte*) print_str::str#3) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
    // [147] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#122 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // [148] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b2
}
  // print_mulf8u127
// print_mulf8u127(byte zp($15) a, byte zp($16) b)
print_mulf8u127: {
    .label c = $31
    .label a = $15
    .label b = $16
    // [150] (byte) mulf8u127::a#0 ← (byte) print_mulf8u127::a#8 -- vbuz1=vbuz2 
    lda.z a
    sta.z mulf8u127.a
    // [151] (byte) mulf8u127::b#0 ← (byte) print_mulf8u127::b#10 -- vbuz1=vbuz2 
    lda.z b
    sta.z mulf8u127.b
    // [152] call mulf8u127 
    // [136] phi from print_mulf8u127 to mulf8u127 [phi:print_mulf8u127->mulf8u127]
  mulf8u127_from_print_mulf8u127:
    // [136] phi (byte) mulf8u127::b#2 = (byte) mulf8u127::b#0 [phi:print_mulf8u127->mulf8u127#0] -- register_copy 
    // [136] phi (byte) mulf8u127::a#2 = (byte) mulf8u127::a#0 [phi:print_mulf8u127->mulf8u127#1] -- register_copy 
    jsr mulf8u127
    // [153] (word) mulf8u127::return#0 ← (word) mulf8u127::return#1 -- vwuz1=vwuz2 
    lda.z mulf8u127.return_1
    sta.z mulf8u127.return
    lda.z mulf8u127.return_1+1
    sta.z mulf8u127.return+1
    jmp __b1
    // print_mulf8u127::@1
  __b1:
    // [154] (word) print_mulf8u127::c#0 ← (word) mulf8u127::return#0 -- vwuz1=vwuz2 
    lda.z mulf8u127.return
    sta.z c
    lda.z mulf8u127.return+1
    sta.z c+1
    // [155] (byte) print_u8::b#3 ← (byte) print_mulf8u127::a#8 -- vbuz1=vbuz2 
    lda.z a
    sta.z print_u8.b
    // [156] (byte*) print_char_cursor#150 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [157] call print_u8 
    // [96] phi from print_mulf8u127::@1 to print_u8 [phi:print_mulf8u127::@1->print_u8]
  print_u8_from___b1:
    // [96] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#150 [phi:print_mulf8u127::@1->print_u8#0] -- register_copy 
    // [96] phi (byte) print_u8::b#5 = (byte) print_u8::b#3 [phi:print_mulf8u127::@1->print_u8#1] -- register_copy 
    jsr print_u8
    // [158] phi from print_mulf8u127::@1 to print_mulf8u127::@2 [phi:print_mulf8u127::@1->print_mulf8u127::@2]
  __b2_from___b1:
    jmp __b2
    // print_mulf8u127::@2
  __b2:
    // [159] call print_char 
    // [86] phi from print_mulf8u127::@2 to print_char [phi:print_mulf8u127::@2->print_char]
  print_char_from___b2:
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#19 [phi:print_mulf8u127::@2->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) '*' [phi:print_mulf8u127::@2->print_char#1] -- vbuz1=vbuc1 
    lda #'*'
    sta.z print_char.ch
    jsr print_char
    jmp __b3
    // print_mulf8u127::@3
  __b3:
    // [160] (byte) print_u8::b#4 ← (byte) print_mulf8u127::b#10 -- vbuz1=vbuz2 
    lda.z b
    sta.z print_u8.b
    // [161] call print_u8 
    // [96] phi from print_mulf8u127::@3 to print_u8 [phi:print_mulf8u127::@3->print_u8]
  print_u8_from___b3:
    // [96] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#19 [phi:print_mulf8u127::@3->print_u8#0] -- register_copy 
    // [96] phi (byte) print_u8::b#5 = (byte) print_u8::b#4 [phi:print_mulf8u127::@3->print_u8#1] -- register_copy 
    jsr print_u8
    // [162] phi from print_mulf8u127::@3 to print_mulf8u127::@4 [phi:print_mulf8u127::@3->print_mulf8u127::@4]
  __b4_from___b3:
    jmp __b4
    // print_mulf8u127::@4
  __b4:
    // [163] call print_char 
    // [86] phi from print_mulf8u127::@4 to print_char [phi:print_mulf8u127::@4->print_char]
  print_char_from___b4:
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#19 [phi:print_mulf8u127::@4->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) '=' [phi:print_mulf8u127::@4->print_char#1] -- vbuz1=vbuc1 
    lda #'='
    sta.z print_char.ch
    jsr print_char
    jmp __b5
    // print_mulf8u127::@5
  __b5:
    // [164] (word) print_uint::w#1 ← (word) print_mulf8u127::c#0 -- vwuz1=vwuz2 
    lda.z c
    sta.z print_uint.w
    lda.z c+1
    sta.z print_uint.w+1
    // [165] call print_uint 
    // [90] phi from print_mulf8u127::@5 to print_uint [phi:print_mulf8u127::@5->print_uint]
  print_uint_from___b5:
    // [90] phi (word) print_uint::w#2 = (word) print_uint::w#1 [phi:print_mulf8u127::@5->print_uint#0] -- register_copy 
    jsr print_uint
    // [166] phi from print_mulf8u127::@5 to print_mulf8u127::@6 [phi:print_mulf8u127::@5->print_mulf8u127::@6]
  __b6_from___b5:
    jmp __b6
    // print_mulf8u127::@6
  __b6:
    // [167] call print_ln 
    // [71] phi from print_mulf8u127::@6 to print_ln [phi:print_mulf8u127::@6->print_ln]
  print_ln_from___b6:
    // [71] phi (byte*) print_char_cursor#123 = (byte*) print_char_cursor#19 [phi:print_mulf8u127::@6->print_ln#0] -- register_copy 
    // [71] phi (byte*) print_line_cursor#63 = (byte*) print_line_cursor#1 [phi:print_mulf8u127::@6->print_ln#1] -- register_copy 
    jsr print_ln
    jmp __breturn
    // print_mulf8u127::@return
  __breturn:
    // [168] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [170] call memset 
    // [172] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [171] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $17
    // [173] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [173] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [174] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [175] return 
    rts
    // memset::@2
  __b2:
    // [176] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [177] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [173] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [173] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  // mulf_sqr tables will contain f(x)=int(x*x/4) and g(x) = f(x-255).
  // f(x) = ( x * x )/4
  .align $100
mulf127_sqr1_lo:
.fill 512, <round((i/127*i/127)*127/4) 
  .align $100
mulf127_sqr1_hi:
.fill 512, >round((i/127*i/127)*127/4) 
  // g(x) =  <((( x - 255) * ( x - 255 ))/4)
  .align $100
mulf127_sqr2_lo:
.fill 512, <round(((i-255)/127*(i-255)/127)*127/4) 
  .align $100
mulf127_sqr2_hi:
.fill 512, >round(((i-255)/127*(i-255)/127)*127/4) 

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [26] (byte*) print_char_cursor#141 ← (byte*) print_line_cursor#1 [ print_char_cursor#141 print_line_cursor#1 ] ( main:2 [ print_char_cursor#141 print_line_cursor#1 ] { { print_char_cursor#136 = print_char_cursor#141 } }  ) always clobbers reg byte a 
Statement [55] (signed word) mulf8s127::return#0 ← (signed word) mulf8s127::return#1 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::return#0 ] ( main:2::print_mulf8s127:31 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::return#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:33 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::return#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:35 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::return#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:37 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::return#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:39 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::return#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:41 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::return#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:43 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::return#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:45 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::return#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:47 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::return#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:49 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::return#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ print_mulf8s127::a#10 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ print_mulf8s127::b#10 ]
Statement [56] (signed word) print_mulf8s127::c#0 ← (signed word) mulf8s127::return#0 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 print_mulf8s127::c#0 ] ( main:2::print_mulf8s127:31 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 print_mulf8s127::c#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:33 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 print_mulf8s127::c#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:35 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 print_mulf8s127::c#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:37 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 print_mulf8s127::c#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:39 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 print_mulf8s127::c#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:41 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 print_mulf8s127::c#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:43 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 print_mulf8s127::c#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:45 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 print_mulf8s127::c#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:47 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 print_mulf8s127::c#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:49 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 print_mulf8s127::c#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  ) always clobbers reg byte a 
Statement [58] (byte*) print_char_cursor#148 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#1 print_char_cursor#148 ] ( main:2::print_mulf8s127:31 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#1 print_char_cursor#148 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:33 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#1 print_char_cursor#148 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:35 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#1 print_char_cursor#148 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:37 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#1 print_char_cursor#148 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:39 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#1 print_char_cursor#148 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:41 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#1 print_char_cursor#148 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:43 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#1 print_char_cursor#148 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:45 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#1 print_char_cursor#148 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:47 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#1 print_char_cursor#148 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:49 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#1 print_char_cursor#148 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:14 [ print_s8::b#5 print_s8::b#0 print_s8::b#3 print_s8::b#1 print_s8::b#2 ]
Statement [66] (signed word) print_sint::w#1 ← (signed word) print_mulf8s127::c#0 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] ( main:2::print_mulf8s127:31 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:33 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:35 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:37 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:39 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:41 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:43 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:45 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:47 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:49 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  ) always clobbers reg byte a 
Statement [73] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#32 + (byte) $28 [ print_line_cursor#1 print_char_cursor#123 ] ( main:2::print_ln:9 [ print_line_cursor#1 print_char_cursor#123 ] { { print_char_cursor#122 = print_char_cursor#123 } }  main:2::print_ln:29 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#122 = print_char_cursor#123 } }  main:2::print_mulf8s127:31::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:33::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:35::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:37::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:39::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:41::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:43::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:45::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:47::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:49::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:11::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:13::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:15::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:17::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:19::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:21::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:23::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:25::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  ) always clobbers reg byte a 
Statement [74] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#123) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#123 ] ( main:2::print_ln:9 [ print_line_cursor#1 print_char_cursor#123 ] { { print_char_cursor#122 = print_char_cursor#123 } }  main:2::print_ln:29 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#122 = print_char_cursor#123 } }  main:2::print_mulf8s127:31::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:33::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:35::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:37::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:39::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:41::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:43::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:45::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:47::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:49::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:11::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:13::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:15::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:17::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:19::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:21::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:23::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:25::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  ) always clobbers reg byte a 
Statement [76] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1 [ print_sint::w#1 print_char_cursor#19 ] ( main:2::print_mulf8s127:31::print_sint:67 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:33::print_sint:67 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:35::print_sint:67 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:37::print_sint:67 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:39::print_sint:67 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:41::print_sint:67 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:43::print_sint:67 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:45::print_sint:67 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:47::print_sint:67 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:49::print_sint:67 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  ) always clobbers reg byte a 
Statement [80] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#4 [ print_char_cursor#19 print_uint::w#0 ] ( main:2::print_mulf8s127:31::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } }  main:2::print_mulf8s127:33::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } }  main:2::print_mulf8s127:35::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } }  main:2::print_mulf8s127:37::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } }  main:2::print_mulf8s127:39::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } }  main:2::print_mulf8s127:41::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } }  main:2::print_mulf8s127:43::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } }  main:2::print_mulf8s127:45::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } }  main:2::print_mulf8s127:47::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } }  main:2::print_mulf8s127:49::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } }  ) always clobbers reg byte a 
Statement [85] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#1 [ print_char_cursor#19 print_sint::w#0 ] ( main:2::print_mulf8s127:31::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_sint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:33::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_sint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:35::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_sint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:37::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_sint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:39::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_sint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:41::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_sint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:43::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_sint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:45::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_sint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:47::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_sint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:49::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_sint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  ) always clobbers reg byte a 
Statement [87] *((byte*) print_char_cursor#80) ← (byte) print_char::ch#10 [ print_char_cursor#80 ] ( main:2::print_mulf8s127:31::print_char:61 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:33::print_char:61 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:35::print_char:61 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:37::print_char:61 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:39::print_char:61 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:41::print_char:61 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:43::print_char:61 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:45::print_char:61 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:47::print_char:61 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:49::print_char:61 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:31::print_char:65 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:33::print_char:65 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:35::print_char:65 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:37::print_char:65 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:39::print_char:65 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:41::print_char:65 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:43::print_char:65 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:45::print_char:65 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:47::print_char:65 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:49::print_char:65 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:31::print_sint:67::print_char:78 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:33::print_sint:67::print_char:78 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:35::print_sint:67::print_char:78 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:37::print_sint:67::print_char:78 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:39::print_sint:67::print_char:78 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:41::print_sint:67::print_char:78 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:43::print_sint:67::print_char:78 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:45::print_sint:67::print_char:78 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:47::print_sint:67::print_char:78 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:49::print_sint:67::print_char:78 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:31::print_sint:67::print_char:84 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:33::print_sint:67::print_char:84 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:35::print_sint:67::print_char:84 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:37::print_sint:67::print_char:84 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:39::print_sint:67::print_char:84 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:41::print_sint:67::print_char:84 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:43::print_sint:67::print_char:84 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:45::print_sint:67::print_char:84 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:47::print_sint:67::print_char:84 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:49::print_sint:67::print_char:84 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:31::print_sint:67::print_uint:81::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:33::print_sint:67::print_uint:81::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:35::print_sint:67::print_uint:81::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:37::print_sint:67::print_uint:81::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:39::print_sint:67::print_uint:81::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:41::print_sint:67::print_uint:81::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:43::print_sint:67::print_uint:81::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:45::print_sint:67::print_uint:81::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:47::print_sint:67::print_uint:81::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:49::print_sint:67::print_uint:81::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:11::print_uint:165::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:13::print_uint:165::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:15::print_uint:165::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:17::print_uint:165::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:19::print_uint:165::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:21::print_uint:165::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:23::print_uint:165::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:25::print_uint:165::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:31::print_sint:67::print_uint:81::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:33::print_sint:67::print_uint:81::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:35::print_sint:67::print_uint:81::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:37::print_sint:67::print_uint:81::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:39::print_sint:67::print_uint:81::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:41::print_sint:67::print_uint:81::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:43::print_sint:67::print_uint:81::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:45::print_sint:67::print_uint:81::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:47::print_sint:67::print_uint:81::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:49::print_sint:67::print_uint:81::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:11::print_uint:165::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:13::print_uint:165::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:15::print_uint:165::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:17::print_uint:165::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:19::print_uint:165::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:21::print_uint:165::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:23::print_uint:165::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:25::print_uint:165::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:31::print_s8:59::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:33::print_s8:59::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:35::print_s8:59::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:37::print_s8:59::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:39::print_s8:59::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:41::print_s8:59::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:43::print_s8:59::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:45::print_s8:59::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:47::print_s8:59::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:49::print_s8:59::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:31::print_s8:63::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:33::print_s8:63::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:35::print_s8:63::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:37::print_s8:63::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:39::print_s8:63::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:41::print_s8:63::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:43::print_s8:63::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:45::print_s8:63::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:47::print_s8:63::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:49::print_s8:63::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:11::print_u8:157::print_char:99 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:13::print_u8:157::print_char:99 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:15::print_u8:157::print_char:99 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:17::print_u8:157::print_char:99 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:19::print_u8:157::print_char:99 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:21::print_u8:157::print_char:99 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:23::print_u8:157::print_char:99 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:25::print_u8:157::print_char:99 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:11::print_u8:161::print_char:99 [ print_line_cursor#1 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:13::print_u8:161::print_char:99 [ print_line_cursor#1 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:15::print_u8:161::print_char:99 [ print_line_cursor#1 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:17::print_u8:161::print_char:99 [ print_line_cursor#1 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:19::print_u8:161::print_char:99 [ print_line_cursor#1 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:21::print_u8:161::print_char:99 [ print_line_cursor#1 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:23::print_u8:161::print_char:99 [ print_line_cursor#1 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:25::print_u8:161::print_char:99 [ print_line_cursor#1 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:31::print_sint:67::print_uint:81::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:33::print_sint:67::print_uint:81::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:35::print_sint:67::print_uint:81::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:37::print_sint:67::print_uint:81::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:39::print_sint:67::print_uint:81::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:41::print_sint:67::print_uint:81::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:43::print_sint:67::print_uint:81::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:45::print_sint:67::print_uint:81::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:47::print_sint:67::print_uint:81::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:49::print_sint:67::print_uint:81::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:11::print_uint:165::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:13::print_uint:165::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:15::print_uint:165::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:17::print_uint:165::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:19::print_uint:165::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:21::print_uint:165::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:23::print_uint:165::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:25::print_uint:165::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:31::print_sint:67::print_uint:81::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:33::print_sint:67::print_uint:81::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:35::print_sint:67::print_uint:81::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:37::print_sint:67::print_uint:81::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:39::print_sint:67::print_uint:81::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:41::print_sint:67::print_uint:81::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:43::print_sint:67::print_uint:81::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:45::print_sint:67::print_uint:81::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:47::print_sint:67::print_uint:81::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:49::print_sint:67::print_uint:81::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:11::print_uint:165::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:13::print_uint:165::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:15::print_uint:165::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:17::print_uint:165::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:19::print_uint:165::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:21::print_uint:165::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:23::print_uint:165::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:25::print_uint:165::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:31::print_s8:59::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:33::print_s8:59::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:35::print_s8:59::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:37::print_s8:59::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:39::print_s8:59::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:41::print_s8:59::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:43::print_s8:59::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:45::print_s8:59::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:47::print_s8:59::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:49::print_s8:59::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:31::print_s8:63::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:33::print_s8:63::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:35::print_s8:63::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:37::print_s8:63::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:39::print_s8:63::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:41::print_s8:63::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:43::print_s8:63::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:45::print_s8:63::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:47::print_s8:63::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:49::print_s8:63::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:11::print_u8:157::print_char:102 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:13::print_u8:157::print_char:102 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:15::print_u8:157::print_char:102 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:17::print_u8:157::print_char:102 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:19::print_u8:157::print_char:102 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:21::print_u8:157::print_char:102 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:23::print_u8:157::print_char:102 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:25::print_u8:157::print_char:102 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:11::print_u8:161::print_char:102 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:13::print_u8:161::print_char:102 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:15::print_u8:161::print_char:102 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:17::print_u8:161::print_char:102 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:19::print_u8:161::print_char:102 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:21::print_u8:161::print_char:102 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:23::print_u8:161::print_char:102 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:25::print_u8:161::print_char:102 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:31::print_s8:59::print_char:107 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:33::print_s8:59::print_char:107 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:35::print_s8:59::print_char:107 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:37::print_s8:59::print_char:107 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:39::print_s8:59::print_char:107 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:41::print_s8:59::print_char:107 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:43::print_s8:59::print_char:107 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:45::print_s8:59::print_char:107 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:47::print_s8:59::print_char:107 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:49::print_s8:59::print_char:107 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:31::print_s8:63::print_char:107 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:33::print_s8:63::print_char:107 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:35::print_s8:63::print_char:107 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:37::print_s8:63::print_char:107 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:39::print_s8:63::print_char:107 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:41::print_s8:63::print_char:107 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:43::print_s8:63::print_char:107 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:45::print_s8:63::print_char:107 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:47::print_s8:63::print_char:107 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:49::print_s8:63::print_char:107 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:31::print_s8:59::print_char:113 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:33::print_s8:59::print_char:113 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:35::print_s8:59::print_char:113 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:37::print_s8:59::print_char:113 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:39::print_s8:59::print_char:113 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:41::print_s8:59::print_char:113 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:43::print_s8:59::print_char:113 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:45::print_s8:59::print_char:113 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:47::print_s8:59::print_char:113 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:49::print_s8:59::print_char:113 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:31::print_s8:63::print_char:113 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:33::print_s8:63::print_char:113 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:35::print_s8:63::print_char:113 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:37::print_s8:63::print_char:113 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:39::print_s8:63::print_char:113 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:41::print_s8:63::print_char:113 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:43::print_s8:63::print_char:113 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:45::print_s8:63::print_char:113 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:47::print_s8:63::print_char:113 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:49::print_s8:63::print_char:113 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8u127:11::print_char:159 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:13::print_char:159 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:15::print_char:159 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:17::print_char:159 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:19::print_char:159 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:21::print_char:159 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:23::print_char:159 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:25::print_char:159 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:11::print_char:163 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:13::print_char:163 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:15::print_char:163 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:17::print_char:163 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:19::print_char:163 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:21::print_char:163 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:23::print_char:163 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:25::print_char:163 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:3 [ print_mulf8s127::b#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:13 [ print_u8::b#5 print_u8::b#3 print_u8::b#4 print_u8::b#0 print_u8::b#1 print_u8::b#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:22 [ print_mulf8u127::b#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:14 [ print_s8::b#5 print_s8::b#0 print_s8::b#3 print_s8::b#1 print_s8::b#2 ]
Statement [97] (byte~) print_u8::$0 ← (byte) print_u8::b#5 >> (byte) 4 [ print_char_cursor#131 print_u8::b#5 print_u8::$0 ] ( main:2::print_mulf8s127:31::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:33::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:35::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:37::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:39::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:41::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:43::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:45::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:47::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:49::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:11::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:13::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:15::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:17::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:19::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:21::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:23::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:25::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:31::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:33::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:35::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:37::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:39::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:41::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:43::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:45::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:47::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:49::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:11::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:13::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:15::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:17::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:19::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:21::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:23::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:25::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:31::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:33::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:35::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:37::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:39::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:41::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:43::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:45::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:47::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:49::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:31::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:33::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:35::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:37::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:39::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:41::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:43::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:45::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:47::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:49::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:11::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:13::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:15::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:17::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:19::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:21::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:23::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:25::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:11::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:13::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:15::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:17::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:19::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:21::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:23::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:25::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:13 [ print_u8::b#5 print_u8::b#3 print_u8::b#4 print_u8::b#0 print_u8::b#1 print_u8::b#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:22 [ print_mulf8u127::b#10 ]
Statement [100] (byte~) print_u8::$2 ← (byte) print_u8::b#5 & (byte) $f [ print_char_cursor#19 print_u8::$2 ] ( main:2::print_mulf8s127:31::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:33::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:35::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:37::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:39::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:41::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:43::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:45::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:47::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:49::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:11::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:13::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:15::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:17::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:19::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:21::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:23::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:25::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:31::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:33::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:35::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:37::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:39::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:41::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:43::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:45::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:47::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:49::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:11::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:13::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:15::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:17::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:19::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:21::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:23::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:25::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:31::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:33::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:35::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:37::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:39::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:41::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:43::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:45::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:47::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:49::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:31::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:33::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:35::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:37::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:39::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:41::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:43::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:45::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:47::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:49::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:11::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:13::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:15::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:17::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:19::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:21::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:23::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:25::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:11::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:13::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:15::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:17::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:19::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:21::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:23::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:25::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  ) always clobbers reg byte a 
Statement [114] (signed byte) print_s8::b#0 ← - (signed byte) print_s8::b#3 [ print_char_cursor#19 print_s8::b#0 ] ( main:2::print_mulf8s127:31::print_s8:59 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:33::print_s8:59 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:35::print_s8:59 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:37::print_s8:59 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:39::print_s8:59 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:41::print_s8:59 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:43::print_s8:59 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:45::print_s8:59 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:47::print_s8:59 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:49::print_s8:59 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:31::print_s8:63 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 } }  main:2::print_mulf8s127:33::print_s8:63 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 } }  main:2::print_mulf8s127:35::print_s8:63 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 } }  main:2::print_mulf8s127:37::print_s8:63 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 } }  main:2::print_mulf8s127:39::print_s8:63 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 } }  main:2::print_mulf8s127:41::print_s8:63 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 } }  main:2::print_mulf8s127:43::print_s8:63 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 } }  main:2::print_mulf8s127:45::print_s8:63 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 } }  main:2::print_mulf8s127:47::print_s8:63 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 } }  main:2::print_mulf8s127:49::print_s8:63 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 } }  ) always clobbers reg byte a 
Statement [118] (word) mulf8u127::return#3 ← (word) mulf8u127::return#1 [ mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#3 ] ( main:2::print_mulf8s127:31::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:33::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:35::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:37::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:39::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:41::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:43::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:45::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:47::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:49::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:25 [ mulf8s127::a#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:26 [ mulf8s127::b#0 ]
Statement [119] (word) mulf8s127::c#0 ← (word) mulf8u127::return#3 [ mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 ] ( main:2::print_mulf8s127:31::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:33::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:35::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:37::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:39::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:41::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:43::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:45::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:47::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:49::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  ) always clobbers reg byte a 
Statement [121] (signed word~) mulf8s127::$12 ← (signed word)(signed byte) mulf8s127::b#0 [ mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$12 ] ( main:2::print_mulf8s127:31::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$12 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:33::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$12 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:35::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$12 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:37::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$12 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:39::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$12 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:41::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$12 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:43::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$12 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:45::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$12 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:47::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$12 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:49::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$12 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  ) always clobbers reg byte a 
Statement [122] (signed word~) mulf8s127::$13 ← (signed word~) mulf8s127::$12 << (byte) 1 [ mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$13 ] ( main:2::print_mulf8s127:31::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$13 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:33::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$13 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:35::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$13 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:37::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$13 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:39::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$13 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:41::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$13 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:43::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$13 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:45::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$13 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:47::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$13 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:49::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$13 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  ) always clobbers reg byte a 
Statement [123] (signed word) mulf8s127::c#1 ← (signed word)(word) mulf8s127::c#0 - (signed word~) mulf8s127::$13 [ mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#1 ] ( main:2::print_mulf8s127:31::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:33::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:35::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:37::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:39::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:41::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:43::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:45::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:47::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:49::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  ) always clobbers reg byte a 
Statement [126] (signed word~) mulf8s127::$14 ← (signed word)(signed byte) mulf8s127::a#0 [ mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$14 ] ( main:2::print_mulf8s127:31::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$14 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:33::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$14 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:35::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$14 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:37::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$14 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:39::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$14 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:41::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$14 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:43::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$14 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:45::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$14 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:47::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$14 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:49::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$14 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  ) always clobbers reg byte a 
Statement [127] (signed word~) mulf8s127::$15 ← (signed word~) mulf8s127::$14 << (byte) 1 [ mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$15 ] ( main:2::print_mulf8s127:31::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$15 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:33::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$15 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:35::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$15 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:37::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$15 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:39::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$15 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:41::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$15 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:43::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$15 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:45::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$15 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:47::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$15 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:49::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$15 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  ) always clobbers reg byte a 
Statement [128] (signed word) mulf8s127::c#2 ← (signed word) mulf8s127::c#5 - (signed word~) mulf8s127::$15 [ mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#2 ] ( main:2::print_mulf8s127:31::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#2 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:33::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#2 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:35::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#2 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:37::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#2 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:39::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#2 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:41::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#2 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:43::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#2 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:45::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#2 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:47::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#2 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:49::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#2 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  ) always clobbers reg byte a 
Statement [132] (signed word) mulf8s127::c#3 ← (signed word) mulf8s127::c#7 - (signed word) $200 [ mulf8s127::c#3 ] ( main:2::print_mulf8s127:31::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::c#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:33::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::c#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:35::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::c#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:37::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::c#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:39::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::c#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:41::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::c#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:43::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::c#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:45::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::c#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:47::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::c#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:49::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::c#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  ) always clobbers reg byte a 
Statement [135] (signed word) mulf8s127::c#11 ← (signed word)(word) mulf8s127::c#0 [ mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#11 ] ( main:2::print_mulf8s127:31::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#11 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:33::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#11 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:35::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#11 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:37::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#11 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:39::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#11 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:41::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#11 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:43::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#11 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:45::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#11 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:47::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#11 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:49::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#11 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  ) always clobbers reg byte a 
Statement asm { ldamemA stasm1+1 stasm3+1 eor#$ff stasm2+1 stasm4+1 ldxmemB sec sm1: ldamulf127_sqr1_lo,x sm2: sbcmulf127_sqr2_lo,x staresL sm3: ldamulf127_sqr1_hi,x sm4: sbcmulf127_sqr2_hi,x staresH  } always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp[1]:2 [ print_mulf8s127::a#10 ]
Removing always clobbered register reg byte x as potential for zp[1]:3 [ print_mulf8s127::b#10 ]
Removing always clobbered register reg byte x as potential for zp[1]:25 [ mulf8s127::a#0 ]
Removing always clobbered register reg byte x as potential for zp[1]:26 [ mulf8s127::b#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:21 [ print_mulf8u127::a#8 ]
Removing always clobbered register reg byte x as potential for zp[1]:21 [ print_mulf8u127::a#8 ]
Removing always clobbered register reg byte x as potential for zp[1]:22 [ print_mulf8u127::b#10 ]
Statement [140] (word) mulf8u127::return#1 ← *((const nomodify word*) mulf8u127::res) [ mulf8u127::return#1 ] ( main:2::print_mulf8s127:31::mulf8s127:54::mulf8u127:117 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:33::mulf8s127:54::mulf8u127:117 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:35::mulf8s127:54::mulf8u127:117 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:37::mulf8s127:54::mulf8u127:117 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:39::mulf8s127:54::mulf8u127:117 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:41::mulf8s127:54::mulf8u127:117 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:43::mulf8s127:54::mulf8u127:117 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:45::mulf8s127:54::mulf8u127:117 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:47::mulf8s127:54::mulf8u127:117 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:49::mulf8s127:54::mulf8u127:117 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8u127:11::mulf8u127:152 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#1 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:13::mulf8u127:152 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#1 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:15::mulf8u127:152 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#1 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:17::mulf8u127:152 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#1 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:19::mulf8u127:152 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#1 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:21::mulf8u127:152 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#1 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:23::mulf8u127:152 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#1 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:25::mulf8u127:152 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#1 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  ) always clobbers reg byte a 
Statement [144] if((byte) 0!=*((byte*) print_str::str#3)) goto print_str::@2 [ print_char_cursor#122 print_str::str#3 ] ( main:2::print_str:7 [ print_char_cursor#122 print_str::str#3 ] { }  main:2::print_str:27 [ print_line_cursor#1 print_char_cursor#122 print_str::str#3 ] { { print_char_cursor#136 = print_char_cursor#141 } }  ) always clobbers reg byte a reg byte y 
Statement [146] *((byte*) print_char_cursor#122) ← *((byte*) print_str::str#3) [ print_char_cursor#122 print_str::str#3 ] ( main:2::print_str:7 [ print_char_cursor#122 print_str::str#3 ] { }  main:2::print_str:27 [ print_line_cursor#1 print_char_cursor#122 print_str::str#3 ] { { print_char_cursor#136 = print_char_cursor#141 } }  ) always clobbers reg byte a reg byte y 
Statement [153] (word) mulf8u127::return#0 ← (word) mulf8u127::return#1 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#0 ] ( main:2::print_mulf8u127:11 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#0 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:13 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#0 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:15 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#0 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:17 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#0 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:19 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#0 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:21 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#0 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:23 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#0 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:25 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#0 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  ) always clobbers reg byte a 
Statement [154] (word) print_mulf8u127::c#0 ← (word) mulf8u127::return#0 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 print_mulf8u127::c#0 ] ( main:2::print_mulf8u127:11 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:13 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:15 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:17 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:19 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:21 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:23 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:25 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  ) always clobbers reg byte a 
Statement [156] (byte*) print_char_cursor#150 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_u8::b#3 print_char_cursor#150 print_mulf8u127::b#10 print_mulf8u127::c#0 ] ( main:2::print_mulf8u127:11 [ print_line_cursor#1 print_u8::b#3 print_char_cursor#150 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:13 [ print_line_cursor#1 print_u8::b#3 print_char_cursor#150 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:15 [ print_line_cursor#1 print_u8::b#3 print_char_cursor#150 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:17 [ print_line_cursor#1 print_u8::b#3 print_char_cursor#150 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:19 [ print_line_cursor#1 print_u8::b#3 print_char_cursor#150 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:21 [ print_line_cursor#1 print_u8::b#3 print_char_cursor#150 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:23 [ print_line_cursor#1 print_u8::b#3 print_char_cursor#150 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:25 [ print_line_cursor#1 print_u8::b#3 print_char_cursor#150 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  ) always clobbers reg byte a 
Statement [164] (word) print_uint::w#1 ← (word) print_mulf8u127::c#0 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#1 ] ( main:2::print_mulf8u127:11 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#1 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } }  main:2::print_mulf8u127:13 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#1 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } }  main:2::print_mulf8u127:15 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#1 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } }  main:2::print_mulf8u127:17 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#1 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } }  main:2::print_mulf8u127:19 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#1 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } }  main:2::print_mulf8u127:21 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#1 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } }  main:2::print_mulf8u127:23 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#1 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } }  main:2::print_mulf8u127:25 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#1 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } }  ) always clobbers reg byte a 
Statement [174] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:2::print_cls:5::memset:170 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [176] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:2::print_cls:5::memset:170 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [26] (byte*) print_char_cursor#141 ← (byte*) print_line_cursor#1 [ print_char_cursor#141 print_line_cursor#1 ] ( main:2 [ print_char_cursor#141 print_line_cursor#1 ] { { print_char_cursor#136 = print_char_cursor#141 } }  ) always clobbers reg byte a 
Statement [55] (signed word) mulf8s127::return#0 ← (signed word) mulf8s127::return#1 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::return#0 ] ( main:2::print_mulf8s127:31 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::return#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:33 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::return#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:35 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::return#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:37 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::return#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:39 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::return#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:41 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::return#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:43 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::return#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:45 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::return#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:47 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::return#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:49 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::return#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  ) always clobbers reg byte a 
Statement [56] (signed word) print_mulf8s127::c#0 ← (signed word) mulf8s127::return#0 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 print_mulf8s127::c#0 ] ( main:2::print_mulf8s127:31 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 print_mulf8s127::c#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:33 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 print_mulf8s127::c#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:35 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 print_mulf8s127::c#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:37 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 print_mulf8s127::c#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:39 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 print_mulf8s127::c#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:41 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 print_mulf8s127::c#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:43 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 print_mulf8s127::c#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:45 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 print_mulf8s127::c#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:47 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 print_mulf8s127::c#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:49 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 print_mulf8s127::c#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  ) always clobbers reg byte a 
Statement [58] (byte*) print_char_cursor#148 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#1 print_char_cursor#148 ] ( main:2::print_mulf8s127:31 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#1 print_char_cursor#148 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:33 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#1 print_char_cursor#148 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:35 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#1 print_char_cursor#148 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:37 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#1 print_char_cursor#148 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:39 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#1 print_char_cursor#148 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:41 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#1 print_char_cursor#148 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:43 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#1 print_char_cursor#148 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:45 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#1 print_char_cursor#148 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:47 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#1 print_char_cursor#148 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:49 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#1 print_char_cursor#148 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  ) always clobbers reg byte a 
Statement [66] (signed word) print_sint::w#1 ← (signed word) print_mulf8s127::c#0 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] ( main:2::print_mulf8s127:31 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:33 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:35 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:37 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:39 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:41 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:43 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:45 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:47 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:49 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  ) always clobbers reg byte a 
Statement [73] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#32 + (byte) $28 [ print_line_cursor#1 print_char_cursor#123 ] ( main:2::print_ln:9 [ print_line_cursor#1 print_char_cursor#123 ] { { print_char_cursor#122 = print_char_cursor#123 } }  main:2::print_ln:29 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#122 = print_char_cursor#123 } }  main:2::print_mulf8s127:31::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:33::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:35::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:37::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:39::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:41::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:43::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:45::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:47::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:49::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:11::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:13::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:15::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:17::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:19::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:21::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:23::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:25::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  ) always clobbers reg byte a 
Statement [74] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#123) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#123 ] ( main:2::print_ln:9 [ print_line_cursor#1 print_char_cursor#123 ] { { print_char_cursor#122 = print_char_cursor#123 } }  main:2::print_ln:29 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#122 = print_char_cursor#123 } }  main:2::print_mulf8s127:31::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:33::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:35::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:37::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:39::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:41::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:43::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:45::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:47::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8s127:49::print_ln:69 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:11::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:13::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:15::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:17::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:19::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:21::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:23::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  main:2::print_mulf8u127:25::print_ln:167 [ print_line_cursor#1 print_char_cursor#123 ] { { print_line_cursor#1 = print_line_cursor#63 } { print_char_cursor#123 = print_char_cursor#19 } }  ) always clobbers reg byte a 
Statement [76] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1 [ print_sint::w#1 print_char_cursor#19 ] ( main:2::print_mulf8s127:31::print_sint:67 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:33::print_sint:67 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:35::print_sint:67 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:37::print_sint:67 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:39::print_sint:67 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:41::print_sint:67 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:43::print_sint:67 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:45::print_sint:67 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:47::print_sint:67 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:49::print_sint:67 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#19 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  ) always clobbers reg byte a 
Statement [80] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#4 [ print_char_cursor#19 print_uint::w#0 ] ( main:2::print_mulf8s127:31::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } }  main:2::print_mulf8s127:33::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } }  main:2::print_mulf8s127:35::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } }  main:2::print_mulf8s127:37::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } }  main:2::print_mulf8s127:39::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } }  main:2::print_mulf8s127:41::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } }  main:2::print_mulf8s127:43::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } }  main:2::print_mulf8s127:45::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } }  main:2::print_mulf8s127:47::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } }  main:2::print_mulf8s127:49::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } }  ) always clobbers reg byte a 
Statement [85] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#1 [ print_char_cursor#19 print_sint::w#0 ] ( main:2::print_mulf8s127:31::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_sint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:33::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_sint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:35::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_sint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:37::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_sint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:39::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_sint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:41::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_sint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:43::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_sint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:45::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_sint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:47::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_sint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  main:2::print_mulf8s127:49::print_sint:67 [ print_line_cursor#1 print_char_cursor#19 print_sint::w#0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } }  ) always clobbers reg byte a 
Statement [87] *((byte*) print_char_cursor#80) ← (byte) print_char::ch#10 [ print_char_cursor#80 ] ( main:2::print_mulf8s127:31::print_char:61 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:33::print_char:61 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:35::print_char:61 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:37::print_char:61 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:39::print_char:61 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:41::print_char:61 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:43::print_char:61 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:45::print_char:61 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:47::print_char:61 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:49::print_char:61 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:31::print_char:65 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:33::print_char:65 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:35::print_char:65 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:37::print_char:65 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:39::print_char:65 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:41::print_char:65 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:43::print_char:65 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:45::print_char:65 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:47::print_char:65 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:49::print_char:65 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:31::print_sint:67::print_char:78 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:33::print_sint:67::print_char:78 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:35::print_sint:67::print_char:78 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:37::print_sint:67::print_char:78 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:39::print_sint:67::print_char:78 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:41::print_sint:67::print_char:78 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:43::print_sint:67::print_char:78 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:45::print_sint:67::print_char:78 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:47::print_sint:67::print_char:78 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:49::print_sint:67::print_char:78 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:31::print_sint:67::print_char:84 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:33::print_sint:67::print_char:84 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:35::print_sint:67::print_char:84 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:37::print_sint:67::print_char:84 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:39::print_sint:67::print_char:84 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:41::print_sint:67::print_char:84 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:43::print_sint:67::print_char:84 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:45::print_sint:67::print_char:84 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:47::print_sint:67::print_char:84 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:49::print_sint:67::print_char:84 [ print_line_cursor#1 print_sint::w#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8s127:31::print_sint:67::print_uint:81::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:33::print_sint:67::print_uint:81::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:35::print_sint:67::print_uint:81::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:37::print_sint:67::print_uint:81::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:39::print_sint:67::print_uint:81::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:41::print_sint:67::print_uint:81::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:43::print_sint:67::print_uint:81::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:45::print_sint:67::print_uint:81::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:47::print_sint:67::print_uint:81::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:49::print_sint:67::print_uint:81::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:11::print_uint:165::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:13::print_uint:165::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:15::print_uint:165::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:17::print_uint:165::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:19::print_uint:165::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:21::print_uint:165::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:23::print_uint:165::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:25::print_uint:165::print_u8:92::print_char:99 [ print_line_cursor#1 print_uint::w#2 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:31::print_sint:67::print_uint:81::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:33::print_sint:67::print_uint:81::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:35::print_sint:67::print_uint:81::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:37::print_sint:67::print_uint:81::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:39::print_sint:67::print_uint:81::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:41::print_sint:67::print_uint:81::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:43::print_sint:67::print_uint:81::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:45::print_sint:67::print_uint:81::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:47::print_sint:67::print_uint:81::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:49::print_sint:67::print_uint:81::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:11::print_uint:165::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:13::print_uint:165::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:15::print_uint:165::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:17::print_uint:165::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:19::print_uint:165::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:21::print_uint:165::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:23::print_uint:165::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:25::print_uint:165::print_u8:94::print_char:99 [ print_line_cursor#1 print_u8::b#5 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:31::print_s8:59::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:33::print_s8:59::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:35::print_s8:59::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:37::print_s8:59::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:39::print_s8:59::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:41::print_s8:59::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:43::print_s8:59::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:45::print_s8:59::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:47::print_s8:59::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:49::print_s8:59::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:31::print_s8:63::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:33::print_s8:63::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:35::print_s8:63::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:37::print_s8:63::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:39::print_s8:63::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:41::print_s8:63::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:43::print_s8:63::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:45::print_s8:63::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:47::print_s8:63::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:49::print_s8:63::print_u8:110::print_char:99 [ print_line_cursor#1 print_mulf8s127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:11::print_u8:157::print_char:99 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:13::print_u8:157::print_char:99 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:15::print_u8:157::print_char:99 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:17::print_u8:157::print_char:99 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:19::print_u8:157::print_char:99 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:21::print_u8:157::print_char:99 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:23::print_u8:157::print_char:99 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:25::print_u8:157::print_char:99 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:11::print_u8:161::print_char:99 [ print_line_cursor#1 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:13::print_u8:161::print_char:99 [ print_line_cursor#1 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:15::print_u8:161::print_char:99 [ print_line_cursor#1 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:17::print_u8:161::print_char:99 [ print_line_cursor#1 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:19::print_u8:161::print_char:99 [ print_line_cursor#1 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:21::print_u8:161::print_char:99 [ print_line_cursor#1 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:23::print_u8:161::print_char:99 [ print_line_cursor#1 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:25::print_u8:161::print_char:99 [ print_line_cursor#1 print_mulf8u127::c#0 print_u8::b#5 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:31::print_sint:67::print_uint:81::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:33::print_sint:67::print_uint:81::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:35::print_sint:67::print_uint:81::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:37::print_sint:67::print_uint:81::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:39::print_sint:67::print_uint:81::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:41::print_sint:67::print_uint:81::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:43::print_sint:67::print_uint:81::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:45::print_sint:67::print_uint:81::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:47::print_sint:67::print_uint:81::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:49::print_sint:67::print_uint:81::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:11::print_uint:165::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:13::print_uint:165::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:15::print_uint:165::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:17::print_uint:165::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:19::print_uint:165::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:21::print_uint:165::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:23::print_uint:165::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:25::print_uint:165::print_u8:92::print_char:102 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:31::print_sint:67::print_uint:81::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:33::print_sint:67::print_uint:81::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:35::print_sint:67::print_uint:81::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:37::print_sint:67::print_uint:81::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:39::print_sint:67::print_uint:81::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:41::print_sint:67::print_uint:81::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:43::print_sint:67::print_uint:81::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:45::print_sint:67::print_uint:81::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:47::print_sint:67::print_uint:81::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:49::print_sint:67::print_uint:81::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:11::print_uint:165::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:13::print_uint:165::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:15::print_uint:165::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:17::print_uint:165::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:19::print_uint:165::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:21::print_uint:165::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:23::print_uint:165::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:25::print_uint:165::print_u8:94::print_char:102 [ print_line_cursor#1 print_char_cursor#80 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:31::print_s8:59::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:33::print_s8:59::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:35::print_s8:59::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:37::print_s8:59::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:39::print_s8:59::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:41::print_s8:59::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:43::print_s8:59::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:45::print_s8:59::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:47::print_s8:59::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:49::print_s8:59::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:31::print_s8:63::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:33::print_s8:63::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:35::print_s8:63::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:37::print_s8:63::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:39::print_s8:63::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:41::print_s8:63::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:43::print_s8:63::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:45::print_s8:63::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:47::print_s8:63::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:49::print_s8:63::print_u8:110::print_char:102 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:11::print_u8:157::print_char:102 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:13::print_u8:157::print_char:102 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:15::print_u8:157::print_char:102 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:17::print_u8:157::print_char:102 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:19::print_u8:157::print_char:102 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:21::print_u8:157::print_char:102 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:23::print_u8:157::print_char:102 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:25::print_u8:157::print_char:102 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:11::print_u8:161::print_char:102 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:13::print_u8:161::print_char:102 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:15::print_u8:161::print_char:102 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:17::print_u8:161::print_char:102 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:19::print_u8:161::print_char:102 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:21::print_u8:161::print_char:102 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:23::print_u8:161::print_char:102 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:25::print_u8:161::print_char:102 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:31::print_s8:59::print_char:107 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:33::print_s8:59::print_char:107 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:35::print_s8:59::print_char:107 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:37::print_s8:59::print_char:107 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:39::print_s8:59::print_char:107 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:41::print_s8:59::print_char:107 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:43::print_s8:59::print_char:107 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:45::print_s8:59::print_char:107 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:47::print_s8:59::print_char:107 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:49::print_s8:59::print_char:107 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:31::print_s8:63::print_char:107 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:33::print_s8:63::print_char:107 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:35::print_s8:63::print_char:107 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:37::print_s8:63::print_char:107 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:39::print_s8:63::print_char:107 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:41::print_s8:63::print_char:107 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:43::print_s8:63::print_char:107 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:45::print_s8:63::print_char:107 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:47::print_s8:63::print_char:107 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:49::print_s8:63::print_char:107 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:31::print_s8:59::print_char:113 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:33::print_s8:59::print_char:113 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:35::print_s8:59::print_char:113 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:37::print_s8:59::print_char:113 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:39::print_s8:59::print_char:113 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:41::print_s8:59::print_char:113 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:43::print_s8:59::print_char:113 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:45::print_s8:59::print_char:113 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:47::print_s8:59::print_char:113 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:49::print_s8:59::print_char:113 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 print_char_cursor#80 } }  main:2::print_mulf8s127:31::print_s8:63::print_char:113 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:33::print_s8:63::print_char:113 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:35::print_s8:63::print_char:113 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:37::print_s8:63::print_char:113 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:39::print_s8:63::print_char:113 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:41::print_s8:63::print_char:113 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:43::print_s8:63::print_char:113 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:45::print_s8:63::print_char:113 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:47::print_s8:63::print_char:113 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8s127:49::print_s8:63::print_char:113 [ print_line_cursor#1 print_mulf8s127::c#0 print_s8::b#3 print_char_cursor#80 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#80 } }  main:2::print_mulf8u127:11::print_char:159 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:13::print_char:159 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:15::print_char:159 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:17::print_char:159 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:19::print_char:159 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:21::print_char:159 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:23::print_char:159 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:25::print_char:159 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:11::print_char:163 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:13::print_char:163 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:15::print_char:163 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:17::print_char:163 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:19::print_char:163 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:21::print_char:163 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:23::print_char:163 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:25::print_char:163 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#80 ] { { print_char_cursor#19 = print_char_cursor#80 } }  ) always clobbers reg byte y 
Statement [97] (byte~) print_u8::$0 ← (byte) print_u8::b#5 >> (byte) 4 [ print_char_cursor#131 print_u8::b#5 print_u8::$0 ] ( main:2::print_mulf8s127:31::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:33::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:35::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:37::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:39::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:41::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:43::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:45::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:47::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:49::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:11::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:13::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:15::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:17::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:19::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:21::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:23::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:25::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:31::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:33::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:35::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:37::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:39::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:41::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:43::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:45::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:47::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:49::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:11::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:13::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:15::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:17::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:19::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:21::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:23::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:25::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:31::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:33::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:35::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:37::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:39::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:41::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:43::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:45::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:47::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:49::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:31::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:33::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:35::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:37::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:39::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:41::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:43::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:45::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:47::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8s127:49::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:11::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:13::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:15::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:17::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:19::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:21::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:23::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:25::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:11::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:13::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:15::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:17::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:19::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:21::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:23::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  main:2::print_mulf8u127:25::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#131 print_u8::b#5 print_u8::$0 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#4 } }  ) always clobbers reg byte a 
Statement [100] (byte~) print_u8::$2 ← (byte) print_u8::b#5 & (byte) $f [ print_char_cursor#19 print_u8::$2 ] ( main:2::print_mulf8s127:31::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:33::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:35::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:37::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:39::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:41::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:43::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:45::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:47::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:49::print_sint:67::print_uint:81::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:11::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:13::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:15::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:17::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:19::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:21::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:23::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:25::print_uint:165::print_u8:92 [ print_line_cursor#1 print_uint::w#2 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#1 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:31::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:33::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:35::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:37::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:39::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:41::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:43::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:45::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:47::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:49::print_sint:67::print_uint:81::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_sint::w#1 = print_mulf8s127::c#0 } { print_uint::w#0 = print_uint::w#2 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:11::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:13::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:15::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:17::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:19::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:21::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:23::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:25::print_uint:165::print_u8:94 [ print_line_cursor#1 print_char_cursor#19 print_u8::$2 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } { print_u8::b#2 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:31::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:33::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:35::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:37::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:39::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:41::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:43::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:45::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:47::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:49::print_s8:59::print_u8:110 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } { print_u8::b#0 = print_u8::b#5 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:31::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:33::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:35::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:37::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:39::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:41::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:43::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:45::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:47::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8s127:49::print_s8:63::print_u8:110 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 print_char_cursor#131 print_char_cursor#80 } { print_u8::b#0 = print_u8::b#5 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:11::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:13::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:15::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:17::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:19::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:21::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:23::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:25::print_u8:157 [ print_line_cursor#1 print_mulf8u127::b#10 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } { print_char::ch#10 = print_char::ch#5 } { print_char_cursor#19 = print_char_cursor#80 } }  main:2::print_mulf8u127:11::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:13::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:15::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:17::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:19::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:21::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:23::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  main:2::print_mulf8u127:25::print_u8:161 [ print_line_cursor#1 print_mulf8u127::c#0 print_char_cursor#19 print_u8::$2 ] { { print_u8::b#4 = print_u8::b#5 print_mulf8u127::b#10 } { print_char_cursor#131 = print_char_cursor#19 print_char_cursor#80 } { print_char::ch#10 = print_char::ch#5 } }  ) always clobbers reg byte a 
Statement [114] (signed byte) print_s8::b#0 ← - (signed byte) print_s8::b#3 [ print_char_cursor#19 print_s8::b#0 ] ( main:2::print_mulf8s127:31::print_s8:59 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:33::print_s8:59 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:35::print_s8:59 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:37::print_s8:59 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:39::print_s8:59 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:41::print_s8:59 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:43::print_s8:59 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:45::print_s8:59 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:47::print_s8:59 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:49::print_s8:59 [ print_line_cursor#1 print_mulf8s127::b#10 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#1 = print_s8::b#3 print_mulf8s127::a#10 } { print_char_cursor#127 = print_char_cursor#148 } }  main:2::print_mulf8s127:31::print_s8:63 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 } }  main:2::print_mulf8s127:33::print_s8:63 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 } }  main:2::print_mulf8s127:35::print_s8:63 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 } }  main:2::print_mulf8s127:37::print_s8:63 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 } }  main:2::print_mulf8s127:39::print_s8:63 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 } }  main:2::print_mulf8s127:41::print_s8:63 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 } }  main:2::print_mulf8s127:43::print_s8:63 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 } }  main:2::print_mulf8s127:45::print_s8:63 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 } }  main:2::print_mulf8s127:47::print_s8:63 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 } }  main:2::print_mulf8s127:49::print_s8:63 [ print_line_cursor#1 print_mulf8s127::c#0 print_char_cursor#19 print_s8::b#0 ] { { print_s8::b#2 = print_s8::b#3 print_mulf8s127::b#10 } { print_char_cursor#127 = print_char_cursor#19 } }  ) always clobbers reg byte a 
Statement [118] (word) mulf8u127::return#3 ← (word) mulf8u127::return#1 [ mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#3 ] ( main:2::print_mulf8s127:31::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:33::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:35::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:37::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:39::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:41::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:43::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:45::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:47::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:49::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  ) always clobbers reg byte a 
Statement [119] (word) mulf8s127::c#0 ← (word) mulf8u127::return#3 [ mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 ] ( main:2::print_mulf8s127:31::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:33::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:35::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:37::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:39::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:41::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:43::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:45::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:47::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:49::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  ) always clobbers reg byte a 
Statement [121] (signed word~) mulf8s127::$12 ← (signed word)(signed byte) mulf8s127::b#0 [ mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$12 ] ( main:2::print_mulf8s127:31::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$12 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:33::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$12 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:35::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$12 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:37::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$12 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:39::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$12 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:41::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$12 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:43::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$12 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:45::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$12 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:47::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$12 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:49::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$12 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  ) always clobbers reg byte a 
Statement [122] (signed word~) mulf8s127::$13 ← (signed word~) mulf8s127::$12 << (byte) 1 [ mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$13 ] ( main:2::print_mulf8s127:31::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$13 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:33::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$13 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:35::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$13 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:37::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$13 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:39::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$13 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:41::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$13 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:43::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$13 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:45::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$13 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:47::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$13 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:49::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#0 mulf8s127::$13 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  ) always clobbers reg byte a 
Statement [123] (signed word) mulf8s127::c#1 ← (signed word)(word) mulf8s127::c#0 - (signed word~) mulf8s127::$13 [ mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#1 ] ( main:2::print_mulf8s127:31::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:33::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:35::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:37::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:39::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:41::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:43::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:45::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:47::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:49::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  ) always clobbers reg byte a 
Statement [126] (signed word~) mulf8s127::$14 ← (signed word)(signed byte) mulf8s127::a#0 [ mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$14 ] ( main:2::print_mulf8s127:31::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$14 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:33::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$14 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:35::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$14 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:37::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$14 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:39::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$14 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:41::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$14 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:43::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$14 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:45::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$14 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:47::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$14 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:49::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$14 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  ) always clobbers reg byte a 
Statement [127] (signed word~) mulf8s127::$15 ← (signed word~) mulf8s127::$14 << (byte) 1 [ mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$15 ] ( main:2::print_mulf8s127:31::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$15 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:33::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$15 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:35::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$15 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:37::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$15 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:39::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$15 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:41::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$15 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:43::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$15 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:45::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$15 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:47::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$15 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:49::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#5 mulf8s127::$15 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  ) always clobbers reg byte a 
Statement [128] (signed word) mulf8s127::c#2 ← (signed word) mulf8s127::c#5 - (signed word~) mulf8s127::$15 [ mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#2 ] ( main:2::print_mulf8s127:31::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#2 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:33::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#2 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:35::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#2 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:37::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#2 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:39::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#2 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:41::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#2 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:43::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#2 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:45::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#2 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:47::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#2 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:49::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#2 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  ) always clobbers reg byte a 
Statement [132] (signed word) mulf8s127::c#3 ← (signed word) mulf8s127::c#7 - (signed word) $200 [ mulf8s127::c#3 ] ( main:2::print_mulf8s127:31::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::c#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:33::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::c#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:35::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::c#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:37::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::c#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:39::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::c#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:41::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::c#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:43::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::c#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:45::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::c#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:47::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::c#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:49::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::c#3 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  ) always clobbers reg byte a 
Statement [135] (signed word) mulf8s127::c#11 ← (signed word)(word) mulf8s127::c#0 [ mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#11 ] ( main:2::print_mulf8s127:31::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#11 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:33::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#11 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:35::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#11 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:37::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#11 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:39::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#11 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:41::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#11 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:43::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#11 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:45::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#11 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:47::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#11 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  main:2::print_mulf8s127:49::mulf8s127:54 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8s127::c#11 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } }  ) always clobbers reg byte a 
Statement asm { ldamemA stasm1+1 stasm3+1 eor#$ff stasm2+1 stasm4+1 ldxmemB sec sm1: ldamulf127_sqr1_lo,x sm2: sbcmulf127_sqr2_lo,x staresL sm3: ldamulf127_sqr1_hi,x sm4: sbcmulf127_sqr2_hi,x staresH  } always clobbers reg byte a reg byte x 
Statement [140] (word) mulf8u127::return#1 ← *((const nomodify word*) mulf8u127::res) [ mulf8u127::return#1 ] ( main:2::print_mulf8s127:31::mulf8s127:54::mulf8u127:117 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:33::mulf8s127:54::mulf8u127:117 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:35::mulf8s127:54::mulf8u127:117 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:37::mulf8s127:54::mulf8u127:117 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:39::mulf8s127:54::mulf8u127:117 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:41::mulf8s127:54::mulf8u127:117 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:43::mulf8s127:54::mulf8u127:117 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:45::mulf8s127:54::mulf8u127:117 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:47::mulf8s127:54::mulf8u127:117 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8s127:49::mulf8s127:54::mulf8u127:117 [ print_line_cursor#1 print_mulf8s127::a#10 print_mulf8s127::b#10 mulf8s127::a#0 mulf8s127::b#0 mulf8u127::return#1 ] { { mulf8s127::a#0 = print_mulf8s127::a#10 } { mulf8s127::b#0 = print_mulf8s127::b#10 } { mulf8s127::return#0 = mulf8s127::return#1 } { mulf8u127::a#1 = mulf8u127::a#2 } { mulf8u127::b#1 = mulf8u127::b#2 } { mulf8u127::return#1 = mulf8u127::return#3 } }  main:2::print_mulf8u127:11::mulf8u127:152 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#1 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:13::mulf8u127:152 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#1 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:15::mulf8u127:152 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#1 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:17::mulf8u127:152 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#1 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:19::mulf8u127:152 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#1 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:21::mulf8u127:152 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#1 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:23::mulf8u127:152 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#1 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:25::mulf8u127:152 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#1 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  ) always clobbers reg byte a 
Statement [144] if((byte) 0!=*((byte*) print_str::str#3)) goto print_str::@2 [ print_char_cursor#122 print_str::str#3 ] ( main:2::print_str:7 [ print_char_cursor#122 print_str::str#3 ] { }  main:2::print_str:27 [ print_line_cursor#1 print_char_cursor#122 print_str::str#3 ] { { print_char_cursor#136 = print_char_cursor#141 } }  ) always clobbers reg byte a reg byte y 
Statement [146] *((byte*) print_char_cursor#122) ← *((byte*) print_str::str#3) [ print_char_cursor#122 print_str::str#3 ] ( main:2::print_str:7 [ print_char_cursor#122 print_str::str#3 ] { }  main:2::print_str:27 [ print_line_cursor#1 print_char_cursor#122 print_str::str#3 ] { { print_char_cursor#136 = print_char_cursor#141 } }  ) always clobbers reg byte a reg byte y 
Statement [153] (word) mulf8u127::return#0 ← (word) mulf8u127::return#1 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#0 ] ( main:2::print_mulf8u127:11 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#0 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:13 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#0 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:15 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#0 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:17 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#0 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:19 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#0 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:21 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#0 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:23 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#0 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  main:2::print_mulf8u127:25 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 mulf8u127::return#0 ] { { mulf8u127::a#0 = mulf8u127::a#2 print_mulf8u127::a#8 } { mulf8u127::b#0 = mulf8u127::b#2 print_mulf8u127::b#10 } { mulf8u127::return#0 = mulf8u127::return#1 } }  ) always clobbers reg byte a 
Statement [154] (word) print_mulf8u127::c#0 ← (word) mulf8u127::return#0 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 print_mulf8u127::c#0 ] ( main:2::print_mulf8u127:11 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:13 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:15 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:17 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:19 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:21 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:23 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:25 [ print_line_cursor#1 print_mulf8u127::a#8 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  ) always clobbers reg byte a 
Statement [156] (byte*) print_char_cursor#150 ← (byte*) print_line_cursor#1 [ print_line_cursor#1 print_u8::b#3 print_char_cursor#150 print_mulf8u127::b#10 print_mulf8u127::c#0 ] ( main:2::print_mulf8u127:11 [ print_line_cursor#1 print_u8::b#3 print_char_cursor#150 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:13 [ print_line_cursor#1 print_u8::b#3 print_char_cursor#150 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:15 [ print_line_cursor#1 print_u8::b#3 print_char_cursor#150 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:17 [ print_line_cursor#1 print_u8::b#3 print_char_cursor#150 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:19 [ print_line_cursor#1 print_u8::b#3 print_char_cursor#150 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:21 [ print_line_cursor#1 print_u8::b#3 print_char_cursor#150 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:23 [ print_line_cursor#1 print_u8::b#3 print_char_cursor#150 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  main:2::print_mulf8u127:25 [ print_line_cursor#1 print_u8::b#3 print_char_cursor#150 print_mulf8u127::b#10 print_mulf8u127::c#0 ] { { print_u8::b#3 = print_u8::b#5 print_mulf8u127::a#8 } { print_char_cursor#131 = print_char_cursor#150 } }  ) always clobbers reg byte a 
Statement [164] (word) print_uint::w#1 ← (word) print_mulf8u127::c#0 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#1 ] ( main:2::print_mulf8u127:11 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#1 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } }  main:2::print_mulf8u127:13 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#1 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } }  main:2::print_mulf8u127:15 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#1 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } }  main:2::print_mulf8u127:17 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#1 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } }  main:2::print_mulf8u127:19 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#1 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } }  main:2::print_mulf8u127:21 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#1 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } }  main:2::print_mulf8u127:23 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#1 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } }  main:2::print_mulf8u127:25 [ print_line_cursor#1 print_char_cursor#19 print_uint::w#1 ] { { print_uint::w#1 = print_uint::w#2 print_mulf8u127::c#0 } }  ) always clobbers reg byte a 
Statement [174] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 [ memset::dst#2 ] ( main:2::print_cls:5::memset:170 [ memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [176] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::dst#2 ] ( main:2::print_cls:5::memset:170 [ memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ print_mulf8s127::a#10 ] : zp[1]:2 , reg byte y , 
Potential registers zp[1]:3 [ print_mulf8s127::b#10 ] : zp[1]:3 , 
Potential registers zp[2]:4 [ print_line_cursor#32 print_line_cursor#63 print_line_cursor#1 ] : zp[2]:4 , 
Potential registers zp[2]:6 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ] : zp[2]:6 , 
Potential registers zp[1]:8 [ print_char::ch#10 print_char::ch#4 print_char::ch#5 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:9 [ print_char_cursor#80 print_char_cursor#123 print_char_cursor#122 print_char_cursor#19 print_char_cursor#127 print_char_cursor#131 print_char_cursor#150 print_char_cursor#148 print_char_cursor#136 print_char_cursor#141 print_char_cursor#1 ] : zp[2]:9 , 
Potential registers zp[2]:11 [ print_uint::w#2 print_uint::w#1 print_uint::w#0 ] : zp[2]:11 , 
Potential registers zp[1]:13 [ print_u8::b#5 print_u8::b#3 print_u8::b#4 print_u8::b#0 print_u8::b#1 print_u8::b#2 ] : zp[1]:13 , reg byte x , 
Potential registers zp[1]:14 [ print_s8::b#5 print_s8::b#0 print_s8::b#3 print_s8::b#1 print_s8::b#2 ] : zp[1]:14 , reg byte x , 
Potential registers zp[2]:15 [ mulf8s127::return#1 mulf8s127::c#7 mulf8s127::c#5 mulf8s127::c#1 mulf8s127::c#11 mulf8s127::c#2 mulf8s127::c#3 ] : zp[2]:15 , 
Potential registers zp[1]:17 [ mulf8u127::a#2 mulf8u127::a#1 mulf8u127::a#0 ] : zp[1]:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:18 [ mulf8u127::b#2 mulf8u127::b#1 mulf8u127::b#0 ] : zp[1]:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:19 [ print_str::str#3 print_str::str#5 print_str::str#0 ] : zp[2]:19 , 
Potential registers zp[1]:21 [ print_mulf8u127::a#8 ] : zp[1]:21 , reg byte y , 
Potential registers zp[1]:22 [ print_mulf8u127::b#10 ] : zp[1]:22 , 
Potential registers zp[2]:23 [ memset::dst#2 memset::dst#1 ] : zp[2]:23 , 
Potential registers zp[1]:25 [ mulf8s127::a#0 ] : zp[1]:25 , reg byte y , 
Potential registers zp[1]:26 [ mulf8s127::b#0 ] : zp[1]:26 , reg byte y , 
Potential registers zp[2]:27 [ mulf8s127::return#0 ] : zp[2]:27 , 
Potential registers zp[2]:29 [ print_mulf8s127::c#0 ] : zp[2]:29 , 
Potential registers zp[1]:31 [ print_u8::$0 ] : zp[1]:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:32 [ print_u8::$2 ] : zp[1]:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:33 [ mulf8u127::return#3 ] : zp[2]:33 , 
Potential registers zp[2]:35 [ mulf8s127::c#0 ] : zp[2]:35 , 
Potential registers zp[2]:37 [ mulf8s127::$12 ] : zp[2]:37 , 
Potential registers zp[2]:39 [ mulf8s127::$13 ] : zp[2]:39 , 
Potential registers zp[2]:41 [ mulf8s127::$14 ] : zp[2]:41 , 
Potential registers zp[2]:43 [ mulf8s127::$15 ] : zp[2]:43 , 
Potential registers zp[2]:45 [ mulf8u127::return#1 ] : zp[2]:45 , 
Potential registers zp[2]:47 [ mulf8u127::return#0 ] : zp[2]:47 , 
Potential registers zp[2]:49 [ print_mulf8u127::c#0 ] : zp[2]:49 , 

REGISTER UPLIFT SCOPES
Uplift Scope [print_char] 1,600,007: zp[1]:8 [ print_char::ch#10 print_char::ch#4 print_char::ch#5 ] 
Uplift Scope [] 1,170,121.3: zp[2]:9 [ print_char_cursor#80 print_char_cursor#123 print_char_cursor#122 print_char_cursor#19 print_char_cursor#127 print_char_cursor#131 print_char_cursor#150 print_char_cursor#148 print_char_cursor#136 print_char_cursor#141 print_char_cursor#1 ] 22,583.61: zp[2]:4 [ print_line_cursor#32 print_line_cursor#63 print_line_cursor#1 ] 
Uplift Scope [print_u8] 200,002: zp[1]:31 [ print_u8::$0 ] 200,002: zp[1]:32 [ print_u8::$2 ] 97,610.75: zp[1]:13 [ print_u8::b#5 print_u8::b#3 print_u8::b#4 print_u8::b#0 print_u8::b#1 print_u8::b#2 ] 
Uplift Scope [memset] 33,336.67: zp[2]:23 [ memset::dst#2 memset::dst#1 ] 
Uplift Scope [mulf8u127] 12,205: zp[1]:17 [ mulf8u127::a#2 mulf8u127::a#1 mulf8u127::a#0 ] 7,755.5: zp[1]:18 [ mulf8u127::b#2 mulf8u127::b#1 mulf8u127::b#0 ] 2,775.75: zp[2]:45 [ mulf8u127::return#1 ] 2,002: zp[2]:33 [ mulf8u127::return#3 ] 202: zp[2]:47 [ mulf8u127::return#0 ] 
Uplift Scope [mulf8s127] 11,044.67: zp[2]:15 [ mulf8s127::return#1 mulf8s127::c#7 mulf8s127::c#5 mulf8s127::c#1 mulf8s127::c#11 mulf8s127::c#2 mulf8s127::c#3 ] 2,002: zp[2]:37 [ mulf8s127::$12 ] 2,002: zp[2]:39 [ mulf8s127::$13 ] 2,002: zp[2]:41 [ mulf8s127::$14 ] 2,002: zp[2]:43 [ mulf8s127::$15 ] 250.25: zp[2]:35 [ mulf8s127::c#0 ] 202: zp[2]:27 [ mulf8s127::return#0 ] 116.83: zp[1]:25 [ mulf8s127::a#0 ] 116.83: zp[1]:26 [ mulf8s127::b#0 ] 
Uplift Scope [print_uint] 9,238.67: zp[2]:11 [ print_uint::w#2 print_uint::w#1 print_uint::w#0 ] 
Uplift Scope [print_s8] 4,841.17: zp[1]:14 [ print_s8::b#5 print_s8::b#0 print_s8::b#3 print_s8::b#1 print_s8::b#2 ] 
Uplift Scope [print_sint] 4,521.33: zp[2]:6 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ] 
Uplift Scope [print_str] 3,129.25: zp[2]:19 [ print_str::str#3 print_str::str#5 print_str::str#0 ] 
Uplift Scope [print_mulf8u127] 33.67: zp[1]:21 [ print_mulf8u127::a#8 ] 20.2: zp[2]:49 [ print_mulf8u127::c#0 ] 18.36: zp[1]:22 [ print_mulf8u127::b#10 ] 
Uplift Scope [print_mulf8s127] 33.67: zp[1]:2 [ print_mulf8s127::a#10 ] 20.2: zp[2]:29 [ print_mulf8s127::c#0 ] 18.36: zp[1]:3 [ print_mulf8s127::b#10 ] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 
Uplift Scope [main] 

Uplifting [print_char] best 3024 combination reg byte a [ print_char::ch#10 print_char::ch#4 print_char::ch#5 ] 
Uplifting [] best 3024 combination zp[2]:9 [ print_char_cursor#80 print_char_cursor#123 print_char_cursor#122 print_char_cursor#19 print_char_cursor#127 print_char_cursor#131 print_char_cursor#150 print_char_cursor#148 print_char_cursor#136 print_char_cursor#141 print_char_cursor#1 ] zp[2]:4 [ print_line_cursor#32 print_line_cursor#63 print_line_cursor#1 ] 
Uplifting [print_u8] best 2997 combination reg byte a [ print_u8::$0 ] reg byte x [ print_u8::$2 ] reg byte x [ print_u8::b#5 print_u8::b#3 print_u8::b#4 print_u8::b#0 print_u8::b#1 print_u8::b#2 ] 
Uplifting [memset] best 2997 combination zp[2]:23 [ memset::dst#2 memset::dst#1 ] 
Uplifting [mulf8u127] best 2979 combination reg byte x [ mulf8u127::a#2 mulf8u127::a#1 mulf8u127::a#0 ] reg byte a [ mulf8u127::b#2 mulf8u127::b#1 mulf8u127::b#0 ] zp[2]:45 [ mulf8u127::return#1 ] zp[2]:33 [ mulf8u127::return#3 ] zp[2]:47 [ mulf8u127::return#0 ] 
Uplifting [mulf8s127] best 2968 combination zp[2]:15 [ mulf8s127::return#1 mulf8s127::c#7 mulf8s127::c#5 mulf8s127::c#1 mulf8s127::c#11 mulf8s127::c#2 mulf8s127::c#3 ] zp[2]:37 [ mulf8s127::$12 ] zp[2]:39 [ mulf8s127::$13 ] zp[2]:41 [ mulf8s127::$14 ] zp[2]:43 [ mulf8s127::$15 ] zp[2]:35 [ mulf8s127::c#0 ] zp[2]:27 [ mulf8s127::return#0 ] zp[1]:25 [ mulf8s127::a#0 ] reg byte y [ mulf8s127::b#0 ] 
Uplifting [print_uint] best 2968 combination zp[2]:11 [ print_uint::w#2 print_uint::w#1 print_uint::w#0 ] 
Uplifting [print_s8] best 2956 combination reg byte x [ print_s8::b#5 print_s8::b#0 print_s8::b#3 print_s8::b#1 print_s8::b#2 ] 
Uplifting [print_sint] best 2956 combination zp[2]:6 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ] 
Uplifting [print_str] best 2956 combination zp[2]:19 [ print_str::str#3 print_str::str#5 print_str::str#0 ] 
Uplifting [print_mulf8u127] best 2934 combination reg byte y [ print_mulf8u127::a#8 ] zp[2]:49 [ print_mulf8u127::c#0 ] zp[1]:22 [ print_mulf8u127::b#10 ] 
Uplifting [print_mulf8s127] best 2934 combination zp[1]:2 [ print_mulf8s127::a#10 ] zp[2]:29 [ print_mulf8s127::c#0 ] zp[1]:3 [ print_mulf8s127::b#10 ] 
Uplifting [RADIX] best 2934 combination 
Uplifting [print_ln] best 2934 combination 
Uplifting [print_cls] best 2934 combination 
Uplifting [main] best 2934 combination 
Attempting to uplift remaining variables inzp[1]:25 [ mulf8s127::a#0 ]
Uplifting [mulf8s127] best 2934 combination zp[1]:25 [ mulf8s127::a#0 ] 
Attempting to uplift remaining variables inzp[1]:2 [ print_mulf8s127::a#10 ]
Uplifting [print_mulf8s127] best 2934 combination zp[1]:2 [ print_mulf8s127::a#10 ] 
Attempting to uplift remaining variables inzp[1]:3 [ print_mulf8s127::b#10 ]
Uplifting [print_mulf8s127] best 2934 combination zp[1]:3 [ print_mulf8s127::b#10 ] 
Attempting to uplift remaining variables inzp[1]:22 [ print_mulf8u127::b#10 ]
Uplifting [print_mulf8u127] best 2934 combination zp[1]:22 [ print_mulf8u127::b#10 ] 
Coalescing zero page register [ zp[2]:15 [ mulf8s127::return#1 mulf8s127::c#7 mulf8s127::c#5 mulf8s127::c#1 mulf8s127::c#11 mulf8s127::c#2 mulf8s127::c#3 ] ] with [ zp[2]:35 [ mulf8s127::c#0 ] ] - score: 2
Coalescing zero page register [ zp[1]:2 [ print_mulf8s127::a#10 ] ] with [ zp[1]:25 [ mulf8s127::a#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:6 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 ] ] with [ zp[2]:11 [ print_uint::w#2 print_uint::w#1 print_uint::w#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:6 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 print_uint::w#2 print_uint::w#1 print_uint::w#0 ] ] with [ zp[2]:29 [ print_mulf8s127::c#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:15 [ mulf8s127::return#1 mulf8s127::c#7 mulf8s127::c#5 mulf8s127::c#1 mulf8s127::c#11 mulf8s127::c#2 mulf8s127::c#3 mulf8s127::c#0 ] ] with [ zp[2]:27 [ mulf8s127::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:33 [ mulf8u127::return#3 ] ] with [ zp[2]:45 [ mulf8u127::return#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:37 [ mulf8s127::$12 ] ] with [ zp[2]:39 [ mulf8s127::$13 ] ] - score: 1
Coalescing zero page register [ zp[2]:41 [ mulf8s127::$14 ] ] with [ zp[2]:43 [ mulf8s127::$15 ] ] - score: 1
Coalescing zero page register [ zp[2]:47 [ mulf8u127::return#0 ] ] with [ zp[2]:49 [ print_mulf8u127::c#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:6 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 print_uint::w#2 print_uint::w#1 print_uint::w#0 print_mulf8s127::c#0 ] ] with [ zp[2]:15 [ mulf8s127::return#1 mulf8s127::c#7 mulf8s127::c#5 mulf8s127::c#1 mulf8s127::c#11 mulf8s127::c#2 mulf8s127::c#3 mulf8s127::c#0 mulf8s127::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:6 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 print_uint::w#2 print_uint::w#1 print_uint::w#0 print_mulf8s127::c#0 mulf8s127::return#1 mulf8s127::c#7 mulf8s127::c#5 mulf8s127::c#1 mulf8s127::c#11 mulf8s127::c#2 mulf8s127::c#3 mulf8s127::c#0 mulf8s127::return#0 ] ] with [ zp[2]:47 [ mulf8u127::return#0 print_mulf8u127::c#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:6 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 print_uint::w#2 print_uint::w#1 print_uint::w#0 print_mulf8s127::c#0 mulf8s127::return#1 mulf8s127::c#7 mulf8s127::c#5 mulf8s127::c#1 mulf8s127::c#11 mulf8s127::c#2 mulf8s127::c#3 mulf8s127::c#0 mulf8s127::return#0 mulf8u127::return#0 print_mulf8u127::c#0 ] ] with [ zp[2]:33 [ mulf8u127::return#3 mulf8u127::return#1 ] ] - score: 2
Coalescing zero page register [ zp[2]:19 [ print_str::str#3 print_str::str#5 print_str::str#0 ] ] with [ zp[2]:6 [ print_sint::w#4 print_sint::w#0 print_sint::w#1 print_uint::w#2 print_uint::w#1 print_uint::w#0 print_mulf8s127::c#0 mulf8s127::return#1 mulf8s127::c#7 mulf8s127::c#5 mulf8s127::c#1 mulf8s127::c#11 mulf8s127::c#2 mulf8s127::c#3 mulf8s127::c#0 mulf8s127::return#0 mulf8u127::return#0 print_mulf8u127::c#0 mulf8u127::return#3 mulf8u127::return#1 ] ]
Coalescing zero page register [ zp[1]:22 [ print_mulf8u127::b#10 ] ] with [ zp[1]:2 [ print_mulf8s127::a#10 mulf8s127::a#0 ] ]
Coalescing zero page register [ zp[2]:37 [ mulf8s127::$12 mulf8s127::$13 ] ] with [ zp[2]:23 [ memset::dst#2 memset::dst#1 ] ]
Allocated (was zp[1]:3) zp[1]:2 [ print_mulf8s127::b#10 ]
Allocated (was zp[2]:4) zp[2]:3 [ print_line_cursor#32 print_line_cursor#63 print_line_cursor#1 ]
Allocated (was zp[2]:9) zp[2]:5 [ print_char_cursor#80 print_char_cursor#123 print_char_cursor#122 print_char_cursor#19 print_char_cursor#127 print_char_cursor#131 print_char_cursor#150 print_char_cursor#148 print_char_cursor#136 print_char_cursor#141 print_char_cursor#1 ]
Allocated (was zp[2]:19) zp[2]:7 [ print_str::str#3 print_str::str#5 print_str::str#0 print_sint::w#4 print_sint::w#0 print_sint::w#1 print_uint::w#2 print_uint::w#1 print_uint::w#0 print_mulf8s127::c#0 mulf8s127::return#1 mulf8s127::c#7 mulf8s127::c#5 mulf8s127::c#1 mulf8s127::c#11 mulf8s127::c#2 mulf8s127::c#3 mulf8s127::c#0 mulf8s127::return#0 mulf8u127::return#0 print_mulf8u127::c#0 mulf8u127::return#3 mulf8u127::return#1 ]
Allocated (was zp[1]:22) zp[1]:9 [ print_mulf8u127::b#10 print_mulf8s127::a#10 mulf8s127::a#0 ]
Allocated (was zp[2]:37) zp[2]:10 [ mulf8s127::$12 mulf8s127::$13 memset::dst#2 memset::dst#1 ]
Allocated (was zp[2]:41) zp[2]:12 [ mulf8s127::$14 mulf8s127::$15 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// An implementation of seriously fast multiply for integer values in the interval [-1;1] with the best possible precision
// NOTE: So far unsuccessful - since the handling of sign and values where a+b>sqrt2) makes the code slower than regular fast multiply
// In this model 255 binary represents 1.0 - meaning that 255*255 = 255
// Uses principles from C=Hacking #16 https://codebase64.org/doku.php?id=magazines:chacking16
// Utilizes the fact that a*b = ((a+b)/2)^2 - ((a-b)/2)^2
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_char_cursor = 5
  .label print_line_cursor = 3
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [5] call print_cls 
    // [169] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [7] call print_str 
    // [142] phi from main::@1 to print_str [phi:main::@1->print_str]
  print_str_from___b1:
    // [142] phi (byte*) print_char_cursor#136 = (byte*) 1024 [phi:main::@1->print_str#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [142] phi (byte*) print_str::str#5 = (const byte*) main::str [phi:main::@1->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [9] call print_ln 
    // [71] phi from main::@2 to print_ln [phi:main::@2->print_ln]
  print_ln_from___b2:
    // [71] phi (byte*) print_char_cursor#123 = (byte*) print_char_cursor#122 [phi:main::@2->print_ln#0] -- register_copy 
    // [71] phi (byte*) print_line_cursor#63 = (byte*) 1024 [phi:main::@2->print_ln#1] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    jsr print_ln
    // [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [11] call print_mulf8u127 
    // [149] phi from main::@3 to print_mulf8u127 [phi:main::@3->print_mulf8u127]
  print_mulf8u127_from___b3:
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) 0 [phi:main::@3->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #0
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) 0 [phi:main::@3->print_mulf8u127#1] -- vbuyy=vbuc1 
    ldy #0
    jsr print_mulf8u127
    // [12] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [13] call print_mulf8u127 
    // [149] phi from main::@4 to print_mulf8u127 [phi:main::@4->print_mulf8u127]
  print_mulf8u127_from___b4:
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) $7f [phi:main::@4->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #$7f
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) $7f [phi:main::@4->print_mulf8u127#1] -- vbuyy=vbuc1 
    ldy #$7f
    jsr print_mulf8u127
    // [14] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [15] call print_mulf8u127 
    // [149] phi from main::@5 to print_mulf8u127 [phi:main::@5->print_mulf8u127]
  print_mulf8u127_from___b5:
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) $40 [phi:main::@5->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #$40
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) $40 [phi:main::@5->print_mulf8u127#1] -- vbuyy=vbuc1 
    ldy #$40
    jsr print_mulf8u127
    // [16] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [17] call print_mulf8u127 
    // [149] phi from main::@6 to print_mulf8u127 [phi:main::@6->print_mulf8u127]
  print_mulf8u127_from___b6:
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) $7f [phi:main::@6->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #$7f
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) $40 [phi:main::@6->print_mulf8u127#1] -- vbuyy=vbuc1 
    ldy #$40
    jsr print_mulf8u127
    // [18] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  __b7_from___b6:
    jmp __b7
    // main::@7
  __b7:
    // [19] call print_mulf8u127 
    // [149] phi from main::@7 to print_mulf8u127 [phi:main::@7->print_mulf8u127]
  print_mulf8u127_from___b7:
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) $c0 [phi:main::@7->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #$c0
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) $40 [phi:main::@7->print_mulf8u127#1] -- vbuyy=vbuc1 
    ldy #$40
    jsr print_mulf8u127
    // [20] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  __b8_from___b7:
    jmp __b8
    // main::@8
  __b8:
    // [21] call print_mulf8u127 
    // [149] phi from main::@8 to print_mulf8u127 [phi:main::@8->print_mulf8u127]
  print_mulf8u127_from___b8:
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) $7f [phi:main::@8->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #$7f
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) $ff [phi:main::@8->print_mulf8u127#1] -- vbuyy=vbuc1 
    ldy #$ff
    jsr print_mulf8u127
    // [22] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  __b9_from___b8:
    jmp __b9
    // main::@9
  __b9:
    // [23] call print_mulf8u127 
    // [149] phi from main::@9 to print_mulf8u127 [phi:main::@9->print_mulf8u127]
  print_mulf8u127_from___b9:
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) $c0 [phi:main::@9->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #$c0
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) $c0 [phi:main::@9->print_mulf8u127#1] -- vbuyy=vbuc1 
    ldy #$c0
    jsr print_mulf8u127
    // [24] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  __b10_from___b9:
    jmp __b10
    // main::@10
  __b10:
    // [25] call print_mulf8u127 
    // [149] phi from main::@10 to print_mulf8u127 [phi:main::@10->print_mulf8u127]
  print_mulf8u127_from___b10:
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) $ff [phi:main::@10->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) $ff [phi:main::@10->print_mulf8u127#1] -- vbuyy=vbuc1 
    ldy #$ff
    jsr print_mulf8u127
    jmp __b11
    // main::@11
  __b11:
    // [26] (byte*) print_char_cursor#141 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [27] call print_str 
    // [142] phi from main::@11 to print_str [phi:main::@11->print_str]
  print_str_from___b11:
    // [142] phi (byte*) print_char_cursor#136 = (byte*) print_char_cursor#141 [phi:main::@11->print_str#0] -- register_copy 
    // [142] phi (byte*) print_str::str#5 = (const byte*) main::str1 [phi:main::@11->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // [28] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
  __b12_from___b11:
    jmp __b12
    // main::@12
  __b12:
    // [29] call print_ln 
    // [71] phi from main::@12 to print_ln [phi:main::@12->print_ln]
  print_ln_from___b12:
    // [71] phi (byte*) print_char_cursor#123 = (byte*) print_char_cursor#122 [phi:main::@12->print_ln#0] -- register_copy 
    // [71] phi (byte*) print_line_cursor#63 = (byte*) print_line_cursor#1 [phi:main::@12->print_ln#1] -- register_copy 
    jsr print_ln
    // [30] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  __b13_from___b12:
    jmp __b13
    // main::@13
  __b13:
    // [31] call print_mulf8s127 
    // [51] phi from main::@13 to print_mulf8s127 [phi:main::@13->print_mulf8s127]
  print_mulf8s127_from___b13:
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) 0 [phi:main::@13->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #0
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) 0 [phi:main::@13->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #0
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [32] phi from main::@13 to main::@14 [phi:main::@13->main::@14]
  __b14_from___b13:
    jmp __b14
    // main::@14
  __b14:
    // [33] call print_mulf8s127 
    // [51] phi from main::@14 to print_mulf8s127 [phi:main::@14->print_mulf8s127]
  print_mulf8s127_from___b14:
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) $40 [phi:main::@14->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #$40
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) $40 [phi:main::@14->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #$40
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [34] phi from main::@14 to main::@15 [phi:main::@14->main::@15]
  __b15_from___b14:
    jmp __b15
    // main::@15
  __b15:
    // [35] call print_mulf8s127 
    // [51] phi from main::@15 to print_mulf8s127 [phi:main::@15->print_mulf8s127]
  print_mulf8s127_from___b15:
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) $7f [phi:main::@15->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #$7f
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) $40 [phi:main::@15->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #$40
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [36] phi from main::@15 to main::@16 [phi:main::@15->main::@16]
  __b16_from___b15:
    jmp __b16
    // main::@16
  __b16:
    // [37] call print_mulf8s127 
    // [51] phi from main::@16 to print_mulf8s127 [phi:main::@16->print_mulf8s127]
  print_mulf8s127_from___b16:
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) $40 [phi:main::@16->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #$40
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) -$40 [phi:main::@16->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #-$40
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [38] phi from main::@16 to main::@17 [phi:main::@16->main::@17]
  __b17_from___b16:
    jmp __b17
    // main::@17
  __b17:
    // [39] call print_mulf8s127 
    // [51] phi from main::@17 to print_mulf8s127 [phi:main::@17->print_mulf8s127]
  print_mulf8s127_from___b17:
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) -$40 [phi:main::@17->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #-$40
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) $40 [phi:main::@17->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #$40
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [40] phi from main::@17 to main::@18 [phi:main::@17->main::@18]
  __b18_from___b17:
    jmp __b18
    // main::@18
  __b18:
    // [41] call print_mulf8s127 
    // [51] phi from main::@18 to print_mulf8s127 [phi:main::@18->print_mulf8s127]
  print_mulf8s127_from___b18:
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) -$40 [phi:main::@18->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #-$40
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) -$40 [phi:main::@18->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #-$40
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [42] phi from main::@18 to main::@19 [phi:main::@18->main::@19]
  __b19_from___b18:
    jmp __b19
    // main::@19
  __b19:
    // [43] call print_mulf8s127 
    // [51] phi from main::@19 to print_mulf8s127 [phi:main::@19->print_mulf8s127]
  print_mulf8s127_from___b19:
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) $7f [phi:main::@19->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #$7f
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) $7f [phi:main::@19->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #$7f
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [44] phi from main::@19 to main::@20 [phi:main::@19->main::@20]
  __b20_from___b19:
    jmp __b20
    // main::@20
  __b20:
    // [45] call print_mulf8s127 
    // [51] phi from main::@20 to print_mulf8s127 [phi:main::@20->print_mulf8s127]
  print_mulf8s127_from___b20:
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) $7f [phi:main::@20->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #$7f
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) -$7f [phi:main::@20->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #-$7f
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [46] phi from main::@20 to main::@21 [phi:main::@20->main::@21]
  __b21_from___b20:
    jmp __b21
    // main::@21
  __b21:
    // [47] call print_mulf8s127 
    // [51] phi from main::@21 to print_mulf8s127 [phi:main::@21->print_mulf8s127]
  print_mulf8s127_from___b21:
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) -$7f [phi:main::@21->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #-$7f
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) $7f [phi:main::@21->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #$7f
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [48] phi from main::@21 to main::@22 [phi:main::@21->main::@22]
  __b22_from___b21:
    jmp __b22
    // main::@22
  __b22:
    // [49] call print_mulf8s127 
    // [51] phi from main::@22 to print_mulf8s127 [phi:main::@22->print_mulf8s127]
  print_mulf8s127_from___b22:
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) -$7f [phi:main::@22->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #-$7f
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) -$7f [phi:main::@22->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #-$7f
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    jmp __breturn
    // main::@return
  __breturn:
    // [50] return 
    rts
    str: .text "unsigned"
    .byte 0
    str1: .text "signed"
    .byte 0
}
  // print_mulf8s127
// print_mulf8s127(signed byte zp(9) a, signed byte zp(2) b)
print_mulf8s127: {
    .label c = 7
    .label a = 9
    .label b = 2
    // [52] (signed byte) mulf8s127::a#0 ← (signed byte) print_mulf8s127::a#10
    // [53] (signed byte) mulf8s127::b#0 ← (signed byte) print_mulf8s127::b#10 -- vbsyy=vbsz1 
    ldy.z b
    // [54] call mulf8s127 
    jsr mulf8s127
    // [55] (signed word) mulf8s127::return#0 ← (signed word) mulf8s127::return#1
    jmp __b1
    // print_mulf8s127::@1
  __b1:
    // [56] (signed word) print_mulf8s127::c#0 ← (signed word) mulf8s127::return#0
    // [57] (signed byte) print_s8::b#1 ← (signed byte) print_mulf8s127::a#10 -- vbsxx=vbsz1 
    ldx.z a
    // [58] (byte*) print_char_cursor#148 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [59] call print_s8 
    // [104] phi from print_mulf8s127::@1 to print_s8 [phi:print_mulf8s127::@1->print_s8]
  print_s8_from___b1:
    // [104] phi (byte*) print_char_cursor#127 = (byte*) print_char_cursor#148 [phi:print_mulf8s127::@1->print_s8#0] -- register_copy 
    // [104] phi (signed byte) print_s8::b#3 = (signed byte) print_s8::b#1 [phi:print_mulf8s127::@1->print_s8#1] -- register_copy 
    jsr print_s8
    // [60] phi from print_mulf8s127::@1 to print_mulf8s127::@2 [phi:print_mulf8s127::@1->print_mulf8s127::@2]
  __b2_from___b1:
    jmp __b2
    // print_mulf8s127::@2
  __b2:
    // [61] call print_char 
    // [86] phi from print_mulf8s127::@2 to print_char [phi:print_mulf8s127::@2->print_char]
  print_char_from___b2:
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#19 [phi:print_mulf8s127::@2->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) '*' [phi:print_mulf8s127::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'*'
    jsr print_char
    jmp __b3
    // print_mulf8s127::@3
  __b3:
    // [62] (signed byte) print_s8::b#2 ← (signed byte) print_mulf8s127::b#10 -- vbsxx=vbsz1 
    ldx.z b
    // [63] call print_s8 
    // [104] phi from print_mulf8s127::@3 to print_s8 [phi:print_mulf8s127::@3->print_s8]
  print_s8_from___b3:
    // [104] phi (byte*) print_char_cursor#127 = (byte*) print_char_cursor#19 [phi:print_mulf8s127::@3->print_s8#0] -- register_copy 
    // [104] phi (signed byte) print_s8::b#3 = (signed byte) print_s8::b#2 [phi:print_mulf8s127::@3->print_s8#1] -- register_copy 
    jsr print_s8
    // [64] phi from print_mulf8s127::@3 to print_mulf8s127::@4 [phi:print_mulf8s127::@3->print_mulf8s127::@4]
  __b4_from___b3:
    jmp __b4
    // print_mulf8s127::@4
  __b4:
    // [65] call print_char 
    // [86] phi from print_mulf8s127::@4 to print_char [phi:print_mulf8s127::@4->print_char]
  print_char_from___b4:
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#19 [phi:print_mulf8s127::@4->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) '=' [phi:print_mulf8s127::@4->print_char#1] -- vbuaa=vbuc1 
    lda #'='
    jsr print_char
    jmp __b5
    // print_mulf8s127::@5
  __b5:
    // [66] (signed word) print_sint::w#1 ← (signed word) print_mulf8s127::c#0
    // [67] call print_sint 
    jsr print_sint
    // [68] phi from print_mulf8s127::@5 to print_mulf8s127::@6 [phi:print_mulf8s127::@5->print_mulf8s127::@6]
  __b6_from___b5:
    jmp __b6
    // print_mulf8s127::@6
  __b6:
    // [69] call print_ln 
    // [71] phi from print_mulf8s127::@6 to print_ln [phi:print_mulf8s127::@6->print_ln]
  print_ln_from___b6:
    // [71] phi (byte*) print_char_cursor#123 = (byte*) print_char_cursor#19 [phi:print_mulf8s127::@6->print_ln#0] -- register_copy 
    // [71] phi (byte*) print_line_cursor#63 = (byte*) print_line_cursor#1 [phi:print_mulf8s127::@6->print_ln#1] -- register_copy 
    jsr print_ln
    jmp __breturn
    // print_mulf8s127::@return
  __breturn:
    // [70] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [72] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [72] phi (byte*) print_line_cursor#32 = (byte*) print_line_cursor#63 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [73] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#32 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [74] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#123) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [75] return 
    rts
}
  // print_sint
// Print a signed int as HEX
// print_sint(signed word zp(7) w)
print_sint: {
    .label w = 7
    // [76] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1_from_print_sint
    // [77] phi from print_sint to print_sint::@3 [phi:print_sint->print_sint::@3]
  __b3_from_print_sint:
    jmp __b3
    // print_sint::@3
  __b3:
    // [78] call print_char 
    // [86] phi from print_sint::@3 to print_char [phi:print_sint::@3->print_char]
  print_char_from___b3:
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#19 [phi:print_sint::@3->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) ' ' [phi:print_sint::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [79] phi from print_sint::@3 print_sint::@4 to print_sint::@2 [phi:print_sint::@3/print_sint::@4->print_sint::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [79] phi (signed word) print_sint::w#4 = (signed word) print_sint::w#1 [phi:print_sint::@3/print_sint::@4->print_sint::@2#0] -- register_copy 
    jmp __b2
    // print_sint::@2
  __b2:
    // [80] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#4
    // [81] call print_uint 
    // [90] phi from print_sint::@2 to print_uint [phi:print_sint::@2->print_uint]
  print_uint_from___b2:
    // [90] phi (word) print_uint::w#2 = (word) print_uint::w#0 [phi:print_sint::@2->print_uint#0] -- register_copy 
    jsr print_uint
    jmp __breturn
    // print_sint::@return
  __breturn:
    // [82] return 
    rts
    // [83] phi from print_sint to print_sint::@1 [phi:print_sint->print_sint::@1]
  __b1_from_print_sint:
    jmp __b1
    // print_sint::@1
  __b1:
    // [84] call print_char 
    // [86] phi from print_sint::@1 to print_char [phi:print_sint::@1->print_char]
  print_char_from___b1:
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#19 [phi:print_sint::@1->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) '-' [phi:print_sint::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_sint::@4
  __b4:
    // [85] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2_from___b4
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // [87] *((byte*) print_char_cursor#80) ← (byte) print_char::ch#10 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [88] (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#80 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    jmp __breturn
    // print_char::@return
  __breturn:
    // [89] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp(7) w)
print_uint: {
    .label w = 7
    // [91] (byte) print_u8::b#1 ← > (word) print_uint::w#2 -- vbuxx=_hi_vwuz1 
    ldx.z w+1
    // [92] call print_u8 
    // [96] phi from print_uint to print_u8 [phi:print_uint->print_u8]
  print_u8_from_print_uint:
    // [96] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#19 [phi:print_uint->print_u8#0] -- register_copy 
    // [96] phi (byte) print_u8::b#5 = (byte) print_u8::b#1 [phi:print_uint->print_u8#1] -- register_copy 
    jsr print_u8
    jmp __b1
    // print_uint::@1
  __b1:
    // [93] (byte) print_u8::b#2 ← < (word) print_uint::w#2 -- vbuxx=_lo_vwuz1 
    ldx.z w
    // [94] call print_u8 
    // [96] phi from print_uint::@1 to print_u8 [phi:print_uint::@1->print_u8]
  print_u8_from___b1:
    // [96] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#19 [phi:print_uint::@1->print_u8#0] -- register_copy 
    // [96] phi (byte) print_u8::b#5 = (byte) print_u8::b#2 [phi:print_uint::@1->print_u8#1] -- register_copy 
    jsr print_u8
    jmp __breturn
    // print_uint::@return
  __breturn:
    // [95] return 
    rts
}
  // print_u8
// Print a char as HEX
// print_u8(byte register(X) b)
print_u8: {
    // [97] (byte~) print_u8::$0 ← (byte) print_u8::b#5 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // [98] (byte) print_char::ch#4 ← *((const to_nomodify byte*) print_hextab + (byte~) print_u8::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [99] call print_char 
  // Table of hexadecimal digits
    // [86] phi from print_u8 to print_char [phi:print_u8->print_char]
  print_char_from_print_u8:
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#131 [phi:print_u8->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) print_char::ch#4 [phi:print_u8->print_char#1] -- register_copy 
    jsr print_char
    jmp __b1
    // print_u8::@1
  __b1:
    // [100] (byte~) print_u8::$2 ← (byte) print_u8::b#5 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // [101] (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (byte~) print_u8::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [102] call print_char 
    // [86] phi from print_u8::@1 to print_char [phi:print_u8::@1->print_char]
  print_char_from___b1:
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#19 [phi:print_u8::@1->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) print_char::ch#5 [phi:print_u8::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp __breturn
    // print_u8::@return
  __breturn:
    // [103] return 
    rts
}
  // print_s8
// Print a signed char as HEX
// print_s8(signed byte register(X) b)
print_s8: {
    // [105] if((signed byte) print_s8::b#3<(signed byte) 0) goto print_s8::@1 -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi __b1_from_print_s8
    // [106] phi from print_s8 to print_s8::@3 [phi:print_s8->print_s8::@3]
  __b3_from_print_s8:
    jmp __b3
    // print_s8::@3
  __b3:
    // [107] call print_char 
    // [86] phi from print_s8::@3 to print_char [phi:print_s8::@3->print_char]
  print_char_from___b3:
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#127 [phi:print_s8::@3->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) ' ' [phi:print_s8::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [108] phi from print_s8::@3 print_s8::@4 to print_s8::@2 [phi:print_s8::@3/print_s8::@4->print_s8::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [108] phi (signed byte) print_s8::b#5 = (signed byte) print_s8::b#3 [phi:print_s8::@3/print_s8::@4->print_s8::@2#0] -- register_copy 
    jmp __b2
    // print_s8::@2
  __b2:
    // [109] (byte) print_u8::b#0 ← (byte)(signed byte) print_s8::b#5
    // [110] call print_u8 
    // [96] phi from print_s8::@2 to print_u8 [phi:print_s8::@2->print_u8]
  print_u8_from___b2:
    // [96] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#19 [phi:print_s8::@2->print_u8#0] -- register_copy 
    // [96] phi (byte) print_u8::b#5 = (byte) print_u8::b#0 [phi:print_s8::@2->print_u8#1] -- register_copy 
    jsr print_u8
    jmp __breturn
    // print_s8::@return
  __breturn:
    // [111] return 
    rts
    // [112] phi from print_s8 to print_s8::@1 [phi:print_s8->print_s8::@1]
  __b1_from_print_s8:
    jmp __b1
    // print_s8::@1
  __b1:
    // [113] call print_char 
    // [86] phi from print_s8::@1 to print_char [phi:print_s8::@1->print_char]
  print_char_from___b1:
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#127 [phi:print_s8::@1->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) '-' [phi:print_s8::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp __b4
    // print_s8::@4
  __b4:
    // [114] (signed byte) print_s8::b#0 ← - (signed byte) print_s8::b#3 -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
    jmp __b2_from___b4
}
  // mulf8s127
// mulf8s127(signed byte zp(9) a, signed byte register(Y) b)
mulf8s127: {
    .label __12 = $a
    .label __13 = $a
    .label __14 = $c
    .label __15 = $c
    .label a = 9
    .label return = 7
    .label c = 7
    // [115] (byte) mulf8u127::a#1 ← (byte)(signed byte) mulf8s127::a#0 -- vbuxx=vbuz1 
    ldx.z a
    // [116] (byte) mulf8u127::b#1 ← (byte)(signed byte) mulf8s127::b#0 -- vbuaa=vbuyy 
    tya
    // [117] call mulf8u127 
    // [136] phi from mulf8s127 to mulf8u127 [phi:mulf8s127->mulf8u127]
  mulf8u127_from_mulf8s127:
    // [136] phi (byte) mulf8u127::b#2 = (byte) mulf8u127::b#1 [phi:mulf8s127->mulf8u127#0] -- register_copy 
    // [136] phi (byte) mulf8u127::a#2 = (byte) mulf8u127::a#1 [phi:mulf8s127->mulf8u127#1] -- register_copy 
    jsr mulf8u127
    // [118] (word) mulf8u127::return#3 ← (word) mulf8u127::return#1
    jmp __b7
    // mulf8s127::@7
  __b7:
    // [119] (word) mulf8s127::c#0 ← (word) mulf8u127::return#3
    // [120] if((signed byte) mulf8s127::a#0>=(signed byte) 0) goto mulf8s127::@9 -- vbsz1_ge_0_then_la1 
    lda.z a
    cmp #0
    bpl __b9
    jmp __b4
    // mulf8s127::@4
  __b4:
    // [121] (signed word~) mulf8s127::$12 ← (signed word)(signed byte) mulf8s127::b#0 -- vwsz1=_sword_vbsyy 
    tya
    sta.z __12
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z __12+1
    // [122] (signed word~) mulf8s127::$13 ← (signed word~) mulf8s127::$12 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl.z __13
    rol.z __13+1
    // [123] (signed word) mulf8s127::c#1 ← (signed word)(word) mulf8s127::c#0 - (signed word~) mulf8s127::$13 -- vwsz1=vwsz1_minus_vwsz2 
    lda.z c
    sec
    sbc.z __13
    sta.z c
    lda.z c+1
    sbc.z __13+1
    sta.z c+1
    // [124] phi from mulf8s127::@4 mulf8s127::@9 to mulf8s127::@1 [phi:mulf8s127::@4/mulf8s127::@9->mulf8s127::@1]
  __b1_from___b4:
  __b1_from___b9:
    // [124] phi (signed word) mulf8s127::c#5 = (signed word) mulf8s127::c#1 [phi:mulf8s127::@4/mulf8s127::@9->mulf8s127::@1#0] -- register_copy 
    jmp __b1
    // mulf8s127::@1
  __b1:
    // [125] if((signed byte) mulf8s127::b#0>=(signed byte) 0) goto mulf8s127::@2 -- vbsyy_ge_0_then_la1 
    cpy #0
    bpl __b2_from___b1
    jmp __b5
    // mulf8s127::@5
  __b5:
    // [126] (signed word~) mulf8s127::$14 ← (signed word)(signed byte) mulf8s127::a#0 -- vwsz1=_sword_vbsz2 
    lda.z a
    sta.z __14
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z __14+1
    // [127] (signed word~) mulf8s127::$15 ← (signed word~) mulf8s127::$14 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl.z __15
    rol.z __15+1
    // [128] (signed word) mulf8s127::c#2 ← (signed word) mulf8s127::c#5 - (signed word~) mulf8s127::$15 -- vwsz1=vwsz1_minus_vwsz2 
    lda.z c
    sec
    sbc.z __15
    sta.z c
    lda.z c+1
    sbc.z __15+1
    sta.z c+1
    // [129] phi from mulf8s127::@1 mulf8s127::@5 to mulf8s127::@2 [phi:mulf8s127::@1/mulf8s127::@5->mulf8s127::@2]
  __b2_from___b1:
  __b2_from___b5:
    // [129] phi (signed word) mulf8s127::c#7 = (signed word) mulf8s127::c#5 [phi:mulf8s127::@1/mulf8s127::@5->mulf8s127::@2#0] -- register_copy 
    jmp __b2
    // mulf8s127::@2
  __b2:
    // [130] if((signed byte) mulf8s127::a#0>=(signed byte) 0) goto mulf8s127::@3 -- vbsz1_ge_0_then_la1 
    lda.z a
    cmp #0
    bpl __b3_from___b2
    jmp __b8
    // mulf8s127::@8
  __b8:
    // [131] if((signed byte) mulf8s127::b#0>=(signed byte) 0) goto mulf8s127::@3 -- vbsyy_ge_0_then_la1 
    cpy #0
    bpl __b3_from___b8
    jmp __b6
    // mulf8s127::@6
  __b6:
    // [132] (signed word) mulf8s127::c#3 ← (signed word) mulf8s127::c#7 - (signed word) $200 -- vwsz1=vwsz1_minus_vwsc1 
    lda.z c
    sec
    sbc #<$200
    sta.z c
    lda.z c+1
    sbc #>$200
    sta.z c+1
    // [133] phi from mulf8s127::@2 mulf8s127::@6 to mulf8s127::@3 [phi:mulf8s127::@2/mulf8s127::@6->mulf8s127::@3]
  __b3_from___b2:
  __b3_from___b6:
    // [133] phi (signed word) mulf8s127::return#1 = (signed word) mulf8s127::c#7 [phi:mulf8s127::@2/mulf8s127::@6->mulf8s127::@3#0] -- register_copy 
    jmp __b3
    // [133] phi from mulf8s127::@8 to mulf8s127::@3 [phi:mulf8s127::@8->mulf8s127::@3]
  __b3_from___b8:
    jmp __b3
    // mulf8s127::@3
  __b3:
    jmp __breturn
    // mulf8s127::@return
  __breturn:
    // [134] return 
    rts
    // mulf8s127::@9
  __b9:
    // [135] (signed word) mulf8s127::c#11 ← (signed word)(word) mulf8s127::c#0
    jmp __b1_from___b9
}
  // mulf8u127
// mulf8u127(byte register(X) a, byte register(A) b)
mulf8u127: {
    .label memA = $fc
    .label memB = $fd
    .label res = $fe
    .label resL = $fe
    .label resH = $ff
    .label return = 7
    // [137] *((const nomodify byte*) mulf8u127::memA) ← (byte) mulf8u127::a#2 -- _deref_pbuc1=vbuxx 
    stx memA
    // [138] *((const nomodify byte*) mulf8u127::memB) ← (byte) mulf8u127::b#2 -- _deref_pbuc1=vbuaa 
    sta memB
    // asm { ldamemA stasm1+1 stasm3+1 eor#$ff stasm2+1 stasm4+1 ldxmemB sec sm1: ldamulf127_sqr1_lo,x sm2: sbcmulf127_sqr2_lo,x staresL sm3: ldamulf127_sqr1_hi,x sm4: sbcmulf127_sqr2_hi,x staresH  }
    lda memA
    sta sm1+1
    sta sm3+1
    eor #$ff
    sta sm2+1
    sta sm4+1
    ldx memB
    sec
  sm1:
    lda mulf127_sqr1_lo,x
  sm2:
    sbc mulf127_sqr2_lo,x
    sta resL
  sm3:
    lda mulf127_sqr1_hi,x
  sm4:
    sbc mulf127_sqr2_hi,x
    sta resH
    // [140] (word) mulf8u127::return#1 ← *((const nomodify word*) mulf8u127::res) -- vwuz1=_deref_pwuc1 
    lda res
    sta.z return
    lda res+1
    sta.z return+1
    jmp __breturn
    // mulf8u127::@return
  __breturn:
    // [141] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp(7) str)
print_str: {
    .label str = 7
    // [143] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  __b1_from_print_str:
  __b1_from___b2:
    // [143] phi (byte*) print_char_cursor#122 = (byte*) print_char_cursor#136 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
    // [143] phi (byte*) print_str::str#3 = (byte*) print_str::str#5 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [144] if((byte) 0!=*((byte*) print_str::str#3)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [145] return 
    rts
    // print_str::@2
  __b2:
    // [146] *((byte*) print_char_cursor#122) ← *((byte*) print_str::str#3) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
    // [147] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#122 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // [148] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b2
}
  // print_mulf8u127
// print_mulf8u127(byte register(Y) a, byte zp(9) b)
print_mulf8u127: {
    .label c = 7
    .label b = 9
    // [150] (byte) mulf8u127::a#0 ← (byte) print_mulf8u127::a#8 -- vbuxx=vbuyy 
    tya
    tax
    // [151] (byte) mulf8u127::b#0 ← (byte) print_mulf8u127::b#10 -- vbuaa=vbuz1 
    lda.z b
    // [152] call mulf8u127 
    // [136] phi from print_mulf8u127 to mulf8u127 [phi:print_mulf8u127->mulf8u127]
  mulf8u127_from_print_mulf8u127:
    // [136] phi (byte) mulf8u127::b#2 = (byte) mulf8u127::b#0 [phi:print_mulf8u127->mulf8u127#0] -- register_copy 
    // [136] phi (byte) mulf8u127::a#2 = (byte) mulf8u127::a#0 [phi:print_mulf8u127->mulf8u127#1] -- register_copy 
    jsr mulf8u127
    // [153] (word) mulf8u127::return#0 ← (word) mulf8u127::return#1
    jmp __b1
    // print_mulf8u127::@1
  __b1:
    // [154] (word) print_mulf8u127::c#0 ← (word) mulf8u127::return#0
    // [155] (byte) print_u8::b#3 ← (byte) print_mulf8u127::a#8 -- vbuxx=vbuyy 
    tya
    tax
    // [156] (byte*) print_char_cursor#150 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // [157] call print_u8 
    // [96] phi from print_mulf8u127::@1 to print_u8 [phi:print_mulf8u127::@1->print_u8]
  print_u8_from___b1:
    // [96] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#150 [phi:print_mulf8u127::@1->print_u8#0] -- register_copy 
    // [96] phi (byte) print_u8::b#5 = (byte) print_u8::b#3 [phi:print_mulf8u127::@1->print_u8#1] -- register_copy 
    jsr print_u8
    // [158] phi from print_mulf8u127::@1 to print_mulf8u127::@2 [phi:print_mulf8u127::@1->print_mulf8u127::@2]
  __b2_from___b1:
    jmp __b2
    // print_mulf8u127::@2
  __b2:
    // [159] call print_char 
    // [86] phi from print_mulf8u127::@2 to print_char [phi:print_mulf8u127::@2->print_char]
  print_char_from___b2:
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#19 [phi:print_mulf8u127::@2->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) '*' [phi:print_mulf8u127::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'*'
    jsr print_char
    jmp __b3
    // print_mulf8u127::@3
  __b3:
    // [160] (byte) print_u8::b#4 ← (byte) print_mulf8u127::b#10 -- vbuxx=vbuz1 
    ldx.z b
    // [161] call print_u8 
    // [96] phi from print_mulf8u127::@3 to print_u8 [phi:print_mulf8u127::@3->print_u8]
  print_u8_from___b3:
    // [96] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#19 [phi:print_mulf8u127::@3->print_u8#0] -- register_copy 
    // [96] phi (byte) print_u8::b#5 = (byte) print_u8::b#4 [phi:print_mulf8u127::@3->print_u8#1] -- register_copy 
    jsr print_u8
    // [162] phi from print_mulf8u127::@3 to print_mulf8u127::@4 [phi:print_mulf8u127::@3->print_mulf8u127::@4]
  __b4_from___b3:
    jmp __b4
    // print_mulf8u127::@4
  __b4:
    // [163] call print_char 
    // [86] phi from print_mulf8u127::@4 to print_char [phi:print_mulf8u127::@4->print_char]
  print_char_from___b4:
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#19 [phi:print_mulf8u127::@4->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) '=' [phi:print_mulf8u127::@4->print_char#1] -- vbuaa=vbuc1 
    lda #'='
    jsr print_char
    jmp __b5
    // print_mulf8u127::@5
  __b5:
    // [164] (word) print_uint::w#1 ← (word) print_mulf8u127::c#0
    // [165] call print_uint 
    // [90] phi from print_mulf8u127::@5 to print_uint [phi:print_mulf8u127::@5->print_uint]
  print_uint_from___b5:
    // [90] phi (word) print_uint::w#2 = (word) print_uint::w#1 [phi:print_mulf8u127::@5->print_uint#0] -- register_copy 
    jsr print_uint
    // [166] phi from print_mulf8u127::@5 to print_mulf8u127::@6 [phi:print_mulf8u127::@5->print_mulf8u127::@6]
  __b6_from___b5:
    jmp __b6
    // print_mulf8u127::@6
  __b6:
    // [167] call print_ln 
    // [71] phi from print_mulf8u127::@6 to print_ln [phi:print_mulf8u127::@6->print_ln]
  print_ln_from___b6:
    // [71] phi (byte*) print_char_cursor#123 = (byte*) print_char_cursor#19 [phi:print_mulf8u127::@6->print_ln#0] -- register_copy 
    // [71] phi (byte*) print_line_cursor#63 = (byte*) print_line_cursor#1 [phi:print_mulf8u127::@6->print_ln#1] -- register_copy 
    jsr print_ln
    jmp __breturn
    // print_mulf8u127::@return
  __breturn:
    // [168] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [170] call memset 
    // [172] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [171] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $a
    // [173] phi from memset to memset::@1 [phi:memset->memset::@1]
  __b1_from_memset:
    // [173] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    jmp __b1
    // memset::@1
  __b1:
    // [174] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    jmp __breturn
    // memset::@return
  __breturn:
    // [175] return 
    rts
    // memset::@2
  __b2:
    // [176] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [177] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [173] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
  __b1_from___b2:
    // [173] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  // mulf_sqr tables will contain f(x)=int(x*x/4) and g(x) = f(x-255).
  // f(x) = ( x * x )/4
  .align $100
mulf127_sqr1_lo:
.fill 512, <round((i/127*i/127)*127/4) 
  .align $100
mulf127_sqr1_hi:
.fill 512, >round((i/127*i/127)*127/4) 
  // g(x) =  <((( x - 255) * ( x - 255 ))/4)
  .align $100
mulf127_sqr2_lo:
.fill 512, <round(((i-255)/127*(i-255)/127)*127/4) 
  .align $100
mulf127_sqr2_hi:
.fill 512, >round(((i-255)/127*(i-255)/127)*127/4) 

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __b16
Removing instruction jmp __b17
Removing instruction jmp __b18
Removing instruction jmp __b19
Removing instruction jmp __b20
Removing instruction jmp __b21
Removing instruction jmp __b22
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b1
Removing instruction jmp __b5
Removing instruction jmp __b2
Removing instruction jmp __b8
Removing instruction jmp __b6
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldy #0 with TAY
Replacing instruction ldy #$7f with TAY
Replacing instruction ldy #$40 with TAY
Replacing instruction ldy #$c0 with TAY
Replacing instruction ldy #$ff with TAY
Removing instruction lda #0
Removing instruction lda #$40
Removing instruction lda #-$40
Removing instruction lda #$7f
Removing instruction lda #-$7f
Replacing instruction lda memA with TXA
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from_print_sint with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from_print_s8 with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3_from___b6
Replacing label __b3_from___b8 with __b3
Replacing label __b1_from___b9 with __b1
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from_main:
Removing instruction print_str_from___b1:
Removing instruction __b2_from___b1:
Removing instruction print_ln_from___b2:
Removing instruction __b3_from___b2:
Removing instruction print_mulf8u127_from___b3:
Removing instruction __b4_from___b3:
Removing instruction print_mulf8u127_from___b4:
Removing instruction __b5_from___b4:
Removing instruction print_mulf8u127_from___b5:
Removing instruction __b6_from___b5:
Removing instruction print_mulf8u127_from___b6:
Removing instruction __b7_from___b6:
Removing instruction print_mulf8u127_from___b7:
Removing instruction __b8_from___b7:
Removing instruction print_mulf8u127_from___b8:
Removing instruction __b9_from___b8:
Removing instruction print_mulf8u127_from___b9:
Removing instruction __b10_from___b9:
Removing instruction print_mulf8u127_from___b10:
Removing instruction __b12_from___b11:
Removing instruction print_ln_from___b12:
Removing instruction __b13_from___b12:
Removing instruction print_mulf8s127_from___b13:
Removing instruction __b14_from___b13:
Removing instruction print_mulf8s127_from___b14:
Removing instruction __b15_from___b14:
Removing instruction print_mulf8s127_from___b15:
Removing instruction __b16_from___b15:
Removing instruction print_mulf8s127_from___b16:
Removing instruction __b17_from___b16:
Removing instruction print_mulf8s127_from___b17:
Removing instruction __b18_from___b17:
Removing instruction print_mulf8s127_from___b18:
Removing instruction __b19_from___b18:
Removing instruction print_mulf8s127_from___b19:
Removing instruction __b20_from___b19:
Removing instruction print_mulf8s127_from___b20:
Removing instruction __b21_from___b20:
Removing instruction print_mulf8s127_from___b21:
Removing instruction __b22_from___b21:
Removing instruction print_mulf8s127_from___b22:
Removing instruction __b2_from___b1:
Removing instruction print_char_from___b2:
Removing instruction __b4_from___b3:
Removing instruction print_char_from___b4:
Removing instruction __b6_from___b5:
Removing instruction print_ln_from___b6:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b1:
Removing instruction __b3_from_print_sint:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction print_uint_from___b2:
Removing instruction __b1_from_print_sint:
Removing instruction print_char_from___b1:
Removing instruction __b3_from_print_s8:
Removing instruction print_char_from___b3:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction print_u8_from___b2:
Removing instruction __b1_from_print_s8:
Removing instruction print_char_from___b1:
Removing instruction __b1_from___b4:
Removing instruction __b1_from___b9:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b5:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b8:
Removing instruction __breturn:
Removing instruction __b1_from_print_str:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b1:
Removing instruction print_char_from___b2:
Removing instruction __b4_from___b3:
Removing instruction print_char_from___b4:
Removing instruction print_uint_from___b5:
Removing instruction __b6_from___b5:
Removing instruction print_ln_from___b6:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction print_cls_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction print_str_from___b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction __b16:
Removing instruction __b17:
Removing instruction __b18:
Removing instruction __b19:
Removing instruction __b20:
Removing instruction __b21:
Removing instruction __b22:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction print_s8_from___b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction print_s8_from___b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction print_u8_from_print_uint:
Removing instruction __b1:
Removing instruction print_u8_from___b1:
Removing instruction __breturn:
Removing instruction print_char_from_print_u8:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction mulf8u127_from_mulf8s127:
Removing instruction __b7:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b8:
Removing instruction __b6:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction mulf8u127_from_print_mulf8u127:
Removing instruction __b1:
Removing instruction print_u8_from___b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction print_u8_from___b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __breturn:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __b1_from_memset:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Skipping double jump to __b1 in bpl __b9
Skipping double jump to __b3 in bpl __b3_from___b6
Replacing jump to rts with rts in jmp __b3
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b3_from___b6 to __b4
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction __bbegin:
Removing instruction __b4:
Removing instruction __b9:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp __b1
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@17
(label) main::@18
(label) main::@19
(label) main::@2
(label) main::@20
(label) main::@21
(label) main::@22
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(const byte*) main::str[(byte) 9]  = (byte*) "unsigned"
(const byte*) main::str1[(byte) 7]  = (byte*) "signed"
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:10 20002.0
(byte*) memset::dst#2 dst zp[2]:10 13334.666666666666
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(byte*) 1024
(const byte*) mulf127_sqr1_hi[(number) $200]  = kickasm {{ .fill 512, >round((i/127*i/127)*127/4)  }}
(const byte*) mulf127_sqr1_lo[(number) $200]  = kickasm {{ .fill 512, <round((i/127*i/127)*127/4)  }}
(const byte*) mulf127_sqr2_hi[(number) $200]  = kickasm {{ .fill 512, >round(((i-255)/127*(i-255)/127)*127/4)  }}
(const byte*) mulf127_sqr2_lo[(number) $200]  = kickasm {{ .fill 512, <round(((i-255)/127*(i-255)/127)*127/4)  }}
(signed word()) mulf8s127((signed byte) mulf8s127::a , (signed byte) mulf8s127::b)
(signed word~) mulf8s127::$12 zp[2]:10 2002.0
(signed word~) mulf8s127::$13 zp[2]:10 2002.0
(signed word~) mulf8s127::$14 zp[2]:12 2002.0
(signed word~) mulf8s127::$15 zp[2]:12 2002.0
(label) mulf8s127::@1
(label) mulf8s127::@2
(label) mulf8s127::@3
(label) mulf8s127::@4
(label) mulf8s127::@5
(label) mulf8s127::@6
(label) mulf8s127::@7
(label) mulf8s127::@8
(label) mulf8s127::@9
(label) mulf8s127::@return
(signed byte) mulf8s127::a
(signed byte) mulf8s127::a#0 a zp[1]:9 116.83333333333334
(signed byte) mulf8s127::b
(signed byte) mulf8s127::b#0 reg byte y 116.83333333333334
(signed word) mulf8s127::c
(word) mulf8s127::c#0 c zp[2]:7 250.25
(signed word) mulf8s127::c#1 c zp[2]:7 2002.0
(signed word) mulf8s127::c#11 c zp[2]:7 2002.0
(signed word) mulf8s127::c#2 c zp[2]:7 2002.0
(signed word) mulf8s127::c#3 c zp[2]:7 2002.0
(signed word) mulf8s127::c#5 c zp[2]:7 1001.0
(signed word) mulf8s127::c#7 c zp[2]:7 1334.6666666666667
(signed word) mulf8s127::return
(signed word) mulf8s127::return#0 return zp[2]:7 202.0
(signed word) mulf8s127::return#1 return zp[2]:7 701.0
(word()) mulf8u127((byte) mulf8u127::a , (byte) mulf8u127::b)
(label) mulf8u127::@return
(byte) mulf8u127::a
(byte) mulf8u127::a#0 reg byte x 101.0
(byte) mulf8u127::a#1 reg byte x 1001.0
(byte) mulf8u127::a#2 reg byte x 11103.0
(byte) mulf8u127::b
(byte) mulf8u127::b#0 reg byte a 202.0
(byte) mulf8u127::b#1 reg byte a 2002.0
(byte) mulf8u127::b#2 reg byte a 5551.5
(const nomodify byte*) mulf8u127::memA = (byte*) 252
(const nomodify byte*) mulf8u127::memB = (byte*) 253
(const nomodify word*) mulf8u127::res = (word*) 254
(const nomodify byte*) mulf8u127::resH = (byte*) 255
(const nomodify byte*) mulf8u127::resL = (byte*) 254
(word) mulf8u127::return
(word) mulf8u127::return#0 return zp[2]:7 202.0
(word) mulf8u127::return#1 return zp[2]:7 2775.75
(word) mulf8u127::return#3 return zp[2]:7 2002.0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#10 reg byte a 1200003.0
(byte) print_char::ch#4 reg byte a 200002.0
(byte) print_char::ch#5 reg byte a 200002.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp[2]:5 1001.0
(byte*) print_char_cursor#122 print_char_cursor zp[2]:5 390.75
(byte*) print_char_cursor#123 print_char_cursor zp[2]:5 2556.25
(byte*) print_char_cursor#127 print_char_cursor zp[2]:5 551.0
(byte*) print_char_cursor#131 print_char_cursor zp[2]:5 40401.999999999985
(byte*) print_char_cursor#136 print_char_cursor zp[2]:5 112.0
(byte*) print_char_cursor#141 print_char_cursor zp[2]:5 22.0
(byte*) print_char_cursor#148 print_char_cursor zp[2]:5 202.0
(byte*) print_char_cursor#150 print_char_cursor zp[2]:5 202.0
(byte*) print_char_cursor#19 print_char_cursor zp[2]:5 22476.300000000003
(byte*) print_char_cursor#80 print_char_cursor zp[2]:5 1102206.0
(void()) print_cls()
(label) print_cls::@return
(const to_nomodify byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp[2]:3 366.6144578313253
(byte*) print_line_cursor#32 print_line_cursor zp[2]:3 21003.0
(byte*) print_line_cursor#63 print_line_cursor zp[2]:3 1214.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_mulf8s127((signed byte) print_mulf8s127::a , (signed byte) print_mulf8s127::b)
(label) print_mulf8s127::@1
(label) print_mulf8s127::@2
(label) print_mulf8s127::@3
(label) print_mulf8s127::@4
(label) print_mulf8s127::@5
(label) print_mulf8s127::@6
(label) print_mulf8s127::@return
(signed byte) print_mulf8s127::a
(signed byte) print_mulf8s127::a#10 a zp[1]:9 33.666666666666664
(signed byte) print_mulf8s127::b
(signed byte) print_mulf8s127::b#10 b zp[1]:2 18.363636363636363
(signed word) print_mulf8s127::c
(signed word) print_mulf8s127::c#0 c zp[2]:7 20.2
(void()) print_mulf8u127((byte) print_mulf8u127::a , (byte) print_mulf8u127::b)
(label) print_mulf8u127::@1
(label) print_mulf8u127::@2
(label) print_mulf8u127::@3
(label) print_mulf8u127::@4
(label) print_mulf8u127::@5
(label) print_mulf8u127::@6
(label) print_mulf8u127::@return
(byte) print_mulf8u127::a
(byte) print_mulf8u127::a#8 reg byte y 33.666666666666664
(byte) print_mulf8u127::b
(byte) print_mulf8u127::b#10 b zp[1]:9 18.363636363636363
(word) print_mulf8u127::c
(word) print_mulf8u127::c#0 c zp[2]:7 20.2
(void()) print_s8((signed byte) print_s8::b)
(label) print_s8::@1
(label) print_s8::@2
(label) print_s8::@3
(label) print_s8::@4
(label) print_s8::@return
(signed byte) print_s8::b
(signed byte) print_s8::b#0 reg byte x 2002.0
(signed byte) print_s8::b#1 reg byte x 101.0
(signed byte) print_s8::b#2 reg byte x 202.0
(signed byte) print_s8::b#3 reg byte x 534.1666666666667
(signed byte) print_s8::b#5 reg byte x 2002.0
(byte*) print_screen
(void()) print_sint((signed word) print_sint::w)
(label) print_sint::@1
(label) print_sint::@2
(label) print_sint::@3
(label) print_sint::@4
(label) print_sint::@return
(signed word) print_sint::w
(signed word) print_sint::w#0 w zp[2]:7 2002.0
(signed word) print_sint::w#1 w zp[2]:7 517.3333333333334
(signed word) print_sint::w#4 w zp[2]:7 2002.0
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp[2]:7 2002.0
(byte*) print_str::str#3 str zp[2]:7 1026.25
(byte*) print_str::str#5 str zp[2]:7 101.0
(void()) print_u8((byte) print_u8::b)
(byte~) print_u8::$0 reg byte a 200002.0
(byte~) print_u8::$2 reg byte x 200002.0
(label) print_u8::@1
(label) print_u8::@return
(byte) print_u8::b
(byte) print_u8::b#0 reg byte x 2002.0
(byte) print_u8::b#1 reg byte x 20002.0
(byte) print_u8::b#2 reg byte x 20002.0
(byte) print_u8::b#3 reg byte x 101.0
(byte) print_u8::b#4 reg byte x 202.0
(byte) print_u8::b#5 reg byte x 55301.75
(void()) print_uint((word) print_uint::w)
(label) print_uint::@1
(label) print_uint::@return
(word) print_uint::w
(word) print_uint::w#0 w zp[2]:7 2002.0
(word) print_uint::w#1 w zp[2]:7 202.0
(word) print_uint::w#2 w zp[2]:7 7034.666666666666

zp[1]:2 [ print_mulf8s127::b#10 ]
zp[2]:3 [ print_line_cursor#32 print_line_cursor#63 print_line_cursor#1 ]
reg byte a [ print_char::ch#10 print_char::ch#4 print_char::ch#5 ]
zp[2]:5 [ print_char_cursor#80 print_char_cursor#123 print_char_cursor#122 print_char_cursor#19 print_char_cursor#127 print_char_cursor#131 print_char_cursor#150 print_char_cursor#148 print_char_cursor#136 print_char_cursor#141 print_char_cursor#1 ]
reg byte x [ print_u8::b#5 print_u8::b#3 print_u8::b#4 print_u8::b#0 print_u8::b#1 print_u8::b#2 ]
reg byte x [ print_s8::b#5 print_s8::b#0 print_s8::b#3 print_s8::b#1 print_s8::b#2 ]
reg byte x [ mulf8u127::a#2 mulf8u127::a#1 mulf8u127::a#0 ]
reg byte a [ mulf8u127::b#2 mulf8u127::b#1 mulf8u127::b#0 ]
zp[2]:7 [ print_str::str#3 print_str::str#5 print_str::str#0 print_sint::w#4 print_sint::w#0 print_sint::w#1 print_uint::w#2 print_uint::w#1 print_uint::w#0 print_mulf8s127::c#0 mulf8s127::return#1 mulf8s127::c#7 mulf8s127::c#5 mulf8s127::c#1 mulf8s127::c#11 mulf8s127::c#2 mulf8s127::c#3 mulf8s127::c#0 mulf8s127::return#0 mulf8u127::return#0 print_mulf8u127::c#0 mulf8u127::return#3 mulf8u127::return#1 ]
reg byte y [ print_mulf8u127::a#8 ]
zp[1]:9 [ print_mulf8u127::b#10 print_mulf8s127::a#10 mulf8s127::a#0 ]
reg byte y [ mulf8s127::b#0 ]
reg byte a [ print_u8::$0 ]
reg byte x [ print_u8::$2 ]
zp[2]:10 [ mulf8s127::$12 mulf8s127::$13 memset::dst#2 memset::dst#1 ]
zp[2]:12 [ mulf8s127::$14 mulf8s127::$15 ]


FINAL ASSEMBLER
Score: 2356

  // File Comments
// An implementation of seriously fast multiply for integer values in the interval [-1;1] with the best possible precision
// NOTE: So far unsuccessful - since the handling of sign and values where a+b>sqrt2) makes the code slower than regular fast multiply
// In this model 255 binary represents 1.0 - meaning that 255*255 = 255
// Uses principles from C=Hacking #16 https://codebase64.org/doku.php?id=magazines:chacking16
// Utilizes the fact that a*b = ((a+b)/2)^2 - ((a-b)/2)^2
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label print_char_cursor = 5
  .label print_line_cursor = 3
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // print_cls()
    // [5] call print_cls 
    // [169] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
    // [6] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // print_str("unsigned")
    // [7] call print_str 
    // [142] phi from main::@1 to print_str [phi:main::@1->print_str]
    // [142] phi (byte*) print_char_cursor#136 = (byte*) 1024 [phi:main::@1->print_str#0] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_char_cursor
    lda #>$400
    sta.z print_char_cursor+1
    // [142] phi (byte*) print_str::str#5 = (const byte*) main::str [phi:main::@1->print_str#1] -- pbuz1=pbuc1 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // print_ln()
    // [9] call print_ln 
    // [71] phi from main::@2 to print_ln [phi:main::@2->print_ln]
    // [71] phi (byte*) print_char_cursor#123 = (byte*) print_char_cursor#122 [phi:main::@2->print_ln#0] -- register_copy 
    // [71] phi (byte*) print_line_cursor#63 = (byte*) 1024 [phi:main::@2->print_ln#1] -- pbuz1=pbuc1 
    lda #<$400
    sta.z print_line_cursor
    lda #>$400
    sta.z print_line_cursor+1
    jsr print_ln
    // [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // print_mulf8u127(0,0)
    // [11] call print_mulf8u127 
    // [149] phi from main::@3 to print_mulf8u127 [phi:main::@3->print_mulf8u127]
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) 0 [phi:main::@3->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #0
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) 0 [phi:main::@3->print_mulf8u127#1] -- vbuyy=vbuc1 
    tay
    jsr print_mulf8u127
    // [12] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // main::@4
    // print_mulf8u127(127,127)
    // [13] call print_mulf8u127 
    // [149] phi from main::@4 to print_mulf8u127 [phi:main::@4->print_mulf8u127]
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) $7f [phi:main::@4->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #$7f
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) $7f [phi:main::@4->print_mulf8u127#1] -- vbuyy=vbuc1 
    tay
    jsr print_mulf8u127
    // [14] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
    // main::@5
    // print_mulf8u127(64,64)
    // [15] call print_mulf8u127 
    // [149] phi from main::@5 to print_mulf8u127 [phi:main::@5->print_mulf8u127]
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) $40 [phi:main::@5->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #$40
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) $40 [phi:main::@5->print_mulf8u127#1] -- vbuyy=vbuc1 
    tay
    jsr print_mulf8u127
    // [16] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
    // main::@6
    // print_mulf8u127(64,127)
    // [17] call print_mulf8u127 
    // [149] phi from main::@6 to print_mulf8u127 [phi:main::@6->print_mulf8u127]
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) $7f [phi:main::@6->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #$7f
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) $40 [phi:main::@6->print_mulf8u127#1] -- vbuyy=vbuc1 
    ldy #$40
    jsr print_mulf8u127
    // [18] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
    // main::@7
    // print_mulf8u127(64,192)
    // [19] call print_mulf8u127 
    // [149] phi from main::@7 to print_mulf8u127 [phi:main::@7->print_mulf8u127]
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) $c0 [phi:main::@7->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #$c0
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) $40 [phi:main::@7->print_mulf8u127#1] -- vbuyy=vbuc1 
    ldy #$40
    jsr print_mulf8u127
    // [20] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
    // main::@8
    // print_mulf8u127(255,127)
    // [21] call print_mulf8u127 
    // [149] phi from main::@8 to print_mulf8u127 [phi:main::@8->print_mulf8u127]
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) $7f [phi:main::@8->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #$7f
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) $ff [phi:main::@8->print_mulf8u127#1] -- vbuyy=vbuc1 
    ldy #$ff
    jsr print_mulf8u127
    // [22] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
    // main::@9
    // print_mulf8u127(192,192)
    // [23] call print_mulf8u127 
    // [149] phi from main::@9 to print_mulf8u127 [phi:main::@9->print_mulf8u127]
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) $c0 [phi:main::@9->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #$c0
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) $c0 [phi:main::@9->print_mulf8u127#1] -- vbuyy=vbuc1 
    tay
    jsr print_mulf8u127
    // [24] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
    // main::@10
    // print_mulf8u127(255,255)
    // [25] call print_mulf8u127 
    // [149] phi from main::@10 to print_mulf8u127 [phi:main::@10->print_mulf8u127]
    // [149] phi (byte) print_mulf8u127::b#10 = (byte) $ff [phi:main::@10->print_mulf8u127#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z print_mulf8u127.b
    // [149] phi (byte) print_mulf8u127::a#8 = (byte) $ff [phi:main::@10->print_mulf8u127#1] -- vbuyy=vbuc1 
    tay
    jsr print_mulf8u127
    // main::@11
    // [26] (byte*) print_char_cursor#141 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // print_str("signed")
    // [27] call print_str 
    // [142] phi from main::@11 to print_str [phi:main::@11->print_str]
    // [142] phi (byte*) print_char_cursor#136 = (byte*) print_char_cursor#141 [phi:main::@11->print_str#0] -- register_copy 
    // [142] phi (byte*) print_str::str#5 = (const byte*) main::str1 [phi:main::@11->print_str#1] -- pbuz1=pbuc1 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // [28] phi from main::@11 to main::@12 [phi:main::@11->main::@12]
    // main::@12
    // print_ln()
    // [29] call print_ln 
    // [71] phi from main::@12 to print_ln [phi:main::@12->print_ln]
    // [71] phi (byte*) print_char_cursor#123 = (byte*) print_char_cursor#122 [phi:main::@12->print_ln#0] -- register_copy 
    // [71] phi (byte*) print_line_cursor#63 = (byte*) print_line_cursor#1 [phi:main::@12->print_ln#1] -- register_copy 
    jsr print_ln
    // [30] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
    // main::@13
    // print_mulf8s127(0,0)
    // [31] call print_mulf8s127 
    // [51] phi from main::@13 to print_mulf8s127 [phi:main::@13->print_mulf8s127]
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) 0 [phi:main::@13->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #0
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) 0 [phi:main::@13->print_mulf8s127#1] -- vbsz1=vbsc1 
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [32] phi from main::@13 to main::@14 [phi:main::@13->main::@14]
    // main::@14
    // print_mulf8s127(64,64)
    // [33] call print_mulf8s127 
    // [51] phi from main::@14 to print_mulf8s127 [phi:main::@14->print_mulf8s127]
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) $40 [phi:main::@14->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #$40
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) $40 [phi:main::@14->print_mulf8s127#1] -- vbsz1=vbsc1 
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [34] phi from main::@14 to main::@15 [phi:main::@14->main::@15]
    // main::@15
    // print_mulf8s127(64,127)
    // [35] call print_mulf8s127 
    // [51] phi from main::@15 to print_mulf8s127 [phi:main::@15->print_mulf8s127]
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) $7f [phi:main::@15->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #$7f
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) $40 [phi:main::@15->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #$40
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [36] phi from main::@15 to main::@16 [phi:main::@15->main::@16]
    // main::@16
    // print_mulf8s127(-64,64)
    // [37] call print_mulf8s127 
    // [51] phi from main::@16 to print_mulf8s127 [phi:main::@16->print_mulf8s127]
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) $40 [phi:main::@16->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #$40
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) -$40 [phi:main::@16->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #-$40
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [38] phi from main::@16 to main::@17 [phi:main::@16->main::@17]
    // main::@17
    // print_mulf8s127(64,-64)
    // [39] call print_mulf8s127 
    // [51] phi from main::@17 to print_mulf8s127 [phi:main::@17->print_mulf8s127]
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) -$40 [phi:main::@17->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #-$40
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) $40 [phi:main::@17->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #$40
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [40] phi from main::@17 to main::@18 [phi:main::@17->main::@18]
    // main::@18
    // print_mulf8s127(-64,-64)
    // [41] call print_mulf8s127 
    // [51] phi from main::@18 to print_mulf8s127 [phi:main::@18->print_mulf8s127]
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) -$40 [phi:main::@18->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #-$40
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) -$40 [phi:main::@18->print_mulf8s127#1] -- vbsz1=vbsc1 
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [42] phi from main::@18 to main::@19 [phi:main::@18->main::@19]
    // main::@19
    // print_mulf8s127(127,127)
    // [43] call print_mulf8s127 
    // [51] phi from main::@19 to print_mulf8s127 [phi:main::@19->print_mulf8s127]
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) $7f [phi:main::@19->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #$7f
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) $7f [phi:main::@19->print_mulf8s127#1] -- vbsz1=vbsc1 
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [44] phi from main::@19 to main::@20 [phi:main::@19->main::@20]
    // main::@20
    // print_mulf8s127(-127,127)
    // [45] call print_mulf8s127 
    // [51] phi from main::@20 to print_mulf8s127 [phi:main::@20->print_mulf8s127]
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) $7f [phi:main::@20->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #$7f
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) -$7f [phi:main::@20->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #-$7f
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [46] phi from main::@20 to main::@21 [phi:main::@20->main::@21]
    // main::@21
    // print_mulf8s127(127,-127)
    // [47] call print_mulf8s127 
    // [51] phi from main::@21 to print_mulf8s127 [phi:main::@21->print_mulf8s127]
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) -$7f [phi:main::@21->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #-$7f
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) $7f [phi:main::@21->print_mulf8s127#1] -- vbsz1=vbsc1 
    lda #$7f
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // [48] phi from main::@21 to main::@22 [phi:main::@21->main::@22]
    // main::@22
    // print_mulf8s127(-127,-127)
    // [49] call print_mulf8s127 
    // [51] phi from main::@22 to print_mulf8s127 [phi:main::@22->print_mulf8s127]
    // [51] phi (signed byte) print_mulf8s127::b#10 = (signed byte) -$7f [phi:main::@22->print_mulf8s127#0] -- vbsz1=vbsc1 
    lda #-$7f
    sta.z print_mulf8s127.b
    // [51] phi (signed byte) print_mulf8s127::a#10 = (signed byte) -$7f [phi:main::@22->print_mulf8s127#1] -- vbsz1=vbsc1 
    sta.z print_mulf8s127.a
    jsr print_mulf8s127
    // main::@return
    // }
    // [50] return 
    rts
    str: .text "unsigned"
    .byte 0
    str1: .text "signed"
    .byte 0
}
  // print_mulf8s127
// print_mulf8s127(signed byte zp(9) a, signed byte zp(2) b)
print_mulf8s127: {
    .label c = 7
    .label a = 9
    .label b = 2
    // mulf8s127(a,b)
    // [52] (signed byte) mulf8s127::a#0 ← (signed byte) print_mulf8s127::a#10
    // [53] (signed byte) mulf8s127::b#0 ← (signed byte) print_mulf8s127::b#10 -- vbsyy=vbsz1 
    ldy.z b
    // [54] call mulf8s127 
    jsr mulf8s127
    // [55] (signed word) mulf8s127::return#0 ← (signed word) mulf8s127::return#1
    // print_mulf8s127::@1
    // c = mulf8s127(a,b)
    // [56] (signed word) print_mulf8s127::c#0 ← (signed word) mulf8s127::return#0
    // print_s8(a)
    // [57] (signed byte) print_s8::b#1 ← (signed byte) print_mulf8s127::a#10 -- vbsxx=vbsz1 
    ldx.z a
    // [58] (byte*) print_char_cursor#148 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // print_s8(a)
    // [59] call print_s8 
    // [104] phi from print_mulf8s127::@1 to print_s8 [phi:print_mulf8s127::@1->print_s8]
    // [104] phi (byte*) print_char_cursor#127 = (byte*) print_char_cursor#148 [phi:print_mulf8s127::@1->print_s8#0] -- register_copy 
    // [104] phi (signed byte) print_s8::b#3 = (signed byte) print_s8::b#1 [phi:print_mulf8s127::@1->print_s8#1] -- register_copy 
    jsr print_s8
    // [60] phi from print_mulf8s127::@1 to print_mulf8s127::@2 [phi:print_mulf8s127::@1->print_mulf8s127::@2]
    // print_mulf8s127::@2
    // print_char('*')
    // [61] call print_char 
    // [86] phi from print_mulf8s127::@2 to print_char [phi:print_mulf8s127::@2->print_char]
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#19 [phi:print_mulf8s127::@2->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) '*' [phi:print_mulf8s127::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'*'
    jsr print_char
    // print_mulf8s127::@3
    // print_s8(b)
    // [62] (signed byte) print_s8::b#2 ← (signed byte) print_mulf8s127::b#10 -- vbsxx=vbsz1 
    ldx.z b
    // [63] call print_s8 
    // [104] phi from print_mulf8s127::@3 to print_s8 [phi:print_mulf8s127::@3->print_s8]
    // [104] phi (byte*) print_char_cursor#127 = (byte*) print_char_cursor#19 [phi:print_mulf8s127::@3->print_s8#0] -- register_copy 
    // [104] phi (signed byte) print_s8::b#3 = (signed byte) print_s8::b#2 [phi:print_mulf8s127::@3->print_s8#1] -- register_copy 
    jsr print_s8
    // [64] phi from print_mulf8s127::@3 to print_mulf8s127::@4 [phi:print_mulf8s127::@3->print_mulf8s127::@4]
    // print_mulf8s127::@4
    // print_char('=')
    // [65] call print_char 
    // [86] phi from print_mulf8s127::@4 to print_char [phi:print_mulf8s127::@4->print_char]
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#19 [phi:print_mulf8s127::@4->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) '=' [phi:print_mulf8s127::@4->print_char#1] -- vbuaa=vbuc1 
    lda #'='
    jsr print_char
    // print_mulf8s127::@5
    // print_sint(c)
    // [66] (signed word) print_sint::w#1 ← (signed word) print_mulf8s127::c#0
    // [67] call print_sint 
    jsr print_sint
    // [68] phi from print_mulf8s127::@5 to print_mulf8s127::@6 [phi:print_mulf8s127::@5->print_mulf8s127::@6]
    // print_mulf8s127::@6
    // print_ln()
    // [69] call print_ln 
    // [71] phi from print_mulf8s127::@6 to print_ln [phi:print_mulf8s127::@6->print_ln]
    // [71] phi (byte*) print_char_cursor#123 = (byte*) print_char_cursor#19 [phi:print_mulf8s127::@6->print_ln#0] -- register_copy 
    // [71] phi (byte*) print_line_cursor#63 = (byte*) print_line_cursor#1 [phi:print_mulf8s127::@6->print_ln#1] -- register_copy 
    jsr print_ln
    // print_mulf8s127::@return
    // }
    // [70] return 
    rts
}
  // print_ln
// Print a newline
print_ln: {
    // [72] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [72] phi (byte*) print_line_cursor#32 = (byte*) print_line_cursor#63 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [73] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#32 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [74] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#123) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [75] return 
    rts
}
  // print_sint
// Print a signed int as HEX
// print_sint(signed word zp(7) w)
print_sint: {
    .label w = 7
    // if(w<0)
    // [76] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1 -- vwsz1_lt_0_then_la1 
    lda.z w+1
    bmi __b1
    // [77] phi from print_sint to print_sint::@3 [phi:print_sint->print_sint::@3]
    // print_sint::@3
    // print_char(' ')
    // [78] call print_char 
    // [86] phi from print_sint::@3 to print_char [phi:print_sint::@3->print_char]
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#19 [phi:print_sint::@3->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) ' ' [phi:print_sint::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [79] phi from print_sint::@3 print_sint::@4 to print_sint::@2 [phi:print_sint::@3/print_sint::@4->print_sint::@2]
    // [79] phi (signed word) print_sint::w#4 = (signed word) print_sint::w#1 [phi:print_sint::@3/print_sint::@4->print_sint::@2#0] -- register_copy 
    // print_sint::@2
  __b2:
    // print_uint((unsigned int)w)
    // [80] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#4
    // [81] call print_uint 
    // [90] phi from print_sint::@2 to print_uint [phi:print_sint::@2->print_uint]
    // [90] phi (word) print_uint::w#2 = (word) print_uint::w#0 [phi:print_sint::@2->print_uint#0] -- register_copy 
    jsr print_uint
    // print_sint::@return
    // }
    // [82] return 
    rts
    // [83] phi from print_sint to print_sint::@1 [phi:print_sint->print_sint::@1]
    // print_sint::@1
  __b1:
    // print_char('-')
    // [84] call print_char 
    // [86] phi from print_sint::@1 to print_char [phi:print_sint::@1->print_char]
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#19 [phi:print_sint::@1->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) '-' [phi:print_sint::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_sint::@4
    // w = -w
    // [85] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#1 -- vwsz1=_neg_vwsz1 
    sec
    lda #0
    sbc.z w
    sta.z w
    lda #0
    sbc.z w+1
    sta.z w+1
    jmp __b2
}
  // print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
    // *(print_char_cursor++) = ch
    // [87] *((byte*) print_char_cursor#80) ← (byte) print_char::ch#10 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [88] (byte*) print_char_cursor#19 ← ++ (byte*) print_char_cursor#80 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // print_char::@return
    // }
    // [89] return 
    rts
}
  // print_uint
// Print a unsigned int as HEX
// print_uint(word zp(7) w)
print_uint: {
    .label w = 7
    // print_u8(>w)
    // [91] (byte) print_u8::b#1 ← > (word) print_uint::w#2 -- vbuxx=_hi_vwuz1 
    ldx.z w+1
    // [92] call print_u8 
    // [96] phi from print_uint to print_u8 [phi:print_uint->print_u8]
    // [96] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#19 [phi:print_uint->print_u8#0] -- register_copy 
    // [96] phi (byte) print_u8::b#5 = (byte) print_u8::b#1 [phi:print_uint->print_u8#1] -- register_copy 
    jsr print_u8
    // print_uint::@1
    // print_u8(<w)
    // [93] (byte) print_u8::b#2 ← < (word) print_uint::w#2 -- vbuxx=_lo_vwuz1 
    ldx.z w
    // [94] call print_u8 
    // [96] phi from print_uint::@1 to print_u8 [phi:print_uint::@1->print_u8]
    // [96] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#19 [phi:print_uint::@1->print_u8#0] -- register_copy 
    // [96] phi (byte) print_u8::b#5 = (byte) print_u8::b#2 [phi:print_uint::@1->print_u8#1] -- register_copy 
    jsr print_u8
    // print_uint::@return
    // }
    // [95] return 
    rts
}
  // print_u8
// Print a char as HEX
// print_u8(byte register(X) b)
print_u8: {
    // b>>4
    // [97] (byte~) print_u8::$0 ← (byte) print_u8::b#5 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
    // print_char(print_hextab[b>>4])
    // [98] (byte) print_char::ch#4 ← *((const to_nomodify byte*) print_hextab + (byte~) print_u8::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
    // [99] call print_char 
  // Table of hexadecimal digits
    // [86] phi from print_u8 to print_char [phi:print_u8->print_char]
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#131 [phi:print_u8->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) print_char::ch#4 [phi:print_u8->print_char#1] -- register_copy 
    jsr print_char
    // print_u8::@1
    // b&$f
    // [100] (byte~) print_u8::$2 ← (byte) print_u8::b#5 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
    // print_char(print_hextab[b&$f])
    // [101] (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (byte~) print_u8::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
    // [102] call print_char 
    // [86] phi from print_u8::@1 to print_char [phi:print_u8::@1->print_char]
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#19 [phi:print_u8::@1->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) print_char::ch#5 [phi:print_u8::@1->print_char#1] -- register_copy 
    jsr print_char
    // print_u8::@return
    // }
    // [103] return 
    rts
}
  // print_s8
// Print a signed char as HEX
// print_s8(signed byte register(X) b)
print_s8: {
    // if(b<0)
    // [105] if((signed byte) print_s8::b#3<(signed byte) 0) goto print_s8::@1 -- vbsxx_lt_0_then_la1 
    cpx #0
    bmi __b1
    // [106] phi from print_s8 to print_s8::@3 [phi:print_s8->print_s8::@3]
    // print_s8::@3
    // print_char(' ')
    // [107] call print_char 
    // [86] phi from print_s8::@3 to print_char [phi:print_s8::@3->print_char]
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#127 [phi:print_s8::@3->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) ' ' [phi:print_s8::@3->print_char#1] -- vbuaa=vbuc1 
    lda #' '
    jsr print_char
    // [108] phi from print_s8::@3 print_s8::@4 to print_s8::@2 [phi:print_s8::@3/print_s8::@4->print_s8::@2]
    // [108] phi (signed byte) print_s8::b#5 = (signed byte) print_s8::b#3 [phi:print_s8::@3/print_s8::@4->print_s8::@2#0] -- register_copy 
    // print_s8::@2
  __b2:
    // print_u8((char)b)
    // [109] (byte) print_u8::b#0 ← (byte)(signed byte) print_s8::b#5
    // [110] call print_u8 
    // [96] phi from print_s8::@2 to print_u8 [phi:print_s8::@2->print_u8]
    // [96] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#19 [phi:print_s8::@2->print_u8#0] -- register_copy 
    // [96] phi (byte) print_u8::b#5 = (byte) print_u8::b#0 [phi:print_s8::@2->print_u8#1] -- register_copy 
    jsr print_u8
    // print_s8::@return
    // }
    // [111] return 
    rts
    // [112] phi from print_s8 to print_s8::@1 [phi:print_s8->print_s8::@1]
    // print_s8::@1
  __b1:
    // print_char('-')
    // [113] call print_char 
    // [86] phi from print_s8::@1 to print_char [phi:print_s8::@1->print_char]
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#127 [phi:print_s8::@1->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) '-' [phi:print_s8::@1->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    // print_s8::@4
    // b = -b
    // [114] (signed byte) print_s8::b#0 ← - (signed byte) print_s8::b#3 -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
    jmp __b2
}
  // mulf8s127
// mulf8s127(signed byte zp(9) a, signed byte register(Y) b)
mulf8s127: {
    .label __12 = $a
    .label __13 = $a
    .label __14 = $c
    .label __15 = $c
    .label a = 9
    .label return = 7
    .label c = 7
    // mulf8u127((unsigned char)a, (unsigned char)b)
    // [115] (byte) mulf8u127::a#1 ← (byte)(signed byte) mulf8s127::a#0 -- vbuxx=vbuz1 
    ldx.z a
    // [116] (byte) mulf8u127::b#1 ← (byte)(signed byte) mulf8s127::b#0 -- vbuaa=vbuyy 
    tya
    // [117] call mulf8u127 
    // [136] phi from mulf8s127 to mulf8u127 [phi:mulf8s127->mulf8u127]
    // [136] phi (byte) mulf8u127::b#2 = (byte) mulf8u127::b#1 [phi:mulf8s127->mulf8u127#0] -- register_copy 
    // [136] phi (byte) mulf8u127::a#2 = (byte) mulf8u127::a#1 [phi:mulf8s127->mulf8u127#1] -- register_copy 
    jsr mulf8u127
    // mulf8u127((unsigned char)a, (unsigned char)b)
    // [118] (word) mulf8u127::return#3 ← (word) mulf8u127::return#1
    // mulf8s127::@7
    // [119] (word) mulf8s127::c#0 ← (word) mulf8u127::return#3
    // if(a<0)
    // [120] if((signed byte) mulf8s127::a#0>=(signed byte) 0) goto mulf8s127::@9 -- vbsz1_ge_0_then_la1 
    lda.z a
    cmp #0
    bpl __b1
    // mulf8s127::@4
    // (signed word)b
    // [121] (signed word~) mulf8s127::$12 ← (signed word)(signed byte) mulf8s127::b#0 -- vwsz1=_sword_vbsyy 
    tya
    sta.z __12
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z __12+1
    // (signed word)b*2
    // [122] (signed word~) mulf8s127::$13 ← (signed word~) mulf8s127::$12 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl.z __13
    rol.z __13+1
    // c -= (signed word)b*2
    // [123] (signed word) mulf8s127::c#1 ← (signed word)(word) mulf8s127::c#0 - (signed word~) mulf8s127::$13 -- vwsz1=vwsz1_minus_vwsz2 
    lda.z c
    sec
    sbc.z __13
    sta.z c
    lda.z c+1
    sbc.z __13+1
    sta.z c+1
    // [124] phi from mulf8s127::@4 mulf8s127::@9 to mulf8s127::@1 [phi:mulf8s127::@4/mulf8s127::@9->mulf8s127::@1]
    // [124] phi (signed word) mulf8s127::c#5 = (signed word) mulf8s127::c#1 [phi:mulf8s127::@4/mulf8s127::@9->mulf8s127::@1#0] -- register_copy 
    // mulf8s127::@1
  __b1:
    // if(b<0)
    // [125] if((signed byte) mulf8s127::b#0>=(signed byte) 0) goto mulf8s127::@2 -- vbsyy_ge_0_then_la1 
    cpy #0
    bpl __b2
    // mulf8s127::@5
    // (signed word)a
    // [126] (signed word~) mulf8s127::$14 ← (signed word)(signed byte) mulf8s127::a#0 -- vwsz1=_sword_vbsz2 
    lda.z a
    sta.z __14
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z __14+1
    // (signed word)a*2
    // [127] (signed word~) mulf8s127::$15 ← (signed word~) mulf8s127::$14 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl.z __15
    rol.z __15+1
    // c -= (signed word)a*2
    // [128] (signed word) mulf8s127::c#2 ← (signed word) mulf8s127::c#5 - (signed word~) mulf8s127::$15 -- vwsz1=vwsz1_minus_vwsz2 
    lda.z c
    sec
    sbc.z __15
    sta.z c
    lda.z c+1
    sbc.z __15+1
    sta.z c+1
    // [129] phi from mulf8s127::@1 mulf8s127::@5 to mulf8s127::@2 [phi:mulf8s127::@1/mulf8s127::@5->mulf8s127::@2]
    // [129] phi (signed word) mulf8s127::c#7 = (signed word) mulf8s127::c#5 [phi:mulf8s127::@1/mulf8s127::@5->mulf8s127::@2#0] -- register_copy 
    // mulf8s127::@2
  __b2:
    // if(a<0 && b<0)
    // [130] if((signed byte) mulf8s127::a#0>=(signed byte) 0) goto mulf8s127::@3 -- vbsz1_ge_0_then_la1 
    lda.z a
    cmp #0
    bpl __b3
    // mulf8s127::@8
    // [131] if((signed byte) mulf8s127::b#0>=(signed byte) 0) goto mulf8s127::@3 -- vbsyy_ge_0_then_la1 
    cpy #0
    bpl __b3
    // mulf8s127::@6
    // c -= 0x200
    // [132] (signed word) mulf8s127::c#3 ← (signed word) mulf8s127::c#7 - (signed word) $200 -- vwsz1=vwsz1_minus_vwsc1 
    lda.z c
    sec
    sbc #<$200
    sta.z c
    lda.z c+1
    sbc #>$200
    sta.z c+1
    // [133] phi from mulf8s127::@2 mulf8s127::@6 to mulf8s127::@3 [phi:mulf8s127::@2/mulf8s127::@6->mulf8s127::@3]
    // [133] phi (signed word) mulf8s127::return#1 = (signed word) mulf8s127::c#7 [phi:mulf8s127::@2/mulf8s127::@6->mulf8s127::@3#0] -- register_copy 
    rts
    // [133] phi from mulf8s127::@8 to mulf8s127::@3 [phi:mulf8s127::@8->mulf8s127::@3]
    // mulf8s127::@3
  __b3:
    // mulf8s127::@return
    // }
    // [134] return 
    rts
    // mulf8s127::@9
    // [135] (signed word) mulf8s127::c#11 ← (signed word)(word) mulf8s127::c#0
}
  // mulf8u127
// mulf8u127(byte register(X) a, byte register(A) b)
mulf8u127: {
    .label memA = $fc
    .label memB = $fd
    .label res = $fe
    .label resL = $fe
    .label resH = $ff
    .label return = 7
    // *memA = a
    // [137] *((const nomodify byte*) mulf8u127::memA) ← (byte) mulf8u127::a#2 -- _deref_pbuc1=vbuxx 
    stx memA
    // *memB = b
    // [138] *((const nomodify byte*) mulf8u127::memB) ← (byte) mulf8u127::b#2 -- _deref_pbuc1=vbuaa 
    sta memB
    // asm
    // asm { ldamemA stasm1+1 stasm3+1 eor#$ff stasm2+1 stasm4+1 ldxmemB sec sm1: ldamulf127_sqr1_lo,x sm2: sbcmulf127_sqr2_lo,x staresL sm3: ldamulf127_sqr1_hi,x sm4: sbcmulf127_sqr2_hi,x staresH  }
    txa
    sta sm1+1
    sta sm3+1
    eor #$ff
    sta sm2+1
    sta sm4+1
    ldx memB
    sec
  sm1:
    lda mulf127_sqr1_lo,x
  sm2:
    sbc mulf127_sqr2_lo,x
    sta resL
  sm3:
    lda mulf127_sqr1_hi,x
  sm4:
    sbc mulf127_sqr2_hi,x
    sta resH
    // return *res;
    // [140] (word) mulf8u127::return#1 ← *((const nomodify word*) mulf8u127::res) -- vwuz1=_deref_pwuc1 
    lda res
    sta.z return
    lda res+1
    sta.z return+1
    // mulf8u127::@return
    // }
    // [141] return 
    rts
}
  // print_str
// Print a zero-terminated string
// print_str(byte* zp(7) str)
print_str: {
    .label str = 7
    // [143] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
    // [143] phi (byte*) print_char_cursor#122 = (byte*) print_char_cursor#136 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
    // [143] phi (byte*) print_str::str#3 = (byte*) print_str::str#5 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    // print_str::@1
  __b1:
    // while(*str)
    // [144] if((byte) 0!=*((byte*) print_str::str#3)) goto print_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str::@return
    // }
    // [145] return 
    rts
    // print_str::@2
  __b2:
    // *(print_char_cursor++) = *(str++)
    // [146] *((byte*) print_char_cursor#122) ← *((byte*) print_str::str#3) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (print_char_cursor),y
    // *(print_char_cursor++) = *(str++);
    // [147] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#122 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // [148] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1
}
  // print_mulf8u127
// print_mulf8u127(byte register(Y) a, byte zp(9) b)
print_mulf8u127: {
    .label c = 7
    .label b = 9
    // mulf8u127(a,b)
    // [150] (byte) mulf8u127::a#0 ← (byte) print_mulf8u127::a#8 -- vbuxx=vbuyy 
    tya
    tax
    // [151] (byte) mulf8u127::b#0 ← (byte) print_mulf8u127::b#10 -- vbuaa=vbuz1 
    lda.z b
    // [152] call mulf8u127 
    // [136] phi from print_mulf8u127 to mulf8u127 [phi:print_mulf8u127->mulf8u127]
    // [136] phi (byte) mulf8u127::b#2 = (byte) mulf8u127::b#0 [phi:print_mulf8u127->mulf8u127#0] -- register_copy 
    // [136] phi (byte) mulf8u127::a#2 = (byte) mulf8u127::a#0 [phi:print_mulf8u127->mulf8u127#1] -- register_copy 
    jsr mulf8u127
    // mulf8u127(a,b)
    // [153] (word) mulf8u127::return#0 ← (word) mulf8u127::return#1
    // print_mulf8u127::@1
    // c = mulf8u127(a,b)
    // [154] (word) print_mulf8u127::c#0 ← (word) mulf8u127::return#0
    // print_u8(a)
    // [155] (byte) print_u8::b#3 ← (byte) print_mulf8u127::a#8 -- vbuxx=vbuyy 
    tya
    tax
    // [156] (byte*) print_char_cursor#150 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    // print_u8(a)
    // [157] call print_u8 
    // [96] phi from print_mulf8u127::@1 to print_u8 [phi:print_mulf8u127::@1->print_u8]
    // [96] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#150 [phi:print_mulf8u127::@1->print_u8#0] -- register_copy 
    // [96] phi (byte) print_u8::b#5 = (byte) print_u8::b#3 [phi:print_mulf8u127::@1->print_u8#1] -- register_copy 
    jsr print_u8
    // [158] phi from print_mulf8u127::@1 to print_mulf8u127::@2 [phi:print_mulf8u127::@1->print_mulf8u127::@2]
    // print_mulf8u127::@2
    // print_char('*')
    // [159] call print_char 
    // [86] phi from print_mulf8u127::@2 to print_char [phi:print_mulf8u127::@2->print_char]
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#19 [phi:print_mulf8u127::@2->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) '*' [phi:print_mulf8u127::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'*'
    jsr print_char
    // print_mulf8u127::@3
    // print_u8(b)
    // [160] (byte) print_u8::b#4 ← (byte) print_mulf8u127::b#10 -- vbuxx=vbuz1 
    ldx.z b
    // [161] call print_u8 
    // [96] phi from print_mulf8u127::@3 to print_u8 [phi:print_mulf8u127::@3->print_u8]
    // [96] phi (byte*) print_char_cursor#131 = (byte*) print_char_cursor#19 [phi:print_mulf8u127::@3->print_u8#0] -- register_copy 
    // [96] phi (byte) print_u8::b#5 = (byte) print_u8::b#4 [phi:print_mulf8u127::@3->print_u8#1] -- register_copy 
    jsr print_u8
    // [162] phi from print_mulf8u127::@3 to print_mulf8u127::@4 [phi:print_mulf8u127::@3->print_mulf8u127::@4]
    // print_mulf8u127::@4
    // print_char('=')
    // [163] call print_char 
    // [86] phi from print_mulf8u127::@4 to print_char [phi:print_mulf8u127::@4->print_char]
    // [86] phi (byte*) print_char_cursor#80 = (byte*) print_char_cursor#19 [phi:print_mulf8u127::@4->print_char#0] -- register_copy 
    // [86] phi (byte) print_char::ch#10 = (byte) '=' [phi:print_mulf8u127::@4->print_char#1] -- vbuaa=vbuc1 
    lda #'='
    jsr print_char
    // print_mulf8u127::@5
    // print_uint(c)
    // [164] (word) print_uint::w#1 ← (word) print_mulf8u127::c#0
    // [165] call print_uint 
    // [90] phi from print_mulf8u127::@5 to print_uint [phi:print_mulf8u127::@5->print_uint]
    // [90] phi (word) print_uint::w#2 = (word) print_uint::w#1 [phi:print_mulf8u127::@5->print_uint#0] -- register_copy 
    jsr print_uint
    // [166] phi from print_mulf8u127::@5 to print_mulf8u127::@6 [phi:print_mulf8u127::@5->print_mulf8u127::@6]
    // print_mulf8u127::@6
    // print_ln()
    // [167] call print_ln 
    // [71] phi from print_mulf8u127::@6 to print_ln [phi:print_mulf8u127::@6->print_ln]
    // [71] phi (byte*) print_char_cursor#123 = (byte*) print_char_cursor#19 [phi:print_mulf8u127::@6->print_ln#0] -- register_copy 
    // [71] phi (byte*) print_line_cursor#63 = (byte*) print_line_cursor#1 [phi:print_mulf8u127::@6->print_ln#1] -- register_copy 
    jsr print_ln
    // print_mulf8u127::@return
    // }
    // [168] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [170] call memset 
    // [172] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [171] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
memset: {
    .const c = ' '
    .const num = $3e8
    .label str = $400
    .label end = str+num
    .label dst = $a
    // [173] phi from memset to memset::@1 [phi:memset->memset::@1]
    // [173] phi (byte*) memset::dst#2 = (byte*)(const void*) memset::str#0 [phi:memset->memset::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z dst
    lda #>str
    sta.z dst+1
    // memset::@1
  __b1:
    // for(char* dst = str; dst!=end; dst++)
    // [174] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z dst+1
    cmp #>end
    bne __b2
    lda.z dst
    cmp #<end
    bne __b2
    // memset::@return
    // }
    // [175] return 
    rts
    // memset::@2
  __b2:
    // *dst = c
    // [176] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [177] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [173] phi from memset::@2 to memset::@1 [phi:memset::@2->memset::@1]
    // [173] phi (byte*) memset::dst#2 = (byte*) memset::dst#1 [phi:memset::@2->memset::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
  print_hextab: .text "0123456789abcdef"
  // mulf_sqr tables will contain f(x)=int(x*x/4) and g(x) = f(x-255).
  // f(x) = ( x * x )/4
  .align $100
mulf127_sqr1_lo:
.fill 512, <round((i/127*i/127)*127/4) 
  .align $100
mulf127_sqr1_hi:
.fill 512, >round((i/127*i/127)*127/4) 
  // g(x) =  <((( x - 255) * ( x - 255 ))/4)
  .align $100
mulf127_sqr2_lo:
.fill 512, <round(((i-255)/127*(i-255)/127)*127/4) 
  .align $100
mulf127_sqr2_hi:
.fill 512, >round(((i-255)/127*(i-255)/127)*127/4) 

