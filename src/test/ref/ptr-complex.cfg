@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [6] *((const byte*) main::screen#0 + (byte) main::i#2) ← *((const byte*) main::screen#0+(byte) $28 + (byte) main::i#2)
  [7] (byte) main::i#1 ← ++ (byte) main::i#2
  [8] if((byte) main::i#1!=(byte) $b) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [9] *((const byte*) main::screen#0+(byte) $51) ← *((const byte*) main::screen#0+(byte) $79)
  [10] *((const byte*) main::screen#0+(byte) $52) ← *((const byte*) main::screen#0+(byte) $7a)
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  [11] (byte) main::j#2 ← phi( main::@2/(byte) 0 main::@3/(byte) main::j#1 )
  [12] *((const byte*) main::screen#0+(byte) $a0 + (byte) main::j#2) ← *((const byte*) main::screen#0+(byte) $c8 + (byte) main::j#2)
  [13] (byte) main::j#1 ← ++ (byte) main::j#2
  [14] if((byte) main::j#1!=(byte) $b) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  [15] *((byte*) 53280) ← ++ *((byte*) 53280)
  [16] *((byte*)(number) $d000+(number) $21) ← -- *((byte*)(number) $d000+(number) $21)
  [17] *((const byte*) main::BGCOL#0) ← ++ *((const byte*) main::BGCOL#0)
  to:main::@return
main::@return: scope:[main]  from main::@4
  [18] return 
  to:@return
