
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  main::$0 = main::SCREEN + $28*0
  main::$0[main::i#2] = petscii_mixed[main::i#2]
  main::$1 = main::SCREEN + $28*1
  main::$1[main::i#2] = petscii_upper[main::i#2]
  main::$2 = main::SCREEN + $28*2
  main::$2[main::i#2] = petscii_standard[main::i#2]
  main::$3 = main::SCREEN + $28*3
  main::$3[main::i#2] = screencode_mixed[main::i#2]
  main::$4 = main::SCREEN + $28*4
  main::$4[main::i#2] = screencode_upper[main::i#2]
  main::$5 = main::SCREEN + $28*5
  main::$5[main::i#2] = screencode_standard[main::i#2]
  main::$6 = main::SCREEN + $28*6
  main::$6[main::i#2] = standard[main::i#2]
  main::i#1 = main::i#2 + rangenext(0,5)
  main::$7 = main::i#1 != rangelast(0,5)
  if(main::$7) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
label __start::@1
label __start::@return
void main()
byte*~ main::$0
byte*~ main::$1
byte*~ main::$2
byte*~ main::$3
byte*~ main::$4
byte*~ main::$5
byte*~ main::$6
bool~ main::$7
label main::@1
label main::@return
const byte* main::SCREEN = (byte*)$400
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
const byte* petscii_mixed[]  = "abcABC1"pm
const byte* petscii_standard[]  = "abcABC3"pm
const byte* petscii_upper[]  = "abcABC2"pu
const byte* screencode_mixed[]  = "abcABC4"
const byte* screencode_standard[]  = "abcABC6"
const byte* screencode_upper[]  = "abcABC5"su
const byte* standard[]  = "abcABC7"

Adding number conversion cast (unumber) $28*0 in main::$0 = main::SCREEN + $28*0
Adding number conversion cast (unumber) $28*1 in main::$1 = main::SCREEN + $28*1
Adding number conversion cast (unumber) $28*2 in main::$2 = main::SCREEN + $28*2
Adding number conversion cast (unumber) $28*3 in main::$3 = main::SCREEN + $28*3
Adding number conversion cast (unumber) $28*4 in main::$4 = main::SCREEN + $28*4
Adding number conversion cast (unumber) $28*5 in main::$5 = main::SCREEN + $28*5
Adding number conversion cast (unumber) $28*6 in main::$6 = main::SCREEN + $28*6
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Simple Condition main::$7 [18] if(main::i#1!=rangelast(0,5)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [2] main::$0 = main::SCREEN + (byte)$28*0
Constant right-side identified [4] main::$1 = main::SCREEN + (byte)$28*1
Constant right-side identified [6] main::$2 = main::SCREEN + (byte)$28*2
Constant right-side identified [8] main::$3 = main::SCREEN + (byte)$28*3
Constant right-side identified [10] main::$4 = main::SCREEN + (byte)$28*4
Constant right-side identified [12] main::$5 = main::SCREEN + (byte)$28*5
Constant right-side identified [14] main::$6 = main::SCREEN + (byte)$28*6
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#0 = 0
Constant main::$0 = main::SCREEN+(byte)$28*0
Constant main::$1 = main::SCREEN+(byte)$28*1
Constant main::$2 = main::SCREEN+(byte)$28*2
Constant main::$3 = main::SCREEN+(byte)$28*3
Constant main::$4 = main::SCREEN+(byte)$28*4
Constant main::$5 = main::SCREEN+(byte)$28*5
Constant main::$6 = main::SCREEN+(byte)$28*6
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [16] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [18] if(main::i#1!=rangelast(0,5)) goto main::@1 to 6
Simplifying constant evaluating to zero (byte)$28*0 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::SCREEN in 
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 6 in [9] if(main::i#1!=6) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 6
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 6
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::i#0
Constant inlined main::$1 = main::SCREEN+(byte)$28*1
Constant inlined main::$2 = main::SCREEN+(byte)$28*2
Constant inlined main::$0 = main::SCREEN
Constant inlined main::$5 = main::SCREEN+(byte)$28*5
Constant inlined main::i#0 = 0
Constant inlined main::$6 = main::SCREEN+(byte)$28*6
Constant inlined main::$3 = main::SCREEN+(byte)$28*3
Constant inlined main::$4 = main::SCREEN+(byte)$28*4
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@2(between main::@1 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [12] main::i#3 = main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] main::i#2 = phi( main/0, main::@1/main::i#1 )
  [2] main::SCREEN[main::i#2] = petscii_mixed[main::i#2]
  [3] (main::SCREEN+(byte)$28*1)[main::i#2] = petscii_upper[main::i#2]
  [4] (main::SCREEN+(byte)$28*2)[main::i#2] = petscii_standard[main::i#2]
  [5] (main::SCREEN+(byte)$28*3)[main::i#2] = screencode_mixed[main::i#2]
  [6] (main::SCREEN+(byte)$28*4)[main::i#2] = screencode_upper[main::i#2]
  [7] (main::SCREEN+(byte)$28*5)[main::i#2] = screencode_standard[main::i#2]
  [8] (main::SCREEN+(byte)$28*6)[main::i#2] = standard[main::i#2]
  [9] main::i#1 = ++ main::i#2
  [10] if(main::i#1!=6) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [11] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte main::i
byte main::i#1 16.5
byte main::i#2 22.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] main::SCREEN[main::i#2] = petscii_mixed[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [3] (main::SCREEN+(byte)$28*1)[main::i#2] = petscii_upper[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [4] (main::SCREEN+(byte)$28*2)[main::i#2] = petscii_standard[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [5] (main::SCREEN+(byte)$28*3)[main::i#2] = screencode_mixed[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [6] (main::SCREEN+(byte)$28*4)[main::i#2] = screencode_upper[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [7] (main::SCREEN+(byte)$28*5)[main::i#2] = screencode_standard[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [8] (main::SCREEN+(byte)$28*6)[main::i#2] = standard[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [2] main::SCREEN[main::i#2] = petscii_mixed[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [3] (main::SCREEN+(byte)$28*1)[main::i#2] = petscii_upper[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [4] (main::SCREEN+(byte)$28*2)[main::i#2] = petscii_standard[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [5] (main::SCREEN+(byte)$28*3)[main::i#2] = screencode_mixed[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [6] (main::SCREEN+(byte)$28*4)[main::i#2] = screencode_upper[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [7] (main::SCREEN+(byte)$28*5)[main::i#2] = screencode_standard[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [8] (main::SCREEN+(byte)$28*6)[main::i#2] = standard[main::i#2] [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 38.5: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 846 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 846 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test string encoding via literals
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::SCREEN[main::i#2] = petscii_mixed[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda petscii_mixed,x
    sta SCREEN,x
    // [3] (main::SCREEN+(byte)$28*1)[main::i#2] = petscii_upper[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda petscii_upper,x
    sta SCREEN+$28*1,x
    // [4] (main::SCREEN+(byte)$28*2)[main::i#2] = petscii_standard[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda petscii_standard,x
    sta SCREEN+$28*2,x
    // [5] (main::SCREEN+(byte)$28*3)[main::i#2] = screencode_mixed[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screencode_mixed,x
    sta SCREEN+$28*3,x
    // [6] (main::SCREEN+(byte)$28*4)[main::i#2] = screencode_upper[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screencode_upper,x
    sta SCREEN+$28*4,x
    // [7] (main::SCREEN+(byte)$28*5)[main::i#2] = screencode_standard[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screencode_standard,x
    sta SCREEN+$28*5,x
    // [8] (main::SCREEN+(byte)$28*6)[main::i#2] = standard[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda standard,x
    sta SCREEN+$28*6,x
    // [9] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [10] if(main::i#1!=6) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #6
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [11] return 
    rts
}
  // File Data
.encoding "petscii_mixed"
  petscii_mixed: .text "abcABC1"
  .byte 0
.encoding "petscii_upper"
  petscii_upper: .text "abcABC2"
  .byte 0
.encoding "petscii_mixed"
  petscii_standard: .text "abcABC3"
  .byte 0
.encoding "screencode_mixed"
  screencode_mixed: .text "abcABC4"
  .byte 0
.encoding "screencode_upper"
  screencode_upper: .text "abcABC5"
  .byte 0
.encoding "screencode_mixed"
  screencode_standard: .text "abcABC6"
  .byte 0
  standard: .text "abcABC7"
  .byte 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
label main::@1
label main::@return
const byte* main::SCREEN = (byte*) 1024
byte main::i
byte main::i#1 reg byte x 16.5
byte main::i#2 reg byte x 22.0
const byte* petscii_mixed[]  = "abcABC1"pm
const byte* petscii_standard[]  = "abcABC3"pm
const byte* petscii_upper[]  = "abcABC2"pu
const byte* screencode_mixed[]  = "abcABC4"
const byte* screencode_standard[]  = "abcABC6"
const byte* screencode_upper[]  = "abcABC5"su
const byte* standard[]  = "abcABC7"

reg byte x [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 756

  // File Comments
// Test string encoding via literals
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // (SCREEN+40*0)[i] = petscii_mixed[i]
    // [2] main::SCREEN[main::i#2] = petscii_mixed[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda petscii_mixed,x
    sta SCREEN,x
    // (SCREEN+40*1)[i] = petscii_upper[i]
    // [3] (main::SCREEN+(byte)$28*1)[main::i#2] = petscii_upper[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda petscii_upper,x
    sta SCREEN+$28*1,x
    // (SCREEN+40*2)[i] = petscii_standard[i]
    // [4] (main::SCREEN+(byte)$28*2)[main::i#2] = petscii_standard[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda petscii_standard,x
    sta SCREEN+$28*2,x
    // (SCREEN+40*3)[i] = screencode_mixed[i]
    // [5] (main::SCREEN+(byte)$28*3)[main::i#2] = screencode_mixed[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screencode_mixed,x
    sta SCREEN+$28*3,x
    // (SCREEN+40*4)[i] = screencode_upper[i]
    // [6] (main::SCREEN+(byte)$28*4)[main::i#2] = screencode_upper[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screencode_upper,x
    sta SCREEN+$28*4,x
    // (SCREEN+40*5)[i] = screencode_standard[i]
    // [7] (main::SCREEN+(byte)$28*5)[main::i#2] = screencode_standard[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda screencode_standard,x
    sta SCREEN+$28*5,x
    // (SCREEN+40*6)[i] = standard[i]
    // [8] (main::SCREEN+(byte)$28*6)[main::i#2] = standard[main::i#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda standard,x
    sta SCREEN+$28*6,x
    // for( byte i: 0..5 )
    // [9] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [10] if(main::i#1!=6) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #6
    bne __b1
    // main::@return
    // }
    // [11] return 
    rts
}
  // File Data
.encoding "petscii_mixed"
  petscii_mixed: .text "abcABC1"
  .byte 0
.encoding "petscii_upper"
  petscii_upper: .text "abcABC2"
  .byte 0
.encoding "petscii_mixed"
  petscii_standard: .text "abcABC3"
  .byte 0
.encoding "screencode_mixed"
  screencode_mixed: .text "abcABC4"
  .byte 0
.encoding "screencode_upper"
  screencode_upper: .text "abcABC5"
  .byte 0
.encoding "screencode_mixed"
  screencode_standard: .text "abcABC6"
  .byte 0
  standard: .text "abcABC7"
  .byte 0

