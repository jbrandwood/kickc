byte* SCREEN = $0400;

main();

void main() {
  byte i=100;
  do {
    nest();
  } while (--i>0)
}

void nest() {
  byte j=100;
  do {
    *SCREEN = j;
  } while (--j>0)
}

Adding pre/post-modifier (byte) main::i ← -- (byte) main::i
Adding pre/post-modifier (byte) nest::j ← -- (byte) nest::j
PROGRAM
  (byte*) SCREEN ← (word) 1024
  (void~) $0 ← call main 
  proc (void()) main()
  (byte) main::i ← (byte) 100
main::@1:
  (void~) main::$0 ← call nest 
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$1 ← (byte) main::i > (byte) 0
  if((boolean~) main::$1) goto main::@1
main::@return:
  return 
  endproc // main()
  proc (void()) nest()
  (byte) nest::j ← (byte) 100
nest::@1:
  *((byte*) SCREEN) ← (byte) nest::j
  (byte) nest::j ← -- (byte) nest::j
  (boolean~) nest::$0 ← (byte) nest::j > (byte) 0
  if((boolean~) nest::$0) goto nest::@1
nest::@return:
  return 
  endproc // nest()

SYMBOLS
(void~) $0
(byte*) SCREEN
(void()) main()
(void~) main::$0
(boolean~) main::$1
(label) main::@1
(label) main::@return
(byte) main::i
(void()) nest()
(boolean~) nest::$0
(label) nest::@1
(label) nest::@return
(byte) nest::j

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  (void~) $0 ← call main 
  to:@1
main: scope:[main]  from
  (byte) main::i ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (void~) main::$0 ← call nest 
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$1 ← (byte) main::i > (byte) 0
  if((boolean~) main::$1) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
nest: scope:[nest]  from
  (byte) nest::j ← (byte) 100
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  *((byte*) SCREEN) ← (byte) nest::j
  (byte) nest::j ← -- (byte) nest::j
  (boolean~) nest::$0 ← (byte) nest::j > (byte) 0
  if((boolean~) nest::$0) goto nest::@1
  to:nest::@2
nest::@2: scope:[nest]  from nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@2
  return 
  to:@return
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

Removing empty block main::@2
Removing empty block @1
Removing empty block nest::@2
Removing empty block @2
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  (void~) $0 ← call main 
  to:@end
main: scope:[main]  from
  (byte) main::i ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (void~) main::$0 ← call nest 
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$1 ← (byte) main::i > (byte) 0
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
nest: scope:[nest]  from
  (byte) nest::j ← (byte) 100
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  *((byte*) SCREEN) ← (byte) nest::j
  (byte) nest::j ← -- (byte) nest::j
  (boolean~) nest::$0 ← (byte) nest::j > (byte) 0
  if((boolean~) nest::$0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@end: scope:[]  from @begin

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  call main param-assignment
  to:@3
@3: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte) main::i ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$1 ← (byte) main::i > (byte) 0
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest: scope:[nest]  from main::@1
  (byte) nest::j ← (byte) 100
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  *((byte*) SCREEN) ← (byte) nest::j
  (byte) nest::j ← -- (byte) nest::j
  (boolean~) nest::$0 ← (byte) nest::j > (byte) 0
  if((boolean~) nest::$0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@end: scope:[]  from @3

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@3
@3: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN#4 ← phi( @begin/(byte*) SCREEN#0 )
  (byte) main::i#0 ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#3 ← phi( main/(byte*) SCREEN#4 main::@3/(byte*) SCREEN#5 )
  (byte) main::i#3 ← phi( main/(byte) main::i#0 main::@3/(byte) main::i#1 )
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN#5 ← phi( main::@1/(byte*) SCREEN#3 )
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#3 )
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest: scope:[nest]  from main::@1
  (byte*) SCREEN#2 ← phi( main::@1/(byte*) SCREEN#3 )
  (byte) nest::j#0 ← (byte) 100
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  (byte*) SCREEN#1 ← phi( nest/(byte*) SCREEN#2 nest::@1/(byte*) SCREEN#1 )
  (byte) nest::j#2 ← phi( nest/(byte) nest::j#0 nest::@1/(byte) nest::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  (boolean~) nest::$0 ← (byte) nest::j#1 > (byte) 0
  if((boolean~) nest::$0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@end: scope:[]  from @3

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@3
@3: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN#4 ← phi( @begin/(byte*) SCREEN#0 )
  (byte) main::i#0 ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#3 ← phi( main/(byte*) SCREEN#4 main::@3/(byte*) SCREEN#5 )
  (byte) main::i#3 ← phi( main/(byte) main::i#0 main::@3/(byte) main::i#1 )
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN#5 ← phi( main::@1/(byte*) SCREEN#3 )
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#3 )
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest: scope:[nest]  from main::@1
  (byte*) SCREEN#2 ← phi( main::@1/(byte*) SCREEN#3 )
  (byte) nest::j#0 ← (byte) 100
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  (byte*) SCREEN#1 ← phi( nest/(byte*) SCREEN#2 nest::@1/(byte*) SCREEN#1 )
  (byte) nest::j#2 ← phi( nest/(byte) nest::j#0 nest::@1/(byte) nest::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  (boolean~) nest::$0 ← (byte) nest::j#1 > (byte) 0
  if((boolean~) nest::$0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@end: scope:[]  from @3

Culled Empty Block (label) @3
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN#4 ← phi( @begin/(byte*) SCREEN#0 )
  (byte) main::i#0 ← (byte) 100
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#3 ← phi( main/(byte*) SCREEN#4 main::@3/(byte*) SCREEN#5 )
  (byte) main::i#3 ← phi( main/(byte) main::i#0 main::@3/(byte) main::i#1 )
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN#5 ← phi( main::@1/(byte*) SCREEN#3 )
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#3 )
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest: scope:[nest]  from main::@1
  (byte*) SCREEN#2 ← phi( main::@1/(byte*) SCREEN#3 )
  (byte) nest::j#0 ← (byte) 100
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  (byte*) SCREEN#1 ← phi( nest/(byte*) SCREEN#2 nest::@1/(byte*) SCREEN#1 )
  (byte) nest::j#2 ← phi( nest/(byte) nest::j#0 nest::@1/(byte) nest::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  (boolean~) nest::$0 ← (byte) nest::j#1 > (byte) 0
  if((boolean~) nest::$0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@end: scope:[]  from @begin

Constant (byte*) SCREEN#0 (word) 1024
Constant (byte) main::i#0 (byte) 100
Constant (byte) nest::j#0 (byte) 100
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN#4 ← phi( @begin/(word) 1024 )
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#3 ← phi( main/(byte*) SCREEN#4 main::@3/(byte*) SCREEN#5 )
  (byte) main::i#3 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN#5 ← phi( main::@1/(byte*) SCREEN#3 )
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#3 )
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest: scope:[nest]  from main::@1
  (byte*) SCREEN#2 ← phi( main::@1/(byte*) SCREEN#3 )
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  (byte*) SCREEN#1 ← phi( nest/(byte*) SCREEN#2 nest::@1/(byte*) SCREEN#1 )
  (byte) nest::j#2 ← phi( nest/(byte) 100 nest::@1/(byte) nest::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  (boolean~) nest::$0 ← (byte) nest::j#1 > (byte) 0
  if((boolean~) nest::$0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@end: scope:[]  from @begin

Alias (byte) main::i#2 = (byte) main::i#3 
Alias (byte*) SCREEN#2 = (byte*) SCREEN#5 (byte*) SCREEN#3 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN#4 ← phi( @begin/(word) 1024 )
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#4 main::@3/(byte*) SCREEN#2 )
  (byte) main::i#2 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest: scope:[nest]  from main::@1
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  (byte*) SCREEN#1 ← phi( nest/(byte*) SCREEN#2 nest::@1/(byte*) SCREEN#1 )
  (byte) nest::j#2 ← phi( nest/(byte) 100 nest::@1/(byte) nest::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  (boolean~) nest::$0 ← (byte) nest::j#1 > (byte) 0
  if((boolean~) nest::$0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@end: scope:[]  from @begin

Redundant Phi (byte*) SCREEN#4 (word) 1024
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#2 ← phi( main/(word) 1024 main::@3/(byte*) SCREEN#2 )
  (byte) main::i#2 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest: scope:[nest]  from main::@1
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  (byte*) SCREEN#1 ← phi( nest/(byte*) SCREEN#2 nest::@1/(byte*) SCREEN#1 )
  (byte) nest::j#2 ← phi( nest/(byte) 100 nest::@1/(byte) nest::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  (boolean~) nest::$0 ← (byte) nest::j#1 > (byte) 0
  if((boolean~) nest::$0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@end: scope:[]  from @begin

Self Phi Eliminated (byte*) SCREEN#2
Self Phi Eliminated (byte*) SCREEN#1
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#2 ← phi( main/(word) 1024 )
  (byte) main::i#2 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::i#1 ← -- (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 > (byte) 0
  if((boolean~) main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest: scope:[nest]  from main::@1
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  (byte*) SCREEN#1 ← phi( nest/(byte*) SCREEN#2 )
  (byte) nest::j#2 ← phi( nest/(byte) 100 nest::@1/(byte) nest::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  (boolean~) nest::$0 ← (byte) nest::j#1 > (byte) 0
  if((boolean~) nest::$0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@end: scope:[]  from @begin

Simple Condition (boolean~) main::$1 if((byte) main::i#1>(byte) 0) goto main::@1
Simple Condition (boolean~) nest::$0 if((byte) nest::j#1>(byte) 0) goto nest::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte*) SCREEN#2 ← phi( main/(word) 1024 )
  (byte) main::i#2 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1>(byte) 0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest: scope:[nest]  from main::@1
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  (byte*) SCREEN#1 ← phi( nest/(byte*) SCREEN#2 )
  (byte) nest::j#2 ← phi( nest/(byte) 100 nest::@1/(byte) nest::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  if((byte) nest::j#1>(byte) 0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@end: scope:[]  from @begin

Constant (byte*) SCREEN#2 (word) 1024
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#2 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1>(byte) 0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest: scope:[nest]  from main::@1
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  (byte*) SCREEN#1 ← phi( nest/(word) 1024 )
  (byte) nest::j#2 ← phi( nest/(byte) 100 nest::@1/(byte) nest::j#1 )
  *((byte*) SCREEN#1) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  if((byte) nest::j#1>(byte) 0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@end: scope:[]  from @begin

Redundant Phi (byte*) SCREEN#1 (word) 1024
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@3
  (byte) main::i#2 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 )
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1>(byte) 0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
nest: scope:[nest]  from main::@1
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  (byte) nest::j#2 ← phi( nest/(byte) 100 nest::@1/(byte) nest::j#1 )
  *((word) 1024) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  if((byte) nest::j#1>(byte) 0) goto nest::@1
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
@end: scope:[]  from @begin

Block Sequence Planned @begin @end main main::@1 main::@3 main::@return nest nest::@1 nest::@return 
Added new block during phi lifting main::@4(between main::@3 and main::@1)
Added new block during phi lifting nest::@3(between nest::@1 and nest::@1)
Block Sequence Planned @begin @end main main::@1 main::@3 main::@return main::@4 nest nest::@1 nest::@return nest::@3 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  call main param-assignment
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@4
  (byte) main::i#2 ← phi( main/(byte) 100 main::@4/(byte~) main::i#4 )
  call nest param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@1
  (byte) main::i#1 ← -- (byte) main::i#2
  if((byte) main::i#1>(byte) 0) goto main::@4
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
main::@4: scope:[main]  from main::@3
  (byte~) main::i#4 ← (byte) main::i#1
  to:main::@1
nest: scope:[nest]  from main::@1
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@3
  (byte) nest::j#2 ← phi( nest/(byte) 100 nest::@3/(byte~) nest::j#3 )
  *((word) 1024) ← (byte) nest::j#2
  (byte) nest::j#1 ← -- (byte) nest::j#2
  if((byte) nest::j#1>(byte) 0) goto nest::@3
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  return 
  to:@return
nest::@3: scope:[nest]  from nest::@1
  (byte~) nest::j#3 ← (byte) nest::j#1
  to:nest::@1

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagated main::i#2 through call [2] call nest param-assignment
Propagating live ranges...
Propagated main::i#2 through call [2] call nest param-assignment
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [1] (byte) main::i#2 ← phi( main/(byte) 100 main::@4/(byte~) main::i#4 ) [ main::i#2 ]
  [2] call nest param-assignment [ main::i#2 ]
  to:main::@3
main::@3: scope:[main]  from main::@1
  [3] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ]
  [4] if((byte) main::i#1>(byte) 0) goto main::@4 [ main::i#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@3
  [5] return  [ ]
  to:@return
main::@4: scope:[main]  from main::@3
  [6] (byte~) main::i#4 ← (byte) main::i#1 [ main::i#4 ]
  to:main::@1
nest: scope:[nest]  from main::@1
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@3
  [7] (byte) nest::j#2 ← phi( nest/(byte) 100 nest::@3/(byte~) nest::j#3 ) [ main::i#2 nest::j#2 ]
  [8] *((word) 1024) ← (byte) nest::j#2 [ main::i#2 nest::j#2 ]
  [9] (byte) nest::j#1 ← -- (byte) nest::j#2 [ main::i#2 nest::j#1 ]
  [10] if((byte) nest::j#1>(byte) 0) goto nest::@3 [ main::i#2 nest::j#1 ]
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  [11] return  [ main::i#2 ]
  to:@return
nest::@3: scope:[nest]  from nest::@1
  [12] (byte~) nest::j#3 ← (byte) nest::j#1 [ main::i#2 nest::j#3 ]
  to:nest::@1

Created 2 initial phi equivalence classes
Coalesced [6] main::i#4 ← main::i#1
Coalesced [12] nest::j#3 ← nest::j#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) main::@4
Culled Empty Block (label) nest::@3
Block Sequence Planned @begin @end main main::@1 main::@3 main::@return nest nest::@1 nest::@return 
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagated main::i#2 through call [2] call nest param-assignment
Propagating live ranges...
Propagated main::i#2 through call [2] call nest param-assignment
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [1] (byte) main::i#2 ← phi( main/(byte) 100 main::@3/(byte) main::i#1 ) [ main::i#2 ]
  [2] call nest param-assignment [ main::i#2 ]
  to:main::@3
main::@3: scope:[main]  from main::@1
  [3] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ]
  [4] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@3
  [5] return  [ ]
  to:@return
nest: scope:[nest]  from main::@1
  to:nest::@1
nest::@1: scope:[nest]  from nest nest::@1
  [6] (byte) nest::j#2 ← phi( nest/(byte) 100 nest::@1/(byte) nest::j#1 ) [ main::i#2 nest::j#2 ]
  [7] *((word) 1024) ← (byte) nest::j#2 [ main::i#2 nest::j#2 ]
  [8] (byte) nest::j#1 ← -- (byte) nest::j#2 [ main::i#2 nest::j#1 ]
  [9] if((byte) nest::j#1>(byte) 0) goto nest::@1 [ main::i#2 nest::j#1 ]
  to:nest::@return
nest::@return: scope:[nest]  from nest::@1
  [10] return  [ main::i#2 ]
  to:@return

CALL GRAPH
Calls in [] to 0:main 
Calls in [main] to 2:nest 

DOMINATORS
@begin dominated by  @begin 
@end dominated by  @end @begin 
main dominated by  @begin main 
main::@1 dominated by  @begin main::@1 main 
main::@3 dominated by  @begin main::@1 main::@3 main 
main::@return dominated by  main::@return @begin main::@1 main::@3 main 
nest dominated by  @begin nest main::@1 main 
nest::@1 dominated by  @begin nest main::@1 nest::@1 main 
nest::@return dominated by  nest::@return @begin nest main::@1 nest::@1 main 

Found back edge: Loop head: main::@1 tails: main::@3 blocks: null
Found back edge: Loop head: nest::@1 tails: nest::@1 blocks: null
Populated: Loop head: main::@1 tails: main::@3 blocks: main::@3 main::@1 
Populated: Loop head: nest::@1 tails: nest::@1 blocks: nest::@1 
NATURAL LOOPS
Loop head: main::@1 tails: main::@3 blocks: main::@3 main::@1 
Loop head: nest::@1 tails: nest::@1 blocks: nest::@1 

Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@3 blocks: main::@3 main::@1 
Found 1 loops in scope [nest]
  Loop head: nest::@1 tails: nest::@1 blocks: nest::@1 
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@3 blocks: main::@3 main::@1  depth: 1
Loop head: nest::@1 tails: nest::@1 blocks: nest::@1  depth: 2


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 3.142857142857143
(void()) nest()
(byte) nest::j
(byte) nest::j#1 151.5
(byte) nest::j#2 151.5

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ nest::j#2 nest::j#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ nest::j#2 nest::j#1 ]
Allocated zp byte:2 to zp byte:2 [ main::i#2 main::i#1 ]
Allocated zp byte:3 to zp byte:3 [ nest::j#2 nest::j#1 ]
INITIAL ASM
//SEG0 @begin
bbegin:
//SEG1 [0] call main param-assignment [ ]
  jsr main
  jmp bend
//SEG2 @end
bend:
//SEG3 main
main: {
  //SEG4 [1] phi from main to main::@1
  b1_from_main:
  //SEG5 [1] phi (byte) main::i#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $2
    jmp b1
  //SEG6 [1] phi from main::@3 to main::@1
  b1_from_b3:
  //SEG7 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
    jmp b1
  //SEG8 main::@1
  b1:
  //SEG9 [2] call nest param-assignment [ main::i#2 ]
    jsr nest
    jmp b3
  //SEG10 main::@3
  b3:
  //SEG11 [3] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] -- zpby1=_dec_zpby1 
    dec $2
  //SEG12 [4] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 ] -- zpby1_gt_0_then_la1 
    lda $2
    bne b1_from_b3
    jmp breturn
  //SEG13 main::@return
  breturn:
  //SEG14 [5] return  [ ]
    rts
}
//SEG15 nest
nest: {
  //SEG16 [6] phi from nest to nest::@1
  b1_from_nest:
  //SEG17 [6] phi (byte) nest::j#2 = (byte) 100 -- zpby1=coby1 
    lda #$64
    sta $3
    jmp b1
  //SEG18 [6] phi from nest::@1 to nest::@1
  b1_from_b1:
  //SEG19 [6] phi (byte) nest::j#2 = (byte) nest::j#1 -- register_copy 
    jmp b1
  //SEG20 nest::@1
  b1:
  //SEG21 [7] *((word) 1024) ← (byte) nest::j#2 [ main::i#2 nest::j#2 ] -- _star_cowo1=zpby1 
    lda $3
    sta $400
  //SEG22 [8] (byte) nest::j#1 ← -- (byte) nest::j#2 [ main::i#2 nest::j#1 ] -- zpby1=_dec_zpby1 
    dec $3
  //SEG23 [9] if((byte) nest::j#1>(byte) 0) goto nest::@1 [ main::i#2 nest::j#1 ] -- zpby1_gt_0_then_la1 
    lda $3
    bne b1_from_b1
    jmp breturn
  //SEG24 nest::@return
  breturn:
  //SEG25 [10] return  [ main::i#2 ]
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp byte:2 [ main::i#2 main::i#1 ] : zp byte:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp byte:3 [ nest::j#2 nest::j#1 ] : zp byte:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [nest] 303: zp byte:3 [ nest::j#2 nest::j#1 ] 
Uplift Scope [main] 19.64: zp byte:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [nest] best 2506 combination reg byte x [ nest::j#2 nest::j#1 ] 
Uplifting [main] best 2436 combination reg byte y [ main::i#2 main::i#1 ] 
Uplifting [] best 2436 combination 
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 @begin
bbegin:
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @end
bend:
//SEG3 main
main: {
  //SEG4 [1] phi from main to main::@1
  b1_from_main:
  //SEG5 [1] phi (byte) main::i#2 = (byte) 100 -- yby=coby1 
    ldy #$64
    jmp b1
  //SEG6 [1] phi from main::@3 to main::@1
  b1_from_b3:
  //SEG7 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
  //SEG8 main::@1
  b1:
  //SEG9 [2] call nest param-assignment [ main::i#2 ]
    jsr nest
  //SEG10 main::@3
  b3:
  //SEG11 [3] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] -- yby=_dec_yby 
    dey
  //SEG12 [4] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 ] -- yby_gt_0_then_la1 
    cpy #$0
    bne b1_from_b3
  //SEG13 main::@return
  breturn:
  //SEG14 [5] return  [ ]
    rts
}
//SEG15 nest
nest: {
  //SEG16 [6] phi from nest to nest::@1
  b1_from_nest:
  //SEG17 [6] phi (byte) nest::j#2 = (byte) 100 -- xby=coby1 
    ldx #$64
    jmp b1
  //SEG18 [6] phi from nest::@1 to nest::@1
  b1_from_b1:
  //SEG19 [6] phi (byte) nest::j#2 = (byte) nest::j#1 -- register_copy 
  //SEG20 nest::@1
  b1:
  //SEG21 [7] *((word) 1024) ← (byte) nest::j#2 [ main::i#2 nest::j#2 ] -- _star_cowo1=xby 
    stx $400
  //SEG22 [8] (byte) nest::j#1 ← -- (byte) nest::j#2 [ main::i#2 nest::j#1 ] -- xby=_dec_xby 
    dex
  //SEG23 [9] if((byte) nest::j#1>(byte) 0) goto nest::@1 [ main::i#2 nest::j#1 ] -- xby_gt_0_then_la1 
    cpx #$0
    bne b1_from_b1
  //SEG24 nest::@return
  breturn:
  //SEG25 [10] return  [ main::i#2 ]
    rts
}

Removing instruction jmp b1
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 @begin
bbegin:
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @end
bend:
//SEG3 main
main: {
  //SEG4 [1] phi from main to main::@1
  b1_from_main:
  //SEG5 [1] phi (byte) main::i#2 = (byte) 100 -- yby=coby1 
    ldy #$64
  //SEG6 [1] phi from main::@3 to main::@1
  b1_from_b3:
  //SEG7 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
  //SEG8 main::@1
  b1:
  //SEG9 [2] call nest param-assignment [ main::i#2 ]
    jsr nest
  //SEG10 main::@3
  b3:
  //SEG11 [3] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] -- yby=_dec_yby 
    dey
  //SEG12 [4] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 ] -- yby_gt_0_then_la1 
    cpy #$0
    bne b1_from_b3
  //SEG13 main::@return
  breturn:
  //SEG14 [5] return  [ ]
    rts
}
//SEG15 nest
nest: {
  //SEG16 [6] phi from nest to nest::@1
  b1_from_nest:
  //SEG17 [6] phi (byte) nest::j#2 = (byte) 100 -- xby=coby1 
    ldx #$64
  //SEG18 [6] phi from nest::@1 to nest::@1
  b1_from_b1:
  //SEG19 [6] phi (byte) nest::j#2 = (byte) nest::j#1 -- register_copy 
  //SEG20 nest::@1
  b1:
  //SEG21 [7] *((word) 1024) ← (byte) nest::j#2 [ main::i#2 nest::j#2 ] -- _star_cowo1=xby 
    stx $400
  //SEG22 [8] (byte) nest::j#1 ← -- (byte) nest::j#2 [ main::i#2 nest::j#1 ] -- xby=_dec_xby 
    dex
  //SEG23 [9] if((byte) nest::j#1>(byte) 0) goto nest::@1 [ main::i#2 nest::j#1 ] -- xby_gt_0_then_la1 
    cpx #$0
    bne b1_from_b1
  //SEG24 nest::@return
  breturn:
  //SEG25 [10] return  [ main::i#2 ]
    rts
}

FINAL SYMBOL TABLE
(label) @begin
(label) @end
(byte*) SCREEN
(void()) main()
(label) main::@1
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte y 16.5
(byte) main::i#2 reg byte y 3.142857142857143
(void()) nest()
(label) nest::@1
(label) nest::@return
(byte) nest::j
(byte) nest::j#1 reg byte x 151.5
(byte) nest::j#2 reg byte x 151.5

reg byte y [ main::i#2 main::i#1 ]
reg byte x [ nest::j#2 nest::j#1 ]

FINAL CODE
//SEG0 @begin
bbegin:
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @end
bend:
//SEG3 main
main: {
  //SEG4 [1] phi from main to main::@1
  b1_from_main:
  //SEG5 [1] phi (byte) main::i#2 = (byte) 100 -- yby=coby1 
    ldy #$64
  //SEG6 [1] phi from main::@3 to main::@1
  b1_from_b3:
  //SEG7 [1] phi (byte) main::i#2 = (byte) main::i#1 -- register_copy 
  //SEG8 main::@1
  b1:
  //SEG9 [2] call nest param-assignment [ main::i#2 ]
    jsr nest
  //SEG10 main::@3
  b3:
  //SEG11 [3] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 ] -- yby=_dec_yby 
    dey
  //SEG12 [4] if((byte) main::i#1>(byte) 0) goto main::@1 [ main::i#1 ] -- yby_gt_0_then_la1 
    cpy #$0
    bne b1_from_b3
  //SEG13 main::@return
  breturn:
  //SEG14 [5] return  [ ]
    rts
}
//SEG15 nest
nest: {
  //SEG16 [6] phi from nest to nest::@1
  b1_from_nest:
  //SEG17 [6] phi (byte) nest::j#2 = (byte) 100 -- xby=coby1 
    ldx #$64
  //SEG18 [6] phi from nest::@1 to nest::@1
  b1_from_b1:
  //SEG19 [6] phi (byte) nest::j#2 = (byte) nest::j#1 -- register_copy 
  //SEG20 nest::@1
  b1:
  //SEG21 [7] *((word) 1024) ← (byte) nest::j#2 [ main::i#2 nest::j#2 ] -- _star_cowo1=xby 
    stx $400
  //SEG22 [8] (byte) nest::j#1 ← -- (byte) nest::j#2 [ main::i#2 nest::j#1 ] -- xby=_dec_xby 
    dex
  //SEG23 [9] if((byte) nest::j#1>(byte) 0) goto nest::@1 [ main::i#2 nest::j#1 ] -- xby_gt_0_then_la1 
    cpx #$0
    bne b1_from_b1
  //SEG24 nest::@return
  breturn:
  //SEG25 [10] return  [ main::i#2 ]
    rts
}

