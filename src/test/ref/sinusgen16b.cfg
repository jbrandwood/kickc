
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call sin16s_gen 
  to:main::@4
main::@4: scope:[main]  from main
  [2] phi()
  [3] call sin16s_genb 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [4] phi()
  [5] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main::@5 main::@7
  [6] (byte) main::i#2 ← phi( main::@5/(byte) 0 main::@7/(byte) main::i#1 )
  [6] (byte*) print_char_cursor#55 ← phi( main::@5/(const byte*) print_screen#0 main::@7/(byte*) print_char_cursor#1 )
  [6] (signed word*) main::st2#2 ← phi( main::@5/(const signed word*) main::sintab2 main::@7/(signed word*) main::st2#1 )
  [6] (signed word*) main::st1#2 ← phi( main::@5/(const signed word*) main::sintab1 main::@7/(signed word*) main::st1#1 )
  [7] (signed word) main::sw#0 ← *((signed word*) main::st1#2) - *((signed word*) main::st2#2)
  [8] if((signed word) main::sw#0<(signed byte) 0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [9] phi()
  [10] call print_str 
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [11] (byte*) print_char_cursor#54 ← phi( main::@1/(byte*) print_char_cursor#55 main::@3/(byte*) print_char_cursor#1 )
  [12] (signed word) print_sint::w#1 ← (signed word) main::sw#0
  [13] call print_sint 
  to:main::@6
main::@6: scope:[main]  from main::@2
  [14] phi()
  [15] call print_str 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [16] (signed word*) main::st1#1 ← (signed word*) main::st1#2 + (const byte) SIZEOF_SIGNED_WORD
  [17] (signed word*) main::st2#1 ← (signed word*) main::st2#2 + (const byte) SIZEOF_SIGNED_WORD
  [18] (byte) main::i#1 ← ++ (byte) main::i#2
  [19] if((byte) main::i#1!=(byte) $78) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@7
  [20] return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from main::@3 main::@6
  [21] (byte*) print_char_cursor#57 ← phi( main::@3/(byte*) print_char_cursor#55 main::@6/(byte*) print_char_cursor#12 )
  [21] (byte*) print_str::str#6 ← phi( main::@3/(const byte*) main::str1 main::@6/(const byte*) main::str )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [22] (byte*) print_char_cursor#1 ← phi( print_str/(byte*) print_char_cursor#57 print_str::@3/(byte*) print_char_cursor#12 )
  [22] (byte*) print_str::str#3 ← phi( print_str/(byte*) print_str::str#6 print_str::@3/(byte*) print_str::str#0 )
  [23] if((byte) 0!=*((byte*) print_str::str#3)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [24] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [25] (byte) print_char::ch#0 ← *((byte*) print_str::str#3)
  [26] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [27] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3
  to:print_str::@1

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_sint::@1 print_sint::@3 print_str::@2 print_uchar print_uchar::@1
  [28] (byte*) print_char_cursor#36 ← phi( print_sint::@1/(byte*) print_char_cursor#54 print_sint::@3/(byte*) print_char_cursor#54 print_str::@2/(byte*) print_char_cursor#1 print_uchar/(byte*) print_char_cursor#12 print_uchar::@1/(byte*) print_char_cursor#12 )
  [28] (byte) print_char::ch#5 ← phi( print_sint::@1/(byte) '-' print_sint::@3/(byte) ' ' print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#3 print_uchar::@1/(byte) print_char::ch#4 )
  [29] *((byte*) print_char_cursor#36) ← (byte) print_char::ch#5
  [30] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#36
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [31] return 
  to:@return

(void()) print_sint((signed word) print_sint::w)
print_sint: scope:[print_sint]  from main::@2
  [32] if((signed word) print_sint::w#1<(signed byte) 0) goto print_sint::@1
  to:print_sint::@3
print_sint::@3: scope:[print_sint]  from print_sint
  [33] phi()
  [34] call print_char 
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@3 print_sint::@4
  [35] (signed word) print_sint::w#4 ← phi( print_sint::@4/(signed word) print_sint::w#0 print_sint::@3/(signed word) print_sint::w#1 )
  [36] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#4
  [37] call print_uint 
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@2
  [38] return 
  to:@return
print_sint::@1: scope:[print_sint]  from print_sint
  [39] phi()
  [40] call print_char 
  to:print_sint::@4
print_sint::@4: scope:[print_sint]  from print_sint::@1
  [41] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#1
  to:print_sint::@2

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from print_sint::@2
  [42] (byte) print_uchar::b#0 ← > (word) print_uint::w#0
  [43] call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [44] (byte) print_uchar::b#1 ← < (word) print_uint::w#0
  [45] call print_uchar 
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [46] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_uint print_uint::@1
  [47] (byte) print_uchar::b#2 ← phi( print_uint/(byte) print_uchar::b#0 print_uint::@1/(byte) print_uchar::b#1 )
  [48] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4
  [49] (byte) print_char::ch#3 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [50] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [51] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f
  [52] (byte) print_char::ch#4 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [53] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [54] return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main::@5
  [55] phi()
  [56] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [57] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [58] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [59] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [60] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [61] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [62] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [63] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1

(void()) sin16s_genb((signed word*) sin16s_genb::sintab , (word) sin16s_genb::wavelength)
sin16s_genb: scope:[sin16s_genb]  from main::@4
  [64] phi()
  [65] call div32u16u 
  [66] (dword) div32u16u::return#3 ← (dword) div32u16u::return#0
  to:sin16s_genb::@3
sin16s_genb::@3: scope:[sin16s_genb]  from sin16s_genb
  [67] (dword) sin16s_genb::step#0 ← (dword) div32u16u::return#3
  to:sin16s_genb::@1
sin16s_genb::@1: scope:[sin16s_genb]  from sin16s_genb::@3 sin16s_genb::@4
  [68] (signed word*) sin16s_genb::sintab#2 ← phi( sin16s_genb::@3/(const signed word*) main::sintab2 sin16s_genb::@4/(signed word*) sin16s_genb::sintab#0 )
  [68] (dword) sin16s_genb::x#2 ← phi( sin16s_genb::@3/(dword) 0 sin16s_genb::@4/(dword) sin16s_genb::x#1 )
  [68] (word) sin16s_genb::i#2 ← phi( sin16s_genb::@3/(word) 0 sin16s_genb::@4/(word) sin16s_genb::i#1 )
  [69] if((word) sin16s_genb::i#2<(const word) main::wavelength) goto sin16s_genb::@2
  to:sin16s_genb::@return
sin16s_genb::@return: scope:[sin16s_genb]  from sin16s_genb::@1
  [70] return 
  to:@return
sin16s_genb::@2: scope:[sin16s_genb]  from sin16s_genb::@1
  [71] (word) sin16sb::x#0 ← > (dword) sin16s_genb::x#2
  [72] call sin16sb 
  [73] (signed word) sin16sb::return#0 ← (signed word) sin16sb::return#1
  to:sin16s_genb::@4
sin16s_genb::@4: scope:[sin16s_genb]  from sin16s_genb::@2
  [74] (signed word~) sin16s_genb::$3 ← (signed word) sin16sb::return#0
  [75] *((signed word*) sin16s_genb::sintab#2) ← (signed word~) sin16s_genb::$3
  [76] (signed word*) sin16s_genb::sintab#0 ← (signed word*) sin16s_genb::sintab#2 + (const byte) SIZEOF_SIGNED_WORD
  [77] (dword) sin16s_genb::x#1 ← (dword) sin16s_genb::x#2 + (dword) sin16s_genb::step#0
  [78] (word) sin16s_genb::i#1 ← ++ (word) sin16s_genb::i#2
  to:sin16s_genb::@1

(signed word()) sin16sb((word) sin16sb::x)
sin16sb: scope:[sin16sb]  from sin16s_genb::@2
  [79] if((word) sin16sb::x#0<(const nomodify word) PI_u4f12) goto sin16sb::@1
  to:sin16sb::@4
sin16sb::@4: scope:[sin16sb]  from sin16sb
  [80] (word) sin16sb::x#1 ← (word) sin16sb::x#0 - (const nomodify word) PI_u4f12
  to:sin16sb::@1
sin16sb::@1: scope:[sin16sb]  from sin16sb sin16sb::@4
  [81] (byte) sin16sb::isUpper#2 ← phi( sin16sb/(byte) 0 sin16sb::@4/(byte) 1 )
  [81] (word) sin16sb::x#4 ← phi( sin16sb/(word) sin16sb::x#0 sin16sb::@4/(word) sin16sb::x#1 )
  [82] if((word) sin16sb::x#4<(const nomodify word) PI_HALF_u4f12) goto sin16sb::@2
  to:sin16sb::@5
sin16sb::@5: scope:[sin16sb]  from sin16sb::@1
  [83] (word) sin16sb::x#2 ← (const nomodify word) PI_u4f12 - (word) sin16sb::x#4
  to:sin16sb::@2
sin16sb::@2: scope:[sin16sb]  from sin16sb::@1 sin16sb::@5
  [84] (word) sin16sb::x#6 ← phi( sin16sb::@1/(word) sin16sb::x#4 sin16sb::@5/(word) sin16sb::x#2 )
  [85] (word) sin16sb::x1#0 ← (word) sin16sb::x#6 << (byte) 3
  [86] (word) mulu16_sel::v1#5 ← (word) sin16sb::x1#0
  [87] (word) mulu16_sel::v2#5 ← (word) sin16sb::x1#0
  [88] call mulu16_sel 
  [89] (word) mulu16_sel::return#18 ← (word) mulu16_sel::return#17
  to:sin16sb::@7
sin16sb::@7: scope:[sin16sb]  from sin16sb::@2
  [90] (word) sin16sb::x2#0 ← (word) mulu16_sel::return#18
  [91] (word) mulu16_sel::v1#6 ← (word) sin16sb::x2#0
  [92] (word) mulu16_sel::v2#6 ← (word) sin16sb::x1#0
  [93] call mulu16_sel 
  [94] (word) mulu16_sel::return#19 ← (word) mulu16_sel::return#17
  to:sin16sb::@8
sin16sb::@8: scope:[sin16sb]  from sin16sb::@7
  [95] (word) sin16sb::x3#0 ← (word) mulu16_sel::return#19
  [96] (word) mulu16_sel::v1#7 ← (word) sin16sb::x3#0
  [97] call mulu16_sel 
  [98] (word) mulu16_sel::return#20 ← (word) mulu16_sel::return#17
  to:sin16sb::@9
sin16sb::@9: scope:[sin16sb]  from sin16sb::@8
  [99] (word) sin16sb::x3_6#0 ← (word) mulu16_sel::return#20
  [100] (word) sin16sb::usinx#0 ← (word) sin16sb::x1#0 - (word) sin16sb::x3_6#0
  [101] (word) mulu16_sel::v1#8 ← (word) sin16sb::x3#0
  [102] (word) mulu16_sel::v2#8 ← (word) sin16sb::x1#0
  [103] call mulu16_sel 
  [104] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#17
  to:sin16sb::@10
sin16sb::@10: scope:[sin16sb]  from sin16sb::@9
  [105] (word) sin16sb::x4#0 ← (word) mulu16_sel::return#10
  [106] (word) mulu16_sel::v1#9 ← (word) sin16sb::x4#0
  [107] (word) mulu16_sel::v2#9 ← (word) sin16sb::x1#0
  [108] call mulu16_sel 
  [109] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#17
  to:sin16sb::@11
sin16sb::@11: scope:[sin16sb]  from sin16sb::@10
  [110] (word) sin16sb::x5#0 ← (word) mulu16_sel::return#11
  [111] (word) sin16sb::x5_128#0 ← (word) sin16sb::x5#0 >> (byte) 4
  [112] (word) sin16sb::usinx#1 ← (word) sin16sb::usinx#0 + (word) sin16sb::x5_128#0
  [113] if((byte) sin16sb::isUpper#2==(byte) 0) goto sin16sb::@12
  to:sin16sb::@6
sin16sb::@6: scope:[sin16sb]  from sin16sb::@11
  [114] (signed word) sin16sb::sinx#1 ← - (signed word)(word) sin16sb::usinx#1
  to:sin16sb::@3
sin16sb::@3: scope:[sin16sb]  from sin16sb::@12 sin16sb::@6
  [115] (signed word) sin16sb::return#1 ← phi( sin16sb::@12/(signed word) sin16sb::return#5 sin16sb::@6/(signed word) sin16sb::sinx#1 )
  to:sin16sb::@return
sin16sb::@return: scope:[sin16sb]  from sin16sb::@3
  [116] return 
  to:@return
sin16sb::@12: scope:[sin16sb]  from sin16sb::@11
  [117] (signed word) sin16sb::return#5 ← (signed word)(word) sin16sb::usinx#1
  to:sin16sb::@3

(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@2 sin16s::@7 sin16s::@8 sin16s::@9 sin16sb::@10 sin16sb::@2 sin16sb::@7 sin16sb::@8 sin16sb::@9
  [118] (byte) mulu16_sel::select#10 ← phi( sin16s::@10/(byte) 0 sin16s::@2/(byte) 0 sin16s::@7/(byte) 1 sin16s::@8/(byte) 1 sin16s::@9/(byte) 0 sin16sb::@10/(byte) 0 sin16sb::@2/(byte) 0 sin16sb::@7/(byte) 1 sin16sb::@8/(byte) 1 sin16sb::@9/(byte) 0 )
  [118] (word) mulu16_sel::v2#10 ← phi( sin16s::@10/(word) mulu16_sel::v2#4 sin16s::@2/(word) mulu16_sel::v2#0 sin16s::@7/(word) mulu16_sel::v2#1 sin16s::@8/(word)(number) $10000/(number) 6 sin16s::@9/(word) mulu16_sel::v2#3 sin16sb::@10/(word) mulu16_sel::v2#9 sin16sb::@2/(word) mulu16_sel::v2#5 sin16sb::@7/(word) mulu16_sel::v2#6 sin16sb::@8/(word)(number) $10000/(number) 6 sin16sb::@9/(word) mulu16_sel::v2#8 )
  [118] (word) mulu16_sel::v1#10 ← phi( sin16s::@10/(word) mulu16_sel::v1#4 sin16s::@2/(word) mulu16_sel::v1#0 sin16s::@7/(word) mulu16_sel::v1#1 sin16s::@8/(word) mulu16_sel::v1#2 sin16s::@9/(word) mulu16_sel::v1#3 sin16sb::@10/(word) mulu16_sel::v1#9 sin16sb::@2/(word) mulu16_sel::v1#5 sin16sb::@7/(word) mulu16_sel::v1#6 sin16sb::@8/(word) mulu16_sel::v1#7 sin16sb::@9/(word) mulu16_sel::v1#8 )
  [119] (word) mul16u::a#1 ← (word) mulu16_sel::v1#10
  [120] (word) mul16u::b#0 ← (word) mulu16_sel::v2#10
  [121] call mul16u 
  [122] (dword) mul16u::return#2 ← (dword) mul16u::res#2
  to:mulu16_sel::@1
mulu16_sel::@1: scope:[mulu16_sel]  from mulu16_sel
  [123] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#2
  [124] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#10
  [125] (word) mulu16_sel::return#17 ← > (dword~) mulu16_sel::$1
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@1
  [126] return 
  to:@return

(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
mul16u: scope:[mul16u]  from mulu16_sel
  [127] (dword) mul16u::mb#0 ← (dword)(word) mul16u::b#0
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@3
  [128] (dword) mul16u::mb#2 ← phi( mul16u/(dword) mul16u::mb#0 mul16u::@3/(dword) mul16u::mb#1 )
  [128] (dword) mul16u::res#2 ← phi( mul16u/(dword) 0 mul16u::@3/(dword) mul16u::res#6 )
  [128] (word) mul16u::a#2 ← phi( mul16u/(word) mul16u::a#1 mul16u::@3/(word) mul16u::a#0 )
  [129] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [130] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [131] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1
  [132] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2
  [133] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@2 mul16u::@4
  [134] (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#2 mul16u::@4/(dword) mul16u::res#1 )
  [135] (word) mul16u::a#0 ← (word) mul16u::a#2 >> (byte) 1
  [136] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1
  to:mul16u::@1

(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
div32u16u: scope:[div32u16u]  from sin16s_gen sin16s_genb
  [137] phi()
  [138] call divr16u 
  [139] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  [140] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2
  [141] (word) divr16u::rem#4 ← (word) rem16u#0
  [142] call divr16u 
  [143] (word) divr16u::return#3 ← (word) divr16u::return#0
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  [144] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3
  [145] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  [146] return 
  to:@return

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from div32u16u div32u16u::@1
  [147] (word) divr16u::dividend#5 ← phi( div32u16u/>(const nomodify dword) PI2_u4f28 div32u16u::@1/<(const nomodify dword) PI2_u4f28 )
  [147] (word) divr16u::rem#10 ← phi( div32u16u/(byte) 0 div32u16u::@1/(word) divr16u::rem#4 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [148] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [148] (word) divr16u::quotient#3 ← phi( divr16u/(word) 0 divr16u::@3/(word) divr16u::return#0 )
  [148] (word) divr16u::dividend#3 ← phi( divr16u/(word) divr16u::dividend#5 divr16u::@3/(word) divr16u::dividend#0 )
  [148] (word) divr16u::rem#5 ← phi( divr16u/(word) divr16u::rem#10 divr16u::@3/(word) divr16u::rem#11 )
  [149] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte) 1
  [150] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3
  [151] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [152] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [153] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [154] (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [155] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte) 1
  [156] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [157] if((word) divr16u::rem#6<(const word) main::wavelength) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [158] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [159] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) main::wavelength
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [160] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [160] (word) divr16u::rem#11 ← phi( divr16u::@2/(word) divr16u::rem#6 divr16u::@5/(word) divr16u::rem#2 )
  [161] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [162] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [163] (word) rem16u#0 ← (word) divr16u::rem#11
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [164] return 
  to:@return

(void()) sin16s_gen((signed word*) sin16s_gen::sintab , (word) sin16s_gen::wavelength)
sin16s_gen: scope:[sin16s_gen]  from main
  [165] phi()
  [166] call div32u16u 
  [167] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
  to:sin16s_gen::@3
sin16s_gen::@3: scope:[sin16s_gen]  from sin16s_gen
  [168] (dword) sin16s_gen::step#0 ← (dword) div32u16u::return#2
  to:sin16s_gen::@1
sin16s_gen::@1: scope:[sin16s_gen]  from sin16s_gen::@3 sin16s_gen::@4
  [169] (signed word*) sin16s_gen::sintab#2 ← phi( sin16s_gen::@3/(const signed word*) main::sintab1 sin16s_gen::@4/(signed word*) sin16s_gen::sintab#0 )
  [169] (dword) sin16s_gen::x#2 ← phi( sin16s_gen::@3/(dword) 0 sin16s_gen::@4/(dword) sin16s_gen::x#1 )
  [169] (word) sin16s_gen::i#2 ← phi( sin16s_gen::@3/(word) 0 sin16s_gen::@4/(word) sin16s_gen::i#1 )
  [170] if((word) sin16s_gen::i#2<(const word) main::wavelength) goto sin16s_gen::@2
  to:sin16s_gen::@return
sin16s_gen::@return: scope:[sin16s_gen]  from sin16s_gen::@1
  [171] return 
  to:@return
sin16s_gen::@2: scope:[sin16s_gen]  from sin16s_gen::@1
  [172] (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2
  [173] call sin16s 
  [174] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1
  to:sin16s_gen::@4
sin16s_gen::@4: scope:[sin16s_gen]  from sin16s_gen::@2
  [175] (signed word~) sin16s_gen::$2 ← (signed word) sin16s::return#0
  [176] *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$2
  [177] (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (const byte) SIZEOF_SIGNED_WORD
  [178] (dword) sin16s_gen::x#1 ← (dword) sin16s_gen::x#2 + (dword) sin16s_gen::step#0
  [179] (word) sin16s_gen::i#1 ← ++ (word) sin16s_gen::i#2
  to:sin16s_gen::@1

(signed word()) sin16s((dword) sin16s::x)
sin16s: scope:[sin16s]  from sin16s_gen::@2
  [180] if((dword) sin16s::x#0<(const nomodify dword) PI_u4f28) goto sin16s::@1
  to:sin16s::@4
sin16s::@4: scope:[sin16s]  from sin16s
  [181] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const nomodify dword) PI_u4f28
  to:sin16s::@1
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  [182] (byte) sin16s::isUpper#2 ← phi( sin16s/(byte) 0 sin16s::@4/(byte) 1 )
  [182] (dword) sin16s::x#4 ← phi( sin16s/(dword) sin16s::x#0 sin16s::@4/(dword) sin16s::x#1 )
  [183] if((dword) sin16s::x#4<(const nomodify dword) PI_HALF_u4f28) goto sin16s::@2
  to:sin16s::@5
sin16s::@5: scope:[sin16s]  from sin16s::@1
  [184] (dword) sin16s::x#2 ← (const nomodify dword) PI_u4f28 - (dword) sin16s::x#4
  to:sin16s::@2
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  [185] (dword) sin16s::x#6 ← phi( sin16s::@1/(dword) sin16s::x#4 sin16s::@5/(dword) sin16s::x#2 )
  [186] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3
  [187] (word) sin16s::x1#0 ← > (dword~) sin16s::$4
  [188] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0
  [189] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0
  [190] call mulu16_sel 
  [191] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#17
  to:sin16s::@7
sin16s::@7: scope:[sin16s]  from sin16s::@2
  [192] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0
  [193] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  [194] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0
  [195] call mulu16_sel 
  [196] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#17
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@7
  [197] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1
  [198] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  [199] call mulu16_sel 
  [200] (word) mulu16_sel::return#14 ← (word) mulu16_sel::return#17
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  [201] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#14
  [202] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0
  [203] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0
  [204] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0
  [205] call mulu16_sel 
  [206] (word) mulu16_sel::return#15 ← (word) mulu16_sel::return#17
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  [207] (word) sin16s::x4#0 ← (word) mulu16_sel::return#15
  [208] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  [209] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0
  [210] call mulu16_sel 
  [211] (word) mulu16_sel::return#16 ← (word) mulu16_sel::return#17
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  [212] (word) sin16s::x5#0 ← (word) mulu16_sel::return#16
  [213] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4
  [214] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0
  [215] if((byte) sin16s::isUpper#2==(byte) 0) goto sin16s::@12
  to:sin16s::@6
sin16s::@6: scope:[sin16s]  from sin16s::@11
  [216] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1
  to:sin16s::@3
sin16s::@3: scope:[sin16s]  from sin16s::@12 sin16s::@6
  [217] (signed word) sin16s::return#1 ← phi( sin16s::@12/(signed word) sin16s::return#5 sin16s::@6/(signed word) sin16s::sinx#1 )
  to:sin16s::@return
sin16s::@return: scope:[sin16s]  from sin16s::@3
  [218] return 
  to:@return
sin16s::@12: scope:[sin16s]  from sin16s::@11
  [219] (signed word) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1
  to:sin16s::@3
