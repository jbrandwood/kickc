@1: from @BEGIN @5                                      b#3 a#7 $2  b#4 $4  b#2 b#8 a#1
  (word) b#3 ← phi( @BEGIN/(byte) 0 @5/(word) b#8 )     L   .   .   .   .   .   R   +
  (byte) a#7 ← phi( @BEGIN/(byte) 0 @5/(byte) a#1 )     +   L   .   .   .   .   .   R
  (boolean*) $2 ← (byte) a#7 < (byte) 10                +   R   L   .   .   .   .   .
  if((boolean*) $2) goto @2                             +   +   R   .   .   .   .   .
  to: @END                                              .   .   .   .   .   .   .   .
@2: from @1 ----------------------------------------------------------------------------
  (word) b#4 ← (word) b#3 + (byte) a#7                  R   R   .   L   .   .   .   .
  (boolean*) $4 ← (word) b#4 > (byte) 10                .   +   .   R   L   .   .   .
  if((boolean*) $4) goto @4                             .   +   .   +   R   .   .   .
  to:@5                                                 .   .   .   +   .   .   .   .
@4: from @2 ----------------------------------------------------------------------------
  (word) b#2 ← (word) b#4 - (byte) 10                   .   +   .   R   .   L   .   .
  to:@5                                                 .   +   .   .   .   +   .   .
@5: from @4 @2 -------------------------------------------------------------------------
  (word) b#8 ← phi( @2/(word) b#4 @4/(word) b#2 )       .   +   .   R   .   R   L   .
  (byte) a#1 ← (byte) a#7 + (byte) 1                    .   R   .   .   .   .   +   L
  to:@1

@BEGIN:
@1_from_@0:
  ldx #0 //X=a
  lda #0 //A=b
@1: // A=b, X=a
  cpx #10 // $2 (C)
  bcs @END
@2: // A=b, X=a
  stx $2 // tmp
  adc $2 // tmp
  cmp #11 // $4 (C)
  bcc @5
@4: // A=b, X=a
  sec
  sbc #10
@5: // A=b, X=a
  inx // a
  jmp @1
@END:

@BEGIN:
@1_from_@0:
  lda #0
  sta $2 // b
  sta $3 // a
@1:
  lda $3 // a
  cmp #10 // $2 (C)
  bcs @END
@2:
  adc $2 // b
  sta $2 // b
  lda #10 // (b#4 > 10) -> (10 < b#4)
  cmp $2 // $4 (C)
  bcs @5
@4:
  lda $2 // b
  sec
  sbc #10
  sta $2 // b
@5:
  inc $3 // a
  jmp @1
@END:


@BEGIN:
@1_from_@0:
  lda #0
  sta $2 // b#3
  lda #0
  sta $3 // a#7
  jmp @1
@1_from_@5:
  lda $5 // b#8
  sta $2 // b#3
  lda $6 // a#1
  sta $3 // a#7
@1:
  lda $3 // a#7
  cmp #10 // $2 (C)
  bcc @2
  jmp @END
@2:
  lda $2 // b#3
  clc
  adc $3 // a#7
  sta $4 // b#4
  lda #10 // (b#4 > 10) -> (10 < b#4)
  cmp $4 // $4 (C)
  bcc @4
  jmp @5_from_@2
@4:
  lda $4 // b#4
  sec
  sbc #10
  sta $7 // b#2
  jmp @5_from_@4
@5_from_@2:
  lda $4 // b#4
  sta $5 // b#8
  jmp @5
@5_from_@4:
  lda $7 // b#2
  sta $5 // b#8
@5:
  lda $3 // a#7
  clc
  adc 1
  sta $6 // a#1
  jmp @1_from_@5
@END:
