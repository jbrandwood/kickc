(label) @15
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) 1024
(byte*) char_cursor
(byte*) char_cursor#1 char_cursor zp ZP_WORD:6 101.0
(byte*~) char_cursor#100 char_cursor zp ZP_WORD:6 22.0
(byte*) char_cursor#11 char_cursor zp ZP_WORD:6 3.40625
(byte*) char_cursor#2 char_cursor zp ZP_WORD:6 23.1875
(byte*) char_cursor#48 char_cursor zp ZP_WORD:6 5.0
(byte*) char_cursor#76 char_cursor zp ZP_WORD:6 3.0
(byte*) char_cursor#77 char_cursor zp ZP_WORD:6 15.999999999999998
(byte*) char_cursor#78 char_cursor zp ZP_WORD:6 15.999999999999998
(byte*) char_cursor#81 char_cursor zp ZP_WORD:6 2.4444444444444446
(byte*~) char_cursor#91 char_cursor zp ZP_WORD:6 22.0
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(signed byte~) div8s::$2 reg byte a 2.0
(signed byte~) div8s::$7 reg byte x 1.0
(label) div8s::@15
(label) div8s::@16
(label) div8s::@17
(label) div8s::@18
(label) div8s::@2
(label) div8s::@4
(label) div8s::@5
(label) div8s::@7
(label) div8s::@9
(label) div8s::@return
(signed byte) div8s::dividend
(signed byte) div8s::dividend#0 reg byte a 5.0
(byte) div8s::dividendb
(byte) div8s::dividendb#3 reg byte y 0.75
(byte~) div8s::dividendb#7 reg byte y 4.0
(byte~) div8s::dividendb#8 reg byte y 4.0
(signed byte) div8s::divisor
(signed byte) div8s::divisor#0 reg byte x 2.142857142857143
(byte) div8s::divisorb
(byte) div8s::divisorb#3 reg byte x 2.0
(byte~) div8s::divisorb#4 reg byte x 4.0
(byte~) div8s::divisorb#5 reg byte x 4.0
(byte) div8s::neg
(byte) div8s::neg#2 neg zp ZP_BYTE:13 2.0
(byte) div8s::neg#3 neg zp ZP_BYTE:13 1.0
(byte) div8s::neg#4 neg zp ZP_BYTE:13 0.8571428571428571
(byte) div8s::rem8u
(byte) div8s::rem8u#0 rem8u zp ZP_BYTE:16 0.024390243902439025
(byte) div8s::resultb
(byte) div8s::resultb#0 reg byte y 0.6666666666666666
(signed byte) div8s::return
(signed byte) div8s::return#0 reg byte a 4.0
(signed byte) div8s::return#2 reg byte a 5.0
(signed byte) div8s::return#3 reg byte a 22.0
(signed byte~) div8s::return#6 reg byte a 2.0
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor , (byte*) div8u::remainder)
(byte~) div8u::$1 reg byte a 202.0
(label) div8u::@1
(label) div8u::@2
(label) div8u::@3
(label) div8u::@4
(label) div8u::@5
(label) div8u::@6
(label) div8u::@return
(byte) div8u::dividend
(byte) div8u::dividend#0 dividend zp ZP_BYTE:11 25.25
(byte) div8u::dividend#1 dividend zp ZP_BYTE:11 2.0
(byte) div8u::dividend#2 dividend zp ZP_BYTE:11 11.0
(byte) div8u::dividend#3 dividend zp ZP_BYTE:11 50.83333333333333
(byte) div8u::dividend#5 dividend zp ZP_BYTE:11 15.0
(byte) div8u::divisor
(byte) div8u::divisor#0 divisor zp ZP_BYTE:10 4.0
(byte) div8u::divisor#1 divisor zp ZP_BYTE:10 22.0
(byte) div8u::divisor#6 divisor zp ZP_BYTE:10 14.333333333333332
(byte) div8u::i
(byte) div8u::i#1 reg byte x 151.5
(byte) div8u::i#2 reg byte x 16.833333333333332
(byte) div8u::quotient
(byte) div8u::quotient#1 quotient zp ZP_BYTE:12 151.5
(byte) div8u::quotient#2 quotient zp ZP_BYTE:12 101.0
(byte) div8u::quotient#3 quotient zp ZP_BYTE:12 28.857142857142858
(byte) div8u::rem
(byte) div8u::rem#1 reg byte y 101.0
(byte) div8u::rem#2 reg byte y 202.0
(byte) div8u::rem#3 reg byte y 202.0
(byte) div8u::rem#4 reg byte y 202.0
(byte) div8u::rem#5 reg byte y 101.0
(byte) div8u::rem#8 reg byte y 101.66666666666667
(byte*) div8u::remainder
(byte*) div8u::remainder#8 remainder zp ZP_WORD:8 0.13333333333333333
(byte) div8u::return
(byte) div8u::return#0 return zp ZP_BYTE:12 45.142857142857146
(byte) div8u::return#2 reg byte a 4.0
(byte) div8u::return#3 reg byte a 22.0
(byte*) line_cursor
(byte*) line_cursor#1 line_cursor zp ZP_WORD:3 9.131578947368421
(byte*) line_cursor#14 line_cursor zp ZP_WORD:3 204.0
(byte*) line_cursor#27 line_cursor zp ZP_WORD:3 24.0
(byte*) line_cursor#30 line_cursor zp ZP_WORD:3 0.9565217391304348
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#1 b zp ZP_BYTE:5 11.0
(byte) print_byte::b#2 b zp ZP_BYTE:5 22.0
(byte) print_byte::b#3 b zp ZP_BYTE:5 22.0
(byte) print_byte::b#4 b zp ZP_BYTE:5 22.0
(byte) print_byte::b#5 b zp ZP_BYTE:5 12.5
(byte~) print_byte::b#7 b zp ZP_BYTE:5 4.0
(byte[]) print_byte::hextab
(const string) print_byte::hextab#0 hextab = (string) "0123456789abcdef"
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#1 reg byte a 4.0
(byte) print_char::ch#2 reg byte a 4.0
(byte) print_char::ch#3 reg byte a 6.0
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:3 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:3 16.5
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(label) print_sbyte::@1
(label) print_sbyte::@2
(label) print_sbyte::@4
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0 b zp ZP_BYTE:5 4.0
(signed byte) print_sbyte::b#1 b zp ZP_BYTE:5 22.0
(signed byte) print_sbyte::b#2 b zp ZP_BYTE:5 22.0
(signed byte) print_sbyte::b#3 b zp ZP_BYTE:5 22.0
(signed byte) print_sbyte::b#4 b zp ZP_BYTE:5 22.0
(signed byte) print_sbyte::b#5 b zp ZP_BYTE:5 12.5
(signed byte) print_sbyte::b#6 b zp ZP_BYTE:5 4.0
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp ZP_WORD:8 202.0
(byte*) print_str::str#7 str zp ZP_WORD:8 101.5
(byte*) print_str::str#9 str zp ZP_WORD:8 2.0
(signed byte) rem8s
(signed byte) rem8s#1 reg byte x 2.0
(signed byte) rem8s#18 reg byte x 110.0
(signed byte) rem8s#3 reg byte x 1.0833333333333333
(signed byte~) rem8s#30 reg byte x 4.0
(void()) test_8s()
(label) test_8s::@1
(label) test_8s::@10
(label) test_8s::@11
(label) test_8s::@12
(label) test_8s::@3
(label) test_8s::@4
(label) test_8s::@5
(label) test_8s::@6
(label) test_8s::@7
(label) test_8s::@8
(label) test_8s::@9
(label) test_8s::@return
(signed byte) test_8s::dividend
(signed byte) test_8s::dividend#0 dividend zp ZP_BYTE:5 4.714285714285714
(signed byte[]) test_8s::dividends
(const signed byte[]) test_8s::dividends#0 dividends = { (byte/signed byte/word/signed word/dword/signed dword) 127, -(byte/signed byte/word/signed word/dword/signed dword) 127, -(byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127 }
(signed byte) test_8s::divisor
(signed byte) test_8s::divisor#0 divisor zp ZP_BYTE:15 3.3000000000000003
(signed byte[]) test_8s::divisors
(const signed byte[]) test_8s::divisors#0 divisors = { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, -(byte/signed byte/word/signed word/dword/signed dword) 11, -(byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
(byte) test_8s::i
(byte) test_8s::i#1 i zp ZP_BYTE:2 11.0
(byte) test_8s::i#10 i zp ZP_BYTE:2 1.8333333333333333
(signed byte) test_8s::res
(signed byte) test_8s::res#0 res zp ZP_BYTE:10 2.4444444444444446
(const string) test_8s::str str = (string) " / @"
(const string) test_8s::str1 str1 = (string) " = @"
(const string) test_8s::str2 str2 = (string) " @"
(void()) test_8u()
(label) test_8u::@1
(label) test_8u::@10
(label) test_8u::@11
(label) test_8u::@3
(label) test_8u::@4
(label) test_8u::@5
(label) test_8u::@6
(label) test_8u::@7
(label) test_8u::@8
(label) test_8u::@9
(label) test_8u::@return
(byte) test_8u::dividend
(byte) test_8u::dividend#0 dividend zp ZP_BYTE:5 4.714285714285714
(byte[]) test_8u::dividends
(const byte[]) test_8u::dividends#0 dividends = { (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255 }
(byte) test_8u::divisor
(byte) test_8u::divisor#0 divisor zp ZP_BYTE:10 3.0
(byte[]) test_8u::divisors
(const byte[]) test_8u::divisors#0 divisors = { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
(byte) test_8u::i
(byte) test_8u::i#1 i zp ZP_BYTE:2 16.5
(byte) test_8u::i#10 i zp ZP_BYTE:2 1.76
(byte) test_8u::rem
(byte) test_8u::rem#0 rem zp ZP_BYTE:14 0.12745098039215685
(byte) test_8u::res
(byte) test_8u::res#0 reg byte x 2.2
(const string) test_8u::str str = (string) " / @"
(const string) test_8u::str1 str1 = (string) " = @"
(const string) test_8u::str2 str2 = (string) " @"

zp ZP_BYTE:2 [ test_8u::i#10 test_8u::i#1 test_8s::i#10 test_8s::i#1 ]
zp ZP_WORD:3 [ line_cursor#14 line_cursor#27 line_cursor#30 line_cursor#1 print_cls::sc#2 print_cls::sc#1 ]
zp ZP_BYTE:5 [ print_byte::b#5 print_byte::b#7 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 test_8u::dividend#0 test_8s::dividend#0 ]
reg byte a [ print_char::ch#3 print_char::ch#1 print_char::ch#2 ]
zp ZP_WORD:6 [ char_cursor#48 char_cursor#78 char_cursor#76 char_cursor#91 char_cursor#2 char_cursor#11 char_cursor#77 char_cursor#1 char_cursor#81 char_cursor#100 ]
zp ZP_WORD:8 [ print_str::str#7 print_str::str#9 print_str::str#0 div8u::remainder#8 ]
zp ZP_BYTE:10 [ div8u::divisor#6 div8u::divisor#0 div8u::divisor#1 test_8u::divisor#0 test_8s::res#0 ]
reg byte y [ div8u::rem#4 div8u::rem#8 div8u::rem#5 div8u::rem#1 div8u::rem#2 div8u::rem#3 ]
zp ZP_BYTE:11 [ div8u::dividend#3 div8u::dividend#5 div8u::dividend#1 div8u::dividend#2 div8u::dividend#0 ]
zp ZP_BYTE:12 [ div8u::quotient#3 div8u::return#0 div8u::quotient#1 div8u::quotient#2 ]
reg byte x [ div8u::i#2 div8u::i#1 ]
reg byte x [ rem8s#18 rem8s#3 rem8s#30 rem8s#1 ]
reg byte y [ div8s::dividendb#3 div8s::dividendb#7 div8s::dividendb#8 ]
reg byte x [ div8s::divisorb#3 div8s::divisorb#4 div8s::divisorb#5 ]
zp ZP_BYTE:13 [ div8s::neg#4 div8s::neg#3 div8s::neg#2 ]
reg byte a [ div8s::return#2 div8s::return#6 div8s::return#0 ]
zp ZP_BYTE:14 [ test_8u::rem#0 ]
reg byte a [ div8u::return#3 ]
reg byte x [ test_8u::res#0 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]
reg byte a [ div8u::$1 ]
zp ZP_BYTE:15 [ test_8s::divisor#0 ]
reg byte a [ div8s::dividend#0 ]
reg byte x [ div8s::divisor#0 ]
reg byte a [ div8s::return#3 ]
reg byte a [ div8s::$2 ]
reg byte x [ div8s::$7 ]
zp ZP_BYTE:16 [ div8s::rem8u#0 ]
reg byte a [ div8u::return#2 ]
reg byte y [ div8s::resultb#0 ]
