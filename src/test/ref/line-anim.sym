__constant char *BITMAP = (char *) 40960
__constant char * const BORDER_COLOR = (char *) 53280
__constant struct MOS6526_CIA * const CIA2 = (struct MOS6526_CIA *) 56576
__constant char * const D011 = (char *) 53265
__constant char * const D018 = (char *) 53272
__constant const char DELAY = 8
__constant char OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
__constant char * const PROCPORT = (char *) 1
__constant char * const PROCPORT_DDR = (char *) 0
__constant const char PROCPORT_DDR_MEMORY_MASK = 7
__constant const char PROCPORT_RAM_IO = 5
__constant char * const RASTER = (char *) 53266
__constant char *SCREEN = (char *) 34816
__constant const char SIZE = 4
__constant const char VICII_BMM = $20
__constant const char VICII_DEN = $10
__constant const char VICII_RSEL = 8
void bitmap_clear()
char *bitmap_clear::bitmap
unsigned int bitmap_clear::bitmap#0 // bitmap zp[2]:10 11.0
char *bitmap_clear::bitmap#1 // bitmap zp[2]:10 420.59999999999997
char *bitmap_clear::bitmap#2 // bitmap zp[2]:10 1552.0
char *bitmap_clear::bitmap#3 // bitmap zp[2]:10 213.0
char *bitmap_clear::bitmap#5 // bitmap zp[2]:10 22.0
char bitmap_clear::x
char bitmap_clear::x#1 // reg byte x 1501.5
char bitmap_clear::x#2 // reg byte x 667.3333333333334
char bitmap_clear::y
char bitmap_clear::y#1 // y zp[1]:14 151.5
char bitmap_clear::y#4 // y zp[1]:14 33.666666666666664
void bitmap_init(char *bitmap)
char bitmap_init::$4 // reg byte a 202.0
char bitmap_init::$5 // reg byte a 202.0
char bitmap_init::$6 // reg byte a 202.0
char bitmap_init::$7 // zp[1]:14 50.5
char *bitmap_init::bitmap
char bitmap_init::bits
char bitmap_init::bits#1 // reg byte a 101.0
char bitmap_init::bits#3 // reg byte a 151.5
char bitmap_init::bits#4 // reg byte a 67.33333333333333
char bitmap_init::x
char bitmap_init::x#1 // reg byte x 151.5
char bitmap_init::x#2 // reg byte x 50.5
char bitmap_init::y
char bitmap_init::y#1 // reg byte x 151.5
char bitmap_init::y#2 // reg byte x 50.5
char *bitmap_init::yoffs
char *bitmap_init::yoffs#1 // yoffs zp[2]:10 202.0
char *bitmap_init::yoffs#2 // yoffs zp[2]:10 63.125
char *bitmap_init::yoffs#4 // yoffs zp[2]:10 101.0
void bitmap_plot(unsigned int x , char y)
unsigned int bitmap_plot::$1 // zp[2]:8 202.0
char bitmap_plot::$2 // reg byte x 202.0
char *bitmap_plot::plotter
unsigned int bitmap_plot::plotter#0 // plotter zp[2]:2 50.5
char *bitmap_plot::plotter#1 // plotter zp[2]:2 151.5
unsigned int bitmap_plot::x
unsigned int bitmap_plot::x#0 // x zp[2]:12 42.599999999999994
char bitmap_plot::y
char bitmap_plot::y#0 // reg byte x 213.0
__constant const char bitmap_plot_bit[$100] = { fill( $100, 0) }
__constant const char bitmap_plot_yhi[$100] = { fill( $100, 0) }
__constant const char bitmap_plot_ylo[$100] = { fill( $100, 0) }
__constant char delay[SIZE] = { fill( SIZE, 0) }
int divr16s(int dividend , int divisor , int rem)
int divr16s::dividend
unsigned int divr16s::dividendu
int divr16s::divisor
int divr16s::divisor#0 // divisor zp[2]:8 233.66666666666669
unsigned int divr16s::divisoru
int divr16s::divisoru#1 // divisoru zp[2]:8 500.5
unsigned int divr16s::divisoru#3 // divisoru zp[2]:8 3003.0
unsigned int divr16s::divisoru#4 // divisoru zp[2]:8 2002.0
unsigned int divr16s::divisoru#5 // divisoru zp[2]:8 2002.0
char divr16s::neg
char divr16s::neg#2 // reg byte y 1001.0
char divr16s::neg#3 // reg byte y 500.5
char divr16s::neg#4 // reg byte y 500.5
int divr16s::rem
int divr16s::rem#0 // rem zp[2]:2 701.0
unsigned int divr16s::remu
int divr16s::remu#1 // remu zp[2]:2 1001.0
unsigned int divr16s::remu#3 // remu zp[2]:2 375.375
unsigned int divr16s::remu#7 // remu zp[2]:2 2002.0
unsigned int divr16s::remu#8 // remu zp[2]:2 2002.0
unsigned int divr16s::resultu
unsigned int divr16s::resultu#0 // resultu zp[2]:4 500.5
int divr16s::return
int divr16s::return#1 // return zp[2]:4 2002.0
int divr16s::return#2 // return zp[2]:4 701.0
int divr16s::return#3 // return zp[2]:4 202.0
int divr16s::return#6 // return zp[2]:4 2002.0
unsigned int divr16u(unsigned int dividend , unsigned int divisor , unsigned int rem)
char divr16u::$1 // reg byte a 2000002.0
char divr16u::$2 // reg byte a 2000002.0
unsigned int divr16u::dividend
unsigned int divr16u::dividend#0 // dividend zp[2]:6 250000.25
unsigned int divr16u::dividend#2 // dividend zp[2]:6 428571.85714285716
unsigned int divr16u::divisor
unsigned int divr16u::divisor#0 // divisor zp[2]:8 111166.83333333333
char divr16u::i
char divr16u::i#1 // reg byte x 1500001.5
char divr16u::i#2 // reg byte x 153846.3076923077
unsigned int divr16u::quotient
unsigned int divr16u::quotient#1 // quotient zp[2]:4 1500001.5
unsigned int divr16u::quotient#2 // quotient zp[2]:4 1000001.0
unsigned int divr16u::quotient#3 // quotient zp[2]:4 250000.25
unsigned int divr16u::rem
unsigned int divr16u::rem#0 // rem zp[2]:2 750000.75
unsigned int divr16u::rem#1 // rem zp[2]:2 2000002.0
unsigned int divr16u::rem#2 // rem zp[2]:2 2000002.0
unsigned int divr16u::rem#3 // rem zp[2]:2 5501.0
unsigned int divr16u::rem#4 // rem zp[2]:2 2010003.0
unsigned int divr16u::rem#5 // rem zp[2]:2 1000001.0
unsigned int divr16u::rem#9 // rem zp[2]:2 1000001.0
unsigned int divr16u::return
unsigned int divr16u::return#0 // return zp[2]:4 600200.8
unsigned int divr16u::return#2 // return zp[2]:4 2002.0
void main()
char main::$10 // reg byte a 22.0
char main::i
char main::i#1 // i zp[1]:19 16.5
char main::i#2 // i zp[1]:19 7.857142857142857
char *main::toD0181_gfx
char main::toD0181_return
__constant char main::toD0181_return#0 = byte1 (unsigned int)SCREEN&$3fff*4|byte1 (unsigned int)BITMAP/4&$f // toD0181_return
char *main::toD0181_screen
char *main::vicSelectGfxBank1_gfx
char *main::vicSelectGfxBank1_toDd001_gfx
char main::vicSelectGfxBank1_toDd001_return
__constant char main::vicSelectGfxBank1_toDd001_return#0 = 3^byte1 (unsigned int)SCREEN/$40 // vicSelectGfxBank1_toDd001_return
void point_init(char point_idx)
char point_init::$10 // reg byte a 101.0
char point_init::$13 // zp[1]:14 13.03225806451613
int point_init::$17 // zp[2]:2 101.0
int point_init::$18 // zp[2]:6 202.0
unsigned int point_init::$19 // zp[2]:15 202.0
unsigned int point_init::$5 // zp[2]:17 202.0
unsigned int point_init::$6 // zp[2]:15 202.0
char point_init::$9 // reg byte a 202.0
unsigned int point_init::abs16s1_return
int point_init::abs16s1_return#0 // abs16s1_return zp[2]:10 101.0
unsigned int point_init::abs16s1_return#2 // abs16s1_return zp[2]:10 50.5
unsigned int point_init::abs16s1_return#5 // abs16s1_return zp[2]:10 202.0
unsigned int point_init::abs16s1_return#6 // abs16s1_return zp[2]:10 202.0
int point_init::abs16s1_w
unsigned int point_init::abs16s2_return
int point_init::abs16s2_return#0 // abs16s2_return zp[2]:12 101.0
unsigned int point_init::abs16s2_return#2 // abs16s2_return zp[2]:12 303.0
unsigned int point_init::abs16s2_return#5 // abs16s2_return zp[2]:12 202.0
unsigned int point_init::abs16s2_return#6 // abs16s2_return zp[2]:12 202.0
int point_init::abs16s2_w
char point_init::point_idx
char point_init::point_idx#0 // point_idx zp[1]:19 15.636363636363637
int point_init::x_diff
int point_init::x_diff#1 // x_diff zp[2]:8 28.055555555555554
int point_init::x_stepf
int point_init::x_stepf#0 // x_stepf zp[2]:4 202.0
int point_init::y_diff
int point_init::y_diff#0 // y_diff zp[2]:2 25.25
void screen_fill(char *screen , char ch)
char screen_fill::ch
__constant char screen_fill::ch#0 = $10 // ch
char *screen_fill::screen
char *screen_fill::screen#1 // screen zp[2]:10 420.59999999999997
char *screen_fill::screen#2 // screen zp[2]:10 1552.0
char *screen_fill::screen#3 // screen zp[2]:10 202.0
char screen_fill::x
char screen_fill::x#1 // reg byte x 1501.5
char screen_fill::x#2 // reg byte x 667.3333333333334
char screen_fill::y
char screen_fill::y#1 // y zp[1]:14 151.5
char screen_fill::y#4 // y zp[1]:14 33.666666666666664
__constant signed char x_add[SIZE] = { fill( SIZE, 0) }
__constant unsigned int x_cur[SIZE] = { fill( SIZE, 0) }
__constant unsigned int x_end[SIZE] = { $14, $a, $14, $14 }
__constant unsigned int x_start[SIZE] = { $a, $14, $1e, $1e }
__constant signed char y_add[SIZE] = { fill( SIZE, 0) }
__constant unsigned int y_cur[SIZE] = { fill( SIZE, 0) }
__constant char y_end[SIZE] = { $14, $14, $a, $14 }
__constant char y_start[SIZE] = { $a, $a, $a, $14 }

zp[1]:19 [ main::i#2 main::i#1 point_init::point_idx#0 ]
reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
reg byte x [ bitmap_clear::x#2 bitmap_clear::x#1 ]
reg byte x [ screen_fill::x#2 screen_fill::x#1 ]
zp[2]:10 [ point_init::abs16s1_return#2 point_init::abs16s1_return#5 point_init::abs16s1_return#6 point_init::abs16s1_return#0 screen_fill::screen#2 screen_fill::screen#3 screen_fill::screen#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
reg byte y [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
zp[2]:4 [ divr16s::return#2 divr16s::return#6 divr16s::return#1 divr16s::resultu#0 divr16s::return#3 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 point_init::x_stepf#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
reg byte a [ main::$10 ]
zp[2]:12 [ bitmap_plot::x#0 point_init::abs16s2_return#2 point_init::abs16s2_return#5 point_init::abs16s2_return#6 point_init::abs16s2_return#0 ]
reg byte x [ bitmap_plot::y#0 ]
reg byte a [ bitmap_init::$4 ]
reg byte a [ bitmap_init::$5 ]
reg byte a [ bitmap_init::$6 ]
zp[1]:14 [ point_init::$13 bitmap_init::$7 screen_fill::y#4 screen_fill::y#1 bitmap_clear::y#4 bitmap_clear::y#1 ]
zp[2]:6 [ point_init::$18 divr16u::dividend#2 divr16u::dividend#0 ]
zp[2]:17 [ point_init::$5 ]
zp[2]:15 [ point_init::$19 point_init::$6 ]
reg byte a [ point_init::$9 ]
reg byte a [ point_init::$10 ]
zp[2]:2 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 divr16s::remu#3 divr16s::remu#7 divr16s::remu#8 divr16u::rem#4 divr16u::rem#3 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 divr16s::rem#0 divr16s::remu#1 point_init::$17 point_init::y_diff#0 ]
zp[2]:8 [ bitmap_plot::$1 divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16s::divisor#0 divr16u::divisor#0 divr16s::divisoru#1 point_init::x_diff#1 ]
reg byte x [ bitmap_plot::$2 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
