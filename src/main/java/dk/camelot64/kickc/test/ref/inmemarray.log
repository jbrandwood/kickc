
byte* SCREEN = $0400;
byte[] TXT = { 3, 1, 13, 5, 12, 15, 20, 32};

void main() {
   byte j = 0;
   for(byte i : 0..100) {
      SCREEN[i] = TXT[j];
      if(++j==8) {
         j = 0;
      }
   }
}
Adding pre/post-modifier (byte) main::j ← ++ (byte) main::j
PROGRAM
  (byte*) SCREEN ← (word/signed word) 1024
  (byte[]) TXT ← { (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 13, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 12, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 20, (byte/signed byte/word/signed word) 32 }
proc (void()) main()
  (byte) main::j ← (byte/signed byte/word/signed word) 0
  (byte) main::i ← (byte/signed byte/word/signed word) 0
main::@1:
  (byte~) main::$0 ← (byte[]) TXT *idx (byte) main::j
  *((byte*) SCREEN + (byte) main::i) ← (byte~) main::$0
  (byte) main::j ← ++ (byte) main::j
  (boolean~) main::$1 ← (byte) main::j == (byte/signed byte/word/signed word) 8
  (boolean~) main::$2 ← ! (boolean~) main::$1
  if((boolean~) main::$2) goto main::@2
  (byte) main::j ← (byte/signed byte/word/signed word) 0
main::@2:
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$3 ← (byte) main::i != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$3) goto main::@1
main::@return:
  return 
endproc // main()
  call main 

SYMBOLS
(byte*) SCREEN
(byte[]) TXT
(void()) main()
(byte~) main::$0
(boolean~) main::$1
(boolean~) main::$2
(boolean~) main::$3
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i
(byte) main::j

Promoting word/signed word to byte* in SCREEN ← ((byte*)) 1024
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← ((byte*)) (word/signed word) 1024
  (byte[]) TXT ← { (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 13, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 12, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 20, (byte/signed byte/word/signed word) 32 }
  to:@1
main: scope:[main]  from
  (byte) main::j ← (byte/signed byte/word/signed word) 0
  (byte) main::i ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte~) main::$0 ← (byte[]) TXT *idx (byte) main::j
  *((byte*) SCREEN + (byte) main::i) ← (byte~) main::$0
  (byte) main::j ← ++ (byte) main::j
  (boolean~) main::$1 ← (byte) main::j == (byte/signed byte/word/signed word) 8
  (boolean~) main::$2 ← ! (boolean~) main::$1
  if((boolean~) main::$2) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$3 ← (byte) main::i != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$3) goto main::@1
  to:main::@4
main::@3: scope:[main]  from main::@1
  (byte) main::j ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@4: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

Removing empty block main::@4
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← ((byte*)) (word/signed word) 1024
  (byte[]) TXT ← { (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 13, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 12, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 20, (byte/signed byte/word/signed word) 32 }
  to:@1
main: scope:[main]  from
  (byte) main::j ← (byte/signed byte/word/signed word) 0
  (byte) main::i ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte~) main::$0 ← (byte[]) TXT *idx (byte) main::j
  *((byte*) SCREEN + (byte) main::i) ← (byte~) main::$0
  (byte) main::j ← ++ (byte) main::j
  (boolean~) main::$1 ← (byte) main::j == (byte/signed byte/word/signed word) 8
  (boolean~) main::$2 ← ! (boolean~) main::$1
  if((boolean~) main::$2) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$3 ← (byte) main::i != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::j ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) SCREEN ← ((byte*)) (word/signed word) 1024
  (byte[]) TXT ← { (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 13, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 12, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 20, (byte/signed byte/word/signed word) 32 }
  to:@1
main: scope:[main]  from @1
  (byte) main::j ← (byte/signed byte/word/signed word) 0
  (byte) main::i ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte~) main::$0 ← (byte[]) TXT *idx (byte) main::j
  *((byte*) SCREEN + (byte) main::i) ← (byte~) main::$0
  (byte) main::j ← ++ (byte) main::j
  (boolean~) main::$1 ← (byte) main::j == (byte/signed byte/word/signed word) 8
  (boolean~) main::$2 ← ! (boolean~) main::$1
  if((boolean~) main::$2) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$3 ← (byte) main::i != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::j ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte[]) TXT#0 ← { (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 13, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 12, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 20, (byte/signed byte/word/signed word) 32 }
  to:@1
main: scope:[main]  from @1
  (byte*) SCREEN#2 ← phi( @1/(byte*) SCREEN#4 )
  (byte[]) TXT#2 ← phi( @1/(byte[]) TXT#4 )
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#2 main::@2/(byte*) SCREEN#3 )
  (byte) main::j#3 ← phi( main/(byte) main::j#0 main::@2/(byte) main::j#4 )
  (byte[]) TXT#1 ← phi( main/(byte[]) TXT#2 main::@2/(byte[]) TXT#3 )
  (byte~) main::$0 ← (byte[]) TXT#1 *idx (byte) main::j#3
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte~) main::$0
  (byte) main::j#1 ← ++ (byte) main::j#3
  (boolean~) main::$1 ← (byte) main::j#1 == (byte/signed byte/word/signed word) 8
  (boolean~) main::$2 ← ! (boolean~) main::$1
  if((boolean~) main::$2) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte*) SCREEN#3 ← phi( main::@1/(byte*) SCREEN#1 main::@3/(byte*) SCREEN#5 )
  (byte) main::j#4 ← phi( main::@1/(byte) main::j#1 main::@3/(byte) main::j#2 )
  (byte[]) TXT#3 ← phi( main::@1/(byte[]) TXT#1 main::@3/(byte[]) TXT#5 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#4 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$3 ← (byte) main::i#1 != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN#5 ← phi( main::@1/(byte*) SCREEN#1 )
  (byte[]) TXT#5 ← phi( main::@1/(byte[]) TXT#1 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  (byte) main::j#2 ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) SCREEN#4 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[]) TXT#4 ← phi( @begin/(byte[]) TXT#0 )
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte[]) TXT#0 ← { (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 13, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 12, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 20, (byte/signed byte/word/signed word) 32 }
  to:@1
main: scope:[main]  from @1
  (byte*) SCREEN#2 ← phi( @1/(byte*) SCREEN#4 )
  (byte[]) TXT#2 ← phi( @1/(byte[]) TXT#4 )
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#2 main::@2/(byte*) SCREEN#3 )
  (byte) main::j#3 ← phi( main/(byte) main::j#0 main::@2/(byte) main::j#4 )
  (byte[]) TXT#1 ← phi( main/(byte[]) TXT#2 main::@2/(byte[]) TXT#3 )
  (byte~) main::$0 ← (byte[]) TXT#1 *idx (byte) main::j#3
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte~) main::$0
  (byte) main::j#1 ← ++ (byte) main::j#3
  (boolean~) main::$1 ← (byte) main::j#1 == (byte/signed byte/word/signed word) 8
  (boolean~) main::$2 ← ! (boolean~) main::$1
  if((boolean~) main::$2) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte*) SCREEN#3 ← phi( main::@1/(byte*) SCREEN#1 main::@3/(byte*) SCREEN#5 )
  (byte) main::j#4 ← phi( main::@1/(byte) main::j#1 main::@3/(byte) main::j#2 )
  (byte[]) TXT#3 ← phi( main::@1/(byte[]) TXT#1 main::@3/(byte[]) TXT#5 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#4 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$3 ← (byte) main::i#1 != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN#5 ← phi( main::@1/(byte*) SCREEN#1 )
  (byte[]) TXT#5 ← phi( main::@1/(byte[]) TXT#1 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  (byte) main::j#2 ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) SCREEN#4 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[]) TXT#4 ← phi( @begin/(byte[]) TXT#0 )
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

INITIAL SSA SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte*) SCREEN#4
(byte*) SCREEN#5
(byte[]) TXT
(byte[]) TXT#0
(byte[]) TXT#1
(byte[]) TXT#2
(byte[]) TXT#3
(byte[]) TXT#4
(byte[]) TXT#5
(void()) main()
(byte~) main::$0
(boolean~) main::$1
(boolean~) main::$2
(boolean~) main::$3
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::j
(byte) main::j#0
(byte) main::j#1
(byte) main::j#2
(byte) main::j#3
(byte) main::j#4

Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte[]) TXT#0 ← { (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 13, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 12, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 20, (byte/signed byte/word/signed word) 32 }
  to:@1
main: scope:[main]  from @1
  (byte*) SCREEN#2 ← phi( @1/(byte*) SCREEN#4 )
  (byte[]) TXT#2 ← phi( @1/(byte[]) TXT#4 )
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#2 main::@2/(byte*) SCREEN#3 )
  (byte) main::j#3 ← phi( main/(byte) main::j#0 main::@2/(byte) main::j#4 )
  (byte[]) TXT#1 ← phi( main/(byte[]) TXT#2 main::@2/(byte[]) TXT#3 )
  (byte~) main::$0 ← (byte[]) TXT#1 *idx (byte) main::j#3
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte~) main::$0
  (byte) main::j#1 ← ++ (byte) main::j#3
  (boolean~) main::$1 ← (byte) main::j#1 == (byte/signed byte/word/signed word) 8
  (boolean~) main::$2 ← ! (boolean~) main::$1
  if((boolean~) main::$2) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte*) SCREEN#3 ← phi( main::@1/(byte*) SCREEN#1 main::@3/(byte*) SCREEN#5 )
  (byte) main::j#4 ← phi( main::@1/(byte) main::j#1 main::@3/(byte) main::j#2 )
  (byte[]) TXT#3 ← phi( main::@1/(byte[]) TXT#1 main::@3/(byte[]) TXT#5 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#4 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$3 ← (byte) main::i#1 != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN#5 ← phi( main::@1/(byte*) SCREEN#1 )
  (byte[]) TXT#5 ← phi( main::@1/(byte[]) TXT#1 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  (byte) main::j#2 ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) SCREEN#4 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[]) TXT#4 ← phi( @begin/(byte[]) TXT#0 )
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Inversing boolean not (boolean~) main::$2 ← (byte) main::j#1 != (byte/signed byte/word/signed word) 8 from (boolean~) main::$1 ← (byte) main::j#1 == (byte/signed byte/word/signed word) 8
Succesful SSA optimization Pass2UnaryNotSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte[]) TXT#0 ← { (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 13, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 12, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 20, (byte/signed byte/word/signed word) 32 }
  to:@1
main: scope:[main]  from @1
  (byte*) SCREEN#2 ← phi( @1/(byte*) SCREEN#4 )
  (byte[]) TXT#2 ← phi( @1/(byte[]) TXT#4 )
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#2 main::@2/(byte*) SCREEN#3 )
  (byte) main::j#3 ← phi( main/(byte) main::j#0 main::@2/(byte) main::j#4 )
  (byte[]) TXT#1 ← phi( main/(byte[]) TXT#2 main::@2/(byte[]) TXT#3 )
  (byte~) main::$0 ← (byte[]) TXT#1 *idx (byte) main::j#3
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte~) main::$0
  (byte) main::j#1 ← ++ (byte) main::j#3
  (boolean~) main::$2 ← (byte) main::j#1 != (byte/signed byte/word/signed word) 8
  if((boolean~) main::$2) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte*) SCREEN#3 ← phi( main::@1/(byte*) SCREEN#1 main::@3/(byte*) SCREEN#5 )
  (byte) main::j#4 ← phi( main::@1/(byte) main::j#1 main::@3/(byte) main::j#2 )
  (byte[]) TXT#3 ← phi( main::@1/(byte[]) TXT#1 main::@3/(byte[]) TXT#5 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#4 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$3 ← (byte) main::i#1 != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte*) SCREEN#5 ← phi( main::@1/(byte*) SCREEN#1 )
  (byte[]) TXT#5 ← phi( main::@1/(byte[]) TXT#1 )
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  (byte) main::j#2 ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) SCREEN#4 ← phi( @begin/(byte*) SCREEN#0 )
  (byte[]) TXT#4 ← phi( @begin/(byte[]) TXT#0 )
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Not aliassing across scopes: TXT#2 TXT#4
Not aliassing across scopes: SCREEN#2 SCREEN#4
Alias (byte) main::i#2 = (byte) main::i#4 
Alias (byte[]) TXT#1 = (byte[]) TXT#5 
Alias (byte*) SCREEN#1 = (byte*) SCREEN#5 
Alias (byte[]) TXT#0 = (byte[]) TXT#4 
Alias (byte*) SCREEN#0 = (byte*) SCREEN#4 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte[]) TXT#0 ← { (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 13, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 12, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 20, (byte/signed byte/word/signed word) 32 }
  to:@1
main: scope:[main]  from @1
  (byte*) SCREEN#2 ← phi( @1/(byte*) SCREEN#0 )
  (byte[]) TXT#2 ← phi( @1/(byte[]) TXT#0 )
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#2 main::@2/(byte*) SCREEN#3 )
  (byte) main::j#3 ← phi( main/(byte) main::j#0 main::@2/(byte) main::j#4 )
  (byte[]) TXT#1 ← phi( main/(byte[]) TXT#2 main::@2/(byte[]) TXT#3 )
  (byte~) main::$0 ← (byte[]) TXT#1 *idx (byte) main::j#3
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte~) main::$0
  (byte) main::j#1 ← ++ (byte) main::j#3
  (boolean~) main::$2 ← (byte) main::j#1 != (byte/signed byte/word/signed word) 8
  if((boolean~) main::$2) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte*) SCREEN#3 ← phi( main::@1/(byte*) SCREEN#1 main::@3/(byte*) SCREEN#1 )
  (byte) main::j#4 ← phi( main::@1/(byte) main::j#1 main::@3/(byte) main::j#2 )
  (byte[]) TXT#3 ← phi( main::@1/(byte[]) TXT#1 main::@3/(byte[]) TXT#1 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#2 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$3 ← (byte) main::i#1 != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::j#2 ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Not aliassing across scopes: TXT#2 TXT#0
Not aliassing across scopes: SCREEN#2 SCREEN#0
Alias (byte) main::i#2 = (byte) main::i#3 
Alias (byte[]) TXT#1 = (byte[]) TXT#3 
Alias (byte*) SCREEN#1 = (byte*) SCREEN#3 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte[]) TXT#0 ← { (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 13, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 12, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 20, (byte/signed byte/word/signed word) 32 }
  to:@1
main: scope:[main]  from @1
  (byte*) SCREEN#2 ← phi( @1/(byte*) SCREEN#0 )
  (byte[]) TXT#2 ← phi( @1/(byte[]) TXT#0 )
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#2 main::@2/(byte*) SCREEN#1 )
  (byte) main::j#3 ← phi( main/(byte) main::j#0 main::@2/(byte) main::j#4 )
  (byte[]) TXT#1 ← phi( main/(byte[]) TXT#2 main::@2/(byte[]) TXT#1 )
  (byte~) main::$0 ← (byte[]) TXT#1 *idx (byte) main::j#3
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte~) main::$0
  (byte) main::j#1 ← ++ (byte) main::j#3
  (boolean~) main::$2 ← (byte) main::j#1 != (byte/signed byte/word/signed word) 8
  if((boolean~) main::$2) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::j#4 ← phi( main::@1/(byte) main::j#1 main::@3/(byte) main::j#2 )
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$3 ← (byte) main::i#1 != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::j#2 ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Not aliassing across scopes: TXT#2 TXT#0
Not aliassing across scopes: SCREEN#2 SCREEN#0
Self Phi Eliminated (byte[]) TXT#1
Self Phi Eliminated (byte*) SCREEN#1
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte[]) TXT#0 ← { (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 13, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 12, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 20, (byte/signed byte/word/signed word) 32 }
  to:@1
main: scope:[main]  from @1
  (byte*) SCREEN#2 ← phi( @1/(byte*) SCREEN#0 )
  (byte[]) TXT#2 ← phi( @1/(byte[]) TXT#0 )
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#2 )
  (byte) main::j#3 ← phi( main/(byte) main::j#0 main::@2/(byte) main::j#4 )
  (byte[]) TXT#1 ← phi( main/(byte[]) TXT#2 )
  (byte~) main::$0 ← (byte[]) TXT#1 *idx (byte) main::j#3
  *((byte*) SCREEN#1 + (byte) main::i#2) ← (byte~) main::$0
  (byte) main::j#1 ← ++ (byte) main::j#3
  (boolean~) main::$2 ← (byte) main::j#1 != (byte/signed byte/word/signed word) 8
  if((boolean~) main::$2) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::j#4 ← phi( main::@1/(byte) main::j#1 main::@3/(byte) main::j#2 )
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$3 ← (byte) main::i#1 != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::j#2 ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Redundant Phi (byte[]) TXT#2 (byte[]) TXT#0
Redundant Phi (byte*) SCREEN#2 (byte*) SCREEN#0
Redundant Phi (byte[]) TXT#1 (byte[]) TXT#2
Redundant Phi (byte*) SCREEN#1 (byte*) SCREEN#2
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte[]) TXT#0 ← { (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 13, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 12, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 20, (byte/signed byte/word/signed word) 32 }
  to:@1
main: scope:[main]  from @1
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (byte) main::j#3 ← phi( main/(byte) main::j#0 main::@2/(byte) main::j#4 )
  (byte~) main::$0 ← (byte[]) TXT#0 *idx (byte) main::j#3
  *((byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0
  (byte) main::j#1 ← ++ (byte) main::j#3
  (boolean~) main::$2 ← (byte) main::j#1 != (byte/signed byte/word/signed word) 8
  if((boolean~) main::$2) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::j#4 ← phi( main::@1/(byte) main::j#1 main::@3/(byte) main::j#2 )
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$3 ← (byte) main::i#1 != (byte/signed byte/word/signed word) 101
  if((boolean~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::j#2 ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Simple Condition (boolean~) main::$2 if((byte) main::j#1!=(byte/signed byte/word/signed word) 8) goto main::@2
Simple Condition (boolean~) main::$3 if((byte) main::i#1!=(byte/signed byte/word/signed word) 101) goto main::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word) 1024
  (byte[]) TXT#0 ← { (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 13, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 12, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 20, (byte/signed byte/word/signed word) 32 }
  to:@1
main: scope:[main]  from @1
  (byte) main::j#0 ← (byte/signed byte/word/signed word) 0
  (byte) main::i#0 ← (byte/signed byte/word/signed word) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (byte) main::j#3 ← phi( main/(byte) main::j#0 main::@2/(byte) main::j#4 )
  (byte~) main::$0 ← (byte[]) TXT#0 *idx (byte) main::j#3
  *((byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0
  (byte) main::j#1 ← ++ (byte) main::j#3
  if((byte) main::j#1!=(byte/signed byte/word/signed word) 8) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::j#4 ← phi( main::@1/(byte) main::j#1 main::@3/(byte) main::j#2 )
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte/signed byte/word/signed word) 101) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::j#2 ← (byte/signed byte/word/signed word) 0
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Constant (const byte*) SCREEN#0 = ((byte*))1024
Constant (const byte[]) TXT#0 = { 3, 1, 13, 5, 12, 15, 20, 32 }
Constant (const byte) main::j#0 = 0
Constant (const byte) main::i#0 = 0
Constant (const byte) main::j#2 = 0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(const byte) main::i#0 main::@2/(byte) main::i#1 )
  (byte) main::j#3 ← phi( main/(const byte) main::j#0 main::@2/(byte) main::j#4 )
  (byte~) main::$0 ← (const byte[]) TXT#0 *idx (byte) main::j#3
  *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0
  (byte) main::j#1 ← ++ (byte) main::j#3
  if((byte) main::j#1!=(byte/signed byte/word/signed word) 8) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::j#4 ← phi( main::@1/(byte) main::j#1 main::@3/(const byte) main::j#2 )
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte/signed byte/word/signed word) 101) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Multiple usages for variable. Not optimizing sub-constant (byte) main::j#3
Not culling empty block because it shares successor with its predecessor. (label) main::@3
Multiple usages for variable. Not optimizing sub-constant (byte) main::j#3
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::j#2
Inlining constant with var siblings (const byte) main::j#2
Inlining constant with var siblings (const byte) main::j#2
Constant inlined main::i#0 = (byte/signed byte/word/signed word) 0
Constant inlined main::j#0 = (byte/signed byte/word/signed word) 0
Constant inlined main::j#2 = (byte/signed byte/word/signed word) 0
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@2/(byte) main::i#1 )
  (byte) main::j#3 ← phi( main/(byte/signed byte/word/signed word) 0 main::@2/(byte) main::j#4 )
  (byte~) main::$0 ← (const byte[]) TXT#0 *idx (byte) main::j#3
  *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0
  (byte) main::j#1 ← ++ (byte) main::j#3
  if((byte) main::j#1!=(byte/signed byte/word/signed word) 8) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::j#4 ← phi( main::@1/(byte) main::j#1 main::@3/(byte/signed byte/word/signed word) 0 )
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte/signed byte/word/signed word) 101) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 = ((byte*))(word/signed word) 1024
(byte[]) TXT
(const byte[]) TXT#0 = { (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 13, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 12, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 20, (byte/signed byte/word/signed word) 32 }
(void()) main()
(byte~) main::$0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#1
(byte) main::i#2
(byte) main::j
(byte) main::j#1
(byte) main::j#3
(byte) main::j#4

Block Sequence Planned @begin @1 @end main main::@1 main::@3 main::@2 main::@return 
Added new block during phi lifting main::@5(between main::@2 and main::@1)
Added new block during phi lifting main::@6(between main::@1 and main::@2)
Block Sequence Planned @begin @1 @end main main::@1 main::@3 main::@2 main::@return main::@5 main::@6 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@5/(byte~) main::i#5 )
  (byte) main::j#3 ← phi( main/(byte/signed byte/word/signed word) 0 main::@5/(byte~) main::j#5 )
  (byte~) main::$0 ← (const byte[]) TXT#0 *idx (byte) main::j#3
  *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0
  (byte) main::j#1 ← ++ (byte) main::j#3
  if((byte) main::j#1!=(byte/signed byte/word/signed word) 8) goto main::@6
  to:main::@3
main::@3: scope:[main]  from main::@1
  to:main::@2
main::@2: scope:[main]  from main::@3 main::@6
  (byte) main::j#4 ← phi( main::@6/(byte~) main::j#6 main::@3/(byte/signed byte/word/signed word) 0 )
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte/signed byte/word/signed word) 101) goto main::@5
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
main::@5: scope:[main]  from main::@2
  (byte~) main::j#5 ← (byte) main::j#4
  (byte~) main::i#5 ← (byte) main::i#1
  to:main::@1
main::@6: scope:[main]  from main::@1
  (byte~) main::j#6 ← (byte) main::j#1
  to:main::@2

Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
CALL GRAPH
Calls in [] to main:2 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  [0] phi() [ ]
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ]
  [2] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ]
main: scope:[main]  from @1
  [4] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@5/(byte~) main::i#5 ) [ main::j#3 main::i#2 ]
  [5] (byte) main::j#3 ← phi( main/(byte/signed byte/word/signed word) 0 main::@5/(byte~) main::j#5 ) [ main::j#3 main::i#2 ]
  [6] (byte~) main::$0 ← (const byte[]) TXT#0 *idx (byte) main::j#3 [ main::j#3 main::i#2 main::$0 ]
  [7] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0 [ main::j#3 main::i#2 ]
  [8] (byte) main::j#1 ← ++ (byte) main::j#3 [ main::i#2 main::j#1 ]
  [9] if((byte) main::j#1!=(byte/signed byte/word/signed word) 8) goto main::@6 [ main::i#2 main::j#1 ]
  to:main::@3
main::@3: scope:[main]  from main::@1
  [10] phi() [ main::i#2 ]
  to:main::@2
main::@2: scope:[main]  from main::@3 main::@6
  [11] (byte) main::j#4 ← phi( main::@6/(byte~) main::j#6 main::@3/(byte/signed byte/word/signed word) 0 ) [ main::i#2 main::j#4 ]
  [12] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::j#4 main::i#1 ]
  [13] if((byte) main::i#1!=(byte/signed byte/word/signed word) 101) goto main::@5 [ main::j#4 main::i#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@2
  [14] return  [ ]
  to:@return
main::@5: scope:[main]  from main::@2
  [15] (byte~) main::j#5 ← (byte) main::j#4 [ main::j#5 main::i#1 ]
  [16] (byte~) main::i#5 ← (byte) main::i#1 [ main::j#5 main::i#5 ]
  to:main::@1
main::@6: scope:[main]  from main::@1
  [17] (byte~) main::j#6 ← (byte) main::j#1 [ main::i#2 main::j#6 ]
  to:main::@2

Created 3 initial phi equivalence classes
Coalesced [15] main::j#5 ← main::j#4
Coalesced [16] main::i#5 ← main::i#1
Coalesced [17] main::j#6 ← main::j#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@5
Not culling empty block because it shares successor with its predecessor. (label) main::@6
Block Sequence Planned @begin @1 @end main main::@1 main::@2 main::@return main::@6 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@6
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - BEFORE EFFECTIVE LIVE RANGES
@begin: scope:[]  from
  [0] phi() [ ]
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ]
  [2] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ]
main: scope:[main]  from @1
  [4] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@2/(byte) main::i#1 ) [ main::j#3 main::i#2 ]
  [5] (byte) main::j#3 ← phi( main/(byte/signed byte/word/signed word) 0 main::@2/(byte) main::j#4 ) [ main::j#3 main::i#2 ]
  [6] (byte~) main::$0 ← (const byte[]) TXT#0 *idx (byte) main::j#3 [ main::j#3 main::i#2 main::$0 ]
  [7] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0 [ main::j#3 main::i#2 ]
  [8] (byte) main::j#1 ← ++ (byte) main::j#3 [ main::i#2 main::j#1 ]
  [9] if((byte) main::j#1!=(byte/signed byte/word/signed word) 8) goto main::@6 [ main::i#2 main::j#1 ]
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@6
  [10] (byte) main::j#4 ← phi( main::@6/(byte) main::j#1 main::@1/(byte/signed byte/word/signed word) 0 ) [ main::i#2 main::j#4 ]
  [11] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::j#4 main::i#1 ]
  [12] if((byte) main::i#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::j#4 main::i#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@2
  [13] return  [ ]
  to:@return
main::@6: scope:[main]  from main::@1
  [14] phi() [ main::i#2 main::j#1 ]
  to:main::@2

CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ] ( )
main: scope:[main]  from @1
  [4] phi() [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word) 0 main::@2/(byte) main::i#1 ) [ main::j#3 main::i#2 ] ( main:2 [ main::j#3 main::i#2 ] )
  [5] (byte) main::j#3 ← phi( main/(byte/signed byte/word/signed word) 0 main::@2/(byte) main::j#4 ) [ main::j#3 main::i#2 ] ( main:2 [ main::j#3 main::i#2 ] )
  [6] (byte~) main::$0 ← (const byte[]) TXT#0 *idx (byte) main::j#3 [ main::j#3 main::i#2 main::$0 ] ( main:2 [ main::j#3 main::i#2 main::$0 ] )
  [7] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0 [ main::j#3 main::i#2 ] ( main:2 [ main::j#3 main::i#2 ] )
  [8] (byte) main::j#1 ← ++ (byte) main::j#3 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] )
  [9] if((byte) main::j#1!=(byte/signed byte/word/signed word) 8) goto main::@6 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@6
  [10] (byte) main::j#4 ← phi( main::@6/(byte) main::j#1 main::@1/(byte/signed byte/word/signed word) 0 ) [ main::i#2 main::j#4 ] ( main:2 [ main::i#2 main::j#4 ] )
  [11] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] )
  [12] if((byte) main::i#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] )
  to:main::@return
main::@return: scope:[main]  from main::@2
  [13] return  [ ] ( main:2 [ ] )
  to:@return
main::@6: scope:[main]  from main::@1
  [14] phi() [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] )
  to:main::@2

DOMINATORS
@begin dominated by  @begin 
@1 dominated by  @1 @begin 
@end dominated by  @1 @begin @end 
main dominated by  @1 @begin main 
main::@1 dominated by  @1 @begin main::@1 main 
main::@2 dominated by  @1 @begin main::@1 main::@2 main 
main::@return dominated by  main::@return @1 @begin main::@1 main::@2 main 
main::@6 dominated by  @1 @begin main::@1 main main::@6 

Found back edge: Loop head: main::@1 tails: main::@2 blocks: null
Populated: Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@6 
NATURAL LOOPS
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@6 

Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@6 
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@6  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(byte[]) TXT
(void()) main()
(byte~) main::$0 22.0
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 4.714285714285714
(byte) main::j
(byte) main::j#1 11.0
(byte) main::j#3 11.0
(byte) main::j#4 7.333333333333333

Initial phi equivalence classes
[ main::j#3 main::j#4 main::j#1 ]
[ main::i#2 main::i#1 ]
Added variable main::$0 to zero page equivalence class [ main::$0 ]
Complete equivalence classes
[ main::j#3 main::j#4 main::j#1 ]
[ main::i#2 main::i#1 ]
[ main::$0 ]
Allocated zp ZP_BYTE:2 [ main::j#3 main::j#4 main::j#1 ]
Allocated zp ZP_BYTE:3 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:4 [ main::$0 ]
INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  TXT: .byte 3, 1, $d, 5, $c, $f, $14, $20
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label _0 = 4
    .label j = 2
    .label i = 3
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #0
    sta i
  //SEG12 [5] phi (byte) main::j#3 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#1] -- zpby1=coby1 
    lda #0
    sta j
    jmp b1
  //SEG13 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG15 [5] phi (byte) main::j#3 = (byte) main::j#4 [phi:main::@2->main::@1#1] -- register_copy 
    jmp b1
  //SEG16 main::@1
  b1:
  //SEG17 [6] (byte~) main::$0 ← (const byte[]) TXT#0 *idx (byte) main::j#3 [ main::j#3 main::i#2 main::$0 ] ( main:2 [ main::j#3 main::i#2 main::$0 ] ) -- zpby1=cowo1_derefidx_zpby2 
    ldx j
    lda TXT,x
    sta _0
  //SEG18 [7] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0 [ main::j#3 main::i#2 ] ( main:2 [ main::j#3 main::i#2 ] ) -- cowo1_derefidx_zpby1=zpby2 
    lda _0
    ldx i
    sta SCREEN,x
  //SEG19 [8] (byte) main::j#1 ← ++ (byte) main::j#3 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- zpby1=_inc_zpby1 
    inc j
  //SEG20 [9] if((byte) main::j#1!=(byte/signed byte/word/signed word) 8) goto main::@6 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda j
    cmp #8
    bne b6_from_b1
  //SEG21 [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG22 [10] phi (byte) main::j#4 = (byte/signed byte/word/signed word) 0 [phi:main::@1->main::@2#0] -- zpby1=coby1 
    lda #0
    sta j
    jmp b2
  //SEG23 main::@2
  b2:
  //SEG24 [11] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- zpby1=_inc_zpby1 
    inc i
  //SEG25 [12] if((byte) main::i#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda i
    cmp #$65
    bne b1_from_b2
    jmp breturn
  //SEG26 main::@return
  breturn:
  //SEG27 [13] return  [ ] ( main:2 [ ] )
    rts
  //SEG28 [14] phi from main::@1 to main::@6 [phi:main::@1->main::@6]
  b6_from_b1:
    jmp b6
  //SEG29 main::@6
  b6:
  //SEG30 [10] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  b2_from_b6:
  //SEG31 [10] phi (byte) main::j#4 = (byte) main::j#1 [phi:main::@6->main::@2#0] -- register_copy 
    jmp b2
}

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 [ main::j#3 main::j#4 main::j#1 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::i#2 main::i#1 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ main::$0 ] : zp ZP_BYTE:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 29.33: zp ZP_BYTE:2 [ main::j#3 main::j#4 main::j#1 ] 22: zp ZP_BYTE:4 [ main::$0 ] 21.21: zp ZP_BYTE:3 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 483 combination reg byte y [ main::j#3 main::j#4 main::j#1 ] reg byte a [ main::$0 ] reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 483 combination 
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b6
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  TXT: .byte 3, 1, $d, 5, $c, $f, $14, $20
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
  //SEG12 [5] phi (byte) main::j#3 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#1] -- yby=coby1 
    ldy #0
    jmp b1
  //SEG13 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG15 [5] phi (byte) main::j#3 = (byte) main::j#4 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG16 main::@1
  b1:
  //SEG17 [6] (byte~) main::$0 ← (const byte[]) TXT#0 *idx (byte) main::j#3 [ main::j#3 main::i#2 main::$0 ] ( main:2 [ main::j#3 main::i#2 main::$0 ] ) -- aby=cowo1_derefidx_yby 
    lda TXT,y
  //SEG18 [7] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0 [ main::j#3 main::i#2 ] ( main:2 [ main::j#3 main::i#2 ] ) -- cowo1_derefidx_xby=aby 
    sta SCREEN,x
  //SEG19 [8] (byte) main::j#1 ← ++ (byte) main::j#3 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- yby=_inc_yby 
    iny
  //SEG20 [9] if((byte) main::j#1!=(byte/signed byte/word/signed word) 8) goto main::@6 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- yby_neq_coby1_then_la1 
    cpy #8
    bne b6_from_b1
  //SEG21 [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG22 [10] phi (byte) main::j#4 = (byte/signed byte/word/signed word) 0 [phi:main::@1->main::@2#0] -- yby=coby1 
    ldy #0
  //SEG23 main::@2
  b2:
  //SEG24 [11] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG25 [12] if((byte) main::i#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$65
    bne b1_from_b2
  //SEG26 main::@return
  breturn:
  //SEG27 [13] return  [ ] ( main:2 [ ] )
    rts
  //SEG28 [14] phi from main::@1 to main::@6 [phi:main::@1->main::@6]
  b6_from_b1:
  //SEG29 main::@6
  b6:
  //SEG30 [10] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  b2_from_b6:
  //SEG31 [10] phi (byte) main::j#4 = (byte) main::j#1 [phi:main::@6->main::@2#0] -- register_copy 
    jmp b2
}

Replacing label b6_from_b1 with b6
Replacing label b1_from_b2 with b1
Removing instruction bbegin:
Removing instruction b1_from_bbegin:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b2:
Removing instruction b6_from_b1:
Removing instruction b2_from_b6:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  TXT: .byte 3, 1, $d, 5, $c, $f, $14, $20
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
  //SEG12 [5] phi (byte) main::j#3 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#1] -- yby=coby1 
    ldy #0
    jmp b1
  //SEG13 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG15 [5] phi (byte) main::j#3 = (byte) main::j#4 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG16 main::@1
  b1:
  //SEG17 [6] (byte~) main::$0 ← (const byte[]) TXT#0 *idx (byte) main::j#3 [ main::j#3 main::i#2 main::$0 ] ( main:2 [ main::j#3 main::i#2 main::$0 ] ) -- aby=cowo1_derefidx_yby 
    lda TXT,y
  //SEG18 [7] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0 [ main::j#3 main::i#2 ] ( main:2 [ main::j#3 main::i#2 ] ) -- cowo1_derefidx_xby=aby 
    sta SCREEN,x
  //SEG19 [8] (byte) main::j#1 ← ++ (byte) main::j#3 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- yby=_inc_yby 
    iny
  //SEG20 [9] if((byte) main::j#1!=(byte/signed byte/word/signed word) 8) goto main::@6 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- yby_neq_coby1_then_la1 
    cpy #8
    bne b6
  //SEG21 [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG22 [10] phi (byte) main::j#4 = (byte/signed byte/word/signed word) 0 [phi:main::@1->main::@2#0] -- yby=coby1 
    ldy #0
  //SEG23 main::@2
  b2:
  //SEG24 [11] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG25 [12] if((byte) main::i#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$65
    bne b1
  //SEG26 main::@return
  breturn:
  //SEG27 [13] return  [ ] ( main:2 [ ] )
    rts
  //SEG28 [14] phi from main::@1 to main::@6 [phi:main::@1->main::@6]
  //SEG29 main::@6
  b6:
  //SEG30 [10] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  //SEG31 [10] phi (byte) main::j#4 = (byte) main::j#1 [phi:main::@6->main::@2#0] -- register_copy 
    jmp b2
}

Removing instruction b1:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b2_from_b1:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  TXT: .byte 3, 1, $d, 5, $c, $f, $14, $20
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
  //SEG12 [5] phi (byte) main::j#3 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#1] -- yby=coby1 
    ldy #0
    jmp b1
  //SEG13 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG15 [5] phi (byte) main::j#3 = (byte) main::j#4 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG16 main::@1
  b1:
  //SEG17 [6] (byte~) main::$0 ← (const byte[]) TXT#0 *idx (byte) main::j#3 [ main::j#3 main::i#2 main::$0 ] ( main:2 [ main::j#3 main::i#2 main::$0 ] ) -- aby=cowo1_derefidx_yby 
    lda TXT,y
  //SEG18 [7] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0 [ main::j#3 main::i#2 ] ( main:2 [ main::j#3 main::i#2 ] ) -- cowo1_derefidx_xby=aby 
    sta SCREEN,x
  //SEG19 [8] (byte) main::j#1 ← ++ (byte) main::j#3 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- yby=_inc_yby 
    iny
  //SEG20 [9] if((byte) main::j#1!=(byte/signed byte/word/signed word) 8) goto main::@6 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- yby_neq_coby1_then_la1 
    cpy #8
    bne b6
  //SEG21 [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG22 [10] phi (byte) main::j#4 = (byte/signed byte/word/signed word) 0 [phi:main::@1->main::@2#0] -- yby=coby1 
    ldy #0
  //SEG23 main::@2
  b2:
  //SEG24 [11] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG25 [12] if((byte) main::i#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$65
    bne b1
  //SEG26 main::@return
  //SEG27 [13] return  [ ] ( main:2 [ ] )
    rts
  //SEG28 [14] phi from main::@1 to main::@6 [phi:main::@1->main::@6]
  //SEG29 main::@6
  b6:
  //SEG30 [10] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  //SEG31 [10] phi (byte) main::j#4 = (byte) main::j#1 [phi:main::@6->main::@2#0] -- register_copy 
    jmp b2
}

Skipping double jump to b2 in bne b6
Succesful ASM optimization Pass5DoubleJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  TXT: .byte 3, 1, $d, 5, $c, $f, $14, $20
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
  //SEG12 [5] phi (byte) main::j#3 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#1] -- yby=coby1 
    ldy #0
    jmp b1
  //SEG13 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG15 [5] phi (byte) main::j#3 = (byte) main::j#4 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG16 main::@1
  b1:
  //SEG17 [6] (byte~) main::$0 ← (const byte[]) TXT#0 *idx (byte) main::j#3 [ main::j#3 main::i#2 main::$0 ] ( main:2 [ main::j#3 main::i#2 main::$0 ] ) -- aby=cowo1_derefidx_yby 
    lda TXT,y
  //SEG18 [7] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0 [ main::j#3 main::i#2 ] ( main:2 [ main::j#3 main::i#2 ] ) -- cowo1_derefidx_xby=aby 
    sta SCREEN,x
  //SEG19 [8] (byte) main::j#1 ← ++ (byte) main::j#3 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- yby=_inc_yby 
    iny
  //SEG20 [9] if((byte) main::j#1!=(byte/signed byte/word/signed word) 8) goto main::@6 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- yby_neq_coby1_then_la1 
    cpy #8
    bne b2
  //SEG21 [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG22 [10] phi (byte) main::j#4 = (byte/signed byte/word/signed word) 0 [phi:main::@1->main::@2#0] -- yby=coby1 
    ldy #0
  //SEG23 main::@2
  b2:
  //SEG24 [11] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG25 [12] if((byte) main::i#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$65
    bne b1
  //SEG26 main::@return
  //SEG27 [13] return  [ ] ( main:2 [ ] )
    rts
  //SEG28 [14] phi from main::@1 to main::@6 [phi:main::@1->main::@6]
  //SEG29 main::@6
  b6:
  //SEG30 [10] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  //SEG31 [10] phi (byte) main::j#4 = (byte) main::j#1 [phi:main::@6->main::@2#0] -- register_copy 
    jmp b2
}

Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  TXT: .byte 3, 1, $d, 5, $c, $f, $14, $20
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
  //SEG12 [5] phi (byte) main::j#3 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#1] -- yby=coby1 
    ldy #0
  //SEG13 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG15 [5] phi (byte) main::j#3 = (byte) main::j#4 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG16 main::@1
  b1:
  //SEG17 [6] (byte~) main::$0 ← (const byte[]) TXT#0 *idx (byte) main::j#3 [ main::j#3 main::i#2 main::$0 ] ( main:2 [ main::j#3 main::i#2 main::$0 ] ) -- aby=cowo1_derefidx_yby 
    lda TXT,y
  //SEG18 [7] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0 [ main::j#3 main::i#2 ] ( main:2 [ main::j#3 main::i#2 ] ) -- cowo1_derefidx_xby=aby 
    sta SCREEN,x
  //SEG19 [8] (byte) main::j#1 ← ++ (byte) main::j#3 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- yby=_inc_yby 
    iny
  //SEG20 [9] if((byte) main::j#1!=(byte/signed byte/word/signed word) 8) goto main::@6 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- yby_neq_coby1_then_la1 
    cpy #8
    bne b2
  //SEG21 [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG22 [10] phi (byte) main::j#4 = (byte/signed byte/word/signed word) 0 [phi:main::@1->main::@2#0] -- yby=coby1 
    ldy #0
  //SEG23 main::@2
  b2:
  //SEG24 [11] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG25 [12] if((byte) main::i#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$65
    bne b1
  //SEG26 main::@return
  //SEG27 [13] return  [ ] ( main:2 [ ] )
    rts
  //SEG28 [14] phi from main::@1 to main::@6 [phi:main::@1->main::@6]
  //SEG29 main::@6
  b6:
  //SEG30 [10] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  //SEG31 [10] phi (byte) main::j#4 = (byte) main::j#1 [phi:main::@6->main::@2#0] -- register_copy 
    jmp b2
}

Removing instruction b6:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  TXT: .byte 3, 1, $d, 5, $c, $f, $14, $20
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
  //SEG12 [5] phi (byte) main::j#3 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#1] -- yby=coby1 
    ldy #0
  //SEG13 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG15 [5] phi (byte) main::j#3 = (byte) main::j#4 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG16 main::@1
  b1:
  //SEG17 [6] (byte~) main::$0 ← (const byte[]) TXT#0 *idx (byte) main::j#3 [ main::j#3 main::i#2 main::$0 ] ( main:2 [ main::j#3 main::i#2 main::$0 ] ) -- aby=cowo1_derefidx_yby 
    lda TXT,y
  //SEG18 [7] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0 [ main::j#3 main::i#2 ] ( main:2 [ main::j#3 main::i#2 ] ) -- cowo1_derefidx_xby=aby 
    sta SCREEN,x
  //SEG19 [8] (byte) main::j#1 ← ++ (byte) main::j#3 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- yby=_inc_yby 
    iny
  //SEG20 [9] if((byte) main::j#1!=(byte/signed byte/word/signed word) 8) goto main::@6 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- yby_neq_coby1_then_la1 
    cpy #8
    bne b2
  //SEG21 [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG22 [10] phi (byte) main::j#4 = (byte/signed byte/word/signed word) 0 [phi:main::@1->main::@2#0] -- yby=coby1 
    ldy #0
  //SEG23 main::@2
  b2:
  //SEG24 [11] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG25 [12] if((byte) main::i#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$65
    bne b1
  //SEG26 main::@return
  //SEG27 [13] return  [ ] ( main:2 [ ] )
    rts
  //SEG28 [14] phi from main::@1 to main::@6 [phi:main::@1->main::@6]
  //SEG29 main::@6
  //SEG30 [10] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  //SEG31 [10] phi (byte) main::j#4 = (byte) main::j#1 [phi:main::@6->main::@2#0] -- register_copy 
    jmp b2
}

Removing unreachable instruction jmp b2
Succesful ASM optimization Pass5AfterRtsElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  TXT: .byte 3, 1, $d, 5, $c, $f, $14, $20
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
  //SEG12 [5] phi (byte) main::j#3 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#1] -- yby=coby1 
    ldy #0
  //SEG13 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG15 [5] phi (byte) main::j#3 = (byte) main::j#4 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG16 main::@1
  b1:
  //SEG17 [6] (byte~) main::$0 ← (const byte[]) TXT#0 *idx (byte) main::j#3 [ main::j#3 main::i#2 main::$0 ] ( main:2 [ main::j#3 main::i#2 main::$0 ] ) -- aby=cowo1_derefidx_yby 
    lda TXT,y
  //SEG18 [7] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0 [ main::j#3 main::i#2 ] ( main:2 [ main::j#3 main::i#2 ] ) -- cowo1_derefidx_xby=aby 
    sta SCREEN,x
  //SEG19 [8] (byte) main::j#1 ← ++ (byte) main::j#3 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- yby=_inc_yby 
    iny
  //SEG20 [9] if((byte) main::j#1!=(byte/signed byte/word/signed word) 8) goto main::@6 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- yby_neq_coby1_then_la1 
    cpy #8
    bne b2
  //SEG21 [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG22 [10] phi (byte) main::j#4 = (byte/signed byte/word/signed word) 0 [phi:main::@1->main::@2#0] -- yby=coby1 
    ldy #0
  //SEG23 main::@2
  b2:
  //SEG24 [11] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG25 [12] if((byte) main::i#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$65
    bne b1
  //SEG26 main::@return
  //SEG27 [13] return  [ ] ( main:2 [ ] )
    rts
  //SEG28 [14] phi from main::@1 to main::@6 [phi:main::@1->main::@6]
  //SEG29 main::@6
  //SEG30 [10] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  //SEG31 [10] phi (byte) main::j#4 = (byte) main::j#1 [phi:main::@6->main::@2#0] -- register_copy 
}

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word) 1024
(byte[]) TXT
(const byte[]) TXT#0 TXT = { (byte/signed byte/word/signed word) 3, (byte/signed byte/word/signed word) 1, (byte/signed byte/word/signed word) 13, (byte/signed byte/word/signed word) 5, (byte/signed byte/word/signed word) 12, (byte/signed byte/word/signed word) 15, (byte/signed byte/word/signed word) 20, (byte/signed byte/word/signed word) 32 }
(void()) main()
(byte~) main::$0 reg byte a 22.0
(label) main::@1
(label) main::@2
(label) main::@6
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 4.714285714285714
(byte) main::j
(byte) main::j#1 reg byte y 11.0
(byte) main::j#3 reg byte y 11.0
(byte) main::j#4 reg byte y 7.333333333333333

reg byte y [ main::j#3 main::j#4 main::j#1 ]
reg byte x [ main::i#2 main::i#1 ]
reg byte a [ main::$0 ]

FINAL CODE
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
  TXT: .byte 3, 1, $d, 5, $c, $f, $14, $20
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
  //SEG12 [5] phi (byte) main::j#3 = (byte/signed byte/word/signed word) 0 [phi:main->main::@1#1] -- yby=coby1 
    ldy #0
  //SEG13 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG15 [5] phi (byte) main::j#3 = (byte) main::j#4 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG16 main::@1
  b1:
  //SEG17 [6] (byte~) main::$0 ← (const byte[]) TXT#0 *idx (byte) main::j#3 [ main::j#3 main::i#2 main::$0 ] ( main:2 [ main::j#3 main::i#2 main::$0 ] ) -- aby=cowo1_derefidx_yby 
    lda TXT,y
  //SEG18 [7] *((const byte*) SCREEN#0 + (byte) main::i#2) ← (byte~) main::$0 [ main::j#3 main::i#2 ] ( main:2 [ main::j#3 main::i#2 ] ) -- cowo1_derefidx_xby=aby 
    sta SCREEN,x
  //SEG19 [8] (byte) main::j#1 ← ++ (byte) main::j#3 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- yby=_inc_yby 
    iny
  //SEG20 [9] if((byte) main::j#1!=(byte/signed byte/word/signed word) 8) goto main::@6 [ main::i#2 main::j#1 ] ( main:2 [ main::i#2 main::j#1 ] ) -- yby_neq_coby1_then_la1 
    cpy #8
    bne b2
  //SEG21 [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG22 [10] phi (byte) main::j#4 = (byte/signed byte/word/signed word) 0 [phi:main::@1->main::@2#0] -- yby=coby1 
    ldy #0
  //SEG23 main::@2
  b2:
  //SEG24 [11] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG25 [12] if((byte) main::i#1!=(byte/signed byte/word/signed word) 101) goto main::@1 [ main::j#4 main::i#1 ] ( main:2 [ main::j#4 main::i#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$65
    bne b1
  //SEG26 main::@return
  //SEG27 [13] return  [ ] ( main:2 [ ] )
    rts
  //SEG28 [14] phi from main::@1 to main::@6 [phi:main::@1->main::@6]
  //SEG29 main::@6
  //SEG30 [10] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  //SEG31 [10] phi (byte) main::j#4 = (byte) main::j#1 [phi:main::@6->main::@2#0] -- register_copy 
}

