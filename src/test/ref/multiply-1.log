
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (number~) main::$0 ← (const byte) main::c1 * (number) 2
  (byte) main::c2#0 ← (number~) main::$0
  (byte) main::c2#1 ← ++ (byte) main::c2#0
  (byte~) main::$1 ← (const byte) main::c1 * (byte) main::c2#1
  (byte) main::c3#0 ← (byte~) main::$1
  *((const nomodify byte*) SCREEN + (number) 0) ← (byte) main::c3#0
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) main()
(number~) main::$0
(byte~) main::$1
(label) main::@return
(const byte) main::c1 = (byte) 4
(byte) main::c2
(byte) main::c2#0
(byte) main::c2#1
(byte) main::c3
(byte) main::c3#0

Adding number conversion cast (unumber) 2 in (number~) main::$0 ← (const byte) main::c1 * (number) 2
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (const byte) main::c1 * (unumber)(number) 2
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) SCREEN + (number) 0) ← (byte) main::c3#0
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (const byte) main::c1 * (byte) 2
Alias main::c2#0 = main::$0 
Alias main::c3#0 = main::$1 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [0] (byte) main::c2#0 ← (const byte) main::c1 * (byte) 2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::c2#0 = main::c1*2
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN in [3] *((const nomodify byte*) SCREEN + (byte) 0) ← (byte) main::c3#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Constant right-side identified [0] (byte) main::c2#1 ← ++ (const byte) main::c2#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::c2#1 = ++main::c2#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [0] (byte) main::c3#0 ← (const byte) main::c1 * (const byte) main::c2#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::c3#0 = main::c1*main::c2#1
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings (const byte) main::c2#0
Inlining constant with different constant siblings (const byte) main::c2#1
Constant inlined main::c2#0 = (const byte) main::c1*(byte) 2
Constant inlined main::c2#1 = ++(const byte) main::c1*(byte) 2
Successful SSA optimization Pass2ConstantInlining
Simplifying constant integer increment ++main::c1*2
Successful SSA optimization Pass2ConstantSimplification
Adding number conversion cast (unumber) main::c1*2+1 in 
Adding number conversion cast (unumber) 1 in 
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast (const byte) main::c1*(byte) 2+(unumber)(number) 1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((const nomodify byte*) SCREEN) ← (const byte) main::c3#0
  to:main::@return
main::@return: scope:[main]  from main
  [5] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::c2
(byte) main::c3

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test compile-time and run-time multiplication
// Compile-time multiplication
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .const c1 = 4
    .const c3 = c1*(c1*2+1)
    // [4] *((const nomodify byte*) SCREEN) ← (const byte) main::c3#0 -- _deref_pbuc1=vbuc2 
    lda #c3
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const nomodify byte*) SCREEN) ← (const byte) main::c3#0 [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 27 combination 
Uplifting [] best 27 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test compile-time and run-time multiplication
// Compile-time multiplication
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .const c1 = 4
    .const c3 = c1*(c1*2+1)
    // [4] *((const nomodify byte*) SCREEN) ← (const byte) main::c3#0 -- _deref_pbuc1=vbuc2 
    lda #c3
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const nomodify byte*) SCREEN = (byte*) 1024
(void()) main()
(label) main::@return
(const byte) main::c1 = (byte) 4
(byte) main::c2
(byte) main::c3
(const byte) main::c3#0 c3 = (const byte) main::c1*(const byte) main::c1*(byte) 2+(byte) 1



FINAL ASSEMBLER
Score: 12

  // File Comments
// Test compile-time and run-time multiplication
// Compile-time multiplication
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .const c1 = 4
    .const c3 = c1*(c1*2+1)
    // SCREEN[0] = c3
    // [4] *((const nomodify byte*) SCREEN) ← (const byte) main::c3#0 -- _deref_pbuc1=vbuc2 
    lda #c3
    sta SCREEN
    // main::@return
    // }
    // [5] return 
    rts
}
  // File Data

