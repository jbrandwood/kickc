
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_reverse_value = 0
  [2] conio_display_cursor = 1
  [3] conio_scroll_enable = 1
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [4] phi()
  [5] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [6] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [7] phi()
  [8] call cursor 
  to:main::@5
main::@5: scope:[main]  from main
  [9] phi()
  [10] call bgcolor 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [11] phi()
  [12] call bordercolor 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [13] phi()
  [14] call textcolor 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [15] phi()
  [16] call cputsxy 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [17] phi()
  [18] call gotoxy 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [19] phi()
  [20] call revers 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [21] phi()
  [22] call cputs 
  to:main::@12
main::@12: scope:[main]  from main::@11
  [23] phi()
  [24] call printf_string 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [25] phi()
  [26] call cputs 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [27] phi()
  [28] call waitkey 
  to:main::@15
main::@15: scope:[main]  from main::@14
  [29] phi()
  [30] call clrscr 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [31] phi()
  [32] call revers 
  to:main::@1
main::@1: scope:[main]  from main::@16 main::@19
  [33] main::i#2 = phi( main::@16/0, main::@19/main::i#1 )
  [34] call cputs 
  to:main::@17
main::@17: scope:[main]  from main::@1
  [35] printf_sint::value#1 = main::i#2
  [36] call printf_sint 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [37] phi()
  [38] call cputs 
  to:main::@19
main::@19: scope:[main]  from main::@18
  [39] main::i#1 = ++ main::i#2
  [40] if(main::i#1!=$33) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@19
  [41] phi()
  [42] call waitkey 
  to:main::@20
main::@20: scope:[main]  from main::@2
  [43] phi()
  [44] call scroll 
  to:main::@3
main::@3: scope:[main]  from main::@20 main::@23
  [45] main::i1#2 = phi( main::@20/$33, main::@23/main::i1#1 )
  [46] call cputs 
  to:main::@21
main::@21: scope:[main]  from main::@3
  [47] printf_sint::value#2 = main::i1#2
  [48] call printf_sint 
  to:main::@22
main::@22: scope:[main]  from main::@21
  [49] phi()
  [50] call cputs 
  to:main::@23
main::@23: scope:[main]  from main::@22
  [51] main::i1#1 = ++ main::i1#2
  [52] if(main::i1#1!=$c9) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@23
  [53] phi()
  [54] call waitkey 
  to:main::@return
main::@return: scope:[main]  from main::@4
  [55] return 
  to:@return

byte cursor(byte cursor::onoff)
cursor: scope:[cursor]  from main
  [56] conio_display_cursor = cursor::onoff#0
  to:cursor::@return
cursor::@return: scope:[cursor]  from cursor
  [57] return 
  to:@return

byte bgcolor(byte bgcolor::color)
bgcolor: scope:[bgcolor]  from main::@5
  [58] *COLOR2 = DARK_ORANGE
  to:bgcolor::@return
bgcolor::@return: scope:[bgcolor]  from bgcolor
  [59] return 
  to:@return

byte bordercolor(byte bordercolor::color)
bordercolor: scope:[bordercolor]  from main::@6
  [60] *COLOR4 = MEDIUM_BLUE
  to:bordercolor::@return
bordercolor::@return: scope:[bordercolor]  from bordercolor
  [61] return 
  to:@return

byte textcolor(byte textcolor::color)
textcolor: scope:[textcolor]  from main::@7
  [62] *COLOR1 = WHITE
  to:textcolor::@return
textcolor::@return: scope:[textcolor]  from textcolor
  [63] return 
  to:@return

void cputsxy(byte cputsxy::x , byte cputsxy::y , to_nomodify byte* cputsxy::s)
cputsxy: scope:[cputsxy]  from main::@8
  [64] phi()
  [65] call gotoxy 
  to:cputsxy::@1
cputsxy::@1: scope:[cputsxy]  from cputsxy
  [66] phi()
  [67] call cputs 
  to:cputsxy::@return
cputsxy::@return: scope:[cputsxy]  from cputsxy::@1
  [68] return 
  to:@return

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from clrscr::@1 cputsxy main::@9 newline::@3
  [69] gotoxy::y#4 = phi( clrscr::@1/0, cputsxy/cputsxy::y#0, main::@9/3, newline::@3/0 )
  [69] gotoxy::x#4 = phi( clrscr::@1/0, cputsxy/cputsxy::x#0, main::@9/0, newline::@3/0 )
  [70] *COLCRS = gotoxy::x#4
  [71] *ROWCRS = gotoxy::y#4
  [72] call setcursor 
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy
  [73] return 
  to:@return

byte revers(byte revers::onoff)
revers: scope:[revers]  from main::@10 main::@16
  [74] revers::onoff#2 = phi( main::@10/1, main::@16/0 )
  [75] if(revers::onoff#2==0) goto revers::@1
  to:revers::@2
revers::@2: scope:[revers]  from revers
  [76] conio_reverse_value = $80
  to:revers::@return
revers::@return: scope:[revers]  from revers::@1 revers::@2
  [77] return 
  to:@return
revers::@1: scope:[revers]  from revers
  [78] conio_reverse_value = 0
  to:revers::@return

void cputs(to_nomodify byte* cputs::s)
cputs: scope:[cputs]  from cputsxy::@1 main::@1 main::@11 main::@13 main::@18 main::@22 main::@3 printf_number_buffer::@2 printf_string::@1
  [79] cputs::s#11 = phi( cputsxy::@1/main::s, main::@1/main::s3, main::@11/main::s1, main::@13/main::s2, main::@18/main::s4, main::@22/main::s4, main::@3/main::s5, printf_number_buffer::@2/printf_number_buffer::buffer_digits#0, printf_string::@1/main::name )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [80] cputs::s#10 = phi( cputs/cputs::s#11, cputs::@2/cputs::s#0 )
  [81] cputs::c#1 = *cputs::s#10
  [82] cputs::s#0 = ++ cputs::s#10
  [83] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [84] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [85] cputc::c = cputs::c#1
  [86] call cputc 
  to:cputs::@1

void printf_string(byte* printf_string::str , byte printf_string::format_min_length , byte printf_string::format_justify_left)
printf_string: scope:[printf_string]  from main::@12
  [87] phi()
  to:printf_string::@1
printf_string::@1: scope:[printf_string]  from printf_string
  [88] phi()
  [89] call cputs 
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string::@1
  [90] return 
  to:@return

void waitkey()
waitkey: scope:[waitkey]  from main::@14 main::@2 main::@4
  [91] phi()
  to:waitkey::@1
waitkey::@1: scope:[waitkey]  from waitkey waitkey::@2
  [92] phi()
  [93] call kbhit 
  [94] kbhit::return#3 = kbhit::return#2
  to:waitkey::@2
waitkey::@2: scope:[waitkey]  from waitkey::@1
  [95] waitkey::$1 = kbhit::return#3
  [96] if(0==waitkey::$1) goto waitkey::@1
  to:waitkey::clrkb1
waitkey::clrkb1: scope:[waitkey]  from waitkey::@2
  [97] *CH = $ff
  to:waitkey::@return
waitkey::@return: scope:[waitkey]  from waitkey::clrkb1
  [98] return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main::@15
  [99] memset::str#7 = (void*)*SAVMSC
  [100] call memset 
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr
  [101] *OLDCHR = 0
  [102] call gotoxy 
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@1
  [103] return 
  to:@return

void printf_sint(signed word printf_sint::value , byte printf_sint::format_min_length , byte printf_sint::format_justify_left , byte printf_sint::format_sign_always , byte printf_sint::format_zero_padding , byte printf_sint::format_upper_case , byte printf_sint::format_radix)
printf_sint: scope:[printf_sint]  from main::@17 main::@21
  [104] printf_sint::value#3 = phi( main::@17/printf_sint::value#1, main::@21/printf_sint::value#2 )
  [105] *((byte*)&printf_buffer) = 0
  [106] if(printf_sint::value#3<0) goto printf_sint::@1
  to:printf_sint::@2
printf_sint::@1: scope:[printf_sint]  from printf_sint
  [107] printf_sint::value#0 = - printf_sint::value#3
  [108] *((byte*)&printf_buffer) = '-'at
  to:printf_sint::@2
printf_sint::@2: scope:[printf_sint]  from printf_sint printf_sint::@1
  [109] printf_sint::value#5 = phi( printf_sint::@1/printf_sint::value#0, printf_sint/printf_sint::value#3 )
  [110] utoa::value#1 = (word)printf_sint::value#5
  [111] call utoa 
  to:printf_sint::@3
printf_sint::@3: scope:[printf_sint]  from printf_sint::@2
  [112] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer)
  [113] call printf_number_buffer 
  to:printf_sint::@return
printf_sint::@return: scope:[printf_sint]  from printf_sint::@3
  [114] return 
  to:@return

byte scroll(byte scroll::onoff)
scroll: scope:[scroll]  from main::@20
  [115] conio_scroll_enable = scroll::onoff#0
  to:scroll::@return
scroll::@return: scope:[scroll]  from scroll
  [116] return 
  to:@return

void setcursor()
setcursor: scope:[setcursor]  from cputc::@1 cputc::@4 gotoxy newline::@1 putchar::@1
  [117] *(*OLDADR) = *OLDCHR
  [118] call cursorLocation 
  [119] cursorLocation::return#3 = cursorLocation::return#1
  to:setcursor::@4
setcursor::@4: scope:[setcursor]  from setcursor
  [120] setcursor::loc#0 = cursorLocation::return#3
  [121] setcursor::c#0 = *setcursor::loc#0
  [122] *OLDCHR = setcursor::c#0
  [123] *OLDADR = setcursor::loc#0
  [124] if(conio_display_cursor==0) goto setcursor::@1
  to:setcursor::@3
setcursor::@3: scope:[setcursor]  from setcursor::@4
  [125] *CRSINH = 0
  [126] setcursor::c#1 = setcursor::c#0 ^ $80
  to:setcursor::@2
setcursor::@2: scope:[setcursor]  from setcursor::@1 setcursor::@3
  [127] setcursor::c#3 = phi( setcursor::@1/setcursor::c#0, setcursor::@3/setcursor::c#1 )
  [128] *(*OLDADR) = setcursor::c#3
  to:setcursor::@return
setcursor::@return: scope:[setcursor]  from setcursor::@2
  [129] return 
  to:@return
setcursor::@1: scope:[setcursor]  from setcursor::@4
  [130] *CRSINH = 1
  to:setcursor::@2

void cputc(volatile byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@3
  [131] if(cputc::c==''at) goto cputc::@1
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc
  [132] if(cputc::c=='
'at) goto cputc::@2
  to:cputc::@8
cputc::@8: scope:[cputc]  from cputc::@3
  [133] if(cputc::c==$9b) goto cputc::@2
  to:cputc::convertToScreenCode1
cputc::convertToScreenCode1: scope:[cputc]  from cputc::@8
  [134] cputc::convertToScreenCode1_return#0 = rawmap[*cputc::convertToScreenCode1_v#0]
  to:cputc::@6
cputc::@6: scope:[cputc]  from cputc::convertToScreenCode1
  [135] phi()
  [136] call putchar 
  to:cputc::@7
cputc::@7: scope:[cputc]  from cputc::@6
  [137] *COLCRS = ++ *COLCRS
  [138] if(*COLCRS==$28) goto cputc::@5
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@7
  [139] phi()
  [140] call setcursor 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@4 cputc::@5
  [141] return 
  to:@return
cputc::@5: scope:[cputc]  from cputc::@7
  [142] *COLCRS = 0
  [143] call newline 
  to:cputc::@return
cputc::@2: scope:[cputc]  from cputc::@3 cputc::@8
  [144] *COLCRS = 0
  [145] call newline 
  to:cputc::@return
cputc::@1: scope:[cputc]  from cputc
  [146] *COLCRS = 0
  [147] call setcursor 
  to:cputc::@return

byte kbhit()
kbhit: scope:[kbhit]  from waitkey::@1
  [148] if(*CH==$ff) goto kbhit::@1
  to:kbhit::@return
kbhit::@1: scope:[kbhit]  from kbhit
  [149] phi()
  to:kbhit::@return
kbhit::@return: scope:[kbhit]  from kbhit kbhit::@1
  [150] kbhit::return#2 = phi( kbhit::@1/0, kbhit/1 )
  [151] return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from clrscr newline::@7
  [152] memset::str#3 = phi( clrscr/memset::str#7, newline::@7/memset::str#8 )
  [152] memset::num#2 = phi( clrscr/(word)$28*$18, newline::@7/$28 )
  [153] if(memset::num#2<=0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [154] memset::end#0 = (byte*)memset::str#3 + memset::num#2
  [155] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [156] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [157] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [158] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [159] *memset::dst#2 = 0
  [160] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
utoa: scope:[utoa]  from printf_sint::@2
  [161] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [162] utoa::buffer#11 = phi( utoa::@4/utoa::buffer#14, utoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [162] utoa::started#2 = phi( utoa::@4/utoa::started#4, utoa/0 )
  [162] utoa::value#2 = phi( utoa::@4/utoa::value#6, utoa/utoa::value#1 )
  [162] utoa::digit#2 = phi( utoa::@4/utoa::digit#1, utoa/0 )
  [163] if(utoa::digit#2<5-1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [164] utoa::$11 = (byte)utoa::value#2
  [165] *utoa::buffer#11 = DIGITS[utoa::$11]
  [166] utoa::buffer#3 = ++ utoa::buffer#11
  [167] *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [168] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [169] utoa::$10 = utoa::digit#2 << 1
  [170] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10]
  [171] if(0!=utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [172] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [173] utoa::buffer#14 = phi( utoa::@7/utoa::buffer#11, utoa::@6/utoa::buffer#4 )
  [173] utoa::started#4 = phi( utoa::@7/utoa::started#2, utoa::@6/1 )
  [173] utoa::value#6 = phi( utoa::@7/utoa::value#2, utoa::@6/utoa::value#0 )
  [174] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [175] utoa_append::buffer#0 = utoa::buffer#11
  [176] utoa_append::value#0 = utoa::value#2
  [177] utoa_append::sub#0 = utoa::digit_value#0
  [178] call utoa_append 
  [179] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [180] utoa::value#0 = utoa_append::return#0
  [181] utoa::buffer#4 = ++ utoa::buffer#11
  to:utoa::@4

void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_sint::@3
  [182] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [183] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [184] cputc::c = printf_number_buffer::buffer_sign#0
  [185] call cputc 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [186] phi()
  [187] call cputs 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [188] return 
  to:@return

byte* cursorLocation()
cursorLocation: scope:[cursorLocation]  from putchar setcursor
  [189] cursorLocation::$3 = (word)*ROWCRS
  [190] cursorLocation::$4 = cursorLocation::$3 << 2
  [191] cursorLocation::$5 = cursorLocation::$4 + cursorLocation::$3
  [192] cursorLocation::$0 = cursorLocation::$5 << 3
  [193] cursorLocation::$1 = *SAVMSC + cursorLocation::$0
  [194] cursorLocation::return#1 = cursorLocation::$1 + *COLCRS
  to:cursorLocation::@return
cursorLocation::@return: scope:[cursorLocation]  from cursorLocation
  [195] return 
  to:@return

void putchar(byte putchar::code)
putchar: scope:[putchar]  from cputc::@6
  [196] *(*OLDADR) = *OLDCHR
  [197] call cursorLocation 
  [198] cursorLocation::return#0 = cursorLocation::return#1
  to:putchar::@1
putchar::@1: scope:[putchar]  from putchar
  [199] putchar::loc#0 = cursorLocation::return#0
  [200] putchar::newChar#0 = cputc::convertToScreenCode1_return#0 | conio_reverse_value
  [201] *putchar::loc#0 = putchar::newChar#0
  [202] *OLDCHR = putchar::newChar#0
  [203] call setcursor 
  to:putchar::@return
putchar::@return: scope:[putchar]  from putchar::@1
  [204] return 
  to:@return

void newline()
newline: scope:[newline]  from cputc::@2 cputc::@5
  [205] *ROWCRS = ++ *ROWCRS
  [206] if(*ROWCRS!=$18) goto newline::@1
  to:newline::@2
newline::@2: scope:[newline]  from newline
  [207] if(conio_scroll_enable==1) goto newline::@4
  to:newline::@3
newline::@3: scope:[newline]  from newline::@2
  [208] phi()
  [209] call gotoxy 
  to:newline::@1
newline::@1: scope:[newline]  from newline newline::@3 newline::@8
  [210] phi()
  [211] call setcursor 
  to:newline::@return
newline::@return: scope:[newline]  from newline::@1
  [212] return 
  to:@return
newline::@4: scope:[newline]  from newline::@2
  [213] if(conio_display_cursor!=1) goto newline::@5
  to:newline::@6
newline::@6: scope:[newline]  from newline::@4
  [214] *(*OLDADR) = *(*OLDADR) ^ $80
  to:newline::@5
newline::@5: scope:[newline]  from newline::@4 newline::@6
  [215] newline::start#0 = *SAVMSC
  [216] memcpy::source#0 = newline::start#0 + $28
  [217] memcpy::destination#0 = (void*)newline::start#0
  [218] call memcpy 
  to:newline::@7
newline::@7: scope:[newline]  from newline::@5
  [219] memset::str#0 = newline::start#0 + (word)$28*$17
  [220] memset::str#8 = (void*)memset::str#0
  [221] call memset 
  to:newline::@8
newline::@8: scope:[newline]  from newline::@7
  [222] *ROWCRS = $18-1
  to:newline::@1

word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [223] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [224] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [224] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [225] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [226] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [227] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [228] utoa_append::digit#1 = ++ utoa_append::digit#2
  [229] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from newline::@5
  [230] memcpy::src_end#0 = (byte*)(void*)memcpy::source#0 + memcpy::num#0
  [231] memcpy::src#4 = (byte*)(void*)memcpy::source#0
  [232] memcpy::dst#4 = (byte*)memcpy::destination#0
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [233] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [233] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [234] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [235] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [236] *memcpy::dst#2 = *memcpy::src#2
  [237] memcpy::dst#1 = ++ memcpy::dst#2
  [238] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1
