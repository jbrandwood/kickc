@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [6] *((const nomodify byte*) main::SCREEN + (byte) main::i#2) ← (byte) main::i#2
  [7] (byte~) main::$1 ← (byte) main::i#2 >> (byte) 1
  [8] *((const nomodify byte*) main::SCREEN+(byte)(number) $28*(number) 1 + (byte) main::i#2) ← (byte~) main::$1
  [9] (byte~) main::$2 ← (byte) main::i#2 >> (byte) 2
  [10] *((const nomodify byte*) main::SCREEN+(byte)(number) $28*(number) 2 + (byte) main::i#2) ← (byte~) main::$2
  [11] (byte~) main::$3 ← (byte) main::i#2 >> (byte) 3
  [12] *((const nomodify byte*) main::SCREEN+(byte)(number) $28*(number) 3 + (byte) main::i#2) ← (byte~) main::$3
  [13] (signed byte) main::sb#0 ← - (signed byte)(byte) main::i#2
  [14] (signed byte~) main::$5 ← (signed byte) main::sb#0 >> (byte) 1
  [15] *((const nomodify byte*) main::SCREEN+(byte)(number) $28*(number) 5 + (byte) main::i#2) ← (byte)(signed byte~) main::$5
  [16] (byte) main::i#1 ← ++ (byte) main::i#2
  [17] if((byte) main::i#1!=(byte) $b) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [18] return 
  to:@return
