Resolved forward reference irq to interrupt(HARDWARE_ALL)(void()) irq()
Culled Empty Block (label) main::@4
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@6
Culled Empty Block (label) @1

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (void()**) HARDWARE_IRQ ← ((void()**)) (number) $fffe
  (byte*) RASTER ← ((byte*)) (number) $d012
  (byte*) VIC_CONTROL ← ((byte*)) (number) $d011
  (byte*) IRQ_STATUS ← ((byte*)) (number) $d019
  (byte*) IRQ_ENABLE ← ((byte*)) (number) $d01a
  (byte) IRQ_RASTER ← (number) 1
  (byte*) BGCOL ← ((byte*)) (number) $d020
  (byte*) FGCOL ← ((byte*)) (number) $d021
  (byte) WHITE ← (number) 1
  (byte) BLACK ← (number) 0
  (byte*) CIA1_INTERRUPT ← ((byte*)) (number) $dc0d
  (byte) CIA_INTERRUPT_CLEAR ← (number) $7f
  (byte*) PROCPORT_DDR ← ((byte*)) (number) 0
  (byte) PROCPORT_DDR_MEMORY_MASK ← (number) 7
  (byte*) PROCPORT ← ((byte*)) (number) 1
  (byte) PROCPORT_RAM_IO ← (number) $35
  to:@2

(void()) main()
main: scope:[main]  from @2
  asm { sei  }
  *((byte*) PROCPORT_DDR) ← (byte) PROCPORT_DDR_MEMORY_MASK
  *((byte*) PROCPORT) ← (byte) PROCPORT_RAM_IO
  *((byte*) CIA1_INTERRUPT) ← (byte) CIA_INTERRUPT_CLEAR
  *((byte*) VIC_CONTROL) ← *((byte*) VIC_CONTROL) | (number) $80
  *((byte*) RASTER) ← (number) 0
  *((byte*) IRQ_ENABLE) ← (byte) IRQ_RASTER
  (void()*~) main::$0 ← & interrupt(HARDWARE_ALL)(void()) irq()
  *((void()**) HARDWARE_IRQ) ← (void()*~) main::$0
  asm { cli  }
  to:main::@1
main::@1: scope:[main]  from main main::@2
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  *((byte*) FGCOL) ← ++ *((byte*) FGCOL)
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

interrupt(HARDWARE_ALL)(void()) irq()
irq: scope:[irq]  from
  *((byte*) BGCOL) ← (byte) WHITE
  *((byte*) BGCOL) ← (byte) BLACK
  *((byte*) IRQ_STATUS) ← (byte) IRQ_RASTER
  to:irq::@return
irq::@return: scope:[irq]  from irq
  return 
  to:@return
@2: scope:[]  from @begin
  call main 
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @2
(label) @3
(label) @begin
(label) @end
(byte*) BGCOL
(byte) BLACK
(byte*) CIA1_INTERRUPT
(byte) CIA_INTERRUPT_CLEAR
(byte*) FGCOL
(void()**) HARDWARE_IRQ
(byte*) IRQ_ENABLE
(byte) IRQ_RASTER
(byte*) IRQ_STATUS
(byte*) PROCPORT
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_RAM_IO
(byte*) RASTER
(byte*) VIC_CONTROL
(byte) WHITE
interrupt(HARDWARE_ALL)(void()) irq()
(label) irq::@return
(void()) main()
(void()*~) main::$0
(label) main::@1
(label) main::@2
(label) main::@return

Adding number conversion cast (unumber) 1 in (byte) IRQ_RASTER ← (number) 1
Adding number conversion cast (unumber) 1 in (byte) WHITE ← (number) 1
Adding number conversion cast (unumber) 0 in (byte) BLACK ← (number) 0
Adding number conversion cast (unumber) $7f in (byte) CIA_INTERRUPT_CLEAR ← (number) $7f
Adding number conversion cast (unumber) 7 in (byte) PROCPORT_DDR_MEMORY_MASK ← (number) 7
Adding number conversion cast (unumber) $35 in (byte) PROCPORT_RAM_IO ← (number) $35
Adding number conversion cast (unumber) $80 in *((byte*) VIC_CONTROL) ← *((byte*) VIC_CONTROL) | (number) $80
Adding number conversion cast (unumber) 0 in *((byte*) RASTER) ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (void()**) HARDWARE_IRQ ← (void()**)(number) $fffe
Inlining cast (byte*) RASTER ← (byte*)(number) $d012
Inlining cast (byte*) VIC_CONTROL ← (byte*)(number) $d011
Inlining cast (byte*) IRQ_STATUS ← (byte*)(number) $d019
Inlining cast (byte*) IRQ_ENABLE ← (byte*)(number) $d01a
Inlining cast (byte) IRQ_RASTER ← (unumber)(number) 1
Inlining cast (byte*) BGCOL ← (byte*)(number) $d020
Inlining cast (byte*) FGCOL ← (byte*)(number) $d021
Inlining cast (byte) WHITE ← (unumber)(number) 1
Inlining cast (byte) BLACK ← (unumber)(number) 0
Inlining cast (byte*) CIA1_INTERRUPT ← (byte*)(number) $dc0d
Inlining cast (byte) CIA_INTERRUPT_CLEAR ← (unumber)(number) $7f
Inlining cast (byte*) PROCPORT_DDR ← (byte*)(number) 0
Inlining cast (byte) PROCPORT_DDR_MEMORY_MASK ← (unumber)(number) 7
Inlining cast (byte*) PROCPORT ← (byte*)(number) 1
Inlining cast (byte) PROCPORT_RAM_IO ← (unumber)(number) $35
Inlining cast *((byte*) RASTER) ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (void()**) 65534
Simplifying constant pointer cast (byte*) 53266
Simplifying constant pointer cast (byte*) 53265
Simplifying constant pointer cast (byte*) 53273
Simplifying constant pointer cast (byte*) 53274
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53281
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 56333
Simplifying constant integer cast $7f
Simplifying constant pointer cast (byte*) 0
Simplifying constant integer cast 7
Simplifying constant pointer cast (byte*) 1
Simplifying constant integer cast $35
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) $35
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [23] (void()*~) main::$0 ← & interrupt(HARDWARE_ALL)(void()) irq()
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const void()**) HARDWARE_IRQ = (void()**) 65534
Constant (const byte*) RASTER = (byte*) 53266
Constant (const byte*) VIC_CONTROL = (byte*) 53265
Constant (const byte*) IRQ_STATUS = (byte*) 53273
Constant (const byte*) IRQ_ENABLE = (byte*) 53274
Constant (const byte) IRQ_RASTER = 1
Constant (const byte*) BGCOL = (byte*) 53280
Constant (const byte*) FGCOL = (byte*) 53281
Constant (const byte) WHITE = 1
Constant (const byte) BLACK = 0
Constant (const byte*) CIA1_INTERRUPT = (byte*) 56333
Constant (const byte) CIA_INTERRUPT_CLEAR = $7f
Constant (const byte*) PROCPORT_DDR = (byte*) 0
Constant (const byte) PROCPORT_DDR_MEMORY_MASK = 7
Constant (const byte*) PROCPORT = (byte*) 1
Constant (const byte) PROCPORT_RAM_IO = $35
Constant (const void()*) main::$0 = &irq
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [26] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Constant inlined main::$0 = &interrupt(HARDWARE_ALL)(void()) irq()
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@1
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @3
Culled Empty Block (label) main::@1
Renumbering block @2 to @1
Renumbering block main::@2 to main::@1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  asm { sei  }
  [5] *((const byte*) PROCPORT_DDR) ← (const byte) PROCPORT_DDR_MEMORY_MASK
  [6] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_IO
  [7] *((const byte*) CIA1_INTERRUPT) ← (const byte) CIA_INTERRUPT_CLEAR
  [8] *((const byte*) VIC_CONTROL) ← *((const byte*) VIC_CONTROL) | (byte) $80
  [9] *((const byte*) RASTER) ← (byte) 0
  [10] *((const byte*) IRQ_ENABLE) ← (const byte) IRQ_RASTER
  [11] *((const void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_ALL)(void()) irq()
  asm { cli  }
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [13] *((const byte*) FGCOL) ← ++ *((const byte*) FGCOL)
  to:main::@1

interrupt(HARDWARE_ALL)(void()) irq()
irq: scope:[irq]  from
  [14] *((const byte*) BGCOL) ← (const byte) WHITE
  [15] *((const byte*) BGCOL) ← (const byte) BLACK
  [16] *((const byte*) IRQ_STATUS) ← (const byte) IRQ_RASTER
  to:irq::@return
irq::@return: scope:[irq]  from irq
  [17] return 
  to:@return


VARIABLE REGISTER WEIGHTS
interrupt(HARDWARE_ALL)(void()) irq()
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// A minimal working raster IRQ
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label HARDWARE_IRQ = $fffe
  .label RASTER = $d012
  .label VIC_CONTROL = $d011
  .label IRQ_STATUS = $d019
  .label IRQ_ENABLE = $d01a
  .const IRQ_RASTER = 1
  .label BGCOL = $d020
  .label FGCOL = $d021
  .const WHITE = 1
  .const BLACK = 0
  .label CIA1_INTERRUPT = $dc0d
  .const CIA_INTERRUPT_CLEAR = $7f
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = $35
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
// RAM in $A000, $E000 CHAR ROM in $D000
main: {
    // asm { sei  }
    sei
    // [5] *((const byte*) PROCPORT_DDR) ← (const byte) PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // [6] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [7] *((const byte*) CIA1_INTERRUPT) ← (const byte) CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
    // [8] *((const byte*) VIC_CONTROL) ← *((const byte*) VIC_CONTROL) | (byte) $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set raster line to $100
    lda #$80
    ora VIC_CONTROL
    sta VIC_CONTROL
    // [9] *((const byte*) RASTER) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta RASTER
    // [10] *((const byte*) IRQ_ENABLE) ← (const byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
    // [11] *((const void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_ALL)(void()) irq() -- _deref_pptc1=pprc2 
    // Set the IRQ routine
    lda #<irq
    sta HARDWARE_IRQ
    lda #>irq
    sta HARDWARE_IRQ+1
    // asm { cli  }
    cli
    jmp __b1
    // main::@1
  __b1:
    // [13] *((const byte*) FGCOL) ← ++ *((const byte*) FGCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc FGCOL
    jmp __b1
}
  // irq
// Interrupt Routine
irq: {
    // entry interrupt(HARDWARE_ALL)
    sta rega+1
    stx regx+1
    sty regy+1
    // [14] *((const byte*) BGCOL) ← (const byte) WHITE -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BGCOL
    // [15] *((const byte*) BGCOL) ← (const byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BGCOL
    // [16] *((const byte*) IRQ_STATUS) ← (const byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
    jmp __breturn
    // irq::@return
  __breturn:
    // [17] return  - exit interrupt(HARDWARE_ALL)
  rega:
    lda #00
  regx:
    ldx #00
  regy:
    ldy #00
    rti
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [5] *((const byte*) PROCPORT_DDR) ← (const byte) PROCPORT_DDR_MEMORY_MASK [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_IO [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) CIA1_INTERRUPT) ← (const byte) CIA_INTERRUPT_CLEAR [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [8] *((const byte*) VIC_CONTROL) ← *((const byte*) VIC_CONTROL) | (byte) $80 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [9] *((const byte*) RASTER) ← (byte) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [10] *((const byte*) IRQ_ENABLE) ← (const byte) IRQ_RASTER [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [11] *((const void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_ALL)(void()) irq() [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [14] *((const byte*) BGCOL) ← (const byte) WHITE [ ] (  [ ] ) always clobbers reg byte a 
Statement [15] *((const byte*) BGCOL) ← (const byte) BLACK [ ] (  [ ] ) always clobbers reg byte a 
Statement [16] *((const byte*) IRQ_STATUS) ← (const byte) IRQ_RASTER [ ] (  [ ] ) always clobbers reg byte a 
Statement [17] return  [ ] (  [ ] ) always clobbers reg byte a reg byte x reg byte y 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [irq] 
Uplift Scope [] 

Uplifting [main] best 314 combination 
Uplifting [irq] best 314 combination 
Uplifting [] best 314 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// A minimal working raster IRQ
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label HARDWARE_IRQ = $fffe
  .label RASTER = $d012
  .label VIC_CONTROL = $d011
  .label IRQ_STATUS = $d019
  .label IRQ_ENABLE = $d01a
  .const IRQ_RASTER = 1
  .label BGCOL = $d020
  .label FGCOL = $d021
  .const WHITE = 1
  .const BLACK = 0
  .label CIA1_INTERRUPT = $dc0d
  .const CIA_INTERRUPT_CLEAR = $7f
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = $35
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
// RAM in $A000, $E000 CHAR ROM in $D000
main: {
    // asm { sei  }
    sei
    // [5] *((const byte*) PROCPORT_DDR) ← (const byte) PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // [6] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [7] *((const byte*) CIA1_INTERRUPT) ← (const byte) CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
    // [8] *((const byte*) VIC_CONTROL) ← *((const byte*) VIC_CONTROL) | (byte) $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set raster line to $100
    lda #$80
    ora VIC_CONTROL
    sta VIC_CONTROL
    // [9] *((const byte*) RASTER) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta RASTER
    // [10] *((const byte*) IRQ_ENABLE) ← (const byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
    // [11] *((const void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_ALL)(void()) irq() -- _deref_pptc1=pprc2 
    // Set the IRQ routine
    lda #<irq
    sta HARDWARE_IRQ
    lda #>irq
    sta HARDWARE_IRQ+1
    // asm { cli  }
    cli
    jmp __b1
    // main::@1
  __b1:
    // [13] *((const byte*) FGCOL) ← ++ *((const byte*) FGCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc FGCOL
    jmp __b1
}
  // irq
// Interrupt Routine
irq: {
    // entry interrupt(HARDWARE_ALL)
    sta rega+1
    stx regx+1
    sty regy+1
    // [14] *((const byte*) BGCOL) ← (const byte) WHITE -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BGCOL
    // [15] *((const byte*) BGCOL) ← (const byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BGCOL
    // [16] *((const byte*) IRQ_STATUS) ← (const byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
    jmp __breturn
    // irq::@return
  __breturn:
    // [17] return  - exit interrupt(HARDWARE_ALL)
  rega:
    lda #00
  regx:
    ldx #00
  regy:
    ldy #00
    rti
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __bbegin with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction __bend_from___b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __b1:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte*) BGCOL BGCOL = (byte*) 53280
(const byte) BLACK BLACK = (byte) 0
(const byte*) CIA1_INTERRUPT CIA1_INTERRUPT = (byte*) 56333
(const byte) CIA_INTERRUPT_CLEAR CIA_INTERRUPT_CLEAR = (byte) $7f
(const byte*) FGCOL FGCOL = (byte*) 53281
(const void()**) HARDWARE_IRQ HARDWARE_IRQ = (void()**) 65534
(const byte*) IRQ_ENABLE IRQ_ENABLE = (byte*) 53274
(const byte) IRQ_RASTER IRQ_RASTER = (byte) 1
(const byte*) IRQ_STATUS IRQ_STATUS = (byte*) 53273
(const byte*) PROCPORT PROCPORT = (byte*) 1
(const byte*) PROCPORT_DDR PROCPORT_DDR = (byte*) 0
(const byte) PROCPORT_DDR_MEMORY_MASK PROCPORT_DDR_MEMORY_MASK = (byte) 7
(const byte) PROCPORT_RAM_IO PROCPORT_RAM_IO = (byte) $35
(const byte*) RASTER RASTER = (byte*) 53266
(const byte*) VIC_CONTROL VIC_CONTROL = (byte*) 53265
(const byte) WHITE WHITE = (byte) 1
interrupt(HARDWARE_ALL)(void()) irq()
(label) irq::@return
(void()) main()
(label) main::@1



FINAL ASSEMBLER
Score: 296

  // File Comments
// A minimal working raster IRQ
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label HARDWARE_IRQ = $fffe
  .label RASTER = $d012
  .label VIC_CONTROL = $d011
  .label IRQ_STATUS = $d019
  .label IRQ_ENABLE = $d01a
  .const IRQ_RASTER = 1
  .label BGCOL = $d020
  .label FGCOL = $d021
  .const WHITE = 1
  .const BLACK = 0
  .label CIA1_INTERRUPT = $dc0d
  .const CIA_INTERRUPT_CLEAR = $7f
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = $35
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
// RAM in $A000, $E000 CHAR ROM in $D000
main: {
    // asm
    // asm { sei  }
    sei
    // *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
    // [5] *((const byte*) PROCPORT_DDR) ← (const byte) PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // *PROCPORT = PROCPORT_RAM_IO
    // [6] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // *CIA1_INTERRUPT = CIA_INTERRUPT_CLEAR
    // [7] *((const byte*) CIA1_INTERRUPT) ← (const byte) CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
    // *VIC_CONTROL |=$80
    // [8] *((const byte*) VIC_CONTROL) ← *((const byte*) VIC_CONTROL) | (byte) $80 -- _deref_pbuc1=_deref_pbuc1_bor_vbuc2 
    // Set raster line to $100
    lda #$80
    ora VIC_CONTROL
    sta VIC_CONTROL
    // *RASTER = $00
    // [9] *((const byte*) RASTER) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta RASTER
    // *IRQ_ENABLE = IRQ_RASTER
    // [10] *((const byte*) IRQ_ENABLE) ← (const byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
    // *HARDWARE_IRQ = &irq
    // [11] *((const void()**) HARDWARE_IRQ) ← &interrupt(HARDWARE_ALL)(void()) irq() -- _deref_pptc1=pprc2 
    // Set the IRQ routine
    lda #<irq
    sta HARDWARE_IRQ
    lda #>irq
    sta HARDWARE_IRQ+1
    // asm
    // asm { cli  }
    cli
    // main::@1
  __b1:
    // (*FGCOL)++;
    // [13] *((const byte*) FGCOL) ← ++ *((const byte*) FGCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc FGCOL
    jmp __b1
}
  // irq
// Interrupt Routine
irq: {
    // entry interrupt(HARDWARE_ALL)
    sta rega+1
    stx regx+1
    sty regy+1
    // *BGCOL = WHITE
    // [14] *((const byte*) BGCOL) ← (const byte) WHITE -- _deref_pbuc1=vbuc2 
    lda #WHITE
    sta BGCOL
    // *BGCOL = BLACK
    // [15] *((const byte*) BGCOL) ← (const byte) BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BGCOL
    // *IRQ_STATUS = IRQ_RASTER
    // [16] *((const byte*) IRQ_STATUS) ← (const byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta IRQ_STATUS
    // irq::@return
    // }
    // [17] return  - exit interrupt(HARDWARE_ALL)
  rega:
    lda #00
  regx:
    ldx #00
  regy:
    ldy #00
    rti
}
  // File Data

