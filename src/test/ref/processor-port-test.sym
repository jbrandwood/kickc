__constant char * const BASIC_ROM = (char *) 40960
__constant char * const IO_RAM = (char *) 53248
__constant char * const KERNAL_ROM = (char *) 57344
__constant char * const PROCPORT = (char *) 1
__constant const char PROCPORT_BASIC_KERNEL_IO = 7
__constant char * const PROCPORT_DDR = (char *) 0
__constant const char PROCPORT_DDR_MEMORY_MASK = 7
__constant const char PROCPORT_KERNEL_IO = 6
__constant const char PROCPORT_RAM_ALL = 0
__constant const char PROCPORT_RAM_CHARROM = 1
__constant const char PROCPORT_RAM_IO = 5
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant char * const SCREEN = (char *) 1024
void main()
__constant char main::str[$28] = "ddr port ddr2 $00 $01 $a000 $d000 $e000"
void * memset(void *str , char c , unsigned int num)
char memset::c
__constant char memset::c#0 = ' ' // c
char *memset::dst
char *memset::dst#1 // dst zp[2]:4 2002.0
char *memset::dst#2 // dst zp[2]:4 1334.6666666666667
char *memset::end
__constant char *memset::end#0 = (char *)memset::str#0+memset::num#0 // end
unsigned int memset::num
__constant unsigned int memset::num#0 = $3e8 // num
void *memset::return
void *memset::str
__constant void *memset::str#0 = (void *)print_screen#0 // str
void print_char(char ch)
char print_char::ch
char print_char::ch#0 // reg byte a 2002.0
char print_char::ch#1 // reg byte a 202.0
char print_char::ch#2 // reg byte a 202.0
char print_char::ch#3 // reg byte a 11204.0
char *print_char_cursor
char *print_char_cursor#1 // print_char_cursor zp[2]:2 88.24
char *print_char_cursor#118 // print_char_cursor zp[2]:2 253.5
char *print_char_cursor#124 // print_char_cursor zp[2]:2 189.0
char *print_char_cursor#126 // print_char_cursor zp[2]:2 22.0
char *print_char_cursor#66 // print_char_cursor zp[2]:2 10602.5
char *print_char_cursor#67 // print_char_cursor zp[2]:2 447.64
void print_cls()
__constant const char print_hextab[] = "0123456789abcdef"z
char *print_line_cursor
char *print_line_cursor#0 // print_line_cursor zp[2]:6 33.61111111111111
char *print_line_cursor#35 // print_line_cursor zp[2]:6 2103.0
char *print_line_cursor#69 // print_line_cursor zp[2]:6 112.0
void print_ln()
char *print_screen
__constant char *print_screen#0 = (char *) 1024 // print_screen
void print_str(char *str)
char *print_str::str
char *print_str::str#0 // str zp[2]:4 2002.0
char *print_str::str#10 // str zp[2]:4 1026.25
char *print_str::str#13 // str zp[2]:4 101.0
void print_uchar(char b)
char print_uchar::$0 // reg byte a 202.0
char print_uchar::$2 // reg byte x 202.0
char print_uchar::b
char print_uchar::b#0 // reg byte x 22.0
char print_uchar::b#1 // reg byte x 22.0
char print_uchar::b#2 // reg byte x 22.0
char print_uchar::b#3 // reg byte x 22.0
char print_uchar::b#4 // reg byte x 22.0
char print_uchar::b#5 // reg byte x 22.0
char print_uchar::b#6 // reg byte x 22.0
char print_uchar::b#7 // reg byte x 22.0
char print_uchar::b#8 // reg byte x 72.5
void testProcport(char ddr , char port , char ddr2)
char testProcport::ddr
char testProcport::ddr#23 // reg byte x 2.75
char testProcport::ddr2
char testProcport::ddr2#23 // ddr2 zp[1]:9 1.375
char testProcport::port
char testProcport::port#23 // port zp[1]:8 1.8333333333333333
__constant char testProcport::str[2] = " "
__constant char testProcport::str1[4] = "   "
__constant char testProcport::str3[3] = "  "
__constant char testProcport::str5[5] = "    "

zp[2]:6 [ print_line_cursor#35 print_line_cursor#69 print_line_cursor#0 ]
reg byte x [ testProcport::ddr#23 ]
zp[1]:8 [ testProcport::port#23 ]
zp[1]:9 [ testProcport::ddr2#23 ]
zp[2]:4 [ memset::dst#2 memset::dst#1 print_str::str#10 print_str::str#13 print_str::str#0 ]
reg byte a [ print_char::ch#3 print_char::ch#0 print_char::ch#1 print_char::ch#2 ]
zp[2]:2 [ print_char_cursor#66 print_char_cursor#118 print_char_cursor#1 print_char_cursor#124 print_char_cursor#126 print_char_cursor#67 ]
reg byte x [ print_uchar::b#8 print_uchar::b#0 print_uchar::b#5 print_uchar::b#6 print_uchar::b#7 print_uchar::b#1 print_uchar::b#2 print_uchar::b#3 print_uchar::b#4 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
