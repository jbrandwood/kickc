PARSING src/test/java/dk/camelot64/kickc/test/kc/simple-multiplexer.kc
// A simple usage of the flexible sprite multiplexer routine
import "c64"
import "multiplexer"

// Location of screen & sprites
byte* SPRITE = $2000;
byte* SCREEN = $400;
byte* YSIN = $2100;

kickasm(pc YSIN) {{
    .var min = 51
    .var max = 250-21
    .var ampl = max-min;
    .for(var i=0;i<256;i++)
        .byte round(min+(ampl/2)+(ampl/2)*sin(toRadians(360*i/256)))
}}


kickasm(pc SPRITE, resource "balloon.png") {{
.var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
.for (var y=0; y<21; y++)
    .for (var x=0;x<3; x++)
        .byte pic.getSinglecolorByte(x,y)
}}

void main() {
    asm { sei }
    init();
    loop();
}

// Initialize the program
void init() {
    *D011 = VIC_DEN | VIC_RSEL | 3;
    // Initialize the multiplexer
    plexInit(SCREEN);
    // Set the x-positions & pointers
    word xp = 32;
    for(byte sx: 0..PLEX_COUNT-1) {
        PLEX_PTR[sx] = (byte)(SPRITE/$40);
        PLEX_XPOS[sx<<1] = xp;
        xp += 12;
    }

    // Enable & initialize sprites
    *SPRITES_ENABLE = $ff;
    for(byte ss: 0..7) {
        SPRITES_COLS[ss] = GREEN;
    }
}

// The raster loop
void loop() {
    // The current index into the y-sinus
    byte sin_idx = 0;
    while(true) {
        while(*RASTER!=$ff) {}
        // Assign sinus positions
        (*BORDERCOL)++;
        byte y_idx = sin_idx;
        for(byte sy: 0..PLEX_COUNT-1) {
            PLEX_YPOS[sy] = YSIN[y_idx];
            y_idx += 10;
        }
        sin_idx +=1;
        // Sort the sprites by y-position
        (*BORDERCOL)++;
        plexSort();
        // Show the first 8 sprites
        (*BORDERCOL)++;
        for( byte ss: 0..7) {
            plexShowSprite();
        }
        // Show the rest of the sprites
        for( ss: 8..PLEX_COUNT-1) {
            *BORDERCOL = BLACK;
            byte rasterY = plexShowNextYpos()-8;
            while(*RASTER<rasterY) {}
            (*BORDERCOL)++;
            plexShowSprite();
        }
        *BORDERCOL = BLACK;
    }
}
Importing c64
PARSING src/test/java/dk/camelot64/kickc/test/kc/c64.kc
// Commodore 64 Registers and Constants

// Processor port data direction register
const byte* PROCPORT_DDR = $00;
// Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
const byte PROCPORT_DDR_MEMORY_MASK = %00000111;

// Processor Port Register controlling RAM/ROM configuration and the datasette
const byte* PROCPORT = $01;
// RAM in all three areas $A000, $D000, $E000
const byte PROCPORT_RAM_ALL         = %00110000;
// RAM in $A000, $E000 I/O in $D000
const byte PROCPORT_RAM_IO          = %00110101;
// RAM in $A000, $E000 CHAR ROM in $D000
const byte PROCPORT_RAM_CHARROM     = %00110001;
// RAM in $A000, I/O in $D000, KERNEL in $E000
const byte PROCPORT_KERNEL_IO       = %00110110;
// BASIC in $A000, I/O in $D000, KERNEL in $E000
const byte PROCPORT_BASIC_KERNEL_IO = %00110111;

const byte* CHARGEN = $d000;

const byte* SPRITES_XPOS = $d000;
const byte* SPRITES_YPOS = $d001;
const byte* SPRITES_XMSB = $d010;
const byte* RASTER = $d012;
const byte* SPRITES_ENABLE = $d015;
const byte* SPRITES_EXPAND_Y = $d017;
const byte* SPRITES_PRIORITY = $d01b;
const byte* SPRITES_MC = $d01c;
const byte* SPRITES_EXPAND_X = $d01d;
const byte* BORDERCOL = $d020;
const byte* BGCOL = $d021;
const byte* BGCOL1 = $d021;
const byte* BGCOL2 = $d022;
const byte* BGCOL3 = $d023;
const byte* BGCOL4 = $d024;
const byte* SPRITES_MC1 = $d025;
const byte* SPRITES_MC2 = $d026;
const byte* SPRITES_COLS = $d027;

const byte* VIC_CONTROL = $d011;
const byte* D011 = $d011;
const byte VIC_RST8 = %10000000;
const byte VIC_ECM =  %01000000;
const byte VIC_BMM =  %00100000;
const byte VIC_DEN =  %00010000;
const byte VIC_RSEL = %00001000;

const byte* VIC_CONTROL2 = $d016;
const byte* D016 = $d016;
const byte VIC_MCM =  %00010000;
const byte VIC_CSEL = %00001000;

const byte* D018 = $d018;
const byte* VIC_MEMORY = $d018;

const byte* COLS = $d800;

// CIA#1 Port A: keyboard matrix columns and joystick #2
const byte* CIA1_PORT_A = $dc00;
// CIA#1 Port B: keyboard matrix rows and joystick #1.
const byte* CIA1_PORT_B = $dc01;
// CIA #1 Port A data direction register.
const byte* CIA1_PORT_A_DDR = $dc02;
// CIA #1 Port B data direction register.
const byte* CIA1_PORT_B_DDR = $dc03;

// CIA#2 Port A: Serial bus, RS-232, VIC memory bank
const byte* CIA2_PORT_A = $dd00;
// CIA#2 Port B: RS-232
const byte* CIA2_PORT_B = $dd01;
// CIA #2 Port A data direction register.
const byte* CIA2_PORT_A_DDR = $dd02;
// CIA #2 Port B data direction register.
const byte* CIA2_PORT_B_DDR = $dd03;

const byte BLACK = $0;
const byte WHITE = $1;
const byte RED = $2;
const byte CYAN = $3;
const byte PURPLE = $4;
const byte GREEN = $5;
const byte BLUE = $6;
const byte YELLOW = $7;
const byte ORANGE = $8;
const byte BROWN = $9;
const byte PINK = $a;
const byte DARK_GREY= $b;
const byte GREY = $c;
const byte LIGHT_GREEN = $d;
const byte LIGHT_BLUE = $e;
const byte LIGHT_GREY = $f;

// Get the value to store into D018 to display a specific screen and charset/bitmap
// Optimized for ASM from (byte)((((word)screen&$3fff)/$40)|(((word)charset&$3fff)/$400));
inline byte toD018(byte* screen, byte* gfx) {
    return (>((((word)screen&$3fff)<<2)))|(((>((word)gfx))>>2)&$f);
}

// Get the value to store into DD00 (CIA 2 port A) to choose a specific VIC bank
// Optimized for ASM from %00000011 ^ (byte)((word)gfx/$4000)
inline byte toDd00(byte* gfx) {
    return %00000011 ^ (>((word)gfx))>>6;
}

// Select a specific VIC graphics bank by setting the CIA 2 port A ($dd00) as needed
inline void vicSelectGfxBank(byte* gfx) {
    *CIA2_PORT_A_DDR = %00000011;
    *CIA2_PORT_A = toDd00(gfx);
}

Importing multiplexer
PARSING src/test/java/dk/camelot64/kickc/test/kc/multiplexer.kc
// A flexible sprite multiplexer routine

// TODO: Let the caller specify the number of sprites (PLEX_COUNT)
// TODO: Optimize plexSort() - currently nxt_idx and nxt_y are stored in the outer loop.

import "c64"
import "sinus"

// The number of sprites in the multiplexer
const byte PLEX_COUNT = 24;

// The x-positions of the multiplexer sprites ($000-$1ff)
word[PLEX_COUNT] PLEX_XPOS;

// The y-positions of the multiplexer sprites.
byte[PLEX_COUNT] PLEX_YPOS;

// The sprite pointers for the multiplexed sprites
byte[PLEX_COUNT] PLEX_PTR;

// The address of the sprite pointers on the current screen (screen+$3f8).
byte* PLEX_SCREEN_PTR = $400+$3f8;

// Indexes of the plex-sprites sorted by sprite y-position. Each call to plexSort() will fix the sorting if changes to the Y-positions have ruined it.
byte[PLEX_COUNT] PLEX_SORTED_IDX;

// Variables controlling the showing of sprites

// The index in the PLEX tables of the next sprite to show
byte plex_show_idx=0;
// The index the next sprite to use for showing (sprites are used round-robin)
byte plex_sprite_idx=0;
// The MSB bit of the next sprite to use for showing
byte plex_sprite_msb=1;

// Initialize the multiplexer data structures
void plexInit(byte* screen) {
    plexSetScreen(screen);
    for(byte i: 0..PLEX_COUNT-1) {
        PLEX_SORTED_IDX[i] = i;
    }
}

// Set the address of the current screen used for setting sprite pointers (at screen+$3f8)
inline void plexSetScreen(byte* screen) {
    PLEX_SCREEN_PTR = screen+$3f8;
}

// Ensure that the indices in PLEX_SORTED_IDX is sorted based on the y-positions in PLEX_YPOS
// Assumes that the positions are nearly sorted already (as each sprite just moves a bit)
// Uses an insertion sort:
// 1. Moves a marker (m) from the start to  end of the array. Every time the marker moves forward all elements before the marker are sorted correctly.
// 2a. If the next element after the marker is larger that the current element
//     the marker can be moved forwards (as the sorting is correct).
// 2b. If the next element after the marker is smaller than the current element:
//     elements before the marker are shifted right one at a time until encountering one smaller than the current one.
//      It is then inserted at the spot. Now the marker can move forward.
void plexSort() {
    for(byte m: 0..PLEX_COUNT-2) {
        byte nxt_idx = PLEX_SORTED_IDX[m+1];
        byte nxt_y = PLEX_YPOS[nxt_idx];
        if(nxt_y<PLEX_YPOS[PLEX_SORTED_IDX[m]]) {
            // Shift values until we encounter a value smaller than nxt_y
            byte s = m;
            do {
                PLEX_SORTED_IDX[s+1] = PLEX_SORTED_IDX[s];
                s--;
            } while((s!=$ff) && (nxt_y<PLEX_YPOS[PLEX_SORTED_IDX[s]]));
            // store the mark at the found position
            s++;
            PLEX_SORTED_IDX[s] = nxt_idx;
        }
    }
    // Prepare for showing the sprites
    plex_show_idx = 0;
    plex_sprite_idx = 0;
    plex_sprite_msb = 1;
}

// Show the next sprite.
// plexSort() prepares showing the sprites
void plexShowSprite() {
    byte plex_sprite_idx2 = plex_sprite_idx<<1;
    SPRITES_YPOS[plex_sprite_idx2] = PLEX_YPOS[PLEX_SORTED_IDX[plex_show_idx]];
    PLEX_SCREEN_PTR[plex_sprite_idx] = PLEX_PTR[PLEX_SORTED_IDX[plex_show_idx]];
    byte xpos_idx = PLEX_SORTED_IDX[plex_show_idx]<<1;
    SPRITES_XPOS[plex_sprite_idx2] = <PLEX_XPOS[xpos_idx];
    if(>PLEX_XPOS[xpos_idx]!=0) {
        *SPRITES_XMSB |= plex_sprite_msb;
    } else {
        *SPRITES_XMSB &= ($ff^plex_sprite_msb);
    }
    plex_sprite_idx = (plex_sprite_idx+1)&7;
    plex_show_idx++;
    plex_sprite_msb <<=1;
    if(plex_sprite_msb==0) {
        plex_sprite_msb = 1;
    }
}

// Get the y-position of the next sprite to show
inline byte plexShowNextYpos() {
    return PLEX_YPOS[PLEX_SORTED_IDX[plex_show_idx]];
}
Importing c64
Importing sinus
PARSING src/test/java/dk/camelot64/kickc/test/kc/sinus.kc
// Sinus Generator functions using only multiplication, addition and bit shifting
// Uses a single division for converting the wavelength to a reciprocal.
// Generates sinus using the series sin(x) = x - x^/3! + x^-5! - x^7/7! ...
// Uses the approximation sin(x) = x - x^/6 + x^/128
// Optimization possibility: Use symmetries when generating sinustables. wavelength%2==0 -> mirror symmetry over PI, wavelength%4==0 -> mirror symmetry over PI/2.

import "division.kc"
import "multiply.kc"

// PI*2 in u[4.28] format
const dword PI2_u4f28 = $6487ed51;
// PI in u[4.28] format
const dword PI_u4f28 = $3243f6a9;
// PI/2 in u[4.28] format
const dword PI_HALF_u4f28 = $1921FB54;

// PI*2 in u[4.12] format
const word PI2_u4f12 = $6488;
// PI in u[4.12] format
const word PI_u4f12 = $3244;
// PI/2 in u[4.12] format
const word PI_HALF_u4f12 = $1922;

// Generate signed (large) word sinus table - on the full -$7fff - $7fff range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
void sin16s_gen(signed word* sintab, word wavelength) {
    // u[4.28] step = PI*2/wavelength
    dword step = div32u16u(PI2_u4f28, wavelength); // u[4.28]
    // Iterate over the table
    dword x = 0; // u[4.28]
    for( word i=0; i<wavelength; i++) {
        *sintab = sin16s(x);
        sintab = sintab + 2;
        x = x + step;
    }
}

// Generate signed word sinus table - with values in the range min-max.
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
void sin16s_gen2(signed word* sintab, word wavelength, signed word min, signed word max) {
    signed word ampl = max-min;
    signed word offs = min + ampl>>1; // ampl is always positive so shifting left does not alter the sign
    // u[4.28] step = PI*2/wavelength
    dword step = div32u16u(PI2_u4f28, wavelength); // u[4.28]
    // Iterate over the table
    dword x = 0; // u[4.28]
    for( word i=0; i<wavelength; i++) {
        *sintab = offs + (signed word)>mul16s(sin16s(x), ampl); // The signed sin() has values [-7fff;7fff] = [-1/2 ; 1/2], so ampl*sin has the right amplitude
        sintab = sintab + 2;
        x = x + step;
    }
}

// Generate signed byte sinus table - on the full -$7f - $7f range
// sintab - the table to generate into
// wavelength - the number of sinus points in a total sinus wavelength (the size of the table)
void sin8s_gen(signed byte* sintab, word wavelength) {
    // u[4.28] step = PI*2/wavelength
    word step = div16u(PI2_u4f12, wavelength); // u[4.12]
    // Iterate over the table
    word x = 0; // u[4.12]
    for( word i=0; i<wavelength; i++) {
        *sintab++ = sin8s(x);
        x = x + step;
    }
}

// Calculate signed word sinus sin(x)
// x: unsigned dword input u[4.28] in the interval $00000000 - PI2_u4f28
// result: signed word sin(x) s[0.15] - using the full range  -$7fff - $7fff
signed word sin16s(dword x) {
    // Move x1 into the range 0-PI/2 using sinus mirror symmetries
    byte isUpper = 0;
    if(x >= PI_u4f28 ) {
        x = x - PI_u4f28;
        isUpper = 1;
    }
    if(x >= PI_HALF_u4f28 ) {
        x = PI_u4f28 - x;
    }
    // sinx = x - x^3/6 + x5/128;
    word x1 = >x<<3; // u[1.15]
    word x2 = mulu16_sel(x1, x1, 0); // u[2.14] x^2
    word x3 = mulu16_sel(x2, x1, 1); // u[2.14] x^3
    word x3_6 = mulu16_sel(x3, $10000/6, 1);  // u[1.15] x^3/6;
    word usinx = x1 - x3_6; // u[1.15] x - x^3/6
    word x4 = mulu16_sel(x3, x1, 0); // u[3.13] x^4
    word x5 = mulu16_sel(x4, x1, 0); // u[4.12] x^5
    word x5_128 = x5>>4; // // u[1.15] x^5/128 -- much more efficient than mul_u16_sel(x5, $10000/128, 3);
    usinx = usinx + x5_128; // u[1.15] (first bit is always zero)
    signed word sinx = (signed word)usinx; // s[0.15]
    if(isUpper!=0) {
        sinx = -(signed word)usinx; // s[0.15];
     }
     return sinx;
}

// Calculate signed byte sinus sin(x)
// x: unsigned word input u[4.12] in the interval $0000 - PI2_u4f12
// result: signed byte sin(x) s[0.7] - using the full range  -$7f - $7f
signed byte sin8s(word x) {
    // Move x1 into the range 0-PI/2 using sinus mirror symmetries
    byte isUpper = 0;
    if(x >= PI_u4f12 ) {
        x = x - PI_u4f12;
        isUpper = 1;
    }
    if(x >= PI_HALF_u4f12 ) {
        x = PI_u4f12 - x;
    }
    // sinx = x - x^3/6 + x5/128;
    byte x1 = >x<<3; // u[1.7]
    byte x2 = mulu8_sel(x1, x1, 0); // u[2.6] x^2
    byte x3 = mulu8_sel(x2, x1, 1); // u[2.6] x^3
    const byte DIV_6 = $2b; // u[0.7] - $2a.aa rounded to $2b
    byte x3_6 = mulu8_sel(x3, DIV_6, 1);  // u[1.7] x^3/6;
    byte usinx = x1 - x3_6; // u[1.7] x - x^3/6
    byte x4 = mulu8_sel(x3, x1, 0); // u[3.5] x^4
    byte x5 = mulu8_sel(x4, x1, 0); // u[4.4] x^5
    byte x5_128 = x5>>4; // // u[1.7] x^5/128 -- much more efficient than mul_u16_sel(x5, $10000/128, 3);
    usinx = usinx + x5_128; // u[1.7] (first bit is always zero)
    if(usinx>=128) { usinx--; } // rounding may occasionally result in $80 - lower into range ($00-$7f)
    signed byte sinx = (signed byte)usinx; // s[0.7]
    if(isUpper!=0) {
        sinx = -(signed byte)usinx; // s[0.7];
    }
    return sinx;
}

// Calculate val*val for two unsigned word values - the result is 16 selected bits of the 32-bit result.
// The select parameter indicates how many of the highest bits of the 32-bit result to skip
word mulu16_sel(word v1, word v2, byte select) {
    return >mul16u(v1, v2)<<select;
}

// Calculate val*val for two unsigned byte values - the result is 8 selected bits of the 16-bit result.
// The select parameter indicates how many of the highest bits of the 16-bit result to skip
byte mulu8_sel(byte v1, byte v2, byte select) {
    return >mul8u(v1, v2)<<select;
}

Importing division.kc
PARSING src/test/java/dk/camelot64/kickc/test/kc/division.kc
// Simple binary division implementation
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5

// Remainder after signed 8 bit division
byte rem8u =0;

// Performs division on two 8 bit unsigned bytes
// Returns dividend/divisor.
// The remainder will be set into the global variable rem8u
// Implemented using simple binary division
byte div8u(byte dividend, byte divisor) {
    return divr8u(dividend, divisor, 0);
}

// Performs division on two 8 bit unsigned bytes and an initial remainder
// Returns dividend/divisor.
// The final remainder will be set into the global variable rem8u
// Implemented using simple binary division
byte divr8u(byte dividend, byte divisor, byte rem) {
    byte quotient = 0;
    for( byte i : 0..7) {
        rem = rem << 1;
        if( (dividend & $80) != 0 ) {
            rem = rem | 1;
        }
        dividend = dividend << 1;
        quotient = quotient << 1;
        if(rem>=divisor) {
            quotient++;
            rem = rem - divisor;
        }
    }
    rem8u = rem;
    return quotient;
}

// Remainder after unsigned 16-bit division
word rem16u = 0;

// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
word divr16u(word dividend, word divisor, word rem) {
    word quotient = 0;
    for( byte i : 0..15) {
        rem = rem << 1;
        if( (>dividend & $80) != 0 ) {
            rem = rem | 1;
        }
        dividend = dividend << 1;
        quotient = quotient << 1;
        if(rem>=divisor) {
            quotient++;
            rem = rem - divisor;
        }
    }
    rem16u = rem;
    return quotient;
}

// Performs division on two 16 bit unsigned words
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
word div16u(word dividend, word divisor) {
    return divr16u(dividend, divisor, 0);
}

// Divide unsigned 32-bit dword dividend with a 16-bit word divisor
// The 16-bit word remainder can be found in rem16u after the division
dword div32u16u(dword dividend, word divisor) {
  word quotient_hi = divr16u(>dividend, divisor, 0);
  word quotient_lo = divr16u(<dividend, divisor, rem16u);
  dword quotient = { quotient_hi, quotient_lo};
  return quotient;
}

// Remainder after signed 8 bit division
signed byte rem8s = 0;

// Perform division on two signed 8-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem8s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
signed byte div8s(signed byte dividend, signed byte divisor) {
    byte neg = 0;
    byte dividendu = 0;
    if(dividend<0) {
      dividendu = (byte)-dividend;
      neg = 1;
    } else {
      dividendu = (byte)dividend;
    }
    byte divisoru = 0;
    if(divisor<0) {
        divisoru = (byte)-divisor;
        neg = neg ^ 1;
    } else {
        divisoru = (byte)divisor;
    }
    byte resultu = div8u(dividendu, divisoru);
    if(neg==0) {
        rem8s = (signed byte)rem8u;
        return (signed byte)resultu;
    } else {
        rem8s = -(signed byte)rem8u;
        return -(signed byte)resultu;
    }
}

// Remainder after signed 16 bit division
signed word rem16s = 0;

// Perform division on two signed 16-bit numbers with an initial remainder.
// Returns dividend/divisor. The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
signed word divr16s(signed word dividend, signed word divisor, signed word rem) {
    byte neg = 0;
    word dividendu = 0;
    word remu = 0;
    if(dividend<0 || rem<0) {
      dividendu = (word)-dividend;
      remu = (word)-rem;
      neg = 1;
    } else {
      dividendu = (word)dividend;
      remu = (word)rem;
    }
    word divisoru = 0;
    if(divisor<0) {
        divisoru = (word)-divisor;
        neg = neg ^ 1;
    } else {
        divisoru = (word)divisor;
    }
    word resultu = divr16u(dividendu, divisoru, remu);
    if(neg==0) {
        rem16s = (signed word)rem16u;
        return (signed word)resultu;
    } else {
        rem16s = -(signed word)rem16u;
        return -(signed word)resultu;
    }
}

// Perform division on two signed 16-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
signed word div16s(signed word dividend, signed word divisor) {
    return divr16s(dividend, divisor, 0);
}

Adding pre/post-modifier (byte) divr8u::quotient ← ++ (byte) divr8u::quotient
Adding pre/post-modifier (word) divr16u::quotient ← ++ (word) divr16u::quotient
Importing multiply.kc
PARSING src/test/java/dk/camelot64/kickc/test/kc/multiply.kc
// Simple binary multiplication implementation

// Perform binary multiplication of two unsigned 8-bit bytes into a 16-bit unsigned word
word mul8u(byte a, byte b) {
    word res = 0;
    word mb = b;
    while(a!=0) {
        if( (a&1) != 0) {
            res = res + mb;
        }
        a = a>>1;
        mb = mb<<1;
    }
    return res;
}

// Multiply of two signed bytes to a signed word
// Fixes offsets introduced by using unsigned multiplication
signed word mul8s(signed byte a, signed byte b) {
    word m = mul8u((byte)a, (byte) b);
    if(a<0) {
        >m = (>m)-(byte)b;
    }
    if(b<0) {
        >m = (>m)-(byte)a;
    }
    return (signed word)m;
}

// Multiply a signed byte and an unsigned byte (into a signed word)
// Fixes offsets introduced by using unsigned multiplication
signed word mul8su(signed byte a, byte b) {
    word m = mul8u((byte)a, (byte) b);
    if(a<0) {
        >m = (>m)-(byte)b;
    }
    return (signed word)m;
}

// Perform binary multiplication of two unsigned 16-bit words into a 32-bit unsigned double word
dword mul16u(word a, word b) {
    dword res = 0;
    dword mb = b;
    while(a!=0) {
        if( (a&1) != 0) {
            res = res + mb;
        }
        a = a>>1;
        mb = mb<<1;
    }
    return res;
}

// Multiply of two signed words to a signed double word
// Fixes offsets introduced by using unsigned multiplication
signed dword mul16s(signed word a, signed word b) {
    dword m = mul16u((word)a, (word) b);
    if(a<0) {
        >m = (>m)-(word)b;
    }
    if(b<0) {
        >m = (>m)-(word)a;
    }
    return (signed dword)m;
}

Adding pre/post-modifier (word) sin16s_gen::i ← ++ (word) sin16s_gen::i
Adding pre/post-modifier (word) sin16s_gen2::i ← ++ (word) sin16s_gen2::i
Adding pre/post-modifier (signed byte*) sin8s_gen::sintab ← ++ (signed byte*) sin8s_gen::sintab
Adding pre/post-modifier (word) sin8s_gen::i ← ++ (word) sin8s_gen::i
Adding pre/post-modifier (byte) sin8s::usinx ← -- (byte) sin8s::usinx
Adding pre/post-modifier (byte) plexSort::s ← -- (byte) plexSort::s
Adding pre/post-modifier (byte) plexSort::s ← ++ (byte) plexSort::s
Adding pre/post-modifier (byte) plex_show_idx ← ++ (byte) plex_show_idx
Added resource src/test/java/dk/camelot64/kickc/test/kc/balloon.png
Adding pre/post-modifier *((byte*) BORDERCOL) ← ++ *((byte*) BORDERCOL)
Adding pre/post-modifier *((byte*) BORDERCOL) ← ++ *((byte*) BORDERCOL)
Adding pre/post-modifier *((byte*) BORDERCOL) ← ++ *((byte*) BORDERCOL)
Adding pre/post-modifier *((byte*) BORDERCOL) ← ++ *((byte*) BORDERCOL)
SYMBOLS
(word/signed word/dword/signed dword~) $0
(label) @1
(label) @10
(label) @11
(label) @12
(label) @13
(label) @14
(label) @15
(label) @16
(label) @17
(label) @18
(label) @19
(label) @2
(label) @20
(label) @21
(label) @22
(label) @23
(label) @24
(label) @25
(label) @26
(label) @27
(label) @28
(label) @29
(label) @3
(label) @30
(label) @31
(label) @4
(label) @5
(label) @6
(label) @7
(label) @8
(label) @9
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL1
(byte*) BGCOL2
(byte*) BGCOL3
(byte*) BGCOL4
(byte) BLACK
(byte) BLUE
(byte*) BORDERCOL
(byte) BROWN
(byte*) CHARGEN
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B_DDR
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_B
(byte*) CIA2_PORT_B_DDR
(byte*) COLS
(byte) CYAN
(byte*) D011
(byte*) D016
(byte*) D018
(byte) DARK_GREY
(byte) GREEN
(byte) GREY
(byte) LIGHT_BLUE
(byte) LIGHT_GREEN
(byte) LIGHT_GREY
(byte) ORANGE
(word) PI2_u4f12
(dword) PI2_u4f28
(byte) PINK
(word) PI_HALF_u4f12
(dword) PI_HALF_u4f28
(word) PI_u4f12
(dword) PI_u4f28
(byte) PLEX_COUNT
(byte[PLEX_COUNT]) PLEX_PTR
(byte*) PLEX_SCREEN_PTR
(byte[PLEX_COUNT]) PLEX_SORTED_IDX
(word[PLEX_COUNT]) PLEX_XPOS
(byte[PLEX_COUNT]) PLEX_YPOS
(byte*) PROCPORT
(byte) PROCPORT_BASIC_KERNEL_IO
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_KERNEL_IO
(byte) PROCPORT_RAM_ALL
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_IO
(byte) PURPLE
(byte*) RASTER
(byte) RED
(byte*) SCREEN
(byte*) SPRITE
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_EXPAND_X
(byte*) SPRITES_EXPAND_Y
(byte*) SPRITES_MC
(byte*) SPRITES_MC1
(byte*) SPRITES_MC2
(byte*) SPRITES_PRIORITY
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(byte) VIC_BMM
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL2
(byte) VIC_CSEL
(byte) VIC_DEN
(byte) VIC_ECM
(byte) VIC_MCM
(byte*) VIC_MEMORY
(byte) VIC_RSEL
(byte) VIC_RST8
(byte) WHITE
(byte) YELLOW
(byte*) YSIN
(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
(signed word~) div16s::$0
(label) div16s::@1
(label) div16s::@return
(signed word) div16s::dividend
(signed word) div16s::divisor
(signed word) div16s::return
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word~) div16u::$0
(label) div16u::@1
(label) div16u::@return
(word) div16u::dividend
(word) div16u::divisor
(word) div16u::return
(dword()) div32u16u((dword) div32u16u::dividend , (word) div32u16u::divisor)
(word~) div32u16u::$0
(word~) div32u16u::$1
(word~) div32u16u::$2
(word~) div32u16u::$3
(label) div32u16u::@1
(label) div32u16u::@return
(dword) div32u16u::dividend
(word) div32u16u::divisor
(dword) div32u16u::quotient
(word) div32u16u::quotient_hi
(word) div32u16u::quotient_lo
(dword) div32u16u::return
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(bool~) div8s::$0
(byte~) div8s::$1
(bool~) div8s::$10
(signed byte~) div8s::$11
(signed byte~) div8s::$12
(signed byte~) div8s::$13
(signed byte~) div8s::$14
(signed byte~) div8s::$15
(signed byte~) div8s::$16
(signed byte~) div8s::$2
(byte~) div8s::$3
(bool~) div8s::$4
(byte~) div8s::$5
(signed byte~) div8s::$6
(byte~) div8s::$7
(byte/word/dword~) div8s::$8
(byte~) div8s::$9
(label) div8s::@1
(label) div8s::@10
(label) div8s::@11
(label) div8s::@12
(label) div8s::@13
(label) div8s::@14
(label) div8s::@2
(label) div8s::@3
(label) div8s::@4
(label) div8s::@5
(label) div8s::@6
(label) div8s::@7
(label) div8s::@8
(label) div8s::@9
(label) div8s::@return
(signed byte) div8s::dividend
(byte) div8s::dividendu
(signed byte) div8s::divisor
(byte) div8s::divisoru
(byte) div8s::neg
(byte) div8s::resultu
(signed byte) div8s::return
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(byte~) div8u::$0
(label) div8u::@1
(label) div8u::@return
(byte) div8u::dividend
(byte) div8u::divisor
(byte) div8u::return
(signed word()) divr16s((signed word) divr16s::dividend , (signed word) divr16s::divisor , (signed word) divr16s::rem)
(bool~) divr16s::$0
(bool~) divr16s::$1
(word~) divr16s::$10
(signed word~) divr16s::$11
(word~) divr16s::$12
(byte/word/dword~) divr16s::$13
(word~) divr16s::$14
(bool~) divr16s::$15
(signed word~) divr16s::$16
(signed word~) divr16s::$17
(signed word~) divr16s::$18
(signed word~) divr16s::$19
(bool~) divr16s::$2
(signed word~) divr16s::$20
(signed word~) divr16s::$21
(word~) divr16s::$3
(word~) divr16s::$4
(signed word~) divr16s::$5
(word~) divr16s::$6
(signed word~) divr16s::$7
(word~) divr16s::$8
(bool~) divr16s::$9
(label) divr16s::@1
(label) divr16s::@10
(label) divr16s::@11
(label) divr16s::@12
(label) divr16s::@13
(label) divr16s::@14
(label) divr16s::@2
(label) divr16s::@3
(label) divr16s::@4
(label) divr16s::@5
(label) divr16s::@6
(label) divr16s::@7
(label) divr16s::@8
(label) divr16s::@9
(label) divr16s::@return
(signed word) divr16s::dividend
(word) divr16s::dividendu
(signed word) divr16s::divisor
(word) divr16s::divisoru
(byte) divr16s::neg
(signed word) divr16s::rem
(word) divr16s::remu
(word) divr16s::resultu
(signed word) divr16s::return
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(word~) divr16u::$0
(byte~) divr16u::$1
(word~) divr16u::$10
(bool~) divr16u::$11
(byte~) divr16u::$2
(bool~) divr16u::$3
(bool~) divr16u::$4
(word/dword~) divr16u::$5
(word~) divr16u::$6
(word~) divr16u::$7
(bool~) divr16u::$8
(bool~) divr16u::$9
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@7
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::divisor
(byte) divr16u::i
(word) divr16u::quotient
(word) divr16u::rem
(word) divr16u::return
(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
(byte~) divr8u::$0
(byte~) divr8u::$1
(bool~) divr8u::$10
(bool~) divr8u::$2
(bool~) divr8u::$3
(byte/word/dword~) divr8u::$4
(byte~) divr8u::$5
(byte~) divr8u::$6
(bool~) divr8u::$7
(bool~) divr8u::$8
(byte~) divr8u::$9
(label) divr8u::@1
(label) divr8u::@2
(label) divr8u::@3
(label) divr8u::@4
(label) divr8u::@5
(label) divr8u::@6
(label) divr8u::@7
(label) divr8u::@return
(byte) divr8u::dividend
(byte) divr8u::divisor
(byte) divr8u::i
(byte) divr8u::quotient
(byte) divr8u::rem
(byte) divr8u::return
(void()) init()
(byte~) init::$0
(byte/word/dword~) init::$1
(void~) init::$2
(byte/signed word/word/dword/signed dword~) init::$3
(byte*~) init::$4
(byte~) init::$5
(byte~) init::$6
(bool~) init::$7
(bool~) init::$8
(label) init::@1
(label) init::@2
(label) init::@3
(label) init::@4
(label) init::@return
(byte) init::ss
(byte) init::sx
(word) init::xp
(void()) loop()
(bool~) loop::$0
(byte/signed word/word/dword/signed dword~) loop::$1
(void~) loop::$10
(bool~) loop::$11
(bool~) loop::$2
(void~) loop::$3
(void~) loop::$4
(bool~) loop::$5
(byte/signed word/word/dword/signed dword~) loop::$6
(byte~) loop::$7
(byte/signed word/word/dword/signed dword~) loop::$8
(bool~) loop::$9
(label) loop::@1
(label) loop::@10
(label) loop::@11
(label) loop::@12
(label) loop::@13
(label) loop::@14
(label) loop::@15
(label) loop::@16
(label) loop::@17
(label) loop::@18
(label) loop::@19
(label) loop::@2
(label) loop::@20
(label) loop::@21
(label) loop::@22
(label) loop::@23
(label) loop::@24
(label) loop::@3
(label) loop::@4
(label) loop::@5
(label) loop::@6
(label) loop::@7
(label) loop::@8
(label) loop::@9
(label) loop::@return
(byte) loop::rasterY
(byte) loop::sin_idx
(byte) loop::ss
(byte) loop::sy
(byte) loop::y_idx
(void()) main()
(void~) main::$0
(void~) main::$1
(label) main::@return
(signed dword()) mul16s((signed word) mul16s::a , (signed word) mul16s::b)
(word~) mul16s::$0
(word~) mul16s::$1
(bool~) mul16s::$10
(word~) mul16s::$11
(word~) mul16s::$12
(word~) mul16s::$13
(word~) mul16s::$14
(signed dword~) mul16s::$15
(dword~) mul16s::$2
(bool~) mul16s::$3
(bool~) mul16s::$4
(word~) mul16s::$5
(word~) mul16s::$6
(word~) mul16s::$7
(word~) mul16s::$8
(bool~) mul16s::$9
(label) mul16s::@1
(label) mul16s::@2
(label) mul16s::@3
(label) mul16s::@4
(label) mul16s::@5
(label) mul16s::@return
(signed word) mul16s::a
(signed word) mul16s::b
(dword) mul16s::m
(signed dword) mul16s::return
(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
(bool~) mul16u::$0
(byte/word~) mul16u::$1
(bool~) mul16u::$2
(bool~) mul16u::$3
(dword~) mul16u::$4
(word~) mul16u::$5
(dword~) mul16u::$6
(label) mul16u::@1
(label) mul16u::@2
(label) mul16u::@3
(label) mul16u::@4
(label) mul16u::@5
(label) mul16u::@6
(label) mul16u::@7
(label) mul16u::@8
(label) mul16u::@9
(label) mul16u::@return
(word) mul16u::a
(word) mul16u::b
(dword) mul16u::mb
(dword) mul16u::res
(dword) mul16u::return
(signed word()) mul8s((signed byte) mul8s::a , (signed byte) mul8s::b)
(byte~) mul8s::$0
(byte~) mul8s::$1
(bool~) mul8s::$10
(byte~) mul8s::$11
(byte~) mul8s::$12
(byte~) mul8s::$13
(byte~) mul8s::$14
(signed word~) mul8s::$15
(word~) mul8s::$2
(bool~) mul8s::$3
(bool~) mul8s::$4
(byte~) mul8s::$5
(byte~) mul8s::$6
(byte~) mul8s::$7
(byte~) mul8s::$8
(bool~) mul8s::$9
(label) mul8s::@1
(label) mul8s::@2
(label) mul8s::@3
(label) mul8s::@4
(label) mul8s::@5
(label) mul8s::@return
(signed byte) mul8s::a
(signed byte) mul8s::b
(word) mul8s::m
(signed word) mul8s::return
(signed word()) mul8su((signed byte) mul8su::a , (byte) mul8su::b)
(byte~) mul8su::$0
(byte~) mul8su::$1
(word~) mul8su::$2
(bool~) mul8su::$3
(bool~) mul8su::$4
(byte~) mul8su::$5
(byte~) mul8su::$6
(byte~) mul8su::$7
(byte~) mul8su::$8
(signed word~) mul8su::$9
(label) mul8su::@1
(label) mul8su::@2
(label) mul8su::@3
(label) mul8su::@return
(signed byte) mul8su::a
(byte) mul8su::b
(word) mul8su::m
(signed word) mul8su::return
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(bool~) mul8u::$0
(byte~) mul8u::$1
(bool~) mul8u::$2
(bool~) mul8u::$3
(word~) mul8u::$4
(byte~) mul8u::$5
(word~) mul8u::$6
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@5
(label) mul8u::@6
(label) mul8u::@7
(label) mul8u::@8
(label) mul8u::@9
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::b
(word) mul8u::mb
(word) mul8u::res
(word) mul8u::return
(word()) mulu16_sel((word) mulu16_sel::v1 , (word) mulu16_sel::v2 , (byte) mulu16_sel::select)
(dword~) mulu16_sel::$0
(dword~) mulu16_sel::$1
(word~) mulu16_sel::$2
(label) mulu16_sel::@1
(label) mulu16_sel::@return
(word) mulu16_sel::return
(byte) mulu16_sel::select
(word) mulu16_sel::v1
(word) mulu16_sel::v2
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0
(word~) mulu8_sel::$1
(byte~) mulu8_sel::$2
(label) mulu8_sel::@1
(label) mulu8_sel::@return
(byte) mulu8_sel::return
(byte) mulu8_sel::select
(byte) mulu8_sel::v1
(byte) mulu8_sel::v2
(void()) plexInit((byte*) plexInit::screen)
(void~) plexInit::$0
(byte/signed word/word/dword/signed dword~) plexInit::$1
(bool~) plexInit::$2
(label) plexInit::@1
(label) plexInit::@2
(label) plexInit::@return
(byte) plexInit::i
(byte*) plexInit::screen
inline (void()) plexSetScreen((byte*) plexSetScreen::screen)
(byte*~) plexSetScreen::$0
(label) plexSetScreen::@return
(byte*) plexSetScreen::screen
inline (byte()) plexShowNextYpos()
(label) plexShowNextYpos::@1
(label) plexShowNextYpos::@return
(byte) plexShowNextYpos::return
(void()) plexShowSprite()
(byte~) plexShowSprite::$0
(byte~) plexShowSprite::$1
(byte~) plexShowSprite::$2
(byte~) plexShowSprite::$3
(bool~) plexShowSprite::$4
(byte/word/dword~) plexShowSprite::$5
(byte/signed word/word/dword/signed dword~) plexShowSprite::$6
(byte/word/dword~) plexShowSprite::$7
(bool~) plexShowSprite::$8
(bool~) plexShowSprite::$9
(label) plexShowSprite::@1
(label) plexShowSprite::@2
(label) plexShowSprite::@3
(label) plexShowSprite::@4
(label) plexShowSprite::@5
(label) plexShowSprite::@6
(label) plexShowSprite::@return
(byte) plexShowSprite::plex_sprite_idx2
(byte) plexShowSprite::xpos_idx
(void()) plexSort()
(byte/signed word/word/dword/signed dword~) plexSort::$0
(byte/signed word/word/dword/signed dword~) plexSort::$1
(bool~) plexSort::$2
(bool~) plexSort::$3
(byte/signed word/word/dword/signed dword~) plexSort::$4
(bool~) plexSort::$5
(bool~) plexSort::$6
(bool~) plexSort::$7
(bool~) plexSort::$8
(label) plexSort::@1
(label) plexSort::@2
(label) plexSort::@3
(label) plexSort::@4
(label) plexSort::@5
(label) plexSort::@6
(label) plexSort::@return
(byte) plexSort::m
(byte) plexSort::nxt_idx
(byte) plexSort::nxt_y
(byte) plexSort::s
(byte) plex_show_idx
(byte) plex_sprite_idx
(byte) plex_sprite_msb
(signed word) rem16s
(word) rem16u
(signed byte) rem8s
(byte) rem8u
(signed word()) sin16s((dword) sin16s::x)
(bool~) sin16s::$0
(bool~) sin16s::$1
(word/signed word/dword/signed dword~) sin16s::$10
(word~) sin16s::$11
(word~) sin16s::$12
(word~) sin16s::$13
(word~) sin16s::$14
(word~) sin16s::$15
(word~) sin16s::$16
(signed word~) sin16s::$17
(bool~) sin16s::$18
(bool~) sin16s::$19
(dword~) sin16s::$2
(signed word~) sin16s::$20
(signed word~) sin16s::$21
(bool~) sin16s::$3
(bool~) sin16s::$4
(dword~) sin16s::$5
(dword~) sin16s::$6
(word~) sin16s::$7
(word~) sin16s::$8
(word~) sin16s::$9
(label) sin16s::@1
(label) sin16s::@2
(label) sin16s::@3
(label) sin16s::@4
(label) sin16s::@5
(label) sin16s::@6
(label) sin16s::@7
(label) sin16s::@return
(byte) sin16s::isUpper
(signed word) sin16s::return
(signed word) sin16s::sinx
(word) sin16s::usinx
(dword) sin16s::x
(word) sin16s::x1
(word) sin16s::x2
(word) sin16s::x3
(word) sin16s::x3_6
(word) sin16s::x4
(word) sin16s::x5
(word) sin16s::x5_128
(void()) sin16s_gen((signed word*) sin16s_gen::sintab , (word) sin16s_gen::wavelength)
(dword~) sin16s_gen::$0
(signed word~) sin16s_gen::$1
(signed word*~) sin16s_gen::$2
(dword~) sin16s_gen::$3
(bool~) sin16s_gen::$4
(label) sin16s_gen::@1
(label) sin16s_gen::@2
(label) sin16s_gen::@return
(word) sin16s_gen::i
(signed word*) sin16s_gen::sintab
(dword) sin16s_gen::step
(word) sin16s_gen::wavelength
(dword) sin16s_gen::x
(void()) sin16s_gen2((signed word*) sin16s_gen2::sintab , (word) sin16s_gen2::wavelength , (signed word) sin16s_gen2::min , (signed word) sin16s_gen2::max)
(signed word~) sin16s_gen2::$0
(signed word~) sin16s_gen2::$1
(dword~) sin16s_gen2::$10
(bool~) sin16s_gen2::$11
(signed word~) sin16s_gen2::$2
(dword~) sin16s_gen2::$3
(signed word~) sin16s_gen2::$4
(signed dword~) sin16s_gen2::$5
(word~) sin16s_gen2::$6
(signed word~) sin16s_gen2::$7
(signed word~) sin16s_gen2::$8
(signed word*~) sin16s_gen2::$9
(label) sin16s_gen2::@1
(label) sin16s_gen2::@2
(label) sin16s_gen2::@return
(signed word) sin16s_gen2::ampl
(word) sin16s_gen2::i
(signed word) sin16s_gen2::max
(signed word) sin16s_gen2::min
(signed word) sin16s_gen2::offs
(signed word*) sin16s_gen2::sintab
(dword) sin16s_gen2::step
(word) sin16s_gen2::wavelength
(dword) sin16s_gen2::x
(signed byte()) sin8s((word) sin8s::x)
(bool~) sin8s::$0
(bool~) sin8s::$1
(byte~) sin8s::$10
(byte~) sin8s::$11
(byte~) sin8s::$12
(byte~) sin8s::$13
(byte~) sin8s::$14
(byte~) sin8s::$15
(bool~) sin8s::$16
(bool~) sin8s::$17
(signed byte~) sin8s::$18
(bool~) sin8s::$19
(word~) sin8s::$2
(bool~) sin8s::$20
(signed byte~) sin8s::$21
(signed byte~) sin8s::$22
(bool~) sin8s::$3
(bool~) sin8s::$4
(word~) sin8s::$5
(word~) sin8s::$6
(byte~) sin8s::$7
(byte~) sin8s::$8
(byte~) sin8s::$9
(label) sin8s::@1
(label) sin8s::@2
(label) sin8s::@3
(label) sin8s::@4
(label) sin8s::@5
(label) sin8s::@6
(label) sin8s::@7
(label) sin8s::@8
(label) sin8s::@9
(label) sin8s::@return
(byte) sin8s::DIV_6
(byte) sin8s::isUpper
(signed byte) sin8s::return
(signed byte) sin8s::sinx
(byte) sin8s::usinx
(word) sin8s::x
(byte) sin8s::x1
(byte) sin8s::x2
(byte) sin8s::x3
(byte) sin8s::x3_6
(byte) sin8s::x4
(byte) sin8s::x5
(byte) sin8s::x5_128
(void()) sin8s_gen((signed byte*) sin8s_gen::sintab , (word) sin8s_gen::wavelength)
(word~) sin8s_gen::$0
(signed byte~) sin8s_gen::$1
(word~) sin8s_gen::$2
(bool~) sin8s_gen::$3
(label) sin8s_gen::@1
(label) sin8s_gen::@2
(label) sin8s_gen::@return
(word) sin8s_gen::i
(signed byte*) sin8s_gen::sintab
(word) sin8s_gen::step
(word) sin8s_gen::wavelength
(word) sin8s_gen::x
inline (byte()) toD018((byte*) toD018::screen , (byte*) toD018::gfx)
(word~) toD018::$0
(word~) toD018::$1
(word~) toD018::$2
(byte~) toD018::$3
(word~) toD018::$4
(byte~) toD018::$5
(byte~) toD018::$6
(byte~) toD018::$7
(byte~) toD018::$8
(label) toD018::@1
(label) toD018::@return
(byte*) toD018::gfx
(byte) toD018::return
(byte*) toD018::screen
inline (byte()) toDd00((byte*) toDd00::gfx)
(word~) toDd00::$0
(byte~) toDd00::$1
(byte~) toDd00::$2
(byte/word/dword~) toDd00::$3
(label) toDd00::@1
(label) toDd00::@return
(byte*) toDd00::gfx
(byte) toDd00::return
inline (void()) vicSelectGfxBank((byte*) vicSelectGfxBank::gfx)
(byte~) vicSelectGfxBank::$0
(label) vicSelectGfxBank::@return
(byte*) vicSelectGfxBank::gfx

Fixing lo/hi-lvalue with new tmpVar mul8s::$16 mul8s::$16 ← mul8s::$8
Fixing lo/hi-lvalue with new tmpVar mul8s::$17 mul8s::$17 ← mul8s::$14
Fixing lo/hi-lvalue with new tmpVar mul8su::$10 mul8su::$10 ← mul8su::$8
Fixing lo/hi-lvalue with new tmpVar mul16s::$16 mul16s::$16 ← mul16s::$8
Fixing lo/hi-lvalue with new tmpVar mul16s::$17 mul16s::$17 ← mul16s::$14
Promoting byte/signed byte/word/signed word/dword/signed dword to byte* in PROCPORT_DDR ← ((byte*)) 0
Promoting byte/signed byte/word/signed word/dword/signed dword to byte* in PROCPORT ← ((byte*)) 1
Promoting word/dword/signed dword to byte* in CHARGEN ← ((byte*)) 53248
Promoting word/dword/signed dword to byte* in SPRITES_XPOS ← ((byte*)) 53248
Promoting word/dword/signed dword to byte* in SPRITES_YPOS ← ((byte*)) 53249
Promoting word/dword/signed dword to byte* in SPRITES_XMSB ← ((byte*)) 53264
Promoting word/dword/signed dword to byte* in RASTER ← ((byte*)) 53266
Promoting word/dword/signed dword to byte* in SPRITES_ENABLE ← ((byte*)) 53269
Promoting word/dword/signed dword to byte* in SPRITES_EXPAND_Y ← ((byte*)) 53271
Promoting word/dword/signed dword to byte* in SPRITES_PRIORITY ← ((byte*)) 53275
Promoting word/dword/signed dword to byte* in SPRITES_MC ← ((byte*)) 53276
Promoting word/dword/signed dword to byte* in SPRITES_EXPAND_X ← ((byte*)) 53277
Promoting word/dword/signed dword to byte* in BORDERCOL ← ((byte*)) 53280
Promoting word/dword/signed dword to byte* in BGCOL ← ((byte*)) 53281
Promoting word/dword/signed dword to byte* in BGCOL1 ← ((byte*)) 53281
Promoting word/dword/signed dword to byte* in BGCOL2 ← ((byte*)) 53282
Promoting word/dword/signed dword to byte* in BGCOL3 ← ((byte*)) 53283
Promoting word/dword/signed dword to byte* in BGCOL4 ← ((byte*)) 53284
Promoting word/dword/signed dword to byte* in SPRITES_MC1 ← ((byte*)) 53285
Promoting word/dword/signed dword to byte* in SPRITES_MC2 ← ((byte*)) 53286
Promoting word/dword/signed dword to byte* in SPRITES_COLS ← ((byte*)) 53287
Promoting word/dword/signed dword to byte* in VIC_CONTROL ← ((byte*)) 53265
Promoting word/dword/signed dword to byte* in D011 ← ((byte*)) 53265
Promoting word/dword/signed dword to byte* in VIC_CONTROL2 ← ((byte*)) 53270
Promoting word/dword/signed dword to byte* in D016 ← ((byte*)) 53270
Promoting word/dword/signed dword to byte* in D018 ← ((byte*)) 53272
Promoting word/dword/signed dword to byte* in VIC_MEMORY ← ((byte*)) 53272
Promoting word/dword/signed dword to byte* in COLS ← ((byte*)) 55296
Promoting word/dword/signed dword to byte* in CIA1_PORT_A ← ((byte*)) 56320
Promoting word/dword/signed dword to byte* in CIA1_PORT_B ← ((byte*)) 56321
Promoting word/dword/signed dword to byte* in CIA1_PORT_A_DDR ← ((byte*)) 56322
Promoting word/dword/signed dword to byte* in CIA1_PORT_B_DDR ← ((byte*)) 56323
Promoting word/dword/signed dword to byte* in CIA2_PORT_A ← ((byte*)) 56576
Promoting word/dword/signed dword to byte* in CIA2_PORT_B ← ((byte*)) 56577
Promoting word/dword/signed dword to byte* in CIA2_PORT_A_DDR ← ((byte*)) 56578
Promoting word/dword/signed dword to byte* in CIA2_PORT_B_DDR ← ((byte*)) 56579
Promoting byte to word in mul8u::mb ← ((word)) mul8u::b
Promoting word to dword in mul16u::mb ← ((dword)) mul16u::b
Promoting word/signed word/dword/signed dword to byte* in PLEX_SCREEN_PTR ← ((byte*)) $0
Promoting word/signed word/dword/signed dword to byte* in SPRITE ← ((byte*)) 8192
Promoting word/signed word/dword/signed dword to byte* in SCREEN ← ((byte*)) 1024
Promoting word/signed word/dword/signed dword to byte* in YSIN ← ((byte*)) 8448
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) PROCPORT_DDR ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) PROCPORT_DDR_MEMORY_MASK ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte*) PROCPORT ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) PROCPORT_RAM_ALL ← (byte/signed byte/word/signed word/dword/signed dword) 48
  (byte) PROCPORT_RAM_IO ← (byte/signed byte/word/signed word/dword/signed dword) 53
  (byte) PROCPORT_RAM_CHARROM ← (byte/signed byte/word/signed word/dword/signed dword) 49
  (byte) PROCPORT_KERNEL_IO ← (byte/signed byte/word/signed word/dword/signed dword) 54
  (byte) PROCPORT_BASIC_KERNEL_IO ← (byte/signed byte/word/signed word/dword/signed dword) 55
  (byte*) CHARGEN ← ((byte*)) (word/dword/signed dword) 53248
  (byte*) SPRITES_XPOS ← ((byte*)) (word/dword/signed dword) 53248
  (byte*) SPRITES_YPOS ← ((byte*)) (word/dword/signed dword) 53249
  (byte*) SPRITES_XMSB ← ((byte*)) (word/dword/signed dword) 53264
  (byte*) RASTER ← ((byte*)) (word/dword/signed dword) 53266
  (byte*) SPRITES_ENABLE ← ((byte*)) (word/dword/signed dword) 53269
  (byte*) SPRITES_EXPAND_Y ← ((byte*)) (word/dword/signed dword) 53271
  (byte*) SPRITES_PRIORITY ← ((byte*)) (word/dword/signed dword) 53275
  (byte*) SPRITES_MC ← ((byte*)) (word/dword/signed dword) 53276
  (byte*) SPRITES_EXPAND_X ← ((byte*)) (word/dword/signed dword) 53277
  (byte*) BORDERCOL ← ((byte*)) (word/dword/signed dword) 53280
  (byte*) BGCOL ← ((byte*)) (word/dword/signed dword) 53281
  (byte*) BGCOL1 ← ((byte*)) (word/dword/signed dword) 53281
  (byte*) BGCOL2 ← ((byte*)) (word/dword/signed dword) 53282
  (byte*) BGCOL3 ← ((byte*)) (word/dword/signed dword) 53283
  (byte*) BGCOL4 ← ((byte*)) (word/dword/signed dword) 53284
  (byte*) SPRITES_MC1 ← ((byte*)) (word/dword/signed dword) 53285
  (byte*) SPRITES_MC2 ← ((byte*)) (word/dword/signed dword) 53286
  (byte*) SPRITES_COLS ← ((byte*)) (word/dword/signed dword) 53287
  (byte*) VIC_CONTROL ← ((byte*)) (word/dword/signed dword) 53265
  (byte*) D011 ← ((byte*)) (word/dword/signed dword) 53265
  (byte) VIC_RST8 ← (byte/word/signed word/dword/signed dword) 128
  (byte) VIC_ECM ← (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte) VIC_BMM ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte) VIC_DEN ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) VIC_RSEL ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) VIC_CONTROL2 ← ((byte*)) (word/dword/signed dword) 53270
  (byte*) D016 ← ((byte*)) (word/dword/signed dword) 53270
  (byte) VIC_MCM ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) VIC_CSEL ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) D018 ← ((byte*)) (word/dword/signed dword) 53272
  (byte*) VIC_MEMORY ← ((byte*)) (word/dword/signed dword) 53272
  (byte*) COLS ← ((byte*)) (word/dword/signed dword) 55296
  (byte*) CIA1_PORT_A ← ((byte*)) (word/dword/signed dword) 56320
  (byte*) CIA1_PORT_B ← ((byte*)) (word/dword/signed dword) 56321
  (byte*) CIA1_PORT_A_DDR ← ((byte*)) (word/dword/signed dword) 56322
  (byte*) CIA1_PORT_B_DDR ← ((byte*)) (word/dword/signed dword) 56323
  (byte*) CIA2_PORT_A ← ((byte*)) (word/dword/signed dword) 56576
  (byte*) CIA2_PORT_B ← ((byte*)) (word/dword/signed dword) 56577
  (byte*) CIA2_PORT_A_DDR ← ((byte*)) (word/dword/signed dword) 56578
  (byte*) CIA2_PORT_B_DDR ← ((byte*)) (word/dword/signed dword) 56579
  (byte) BLACK ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) WHITE ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) RED ← (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) CYAN ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte) PURPLE ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) GREEN ← (byte/signed byte/word/signed word/dword/signed dword) 5
  (byte) BLUE ← (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte) YELLOW ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) ORANGE ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) BROWN ← (byte/signed byte/word/signed word/dword/signed dword) 9
  (byte) PINK ← (byte/signed byte/word/signed word/dword/signed dword) 10
  (byte) DARK_GREY ← (byte/signed byte/word/signed word/dword/signed dword) 11
  (byte) GREY ← (byte/signed byte/word/signed word/dword/signed dword) 12
  (byte) LIGHT_GREEN ← (byte/signed byte/word/signed word/dword/signed dword) 13
  (byte) LIGHT_BLUE ← (byte/signed byte/word/signed word/dword/signed dword) 14
  (byte) LIGHT_GREY ← (byte/signed byte/word/signed word/dword/signed dword) 15
  to:@1
toD018: scope:[toD018]  from
  (word~) toD018::$0 ← ((word)) (byte*) toD018::screen
  (word~) toD018::$1 ← (word~) toD018::$0 & (word/signed word/dword/signed dword) 16383
  (word~) toD018::$2 ← (word~) toD018::$1 << (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte~) toD018::$3 ← > (word~) toD018::$2
  (word~) toD018::$4 ← ((word)) (byte*) toD018::gfx
  (byte~) toD018::$5 ← > (word~) toD018::$4
  (byte~) toD018::$6 ← (byte~) toD018::$5 >> (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte~) toD018::$7 ← (byte~) toD018::$6 & (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte~) toD018::$8 ← (byte~) toD018::$3 | (byte~) toD018::$7
  (byte) toD018::return ← (byte~) toD018::$8
  to:toD018::@return
toD018::@return: scope:[toD018]  from toD018 toD018::@1
  (byte) toD018::return ← (byte) toD018::return
  return (byte) toD018::return
  to:@return
toD018::@1: scope:[toD018]  from
  to:toD018::@return
@1: scope:[]  from @begin
  to:@2
toDd00: scope:[toDd00]  from
  (word~) toDd00::$0 ← ((word)) (byte*) toDd00::gfx
  (byte~) toDd00::$1 ← > (word~) toDd00::$0
  (byte~) toDd00::$2 ← (byte~) toDd00::$1 >> (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte/word/dword~) toDd00::$3 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte~) toDd00::$2
  (byte) toDd00::return ← (byte/word/dword~) toDd00::$3
  to:toDd00::@return
toDd00::@return: scope:[toDd00]  from toDd00 toDd00::@1
  (byte) toDd00::return ← (byte) toDd00::return
  return (byte) toDd00::return
  to:@return
toDd00::@1: scope:[toDd00]  from
  to:toDd00::@return
@2: scope:[]  from @1
  to:@3
vicSelectGfxBank: scope:[vicSelectGfxBank]  from
  *((byte*) CIA2_PORT_A_DDR) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
  *((byte*) CIA2_PORT_A) ← (byte~) vicSelectGfxBank::$0
  to:vicSelectGfxBank::@return
vicSelectGfxBank::@return: scope:[vicSelectGfxBank]  from vicSelectGfxBank
  return 
  to:@return
@3: scope:[]  from @2
  (byte) rem8u ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@4
div8u: scope:[div8u]  from
  (byte~) div8u::$0 ← call divr8u (byte) div8u::dividend (byte) div8u::divisor (byte/signed byte/word/signed word/dword/signed dword) 0 
  (byte) div8u::return ← (byte~) div8u::$0
  to:div8u::@return
div8u::@return: scope:[div8u]  from div8u div8u::@1
  (byte) div8u::return ← (byte) div8u::return
  return (byte) div8u::return
  to:@return
div8u::@1: scope:[div8u]  from
  to:div8u::@return
@4: scope:[]  from @3
  to:@5
divr8u: scope:[divr8u]  from
  (byte) divr8u::quotient ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) divr8u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:divr8u::@1
divr8u::@1: scope:[divr8u]  from divr8u divr8u::@3
  (byte~) divr8u::$0 ← (byte) divr8u::rem << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::rem ← (byte~) divr8u::$0
  (byte~) divr8u::$1 ← (byte) divr8u::dividend & (byte/word/signed word/dword/signed dword) 128
  (bool~) divr8u::$2 ← (byte~) divr8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) divr8u::$3 ← ! (bool~) divr8u::$2
  if((bool~) divr8u::$3) goto divr8u::@2
  to:divr8u::@4
divr8u::@2: scope:[divr8u]  from divr8u::@1 divr8u::@4
  (byte~) divr8u::$5 ← (byte) divr8u::dividend << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::dividend ← (byte~) divr8u::$5
  (byte~) divr8u::$6 ← (byte) divr8u::quotient << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::quotient ← (byte~) divr8u::$6
  (bool~) divr8u::$7 ← (byte) divr8u::rem >= (byte) divr8u::divisor
  (bool~) divr8u::$8 ← ! (bool~) divr8u::$7
  if((bool~) divr8u::$8) goto divr8u::@3
  to:divr8u::@5
divr8u::@4: scope:[divr8u]  from divr8u::@1
  (byte/word/dword~) divr8u::$4 ← (byte) divr8u::rem | (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::rem ← (byte/word/dword~) divr8u::$4
  to:divr8u::@2
divr8u::@3: scope:[divr8u]  from divr8u::@2 divr8u::@5
  (byte) divr8u::i ← (byte) divr8u::i + rangenext(0,7)
  (bool~) divr8u::$10 ← (byte) divr8u::i != rangelast(0,7)
  if((bool~) divr8u::$10) goto divr8u::@1
  to:divr8u::@6
divr8u::@5: scope:[divr8u]  from divr8u::@2
  (byte) divr8u::quotient ← ++ (byte) divr8u::quotient
  (byte~) divr8u::$9 ← (byte) divr8u::rem - (byte) divr8u::divisor
  (byte) divr8u::rem ← (byte~) divr8u::$9
  to:divr8u::@3
divr8u::@6: scope:[divr8u]  from divr8u::@3
  (byte) rem8u ← (byte) divr8u::rem
  (byte) divr8u::return ← (byte) divr8u::quotient
  to:divr8u::@return
divr8u::@return: scope:[divr8u]  from divr8u::@6 divr8u::@7
  (byte) divr8u::return ← (byte) divr8u::return
  return (byte) divr8u::return
  to:@return
divr8u::@7: scope:[divr8u]  from
  to:divr8u::@return
@5: scope:[]  from @4
  (word) rem16u ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@6
divr16u: scope:[divr16u]  from
  (word) divr16u::quotient ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) divr16u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  (word~) divr16u::$0 ← (word) divr16u::rem << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::rem ← (word~) divr16u::$0
  (byte~) divr16u::$1 ← > (word) divr16u::dividend
  (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128
  (bool~) divr16u::$3 ← (byte~) divr16u::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) divr16u::$4 ← ! (bool~) divr16u::$3
  if((bool~) divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  (word~) divr16u::$6 ← (word) divr16u::dividend << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::dividend ← (word~) divr16u::$6
  (word~) divr16u::$7 ← (word) divr16u::quotient << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::quotient ← (word~) divr16u::$7
  (bool~) divr16u::$8 ← (word) divr16u::rem >= (word) divr16u::divisor
  (bool~) divr16u::$9 ← ! (bool~) divr16u::$8
  if((bool~) divr16u::$9) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  (word/dword~) divr16u::$5 ← (word) divr16u::rem | (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::rem ← (word/dword~) divr16u::$5
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  (byte) divr16u::i ← (byte) divr16u::i + rangenext(0,15)
  (bool~) divr16u::$11 ← (byte) divr16u::i != rangelast(0,15)
  if((bool~) divr16u::$11) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  (word) divr16u::quotient ← ++ (word) divr16u::quotient
  (word~) divr16u::$10 ← (word) divr16u::rem - (word) divr16u::divisor
  (word) divr16u::rem ← (word~) divr16u::$10
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  (word) rem16u ← (word) divr16u::rem
  (word) divr16u::return ← (word) divr16u::quotient
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6 divr16u::@7
  (word) divr16u::return ← (word) divr16u::return
  return (word) divr16u::return
  to:@return
divr16u::@7: scope:[divr16u]  from
  to:divr16u::@return
@6: scope:[]  from @5
  to:@7
div16u: scope:[div16u]  from
  (word~) div16u::$0 ← call divr16u (word) div16u::dividend (word) div16u::divisor (byte/signed byte/word/signed word/dword/signed dword) 0 
  (word) div16u::return ← (word~) div16u::$0
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u div16u::@1
  (word) div16u::return ← (word) div16u::return
  return (word) div16u::return
  to:@return
div16u::@1: scope:[div16u]  from
  to:div16u::@return
@7: scope:[]  from @6
  to:@8
div32u16u: scope:[div32u16u]  from
  (word~) div32u16u::$0 ← > (dword) div32u16u::dividend
  (word~) div32u16u::$1 ← call divr16u (word~) div32u16u::$0 (word) div32u16u::divisor (byte/signed byte/word/signed word/dword/signed dword) 0 
  (word) div32u16u::quotient_hi ← (word~) div32u16u::$1
  (word~) div32u16u::$2 ← < (dword) div32u16u::dividend
  (word~) div32u16u::$3 ← call divr16u (word~) div32u16u::$2 (word) div32u16u::divisor (word) rem16u 
  (word) div32u16u::quotient_lo ← (word~) div32u16u::$3
  (dword) div32u16u::quotient ← { (word) div32u16u::quotient_hi, (word) div32u16u::quotient_lo }
  (dword) div32u16u::return ← (dword) div32u16u::quotient
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u div32u16u::@1
  (dword) div32u16u::return ← (dword) div32u16u::return
  return (dword) div32u16u::return
  to:@return
div32u16u::@1: scope:[div32u16u]  from
  to:div32u16u::@return
@8: scope:[]  from @7
  (signed byte) rem8s ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@9
div8s: scope:[div8s]  from
  (byte) div8s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8s::dividendu ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) div8s::$0 ← (signed byte) div8s::dividend < (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) div8s::$0) goto div8s::@1
  to:div8s::@7
div8s::@1: scope:[div8s]  from div8s div8s::@8
  (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend
  (byte~) div8s::$3 ← ((byte)) (signed byte~) div8s::$2
  (byte) div8s::dividendu ← (byte~) div8s::$3
  (byte) div8s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:div8s::@2
div8s::@7: scope:[div8s]  from div8s
  (byte~) div8s::$1 ← ((byte)) (signed byte) div8s::dividend
  (byte) div8s::dividendu ← (byte~) div8s::$1
  to:div8s::@2
div8s::@2: scope:[div8s]  from div8s::@1 div8s::@7
  (byte) div8s::divisoru ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) div8s::$4 ← (signed byte) div8s::divisor < (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) div8s::$4) goto div8s::@3
  to:div8s::@9
div8s::@8: scope:[div8s]  from
  to:div8s::@1
div8s::@3: scope:[div8s]  from div8s::@10 div8s::@2
  (signed byte~) div8s::$6 ← - (signed byte) div8s::divisor
  (byte~) div8s::$7 ← ((byte)) (signed byte~) div8s::$6
  (byte) div8s::divisoru ← (byte~) div8s::$7
  (byte/word/dword~) div8s::$8 ← (byte) div8s::neg ^ (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8s::neg ← (byte/word/dword~) div8s::$8
  to:div8s::@4
div8s::@9: scope:[div8s]  from div8s::@2
  (byte~) div8s::$5 ← ((byte)) (signed byte) div8s::divisor
  (byte) div8s::divisoru ← (byte~) div8s::$5
  to:div8s::@4
div8s::@4: scope:[div8s]  from div8s::@3 div8s::@9
  (byte~) div8s::$9 ← call div8u (byte) div8s::dividendu (byte) div8s::divisoru 
  (byte) div8s::resultu ← (byte~) div8s::$9
  (bool~) div8s::$10 ← (byte) div8s::neg == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) div8s::$10) goto div8s::@5
  to:div8s::@11
div8s::@10: scope:[div8s]  from
  to:div8s::@3
div8s::@5: scope:[div8s]  from div8s::@13 div8s::@4
  (signed byte~) div8s::$15 ← ((signed byte)) (byte) rem8u
  (signed byte) rem8s ← (signed byte~) div8s::$15
  (signed byte~) div8s::$16 ← ((signed byte)) (byte) div8s::resultu
  (signed byte) div8s::return ← (signed byte~) div8s::$16
  to:div8s::@return
div8s::@11: scope:[div8s]  from div8s::@4
  (signed byte~) div8s::$11 ← ((signed byte)) (byte) rem8u
  (signed byte~) div8s::$12 ← - (signed byte~) div8s::$11
  (signed byte) rem8s ← (signed byte~) div8s::$12
  (signed byte~) div8s::$13 ← ((signed byte)) (byte) div8s::resultu
  (signed byte~) div8s::$14 ← - (signed byte~) div8s::$13
  (signed byte) div8s::return ← (signed byte~) div8s::$14
  to:div8s::@return
div8s::@return: scope:[div8s]  from div8s::@11 div8s::@5 div8s::@6
  (signed byte) div8s::return ← (signed byte) div8s::return
  return (signed byte) div8s::return
  to:@return
div8s::@12: scope:[div8s]  from
  to:div8s::@6
div8s::@6: scope:[div8s]  from div8s::@12 div8s::@14
  to:div8s::@return
div8s::@13: scope:[div8s]  from
  to:div8s::@5
div8s::@14: scope:[div8s]  from
  to:div8s::@6
@9: scope:[]  from @8
  (signed word) rem16s ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@10
divr16s: scope:[divr16s]  from
  (byte) divr16s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) divr16s::dividendu ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) divr16s::remu ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) divr16s::$0 ← (signed word) divr16s::dividend < (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) divr16s::$1 ← (signed word) divr16s::rem < (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) divr16s::$2 ← (bool~) divr16s::$0 || (bool~) divr16s::$1
  if((bool~) divr16s::$2) goto divr16s::@1
  to:divr16s::@7
divr16s::@1: scope:[divr16s]  from divr16s divr16s::@8
  (signed word~) divr16s::$5 ← - (signed word) divr16s::dividend
  (word~) divr16s::$6 ← ((word)) (signed word~) divr16s::$5
  (word) divr16s::dividendu ← (word~) divr16s::$6
  (signed word~) divr16s::$7 ← - (signed word) divr16s::rem
  (word~) divr16s::$8 ← ((word)) (signed word~) divr16s::$7
  (word) divr16s::remu ← (word~) divr16s::$8
  (byte) divr16s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:divr16s::@2
divr16s::@7: scope:[divr16s]  from divr16s
  (word~) divr16s::$3 ← ((word)) (signed word) divr16s::dividend
  (word) divr16s::dividendu ← (word~) divr16s::$3
  (word~) divr16s::$4 ← ((word)) (signed word) divr16s::rem
  (word) divr16s::remu ← (word~) divr16s::$4
  to:divr16s::@2
divr16s::@2: scope:[divr16s]  from divr16s::@1 divr16s::@7
  (word) divr16s::divisoru ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) divr16s::$9 ← (signed word) divr16s::divisor < (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) divr16s::$9) goto divr16s::@3
  to:divr16s::@9
divr16s::@8: scope:[divr16s]  from
  to:divr16s::@1
divr16s::@3: scope:[divr16s]  from divr16s::@10 divr16s::@2
  (signed word~) divr16s::$11 ← - (signed word) divr16s::divisor
  (word~) divr16s::$12 ← ((word)) (signed word~) divr16s::$11
  (word) divr16s::divisoru ← (word~) divr16s::$12
  (byte/word/dword~) divr16s::$13 ← (byte) divr16s::neg ^ (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr16s::neg ← (byte/word/dword~) divr16s::$13
  to:divr16s::@4
divr16s::@9: scope:[divr16s]  from divr16s::@2
  (word~) divr16s::$10 ← ((word)) (signed word) divr16s::divisor
  (word) divr16s::divisoru ← (word~) divr16s::$10
  to:divr16s::@4
divr16s::@4: scope:[divr16s]  from divr16s::@3 divr16s::@9
  (word~) divr16s::$14 ← call divr16u (word) divr16s::dividendu (word) divr16s::divisoru (word) divr16s::remu 
  (word) divr16s::resultu ← (word~) divr16s::$14
  (bool~) divr16s::$15 ← (byte) divr16s::neg == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) divr16s::$15) goto divr16s::@5
  to:divr16s::@11
divr16s::@10: scope:[divr16s]  from
  to:divr16s::@3
divr16s::@5: scope:[divr16s]  from divr16s::@13 divr16s::@4
  (signed word~) divr16s::$20 ← ((signed word)) (word) rem16u
  (signed word) rem16s ← (signed word~) divr16s::$20
  (signed word~) divr16s::$21 ← ((signed word)) (word) divr16s::resultu
  (signed word) divr16s::return ← (signed word~) divr16s::$21
  to:divr16s::@return
divr16s::@11: scope:[divr16s]  from divr16s::@4
  (signed word~) divr16s::$16 ← ((signed word)) (word) rem16u
  (signed word~) divr16s::$17 ← - (signed word~) divr16s::$16
  (signed word) rem16s ← (signed word~) divr16s::$17
  (signed word~) divr16s::$18 ← ((signed word)) (word) divr16s::resultu
  (signed word~) divr16s::$19 ← - (signed word~) divr16s::$18
  (signed word) divr16s::return ← (signed word~) divr16s::$19
  to:divr16s::@return
divr16s::@return: scope:[divr16s]  from divr16s::@11 divr16s::@5 divr16s::@6
  (signed word) divr16s::return ← (signed word) divr16s::return
  return (signed word) divr16s::return
  to:@return
divr16s::@12: scope:[divr16s]  from
  to:divr16s::@6
divr16s::@6: scope:[divr16s]  from divr16s::@12 divr16s::@14
  to:divr16s::@return
divr16s::@13: scope:[divr16s]  from
  to:divr16s::@5
divr16s::@14: scope:[divr16s]  from
  to:divr16s::@6
@10: scope:[]  from @9
  to:@11
div16s: scope:[div16s]  from
  (signed word~) div16s::$0 ← call divr16s (signed word) div16s::dividend (signed word) div16s::divisor (byte/signed byte/word/signed word/dword/signed dword) 0 
  (signed word) div16s::return ← (signed word~) div16s::$0
  to:div16s::@return
div16s::@return: scope:[div16s]  from div16s div16s::@1
  (signed word) div16s::return ← (signed word) div16s::return
  return (signed word) div16s::return
  to:@return
div16s::@1: scope:[div16s]  from
  to:div16s::@return
@11: scope:[]  from @10
  to:@12
mul8u: scope:[mul8u]  from
  (word) mul8u::res ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) mul8u::mb ← ((word)) (byte) mul8u::b
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@4
  (bool~) mul8u::$0 ← (byte) mul8u::a != (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) mul8u::$0) goto mul8u::@2
  to:mul8u::@5
mul8u::@2: scope:[mul8u]  from mul8u::@1 mul8u::@6
  (byte~) mul8u::$1 ← (byte) mul8u::a & (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) mul8u::$2 ← (byte~) mul8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mul8u::$3 ← ! (bool~) mul8u::$2
  if((bool~) mul8u::$3) goto mul8u::@4
  to:mul8u::@7
mul8u::@5: scope:[mul8u]  from mul8u::@1
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@5 mul8u::@8
  (word) mul8u::return ← (word) mul8u::res
  to:mul8u::@return
mul8u::@6: scope:[mul8u]  from
  to:mul8u::@2
mul8u::@4: scope:[mul8u]  from mul8u::@2 mul8u::@7
  (byte~) mul8u::$5 ← (byte) mul8u::a >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) mul8u::a ← (byte~) mul8u::$5
  (word~) mul8u::$6 ← (word) mul8u::mb << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) mul8u::mb ← (word~) mul8u::$6
  to:mul8u::@1
mul8u::@7: scope:[mul8u]  from mul8u::@2
  (word~) mul8u::$4 ← (word) mul8u::res + (word) mul8u::mb
  (word) mul8u::res ← (word~) mul8u::$4
  to:mul8u::@4
mul8u::@8: scope:[mul8u]  from
  to:mul8u::@3
mul8u::@return: scope:[mul8u]  from mul8u::@3 mul8u::@9
  (word) mul8u::return ← (word) mul8u::return
  return (word) mul8u::return
  to:@return
mul8u::@9: scope:[mul8u]  from
  to:mul8u::@return
@12: scope:[]  from @11
  to:@13
mul8s: scope:[mul8s]  from
  (byte~) mul8s::$0 ← ((byte)) (signed byte) mul8s::a
  (byte~) mul8s::$1 ← ((byte)) (signed byte) mul8s::b
  (word~) mul8s::$2 ← call mul8u (byte~) mul8s::$0 (byte~) mul8s::$1 
  (word) mul8s::m ← (word~) mul8s::$2
  (bool~) mul8s::$3 ← (signed byte) mul8s::a < (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mul8s::$4 ← ! (bool~) mul8s::$3
  if((bool~) mul8s::$4) goto mul8s::@1
  to:mul8s::@3
mul8s::@1: scope:[mul8s]  from mul8s mul8s::@3
  (bool~) mul8s::$9 ← (signed byte) mul8s::b < (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mul8s::$10 ← ! (bool~) mul8s::$9
  if((bool~) mul8s::$10) goto mul8s::@2
  to:mul8s::@4
mul8s::@3: scope:[mul8s]  from mul8s
  (byte~) mul8s::$5 ← > (word) mul8s::m
  (byte~) mul8s::$6 ← > (word) mul8s::m
  (byte~) mul8s::$7 ← ((byte)) (signed byte) mul8s::b
  (byte~) mul8s::$8 ← (byte~) mul8s::$6 - (byte~) mul8s::$7
  (byte~) mul8s::$16 ← (byte~) mul8s::$8
  (word) mul8s::m ← (word) mul8s::m hi= (byte~) mul8s::$16
  to:mul8s::@1
mul8s::@2: scope:[mul8s]  from mul8s::@1 mul8s::@4
  (signed word~) mul8s::$15 ← ((signed word)) (word) mul8s::m
  (signed word) mul8s::return ← (signed word~) mul8s::$15
  to:mul8s::@return
mul8s::@4: scope:[mul8s]  from mul8s::@1
  (byte~) mul8s::$11 ← > (word) mul8s::m
  (byte~) mul8s::$12 ← > (word) mul8s::m
  (byte~) mul8s::$13 ← ((byte)) (signed byte) mul8s::a
  (byte~) mul8s::$14 ← (byte~) mul8s::$12 - (byte~) mul8s::$13
  (byte~) mul8s::$17 ← (byte~) mul8s::$14
  (word) mul8s::m ← (word) mul8s::m hi= (byte~) mul8s::$17
  to:mul8s::@2
mul8s::@return: scope:[mul8s]  from mul8s::@2 mul8s::@5
  (signed word) mul8s::return ← (signed word) mul8s::return
  return (signed word) mul8s::return
  to:@return
mul8s::@5: scope:[mul8s]  from
  to:mul8s::@return
@13: scope:[]  from @12
  to:@14
mul8su: scope:[mul8su]  from
  (byte~) mul8su::$0 ← ((byte)) (signed byte) mul8su::a
  (byte~) mul8su::$1 ← ((byte)) (byte) mul8su::b
  (word~) mul8su::$2 ← call mul8u (byte~) mul8su::$0 (byte~) mul8su::$1 
  (word) mul8su::m ← (word~) mul8su::$2
  (bool~) mul8su::$3 ← (signed byte) mul8su::a < (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mul8su::$4 ← ! (bool~) mul8su::$3
  if((bool~) mul8su::$4) goto mul8su::@1
  to:mul8su::@2
mul8su::@1: scope:[mul8su]  from mul8su mul8su::@2
  (signed word~) mul8su::$9 ← ((signed word)) (word) mul8su::m
  (signed word) mul8su::return ← (signed word~) mul8su::$9
  to:mul8su::@return
mul8su::@2: scope:[mul8su]  from mul8su
  (byte~) mul8su::$5 ← > (word) mul8su::m
  (byte~) mul8su::$6 ← > (word) mul8su::m
  (byte~) mul8su::$7 ← ((byte)) (byte) mul8su::b
  (byte~) mul8su::$8 ← (byte~) mul8su::$6 - (byte~) mul8su::$7
  (byte~) mul8su::$10 ← (byte~) mul8su::$8
  (word) mul8su::m ← (word) mul8su::m hi= (byte~) mul8su::$10
  to:mul8su::@1
mul8su::@return: scope:[mul8su]  from mul8su::@1 mul8su::@3
  (signed word) mul8su::return ← (signed word) mul8su::return
  return (signed word) mul8su::return
  to:@return
mul8su::@3: scope:[mul8su]  from
  to:mul8su::@return
@14: scope:[]  from @13
  to:@15
mul16u: scope:[mul16u]  from
  (dword) mul16u::res ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (dword) mul16u::mb ← ((dword)) (word) mul16u::b
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@4
  (bool~) mul16u::$0 ← (word) mul16u::a != (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) mul16u::$0) goto mul16u::@2
  to:mul16u::@5
mul16u::@2: scope:[mul16u]  from mul16u::@1 mul16u::@6
  (byte/word~) mul16u::$1 ← (word) mul16u::a & (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) mul16u::$2 ← (byte/word~) mul16u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mul16u::$3 ← ! (bool~) mul16u::$2
  if((bool~) mul16u::$3) goto mul16u::@4
  to:mul16u::@7
mul16u::@5: scope:[mul16u]  from mul16u::@1
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@5 mul16u::@8
  (dword) mul16u::return ← (dword) mul16u::res
  to:mul16u::@return
mul16u::@6: scope:[mul16u]  from
  to:mul16u::@2
mul16u::@4: scope:[mul16u]  from mul16u::@2 mul16u::@7
  (word~) mul16u::$5 ← (word) mul16u::a >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) mul16u::a ← (word~) mul16u::$5
  (dword~) mul16u::$6 ← (dword) mul16u::mb << (byte/signed byte/word/signed word/dword/signed dword) 1
  (dword) mul16u::mb ← (dword~) mul16u::$6
  to:mul16u::@1
mul16u::@7: scope:[mul16u]  from mul16u::@2
  (dword~) mul16u::$4 ← (dword) mul16u::res + (dword) mul16u::mb
  (dword) mul16u::res ← (dword~) mul16u::$4
  to:mul16u::@4
mul16u::@8: scope:[mul16u]  from
  to:mul16u::@3
mul16u::@return: scope:[mul16u]  from mul16u::@3 mul16u::@9
  (dword) mul16u::return ← (dword) mul16u::return
  return (dword) mul16u::return
  to:@return
mul16u::@9: scope:[mul16u]  from
  to:mul16u::@return
@15: scope:[]  from @14
  to:@16
mul16s: scope:[mul16s]  from
  (word~) mul16s::$0 ← ((word)) (signed word) mul16s::a
  (word~) mul16s::$1 ← ((word)) (signed word) mul16s::b
  (dword~) mul16s::$2 ← call mul16u (word~) mul16s::$0 (word~) mul16s::$1 
  (dword) mul16s::m ← (dword~) mul16s::$2
  (bool~) mul16s::$3 ← (signed word) mul16s::a < (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mul16s::$4 ← ! (bool~) mul16s::$3
  if((bool~) mul16s::$4) goto mul16s::@1
  to:mul16s::@3
mul16s::@1: scope:[mul16s]  from mul16s mul16s::@3
  (bool~) mul16s::$9 ← (signed word) mul16s::b < (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) mul16s::$10 ← ! (bool~) mul16s::$9
  if((bool~) mul16s::$10) goto mul16s::@2
  to:mul16s::@4
mul16s::@3: scope:[mul16s]  from mul16s
  (word~) mul16s::$5 ← > (dword) mul16s::m
  (word~) mul16s::$6 ← > (dword) mul16s::m
  (word~) mul16s::$7 ← ((word)) (signed word) mul16s::b
  (word~) mul16s::$8 ← (word~) mul16s::$6 - (word~) mul16s::$7
  (word~) mul16s::$16 ← (word~) mul16s::$8
  (dword) mul16s::m ← (dword) mul16s::m hi= (word~) mul16s::$16
  to:mul16s::@1
mul16s::@2: scope:[mul16s]  from mul16s::@1 mul16s::@4
  (signed dword~) mul16s::$15 ← ((signed dword)) (dword) mul16s::m
  (signed dword) mul16s::return ← (signed dword~) mul16s::$15
  to:mul16s::@return
mul16s::@4: scope:[mul16s]  from mul16s::@1
  (word~) mul16s::$11 ← > (dword) mul16s::m
  (word~) mul16s::$12 ← > (dword) mul16s::m
  (word~) mul16s::$13 ← ((word)) (signed word) mul16s::a
  (word~) mul16s::$14 ← (word~) mul16s::$12 - (word~) mul16s::$13
  (word~) mul16s::$17 ← (word~) mul16s::$14
  (dword) mul16s::m ← (dword) mul16s::m hi= (word~) mul16s::$17
  to:mul16s::@2
mul16s::@return: scope:[mul16s]  from mul16s::@2 mul16s::@5
  (signed dword) mul16s::return ← (signed dword) mul16s::return
  return (signed dword) mul16s::return
  to:@return
mul16s::@5: scope:[mul16s]  from
  to:mul16s::@return
@16: scope:[]  from @15
  (dword) PI2_u4f28 ← (dword/signed dword) 1686629713
  (dword) PI_u4f28 ← (dword/signed dword) 843314857
  (dword) PI_HALF_u4f28 ← (dword/signed dword) 421657428
  (word) PI2_u4f12 ← (word/signed word/dword/signed dword) 25736
  (word) PI_u4f12 ← (word/signed word/dword/signed dword) 12868
  (word) PI_HALF_u4f12 ← (word/signed word/dword/signed dword) 6434
  to:@17
sin16s_gen: scope:[sin16s_gen]  from
  (dword~) sin16s_gen::$0 ← call div32u16u (dword) PI2_u4f28 (word) sin16s_gen::wavelength 
  (dword) sin16s_gen::step ← (dword~) sin16s_gen::$0
  (dword) sin16s_gen::x ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) sin16s_gen::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:sin16s_gen::@1
sin16s_gen::@1: scope:[sin16s_gen]  from sin16s_gen sin16s_gen::@1
  (signed word~) sin16s_gen::$1 ← call sin16s (dword) sin16s_gen::x 
  *((signed word*) sin16s_gen::sintab) ← (signed word~) sin16s_gen::$1
  (signed word*~) sin16s_gen::$2 ← (signed word*) sin16s_gen::sintab + (byte/signed byte/word/signed word/dword/signed dword) 2
  (signed word*) sin16s_gen::sintab ← (signed word*~) sin16s_gen::$2
  (dword~) sin16s_gen::$3 ← (dword) sin16s_gen::x + (dword) sin16s_gen::step
  (dword) sin16s_gen::x ← (dword~) sin16s_gen::$3
  (word) sin16s_gen::i ← ++ (word) sin16s_gen::i
  (bool~) sin16s_gen::$4 ← (word) sin16s_gen::i < (word) sin16s_gen::wavelength
  if((bool~) sin16s_gen::$4) goto sin16s_gen::@1
  to:sin16s_gen::@2
sin16s_gen::@2: scope:[sin16s_gen]  from sin16s_gen::@1
  to:sin16s_gen::@return
sin16s_gen::@return: scope:[sin16s_gen]  from sin16s_gen::@2
  return 
  to:@return
@17: scope:[]  from @16
  to:@18
sin16s_gen2: scope:[sin16s_gen2]  from
  (signed word~) sin16s_gen2::$0 ← (signed word) sin16s_gen2::max - (signed word) sin16s_gen2::min
  (signed word) sin16s_gen2::ampl ← (signed word~) sin16s_gen2::$0
  (signed word~) sin16s_gen2::$1 ← (signed word) sin16s_gen2::ampl >> (byte/signed byte/word/signed word/dword/signed dword) 1
  (signed word~) sin16s_gen2::$2 ← (signed word) sin16s_gen2::min + (signed word~) sin16s_gen2::$1
  (signed word) sin16s_gen2::offs ← (signed word~) sin16s_gen2::$2
  (dword~) sin16s_gen2::$3 ← call div32u16u (dword) PI2_u4f28 (word) sin16s_gen2::wavelength 
  (dword) sin16s_gen2::step ← (dword~) sin16s_gen2::$3
  (dword) sin16s_gen2::x ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) sin16s_gen2::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:sin16s_gen2::@1
sin16s_gen2::@1: scope:[sin16s_gen2]  from sin16s_gen2 sin16s_gen2::@1
  (signed word~) sin16s_gen2::$4 ← call sin16s (dword) sin16s_gen2::x 
  (signed dword~) sin16s_gen2::$5 ← call mul16s (signed word~) sin16s_gen2::$4 (signed word) sin16s_gen2::ampl 
  (word~) sin16s_gen2::$6 ← > (signed dword~) sin16s_gen2::$5
  (signed word~) sin16s_gen2::$7 ← ((signed word)) (word~) sin16s_gen2::$6
  (signed word~) sin16s_gen2::$8 ← (signed word) sin16s_gen2::offs + (signed word~) sin16s_gen2::$7
  *((signed word*) sin16s_gen2::sintab) ← (signed word~) sin16s_gen2::$8
  (signed word*~) sin16s_gen2::$9 ← (signed word*) sin16s_gen2::sintab + (byte/signed byte/word/signed word/dword/signed dword) 2
  (signed word*) sin16s_gen2::sintab ← (signed word*~) sin16s_gen2::$9
  (dword~) sin16s_gen2::$10 ← (dword) sin16s_gen2::x + (dword) sin16s_gen2::step
  (dword) sin16s_gen2::x ← (dword~) sin16s_gen2::$10
  (word) sin16s_gen2::i ← ++ (word) sin16s_gen2::i
  (bool~) sin16s_gen2::$11 ← (word) sin16s_gen2::i < (word) sin16s_gen2::wavelength
  if((bool~) sin16s_gen2::$11) goto sin16s_gen2::@1
  to:sin16s_gen2::@2
sin16s_gen2::@2: scope:[sin16s_gen2]  from sin16s_gen2::@1
  to:sin16s_gen2::@return
sin16s_gen2::@return: scope:[sin16s_gen2]  from sin16s_gen2::@2
  return 
  to:@return
@18: scope:[]  from @17
  to:@19
sin8s_gen: scope:[sin8s_gen]  from
  (word~) sin8s_gen::$0 ← call div16u (word) PI2_u4f12 (word) sin8s_gen::wavelength 
  (word) sin8s_gen::step ← (word~) sin8s_gen::$0
  (word) sin8s_gen::x ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) sin8s_gen::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:sin8s_gen::@1
sin8s_gen::@1: scope:[sin8s_gen]  from sin8s_gen sin8s_gen::@1
  (signed byte~) sin8s_gen::$1 ← call sin8s (word) sin8s_gen::x 
  *((signed byte*) sin8s_gen::sintab) ← (signed byte~) sin8s_gen::$1
  (signed byte*) sin8s_gen::sintab ← ++ (signed byte*) sin8s_gen::sintab
  (word~) sin8s_gen::$2 ← (word) sin8s_gen::x + (word) sin8s_gen::step
  (word) sin8s_gen::x ← (word~) sin8s_gen::$2
  (word) sin8s_gen::i ← ++ (word) sin8s_gen::i
  (bool~) sin8s_gen::$3 ← (word) sin8s_gen::i < (word) sin8s_gen::wavelength
  if((bool~) sin8s_gen::$3) goto sin8s_gen::@1
  to:sin8s_gen::@2
sin8s_gen::@2: scope:[sin8s_gen]  from sin8s_gen::@1
  to:sin8s_gen::@return
sin8s_gen::@return: scope:[sin8s_gen]  from sin8s_gen::@2
  return 
  to:@return
@19: scope:[]  from @18
  to:@20
sin16s: scope:[sin16s]  from
  (byte) sin16s::isUpper ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) sin16s::$0 ← (dword) sin16s::x >= (dword) PI_u4f28
  (bool~) sin16s::$1 ← ! (bool~) sin16s::$0
  if((bool~) sin16s::$1) goto sin16s::@1
  to:sin16s::@4
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  (bool~) sin16s::$3 ← (dword) sin16s::x >= (dword) PI_HALF_u4f28
  (bool~) sin16s::$4 ← ! (bool~) sin16s::$3
  if((bool~) sin16s::$4) goto sin16s::@2
  to:sin16s::@5
sin16s::@4: scope:[sin16s]  from sin16s
  (dword~) sin16s::$2 ← (dword) sin16s::x - (dword) PI_u4f28
  (dword) sin16s::x ← (dword~) sin16s::$2
  (byte) sin16s::isUpper ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:sin16s::@1
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  (dword~) sin16s::$6 ← (dword) sin16s::x << (byte/signed byte/word/signed word/dword/signed dword) 3
  (word~) sin16s::$7 ← > (dword~) sin16s::$6
  (word) sin16s::x1 ← (word~) sin16s::$7
  (word~) sin16s::$8 ← call mulu16_sel (word) sin16s::x1 (word) sin16s::x1 (byte/signed byte/word/signed word/dword/signed dword) 0 
  (word) sin16s::x2 ← (word~) sin16s::$8
  (word~) sin16s::$9 ← call mulu16_sel (word) sin16s::x2 (word) sin16s::x1 (byte/signed byte/word/signed word/dword/signed dword) 1 
  (word) sin16s::x3 ← (word~) sin16s::$9
  (word/signed word/dword/signed dword~) sin16s::$10 ← (dword/signed dword) 65536 / (byte/signed byte/word/signed word/dword/signed dword) 6
  (word~) sin16s::$11 ← call mulu16_sel (word) sin16s::x3 (word/signed word/dword/signed dword~) sin16s::$10 (byte/signed byte/word/signed word/dword/signed dword) 1 
  (word) sin16s::x3_6 ← (word~) sin16s::$11
  (word~) sin16s::$12 ← (word) sin16s::x1 - (word) sin16s::x3_6
  (word) sin16s::usinx ← (word~) sin16s::$12
  (word~) sin16s::$13 ← call mulu16_sel (word) sin16s::x3 (word) sin16s::x1 (byte/signed byte/word/signed word/dword/signed dword) 0 
  (word) sin16s::x4 ← (word~) sin16s::$13
  (word~) sin16s::$14 ← call mulu16_sel (word) sin16s::x4 (word) sin16s::x1 (byte/signed byte/word/signed word/dword/signed dword) 0 
  (word) sin16s::x5 ← (word~) sin16s::$14
  (word~) sin16s::$15 ← (word) sin16s::x5 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (word) sin16s::x5_128 ← (word~) sin16s::$15
  (word~) sin16s::$16 ← (word) sin16s::usinx + (word) sin16s::x5_128
  (word) sin16s::usinx ← (word~) sin16s::$16
  (signed word~) sin16s::$17 ← ((signed word)) (word) sin16s::usinx
  (signed word) sin16s::sinx ← (signed word~) sin16s::$17
  (bool~) sin16s::$18 ← (byte) sin16s::isUpper != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) sin16s::$19 ← ! (bool~) sin16s::$18
  if((bool~) sin16s::$19) goto sin16s::@3
  to:sin16s::@6
sin16s::@5: scope:[sin16s]  from sin16s::@1
  (dword~) sin16s::$5 ← (dword) PI_u4f28 - (dword) sin16s::x
  (dword) sin16s::x ← (dword~) sin16s::$5
  to:sin16s::@2
sin16s::@3: scope:[sin16s]  from sin16s::@2 sin16s::@6
  (signed word) sin16s::return ← (signed word) sin16s::sinx
  to:sin16s::@return
sin16s::@6: scope:[sin16s]  from sin16s::@2
  (signed word~) sin16s::$20 ← ((signed word)) (word) sin16s::usinx
  (signed word~) sin16s::$21 ← - (signed word~) sin16s::$20
  (signed word) sin16s::sinx ← (signed word~) sin16s::$21
  to:sin16s::@3
sin16s::@return: scope:[sin16s]  from sin16s::@3 sin16s::@7
  (signed word) sin16s::return ← (signed word) sin16s::return
  return (signed word) sin16s::return
  to:@return
sin16s::@7: scope:[sin16s]  from
  to:sin16s::@return
@20: scope:[]  from @19
  to:@21
sin8s: scope:[sin8s]  from
  (byte) sin8s::isUpper ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) sin8s::$0 ← (word) sin8s::x >= (word) PI_u4f12
  (bool~) sin8s::$1 ← ! (bool~) sin8s::$0
  if((bool~) sin8s::$1) goto sin8s::@1
  to:sin8s::@5
sin8s::@1: scope:[sin8s]  from sin8s sin8s::@5
  (bool~) sin8s::$3 ← (word) sin8s::x >= (word) PI_HALF_u4f12
  (bool~) sin8s::$4 ← ! (bool~) sin8s::$3
  if((bool~) sin8s::$4) goto sin8s::@2
  to:sin8s::@6
sin8s::@5: scope:[sin8s]  from sin8s
  (word~) sin8s::$2 ← (word) sin8s::x - (word) PI_u4f12
  (word) sin8s::x ← (word~) sin8s::$2
  (byte) sin8s::isUpper ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:sin8s::@1
sin8s::@2: scope:[sin8s]  from sin8s::@1 sin8s::@6
  (word~) sin8s::$6 ← (word) sin8s::x << (byte/signed byte/word/signed word/dword/signed dword) 3
  (byte~) sin8s::$7 ← > (word~) sin8s::$6
  (byte) sin8s::x1 ← (byte~) sin8s::$7
  (byte~) sin8s::$8 ← call mulu8_sel (byte) sin8s::x1 (byte) sin8s::x1 (byte/signed byte/word/signed word/dword/signed dword) 0 
  (byte) sin8s::x2 ← (byte~) sin8s::$8
  (byte~) sin8s::$9 ← call mulu8_sel (byte) sin8s::x2 (byte) sin8s::x1 (byte/signed byte/word/signed word/dword/signed dword) 1 
  (byte) sin8s::x3 ← (byte~) sin8s::$9
  (byte) sin8s::DIV_6 ← (byte/signed byte/word/signed word/dword/signed dword) 43
  (byte~) sin8s::$10 ← call mulu8_sel (byte) sin8s::x3 (byte) sin8s::DIV_6 (byte/signed byte/word/signed word/dword/signed dword) 1 
  (byte) sin8s::x3_6 ← (byte~) sin8s::$10
  (byte~) sin8s::$11 ← (byte) sin8s::x1 - (byte) sin8s::x3_6
  (byte) sin8s::usinx ← (byte~) sin8s::$11
  (byte~) sin8s::$12 ← call mulu8_sel (byte) sin8s::x3 (byte) sin8s::x1 (byte/signed byte/word/signed word/dword/signed dword) 0 
  (byte) sin8s::x4 ← (byte~) sin8s::$12
  (byte~) sin8s::$13 ← call mulu8_sel (byte) sin8s::x4 (byte) sin8s::x1 (byte/signed byte/word/signed word/dword/signed dword) 0 
  (byte) sin8s::x5 ← (byte~) sin8s::$13
  (byte~) sin8s::$14 ← (byte) sin8s::x5 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) sin8s::x5_128 ← (byte~) sin8s::$14
  (byte~) sin8s::$15 ← (byte) sin8s::usinx + (byte) sin8s::x5_128
  (byte) sin8s::usinx ← (byte~) sin8s::$15
  (bool~) sin8s::$16 ← (byte) sin8s::usinx >= (byte/word/signed word/dword/signed dword) 128
  (bool~) sin8s::$17 ← ! (bool~) sin8s::$16
  if((bool~) sin8s::$17) goto sin8s::@3
  to:sin8s::@7
sin8s::@6: scope:[sin8s]  from sin8s::@1
  (word~) sin8s::$5 ← (word) PI_u4f12 - (word) sin8s::x
  (word) sin8s::x ← (word~) sin8s::$5
  to:sin8s::@2
sin8s::@3: scope:[sin8s]  from sin8s::@2 sin8s::@7
  (signed byte~) sin8s::$18 ← ((signed byte)) (byte) sin8s::usinx
  (signed byte) sin8s::sinx ← (signed byte~) sin8s::$18
  (bool~) sin8s::$19 ← (byte) sin8s::isUpper != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) sin8s::$20 ← ! (bool~) sin8s::$19
  if((bool~) sin8s::$20) goto sin8s::@4
  to:sin8s::@8
sin8s::@7: scope:[sin8s]  from sin8s::@2
  (byte) sin8s::usinx ← -- (byte) sin8s::usinx
  to:sin8s::@3
sin8s::@4: scope:[sin8s]  from sin8s::@3 sin8s::@8
  (signed byte) sin8s::return ← (signed byte) sin8s::sinx
  to:sin8s::@return
sin8s::@8: scope:[sin8s]  from sin8s::@3
  (signed byte~) sin8s::$21 ← ((signed byte)) (byte) sin8s::usinx
  (signed byte~) sin8s::$22 ← - (signed byte~) sin8s::$21
  (signed byte) sin8s::sinx ← (signed byte~) sin8s::$22
  to:sin8s::@4
sin8s::@return: scope:[sin8s]  from sin8s::@4 sin8s::@9
  (signed byte) sin8s::return ← (signed byte) sin8s::return
  return (signed byte) sin8s::return
  to:@return
sin8s::@9: scope:[sin8s]  from
  to:sin8s::@return
@21: scope:[]  from @20
  to:@22
mulu16_sel: scope:[mulu16_sel]  from
  (dword~) mulu16_sel::$0 ← call mul16u (word) mulu16_sel::v1 (word) mulu16_sel::v2 
  (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select
  (word~) mulu16_sel::$2 ← > (dword~) mulu16_sel::$1
  (word) mulu16_sel::return ← (word~) mulu16_sel::$2
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel mulu16_sel::@1
  (word) mulu16_sel::return ← (word) mulu16_sel::return
  return (word) mulu16_sel::return
  to:@return
mulu16_sel::@1: scope:[mulu16_sel]  from
  to:mulu16_sel::@return
@22: scope:[]  from @21
  to:@23
mulu8_sel: scope:[mulu8_sel]  from
  (word~) mulu8_sel::$0 ← call mul8u (byte) mulu8_sel::v1 (byte) mulu8_sel::v2 
  (word~) mulu8_sel::$1 ← (word~) mulu8_sel::$0 << (byte) mulu8_sel::select
  (byte~) mulu8_sel::$2 ← > (word~) mulu8_sel::$1
  (byte) mulu8_sel::return ← (byte~) mulu8_sel::$2
  to:mulu8_sel::@return
mulu8_sel::@return: scope:[mulu8_sel]  from mulu8_sel mulu8_sel::@1
  (byte) mulu8_sel::return ← (byte) mulu8_sel::return
  return (byte) mulu8_sel::return
  to:@return
mulu8_sel::@1: scope:[mulu8_sel]  from
  to:mulu8_sel::@return
@23: scope:[]  from @22
  (byte) PLEX_COUNT ← (byte/signed byte/word/signed word/dword/signed dword) 24
  (word[PLEX_COUNT]) PLEX_XPOS ← { fill( PLEX_COUNT, 0) }
  (byte[PLEX_COUNT]) PLEX_YPOS ← { fill( PLEX_COUNT, 0) }
  (byte[PLEX_COUNT]) PLEX_PTR ← { fill( PLEX_COUNT, 0) }
  (word/signed word/dword/signed dword~) $0 ← (word/signed word/dword/signed dword) 1024 + (word/signed word/dword/signed dword) 1016
  (byte*) PLEX_SCREEN_PTR ← ((byte*)) (word/signed word/dword/signed dword~) $0
  (byte[PLEX_COUNT]) PLEX_SORTED_IDX ← { fill( PLEX_COUNT, 0) }
  (byte) plex_show_idx ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) plex_sprite_idx ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) plex_sprite_msb ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:@24
plexInit: scope:[plexInit]  from
  (void~) plexInit::$0 ← call plexSetScreen (byte*) plexInit::screen 
  (byte/signed word/word/dword/signed dword~) plexInit::$1 ← (byte) PLEX_COUNT - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) plexInit::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:plexInit::@1
plexInit::@1: scope:[plexInit]  from plexInit plexInit::@1
  *((byte[PLEX_COUNT]) PLEX_SORTED_IDX + (byte) plexInit::i) ← (byte) plexInit::i
  (byte) plexInit::i ← (byte) plexInit::i + rangenext(0,plexInit::$1)
  (bool~) plexInit::$2 ← (byte) plexInit::i != rangelast(0,plexInit::$1)
  if((bool~) plexInit::$2) goto plexInit::@1
  to:plexInit::@2
plexInit::@2: scope:[plexInit]  from plexInit::@1
  to:plexInit::@return
plexInit::@return: scope:[plexInit]  from plexInit::@2
  return 
  to:@return
@24: scope:[]  from @23
  to:@25
plexSetScreen: scope:[plexSetScreen]  from
  (byte*~) plexSetScreen::$0 ← (byte*) plexSetScreen::screen + (word/signed word/dword/signed dword) 1016
  (byte*) PLEX_SCREEN_PTR ← (byte*~) plexSetScreen::$0
  to:plexSetScreen::@return
plexSetScreen::@return: scope:[plexSetScreen]  from plexSetScreen
  return 
  to:@return
@25: scope:[]  from @24
  to:@26
plexSort: scope:[plexSort]  from
  (byte/signed word/word/dword/signed dword~) plexSort::$0 ← (byte) PLEX_COUNT - (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) plexSort::m ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:plexSort::@1
plexSort::@1: scope:[plexSort]  from plexSort plexSort::@2
  (byte/signed word/word/dword/signed dword~) plexSort::$1 ← (byte) plexSort::m + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) plexSort::nxt_idx ← *((byte[PLEX_COUNT]) PLEX_SORTED_IDX + (byte/signed word/word/dword/signed dword~) plexSort::$1)
  (byte) plexSort::nxt_y ← *((byte[PLEX_COUNT]) PLEX_YPOS + (byte) plexSort::nxt_idx)
  (bool~) plexSort::$2 ← (byte) plexSort::nxt_y < *((byte[PLEX_COUNT]) PLEX_YPOS + *((byte[PLEX_COUNT]) PLEX_SORTED_IDX + (byte) plexSort::m))
  (bool~) plexSort::$3 ← ! (bool~) plexSort::$2
  if((bool~) plexSort::$3) goto plexSort::@2
  to:plexSort::@4
plexSort::@2: scope:[plexSort]  from plexSort::@1 plexSort::@5
  (byte) plexSort::m ← (byte) plexSort::m + rangenext(0,plexSort::$0)
  (bool~) plexSort::$8 ← (byte) plexSort::m != rangelast(0,plexSort::$0)
  if((bool~) plexSort::$8) goto plexSort::@1
  to:plexSort::@6
plexSort::@4: scope:[plexSort]  from plexSort::@1
  (byte) plexSort::s ← (byte) plexSort::m
  to:plexSort::@3
plexSort::@3: scope:[plexSort]  from plexSort::@3 plexSort::@4
  (byte/signed word/word/dword/signed dword~) plexSort::$4 ← (byte) plexSort::s + (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte[PLEX_COUNT]) PLEX_SORTED_IDX + (byte/signed word/word/dword/signed dword~) plexSort::$4) ← *((byte[PLEX_COUNT]) PLEX_SORTED_IDX + (byte) plexSort::s)
  (byte) plexSort::s ← -- (byte) plexSort::s
  (bool~) plexSort::$5 ← (byte) plexSort::s != (byte/word/signed word/dword/signed dword) 255
  (bool~) plexSort::$6 ← (byte) plexSort::nxt_y < *((byte[PLEX_COUNT]) PLEX_YPOS + *((byte[PLEX_COUNT]) PLEX_SORTED_IDX + (byte) plexSort::s))
  (bool~) plexSort::$7 ← (bool~) plexSort::$5 && (bool~) plexSort::$6
  if((bool~) plexSort::$7) goto plexSort::@3
  to:plexSort::@5
plexSort::@5: scope:[plexSort]  from plexSort::@3
  (byte) plexSort::s ← ++ (byte) plexSort::s
  *((byte[PLEX_COUNT]) PLEX_SORTED_IDX + (byte) plexSort::s) ← (byte) plexSort::nxt_idx
  to:plexSort::@2
plexSort::@6: scope:[plexSort]  from plexSort::@2
  (byte) plex_show_idx ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) plex_sprite_idx ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) plex_sprite_msb ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:plexSort::@return
plexSort::@return: scope:[plexSort]  from plexSort::@6
  return 
  to:@return
@26: scope:[]  from @25
  to:@27
plexShowSprite: scope:[plexShowSprite]  from
  (byte~) plexShowSprite::$0 ← (byte) plex_sprite_idx << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) plexShowSprite::plex_sprite_idx2 ← (byte~) plexShowSprite::$0
  *((byte*) SPRITES_YPOS + (byte) plexShowSprite::plex_sprite_idx2) ← *((byte[PLEX_COUNT]) PLEX_YPOS + *((byte[PLEX_COUNT]) PLEX_SORTED_IDX + (byte) plex_show_idx))
  *((byte*) PLEX_SCREEN_PTR + (byte) plex_sprite_idx) ← *((byte[PLEX_COUNT]) PLEX_PTR + *((byte[PLEX_COUNT]) PLEX_SORTED_IDX + (byte) plex_show_idx))
  (byte~) plexShowSprite::$1 ← *((byte[PLEX_COUNT]) PLEX_SORTED_IDX + (byte) plex_show_idx) << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) plexShowSprite::xpos_idx ← (byte~) plexShowSprite::$1
  (byte~) plexShowSprite::$2 ← < *((word[PLEX_COUNT]) PLEX_XPOS + (byte) plexShowSprite::xpos_idx)
  *((byte*) SPRITES_XPOS + (byte) plexShowSprite::plex_sprite_idx2) ← (byte~) plexShowSprite::$2
  (byte~) plexShowSprite::$3 ← > *((word[PLEX_COUNT]) PLEX_XPOS + (byte) plexShowSprite::xpos_idx)
  (bool~) plexShowSprite::$4 ← (byte~) plexShowSprite::$3 != (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) plexShowSprite::$4) goto plexShowSprite::@1
  to:plexShowSprite::@4
plexShowSprite::@1: scope:[plexShowSprite]  from plexShowSprite plexShowSprite::@5
  *((byte*) SPRITES_XMSB) ← *((byte*) SPRITES_XMSB) | (byte) plex_sprite_msb
  to:plexShowSprite::@2
plexShowSprite::@4: scope:[plexShowSprite]  from plexShowSprite
  (byte/word/dword~) plexShowSprite::$5 ← (byte/word/signed word/dword/signed dword) 255 ^ (byte) plex_sprite_msb
  *((byte*) SPRITES_XMSB) ← *((byte*) SPRITES_XMSB) & (byte/word/dword~) plexShowSprite::$5
  to:plexShowSprite::@2
plexShowSprite::@2: scope:[plexShowSprite]  from plexShowSprite::@1 plexShowSprite::@4
  (byte/signed word/word/dword/signed dword~) plexShowSprite::$6 ← (byte) plex_sprite_idx + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte/word/dword~) plexShowSprite::$7 ← (byte/signed word/word/dword/signed dword~) plexShowSprite::$6 & (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) plex_sprite_idx ← (byte/word/dword~) plexShowSprite::$7
  (byte) plex_show_idx ← ++ (byte) plex_show_idx
  (byte) plex_sprite_msb ← (byte) plex_sprite_msb << (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) plexShowSprite::$8 ← (byte) plex_sprite_msb == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) plexShowSprite::$9 ← ! (bool~) plexShowSprite::$8
  if((bool~) plexShowSprite::$9) goto plexShowSprite::@3
  to:plexShowSprite::@6
plexShowSprite::@5: scope:[plexShowSprite]  from
  to:plexShowSprite::@1
plexShowSprite::@3: scope:[plexShowSprite]  from plexShowSprite::@2 plexShowSprite::@6
  to:plexShowSprite::@return
plexShowSprite::@6: scope:[plexShowSprite]  from plexShowSprite::@2
  (byte) plex_sprite_msb ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:plexShowSprite::@3
plexShowSprite::@return: scope:[plexShowSprite]  from plexShowSprite::@3
  return 
  to:@return
@27: scope:[]  from @26
  to:@28
plexShowNextYpos: scope:[plexShowNextYpos]  from
  (byte) plexShowNextYpos::return ← *((byte[PLEX_COUNT]) PLEX_YPOS + *((byte[PLEX_COUNT]) PLEX_SORTED_IDX + (byte) plex_show_idx))
  to:plexShowNextYpos::@return
plexShowNextYpos::@return: scope:[plexShowNextYpos]  from plexShowNextYpos plexShowNextYpos::@1
  (byte) plexShowNextYpos::return ← (byte) plexShowNextYpos::return
  return (byte) plexShowNextYpos::return
  to:@return
plexShowNextYpos::@1: scope:[plexShowNextYpos]  from
  to:plexShowNextYpos::@return
@28: scope:[]  from @27
  (byte*) SPRITE ← ((byte*)) (word/signed word/dword/signed dword) 8192
  (byte*) SCREEN ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) YSIN ← ((byte*)) (word/signed word/dword/signed dword) 8448
  kickasm(location (byte*) YSIN) {{ .var min = 51
    .var max = 250-21
    .var ampl = max-min;
    .for(var i=0;i<256;i++)
        .byte round(min+(ampl/2)+(ampl/2)*sin(toRadians(360*i/256)))
 }}
  kickasm(location (byte*) SPRITE) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
.for (var y=0; y<21; y++)
    .for (var x=0;x<3; x++)
        .byte pic.getSinglecolorByte(x,y)
 }}
  to:@29
main: scope:[main]  from
  asm { sei  }
  (void~) main::$0 ← call init 
  (void~) main::$1 ← call loop 
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@29: scope:[]  from @28
  to:@30
init: scope:[init]  from
  (byte~) init::$0 ← (byte) VIC_DEN | (byte) VIC_RSEL
  (byte/word/dword~) init::$1 ← (byte~) init::$0 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) D011) ← (byte/word/dword~) init::$1
  (void~) init::$2 ← call plexInit (byte*) SCREEN 
  (word) init::xp ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte/signed word/word/dword/signed dword~) init::$3 ← (byte) PLEX_COUNT - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) init::sx ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:init::@1
init::@1: scope:[init]  from init init::@1
  (byte*~) init::$4 ← (byte*) SPRITE / (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte~) init::$5 ← ((byte)) (byte*~) init::$4
  *((byte[PLEX_COUNT]) PLEX_PTR + (byte) init::sx) ← (byte~) init::$5
  (byte~) init::$6 ← (byte) init::sx << (byte/signed byte/word/signed word/dword/signed dword) 1
  *((word[PLEX_COUNT]) PLEX_XPOS + (byte~) init::$6) ← (word) init::xp
  (word) init::xp ← (word) init::xp + (byte/signed byte/word/signed word/dword/signed dword) 12
  (byte) init::sx ← (byte) init::sx + rangenext(0,init::$3)
  (bool~) init::$7 ← (byte) init::sx != rangelast(0,init::$3)
  if((bool~) init::$7) goto init::@1
  to:init::@3
init::@3: scope:[init]  from init::@1
  *((byte*) SPRITES_ENABLE) ← (byte/word/signed word/dword/signed dword) 255
  (byte) init::ss ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:init::@2
init::@2: scope:[init]  from init::@2 init::@3
  *((byte*) SPRITES_COLS + (byte) init::ss) ← (byte) GREEN
  (byte) init::ss ← (byte) init::ss + rangenext(0,7)
  (bool~) init::$8 ← (byte) init::ss != rangelast(0,7)
  if((bool~) init::$8) goto init::@2
  to:init::@4
init::@4: scope:[init]  from init::@2
  to:init::@return
init::@return: scope:[init]  from init::@4
  return 
  to:@return
@30: scope:[]  from @29
  to:@31
loop: scope:[loop]  from
  (byte) loop::sin_idx ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:loop::@1
loop::@1: scope:[loop]  from loop loop::@23
  if(true) goto loop::@2
  to:loop::@13
loop::@2: scope:[loop]  from loop::@1 loop::@14
  to:loop::@4
loop::@13: scope:[loop]  from loop::@1
  to:loop::@3
loop::@3: scope:[loop]  from loop::@13 loop::@24
  to:loop::@return
loop::@14: scope:[loop]  from
  to:loop::@2
loop::@4: scope:[loop]  from loop::@2 loop::@5
  (bool~) loop::$0 ← *((byte*) RASTER) != (byte/word/signed word/dword/signed dword) 255
  if((bool~) loop::$0) goto loop::@5
  to:loop::@15
loop::@5: scope:[loop]  from loop::@16 loop::@4
  to:loop::@4
loop::@15: scope:[loop]  from loop::@4
  to:loop::@6
loop::@6: scope:[loop]  from loop::@15 loop::@17
  *((byte*) BORDERCOL) ← ++ *((byte*) BORDERCOL)
  (byte) loop::y_idx ← (byte) loop::sin_idx
  (byte/signed word/word/dword/signed dword~) loop::$1 ← (byte) PLEX_COUNT - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) loop::sy ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:loop::@7
loop::@16: scope:[loop]  from
  to:loop::@5
loop::@17: scope:[loop]  from
  to:loop::@6
loop::@7: scope:[loop]  from loop::@6 loop::@7
  *((byte[PLEX_COUNT]) PLEX_YPOS + (byte) loop::sy) ← *((byte*) YSIN + (byte) loop::y_idx)
  (byte) loop::y_idx ← (byte) loop::y_idx + (byte/signed byte/word/signed word/dword/signed dword) 10
  (byte) loop::sy ← (byte) loop::sy + rangenext(0,loop::$1)
  (bool~) loop::$2 ← (byte) loop::sy != rangelast(0,loop::$1)
  if((bool~) loop::$2) goto loop::@7
  to:loop::@18
loop::@18: scope:[loop]  from loop::@7
  (byte) loop::sin_idx ← (byte) loop::sin_idx + (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*) BORDERCOL) ← ++ *((byte*) BORDERCOL)
  (void~) loop::$3 ← call plexSort 
  *((byte*) BORDERCOL) ← ++ *((byte*) BORDERCOL)
  (byte) loop::ss ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:loop::@8
loop::@8: scope:[loop]  from loop::@18 loop::@8
  (void~) loop::$4 ← call plexShowSprite 
  (byte) loop::ss ← (byte) loop::ss + rangenext(0,7)
  (bool~) loop::$5 ← (byte) loop::ss != rangelast(0,7)
  if((bool~) loop::$5) goto loop::@8
  to:loop::@19
loop::@19: scope:[loop]  from loop::@8
  (byte/signed word/word/dword/signed dword~) loop::$6 ← (byte) PLEX_COUNT - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) loop::ss ← (byte/signed byte/word/signed word/dword/signed dword) 8
  to:loop::@9
loop::@9: scope:[loop]  from loop::@12 loop::@19
  *((byte*) BORDERCOL) ← (byte) BLACK
  (byte~) loop::$7 ← call plexShowNextYpos 
  (byte/signed word/word/dword/signed dword~) loop::$8 ← (byte~) loop::$7 - (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) loop::rasterY ← (byte/signed word/word/dword/signed dword~) loop::$8
  to:loop::@10
loop::@10: scope:[loop]  from loop::@11 loop::@9
  (bool~) loop::$9 ← *((byte*) RASTER) < (byte) loop::rasterY
  if((bool~) loop::$9) goto loop::@11
  to:loop::@20
loop::@11: scope:[loop]  from loop::@10 loop::@21
  to:loop::@10
loop::@20: scope:[loop]  from loop::@10
  to:loop::@12
loop::@12: scope:[loop]  from loop::@20 loop::@22
  *((byte*) BORDERCOL) ← ++ *((byte*) BORDERCOL)
  (void~) loop::$10 ← call plexShowSprite 
  (byte) loop::ss ← (byte) loop::ss + rangenext(8,loop::$6)
  (bool~) loop::$11 ← (byte) loop::ss != rangelast(8,loop::$6)
  if((bool~) loop::$11) goto loop::@9
  to:loop::@23
loop::@21: scope:[loop]  from
  to:loop::@11
loop::@22: scope:[loop]  from
  to:loop::@12
loop::@23: scope:[loop]  from loop::@12
  *((byte*) BORDERCOL) ← (byte) BLACK
  to:loop::@1
loop::@24: scope:[loop]  from
  to:loop::@3
loop::@return: scope:[loop]  from loop::@3
  return 
  to:@return
@31: scope:[]  from @30
  call main 
  to:@end
@end: scope:[]  from @31

Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call call plexSetScreen (byte*) plexInit::screen 
Inlined call (byte~) loop::$7 ← call plexShowNextYpos 
Removing unused procedure toD018
Removing unused procedure toDd00
Removing unused procedure vicSelectGfxBank
Removing unused procedure div8s
Removing unused procedure div16s
Removing unused procedure mul8s
Removing unused procedure mul8su
Removing unused procedure sin16s_gen
Removing unused procedure sin16s_gen2
Removing unused procedure sin8s_gen
Removing unused procedure plexSetScreen
Removing unused procedure plexShowNextYpos
Removing unused procedure div8u
Removing unused procedure div16u
Removing unused procedure div32u16u
Removing unused procedure divr16s
Removing unused procedure mul16s
Removing unused procedure sin16s
Removing unused procedure sin8s
Removing unused procedure divr8u
Removing unused procedure divr16u
Removing unused procedure mulu16_sel
Removing unused procedure mulu8_sel
Removing unused procedure mul8u
Removing unused procedure mul16u
Eliminating unused variable (byte*) PROCPORT_DDR and assignment [0] (byte*) PROCPORT_DDR ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 0
Eliminating unused variable (byte) PROCPORT_DDR_MEMORY_MASK and assignment [1] (byte) PROCPORT_DDR_MEMORY_MASK ← (byte/signed byte/word/signed word/dword/signed dword) 7
Eliminating unused variable (byte*) PROCPORT and assignment [2] (byte*) PROCPORT ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 1
Eliminating unused variable (byte) PROCPORT_RAM_ALL and assignment [3] (byte) PROCPORT_RAM_ALL ← (byte/signed byte/word/signed word/dword/signed dword) 48
Eliminating unused variable (byte) PROCPORT_RAM_IO and assignment [4] (byte) PROCPORT_RAM_IO ← (byte/signed byte/word/signed word/dword/signed dword) 53
Eliminating unused variable (byte) PROCPORT_RAM_CHARROM and assignment [5] (byte) PROCPORT_RAM_CHARROM ← (byte/signed byte/word/signed word/dword/signed dword) 49
Eliminating unused variable (byte) PROCPORT_KERNEL_IO and assignment [6] (byte) PROCPORT_KERNEL_IO ← (byte/signed byte/word/signed word/dword/signed dword) 54
Eliminating unused variable (byte) PROCPORT_BASIC_KERNEL_IO and assignment [7] (byte) PROCPORT_BASIC_KERNEL_IO ← (byte/signed byte/word/signed word/dword/signed dword) 55
Eliminating unused variable (byte*) CHARGEN and assignment [8] (byte*) CHARGEN ← ((byte*)) (word/dword/signed dword) 53248
Eliminating unused variable (byte*) SPRITES_EXPAND_Y and assignment [14] (byte*) SPRITES_EXPAND_Y ← ((byte*)) (word/dword/signed dword) 53271
Eliminating unused variable (byte*) SPRITES_PRIORITY and assignment [15] (byte*) SPRITES_PRIORITY ← ((byte*)) (word/dword/signed dword) 53275
Eliminating unused variable (byte*) SPRITES_MC and assignment [16] (byte*) SPRITES_MC ← ((byte*)) (word/dword/signed dword) 53276
Eliminating unused variable (byte*) SPRITES_EXPAND_X and assignment [17] (byte*) SPRITES_EXPAND_X ← ((byte*)) (word/dword/signed dword) 53277
Eliminating unused variable (byte*) BGCOL and assignment [19] (byte*) BGCOL ← ((byte*)) (word/dword/signed dword) 53281
Eliminating unused variable (byte*) BGCOL1 and assignment [20] (byte*) BGCOL1 ← ((byte*)) (word/dword/signed dword) 53281
Eliminating unused variable (byte*) BGCOL2 and assignment [21] (byte*) BGCOL2 ← ((byte*)) (word/dword/signed dword) 53282
Eliminating unused variable (byte*) BGCOL3 and assignment [22] (byte*) BGCOL3 ← ((byte*)) (word/dword/signed dword) 53283
Eliminating unused variable (byte*) BGCOL4 and assignment [23] (byte*) BGCOL4 ← ((byte*)) (word/dword/signed dword) 53284
Eliminating unused variable (byte*) SPRITES_MC1 and assignment [24] (byte*) SPRITES_MC1 ← ((byte*)) (word/dword/signed dword) 53285
Eliminating unused variable (byte*) SPRITES_MC2 and assignment [25] (byte*) SPRITES_MC2 ← ((byte*)) (word/dword/signed dword) 53286
Eliminating unused variable (byte*) VIC_CONTROL and assignment [27] (byte*) VIC_CONTROL ← ((byte*)) (word/dword/signed dword) 53265
Eliminating unused variable (byte) VIC_RST8 and assignment [29] (byte) VIC_RST8 ← (byte/word/signed word/dword/signed dword) 128
Eliminating unused variable (byte) VIC_ECM and assignment [30] (byte) VIC_ECM ← (byte/signed byte/word/signed word/dword/signed dword) 64
Eliminating unused variable (byte) VIC_BMM and assignment [31] (byte) VIC_BMM ← (byte/signed byte/word/signed word/dword/signed dword) 32
Eliminating unused variable (byte*) VIC_CONTROL2 and assignment [34] (byte*) VIC_CONTROL2 ← ((byte*)) (word/dword/signed dword) 53270
Eliminating unused variable (byte*) D016 and assignment [35] (byte*) D016 ← ((byte*)) (word/dword/signed dword) 53270
Eliminating unused variable (byte) VIC_MCM and assignment [36] (byte) VIC_MCM ← (byte/signed byte/word/signed word/dword/signed dword) 16
Eliminating unused variable (byte) VIC_CSEL and assignment [37] (byte) VIC_CSEL ← (byte/signed byte/word/signed word/dword/signed dword) 8
Eliminating unused variable (byte*) D018 and assignment [38] (byte*) D018 ← ((byte*)) (word/dword/signed dword) 53272
Eliminating unused variable (byte*) VIC_MEMORY and assignment [39] (byte*) VIC_MEMORY ← ((byte*)) (word/dword/signed dword) 53272
Eliminating unused variable (byte*) COLS and assignment [40] (byte*) COLS ← ((byte*)) (word/dword/signed dword) 55296
Eliminating unused variable (byte*) CIA1_PORT_A and assignment [41] (byte*) CIA1_PORT_A ← ((byte*)) (word/dword/signed dword) 56320
Eliminating unused variable (byte*) CIA1_PORT_B and assignment [42] (byte*) CIA1_PORT_B ← ((byte*)) (word/dword/signed dword) 56321
Eliminating unused variable (byte*) CIA1_PORT_A_DDR and assignment [43] (byte*) CIA1_PORT_A_DDR ← ((byte*)) (word/dword/signed dword) 56322
Eliminating unused variable (byte*) CIA1_PORT_B_DDR and assignment [44] (byte*) CIA1_PORT_B_DDR ← ((byte*)) (word/dword/signed dword) 56323
Eliminating unused variable (byte*) CIA2_PORT_A and assignment [45] (byte*) CIA2_PORT_A ← ((byte*)) (word/dword/signed dword) 56576
Eliminating unused variable (byte*) CIA2_PORT_B and assignment [46] (byte*) CIA2_PORT_B ← ((byte*)) (word/dword/signed dword) 56577
Eliminating unused variable (byte*) CIA2_PORT_A_DDR and assignment [47] (byte*) CIA2_PORT_A_DDR ← ((byte*)) (word/dword/signed dword) 56578
Eliminating unused variable (byte*) CIA2_PORT_B_DDR and assignment [48] (byte*) CIA2_PORT_B_DDR ← ((byte*)) (word/dword/signed dword) 56579
Eliminating unused variable (byte) WHITE and assignment [50] (byte) WHITE ← (byte/signed byte/word/signed word/dword/signed dword) 1
Eliminating unused variable (byte) RED and assignment [51] (byte) RED ← (byte/signed byte/word/signed word/dword/signed dword) 2
Eliminating unused variable (byte) CYAN and assignment [52] (byte) CYAN ← (byte/signed byte/word/signed word/dword/signed dword) 3
Eliminating unused variable (byte) PURPLE and assignment [53] (byte) PURPLE ← (byte/signed byte/word/signed word/dword/signed dword) 4
Eliminating unused variable (byte) BLUE and assignment [55] (byte) BLUE ← (byte/signed byte/word/signed word/dword/signed dword) 6
Eliminating unused variable (byte) YELLOW and assignment [56] (byte) YELLOW ← (byte/signed byte/word/signed word/dword/signed dword) 7
Eliminating unused variable (byte) ORANGE and assignment [57] (byte) ORANGE ← (byte/signed byte/word/signed word/dword/signed dword) 8
Eliminating unused variable (byte) BROWN and assignment [58] (byte) BROWN ← (byte/signed byte/word/signed word/dword/signed dword) 9
Eliminating unused variable (byte) PINK and assignment [59] (byte) PINK ← (byte/signed byte/word/signed word/dword/signed dword) 10
Eliminating unused variable (byte) DARK_GREY and assignment [60] (byte) DARK_GREY ← (byte/signed byte/word/signed word/dword/signed dword) 11
Eliminating unused variable (byte) GREY and assignment [61] (byte) GREY ← (byte/signed byte/word/signed word/dword/signed dword) 12
Eliminating unused variable (byte) LIGHT_GREEN and assignment [62] (byte) LIGHT_GREEN ← (byte/signed byte/word/signed word/dword/signed dword) 13
Eliminating unused variable (byte) LIGHT_BLUE and assignment [63] (byte) LIGHT_BLUE ← (byte/signed byte/word/signed word/dword/signed dword) 14
Eliminating unused variable (byte) LIGHT_GREY and assignment [64] (byte) LIGHT_GREY ← (byte/signed byte/word/signed word/dword/signed dword) 15
Eliminating unused variable (byte) rem8u and assignment [65] (byte) rem8u ← (byte/signed byte/word/signed word/dword/signed dword) 0
Eliminating unused variable (word) rem16u and assignment [66] (word) rem16u ← (byte/signed byte/word/signed word/dword/signed dword) 0
Eliminating unused variable (signed byte) rem8s and assignment [67] (signed byte) rem8s ← (byte/signed byte/word/signed word/dword/signed dword) 0
Eliminating unused variable (signed word) rem16s and assignment [68] (signed word) rem16s ← (byte/signed byte/word/signed word/dword/signed dword) 0
Eliminating unused variable (dword) PI2_u4f28 and assignment [69] (dword) PI2_u4f28 ← (dword/signed dword) 1686629713
Eliminating unused variable (dword) PI_u4f28 and assignment [70] (dword) PI_u4f28 ← (dword/signed dword) 843314857
Eliminating unused variable (dword) PI_HALF_u4f28 and assignment [71] (dword) PI_HALF_u4f28 ← (dword/signed dword) 421657428
Eliminating unused variable (word) PI2_u4f12 and assignment [72] (word) PI2_u4f12 ← (word/signed word/dword/signed dword) 25736
Eliminating unused variable (word) PI_u4f12 and assignment [73] (word) PI_u4f12 ← (word/signed word/dword/signed dword) 12868
Eliminating unused variable (word) PI_HALF_u4f12 and assignment [74] (word) PI_HALF_u4f12 ← (word/signed word/dword/signed dword) 6434
Eliminating unused variable - keeping the call (void~) main::$0
Eliminating unused variable - keeping the call (void~) main::$1
Eliminating unused variable - keeping the call (void~) init::$2
Eliminating unused variable - keeping the call (void~) loop::$3
Eliminating unused variable - keeping the call (void~) loop::$4
Eliminating unused variable - keeping the call (void~) loop::$10
Removing empty block @1
Removing empty block @2
Removing empty block @3
Removing empty block @4
Removing empty block @5
Removing empty block @6
Removing empty block @7
Removing empty block @8
Removing empty block @9
Removing empty block @10
Removing empty block @11
Removing empty block @12
Removing empty block @13
Removing empty block @14
Removing empty block @15
Removing empty block @16
Removing empty block @17
Removing empty block @18
Removing empty block @19
Removing empty block @20
Removing empty block @21
Removing empty block @22
Removing empty block plexInit::plexSetScreen1_@return
Removing empty block plexInit::@2
Removing empty block @24
Removing empty block @25
Removing empty block @26
Removing empty block plexShowSprite::@5
Removing empty block @27
Removing empty block @29
Removing empty block init::@4
Removing empty block @30
Removing empty block loop::@13
Removing empty block loop::@3
Removing empty block loop::@14
Removing empty block loop::@15
Removing empty block loop::@16
Removing empty block loop::@17
Removing empty block loop::plexShowNextYpos1_@1
Removing empty block loop::@20
Removing empty block loop::@21
Removing empty block loop::@22
Removing empty block loop::@24
PROCEDURE MODIFY VARIABLE ANALYSIS
plexInit modifies PLEX_SCREEN_PTR
plexSort modifies plex_show_idx
plexSort modifies plex_sprite_idx
plexSort modifies plex_sprite_msb
plexShowSprite modifies plex_sprite_idx
plexShowSprite modifies plex_show_idx
plexShowSprite modifies plex_sprite_msb
main modifies PLEX_SCREEN_PTR
main modifies plex_show_idx
main modifies plex_sprite_idx
main modifies plex_sprite_msb
init modifies PLEX_SCREEN_PTR
loop modifies plex_show_idx
loop modifies plex_sprite_idx
loop modifies plex_sprite_msb

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SPRITES_XPOS#0 ← ((byte*)) (word/dword/signed dword) 53248
  (byte*) SPRITES_YPOS#0 ← ((byte*)) (word/dword/signed dword) 53249
  (byte*) SPRITES_XMSB#0 ← ((byte*)) (word/dword/signed dword) 53264
  (byte*) RASTER#0 ← ((byte*)) (word/dword/signed dword) 53266
  (byte*) SPRITES_ENABLE#0 ← ((byte*)) (word/dword/signed dword) 53269
  (byte*) BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) 53280
  (byte*) SPRITES_COLS#0 ← ((byte*)) (word/dword/signed dword) 53287
  (byte*) D011#0 ← ((byte*)) (word/dword/signed dword) 53265
  (byte) VIC_DEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) VIC_RSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) BLACK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) GREEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 5
  to:@23
@23: scope:[]  from @begin
  (byte) PLEX_COUNT#0 ← (byte/signed byte/word/signed word/dword/signed dword) 24
  (word[PLEX_COUNT#0]) PLEX_XPOS#0 ← { fill( PLEX_COUNT#0, 0) }
  (byte[PLEX_COUNT#0]) PLEX_YPOS#0 ← { fill( PLEX_COUNT#0, 0) }
  (byte[PLEX_COUNT#0]) PLEX_PTR#0 ← { fill( PLEX_COUNT#0, 0) }
  (word/signed word/dword/signed dword~) $0 ← (word/signed word/dword/signed dword) 1024 + (word/signed word/dword/signed dword) 1016
  (byte*) PLEX_SCREEN_PTR#0 ← ((byte*)) (word/signed word/dword/signed dword~) $0
  (byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 ← { fill( PLEX_COUNT#0, 0) }
  (byte) plex_show_idx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) plex_sprite_idx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) plex_sprite_msb#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:@28
plexInit: scope:[plexInit]  from init
  (byte*) plexInit::screen#1 ← phi( init/(byte*) plexInit::screen#0 )
  (byte*) plexInit::plexSetScreen1_screen#0 ← (byte*) plexInit::screen#1
  to:plexInit::plexSetScreen1
plexInit::plexSetScreen1: scope:[plexInit]  from plexInit
  (byte*) plexInit::plexSetScreen1_screen#1 ← phi( plexInit/(byte*) plexInit::plexSetScreen1_screen#0 )
  (byte*) plexInit::plexSetScreen1_$0#0 ← (byte*) plexInit::plexSetScreen1_screen#1 + (word/signed word/dword/signed dword) 1016
  (byte*) PLEX_SCREEN_PTR#1 ← (byte*) plexInit::plexSetScreen1_$0#0
  to:plexInit::@3
plexInit::@3: scope:[plexInit]  from plexInit::plexSetScreen1
  (byte*) PLEX_SCREEN_PTR#23 ← phi( plexInit::plexSetScreen1/(byte*) PLEX_SCREEN_PTR#1 )
  (byte/signed word/word/dword/signed dword~) plexInit::$1 ← (byte) PLEX_COUNT#0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) plexInit::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:plexInit::@1
plexInit::@1: scope:[plexInit]  from plexInit::@1 plexInit::@3
  (byte*) PLEX_SCREEN_PTR#15 ← phi( plexInit::@1/(byte*) PLEX_SCREEN_PTR#15 plexInit::@3/(byte*) PLEX_SCREEN_PTR#23 )
  (byte) plexInit::i#2 ← phi( plexInit::@1/(byte) plexInit::i#1 plexInit::@3/(byte) plexInit::i#0 )
  *((byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexInit::i#2) ← (byte) plexInit::i#2
  (byte) plexInit::i#1 ← (byte) plexInit::i#2 + rangenext(0,plexInit::$1)
  (bool~) plexInit::$2 ← (byte) plexInit::i#1 != rangelast(0,plexInit::$1)
  if((bool~) plexInit::$2) goto plexInit::@1
  to:plexInit::@return
plexInit::@return: scope:[plexInit]  from plexInit::@1
  (byte*) PLEX_SCREEN_PTR#8 ← phi( plexInit::@1/(byte*) PLEX_SCREEN_PTR#15 )
  (byte*) PLEX_SCREEN_PTR#2 ← (byte*) PLEX_SCREEN_PTR#8
  return 
  to:@return
plexSort: scope:[plexSort]  from loop::@18
  (byte/signed word/word/dword/signed dword~) plexSort::$0 ← (byte) PLEX_COUNT#0 - (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) plexSort::m#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:plexSort::@1
plexSort::@1: scope:[plexSort]  from plexSort plexSort::@2
  (byte) plexSort::m#2 ← phi( plexSort/(byte) plexSort::m#0 plexSort::@2/(byte) plexSort::m#1 )
  (byte/signed word/word/dword/signed dword~) plexSort::$1 ← (byte) plexSort::m#2 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) plexSort::nxt_idx#0 ← *((byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte/signed word/word/dword/signed dword~) plexSort::$1)
  (byte) plexSort::nxt_y#0 ← *((byte[PLEX_COUNT#0]) PLEX_YPOS#0 + (byte) plexSort::nxt_idx#0)
  (bool~) plexSort::$2 ← (byte) plexSort::nxt_y#0 < *((byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::m#2))
  (bool~) plexSort::$3 ← ! (bool~) plexSort::$2
  if((bool~) plexSort::$3) goto plexSort::@2
  to:plexSort::@4
plexSort::@2: scope:[plexSort]  from plexSort::@1 plexSort::@5
  (byte) plexSort::m#3 ← phi( plexSort::@1/(byte) plexSort::m#2 plexSort::@5/(byte) plexSort::m#5 )
  (byte) plexSort::m#1 ← (byte) plexSort::m#3 + rangenext(0,plexSort::$0)
  (bool~) plexSort::$8 ← (byte) plexSort::m#1 != rangelast(0,plexSort::$0)
  if((bool~) plexSort::$8) goto plexSort::@1
  to:plexSort::@6
plexSort::@4: scope:[plexSort]  from plexSort::@1
  (byte) plexSort::nxt_idx#3 ← phi( plexSort::@1/(byte) plexSort::nxt_idx#0 )
  (byte) plexSort::nxt_y#2 ← phi( plexSort::@1/(byte) plexSort::nxt_y#0 )
  (byte) plexSort::m#4 ← phi( plexSort::@1/(byte) plexSort::m#2 )
  (byte) plexSort::s#0 ← (byte) plexSort::m#4
  to:plexSort::@3
plexSort::@3: scope:[plexSort]  from plexSort::@3 plexSort::@4
  (byte) plexSort::m#6 ← phi( plexSort::@3/(byte) plexSort::m#6 plexSort::@4/(byte) plexSort::m#4 )
  (byte) plexSort::nxt_idx#2 ← phi( plexSort::@3/(byte) plexSort::nxt_idx#2 plexSort::@4/(byte) plexSort::nxt_idx#3 )
  (byte) plexSort::nxt_y#1 ← phi( plexSort::@3/(byte) plexSort::nxt_y#1 plexSort::@4/(byte) plexSort::nxt_y#2 )
  (byte) plexSort::s#3 ← phi( plexSort::@3/(byte) plexSort::s#1 plexSort::@4/(byte) plexSort::s#0 )
  (byte/signed word/word/dword/signed dword~) plexSort::$4 ← (byte) plexSort::s#3 + (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte/signed word/word/dword/signed dword~) plexSort::$4) ← *((byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::s#3)
  (byte) plexSort::s#1 ← -- (byte) plexSort::s#3
  (bool~) plexSort::$5 ← (byte) plexSort::s#1 != (byte/word/signed word/dword/signed dword) 255
  (bool~) plexSort::$6 ← (byte) plexSort::nxt_y#1 < *((byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::s#1))
  (bool~) plexSort::$7 ← (bool~) plexSort::$5 && (bool~) plexSort::$6
  if((bool~) plexSort::$7) goto plexSort::@3
  to:plexSort::@5
plexSort::@5: scope:[plexSort]  from plexSort::@3
  (byte) plexSort::m#5 ← phi( plexSort::@3/(byte) plexSort::m#6 )
  (byte) plexSort::nxt_idx#1 ← phi( plexSort::@3/(byte) plexSort::nxt_idx#2 )
  (byte) plexSort::s#4 ← phi( plexSort::@3/(byte) plexSort::s#1 )
  (byte) plexSort::s#2 ← ++ (byte) plexSort::s#4
  *((byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::s#2) ← (byte) plexSort::nxt_idx#1
  to:plexSort::@2
plexSort::@6: scope:[plexSort]  from plexSort::@2
  (byte) plex_show_idx#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) plex_sprite_idx#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) plex_sprite_msb#1 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:plexSort::@return
plexSort::@return: scope:[plexSort]  from plexSort::@6
  (byte) plex_sprite_msb#13 ← phi( plexSort::@6/(byte) plex_sprite_msb#1 )
  (byte) plex_sprite_idx#12 ← phi( plexSort::@6/(byte) plex_sprite_idx#1 )
  (byte) plex_show_idx#12 ← phi( plexSort::@6/(byte) plex_show_idx#1 )
  (byte) plex_show_idx#2 ← (byte) plex_show_idx#12
  (byte) plex_sprite_idx#2 ← (byte) plex_sprite_idx#12
  (byte) plex_sprite_msb#2 ← (byte) plex_sprite_msb#13
  return 
  to:@return
plexShowSprite: scope:[plexShowSprite]  from loop::@12 loop::@8
  (byte) plex_sprite_msb#25 ← phi( loop::@12/(byte) plex_sprite_msb#30 loop::@8/(byte) plex_sprite_msb#29 )
  (byte*) PLEX_SCREEN_PTR#9 ← phi( loop::@12/(byte*) PLEX_SCREEN_PTR#16 loop::@8/(byte*) PLEX_SCREEN_PTR#17 )
  (byte) plex_show_idx#13 ← phi( loop::@12/(byte) plex_show_idx#24 loop::@8/(byte) plex_show_idx#25 )
  (byte) plex_sprite_idx#13 ← phi( loop::@12/(byte) plex_sprite_idx#23 loop::@8/(byte) plex_sprite_idx#24 )
  (byte~) plexShowSprite::$0 ← (byte) plex_sprite_idx#13 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) plexShowSprite::plex_sprite_idx2#0 ← (byte~) plexShowSprite::$0
  *((byte*) SPRITES_YPOS#0 + (byte) plexShowSprite::plex_sprite_idx2#0) ← *((byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#13))
  *((byte*) PLEX_SCREEN_PTR#9 + (byte) plex_sprite_idx#13) ← *((byte[PLEX_COUNT#0]) PLEX_PTR#0 + *((byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#13))
  (byte~) plexShowSprite::$1 ← *((byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#13) << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) plexShowSprite::xpos_idx#0 ← (byte~) plexShowSprite::$1
  (byte~) plexShowSprite::$2 ← < *((word[PLEX_COUNT#0]) PLEX_XPOS#0 + (byte) plexShowSprite::xpos_idx#0)
  *((byte*) SPRITES_XPOS#0 + (byte) plexShowSprite::plex_sprite_idx2#0) ← (byte~) plexShowSprite::$2
  (byte~) plexShowSprite::$3 ← > *((word[PLEX_COUNT#0]) PLEX_XPOS#0 + (byte) plexShowSprite::xpos_idx#0)
  (bool~) plexShowSprite::$4 ← (byte~) plexShowSprite::$3 != (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) plexShowSprite::$4) goto plexShowSprite::@1
  to:plexShowSprite::@4
plexShowSprite::@1: scope:[plexShowSprite]  from plexShowSprite
  (byte) plex_show_idx#26 ← phi( plexShowSprite/(byte) plex_show_idx#13 )
  (byte) plex_sprite_idx#25 ← phi( plexShowSprite/(byte) plex_sprite_idx#13 )
  (byte) plex_sprite_msb#14 ← phi( plexShowSprite/(byte) plex_sprite_msb#25 )
  *((byte*) SPRITES_XMSB#0) ← *((byte*) SPRITES_XMSB#0) | (byte) plex_sprite_msb#14
  to:plexShowSprite::@2
plexShowSprite::@4: scope:[plexShowSprite]  from plexShowSprite
  (byte) plex_show_idx#27 ← phi( plexShowSprite/(byte) plex_show_idx#13 )
  (byte) plex_sprite_idx#26 ← phi( plexShowSprite/(byte) plex_sprite_idx#13 )
  (byte) plex_sprite_msb#15 ← phi( plexShowSprite/(byte) plex_sprite_msb#25 )
  (byte/word/dword~) plexShowSprite::$5 ← (byte/word/signed word/dword/signed dword) 255 ^ (byte) plex_sprite_msb#15
  *((byte*) SPRITES_XMSB#0) ← *((byte*) SPRITES_XMSB#0) & (byte/word/dword~) plexShowSprite::$5
  to:plexShowSprite::@2
plexShowSprite::@2: scope:[plexShowSprite]  from plexShowSprite::@1 plexShowSprite::@4
  (byte) plex_sprite_msb#16 ← phi( plexShowSprite::@1/(byte) plex_sprite_msb#14 plexShowSprite::@4/(byte) plex_sprite_msb#15 )
  (byte) plex_show_idx#14 ← phi( plexShowSprite::@1/(byte) plex_show_idx#26 plexShowSprite::@4/(byte) plex_show_idx#27 )
  (byte) plex_sprite_idx#14 ← phi( plexShowSprite::@1/(byte) plex_sprite_idx#25 plexShowSprite::@4/(byte) plex_sprite_idx#26 )
  (byte/signed word/word/dword/signed dword~) plexShowSprite::$6 ← (byte) plex_sprite_idx#14 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte/word/dword~) plexShowSprite::$7 ← (byte/signed word/word/dword/signed dword~) plexShowSprite::$6 & (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte) plex_sprite_idx#3 ← (byte/word/dword~) plexShowSprite::$7
  (byte) plex_show_idx#3 ← ++ (byte) plex_show_idx#14
  (byte) plex_sprite_msb#3 ← (byte) plex_sprite_msb#16 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) plexShowSprite::$8 ← (byte) plex_sprite_msb#3 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) plexShowSprite::$9 ← ! (bool~) plexShowSprite::$8
  if((bool~) plexShowSprite::$9) goto plexShowSprite::@3
  to:plexShowSprite::@6
plexShowSprite::@3: scope:[plexShowSprite]  from plexShowSprite::@2
  (byte) plex_sprite_msb#26 ← phi( plexShowSprite::@2/(byte) plex_sprite_msb#3 )
  (byte) plex_show_idx#28 ← phi( plexShowSprite::@2/(byte) plex_show_idx#3 )
  (byte) plex_sprite_idx#27 ← phi( plexShowSprite::@2/(byte) plex_sprite_idx#3 )
  to:plexShowSprite::@return
plexShowSprite::@6: scope:[plexShowSprite]  from plexShowSprite::@2
  (byte) plex_show_idx#29 ← phi( plexShowSprite::@2/(byte) plex_show_idx#3 )
  (byte) plex_sprite_idx#28 ← phi( plexShowSprite::@2/(byte) plex_sprite_idx#3 )
  (byte) plex_sprite_msb#4 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:plexShowSprite::@return
plexShowSprite::@return: scope:[plexShowSprite]  from plexShowSprite::@3 plexShowSprite::@6
  (byte) plex_sprite_msb#17 ← phi( plexShowSprite::@3/(byte) plex_sprite_msb#26 plexShowSprite::@6/(byte) plex_sprite_msb#4 )
  (byte) plex_show_idx#15 ← phi( plexShowSprite::@3/(byte) plex_show_idx#28 plexShowSprite::@6/(byte) plex_show_idx#29 )
  (byte) plex_sprite_idx#15 ← phi( plexShowSprite::@3/(byte) plex_sprite_idx#27 plexShowSprite::@6/(byte) plex_sprite_idx#28 )
  (byte) plex_sprite_idx#4 ← (byte) plex_sprite_idx#15
  (byte) plex_show_idx#4 ← (byte) plex_show_idx#15
  (byte) plex_sprite_msb#5 ← (byte) plex_sprite_msb#17
  return 
  to:@return
@28: scope:[]  from @23
  (byte) plex_sprite_msb#38 ← phi( @23/(byte) plex_sprite_msb#0 )
  (byte) plex_sprite_idx#38 ← phi( @23/(byte) plex_sprite_idx#0 )
  (byte) plex_show_idx#41 ← phi( @23/(byte) plex_show_idx#0 )
  (byte*) PLEX_SCREEN_PTR#28 ← phi( @23/(byte*) PLEX_SCREEN_PTR#0 )
  (byte*) SPRITE#0 ← ((byte*)) (word/signed word/dword/signed dword) 8192
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) YSIN#0 ← ((byte*)) (word/signed word/dword/signed dword) 8448
  kickasm(location (byte*) YSIN#0) {{ .var min = 51
    .var max = 250-21
    .var ampl = max-min;
    .for(var i=0;i<256;i++)
        .byte round(min+(ampl/2)+(ampl/2)*sin(toRadians(360*i/256)))
 }}
  kickasm(location (byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
.for (var y=0; y<21; y++)
    .for (var x=0;x<3; x++)
        .byte pic.getSinglecolorByte(x,y)
 }}
  to:@31
main: scope:[main]  from @31
  (byte*) YSIN#11 ← phi( @31/(byte*) YSIN#13 )
  (byte*) SPRITE#4 ← phi( @31/(byte*) SPRITE#5 )
  (byte) plex_sprite_msb#33 ← phi( @31/(byte) plex_sprite_msb#32 )
  (byte) plex_sprite_idx#33 ← phi( @31/(byte) plex_sprite_idx#32 )
  (byte) plex_show_idx#35 ← phi( @31/(byte) plex_show_idx#34 )
  (byte*) SCREEN#2 ← phi( @31/(byte*) SCREEN#3 )
  (byte*) PLEX_SCREEN_PTR#18 ← phi( @31/(byte*) PLEX_SCREEN_PTR#22 )
  asm { sei  }
  call init 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) YSIN#9 ← phi( main/(byte*) YSIN#11 )
  (byte) plex_sprite_msb#27 ← phi( main/(byte) plex_sprite_msb#33 )
  (byte) plex_sprite_idx#29 ← phi( main/(byte) plex_sprite_idx#33 )
  (byte) plex_show_idx#30 ← phi( main/(byte) plex_show_idx#35 )
  (byte*) PLEX_SCREEN_PTR#10 ← phi( main/(byte*) PLEX_SCREEN_PTR#6 )
  (byte*) PLEX_SCREEN_PTR#3 ← (byte*) PLEX_SCREEN_PTR#10
  call loop 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) PLEX_SCREEN_PTR#19 ← phi( main::@1/(byte*) PLEX_SCREEN_PTR#3 )
  (byte) plex_sprite_msb#18 ← phi( main::@1/(byte) plex_sprite_msb#11 )
  (byte) plex_sprite_idx#16 ← phi( main::@1/(byte) plex_sprite_idx#10 )
  (byte) plex_show_idx#16 ← phi( main::@1/(byte) plex_show_idx#10 )
  (byte) plex_show_idx#5 ← (byte) plex_show_idx#16
  (byte) plex_sprite_idx#5 ← (byte) plex_sprite_idx#16
  (byte) plex_sprite_msb#6 ← (byte) plex_sprite_msb#18
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte) plex_sprite_msb#19 ← phi( main::@2/(byte) plex_sprite_msb#6 )
  (byte) plex_sprite_idx#17 ← phi( main::@2/(byte) plex_sprite_idx#5 )
  (byte) plex_show_idx#17 ← phi( main::@2/(byte) plex_show_idx#5 )
  (byte*) PLEX_SCREEN_PTR#11 ← phi( main::@2/(byte*) PLEX_SCREEN_PTR#19 )
  (byte*) PLEX_SCREEN_PTR#4 ← (byte*) PLEX_SCREEN_PTR#11
  (byte) plex_show_idx#6 ← (byte) plex_show_idx#17
  (byte) plex_sprite_idx#6 ← (byte) plex_sprite_idx#17
  (byte) plex_sprite_msb#7 ← (byte) plex_sprite_msb#19
  return 
  to:@return
init: scope:[init]  from main
  (byte*) SPRITE#3 ← phi( main/(byte*) SPRITE#4 )
  (byte*) PLEX_SCREEN_PTR#20 ← phi( main/(byte*) PLEX_SCREEN_PTR#18 )
  (byte*) SCREEN#1 ← phi( main/(byte*) SCREEN#2 )
  (byte~) init::$0 ← (byte) VIC_DEN#0 | (byte) VIC_RSEL#0
  (byte/word/dword~) init::$1 ← (byte~) init::$0 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) D011#0) ← (byte/word/dword~) init::$1
  (byte*) plexInit::screen#0 ← (byte*) SCREEN#1
  call plexInit 
  to:init::@5
init::@5: scope:[init]  from init
  (byte*) SPRITE#2 ← phi( init/(byte*) SPRITE#3 )
  (byte*) PLEX_SCREEN_PTR#12 ← phi( init/(byte*) PLEX_SCREEN_PTR#2 )
  (byte*) PLEX_SCREEN_PTR#5 ← (byte*) PLEX_SCREEN_PTR#12
  (word) init::xp#0 ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte/signed word/word/dword/signed dword~) init::$3 ← (byte) PLEX_COUNT#0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) init::sx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:init::@1
init::@1: scope:[init]  from init::@1 init::@5
  (byte*) PLEX_SCREEN_PTR#29 ← phi( init::@1/(byte*) PLEX_SCREEN_PTR#29 init::@5/(byte*) PLEX_SCREEN_PTR#5 )
  (word) init::xp#2 ← phi( init::@1/(word) init::xp#1 init::@5/(word) init::xp#0 )
  (byte) init::sx#2 ← phi( init::@1/(byte) init::sx#1 init::@5/(byte) init::sx#0 )
  (byte*) SPRITE#1 ← phi( init::@1/(byte*) SPRITE#1 init::@5/(byte*) SPRITE#2 )
  (byte*~) init::$4 ← (byte*) SPRITE#1 / (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte~) init::$5 ← ((byte)) (byte*~) init::$4
  *((byte[PLEX_COUNT#0]) PLEX_PTR#0 + (byte) init::sx#2) ← (byte~) init::$5
  (byte~) init::$6 ← (byte) init::sx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  *((word[PLEX_COUNT#0]) PLEX_XPOS#0 + (byte~) init::$6) ← (word) init::xp#2
  (word) init::xp#1 ← (word) init::xp#2 + (byte/signed byte/word/signed word/dword/signed dword) 12
  (byte) init::sx#1 ← (byte) init::sx#2 + rangenext(0,init::$3)
  (bool~) init::$7 ← (byte) init::sx#1 != rangelast(0,init::$3)
  if((bool~) init::$7) goto init::@1
  to:init::@3
init::@3: scope:[init]  from init::@1
  (byte*) PLEX_SCREEN_PTR#24 ← phi( init::@1/(byte*) PLEX_SCREEN_PTR#29 )
  *((byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255
  (byte) init::ss#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:init::@2
init::@2: scope:[init]  from init::@2 init::@3
  (byte*) PLEX_SCREEN_PTR#21 ← phi( init::@2/(byte*) PLEX_SCREEN_PTR#21 init::@3/(byte*) PLEX_SCREEN_PTR#24 )
  (byte) init::ss#2 ← phi( init::@2/(byte) init::ss#1 init::@3/(byte) init::ss#0 )
  *((byte*) SPRITES_COLS#0 + (byte) init::ss#2) ← (byte) GREEN#0
  (byte) init::ss#1 ← (byte) init::ss#2 + rangenext(0,7)
  (bool~) init::$8 ← (byte) init::ss#1 != rangelast(0,7)
  if((bool~) init::$8) goto init::@2
  to:init::@return
init::@return: scope:[init]  from init::@2
  (byte*) PLEX_SCREEN_PTR#13 ← phi( init::@2/(byte*) PLEX_SCREEN_PTR#21 )
  (byte*) PLEX_SCREEN_PTR#6 ← (byte*) PLEX_SCREEN_PTR#13
  return 
  to:@return
loop: scope:[loop]  from main::@1
  (byte*) PLEX_SCREEN_PTR#44 ← phi( main::@1/(byte*) PLEX_SCREEN_PTR#3 )
  (byte*) YSIN#7 ← phi( main::@1/(byte*) YSIN#9 )
  (byte) plex_sprite_msb#34 ← phi( main::@1/(byte) plex_sprite_msb#27 )
  (byte) plex_sprite_idx#34 ← phi( main::@1/(byte) plex_sprite_idx#29 )
  (byte) plex_show_idx#36 ← phi( main::@1/(byte) plex_show_idx#30 )
  (byte) loop::sin_idx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:loop::@1
loop::@1: scope:[loop]  from loop loop::@23
  (byte*) PLEX_SCREEN_PTR#43 ← phi( loop/(byte*) PLEX_SCREEN_PTR#44 loop::@23/(byte*) PLEX_SCREEN_PTR#45 )
  (byte*) YSIN#6 ← phi( loop/(byte*) YSIN#7 loop::@23/(byte*) YSIN#8 )
  (byte) loop::sin_idx#8 ← phi( loop/(byte) loop::sin_idx#0 loop::@23/(byte) loop::sin_idx#9 )
  (byte) plex_sprite_msb#31 ← phi( loop/(byte) plex_sprite_msb#34 loop::@23/(byte) plex_sprite_msb#35 )
  (byte) plex_sprite_idx#31 ← phi( loop/(byte) plex_sprite_idx#34 loop::@23/(byte) plex_sprite_idx#35 )
  (byte) plex_show_idx#33 ← phi( loop/(byte) plex_show_idx#36 loop::@23/(byte) plex_show_idx#37 )
  if(true) goto loop::@2
  to:loop::@return
loop::@2: scope:[loop]  from loop::@1
  (byte*) PLEX_SCREEN_PTR#39 ← phi( loop::@1/(byte*) PLEX_SCREEN_PTR#43 )
  (byte) plex_sprite_msb#44 ← phi( loop::@1/(byte) plex_sprite_msb#31 )
  (byte) plex_sprite_idx#44 ← phi( loop::@1/(byte) plex_sprite_idx#31 )
  (byte) plex_show_idx#47 ← phi( loop::@1/(byte) plex_show_idx#33 )
  (byte*) YSIN#4 ← phi( loop::@1/(byte*) YSIN#6 )
  (byte) loop::sin_idx#6 ← phi( loop::@1/(byte) loop::sin_idx#8 )
  to:loop::@4
loop::@4: scope:[loop]  from loop::@2 loop::@5
  (byte*) PLEX_SCREEN_PTR#37 ← phi( loop::@2/(byte*) PLEX_SCREEN_PTR#39 loop::@5/(byte*) PLEX_SCREEN_PTR#40 )
  (byte) plex_sprite_msb#42 ← phi( loop::@2/(byte) plex_sprite_msb#44 loop::@5/(byte) plex_sprite_msb#45 )
  (byte) plex_sprite_idx#42 ← phi( loop::@2/(byte) plex_sprite_idx#44 loop::@5/(byte) plex_sprite_idx#45 )
  (byte) plex_show_idx#45 ← phi( loop::@2/(byte) plex_show_idx#47 loop::@5/(byte) plex_show_idx#48 )
  (byte*) YSIN#3 ← phi( loop::@2/(byte*) YSIN#4 loop::@5/(byte*) YSIN#5 )
  (byte) loop::sin_idx#4 ← phi( loop::@2/(byte) loop::sin_idx#6 loop::@5/(byte) loop::sin_idx#7 )
  (bool~) loop::$0 ← *((byte*) RASTER#0) != (byte/word/signed word/dword/signed dword) 255
  if((bool~) loop::$0) goto loop::@5
  to:loop::@6
loop::@5: scope:[loop]  from loop::@4
  (byte*) PLEX_SCREEN_PTR#40 ← phi( loop::@4/(byte*) PLEX_SCREEN_PTR#37 )
  (byte) plex_sprite_msb#45 ← phi( loop::@4/(byte) plex_sprite_msb#42 )
  (byte) plex_sprite_idx#45 ← phi( loop::@4/(byte) plex_sprite_idx#42 )
  (byte) plex_show_idx#48 ← phi( loop::@4/(byte) plex_show_idx#45 )
  (byte*) YSIN#5 ← phi( loop::@4/(byte*) YSIN#3 )
  (byte) loop::sin_idx#7 ← phi( loop::@4/(byte) loop::sin_idx#4 )
  to:loop::@4
loop::@6: scope:[loop]  from loop::@4
  (byte*) PLEX_SCREEN_PTR#35 ← phi( loop::@4/(byte*) PLEX_SCREEN_PTR#37 )
  (byte) plex_sprite_msb#39 ← phi( loop::@4/(byte) plex_sprite_msb#42 )
  (byte) plex_sprite_idx#39 ← phi( loop::@4/(byte) plex_sprite_idx#42 )
  (byte) plex_show_idx#42 ← phi( loop::@4/(byte) plex_show_idx#45 )
  (byte*) YSIN#2 ← phi( loop::@4/(byte*) YSIN#3 )
  (byte) loop::sin_idx#2 ← phi( loop::@4/(byte) loop::sin_idx#4 )
  *((byte*) BORDERCOL#0) ← ++ *((byte*) BORDERCOL#0)
  (byte) loop::y_idx#0 ← (byte) loop::sin_idx#2
  (byte/signed word/word/dword/signed dword~) loop::$1 ← (byte) PLEX_COUNT#0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) loop::sy#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:loop::@7
loop::@7: scope:[loop]  from loop::@6 loop::@7
  (byte*) PLEX_SCREEN_PTR#33 ← phi( loop::@6/(byte*) PLEX_SCREEN_PTR#35 loop::@7/(byte*) PLEX_SCREEN_PTR#33 )
  (byte) plex_sprite_msb#36 ← phi( loop::@6/(byte) plex_sprite_msb#39 loop::@7/(byte) plex_sprite_msb#36 )
  (byte) plex_sprite_idx#36 ← phi( loop::@6/(byte) plex_sprite_idx#39 loop::@7/(byte) plex_sprite_idx#36 )
  (byte) plex_show_idx#38 ← phi( loop::@6/(byte) plex_show_idx#42 loop::@7/(byte) plex_show_idx#38 )
  (byte) loop::sin_idx#5 ← phi( loop::@6/(byte) loop::sin_idx#2 loop::@7/(byte) loop::sin_idx#5 )
  (byte) loop::sy#2 ← phi( loop::@6/(byte) loop::sy#0 loop::@7/(byte) loop::sy#1 )
  (byte) loop::y_idx#2 ← phi( loop::@6/(byte) loop::y_idx#0 loop::@7/(byte) loop::y_idx#1 )
  (byte*) YSIN#1 ← phi( loop::@6/(byte*) YSIN#2 loop::@7/(byte*) YSIN#1 )
  *((byte[PLEX_COUNT#0]) PLEX_YPOS#0 + (byte) loop::sy#2) ← *((byte*) YSIN#1 + (byte) loop::y_idx#2)
  (byte) loop::y_idx#1 ← (byte) loop::y_idx#2 + (byte/signed byte/word/signed word/dword/signed dword) 10
  (byte) loop::sy#1 ← (byte) loop::sy#2 + rangenext(0,loop::$1)
  (bool~) loop::$2 ← (byte) loop::sy#1 != rangelast(0,loop::$1)
  if((bool~) loop::$2) goto loop::@7
  to:loop::@18
loop::@18: scope:[loop]  from loop::@7
  (byte*) YSIN#24 ← phi( loop::@7/(byte*) YSIN#1 )
  (byte*) PLEX_SCREEN_PTR#30 ← phi( loop::@7/(byte*) PLEX_SCREEN_PTR#33 )
  (byte) plex_sprite_msb#28 ← phi( loop::@7/(byte) plex_sprite_msb#36 )
  (byte) plex_sprite_idx#30 ← phi( loop::@7/(byte) plex_sprite_idx#36 )
  (byte) plex_show_idx#31 ← phi( loop::@7/(byte) plex_show_idx#38 )
  (byte) loop::sin_idx#3 ← phi( loop::@7/(byte) loop::sin_idx#5 )
  (byte) loop::sin_idx#1 ← (byte) loop::sin_idx#3 + (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*) BORDERCOL#0) ← ++ *((byte*) BORDERCOL#0)
  call plexSort 
  to:loop::@26
loop::@26: scope:[loop]  from loop::@18
  (byte*) YSIN#23 ← phi( loop::@18/(byte*) YSIN#24 )
  (byte) loop::sin_idx#21 ← phi( loop::@18/(byte) loop::sin_idx#1 )
  (byte*) PLEX_SCREEN_PTR#25 ← phi( loop::@18/(byte*) PLEX_SCREEN_PTR#30 )
  (byte) plex_sprite_msb#20 ← phi( loop::@18/(byte) plex_sprite_msb#2 )
  (byte) plex_sprite_idx#18 ← phi( loop::@18/(byte) plex_sprite_idx#2 )
  (byte) plex_show_idx#18 ← phi( loop::@18/(byte) plex_show_idx#2 )
  (byte) plex_show_idx#7 ← (byte) plex_show_idx#18
  (byte) plex_sprite_idx#7 ← (byte) plex_sprite_idx#18
  (byte) plex_sprite_msb#8 ← (byte) plex_sprite_msb#20
  *((byte*) BORDERCOL#0) ← ++ *((byte*) BORDERCOL#0)
  (byte) loop::ss#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:loop::@8
loop::@8: scope:[loop]  from loop::@26 loop::@27
  (byte*) YSIN#22 ← phi( loop::@26/(byte*) YSIN#23 loop::@27/(byte*) YSIN#21 )
  (byte) loop::sin_idx#20 ← phi( loop::@26/(byte) loop::sin_idx#21 loop::@27/(byte) loop::sin_idx#19 )
  (byte) loop::ss#6 ← phi( loop::@26/(byte) loop::ss#0 loop::@27/(byte) loop::ss#1 )
  (byte) plex_sprite_msb#29 ← phi( loop::@26/(byte) plex_sprite_msb#8 loop::@27/(byte) plex_sprite_msb#9 )
  (byte*) PLEX_SCREEN_PTR#17 ← phi( loop::@26/(byte*) PLEX_SCREEN_PTR#25 loop::@27/(byte*) PLEX_SCREEN_PTR#26 )
  (byte) plex_show_idx#25 ← phi( loop::@26/(byte) plex_show_idx#7 loop::@27/(byte) plex_show_idx#8 )
  (byte) plex_sprite_idx#24 ← phi( loop::@26/(byte) plex_sprite_idx#7 loop::@27/(byte) plex_sprite_idx#8 )
  call plexShowSprite 
  to:loop::@27
loop::@27: scope:[loop]  from loop::@8
  (byte*) YSIN#21 ← phi( loop::@8/(byte*) YSIN#22 )
  (byte) loop::sin_idx#19 ← phi( loop::@8/(byte) loop::sin_idx#20 )
  (byte*) PLEX_SCREEN_PTR#26 ← phi( loop::@8/(byte*) PLEX_SCREEN_PTR#17 )
  (byte) loop::ss#4 ← phi( loop::@8/(byte) loop::ss#6 )
  (byte) plex_sprite_msb#21 ← phi( loop::@8/(byte) plex_sprite_msb#5 )
  (byte) plex_show_idx#19 ← phi( loop::@8/(byte) plex_show_idx#4 )
  (byte) plex_sprite_idx#19 ← phi( loop::@8/(byte) plex_sprite_idx#4 )
  (byte) plex_sprite_idx#8 ← (byte) plex_sprite_idx#19
  (byte) plex_show_idx#8 ← (byte) plex_show_idx#19
  (byte) plex_sprite_msb#9 ← (byte) plex_sprite_msb#21
  (byte) loop::ss#1 ← (byte) loop::ss#4 + rangenext(0,7)
  (bool~) loop::$5 ← (byte) loop::ss#1 != rangelast(0,7)
  if((bool~) loop::$5) goto loop::@8
  to:loop::@19
loop::@19: scope:[loop]  from loop::@27
  (byte*) YSIN#20 ← phi( loop::@27/(byte*) YSIN#21 )
  (byte) loop::sin_idx#18 ← phi( loop::@27/(byte) loop::sin_idx#19 )
  (byte) plex_sprite_msb#48 ← phi( loop::@27/(byte) plex_sprite_msb#9 )
  (byte*) PLEX_SCREEN_PTR#41 ← phi( loop::@27/(byte*) PLEX_SCREEN_PTR#26 )
  (byte) plex_sprite_idx#48 ← phi( loop::@27/(byte) plex_sprite_idx#8 )
  (byte) plex_show_idx#39 ← phi( loop::@27/(byte) plex_show_idx#8 )
  (byte/signed word/word/dword/signed dword~) loop::$6 ← (byte) PLEX_COUNT#0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) loop::ss#2 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  to:loop::@9
loop::@9: scope:[loop]  from loop::@19 loop::@28
  (byte*) YSIN#19 ← phi( loop::@19/(byte*) YSIN#20 loop::@28/(byte*) YSIN#10 )
  (byte) loop::sin_idx#17 ← phi( loop::@19/(byte) loop::sin_idx#18 loop::@28/(byte) loop::sin_idx#10 )
  (byte) loop::ss#13 ← phi( loop::@19/(byte) loop::ss#2 loop::@28/(byte) loop::ss#3 )
  (byte) plex_sprite_msb#47 ← phi( loop::@19/(byte) plex_sprite_msb#48 loop::@28/(byte) plex_sprite_msb#10 )
  (byte*) PLEX_SCREEN_PTR#38 ← phi( loop::@19/(byte*) PLEX_SCREEN_PTR#41 loop::@28/(byte*) PLEX_SCREEN_PTR#42 )
  (byte) plex_sprite_idx#47 ← phi( loop::@19/(byte) plex_sprite_idx#48 loop::@28/(byte) plex_sprite_idx#9 )
  (byte) plex_show_idx#32 ← phi( loop::@19/(byte) plex_show_idx#39 loop::@28/(byte) plex_show_idx#9 )
  *((byte*) BORDERCOL#0) ← (byte) BLACK#0
  to:loop::plexShowNextYpos1
loop::plexShowNextYpos1: scope:[loop]  from loop::@9
  (byte*) YSIN#18 ← phi( loop::@9/(byte*) YSIN#19 )
  (byte) loop::sin_idx#16 ← phi( loop::@9/(byte) loop::sin_idx#17 )
  (byte) loop::ss#12 ← phi( loop::@9/(byte) loop::ss#13 )
  (byte) plex_sprite_msb#46 ← phi( loop::@9/(byte) plex_sprite_msb#47 )
  (byte*) PLEX_SCREEN_PTR#36 ← phi( loop::@9/(byte*) PLEX_SCREEN_PTR#38 )
  (byte) plex_sprite_idx#46 ← phi( loop::@9/(byte) plex_sprite_idx#47 )
  (byte) plex_show_idx#20 ← phi( loop::@9/(byte) plex_show_idx#32 )
  (byte) loop::plexShowNextYpos1_return#0 ← *((byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#20))
  to:loop::plexShowNextYpos1_@return
loop::plexShowNextYpos1_@return: scope:[loop]  from loop::plexShowNextYpos1
  (byte*) YSIN#17 ← phi( loop::plexShowNextYpos1/(byte*) YSIN#18 )
  (byte) loop::sin_idx#15 ← phi( loop::plexShowNextYpos1/(byte) loop::sin_idx#16 )
  (byte) loop::ss#11 ← phi( loop::plexShowNextYpos1/(byte) loop::ss#12 )
  (byte) plex_sprite_msb#43 ← phi( loop::plexShowNextYpos1/(byte) plex_sprite_msb#46 )
  (byte*) PLEX_SCREEN_PTR#34 ← phi( loop::plexShowNextYpos1/(byte*) PLEX_SCREEN_PTR#36 )
  (byte) plex_show_idx#46 ← phi( loop::plexShowNextYpos1/(byte) plex_show_idx#20 )
  (byte) plex_sprite_idx#43 ← phi( loop::plexShowNextYpos1/(byte) plex_sprite_idx#46 )
  (byte) loop::plexShowNextYpos1_return#2 ← phi( loop::plexShowNextYpos1/(byte) loop::plexShowNextYpos1_return#0 )
  (byte) loop::plexShowNextYpos1_return#1 ← (byte) loop::plexShowNextYpos1_return#2
  to:loop::@25
loop::@25: scope:[loop]  from loop::plexShowNextYpos1_@return
  (byte*) YSIN#16 ← phi( loop::plexShowNextYpos1_@return/(byte*) YSIN#17 )
  (byte) loop::sin_idx#14 ← phi( loop::plexShowNextYpos1_@return/(byte) loop::sin_idx#15 )
  (byte) loop::ss#10 ← phi( loop::plexShowNextYpos1_@return/(byte) loop::ss#11 )
  (byte) plex_sprite_msb#41 ← phi( loop::plexShowNextYpos1_@return/(byte) plex_sprite_msb#43 )
  (byte*) PLEX_SCREEN_PTR#32 ← phi( loop::plexShowNextYpos1_@return/(byte*) PLEX_SCREEN_PTR#34 )
  (byte) plex_show_idx#44 ← phi( loop::plexShowNextYpos1_@return/(byte) plex_show_idx#46 )
  (byte) plex_sprite_idx#41 ← phi( loop::plexShowNextYpos1_@return/(byte) plex_sprite_idx#43 )
  (byte) loop::plexShowNextYpos1_return#3 ← phi( loop::plexShowNextYpos1_@return/(byte) loop::plexShowNextYpos1_return#1 )
  (byte~) loop::$7 ← (byte) loop::plexShowNextYpos1_return#3
  (byte/signed word/word/dword/signed dword~) loop::$8 ← (byte~) loop::$7 - (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte) loop::rasterY#0 ← (byte/signed word/word/dword/signed dword~) loop::$8
  to:loop::@10
loop::@10: scope:[loop]  from loop::@11 loop::@25
  (byte*) YSIN#14 ← phi( loop::@11/(byte*) YSIN#15 loop::@25/(byte*) YSIN#16 )
  (byte) loop::sin_idx#12 ← phi( loop::@11/(byte) loop::sin_idx#13 loop::@25/(byte) loop::sin_idx#14 )
  (byte) loop::ss#8 ← phi( loop::@11/(byte) loop::ss#9 loop::@25/(byte) loop::ss#10 )
  (byte) plex_sprite_msb#37 ← phi( loop::@11/(byte) plex_sprite_msb#40 loop::@25/(byte) plex_sprite_msb#41 )
  (byte*) PLEX_SCREEN_PTR#27 ← phi( loop::@11/(byte*) PLEX_SCREEN_PTR#31 loop::@25/(byte*) PLEX_SCREEN_PTR#32 )
  (byte) plex_show_idx#40 ← phi( loop::@11/(byte) plex_show_idx#43 loop::@25/(byte) plex_show_idx#44 )
  (byte) plex_sprite_idx#37 ← phi( loop::@11/(byte) plex_sprite_idx#40 loop::@25/(byte) plex_sprite_idx#41 )
  (byte) loop::rasterY#1 ← phi( loop::@11/(byte) loop::rasterY#2 loop::@25/(byte) loop::rasterY#0 )
  (bool~) loop::$9 ← *((byte*) RASTER#0) < (byte) loop::rasterY#1
  if((bool~) loop::$9) goto loop::@11
  to:loop::@12
loop::@11: scope:[loop]  from loop::@10
  (byte*) YSIN#15 ← phi( loop::@10/(byte*) YSIN#14 )
  (byte) loop::sin_idx#13 ← phi( loop::@10/(byte) loop::sin_idx#12 )
  (byte) loop::ss#9 ← phi( loop::@10/(byte) loop::ss#8 )
  (byte) plex_sprite_msb#40 ← phi( loop::@10/(byte) plex_sprite_msb#37 )
  (byte*) PLEX_SCREEN_PTR#31 ← phi( loop::@10/(byte*) PLEX_SCREEN_PTR#27 )
  (byte) plex_show_idx#43 ← phi( loop::@10/(byte) plex_show_idx#40 )
  (byte) plex_sprite_idx#40 ← phi( loop::@10/(byte) plex_sprite_idx#37 )
  (byte) loop::rasterY#2 ← phi( loop::@10/(byte) loop::rasterY#1 )
  to:loop::@10
loop::@12: scope:[loop]  from loop::@10
  (byte*) YSIN#12 ← phi( loop::@10/(byte*) YSIN#14 )
  (byte) loop::sin_idx#11 ← phi( loop::@10/(byte) loop::sin_idx#12 )
  (byte) loop::ss#7 ← phi( loop::@10/(byte) loop::ss#8 )
  (byte) plex_sprite_msb#30 ← phi( loop::@10/(byte) plex_sprite_msb#37 )
  (byte*) PLEX_SCREEN_PTR#16 ← phi( loop::@10/(byte*) PLEX_SCREEN_PTR#27 )
  (byte) plex_show_idx#24 ← phi( loop::@10/(byte) plex_show_idx#40 )
  (byte) plex_sprite_idx#23 ← phi( loop::@10/(byte) plex_sprite_idx#37 )
  *((byte*) BORDERCOL#0) ← ++ *((byte*) BORDERCOL#0)
  call plexShowSprite 
  to:loop::@28
loop::@28: scope:[loop]  from loop::@12
  (byte*) PLEX_SCREEN_PTR#42 ← phi( loop::@12/(byte*) PLEX_SCREEN_PTR#16 )
  (byte*) YSIN#10 ← phi( loop::@12/(byte*) YSIN#12 )
  (byte) loop::sin_idx#10 ← phi( loop::@12/(byte) loop::sin_idx#11 )
  (byte) loop::ss#5 ← phi( loop::@12/(byte) loop::ss#7 )
  (byte) plex_sprite_msb#22 ← phi( loop::@12/(byte) plex_sprite_msb#5 )
  (byte) plex_show_idx#21 ← phi( loop::@12/(byte) plex_show_idx#4 )
  (byte) plex_sprite_idx#20 ← phi( loop::@12/(byte) plex_sprite_idx#4 )
  (byte) plex_sprite_idx#9 ← (byte) plex_sprite_idx#20
  (byte) plex_show_idx#9 ← (byte) plex_show_idx#21
  (byte) plex_sprite_msb#10 ← (byte) plex_sprite_msb#22
  (byte) loop::ss#3 ← (byte) loop::ss#5 + rangenext(8,loop::$6)
  (bool~) loop::$11 ← (byte) loop::ss#3 != rangelast(8,loop::$6)
  if((bool~) loop::$11) goto loop::@9
  to:loop::@23
loop::@23: scope:[loop]  from loop::@28
  (byte*) PLEX_SCREEN_PTR#45 ← phi( loop::@28/(byte*) PLEX_SCREEN_PTR#42 )
  (byte*) YSIN#8 ← phi( loop::@28/(byte*) YSIN#10 )
  (byte) loop::sin_idx#9 ← phi( loop::@28/(byte) loop::sin_idx#10 )
  (byte) plex_sprite_msb#35 ← phi( loop::@28/(byte) plex_sprite_msb#10 )
  (byte) plex_sprite_idx#35 ← phi( loop::@28/(byte) plex_sprite_idx#9 )
  (byte) plex_show_idx#37 ← phi( loop::@28/(byte) plex_show_idx#9 )
  *((byte*) BORDERCOL#0) ← (byte) BLACK#0
  to:loop::@1
loop::@return: scope:[loop]  from loop::@1
  (byte) plex_sprite_msb#23 ← phi( loop::@1/(byte) plex_sprite_msb#31 )
  (byte) plex_sprite_idx#21 ← phi( loop::@1/(byte) plex_sprite_idx#31 )
  (byte) plex_show_idx#22 ← phi( loop::@1/(byte) plex_show_idx#33 )
  (byte) plex_show_idx#10 ← (byte) plex_show_idx#22
  (byte) plex_sprite_idx#10 ← (byte) plex_sprite_idx#21
  (byte) plex_sprite_msb#11 ← (byte) plex_sprite_msb#23
  return 
  to:@return
@31: scope:[]  from @28
  (byte*) YSIN#13 ← phi( @28/(byte*) YSIN#0 )
  (byte*) SPRITE#5 ← phi( @28/(byte*) SPRITE#0 )
  (byte*) SCREEN#3 ← phi( @28/(byte*) SCREEN#0 )
  (byte) plex_sprite_msb#32 ← phi( @28/(byte) plex_sprite_msb#38 )
  (byte) plex_sprite_idx#32 ← phi( @28/(byte) plex_sprite_idx#38 )
  (byte) plex_show_idx#34 ← phi( @28/(byte) plex_show_idx#41 )
  (byte*) PLEX_SCREEN_PTR#22 ← phi( @28/(byte*) PLEX_SCREEN_PTR#28 )
  call main 
  to:@32
@32: scope:[]  from @31
  (byte) plex_sprite_msb#24 ← phi( @31/(byte) plex_sprite_msb#7 )
  (byte) plex_sprite_idx#22 ← phi( @31/(byte) plex_sprite_idx#6 )
  (byte) plex_show_idx#23 ← phi( @31/(byte) plex_show_idx#6 )
  (byte*) PLEX_SCREEN_PTR#14 ← phi( @31/(byte*) PLEX_SCREEN_PTR#4 )
  (byte*) PLEX_SCREEN_PTR#7 ← (byte*) PLEX_SCREEN_PTR#14
  (byte) plex_show_idx#11 ← (byte) plex_show_idx#23
  (byte) plex_sprite_idx#11 ← (byte) plex_sprite_idx#22
  (byte) plex_sprite_msb#12 ← (byte) plex_sprite_msb#24
  to:@end
@end: scope:[]  from @32

SYMBOL TABLE SSA
(word/signed word/dword/signed dword~) $0
(label) @23
(label) @28
(label) @31
(label) @32
(label) @begin
(label) @end
(byte) BLACK
(byte) BLACK#0
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte*) D011
(byte*) D011#0
(byte) GREEN
(byte) GREEN#0
(byte) PLEX_COUNT
(byte) PLEX_COUNT#0
(byte[PLEX_COUNT#0]) PLEX_PTR
(byte[PLEX_COUNT#0]) PLEX_PTR#0
(byte*) PLEX_SCREEN_PTR
(byte*) PLEX_SCREEN_PTR#0
(byte*) PLEX_SCREEN_PTR#1
(byte*) PLEX_SCREEN_PTR#10
(byte*) PLEX_SCREEN_PTR#11
(byte*) PLEX_SCREEN_PTR#12
(byte*) PLEX_SCREEN_PTR#13
(byte*) PLEX_SCREEN_PTR#14
(byte*) PLEX_SCREEN_PTR#15
(byte*) PLEX_SCREEN_PTR#16
(byte*) PLEX_SCREEN_PTR#17
(byte*) PLEX_SCREEN_PTR#18
(byte*) PLEX_SCREEN_PTR#19
(byte*) PLEX_SCREEN_PTR#2
(byte*) PLEX_SCREEN_PTR#20
(byte*) PLEX_SCREEN_PTR#21
(byte*) PLEX_SCREEN_PTR#22
(byte*) PLEX_SCREEN_PTR#23
(byte*) PLEX_SCREEN_PTR#24
(byte*) PLEX_SCREEN_PTR#25
(byte*) PLEX_SCREEN_PTR#26
(byte*) PLEX_SCREEN_PTR#27
(byte*) PLEX_SCREEN_PTR#28
(byte*) PLEX_SCREEN_PTR#29
(byte*) PLEX_SCREEN_PTR#3
(byte*) PLEX_SCREEN_PTR#30
(byte*) PLEX_SCREEN_PTR#31
(byte*) PLEX_SCREEN_PTR#32
(byte*) PLEX_SCREEN_PTR#33
(byte*) PLEX_SCREEN_PTR#34
(byte*) PLEX_SCREEN_PTR#35
(byte*) PLEX_SCREEN_PTR#36
(byte*) PLEX_SCREEN_PTR#37
(byte*) PLEX_SCREEN_PTR#38
(byte*) PLEX_SCREEN_PTR#39
(byte*) PLEX_SCREEN_PTR#4
(byte*) PLEX_SCREEN_PTR#40
(byte*) PLEX_SCREEN_PTR#41
(byte*) PLEX_SCREEN_PTR#42
(byte*) PLEX_SCREEN_PTR#43
(byte*) PLEX_SCREEN_PTR#44
(byte*) PLEX_SCREEN_PTR#45
(byte*) PLEX_SCREEN_PTR#5
(byte*) PLEX_SCREEN_PTR#6
(byte*) PLEX_SCREEN_PTR#7
(byte*) PLEX_SCREEN_PTR#8
(byte*) PLEX_SCREEN_PTR#9
(byte[PLEX_COUNT#0]) PLEX_SORTED_IDX
(byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0
(word[PLEX_COUNT#0]) PLEX_XPOS
(word[PLEX_COUNT#0]) PLEX_XPOS#0
(byte[PLEX_COUNT#0]) PLEX_YPOS
(byte[PLEX_COUNT#0]) PLEX_YPOS#0
(byte*) RASTER
(byte*) RASTER#0
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte*) SPRITE
(byte*) SPRITE#0
(byte*) SPRITE#1
(byte*) SPRITE#2
(byte*) SPRITE#3
(byte*) SPRITE#4
(byte*) SPRITE#5
(byte*) SPRITES_COLS
(byte*) SPRITES_COLS#0
(byte*) SPRITES_ENABLE
(byte*) SPRITES_ENABLE#0
(byte*) SPRITES_XMSB
(byte*) SPRITES_XMSB#0
(byte*) SPRITES_XPOS
(byte*) SPRITES_XPOS#0
(byte*) SPRITES_YPOS
(byte*) SPRITES_YPOS#0
(byte) VIC_DEN
(byte) VIC_DEN#0
(byte) VIC_RSEL
(byte) VIC_RSEL#0
(byte*) YSIN
(byte*) YSIN#0
(byte*) YSIN#1
(byte*) YSIN#10
(byte*) YSIN#11
(byte*) YSIN#12
(byte*) YSIN#13
(byte*) YSIN#14
(byte*) YSIN#15
(byte*) YSIN#16
(byte*) YSIN#17
(byte*) YSIN#18
(byte*) YSIN#19
(byte*) YSIN#2
(byte*) YSIN#20
(byte*) YSIN#21
(byte*) YSIN#22
(byte*) YSIN#23
(byte*) YSIN#24
(byte*) YSIN#3
(byte*) YSIN#4
(byte*) YSIN#5
(byte*) YSIN#6
(byte*) YSIN#7
(byte*) YSIN#8
(byte*) YSIN#9
(void()) init()
(byte~) init::$0
(byte/word/dword~) init::$1
(byte/signed word/word/dword/signed dword~) init::$3
(byte*~) init::$4
(byte~) init::$5
(byte~) init::$6
(bool~) init::$7
(bool~) init::$8
(label) init::@1
(label) init::@2
(label) init::@3
(label) init::@5
(label) init::@return
(byte) init::ss
(byte) init::ss#0
(byte) init::ss#1
(byte) init::ss#2
(byte) init::sx
(byte) init::sx#0
(byte) init::sx#1
(byte) init::sx#2
(word) init::xp
(word) init::xp#0
(word) init::xp#1
(word) init::xp#2
(void()) loop()
(bool~) loop::$0
(byte/signed word/word/dword/signed dword~) loop::$1
(bool~) loop::$11
(bool~) loop::$2
(bool~) loop::$5
(byte/signed word/word/dword/signed dword~) loop::$6
(byte~) loop::$7
(byte/signed word/word/dword/signed dword~) loop::$8
(bool~) loop::$9
(label) loop::@1
(label) loop::@10
(label) loop::@11
(label) loop::@12
(label) loop::@18
(label) loop::@19
(label) loop::@2
(label) loop::@23
(label) loop::@25
(label) loop::@26
(label) loop::@27
(label) loop::@28
(label) loop::@4
(label) loop::@5
(label) loop::@6
(label) loop::@7
(label) loop::@8
(label) loop::@9
(label) loop::@return
(label) loop::plexShowNextYpos1
(label) loop::plexShowNextYpos1_@return
(byte) loop::plexShowNextYpos1_return
(byte) loop::plexShowNextYpos1_return#0
(byte) loop::plexShowNextYpos1_return#1
(byte) loop::plexShowNextYpos1_return#2
(byte) loop::plexShowNextYpos1_return#3
(byte) loop::rasterY
(byte) loop::rasterY#0
(byte) loop::rasterY#1
(byte) loop::rasterY#2
(byte) loop::sin_idx
(byte) loop::sin_idx#0
(byte) loop::sin_idx#1
(byte) loop::sin_idx#10
(byte) loop::sin_idx#11
(byte) loop::sin_idx#12
(byte) loop::sin_idx#13
(byte) loop::sin_idx#14
(byte) loop::sin_idx#15
(byte) loop::sin_idx#16
(byte) loop::sin_idx#17
(byte) loop::sin_idx#18
(byte) loop::sin_idx#19
(byte) loop::sin_idx#2
(byte) loop::sin_idx#20
(byte) loop::sin_idx#21
(byte) loop::sin_idx#3
(byte) loop::sin_idx#4
(byte) loop::sin_idx#5
(byte) loop::sin_idx#6
(byte) loop::sin_idx#7
(byte) loop::sin_idx#8
(byte) loop::sin_idx#9
(byte) loop::ss
(byte) loop::ss#0
(byte) loop::ss#1
(byte) loop::ss#10
(byte) loop::ss#11
(byte) loop::ss#12
(byte) loop::ss#13
(byte) loop::ss#2
(byte) loop::ss#3
(byte) loop::ss#4
(byte) loop::ss#5
(byte) loop::ss#6
(byte) loop::ss#7
(byte) loop::ss#8
(byte) loop::ss#9
(byte) loop::sy
(byte) loop::sy#0
(byte) loop::sy#1
(byte) loop::sy#2
(byte) loop::y_idx
(byte) loop::y_idx#0
(byte) loop::y_idx#1
(byte) loop::y_idx#2
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(void()) plexInit((byte*) plexInit::screen)
(byte/signed word/word/dword/signed dword~) plexInit::$1
(bool~) plexInit::$2
(label) plexInit::@1
(label) plexInit::@3
(label) plexInit::@return
(byte) plexInit::i
(byte) plexInit::i#0
(byte) plexInit::i#1
(byte) plexInit::i#2
(label) plexInit::plexSetScreen1
(byte*~) plexInit::plexSetScreen1_$0
(byte*) plexInit::plexSetScreen1_$0#0
(byte*) plexInit::plexSetScreen1_screen
(byte*) plexInit::plexSetScreen1_screen#0
(byte*) plexInit::plexSetScreen1_screen#1
(byte*) plexInit::screen
(byte*) plexInit::screen#0
(byte*) plexInit::screen#1
(void()) plexShowSprite()
(byte~) plexShowSprite::$0
(byte~) plexShowSprite::$1
(byte~) plexShowSprite::$2
(byte~) plexShowSprite::$3
(bool~) plexShowSprite::$4
(byte/word/dword~) plexShowSprite::$5
(byte/signed word/word/dword/signed dword~) plexShowSprite::$6
(byte/word/dword~) plexShowSprite::$7
(bool~) plexShowSprite::$8
(bool~) plexShowSprite::$9
(label) plexShowSprite::@1
(label) plexShowSprite::@2
(label) plexShowSprite::@3
(label) plexShowSprite::@4
(label) plexShowSprite::@6
(label) plexShowSprite::@return
(byte) plexShowSprite::plex_sprite_idx2
(byte) plexShowSprite::plex_sprite_idx2#0
(byte) plexShowSprite::xpos_idx
(byte) plexShowSprite::xpos_idx#0
(void()) plexSort()
(byte/signed word/word/dword/signed dword~) plexSort::$0
(byte/signed word/word/dword/signed dword~) plexSort::$1
(bool~) plexSort::$2
(bool~) plexSort::$3
(byte/signed word/word/dword/signed dword~) plexSort::$4
(bool~) plexSort::$5
(bool~) plexSort::$6
(bool~) plexSort::$7
(bool~) plexSort::$8
(label) plexSort::@1
(label) plexSort::@2
(label) plexSort::@3
(label) plexSort::@4
(label) plexSort::@5
(label) plexSort::@6
(label) plexSort::@return
(byte) plexSort::m
(byte) plexSort::m#0
(byte) plexSort::m#1
(byte) plexSort::m#2
(byte) plexSort::m#3
(byte) plexSort::m#4
(byte) plexSort::m#5
(byte) plexSort::m#6
(byte) plexSort::nxt_idx
(byte) plexSort::nxt_idx#0
(byte) plexSort::nxt_idx#1
(byte) plexSort::nxt_idx#2
(byte) plexSort::nxt_idx#3
(byte) plexSort::nxt_y
(byte) plexSort::nxt_y#0
(byte) plexSort::nxt_y#1
(byte) plexSort::nxt_y#2
(byte) plexSort::s
(byte) plexSort::s#0
(byte) plexSort::s#1
(byte) plexSort::s#2
(byte) plexSort::s#3
(byte) plexSort::s#4
(byte) plex_show_idx
(byte) plex_show_idx#0
(byte) plex_show_idx#1
(byte) plex_show_idx#10
(byte) plex_show_idx#11
(byte) plex_show_idx#12
(byte) plex_show_idx#13
(byte) plex_show_idx#14
(byte) plex_show_idx#15
(byte) plex_show_idx#16
(byte) plex_show_idx#17
(byte) plex_show_idx#18
(byte) plex_show_idx#19
(byte) plex_show_idx#2
(byte) plex_show_idx#20
(byte) plex_show_idx#21
(byte) plex_show_idx#22
(byte) plex_show_idx#23
(byte) plex_show_idx#24
(byte) plex_show_idx#25
(byte) plex_show_idx#26
(byte) plex_show_idx#27
(byte) plex_show_idx#28
(byte) plex_show_idx#29
(byte) plex_show_idx#3
(byte) plex_show_idx#30
(byte) plex_show_idx#31
(byte) plex_show_idx#32
(byte) plex_show_idx#33
(byte) plex_show_idx#34
(byte) plex_show_idx#35
(byte) plex_show_idx#36
(byte) plex_show_idx#37
(byte) plex_show_idx#38
(byte) plex_show_idx#39
(byte) plex_show_idx#4
(byte) plex_show_idx#40
(byte) plex_show_idx#41
(byte) plex_show_idx#42
(byte) plex_show_idx#43
(byte) plex_show_idx#44
(byte) plex_show_idx#45
(byte) plex_show_idx#46
(byte) plex_show_idx#47
(byte) plex_show_idx#48
(byte) plex_show_idx#5
(byte) plex_show_idx#6
(byte) plex_show_idx#7
(byte) plex_show_idx#8
(byte) plex_show_idx#9
(byte) plex_sprite_idx
(byte) plex_sprite_idx#0
(byte) plex_sprite_idx#1
(byte) plex_sprite_idx#10
(byte) plex_sprite_idx#11
(byte) plex_sprite_idx#12
(byte) plex_sprite_idx#13
(byte) plex_sprite_idx#14
(byte) plex_sprite_idx#15
(byte) plex_sprite_idx#16
(byte) plex_sprite_idx#17
(byte) plex_sprite_idx#18
(byte) plex_sprite_idx#19
(byte) plex_sprite_idx#2
(byte) plex_sprite_idx#20
(byte) plex_sprite_idx#21
(byte) plex_sprite_idx#22
(byte) plex_sprite_idx#23
(byte) plex_sprite_idx#24
(byte) plex_sprite_idx#25
(byte) plex_sprite_idx#26
(byte) plex_sprite_idx#27
(byte) plex_sprite_idx#28
(byte) plex_sprite_idx#29
(byte) plex_sprite_idx#3
(byte) plex_sprite_idx#30
(byte) plex_sprite_idx#31
(byte) plex_sprite_idx#32
(byte) plex_sprite_idx#33
(byte) plex_sprite_idx#34
(byte) plex_sprite_idx#35
(byte) plex_sprite_idx#36
(byte) plex_sprite_idx#37
(byte) plex_sprite_idx#38
(byte) plex_sprite_idx#39
(byte) plex_sprite_idx#4
(byte) plex_sprite_idx#40
(byte) plex_sprite_idx#41
(byte) plex_sprite_idx#42
(byte) plex_sprite_idx#43
(byte) plex_sprite_idx#44
(byte) plex_sprite_idx#45
(byte) plex_sprite_idx#46
(byte) plex_sprite_idx#47
(byte) plex_sprite_idx#48
(byte) plex_sprite_idx#5
(byte) plex_sprite_idx#6
(byte) plex_sprite_idx#7
(byte) plex_sprite_idx#8
(byte) plex_sprite_idx#9
(byte) plex_sprite_msb
(byte) plex_sprite_msb#0
(byte) plex_sprite_msb#1
(byte) plex_sprite_msb#10
(byte) plex_sprite_msb#11
(byte) plex_sprite_msb#12
(byte) plex_sprite_msb#13
(byte) plex_sprite_msb#14
(byte) plex_sprite_msb#15
(byte) plex_sprite_msb#16
(byte) plex_sprite_msb#17
(byte) plex_sprite_msb#18
(byte) plex_sprite_msb#19
(byte) plex_sprite_msb#2
(byte) plex_sprite_msb#20
(byte) plex_sprite_msb#21
(byte) plex_sprite_msb#22
(byte) plex_sprite_msb#23
(byte) plex_sprite_msb#24
(byte) plex_sprite_msb#25
(byte) plex_sprite_msb#26
(byte) plex_sprite_msb#27
(byte) plex_sprite_msb#28
(byte) plex_sprite_msb#29
(byte) plex_sprite_msb#3
(byte) plex_sprite_msb#30
(byte) plex_sprite_msb#31
(byte) plex_sprite_msb#32
(byte) plex_sprite_msb#33
(byte) plex_sprite_msb#34
(byte) plex_sprite_msb#35
(byte) plex_sprite_msb#36
(byte) plex_sprite_msb#37
(byte) plex_sprite_msb#38
(byte) plex_sprite_msb#39
(byte) plex_sprite_msb#4
(byte) plex_sprite_msb#40
(byte) plex_sprite_msb#41
(byte) plex_sprite_msb#42
(byte) plex_sprite_msb#43
(byte) plex_sprite_msb#44
(byte) plex_sprite_msb#45
(byte) plex_sprite_msb#46
(byte) plex_sprite_msb#47
(byte) plex_sprite_msb#48
(byte) plex_sprite_msb#5
(byte) plex_sprite_msb#6
(byte) plex_sprite_msb#7
(byte) plex_sprite_msb#8
(byte) plex_sprite_msb#9

OPTIMIZING CONTROL FLOW GRAPH
Inversing boolean not (bool~) plexSort::$3 ← (byte) plexSort::nxt_y#0 >= *((byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::m#2)) from (bool~) plexSort::$2 ← (byte) plexSort::nxt_y#0 < *((byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::m#2))
Inversing boolean not (bool~) plexShowSprite::$9 ← (byte) plex_sprite_msb#3 != (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) plexShowSprite::$8 ← (byte) plex_sprite_msb#3 == (byte/signed byte/word/signed word/dword/signed dword) 0
Succesful SSA optimization Pass2UnaryNotSimplification
Not aliassing across scopes: plexInit::screen#1 plexInit::screen#0
Not aliassing identity: PLEX_SCREEN_PTR#15 PLEX_SCREEN_PTR#15
Not aliassing identity: plexSort::nxt_y#1 plexSort::nxt_y#1
Not aliassing identity: plexSort::nxt_idx#2 plexSort::nxt_idx#2
Not aliassing identity: plexSort::m#6 plexSort::m#6
Not aliassing across scopes: plex_sprite_idx#13 plex_sprite_idx#23
Not aliassing across scopes: plex_show_idx#13 plex_show_idx#24
Not aliassing across scopes: PLEX_SCREEN_PTR#9 PLEX_SCREEN_PTR#16
Not aliassing across scopes: plex_sprite_msb#25 plex_sprite_msb#30
Not aliassing across scopes: PLEX_SCREEN_PTR#18 PLEX_SCREEN_PTR#22
Not aliassing across scopes: SCREEN#2 SCREEN#3
Not aliassing across scopes: plex_show_idx#35 plex_show_idx#34
Not aliassing across scopes: plex_sprite_idx#33 plex_sprite_idx#32
Not aliassing across scopes: plex_sprite_msb#33 plex_sprite_msb#32
Not aliassing across scopes: SPRITE#4 SPRITE#5
Not aliassing across scopes: YSIN#11 YSIN#13
Not aliassing across scopes: PLEX_SCREEN_PTR#10 PLEX_SCREEN_PTR#6
Not aliassing across scopes: plex_show_idx#16 plex_show_idx#10
Not aliassing across scopes: plex_sprite_idx#16 plex_sprite_idx#10
Not aliassing across scopes: plex_sprite_msb#18 plex_sprite_msb#11
Not aliassing across scopes: SCREEN#1 SCREEN#2
Not aliassing across scopes: PLEX_SCREEN_PTR#20 PLEX_SCREEN_PTR#18
Not aliassing across scopes: SPRITE#3 SPRITE#4
Not aliassing across scopes: plexInit::screen#0 SCREEN#1
Not aliassing across scopes: PLEX_SCREEN_PTR#12 PLEX_SCREEN_PTR#2
Not aliassing identity: SPRITE#1 SPRITE#1
Not aliassing identity: PLEX_SCREEN_PTR#29 PLEX_SCREEN_PTR#29
Not aliassing identity: PLEX_SCREEN_PTR#21 PLEX_SCREEN_PTR#21
Not aliassing across scopes: plex_show_idx#36 plex_show_idx#30
Not aliassing across scopes: plex_sprite_idx#34 plex_sprite_idx#29
Not aliassing across scopes: plex_sprite_msb#34 plex_sprite_msb#27
Not aliassing across scopes: YSIN#7 YSIN#9
Not aliassing across scopes: PLEX_SCREEN_PTR#44 PLEX_SCREEN_PTR#3
Not aliassing across scopes: plex_show_idx#18 plex_show_idx#2
Not aliassing across scopes: plex_sprite_idx#18 plex_sprite_idx#2
Not aliassing across scopes: plex_sprite_msb#20 plex_sprite_msb#2
Not aliassing across scopes: plex_sprite_idx#19 plex_sprite_idx#4
Not aliassing across scopes: plex_show_idx#19 plex_show_idx#4
Not aliassing across scopes: plex_sprite_msb#21 plex_sprite_msb#5
Not aliassing across scopes: plex_sprite_idx#20 plex_sprite_idx#4
Not aliassing across scopes: plex_show_idx#21 plex_show_idx#4
Not aliassing across scopes: plex_sprite_msb#22 plex_sprite_msb#5
Not aliassing across scopes: PLEX_SCREEN_PTR#14 PLEX_SCREEN_PTR#4
Not aliassing across scopes: plex_show_idx#23 plex_show_idx#6
Not aliassing across scopes: plex_sprite_idx#22 plex_sprite_idx#6
Not aliassing across scopes: plex_sprite_msb#24 plex_sprite_msb#7
Alias (byte*) plexInit::plexSetScreen1_screen#0 = (byte*) plexInit::screen#1 (byte*) plexInit::plexSetScreen1_screen#1 
Alias (byte*) PLEX_SCREEN_PTR#1 = (byte*) plexInit::plexSetScreen1_$0#0 (byte*) PLEX_SCREEN_PTR#23 
Alias (byte*) PLEX_SCREEN_PTR#15 = (byte*) PLEX_SCREEN_PTR#8 (byte*) PLEX_SCREEN_PTR#2 
Alias (byte) plexSort::m#2 = (byte) plexSort::m#4 (byte) plexSort::s#0 
Alias (byte) plexSort::nxt_y#0 = (byte) plexSort::nxt_y#2 
Alias (byte) plexSort::nxt_idx#0 = (byte) plexSort::nxt_idx#3 
Alias (byte) plexSort::s#1 = (byte) plexSort::s#4 
Alias (byte) plexSort::nxt_idx#1 = (byte) plexSort::nxt_idx#2 
Alias (byte) plexSort::m#5 = (byte) plexSort::m#6 
Alias (byte) plex_show_idx#1 = (byte) plex_show_idx#12 (byte) plex_show_idx#2 
Alias (byte) plex_sprite_idx#1 = (byte) plex_sprite_idx#12 (byte) plex_sprite_idx#2 
Alias (byte) plex_sprite_msb#1 = (byte) plex_sprite_msb#13 (byte) plex_sprite_msb#2 
Alias (byte) plexShowSprite::plex_sprite_idx2#0 = (byte~) plexShowSprite::$0 
Alias (byte) plexShowSprite::xpos_idx#0 = (byte~) plexShowSprite::$1 
Alias (byte) plex_sprite_msb#14 = (byte) plex_sprite_msb#25 (byte) plex_sprite_msb#15 
Alias (byte) plex_sprite_idx#13 = (byte) plex_sprite_idx#25 (byte) plex_sprite_idx#26 
Alias (byte) plex_show_idx#13 = (byte) plex_show_idx#26 (byte) plex_show_idx#27 
Alias (byte) plex_sprite_idx#27 = (byte) plex_sprite_idx#3 (byte/word/dword~) plexShowSprite::$7 (byte) plex_sprite_idx#28 
Alias (byte) plex_show_idx#28 = (byte) plex_show_idx#3 (byte) plex_show_idx#29 
Alias (byte) plex_sprite_msb#26 = (byte) plex_sprite_msb#3 
Alias (byte) plex_sprite_idx#15 = (byte) plex_sprite_idx#4 
Alias (byte) plex_show_idx#15 = (byte) plex_show_idx#4 
Alias (byte) plex_sprite_msb#17 = (byte) plex_sprite_msb#5 
Alias (byte*) PLEX_SCREEN_PTR#0 = (byte*) PLEX_SCREEN_PTR#28 (byte*) PLEX_SCREEN_PTR#22 
Alias (byte) plex_show_idx#0 = (byte) plex_show_idx#41 (byte) plex_show_idx#34 
Alias (byte) plex_sprite_idx#0 = (byte) plex_sprite_idx#38 (byte) plex_sprite_idx#32 
Alias (byte) plex_sprite_msb#0 = (byte) plex_sprite_msb#38 (byte) plex_sprite_msb#32 
Alias (byte) plex_show_idx#30 = (byte) plex_show_idx#35 
Alias (byte) plex_sprite_idx#29 = (byte) plex_sprite_idx#33 
Alias (byte) plex_sprite_msb#27 = (byte) plex_sprite_msb#33 
Alias (byte*) YSIN#11 = (byte*) YSIN#9 
Alias (byte*) PLEX_SCREEN_PTR#10 = (byte*) PLEX_SCREEN_PTR#3 (byte*) PLEX_SCREEN_PTR#19 (byte*) PLEX_SCREEN_PTR#11 (byte*) PLEX_SCREEN_PTR#4 
Alias (byte) plex_show_idx#16 = (byte) plex_show_idx#5 (byte) plex_show_idx#17 (byte) plex_show_idx#6 
Alias (byte) plex_sprite_idx#16 = (byte) plex_sprite_idx#5 (byte) plex_sprite_idx#17 (byte) plex_sprite_idx#6 
Alias (byte) plex_sprite_msb#18 = (byte) plex_sprite_msb#6 (byte) plex_sprite_msb#19 (byte) plex_sprite_msb#7 
Alias (byte*) SPRITE#2 = (byte*) SPRITE#3 
Alias (byte*) PLEX_SCREEN_PTR#12 = (byte*) PLEX_SCREEN_PTR#5 
Alias (byte*) PLEX_SCREEN_PTR#24 = (byte*) PLEX_SCREEN_PTR#29 
Alias (byte*) PLEX_SCREEN_PTR#13 = (byte*) PLEX_SCREEN_PTR#21 (byte*) PLEX_SCREEN_PTR#6 
Alias (byte) loop::sin_idx#6 = (byte) loop::sin_idx#8 
Alias (byte*) YSIN#4 = (byte*) YSIN#6 
Alias (byte) plex_show_idx#10 = (byte) plex_show_idx#47 (byte) plex_show_idx#33 (byte) plex_show_idx#22 
Alias (byte) plex_sprite_idx#10 = (byte) plex_sprite_idx#44 (byte) plex_sprite_idx#31 (byte) plex_sprite_idx#21 
Alias (byte) plex_sprite_msb#11 = (byte) plex_sprite_msb#44 (byte) plex_sprite_msb#31 (byte) plex_sprite_msb#23 
Alias (byte*) PLEX_SCREEN_PTR#39 = (byte*) PLEX_SCREEN_PTR#43 
Alias (byte) loop::sin_idx#2 = (byte) loop::sin_idx#7 (byte) loop::sin_idx#4 (byte) loop::y_idx#0 
Alias (byte*) YSIN#2 = (byte*) YSIN#5 (byte*) YSIN#3 
Alias (byte) plex_show_idx#42 = (byte) plex_show_idx#48 (byte) plex_show_idx#45 
Alias (byte) plex_sprite_idx#39 = (byte) plex_sprite_idx#45 (byte) plex_sprite_idx#42 
Alias (byte) plex_sprite_msb#39 = (byte) plex_sprite_msb#45 (byte) plex_sprite_msb#42 
Alias (byte*) PLEX_SCREEN_PTR#35 = (byte*) PLEX_SCREEN_PTR#40 (byte*) PLEX_SCREEN_PTR#37 
Alias (byte) loop::sin_idx#3 = (byte) loop::sin_idx#5 
Alias (byte) plex_show_idx#31 = (byte) plex_show_idx#38 
Alias (byte) plex_sprite_idx#30 = (byte) plex_sprite_idx#36 
Alias (byte) plex_sprite_msb#28 = (byte) plex_sprite_msb#36 
Alias (byte*) PLEX_SCREEN_PTR#25 = (byte*) PLEX_SCREEN_PTR#30 (byte*) PLEX_SCREEN_PTR#33 
Alias (byte*) YSIN#1 = (byte*) YSIN#24 (byte*) YSIN#23 
Alias (byte) loop::sin_idx#1 = (byte) loop::sin_idx#21 
Alias (byte) plex_show_idx#18 = (byte) plex_show_idx#7 
Alias (byte) plex_sprite_idx#18 = (byte) plex_sprite_idx#7 
Alias (byte) plex_sprite_msb#20 = (byte) plex_sprite_msb#8 
Alias (byte) loop::ss#4 = (byte) loop::ss#6 
Alias (byte*) PLEX_SCREEN_PTR#17 = (byte*) PLEX_SCREEN_PTR#26 (byte*) PLEX_SCREEN_PTR#41 
Alias (byte) loop::sin_idx#18 = (byte) loop::sin_idx#19 (byte) loop::sin_idx#20 
Alias (byte*) YSIN#20 = (byte*) YSIN#21 (byte*) YSIN#22 
Alias (byte) plex_sprite_idx#19 = (byte) plex_sprite_idx#8 (byte) plex_sprite_idx#48 
Alias (byte) plex_show_idx#19 = (byte) plex_show_idx#8 (byte) plex_show_idx#39 
Alias (byte) plex_sprite_msb#21 = (byte) plex_sprite_msb#9 (byte) plex_sprite_msb#48 
Alias (byte) plex_show_idx#20 = (byte) plex_show_idx#32 (byte) plex_show_idx#46 (byte) plex_show_idx#44 
Alias (byte) plex_sprite_idx#41 = (byte) plex_sprite_idx#46 (byte) plex_sprite_idx#47 (byte) plex_sprite_idx#43 
Alias (byte*) PLEX_SCREEN_PTR#32 = (byte*) PLEX_SCREEN_PTR#36 (byte*) PLEX_SCREEN_PTR#38 (byte*) PLEX_SCREEN_PTR#34 
Alias (byte) plex_sprite_msb#41 = (byte) plex_sprite_msb#46 (byte) plex_sprite_msb#47 (byte) plex_sprite_msb#43 
Alias (byte) loop::ss#10 = (byte) loop::ss#12 (byte) loop::ss#13 (byte) loop::ss#11 
Alias (byte) loop::sin_idx#14 = (byte) loop::sin_idx#16 (byte) loop::sin_idx#17 (byte) loop::sin_idx#15 
Alias (byte*) YSIN#16 = (byte*) YSIN#18 (byte*) YSIN#19 (byte*) YSIN#17 
Alias (byte) loop::plexShowNextYpos1_return#0 = (byte) loop::plexShowNextYpos1_return#2 (byte) loop::plexShowNextYpos1_return#1 (byte) loop::plexShowNextYpos1_return#3 (byte~) loop::$7 
Alias (byte) loop::rasterY#0 = (byte/signed word/word/dword/signed dword~) loop::$8 
Alias (byte) loop::rasterY#1 = (byte) loop::rasterY#2 
Alias (byte) plex_sprite_idx#23 = (byte) plex_sprite_idx#40 (byte) plex_sprite_idx#37 
Alias (byte) plex_show_idx#24 = (byte) plex_show_idx#43 (byte) plex_show_idx#40 
Alias (byte*) PLEX_SCREEN_PTR#16 = (byte*) PLEX_SCREEN_PTR#31 (byte*) PLEX_SCREEN_PTR#27 (byte*) PLEX_SCREEN_PTR#42 (byte*) PLEX_SCREEN_PTR#45 
Alias (byte) plex_sprite_msb#30 = (byte) plex_sprite_msb#40 (byte) plex_sprite_msb#37 
Alias (byte) loop::ss#5 = (byte) loop::ss#9 (byte) loop::ss#8 (byte) loop::ss#7 
Alias (byte) loop::sin_idx#10 = (byte) loop::sin_idx#13 (byte) loop::sin_idx#12 (byte) loop::sin_idx#11 (byte) loop::sin_idx#9 
Alias (byte*) YSIN#10 = (byte*) YSIN#15 (byte*) YSIN#14 (byte*) YSIN#12 (byte*) YSIN#8 
Alias (byte) plex_sprite_idx#20 = (byte) plex_sprite_idx#9 (byte) plex_sprite_idx#35 
Alias (byte) plex_show_idx#21 = (byte) plex_show_idx#9 (byte) plex_show_idx#37 
Alias (byte) plex_sprite_msb#10 = (byte) plex_sprite_msb#22 (byte) plex_sprite_msb#35 
Alias (byte*) SCREEN#0 = (byte*) SCREEN#3 
Alias (byte*) SPRITE#0 = (byte*) SPRITE#5 
Alias (byte*) YSIN#0 = (byte*) YSIN#13 
Alias (byte*) PLEX_SCREEN_PTR#14 = (byte*) PLEX_SCREEN_PTR#7 
Alias (byte) plex_show_idx#11 = (byte) plex_show_idx#23 
Alias (byte) plex_sprite_idx#11 = (byte) plex_sprite_idx#22 
Alias (byte) plex_sprite_msb#12 = (byte) plex_sprite_msb#24 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: plexInit::plexSetScreen1_screen#0 plexInit::screen#0
Not aliassing identity: PLEX_SCREEN_PTR#15 PLEX_SCREEN_PTR#15
Not aliassing identity: plexSort::nxt_y#1 plexSort::nxt_y#1
Not aliassing identity: plexSort::nxt_idx#1 plexSort::nxt_idx#1
Not aliassing identity: plexSort::m#5 plexSort::m#5
Not aliassing across scopes: plex_sprite_idx#13 plex_sprite_idx#23
Not aliassing across scopes: plex_show_idx#13 plex_show_idx#24
Not aliassing across scopes: PLEX_SCREEN_PTR#9 PLEX_SCREEN_PTR#16
Not aliassing across scopes: plex_sprite_msb#14 plex_sprite_msb#30
Not aliassing across scopes: PLEX_SCREEN_PTR#18 PLEX_SCREEN_PTR#0
Not aliassing across scopes: SCREEN#2 SCREEN#0
Not aliassing across scopes: plex_show_idx#30 plex_show_idx#0
Not aliassing across scopes: plex_sprite_idx#29 plex_sprite_idx#0
Not aliassing across scopes: plex_sprite_msb#27 plex_sprite_msb#0
Not aliassing across scopes: SPRITE#4 SPRITE#0
Not aliassing across scopes: YSIN#11 YSIN#0
Not aliassing across scopes: PLEX_SCREEN_PTR#10 PLEX_SCREEN_PTR#13
Not aliassing across scopes: plex_show_idx#16 plex_show_idx#10
Not aliassing across scopes: plex_sprite_idx#16 plex_sprite_idx#10
Not aliassing across scopes: plex_sprite_msb#18 plex_sprite_msb#11
Not aliassing across scopes: SCREEN#1 SCREEN#2
Not aliassing across scopes: PLEX_SCREEN_PTR#20 PLEX_SCREEN_PTR#18
Not aliassing across scopes: SPRITE#2 SPRITE#4
Not aliassing across scopes: plexInit::screen#0 SCREEN#1
Not aliassing across scopes: PLEX_SCREEN_PTR#12 PLEX_SCREEN_PTR#15
Not aliassing identity: SPRITE#1 SPRITE#1
Not aliassing identity: PLEX_SCREEN_PTR#24 PLEX_SCREEN_PTR#24
Not aliassing identity: PLEX_SCREEN_PTR#13 PLEX_SCREEN_PTR#13
Not aliassing across scopes: plex_show_idx#36 plex_show_idx#30
Not aliassing across scopes: plex_sprite_idx#34 plex_sprite_idx#29
Not aliassing across scopes: plex_sprite_msb#34 plex_sprite_msb#27
Not aliassing across scopes: YSIN#7 YSIN#11
Not aliassing across scopes: PLEX_SCREEN_PTR#44 PLEX_SCREEN_PTR#10
Not aliassing across scopes: plex_show_idx#18 plex_show_idx#1
Not aliassing across scopes: plex_sprite_idx#18 plex_sprite_idx#1
Not aliassing across scopes: plex_sprite_msb#20 plex_sprite_msb#1
Not aliassing across scopes: plex_sprite_idx#19 plex_sprite_idx#15
Not aliassing across scopes: plex_show_idx#19 plex_show_idx#15
Not aliassing across scopes: plex_sprite_msb#21 plex_sprite_msb#17
Not aliassing identity: loop::rasterY#1 loop::rasterY#1
Not aliassing identity: plex_sprite_idx#23 plex_sprite_idx#23
Not aliassing identity: plex_show_idx#24 plex_show_idx#24
Not aliassing identity: PLEX_SCREEN_PTR#16 PLEX_SCREEN_PTR#16
Not aliassing identity: plex_sprite_msb#30 plex_sprite_msb#30
Not aliassing identity: loop::ss#5 loop::ss#5
Not aliassing identity: loop::sin_idx#10 loop::sin_idx#10
Not aliassing identity: YSIN#10 YSIN#10
Not aliassing across scopes: plex_sprite_idx#20 plex_sprite_idx#15
Not aliassing across scopes: plex_show_idx#21 plex_show_idx#15
Not aliassing across scopes: plex_sprite_msb#10 plex_sprite_msb#17
Not aliassing across scopes: PLEX_SCREEN_PTR#14 PLEX_SCREEN_PTR#10
Not aliassing across scopes: plex_show_idx#11 plex_show_idx#16
Not aliassing across scopes: plex_sprite_idx#11 plex_sprite_idx#16
Not aliassing across scopes: plex_sprite_msb#12 plex_sprite_msb#18
Alias (byte) plex_sprite_idx#13 = (byte) plex_sprite_idx#14 
Alias (byte) plex_show_idx#13 = (byte) plex_show_idx#14 
Alias (byte) plex_sprite_msb#14 = (byte) plex_sprite_msb#16 
Alias (byte) plex_sprite_idx#15 = (byte) plex_sprite_idx#27 
Alias (byte) plex_show_idx#15 = (byte) plex_show_idx#28 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: plexInit::plexSetScreen1_screen#0 plexInit::screen#0
Not aliassing identity: PLEX_SCREEN_PTR#15 PLEX_SCREEN_PTR#15
Not aliassing identity: plexSort::nxt_y#1 plexSort::nxt_y#1
Not aliassing identity: plexSort::nxt_idx#1 plexSort::nxt_idx#1
Not aliassing identity: plexSort::m#5 plexSort::m#5
Not aliassing across scopes: plex_sprite_idx#13 plex_sprite_idx#23
Not aliassing across scopes: plex_show_idx#13 plex_show_idx#24
Not aliassing across scopes: PLEX_SCREEN_PTR#9 PLEX_SCREEN_PTR#16
Not aliassing across scopes: plex_sprite_msb#14 plex_sprite_msb#30
Not aliassing across scopes: PLEX_SCREEN_PTR#18 PLEX_SCREEN_PTR#0
Not aliassing across scopes: SCREEN#2 SCREEN#0
Not aliassing across scopes: plex_show_idx#30 plex_show_idx#0
Not aliassing across scopes: plex_sprite_idx#29 plex_sprite_idx#0
Not aliassing across scopes: plex_sprite_msb#27 plex_sprite_msb#0
Not aliassing across scopes: SPRITE#4 SPRITE#0
Not aliassing across scopes: YSIN#11 YSIN#0
Not aliassing across scopes: PLEX_SCREEN_PTR#10 PLEX_SCREEN_PTR#13
Not aliassing across scopes: plex_show_idx#16 plex_show_idx#10
Not aliassing across scopes: plex_sprite_idx#16 plex_sprite_idx#10
Not aliassing across scopes: plex_sprite_msb#18 plex_sprite_msb#11
Not aliassing across scopes: SCREEN#1 SCREEN#2
Not aliassing across scopes: PLEX_SCREEN_PTR#20 PLEX_SCREEN_PTR#18
Not aliassing across scopes: SPRITE#2 SPRITE#4
Not aliassing across scopes: plexInit::screen#0 SCREEN#1
Not aliassing across scopes: PLEX_SCREEN_PTR#12 PLEX_SCREEN_PTR#15
Not aliassing identity: SPRITE#1 SPRITE#1
Not aliassing identity: PLEX_SCREEN_PTR#24 PLEX_SCREEN_PTR#24
Not aliassing identity: PLEX_SCREEN_PTR#13 PLEX_SCREEN_PTR#13
Not aliassing across scopes: plex_show_idx#36 plex_show_idx#30
Not aliassing across scopes: plex_sprite_idx#34 plex_sprite_idx#29
Not aliassing across scopes: plex_sprite_msb#34 plex_sprite_msb#27
Not aliassing across scopes: YSIN#7 YSIN#11
Not aliassing across scopes: PLEX_SCREEN_PTR#44 PLEX_SCREEN_PTR#10
Not aliassing across scopes: plex_show_idx#18 plex_show_idx#1
Not aliassing across scopes: plex_sprite_idx#18 plex_sprite_idx#1
Not aliassing across scopes: plex_sprite_msb#20 plex_sprite_msb#1
Not aliassing across scopes: plex_sprite_idx#19 plex_sprite_idx#15
Not aliassing across scopes: plex_show_idx#19 plex_show_idx#15
Not aliassing across scopes: plex_sprite_msb#21 plex_sprite_msb#17
Not aliassing identity: loop::rasterY#1 loop::rasterY#1
Not aliassing identity: plex_sprite_idx#23 plex_sprite_idx#23
Not aliassing identity: plex_show_idx#24 plex_show_idx#24
Not aliassing identity: PLEX_SCREEN_PTR#16 PLEX_SCREEN_PTR#16
Not aliassing identity: plex_sprite_msb#30 plex_sprite_msb#30
Not aliassing identity: loop::ss#5 loop::ss#5
Not aliassing identity: loop::sin_idx#10 loop::sin_idx#10
Not aliassing identity: YSIN#10 YSIN#10
Not aliassing across scopes: plex_sprite_idx#20 plex_sprite_idx#15
Not aliassing across scopes: plex_show_idx#21 plex_show_idx#15
Not aliassing across scopes: plex_sprite_msb#10 plex_sprite_msb#17
Not aliassing across scopes: PLEX_SCREEN_PTR#14 PLEX_SCREEN_PTR#10
Not aliassing across scopes: plex_show_idx#11 plex_show_idx#16
Not aliassing across scopes: plex_sprite_idx#11 plex_sprite_idx#16
Not aliassing across scopes: plex_sprite_msb#12 plex_sprite_msb#18
Self Phi Eliminated (byte*) PLEX_SCREEN_PTR#15
Self Phi Eliminated (byte) plexSort::nxt_y#1
Self Phi Eliminated (byte) plexSort::nxt_idx#1
Self Phi Eliminated (byte) plexSort::m#5
Self Phi Eliminated (byte*) SPRITE#1
Self Phi Eliminated (byte*) PLEX_SCREEN_PTR#24
Self Phi Eliminated (byte*) PLEX_SCREEN_PTR#13
Self Phi Eliminated (byte) loop::sin_idx#2
Self Phi Eliminated (byte*) YSIN#2
Self Phi Eliminated (byte) plex_show_idx#42
Self Phi Eliminated (byte) plex_sprite_idx#39
Self Phi Eliminated (byte) plex_sprite_msb#39
Self Phi Eliminated (byte*) PLEX_SCREEN_PTR#35
Self Phi Eliminated (byte*) YSIN#1
Self Phi Eliminated (byte) loop::sin_idx#3
Self Phi Eliminated (byte) plex_show_idx#31
Self Phi Eliminated (byte) plex_sprite_idx#30
Self Phi Eliminated (byte) plex_sprite_msb#28
Self Phi Eliminated (byte*) PLEX_SCREEN_PTR#25
Self Phi Eliminated (byte*) PLEX_SCREEN_PTR#17
Self Phi Eliminated (byte) loop::sin_idx#18
Self Phi Eliminated (byte*) YSIN#20
Self Phi Eliminated (byte) loop::rasterY#1
Self Phi Eliminated (byte) plex_sprite_idx#23
Self Phi Eliminated (byte) plex_show_idx#24
Self Phi Eliminated (byte*) PLEX_SCREEN_PTR#16
Self Phi Eliminated (byte) plex_sprite_msb#30
Self Phi Eliminated (byte) loop::ss#5
Self Phi Eliminated (byte) loop::sin_idx#10
Self Phi Eliminated (byte*) YSIN#10
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) plexInit::plexSetScreen1_screen#0 (byte*) plexInit::screen#0
Redundant Phi (byte*) PLEX_SCREEN_PTR#15 (byte*) PLEX_SCREEN_PTR#1
Redundant Phi (byte) plexSort::nxt_y#1 (byte) plexSort::nxt_y#0
Redundant Phi (byte) plexSort::nxt_idx#1 (byte) plexSort::nxt_idx#0
Redundant Phi (byte) plexSort::m#5 (byte) plexSort::m#2
Redundant Phi (byte*) PLEX_SCREEN_PTR#18 (byte*) PLEX_SCREEN_PTR#0
Redundant Phi (byte*) SCREEN#2 (byte*) SCREEN#0
Redundant Phi (byte) plex_show_idx#30 (byte) plex_show_idx#0
Redundant Phi (byte) plex_sprite_idx#29 (byte) plex_sprite_idx#0
Redundant Phi (byte) plex_sprite_msb#27 (byte) plex_sprite_msb#0
Redundant Phi (byte*) SPRITE#4 (byte*) SPRITE#0
Redundant Phi (byte*) YSIN#11 (byte*) YSIN#0
Redundant Phi (byte*) PLEX_SCREEN_PTR#10 (byte*) PLEX_SCREEN_PTR#13
Redundant Phi (byte) plex_show_idx#16 (byte) plex_show_idx#10
Redundant Phi (byte) plex_sprite_idx#16 (byte) plex_sprite_idx#10
Redundant Phi (byte) plex_sprite_msb#18 (byte) plex_sprite_msb#11
Redundant Phi (byte*) SCREEN#1 (byte*) SCREEN#2
Redundant Phi (byte*) PLEX_SCREEN_PTR#20 (byte*) PLEX_SCREEN_PTR#18
Redundant Phi (byte*) SPRITE#2 (byte*) SPRITE#4
Redundant Phi (byte*) PLEX_SCREEN_PTR#12 (byte*) PLEX_SCREEN_PTR#15
Redundant Phi (byte*) SPRITE#1 (byte*) SPRITE#2
Redundant Phi (byte*) PLEX_SCREEN_PTR#24 (byte*) PLEX_SCREEN_PTR#12
Redundant Phi (byte*) PLEX_SCREEN_PTR#13 (byte*) PLEX_SCREEN_PTR#24
Redundant Phi (byte) plex_show_idx#36 (byte) plex_show_idx#30
Redundant Phi (byte) plex_sprite_idx#34 (byte) plex_sprite_idx#29
Redundant Phi (byte) plex_sprite_msb#34 (byte) plex_sprite_msb#27
Redundant Phi (byte*) YSIN#7 (byte*) YSIN#11
Redundant Phi (byte*) PLEX_SCREEN_PTR#44 (byte*) PLEX_SCREEN_PTR#10
Redundant Phi (byte) loop::sin_idx#2 (byte) loop::sin_idx#6
Redundant Phi (byte*) YSIN#2 (byte*) YSIN#4
Redundant Phi (byte) plex_show_idx#42 (byte) plex_show_idx#10
Redundant Phi (byte) plex_sprite_idx#39 (byte) plex_sprite_idx#10
Redundant Phi (byte) plex_sprite_msb#39 (byte) plex_sprite_msb#11
Redundant Phi (byte*) PLEX_SCREEN_PTR#35 (byte*) PLEX_SCREEN_PTR#39
Redundant Phi (byte*) YSIN#1 (byte*) YSIN#2
Redundant Phi (byte) loop::sin_idx#3 (byte) loop::sin_idx#2
Redundant Phi (byte) plex_show_idx#31 (byte) plex_show_idx#42
Redundant Phi (byte) plex_sprite_idx#30 (byte) plex_sprite_idx#39
Redundant Phi (byte) plex_sprite_msb#28 (byte) plex_sprite_msb#39
Redundant Phi (byte*) PLEX_SCREEN_PTR#25 (byte*) PLEX_SCREEN_PTR#35
Redundant Phi (byte) plex_show_idx#18 (byte) plex_show_idx#1
Redundant Phi (byte) plex_sprite_idx#18 (byte) plex_sprite_idx#1
Redundant Phi (byte) plex_sprite_msb#20 (byte) plex_sprite_msb#1
Redundant Phi (byte*) PLEX_SCREEN_PTR#17 (byte*) PLEX_SCREEN_PTR#25
Redundant Phi (byte) loop::sin_idx#18 (byte) loop::sin_idx#1
Redundant Phi (byte*) YSIN#20 (byte*) YSIN#1
Redundant Phi (byte) plex_sprite_idx#19 (byte) plex_sprite_idx#15
Redundant Phi (byte) plex_show_idx#19 (byte) plex_show_idx#15
Redundant Phi (byte) plex_sprite_msb#21 (byte) plex_sprite_msb#17
Redundant Phi (byte) loop::rasterY#1 (byte) loop::rasterY#0
Redundant Phi (byte) plex_sprite_idx#23 (byte) plex_sprite_idx#41
Redundant Phi (byte) plex_show_idx#24 (byte) plex_show_idx#20
Redundant Phi (byte*) PLEX_SCREEN_PTR#16 (byte*) PLEX_SCREEN_PTR#32
Redundant Phi (byte) plex_sprite_msb#30 (byte) plex_sprite_msb#41
Redundant Phi (byte) loop::ss#5 (byte) loop::ss#10
Redundant Phi (byte) loop::sin_idx#10 (byte) loop::sin_idx#14
Redundant Phi (byte*) YSIN#10 (byte*) YSIN#16
Redundant Phi (byte) plex_sprite_idx#20 (byte) plex_sprite_idx#15
Redundant Phi (byte) plex_show_idx#21 (byte) plex_show_idx#15
Redundant Phi (byte) plex_sprite_msb#10 (byte) plex_sprite_msb#17
Redundant Phi (byte*) PLEX_SCREEN_PTR#14 (byte*) PLEX_SCREEN_PTR#10
Redundant Phi (byte) plex_show_idx#11 (byte) plex_show_idx#16
Redundant Phi (byte) plex_sprite_idx#11 (byte) plex_sprite_idx#16
Redundant Phi (byte) plex_sprite_msb#12 (byte) plex_sprite_msb#18
Succesful SSA optimization Pass2RedundantPhiElimination
Redundant Phi (byte) plexSort::m#3 (byte) plexSort::m#2
Redundant Phi (byte) plex_show_idx#20 (byte) plex_show_idx#15
Redundant Phi (byte) plex_sprite_idx#41 (byte) plex_sprite_idx#15
Redundant Phi (byte) plex_sprite_msb#41 (byte) plex_sprite_msb#17
Succesful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) plexInit::$2 if((byte) plexInit::i#1!=rangelast(0,plexInit::$1)) goto plexInit::@1
Simple Condition (bool~) plexSort::$3 if((byte) plexSort::nxt_y#0>=*((byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::m#2))) goto plexSort::@2
Simple Condition (bool~) plexSort::$8 if((byte) plexSort::m#1!=rangelast(0,plexSort::$0)) goto plexSort::@1
Simple Condition (bool~) plexShowSprite::$4 if((byte~) plexShowSprite::$3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto plexShowSprite::@1
Simple Condition (bool~) plexShowSprite::$9 if((byte) plex_sprite_msb#26!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto plexShowSprite::@3
Simple Condition (bool~) init::$7 if((byte) init::sx#1!=rangelast(0,init::$3)) goto init::@1
Simple Condition (bool~) init::$8 if((byte) init::ss#1!=rangelast(0,7)) goto init::@2
Simple Condition (bool~) loop::$0 if(*((byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto loop::@5
Simple Condition (bool~) loop::$2 if((byte) loop::sy#1!=rangelast(0,loop::$1)) goto loop::@7
Simple Condition (bool~) loop::$5 if((byte) loop::ss#1!=rangelast(0,7)) goto loop::@8
Simple Condition (bool~) loop::$9 if(*((byte*) RASTER#0)<(byte) loop::rasterY#0) goto loop::@11
Simple Condition (bool~) loop::$11 if((byte) loop::ss#3!=rangelast(8,loop::$6)) goto loop::@9
Succesful SSA optimization Pass2ConditionalJumpSimplification
Rewriting && if()-condition to two if()s (bool~) plexSort::$7 ← (bool~) plexSort::$5 && (bool~) plexSort::$6
Succesful SSA optimization Pass2ConditionalAndOrRewriting
Constant (const byte*) SPRITES_XPOS#0 = ((byte*))53248
Constant (const byte*) SPRITES_YPOS#0 = ((byte*))53249
Constant (const byte*) SPRITES_XMSB#0 = ((byte*))53264
Constant (const byte*) RASTER#0 = ((byte*))53266
Constant (const byte*) SPRITES_ENABLE#0 = ((byte*))53269
Constant (const byte*) BORDERCOL#0 = ((byte*))53280
Constant (const byte*) SPRITES_COLS#0 = ((byte*))53287
Constant (const byte*) D011#0 = ((byte*))53265
Constant (const byte) VIC_DEN#0 = 16
Constant (const byte) VIC_RSEL#0 = 8
Constant (const byte) BLACK#0 = 0
Constant (const byte) GREEN#0 = 5
Constant (const byte) PLEX_COUNT#0 = 24
Constant (const word/signed word/dword/signed dword) $0 = 1024+1016
Constant (const byte) plex_show_idx#0 = 0
Constant (const byte) plex_sprite_idx#0 = 0
Constant (const byte) plex_sprite_msb#0 = 1
Constant (const byte) plexInit::i#0 = 0
Constant (const byte) plexSort::m#0 = 0
Constant (const byte) plex_show_idx#1 = 0
Constant (const byte) plex_sprite_idx#1 = 0
Constant (const byte) plex_sprite_msb#1 = 1
Constant (const byte) plex_sprite_msb#4 = 1
Constant (const byte*) SPRITE#0 = ((byte*))8192
Constant (const byte*) SCREEN#0 = ((byte*))1024
Constant (const byte*) YSIN#0 = ((byte*))8448
Constant (const word) init::xp#0 = 32
Constant (const byte) init::sx#0 = 0
Constant (const byte) init::ss#0 = 0
Constant (const byte) loop::sin_idx#0 = 0
Constant (const byte) loop::sy#0 = 0
Constant (const byte) loop::ss#0 = 0
Constant (const byte) loop::ss#2 = 8
Succesful SSA optimization Pass2ConstantIdentification
Constant (const word[PLEX_COUNT#0]) PLEX_XPOS#0 = { fill( PLEX_COUNT#0, 0) }
Constant (const byte[PLEX_COUNT#0]) PLEX_YPOS#0 = { fill( PLEX_COUNT#0, 0) }
Constant (const byte[PLEX_COUNT#0]) PLEX_PTR#0 = { fill( PLEX_COUNT#0, 0) }
Constant (const byte*) PLEX_SCREEN_PTR#0 = ((byte*))$0
Constant (const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 = { fill( PLEX_COUNT#0, 0) }
Constant (const byte/signed word/word/dword/signed dword) plexInit::$1 = PLEX_COUNT#0-1
Constant (const byte/signed word/word/dword/signed dword) plexSort::$0 = PLEX_COUNT#0-2
Constant (const byte) init::$0 = VIC_DEN#0|VIC_RSEL#0
Constant (const byte*) plexInit::screen#0 = SCREEN#0
Constant (const byte/signed word/word/dword/signed dword) init::$3 = PLEX_COUNT#0-1
Constant (const byte*) init::$4 = SPRITE#0/64
Constant (const byte/signed word/word/dword/signed dword) loop::$1 = PLEX_COUNT#0-1
Constant (const byte/signed word/word/dword/signed dword) loop::$6 = PLEX_COUNT#0-1
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte*) PLEX_SCREEN_PTR#1 = plexInit::screen#0+1016
Constant (const byte/word/dword) init::$1 = init::$0|3
Constant (const byte) init::$5 = ((byte))init::$4
Succesful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in assignment *(PLEX_SORTED_IDX#0+1 + plexSort::$1)
Consolidated array index constant in assignment *(PLEX_SORTED_IDX#0+1 + plexSort::$4)
Succesful SSA optimization Pass2ConstantAdditionElimination
if() condition always true - replacing block destination if(true) goto loop::@2
Succesful SSA optimization Pass2ConstantIfs
Inferred type updated to byte in (byte/signed word/word/dword/signed dword~) plexSort::$1 ← (byte) plexSort::m#2
Inferred type updated to byte in (byte/signed word/word/dword/signed dword~) plexSort::$4 ← (byte) plexSort::s#3
Eliminating unused variable - keeping the phi block (byte) plex_show_idx#10
Eliminating unused variable - keeping the phi block (byte) plex_sprite_idx#10
Eliminating unused variable - keeping the phi block (byte) plex_sprite_msb#11
Eliminating unused constant (const byte*) PLEX_SCREEN_PTR#0
Succesful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const word/signed word/dword/signed dword) $0
Eliminating unused constant (const byte) plex_show_idx#0
Eliminating unused constant (const byte) plex_sprite_idx#0
Eliminating unused constant (const byte) plex_sprite_msb#0
Succesful SSA optimization PassNEliminateUnusedVars
Removing unused block loop::@return
Succesful SSA optimization Pass2EliminateUnusedBlocks
Resolved ranged next value plexInit::i#1 ← ++ plexInit::i#2 to ++
Resolved ranged comparison value if(plexInit::i#1!=rangelast(0,plexInit::$1)) goto plexInit::@1 to (const byte/signed word/word/dword/signed dword) plexInit::$1+(byte/signed byte/word/signed word/dword/signed dword) 1
Resolved ranged next value plexSort::m#1 ← ++ plexSort::m#2 to ++
Resolved ranged comparison value if(plexSort::m#1!=rangelast(0,plexSort::$0)) goto plexSort::@1 to (const byte/signed word/word/dword/signed dword) plexSort::$0+(byte/signed byte/word/signed word/dword/signed dword) 1
Resolved ranged next value init::sx#1 ← ++ init::sx#2 to ++
Resolved ranged comparison value if(init::sx#1!=rangelast(0,init::$3)) goto init::@1 to (const byte/signed word/word/dword/signed dword) init::$3+(byte/signed byte/word/signed word/dword/signed dword) 1
Resolved ranged next value init::ss#1 ← ++ init::ss#2 to ++
Resolved ranged comparison value if(init::ss#1!=rangelast(0,7)) goto init::@2 to (byte/signed byte/word/signed word/dword/signed dword) 8
Resolved ranged next value loop::sy#1 ← ++ loop::sy#2 to ++
Resolved ranged comparison value if(loop::sy#1!=rangelast(0,loop::$1)) goto loop::@7 to (const byte/signed word/word/dword/signed dword) loop::$1+(byte/signed byte/word/signed word/dword/signed dword) 1
Resolved ranged next value loop::ss#1 ← ++ loop::ss#4 to ++
Resolved ranged comparison value if(loop::ss#1!=rangelast(0,7)) goto loop::@8 to (byte/signed byte/word/signed word/dword/signed dword) 8
Resolved ranged next value loop::ss#3 ← ++ loop::ss#10 to ++
Resolved ranged comparison value if(loop::ss#3!=rangelast(8,loop::$6)) goto loop::@9 to (const byte/signed word/word/dword/signed dword) loop::$6+(byte/signed byte/word/signed word/dword/signed dword) 1
Culled Empty Block (label) @23
Culled Empty Block (label) plexInit::@3
Culled Empty Block (label) plexSort::@4
Culled Empty Block (label) plexSort::@6
Culled Empty Block (label) plexShowSprite::@3
Not culling empty block because it shares successor with its predecessor. (label) plexShowSprite::@6
Culled Empty Block (label) main::@2
Culled Empty Block (label) init::@5
Culled Empty Block (label) loop::@2
Culled Empty Block (label) loop::@5
Culled Empty Block (label) loop::@19
Culled Empty Block (label) loop::plexShowNextYpos1_@return
Culled Empty Block (label) loop::@11
Culled Empty Block (label) @32
Succesful SSA optimization Pass2CullEmptyBlocks
Not culling empty block because it shares successor with its predecessor. (label) plexShowSprite::@6
Not aliassing across scopes: PLEX_SCREEN_PTR#9 PLEX_SCREEN_PTR#32
Alias (byte) plexSort::m#2 = (byte~) plexSort::$1 
Alias (byte) plexSort::s#3 = (byte~) plexSort::$4 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: PLEX_SCREEN_PTR#9 PLEX_SCREEN_PTR#32
Self Phi Eliminated (byte*) PLEX_SCREEN_PTR#32
Self Phi Eliminated (byte) loop::sin_idx#14
Self Phi Eliminated (byte*) YSIN#16
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) PLEX_SCREEN_PTR#32 (byte*) PLEX_SCREEN_PTR#39
Redundant Phi (byte) loop::sin_idx#14 (byte) loop::sin_idx#1
Redundant Phi (byte*) YSIN#16 (byte*) YSIN#4
Succesful SSA optimization Pass2RedundantPhiElimination
Redundant Phi (byte*) PLEX_SCREEN_PTR#9 (byte*) PLEX_SCREEN_PTR#39
Succesful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) plexSort::$5 if((byte) plexSort::s#1!=(byte/word/signed word/dword/signed dword) 255) goto plexSort::@7
Simple Condition (bool~) plexSort::$6 if((byte) plexSort::nxt_y#0<*((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::s#1))) goto plexSort::@3
Succesful SSA optimization Pass2ConditionalJumpSimplification
Not culling empty block because it shares successor with its predecessor. (label) plexShowSprite::@6
Self Phi Eliminated (byte*) YSIN#4
Self Phi Eliminated (byte*) PLEX_SCREEN_PTR#39
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) YSIN#4 (const byte*) YSIN#0
Redundant Phi (byte*) PLEX_SCREEN_PTR#39 (const byte*) PLEX_SCREEN_PTR#1
Succesful SSA optimization Pass2RedundantPhiElimination
Not culling empty block because it shares successor with its predecessor. (label) plexShowSprite::@6
OPTIMIZING CONTROL FLOW GRAPH
Inlining constant with var siblings (const byte) plexInit::i#0
Inlining constant with var siblings (const byte) plexInit::i#0
Inlining constant with var siblings (const byte) plexSort::m#0
Inlining constant with var siblings (const byte) plexSort::m#0
Inlining constant with var siblings (const word) init::xp#0
Inlining constant with var siblings (const word) init::xp#0
Inlining constant with var siblings (const byte) init::sx#0
Inlining constant with var siblings (const byte) init::sx#0
Inlining constant with var siblings (const byte) init::ss#0
Inlining constant with var siblings (const byte) init::ss#0
Inlining constant with var siblings (const byte) loop::sin_idx#0
Inlining constant with var siblings (const byte) loop::sin_idx#0
Inlining constant with var siblings (const byte) loop::sy#0
Inlining constant with var siblings (const byte) loop::sy#0
Inlining constant with var siblings (const byte) loop::ss#0
Inlining constant with var siblings (const byte) loop::ss#0
Inlining constant with var siblings (const byte) loop::ss#0
Inlining constant with var siblings (const byte) loop::ss#0
Inlining constant with different constant siblings (const byte) loop::ss#0
Inlining constant with var siblings (const byte) loop::ss#2
Inlining constant with var siblings (const byte) loop::ss#2
Inlining constant with var siblings (const byte) loop::ss#2
Inlining constant with var siblings (const byte) loop::ss#2
Inlining constant with different constant siblings (const byte) loop::ss#2
Inlining constant with var siblings (const byte) plex_show_idx#1
Inlining constant with var siblings (const byte) plex_show_idx#1
Inlining constant with var siblings (const byte) plex_show_idx#1
Inlining constant with var siblings (const byte) plex_sprite_idx#1
Inlining constant with var siblings (const byte) plex_sprite_idx#1
Inlining constant with var siblings (const byte) plex_sprite_idx#1
Inlining constant with var siblings (const byte) plex_sprite_msb#1
Inlining constant with var siblings (const byte) plex_sprite_msb#1
Inlining constant with var siblings (const byte) plex_sprite_msb#1
Inlining constant with var siblings (const byte) plex_sprite_msb#1
Inlining constant with var siblings (const byte) plex_sprite_msb#4
Inlining constant with var siblings (const byte) plex_sprite_msb#4
Inlining constant with var siblings (const byte) plex_sprite_msb#4
Inlining constant with var siblings (const byte) plex_sprite_msb#4
Constant inlined init::xp#0 = (byte/signed byte/word/signed word/dword/signed dword) 32
Constant inlined plexInit::$1 = (const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined plexSort::$0 = (const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined init::ss#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined plexInit::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined plexSort::m#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined init::$3 = (const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined init::$1 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined loop::sin_idx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined init::$0 = (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0
Constant inlined plexInit::screen#0 = (const byte*) SCREEN#0
Constant inlined plex_sprite_msb#4 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined init::$5 = ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64
Constant inlined plex_show_idx#1 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined plex_sprite_idx#1 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined plex_sprite_msb#1 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined init::$4 = (const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64
Constant inlined loop::$1 = (const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined loop::sy#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined loop::$6 = (const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined loop::ss#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined init::sx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined loop::ss#2 = (byte/signed byte/word/signed word/dword/signed dword) 8
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @28 @31 @end main main::@1 main::@return loop loop::@1 loop::@4 loop::@6 loop::@7 loop::@18 loop::@26 loop::@8 loop::@27 loop::@9 loop::plexShowNextYpos1 loop::@25 loop::@10 loop::@12 loop::@28 loop::@23 plexShowSprite plexShowSprite::@4 plexShowSprite::@2 plexShowSprite::@6 plexShowSprite::@return plexShowSprite::@1 plexSort plexSort::@1 plexSort::@3 plexSort::@5 plexSort::@2 plexSort::@return plexSort::@7 init init::@1 init::@3 init::@2 init::@return plexInit plexInit::plexSetScreen1 plexInit::@1 plexInit::@return 
Added new block during phi lifting loop::@29(between loop::@7 and loop::@7)
Added new block during phi lifting loop::@30(between loop::@27 and loop::@8)
Added new block during phi lifting loop::@31(between loop::@28 and loop::@9)
Added new block during phi lifting plexShowSprite::@7(between plexShowSprite::@2 and plexShowSprite::@return)
Added new block during phi lifting plexSort::@8(between plexSort::@2 and plexSort::@1)
Added new block during phi lifting plexSort::@9(between plexSort::@7 and plexSort::@3)
Added new block during phi lifting plexSort::@10(between plexSort::@1 and plexSort::@3)
Added new block during phi lifting init::@6(between init::@1 and init::@1)
Added new block during phi lifting init::@7(between init::@2 and init::@2)
Added new block during phi lifting plexInit::@4(between plexInit::@1 and plexInit::@1)
Block Sequence Planned @begin @28 @31 @end main main::@1 main::@return loop loop::@1 loop::@4 loop::@6 loop::@7 loop::@18 loop::@26 loop::@8 loop::@27 loop::@9 loop::plexShowNextYpos1 loop::@25 loop::@10 loop::@12 loop::@28 loop::@23 loop::@31 loop::@30 loop::@29 plexShowSprite plexShowSprite::@4 plexShowSprite::@2 plexShowSprite::@6 plexShowSprite::@return plexShowSprite::@7 plexShowSprite::@1 plexSort plexSort::@1 plexSort::@10 plexSort::@3 plexSort::@5 plexSort::@2 plexSort::@return plexSort::@8 plexSort::@7 plexSort::@9 init init::@1 init::@3 init::@2 init::@return init::@7 init::@6 plexInit plexInit::plexSetScreen1 plexInit::@1 plexInit::@return plexInit::@4 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @31
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of loop
Adding NOP phi() at start of plexShowSprite::@6
Adding NOP phi() at start of plexSort
Adding NOP phi() at start of plexInit
Adding NOP phi() at start of plexInit::plexSetScreen1
CALL GRAPH
Calls in [] to main:4 
Calls in [main] to init:7 loop:9 
Calls in [loop] to plexSort:23 plexShowSprite:29 plexShowSprite:41 
Calls in [init] to plexInit:93 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 18 initial phi equivalence classes
Not coalescing [15] loop::y_idx#3 ← loop::sin_idx#6
Coalesced [26] plex_sprite_idx#51 ← plex_sprite_idx#24
Coalesced [27] plex_show_idx#51 ← plex_show_idx#25
Coalesced [28] plex_sprite_msb#51 ← plex_sprite_msb#29
Coalesced [38] plex_sprite_idx#50 ← plex_sprite_idx#15
Coalesced [39] plex_show_idx#50 ← plex_show_idx#15
Coalesced [40] plex_sprite_msb#50 ← plex_sprite_msb#17
Coalesced [45] loop::sin_idx#22 ← loop::sin_idx#1
Coalesced [46] loop::ss#15 ← loop::ss#3
Coalesced (already) [47] plex_sprite_idx#49 ← plex_sprite_idx#15
Coalesced (already) [48] plex_show_idx#49 ← plex_show_idx#15
Coalesced (already) [49] plex_sprite_msb#49 ← plex_sprite_msb#17
Coalesced [50] loop::ss#14 ← loop::ss#1
Coalesced [51] loop::y_idx#4 ← loop::y_idx#1
Coalesced [52] loop::sy#3 ← loop::sy#1
Coalesced [72] plex_sprite_msb#52 ← plex_sprite_msb#26
Not coalescing [79] plexSort::s#6 ← plexSort::m#2
Coalesced [89] plexSort::m#7 ← plexSort::m#1
Coalesced [91] plexSort::s#5 ← plexSort::s#1
Coalesced [107] init::ss#3 ← init::ss#1
Coalesced [108] init::sx#3 ← init::sx#1
Coalesced [109] init::xp#3 ← init::xp#1
Coalesced [117] plexInit::i#3 ← plexInit::i#1
Coalesced down to 14 phi equivalence classes
Culled Empty Block (label) loop::@31
Culled Empty Block (label) loop::@30
Culled Empty Block (label) loop::@29
Culled Empty Block (label) plexShowSprite::@6
Not culling empty block because it shares successor with its predecessor. (label) plexShowSprite::@7
Culled Empty Block (label) plexSort::@8
Culled Empty Block (label) plexSort::@9
Culled Empty Block (label) init::@7
Culled Empty Block (label) init::@6
Culled Empty Block (label) plexInit::@4
Block Sequence Planned @begin @28 @31 @end main main::@1 main::@return loop loop::@1 loop::@4 loop::@6 loop::@7 loop::@18 loop::@26 loop::@8 loop::@27 loop::@9 loop::plexShowNextYpos1 loop::@25 loop::@10 loop::@12 loop::@28 loop::@23 plexShowSprite plexShowSprite::@4 plexShowSprite::@2 plexShowSprite::@return plexShowSprite::@7 plexShowSprite::@1 plexSort plexSort::@1 plexSort::@10 plexSort::@3 plexSort::@5 plexSort::@2 plexSort::@return plexSort::@7 init init::@1 init::@3 init::@2 init::@return plexInit plexInit::plexSetScreen1 plexInit::@1 plexInit::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @31
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of loop
Adding NOP phi() at start of plexShowSprite::@7
Adding NOP phi() at start of plexSort
Adding NOP phi() at start of plexInit
Adding NOP phi() at start of plexInit::plexSetScreen1
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@28
@28: scope:[]  from @begin
  kickasm(location (const byte*) YSIN#0) {{ .var min = 51
    .var max = 250-21
    .var ampl = max-min;
    .for(var i=0;i<256;i++)
        .byte round(min+(ampl/2)+(ampl/2)*sin(toRadians(360*i/256)))
 }}
  kickasm(location (const byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
.for (var y=0; y<21; y++)
    .for (var x=0;x<3; x++)
        .byte pic.getSinglecolorByte(x,y)
 }}
  to:@31
@31: scope:[]  from @28
  [3] phi() [ ] ( )
  [4] call main  [ ] ( )
  to:@end
@end: scope:[]  from @31
  [5] phi() [ ] ( )
main: scope:[main]  from @31
  asm { sei  }
  [7] call init  [ ] ( main:4 [ ] )
  to:main::@1
main::@1: scope:[main]  from main
  [8] phi() [ ] ( main:4 [ ] )
  [9] call loop  [ ] ( main:4 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@1
  [10] return  [ ] ( main:4 [ ] )
  to:@return
loop: scope:[loop]  from main::@1
  [11] phi() [ ] ( main:4::loop:9 [ ] )
  to:loop::@1
loop::@1: scope:[loop]  from loop loop::@23
  [12] (byte) loop::sin_idx#6 ← phi( loop/(byte/signed byte/word/signed word/dword/signed dword) 0 loop::@23/(byte) loop::sin_idx#1 ) [ loop::sin_idx#6 ] ( main:4::loop:9 [ loop::sin_idx#6 ] )
  to:loop::@4
loop::@4: scope:[loop]  from loop::@1 loop::@4
  [13] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto loop::@4 [ loop::sin_idx#6 ] ( main:4::loop:9 [ loop::sin_idx#6 ] )
  to:loop::@6
loop::@6: scope:[loop]  from loop::@4
  [14] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ loop::sin_idx#6 ] ( main:4::loop:9 [ loop::sin_idx#6 ] )
  [15] (byte~) loop::y_idx#3 ← (byte) loop::sin_idx#6 [ loop::sin_idx#6 loop::y_idx#3 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::y_idx#3 ] )
  to:loop::@7
loop::@7: scope:[loop]  from loop::@6 loop::@7
  [16] (byte) loop::sy#2 ← phi( loop::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 loop::@7/(byte) loop::sy#1 ) [ loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] )
  [16] (byte) loop::y_idx#2 ← phi( loop::@6/(byte~) loop::y_idx#3 loop::@7/(byte) loop::y_idx#1 ) [ loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] )
  [17] *((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + (byte) loop::sy#2) ← *((const byte*) YSIN#0 + (byte) loop::y_idx#2) [ loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] )
  [18] (byte) loop::y_idx#1 ← (byte) loop::y_idx#2 + (byte/signed byte/word/signed word/dword/signed dword) 10 [ loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] )
  [19] (byte) loop::sy#1 ← ++ (byte) loop::sy#2 [ loop::sin_idx#6 loop::y_idx#1 loop::sy#1 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::y_idx#1 loop::sy#1 ] )
  [20] if((byte) loop::sy#1!=(const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto loop::@7 [ loop::sin_idx#6 loop::y_idx#1 loop::sy#1 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::y_idx#1 loop::sy#1 ] )
  to:loop::@18
loop::@18: scope:[loop]  from loop::@7
  [21] (byte) loop::sin_idx#1 ← (byte) loop::sin_idx#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 [ loop::sin_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#1 ] )
  [22] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ loop::sin_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#1 ] )
  [23] call plexSort  [ loop::sin_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#1 ] )
  to:loop::@26
loop::@26: scope:[loop]  from loop::@18
  [24] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ loop::sin_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#1 ] )
  to:loop::@8
loop::@8: scope:[loop]  from loop::@26 loop::@27
  [25] (byte) loop::ss#4 ← phi( loop::@26/(byte/signed byte/word/signed word/dword/signed dword) 0 loop::@27/(byte) loop::ss#1 ) [ loop::sin_idx#1 plex_sprite_idx#24 plex_show_idx#25 plex_sprite_msb#29 loop::ss#4 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#24 plex_show_idx#25 plex_sprite_msb#29 loop::ss#4 ] )
  [25] (byte) plex_sprite_msb#29 ← phi( loop::@26/(byte/signed byte/word/signed word/dword/signed dword) 1 loop::@27/(byte) plex_sprite_msb#17 ) [ loop::sin_idx#1 plex_sprite_idx#24 plex_show_idx#25 plex_sprite_msb#29 loop::ss#4 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#24 plex_show_idx#25 plex_sprite_msb#29 loop::ss#4 ] )
  [25] (byte) plex_show_idx#25 ← phi( loop::@26/(byte/signed byte/word/signed word/dword/signed dword) 0 loop::@27/(byte) plex_show_idx#15 ) [ loop::sin_idx#1 plex_sprite_idx#24 plex_show_idx#25 plex_sprite_msb#29 loop::ss#4 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#24 plex_show_idx#25 plex_sprite_msb#29 loop::ss#4 ] )
  [25] (byte) plex_sprite_idx#24 ← phi( loop::@26/(byte/signed byte/word/signed word/dword/signed dword) 0 loop::@27/(byte) plex_sprite_idx#15 ) [ loop::sin_idx#1 plex_sprite_idx#24 plex_show_idx#25 plex_sprite_msb#29 loop::ss#4 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#24 plex_show_idx#25 plex_sprite_msb#29 loop::ss#4 ] )
  [26] call plexShowSprite  [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] ( main:4::loop:9 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] )
  to:loop::@27
loop::@27: scope:[loop]  from loop::@8
  [27] (byte) loop::ss#1 ← ++ (byte) loop::ss#4 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#1 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#1 ] )
  [28] if((byte) loop::ss#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto loop::@8 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#1 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#1 ] )
  to:loop::@9
loop::@9: scope:[loop]  from loop::@27 loop::@28
  [29] (byte) loop::ss#10 ← phi( loop::@27/(byte/signed byte/word/signed word/dword/signed dword) 8 loop::@28/(byte) loop::ss#3 ) [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] )
  [30] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] )
  to:loop::plexShowNextYpos1
loop::plexShowNextYpos1: scope:[loop]  from loop::@9
  [31] (byte) loop::plexShowNextYpos1_return#0 ← *((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#15)) [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::plexShowNextYpos1_return#0 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::plexShowNextYpos1_return#0 ] )
  to:loop::@25
loop::@25: scope:[loop]  from loop::plexShowNextYpos1
  [32] (byte) loop::rasterY#0 ← (byte) loop::plexShowNextYpos1_return#0 - (byte/signed byte/word/signed word/dword/signed dword) 8 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::rasterY#0 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::rasterY#0 ] )
  to:loop::@10
loop::@10: scope:[loop]  from loop::@10 loop::@25
  [33] if(*((const byte*) RASTER#0)<(byte) loop::rasterY#0) goto loop::@10 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::rasterY#0 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::rasterY#0 ] )
  to:loop::@12
loop::@12: scope:[loop]  from loop::@10
  [34] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] )
  [35] call plexShowSprite  [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] )
  to:loop::@28
loop::@28: scope:[loop]  from loop::@12
  [36] (byte) loop::ss#3 ← ++ (byte) loop::ss#10 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#3 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#3 ] )
  [37] if((byte) loop::ss#3!=(const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto loop::@9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#3 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#3 ] )
  to:loop::@23
loop::@23: scope:[loop]  from loop::@28
  [38] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 [ loop::sin_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#1 ] )
  to:loop::@1
plexShowSprite: scope:[plexShowSprite]  from loop::@12 loop::@8
  [39] (byte) plex_sprite_msb#14 ← phi( loop::@12/(byte) plex_sprite_msb#17 loop::@8/(byte) plex_sprite_msb#29 ) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] )
  [39] (byte) plex_show_idx#13 ← phi( loop::@12/(byte) plex_show_idx#15 loop::@8/(byte) plex_show_idx#25 ) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] )
  [39] (byte) plex_sprite_idx#13 ← phi( loop::@12/(byte) plex_sprite_idx#15 loop::@8/(byte) plex_sprite_idx#24 ) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] )
  [40] (byte) plexShowSprite::plex_sprite_idx2#0 ← (byte) plex_sprite_idx#13 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] )
  [41] *((const byte*) SPRITES_YPOS#0 + (byte) plexShowSprite::plex_sprite_idx2#0) ← *((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#13)) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] )
  [42] *((const byte*) PLEX_SCREEN_PTR#1 + (byte) plex_sprite_idx#13) ← *((const byte[PLEX_COUNT#0]) PLEX_PTR#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#13)) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] )
  [43] (byte) plexShowSprite::xpos_idx#0 ← *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#13) << (byte/signed byte/word/signed word/dword/signed dword) 1 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] )
  [44] (byte~) plexShowSprite::$2 ← < *((const word[PLEX_COUNT#0]) PLEX_XPOS#0 + (byte) plexShowSprite::xpos_idx#0) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 plexShowSprite::$2 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 plexShowSprite::$2 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 plexShowSprite::$2 ] )
  [45] *((const byte*) SPRITES_XPOS#0 + (byte) plexShowSprite::plex_sprite_idx2#0) ← (byte~) plexShowSprite::$2 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::xpos_idx#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::xpos_idx#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::xpos_idx#0 ] )
  [46] (byte~) plexShowSprite::$3 ← > *((const word[PLEX_COUNT#0]) PLEX_XPOS#0 + (byte) plexShowSprite::xpos_idx#0) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$3 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$3 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$3 ] )
  [47] if((byte~) plexShowSprite::$3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto plexShowSprite::@1 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] )
  to:plexShowSprite::@4
plexShowSprite::@4: scope:[plexShowSprite]  from plexShowSprite
  [48] (byte/word/dword~) plexShowSprite::$5 ← (byte/word/signed word/dword/signed dword) 255 ^ (byte) plex_sprite_msb#14 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$5 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$5 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$5 ] )
  [49] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) & (byte/word/dword~) plexShowSprite::$5 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] )
  to:plexShowSprite::@2
plexShowSprite::@2: scope:[plexShowSprite]  from plexShowSprite::@1 plexShowSprite::@4
  [50] (byte/signed word/word/dword/signed dword~) plexShowSprite::$6 ← (byte) plex_sprite_idx#13 + (byte/signed byte/word/signed word/dword/signed dword) 1 [ plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$6 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$6 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$6 ] )
  [51] (byte) plex_sprite_idx#15 ← (byte/signed word/word/dword/signed dword~) plexShowSprite::$6 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ plex_sprite_idx#15 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#13 plex_sprite_msb#14 ] )
  [52] (byte) plex_show_idx#15 ← ++ (byte) plex_show_idx#13 [ plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#14 ] )
  [53] (byte) plex_sprite_msb#26 ← (byte) plex_sprite_msb#14 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] )
  [54] if((byte) plex_sprite_msb#26!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto plexShowSprite::@7 [ plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] )
  to:plexShowSprite::@return
plexShowSprite::@return: scope:[plexShowSprite]  from plexShowSprite::@2 plexShowSprite::@7
  [55] (byte) plex_sprite_msb#17 ← phi( plexShowSprite::@7/(byte) plex_sprite_msb#26 plexShowSprite::@2/(byte/signed byte/word/signed word/dword/signed dword) 1 ) [ plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] )
  [56] return  [ plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] )
  to:@return
plexShowSprite::@7: scope:[plexShowSprite]  from plexShowSprite::@2
  [57] phi() [ plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] )
  to:plexShowSprite::@return
plexShowSprite::@1: scope:[plexShowSprite]  from plexShowSprite
  [58] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) | (byte) plex_sprite_msb#14 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] )
  to:plexShowSprite::@2
plexSort: scope:[plexSort]  from loop::@18
  [59] phi() [ ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 ] )
  to:plexSort::@1
plexSort::@1: scope:[plexSort]  from plexSort plexSort::@2
  [60] (byte) plexSort::m#2 ← phi( plexSort/(byte/signed byte/word/signed word/dword/signed dword) 0 plexSort::@2/(byte) plexSort::m#1 ) [ plexSort::m#2 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 ] )
  [61] (byte) plexSort::nxt_idx#0 ← *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) plexSort::m#2) [ plexSort::m#2 plexSort::nxt_idx#0 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 ] )
  [62] (byte) plexSort::nxt_y#0 ← *((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + (byte) plexSort::nxt_idx#0) [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] )
  [63] if((byte) plexSort::nxt_y#0>=*((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::m#2))) goto plexSort::@2 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] )
  to:plexSort::@10
plexSort::@10: scope:[plexSort]  from plexSort::@1
  [64] (byte~) plexSort::s#6 ← (byte) plexSort::m#2 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#6 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#6 ] )
  to:plexSort::@3
plexSort::@3: scope:[plexSort]  from plexSort::@10 plexSort::@7
  [65] (byte) plexSort::s#3 ← phi( plexSort::@7/(byte) plexSort::s#1 plexSort::@10/(byte~) plexSort::s#6 ) [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] )
  [66] *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) plexSort::s#3) ← *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::s#3) [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] )
  [67] (byte) plexSort::s#1 ← -- (byte) plexSort::s#3 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] )
  [68] if((byte) plexSort::s#1!=(byte/word/signed word/dword/signed dword) 255) goto plexSort::@7 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] )
  to:plexSort::@5
plexSort::@5: scope:[plexSort]  from plexSort::@3 plexSort::@7
  [69] (byte) plexSort::s#2 ← ++ (byte) plexSort::s#1 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::s#2 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::s#2 ] )
  [70] *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::s#2) ← (byte) plexSort::nxt_idx#0 [ plexSort::m#2 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 ] )
  to:plexSort::@2
plexSort::@2: scope:[plexSort]  from plexSort::@1 plexSort::@5
  [71] (byte) plexSort::m#1 ← ++ (byte) plexSort::m#2 [ plexSort::m#1 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#1 ] )
  [72] if((byte) plexSort::m#1!=(const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 2+(byte/signed byte/word/signed word/dword/signed dword) 1) goto plexSort::@1 [ plexSort::m#1 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#1 ] )
  to:plexSort::@return
plexSort::@return: scope:[plexSort]  from plexSort::@2
  [73] return  [ ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 ] )
  to:@return
plexSort::@7: scope:[plexSort]  from plexSort::@3
  [74] if((byte) plexSort::nxt_y#0<*((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::s#1))) goto plexSort::@3 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] )
  to:plexSort::@5
init: scope:[init]  from main
  [75] *((const byte*) D011#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:4::init:7 [ ] )
  [76] call plexInit  [ ] ( main:4::init:7 [ ] )
  to:init::@1
init::@1: scope:[init]  from init init::@1
  [77] (word) init::xp#2 ← phi( init::@1/(word) init::xp#1 init/(byte/signed byte/word/signed word/dword/signed dword) 32 ) [ init::sx#2 init::xp#2 ] ( main:4::init:7 [ init::sx#2 init::xp#2 ] )
  [77] (byte) init::sx#2 ← phi( init::@1/(byte) init::sx#1 init/(byte/signed byte/word/signed word/dword/signed dword) 0 ) [ init::sx#2 init::xp#2 ] ( main:4::init:7 [ init::sx#2 init::xp#2 ] )
  [78] *((const byte[PLEX_COUNT#0]) PLEX_PTR#0 + (byte) init::sx#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 [ init::sx#2 init::xp#2 ] ( main:4::init:7 [ init::sx#2 init::xp#2 ] )
  [79] (byte~) init::$6 ← (byte) init::sx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ init::sx#2 init::xp#2 init::$6 ] ( main:4::init:7 [ init::sx#2 init::xp#2 init::$6 ] )
  [80] *((const word[PLEX_COUNT#0]) PLEX_XPOS#0 + (byte~) init::$6) ← (word) init::xp#2 [ init::sx#2 init::xp#2 ] ( main:4::init:7 [ init::sx#2 init::xp#2 ] )
  [81] (word) init::xp#1 ← (word) init::xp#2 + (byte/signed byte/word/signed word/dword/signed dword) 12 [ init::sx#2 init::xp#1 ] ( main:4::init:7 [ init::sx#2 init::xp#1 ] )
  [82] (byte) init::sx#1 ← ++ (byte) init::sx#2 [ init::sx#1 init::xp#1 ] ( main:4::init:7 [ init::sx#1 init::xp#1 ] )
  [83] if((byte) init::sx#1!=(const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto init::@1 [ init::sx#1 init::xp#1 ] ( main:4::init:7 [ init::sx#1 init::xp#1 ] )
  to:init::@3
init::@3: scope:[init]  from init::@1
  [84] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 [ ] ( main:4::init:7 [ ] )
  to:init::@2
init::@2: scope:[init]  from init::@2 init::@3
  [85] (byte) init::ss#2 ← phi( init::@2/(byte) init::ss#1 init::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 ) [ init::ss#2 ] ( main:4::init:7 [ init::ss#2 ] )
  [86] *((const byte*) SPRITES_COLS#0 + (byte) init::ss#2) ← (const byte) GREEN#0 [ init::ss#2 ] ( main:4::init:7 [ init::ss#2 ] )
  [87] (byte) init::ss#1 ← ++ (byte) init::ss#2 [ init::ss#1 ] ( main:4::init:7 [ init::ss#1 ] )
  [88] if((byte) init::ss#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto init::@2 [ init::ss#1 ] ( main:4::init:7 [ init::ss#1 ] )
  to:init::@return
init::@return: scope:[init]  from init::@2
  [89] return  [ ] ( main:4::init:7 [ ] )
  to:@return
plexInit: scope:[plexInit]  from init
  [90] phi() [ ] ( main:4::init:7::plexInit:76 [ ] )
  to:plexInit::plexSetScreen1
plexInit::plexSetScreen1: scope:[plexInit]  from plexInit
  [91] phi() [ ] ( main:4::init:7::plexInit:76 [ ] )
  to:plexInit::@1
plexInit::@1: scope:[plexInit]  from plexInit::@1 plexInit::plexSetScreen1
  [92] (byte) plexInit::i#2 ← phi( plexInit::@1/(byte) plexInit::i#1 plexInit::plexSetScreen1/(byte/signed byte/word/signed word/dword/signed dword) 0 ) [ plexInit::i#2 ] ( main:4::init:7::plexInit:76 [ plexInit::i#2 ] )
  [93] *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexInit::i#2) ← (byte) plexInit::i#2 [ plexInit::i#2 ] ( main:4::init:7::plexInit:76 [ plexInit::i#2 ] )
  [94] (byte) plexInit::i#1 ← ++ (byte) plexInit::i#2 [ plexInit::i#1 ] ( main:4::init:7::plexInit:76 [ plexInit::i#1 ] )
  [95] if((byte) plexInit::i#1!=(const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto plexInit::@1 [ plexInit::i#1 ] ( main:4::init:7::plexInit:76 [ plexInit::i#1 ] )
  to:plexInit::@return
plexInit::@return: scope:[plexInit]  from plexInit::@1
  [96] return  [ ] ( main:4::init:7::plexInit:76 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@28 dominated by  @28 @begin 
@31 dominated by  @28 @31 @begin 
@end dominated by  @end @28 @31 @begin 
main dominated by  @28 main @31 @begin 
main::@1 dominated by  @28 main main::@1 @31 @begin 
main::@return dominated by  main::@return @28 main main::@1 @31 @begin 
loop dominated by  @28 main loop main::@1 @31 @begin 
loop::@1 dominated by  @28 main loop loop::@1 main::@1 @31 @begin 
loop::@4 dominated by  @28 main loop loop::@1 main::@1 loop::@4 @31 @begin 
loop::@6 dominated by  @28 main loop loop::@1 main::@1 loop::@6 loop::@4 @31 @begin 
loop::@7 dominated by  @28 main loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 @begin 
loop::@18 dominated by  loop::@18 @28 main loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 @begin 
loop::@26 dominated by  loop::@18 @28 main loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 loop::@26 @begin 
loop::@8 dominated by  loop::@18 @28 main loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 loop::@8 loop::@26 @begin 
loop::@27 dominated by  loop::@18 @28 main loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 loop::@8 loop::@26 loop::@27 @begin 
loop::@9 dominated by  loop::@18 @28 main loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 loop::@8 loop::@9 loop::@26 loop::@27 @begin 
loop::plexShowNextYpos1 dominated by  loop::@18 @28 main loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 loop::@8 loop::@9 loop::@26 loop::@27 @begin loop::plexShowNextYpos1 
loop::@25 dominated by  loop::@18 @28 main loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 loop::@8 loop::@9 loop::@25 loop::@26 loop::@27 @begin loop::plexShowNextYpos1 
loop::@10 dominated by  loop::@18 @28 main loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 loop::@8 loop::@9 loop::@25 loop::@26 loop::@27 @begin loop::@10 loop::plexShowNextYpos1 
loop::@12 dominated by  loop::@18 @28 main loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 loop::@8 loop::@9 loop::@25 loop::@26 loop::@27 @begin loop::@10 loop::plexShowNextYpos1 loop::@12 
loop::@28 dominated by  loop::@18 @28 main loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 loop::@8 loop::@9 loop::@25 loop::@26 loop::@27 loop::@28 @begin loop::@10 loop::plexShowNextYpos1 loop::@12 
loop::@23 dominated by  loop::@18 @28 main loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 loop::@23 @31 loop::@8 loop::@9 loop::@25 loop::@26 loop::@27 loop::@28 @begin loop::@10 loop::plexShowNextYpos1 loop::@12 
plexShowSprite dominated by  loop::@18 @28 main loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 loop::@8 loop::@26 @begin plexShowSprite 
plexShowSprite::@4 dominated by  loop::@18 @28 plexShowSprite::@4 main loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 loop::@8 loop::@26 @begin plexShowSprite 
plexShowSprite::@2 dominated by  loop::@18 @28 main plexShowSprite::@2 loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 loop::@8 loop::@26 @begin plexShowSprite 
plexShowSprite::@return dominated by  loop::@18 @28 main plexShowSprite::@2 loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 loop::@8 loop::@26 @begin plexShowSprite plexShowSprite::@return 
plexShowSprite::@7 dominated by  loop::@18 plexShowSprite::@7 @28 main plexShowSprite::@2 loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 loop::@8 loop::@26 @begin plexShowSprite 
plexShowSprite::@1 dominated by  loop::@18 @28 main plexShowSprite::@1 loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 loop::@8 loop::@26 @begin plexShowSprite 
plexSort dominated by  loop::@18 @28 main loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 @begin plexSort 
plexSort::@1 dominated by  loop::@18 plexSort::@1 @28 main loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 @begin plexSort 
plexSort::@10 dominated by  loop::@18 plexSort::@1 @28 main plexSort::@10 loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 @begin plexSort 
plexSort::@3 dominated by  loop::@18 plexSort::@1 @28 main plexSort::@10 loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 @begin plexSort plexSort::@3 
plexSort::@5 dominated by  loop::@18 plexSort::@1 @28 main plexSort::@10 loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 @begin plexSort plexSort::@3 plexSort::@5 
plexSort::@2 dominated by  plexSort::@2 loop::@18 plexSort::@1 @28 main loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 @begin plexSort 
plexSort::@return dominated by  plexSort::@2 loop::@18 plexSort::@1 @28 plexSort::@return main loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 @begin plexSort 
plexSort::@7 dominated by  loop::@18 plexSort::@1 @28 main plexSort::@10 loop loop::@1 main::@1 loop::@6 loop::@7 loop::@4 @31 @begin plexSort plexSort::@7 plexSort::@3 
init dominated by  @28 main @31 init @begin 
init::@1 dominated by  @28 main @31 init @begin init::@1 
init::@3 dominated by  @28 main @31 init @begin init::@3 init::@1 
init::@2 dominated by  @28 main @31 init @begin init::@3 init::@2 init::@1 
init::@return dominated by  @28 main @31 init @begin init::@return init::@3 init::@2 init::@1 
plexInit dominated by  @28 main @31 init @begin plexInit 
plexInit::plexSetScreen1 dominated by  @28 plexInit::plexSetScreen1 main @31 init @begin plexInit 
plexInit::@1 dominated by  @28 plexInit::plexSetScreen1 main @31 plexInit::@1 init @begin plexInit 
plexInit::@return dominated by  @28 plexInit::plexSetScreen1 main @31 plexInit::@1 init @begin plexInit plexInit::@return 

NATURAL LOOPS
Found back edge: Loop head: loop::@4 tails: loop::@4 blocks: null
Found back edge: Loop head: loop::@7 tails: loop::@7 blocks: null
Found back edge: Loop head: loop::@8 tails: loop::@27 blocks: null
Found back edge: Loop head: loop::@10 tails: loop::@10 blocks: null
Found back edge: Loop head: loop::@9 tails: loop::@28 blocks: null
Found back edge: Loop head: loop::@1 tails: loop::@23 blocks: null
Found back edge: Loop head: plexSort::@1 tails: plexSort::@2 blocks: null
Found back edge: Loop head: plexSort::@3 tails: plexSort::@7 blocks: null
Found back edge: Loop head: init::@1 tails: init::@1 blocks: null
Found back edge: Loop head: init::@2 tails: init::@2 blocks: null
Found back edge: Loop head: plexInit::@1 tails: plexInit::@1 blocks: null
Populated: Loop head: loop::@4 tails: loop::@4 blocks: loop::@4 
Populated: Loop head: loop::@7 tails: loop::@7 blocks: loop::@7 
Populated: Loop head: loop::@8 tails: loop::@27 blocks: loop::@27 loop::@8 
Populated: Loop head: loop::@10 tails: loop::@10 blocks: loop::@10 
Populated: Loop head: loop::@9 tails: loop::@28 blocks: loop::@28 loop::@12 loop::@10 loop::@25 loop::plexShowNextYpos1 loop::@9 
Populated: Loop head: loop::@1 tails: loop::@23 blocks: loop::@23 loop::@28 loop::@12 loop::@10 loop::@25 loop::plexShowNextYpos1 loop::@9 loop::@27 loop::@8 loop::@26 loop::@18 loop::@7 loop::@6 loop::@4 loop::@1 
Populated: Loop head: plexSort::@1 tails: plexSort::@2 blocks: plexSort::@2 plexSort::@1 plexSort::@5 plexSort::@3 plexSort::@7 plexSort::@10 
Populated: Loop head: plexSort::@3 tails: plexSort::@7 blocks: plexSort::@7 plexSort::@3 
Populated: Loop head: init::@1 tails: init::@1 blocks: init::@1 
Populated: Loop head: init::@2 tails: init::@2 blocks: init::@2 
Populated: Loop head: plexInit::@1 tails: plexInit::@1 blocks: plexInit::@1 
Loop head: loop::@4 tails: loop::@4 blocks: loop::@4 
Loop head: loop::@7 tails: loop::@7 blocks: loop::@7 
Loop head: loop::@8 tails: loop::@27 blocks: loop::@27 loop::@8 
Loop head: loop::@10 tails: loop::@10 blocks: loop::@10 
Loop head: loop::@9 tails: loop::@28 blocks: loop::@28 loop::@12 loop::@10 loop::@25 loop::plexShowNextYpos1 loop::@9 
Loop head: loop::@1 tails: loop::@23 blocks: loop::@23 loop::@28 loop::@12 loop::@10 loop::@25 loop::plexShowNextYpos1 loop::@9 loop::@27 loop::@8 loop::@26 loop::@18 loop::@7 loop::@6 loop::@4 loop::@1 
Loop head: plexSort::@1 tails: plexSort::@2 blocks: plexSort::@2 plexSort::@1 plexSort::@5 plexSort::@3 plexSort::@7 plexSort::@10 
Loop head: plexSort::@3 tails: plexSort::@7 blocks: plexSort::@7 plexSort::@3 
Loop head: init::@1 tails: init::@1 blocks: init::@1 
Loop head: init::@2 tails: init::@2 blocks: init::@2 
Loop head: plexInit::@1 tails: plexInit::@1 blocks: plexInit::@1 

NATURAL LOOPS WITH DEPTH
Found 0 loops in scope []
Found 0 loops in scope [main]
Found 2 loops in scope [init]
  Loop head: init::@1 tails: init::@1 blocks: init::@1 
  Loop head: init::@2 tails: init::@2 blocks: init::@2 
Found 6 loops in scope [loop]
  Loop head: loop::@4 tails: loop::@4 blocks: loop::@4 
  Loop head: loop::@7 tails: loop::@7 blocks: loop::@7 
  Loop head: loop::@8 tails: loop::@27 blocks: loop::@27 loop::@8 
  Loop head: loop::@10 tails: loop::@10 blocks: loop::@10 
  Loop head: loop::@9 tails: loop::@28 blocks: loop::@28 loop::@12 loop::@10 loop::@25 loop::plexShowNextYpos1 loop::@9 
  Loop head: loop::@1 tails: loop::@23 blocks: loop::@23 loop::@28 loop::@12 loop::@10 loop::@25 loop::plexShowNextYpos1 loop::@9 loop::@27 loop::@8 loop::@26 loop::@18 loop::@7 loop::@6 loop::@4 loop::@1 
Found 1 loops in scope [plexInit]
  Loop head: plexInit::@1 tails: plexInit::@1 blocks: plexInit::@1 
Found 2 loops in scope [plexSort]
  Loop head: plexSort::@1 tails: plexSort::@2 blocks: plexSort::@2 plexSort::@1 plexSort::@5 plexSort::@3 plexSort::@7 plexSort::@10 
  Loop head: plexSort::@3 tails: plexSort::@7 blocks: plexSort::@7 plexSort::@3 
Found 0 loops in scope [plexShowSprite]
Loop head: loop::@4 tails: loop::@4 blocks: loop::@4  depth: 2
Loop head: loop::@7 tails: loop::@7 blocks: loop::@7  depth: 2
Loop head: loop::@8 tails: loop::@27 blocks: loop::@27 loop::@8  depth: 2
Loop head: loop::@10 tails: loop::@10 blocks: loop::@10  depth: 3
Loop head: loop::@9 tails: loop::@28 blocks: loop::@28 loop::@12 loop::@10 loop::@25 loop::plexShowNextYpos1 loop::@9  depth: 2
Loop head: loop::@1 tails: loop::@23 blocks: loop::@23 loop::@28 loop::@12 loop::@10 loop::@25 loop::plexShowNextYpos1 loop::@9 loop::@27 loop::@8 loop::@26 loop::@18 loop::@7 loop::@6 loop::@4 loop::@1  depth: 1
Loop head: plexSort::@1 tails: plexSort::@2 blocks: plexSort::@2 plexSort::@1 plexSort::@5 plexSort::@3 plexSort::@7 plexSort::@10  depth: 2
Loop head: plexSort::@3 tails: plexSort::@7 blocks: plexSort::@7 plexSort::@3  depth: 3
Loop head: init::@1 tails: init::@1 blocks: init::@1  depth: 1
Loop head: init::@2 tails: init::@2 blocks: init::@2  depth: 1
Loop head: plexInit::@1 tails: plexInit::@1 blocks: plexInit::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(byte) BLACK
(byte*) BORDERCOL
(byte*) D011
(byte) GREEN
(byte) PLEX_COUNT
(byte[PLEX_COUNT#0]) PLEX_PTR
(byte*) PLEX_SCREEN_PTR
(byte[PLEX_COUNT#0]) PLEX_SORTED_IDX
(word[PLEX_COUNT#0]) PLEX_XPOS
(byte[PLEX_COUNT#0]) PLEX_YPOS
(byte*) RASTER
(byte*) SCREEN
(byte*) SPRITE
(byte*) SPRITES_COLS
(byte*) SPRITES_ENABLE
(byte*) SPRITES_XMSB
(byte*) SPRITES_XPOS
(byte*) SPRITES_YPOS
(byte) VIC_DEN
(byte) VIC_RSEL
(byte*) YSIN
(void()) init()
(byte~) init::$6 22.0
(byte) init::ss
(byte) init::ss#1 16.5
(byte) init::ss#2 16.5
(byte) init::sx
(byte) init::sx#1 16.5
(byte) init::sx#2 8.8
(word) init::xp
(word) init::xp#1 7.333333333333333
(word) init::xp#2 8.25
(void()) loop()
(byte) loop::plexShowNextYpos1_return
(byte) loop::plexShowNextYpos1_return#0 202.0
(byte) loop::rasterY
(byte) loop::rasterY#0 551.0
(byte) loop::sin_idx
(byte) loop::sin_idx#1 1.2222222222222223
(byte) loop::sin_idx#6 3.666666666666667
(byte) loop::ss
(byte) loop::ss#1 151.5
(byte) loop::ss#10 28.857142857142858
(byte) loop::ss#3 151.5
(byte) loop::ss#4 101.0
(byte) loop::sy
(byte) loop::sy#1 151.5
(byte) loop::sy#2 101.0
(byte) loop::y_idx
(byte) loop::y_idx#1 67.33333333333333
(byte) loop::y_idx#2 157.0
(byte~) loop::y_idx#3 22.0
(void()) main()
(void()) plexInit((byte*) plexInit::screen)
(byte) plexInit::i
(byte) plexInit::i#1 16.5
(byte) plexInit::i#2 22.0
(byte*~) plexInit::plexSetScreen1_$0
(byte*) plexInit::plexSetScreen1_screen
(byte*) plexInit::screen
(void()) plexShowSprite()
(byte~) plexShowSprite::$2 4.0
(byte~) plexShowSprite::$3 4.0
(byte/word/dword~) plexShowSprite::$5 4.0
(byte/signed word/word/dword/signed dword~) plexShowSprite::$6 4.0
(byte) plexShowSprite::plex_sprite_idx2
(byte) plexShowSprite::plex_sprite_idx2#0 1.2000000000000002
(byte) plexShowSprite::xpos_idx
(byte) plexShowSprite::xpos_idx#0 2.0
(void()) plexSort()
(byte) plexSort::m
(byte) plexSort::m#1 151.5
(byte) plexSort::m#2 42.08333333333333
(byte) plexSort::nxt_idx
(byte) plexSort::nxt_idx#0 30.299999999999997
(byte) plexSort::nxt_y
(byte) plexSort::nxt_y#0 150.375
(byte) plexSort::s
(byte) plexSort::s#1 1368.3333333333335
(byte) plexSort::s#2 202.0
(byte) plexSort::s#3 2052.5
(byte~) plexSort::s#6 202.0
(byte) plex_show_idx
(byte) plex_show_idx#13 14.999999999999998
(byte) plex_show_idx#15 16.944444444444443
(byte) plex_show_idx#25 202.0
(byte) plex_sprite_idx
(byte) plex_sprite_idx#13 17.333333333333336
(byte) plex_sprite_idx#15 10.736842105263158
(byte) plex_sprite_idx#24 202.0
(byte) plex_sprite_msb
(byte) plex_sprite_msb#14 13.866666666666665
(byte) plex_sprite_msb#17 14.571428571428571
(byte) plex_sprite_msb#26 2.0
(byte) plex_sprite_msb#29 202.0

Initial phi equivalence classes
[ loop::sin_idx#6 loop::sin_idx#1 ]
[ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ]
[ loop::sy#2 loop::sy#1 ]
[ loop::ss#4 loop::ss#1 ]
[ loop::ss#10 loop::ss#3 ]
[ plex_sprite_idx#13 plex_sprite_idx#24 plex_sprite_idx#15 ]
[ plex_show_idx#13 plex_show_idx#25 plex_show_idx#15 ]
[ plex_sprite_msb#14 plex_sprite_msb#29 plex_sprite_msb#17 plex_sprite_msb#26 ]
[ plexSort::m#2 plexSort::m#1 ]
[ plexSort::s#3 plexSort::s#1 plexSort::s#6 ]
[ init::sx#2 init::sx#1 ]
[ init::xp#2 init::xp#1 ]
[ init::ss#2 init::ss#1 ]
[ plexInit::i#2 plexInit::i#1 ]
Added variable loop::plexShowNextYpos1_return#0 to zero page equivalence class [ loop::plexShowNextYpos1_return#0 ]
Added variable loop::rasterY#0 to zero page equivalence class [ loop::rasterY#0 ]
Added variable plexShowSprite::plex_sprite_idx2#0 to zero page equivalence class [ plexShowSprite::plex_sprite_idx2#0 ]
Added variable plexShowSprite::xpos_idx#0 to zero page equivalence class [ plexShowSprite::xpos_idx#0 ]
Added variable plexShowSprite::$2 to zero page equivalence class [ plexShowSprite::$2 ]
Added variable plexShowSprite::$3 to zero page equivalence class [ plexShowSprite::$3 ]
Added variable plexShowSprite::$5 to zero page equivalence class [ plexShowSprite::$5 ]
Added variable plexShowSprite::$6 to zero page equivalence class [ plexShowSprite::$6 ]
Added variable plexSort::nxt_idx#0 to zero page equivalence class [ plexSort::nxt_idx#0 ]
Added variable plexSort::nxt_y#0 to zero page equivalence class [ plexSort::nxt_y#0 ]
Added variable plexSort::s#2 to zero page equivalence class [ plexSort::s#2 ]
Added variable init::$6 to zero page equivalence class [ init::$6 ]
Complete equivalence classes
[ loop::sin_idx#6 loop::sin_idx#1 ]
[ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ]
[ loop::sy#2 loop::sy#1 ]
[ loop::ss#4 loop::ss#1 ]
[ loop::ss#10 loop::ss#3 ]
[ plex_sprite_idx#13 plex_sprite_idx#24 plex_sprite_idx#15 ]
[ plex_show_idx#13 plex_show_idx#25 plex_show_idx#15 ]
[ plex_sprite_msb#14 plex_sprite_msb#29 plex_sprite_msb#17 plex_sprite_msb#26 ]
[ plexSort::m#2 plexSort::m#1 ]
[ plexSort::s#3 plexSort::s#1 plexSort::s#6 ]
[ init::sx#2 init::sx#1 ]
[ init::xp#2 init::xp#1 ]
[ init::ss#2 init::ss#1 ]
[ plexInit::i#2 plexInit::i#1 ]
[ loop::plexShowNextYpos1_return#0 ]
[ loop::rasterY#0 ]
[ plexShowSprite::plex_sprite_idx2#0 ]
[ plexShowSprite::xpos_idx#0 ]
[ plexShowSprite::$2 ]
[ plexShowSprite::$3 ]
[ plexShowSprite::$5 ]
[ plexShowSprite::$6 ]
[ plexSort::nxt_idx#0 ]
[ plexSort::nxt_y#0 ]
[ plexSort::s#2 ]
[ init::$6 ]
Allocated zp ZP_BYTE:2 [ loop::sin_idx#6 loop::sin_idx#1 ]
Allocated zp ZP_BYTE:3 [ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ]
Allocated zp ZP_BYTE:4 [ loop::sy#2 loop::sy#1 ]
Allocated zp ZP_BYTE:5 [ loop::ss#4 loop::ss#1 ]
Allocated zp ZP_BYTE:6 [ loop::ss#10 loop::ss#3 ]
Allocated zp ZP_BYTE:7 [ plex_sprite_idx#13 plex_sprite_idx#24 plex_sprite_idx#15 ]
Allocated zp ZP_BYTE:8 [ plex_show_idx#13 plex_show_idx#25 plex_show_idx#15 ]
Allocated zp ZP_BYTE:9 [ plex_sprite_msb#14 plex_sprite_msb#29 plex_sprite_msb#17 plex_sprite_msb#26 ]
Allocated zp ZP_BYTE:10 [ plexSort::m#2 plexSort::m#1 ]
Allocated zp ZP_BYTE:11 [ plexSort::s#3 plexSort::s#1 plexSort::s#6 ]
Allocated zp ZP_BYTE:12 [ init::sx#2 init::sx#1 ]
Allocated zp ZP_WORD:13 [ init::xp#2 init::xp#1 ]
Allocated zp ZP_BYTE:15 [ init::ss#2 init::ss#1 ]
Allocated zp ZP_BYTE:16 [ plexInit::i#2 plexInit::i#1 ]
Allocated zp ZP_BYTE:17 [ loop::plexShowNextYpos1_return#0 ]
Allocated zp ZP_BYTE:18 [ loop::rasterY#0 ]
Allocated zp ZP_BYTE:19 [ plexShowSprite::plex_sprite_idx2#0 ]
Allocated zp ZP_BYTE:20 [ plexShowSprite::xpos_idx#0 ]
Allocated zp ZP_BYTE:21 [ plexShowSprite::$2 ]
Allocated zp ZP_BYTE:22 [ plexShowSprite::$3 ]
Allocated zp ZP_BYTE:23 [ plexShowSprite::$5 ]
Allocated zp ZP_BYTE:24 [ plexShowSprite::$6 ]
Allocated zp ZP_BYTE:25 [ plexSort::nxt_idx#0 ]
Allocated zp ZP_BYTE:26 [ plexSort::nxt_y#0 ]
Allocated zp ZP_BYTE:27 [ plexSort::s#2 ]
Allocated zp ZP_BYTE:28 [ init::$6 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  .label D011 = $d011
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .const BLACK = 0
  .const GREEN = 5
  .const PLEX_COUNT = $18
  .label SPRITE = $2000
  .label SCREEN = $400
  .label YSIN = $2100
  .label PLEX_SCREEN_PTR = SCREEN+$3f8
  .label plex_sprite_idx = 7
  .label plex_show_idx = 8
  .label plex_sprite_msb = 9
//SEG2 @begin
bbegin:
  jmp b28
//SEG3 @28
b28:
//SEG4 kickasm(location (const byte*) YSIN#0) {{ .var min = 51     .var max = 250-21     .var ampl = max-min;     .for(var i=0;i<256;i++)         .byte round(min+(ampl/2)+(ampl/2)*sin(toRadians(360*i/256)))  }}
//SEG5 kickasm(location (const byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff)) .for (var y=0; y<21; y++)     .for (var x=0;x<3; x++)         .byte pic.getSinglecolorByte(x,y)  }}
//SEG6 [3] phi from @28 to @31 [phi:@28->@31]
b31_from_b28:
  jmp b31
//SEG7 @31
b31:
//SEG8 [4] call main  [ ] ( )
  jsr main
//SEG9 [5] phi from @31 to @end [phi:@31->@end]
bend_from_b31:
  jmp bend
//SEG10 @end
bend:
//SEG11 main
main: {
  //SEG12 asm { sei  }
    sei
  //SEG13 [7] call init  [ ] ( main:4 [ ] )
    jsr init
  //SEG14 [8] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [9] call loop  [ ] ( main:4 [ ] )
  //SEG17 [11] phi from main::@1 to loop [phi:main::@1->loop]
  loop_from_b1:
    jsr loop
    jmp breturn
  //SEG18 main::@return
  breturn:
  //SEG19 [10] return  [ ] ( main:4 [ ] )
    rts
}
//SEG20 loop
loop: {
    .label y_idx = 3
    .label sy = 4
    .label sin_idx = 2
    .label ss = 5
    .label plexShowNextYpos1_return = $11
    .label rasterY = $12
    .label ss_3 = 6
    .label ss_10 = 6
  //SEG21 [12] phi from loop to loop::@1 [phi:loop->loop::@1]
  b1_from_loop:
  //SEG22 [12] phi (byte) loop::sin_idx#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:loop->loop::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx
    jmp b1
  //SEG23 loop::@1
  b1:
    jmp b4
  //SEG24 loop::@4
  b4:
  //SEG25 [13] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto loop::@4 [ loop::sin_idx#6 ] ( main:4::loop:9 [ loop::sin_idx#6 ] ) -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
    jmp b6
  //SEG26 loop::@6
  b6:
  //SEG27 [14] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ loop::sin_idx#6 ] ( main:4::loop:9 [ loop::sin_idx#6 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG28 [15] (byte~) loop::y_idx#3 ← (byte) loop::sin_idx#6 [ loop::sin_idx#6 loop::y_idx#3 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::y_idx#3 ] ) -- vbuz1=vbuz2 
    lda sin_idx
    sta y_idx
  //SEG29 [16] phi from loop::@6 to loop::@7 [phi:loop::@6->loop::@7]
  b7_from_b6:
  //SEG30 [16] phi (byte) loop::sy#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:loop::@6->loop::@7#0] -- vbuz1=vbuc1 
    lda #0
    sta sy
  //SEG31 [16] phi (byte) loop::y_idx#2 = (byte~) loop::y_idx#3 [phi:loop::@6->loop::@7#1] -- register_copy 
    jmp b7
  //SEG32 [16] phi from loop::@7 to loop::@7 [phi:loop::@7->loop::@7]
  b7_from_b7:
  //SEG33 [16] phi (byte) loop::sy#2 = (byte) loop::sy#1 [phi:loop::@7->loop::@7#0] -- register_copy 
  //SEG34 [16] phi (byte) loop::y_idx#2 = (byte) loop::y_idx#1 [phi:loop::@7->loop::@7#1] -- register_copy 
    jmp b7
  //SEG35 loop::@7
  b7:
  //SEG36 [17] *((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + (byte) loop::sy#2) ← *((const byte*) YSIN#0 + (byte) loop::y_idx#2) [ loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] ) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    ldy y_idx
    lda YSIN,y
    ldy sy
    sta PLEX_YPOS,y
  //SEG37 [18] (byte) loop::y_idx#1 ← (byte) loop::y_idx#2 + (byte/signed byte/word/signed word/dword/signed dword) 10 [ loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda #$a
    clc
    adc y_idx
    sta y_idx
  //SEG38 [19] (byte) loop::sy#1 ← ++ (byte) loop::sy#2 [ loop::sin_idx#6 loop::y_idx#1 loop::sy#1 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::y_idx#1 loop::sy#1 ] ) -- vbuz1=_inc_vbuz1 
    inc sy
  //SEG39 [20] if((byte) loop::sy#1!=(const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto loop::@7 [ loop::sin_idx#6 loop::y_idx#1 loop::sy#1 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::y_idx#1 loop::sy#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda sy
    cmp #PLEX_COUNT-1+1
    bne b7_from_b7
    jmp b18
  //SEG40 loop::@18
  b18:
  //SEG41 [21] (byte) loop::sin_idx#1 ← (byte) loop::sin_idx#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 [ loop::sin_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#1 ] ) -- vbuz1=vbuz1_plus_1 
    inc sin_idx
  //SEG42 [22] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ loop::sin_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#1 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG43 [23] call plexSort  [ loop::sin_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#1 ] )
  //SEG44 [59] phi from loop::@18 to plexSort [phi:loop::@18->plexSort]
  plexSort_from_b18:
    jsr plexSort
    jmp b26
  //SEG45 loop::@26
  b26:
  //SEG46 [24] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ loop::sin_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#1 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG47 [25] phi from loop::@26 to loop::@8 [phi:loop::@26->loop::@8]
  b8_from_b26:
  //SEG48 [25] phi (byte) loop::ss#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:loop::@26->loop::@8#0] -- vbuz1=vbuc1 
    lda #0
    sta ss
  //SEG49 [25] phi (byte) plex_sprite_msb#29 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:loop::@26->loop::@8#1] -- vbuz1=vbuc1 
    lda #1
    sta plex_sprite_msb
  //SEG50 [25] phi (byte) plex_show_idx#25 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:loop::@26->loop::@8#2] -- vbuz1=vbuc1 
    lda #0
    sta plex_show_idx
  //SEG51 [25] phi (byte) plex_sprite_idx#24 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:loop::@26->loop::@8#3] -- vbuz1=vbuc1 
    lda #0
    sta plex_sprite_idx
    jmp b8
  //SEG52 [25] phi from loop::@27 to loop::@8 [phi:loop::@27->loop::@8]
  b8_from_b27:
  //SEG53 [25] phi (byte) loop::ss#4 = (byte) loop::ss#1 [phi:loop::@27->loop::@8#0] -- register_copy 
  //SEG54 [25] phi (byte) plex_sprite_msb#29 = (byte) plex_sprite_msb#17 [phi:loop::@27->loop::@8#1] -- register_copy 
  //SEG55 [25] phi (byte) plex_show_idx#25 = (byte) plex_show_idx#15 [phi:loop::@27->loop::@8#2] -- register_copy 
  //SEG56 [25] phi (byte) plex_sprite_idx#24 = (byte) plex_sprite_idx#15 [phi:loop::@27->loop::@8#3] -- register_copy 
    jmp b8
  //SEG57 loop::@8
  b8:
  //SEG58 [26] call plexShowSprite  [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] ( main:4::loop:9 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] )
  //SEG59 [39] phi from loop::@8 to plexShowSprite [phi:loop::@8->plexShowSprite]
  plexShowSprite_from_b8:
  //SEG60 [39] phi (byte) plex_sprite_msb#14 = (byte) plex_sprite_msb#29 [phi:loop::@8->plexShowSprite#0] -- register_copy 
  //SEG61 [39] phi (byte) plex_show_idx#13 = (byte) plex_show_idx#25 [phi:loop::@8->plexShowSprite#1] -- register_copy 
  //SEG62 [39] phi (byte) plex_sprite_idx#13 = (byte) plex_sprite_idx#24 [phi:loop::@8->plexShowSprite#2] -- register_copy 
    jsr plexShowSprite
    jmp b27
  //SEG63 loop::@27
  b27:
  //SEG64 [27] (byte) loop::ss#1 ← ++ (byte) loop::ss#4 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#1 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#1 ] ) -- vbuz1=_inc_vbuz1 
    inc ss
  //SEG65 [28] if((byte) loop::ss#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto loop::@8 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#1 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda ss
    cmp #8
    bne b8_from_b27
  //SEG66 [29] phi from loop::@27 to loop::@9 [phi:loop::@27->loop::@9]
  b9_from_b27:
  //SEG67 [29] phi (byte) loop::ss#10 = (byte/signed byte/word/signed word/dword/signed dword) 8 [phi:loop::@27->loop::@9#0] -- vbuz1=vbuc1 
    lda #8
    sta ss_10
    jmp b9
  //SEG68 [29] phi from loop::@28 to loop::@9 [phi:loop::@28->loop::@9]
  b9_from_b28:
  //SEG69 [29] phi (byte) loop::ss#10 = (byte) loop::ss#3 [phi:loop::@28->loop::@9#0] -- register_copy 
    jmp b9
  //SEG70 loop::@9
  b9:
  //SEG71 [30] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
    jmp plexShowNextYpos1
  //SEG72 loop::plexShowNextYpos1
  plexShowNextYpos1:
  //SEG73 [31] (byte) loop::plexShowNextYpos1_return#0 ← *((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#15)) [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::plexShowNextYpos1_return#0 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::plexShowNextYpos1_return#0 ] ) -- vbuz1=pbuc1_derefidx_pbuc2_derefidx_vbuz2 
    ldy plex_show_idx
    lda PLEX_SORTED_IDX,y
    tay
    lda PLEX_YPOS,y
    sta plexShowNextYpos1_return
    jmp b25
  //SEG74 loop::@25
  b25:
  //SEG75 [32] (byte) loop::rasterY#0 ← (byte) loop::plexShowNextYpos1_return#0 - (byte/signed byte/word/signed word/dword/signed dword) 8 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::rasterY#0 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::rasterY#0 ] ) -- vbuz1=vbuz2_minus_vbuc1 
    lda plexShowNextYpos1_return
    sec
    sbc #8
    sta rasterY
    jmp b10
  //SEG76 loop::@10
  b10:
  //SEG77 [33] if(*((const byte*) RASTER#0)<(byte) loop::rasterY#0) goto loop::@10 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::rasterY#0 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::rasterY#0 ] ) -- _deref_pbuc1_lt_vbuz1_then_la1 
    lda RASTER
    cmp rasterY
    bcc b10
    jmp b12
  //SEG78 loop::@12
  b12:
  //SEG79 [34] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG80 [35] call plexShowSprite  [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] )
  //SEG81 [39] phi from loop::@12 to plexShowSprite [phi:loop::@12->plexShowSprite]
  plexShowSprite_from_b12:
  //SEG82 [39] phi (byte) plex_sprite_msb#14 = (byte) plex_sprite_msb#17 [phi:loop::@12->plexShowSprite#0] -- register_copy 
  //SEG83 [39] phi (byte) plex_show_idx#13 = (byte) plex_show_idx#15 [phi:loop::@12->plexShowSprite#1] -- register_copy 
  //SEG84 [39] phi (byte) plex_sprite_idx#13 = (byte) plex_sprite_idx#15 [phi:loop::@12->plexShowSprite#2] -- register_copy 
    jsr plexShowSprite
    jmp b28
  //SEG85 loop::@28
  b28:
  //SEG86 [36] (byte) loop::ss#3 ← ++ (byte) loop::ss#10 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#3 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#3 ] ) -- vbuz1=_inc_vbuz1 
    inc ss_3
  //SEG87 [37] if((byte) loop::ss#3!=(const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto loop::@9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#3 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#3 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda ss_3
    cmp #PLEX_COUNT-1+1
    bne b9_from_b28
    jmp b23
  //SEG88 loop::@23
  b23:
  //SEG89 [38] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 [ loop::sin_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#1 ] ) -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
  //SEG90 [12] phi from loop::@23 to loop::@1 [phi:loop::@23->loop::@1]
  b1_from_b23:
  //SEG91 [12] phi (byte) loop::sin_idx#6 = (byte) loop::sin_idx#1 [phi:loop::@23->loop::@1#0] -- register_copy 
    jmp b1
}
//SEG92 plexShowSprite
plexShowSprite: {
    .label _2 = $15
    .label _3 = $16
    .label _5 = $17
    .label _6 = $18
    .label plex_sprite_idx2 = $13
    .label xpos_idx = $14
  //SEG93 [40] (byte) plexShowSprite::plex_sprite_idx2#0 ← (byte) plex_sprite_idx#13 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ) -- vbuz1=vbuz2_rol_1 
    lda plex_sprite_idx
    asl
    sta plex_sprite_idx2
  //SEG94 [41] *((const byte*) SPRITES_YPOS#0 + (byte) plexShowSprite::plex_sprite_idx2#0) ← *((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#13)) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_pbuc3_derefidx_vbuz2 
    ldx plex_show_idx
    lda PLEX_SORTED_IDX,x
    tax
    lda PLEX_YPOS,x
    ldx plex_sprite_idx2
    sta SPRITES_YPOS,x
  //SEG95 [42] *((const byte*) PLEX_SCREEN_PTR#1 + (byte) plex_sprite_idx#13) ← *((const byte[PLEX_COUNT#0]) PLEX_PTR#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#13)) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_pbuc3_derefidx_vbuz2 
    ldx plex_show_idx
    lda PLEX_SORTED_IDX,x
    tax
    lda PLEX_PTR,x
    ldx plex_sprite_idx
    sta PLEX_SCREEN_PTR,x
  //SEG96 [43] (byte) plexShowSprite::xpos_idx#0 ← *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#13) << (byte/signed byte/word/signed word/dword/signed dword) 1 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2_rol_1 
    ldy plex_show_idx
    lda PLEX_SORTED_IDX,y
    asl
    sta xpos_idx
  //SEG97 [44] (byte~) plexShowSprite::$2 ← < *((const word[PLEX_COUNT#0]) PLEX_XPOS#0 + (byte) plexShowSprite::xpos_idx#0) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 plexShowSprite::$2 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 plexShowSprite::$2 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 plexShowSprite::$2 ] ) -- vbuz1=_lo_pwuc1_derefidx_vbuz2 
    ldy xpos_idx
    lda PLEX_XPOS,y
    sta _2
  //SEG98 [45] *((const byte*) SPRITES_XPOS#0 + (byte) plexShowSprite::plex_sprite_idx2#0) ← (byte~) plexShowSprite::$2 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::xpos_idx#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::xpos_idx#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::xpos_idx#0 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda _2
    ldy plex_sprite_idx2
    sta SPRITES_XPOS,y
  //SEG99 [46] (byte~) plexShowSprite::$3 ← > *((const word[PLEX_COUNT#0]) PLEX_XPOS#0 + (byte) plexShowSprite::xpos_idx#0) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$3 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$3 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$3 ] ) -- vbuz1=_hi_pwuc1_derefidx_vbuz2 
    ldy xpos_idx
    lda PLEX_XPOS+1,y
    sta _3
  //SEG100 [47] if((byte~) plexShowSprite::$3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto plexShowSprite::@1 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ) -- vbuz1_neq_0_then_la1 
    lda _3
    bne b1
    jmp b4
  //SEG101 plexShowSprite::@4
  b4:
  //SEG102 [48] (byte/word/dword~) plexShowSprite::$5 ← (byte/word/signed word/dword/signed dword) 255 ^ (byte) plex_sprite_msb#14 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$5 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$5 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$5 ] ) -- vbuz1=vbuc1_bxor_vbuz2 
    lda plex_sprite_msb
    eor #$ff
    sta _5
  //SEG103 [49] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) & (byte/word/dword~) plexShowSprite::$5 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ) -- _deref_pbuc1=_deref_pbuc1_band_vbuz1 
    lda SPRITES_XMSB
    and _5
    sta SPRITES_XMSB
    jmp b2
  //SEG104 plexShowSprite::@2
  b2:
  //SEG105 [50] (byte/signed word/word/dword/signed dword~) plexShowSprite::$6 ← (byte) plex_sprite_idx#13 + (byte/signed byte/word/signed word/dword/signed dword) 1 [ plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$6 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$6 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$6 ] ) -- vbuz1=vbuz2_plus_1 
    ldy plex_sprite_idx
    iny
    sty _6
  //SEG106 [51] (byte) plex_sprite_idx#15 ← (byte/signed word/word/dword/signed dword~) plexShowSprite::$6 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ plex_sprite_idx#15 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#13 plex_sprite_msb#14 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and _6
    sta plex_sprite_idx
  //SEG107 [52] (byte) plex_show_idx#15 ← ++ (byte) plex_show_idx#13 [ plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#14 ] ) -- vbuz1=_inc_vbuz1 
    inc plex_show_idx
  //SEG108 [53] (byte) plex_sprite_msb#26 ← (byte) plex_sprite_msb#14 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] ) -- vbuz1=vbuz1_rol_1 
    asl plex_sprite_msb
  //SEG109 [54] if((byte) plex_sprite_msb#26!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto plexShowSprite::@7 [ plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] ) -- vbuz1_neq_0_then_la1 
    lda plex_sprite_msb
    bne b7_from_b2
  //SEG110 [55] phi from plexShowSprite::@2 to plexShowSprite::@return [phi:plexShowSprite::@2->plexShowSprite::@return]
  breturn_from_b2:
  //SEG111 [55] phi (byte) plex_sprite_msb#17 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:plexShowSprite::@2->plexShowSprite::@return#0] -- vbuz1=vbuc1 
    lda #1
    sta plex_sprite_msb
    jmp breturn
  //SEG112 plexShowSprite::@return
  breturn:
  //SEG113 [56] return  [ plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] )
    rts
  //SEG114 [57] phi from plexShowSprite::@2 to plexShowSprite::@7 [phi:plexShowSprite::@2->plexShowSprite::@7]
  b7_from_b2:
    jmp b7
  //SEG115 plexShowSprite::@7
  b7:
  //SEG116 [55] phi from plexShowSprite::@7 to plexShowSprite::@return [phi:plexShowSprite::@7->plexShowSprite::@return]
  breturn_from_b7:
  //SEG117 [55] phi (byte) plex_sprite_msb#17 = (byte) plex_sprite_msb#26 [phi:plexShowSprite::@7->plexShowSprite::@return#0] -- register_copy 
    jmp breturn
  //SEG118 plexShowSprite::@1
  b1:
  //SEG119 [58] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) | (byte) plex_sprite_msb#14 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ) -- _deref_pbuc1=_deref_pbuc1_bor_vbuz1 
    lda SPRITES_XMSB
    ora plex_sprite_msb
    sta SPRITES_XMSB
    jmp b2
}
//SEG120 plexSort
plexSort: {
    .label nxt_idx = $19
    .label nxt_y = $1a
    .label m = $a
    .label s = $b
    .label s_2 = $1b
  //SEG121 [60] phi from plexSort to plexSort::@1 [phi:plexSort->plexSort::@1]
  b1_from_plexSort:
  //SEG122 [60] phi (byte) plexSort::m#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:plexSort->plexSort::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta m
    jmp b1
  //SEG123 [60] phi from plexSort::@2 to plexSort::@1 [phi:plexSort::@2->plexSort::@1]
  b1_from_b2:
  //SEG124 [60] phi (byte) plexSort::m#2 = (byte) plexSort::m#1 [phi:plexSort::@2->plexSort::@1#0] -- register_copy 
    jmp b1
  //SEG125 plexSort::@1
  b1:
  //SEG126 [61] (byte) plexSort::nxt_idx#0 ← *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) plexSort::m#2) [ plexSort::m#2 plexSort::nxt_idx#0 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy m
    lda PLEX_SORTED_IDX+1,y
    sta nxt_idx
  //SEG127 [62] (byte) plexSort::nxt_y#0 ← *((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + (byte) plexSort::nxt_idx#0) [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy nxt_idx
    lda PLEX_YPOS,y
    sta nxt_y
  //SEG128 [63] if((byte) plexSort::nxt_y#0>=*((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::m#2))) goto plexSort::@2 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] ) -- vbuz1_ge_pbuc1_derefidx_pbuc2_derefidx_vbuz2_then_la1 
    lda nxt_y
    ldx m
    ldy PLEX_SORTED_IDX,x
    cmp PLEX_YPOS,y
    bcs b2
    jmp b10
  //SEG129 plexSort::@10
  b10:
  //SEG130 [64] (byte~) plexSort::s#6 ← (byte) plexSort::m#2 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#6 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#6 ] ) -- vbuz1=vbuz2 
    lda m
    sta s
  //SEG131 [65] phi from plexSort::@10 plexSort::@7 to plexSort::@3 [phi:plexSort::@10/plexSort::@7->plexSort::@3]
  b3_from_b10:
  b3_from_b7:
  //SEG132 [65] phi (byte) plexSort::s#3 = (byte~) plexSort::s#6 [phi:plexSort::@10/plexSort::@7->plexSort::@3#0] -- register_copy 
    jmp b3
  //SEG133 plexSort::@3
  b3:
  //SEG134 [66] *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) plexSort::s#3) ← *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::s#3) [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] ) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy s
    lda PLEX_SORTED_IDX,y
    sta PLEX_SORTED_IDX+1,y
  //SEG135 [67] (byte) plexSort::s#1 ← -- (byte) plexSort::s#3 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ) -- vbuz1=_dec_vbuz1 
    dec s
  //SEG136 [68] if((byte) plexSort::s#1!=(byte/word/signed word/dword/signed dword) 255) goto plexSort::@7 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda s
    cmp #$ff
    bne b7
    jmp b5
  //SEG137 plexSort::@5
  b5:
  //SEG138 [69] (byte) plexSort::s#2 ← ++ (byte) plexSort::s#1 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::s#2 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::s#2 ] ) -- vbuz1=_inc_vbuz2 
    ldy s
    iny
    sty s_2
  //SEG139 [70] *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::s#2) ← (byte) plexSort::nxt_idx#0 [ plexSort::m#2 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 ] ) -- pbuc1_derefidx_vbuz1=vbuz2 
    lda nxt_idx
    ldy s_2
    sta PLEX_SORTED_IDX,y
    jmp b2
  //SEG140 plexSort::@2
  b2:
  //SEG141 [71] (byte) plexSort::m#1 ← ++ (byte) plexSort::m#2 [ plexSort::m#1 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#1 ] ) -- vbuz1=_inc_vbuz1 
    inc m
  //SEG142 [72] if((byte) plexSort::m#1!=(const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 2+(byte/signed byte/word/signed word/dword/signed dword) 1) goto plexSort::@1 [ plexSort::m#1 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda m
    cmp #PLEX_COUNT-2+1
    bne b1_from_b2
    jmp breturn
  //SEG143 plexSort::@return
  breturn:
  //SEG144 [73] return  [ ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 ] )
    rts
  //SEG145 plexSort::@7
  b7:
  //SEG146 [74] if((byte) plexSort::nxt_y#0<*((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::s#1))) goto plexSort::@3 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ) -- vbuz1_lt_pbuc1_derefidx_pbuc2_derefidx_vbuz2_then_la1 
    lda nxt_y
    ldx s
    ldy PLEX_SORTED_IDX,x
    cmp PLEX_YPOS,y
    bcc b3_from_b7
    jmp b5
}
//SEG147 init
init: {
    .label _6 = $1c
    .label xp = $d
    .label sx = $c
    .label ss = $f
  //SEG148 [75] *((const byte*) D011#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:4::init:7 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_DEN|VIC_RSEL|3
    sta D011
  //SEG149 [76] call plexInit  [ ] ( main:4::init:7 [ ] )
  //SEG150 [90] phi from init to plexInit [phi:init->plexInit]
  plexInit_from_init:
    jsr plexInit
  //SEG151 [77] phi from init to init::@1 [phi:init->init::@1]
  b1_from_init:
  //SEG152 [77] phi (word) init::xp#2 = (byte/signed byte/word/signed word/dword/signed dword) 32 [phi:init->init::@1#0] -- vwuz1=vbuc1 
    lda #<$20
    sta xp
    lda #>$20
    sta xp+1
  //SEG153 [77] phi (byte) init::sx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init->init::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta sx
    jmp b1
  //SEG154 [77] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
  b1_from_b1:
  //SEG155 [77] phi (word) init::xp#2 = (word) init::xp#1 [phi:init::@1->init::@1#0] -- register_copy 
  //SEG156 [77] phi (byte) init::sx#2 = (byte) init::sx#1 [phi:init::@1->init::@1#1] -- register_copy 
    jmp b1
  //SEG157 init::@1
  b1:
  //SEG158 [78] *((const byte[PLEX_COUNT#0]) PLEX_PTR#0 + (byte) init::sx#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 [ init::sx#2 init::xp#2 ] ( main:4::init:7 [ init::sx#2 init::xp#2 ] ) -- pbuc1_derefidx_vbuz1=vbuc2 
    ldy sx
    lda #$ff&SPRITE/$40
    sta PLEX_PTR,y
  //SEG159 [79] (byte~) init::$6 ← (byte) init::sx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ init::sx#2 init::xp#2 init::$6 ] ( main:4::init:7 [ init::sx#2 init::xp#2 init::$6 ] ) -- vbuz1=vbuz2_rol_1 
    lda sx
    asl
    sta _6
  //SEG160 [80] *((const word[PLEX_COUNT#0]) PLEX_XPOS#0 + (byte~) init::$6) ← (word) init::xp#2 [ init::sx#2 init::xp#2 ] ( main:4::init:7 [ init::sx#2 init::xp#2 ] ) -- pwuc1_derefidx_vbuz1=vwuz2 
    ldy _6
    lda xp
    sta PLEX_XPOS,y
    lda xp+1
    sta PLEX_XPOS+1,y
  //SEG161 [81] (word) init::xp#1 ← (word) init::xp#2 + (byte/signed byte/word/signed word/dword/signed dword) 12 [ init::sx#2 init::xp#1 ] ( main:4::init:7 [ init::sx#2 init::xp#1 ] ) -- vwuz1=vwuz1_plus_vbuc1 
    clc
    lda xp
    adc #<$c
    sta xp
    lda xp+1
    adc #>$c
    sta xp+1
  //SEG162 [82] (byte) init::sx#1 ← ++ (byte) init::sx#2 [ init::sx#1 init::xp#1 ] ( main:4::init:7 [ init::sx#1 init::xp#1 ] ) -- vbuz1=_inc_vbuz1 
    inc sx
  //SEG163 [83] if((byte) init::sx#1!=(const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto init::@1 [ init::sx#1 init::xp#1 ] ( main:4::init:7 [ init::sx#1 init::xp#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda sx
    cmp #PLEX_COUNT-1+1
    bne b1_from_b1
    jmp b3
  //SEG164 init::@3
  b3:
  //SEG165 [84] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 [ ] ( main:4::init:7 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #$ff
    sta SPRITES_ENABLE
  //SEG166 [85] phi from init::@3 to init::@2 [phi:init::@3->init::@2]
  b2_from_b3:
  //SEG167 [85] phi (byte) init::ss#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init::@3->init::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta ss
    jmp b2
  //SEG168 [85] phi from init::@2 to init::@2 [phi:init::@2->init::@2]
  b2_from_b2:
  //SEG169 [85] phi (byte) init::ss#2 = (byte) init::ss#1 [phi:init::@2->init::@2#0] -- register_copy 
    jmp b2
  //SEG170 init::@2
  b2:
  //SEG171 [86] *((const byte*) SPRITES_COLS#0 + (byte) init::ss#2) ← (const byte) GREEN#0 [ init::ss#2 ] ( main:4::init:7 [ init::ss#2 ] ) -- pbuc1_derefidx_vbuz1=vbuc2 
    ldy ss
    lda #GREEN
    sta SPRITES_COLS,y
  //SEG172 [87] (byte) init::ss#1 ← ++ (byte) init::ss#2 [ init::ss#1 ] ( main:4::init:7 [ init::ss#1 ] ) -- vbuz1=_inc_vbuz1 
    inc ss
  //SEG173 [88] if((byte) init::ss#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto init::@2 [ init::ss#1 ] ( main:4::init:7 [ init::ss#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda ss
    cmp #8
    bne b2_from_b2
    jmp breturn
  //SEG174 init::@return
  breturn:
  //SEG175 [89] return  [ ] ( main:4::init:7 [ ] )
    rts
}
//SEG176 plexInit
plexInit: {
    .label i = $10
  //SEG177 [91] phi from plexInit to plexInit::plexSetScreen1 [phi:plexInit->plexInit::plexSetScreen1]
  plexSetScreen1_from_plexInit:
    jmp plexSetScreen1
  //SEG178 plexInit::plexSetScreen1
  plexSetScreen1:
  //SEG179 [92] phi from plexInit::plexSetScreen1 to plexInit::@1 [phi:plexInit::plexSetScreen1->plexInit::@1]
  b1_from_plexSetScreen1:
  //SEG180 [92] phi (byte) plexInit::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:plexInit::plexSetScreen1->plexInit::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG181 [92] phi from plexInit::@1 to plexInit::@1 [phi:plexInit::@1->plexInit::@1]
  b1_from_b1:
  //SEG182 [92] phi (byte) plexInit::i#2 = (byte) plexInit::i#1 [phi:plexInit::@1->plexInit::@1#0] -- register_copy 
    jmp b1
  //SEG183 plexInit::@1
  b1:
  //SEG184 [93] *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexInit::i#2) ← (byte) plexInit::i#2 [ plexInit::i#2 ] ( main:4::init:7::plexInit:76 [ plexInit::i#2 ] ) -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy i
    tya
    sta PLEX_SORTED_IDX,y
  //SEG185 [94] (byte) plexInit::i#1 ← ++ (byte) plexInit::i#2 [ plexInit::i#1 ] ( main:4::init:7::plexInit:76 [ plexInit::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG186 [95] if((byte) plexInit::i#1!=(const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto plexInit::@1 [ plexInit::i#1 ] ( main:4::init:7::plexInit:76 [ plexInit::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #PLEX_COUNT-1+1
    bne b1_from_b1
    jmp breturn
  //SEG187 plexInit::@return
  breturn:
  //SEG188 [96] return  [ ] ( main:4::init:7::plexInit:76 [ ] )
    rts
}
  PLEX_XPOS: .fill 2*PLEX_COUNT, 0
  PLEX_YPOS: .fill PLEX_COUNT, 0
  PLEX_PTR: .fill PLEX_COUNT, 0
  PLEX_SORTED_IDX: .fill PLEX_COUNT, 0
.pc = YSIN "Inline"
  .var min = 51
    .var max = 250-21
    .var ampl = max-min;
    .for(var i=0;i<256;i++)
        .byte round(min+(ampl/2)+(ampl/2)*sin(toRadians(360*i/256)))

.pc = SPRITE "Inline"
  .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
.for (var y=0; y<21; y++)
    .for (var x=0;x<3; x++)
        .byte pic.getSinglecolorByte(x,y)


REGISTER UPLIFT POTENTIAL REGISTERS
Statement [13] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto loop::@4 [ loop::sin_idx#6 ] ( main:4::loop:9 [ loop::sin_idx#6 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ loop::sin_idx#6 loop::sin_idx#1 ]
Statement [17] *((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + (byte) loop::sy#2) ← *((const byte*) YSIN#0 + (byte) loop::y_idx#2) [ loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ loop::sy#2 loop::sy#1 ]
Statement [18] (byte) loop::y_idx#1 ← (byte) loop::y_idx#2 + (byte/signed byte/word/signed word/dword/signed dword) 10 [ loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] ) always clobbers reg byte a 
Statement [30] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ plex_sprite_idx#13 plex_sprite_idx#24 plex_sprite_idx#15 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:8 [ plex_show_idx#13 plex_show_idx#25 plex_show_idx#15 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:9 [ plex_sprite_msb#14 plex_sprite_msb#29 plex_sprite_msb#17 plex_sprite_msb#26 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ loop::ss#10 loop::ss#3 ]
Statement [31] (byte) loop::plexShowNextYpos1_return#0 ← *((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#15)) [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::plexShowNextYpos1_return#0 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::plexShowNextYpos1_return#0 ] ) always clobbers reg byte a 
Statement [32] (byte) loop::rasterY#0 ← (byte) loop::plexShowNextYpos1_return#0 - (byte/signed byte/word/signed word/dword/signed dword) 8 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::rasterY#0 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::rasterY#0 ] ) always clobbers reg byte a 
Statement [38] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 [ loop::sin_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#1 ] ) always clobbers reg byte a 
Statement [40] (byte) plexShowSprite::plex_sprite_idx2#0 ← (byte) plex_sprite_idx#13 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ loop::ss#4 loop::ss#1 ]
Statement [41] *((const byte*) SPRITES_YPOS#0 + (byte) plexShowSprite::plex_sprite_idx2#0) ← *((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#13)) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:19 [ plexShowSprite::plex_sprite_idx2#0 ]
Statement [42] *((const byte*) PLEX_SCREEN_PTR#1 + (byte) plex_sprite_idx#13) ← *((const byte[PLEX_COUNT#0]) PLEX_PTR#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#13)) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ) always clobbers reg byte a 
Statement [43] (byte) plexShowSprite::xpos_idx#0 ← *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#13) << (byte/signed byte/word/signed word/dword/signed dword) 1 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] ) always clobbers reg byte a 
Statement [44] (byte~) plexShowSprite::$2 ← < *((const word[PLEX_COUNT#0]) PLEX_XPOS#0 + (byte) plexShowSprite::xpos_idx#0) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 plexShowSprite::$2 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 plexShowSprite::$2 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 plexShowSprite::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:20 [ plexShowSprite::xpos_idx#0 ]
Statement [46] (byte~) plexShowSprite::$3 ← > *((const word[PLEX_COUNT#0]) PLEX_XPOS#0 + (byte) plexShowSprite::xpos_idx#0) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$3 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$3 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$3 ] ) always clobbers reg byte a 
Statement [48] (byte/word/dword~) plexShowSprite::$5 ← (byte/word/signed word/dword/signed dword) 255 ^ (byte) plex_sprite_msb#14 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$5 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$5 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$5 ] ) always clobbers reg byte a 
Statement [49] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) & (byte/word/dword~) plexShowSprite::$5 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ) always clobbers reg byte a 
Statement [51] (byte) plex_sprite_idx#15 ← (byte/signed word/word/dword/signed dword~) plexShowSprite::$6 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ plex_sprite_idx#15 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#13 plex_sprite_msb#14 ] ) always clobbers reg byte a 
Statement [58] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) | (byte) plex_sprite_msb#14 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ) always clobbers reg byte a 
Statement [66] *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) plexSort::s#3) ← *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::s#3) [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:10 [ plexSort::m#2 plexSort::m#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:25 [ plexSort::nxt_idx#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:26 [ plexSort::nxt_y#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:11 [ plexSort::s#3 plexSort::s#1 plexSort::s#6 ]
Statement [70] *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::s#2) ← (byte) plexSort::nxt_idx#0 [ plexSort::m#2 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 ] ) always clobbers reg byte a 
Statement [74] if((byte) plexSort::nxt_y#0<*((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::s#1))) goto plexSort::@3 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ) always clobbers reg byte a 
Statement [75] *((const byte*) D011#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:4::init:7 [ ] ) always clobbers reg byte a 
Statement [78] *((const byte[PLEX_COUNT#0]) PLEX_PTR#0 + (byte) init::sx#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 [ init::sx#2 init::xp#2 ] ( main:4::init:7 [ init::sx#2 init::xp#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:12 [ init::sx#2 init::sx#1 ]
Statement [79] (byte~) init::$6 ← (byte) init::sx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ init::sx#2 init::xp#2 init::$6 ] ( main:4::init:7 [ init::sx#2 init::xp#2 init::$6 ] ) always clobbers reg byte a 
Statement [80] *((const word[PLEX_COUNT#0]) PLEX_XPOS#0 + (byte~) init::$6) ← (word) init::xp#2 [ init::sx#2 init::xp#2 ] ( main:4::init:7 [ init::sx#2 init::xp#2 ] ) always clobbers reg byte a 
Statement [81] (word) init::xp#1 ← (word) init::xp#2 + (byte/signed byte/word/signed word/dword/signed dword) 12 [ init::sx#2 init::xp#1 ] ( main:4::init:7 [ init::sx#2 init::xp#1 ] ) always clobbers reg byte a 
Statement [84] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 [ ] ( main:4::init:7 [ ] ) always clobbers reg byte a 
Statement [86] *((const byte*) SPRITES_COLS#0 + (byte) init::ss#2) ← (const byte) GREEN#0 [ init::ss#2 ] ( main:4::init:7 [ init::ss#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:15 [ init::ss#2 init::ss#1 ]
Statement [13] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto loop::@4 [ loop::sin_idx#6 ] ( main:4::loop:9 [ loop::sin_idx#6 ] ) always clobbers reg byte a 
Statement [17] *((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + (byte) loop::sy#2) ← *((const byte*) YSIN#0 + (byte) loop::y_idx#2) [ loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] ) always clobbers reg byte a 
Statement [18] (byte) loop::y_idx#1 ← (byte) loop::y_idx#2 + (byte/signed byte/word/signed word/dword/signed dword) 10 [ loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] ) always clobbers reg byte a 
Statement [30] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ) always clobbers reg byte a 
Statement [31] (byte) loop::plexShowNextYpos1_return#0 ← *((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#15)) [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::plexShowNextYpos1_return#0 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::plexShowNextYpos1_return#0 ] ) always clobbers reg byte a 
Statement [32] (byte) loop::rasterY#0 ← (byte) loop::plexShowNextYpos1_return#0 - (byte/signed byte/word/signed word/dword/signed dword) 8 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::rasterY#0 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::rasterY#0 ] ) always clobbers reg byte a 
Statement [38] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 [ loop::sin_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#1 ] ) always clobbers reg byte a 
Statement [40] (byte) plexShowSprite::plex_sprite_idx2#0 ← (byte) plex_sprite_idx#13 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ) always clobbers reg byte a 
Statement [41] *((const byte*) SPRITES_YPOS#0 + (byte) plexShowSprite::plex_sprite_idx2#0) ← *((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#13)) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ) always clobbers reg byte a 
Statement [42] *((const byte*) PLEX_SCREEN_PTR#1 + (byte) plex_sprite_idx#13) ← *((const byte[PLEX_COUNT#0]) PLEX_PTR#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#13)) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ) always clobbers reg byte a 
Statement [43] (byte) plexShowSprite::xpos_idx#0 ← *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#13) << (byte/signed byte/word/signed word/dword/signed dword) 1 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] ) always clobbers reg byte a 
Statement [44] (byte~) plexShowSprite::$2 ← < *((const word[PLEX_COUNT#0]) PLEX_XPOS#0 + (byte) plexShowSprite::xpos_idx#0) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 plexShowSprite::$2 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 plexShowSprite::$2 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 plexShowSprite::$2 ] ) always clobbers reg byte a 
Statement [46] (byte~) plexShowSprite::$3 ← > *((const word[PLEX_COUNT#0]) PLEX_XPOS#0 + (byte) plexShowSprite::xpos_idx#0) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$3 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$3 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$3 ] ) always clobbers reg byte a 
Statement [48] (byte/word/dword~) plexShowSprite::$5 ← (byte/word/signed word/dword/signed dword) 255 ^ (byte) plex_sprite_msb#14 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$5 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$5 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$5 ] ) always clobbers reg byte a 
Statement [49] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) & (byte/word/dword~) plexShowSprite::$5 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ) always clobbers reg byte a 
Statement [51] (byte) plex_sprite_idx#15 ← (byte/signed word/word/dword/signed dword~) plexShowSprite::$6 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ plex_sprite_idx#15 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#13 plex_sprite_msb#14 ] ) always clobbers reg byte a 
Statement [58] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) | (byte) plex_sprite_msb#14 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ) always clobbers reg byte a 
Statement [63] if((byte) plexSort::nxt_y#0>=*((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::m#2))) goto plexSort::@2 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] ) always clobbers reg byte a 
Statement [66] *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) plexSort::s#3) ← *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::s#3) [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] ) always clobbers reg byte a 
Statement [70] *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::s#2) ← (byte) plexSort::nxt_idx#0 [ plexSort::m#2 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 ] ) always clobbers reg byte a 
Statement [74] if((byte) plexSort::nxt_y#0<*((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::s#1))) goto plexSort::@3 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ) always clobbers reg byte a 
Statement [75] *((const byte*) D011#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:4::init:7 [ ] ) always clobbers reg byte a 
Statement [78] *((const byte[PLEX_COUNT#0]) PLEX_PTR#0 + (byte) init::sx#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 [ init::sx#2 init::xp#2 ] ( main:4::init:7 [ init::sx#2 init::xp#2 ] ) always clobbers reg byte a 
Statement [79] (byte~) init::$6 ← (byte) init::sx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ init::sx#2 init::xp#2 init::$6 ] ( main:4::init:7 [ init::sx#2 init::xp#2 init::$6 ] ) always clobbers reg byte a 
Statement [80] *((const word[PLEX_COUNT#0]) PLEX_XPOS#0 + (byte~) init::$6) ← (word) init::xp#2 [ init::sx#2 init::xp#2 ] ( main:4::init:7 [ init::sx#2 init::xp#2 ] ) always clobbers reg byte a 
Statement [81] (word) init::xp#1 ← (word) init::xp#2 + (byte/signed byte/word/signed word/dword/signed dword) 12 [ init::sx#2 init::xp#1 ] ( main:4::init:7 [ init::sx#2 init::xp#1 ] ) always clobbers reg byte a 
Statement [84] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 [ ] ( main:4::init:7 [ ] ) always clobbers reg byte a 
Statement [86] *((const byte*) SPRITES_COLS#0 + (byte) init::ss#2) ← (const byte) GREEN#0 [ init::ss#2 ] ( main:4::init:7 [ init::ss#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ loop::sin_idx#6 loop::sin_idx#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ loop::sy#2 loop::sy#1 ] : zp ZP_BYTE:4 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ loop::ss#4 loop::ss#1 ] : zp ZP_BYTE:5 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ loop::ss#10 loop::ss#3 ] : zp ZP_BYTE:6 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ plex_sprite_idx#13 plex_sprite_idx#24 plex_sprite_idx#15 ] : zp ZP_BYTE:7 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:8 [ plex_show_idx#13 plex_show_idx#25 plex_show_idx#15 ] : zp ZP_BYTE:8 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:9 [ plex_sprite_msb#14 plex_sprite_msb#29 plex_sprite_msb#17 plex_sprite_msb#26 ] : zp ZP_BYTE:9 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:10 [ plexSort::m#2 plexSort::m#1 ] : zp ZP_BYTE:10 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:11 [ plexSort::s#3 plexSort::s#1 plexSort::s#6 ] : zp ZP_BYTE:11 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:12 [ init::sx#2 init::sx#1 ] : zp ZP_BYTE:12 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:13 [ init::xp#2 init::xp#1 ] : zp ZP_WORD:13 , 
Potential registers zp ZP_BYTE:15 [ init::ss#2 init::ss#1 ] : zp ZP_BYTE:15 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:16 [ plexInit::i#2 plexInit::i#1 ] : zp ZP_BYTE:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:17 [ loop::plexShowNextYpos1_return#0 ] : zp ZP_BYTE:17 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:18 [ loop::rasterY#0 ] : zp ZP_BYTE:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:19 [ plexShowSprite::plex_sprite_idx2#0 ] : zp ZP_BYTE:19 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:20 [ plexShowSprite::xpos_idx#0 ] : zp ZP_BYTE:20 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:21 [ plexShowSprite::$2 ] : zp ZP_BYTE:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:22 [ plexShowSprite::$3 ] : zp ZP_BYTE:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:23 [ plexShowSprite::$5 ] : zp ZP_BYTE:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:24 [ plexShowSprite::$6 ] : zp ZP_BYTE:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:25 [ plexSort::nxt_idx#0 ] : zp ZP_BYTE:25 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:26 [ plexSort::nxt_y#0 ] : zp ZP_BYTE:26 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:27 [ plexSort::s#2 ] : zp ZP_BYTE:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:28 [ init::$6 ] : zp ZP_BYTE:28 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [plexSort] 3,622.83: zp ZP_BYTE:11 [ plexSort::s#3 plexSort::s#1 plexSort::s#6 ] 202: zp ZP_BYTE:27 [ plexSort::s#2 ] 193.58: zp ZP_BYTE:10 [ plexSort::m#2 plexSort::m#1 ] 150.38: zp ZP_BYTE:26 [ plexSort::nxt_y#0 ] 30.3: zp ZP_BYTE:25 [ plexSort::nxt_idx#0 ] 
Uplift Scope [loop] 551: zp ZP_BYTE:18 [ loop::rasterY#0 ] 252.5: zp ZP_BYTE:4 [ loop::sy#2 loop::sy#1 ] 252.5: zp ZP_BYTE:5 [ loop::ss#4 loop::ss#1 ] 246.33: zp ZP_BYTE:3 [ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ] 202: zp ZP_BYTE:17 [ loop::plexShowNextYpos1_return#0 ] 180.36: zp ZP_BYTE:6 [ loop::ss#10 loop::ss#3 ] 4.89: zp ZP_BYTE:2 [ loop::sin_idx#6 loop::sin_idx#1 ] 
Uplift Scope [] 233.94: zp ZP_BYTE:8 [ plex_show_idx#13 plex_show_idx#25 plex_show_idx#15 ] 232.44: zp ZP_BYTE:9 [ plex_sprite_msb#14 plex_sprite_msb#29 plex_sprite_msb#17 plex_sprite_msb#26 ] 230.07: zp ZP_BYTE:7 [ plex_sprite_idx#13 plex_sprite_idx#24 plex_sprite_idx#15 ] 
Uplift Scope [init] 33: zp ZP_BYTE:15 [ init::ss#2 init::ss#1 ] 25.3: zp ZP_BYTE:12 [ init::sx#2 init::sx#1 ] 22: zp ZP_BYTE:28 [ init::$6 ] 15.58: zp ZP_WORD:13 [ init::xp#2 init::xp#1 ] 
Uplift Scope [plexInit] 38.5: zp ZP_BYTE:16 [ plexInit::i#2 plexInit::i#1 ] 
Uplift Scope [plexShowSprite] 4: zp ZP_BYTE:21 [ plexShowSprite::$2 ] 4: zp ZP_BYTE:22 [ plexShowSprite::$3 ] 4: zp ZP_BYTE:23 [ plexShowSprite::$5 ] 4: zp ZP_BYTE:24 [ plexShowSprite::$6 ] 2: zp ZP_BYTE:20 [ plexShowSprite::xpos_idx#0 ] 1.2: zp ZP_BYTE:19 [ plexShowSprite::plex_sprite_idx2#0 ] 
Uplift Scope [main] 

Uplifting [plexSort] best 81021 combination reg byte x [ plexSort::s#3 plexSort::s#1 plexSort::s#6 ] reg byte x [ plexSort::s#2 ] zp ZP_BYTE:10 [ plexSort::m#2 plexSort::m#1 ] zp ZP_BYTE:26 [ plexSort::nxt_y#0 ] zp ZP_BYTE:25 [ plexSort::nxt_idx#0 ] 
Limited combination testing to 100 combinations of 324 possible.
Uplifting [loop] best 79291 combination zp ZP_BYTE:18 [ loop::rasterY#0 ] reg byte y [ loop::sy#2 loop::sy#1 ] zp ZP_BYTE:5 [ loop::ss#4 loop::ss#1 ] reg byte x [ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ] zp ZP_BYTE:17 [ loop::plexShowNextYpos1_return#0 ] zp ZP_BYTE:6 [ loop::ss#10 loop::ss#3 ] zp ZP_BYTE:2 [ loop::sin_idx#6 loop::sin_idx#1 ] 
Limited combination testing to 100 combinations of 3888 possible.
Uplifting [] best 79291 combination zp ZP_BYTE:8 [ plex_show_idx#13 plex_show_idx#25 plex_show_idx#15 ] zp ZP_BYTE:9 [ plex_sprite_msb#14 plex_sprite_msb#29 plex_sprite_msb#17 plex_sprite_msb#26 ] zp ZP_BYTE:7 [ plex_sprite_idx#13 plex_sprite_idx#24 plex_sprite_idx#15 ] 
Uplifting [init] best 79001 combination reg byte x [ init::ss#2 init::ss#1 ] reg byte x [ init::sx#2 init::sx#1 ] reg byte a [ init::$6 ] zp ZP_WORD:13 [ init::xp#2 init::xp#1 ] 
Uplifting [plexInit] best 78881 combination reg byte x [ plexInit::i#2 plexInit::i#1 ] 
Uplifting [plexShowSprite] best 78861 combination reg byte a [ plexShowSprite::$2 ] reg byte a [ plexShowSprite::$3 ] reg byte a [ plexShowSprite::$5 ] reg byte a [ plexShowSprite::$6 ] zp ZP_BYTE:20 [ plexShowSprite::xpos_idx#0 ] zp ZP_BYTE:19 [ plexShowSprite::plex_sprite_idx2#0 ] 
Limited combination testing to 100 combinations of 2304 possible.
Uplifting [main] best 78861 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:18 [ loop::rasterY#0 ]
Uplifting [loop] best 78861 combination zp ZP_BYTE:18 [ loop::rasterY#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:5 [ loop::ss#4 loop::ss#1 ]
Uplifting [loop] best 78861 combination zp ZP_BYTE:5 [ loop::ss#4 loop::ss#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:8 [ plex_show_idx#13 plex_show_idx#25 plex_show_idx#15 ]
Uplifting [] best 78861 combination zp ZP_BYTE:8 [ plex_show_idx#13 plex_show_idx#25 plex_show_idx#15 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:9 [ plex_sprite_msb#14 plex_sprite_msb#29 plex_sprite_msb#17 plex_sprite_msb#26 ]
Uplifting [] best 78861 combination zp ZP_BYTE:9 [ plex_sprite_msb#14 plex_sprite_msb#29 plex_sprite_msb#17 plex_sprite_msb#26 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ plex_sprite_idx#13 plex_sprite_idx#24 plex_sprite_idx#15 ]
Uplifting [] best 78861 combination zp ZP_BYTE:7 [ plex_sprite_idx#13 plex_sprite_idx#24 plex_sprite_idx#15 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:17 [ loop::plexShowNextYpos1_return#0 ]
Uplifting [loop] best 78261 combination reg byte a [ loop::plexShowNextYpos1_return#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:10 [ plexSort::m#2 plexSort::m#1 ]
Uplifting [plexSort] best 78261 combination zp ZP_BYTE:10 [ plexSort::m#2 plexSort::m#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ loop::ss#10 loop::ss#3 ]
Uplifting [loop] best 78261 combination zp ZP_BYTE:6 [ loop::ss#10 loop::ss#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:26 [ plexSort::nxt_y#0 ]
Uplifting [plexSort] best 78261 combination zp ZP_BYTE:26 [ plexSort::nxt_y#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:25 [ plexSort::nxt_idx#0 ]
Uplifting [plexSort] best 78261 combination zp ZP_BYTE:25 [ plexSort::nxt_idx#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ loop::sin_idx#6 loop::sin_idx#1 ]
Uplifting [loop] best 78261 combination zp ZP_BYTE:2 [ loop::sin_idx#6 loop::sin_idx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:20 [ plexShowSprite::xpos_idx#0 ]
Uplifting [plexShowSprite] best 78254 combination reg byte x [ plexShowSprite::xpos_idx#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:19 [ plexShowSprite::plex_sprite_idx2#0 ]
Uplifting [plexShowSprite] best 78247 combination reg byte y [ plexShowSprite::plex_sprite_idx2#0 ] 
Coalescing zero page register [ zp ZP_BYTE:5 [ loop::ss#4 loop::ss#1 ] ] with [ zp ZP_BYTE:6 [ loop::ss#10 loop::ss#3 ] ]
Coalescing zero page register [ zp ZP_BYTE:5 [ loop::ss#4 loop::ss#1 loop::ss#10 loop::ss#3 ] ] with [ zp ZP_BYTE:10 [ plexSort::m#2 plexSort::m#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:7 [ plex_sprite_idx#13 plex_sprite_idx#24 plex_sprite_idx#15 ] ] with [ zp ZP_BYTE:25 [ plexSort::nxt_idx#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:8 [ plex_show_idx#13 plex_show_idx#25 plex_show_idx#15 ] ] with [ zp ZP_BYTE:26 [ plexSort::nxt_y#0 ] ]
Allocated (was zp ZP_BYTE:5) zp ZP_BYTE:3 [ loop::ss#4 loop::ss#1 loop::ss#10 loop::ss#3 plexSort::m#2 plexSort::m#1 ]
Allocated (was zp ZP_BYTE:7) zp ZP_BYTE:4 [ plex_sprite_idx#13 plex_sprite_idx#24 plex_sprite_idx#15 plexSort::nxt_idx#0 ]
Allocated (was zp ZP_BYTE:8) zp ZP_BYTE:5 [ plex_show_idx#13 plex_show_idx#25 plex_show_idx#15 plexSort::nxt_y#0 ]
Allocated (was zp ZP_BYTE:9) zp ZP_BYTE:6 [ plex_sprite_msb#14 plex_sprite_msb#29 plex_sprite_msb#17 plex_sprite_msb#26 ]
Allocated (was zp ZP_WORD:13) zp ZP_WORD:7 [ init::xp#2 init::xp#1 ]
Allocated (was zp ZP_BYTE:18) zp ZP_BYTE:9 [ loop::rasterY#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  .label D011 = $d011
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .const BLACK = 0
  .const GREEN = 5
  .const PLEX_COUNT = $18
  .label SPRITE = $2000
  .label SCREEN = $400
  .label YSIN = $2100
  .label PLEX_SCREEN_PTR = SCREEN+$3f8
  .label plex_sprite_idx = 4
  .label plex_show_idx = 5
  .label plex_sprite_msb = 6
//SEG2 @begin
bbegin:
  jmp b28
//SEG3 @28
b28:
//SEG4 kickasm(location (const byte*) YSIN#0) {{ .var min = 51     .var max = 250-21     .var ampl = max-min;     .for(var i=0;i<256;i++)         .byte round(min+(ampl/2)+(ampl/2)*sin(toRadians(360*i/256)))  }}
//SEG5 kickasm(location (const byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff)) .for (var y=0; y<21; y++)     .for (var x=0;x<3; x++)         .byte pic.getSinglecolorByte(x,y)  }}
//SEG6 [3] phi from @28 to @31 [phi:@28->@31]
b31_from_b28:
  jmp b31
//SEG7 @31
b31:
//SEG8 [4] call main  [ ] ( )
  jsr main
//SEG9 [5] phi from @31 to @end [phi:@31->@end]
bend_from_b31:
  jmp bend
//SEG10 @end
bend:
//SEG11 main
main: {
  //SEG12 asm { sei  }
    sei
  //SEG13 [7] call init  [ ] ( main:4 [ ] )
    jsr init
  //SEG14 [8] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [9] call loop  [ ] ( main:4 [ ] )
  //SEG17 [11] phi from main::@1 to loop [phi:main::@1->loop]
  loop_from_b1:
    jsr loop
    jmp breturn
  //SEG18 main::@return
  breturn:
  //SEG19 [10] return  [ ] ( main:4 [ ] )
    rts
}
//SEG20 loop
loop: {
    .label sin_idx = 2
    .label ss = 3
    .label rasterY = 9
  //SEG21 [12] phi from loop to loop::@1 [phi:loop->loop::@1]
  b1_from_loop:
  //SEG22 [12] phi (byte) loop::sin_idx#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:loop->loop::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx
    jmp b1
  //SEG23 loop::@1
  b1:
    jmp b4
  //SEG24 loop::@4
  b4:
  //SEG25 [13] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto loop::@4 [ loop::sin_idx#6 ] ( main:4::loop:9 [ loop::sin_idx#6 ] ) -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
    jmp b6
  //SEG26 loop::@6
  b6:
  //SEG27 [14] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ loop::sin_idx#6 ] ( main:4::loop:9 [ loop::sin_idx#6 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG28 [15] (byte~) loop::y_idx#3 ← (byte) loop::sin_idx#6 [ loop::sin_idx#6 loop::y_idx#3 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::y_idx#3 ] ) -- vbuxx=vbuz1 
    ldx sin_idx
  //SEG29 [16] phi from loop::@6 to loop::@7 [phi:loop::@6->loop::@7]
  b7_from_b6:
  //SEG30 [16] phi (byte) loop::sy#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:loop::@6->loop::@7#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG31 [16] phi (byte) loop::y_idx#2 = (byte~) loop::y_idx#3 [phi:loop::@6->loop::@7#1] -- register_copy 
    jmp b7
  //SEG32 [16] phi from loop::@7 to loop::@7 [phi:loop::@7->loop::@7]
  b7_from_b7:
  //SEG33 [16] phi (byte) loop::sy#2 = (byte) loop::sy#1 [phi:loop::@7->loop::@7#0] -- register_copy 
  //SEG34 [16] phi (byte) loop::y_idx#2 = (byte) loop::y_idx#1 [phi:loop::@7->loop::@7#1] -- register_copy 
    jmp b7
  //SEG35 loop::@7
  b7:
  //SEG36 [17] *((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + (byte) loop::sy#2) ← *((const byte*) YSIN#0 + (byte) loop::y_idx#2) [ loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] ) -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuxx 
    lda YSIN,x
    sta PLEX_YPOS,y
  //SEG37 [18] (byte) loop::y_idx#1 ← (byte) loop::y_idx#2 + (byte/signed byte/word/signed word/dword/signed dword) 10 [ loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] ) -- vbuxx=vbuxx_plus_vbuc1 
    txa
    clc
    adc #$a
    tax
  //SEG38 [19] (byte) loop::sy#1 ← ++ (byte) loop::sy#2 [ loop::sin_idx#6 loop::y_idx#1 loop::sy#1 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::y_idx#1 loop::sy#1 ] ) -- vbuyy=_inc_vbuyy 
    iny
  //SEG39 [20] if((byte) loop::sy#1!=(const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto loop::@7 [ loop::sin_idx#6 loop::y_idx#1 loop::sy#1 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::y_idx#1 loop::sy#1 ] ) -- vbuyy_neq_vbuc1_then_la1 
    cpy #PLEX_COUNT-1+1
    bne b7_from_b7
    jmp b18
  //SEG40 loop::@18
  b18:
  //SEG41 [21] (byte) loop::sin_idx#1 ← (byte) loop::sin_idx#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 [ loop::sin_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#1 ] ) -- vbuz1=vbuz1_plus_1 
    inc sin_idx
  //SEG42 [22] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ loop::sin_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#1 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG43 [23] call plexSort  [ loop::sin_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#1 ] )
  //SEG44 [59] phi from loop::@18 to plexSort [phi:loop::@18->plexSort]
  plexSort_from_b18:
    jsr plexSort
    jmp b26
  //SEG45 loop::@26
  b26:
  //SEG46 [24] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ loop::sin_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#1 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG47 [25] phi from loop::@26 to loop::@8 [phi:loop::@26->loop::@8]
  b8_from_b26:
  //SEG48 [25] phi (byte) loop::ss#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:loop::@26->loop::@8#0] -- vbuz1=vbuc1 
    lda #0
    sta ss
  //SEG49 [25] phi (byte) plex_sprite_msb#29 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:loop::@26->loop::@8#1] -- vbuz1=vbuc1 
    lda #1
    sta plex_sprite_msb
  //SEG50 [25] phi (byte) plex_show_idx#25 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:loop::@26->loop::@8#2] -- vbuz1=vbuc1 
    lda #0
    sta plex_show_idx
  //SEG51 [25] phi (byte) plex_sprite_idx#24 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:loop::@26->loop::@8#3] -- vbuz1=vbuc1 
    lda #0
    sta plex_sprite_idx
    jmp b8
  //SEG52 [25] phi from loop::@27 to loop::@8 [phi:loop::@27->loop::@8]
  b8_from_b27:
  //SEG53 [25] phi (byte) loop::ss#4 = (byte) loop::ss#1 [phi:loop::@27->loop::@8#0] -- register_copy 
  //SEG54 [25] phi (byte) plex_sprite_msb#29 = (byte) plex_sprite_msb#17 [phi:loop::@27->loop::@8#1] -- register_copy 
  //SEG55 [25] phi (byte) plex_show_idx#25 = (byte) plex_show_idx#15 [phi:loop::@27->loop::@8#2] -- register_copy 
  //SEG56 [25] phi (byte) plex_sprite_idx#24 = (byte) plex_sprite_idx#15 [phi:loop::@27->loop::@8#3] -- register_copy 
    jmp b8
  //SEG57 loop::@8
  b8:
  //SEG58 [26] call plexShowSprite  [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] ( main:4::loop:9 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] )
  //SEG59 [39] phi from loop::@8 to plexShowSprite [phi:loop::@8->plexShowSprite]
  plexShowSprite_from_b8:
  //SEG60 [39] phi (byte) plex_sprite_msb#14 = (byte) plex_sprite_msb#29 [phi:loop::@8->plexShowSprite#0] -- register_copy 
  //SEG61 [39] phi (byte) plex_show_idx#13 = (byte) plex_show_idx#25 [phi:loop::@8->plexShowSprite#1] -- register_copy 
  //SEG62 [39] phi (byte) plex_sprite_idx#13 = (byte) plex_sprite_idx#24 [phi:loop::@8->plexShowSprite#2] -- register_copy 
    jsr plexShowSprite
    jmp b27
  //SEG63 loop::@27
  b27:
  //SEG64 [27] (byte) loop::ss#1 ← ++ (byte) loop::ss#4 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#1 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#1 ] ) -- vbuz1=_inc_vbuz1 
    inc ss
  //SEG65 [28] if((byte) loop::ss#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto loop::@8 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#1 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda ss
    cmp #8
    bne b8_from_b27
  //SEG66 [29] phi from loop::@27 to loop::@9 [phi:loop::@27->loop::@9]
  b9_from_b27:
  //SEG67 [29] phi (byte) loop::ss#10 = (byte/signed byte/word/signed word/dword/signed dword) 8 [phi:loop::@27->loop::@9#0] -- vbuz1=vbuc1 
    lda #8
    sta ss
    jmp b9
  //SEG68 [29] phi from loop::@28 to loop::@9 [phi:loop::@28->loop::@9]
  b9_from_b28:
  //SEG69 [29] phi (byte) loop::ss#10 = (byte) loop::ss#3 [phi:loop::@28->loop::@9#0] -- register_copy 
    jmp b9
  //SEG70 loop::@9
  b9:
  //SEG71 [30] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
    jmp plexShowNextYpos1
  //SEG72 loop::plexShowNextYpos1
  plexShowNextYpos1:
  //SEG73 [31] (byte) loop::plexShowNextYpos1_return#0 ← *((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#15)) [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::plexShowNextYpos1_return#0 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::plexShowNextYpos1_return#0 ] ) -- vbuaa=pbuc1_derefidx_pbuc2_derefidx_vbuz1 
    ldy plex_show_idx
    lda PLEX_SORTED_IDX,y
    tay
    lda PLEX_YPOS,y
    jmp b25
  //SEG74 loop::@25
  b25:
  //SEG75 [32] (byte) loop::rasterY#0 ← (byte) loop::plexShowNextYpos1_return#0 - (byte/signed byte/word/signed word/dword/signed dword) 8 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::rasterY#0 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::rasterY#0 ] ) -- vbuz1=vbuaa_minus_vbuc1 
    sec
    sbc #8
    sta rasterY
    jmp b10
  //SEG76 loop::@10
  b10:
  //SEG77 [33] if(*((const byte*) RASTER#0)<(byte) loop::rasterY#0) goto loop::@10 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::rasterY#0 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::rasterY#0 ] ) -- _deref_pbuc1_lt_vbuz1_then_la1 
    lda RASTER
    cmp rasterY
    bcc b10
    jmp b12
  //SEG78 loop::@12
  b12:
  //SEG79 [34] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG80 [35] call plexShowSprite  [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] )
  //SEG81 [39] phi from loop::@12 to plexShowSprite [phi:loop::@12->plexShowSprite]
  plexShowSprite_from_b12:
  //SEG82 [39] phi (byte) plex_sprite_msb#14 = (byte) plex_sprite_msb#17 [phi:loop::@12->plexShowSprite#0] -- register_copy 
  //SEG83 [39] phi (byte) plex_show_idx#13 = (byte) plex_show_idx#15 [phi:loop::@12->plexShowSprite#1] -- register_copy 
  //SEG84 [39] phi (byte) plex_sprite_idx#13 = (byte) plex_sprite_idx#15 [phi:loop::@12->plexShowSprite#2] -- register_copy 
    jsr plexShowSprite
    jmp b28
  //SEG85 loop::@28
  b28:
  //SEG86 [36] (byte) loop::ss#3 ← ++ (byte) loop::ss#10 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#3 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#3 ] ) -- vbuz1=_inc_vbuz1 
    inc ss
  //SEG87 [37] if((byte) loop::ss#3!=(const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto loop::@9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#3 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#3 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda ss
    cmp #PLEX_COUNT-1+1
    bne b9_from_b28
    jmp b23
  //SEG88 loop::@23
  b23:
  //SEG89 [38] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 [ loop::sin_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#1 ] ) -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
  //SEG90 [12] phi from loop::@23 to loop::@1 [phi:loop::@23->loop::@1]
  b1_from_b23:
  //SEG91 [12] phi (byte) loop::sin_idx#6 = (byte) loop::sin_idx#1 [phi:loop::@23->loop::@1#0] -- register_copy 
    jmp b1
}
//SEG92 plexShowSprite
plexShowSprite: {
  //SEG93 [40] (byte) plexShowSprite::plex_sprite_idx2#0 ← (byte) plex_sprite_idx#13 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ) -- vbuyy=vbuz1_rol_1 
    lda plex_sprite_idx
    asl
    tay
  //SEG94 [41] *((const byte*) SPRITES_YPOS#0 + (byte) plexShowSprite::plex_sprite_idx2#0) ← *((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#13)) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ) -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_pbuc3_derefidx_vbuz1 
    ldx plex_show_idx
    lda PLEX_SORTED_IDX,x
    tax
    lda PLEX_YPOS,x
    sta SPRITES_YPOS,y
  //SEG95 [42] *((const byte*) PLEX_SCREEN_PTR#1 + (byte) plex_sprite_idx#13) ← *((const byte[PLEX_COUNT#0]) PLEX_PTR#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#13)) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_pbuc3_derefidx_vbuz2 
    ldx plex_show_idx
    lda PLEX_SORTED_IDX,x
    tax
    lda PLEX_PTR,x
    ldx plex_sprite_idx
    sta PLEX_SCREEN_PTR,x
  //SEG96 [43] (byte) plexShowSprite::xpos_idx#0 ← *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#13) << (byte/signed byte/word/signed word/dword/signed dword) 1 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] ) -- vbuxx=pbuc1_derefidx_vbuz1_rol_1 
    ldx plex_show_idx
    lda PLEX_SORTED_IDX,x
    asl
    tax
  //SEG97 [44] (byte~) plexShowSprite::$2 ← < *((const word[PLEX_COUNT#0]) PLEX_XPOS#0 + (byte) plexShowSprite::xpos_idx#0) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 plexShowSprite::$2 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 plexShowSprite::$2 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 plexShowSprite::$2 ] ) -- vbuaa=_lo_pwuc1_derefidx_vbuxx 
    lda PLEX_XPOS,x
  //SEG98 [45] *((const byte*) SPRITES_XPOS#0 + (byte) plexShowSprite::plex_sprite_idx2#0) ← (byte~) plexShowSprite::$2 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::xpos_idx#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::xpos_idx#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::xpos_idx#0 ] ) -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SPRITES_XPOS,y
  //SEG99 [46] (byte~) plexShowSprite::$3 ← > *((const word[PLEX_COUNT#0]) PLEX_XPOS#0 + (byte) plexShowSprite::xpos_idx#0) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$3 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$3 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$3 ] ) -- vbuaa=_hi_pwuc1_derefidx_vbuxx 
    lda PLEX_XPOS+1,x
  //SEG100 [47] if((byte~) plexShowSprite::$3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto plexShowSprite::@1 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ) -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b1
    jmp b4
  //SEG101 plexShowSprite::@4
  b4:
  //SEG102 [48] (byte/word/dword~) plexShowSprite::$5 ← (byte/word/signed word/dword/signed dword) 255 ^ (byte) plex_sprite_msb#14 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$5 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$5 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$5 ] ) -- vbuaa=vbuc1_bxor_vbuz1 
    lda plex_sprite_msb
    eor #$ff
  //SEG103 [49] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) & (byte/word/dword~) plexShowSprite::$5 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ) -- _deref_pbuc1=_deref_pbuc1_band_vbuaa 
    and SPRITES_XMSB
    sta SPRITES_XMSB
    jmp b2
  //SEG104 plexShowSprite::@2
  b2:
  //SEG105 [50] (byte/signed word/word/dword/signed dword~) plexShowSprite::$6 ← (byte) plex_sprite_idx#13 + (byte/signed byte/word/signed word/dword/signed dword) 1 [ plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$6 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$6 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$6 ] ) -- vbuaa=vbuz1_plus_1 
    lda plex_sprite_idx
    clc
    adc #1
  //SEG106 [51] (byte) plex_sprite_idx#15 ← (byte/signed word/word/dword/signed dword~) plexShowSprite::$6 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ plex_sprite_idx#15 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#13 plex_sprite_msb#14 ] ) -- vbuz1=vbuaa_band_vbuc1 
    and #7
    sta plex_sprite_idx
  //SEG107 [52] (byte) plex_show_idx#15 ← ++ (byte) plex_show_idx#13 [ plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#14 ] ) -- vbuz1=_inc_vbuz1 
    inc plex_show_idx
  //SEG108 [53] (byte) plex_sprite_msb#26 ← (byte) plex_sprite_msb#14 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] ) -- vbuz1=vbuz1_rol_1 
    asl plex_sprite_msb
  //SEG109 [54] if((byte) plex_sprite_msb#26!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto plexShowSprite::@7 [ plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] ) -- vbuz1_neq_0_then_la1 
    lda plex_sprite_msb
    bne b7_from_b2
  //SEG110 [55] phi from plexShowSprite::@2 to plexShowSprite::@return [phi:plexShowSprite::@2->plexShowSprite::@return]
  breturn_from_b2:
  //SEG111 [55] phi (byte) plex_sprite_msb#17 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:plexShowSprite::@2->plexShowSprite::@return#0] -- vbuz1=vbuc1 
    lda #1
    sta plex_sprite_msb
    jmp breturn
  //SEG112 plexShowSprite::@return
  breturn:
  //SEG113 [56] return  [ plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] )
    rts
  //SEG114 [57] phi from plexShowSprite::@2 to plexShowSprite::@7 [phi:plexShowSprite::@2->plexShowSprite::@7]
  b7_from_b2:
    jmp b7
  //SEG115 plexShowSprite::@7
  b7:
  //SEG116 [55] phi from plexShowSprite::@7 to plexShowSprite::@return [phi:plexShowSprite::@7->plexShowSprite::@return]
  breturn_from_b7:
  //SEG117 [55] phi (byte) plex_sprite_msb#17 = (byte) plex_sprite_msb#26 [phi:plexShowSprite::@7->plexShowSprite::@return#0] -- register_copy 
    jmp breturn
  //SEG118 plexShowSprite::@1
  b1:
  //SEG119 [58] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) | (byte) plex_sprite_msb#14 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ) -- _deref_pbuc1=_deref_pbuc1_bor_vbuz1 
    lda SPRITES_XMSB
    ora plex_sprite_msb
    sta SPRITES_XMSB
    jmp b2
}
//SEG120 plexSort
plexSort: {
    .label nxt_idx = 4
    .label nxt_y = 5
    .label m = 3
  //SEG121 [60] phi from plexSort to plexSort::@1 [phi:plexSort->plexSort::@1]
  b1_from_plexSort:
  //SEG122 [60] phi (byte) plexSort::m#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:plexSort->plexSort::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta m
    jmp b1
  //SEG123 [60] phi from plexSort::@2 to plexSort::@1 [phi:plexSort::@2->plexSort::@1]
  b1_from_b2:
  //SEG124 [60] phi (byte) plexSort::m#2 = (byte) plexSort::m#1 [phi:plexSort::@2->plexSort::@1#0] -- register_copy 
    jmp b1
  //SEG125 plexSort::@1
  b1:
  //SEG126 [61] (byte) plexSort::nxt_idx#0 ← *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) plexSort::m#2) [ plexSort::m#2 plexSort::nxt_idx#0 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy m
    lda PLEX_SORTED_IDX+1,y
    sta nxt_idx
  //SEG127 [62] (byte) plexSort::nxt_y#0 ← *((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + (byte) plexSort::nxt_idx#0) [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy nxt_idx
    lda PLEX_YPOS,y
    sta nxt_y
  //SEG128 [63] if((byte) plexSort::nxt_y#0>=*((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::m#2))) goto plexSort::@2 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] ) -- vbuz1_ge_pbuc1_derefidx_pbuc2_derefidx_vbuz2_then_la1 
    lda nxt_y
    ldx m
    ldy PLEX_SORTED_IDX,x
    cmp PLEX_YPOS,y
    bcs b2
    jmp b10
  //SEG129 plexSort::@10
  b10:
  //SEG130 [64] (byte~) plexSort::s#6 ← (byte) plexSort::m#2 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#6 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#6 ] ) -- vbuxx=vbuz1 
    ldx m
  //SEG131 [65] phi from plexSort::@10 plexSort::@7 to plexSort::@3 [phi:plexSort::@10/plexSort::@7->plexSort::@3]
  b3_from_b10:
  b3_from_b7:
  //SEG132 [65] phi (byte) plexSort::s#3 = (byte~) plexSort::s#6 [phi:plexSort::@10/plexSort::@7->plexSort::@3#0] -- register_copy 
    jmp b3
  //SEG133 plexSort::@3
  b3:
  //SEG134 [66] *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) plexSort::s#3) ← *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::s#3) [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] ) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda PLEX_SORTED_IDX,x
    sta PLEX_SORTED_IDX+1,x
  //SEG135 [67] (byte) plexSort::s#1 ← -- (byte) plexSort::s#3 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ) -- vbuxx=_dec_vbuxx 
    dex
  //SEG136 [68] if((byte) plexSort::s#1!=(byte/word/signed word/dword/signed dword) 255) goto plexSort::@7 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$ff
    bne b7
    jmp b5
  //SEG137 plexSort::@5
  b5:
  //SEG138 [69] (byte) plexSort::s#2 ← ++ (byte) plexSort::s#1 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::s#2 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::s#2 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG139 [70] *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::s#2) ← (byte) plexSort::nxt_idx#0 [ plexSort::m#2 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 ] ) -- pbuc1_derefidx_vbuxx=vbuz1 
    lda nxt_idx
    sta PLEX_SORTED_IDX,x
    jmp b2
  //SEG140 plexSort::@2
  b2:
  //SEG141 [71] (byte) plexSort::m#1 ← ++ (byte) plexSort::m#2 [ plexSort::m#1 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#1 ] ) -- vbuz1=_inc_vbuz1 
    inc m
  //SEG142 [72] if((byte) plexSort::m#1!=(const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 2+(byte/signed byte/word/signed word/dword/signed dword) 1) goto plexSort::@1 [ plexSort::m#1 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda m
    cmp #PLEX_COUNT-2+1
    bne b1_from_b2
    jmp breturn
  //SEG143 plexSort::@return
  breturn:
  //SEG144 [73] return  [ ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 ] )
    rts
  //SEG145 plexSort::@7
  b7:
  //SEG146 [74] if((byte) plexSort::nxt_y#0<*((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::s#1))) goto plexSort::@3 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ) -- vbuz1_lt_pbuc1_derefidx_pbuc2_derefidx_vbuxx_then_la1 
    lda nxt_y
    ldy PLEX_SORTED_IDX,x
    cmp PLEX_YPOS,y
    bcc b3_from_b7
    jmp b5
}
//SEG147 init
init: {
    .label xp = 7
  //SEG148 [75] *((const byte*) D011#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:4::init:7 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_DEN|VIC_RSEL|3
    sta D011
  //SEG149 [76] call plexInit  [ ] ( main:4::init:7 [ ] )
  //SEG150 [90] phi from init to plexInit [phi:init->plexInit]
  plexInit_from_init:
    jsr plexInit
  //SEG151 [77] phi from init to init::@1 [phi:init->init::@1]
  b1_from_init:
  //SEG152 [77] phi (word) init::xp#2 = (byte/signed byte/word/signed word/dword/signed dword) 32 [phi:init->init::@1#0] -- vwuz1=vbuc1 
    lda #<$20
    sta xp
    lda #>$20
    sta xp+1
  //SEG153 [77] phi (byte) init::sx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init->init::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG154 [77] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
  b1_from_b1:
  //SEG155 [77] phi (word) init::xp#2 = (word) init::xp#1 [phi:init::@1->init::@1#0] -- register_copy 
  //SEG156 [77] phi (byte) init::sx#2 = (byte) init::sx#1 [phi:init::@1->init::@1#1] -- register_copy 
    jmp b1
  //SEG157 init::@1
  b1:
  //SEG158 [78] *((const byte[PLEX_COUNT#0]) PLEX_PTR#0 + (byte) init::sx#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 [ init::sx#2 init::xp#2 ] ( main:4::init:7 [ init::sx#2 init::xp#2 ] ) -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$ff&SPRITE/$40
    sta PLEX_PTR,x
  //SEG159 [79] (byte~) init::$6 ← (byte) init::sx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ init::sx#2 init::xp#2 init::$6 ] ( main:4::init:7 [ init::sx#2 init::xp#2 init::$6 ] ) -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG160 [80] *((const word[PLEX_COUNT#0]) PLEX_XPOS#0 + (byte~) init::$6) ← (word) init::xp#2 [ init::sx#2 init::xp#2 ] ( main:4::init:7 [ init::sx#2 init::xp#2 ] ) -- pwuc1_derefidx_vbuaa=vwuz1 
    tay
    lda xp
    sta PLEX_XPOS,y
    lda xp+1
    sta PLEX_XPOS+1,y
  //SEG161 [81] (word) init::xp#1 ← (word) init::xp#2 + (byte/signed byte/word/signed word/dword/signed dword) 12 [ init::sx#2 init::xp#1 ] ( main:4::init:7 [ init::sx#2 init::xp#1 ] ) -- vwuz1=vwuz1_plus_vbuc1 
    clc
    lda xp
    adc #<$c
    sta xp
    lda xp+1
    adc #>$c
    sta xp+1
  //SEG162 [82] (byte) init::sx#1 ← ++ (byte) init::sx#2 [ init::sx#1 init::xp#1 ] ( main:4::init:7 [ init::sx#1 init::xp#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG163 [83] if((byte) init::sx#1!=(const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto init::@1 [ init::sx#1 init::xp#1 ] ( main:4::init:7 [ init::sx#1 init::xp#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLEX_COUNT-1+1
    bne b1_from_b1
    jmp b3
  //SEG164 init::@3
  b3:
  //SEG165 [84] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 [ ] ( main:4::init:7 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #$ff
    sta SPRITES_ENABLE
  //SEG166 [85] phi from init::@3 to init::@2 [phi:init::@3->init::@2]
  b2_from_b3:
  //SEG167 [85] phi (byte) init::ss#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init::@3->init::@2#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b2
  //SEG168 [85] phi from init::@2 to init::@2 [phi:init::@2->init::@2]
  b2_from_b2:
  //SEG169 [85] phi (byte) init::ss#2 = (byte) init::ss#1 [phi:init::@2->init::@2#0] -- register_copy 
    jmp b2
  //SEG170 init::@2
  b2:
  //SEG171 [86] *((const byte*) SPRITES_COLS#0 + (byte) init::ss#2) ← (const byte) GREEN#0 [ init::ss#2 ] ( main:4::init:7 [ init::ss#2 ] ) -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #GREEN
    sta SPRITES_COLS,x
  //SEG172 [87] (byte) init::ss#1 ← ++ (byte) init::ss#2 [ init::ss#1 ] ( main:4::init:7 [ init::ss#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG173 [88] if((byte) init::ss#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto init::@2 [ init::ss#1 ] ( main:4::init:7 [ init::ss#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b2_from_b2
    jmp breturn
  //SEG174 init::@return
  breturn:
  //SEG175 [89] return  [ ] ( main:4::init:7 [ ] )
    rts
}
//SEG176 plexInit
plexInit: {
  //SEG177 [91] phi from plexInit to plexInit::plexSetScreen1 [phi:plexInit->plexInit::plexSetScreen1]
  plexSetScreen1_from_plexInit:
    jmp plexSetScreen1
  //SEG178 plexInit::plexSetScreen1
  plexSetScreen1:
  //SEG179 [92] phi from plexInit::plexSetScreen1 to plexInit::@1 [phi:plexInit::plexSetScreen1->plexInit::@1]
  b1_from_plexSetScreen1:
  //SEG180 [92] phi (byte) plexInit::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:plexInit::plexSetScreen1->plexInit::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG181 [92] phi from plexInit::@1 to plexInit::@1 [phi:plexInit::@1->plexInit::@1]
  b1_from_b1:
  //SEG182 [92] phi (byte) plexInit::i#2 = (byte) plexInit::i#1 [phi:plexInit::@1->plexInit::@1#0] -- register_copy 
    jmp b1
  //SEG183 plexInit::@1
  b1:
  //SEG184 [93] *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexInit::i#2) ← (byte) plexInit::i#2 [ plexInit::i#2 ] ( main:4::init:7::plexInit:76 [ plexInit::i#2 ] ) -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta PLEX_SORTED_IDX,x
  //SEG185 [94] (byte) plexInit::i#1 ← ++ (byte) plexInit::i#2 [ plexInit::i#1 ] ( main:4::init:7::plexInit:76 [ plexInit::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG186 [95] if((byte) plexInit::i#1!=(const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto plexInit::@1 [ plexInit::i#1 ] ( main:4::init:7::plexInit:76 [ plexInit::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLEX_COUNT-1+1
    bne b1_from_b1
    jmp breturn
  //SEG187 plexInit::@return
  breturn:
  //SEG188 [96] return  [ ] ( main:4::init:7::plexInit:76 [ ] )
    rts
}
  PLEX_XPOS: .fill 2*PLEX_COUNT, 0
  PLEX_YPOS: .fill PLEX_COUNT, 0
  PLEX_PTR: .fill PLEX_COUNT, 0
  PLEX_SORTED_IDX: .fill PLEX_COUNT, 0
.pc = YSIN "Inline"
  .var min = 51
    .var max = 250-21
    .var ampl = max-min;
    .for(var i=0;i<256;i++)
        .byte round(min+(ampl/2)+(ampl/2)*sin(toRadians(360*i/256)))

.pc = SPRITE "Inline"
  .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
.for (var y=0; y<21; y++)
    .for (var x=0;x<3; x++)
        .byte pic.getSinglecolorByte(x,y)


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b28
Removing instruction jmp b31
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b18
Removing instruction jmp b26
Removing instruction jmp b8
Removing instruction jmp b27
Removing instruction jmp b9
Removing instruction jmp plexShowNextYpos1
Removing instruction jmp b25
Removing instruction jmp b10
Removing instruction jmp b12
Removing instruction jmp b28
Removing instruction jmp b23
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b7
Removing instruction jmp b1
Removing instruction jmp b10
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp plexSetScreen1
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Replacing instruction ldy nxt_idx with TAY
Removing instruction lda nxt_y
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b7_from_b7 with b7
Replacing label b8_from_b27 with b8
Replacing label b9_from_b28 with b9
Replacing label b1 with b4
Replacing label b7_from_b2 with b7
Replacing label b1_from_b2 with b1
Replacing label b3_from_b7 with b3
Replacing label b1_from_b1 with b1
Replacing label b2_from_b2 with b2
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction b28:
Removing instruction b31_from_b28:
Removing instruction bend_from_b31:
Removing instruction b1_from_main:
Removing instruction loop_from_b1:
Removing instruction b1:
Removing instruction b7_from_b7:
Removing instruction b8_from_b27:
Removing instruction plexShowSprite_from_b8:
Removing instruction b9_from_b28:
Removing instruction b7_from_b2:
Removing instruction breturn_from_b7:
Removing instruction b1_from_b2:
Removing instruction b3_from_b10:
Removing instruction b3_from_b7:
Removing instruction b1_from_b1:
Removing instruction b2_from_b2:
Removing instruction plexSetScreen1_from_plexInit:
Removing instruction b1_from_plexSetScreen1:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b31:
Removing instruction bend:
Removing instruction b1:
Removing instruction breturn:
Removing instruction b1_from_loop:
Removing instruction b6:
Removing instruction b7_from_b6:
Removing instruction b18:
Removing instruction plexSort_from_b18:
Removing instruction b26:
Removing instruction b8_from_b26:
Removing instruction b27:
Removing instruction b9_from_b27:
Removing instruction plexShowNextYpos1:
Removing instruction b25:
Removing instruction b12:
Removing instruction plexShowSprite_from_b12:
Removing instruction b28:
Removing instruction b23:
Removing instruction b1_from_b23:
Removing instruction b4:
Removing instruction breturn_from_b2:
Removing instruction b1_from_plexSort:
Removing instruction b10:
Removing instruction breturn:
Removing instruction plexInit_from_init:
Removing instruction b1_from_init:
Removing instruction b3:
Removing instruction b2_from_b3:
Removing instruction breturn:
Removing instruction plexSetScreen1:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to breturn in bne b7
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldx m
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction b7:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp breturn
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
(label) @28
(label) @31
(label) @begin
(label) @end
(byte) BLACK
(const byte) BLACK#0 BLACK = (byte/signed byte/word/signed word/dword/signed dword) 0
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) 53280
(byte*) D011
(const byte*) D011#0 D011 = ((byte*))(word/dword/signed dword) 53265
(byte) GREEN
(const byte) GREEN#0 GREEN = (byte/signed byte/word/signed word/dword/signed dword) 5
(byte) PLEX_COUNT
(const byte) PLEX_COUNT#0 PLEX_COUNT = (byte/signed byte/word/signed word/dword/signed dword) 24
(byte[PLEX_COUNT#0]) PLEX_PTR
(const byte[PLEX_COUNT#0]) PLEX_PTR#0 PLEX_PTR = { fill( PLEX_COUNT#0, 0) }
(byte*) PLEX_SCREEN_PTR
(const byte*) PLEX_SCREEN_PTR#1 PLEX_SCREEN_PTR = (const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1016
(byte[PLEX_COUNT#0]) PLEX_SORTED_IDX
(const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 PLEX_SORTED_IDX = { fill( PLEX_COUNT#0, 0) }
(word[PLEX_COUNT#0]) PLEX_XPOS
(const word[PLEX_COUNT#0]) PLEX_XPOS#0 PLEX_XPOS = { fill( PLEX_COUNT#0, 0) }
(byte[PLEX_COUNT#0]) PLEX_YPOS
(const byte[PLEX_COUNT#0]) PLEX_YPOS#0 PLEX_YPOS = { fill( PLEX_COUNT#0, 0) }
(byte*) RASTER
(const byte*) RASTER#0 RASTER = ((byte*))(word/dword/signed dword) 53266
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) 1024
(byte*) SPRITE
(const byte*) SPRITE#0 SPRITE = ((byte*))(word/signed word/dword/signed dword) 8192
(byte*) SPRITES_COLS
(const byte*) SPRITES_COLS#0 SPRITES_COLS = ((byte*))(word/dword/signed dword) 53287
(byte*) SPRITES_ENABLE
(const byte*) SPRITES_ENABLE#0 SPRITES_ENABLE = ((byte*))(word/dword/signed dword) 53269
(byte*) SPRITES_XMSB
(const byte*) SPRITES_XMSB#0 SPRITES_XMSB = ((byte*))(word/dword/signed dword) 53264
(byte*) SPRITES_XPOS
(const byte*) SPRITES_XPOS#0 SPRITES_XPOS = ((byte*))(word/dword/signed dword) 53248
(byte*) SPRITES_YPOS
(const byte*) SPRITES_YPOS#0 SPRITES_YPOS = ((byte*))(word/dword/signed dword) 53249
(byte) VIC_DEN
(const byte) VIC_DEN#0 VIC_DEN = (byte/signed byte/word/signed word/dword/signed dword) 16
(byte) VIC_RSEL
(const byte) VIC_RSEL#0 VIC_RSEL = (byte/signed byte/word/signed word/dword/signed dword) 8
(byte*) YSIN
(const byte*) YSIN#0 YSIN = ((byte*))(word/signed word/dword/signed dword) 8448
(void()) init()
(byte~) init::$6 reg byte a 22.0
(label) init::@1
(label) init::@2
(label) init::@3
(label) init::@return
(byte) init::ss
(byte) init::ss#1 reg byte x 16.5
(byte) init::ss#2 reg byte x 16.5
(byte) init::sx
(byte) init::sx#1 reg byte x 16.5
(byte) init::sx#2 reg byte x 8.8
(word) init::xp
(word) init::xp#1 xp zp ZP_WORD:7 7.333333333333333
(word) init::xp#2 xp zp ZP_WORD:7 8.25
(void()) loop()
(label) loop::@1
(label) loop::@10
(label) loop::@12
(label) loop::@18
(label) loop::@23
(label) loop::@25
(label) loop::@26
(label) loop::@27
(label) loop::@28
(label) loop::@4
(label) loop::@6
(label) loop::@7
(label) loop::@8
(label) loop::@9
(label) loop::plexShowNextYpos1
(byte) loop::plexShowNextYpos1_return
(byte) loop::plexShowNextYpos1_return#0 reg byte a 202.0
(byte) loop::rasterY
(byte) loop::rasterY#0 rasterY zp ZP_BYTE:9 551.0
(byte) loop::sin_idx
(byte) loop::sin_idx#1 sin_idx zp ZP_BYTE:2 1.2222222222222223
(byte) loop::sin_idx#6 sin_idx zp ZP_BYTE:2 3.666666666666667
(byte) loop::ss
(byte) loop::ss#1 ss zp ZP_BYTE:3 151.5
(byte) loop::ss#10 ss zp ZP_BYTE:3 28.857142857142858
(byte) loop::ss#3 ss zp ZP_BYTE:3 151.5
(byte) loop::ss#4 ss zp ZP_BYTE:3 101.0
(byte) loop::sy
(byte) loop::sy#1 reg byte y 151.5
(byte) loop::sy#2 reg byte y 101.0
(byte) loop::y_idx
(byte) loop::y_idx#1 reg byte x 67.33333333333333
(byte) loop::y_idx#2 reg byte x 157.0
(byte~) loop::y_idx#3 reg byte x 22.0
(void()) main()
(label) main::@1
(label) main::@return
(void()) plexInit((byte*) plexInit::screen)
(label) plexInit::@1
(label) plexInit::@return
(byte) plexInit::i
(byte) plexInit::i#1 reg byte x 16.5
(byte) plexInit::i#2 reg byte x 22.0
(label) plexInit::plexSetScreen1
(byte*~) plexInit::plexSetScreen1_$0
(byte*) plexInit::plexSetScreen1_screen
(byte*) plexInit::screen
(void()) plexShowSprite()
(byte~) plexShowSprite::$2 reg byte a 4.0
(byte~) plexShowSprite::$3 reg byte a 4.0
(byte/word/dword~) plexShowSprite::$5 reg byte a 4.0
(byte/signed word/word/dword/signed dword~) plexShowSprite::$6 reg byte a 4.0
(label) plexShowSprite::@1
(label) plexShowSprite::@2
(label) plexShowSprite::@4
(label) plexShowSprite::@7
(label) plexShowSprite::@return
(byte) plexShowSprite::plex_sprite_idx2
(byte) plexShowSprite::plex_sprite_idx2#0 reg byte y 1.2000000000000002
(byte) plexShowSprite::xpos_idx
(byte) plexShowSprite::xpos_idx#0 reg byte x 2.0
(void()) plexSort()
(label) plexSort::@1
(label) plexSort::@10
(label) plexSort::@2
(label) plexSort::@3
(label) plexSort::@5
(label) plexSort::@7
(label) plexSort::@return
(byte) plexSort::m
(byte) plexSort::m#1 m zp ZP_BYTE:3 151.5
(byte) plexSort::m#2 m zp ZP_BYTE:3 42.08333333333333
(byte) plexSort::nxt_idx
(byte) plexSort::nxt_idx#0 nxt_idx zp ZP_BYTE:4 30.299999999999997
(byte) plexSort::nxt_y
(byte) plexSort::nxt_y#0 nxt_y zp ZP_BYTE:5 150.375
(byte) plexSort::s
(byte) plexSort::s#1 reg byte x 1368.3333333333335
(byte) plexSort::s#2 reg byte x 202.0
(byte) plexSort::s#3 reg byte x 2052.5
(byte~) plexSort::s#6 reg byte x 202.0
(byte) plex_show_idx
(byte) plex_show_idx#13 plex_show_idx zp ZP_BYTE:5 14.999999999999998
(byte) plex_show_idx#15 plex_show_idx zp ZP_BYTE:5 16.944444444444443
(byte) plex_show_idx#25 plex_show_idx zp ZP_BYTE:5 202.0
(byte) plex_sprite_idx
(byte) plex_sprite_idx#13 plex_sprite_idx zp ZP_BYTE:4 17.333333333333336
(byte) plex_sprite_idx#15 plex_sprite_idx zp ZP_BYTE:4 10.736842105263158
(byte) plex_sprite_idx#24 plex_sprite_idx zp ZP_BYTE:4 202.0
(byte) plex_sprite_msb
(byte) plex_sprite_msb#14 plex_sprite_msb zp ZP_BYTE:6 13.866666666666665
(byte) plex_sprite_msb#17 plex_sprite_msb zp ZP_BYTE:6 14.571428571428571
(byte) plex_sprite_msb#26 plex_sprite_msb zp ZP_BYTE:6 2.0
(byte) plex_sprite_msb#29 plex_sprite_msb zp ZP_BYTE:6 202.0

zp ZP_BYTE:2 [ loop::sin_idx#6 loop::sin_idx#1 ]
reg byte x [ loop::y_idx#2 loop::y_idx#3 loop::y_idx#1 ]
reg byte y [ loop::sy#2 loop::sy#1 ]
zp ZP_BYTE:3 [ loop::ss#4 loop::ss#1 loop::ss#10 loop::ss#3 plexSort::m#2 plexSort::m#1 ]
zp ZP_BYTE:4 [ plex_sprite_idx#13 plex_sprite_idx#24 plex_sprite_idx#15 plexSort::nxt_idx#0 ]
zp ZP_BYTE:5 [ plex_show_idx#13 plex_show_idx#25 plex_show_idx#15 plexSort::nxt_y#0 ]
zp ZP_BYTE:6 [ plex_sprite_msb#14 plex_sprite_msb#29 plex_sprite_msb#17 plex_sprite_msb#26 ]
reg byte x [ plexSort::s#3 plexSort::s#1 plexSort::s#6 ]
reg byte x [ init::sx#2 init::sx#1 ]
zp ZP_WORD:7 [ init::xp#2 init::xp#1 ]
reg byte x [ init::ss#2 init::ss#1 ]
reg byte x [ plexInit::i#2 plexInit::i#1 ]
reg byte a [ loop::plexShowNextYpos1_return#0 ]
zp ZP_BYTE:9 [ loop::rasterY#0 ]
reg byte y [ plexShowSprite::plex_sprite_idx2#0 ]
reg byte x [ plexShowSprite::xpos_idx#0 ]
reg byte a [ plexShowSprite::$2 ]
reg byte a [ plexShowSprite::$3 ]
reg byte a [ plexShowSprite::$5 ]
reg byte a [ plexShowSprite::$6 ]
reg byte x [ plexSort::s#2 ]
reg byte a [ init::$6 ]


FINAL ASSEMBLER
Score: 62848

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_XMSB = $d010
  .label RASTER = $d012
  .label SPRITES_ENABLE = $d015
  .label BORDERCOL = $d020
  .label SPRITES_COLS = $d027
  .label D011 = $d011
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .const BLACK = 0
  .const GREEN = 5
  .const PLEX_COUNT = $18
  .label SPRITE = $2000
  .label SCREEN = $400
  .label YSIN = $2100
  .label PLEX_SCREEN_PTR = SCREEN+$3f8
  .label plex_sprite_idx = 4
  .label plex_show_idx = 5
  .label plex_sprite_msb = 6
//SEG2 @begin
//SEG3 @28
//SEG4 kickasm(location (const byte*) YSIN#0) {{ .var min = 51     .var max = 250-21     .var ampl = max-min;     .for(var i=0;i<256;i++)         .byte round(min+(ampl/2)+(ampl/2)*sin(toRadians(360*i/256)))  }}
//SEG5 kickasm(location (const byte*) SPRITE#0) {{ .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff)) .for (var y=0; y<21; y++)     .for (var x=0;x<3; x++)         .byte pic.getSinglecolorByte(x,y)  }}
//SEG6 [3] phi from @28 to @31 [phi:@28->@31]
//SEG7 @31
//SEG8 [4] call main  [ ] ( )
  jsr main
//SEG9 [5] phi from @31 to @end [phi:@31->@end]
//SEG10 @end
//SEG11 main
main: {
  //SEG12 asm { sei  }
    sei
  //SEG13 [7] call init  [ ] ( main:4 [ ] )
    jsr init
  //SEG14 [8] phi from main to main::@1 [phi:main->main::@1]
  //SEG15 main::@1
  //SEG16 [9] call loop  [ ] ( main:4 [ ] )
  //SEG17 [11] phi from main::@1 to loop [phi:main::@1->loop]
    jsr loop
  //SEG18 main::@return
  //SEG19 [10] return  [ ] ( main:4 [ ] )
    rts
}
//SEG20 loop
loop: {
    .label sin_idx = 2
    .label ss = 3
    .label rasterY = 9
  //SEG21 [12] phi from loop to loop::@1 [phi:loop->loop::@1]
  //SEG22 [12] phi (byte) loop::sin_idx#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:loop->loop::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta sin_idx
  //SEG23 loop::@1
  //SEG24 loop::@4
  b4:
  //SEG25 [13] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto loop::@4 [ loop::sin_idx#6 ] ( main:4::loop:9 [ loop::sin_idx#6 ] ) -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$ff
    bne b4
  //SEG26 loop::@6
  //SEG27 [14] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ loop::sin_idx#6 ] ( main:4::loop:9 [ loop::sin_idx#6 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG28 [15] (byte~) loop::y_idx#3 ← (byte) loop::sin_idx#6 [ loop::sin_idx#6 loop::y_idx#3 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::y_idx#3 ] ) -- vbuxx=vbuz1 
    ldx sin_idx
  //SEG29 [16] phi from loop::@6 to loop::@7 [phi:loop::@6->loop::@7]
  //SEG30 [16] phi (byte) loop::sy#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:loop::@6->loop::@7#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG31 [16] phi (byte) loop::y_idx#2 = (byte~) loop::y_idx#3 [phi:loop::@6->loop::@7#1] -- register_copy 
  //SEG32 [16] phi from loop::@7 to loop::@7 [phi:loop::@7->loop::@7]
  //SEG33 [16] phi (byte) loop::sy#2 = (byte) loop::sy#1 [phi:loop::@7->loop::@7#0] -- register_copy 
  //SEG34 [16] phi (byte) loop::y_idx#2 = (byte) loop::y_idx#1 [phi:loop::@7->loop::@7#1] -- register_copy 
  //SEG35 loop::@7
  b7:
  //SEG36 [17] *((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + (byte) loop::sy#2) ← *((const byte*) YSIN#0 + (byte) loop::y_idx#2) [ loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::y_idx#2 loop::sy#2 ] ) -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuxx 
    lda YSIN,x
    sta PLEX_YPOS,y
  //SEG37 [18] (byte) loop::y_idx#1 ← (byte) loop::y_idx#2 + (byte/signed byte/word/signed word/dword/signed dword) 10 [ loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::sy#2 loop::y_idx#1 ] ) -- vbuxx=vbuxx_plus_vbuc1 
    txa
    clc
    adc #$a
    tax
  //SEG38 [19] (byte) loop::sy#1 ← ++ (byte) loop::sy#2 [ loop::sin_idx#6 loop::y_idx#1 loop::sy#1 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::y_idx#1 loop::sy#1 ] ) -- vbuyy=_inc_vbuyy 
    iny
  //SEG39 [20] if((byte) loop::sy#1!=(const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto loop::@7 [ loop::sin_idx#6 loop::y_idx#1 loop::sy#1 ] ( main:4::loop:9 [ loop::sin_idx#6 loop::y_idx#1 loop::sy#1 ] ) -- vbuyy_neq_vbuc1_then_la1 
    cpy #PLEX_COUNT-1+1
    bne b7
  //SEG40 loop::@18
  //SEG41 [21] (byte) loop::sin_idx#1 ← (byte) loop::sin_idx#6 + (byte/signed byte/word/signed word/dword/signed dword) 1 [ loop::sin_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#1 ] ) -- vbuz1=vbuz1_plus_1 
    inc sin_idx
  //SEG42 [22] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ loop::sin_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#1 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG43 [23] call plexSort  [ loop::sin_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#1 ] )
  //SEG44 [59] phi from loop::@18 to plexSort [phi:loop::@18->plexSort]
    jsr plexSort
  //SEG45 loop::@26
  //SEG46 [24] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ loop::sin_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#1 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG47 [25] phi from loop::@26 to loop::@8 [phi:loop::@26->loop::@8]
  //SEG48 [25] phi (byte) loop::ss#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:loop::@26->loop::@8#0] -- vbuz1=vbuc1 
    lda #0
    sta ss
  //SEG49 [25] phi (byte) plex_sprite_msb#29 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:loop::@26->loop::@8#1] -- vbuz1=vbuc1 
    lda #1
    sta plex_sprite_msb
  //SEG50 [25] phi (byte) plex_show_idx#25 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:loop::@26->loop::@8#2] -- vbuz1=vbuc1 
    lda #0
    sta plex_show_idx
  //SEG51 [25] phi (byte) plex_sprite_idx#24 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:loop::@26->loop::@8#3] -- vbuz1=vbuc1 
    sta plex_sprite_idx
  //SEG52 [25] phi from loop::@27 to loop::@8 [phi:loop::@27->loop::@8]
  //SEG53 [25] phi (byte) loop::ss#4 = (byte) loop::ss#1 [phi:loop::@27->loop::@8#0] -- register_copy 
  //SEG54 [25] phi (byte) plex_sprite_msb#29 = (byte) plex_sprite_msb#17 [phi:loop::@27->loop::@8#1] -- register_copy 
  //SEG55 [25] phi (byte) plex_show_idx#25 = (byte) plex_show_idx#15 [phi:loop::@27->loop::@8#2] -- register_copy 
  //SEG56 [25] phi (byte) plex_sprite_idx#24 = (byte) plex_sprite_idx#15 [phi:loop::@27->loop::@8#3] -- register_copy 
  //SEG57 loop::@8
  b8:
  //SEG58 [26] call plexShowSprite  [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] ( main:4::loop:9 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] )
  //SEG59 [39] phi from loop::@8 to plexShowSprite [phi:loop::@8->plexShowSprite]
  //SEG60 [39] phi (byte) plex_sprite_msb#14 = (byte) plex_sprite_msb#29 [phi:loop::@8->plexShowSprite#0] -- register_copy 
  //SEG61 [39] phi (byte) plex_show_idx#13 = (byte) plex_show_idx#25 [phi:loop::@8->plexShowSprite#1] -- register_copy 
  //SEG62 [39] phi (byte) plex_sprite_idx#13 = (byte) plex_sprite_idx#24 [phi:loop::@8->plexShowSprite#2] -- register_copy 
    jsr plexShowSprite
  //SEG63 loop::@27
  //SEG64 [27] (byte) loop::ss#1 ← ++ (byte) loop::ss#4 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#1 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#1 ] ) -- vbuz1=_inc_vbuz1 
    inc ss
  //SEG65 [28] if((byte) loop::ss#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto loop::@8 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#1 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda ss
    cmp #8
    bne b8
  //SEG66 [29] phi from loop::@27 to loop::@9 [phi:loop::@27->loop::@9]
  //SEG67 [29] phi (byte) loop::ss#10 = (byte/signed byte/word/signed word/dword/signed dword) 8 [phi:loop::@27->loop::@9#0] -- vbuz1=vbuc1 
    lda #8
    sta ss
  //SEG68 [29] phi from loop::@28 to loop::@9 [phi:loop::@28->loop::@9]
  //SEG69 [29] phi (byte) loop::ss#10 = (byte) loop::ss#3 [phi:loop::@28->loop::@9#0] -- register_copy 
  //SEG70 loop::@9
  b9:
  //SEG71 [30] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ) -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
  //SEG72 loop::plexShowNextYpos1
  //SEG73 [31] (byte) loop::plexShowNextYpos1_return#0 ← *((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#15)) [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::plexShowNextYpos1_return#0 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::plexShowNextYpos1_return#0 ] ) -- vbuaa=pbuc1_derefidx_pbuc2_derefidx_vbuz1 
    ldy plex_show_idx
    lda PLEX_SORTED_IDX,y
    tay
    lda PLEX_YPOS,y
  //SEG74 loop::@25
  //SEG75 [32] (byte) loop::rasterY#0 ← (byte) loop::plexShowNextYpos1_return#0 - (byte/signed byte/word/signed word/dword/signed dword) 8 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::rasterY#0 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::rasterY#0 ] ) -- vbuz1=vbuaa_minus_vbuc1 
    sec
    sbc #8
    sta rasterY
  //SEG76 loop::@10
  b10:
  //SEG77 [33] if(*((const byte*) RASTER#0)<(byte) loop::rasterY#0) goto loop::@10 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::rasterY#0 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 loop::rasterY#0 ] ) -- _deref_pbuc1_lt_vbuz1_then_la1 
    lda RASTER
    cmp rasterY
    bcc b10
  //SEG78 loop::@12
  //SEG79 [34] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0) [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG80 [35] call plexShowSprite  [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#10 ] )
  //SEG81 [39] phi from loop::@12 to plexShowSprite [phi:loop::@12->plexShowSprite]
  //SEG82 [39] phi (byte) plex_sprite_msb#14 = (byte) plex_sprite_msb#17 [phi:loop::@12->plexShowSprite#0] -- register_copy 
  //SEG83 [39] phi (byte) plex_show_idx#13 = (byte) plex_show_idx#15 [phi:loop::@12->plexShowSprite#1] -- register_copy 
  //SEG84 [39] phi (byte) plex_sprite_idx#13 = (byte) plex_sprite_idx#15 [phi:loop::@12->plexShowSprite#2] -- register_copy 
    jsr plexShowSprite
  //SEG85 loop::@28
  //SEG86 [36] (byte) loop::ss#3 ← ++ (byte) loop::ss#10 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#3 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#3 ] ) -- vbuz1=_inc_vbuz1 
    inc ss
  //SEG87 [37] if((byte) loop::ss#3!=(const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto loop::@9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#3 ] ( main:4::loop:9 [ loop::sin_idx#1 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 loop::ss#3 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda ss
    cmp #PLEX_COUNT-1+1
    bne b9
  //SEG88 loop::@23
  //SEG89 [38] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0 [ loop::sin_idx#1 ] ( main:4::loop:9 [ loop::sin_idx#1 ] ) -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta BORDERCOL
  //SEG90 [12] phi from loop::@23 to loop::@1 [phi:loop::@23->loop::@1]
  //SEG91 [12] phi (byte) loop::sin_idx#6 = (byte) loop::sin_idx#1 [phi:loop::@23->loop::@1#0] -- register_copy 
    jmp b4
}
//SEG92 plexShowSprite
plexShowSprite: {
  //SEG93 [40] (byte) plexShowSprite::plex_sprite_idx2#0 ← (byte) plex_sprite_idx#13 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ) -- vbuyy=vbuz1_rol_1 
    lda plex_sprite_idx
    asl
    tay
  //SEG94 [41] *((const byte*) SPRITES_YPOS#0 + (byte) plexShowSprite::plex_sprite_idx2#0) ← *((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#13)) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ) -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_pbuc3_derefidx_vbuz1 
    ldx plex_show_idx
    lda PLEX_SORTED_IDX,x
    tax
    lda PLEX_YPOS,x
    sta SPRITES_YPOS,y
  //SEG95 [42] *((const byte*) PLEX_SCREEN_PTR#1 + (byte) plex_sprite_idx#13) ← *((const byte[PLEX_COUNT#0]) PLEX_PTR#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#13)) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 ] ) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_pbuc3_derefidx_vbuz2 
    ldx plex_show_idx
    lda PLEX_SORTED_IDX,x
    tax
    lda PLEX_PTR,x
    ldx plex_sprite_idx
    sta PLEX_SCREEN_PTR,x
  //SEG96 [43] (byte) plexShowSprite::xpos_idx#0 ← *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plex_show_idx#13) << (byte/signed byte/word/signed word/dword/signed dword) 1 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 ] ) -- vbuxx=pbuc1_derefidx_vbuz1_rol_1 
    ldx plex_show_idx
    lda PLEX_SORTED_IDX,x
    asl
    tax
  //SEG97 [44] (byte~) plexShowSprite::$2 ← < *((const word[PLEX_COUNT#0]) PLEX_XPOS#0 + (byte) plexShowSprite::xpos_idx#0) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 plexShowSprite::$2 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 plexShowSprite::$2 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::plex_sprite_idx2#0 plexShowSprite::xpos_idx#0 plexShowSprite::$2 ] ) -- vbuaa=_lo_pwuc1_derefidx_vbuxx 
    lda PLEX_XPOS,x
  //SEG98 [45] *((const byte*) SPRITES_XPOS#0 + (byte) plexShowSprite::plex_sprite_idx2#0) ← (byte~) plexShowSprite::$2 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::xpos_idx#0 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::xpos_idx#0 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::xpos_idx#0 ] ) -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SPRITES_XPOS,y
  //SEG99 [46] (byte~) plexShowSprite::$3 ← > *((const word[PLEX_COUNT#0]) PLEX_XPOS#0 + (byte) plexShowSprite::xpos_idx#0) [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$3 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$3 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$3 ] ) -- vbuaa=_hi_pwuc1_derefidx_vbuxx 
    lda PLEX_XPOS+1,x
  //SEG100 [47] if((byte~) plexShowSprite::$3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto plexShowSprite::@1 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ) -- vbuaa_neq_0_then_la1 
    cmp #0
    bne b1
  //SEG101 plexShowSprite::@4
  //SEG102 [48] (byte/word/dword~) plexShowSprite::$5 ← (byte/word/signed word/dword/signed dword) 255 ^ (byte) plex_sprite_msb#14 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$5 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$5 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$5 ] ) -- vbuaa=vbuc1_bxor_vbuz1 
    lda plex_sprite_msb
    eor #$ff
  //SEG103 [49] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) & (byte/word/dword~) plexShowSprite::$5 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ) -- _deref_pbuc1=_deref_pbuc1_band_vbuaa 
    and SPRITES_XMSB
    sta SPRITES_XMSB
  //SEG104 plexShowSprite::@2
  b2:
  //SEG105 [50] (byte/signed word/word/dword/signed dword~) plexShowSprite::$6 ← (byte) plex_sprite_idx#13 + (byte/signed byte/word/signed word/dword/signed dword) 1 [ plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$6 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$6 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_show_idx#13 plex_sprite_msb#14 plexShowSprite::$6 ] ) -- vbuaa=vbuz1_plus_1 
    lda plex_sprite_idx
    clc
    adc #1
  //SEG106 [51] (byte) plex_sprite_idx#15 ← (byte/signed word/word/dword/signed dword~) plexShowSprite::$6 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ plex_sprite_idx#15 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#13 plex_sprite_msb#14 ] ) -- vbuz1=vbuaa_band_vbuc1 
    and #7
    sta plex_sprite_idx
  //SEG107 [52] (byte) plex_show_idx#15 ← ++ (byte) plex_show_idx#13 [ plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#14 ] ) -- vbuz1=_inc_vbuz1 
    inc plex_show_idx
  //SEG108 [53] (byte) plex_sprite_msb#26 ← (byte) plex_sprite_msb#14 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] ) -- vbuz1=vbuz1_rol_1 
    asl plex_sprite_msb
  //SEG109 [54] if((byte) plex_sprite_msb#26!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto plexShowSprite::@7 [ plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#26 ] ) -- vbuz1_neq_0_then_la1 
    lda plex_sprite_msb
    bne breturn
  //SEG110 [55] phi from plexShowSprite::@2 to plexShowSprite::@return [phi:plexShowSprite::@2->plexShowSprite::@return]
  //SEG111 [55] phi (byte) plex_sprite_msb#17 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:plexShowSprite::@2->plexShowSprite::@return#0] -- vbuz1=vbuc1 
    lda #1
    sta plex_sprite_msb
  //SEG112 plexShowSprite::@return
  breturn:
  //SEG113 [56] return  [ plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#15 plex_show_idx#15 plex_sprite_msb#17 ] )
    rts
  //SEG114 [57] phi from plexShowSprite::@2 to plexShowSprite::@7 [phi:plexShowSprite::@2->plexShowSprite::@7]
  //SEG115 plexShowSprite::@7
  //SEG116 [55] phi from plexShowSprite::@7 to plexShowSprite::@return [phi:plexShowSprite::@7->plexShowSprite::@return]
  //SEG117 [55] phi (byte) plex_sprite_msb#17 = (byte) plex_sprite_msb#26 [phi:plexShowSprite::@7->plexShowSprite::@return#0] -- register_copy 
  //SEG118 plexShowSprite::@1
  b1:
  //SEG119 [58] *((const byte*) SPRITES_XMSB#0) ← *((const byte*) SPRITES_XMSB#0) | (byte) plex_sprite_msb#14 [ plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ( main:4::loop:9::plexShowSprite:26 [ loop::sin_idx#1 loop::ss#4 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] main:4::loop:9::plexShowSprite:35 [ loop::sin_idx#1 loop::ss#10 plex_sprite_idx#13 plex_show_idx#13 plex_sprite_msb#14 ] ) -- _deref_pbuc1=_deref_pbuc1_bor_vbuz1 
    lda SPRITES_XMSB
    ora plex_sprite_msb
    sta SPRITES_XMSB
    jmp b2
}
//SEG120 plexSort
plexSort: {
    .label nxt_idx = 4
    .label nxt_y = 5
    .label m = 3
  //SEG121 [60] phi from plexSort to plexSort::@1 [phi:plexSort->plexSort::@1]
  //SEG122 [60] phi (byte) plexSort::m#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:plexSort->plexSort::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta m
  //SEG123 [60] phi from plexSort::@2 to plexSort::@1 [phi:plexSort::@2->plexSort::@1]
  //SEG124 [60] phi (byte) plexSort::m#2 = (byte) plexSort::m#1 [phi:plexSort::@2->plexSort::@1#0] -- register_copy 
  //SEG125 plexSort::@1
  b1:
  //SEG126 [61] (byte) plexSort::nxt_idx#0 ← *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) plexSort::m#2) [ plexSort::m#2 plexSort::nxt_idx#0 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy m
    lda PLEX_SORTED_IDX+1,y
    sta nxt_idx
  //SEG127 [62] (byte) plexSort::nxt_y#0 ← *((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + (byte) plexSort::nxt_idx#0) [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    tay
    lda PLEX_YPOS,y
    sta nxt_y
  //SEG128 [63] if((byte) plexSort::nxt_y#0>=*((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::m#2))) goto plexSort::@2 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 ] ) -- vbuz1_ge_pbuc1_derefidx_pbuc2_derefidx_vbuz2_then_la1 
    ldx m
    ldy PLEX_SORTED_IDX,x
    cmp PLEX_YPOS,y
    bcs b2
  //SEG129 plexSort::@10
  //SEG130 [64] (byte~) plexSort::s#6 ← (byte) plexSort::m#2 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#6 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#6 ] ) -- vbuxx=vbuz1 
  //SEG131 [65] phi from plexSort::@10 plexSort::@7 to plexSort::@3 [phi:plexSort::@10/plexSort::@7->plexSort::@3]
  //SEG132 [65] phi (byte) plexSort::s#3 = (byte~) plexSort::s#6 [phi:plexSort::@10/plexSort::@7->plexSort::@3#0] -- register_copy 
  //SEG133 plexSort::@3
  b3:
  //SEG134 [66] *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0+(byte/signed byte/word/signed word/dword/signed dword) 1 + (byte) plexSort::s#3) ← *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::s#3) [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#3 ] ) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda PLEX_SORTED_IDX,x
    sta PLEX_SORTED_IDX+1,x
  //SEG135 [67] (byte) plexSort::s#1 ← -- (byte) plexSort::s#3 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ) -- vbuxx=_dec_vbuxx 
    dex
  //SEG136 [68] if((byte) plexSort::s#1!=(byte/word/signed word/dword/signed dword) 255) goto plexSort::@7 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$ff
    bne b7
  //SEG137 plexSort::@5
  b5:
  //SEG138 [69] (byte) plexSort::s#2 ← ++ (byte) plexSort::s#1 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::s#2 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::s#2 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG139 [70] *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::s#2) ← (byte) plexSort::nxt_idx#0 [ plexSort::m#2 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 ] ) -- pbuc1_derefidx_vbuxx=vbuz1 
    lda nxt_idx
    sta PLEX_SORTED_IDX,x
  //SEG140 plexSort::@2
  b2:
  //SEG141 [71] (byte) plexSort::m#1 ← ++ (byte) plexSort::m#2 [ plexSort::m#1 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#1 ] ) -- vbuz1=_inc_vbuz1 
    inc m
  //SEG142 [72] if((byte) plexSort::m#1!=(const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 2+(byte/signed byte/word/signed word/dword/signed dword) 1) goto plexSort::@1 [ plexSort::m#1 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda m
    cmp #PLEX_COUNT-2+1
    bne b1
  //SEG143 plexSort::@return
  //SEG144 [73] return  [ ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 ] )
    rts
  //SEG145 plexSort::@7
  b7:
  //SEG146 [74] if((byte) plexSort::nxt_y#0<*((const byte[PLEX_COUNT#0]) PLEX_YPOS#0 + *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexSort::s#1))) goto plexSort::@3 [ plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ( main:4::loop:9::plexSort:23 [ loop::sin_idx#1 plexSort::m#2 plexSort::nxt_idx#0 plexSort::nxt_y#0 plexSort::s#1 ] ) -- vbuz1_lt_pbuc1_derefidx_pbuc2_derefidx_vbuxx_then_la1 
    lda nxt_y
    ldy PLEX_SORTED_IDX,x
    cmp PLEX_YPOS,y
    bcc b3
    jmp b5
}
//SEG147 init
init: {
    .label xp = 7
  //SEG148 [75] *((const byte*) D011#0) ← (const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:4::init:7 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #VIC_DEN|VIC_RSEL|3
    sta D011
  //SEG149 [76] call plexInit  [ ] ( main:4::init:7 [ ] )
  //SEG150 [90] phi from init to plexInit [phi:init->plexInit]
    jsr plexInit
  //SEG151 [77] phi from init to init::@1 [phi:init->init::@1]
  //SEG152 [77] phi (word) init::xp#2 = (byte/signed byte/word/signed word/dword/signed dword) 32 [phi:init->init::@1#0] -- vwuz1=vbuc1 
    lda #<$20
    sta xp
    lda #>$20
    sta xp+1
  //SEG153 [77] phi (byte) init::sx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init->init::@1#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG154 [77] phi from init::@1 to init::@1 [phi:init::@1->init::@1]
  //SEG155 [77] phi (word) init::xp#2 = (word) init::xp#1 [phi:init::@1->init::@1#0] -- register_copy 
  //SEG156 [77] phi (byte) init::sx#2 = (byte) init::sx#1 [phi:init::@1->init::@1#1] -- register_copy 
  //SEG157 init::@1
  b1:
  //SEG158 [78] *((const byte[PLEX_COUNT#0]) PLEX_PTR#0 + (byte) init::sx#2) ← ((byte))(const byte*) SPRITE#0/(byte/signed byte/word/signed word/dword/signed dword) 64 [ init::sx#2 init::xp#2 ] ( main:4::init:7 [ init::sx#2 init::xp#2 ] ) -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #$ff&SPRITE/$40
    sta PLEX_PTR,x
  //SEG159 [79] (byte~) init::$6 ← (byte) init::sx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ init::sx#2 init::xp#2 init::$6 ] ( main:4::init:7 [ init::sx#2 init::xp#2 init::$6 ] ) -- vbuaa=vbuxx_rol_1 
    txa
    asl
  //SEG160 [80] *((const word[PLEX_COUNT#0]) PLEX_XPOS#0 + (byte~) init::$6) ← (word) init::xp#2 [ init::sx#2 init::xp#2 ] ( main:4::init:7 [ init::sx#2 init::xp#2 ] ) -- pwuc1_derefidx_vbuaa=vwuz1 
    tay
    lda xp
    sta PLEX_XPOS,y
    lda xp+1
    sta PLEX_XPOS+1,y
  //SEG161 [81] (word) init::xp#1 ← (word) init::xp#2 + (byte/signed byte/word/signed word/dword/signed dword) 12 [ init::sx#2 init::xp#1 ] ( main:4::init:7 [ init::sx#2 init::xp#1 ] ) -- vwuz1=vwuz1_plus_vbuc1 
    clc
    lda xp
    adc #<$c
    sta xp
    lda xp+1
    adc #>$c
    sta xp+1
  //SEG162 [82] (byte) init::sx#1 ← ++ (byte) init::sx#2 [ init::sx#1 init::xp#1 ] ( main:4::init:7 [ init::sx#1 init::xp#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG163 [83] if((byte) init::sx#1!=(const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto init::@1 [ init::sx#1 init::xp#1 ] ( main:4::init:7 [ init::sx#1 init::xp#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLEX_COUNT-1+1
    bne b1
  //SEG164 init::@3
  //SEG165 [84] *((const byte*) SPRITES_ENABLE#0) ← (byte/word/signed word/dword/signed dword) 255 [ ] ( main:4::init:7 [ ] ) -- _deref_pbuc1=vbuc2 
    lda #$ff
    sta SPRITES_ENABLE
  //SEG166 [85] phi from init::@3 to init::@2 [phi:init::@3->init::@2]
  //SEG167 [85] phi (byte) init::ss#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:init::@3->init::@2#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG168 [85] phi from init::@2 to init::@2 [phi:init::@2->init::@2]
  //SEG169 [85] phi (byte) init::ss#2 = (byte) init::ss#1 [phi:init::@2->init::@2#0] -- register_copy 
  //SEG170 init::@2
  b2:
  //SEG171 [86] *((const byte*) SPRITES_COLS#0 + (byte) init::ss#2) ← (const byte) GREEN#0 [ init::ss#2 ] ( main:4::init:7 [ init::ss#2 ] ) -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #GREEN
    sta SPRITES_COLS,x
  //SEG172 [87] (byte) init::ss#1 ← ++ (byte) init::ss#2 [ init::ss#1 ] ( main:4::init:7 [ init::ss#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG173 [88] if((byte) init::ss#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto init::@2 [ init::ss#1 ] ( main:4::init:7 [ init::ss#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b2
  //SEG174 init::@return
  //SEG175 [89] return  [ ] ( main:4::init:7 [ ] )
    rts
}
//SEG176 plexInit
plexInit: {
  //SEG177 [91] phi from plexInit to plexInit::plexSetScreen1 [phi:plexInit->plexInit::plexSetScreen1]
  //SEG178 plexInit::plexSetScreen1
  //SEG179 [92] phi from plexInit::plexSetScreen1 to plexInit::@1 [phi:plexInit::plexSetScreen1->plexInit::@1]
  //SEG180 [92] phi (byte) plexInit::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:plexInit::plexSetScreen1->plexInit::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG181 [92] phi from plexInit::@1 to plexInit::@1 [phi:plexInit::@1->plexInit::@1]
  //SEG182 [92] phi (byte) plexInit::i#2 = (byte) plexInit::i#1 [phi:plexInit::@1->plexInit::@1#0] -- register_copy 
  //SEG183 plexInit::@1
  b1:
  //SEG184 [93] *((const byte[PLEX_COUNT#0]) PLEX_SORTED_IDX#0 + (byte) plexInit::i#2) ← (byte) plexInit::i#2 [ plexInit::i#2 ] ( main:4::init:7::plexInit:76 [ plexInit::i#2 ] ) -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta PLEX_SORTED_IDX,x
  //SEG185 [94] (byte) plexInit::i#1 ← ++ (byte) plexInit::i#2 [ plexInit::i#1 ] ( main:4::init:7::plexInit:76 [ plexInit::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG186 [95] if((byte) plexInit::i#1!=(const byte) PLEX_COUNT#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto plexInit::@1 [ plexInit::i#1 ] ( main:4::init:7::plexInit:76 [ plexInit::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #PLEX_COUNT-1+1
    bne b1
  //SEG187 plexInit::@return
  //SEG188 [96] return  [ ] ( main:4::init:7::plexInit:76 [ ] )
    rts
}
  PLEX_XPOS: .fill 2*PLEX_COUNT, 0
  PLEX_YPOS: .fill PLEX_COUNT, 0
  PLEX_PTR: .fill PLEX_COUNT, 0
  PLEX_SORTED_IDX: .fill PLEX_COUNT, 0
.pc = YSIN "Inline"
  .var min = 51
    .var max = 250-21
    .var ampl = max-min;
    .for(var i=0;i<256;i++)
        .byte round(min+(ampl/2)+(ampl/2)*sin(toRadians(360*i/256)))

.pc = SPRITE "Inline"
  .var pic = LoadPicture("balloon.png", List().add($000000, $ffffff))
.for (var y=0; y<21; y++)
    .for (var x=0;x<3; x++)
        .byte pic.getSinglecolorByte(x,y)


