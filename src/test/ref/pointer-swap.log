Inlined call call __init

CONTROL FLOW GRAPH SSA

void print()
print: scope:[print]  from main swap
  oldbuffer#9 = phi( main/oldbuffer#18, swap/oldbuffer#0 )
  newbuffer#9 = phi( main/newbuffer#18, swap/newbuffer#0 )
  screen#12 = phi( main/screen#23, swap/screen#24 )
  tempbuffer#9 = phi( main/tempbuffer#17, swap/tempbuffer#0 )
  print::$3 = (char)tempbuffer#9
  print::$0 = print::$3 & $f
  screen#12[0] = hextab[print::$0]
  print::$4 = (char)newbuffer#9
  print::$1 = print::$4 & $f
  screen#12[2] = hextab[print::$1]
  print::$5 = (char)oldbuffer#9
  print::$2 = print::$5 & $f
  screen#12[4] = hextab[print::$2]
  screen#0 = screen#12 + $28
  to:print::@return
print::@return: scope:[print]  from print
  screen#13 = phi( print/screen#0 )
  screen#1 = screen#13
  return 
  to:@return

void swap()
swap: scope:[swap]  from main::@1 main::@2 main::@3
  screen#24 = phi( main::@1/screen#4, main::@2/screen#5, main::@3/screen#6 )
  oldbuffer#10 = phi( main::@1/oldbuffer#19, main::@2/oldbuffer#2, main::@3/oldbuffer#3 )
  newbuffer#10 = phi( main::@1/newbuffer#19, main::@2/newbuffer#2, main::@3/newbuffer#3 )
  tempbuffer#0 = newbuffer#10
  newbuffer#0 = oldbuffer#10
  oldbuffer#0 = tempbuffer#0
  call print
  to:swap::@1
swap::@1: scope:[swap]  from swap
  oldbuffer#20 = phi( swap/oldbuffer#0 )
  newbuffer#20 = phi( swap/newbuffer#0 )
  tempbuffer#18 = phi( swap/tempbuffer#0 )
  screen#14 = phi( swap/screen#1 )
  screen#2 = screen#14
  to:swap::@return
swap::@return: scope:[swap]  from swap::@1
  screen#15 = phi( swap::@1/screen#2 )
  oldbuffer#11 = phi( swap::@1/oldbuffer#20 )
  newbuffer#11 = phi( swap::@1/newbuffer#20 )
  tempbuffer#10 = phi( swap::@1/tempbuffer#18 )
  tempbuffer#1 = tempbuffer#10
  newbuffer#1 = newbuffer#11
  oldbuffer#1 = oldbuffer#11
  screen#3 = screen#15
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  oldbuffer#18 = phi( __start::@1/oldbuffer#21 )
  newbuffer#18 = phi( __start::@1/newbuffer#21 )
  screen#23 = phi( __start::@1/screen#25 )
  tempbuffer#17 = phi( __start::@1/tempbuffer#20 )
  call print
  to:main::@1
main::@1: scope:[main]  from main
  tempbuffer#19 = phi( main/tempbuffer#17 )
  oldbuffer#19 = phi( main/oldbuffer#18 )
  newbuffer#19 = phi( main/newbuffer#18 )
  screen#16 = phi( main/screen#1 )
  screen#4 = screen#16
  call swap
  to:main::@2
main::@2: scope:[main]  from main::@1
  screen#17 = phi( main::@1/screen#3 )
  oldbuffer#12 = phi( main::@1/oldbuffer#1 )
  newbuffer#12 = phi( main::@1/newbuffer#1 )
  tempbuffer#11 = phi( main::@1/tempbuffer#1 )
  tempbuffer#2 = tempbuffer#11
  newbuffer#2 = newbuffer#12
  oldbuffer#2 = oldbuffer#12
  screen#5 = screen#17
  call swap
  to:main::@3
main::@3: scope:[main]  from main::@2
  screen#18 = phi( main::@2/screen#3 )
  oldbuffer#13 = phi( main::@2/oldbuffer#1 )
  newbuffer#13 = phi( main::@2/newbuffer#1 )
  tempbuffer#12 = phi( main::@2/tempbuffer#1 )
  tempbuffer#3 = tempbuffer#12
  newbuffer#3 = newbuffer#13
  oldbuffer#3 = oldbuffer#13
  screen#6 = screen#18
  call swap
  to:main::@4
main::@4: scope:[main]  from main::@3
  screen#19 = phi( main::@3/screen#3 )
  oldbuffer#14 = phi( main::@3/oldbuffer#1 )
  newbuffer#14 = phi( main::@3/newbuffer#1 )
  tempbuffer#13 = phi( main::@3/tempbuffer#1 )
  tempbuffer#4 = tempbuffer#13
  newbuffer#4 = newbuffer#14
  oldbuffer#4 = oldbuffer#14
  screen#7 = screen#19
  to:main::@return
main::@return: scope:[main]  from main::@4
  oldbuffer#15 = phi( main::@4/oldbuffer#4 )
  newbuffer#15 = phi( main::@4/newbuffer#4 )
  tempbuffer#14 = phi( main::@4/tempbuffer#4 )
  screen#20 = phi( main::@4/screen#7 )
  screen#8 = screen#20
  tempbuffer#5 = tempbuffer#14
  newbuffer#5 = newbuffer#15
  oldbuffer#5 = oldbuffer#15
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  newbuffer#6 = buffer1
  oldbuffer#6 = buffer2
  tempbuffer#6 = (char *) 0
  screen#9 = (char *)$400
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  oldbuffer#21 = phi( __start::__init1/oldbuffer#6 )
  newbuffer#21 = phi( __start::__init1/newbuffer#6 )
  tempbuffer#20 = phi( __start::__init1/tempbuffer#6 )
  screen#25 = phi( __start::__init1/screen#9 )
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  oldbuffer#16 = phi( __start::@1/oldbuffer#5 )
  newbuffer#16 = phi( __start::@1/newbuffer#5 )
  tempbuffer#15 = phi( __start::@1/tempbuffer#5 )
  screen#21 = phi( __start::@1/screen#8 )
  screen#10 = screen#21
  tempbuffer#7 = tempbuffer#15
  newbuffer#7 = newbuffer#16
  oldbuffer#7 = oldbuffer#16
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  screen#22 = phi( __start::@2/screen#10 )
  tempbuffer#16 = phi( __start::@2/tempbuffer#7 )
  oldbuffer#17 = phi( __start::@2/oldbuffer#7 )
  newbuffer#17 = phi( __start::@2/newbuffer#7 )
  newbuffer#8 = newbuffer#17
  oldbuffer#8 = oldbuffer#17
  tempbuffer#8 = tempbuffer#16
  screen#11 = screen#22
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
__constant char buffer1[$a] = { fill( $a, 0) }
__constant char buffer2[$a] = { fill( $a, 0) }
__constant char hextab[] = "0123456789abcdef"z
void main()
char *newbuffer
char *newbuffer#0
char *newbuffer#1
char *newbuffer#10
char *newbuffer#11
char *newbuffer#12
char *newbuffer#13
char *newbuffer#14
char *newbuffer#15
char *newbuffer#16
char *newbuffer#17
char *newbuffer#18
char *newbuffer#19
char *newbuffer#2
char *newbuffer#20
char *newbuffer#21
char *newbuffer#3
char *newbuffer#4
char *newbuffer#5
char *newbuffer#6
char *newbuffer#7
char *newbuffer#8
char *newbuffer#9
char *oldbuffer
char *oldbuffer#0
char *oldbuffer#1
char *oldbuffer#10
char *oldbuffer#11
char *oldbuffer#12
char *oldbuffer#13
char *oldbuffer#14
char *oldbuffer#15
char *oldbuffer#16
char *oldbuffer#17
char *oldbuffer#18
char *oldbuffer#19
char *oldbuffer#2
char *oldbuffer#20
char *oldbuffer#21
char *oldbuffer#3
char *oldbuffer#4
char *oldbuffer#5
char *oldbuffer#6
char *oldbuffer#7
char *oldbuffer#8
char *oldbuffer#9
void print()
number print::$0
number print::$1
number print::$2
char print::$3
char print::$4
char print::$5
char *screen
char *screen#0
char *screen#1
char *screen#10
char *screen#11
char *screen#12
char *screen#13
char *screen#14
char *screen#15
char *screen#16
char *screen#17
char *screen#18
char *screen#19
char *screen#2
char *screen#20
char *screen#21
char *screen#22
char *screen#23
char *screen#24
char *screen#25
char *screen#3
char *screen#4
char *screen#5
char *screen#6
char *screen#7
char *screen#8
char *screen#9
void swap()
char *tempbuffer
char *tempbuffer#0
char *tempbuffer#1
char *tempbuffer#10
char *tempbuffer#11
char *tempbuffer#12
char *tempbuffer#13
char *tempbuffer#14
char *tempbuffer#15
char *tempbuffer#16
char *tempbuffer#17
char *tempbuffer#18
char *tempbuffer#19
char *tempbuffer#2
char *tempbuffer#20
char *tempbuffer#3
char *tempbuffer#4
char *tempbuffer#5
char *tempbuffer#6
char *tempbuffer#7
char *tempbuffer#8
char *tempbuffer#9

Adding number conversion cast (unumber) $f in print::$0 = print::$3 & $f
Adding number conversion cast (unumber) print::$0 in print::$0 = print::$3 & (unumber)$f
Adding number conversion cast (unumber) 0 in screen#12[0] = hextab[print::$0]
Adding number conversion cast (unumber) $f in print::$1 = print::$4 & $f
Adding number conversion cast (unumber) print::$1 in print::$1 = print::$4 & (unumber)$f
Adding number conversion cast (unumber) 2 in screen#12[2] = hextab[print::$1]
Adding number conversion cast (unumber) $f in print::$2 = print::$5 & $f
Adding number conversion cast (unumber) print::$2 in print::$2 = print::$5 & (unumber)$f
Adding number conversion cast (unumber) 4 in screen#12[4] = hextab[print::$2]
Adding number conversion cast (unumber) $28 in screen#0 = screen#12 + $28
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $f
Simplifying constant integer cast 0
Simplifying constant integer cast $f
Simplifying constant integer cast 2
Simplifying constant integer cast $f
Simplifying constant integer cast 4
Simplifying constant integer cast $28
Simplifying constant pointer cast (char *) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) $f
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) $f
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) $f
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to char in print::$0 = print::$3 & $f
Inferred type updated to char in print::$1 = print::$4 & $f
Inferred type updated to char in print::$2 = print::$5 & $f
Alias screen#0 = screen#13 screen#1 
Alias tempbuffer#0 = newbuffer#10 oldbuffer#0 tempbuffer#18 oldbuffer#20 tempbuffer#10 oldbuffer#11 tempbuffer#1 oldbuffer#1 
Alias newbuffer#0 = oldbuffer#10 newbuffer#20 newbuffer#11 newbuffer#1 
Alias screen#14 = screen#2 screen#15 screen#3 
Alias newbuffer#18 = newbuffer#19 
Alias oldbuffer#18 = oldbuffer#19 
Alias tempbuffer#17 = tempbuffer#19 
Alias screen#16 = screen#4 
Alias tempbuffer#11 = tempbuffer#2 
Alias newbuffer#12 = newbuffer#2 
Alias oldbuffer#12 = oldbuffer#2 
Alias screen#17 = screen#5 
Alias tempbuffer#12 = tempbuffer#3 
Alias newbuffer#13 = newbuffer#3 
Alias oldbuffer#13 = oldbuffer#3 
Alias screen#18 = screen#6 
Alias tempbuffer#13 = tempbuffer#4 tempbuffer#14 tempbuffer#5 
Alias newbuffer#14 = newbuffer#4 newbuffer#15 newbuffer#5 
Alias oldbuffer#14 = oldbuffer#4 oldbuffer#15 oldbuffer#5 
Alias screen#19 = screen#7 screen#20 screen#8 
Alias screen#25 = screen#9 
Alias tempbuffer#20 = tempbuffer#6 
Alias newbuffer#21 = newbuffer#6 
Alias oldbuffer#21 = oldbuffer#6 
Alias screen#10 = screen#21 screen#22 screen#11 
Alias tempbuffer#15 = tempbuffer#7 tempbuffer#16 tempbuffer#8 
Alias newbuffer#16 = newbuffer#7 newbuffer#17 newbuffer#8 
Alias oldbuffer#16 = oldbuffer#7 oldbuffer#17 oldbuffer#8 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values screen#14 screen#0
Identical Phi Values tempbuffer#17 tempbuffer#20
Identical Phi Values screen#23 screen#25
Identical Phi Values newbuffer#18 newbuffer#21
Identical Phi Values oldbuffer#18 oldbuffer#21
Identical Phi Values screen#16 screen#0
Identical Phi Values tempbuffer#11 tempbuffer#0
Identical Phi Values newbuffer#12 newbuffer#0
Identical Phi Values oldbuffer#12 tempbuffer#0
Identical Phi Values screen#17 screen#14
Identical Phi Values tempbuffer#12 tempbuffer#0
Identical Phi Values newbuffer#13 newbuffer#0
Identical Phi Values oldbuffer#13 tempbuffer#0
Identical Phi Values screen#18 screen#14
Identical Phi Values tempbuffer#13 tempbuffer#0
Identical Phi Values newbuffer#14 newbuffer#0
Identical Phi Values oldbuffer#14 tempbuffer#0
Identical Phi Values screen#19 screen#14
Identical Phi Values screen#10 screen#19
Identical Phi Values tempbuffer#15 tempbuffer#13
Identical Phi Values newbuffer#16 newbuffer#14
Identical Phi Values oldbuffer#16 oldbuffer#14
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values screen#24 screen#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant newbuffer#21 = buffer1
Constant oldbuffer#21 = buffer2
Constant tempbuffer#20 = (char *) 0
Constant screen#25 = (char *) 1024
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero screen#12 in [3] screen#12[0] = hextab[print::$0]
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings newbuffer#21
Inlining constant with var siblings oldbuffer#21
Inlining constant with var siblings tempbuffer#20
Inlining constant with var siblings screen#25
Constant inlined oldbuffer#21 = buffer2
Constant inlined screen#25 = (char *) 1024
Constant inlined tempbuffer#20 = (char *) 0
Constant inlined newbuffer#21 = buffer1
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type (char) $a
Finalized unsigned number type (char) $a
Finalized unsigned number type (char) $a
Finalized unsigned number type (char) $a
Successful SSA optimization PassNFinalizeNumberTypeConversions
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of swap::@1
CALL GRAPH
Calls in [main] to print:1 swap:3 swap:6 swap:9 
Calls in [swap] to print:29 

Created 6 initial phi equivalence classes
Not coalescing [4] tempbuffer#22 = newbuffer#0
Not coalescing [5] newbuffer#23 = tempbuffer#0
Not coalescing [7] tempbuffer#23 = newbuffer#0
Not coalescing [8] newbuffer#24 = tempbuffer#0
Not coalescing [25] tempbuffer#21 = tempbuffer#0
Coalesced [26] screen#26 = screen#0
Not coalescing [27] newbuffer#22 = newbuffer#0
Not coalescing [28] oldbuffer#22 = tempbuffer#0
Coalesced down to 6 phi equivalence classes
Culled Empty Block label main::@4
Culled Empty Block label swap::@1
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call print
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call swap
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] tempbuffer#22 = newbuffer#0
  [5] newbuffer#23 = tempbuffer#0
  [6] call swap
  to:main::@3
main::@3: scope:[main]  from main::@2
  [7] tempbuffer#23 = newbuffer#0
  [8] newbuffer#24 = tempbuffer#0
  [9] call swap
  to:main::@return
main::@return: scope:[main]  from main::@3
  [10] return 
  to:@return

void print()
print: scope:[print]  from main swap
  [11] oldbuffer#9 = phi( main/buffer2, swap/oldbuffer#22 )
  [11] newbuffer#9 = phi( main/buffer1, swap/newbuffer#22 )
  [11] screen#12 = phi( main/(char *) 1024, swap/screen#0 )
  [11] tempbuffer#9 = phi( main/(char *) 0, swap/tempbuffer#21 )
  [12] print::$3 = (char)tempbuffer#9
  [13] print::$0 = print::$3 & $f
  [14] *screen#12 = hextab[print::$0]
  [15] print::$4 = (char)newbuffer#9
  [16] print::$1 = print::$4 & $f
  [17] screen#12[2] = hextab[print::$1]
  [18] print::$5 = (char)oldbuffer#9
  [19] print::$2 = print::$5 & $f
  [20] screen#12[4] = hextab[print::$2]
  [21] screen#0 = screen#12 + $28
  to:print::@return
print::@return: scope:[print]  from print
  [22] return 
  to:@return

void swap()
swap: scope:[swap]  from main::@1 main::@2 main::@3
  [23] newbuffer#0 = phi( main::@1/buffer2, main::@2/newbuffer#23, main::@3/newbuffer#24 )
  [23] tempbuffer#0 = phi( main::@1/buffer1, main::@2/tempbuffer#22, main::@3/tempbuffer#23 )
  [24] tempbuffer#21 = tempbuffer#0
  [25] newbuffer#22 = newbuffer#0
  [26] oldbuffer#22 = tempbuffer#0
  [27] call print
  to:swap::@return
swap::@return: scope:[swap]  from swap
  [28] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
char *newbuffer
char *newbuffer#0 // 2.375
char *newbuffer#22 // 11.0
char *newbuffer#23 // 4.0
char *newbuffer#24 // 4.0
char *newbuffer#9 // 2.75
char *oldbuffer
char *oldbuffer#22 // 22.0
char *oldbuffer#9 // 1.5714285714285714
void print()
char print::$0 // 202.0
char print::$1 // 202.0
char print::$2 // 202.0
char print::$3 // 202.0
char print::$4 // 202.0
char print::$5 // 202.0
char *screen
char *screen#0 // 7.0
char *screen#12 // 41.5
void swap()
char *tempbuffer
char *tempbuffer#0 // 3.0
char *tempbuffer#21 // 7.333333333333333
char *tempbuffer#22 // 2.0
char *tempbuffer#23 // 2.0
char *tempbuffer#9 // 11.0

Initial phi equivalence classes
[ tempbuffer#9 tempbuffer#21 ]
[ screen#12 screen#0 ]
[ newbuffer#9 newbuffer#22 ]
[ oldbuffer#9 oldbuffer#22 ]
[ tempbuffer#0 tempbuffer#22 tempbuffer#23 ]
[ newbuffer#0 newbuffer#23 newbuffer#24 ]
Added variable print::$3 to live range equivalence class [ print::$3 ]
Added variable print::$0 to live range equivalence class [ print::$0 ]
Added variable print::$4 to live range equivalence class [ print::$4 ]
Added variable print::$1 to live range equivalence class [ print::$1 ]
Added variable print::$5 to live range equivalence class [ print::$5 ]
Added variable print::$2 to live range equivalence class [ print::$2 ]
Complete equivalence classes
[ tempbuffer#9 tempbuffer#21 ]
[ screen#12 screen#0 ]
[ newbuffer#9 newbuffer#22 ]
[ oldbuffer#9 oldbuffer#22 ]
[ tempbuffer#0 tempbuffer#22 tempbuffer#23 ]
[ newbuffer#0 newbuffer#23 newbuffer#24 ]
[ print::$3 ]
[ print::$0 ]
[ print::$4 ]
[ print::$1 ]
[ print::$5 ]
[ print::$2 ]
Allocated zp[1]:2 [ print::$3 ]
Allocated zp[1]:3 [ print::$0 ]
Allocated zp[1]:4 [ print::$4 ]
Allocated zp[1]:5 [ print::$1 ]
Allocated zp[1]:6 [ print::$5 ]
Allocated zp[1]:7 [ print::$2 ]
Allocated zp[2]:8 [ screen#12 screen#0 ]
Allocated zp[2]:10 [ oldbuffer#9 oldbuffer#22 ]
Allocated zp[2]:12 [ tempbuffer#9 tempbuffer#21 ]
Allocated zp[2]:14 [ newbuffer#9 newbuffer#22 ]
Allocated zp[2]:16 [ newbuffer#0 newbuffer#23 newbuffer#24 ]
Allocated zp[2]:18 [ tempbuffer#0 tempbuffer#22 tempbuffer#23 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] tempbuffer#22 = newbuffer#0 [ tempbuffer#22 tempbuffer#0 screen#0 ] (  [ tempbuffer#22 tempbuffer#0 screen#0 ] { { tempbuffer#0 = tempbuffer#22 } { newbuffer#0 = newbuffer#23 } }  ) always clobbers reg byte a 
Statement [5] newbuffer#23 = tempbuffer#0 [ tempbuffer#22 newbuffer#23 screen#0 ] (  [ tempbuffer#22 newbuffer#23 screen#0 ] { { tempbuffer#0 = tempbuffer#22 } { newbuffer#0 = newbuffer#23 } }  ) always clobbers reg byte a 
Statement [7] tempbuffer#23 = newbuffer#0 [ tempbuffer#0 tempbuffer#23 screen#0 ] (  [ tempbuffer#0 tempbuffer#23 screen#0 ] { { tempbuffer#0 = tempbuffer#23 } { newbuffer#0 = newbuffer#24 } }  ) always clobbers reg byte a 
Statement [8] newbuffer#24 = tempbuffer#0 [ tempbuffer#23 newbuffer#24 screen#0 ] (  [ tempbuffer#23 newbuffer#24 screen#0 ] { { tempbuffer#0 = tempbuffer#23 } { newbuffer#0 = newbuffer#24 } }  ) always clobbers reg byte a 
Statement [14] *screen#12 = hextab[print::$0] [ screen#12 newbuffer#9 oldbuffer#9 ] ( print:1 [ screen#12 newbuffer#9 oldbuffer#9 ] { }  swap:3::print:27 [ newbuffer#0 tempbuffer#0 screen#12 newbuffer#9 oldbuffer#9 ] { { tempbuffer#21 = tempbuffer#9 } { screen#0 = screen#12 } { newbuffer#22 = newbuffer#9 } { oldbuffer#22 = oldbuffer#9 } }  swap:6::print:27 [ newbuffer#0 tempbuffer#0 screen#12 newbuffer#9 oldbuffer#9 ] { { tempbuffer#0 = tempbuffer#22 } { newbuffer#0 = newbuffer#23 } { tempbuffer#21 = tempbuffer#9 } { screen#0 = screen#12 } { newbuffer#22 = newbuffer#9 } { oldbuffer#22 = oldbuffer#9 } }  swap:9::print:27 [ newbuffer#0 tempbuffer#0 screen#12 newbuffer#9 oldbuffer#9 ] { { tempbuffer#0 = tempbuffer#23 } { newbuffer#0 = newbuffer#24 } { tempbuffer#21 = tempbuffer#9 } { screen#0 = screen#12 } { newbuffer#22 = newbuffer#9 } { oldbuffer#22 = oldbuffer#9 } }  ) always clobbers reg byte a reg byte y 
Statement [17] screen#12[2] = hextab[print::$1] [ screen#12 oldbuffer#9 ] ( print:1 [ screen#12 oldbuffer#9 ] { }  swap:3::print:27 [ newbuffer#0 tempbuffer#0 screen#12 oldbuffer#9 ] { { tempbuffer#21 = tempbuffer#9 } { screen#0 = screen#12 } { newbuffer#22 = newbuffer#9 } { oldbuffer#22 = oldbuffer#9 } }  swap:6::print:27 [ newbuffer#0 tempbuffer#0 screen#12 oldbuffer#9 ] { { tempbuffer#0 = tempbuffer#22 } { newbuffer#0 = newbuffer#23 } { tempbuffer#21 = tempbuffer#9 } { screen#0 = screen#12 } { newbuffer#22 = newbuffer#9 } { oldbuffer#22 = oldbuffer#9 } }  swap:9::print:27 [ newbuffer#0 tempbuffer#0 screen#12 oldbuffer#9 ] { { tempbuffer#0 = tempbuffer#23 } { newbuffer#0 = newbuffer#24 } { tempbuffer#21 = tempbuffer#9 } { screen#0 = screen#12 } { newbuffer#22 = newbuffer#9 } { oldbuffer#22 = oldbuffer#9 } }  ) always clobbers reg byte a reg byte y 
Statement [20] screen#12[4] = hextab[print::$2] [ screen#12 ] ( print:1 [ screen#12 ] { }  swap:3::print:27 [ newbuffer#0 tempbuffer#0 screen#12 ] { { tempbuffer#21 = tempbuffer#9 } { screen#0 = screen#12 } { newbuffer#22 = newbuffer#9 } { oldbuffer#22 = oldbuffer#9 } }  swap:6::print:27 [ newbuffer#0 tempbuffer#0 screen#12 ] { { tempbuffer#0 = tempbuffer#22 } { newbuffer#0 = newbuffer#23 } { tempbuffer#21 = tempbuffer#9 } { screen#0 = screen#12 } { newbuffer#22 = newbuffer#9 } { oldbuffer#22 = oldbuffer#9 } }  swap:9::print:27 [ newbuffer#0 tempbuffer#0 screen#12 ] { { tempbuffer#0 = tempbuffer#23 } { newbuffer#0 = newbuffer#24 } { tempbuffer#21 = tempbuffer#9 } { screen#0 = screen#12 } { newbuffer#22 = newbuffer#9 } { oldbuffer#22 = oldbuffer#9 } }  ) always clobbers reg byte a reg byte y 
Statement [21] screen#0 = screen#12 + $28 [ screen#0 ] ( print:1 [ screen#0 ] { }  swap:3::print:27 [ newbuffer#0 tempbuffer#0 screen#0 ] { { tempbuffer#21 = tempbuffer#9 } { screen#0 = screen#12 } { newbuffer#22 = newbuffer#9 } { oldbuffer#22 = oldbuffer#9 } }  swap:6::print:27 [ newbuffer#0 tempbuffer#0 screen#0 ] { { tempbuffer#0 = tempbuffer#22 } { newbuffer#0 = newbuffer#23 } { tempbuffer#21 = tempbuffer#9 } { screen#0 = screen#12 } { newbuffer#22 = newbuffer#9 } { oldbuffer#22 = oldbuffer#9 } }  swap:9::print:27 [ newbuffer#0 tempbuffer#0 screen#0 ] { { tempbuffer#0 = tempbuffer#23 } { newbuffer#0 = newbuffer#24 } { tempbuffer#21 = tempbuffer#9 } { screen#0 = screen#12 } { newbuffer#22 = newbuffer#9 } { oldbuffer#22 = oldbuffer#9 } }  ) always clobbers reg byte a 
Statement [24] tempbuffer#21 = tempbuffer#0 [ newbuffer#0 tempbuffer#0 tempbuffer#21 screen#0 ] ( swap:3 [ newbuffer#0 tempbuffer#0 tempbuffer#21 screen#0 ] { { tempbuffer#21 = tempbuffer#9 } { screen#0 = screen#12 } { newbuffer#22 = newbuffer#9 } { oldbuffer#22 = oldbuffer#9 } }  swap:6 [ newbuffer#0 tempbuffer#0 tempbuffer#21 screen#0 ] { { tempbuffer#0 = tempbuffer#22 } { newbuffer#0 = newbuffer#23 } { tempbuffer#21 = tempbuffer#9 } { screen#0 = screen#12 } { newbuffer#22 = newbuffer#9 } { oldbuffer#22 = oldbuffer#9 } }  swap:9 [ newbuffer#0 tempbuffer#0 tempbuffer#21 screen#0 ] { { tempbuffer#0 = tempbuffer#23 } { newbuffer#0 = newbuffer#24 } { tempbuffer#21 = tempbuffer#9 } { screen#0 = screen#12 } { newbuffer#22 = newbuffer#9 } { oldbuffer#22 = oldbuffer#9 } }  ) always clobbers reg byte a 
Statement [25] newbuffer#22 = newbuffer#0 [ newbuffer#0 tempbuffer#0 tempbuffer#21 screen#0 newbuffer#22 ] ( swap:3 [ newbuffer#0 tempbuffer#0 tempbuffer#21 screen#0 newbuffer#22 ] { { tempbuffer#21 = tempbuffer#9 } { screen#0 = screen#12 } { newbuffer#22 = newbuffer#9 } { oldbuffer#22 = oldbuffer#9 } }  swap:6 [ newbuffer#0 tempbuffer#0 tempbuffer#21 screen#0 newbuffer#22 ] { { tempbuffer#0 = tempbuffer#22 } { newbuffer#0 = newbuffer#23 } { tempbuffer#21 = tempbuffer#9 } { screen#0 = screen#12 } { newbuffer#22 = newbuffer#9 } { oldbuffer#22 = oldbuffer#9 } }  swap:9 [ newbuffer#0 tempbuffer#0 tempbuffer#21 screen#0 newbuffer#22 ] { { tempbuffer#0 = tempbuffer#23 } { newbuffer#0 = newbuffer#24 } { tempbuffer#21 = tempbuffer#9 } { screen#0 = screen#12 } { newbuffer#22 = newbuffer#9 } { oldbuffer#22 = oldbuffer#9 } }  ) always clobbers reg byte a 
Statement [26] oldbuffer#22 = tempbuffer#0 [ newbuffer#0 tempbuffer#0 tempbuffer#21 screen#0 newbuffer#22 oldbuffer#22 ] ( swap:3 [ newbuffer#0 tempbuffer#0 tempbuffer#21 screen#0 newbuffer#22 oldbuffer#22 ] { { tempbuffer#21 = tempbuffer#9 } { screen#0 = screen#12 } { newbuffer#22 = newbuffer#9 } { oldbuffer#22 = oldbuffer#9 } }  swap:6 [ newbuffer#0 tempbuffer#0 tempbuffer#21 screen#0 newbuffer#22 oldbuffer#22 ] { { tempbuffer#0 = tempbuffer#22 } { newbuffer#0 = newbuffer#23 } { tempbuffer#21 = tempbuffer#9 } { screen#0 = screen#12 } { newbuffer#22 = newbuffer#9 } { oldbuffer#22 = oldbuffer#9 } }  swap:9 [ newbuffer#0 tempbuffer#0 tempbuffer#21 screen#0 newbuffer#22 oldbuffer#22 ] { { tempbuffer#0 = tempbuffer#23 } { newbuffer#0 = newbuffer#24 } { tempbuffer#21 = tempbuffer#9 } { screen#0 = screen#12 } { newbuffer#22 = newbuffer#9 } { oldbuffer#22 = oldbuffer#9 } }  ) always clobbers reg byte a 
Potential registers zp[2]:12 [ tempbuffer#9 tempbuffer#21 ] : zp[2]:12 , 
Potential registers zp[2]:8 [ screen#12 screen#0 ] : zp[2]:8 , 
Potential registers zp[2]:14 [ newbuffer#9 newbuffer#22 ] : zp[2]:14 , 
Potential registers zp[2]:10 [ oldbuffer#9 oldbuffer#22 ] : zp[2]:10 , 
Potential registers zp[2]:18 [ tempbuffer#0 tempbuffer#22 tempbuffer#23 ] : zp[2]:18 , 
Potential registers zp[2]:16 [ newbuffer#0 newbuffer#23 newbuffer#24 ] : zp[2]:16 , 
Potential registers zp[1]:2 [ print::$3 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ print::$0 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ print::$4 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ print::$1 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ print::$5 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ print::$2 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print] 202: zp[1]:2 [ print::$3 ] 202: zp[1]:3 [ print::$0 ] 202: zp[1]:4 [ print::$4 ] 202: zp[1]:5 [ print::$1 ] 202: zp[1]:6 [ print::$5 ] 202: zp[1]:7 [ print::$2 ] 
Uplift Scope [] 48.5: zp[2]:8 [ screen#12 screen#0 ] 23.57: zp[2]:10 [ oldbuffer#9 oldbuffer#22 ] 18.33: zp[2]:12 [ tempbuffer#9 tempbuffer#21 ] 13.75: zp[2]:14 [ newbuffer#9 newbuffer#22 ] 10.38: zp[2]:16 [ newbuffer#0 newbuffer#23 newbuffer#24 ] 7: zp[2]:18 [ tempbuffer#0 tempbuffer#22 tempbuffer#23 ] 
Uplift Scope [swap] 
Uplift Scope [main] 

Uplifting [print] best 294 combination reg byte a [ print::$3 ] reg byte a [ print::$0 ] reg byte a [ print::$4 ] reg byte a [ print::$1 ] zp[1]:6 [ print::$5 ] zp[1]:7 [ print::$2 ] 
Limited combination testing to 100 combinations of 4096 possible.
Uplifting [] best 294 combination zp[2]:8 [ screen#12 screen#0 ] zp[2]:10 [ oldbuffer#9 oldbuffer#22 ] zp[2]:12 [ tempbuffer#9 tempbuffer#21 ] zp[2]:14 [ newbuffer#9 newbuffer#22 ] zp[2]:16 [ newbuffer#0 newbuffer#23 newbuffer#24 ] zp[2]:18 [ tempbuffer#0 tempbuffer#22 tempbuffer#23 ] 
Uplifting [swap] best 294 combination 
Uplifting [main] best 294 combination 
Attempting to uplift remaining variables inzp[1]:6 [ print::$5 ]
Uplifting [print] best 288 combination reg byte a [ print::$5 ] 
Attempting to uplift remaining variables inzp[1]:7 [ print::$2 ]
Uplifting [print] best 284 combination reg byte a [ print::$2 ] 
Allocated (was zp[2]:8) zp[2]:2 [ screen#12 screen#0 ]
Allocated (was zp[2]:10) zp[2]:4 [ oldbuffer#9 oldbuffer#22 ]
Allocated (was zp[2]:12) zp[2]:6 [ tempbuffer#9 tempbuffer#21 ]
Allocated (was zp[2]:14) zp[2]:8 [ newbuffer#9 newbuffer#22 ]
Allocated (was zp[2]:16) zp[2]:10 [ newbuffer#0 newbuffer#23 newbuffer#24 ]
Allocated (was zp[2]:18) zp[2]:12 [ tempbuffer#0 tempbuffer#22 tempbuffer#23 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="pointer-swap.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label screen = 2
  .label tempbuffer = $c
  .label newbuffer = $a
  .label tempbuffer_1 = 6
  .label newbuffer_1 = 8
  .label oldbuffer = 4
.segment Code
  // main
main: {
    // [1] call print
    // [11] phi from main to print [phi:main->print]
  print_from_main:
    // [11] phi oldbuffer#9 = buffer2 [phi:main->print#0] -- pbuz1=pbuc1 
    lda #<buffer2
    sta.z oldbuffer
    lda #>buffer2
    sta.z oldbuffer+1
    // [11] phi newbuffer#9 = buffer1 [phi:main->print#1] -- pbuz1=pbuc1 
    lda #<buffer1
    sta.z newbuffer_1
    lda #>buffer1
    sta.z newbuffer_1+1
    // [11] phi screen#12 = (char *) 1024 [phi:main->print#2] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [11] phi tempbuffer#9 = (char *) 0 [phi:main->print#3] -- call_phi_near 
    lda #<0
    sta.z tempbuffer_1
    lda #>0
    sta.z tempbuffer_1+1
    jsr print
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] call swap
    // [23] phi from main::@1 to swap [phi:main::@1->swap]
  swap_from___b1:
    // [23] phi newbuffer#0 = buffer2 [phi:main::@1->swap#0] -- pbuz1=pbuc1 
    lda #<buffer2
    sta.z newbuffer
    lda #>buffer2
    sta.z newbuffer+1
    // [23] phi tempbuffer#0 = buffer1 [phi:main::@1->swap#1] -- call_phi_near 
    lda #<buffer1
    sta.z tempbuffer
    lda #>buffer1
    sta.z tempbuffer+1
    jsr swap
    jmp __b2
    // main::@2
  __b2:
    // [4] tempbuffer#22 = newbuffer#0 -- pbuz1=pbuz2 
    lda.z newbuffer
    sta.z tempbuffer
    lda.z newbuffer+1
    sta.z tempbuffer+1
    // [5] newbuffer#23 = tempbuffer#0 -- pbuz1=pbuz2 
    lda.z tempbuffer
    sta.z newbuffer
    lda.z tempbuffer+1
    sta.z newbuffer+1
    // [6] call swap
    // [23] phi from main::@2 to swap [phi:main::@2->swap]
  swap_from___b2:
    // [23] phi newbuffer#0 = newbuffer#23 [phi:main::@2->swap#0] -- register_copy 
    // [23] phi tempbuffer#0 = tempbuffer#22 [phi:main::@2->swap#1] -- call_phi_near 
    jsr swap
    jmp __b3
    // main::@3
  __b3:
    // [7] tempbuffer#23 = newbuffer#0 -- pbuz1=pbuz2 
    lda.z newbuffer
    sta.z tempbuffer
    lda.z newbuffer+1
    sta.z tempbuffer+1
    // [8] newbuffer#24 = tempbuffer#0 -- pbuz1=pbuz2 
    lda.z tempbuffer
    sta.z newbuffer
    lda.z tempbuffer+1
    sta.z newbuffer+1
    // [9] call swap
    // [23] phi from main::@3 to swap [phi:main::@3->swap]
  swap_from___b3:
    // [23] phi newbuffer#0 = newbuffer#24 [phi:main::@3->swap#0] -- register_copy 
    // [23] phi tempbuffer#0 = tempbuffer#23 [phi:main::@3->swap#1] -- call_phi_near 
    jsr swap
    jmp __breturn
    // main::@return
  __breturn:
    // [10] return 
    rts
}
  // print
print: {
    // [12] print::$3 = (char)tempbuffer#9 -- vbuaa=_byte_pbuz1 
    lda.z tempbuffer_1
    // [13] print::$0 = print::$3 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // [14] *screen#12 = hextab[print::$0] -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda hextab,y
    ldy #0
    sta (screen),y
    // [15] print::$4 = (char)newbuffer#9 -- vbuaa=_byte_pbuz1 
    lda.z newbuffer_1
    // [16] print::$1 = print::$4 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // [17] screen#12[2] = hextab[print::$1] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuaa 
    tay
    lda hextab,y
    ldy #2
    sta (screen),y
    // [18] print::$5 = (char)oldbuffer#9 -- vbuaa=_byte_pbuz1 
    lda.z oldbuffer
    // [19] print::$2 = print::$5 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // [20] screen#12[4] = hextab[print::$2] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuaa 
    tay
    lda hextab,y
    ldy #4
    sta (screen),y
    // [21] screen#0 = screen#12 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z screen
    sta.z screen
    bcc !+
    inc.z screen+1
  !:
    jmp __breturn
    // print::@return
  __breturn:
    // [22] return 
    rts
}
  // swap
swap: {
    // [24] tempbuffer#21 = tempbuffer#0 -- pbuz1=pbuz2 
    lda.z tempbuffer
    sta.z tempbuffer_1
    lda.z tempbuffer+1
    sta.z tempbuffer_1+1
    // [25] newbuffer#22 = newbuffer#0 -- pbuz1=pbuz2 
    lda.z newbuffer
    sta.z newbuffer_1
    lda.z newbuffer+1
    sta.z newbuffer_1+1
    // [26] oldbuffer#22 = tempbuffer#0 -- pbuz1=pbuz2 
    lda.z tempbuffer
    sta.z oldbuffer
    lda.z tempbuffer+1
    sta.z oldbuffer+1
    // [27] call print
    // [11] phi from swap to print [phi:swap->print]
  print_from_swap:
    // [11] phi oldbuffer#9 = oldbuffer#22 [phi:swap->print#0] -- register_copy 
    // [11] phi newbuffer#9 = newbuffer#22 [phi:swap->print#1] -- register_copy 
    // [11] phi screen#12 = screen#0 [phi:swap->print#2] -- register_copy 
    // [11] phi tempbuffer#9 = tempbuffer#21 [phi:swap->print#3] -- call_phi_near 
    jsr print
    jmp __breturn
    // swap::@return
  __breturn:
    // [28] return 
    rts
}
  // File Data
.segment Data
  buffer1: .fill $a, 0
  buffer2: .fill $a, 0
  hextab: .text "0123456789abcdef"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b1_from_main:
Removing instruction swap_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction print_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction swap_from___b2:
Removing instruction __b3:
Removing instruction swap_from___b3:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction print_from_swap:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant char buffer1[$a] = { fill( $a, 0) }
__constant char buffer2[$a] = { fill( $a, 0) }
__constant char hextab[] = "0123456789abcdef"z
void main()
char *newbuffer
char *newbuffer#0 // newbuffer zp[2]:10 2.375
char *newbuffer#22 // newbuffer_1 zp[2]:8 11.0
char *newbuffer#23 // newbuffer zp[2]:10 4.0
char *newbuffer#24 // newbuffer zp[2]:10 4.0
char *newbuffer#9 // newbuffer_1 zp[2]:8 2.75
char *oldbuffer
char *oldbuffer#22 // oldbuffer zp[2]:4 22.0
char *oldbuffer#9 // oldbuffer zp[2]:4 1.5714285714285714
void print()
char print::$0 // reg byte a 202.0
char print::$1 // reg byte a 202.0
char print::$2 // reg byte a 202.0
char print::$3 // reg byte a 202.0
char print::$4 // reg byte a 202.0
char print::$5 // reg byte a 202.0
char *screen
char *screen#0 // screen zp[2]:2 7.0
char *screen#12 // screen zp[2]:2 41.5
void swap()
char *tempbuffer
char *tempbuffer#0 // tempbuffer zp[2]:12 3.0
char *tempbuffer#21 // tempbuffer_1 zp[2]:6 7.333333333333333
char *tempbuffer#22 // tempbuffer zp[2]:12 2.0
char *tempbuffer#23 // tempbuffer zp[2]:12 2.0
char *tempbuffer#9 // tempbuffer_1 zp[2]:6 11.0

zp[2]:6 [ tempbuffer#9 tempbuffer#21 ]
zp[2]:2 [ screen#12 screen#0 ]
zp[2]:8 [ newbuffer#9 newbuffer#22 ]
zp[2]:4 [ oldbuffer#9 oldbuffer#22 ]
zp[2]:12 [ tempbuffer#0 tempbuffer#22 tempbuffer#23 ]
zp[2]:10 [ newbuffer#0 newbuffer#23 newbuffer#24 ]
reg byte a [ print::$3 ]
reg byte a [ print::$0 ]
reg byte a [ print::$4 ]
reg byte a [ print::$1 ]
reg byte a [ print::$5 ]
reg byte a [ print::$2 ]


FINAL ASSEMBLER
Score: 264

  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="pointer-swap.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label screen = 2
  .label tempbuffer = $c
  .label newbuffer = $a
  .label tempbuffer_1 = 6
  .label newbuffer_1 = 8
  .label oldbuffer = 4
.segment Code
  // main
main: {
    // print()
    // [1] call print
    // [11] phi from main to print [phi:main->print]
    // [11] phi oldbuffer#9 = buffer2 [phi:main->print#0] -- pbuz1=pbuc1 
    lda #<buffer2
    sta.z oldbuffer
    lda #>buffer2
    sta.z oldbuffer+1
    // [11] phi newbuffer#9 = buffer1 [phi:main->print#1] -- pbuz1=pbuc1 
    lda #<buffer1
    sta.z newbuffer_1
    lda #>buffer1
    sta.z newbuffer_1+1
    // [11] phi screen#12 = (char *) 1024 [phi:main->print#2] -- pbuz1=pbuc1 
    lda #<$400
    sta.z screen
    lda #>$400
    sta.z screen+1
    // [11] phi tempbuffer#9 = (char *) 0 [phi:main->print#3] -- call_phi_near 
    lda #<0
    sta.z tempbuffer_1
    sta.z tempbuffer_1+1
    jsr print
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // swap()
    // [3] call swap
    // [23] phi from main::@1 to swap [phi:main::@1->swap]
    // [23] phi newbuffer#0 = buffer2 [phi:main::@1->swap#0] -- pbuz1=pbuc1 
    lda #<buffer2
    sta.z newbuffer
    lda #>buffer2
    sta.z newbuffer+1
    // [23] phi tempbuffer#0 = buffer1 [phi:main::@1->swap#1] -- call_phi_near 
    lda #<buffer1
    sta.z tempbuffer
    lda #>buffer1
    sta.z tempbuffer+1
    jsr swap
    // main::@2
    // [4] tempbuffer#22 = newbuffer#0 -- pbuz1=pbuz2 
    lda.z newbuffer
    sta.z tempbuffer
    lda.z newbuffer+1
    sta.z tempbuffer+1
    // [5] newbuffer#23 = tempbuffer#0 -- pbuz1=pbuz2 
    lda.z tempbuffer
    sta.z newbuffer
    lda.z tempbuffer+1
    sta.z newbuffer+1
    // swap()
    // [6] call swap
    // [23] phi from main::@2 to swap [phi:main::@2->swap]
    // [23] phi newbuffer#0 = newbuffer#23 [phi:main::@2->swap#0] -- register_copy 
    // [23] phi tempbuffer#0 = tempbuffer#22 [phi:main::@2->swap#1] -- call_phi_near 
    jsr swap
    // main::@3
    // [7] tempbuffer#23 = newbuffer#0 -- pbuz1=pbuz2 
    lda.z newbuffer
    sta.z tempbuffer
    lda.z newbuffer+1
    sta.z tempbuffer+1
    // [8] newbuffer#24 = tempbuffer#0 -- pbuz1=pbuz2 
    lda.z tempbuffer
    sta.z newbuffer
    lda.z tempbuffer+1
    sta.z newbuffer+1
    // swap()
    // [9] call swap
    // [23] phi from main::@3 to swap [phi:main::@3->swap]
    // [23] phi newbuffer#0 = newbuffer#24 [phi:main::@3->swap#0] -- register_copy 
    // [23] phi tempbuffer#0 = tempbuffer#23 [phi:main::@3->swap#1] -- call_phi_near 
    jsr swap
    // main::@return
    // }
    // [10] return 
    rts
}
  // print
print: {
    // (char)tempbuffer&0x0f
    // [12] print::$3 = (char)tempbuffer#9 -- vbuaa=_byte_pbuz1 
    lda.z tempbuffer_1
    // [13] print::$0 = print::$3 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // screen[0] = hextab[(char)tempbuffer&0x0f]
    // [14] *screen#12 = hextab[print::$0] -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda hextab,y
    ldy #0
    sta (screen),y
    // (char)newbuffer&0x0f
    // [15] print::$4 = (char)newbuffer#9 -- vbuaa=_byte_pbuz1 
    lda.z newbuffer_1
    // [16] print::$1 = print::$4 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // screen[2] = hextab[(char)newbuffer&0x0f]
    // [17] screen#12[2] = hextab[print::$1] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuaa 
    tay
    lda hextab,y
    ldy #2
    sta (screen),y
    // (char)oldbuffer&0x0f
    // [18] print::$5 = (char)oldbuffer#9 -- vbuaa=_byte_pbuz1 
    lda.z oldbuffer
    // [19] print::$2 = print::$5 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // screen[4] = hextab[(char)oldbuffer&0x0f]
    // [20] screen#12[4] = hextab[print::$2] -- pbuz1_derefidx_vbuc1=pbuc2_derefidx_vbuaa 
    tay
    lda hextab,y
    ldy #4
    sta (screen),y
    // screen += 40
    // [21] screen#0 = screen#12 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z screen
    sta.z screen
    bcc !+
    inc.z screen+1
  !:
    // print::@return
    // }
    // [22] return 
    rts
}
  // swap
swap: {
    // [24] tempbuffer#21 = tempbuffer#0 -- pbuz1=pbuz2 
    lda.z tempbuffer
    sta.z tempbuffer_1
    lda.z tempbuffer+1
    sta.z tempbuffer_1+1
    // [25] newbuffer#22 = newbuffer#0 -- pbuz1=pbuz2 
    lda.z newbuffer
    sta.z newbuffer_1
    lda.z newbuffer+1
    sta.z newbuffer_1+1
    // [26] oldbuffer#22 = tempbuffer#0 -- pbuz1=pbuz2 
    lda.z tempbuffer
    sta.z oldbuffer
    lda.z tempbuffer+1
    sta.z oldbuffer+1
    // print()
    // [27] call print
    // [11] phi from swap to print [phi:swap->print]
    // [11] phi oldbuffer#9 = oldbuffer#22 [phi:swap->print#0] -- register_copy 
    // [11] phi newbuffer#9 = newbuffer#22 [phi:swap->print#1] -- register_copy 
    // [11] phi screen#12 = screen#0 [phi:swap->print#2] -- register_copy 
    // [11] phi tempbuffer#9 = tempbuffer#21 [phi:swap->print#3] -- call_phi_near 
    jsr print
    // swap::@return
    // }
    // [28] return 
    rts
}
  // File Data
.segment Data
  buffer1: .fill $a, 0
  buffer2: .fill $a, 0
  hextab: .text "0123456789abcdef"

