(label) @1
(label) @begin
(label) @end
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const signed byte*) ap = (signed byte*) 253
(const signed byte*) bp = (signed byte*) 254
(const signed byte*) cp = (signed byte*) 255
(signed byte()) fmul8((signed byte) fmul8::a , (signed byte) fmul8::b)
(label) fmul8::@return
(signed byte) fmul8::a
(signed byte) fmul8::a#0 reg byte a 5501.0
(signed byte) fmul8::b
(signed byte) fmul8::b#0 reg byte x 5501.0
(signed byte) fmul8::return
(signed byte) fmul8::return#0 reg byte a 2002.0
(signed byte) fmul8::return#1 reg byte a 3667.333333333333
(void()) init_screen()
(label) init_screen::@1
(label) init_screen::@2
(label) init_screen::@return
(byte*) init_screen::COLS
(byte*) init_screen::COLS#1 COLS zp[2]:12 667.3333333333334
(byte*) init_screen::COLS#3 COLS zp[2]:12 1201.2
(const byte) init_screen::WHITE = (byte) 1
(byte) init_screen::l
(byte) init_screen::l#1 reg byte x 1501.5
(byte) init_screen::l#2 reg byte x 1501.5
(byte) init_screen::m
(byte) init_screen::m#1 reg byte x 1501.5
(byte) init_screen::m#2 reg byte x 333.6666666666667
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@return
(byte*) main::at
(byte*) main::at#1 at zp[2]:3 67.33333333333333
(byte*) main::at#12 at_2 zp[2]:8 202.0
(byte*) main::at#2 at_1 zp[2]:5 21.263157894736842
(byte*) main::at#3 at_2 zp[2]:8 273.0
(byte*) main::at#4 at zp[2]:3 75.75
(byte*) main::at#6 at_2 zp[2]:8 2103.0
(byte*) main::at_line
(byte*) main::at_line#2 at_line zp[2]:5 202.0
(byte) main::i
(byte) main::i#1 i zp[1]:7 151.5
(byte) main::i#2 i zp[1]:7 72.44444444444446
(byte) main::j
(byte) main::j#1 j zp[1]:10 1501.5
(byte) main::j#2 j zp[1]:10 300.29999999999995
(byte) main::k
(byte) main::k#1 k zp[1]:2 151.5
(byte) main::k#2 k zp[1]:2 60.599999999999994
(signed byte) main::r
(signed byte) main::r#0 reg byte a 2002.0
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:14 200002.0
(byte*) memset::dst#2 dst zp[2]:14 133334.66666666666
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(const byte*) print_screen#0
(const byte*) mulf_sqr1[(number) $200]  = kickasm {{ .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((i*i)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((i-256)*(i-256))/256) }
    	.if(i>351) { .byte round(((512-i)*(512-i))/256) }
    }
 }}
(const byte*) mulf_sqr2[(number) $200]  = kickasm {{ .for(var i=0;i<$200;i++) {
    	.if(i<=159) { .byte round((-i-1)*(-i-1)/256) }
    	.if(i>159 && i<=351 ) { .byte round(((255-i)*(255-i))/256) }
    	.if(i>351) { .byte round(((i-511)*(i-511))/256) }  
    }
 }}
(void()) print_byte_at((byte) print_byte_at::b , (byte*) print_byte_at::at)
(byte~) print_byte_at::$0 reg byte a 200002.0
(byte~) print_byte_at::$2 reg byte y 100001.0
(label) print_byte_at::@1
(label) print_byte_at::@return
(byte*) print_byte_at::at
(byte*) print_byte_at::at#0 at zp[2]:17 35000.5
(byte) print_byte_at::b
(byte) print_byte_at::b#0 b zp[1]:16 35000.5
(void()) print_char_at((byte) print_char_at::ch , (byte*) print_char_at::at)
(label) print_char_at::@return
(byte*) print_char_at::at
(byte*) print_char_at::at#0 at zp[2]:14 20002.0
(byte*) print_char_at::at#1 at zp[2]:14 20002.0
(byte*) print_char_at::at#2 at zp[2]:14 200002.0
(byte*) print_char_at::at#3 at zp[2]:14 100001.0
(byte*) print_char_at::at#4 at zp[2]:14 1220005.0
(byte) print_char_at::ch
(byte) print_char_at::ch#2 reg byte x 100001.0
(byte) print_char_at::ch#3 reg byte x 200002.0
(byte) print_char_at::ch#4 reg byte x 1200003.0
(void()) print_cls()
(label) print_cls::@return
(const byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(void()) print_sbyte_at((signed byte) print_sbyte_at::b , (byte*) print_sbyte_at::at)
(label) print_sbyte_at::@1
(label) print_sbyte_at::@2
(label) print_sbyte_at::@3
(label) print_sbyte_at::@4
(label) print_sbyte_at::@return
(byte*) print_sbyte_at::at
(byte*) print_sbyte_at::at#0 at zp[2]:12 202.0
(byte*) print_sbyte_at::at#1 at zp[2]:12 202.0
(byte*) print_sbyte_at::at#2 at zp[2]:12 2002.0
(byte*) print_sbyte_at::at#3 at zp[2]:12 3467.3333333333335
(signed byte) print_sbyte_at::b
(signed byte) print_sbyte_at::b#0 b zp[1]:11 20002.0
(signed byte) print_sbyte_at::b#1 b zp[1]:11 101.0
(signed byte) print_sbyte_at::b#2 b zp[1]:11 101.0
(signed byte) print_sbyte_at::b#3 b zp[1]:11 1001.0
(signed byte) print_sbyte_at::b#4 b zp[1]:11 5201.0
(signed byte) print_sbyte_at::b#6 b zp[1]:11 20002.0
(byte*) print_screen
(const byte*) print_screen#0 print_screen = (byte*) 1024
(const signed byte*) vals[]  = { (signed byte) -$5f, (signed byte) -$40, (signed byte) -$20, (signed byte) -$10, (signed byte) 0, (signed byte) $10, (signed byte) $20, (signed byte) $40, (signed byte) $5f }

zp[1]:2 [ main::k#2 main::k#1 ]
zp[2]:3 [ main::at#4 main::at#1 ]
zp[2]:5 [ main::at_line#2 main::at#2 ]
zp[1]:7 [ main::i#2 main::i#1 ]
zp[2]:8 [ main::at#6 main::at#3 main::at#12 ]
zp[1]:10 [ main::j#2 main::j#1 ]
zp[1]:11 [ print_sbyte_at::b#6 print_sbyte_at::b#0 print_sbyte_at::b#4 print_sbyte_at::b#1 print_sbyte_at::b#3 print_sbyte_at::b#2 ]
reg byte x [ print_char_at::ch#4 print_char_at::ch#2 print_char_at::ch#3 ]
reg byte x [ init_screen::l#2 init_screen::l#1 ]
zp[2]:12 [ init_screen::COLS#3 init_screen::COLS#1 print_sbyte_at::at#3 print_sbyte_at::at#0 print_sbyte_at::at#2 print_sbyte_at::at#1 ]
reg byte x [ init_screen::m#2 init_screen::m#1 ]
zp[2]:14 [ memset::dst#2 memset::dst#1 print_char_at::at#4 print_char_at::at#2 print_char_at::at#3 print_char_at::at#0 print_char_at::at#1 ]
reg byte a [ fmul8::a#0 ]
reg byte x [ fmul8::b#0 ]
reg byte a [ fmul8::return#0 ]
reg byte a [ main::r#0 ]
zp[1]:16 [ print_byte_at::b#0 ]
zp[2]:17 [ print_byte_at::at#0 ]
reg byte a [ print_byte_at::$0 ]
reg byte y [ print_byte_at::$2 ]
reg byte a [ fmul8::return#1 ]
