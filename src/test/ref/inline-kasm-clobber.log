Identified constant variable (byte*) SCREEN
Culled Empty Block (label) main::@6

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (number) $400
  to:@1
main: scope:[main]  from @1
  (byte) main::k#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::k#6 ← phi( main/(byte) main::k#0 main::@5/(byte) main::k#1 )
  (byte) main::l#0 ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  (byte) main::k#5 ← phi( main::@1/(byte) main::k#6 main::@4/(byte) main::k#3 )
  (byte) main::l#4 ← phi( main::@1/(byte) main::l#0 main::@4/(byte) main::l#1 )
  (byte) main::m#0 ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::k#4 ← phi( main::@2/(byte) main::k#5 main::@3/(byte) main::k#4 )
  (byte) main::l#3 ← phi( main::@2/(byte) main::l#4 main::@3/(byte) main::l#3 )
  (byte) main::m#2 ← phi( main::@2/(byte) main::m#0 main::@3/(byte) main::m#1 )
  kickasm( uses SCREEN#0) {{ lda #0
                    ldx #0
                    sta SCREEN,x
                 }}
  (byte) main::m#1 ← (byte) main::m#2 + rangenext(0,$a)
  (bool~) main::$0 ← (byte) main::m#1 != rangelast(0,$a)
  if((bool~) main::$0) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) main::k#3 ← phi( main::@3/(byte) main::k#4 )
  (byte) main::l#2 ← phi( main::@3/(byte) main::l#3 )
  (byte) main::l#1 ← (byte) main::l#2 + rangenext(0,$a)
  (bool~) main::$1 ← (byte) main::l#1 != rangelast(0,$a)
  if((bool~) main::$1) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) main::k#2 ← phi( main::@4/(byte) main::k#3 )
  (byte) main::k#1 ← (byte) main::k#2 + rangenext(0,$a)
  (bool~) main::$2 ← (byte) main::k#1 != rangelast(0,$a)
  if((bool~) main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(void()) main()
(bool~) main::$0
(bool~) main::$1
(bool~) main::$2
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(byte) main::k
(byte) main::k#0
(byte) main::k#1
(byte) main::k#2
(byte) main::k#3
(byte) main::k#4
(byte) main::k#5
(byte) main::k#6
(byte) main::l
(byte) main::l#0
(byte) main::l#1
(byte) main::l#2
(byte) main::l#3
(byte) main::l#4
(byte) main::m
(byte) main::m#0
(byte) main::m#1
(byte) main::m#2

Inlining cast (byte*) SCREEN#0 ← (byte*)(number) $400
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Alias (byte) main::l#2 = (byte) main::l#3 
Alias (byte) main::k#2 = (byte) main::k#3 (byte) main::k#4 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte) main::l#2
Self Phi Eliminated (byte) main::k#2
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (byte) main::l#2 (byte) main::l#4
Identical Phi Values (byte) main::k#2 (byte) main::k#5
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$0 [10] if((byte) main::m#1!=rangelast(0,$a)) goto main::@3
Simple Condition (bool~) main::$1 [14] if((byte) main::l#1!=rangelast(0,$a)) goto main::@2
Simple Condition (bool~) main::$2 [18] if((byte) main::k#1!=rangelast(0,$a)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) SCREEN#0 = (byte*) 1024
Constant (const byte) main::k#0 = 0
Constant (const byte) main::l#0 = 0
Constant (const byte) main::m#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [8] main::m#1 ← ++ main::m#2 to ++
Resolved ranged comparison value [10] if(main::m#1!=rangelast(0,$a)) goto main::@3 to (number) $b
Resolved ranged next value [12] main::l#1 ← ++ main::l#4 to ++
Resolved ranged comparison value [14] if(main::l#1!=rangelast(0,$a)) goto main::@2 to (number) $b
Resolved ranged next value [16] main::k#1 ← ++ main::k#5 to ++
Resolved ranged comparison value [18] if(main::k#1!=rangelast(0,$a)) goto main::@1 to (number) $b
Adding number conversion cast (unumber) $b in if((byte) main::m#1!=(number) $b) goto main::@3
Adding number conversion cast (unumber) $b in if((byte) main::l#1!=(number) $b) goto main::@2
Adding number conversion cast (unumber) $b in if((byte) main::k#1!=(number) $b) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $b
Simplifying constant integer cast $b
Simplifying constant integer cast $b
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $b
Successful SSA optimization PassNFinalizeNumberTypeConversions
Self Phi Eliminated (byte) main::k#5
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (byte) main::k#5 (byte) main::k#6
Successful SSA optimization Pass2IdenticalPhiElimination
Inlining constant with var siblings (const byte) main::k#0
Inlining constant with var siblings (const byte) main::l#0
Inlining constant with var siblings (const byte) main::m#0
Constant inlined main::k#0 = (byte) 0
Constant inlined main::m#0 = (byte) 0
Constant inlined main::l#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@7(between main::@5 and main::@1)
Added new block during phi lifting main::@8(between main::@4 and main::@2)
Added new block during phi lifting main::@9(between main::@3 and main::@3)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 3 initial phi equivalence classes
Coalesced [17] main::k#7 ← main::k#1
Coalesced [18] main::l#5 ← main::l#1
Coalesced [19] main::m#3 ← main::m#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@7
Culled Empty Block (label) main::@8
Culled Empty Block (label) main::@9
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [5] (byte) main::k#6 ← phi( main/(byte) 0 main::@5/(byte) main::k#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  [6] (byte) main::l#4 ← phi( main::@1/(byte) 0 main::@4/(byte) main::l#1 )
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  [7] (byte) main::m#2 ← phi( main::@2/(byte) 0 main::@3/(byte) main::m#1 )
  kickasm( uses SCREEN#0) {{ lda #0
                    ldx #0
                    sta SCREEN,x
                 }}
  [9] (byte) main::m#1 ← ++ (byte) main::m#2
  [10] if((byte) main::m#1!=(byte) $b) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  [11] (byte) main::l#1 ← ++ (byte) main::l#4
  [12] if((byte) main::l#1!=(byte) $b) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  [13] (byte) main::k#1 ← ++ (byte) main::k#6
  [14] if((byte) main::k#1!=(byte) $b) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  [15] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(void()) main()
(byte) main::k
(byte) main::k#1 16.5
(byte) main::k#6 2.75
(byte) main::l
(byte) main::l#1 151.5
(byte) main::l#4 40.4
(byte) main::m
(byte) main::m#1 1501.5
(byte) main::m#2 1001.0

Initial phi equivalence classes
[ main::k#6 main::k#1 ]
[ main::l#4 main::l#1 ]
[ main::m#2 main::m#1 ]
Complete equivalence classes
[ main::k#6 main::k#1 ]
[ main::l#4 main::l#1 ]
[ main::m#2 main::m#1 ]
Allocated zp ZP_BYTE:2 [ main::k#6 main::k#1 ]
Allocated zp ZP_BYTE:3 [ main::l#4 main::l#1 ]
Allocated zp ZP_BYTE:4 [ main::m#2 main::m#1 ]

INITIAL ASM
//SEG0 File Comments
// Tests that inline kickasm supports the clobbering directive
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label SCREEN = $400
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label m = 4
    .label l = 3
    .label k = 2
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte) main::k#6 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta k
    jmp b1
  //SEG13 [5] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  b1_from_b5:
  //SEG14 [5] phi (byte) main::k#6 = (byte) main::k#1 [phi:main::@5->main::@1#0] -- register_copy 
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG17 [6] phi (byte) main::l#4 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta l
    jmp b2
  //SEG18 [6] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
  b2_from_b4:
  //SEG19 [6] phi (byte) main::l#4 = (byte) main::l#1 [phi:main::@4->main::@2#0] -- register_copy 
    jmp b2
  //SEG20 main::@2
  b2:
  //SEG21 [7] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
  //SEG22 [7] phi (byte) main::m#2 = (byte) 0 [phi:main::@2->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta m
    jmp b3
  //SEG23 [7] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  b3_from_b3:
  //SEG24 [7] phi (byte) main::m#2 = (byte) main::m#1 [phi:main::@3->main::@3#0] -- register_copy 
    jmp b3
  //SEG25 main::@3
  b3:
  //SEG26 kickasm( uses SCREEN#0) {{ lda #0                     ldx #0                     sta SCREEN,x                  }}
    lda #0
                    ldx #0
                    sta SCREEN,x
                
  //SEG27 [9] (byte) main::m#1 ← ++ (byte) main::m#2 -- vbuz1=_inc_vbuz1 
    inc m
  //SEG28 [10] if((byte) main::m#1!=(byte) $b) goto main::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp m
    bne b3_from_b3
    jmp b4
  //SEG29 main::@4
  b4:
  //SEG30 [11] (byte) main::l#1 ← ++ (byte) main::l#4 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG31 [12] if((byte) main::l#1!=(byte) $b) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp l
    bne b2_from_b4
    jmp b5
  //SEG32 main::@5
  b5:
  //SEG33 [13] (byte) main::k#1 ← ++ (byte) main::k#6 -- vbuz1=_inc_vbuz1 
    inc k
  //SEG34 [14] if((byte) main::k#1!=(byte) $b) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp k
    bne b1_from_b5
    jmp breturn
  //SEG35 main::@return
  breturn:
  //SEG36 [15] return 
    rts
}
//SEG37 File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement kickasm( uses SCREEN#0) {{ lda #0
                    ldx #0
                    sta SCREEN,x
                 }} always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::k#6 main::k#1 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:2 [ main::k#6 main::k#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ main::l#4 main::l#1 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:3 [ main::l#4 main::l#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ main::m#2 main::m#1 ]
Removing always clobbered register reg byte x as potential for zp ZP_BYTE:4 [ main::m#2 main::m#1 ]
Statement kickasm( uses SCREEN#0) {{ lda #0
                    ldx #0
                    sta SCREEN,x
                 }} always clobbers reg byte a reg byte x 
Potential registers zp ZP_BYTE:2 [ main::k#6 main::k#1 ] : zp ZP_BYTE:2 , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::l#4 main::l#1 ] : zp ZP_BYTE:3 , reg byte y , 
Potential registers zp ZP_BYTE:4 [ main::m#2 main::m#1 ] : zp ZP_BYTE:4 , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 2,502.5: zp ZP_BYTE:4 [ main::m#2 main::m#1 ] 191.9: zp ZP_BYTE:3 [ main::l#4 main::l#1 ] 19.25: zp ZP_BYTE:2 [ main::k#6 main::k#1 ] 
Uplift Scope [] 

Uplifting [main] best 276433 combination reg byte y [ main::m#2 main::m#1 ] zp ZP_BYTE:3 [ main::l#4 main::l#1 ] zp ZP_BYTE:2 [ main::k#6 main::k#1 ] 
Uplifting [] best 276433 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ main::l#4 main::l#1 ]
Uplifting [main] best 276433 combination zp ZP_BYTE:3 [ main::l#4 main::l#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ main::k#6 main::k#1 ]
Uplifting [main] best 276433 combination zp ZP_BYTE:2 [ main::k#6 main::k#1 ] 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Tests that inline kickasm supports the clobbering directive
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label SCREEN = $400
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label l = 3
    .label k = 2
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte) main::k#6 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta k
    jmp b1
  //SEG13 [5] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  b1_from_b5:
  //SEG14 [5] phi (byte) main::k#6 = (byte) main::k#1 [phi:main::@5->main::@1#0] -- register_copy 
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
  //SEG17 [6] phi (byte) main::l#4 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta l
    jmp b2
  //SEG18 [6] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
  b2_from_b4:
  //SEG19 [6] phi (byte) main::l#4 = (byte) main::l#1 [phi:main::@4->main::@2#0] -- register_copy 
    jmp b2
  //SEG20 main::@2
  b2:
  //SEG21 [7] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
  //SEG22 [7] phi (byte) main::m#2 = (byte) 0 [phi:main::@2->main::@3#0] -- vbuyy=vbuc1 
    ldy #0
    jmp b3
  //SEG23 [7] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  b3_from_b3:
  //SEG24 [7] phi (byte) main::m#2 = (byte) main::m#1 [phi:main::@3->main::@3#0] -- register_copy 
    jmp b3
  //SEG25 main::@3
  b3:
  //SEG26 kickasm( uses SCREEN#0) {{ lda #0                     ldx #0                     sta SCREEN,x                  }}
    lda #0
                    ldx #0
                    sta SCREEN,x
                
  //SEG27 [9] (byte) main::m#1 ← ++ (byte) main::m#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG28 [10] if((byte) main::m#1!=(byte) $b) goto main::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$b
    bne b3_from_b3
    jmp b4
  //SEG29 main::@4
  b4:
  //SEG30 [11] (byte) main::l#1 ← ++ (byte) main::l#4 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG31 [12] if((byte) main::l#1!=(byte) $b) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp l
    bne b2_from_b4
    jmp b5
  //SEG32 main::@5
  b5:
  //SEG33 [13] (byte) main::k#1 ← ++ (byte) main::k#6 -- vbuz1=_inc_vbuz1 
    inc k
  //SEG34 [14] if((byte) main::k#1!=(byte) $b) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp k
    bne b1_from_b5
    jmp breturn
  //SEG35 main::@return
  breturn:
  //SEG36 [15] return 
    rts
}
//SEG37 File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b3_from_b3 with b3
Replacing label b2_from_b4 with b2
Replacing label b1_from_b5 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b5:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b3_from_b2:
Removing instruction b3_from_b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b4:
Removing instruction b5:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #$b
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (byte*) 1024
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(byte) main::k
(byte) main::k#1 k zp ZP_BYTE:2 16.5
(byte) main::k#6 k zp ZP_BYTE:2 2.75
(byte) main::l
(byte) main::l#1 l zp ZP_BYTE:3 151.5
(byte) main::l#4 l zp ZP_BYTE:3 40.4
(byte) main::m
(byte) main::m#1 reg byte y 1501.5
(byte) main::m#2 reg byte y 1001.0

zp ZP_BYTE:2 [ main::k#6 main::k#1 ]
zp ZP_BYTE:3 [ main::l#4 main::l#1 ]
reg byte y [ main::m#2 main::m#1 ]


FINAL ASSEMBLER
Score: 266411

//SEG0 File Comments
// Tests that inline kickasm supports the clobbering directive
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  .label SCREEN = $400
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
    .label l = 3
    .label k = 2
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG12 [5] phi (byte) main::k#6 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta k
  //SEG13 [5] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  //SEG14 [5] phi (byte) main::k#6 = (byte) main::k#1 [phi:main::@5->main::@1#0] -- register_copy 
  //SEG15 main::@1
  b1:
  //SEG16 [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG17 [6] phi (byte) main::l#4 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta l
  //SEG18 [6] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
  //SEG19 [6] phi (byte) main::l#4 = (byte) main::l#1 [phi:main::@4->main::@2#0] -- register_copy 
  //SEG20 main::@2
  b2:
  //SEG21 [7] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  //SEG22 [7] phi (byte) main::m#2 = (byte) 0 [phi:main::@2->main::@3#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG23 [7] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  //SEG24 [7] phi (byte) main::m#2 = (byte) main::m#1 [phi:main::@3->main::@3#0] -- register_copy 
  //SEG25 main::@3
  b3:
  //SEG26 kickasm( uses SCREEN#0) {{ lda #0                     ldx #0                     sta SCREEN,x                  }}
    lda #0
                    ldx #0
                    sta SCREEN,x
                
  //SEG27 [9] (byte) main::m#1 ← ++ (byte) main::m#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG28 [10] if((byte) main::m#1!=(byte) $b) goto main::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$b
    bne b3
  //SEG29 main::@4
  //SEG30 [11] (byte) main::l#1 ← ++ (byte) main::l#4 -- vbuz1=_inc_vbuz1 
    inc l
  //SEG31 [12] if((byte) main::l#1!=(byte) $b) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp l
    bne b2
  //SEG32 main::@5
  //SEG33 [13] (byte) main::k#1 ← ++ (byte) main::k#6 -- vbuz1=_inc_vbuz1 
    inc k
  //SEG34 [14] if((byte) main::k#1!=(byte) $b) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    cmp k
    bne b1
  //SEG35 main::@return
  //SEG36 [15] return 
    rts
}
//SEG37 File Data

