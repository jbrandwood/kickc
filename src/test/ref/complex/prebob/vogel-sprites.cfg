
(void()) __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] (volatile byte) plex_show_idx ← (byte) 0
  [2] (volatile byte) plex_sprite_idx ← (byte) 0
  [3] (volatile byte) plex_sprite_msb ← (byte) 1
  [4] (volatile byte) plex_free_next ← (byte) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [5] phi()
  [6] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [7] return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  asm { sei  }
  [9] call init 
  to:main::@1
main::@1: scope:[main]  from main
  [10] phi()
  [11] call loop 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] phi()
  [13] call exit 
  to:main::@3
main::@3: scope:[main]  from main::@2
  asm { cli  }
  to:main::@return
main::@return: scope:[main]  from main::@3
  [15] return 
  to:@return

(void()) exit()
exit: scope:[exit]  from main::@2
  [16] phi()
  to:exit::@1
exit::@1: scope:[exit]  from exit exit::@2
  [17] phi()
  [18] call keyboard_key_pressed 
  [19] (byte) keyboard_key_pressed::return#2 ← (byte) keyboard_key_pressed::return#0
  to:exit::@2
exit::@2: scope:[exit]  from exit::@1
  [20] (byte~) exit::$0 ← (byte) keyboard_key_pressed::return#2
  [21] if((byte) 0!=(byte~) exit::$0) goto exit::@1
  to:exit::@return
exit::@return: scope:[exit]  from exit::@2
  [22] return 
  to:@return

(byte()) keyboard_key_pressed((byte) keyboard_key_pressed::key)
keyboard_key_pressed: scope:[keyboard_key_pressed]  from exit::@1 loop::@10
  [23] phi()
  [24] call keyboard_matrix_read 
  [25] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
  to:keyboard_key_pressed::@1
keyboard_key_pressed::@1: scope:[keyboard_key_pressed]  from keyboard_key_pressed
  [26] (byte~) keyboard_key_pressed::$2 ← (byte) keyboard_matrix_read::return#2
  [27] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte*) keyboard_matrix_col_bitmask+(const byte) keyboard_key_pressed::colidx#0)
  to:keyboard_key_pressed::@return
keyboard_key_pressed::@return: scope:[keyboard_key_pressed]  from keyboard_key_pressed::@1
  [28] return 
  to:@return

(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_key_pressed
  [29] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1) ← *((const byte*) keyboard_matrix_row_bitmask+(const byte) keyboard_key_pressed::rowidx#0)
  [30] (byte) keyboard_matrix_read::return#0 ← ~ *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B)
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [31] return 
  to:@return

(void()) loop()
loop: scope:[loop]  from main::@1
  [32] phi()
  to:loop::@1
loop::@1: scope:[loop]  from loop loop::@15
  [33] (byte) loop::angle#6 ← phi( loop/(byte) 0 loop::@15/(byte) loop::angle#1 )
  to:loop::@2
loop::@2: scope:[loop]  from loop::@1 loop::@2
  [34] if(*((const nomodify byte*) RASTER)<(byte) $d8) goto loop::@2
  to:loop::@3
loop::@3: scope:[loop]  from loop::@2
  [35] *((const nomodify byte*) BORDER_COLOR) ← (byte) $f
  [36] (byte) loop::a#6 ← (byte) loop::angle#6
  to:loop::@4
loop::@4: scope:[loop]  from loop::@12 loop::@3
  [37] (byte) loop::i#2 ← phi( loop::@12/(byte) loop::i#1 loop::@3/(byte) 0 )
  [37] (byte) loop::a#2 ← phi( loop::@12/(byte) loop::a#1 loop::@3/(byte) loop::a#6 )
  [37] (signed byte) loop::r#2 ← phi( loop::@12/(signed byte) loop::r#1 loop::@3/(signed byte) $1e )
  [38] *((const nomodify byte*) BORDER_COLOR) ← (byte) 6
  [39] (signed byte) mulf8s::a#0 ← (signed byte) loop::r#2
  [40] (signed byte) mulf8s::b#0 ← *((const signed byte*) COS + (byte) loop::a#2)
  [41] call mulf8s 
  [42] (signed word) mulf8s::return#2 ← (signed word) mulf8s::return#0
  to:loop::@11
loop::@11: scope:[loop]  from loop::@4
  [43] (signed word~) loop::$1 ← (signed word) mulf8s::return#2
  [44] (signed word~) loop::$2 ← (signed word~) loop::$1 << (byte) 1
  [45] (signed word) loop::x#0 ← (signed word~) loop::$2 + (signed word)(number) $7d*(number) $100
  [46] (byte~) loop::$4 ← > (signed word) loop::x#0
  [47] (byte~) loop::$20 ← (byte) loop::i#2 << (byte) 1
  [48] *((const word*) PLEX_XPOS + (byte~) loop::$20) ← (byte~) loop::$4
  [49] (signed byte) mulf8s::a#1 ← (signed byte) loop::r#2
  [50] (signed byte) mulf8s::b#1 ← *((const signed byte*) SIN + (byte) loop::a#2)
  [51] call mulf8s 
  [52] (signed word) mulf8s::return#3 ← (signed word) mulf8s::return#0
  to:loop::@12
loop::@12: scope:[loop]  from loop::@11
  [53] (signed word~) loop::$5 ← (signed word) mulf8s::return#3
  [54] (signed word~) loop::$6 ← (signed word~) loop::$5 << (byte) 1
  [55] (signed word) loop::y#0 ← (signed word~) loop::$6 + (signed word)(number) $7d*(number) $100
  [56] (byte~) loop::$8 ← > (signed word) loop::y#0
  [57] *((const byte*) PLEX_YPOS + (byte) loop::i#2) ← (byte~) loop::$8
  [58] (byte) loop::a#1 ← (byte) loop::a#2 + (byte) $62
  [59] (signed byte) loop::r#1 ← (signed byte) loop::r#2 + (signed byte) 3
  [60] (byte) loop::i#1 ← ++ (byte) loop::i#2
  [61] if((byte) loop::i#1!=(const nomodify byte) NUM_BOBS-(byte) 1+(byte) 1) goto loop::@4
  to:loop::@5
loop::@5: scope:[loop]  from loop::@12
  [62] *((const nomodify byte*) BORDER_COLOR) ← (byte) 3
  [63] call plexSort 
  to:loop::@13
loop::@13: scope:[loop]  from loop::@5
  [64] (byte) loop::angle#1 ← (byte) loop::angle#6 + (byte) 3
  [65] *((const nomodify byte*) BORDER_COLOR) ← (const nomodify byte) BLACK
  to:loop::@6
loop::@6: scope:[loop]  from loop::@13 loop::@6
  [66] (byte~) loop::$11 ← *((const nomodify byte*) D011) & (const nomodify byte) VIC_RST8
  [67] if((byte~) loop::$11!=(byte) 0) goto loop::@6
  to:loop::@7
loop::@7: scope:[loop]  from loop::@14 loop::@6
  [68] (byte) loop::i1#5 ← phi( loop::@14/(byte) loop::i1#1 loop::@6/(byte) 0 )
  [69] *((const nomodify byte*) BORDER_COLOR) ← (const nomodify byte) BLACK
  to:loop::plexFreeNextYpos1
loop::plexFreeNextYpos1: scope:[loop]  from loop::@7
  [70] (byte) loop::plexFreeNextYpos1_return#0 ← *((const byte*) PLEX_FREE_YPOS + (volatile byte) plex_free_next)
  to:loop::@8
loop::@8: scope:[loop]  from loop::@8 loop::plexFreeNextYpos1
  [71] if(*((const nomodify byte*) RASTER)<(byte) loop::plexFreeNextYpos1_return#0) goto loop::@8
  to:loop::@9
loop::@9: scope:[loop]  from loop::@8
  [72] *((const nomodify byte*) BORDER_COLOR) ← ++ *((const nomodify byte*) BORDER_COLOR)
  [73] call plexShowSprite 
  to:loop::@14
loop::@14: scope:[loop]  from loop::@9
  [74] (byte) loop::i1#1 ← ++ (byte) loop::i1#5
  [75] if((byte) loop::i1#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(byte) 1) goto loop::@7
  to:loop::@10
loop::@10: scope:[loop]  from loop::@14
  [76] *((const nomodify byte*) BORDER_COLOR) ← (const nomodify byte) BLACK
  [77] call keyboard_key_pressed 
  [78] (byte) keyboard_key_pressed::return#3 ← (byte) keyboard_key_pressed::return#0
  to:loop::@15
loop::@15: scope:[loop]  from loop::@10
  [79] (byte~) loop::$18 ← (byte) keyboard_key_pressed::return#3
  [80] if((byte) 0!=(byte~) loop::$18) goto loop::@return
  to:loop::@1
loop::@return: scope:[loop]  from loop::@15
  [81] return 
  to:@return

(void()) plexShowSprite()
plexShowSprite: scope:[plexShowSprite]  from loop::@9
  [82] (byte) plexShowSprite::plex_sprite_idx2#0 ← (volatile byte) plex_sprite_idx << (byte) 1
  [83] (byte) plexShowSprite::plexFreeAdd1_ypos#0 ← *((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx))
  [84] *((const nomodify byte*) SPRITES_YPOS + (byte) plexShowSprite::plex_sprite_idx2#0) ← (byte) plexShowSprite::plexFreeAdd1_ypos#0
  to:plexShowSprite::plexFreeAdd1
plexShowSprite::plexFreeAdd1: scope:[plexShowSprite]  from plexShowSprite
  [85] (byte~) plexShowSprite::plexFreeAdd1_$0 ← (byte) plexShowSprite::plexFreeAdd1_ypos#0 + (byte) $15
  [86] *((const byte*) PLEX_FREE_YPOS + (volatile byte) plex_free_next) ← (byte~) plexShowSprite::plexFreeAdd1_$0
  [87] (byte~) plexShowSprite::plexFreeAdd1_$1 ← (volatile byte) plex_free_next + (byte) 1
  [88] (byte~) plexShowSprite::plexFreeAdd1_$2 ← (byte~) plexShowSprite::plexFreeAdd1_$1 & (byte) 7
  [89] (volatile byte) plex_free_next ← (byte~) plexShowSprite::plexFreeAdd1_$2
  to:plexShowSprite::@5
plexShowSprite::@5: scope:[plexShowSprite]  from plexShowSprite::plexFreeAdd1
  [90] *((const byte*) PLEX_SCREEN_PTR#0 + (volatile byte) plex_sprite_idx) ← *((const byte*) PLEX_PTR + *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx))
  [91] (byte) plexShowSprite::xpos_idx#0 ← *((const byte*) PLEX_SORTED_IDX + (volatile byte) plex_show_idx)
  [92] (byte~) plexShowSprite::$11 ← (byte) plexShowSprite::xpos_idx#0 << (byte) 1
  [93] (byte~) plexShowSprite::$2 ← < *((const word*) PLEX_XPOS + (byte~) plexShowSprite::$11)
  [94] *((const nomodify byte*) SPRITES_XPOS + (byte) plexShowSprite::plex_sprite_idx2#0) ← (byte~) plexShowSprite::$2
  [95] (byte~) plexShowSprite::$3 ← > *((const word*) PLEX_XPOS + (byte~) plexShowSprite::$11)
  [96] if((byte~) plexShowSprite::$3!=(byte) 0) goto plexShowSprite::@1
  to:plexShowSprite::@3
plexShowSprite::@3: scope:[plexShowSprite]  from plexShowSprite::@5
  [97] (byte~) plexShowSprite::$9 ← (byte) $ff ^ (volatile byte) plex_sprite_msb
  [98] *((const nomodify byte*) SPRITES_XMSB) ← *((const nomodify byte*) SPRITES_XMSB) & (byte~) plexShowSprite::$9
  to:plexShowSprite::@2
plexShowSprite::@2: scope:[plexShowSprite]  from plexShowSprite::@1 plexShowSprite::@3
  [99] (byte~) plexShowSprite::$5 ← (volatile byte) plex_sprite_idx + (byte) 1
  [100] (byte~) plexShowSprite::$6 ← (byte~) plexShowSprite::$5 & (byte) 7
  [101] (volatile byte) plex_sprite_idx ← (byte~) plexShowSprite::$6
  [102] (volatile byte) plex_show_idx ← ++ (volatile byte) plex_show_idx
  [103] (volatile byte) plex_sprite_msb ← (volatile byte) plex_sprite_msb << (byte) 1
  [104] if((volatile byte) plex_sprite_msb!=(byte) 0) goto plexShowSprite::@return
  to:plexShowSprite::@4
plexShowSprite::@4: scope:[plexShowSprite]  from plexShowSprite::@2
  [105] (volatile byte) plex_sprite_msb ← (byte) 1
  to:plexShowSprite::@return
plexShowSprite::@return: scope:[plexShowSprite]  from plexShowSprite::@2 plexShowSprite::@4
  [106] return 
  to:@return
plexShowSprite::@1: scope:[plexShowSprite]  from plexShowSprite::@5
  [107] *((const nomodify byte*) SPRITES_XMSB) ← *((const nomodify byte*) SPRITES_XMSB) | (volatile byte) plex_sprite_msb
  to:plexShowSprite::@2

(void()) plexSort()
plexSort: scope:[plexSort]  from loop::@5
  [108] phi()
  to:plexSort::@1
plexSort::@1: scope:[plexSort]  from plexSort plexSort::@2
  [109] (byte) plexSort::m#2 ← phi( plexSort/(byte) 0 plexSort::@2/(byte) plexSort::m#1 )
  [110] (byte) plexSort::nxt_idx#0 ← *((const byte*) PLEX_SORTED_IDX+(byte) 1 + (byte) plexSort::m#2)
  [111] (byte) plexSort::nxt_y#0 ← *((const byte*) PLEX_YPOS + (byte) plexSort::nxt_idx#0)
  [112] if((byte) plexSort::nxt_y#0>=*((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::m#2))) goto plexSort::@2
  to:plexSort::@5
plexSort::@5: scope:[plexSort]  from plexSort::@1
  [113] (byte) plexSort::s#6 ← (byte) plexSort::m#2
  to:plexSort::@3
plexSort::@3: scope:[plexSort]  from plexSort::@5 plexSort::@7
  [114] (byte) plexSort::s#3 ← phi( plexSort::@7/(byte) plexSort::s#1 plexSort::@5/(byte) plexSort::s#6 )
  [115] *((const byte*) PLEX_SORTED_IDX+(byte) 1 + (byte) plexSort::s#3) ← *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#3)
  [116] (byte) plexSort::s#1 ← -- (byte) plexSort::s#3
  [117] if((byte) plexSort::s#1==(byte) $ff) goto plexSort::@4
  to:plexSort::@7
plexSort::@7: scope:[plexSort]  from plexSort::@3
  [118] if((byte) plexSort::nxt_y#0<*((const byte*) PLEX_YPOS + *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#1))) goto plexSort::@3
  to:plexSort::@4
plexSort::@4: scope:[plexSort]  from plexSort::@3 plexSort::@7
  [119] (byte) plexSort::s#2 ← ++ (byte) plexSort::s#1
  [120] *((const byte*) PLEX_SORTED_IDX + (byte) plexSort::s#2) ← (byte) plexSort::nxt_idx#0
  to:plexSort::@2
plexSort::@2: scope:[plexSort]  from plexSort::@1 plexSort::@4
  [121] (byte) plexSort::m#1 ← ++ (byte) plexSort::m#2
  [122] if((byte) plexSort::m#1!=(const nomodify byte) PLEX_COUNT-(byte) 2+(byte) 1) goto plexSort::@1
  to:plexSort::@6
plexSort::@6: scope:[plexSort]  from plexSort::@2
  [123] (volatile byte) plex_show_idx ← (byte) 0
  [124] (volatile byte) plex_sprite_idx ← (byte) 0
  [125] (volatile byte) plex_sprite_msb ← (byte) 1
  to:plexSort::plexFreePrepare1
plexSort::plexFreePrepare1: scope:[plexSort]  from plexSort::@6
  [126] phi()
  to:plexSort::plexFreePrepare1_@1
plexSort::plexFreePrepare1_@1: scope:[plexSort]  from plexSort::plexFreePrepare1 plexSort::plexFreePrepare1_@1
  [127] (byte) plexSort::plexFreePrepare1_s#2 ← phi( plexSort::plexFreePrepare1/(byte) 0 plexSort::plexFreePrepare1_@1/(byte) plexSort::plexFreePrepare1_s#1 )
  [128] *((const byte*) PLEX_FREE_YPOS + (byte) plexSort::plexFreePrepare1_s#2) ← (byte) 0
  [129] (byte) plexSort::plexFreePrepare1_s#1 ← ++ (byte) plexSort::plexFreePrepare1_s#2
  [130] if((byte) plexSort::plexFreePrepare1_s#1!=(byte) 8) goto plexSort::plexFreePrepare1_@1
  to:plexSort::plexFreePrepare1_@2
plexSort::plexFreePrepare1_@2: scope:[plexSort]  from plexSort::plexFreePrepare1_@1
  [131] (volatile byte) plex_free_next ← (byte) 0
  to:plexSort::@return
plexSort::@return: scope:[plexSort]  from plexSort::plexFreePrepare1_@2
  [132] return 
  to:@return

(signed word()) mulf8s((signed byte) mulf8s::a , (signed byte) mulf8s::b)
mulf8s: scope:[mulf8s]  from loop::@11 loop::@4
  [133] (signed byte) mulf8s::b#2 ← phi( loop::@11/(signed byte) mulf8s::b#1 loop::@4/(signed byte) mulf8s::b#0 )
  [133] (signed byte) mulf8s::mulf8s_prepare1_a#0 ← phi( loop::@11/(signed byte) mulf8s::a#1 loop::@4/(signed byte) mulf8s::a#0 )
  to:mulf8s::mulf8s_prepare1
mulf8s::mulf8s_prepare1: scope:[mulf8s]  from mulf8s
  [134] (byte) mulf8u_prepare::a#0 ← (byte)(signed byte) mulf8s::mulf8s_prepare1_a#0
  [135] call mulf8u_prepare 
  to:mulf8s::@1
mulf8s::@1: scope:[mulf8s]  from mulf8s::mulf8s_prepare1
  [136] (signed byte) mulf8s_prepared::b#0 ← (signed byte) mulf8s::b#2
  [137] call mulf8s_prepared 
  to:mulf8s::@2
mulf8s::@2: scope:[mulf8s]  from mulf8s::@1
  [138] (signed word) mulf8s::return#0 ← (signed word)(word) mulf8s_prepared::m#4
  to:mulf8s::@return
mulf8s::@return: scope:[mulf8s]  from mulf8s::@2
  [139] return 
  to:@return

(signed word()) mulf8s_prepared((signed byte) mulf8s_prepared::b)
mulf8s_prepared: scope:[mulf8s_prepared]  from mulf8s::@1
  [140] (byte) mulf8u_prepared::b#0 ← (byte)(signed byte) mulf8s_prepared::b#0
  [141] call mulf8u_prepared 
  [142] (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#0
  to:mulf8s_prepared::@5
mulf8s_prepared::@5: scope:[mulf8s_prepared]  from mulf8s_prepared
  [143] (word) mulf8s_prepared::m#0 ← (word) mulf8u_prepared::return#2
  [144] if(*((const nomodify signed byte*) mulf8s_prepared::memA)>=(signed byte) 0) goto mulf8s_prepared::@1
  to:mulf8s_prepared::@3
mulf8s_prepared::@3: scope:[mulf8s_prepared]  from mulf8s_prepared::@5
  [145] (byte~) mulf8s_prepared::$6 ← > (word) mulf8s_prepared::m#0
  [146] (byte~) mulf8s_prepared::$11 ← (byte~) mulf8s_prepared::$6 - (byte)(signed byte) mulf8s_prepared::b#0
  [147] (word) mulf8s_prepared::m#1 ← (word) mulf8s_prepared::m#0 hi= (byte~) mulf8s_prepared::$11
  to:mulf8s_prepared::@1
mulf8s_prepared::@1: scope:[mulf8s_prepared]  from mulf8s_prepared::@3 mulf8s_prepared::@5
  [148] (word) mulf8s_prepared::m#5 ← phi( mulf8s_prepared::@3/(word) mulf8s_prepared::m#1 mulf8s_prepared::@5/(word) mulf8s_prepared::m#0 )
  [149] if((signed byte) mulf8s_prepared::b#0>=(signed byte) 0) goto mulf8s_prepared::@2
  to:mulf8s_prepared::@4
mulf8s_prepared::@4: scope:[mulf8s_prepared]  from mulf8s_prepared::@1
  [150] (byte~) mulf8s_prepared::$9 ← > (word) mulf8s_prepared::m#5
  [151] (byte~) mulf8s_prepared::$12 ← (byte~) mulf8s_prepared::$9 - (byte)*((const nomodify signed byte*) mulf8s_prepared::memA)
  [152] (word) mulf8s_prepared::m#2 ← (word) mulf8s_prepared::m#5 hi= (byte~) mulf8s_prepared::$12
  to:mulf8s_prepared::@2
mulf8s_prepared::@2: scope:[mulf8s_prepared]  from mulf8s_prepared::@1 mulf8s_prepared::@4
  [153] (word) mulf8s_prepared::m#4 ← phi( mulf8s_prepared::@1/(word) mulf8s_prepared::m#5 mulf8s_prepared::@4/(word) mulf8s_prepared::m#2 )
  to:mulf8s_prepared::@return
mulf8s_prepared::@return: scope:[mulf8s_prepared]  from mulf8s_prepared::@2
  [154] return 
  to:@return

(word()) mulf8u_prepared((byte) mulf8u_prepared::b)
mulf8u_prepared: scope:[mulf8u_prepared]  from mulf8s_prepared
  [155] *((const nomodify byte*) mulf8u_prepared::memB) ← (byte) mulf8u_prepared::b#0
  asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
  [157] (word) mulf8u_prepared::return#0 ← *((const nomodify byte*) mulf8u_prepared::memB) w= *((const nomodify byte*) mulf8u_prepared::resL)
  to:mulf8u_prepared::@return
mulf8u_prepared::@return: scope:[mulf8u_prepared]  from mulf8u_prepared
  [158] return 
  to:@return

(void()) mulf8u_prepare((byte) mulf8u_prepare::a)
mulf8u_prepare: scope:[mulf8u_prepare]  from mulf8s::mulf8s_prepare1
  [159] *((const nomodify byte*) mulf8u_prepare::memA) ← (byte) mulf8u_prepare::a#0
  asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
  to:mulf8u_prepare::@return
mulf8u_prepare::@return: scope:[mulf8u_prepare]  from mulf8u_prepare
  [161] return 
  to:@return

(void()) init()
init: scope:[init]  from main
  [162] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3
  [163] call plexInit 
  to:init::@1
init::@1: scope:[init]  from init init::@1
  [164] (byte) init::i#2 ← phi( init::@1/(byte) init::i#1 init/(byte) 0 )
  [165] *((const byte*) PLEX_PTR + (byte) init::i#2) ← (byte)(const byte*) SPRITE/(byte) $40
  [166] (byte~) init::$10 ← (byte) init::i#2 << (byte) 2
  [167] (byte~) init::$3 ← (byte~) init::$10 + (byte) init::i#2
  [168] (byte~) init::$4 ← (byte) $18 + (byte~) init::$3
  [169] (byte~) init::$9 ← (byte) init::i#2 << (byte) 1
  [170] *((const word*) PLEX_XPOS + (byte~) init::$9) ← (byte~) init::$4
  [171] (byte~) init::$5 ← (byte) init::i#2 << (byte) 3
  [172] (byte~) init::$6 ← (byte) $32 + (byte~) init::$5
  [173] *((const byte*) PLEX_YPOS + (byte) init::i#2) ← (byte~) init::$6
  [174] (byte) init::i#1 ← ++ (byte) init::i#2
  [175] if((byte) init::i#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(byte) 1) goto init::@1
  to:init::@2
init::@2: scope:[init]  from init::@1
  [176] *((const nomodify byte*) SPRITES_ENABLE) ← (byte) $ff
  to:init::@3
init::@3: scope:[init]  from init::@2 init::@3
  [177] (byte) init::i1#2 ← phi( init::@2/(byte) 0 init::@3/(byte) init::i1#1 )
  [178] *((const nomodify byte*) SPRITES_COLOR + (byte) init::i1#2) ← (const nomodify byte) GREEN
  [179] (byte) init::i1#1 ← ++ (byte) init::i1#2
  [180] if((byte) init::i1#1!=(byte) 8) goto init::@3
  to:init::@4
init::@4: scope:[init]  from init::@3
  [181] phi()
  [182] call mulf_init 
  to:init::@5
init::@5: scope:[init]  from init::@4
  [183] phi()
  [184] call memset 
  to:init::@return
init::@return: scope:[init]  from init::@5
  [185] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from init::@5
  [186] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [187] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [188] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [189] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [190] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [191] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1

(void()) mulf_init()
mulf_init: scope:[mulf_init]  from init::@4
  [192] phi()
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@3
  [193] (byte) mulf_init::x_2#3 ← phi( mulf_init/(byte) 0 mulf_init::@3/(byte) mulf_init::x_2#2 )
  [193] (byte*) mulf_init::sqr1_hi#2 ← phi( mulf_init/(const byte*) mulf_sqr1_hi+(byte) 1 mulf_init::@3/(byte*) mulf_init::sqr1_hi#1 )
  [193] (word) mulf_init::sqr#4 ← phi( mulf_init/(word) 0 mulf_init::@3/(word) mulf_init::sqr#1 )
  [193] (byte) mulf_init::c#2 ← phi( mulf_init/(byte) 0 mulf_init::@3/(byte) mulf_init::c#1 )
  [193] (byte*) mulf_init::sqr1_lo#2 ← phi( mulf_init/(const byte*) mulf_sqr1_lo+(byte) 1 mulf_init::@3/(byte*) mulf_init::sqr1_lo#1 )
  [194] if((byte*) mulf_init::sqr1_lo#2!=(const byte*) mulf_sqr1_lo+(word) $200) goto mulf_init::@2
  to:mulf_init::@5
mulf_init::@5: scope:[mulf_init]  from mulf_init::@1 mulf_init::@8
  [195] (byte) mulf_init::dir#2 ← phi( mulf_init::@1/(byte) $ff mulf_init::@8/(byte) mulf_init::dir#4 )
  [195] (byte*) mulf_init::sqr2_hi#2 ← phi( mulf_init::@1/(const byte*) mulf_sqr2_hi mulf_init::@8/(byte*) mulf_init::sqr2_hi#1 )
  [195] (byte) mulf_init::x_255#2 ← phi( mulf_init::@1/(byte) -1 mulf_init::@8/(byte) mulf_init::x_255#1 )
  [195] (byte*) mulf_init::sqr2_lo#2 ← phi( mulf_init::@1/(const byte*) mulf_sqr2_lo mulf_init::@8/(byte*) mulf_init::sqr2_lo#1 )
  [196] if((byte*) mulf_init::sqr2_lo#2!=(const byte*) mulf_sqr2_lo+(word) $1ff) goto mulf_init::@6
  to:mulf_init::@7
mulf_init::@7: scope:[mulf_init]  from mulf_init::@5
  [197] *((const byte*) mulf_sqr2_lo+(word) $1ff) ← *((const byte*) mulf_sqr1_lo+(word) $100)
  [198] *((const byte*) mulf_sqr2_hi+(word) $1ff) ← *((const byte*) mulf_sqr1_hi+(word) $100)
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@7
  [199] return 
  to:@return
mulf_init::@6: scope:[mulf_init]  from mulf_init::@5
  [200] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte*) mulf_sqr1_lo + (byte) mulf_init::x_255#2)
  [201] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte*) mulf_sqr1_hi + (byte) mulf_init::x_255#2)
  [202] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2
  [203] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2
  [204] if((byte) mulf_init::x_255#1!=(byte) 0) goto mulf_init::@9
  to:mulf_init::@8
mulf_init::@9: scope:[mulf_init]  from mulf_init::@6
  [205] phi()
  to:mulf_init::@8
mulf_init::@8: scope:[mulf_init]  from mulf_init::@6 mulf_init::@9
  [206] (byte) mulf_init::dir#4 ← phi( mulf_init::@6/(byte) 1 mulf_init::@9/(byte) mulf_init::dir#2 )
  [207] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2
  to:mulf_init::@5
mulf_init::@2: scope:[mulf_init]  from mulf_init::@1
  [208] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2
  [209] (byte~) mulf_init::$1 ← (byte) mulf_init::c#1 & (byte) 1
  [210] if((byte~) mulf_init::$1!=(byte) 0) goto mulf_init::@3
  to:mulf_init::@4
mulf_init::@4: scope:[mulf_init]  from mulf_init::@2
  [211] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3
  [212] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4
  to:mulf_init::@3
mulf_init::@3: scope:[mulf_init]  from mulf_init::@2 mulf_init::@4
  [213] (byte) mulf_init::x_2#2 ← phi( mulf_init::@2/(byte) mulf_init::x_2#3 mulf_init::@4/(byte) mulf_init::x_2#1 )
  [213] (word) mulf_init::sqr#3 ← phi( mulf_init::@2/(word) mulf_init::sqr#4 mulf_init::@4/(word) mulf_init::sqr#2 )
  [214] (byte~) mulf_init::$4 ← < (word) mulf_init::sqr#3
  [215] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$4
  [216] (byte~) mulf_init::$5 ← > (word) mulf_init::sqr#3
  [217] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$5
  [218] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2
  [219] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2
  [220] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2
  to:mulf_init::@1

(void()) plexInit((byte*) plexInit::screen)
plexInit: scope:[plexInit]  from init
  [221] phi()
  to:plexInit::plexSetScreen1
plexInit::plexSetScreen1: scope:[plexInit]  from plexInit
  [222] phi()
  to:plexInit::@1
plexInit::@1: scope:[plexInit]  from plexInit::@1 plexInit::plexSetScreen1
  [223] (byte) plexInit::i#2 ← phi( plexInit::@1/(byte) plexInit::i#1 plexInit::plexSetScreen1/(byte) 0 )
  [224] *((const byte*) PLEX_SORTED_IDX + (byte) plexInit::i#2) ← (byte) plexInit::i#2
  [225] (byte) plexInit::i#1 ← ++ (byte) plexInit::i#2
  [226] if((byte) plexInit::i#1!=(const nomodify byte) PLEX_COUNT-(byte) 1+(byte) 1) goto plexInit::@1
  to:plexInit::@return
plexInit::@return: scope:[plexInit]  from plexInit::@1
  [227] return 
  to:@return
