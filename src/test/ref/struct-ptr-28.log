Fixing struct type size struct Person to 17
Fixing struct type size struct Person to 17
Fixing struct type size struct Person to 17
Fixing struct type SIZE_OF struct Person to 17
Fixing struct type SIZE_OF struct Person to 17
Setting struct to load/store in variable affected by address-of (void~) main::$0 ← call print_person &(struct Person) main::jesper 
Setting struct to load/store in variable affected by address-of (void~) main::$1 ← call print_person &(struct Person) main::henriette 
Inlined call call _init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start::@1
  (byte) idx#20 ← phi( _start::@1/(byte) idx#22 )
  *(&(struct Person) main::jesper) ← memcpy(*(&(const struct Person) $0), struct Person, (const byte) SIZEOF_STRUCT_PERSON)
  (struct Person) main::jesper ← struct-unwound {*(&(struct Person) main::jesper)}
  (struct Person*) print_person::person#0 ← &(struct Person) main::jesper
  call print_person 
  to:main::@1
main::@1: scope:[main]  from main
  (byte) idx#11 ← phi( main/(byte) idx#7 )
  (byte) idx#0 ← (byte) idx#11
  *(&(struct Person) main::henriette) ← memcpy(*(&(const struct Person) $1), struct Person, (const byte) SIZEOF_STRUCT_PERSON)
  (struct Person) main::henriette ← struct-unwound {*(&(struct Person) main::henriette)}
  (struct Person*) print_person::person#1 ← &(struct Person) main::henriette
  call print_person 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) idx#12 ← phi( main::@1/(byte) idx#7 )
  (byte) idx#1 ← (byte) idx#12
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte) idx#13 ← phi( main::@2/(byte) idx#1 )
  (byte) idx#2 ← (byte) idx#13
  return 
  to:@return

(void()) print_person((struct Person*) print_person::person)
print_person: scope:[print_person]  from main main::@1
  (byte) idx#14 ← phi( main/(byte) idx#20 main::@1/(byte) idx#0 )
  (struct Person*) print_person::person#2 ← phi( main/(struct Person*) print_person::person#0 main::@1/(struct Person*) print_person::person#1 )
  (byte*~) print_person::$3 ← (byte*)(struct Person*) print_person::person#2
  (byte*~) print_person::$0 ← (byte*~) print_person::$3 + (const byte) OFFSET_STRUCT_PERSON_ID
  *((const nomodify byte*) SCREEN + (byte) idx#14) ← *((const byte*) DIGIT + *((byte*~) print_person::$0))
  (byte) idx#3 ← ++ (byte) idx#14
  *((const nomodify byte*) SCREEN + (byte) idx#3) ← (byte) ' '
  (byte) idx#4 ← ++ (byte) idx#3
  (byte) print_person::i#0 ← (byte) 0
  to:print_person::@1
print_person::@1: scope:[print_person]  from print_person print_person::@2
  (byte) idx#21 ← phi( print_person/(byte) idx#4 print_person::@2/(byte) idx#5 )
  (byte) print_person::i#2 ← phi( print_person/(byte) print_person::i#0 print_person::@2/(byte) print_person::i#1 )
  (struct Person*) print_person::person#3 ← phi( print_person/(struct Person*) print_person::person#2 print_person::@2/(struct Person*) print_person::person#4 )
  (byte*~) print_person::$4 ← (byte*)(struct Person*) print_person::person#3
  (byte*~) print_person::$1 ← (byte*~) print_person::$4 + (const byte) OFFSET_STRUCT_PERSON_NAME
  (bool~) print_person::$6 ← (number) 0 != *((byte*~) print_person::$1 + (byte) print_person::i#2)
  if((bool~) print_person::$6) goto print_person::@2
  to:print_person::@3
print_person::@2: scope:[print_person]  from print_person::@1
  (byte) idx#15 ← phi( print_person::@1/(byte) idx#21 )
  (byte) print_person::i#3 ← phi( print_person::@1/(byte) print_person::i#2 )
  (struct Person*) print_person::person#4 ← phi( print_person::@1/(struct Person*) print_person::person#3 )
  (byte*~) print_person::$5 ← (byte*)(struct Person*) print_person::person#4
  (byte*~) print_person::$2 ← (byte*~) print_person::$5 + (const byte) OFFSET_STRUCT_PERSON_NAME
  *((const nomodify byte*) SCREEN + (byte) idx#15) ← *((byte*~) print_person::$2 + (byte) print_person::i#3)
  (byte) idx#5 ← ++ (byte) idx#15
  (byte) print_person::i#1 ← ++ (byte) print_person::i#3
  to:print_person::@1
print_person::@3: scope:[print_person]  from print_person::@1
  (byte) idx#16 ← phi( print_person::@1/(byte) idx#21 )
  *((const nomodify byte*) SCREEN + (byte) idx#16) ← (byte) ' '
  (byte) idx#6 ← ++ (byte) idx#16
  to:print_person::@return
print_person::@return: scope:[print_person]  from print_person::@3
  (byte) idx#17 ← phi( print_person::@3/(byte) idx#6 )
  (byte) idx#7 ← (byte) idx#17
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  to:_start::_init1
_start::_init1: scope:[_start]  from _start
  (byte) idx#8 ← (byte) 0
  to:_start::@1
_start::@1: scope:[_start]  from _start::_init1
  (byte) idx#22 ← phi( _start::_init1/(byte) idx#8 )
  call main 
  to:_start::@2
_start::@2: scope:[_start]  from _start::@1
  (byte) idx#18 ← phi( _start::@1/(byte) idx#2 )
  (byte) idx#9 ← (byte) idx#18
  to:_start::@return
_start::@return: scope:[_start]  from _start::@2
  (byte) idx#19 ← phi( _start::@2/(byte) idx#9 )
  (byte) idx#10 ← (byte) idx#19
  return 
  to:@return

SYMBOL TABLE SSA
(const struct Person) $0 = { id: (byte) 4, name: (byte*) "jesper" }
(const struct Person) $1 = { id: (byte) 7, name: (byte*) "henriette" }
(const byte*) DIGIT[]  = (byte*) "0123456789"
(const byte) OFFSET_STRUCT_PERSON_ID = (byte) 0
(const byte) OFFSET_STRUCT_PERSON_NAME = (byte) 1
(byte) Person::id
(const byte*) Person::name[(number) $10]  = { fill( $10, 0) }
(const nomodify byte*) SCREEN = (byte*)(number) $400
(const byte) SIZEOF_STRUCT_PERSON = (byte) $11
(void()) _start()
(label) _start::@1
(label) _start::@2
(label) _start::@return
(label) _start::_init1
(byte) idx
(byte) idx#0
(byte) idx#1
(byte) idx#10
(byte) idx#11
(byte) idx#12
(byte) idx#13
(byte) idx#14
(byte) idx#15
(byte) idx#16
(byte) idx#17
(byte) idx#18
(byte) idx#19
(byte) idx#2
(byte) idx#20
(byte) idx#21
(byte) idx#22
(byte) idx#3
(byte) idx#4
(byte) idx#5
(byte) idx#6
(byte) idx#7
(byte) idx#8
(byte) idx#9
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(struct Person) main::henriette loadstore
(struct Person) main::jesper loadstore
(void()) print_person((struct Person*) print_person::person)
(byte*~) print_person::$0
(byte*~) print_person::$1
(byte*~) print_person::$2
(byte*~) print_person::$3
(byte*~) print_person::$4
(byte*~) print_person::$5
(bool~) print_person::$6
(label) print_person::@1
(label) print_person::@2
(label) print_person::@3
(label) print_person::@return
(byte) print_person::i
(byte) print_person::i#0
(byte) print_person::i#1
(byte) print_person::i#2
(byte) print_person::i#3
(struct Person*) print_person::person
(struct Person*) print_person::person#0
(struct Person*) print_person::person#1
(struct Person*) print_person::person#2
(struct Person*) print_person::person#3
(struct Person*) print_person::person#4

Adding number conversion cast (unumber) 0 in (bool~) print_person::$6 ← (number) 0 != *((byte*~) print_person::$1 + (byte) print_person::i#2)
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias idx#0 = idx#11 
Alias idx#1 = idx#12 idx#13 idx#2 
Alias print_person::person#3 = print_person::person#4 
Alias print_person::i#2 = print_person::i#3 
Alias idx#15 = idx#21 idx#16 
Alias idx#17 = idx#6 idx#7 
Alias idx#22 = idx#8 
Alias idx#10 = idx#9 idx#18 idx#19 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) idx#20 (byte) idx#22
Identical Phi Values (byte) idx#0 (byte) idx#17
Identical Phi Values (byte) idx#1 (byte) idx#17
Identical Phi Values (struct Person*) print_person::person#3 (struct Person*) print_person::person#2
Identical Phi Values (byte) idx#10 (byte) idx#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) print_person::$6 [24] if((byte) 0!=*((byte*~) print_person::$1 + (byte) print_person::i#2)) goto print_person::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Removing C-classic struct-unwound assignment [2] (struct Person) main::jesper ← struct-unwound {*(&(struct Person) main::jesper)}
Removing C-classic struct-unwound assignment [7] (struct Person) main::henriette ← struct-unwound {*(&(struct Person) main::henriette)}
Constant (const struct Person*) print_person::person#0 = &main::jesper
Constant (const struct Person*) print_person::person#1 = &main::henriette
Constant (const byte) print_person::i#0 = 0
Constant (const byte) idx#22 = 0
Successful SSA optimization Pass2ConstantIdentification
Converting *(pointer+n) to pointer[n] [15] *((const nomodify byte*) SCREEN + (byte) idx#14) ← *((const byte*) DIGIT + *((byte*~) print_person::$0))  -- *(print_person::$3 + OFFSET_STRUCT_PERSON_ID)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero print_person::$3 in [14] (byte*~) print_person::$0 ← (byte*~) print_person::$3 + (const byte) OFFSET_STRUCT_PERSON_ID
Simplifying expression containing zero print_person::$3 in [15] *((const nomodify byte*) SCREEN + (byte) idx#14) ← *((const byte*) DIGIT + *((byte*~) print_person::$3 + (const byte) OFFSET_STRUCT_PERSON_ID))
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte*~) print_person::$0 and assignment [7] (byte*~) print_person::$0 ← (byte*~) print_person::$3
Eliminating unused constant (const byte) OFFSET_STRUCT_PERSON_ID
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::_init1
Removing unused procedure block _start::@1
Removing unused procedure block _start::@2
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining Noop Cast [6] (byte*~) print_person::$3 ← (byte*)(struct Person*) print_person::person#2 keeping print_person::person#2
Inlining Noop Cast [12] (byte*~) print_person::$4 ← (byte*)(struct Person*) print_person::person#2 keeping print_person::person#2
Inlining Noop Cast [15] (byte*~) print_person::$5 ← (byte*)(struct Person*) print_person::person#2 keeping print_person::person#2
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings (const struct Person*) print_person::person#0
Inlining constant with var siblings (const struct Person*) print_person::person#1
Inlining constant with var siblings (const byte) print_person::i#0
Inlining constant with var siblings (const byte) idx#22
Constant inlined idx#22 = (byte) 0
Constant inlined print_person::person#0 = &(struct Person) main::jesper
Constant inlined print_person::i#0 = (byte) 0
Constant inlined print_person::person#1 = &(struct Person) main::henriette
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main::@2
CALL GRAPH
Calls in [main] to print_person:1 print_person:4 

Created 4 initial phi equivalence classes
Coalesced [3] idx#23 ← idx#17
Coalesced [12] idx#24 ← idx#4
Coalesced [23] print_person::i#4 ← print_person::i#1
Coalesced [24] idx#25 ← idx#5
Coalesced down to 4 phi equivalence classes
Culled Empty Block (label) main::@2

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *(&(struct Person) main::jesper) ← memcpy(*(&(const struct Person) $0), struct Person, (const byte) SIZEOF_STRUCT_PERSON)
  [1] call print_person 
  to:main::@1
main::@1: scope:[main]  from main
  [2] *(&(struct Person) main::henriette) ← memcpy(*(&(const struct Person) $1), struct Person, (const byte) SIZEOF_STRUCT_PERSON)
  [3] call print_person 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return

(void()) print_person((struct Person*) print_person::person)
print_person: scope:[print_person]  from main main::@1
  [5] (byte) idx#14 ← phi( main/(byte) 0 main::@1/(byte) idx#17 )
  [5] (struct Person*) print_person::person#2 ← phi( main/&(struct Person) main::jesper main::@1/&(struct Person) main::henriette )
  [6] *((const nomodify byte*) SCREEN + (byte) idx#14) ← *((const byte*) DIGIT + *((byte*)(struct Person*) print_person::person#2))
  [7] (byte) idx#3 ← ++ (byte) idx#14
  [8] *((const nomodify byte*) SCREEN + (byte) idx#3) ← (byte) ' '
  [9] (byte) idx#4 ← ++ (byte) idx#3
  to:print_person::@1
print_person::@1: scope:[print_person]  from print_person print_person::@2
  [10] (byte) idx#15 ← phi( print_person/(byte) idx#4 print_person::@2/(byte) idx#5 )
  [10] (byte) print_person::i#2 ← phi( print_person/(byte) 0 print_person::@2/(byte) print_person::i#1 )
  [11] (byte*~) print_person::$1 ← (byte*)(struct Person*) print_person::person#2 + (const byte) OFFSET_STRUCT_PERSON_NAME
  [12] if((byte) 0!=*((byte*~) print_person::$1 + (byte) print_person::i#2)) goto print_person::@2
  to:print_person::@3
print_person::@3: scope:[print_person]  from print_person::@1
  [13] *((const nomodify byte*) SCREEN + (byte) idx#15) ← (byte) ' '
  [14] (byte) idx#17 ← ++ (byte) idx#15
  to:print_person::@return
print_person::@return: scope:[print_person]  from print_person::@3
  [15] return 
  to:@return
print_person::@2: scope:[print_person]  from print_person::@1
  [16] (byte*~) print_person::$2 ← (byte*)(struct Person*) print_person::person#2 + (const byte) OFFSET_STRUCT_PERSON_NAME
  [17] *((const nomodify byte*) SCREEN + (byte) idx#15) ← *((byte*~) print_person::$2 + (byte) print_person::i#2)
  [18] (byte) idx#5 ← ++ (byte) idx#15
  [19] (byte) print_person::i#1 ← ++ (byte) print_person::i#2
  to:print_person::@1


VARIABLE REGISTER WEIGHTS
(byte) Person::id
(byte) idx
(byte) idx#14 12.0
(byte) idx#15 55.999999999999986
(byte) idx#17 3.25
(byte) idx#3 16.5
(byte) idx#4 22.0
(byte) idx#5 101.0
(void()) main()
(struct Person) main::henriette loadstore
(struct Person) main::jesper loadstore
(void()) print_person((struct Person*) print_person::person)
(byte*~) print_person::$1 202.0
(byte*~) print_person::$2 202.0
(byte) print_person::i
(byte) print_person::i#1 202.0
(byte) print_person::i#2 67.33333333333333
(struct Person*) print_person::person
(struct Person*) print_person::person#2

Initial phi equivalence classes
[ print_person::person#2 ]
[ idx#14 idx#17 ]
[ print_person::i#2 print_person::i#1 ]
[ idx#15 idx#4 idx#5 ]
Added variable idx#3 to live range equivalence class [ idx#3 ]
Added variable print_person::$1 to live range equivalence class [ print_person::$1 ]
Added variable print_person::$2 to live range equivalence class [ print_person::$2 ]
Added variable main::jesper to live range equivalence class [ main::jesper ]
Added variable main::henriette to live range equivalence class [ main::henriette ]
Complete equivalence classes
[ print_person::person#2 ]
[ idx#14 idx#17 ]
[ print_person::i#2 print_person::i#1 ]
[ idx#15 idx#4 idx#5 ]
[ idx#3 ]
[ print_person::$1 ]
[ print_person::$2 ]
[ main::jesper ]
[ main::henriette ]
Allocated zp[2]:2 [ print_person::person#2 ]
Allocated zp[1]:4 [ idx#14 idx#17 ]
Allocated zp[1]:5 [ print_person::i#2 print_person::i#1 ]
Allocated zp[1]:6 [ idx#15 idx#4 idx#5 ]
Allocated zp[1]:7 [ idx#3 ]
Allocated zp[2]:8 [ print_person::$1 ]
Allocated zp[2]:10 [ print_person::$2 ]
Allocated zp[17]:12 [ main::jesper ]
Allocated zp[17]:29 [ main::henriette ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Example of a struct containing an array
// It works on the surface - but illustrates the problem with structs containing arrays treating them like pointers.
// https://gitlab.com/camelot/kickc/issues/314
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_STRUCT_PERSON = $11
  .const OFFSET_STRUCT_PERSON_NAME = 1
  .label SCREEN = $400
  .label idx = 7
  .label idx_1 = 6
  .label idx_2 = 4
  // main
main: {
    .label jesper = $c
    .label henriette = $1d
    // [0] *(&(struct Person) main::jesper) ← memcpy(*(&(const struct Person) $0), struct Person, (const byte) SIZEOF_STRUCT_PERSON) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_PERSON
  !:
    lda __0-1,y
    sta jesper-1,y
    dey
    bne !-
    // [1] call print_person 
    // [5] phi from main to print_person [phi:main->print_person]
  print_person_from_main:
    // [5] phi (byte) idx#14 = (byte) 0 [phi:main->print_person#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx_2
    // [5] phi (struct Person*) print_person::person#2 = &(struct Person) main::jesper [phi:main->print_person#1] -- pssz1=pssc1 
    lda #<jesper
    sta.z print_person.person
    lda #>jesper
    sta.z print_person.person+1
    jsr print_person
    jmp __b1
    // main::@1
  __b1:
    // [2] *(&(struct Person) main::henriette) ← memcpy(*(&(const struct Person) $1), struct Person, (const byte) SIZEOF_STRUCT_PERSON) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_PERSON
  !:
    lda __1-1,y
    sta henriette-1,y
    dey
    bne !-
    // [3] call print_person 
    // [5] phi from main::@1 to print_person [phi:main::@1->print_person]
  print_person_from___b1:
    // [5] phi (byte) idx#14 = (byte) idx#17 [phi:main::@1->print_person#0] -- register_copy 
    // [5] phi (struct Person*) print_person::person#2 = &(struct Person) main::henriette [phi:main::@1->print_person#1] -- pssz1=pssc1 
    lda #<henriette
    sta.z print_person.person
    lda #>henriette
    sta.z print_person.person+1
    jsr print_person
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // print_person
// print_person(struct Person* zp(2) person)
print_person: {
    .label __1 = 8
    .label __2 = $a
    .label i = 5
    .label person = 2
    // [6] *((const nomodify byte*) SCREEN + (byte) idx#14) ← *((const byte*) DIGIT + *((byte*)(struct Person*) print_person::person#2)) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_(_deref_pbuz2) 
    ldx.z idx_2
    ldy #0
    lda (person),y
    tay
    lda DIGIT,y
    sta SCREEN,x
    // [7] (byte) idx#3 ← ++ (byte) idx#14 -- vbuz1=_inc_vbuz2 
    ldy.z idx_2
    iny
    sty.z idx
    // [8] *((const nomodify byte*) SCREEN + (byte) idx#3) ← (byte) ' ' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #' '
    ldy.z idx
    sta SCREEN,y
    // [9] (byte) idx#4 ← ++ (byte) idx#3 -- vbuz1=_inc_vbuz2 
    ldy.z idx
    iny
    sty.z idx_1
    // [10] phi from print_person to print_person::@1 [phi:print_person->print_person::@1]
  __b1_from_print_person:
    // [10] phi (byte) idx#15 = (byte) idx#4 [phi:print_person->print_person::@1#0] -- register_copy 
    // [10] phi (byte) print_person::i#2 = (byte) 0 [phi:print_person->print_person::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // print_person::@1
  __b1:
    // [11] (byte*~) print_person::$1 ← (byte*)(struct Person*) print_person::person#2 + (const byte) OFFSET_STRUCT_PERSON_NAME -- pbuz1=pbuz2_plus_vbuc1 
    lda #OFFSET_STRUCT_PERSON_NAME
    clc
    adc.z person
    sta.z __1
    lda #0
    adc.z person+1
    sta.z __1+1
    // [12] if((byte) 0!=*((byte*~) print_person::$1 + (byte) print_person::i#2)) goto print_person::@2 -- vbuc1_neq_pbuz1_derefidx_vbuz2_then_la1 
    ldy.z i
    lda (__1),y
    cmp #0
    bne __b2
    jmp __b3
    // print_person::@3
  __b3:
    // [13] *((const nomodify byte*) SCREEN + (byte) idx#15) ← (byte) ' ' -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #' '
    ldy.z idx_1
    sta SCREEN,y
    // [14] (byte) idx#17 ← ++ (byte) idx#15 -- vbuz1=_inc_vbuz2 
    ldy.z idx_1
    iny
    sty.z idx_2
    jmp __breturn
    // print_person::@return
  __breturn:
    // [15] return 
    rts
    // print_person::@2
  __b2:
    // [16] (byte*~) print_person::$2 ← (byte*)(struct Person*) print_person::person#2 + (const byte) OFFSET_STRUCT_PERSON_NAME -- pbuz1=pbuz2_plus_vbuc1 
    lda #OFFSET_STRUCT_PERSON_NAME
    clc
    adc.z person
    sta.z __2
    lda #0
    adc.z person+1
    sta.z __2+1
    // [17] *((const nomodify byte*) SCREEN + (byte) idx#15) ← *((byte*~) print_person::$2 + (byte) print_person::i#2) -- pbuc1_derefidx_vbuz1=pbuz2_derefidx_vbuz3 
    ldx.z idx_1
    ldy.z i
    lda (__2),y
    sta SCREEN,x
    // [18] (byte) idx#5 ← ++ (byte) idx#15 -- vbuz1=_inc_vbuz1 
    inc.z idx_1
    // [19] (byte) print_person::i#1 ← ++ (byte) print_person::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [10] phi from print_person::@2 to print_person::@1 [phi:print_person::@2->print_person::@1]
  __b1_from___b2:
    // [10] phi (byte) idx#15 = (byte) idx#5 [phi:print_person::@2->print_person::@1#0] -- register_copy 
    // [10] phi (byte) print_person::i#2 = (byte) print_person::i#1 [phi:print_person::@2->print_person::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
  DIGIT: .text "0123456789"
  .byte 0
  __0: .byte 4
  .text "jesper"
  .byte 0
  .fill 9, 0
  __1: .byte 7
  .text "henriette"
  .byte 0
  .fill 6, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *(&(struct Person) main::jesper) ← memcpy(*(&(const struct Person) $0), struct Person, (const byte) SIZEOF_STRUCT_PERSON) [ main::henriette ] (  [ main::henriette ] { }  ) always clobbers reg byte a reg byte y 
Statement [2] *(&(struct Person) main::henriette) ← memcpy(*(&(const struct Person) $1), struct Person, (const byte) SIZEOF_STRUCT_PERSON) [ main::henriette idx#17 ] (  [ main::henriette idx#17 ] { { idx#14 = idx#17 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ idx#14 idx#17 ]
Removing always clobbered register reg byte y as potential for zp[1]:4 [ idx#14 idx#17 ]
Statement [6] *((const nomodify byte*) SCREEN + (byte) idx#14) ← *((const byte*) DIGIT + *((byte*)(struct Person*) print_person::person#2)) [ main::henriette print_person::person#2 idx#14 ] ( print_person:1 [ main::henriette print_person::person#2 idx#14 ] { }  print_person:3 [ main::henriette print_person::person#2 idx#14 ] { { idx#14 = idx#17 } }  ) always clobbers reg byte a reg byte y 
Statement [8] *((const nomodify byte*) SCREEN + (byte) idx#3) ← (byte) ' ' [ main::henriette print_person::person#2 idx#3 ] ( print_person:1 [ main::henriette print_person::person#2 idx#3 ] { }  print_person:3 [ main::henriette print_person::person#2 idx#3 ] { { idx#14 = idx#17 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ idx#3 ]
Statement [11] (byte*~) print_person::$1 ← (byte*)(struct Person*) print_person::person#2 + (const byte) OFFSET_STRUCT_PERSON_NAME [ main::henriette print_person::person#2 print_person::i#2 idx#15 print_person::$1 ] ( print_person:1 [ main::henriette print_person::person#2 print_person::i#2 idx#15 print_person::$1 ] { }  print_person:3 [ main::henriette print_person::person#2 print_person::i#2 idx#15 print_person::$1 ] { { idx#14 = idx#17 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ print_person::i#2 print_person::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:6 [ idx#15 idx#4 idx#5 ]
Statement [12] if((byte) 0!=*((byte*~) print_person::$1 + (byte) print_person::i#2)) goto print_person::@2 [ main::henriette print_person::person#2 print_person::i#2 idx#15 ] ( print_person:1 [ main::henriette print_person::person#2 print_person::i#2 idx#15 ] { }  print_person:3 [ main::henriette print_person::person#2 print_person::i#2 idx#15 ] { { idx#14 = idx#17 } }  ) always clobbers reg byte a 
Statement [13] *((const nomodify byte*) SCREEN + (byte) idx#15) ← (byte) ' ' [ main::henriette idx#15 ] ( print_person:1 [ main::henriette idx#15 ] { }  print_person:3 [ main::henriette idx#15 ] { { idx#14 = idx#17 } }  ) always clobbers reg byte a 
Statement [16] (byte*~) print_person::$2 ← (byte*)(struct Person*) print_person::person#2 + (const byte) OFFSET_STRUCT_PERSON_NAME [ main::henriette print_person::person#2 print_person::i#2 idx#15 print_person::$2 ] ( print_person:1 [ main::henriette print_person::person#2 print_person::i#2 idx#15 print_person::$2 ] { }  print_person:3 [ main::henriette print_person::person#2 print_person::i#2 idx#15 print_person::$2 ] { { idx#14 = idx#17 } }  ) always clobbers reg byte a 
Statement [17] *((const nomodify byte*) SCREEN + (byte) idx#15) ← *((byte*~) print_person::$2 + (byte) print_person::i#2) [ main::henriette print_person::person#2 print_person::i#2 idx#15 ] ( print_person:1 [ main::henriette print_person::person#2 print_person::i#2 idx#15 ] { }  print_person:3 [ main::henriette print_person::person#2 print_person::i#2 idx#15 ] { { idx#14 = idx#17 } }  ) always clobbers reg byte a 
Statement [0] *(&(struct Person) main::jesper) ← memcpy(*(&(const struct Person) $0), struct Person, (const byte) SIZEOF_STRUCT_PERSON) [ main::henriette ] (  [ main::henriette ] { }  ) always clobbers reg byte a reg byte y 
Statement [2] *(&(struct Person) main::henriette) ← memcpy(*(&(const struct Person) $1), struct Person, (const byte) SIZEOF_STRUCT_PERSON) [ main::henriette idx#17 ] (  [ main::henriette idx#17 ] { { idx#14 = idx#17 } }  ) always clobbers reg byte a reg byte y 
Statement [6] *((const nomodify byte*) SCREEN + (byte) idx#14) ← *((const byte*) DIGIT + *((byte*)(struct Person*) print_person::person#2)) [ main::henriette print_person::person#2 idx#14 ] ( print_person:1 [ main::henriette print_person::person#2 idx#14 ] { }  print_person:3 [ main::henriette print_person::person#2 idx#14 ] { { idx#14 = idx#17 } }  ) always clobbers reg byte a reg byte y 
Statement [8] *((const nomodify byte*) SCREEN + (byte) idx#3) ← (byte) ' ' [ main::henriette print_person::person#2 idx#3 ] ( print_person:1 [ main::henriette print_person::person#2 idx#3 ] { }  print_person:3 [ main::henriette print_person::person#2 idx#3 ] { { idx#14 = idx#17 } }  ) always clobbers reg byte a 
Statement [11] (byte*~) print_person::$1 ← (byte*)(struct Person*) print_person::person#2 + (const byte) OFFSET_STRUCT_PERSON_NAME [ main::henriette print_person::person#2 print_person::i#2 idx#15 print_person::$1 ] ( print_person:1 [ main::henriette print_person::person#2 print_person::i#2 idx#15 print_person::$1 ] { }  print_person:3 [ main::henriette print_person::person#2 print_person::i#2 idx#15 print_person::$1 ] { { idx#14 = idx#17 } }  ) always clobbers reg byte a 
Statement [12] if((byte) 0!=*((byte*~) print_person::$1 + (byte) print_person::i#2)) goto print_person::@2 [ main::henriette print_person::person#2 print_person::i#2 idx#15 ] ( print_person:1 [ main::henriette print_person::person#2 print_person::i#2 idx#15 ] { }  print_person:3 [ main::henriette print_person::person#2 print_person::i#2 idx#15 ] { { idx#14 = idx#17 } }  ) always clobbers reg byte a 
Statement [13] *((const nomodify byte*) SCREEN + (byte) idx#15) ← (byte) ' ' [ main::henriette idx#15 ] ( print_person:1 [ main::henriette idx#15 ] { }  print_person:3 [ main::henriette idx#15 ] { { idx#14 = idx#17 } }  ) always clobbers reg byte a 
Statement [16] (byte*~) print_person::$2 ← (byte*)(struct Person*) print_person::person#2 + (const byte) OFFSET_STRUCT_PERSON_NAME [ main::henriette print_person::person#2 print_person::i#2 idx#15 print_person::$2 ] ( print_person:1 [ main::henriette print_person::person#2 print_person::i#2 idx#15 print_person::$2 ] { }  print_person:3 [ main::henriette print_person::person#2 print_person::i#2 idx#15 print_person::$2 ] { { idx#14 = idx#17 } }  ) always clobbers reg byte a 
Statement [17] *((const nomodify byte*) SCREEN + (byte) idx#15) ← *((byte*~) print_person::$2 + (byte) print_person::i#2) [ main::henriette print_person::person#2 print_person::i#2 idx#15 ] ( print_person:1 [ main::henriette print_person::person#2 print_person::i#2 idx#15 ] { }  print_person:3 [ main::henriette print_person::person#2 print_person::i#2 idx#15 ] { { idx#14 = idx#17 } }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ print_person::person#2 ] : zp[2]:2 , 
Potential registers zp[1]:4 [ idx#14 idx#17 ] : zp[1]:4 , reg byte x , 
Potential registers zp[1]:5 [ print_person::i#2 print_person::i#1 ] : zp[1]:5 , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ idx#15 idx#4 idx#5 ] : zp[1]:6 , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ idx#3 ] : zp[1]:7 , reg byte x , reg byte y , 
Potential registers zp[2]:8 [ print_person::$1 ] : zp[2]:8 , 
Potential registers zp[2]:10 [ print_person::$2 ] : zp[2]:10 , 
Potential registers zp[17]:12 [ main::jesper ] : zp[17]:12 , 
Potential registers zp[17]:29 [ main::henriette ] : zp[17]:29 , 

REGISTER UPLIFT SCOPES
Uplift Scope [print_person] 269.33: zp[1]:5 [ print_person::i#2 print_person::i#1 ] 202: zp[2]:8 [ print_person::$1 ] 202: zp[2]:10 [ print_person::$2 ] 0: zp[2]:2 [ print_person::person#2 ] 
Uplift Scope [] 179: zp[1]:6 [ idx#15 idx#4 idx#5 ] 16.5: zp[1]:7 [ idx#3 ] 15.25: zp[1]:4 [ idx#14 idx#17 ] 
Uplift Scope [Person] 
Uplift Scope [main] 0: zp[17]:12 [ main::jesper ] 0: zp[17]:29 [ main::henriette ] 

Uplifting [print_person] best 931 combination reg byte y [ print_person::i#2 print_person::i#1 ] zp[2]:8 [ print_person::$1 ] zp[2]:10 [ print_person::$2 ] zp[2]:2 [ print_person::person#2 ] 
Uplifting [] best 841 combination reg byte x [ idx#15 idx#4 idx#5 ] reg byte x [ idx#3 ] reg byte x [ idx#14 idx#17 ] 
Uplifting [Person] best 841 combination 
Uplifting [main] best 841 combination zp[17]:12 [ main::jesper ] zp[17]:29 [ main::henriette ] 
Allocated (was zp[2]:8) zp[2]:4 [ print_person::$1 ]
Allocated (was zp[2]:10) zp[2]:6 [ print_person::$2 ]
Allocated (was zp[17]:12) zp[17]:8 [ main::jesper ]
Allocated (was zp[17]:29) zp[17]:25 [ main::henriette ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Example of a struct containing an array
// It works on the surface - but illustrates the problem with structs containing arrays treating them like pointers.
// https://gitlab.com/camelot/kickc/issues/314
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_STRUCT_PERSON = $11
  .const OFFSET_STRUCT_PERSON_NAME = 1
  .label SCREEN = $400
  // main
main: {
    .label jesper = 8
    .label henriette = $19
    // [0] *(&(struct Person) main::jesper) ← memcpy(*(&(const struct Person) $0), struct Person, (const byte) SIZEOF_STRUCT_PERSON) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_PERSON
  !:
    lda __0-1,y
    sta jesper-1,y
    dey
    bne !-
    // [1] call print_person 
    // [5] phi from main to print_person [phi:main->print_person]
  print_person_from_main:
    // [5] phi (byte) idx#14 = (byte) 0 [phi:main->print_person#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi (struct Person*) print_person::person#2 = &(struct Person) main::jesper [phi:main->print_person#1] -- pssz1=pssc1 
    lda #<jesper
    sta.z print_person.person
    lda #>jesper
    sta.z print_person.person+1
    jsr print_person
    jmp __b1
    // main::@1
  __b1:
    // [2] *(&(struct Person) main::henriette) ← memcpy(*(&(const struct Person) $1), struct Person, (const byte) SIZEOF_STRUCT_PERSON) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_PERSON
  !:
    lda __1-1,y
    sta henriette-1,y
    dey
    bne !-
    // [3] call print_person 
    // [5] phi from main::@1 to print_person [phi:main::@1->print_person]
  print_person_from___b1:
    // [5] phi (byte) idx#14 = (byte) idx#17 [phi:main::@1->print_person#0] -- register_copy 
    // [5] phi (struct Person*) print_person::person#2 = &(struct Person) main::henriette [phi:main::@1->print_person#1] -- pssz1=pssc1 
    lda #<henriette
    sta.z print_person.person
    lda #>henriette
    sta.z print_person.person+1
    jsr print_person
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // print_person
// print_person(struct Person* zp(2) person)
print_person: {
    .label __1 = 4
    .label __2 = 6
    .label person = 2
    // [6] *((const nomodify byte*) SCREEN + (byte) idx#14) ← *((const byte*) DIGIT + *((byte*)(struct Person*) print_person::person#2)) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_(_deref_pbuz1) 
    ldy #0
    lda (person),y
    tay
    lda DIGIT,y
    sta SCREEN,x
    // [7] (byte) idx#3 ← ++ (byte) idx#14 -- vbuxx=_inc_vbuxx 
    inx
    // [8] *((const nomodify byte*) SCREEN + (byte) idx#3) ← (byte) ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // [9] (byte) idx#4 ← ++ (byte) idx#3 -- vbuxx=_inc_vbuxx 
    inx
    // [10] phi from print_person to print_person::@1 [phi:print_person->print_person::@1]
  __b1_from_print_person:
    // [10] phi (byte) idx#15 = (byte) idx#4 [phi:print_person->print_person::@1#0] -- register_copy 
    // [10] phi (byte) print_person::i#2 = (byte) 0 [phi:print_person->print_person::@1#1] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // print_person::@1
  __b1:
    // [11] (byte*~) print_person::$1 ← (byte*)(struct Person*) print_person::person#2 + (const byte) OFFSET_STRUCT_PERSON_NAME -- pbuz1=pbuz2_plus_vbuc1 
    lda #OFFSET_STRUCT_PERSON_NAME
    clc
    adc.z person
    sta.z __1
    lda #0
    adc.z person+1
    sta.z __1+1
    // [12] if((byte) 0!=*((byte*~) print_person::$1 + (byte) print_person::i#2)) goto print_person::@2 -- vbuc1_neq_pbuz1_derefidx_vbuyy_then_la1 
    lda (__1),y
    cmp #0
    bne __b2
    jmp __b3
    // print_person::@3
  __b3:
    // [13] *((const nomodify byte*) SCREEN + (byte) idx#15) ← (byte) ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // [14] (byte) idx#17 ← ++ (byte) idx#15 -- vbuxx=_inc_vbuxx 
    inx
    jmp __breturn
    // print_person::@return
  __breturn:
    // [15] return 
    rts
    // print_person::@2
  __b2:
    // [16] (byte*~) print_person::$2 ← (byte*)(struct Person*) print_person::person#2 + (const byte) OFFSET_STRUCT_PERSON_NAME -- pbuz1=pbuz2_plus_vbuc1 
    lda #OFFSET_STRUCT_PERSON_NAME
    clc
    adc.z person
    sta.z __2
    lda #0
    adc.z person+1
    sta.z __2+1
    // [17] *((const nomodify byte*) SCREEN + (byte) idx#15) ← *((byte*~) print_person::$2 + (byte) print_person::i#2) -- pbuc1_derefidx_vbuxx=pbuz1_derefidx_vbuyy 
    lda (__2),y
    sta SCREEN,x
    // [18] (byte) idx#5 ← ++ (byte) idx#15 -- vbuxx=_inc_vbuxx 
    inx
    // [19] (byte) print_person::i#1 ← ++ (byte) print_person::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [10] phi from print_person::@2 to print_person::@1 [phi:print_person::@2->print_person::@1]
  __b1_from___b2:
    // [10] phi (byte) idx#15 = (byte) idx#5 [phi:print_person::@2->print_person::@1#0] -- register_copy 
    // [10] phi (byte) print_person::i#2 = (byte) print_person::i#1 [phi:print_person::@2->print_person::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
  DIGIT: .text "0123456789"
  .byte 0
  __0: .byte 4
  .text "jesper"
  .byte 0
  .fill 9, 0
  __1: .byte 7
  .text "henriette"
  .byte 0
  .fill 6, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction print_person_from_main:
Removing instruction __b1:
Removing instruction print_person_from___b1:
Removing instruction __breturn:
Removing instruction __b1_from_print_person:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const struct Person) $0 = { id: (byte) 4, name: (byte*) "jesper" }
(const struct Person) $1 = { id: (byte) 7, name: (byte*) "henriette" }
(const byte*) DIGIT[]  = (byte*) "0123456789"
(const byte) OFFSET_STRUCT_PERSON_NAME = (byte) 1
(byte) Person::id
(const byte*) Person::name[(number) $10]  = { fill( $10, 0) }
(const nomodify byte*) SCREEN = (byte*) 1024
(const byte) SIZEOF_STRUCT_PERSON = (byte) $11
(byte) idx
(byte) idx#14 reg byte x 12.0
(byte) idx#15 reg byte x 55.999999999999986
(byte) idx#17 reg byte x 3.25
(byte) idx#3 reg byte x 16.5
(byte) idx#4 reg byte x 22.0
(byte) idx#5 reg byte x 101.0
(void()) main()
(label) main::@1
(label) main::@return
(struct Person) main::henriette loadstore zp[17]:25
(struct Person) main::jesper loadstore zp[17]:8
(void()) print_person((struct Person*) print_person::person)
(byte*~) print_person::$1 zp[2]:4 202.0
(byte*~) print_person::$2 zp[2]:6 202.0
(label) print_person::@1
(label) print_person::@2
(label) print_person::@3
(label) print_person::@return
(byte) print_person::i
(byte) print_person::i#1 reg byte y 202.0
(byte) print_person::i#2 reg byte y 67.33333333333333
(struct Person*) print_person::person
(struct Person*) print_person::person#2 person zp[2]:2

zp[2]:2 [ print_person::person#2 ]
reg byte x [ idx#14 idx#17 ]
reg byte y [ print_person::i#2 print_person::i#1 ]
reg byte x [ idx#15 idx#4 idx#5 ]
reg byte x [ idx#3 ]
zp[2]:4 [ print_person::$1 ]
zp[2]:6 [ print_person::$2 ]
zp[17]:8 [ main::jesper ]
zp[17]:25 [ main::henriette ]


FINAL ASSEMBLER
Score: 772

  // File Comments
// Example of a struct containing an array
// It works on the surface - but illustrates the problem with structs containing arrays treating them like pointers.
// https://gitlab.com/camelot/kickc/issues/314
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const SIZEOF_STRUCT_PERSON = $11
  .const OFFSET_STRUCT_PERSON_NAME = 1
  .label SCREEN = $400
  // main
main: {
    .label jesper = 8
    .label henriette = $19
    // jesper = { 4, "jesper" }
    // [0] *(&(struct Person) main::jesper) ← memcpy(*(&(const struct Person) $0), struct Person, (const byte) SIZEOF_STRUCT_PERSON) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_PERSON
  !:
    lda __0-1,y
    sta jesper-1,y
    dey
    bne !-
    // print_person(&jesper)
    // [1] call print_person 
    // [5] phi from main to print_person [phi:main->print_person]
    // [5] phi (byte) idx#14 = (byte) 0 [phi:main->print_person#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi (struct Person*) print_person::person#2 = &(struct Person) main::jesper [phi:main->print_person#1] -- pssz1=pssc1 
    lda #<jesper
    sta.z print_person.person
    lda #>jesper
    sta.z print_person.person+1
    jsr print_person
    // main::@1
    // henriette = { 7, "henriette" }
    // [2] *(&(struct Person) main::henriette) ← memcpy(*(&(const struct Person) $1), struct Person, (const byte) SIZEOF_STRUCT_PERSON) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_PERSON
  !:
    lda __1-1,y
    sta henriette-1,y
    dey
    bne !-
    // print_person(&henriette)
    // [3] call print_person 
    // [5] phi from main::@1 to print_person [phi:main::@1->print_person]
    // [5] phi (byte) idx#14 = (byte) idx#17 [phi:main::@1->print_person#0] -- register_copy 
    // [5] phi (struct Person*) print_person::person#2 = &(struct Person) main::henriette [phi:main::@1->print_person#1] -- pssz1=pssc1 
    lda #<henriette
    sta.z print_person.person
    lda #>henriette
    sta.z print_person.person+1
    jsr print_person
    // main::@return
    // }
    // [4] return 
    rts
}
  // print_person
// print_person(struct Person* zp(2) person)
print_person: {
    .label __1 = 4
    .label __2 = 6
    .label person = 2
    // SCREEN[idx++] = DIGIT[person->id]
    // [6] *((const nomodify byte*) SCREEN + (byte) idx#14) ← *((const byte*) DIGIT + *((byte*)(struct Person*) print_person::person#2)) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_(_deref_pbuz1) 
    ldy #0
    lda (person),y
    tay
    lda DIGIT,y
    sta SCREEN,x
    // SCREEN[idx++] = DIGIT[person->id];
    // [7] (byte) idx#3 ← ++ (byte) idx#14 -- vbuxx=_inc_vbuxx 
    inx
    // SCREEN[idx++] = ' '
    // [8] *((const nomodify byte*) SCREEN + (byte) idx#3) ← (byte) ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // SCREEN[idx++] = ' ';
    // [9] (byte) idx#4 ← ++ (byte) idx#3 -- vbuxx=_inc_vbuxx 
    inx
    // [10] phi from print_person to print_person::@1 [phi:print_person->print_person::@1]
    // [10] phi (byte) idx#15 = (byte) idx#4 [phi:print_person->print_person::@1#0] -- register_copy 
    // [10] phi (byte) print_person::i#2 = (byte) 0 [phi:print_person->print_person::@1#1] -- vbuyy=vbuc1 
    ldy #0
    // print_person::@1
  __b1:
    // for(byte i=0; person->name[i]; i++)
    // [11] (byte*~) print_person::$1 ← (byte*)(struct Person*) print_person::person#2 + (const byte) OFFSET_STRUCT_PERSON_NAME -- pbuz1=pbuz2_plus_vbuc1 
    lda #OFFSET_STRUCT_PERSON_NAME
    clc
    adc.z person
    sta.z __1
    lda #0
    adc.z person+1
    sta.z __1+1
    // [12] if((byte) 0!=*((byte*~) print_person::$1 + (byte) print_person::i#2)) goto print_person::@2 -- vbuc1_neq_pbuz1_derefidx_vbuyy_then_la1 
    lda (__1),y
    cmp #0
    bne __b2
    // print_person::@3
    // SCREEN[idx++] = ' '
    // [13] *((const nomodify byte*) SCREEN + (byte) idx#15) ← (byte) ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // SCREEN[idx++] = ' ';
    // [14] (byte) idx#17 ← ++ (byte) idx#15 -- vbuxx=_inc_vbuxx 
    inx
    // print_person::@return
    // }
    // [15] return 
    rts
    // print_person::@2
  __b2:
    // SCREEN[idx++] = person->name[i]
    // [16] (byte*~) print_person::$2 ← (byte*)(struct Person*) print_person::person#2 + (const byte) OFFSET_STRUCT_PERSON_NAME -- pbuz1=pbuz2_plus_vbuc1 
    lda #OFFSET_STRUCT_PERSON_NAME
    clc
    adc.z person
    sta.z __2
    lda #0
    adc.z person+1
    sta.z __2+1
    // [17] *((const nomodify byte*) SCREEN + (byte) idx#15) ← *((byte*~) print_person::$2 + (byte) print_person::i#2) -- pbuc1_derefidx_vbuxx=pbuz1_derefidx_vbuyy 
    lda (__2),y
    sta SCREEN,x
    // SCREEN[idx++] = person->name[i];
    // [18] (byte) idx#5 ← ++ (byte) idx#15 -- vbuxx=_inc_vbuxx 
    inx
    // for(byte i=0; person->name[i]; i++)
    // [19] (byte) print_person::i#1 ← ++ (byte) print_person::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [10] phi from print_person::@2 to print_person::@1 [phi:print_person::@2->print_person::@1]
    // [10] phi (byte) idx#15 = (byte) idx#5 [phi:print_person::@2->print_person::@1#0] -- register_copy 
    // [10] phi (byte) print_person::i#2 = (byte) print_person::i#1 [phi:print_person::@2->print_person::@1#1] -- register_copy 
    jmp __b1
}
  // File Data
  DIGIT: .text "0123456789"
  .byte 0
  __0: .byte 4
  .text "jesper"
  .byte 0
  .fill 9, 0
  __1: .byte 7
  .text "henriette"
  .byte 0
  .fill 6, 0

