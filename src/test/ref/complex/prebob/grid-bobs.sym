(label) @1
(label) @begin
(label) @end
(const byte*) BASIC_CHARSET = (byte*) 4096
(const byte*) BASIC_SCREEN = (byte*) 1024
(const byte*) BOB_CHARSET = (byte*) 8192
(const byte*) BOB_SCREEN = (byte*) 10240
(const byte) BOB_SHIFTS_X = (byte) 4
(const byte) BOB_SHIFTS_Y = (byte) 8
(const byte) BOB_SUBTABLE_SIZE = (const byte) BOB_SHIFTS_X*(const byte) BOB_SHIFTS_Y
(const byte*) BOB_TABLES[(number) 9*(number) 8*(number) 4]  = { fill( 9*8*4, 0) }
(const byte*) BORDERCOL = (byte*) 53280
(const byte*) CIA1_PORT_A = (byte*) 56320
(const byte*) CIA1_PORT_B = (byte*) 56321
(const byte*) CIA2_PORT_A = (byte*) 56576
(const byte*) CIA2_PORT_A_DDR = (byte*) 56578
(const byte*) D018 = (byte*) 53272
(const byte) KEY_SPACE = (byte) $3c
(const word*) MUL40[(number) $20]  = { fill( $20, 0) }
(const byte) NUM_BOBS = (byte) $19
(const byte*) PROTO_BOB[(number) 3*(number) 3*(number) 8]  = kickasm {{ .var pic = LoadPicture("smiley.png", List().add($000000, $ffffff))
	.for (var x=0;x<3; x++)
    	.for (var y=0; y<24; y++)
            .byte pic.getSinglecolorByte(x,y)
 }}
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const byte*) RASTER = (byte*) 53266
(const byte**) RENDERBOB_CLEANUP[(const byte) NUM_BOBS]  = { fill( NUM_BOBS, 0) }
(const byte) SIZEOF_POINTER = (byte) 2
(byte) bob_charset_next_id
(byte) bob_charset_next_id#14 bob_charset_next_id zp[1]:17 12.0
(byte) bob_charset_next_id#16 bob_charset_next_id zp[1]:17 1000.5454545454544
(byte) bob_charset_next_id#21 bob_charset_next_id zp[1]:17 275.5
(byte) bob_charset_next_id#23 bob_charset_next_id zp[1]:17 1400.3333333333335
(byte) bob_charset_next_id#30 bob_charset_next_id zp[1]:17 37.33333333333333
(byte) bob_charset_next_id#8 bob_charset_next_id zp[1]:17 4.0
(byte()) charsetFindOrAddGlyph((byte*) charsetFindOrAddGlyph::glyph , (byte*) charsetFindOrAddGlyph::charset)
(label) charsetFindOrAddGlyph::@1
(label) charsetFindOrAddGlyph::@2
(label) charsetFindOrAddGlyph::@3
(label) charsetFindOrAddGlyph::@4
(label) charsetFindOrAddGlyph::@5
(label) charsetFindOrAddGlyph::@6
(label) charsetFindOrAddGlyph::@7
(label) charsetFindOrAddGlyph::@8
(label) charsetFindOrAddGlyph::@9
(label) charsetFindOrAddGlyph::@return
(byte*) charsetFindOrAddGlyph::charset
(byte) charsetFindOrAddGlyph::found
(byte) charsetFindOrAddGlyph::found#2 reg byte a 10001.0
(byte*) charsetFindOrAddGlyph::glyph
(byte*) charsetFindOrAddGlyph::glyph#1 glyph zp[2]:25 2002.0
(byte*) charsetFindOrAddGlyph::glyph#10 glyph zp[2]:25 7400.200000000001
(byte*) charsetFindOrAddGlyph::glyph_cursor
(byte*) charsetFindOrAddGlyph::glyph_cursor#1 glyph_cursor zp[2]:19 20002.0
(byte*) charsetFindOrAddGlyph::glyph_cursor#11 glyph_cursor zp[2]:19 10000.307692307691
(byte) charsetFindOrAddGlyph::glyph_id
(byte) charsetFindOrAddGlyph::glyph_id#1 reg byte x 10001.0
(byte) charsetFindOrAddGlyph::glyph_id#11 reg byte x 1937.75
(byte) charsetFindOrAddGlyph::i
(byte) charsetFindOrAddGlyph::i#1 reg byte y 200002.0
(byte) charsetFindOrAddGlyph::i#2 reg byte y 166668.3333333333
(byte) charsetFindOrAddGlyph::i1
(byte) charsetFindOrAddGlyph::i1#1 reg byte y 20002.0
(byte) charsetFindOrAddGlyph::i1#2 reg byte y 16668.333333333332
(byte) charsetFindOrAddGlyph::return
(byte) charsetFindOrAddGlyph::return#1 reg byte a 2002.0
(byte()) keyboard_key_pressed((byte) keyboard_key_pressed::key)
(byte~) keyboard_key_pressed::$2 reg byte a 4.0
(label) keyboard_key_pressed::@1
(label) keyboard_key_pressed::@return
(byte) keyboard_key_pressed::colidx
(const byte) keyboard_key_pressed::colidx#0 colidx = (const byte) KEY_SPACE&(byte) 7
(byte) keyboard_key_pressed::key
(byte) keyboard_key_pressed::return
(byte) keyboard_key_pressed::return#0 reg byte a 6.0
(byte) keyboard_key_pressed::return#2 reg byte a 22.0
(byte) keyboard_key_pressed::return#3 reg byte a 22.0
(byte) keyboard_key_pressed::rowidx
(const byte) keyboard_key_pressed::rowidx#0 rowidx = (const byte) KEY_SPACE>>(byte) 3
(const byte*) keyboard_matrix_col_bitmask[(number) 8]  = { (byte) 1, (byte) 2, (byte) 4, (byte) 8, (byte) $10, (byte) $20, (byte) $40, (byte) $80 }
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 reg byte a 1.3333333333333333
(byte) keyboard_matrix_read::return#2 reg byte a 4.0
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(const byte*) keyboard_matrix_row_bitmask[(number) 8]  = { (byte) $fe, (byte) $fd, (byte) $fb, (byte) $f7, (byte) $ef, (byte) $df, (byte) $bf, (byte) $7f }
(void()) main()
(byte~) main::$15 reg byte a 22.0
(byte~) main::$17 reg byte a 22.0
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::col
(byte) main::col#1 col zp[1]:16 151.5
(byte) main::col#5 col zp[1]:16 13.466666666666667
(const signed word) main::colOffsetX = (signed word) $100
(const signed word) main::colOffsetY = (signed word) $1800
(signed word) main::origX
(signed word) main::origX#1 origX zp[2]:14 3.142857142857143
(signed word) main::origX#8 origX zp[2]:14 1.5
(const signed word) main::origY = (signed word) $a00
(byte) main::row
(byte) main::row#1 reg byte x 1501.5
(byte) main::row#2 reg byte x 250.25
(const signed word) main::rowOffsetX = (signed word) $c00
(signed word) main::rowOffsetY
(signed word) main::rowOffsetY#1 rowOffsetY zp[2]:2 3.6666666666666665
(signed word) main::rowOffsetY#10 rowOffsetY zp[2]:2 44.47826086956522
(signed word) main::rowX
(signed word) main::rowX#1 rowX zp[2]:4 50.5
(signed word) main::rowY
(signed word) main::rowY#1 rowY zp[2]:6 67.33333333333333
(label) main::toD0181
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(const byte) main::toD0181_return#0 toD0181_return = >(word)(const byte*) BOB_SCREEN&(word) $3fff*(byte) 4|>(word)(const byte*) BOB_CHARSET/(byte) 4&(byte) $f
(byte*) main::toD0181_screen
(label) main::toD0182
(byte*) main::toD0182_gfx
(byte) main::toD0182_return
(const byte) main::toD0182_return#0 toD0182_return = >(word)(const byte*) BASIC_SCREEN&(word) $3fff*(byte) 4|>(word)(const byte*) BASIC_CHARSET/(byte) 4&(byte) $f
(byte*) main::toD0182_screen
(label) main::vicSelectGfxBank1
(label) main::vicSelectGfxBank1_@1
(byte*) main::vicSelectGfxBank1_gfx
(label) main::vicSelectGfxBank1_toDd001
(byte*) main::vicSelectGfxBank1_toDd001_gfx
(byte) main::vicSelectGfxBank1_toDd001_return
(const byte) main::vicSelectGfxBank1_toDd001_return#0 vicSelectGfxBank1_toDd001_return = (byte) 3
(label) main::vicSelectGfxBank2
(label) main::vicSelectGfxBank2_@1
(byte*) main::vicSelectGfxBank2_gfx
(label) main::vicSelectGfxBank2_toDd001
(byte*) main::vicSelectGfxBank2_toDd001_gfx
(byte) main::vicSelectGfxBank2_toDd001_return
(const byte) main::vicSelectGfxBank2_toDd001_return#0 vicSelectGfxBank2_toDd001_return = (byte) 3
(signed word) main::x
(signed word) main::x#0 x zp[2]:4 24.153846153846153
(signed word) main::x#1 x_1 zp[2]:8 400.4
(signed word) main::x#2 x_1 zp[2]:8 620.8
(signed word) main::x#4 x zp[2]:4 22.0
(signed word) main::x#7 x_1 zp[2]:8 101.0
(signed word) main::y
(signed word) main::y#0 y zp[2]:6 21.642857142857142
(signed word) main::y#1 y_1 zp[2]:10 500.5
(signed word) main::y#2 y_1 zp[2]:10 517.3333333333334
(signed word) main::y#6 y_1 zp[2]:10 202.0
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) 0
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:25 22.0
(byte*) memset::dst#2 dst zp[2]:25 14.666666666666666
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(const byte*) BOB_SCREEN
(void()) mulf_init()
(byte~) mulf_init::$1 reg byte a 22.0
(byte~) mulf_init::$4 reg byte a 22.0
(byte~) mulf_init::$5 reg byte a 22.0
(label) mulf_init::@1
(label) mulf_init::@2
(label) mulf_init::@3
(label) mulf_init::@4
(label) mulf_init::@5
(label) mulf_init::@6
(label) mulf_init::@7
(label) mulf_init::@8
(label) mulf_init::@9
(label) mulf_init::@return
(byte) mulf_init::c
(byte) mulf_init::c#1 c zp[1]:18 2.5384615384615383
(byte) mulf_init::c#2 c zp[1]:18 11.0
(byte) mulf_init::dir
(byte) mulf_init::dir#2 dir zp[1]:21 4.125
(byte) mulf_init::dir#4 dir zp[1]:21 11.0
(word) mulf_init::sqr
(word) mulf_init::sqr#1 sqr zp[2]:30 11.0
(word) mulf_init::sqr#2 sqr zp[2]:30 22.0
(word) mulf_init::sqr#3 sqr zp[2]:30 9.166666666666666
(word) mulf_init::sqr#4 sqr zp[2]:30 5.5
(byte*) mulf_init::sqr1_hi
(byte*) mulf_init::sqr1_hi#1 sqr1_hi zp[2]:19 7.333333333333333
(byte*) mulf_init::sqr1_hi#2 sqr1_hi zp[2]:19 2.75
(byte*) mulf_init::sqr1_lo
(byte*) mulf_init::sqr1_lo#1 sqr1_lo zp[2]:32 22.0
(byte*) mulf_init::sqr1_lo#2 sqr1_lo zp[2]:32 3.142857142857143
(byte*) mulf_init::sqr2_hi
(byte*) mulf_init::sqr2_hi#1 sqr2_hi zp[2]:28 3.6666666666666665
(byte*) mulf_init::sqr2_hi#2 sqr2_hi zp[2]:28 8.25
(byte*) mulf_init::sqr2_lo
(byte*) mulf_init::sqr2_lo#1 sqr2_lo zp[2]:25 22.0
(byte*) mulf_init::sqr2_lo#2 sqr2_lo zp[2]:25 4.888888888888889
(byte) mulf_init::x_2
(byte) mulf_init::x_2#1 reg byte x 11.0
(byte) mulf_init::x_2#2 reg byte x 5.5
(byte) mulf_init::x_2#3 reg byte x 6.6000000000000005
(byte) mulf_init::x_255
(byte) mulf_init::x_255#1 reg byte x 6.6000000000000005
(byte) mulf_init::x_255#2 reg byte x 8.8
(const byte*) mulf_sqr1_hi[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr1_lo[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr2_hi[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr2_lo[(number) $200]  = { fill( $200, 0) }
(void()) prepareBobs()
(byte~) prepareBobs::$6 reg byte a 2002.0
(label) prepareBobs::@1
(label) prepareBobs::@10
(label) prepareBobs::@11
(label) prepareBobs::@12
(label) prepareBobs::@13
(label) prepareBobs::@2
(label) prepareBobs::@3
(label) prepareBobs::@4
(label) prepareBobs::@5
(label) prepareBobs::@6
(label) prepareBobs::@7
(label) prepareBobs::@8
(label) prepareBobs::@9
(label) prepareBobs::@return
(byte*) prepareBobs::bob_glyph
(byte*) prepareBobs::bob_glyph#1 bob_glyph zp[2]:25 500.5
(byte*) prepareBobs::bob_glyph#2 bob_glyph zp[2]:25 429.0
(byte*) prepareBobs::bob_table
(byte*) prepareBobs::bob_table#0 bob_table zp[2]:32 202.0
(byte*) prepareBobs::bob_table#1 bob_table zp[2]:32 667.3333333333334
(byte*) prepareBobs::bob_table#2 bob_table zp[2]:32 388.0
(byte) prepareBobs::bob_table_idx
(byte) prepareBobs::bob_table_idx#1 bob_table_idx zp[1]:21 40.4
(byte) prepareBobs::bob_table_idx#12 bob_table_idx zp[1]:21 19.11764705882353
(byte) prepareBobs::bob_table_idx#6 bob_table_idx zp[1]:21 11.0
(byte) prepareBobs::cell
(byte) prepareBobs::cell#1 cell zp[1]:23 2002.0
(byte) prepareBobs::cell#2 cell zp[1]:23 300.29999999999995
(byte) prepareBobs::shift_x
(byte) prepareBobs::shift_x#1 shift_x zp[1]:22 202.0
(byte) prepareBobs::shift_x#2 shift_x zp[1]:22 16.833333333333332
(byte) prepareBobs::shift_y
(byte) prepareBobs::shift_y#1 shift_y zp[1]:18 22.0
(byte) prepareBobs::shift_y#2 shift_y zp[1]:18 1.4347826086956523
(byte*) progress_cursor
(byte*) progress_cursor#15 progress_cursor zp[2]:14 11.0
(byte*) progress_cursor#17 progress_cursor zp[2]:14 201.4
(byte*) progress_cursor#24 progress_cursor zp[2]:14 71.11764705882355
(byte*) progress_cursor#31 progress_cursor zp[2]:14 37.33333333333333
(byte*) progress_cursor#8 progress_cursor zp[2]:14 4.0
(byte) progress_idx
(byte) progress_idx#10 progress_idx zp[1]:16 201.0
(byte) progress_idx#16 progress_idx zp[1]:16 11.0
(byte) progress_idx#25 progress_idx zp[1]:16 86.07142857142856
(byte) progress_idx#31 progress_idx zp[1]:16 37.33333333333333
(byte) progress_idx#8 progress_idx zp[1]:16 3.0
(void()) progress_inc()
(label) progress_inc::@1
(label) progress_inc::@2
(label) progress_inc::@return
(const byte*) progress_inc::progress_chars[]  = { (byte) $20, (byte) $65, (byte) $74, (byte) $75, (byte) $61, (byte) $f6, (byte) $e7, (byte) $ea, (byte) $e0 }
(void()) progress_init((byte*) progress_init::line)
(label) progress_init::@return
(byte*) progress_init::line
(void()) protoBobShiftDown()
(label) protoBobShiftDown::@1
(label) protoBobShiftDown::@2
(label) protoBobShiftDown::@3
(label) protoBobShiftDown::@return
(byte) protoBobShiftDown::i
(byte) protoBobShiftDown::i#1 reg byte x 202.0
(byte) protoBobShiftDown::i#2 reg byte x 161.6
(void()) protoBobShiftRight()
(byte~) protoBobShiftRight::$1 reg byte a 2002.0
(byte~) protoBobShiftRight::$5 reg byte a 2002.0
(byte~) protoBobShiftRight::$6 reg byte a 2002.0
(label) protoBobShiftRight::@1
(label) protoBobShiftRight::@2
(label) protoBobShiftRight::@3
(label) protoBobShiftRight::@4
(label) protoBobShiftRight::@5
(label) protoBobShiftRight::@6
(label) protoBobShiftRight::@7
(label) protoBobShiftRight::@return
(byte) protoBobShiftRight::carry
(byte) protoBobShiftRight::carry#1 carry zp[1]:27 111.22222222222223
(byte) protoBobShiftRight::carry#10 reg byte y 2002.0
(byte) protoBobShiftRight::carry#2 reg byte y 286.0
(byte) protoBobShiftRight::i
(byte) protoBobShiftRight::i#1 i zp[1]:24 1001.0
(byte) protoBobShiftRight::i#2 i zp[1]:24 231.0
(byte) protoBobShiftRight::j
(byte) protoBobShiftRight::j#1 reg byte x 2002.0
(byte) protoBobShiftRight::j#10 reg byte x 1001.0
(byte) protoBobShiftRight::j#2 reg byte x 2002.0
(byte) protoBobShiftRight::j#3 reg byte x 700.7
(byte) protoBobShiftRight::new_carry
(void()) renderBob((byte) renderBob::xpos , (byte) renderBob::ypos)
(byte*~) renderBob::$2 zp[2]:25 4.0
(byte~) renderBob::$4 reg byte a 4.0
(byte~) renderBob::$5 zp[1]:27 2.0
(byte~) renderBob::$6 reg byte a 4.0
(byte~) renderBob::$8 reg byte a 4.0
(label) renderBob::@return
(byte) renderBob::bob_table_idx
(byte) renderBob::bob_table_idx#0 bob_table_idx zp[1]:27 1.8181818181818186
(byte*) renderBob::screen
(byte*) renderBob::screen#0 screen zp[2]:25 1.4666666666666666
(byte) renderBob::x_char_offset
(byte) renderBob::x_char_offset#0 x_char_offset zp[1]:24 0.8
(byte) renderBob::xpos
(byte) renderBob::xpos#0 xpos zp[1]:22 100.5
(byte) renderBob::y_char_offset
(byte) renderBob::y_char_offset#0 reg byte a 4.0
(word) renderBob::y_offset
(word) renderBob::y_offset#0 y_offset zp[2]:25 4.0
(byte) renderBob::ypos
(byte) renderBob::ypos#0 ypos zp[1]:23 143.57142857142856
(void()) renderBobCleanup()
(byte~) renderBobCleanup::$1 reg byte a 202.0
(label) renderBobCleanup::@1
(label) renderBobCleanup::@return
(byte) renderBobCleanup::i
(byte) renderBobCleanup::i#1 reg byte x 151.5
(byte) renderBobCleanup::i#2 reg byte x 25.25
(byte*) renderBobCleanup::screen
(byte*) renderBobCleanup::screen#0 screen zp[2]:28 112.22222222222223
(byte**) renderBobCleanupNext
(byte**) renderBobCleanupNext#13 renderBobCleanupNext zp[2]:12 52.57142857142857
(byte**) renderBobCleanupNext#17 renderBobCleanupNext zp[2]:12 73.73333333333335
(byte**) renderBobCleanupNext#21 renderBobCleanupNext zp[2]:12 67.33333333333333
(void()) renderBobInit()
(word~) renderBobInit::$0 zp[2]:30 16.5
(word~) renderBobInit::$1 zp[2]:30 11.0
(byte~) renderBobInit::$4 reg byte a 22.0
(byte~) renderBobInit::$5 reg byte a 22.0
(word~) renderBobInit::$6 zp[2]:32 22.0
(word~) renderBobInit::$7 zp[2]:30 22.0
(label) renderBobInit::@1
(label) renderBobInit::@2
(label) renderBobInit::@return
(byte) renderBobInit::i
(byte) renderBobInit::i#1 reg byte x 16.5
(byte) renderBobInit::i#2 reg byte x 11.0
(byte) renderBobInit::y
(byte) renderBobInit::y#1 reg byte x 16.5
(byte) renderBobInit::y#2 reg byte x 4.714285714285714

zp[2]:2 [ main::rowOffsetY#10 main::rowOffsetY#1 ]
zp[2]:4 [ main::x#0 main::x#4 main::rowX#1 ]
zp[2]:6 [ main::y#0 main::rowY#1 ]
zp[2]:8 [ main::x#2 main::x#1 main::x#7 ]
zp[2]:10 [ main::y#2 main::y#1 main::y#6 ]
zp[2]:12 [ renderBobCleanupNext#17 renderBobCleanupNext#21 renderBobCleanupNext#13 ]
reg byte x [ main::row#2 main::row#1 ]
reg byte x [ renderBobCleanup::i#2 renderBobCleanup::i#1 ]
reg byte x [ renderBobInit::y#2 renderBobInit::y#1 ]
reg byte x [ renderBobInit::i#2 renderBobInit::i#1 ]
zp[2]:14 [ progress_cursor#15 progress_cursor#31 progress_cursor#24 progress_cursor#17 progress_cursor#8 main::origX#8 main::origX#1 ]
zp[1]:16 [ progress_idx#16 progress_idx#31 progress_idx#25 progress_idx#10 progress_idx#8 main::col#5 main::col#1 ]
zp[1]:17 [ bob_charset_next_id#23 bob_charset_next_id#14 bob_charset_next_id#16 bob_charset_next_id#30 bob_charset_next_id#21 bob_charset_next_id#8 ]
reg byte x [ charsetFindOrAddGlyph::glyph_id#11 charsetFindOrAddGlyph::glyph_id#1 ]
reg byte y [ charsetFindOrAddGlyph::i1#2 charsetFindOrAddGlyph::i1#1 ]
reg byte y [ charsetFindOrAddGlyph::i#2 charsetFindOrAddGlyph::i#1 ]
reg byte a [ charsetFindOrAddGlyph::found#2 ]
reg byte x [ protoBobShiftRight::j#3 protoBobShiftRight::j#10 protoBobShiftRight::j#2 protoBobShiftRight::j#1 ]
reg byte y [ protoBobShiftRight::carry#2 protoBobShiftRight::carry#10 ]
reg byte x [ protoBobShiftDown::i#2 protoBobShiftDown::i#1 ]
zp[1]:18 [ mulf_init::c#2 mulf_init::c#1 prepareBobs::shift_y#2 prepareBobs::shift_y#1 ]
zp[2]:19 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 charsetFindOrAddGlyph::glyph_cursor#11 charsetFindOrAddGlyph::glyph_cursor#1 ]
reg byte x [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
reg byte x [ mulf_init::x_255#2 mulf_init::x_255#1 ]
zp[1]:21 [ mulf_init::dir#2 mulf_init::dir#4 prepareBobs::bob_table_idx#6 prepareBobs::bob_table_idx#12 prepareBobs::bob_table_idx#1 ]
zp[1]:22 [ renderBob::xpos#0 prepareBobs::shift_x#2 prepareBobs::shift_x#1 ]
zp[1]:23 [ renderBob::ypos#0 prepareBobs::cell#2 prepareBobs::cell#1 ]
reg byte a [ keyboard_key_pressed::return#2 ]
reg byte a [ main::$15 ]
reg byte a [ keyboard_key_pressed::return#3 ]
reg byte a [ main::$17 ]
reg byte a [ keyboard_matrix_read::return#2 ]
reg byte a [ keyboard_key_pressed::$2 ]
reg byte a [ keyboard_key_pressed::return#0 ]
reg byte a [ keyboard_matrix_read::return#0 ]
zp[1]:24 [ renderBob::x_char_offset#0 protoBobShiftRight::i#2 protoBobShiftRight::i#1 ]
reg byte a [ renderBob::y_char_offset#0 ]
reg byte a [ renderBob::$8 ]
zp[2]:25 [ renderBob::y_offset#0 renderBob::$2 renderBob::screen#0 mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 prepareBobs::bob_glyph#2 prepareBobs::bob_glyph#1 charsetFindOrAddGlyph::glyph#10 charsetFindOrAddGlyph::glyph#1 memset::dst#2 memset::dst#1 ]
reg byte a [ renderBob::$4 ]
zp[1]:27 [ renderBob::$5 renderBob::bob_table_idx#0 protoBobShiftRight::carry#1 ]
reg byte a [ renderBob::$6 ]
reg byte a [ renderBobCleanup::$1 ]
zp[2]:28 [ renderBobCleanup::screen#0 mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
zp[2]:30 [ renderBobInit::$0 renderBobInit::$7 renderBobInit::$1 mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
zp[2]:32 [ renderBobInit::$6 mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 prepareBobs::bob_table#2 prepareBobs::bob_table#1 prepareBobs::bob_table#0 ]
reg byte a [ renderBobInit::$4 ]
reg byte a [ renderBobInit::$5 ]
reg byte a [ charsetFindOrAddGlyph::return#1 ]
reg byte a [ prepareBobs::$6 ]
reg byte a [ protoBobShiftRight::$1 ]
reg byte a [ protoBobShiftRight::$5 ]
reg byte a [ protoBobShiftRight::$6 ]
reg byte a [ mulf_init::$1 ]
reg byte a [ mulf_init::$4 ]
reg byte a [ mulf_init::$5 ]
